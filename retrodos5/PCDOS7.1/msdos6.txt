     1                                  ;*****************************************************************************
     2                                  ; MSDOS6.BIN (MSDOS 6.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 12/04/2024 - Retro DOS v4.2 ((Previous: 25/03/2024))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos6.s -l msdos6.lst -o MSDOS6.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 30/12/2022 - Retro DOS v4.2 Kernel ('msdos6.s')
    27                                  ; Modified from 'msdos5.s' (29/12/2022, Retro DOS v4.1 Kernel) file
    28                                  ; as below:
    29                                  ;	1) MS-DOS version has been changed to 6.22 (It was 5.0) 
    30                                  ;	2) Retro DOS version has been changed to 4.2 (It was 4.1)
    31                                  ; (The content has not been changed except kernel version because the kernel
    32                                  ;  code is already compatible with MSDOS 6.x and it is optimized before.)
    33                                  ;	(But IO.SYS part of the kernel is not same with Retro DOS v4.1 code.)	
    34                                  
    35                                  ; ----------------------------------------------------------------------------
    36                                  
    37                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    38                                  
    39                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    40                                  ;	(as included binary, 'MSDOS5.BIN') 
    41                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    42                                  ;	
    43                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    44                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    45                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    46                                        
    47                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    48                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    49                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    50                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    51                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    52                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    53                                  
    54                                  ;=============================================================================
    55                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    56                                  ;-----------------------------------------------------------------------------
    57                                  
    58                                  ; MSDOS 6.0 Kernel source files:
    59                                  ;	MSDATA.ASM, 
    60                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    61                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    62                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    63                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    64                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    65                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    66                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    67                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    68                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    69                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    70                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    71                                  ;
    72                                  ; MSDOS 2.0 Kernel source files:
    73                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    74                                  ;	MSCODE.ASM
    75                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    76                                  
    77                                  ;============================================================================
    78                                  ; DOSLINK
    79                                  ;============================================================================
    80                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    81                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    82                                  ;stdio time xenix xenix2
    83                                  
    84                                  ;============================================================================
    85                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    86                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    87                                  ;============================================================================
    88                                  ;
    89                                  ; ###########################################################################
    90                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    91                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    92                                  ; #			 Licensed to: Freeware version			    #
    93                                  ; ###########################################################################
    94                                  ;
    95                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    96                                  
    97                                  ; ---------------------------------------------------------------------------
    98                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    99                                  ; Format      :	Binary file
   100                                  ;============================================================================
   101                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
   102                                  ;----------------------------------------------------------------------------
   103                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
   104                                  
   105                                  ;============================================================================
   106                                  ; MSDOS.ASM
   107                                  ;============================================================================
   108                                  
   109                                  ;TITLE   Standard MSDOS
   110                                  ;NAME    MSDOS_2
   111                                  
   112                                  ; Number of disk I/O buffers
   113                                  
   114                                  ;	INCLUDE STDSW.ASM
   115                                  ;       INCLUDE MSHEAD.ASM
   116                                  ;       INCLUDE MSDATA.ASM
   117                                  
   118                                  ;	END
   119                                  
   120                                  ;============================================================================
   121                                  ; STDSW.ASM
   122                                  ;============================================================================
   123                                  
   124                                  TRUE    EQU     0FFFFH
   125                                  FALSE   EQU     ~TRUE ; NOT TRUE
   126                                  
   127                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   128                                  ; version of the operating system
   129                                  ;MSVER   EQU	false
   130                                  ;IBM     EQU	true
   131                                  ;WANG    EQU	FALSE
   132                                  ;ALTVECT EQU	FALSE
   133                                  
   134                                  ; Set this switch to cause DOS to move itself to the end of memory
   135                                  ;HIGHMEM EQU     FALSE
   136                                  
   137                                  ;	IF      IBM
   138                                  ESCCH    EQU	 0			;character to begin escape seq.
   139                                  CANCEL   EQU	 27			;Cancel with escape
   140                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   141                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   142                                  ZEROEXT  EQU	TRUE
   143                                  ;       ELSE
   144                                  ;       IF      WANG			;Are we assembling for WANG?
   145                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   146                                  ;       ELSE
   147                                  ;ESCCH	 EQU	1BH
   148                                  ;       ENDIF
   149                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   150                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   151                                  					;and off if not WANG
   152                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   153                                  					;and off
   154                                  ;ZEROEXT EQU	TRUE
   155                                  ;        ENDIF
   156                                  
   157                                  ;============================================================================
   158                                  ; MSHEAD.ASM
   159                                  ;============================================================================
   160                                  
   161                                  ;--------------------------------------------------------------
   162                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   163                                  ;--------------------------------------------------------------
   164                                  
   165                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   166                                  ;        by Microsoft MSDOS development group:
   167                                  ;           Tim Paterson (Ret.)
   168                                  ;           Aaron Reynolds
   169                                  ;           Nancy Panners (Parenting)
   170                                  ;           Mark Zbikowski
   171                                  ;           Chris Peters (BIOS) (ret.)
   172                                  
   173                                  ; ****************** Revision History *************************
   174                                  ;          >> EVERY change must noted below!! <<
   175                                  ;
   176                                  ; 0.34 12/29/80 General release, updating all past customers
   177                                  ; 0.42 02/25/81 32-byte directory entries added
   178                                  ; 0.56 03/23/81 Variable record and sector sizes
   179                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   180                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   181                                  ; 0.75 04/17/81 Improve and correct buffer handling
   182                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   183                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   184                                  ; 1.00 04/28/81 Renumber for general release
   185                                  ; 1.01 05/12/81 Fix bug in `STORE'
   186                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   187                                  ;               RENAME fix, general cleanup
   188                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   189                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   190                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   191                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   192                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   193                                  ;               of smaller improvements
   194                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   195                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   196                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   197                                  ;               zero extent field in IBM version (back to 1.01!)
   198                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   199                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   200                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   201                                  ;               is searched first when possible to minimize I/O
   202                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   203                                  ;               full sector write when file is growing
   204                                  ;      03/09/82 Multiple I/O buffers
   205                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   206                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   207                                  ;               must invalidate all buffers (disk and directory).
   208                                  ; 1.27 03/31/82 Installable device drivers
   209                                  ;                 Function call 47 - Get pointer to device table list
   210                                  ;                 Function call 48 - Assign CON AUX LIST
   211                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   212                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   213                                  ;               call entries.  Most CS relative references changed to SS
   214                                  ;               relative with an eye toward putting a portion of the DOS in
   215                                  ;               ROM.  DOS source also broken into header, data and code pieces
   216                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   217                                  ;               return the current values.
   218                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   219                                  ;               call to return flag location (call 29)
   220                                  ;      04/15/82 Volume ID attribute added
   221                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   222                                  ;               avoid a CS relative reference.
   223                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   224                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   225                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   226                                  ;               call 49.
   227                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   228                                  ;               address of DPB
   229                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   230                                  ;               writting to console device via file I/O.  Added a console
   231                                  ;               output attribute to devices.
   232                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   233                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   234                                  ;               as devices....  pipes, redirection now possible
   235                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   236                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   237                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   238                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   239                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   240                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   241                                  ;               out back about 1.27 or so (oops).  ARR
   242                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   243                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   244                                  ;               RMDIR Xenix calls
   245                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   246                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   247                                  ;               Frees up lots of memory.
   248                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   249                                  ;               system buffers
   250                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   251                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   252                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   253                                  ;               changed to set file handle environment.
   254                                  ; 2.00 08/01/82 Number for IBM release
   255                                  ;      01/19/83 No environ bug in EXEC
   256                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   257                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   258                                  ;      01/27/83 Growcnt fixed for 32-bits
   259                                  ;      01/27/83 Find-first problem after create
   260                                  ; 2.01 02/17/83 International DOS
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   264                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   265                                  ; 2.10 03/09/83 Start of NETWORK support
   266                                  ;		New Buffer structure
   267                                  ;		New Sytem file table structure
   268                                  ;		FCB moved to internal representation
   269                                  ;		DOS re-organized
   270                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   271                                  ;		device interface.
   272                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   273                                  ;               an IBM PC
   274                                  ; 2.50 09/12/83 More network stuff
   275                                  ;
   276                                  ; *************************************************************
   277                                  
   278                                  ; ----------------------------------------------------------------------------
   279                                  ; EQUATES
   280                                  
   281                                  ; Interrupt Entry Points:
   282                                  
   283                                  ; INTBASE:      ABORT
   284                                  ; INTBASE+4:    COMMAND
   285                                  ; INTBASE+8:    BASE EXIT ADDRESS
   286                                  ; INTBASE+C:    CONTROL-C ABORT
   287                                  ; INTBASE+10H:  FATAL ERROR ABORT
   288                                  ; INTBASE+14H:  BIOS DISK READ
   289                                  ; INTBASE+18H:  BIOS DISK WRITE
   290                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   291                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   292                                  ; INTBASE+40H:  Long jump to CALL entry point
   293                                  
   294                                  ENTRYPOINTSEG   EQU     0Ch
   295                                  MAXDIF          EQU     0FFFh
   296                                  SAVEXIT         EQU     10
   297                                  ; 06/05/2019
   298                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   299                                  
   300                                         ; INCLUDE DOSSYM.ASM
   301                                         ; INCLUDE DEVSYM.ASM
   302                                  
   303                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   304                                  ; PAGE
   305                                  ; There are three kinds of context resets that can occur during normal DOS
   306                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   307                                  ; be handles in a clean fashion that allows nested executions along with the
   308                                  ; ability to trap one's own errors.
   309                                  ;
   310                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   311                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   312                                  ;           follows:
   313                                  ;
   314                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   315                                  ;           Save it in static memory.
   316                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   317                                  ;
   318                                  ;           The interrupt service routine must preserve all registers and
   319                                  ;           return carry set iff the operation is to be aborted (via abort
   320                                  ;           system call), otherwise, carry is reset and the operation is
   321                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   322                                  ;           RESULTS.
   323                                  ;
   324                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   325                                  ;           restore INT int_ctrl_c from the saved vector.
   326                                  ;
   327                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   328                                  ;           also preserve registers and return one of three values in AL: 0 and
   329                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   330                                  ;           himself is not to issue the abort, rather, the dos will do it for
   331                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   332                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   333                                  ;
   334                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   335                                  ;           abort call.  This is reserved for knowledgeable system programs.
   336                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   337                                  
   338                                  ;SUBTTL SEGMENT DECLARATIONS
   339                                  
   340                                  ; The following are all of the segments used.  They are declared in the order
   341                                  ; that they should be placed in the executable
   342                                  
   343                                  ;
   344                                  ; segment ordering for MSDOS
   345                                  ;
   346                                  
   347                                  ;START           SEGMENT BYTE PUBLIC 'START'
   348                                  ;START           ENDS
   349                                  
   350                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   351                                  ;CONSTANTS       ENDS
   352                                  
   353                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   354                                  ;DATA            ENDS
   355                                  
   356                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   357                                  ;CODE            ENDS
   358                                  
   359                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   360                                  ;LAST            ENDS
   361                                  
   362                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   363                                  
   364                                  ; The following segment is defined such that the data/const classes appear
   365                                  ; before the code class for ROMification
   366                                  
   367                                  ;START		SEGMENT BYTE PUBLIC 'START'
   368                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   369                                  ;		JMP     DOSINIT
   370                                  ;START		ENDS
   371                                  
   372                                  ;============================================================================
   373                                  ; BPB.INC, MSDOS 6.0, 1991
   374                                  ;============================================================================
   375                                  ; 09/07/2018 - Retro DOS v3.0
   376                                  
   377                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   378                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   379                                  ;									   ;
   380                                  
   381                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   382                                  ;
   383                                  ;	The BPB contains information about the disk structure. It dates
   384                                  ;	back to the earliest FAT systems and so FAT information is
   385                                  ;	intermingled with physical driver information.
   386                                  ;
   387                                  ;	A boot sector contains a BPB for its device; for other disks
   388                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   389                                  ;	information in the DPB.
   390                                  ;
   391                                  ;	The BDS structure contains a BPB within it. 
   392                                  
   393                                  struc A_BPB
   394 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   395 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   396 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   397 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   398 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   399 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   400 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   401 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   402 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   403 0000000F ????                    .BPB_HEADS:		resw	1
   404 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   405 00000013 ????                    			resw	1
   406 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   407 00000017 ????                    			resw	1
   408 00000019 ????????????            			resb	6	; NOTE:  many times these
   409                                  ;					; 	 6 bytes are omitted
   410                                  ;					;	 when BPB manipulations
   411                                  ;					;	 are performed!
   412                                  .size:
   413                                  endstruc
   414                                  
   415                                  ;                                                                          ;
   416                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   417                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   418                                  
   419                                  ;============================================================================
   420                                  ; BUFFER.INC, MSDOS 6.0, 1991
   421                                  ;============================================================================
   422                                  ; 04/05/2019 - Retro DOS v4.0
   423                                  
   424                                  ; <Disk I/O Buffer Header>
   425                                  
   426                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   427                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   428                                  ;									   ;
   429                                  
   430                                  ; Field definition for I/O buffer information
   431                                  
   432                                  struc BUFFINFO
   433 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   434 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   435 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   436                                  				; SFT table index (bit 7 = 1)
   437                                  				; = FFH if buffer free
   438 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   439                                  				;	= 0 if Local device buffer
   440                                  				; Bit 6 = 1 if buffer dirty
   441                                  				; Bit 5 = Reserved
   442                                  				; Bit 4 = Search bit (bit 7 = 1)
   443                                  				; Bit 3 = 1 if buffer is DATA
   444                                  				; Bit 2 = 1 if buffer is DIR
   445                                  				; Bit 1 = 1 if buffer is FAT
   446                                  				; Bit 0 = Reserved
   447 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   448                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   449 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   450 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   451 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   452 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   453 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   454                                  .size:	; 20 bytes
   455                                  endstruc
   456                                  
   457                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   458                                  				;For buf_flags bit 7 = 1, this is the byte
   459                                  				;offset of the start of the buffer in
   460                                  				;the file pointed to by buf_ID. Thus
   461                                  				;the buffer starts at location
   462                                  				;buf_offset in the file and contains
   463                                  				;buf_fill bytes.
   464                                  
   465                                  BUFINSIZ        EQU     BUFFINFO.size
   466                                  
   467                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   468                                  
   469                                  ;Flag byte masks
   470                                  buf_isnet	EQU	10000000B
   471                                  buf_dirty	EQU	01000000B
   472                                  ;***
   473                                  buf_visit	EQU	00100000B
   474                                  ;***
   475                                  buf_snbuf	EQU	00010000B
   476                                  
   477                                  buf_isDATA	EQU	00001000B
   478                                  buf_isDIR	EQU	00000100B
   479                                  buf_isFAT	EQU	00000010B
   480                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   481                                  
   482                                  buf_NetID	EQU	BUFINSIZ
   483                                  
   484                                  ;                                                                          ;
   485                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   486                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   487                                  
   488                                  ;============================================================================
   489                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   490                                  ;============================================================================
   491                                  ; 04/05/2019 - Retro DOS v4.0
   492                                  
   493                                  ; <Control character definitions>
   494                                  
   495                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   496                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   497                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   498                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   499                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   500                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   501                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   502                                  c_HT	    EQU     09h 	; ^I ASCII tab
   503                                  
   504                                  ; <User stack inside of system call>
   505                                  ; Location of user registers relative user stack pointer
   506                                  
   507                                  struc	user_env   ; user_environ
   508 00000000 ????                    .user_AX: resw 1
   509 00000002 ????                    .user_BX: resw 1
   510 00000004 ????                    .user_CX: resw 1
   511 00000006 ????                    .user_DX: resw 1
   512 00000008 ????                    .user_SI: resw 1
   513 0000000A ????                    .user_DI: resw 1
   514 0000000C ????                    .user_BP: resw 1
   515 0000000E ????                    .user_DS: resw 1
   516 00000010 ????                    .user_ES: resw 1
   517 00000012 ????                    .user_IP: resw 1
   518 00000014 ????                    .user_CS: resw 1
   519 00000016 ????                    .user_F:  resw 1
   520                                  .size:
   521                                  endstruc
   522                                  
   523                                  ; ---- <Disk map> ----
   524                                  
   525                                  ;	MSDOS partitions the disk into 4 sections:
   526                                  ;
   527                                  ;  phys sector 0:   +-------------------+
   528                                  ;	|	    | boot/reserved	|
   529                                  ;	|	    +-------------------+
   530                                  ;	|	    |  File allocation	|
   531                                  ;	v	    |	   table(s)	|
   532                                  ;		    |  (multiple copies |
   533                                  ;		    |	  are kept)	|
   534                                  ;		    +-------------------+
   535                                  ;		    |	  Directory	|
   536                                  ;		    +-------------------+
   537                                  ;		    |	  File space	|
   538                                  ;		    +-------------------+
   539                                  ;		    |	Unaddressable	|
   540                                  ;		    |  (to end of disk) |
   541                                  ;		    +-------------------+
   542                                  ;
   543                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   544                                  ; adjusted to maximize the file space addressable.
   545                                  
   546                                  ; <File allocation Table information>
   547                                  
   548                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   549                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   550                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   551                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   552                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   553                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   554                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   555                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   556                                  ; The first available allocation unit is assigned entry number two, and even
   557                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   558                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   559                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   560                                  ; the next cluster in the file.
   561                                  ;
   562                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   563                                  ; do because these clusters show as allocated, but are not part of any
   564                                  ; allocation chain and thus will never be allocated to a file.	A particular
   565                                  ; number is selected so that disk checking programs know what to do (ie.  a
   566                                  ; cluster with entry FF7H which is not in a chain is not an error).
   567                                  
   568                                  ;**	Character Type Flags
   569                                  ;
   570                                  ;	These flags are used in a lookup table indexed by the character code.
   571                                  ;	They're used to quickly classify characters when parsing paths.
   572                                  ;	I think that these are only used to parse FCBs - jgl
   573                                  
   574                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   575                                  FDELIM	equ 2		; is a delimiter
   576                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   577                                  FFCB	equ 8		; is valid in an FCB
   578                                  
   579                                  ;** Bit definitions for DOS_FLAG
   580                                  ;
   581                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   582                                  ;	  $open to indicate to the redirector that this open is being made
   583                                  ;	  by an exec call.
   584                                  ;
   585                                  ; Bit 2
   586                                  ;
   587                                  ; M003, M027:
   588                                  ;
   589                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   590                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   591                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   592                                  ; user program in the case of an Exec call. The next call to DOS will turn
   593                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   594                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   595                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   596                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   597                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   598                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   599                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   600                                  ; Bit 2 will be unconditionally cleared here.
   601                                  ;
   602                                  ; M009, M027:
   603                                  ;
   604                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   605                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   606                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   607                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   608                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   609                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   610                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   611                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   612                                  ; Bit 2 will be unconditionally cleared here.
   613                                  
   614                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   615                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   616                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   617                                  
   618                                  ;============================================================================
   619                                  ; VECTOR.INC, MSDOS 6.0, 1991
   620                                  ;============================================================================
   621                                  ; 04/05/2019 - Retro DOS v4.0
   622                                  
   623                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   624                                  
   625                                  ; <interrupt definitions>
   626                                  
   627                                  INTTAB          EQU     20H
   628                                  INTBASE         EQU     4 * INTTAB
   629                                  ENTRYPOINT      EQU     INTBASE+40H
   630                                  
   631                                  ;	IF      ALTVECT
   632                                  ;ALTTAB  EQU     0F0H
   633                                  ;ALTBASE EQU     4 * ALTTAB
   634                                  ;	ENDIF
   635                                  
   636                                  ;
   637                                  ; interrupt assignments
   638                                  ;
   639                                  ;	IF	NOT ALTVECT
   640                                  int_abort	    EQU     INTTAB	; abort process
   641                                  int_command	    EQU     int_abort+1 ; call MSDOS
   642                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   643                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   644                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   645                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   646                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   647                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   648                                  					; resident
   649                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   650                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   651                                  ;									   ;
   652                                  int_spooler	    EQU     int_abort+8 ; spooler call
   653                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   654                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   655                                  ;									   ;
   656                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   657                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   658                                  ;	ELSE
   659                                  ;int_abort	    EQU     INTTAB	; abort process
   660                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   661                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   662                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   663                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   664                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   665                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   666                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   667                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   668                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   669                                  ;									   ;
   670                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   671                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   672                                  ;									   ;
   673                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	ENDIF
   676                                  
   677                                  addr_int_abort		EQU    4 * int_abort
   678                                  addr_int_command	EQU    4 * int_command
   679                                  addr_int_terminate	EQU    4 * int_terminate
   680                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   681                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   682                                  addr_int_disk_read	EQU    4 * int_disk_read
   683                                  addr_int_disk_write	EQU    4 * int_disk_write
   684                                  addr_int_keep_process	EQU    4 * int_keep_process
   685                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   686                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   687                                  ;									   ;
   688                                  addr_int_spooler	EQU    4 * int_spooler
   689                                  addr_int_fastcon	EQU    4 * int_fastcon
   690                                  addr_int_ibm		EQU    4 * int_IBM
   691                                  ;									   ;
   692                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   693                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   694                                  
   695                                  ;============================================================================
   696                                  ; DIRENT.INC, MSDOS 6.0, 1991
   697                                  ;============================================================================
   698                                  ; 04/05/2019 - Retro DOS v4.0
   699                                  
   700                                  ; BREAK <Directory entry>
   701                                  
   702                                  ;
   703                                  ;       +---------------------------+
   704                                  ;       |  (12 BYTE) filename/ext   |       0       0
   705                                  ;       +---------------------------+
   706                                  ;       |     (BYTE) attributes     |       11      B
   707                                  ;       +---------------------------+
   708                                  ;       |    (10 BYTE) reserved     |       12      C
   709                                  ;       +---------------------------+
   710                                  ;       | (WORD) time of last write |       22      16
   711                                  ;       +---------------------------+
   712                                  ;       | (WORD) date of last write |       24      18
   713                                  ;       +---------------------------+
   714                                  ;       |   (WORD) First cluster    |       26      1A
   715                                  ;       +---------------------------+
   716                                  ;       |     (DWORD) file size     |       28      1C
   717                                  ;       +---------------------------+
   718                                  ;
   719                                  ;   First byte of filename  = E5 -> free directory entry
   720                                  ;                           = 00 -> end of allocated directory
   721                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   722                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   723                                  ;
   724                                  struc dir_entry
   725 00000000 <res Bh>                .dir_name:	resb 11			; file name
   726 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   727 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   728 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   729 00000010 ??                      .dir_attr2:	resb 1			; reserved
   730 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   731 00000016 ????                    .dir_time:	resw 1			; time of last write
   732 00000018 ????                    .dir_date:	resw 1			; date of last write
   733 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   734 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   735 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   736                                  .size:
   737                                  endstruc
   738                                  
   739                                  attr_read_only      EQU      1h
   740                                  attr_hidden         EQU      2h
   741                                  attr_system         EQU      4h
   742                                  attr_volume_id      EQU      8h
   743                                  attr_directory      EQU     10h
   744                                  attr_archive        EQU     20h
   745                                  attr_device	    EQU     40h	; This is a VERY special bit.
   746                                  				;   NO directory entry on a disk EVER
   747                                  				;   has this bit set. It is set non-zero
   748                                  				;   when a device is found by GETPATH
   749                                  
   750                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   751                                                                          ; OR of hard attributes for FINDENTRY
   752                                  
   753                                  attr_ignore         EQU     attr_read_only+attr_archive
   754                                                                          ; ignore this(ese) attribute(s)
   755                                                                          ; during search first/next
   756                                  
   757                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   758                                                                          ; changeable via CHMOD
   759                                  
   760                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   761                                  
   762                                  ;============================================================================
   763                                  ; DPB.INC, MSDOS 6.0, 1991
   764                                  ;============================================================================
   765                                  ; 24/04/2019 - Retro DOS v4.0
   766                                  
   767                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   768                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   769                                  
   770                                  ; ---------------------------------------------------------------------------
   771                                  ;**	DPB - Drive Parameter Block
   772                                  ;
   773                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   774                                  ;	possibly inaccurate deductions from code study... - jgl
   775                                  ;
   776                                  ;	The DPB is DOS's main structure for describing block devices.
   777                                  ;	It contains info about the "Drive" intermingled with info about
   778                                  ;	the FAT file system which is presumably on the drive.  I don't know
   779                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   780                                  ;
   781                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   782                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   783                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   784                                  ; ---------------------------------------------------------------------------
   785                                  
   786                                  struc	DPB
   787 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   788 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   789 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   790 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   791 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   792 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   793 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   794 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   795 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   796 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   797                                  ; MSDOS 3.3
   798                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   799                                  ; MSDOS 6.0
   800 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   801 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   802 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   803 00000017 ??                      .MEDIA:		resb 1		; Media byte
   804 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   805                                  				; check the first time this DPB is used
   806 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   807 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   808 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   809                                  .size:
   810                                  endstruc
   811                                  
   812                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   813                                  
   814                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   815                                  
   816                                  ;                                                                          ;
   817                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   818                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   819                                  
   820                                  ;============================================================================
   821                                  ; SF.INC, MSDOS 6.0, 1991
   822                                  ;============================================================================
   823                                  ; 25/04/2019 - Retro DOS v4.0
   824                                  ; 07/07/2018 - Retro DOS v3.0
   825                                  
   826                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   827                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   828                                  ;                                                                          ;
   829                                  
   830                                  ; ---------------------------------------------------------------------------
   831                                  ;**	SF.INC - System File Table
   832                                  ;
   833                                  ;   AN000   version 4.00   Jan. 1988
   834                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   835                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   836                                  ; ---------------------------------------------------------------------------
   837                                  ;**	System File Table SuperStructure
   838                                  ;
   839                                  ;	The system file table entries are allocated in contiguous groups.
   840                                  ;	There may be more than one such groups; the SF "superstructure"
   841                                  ;	tracks the groups.
   842                                  ; ---------------------------------------------------------------------------
   843                                  
   844                                  struc	SFT
   845 00000000 ????????                .SFLink:	resd 1
   846 00000004 ????                    .SFCount:	resw 1		; number of entries
   847 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   848                                  .size:
   849                                  endstruc
   850                                  
   851                                  ; ---------------------------------------------------------------------------
   852                                  ;**	System file table entry
   853                                  ;
   854                                  ;	These are the structures which are at SFTABLE in the SF structure.
   855                                  ; ---------------------------------------------------------------------------
   856                                  
   857                                  ; 25/04/2019 - Retro DOS v4.0
   858                                  
   859                                  struc SF_ENTRY
   860 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   861                                  				;   if FCB then ref count
   862 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   863 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   864 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   865                                  				; Bit 15 = 1 if remote file
   866                                  				;	 = 0 if local file or device
   867                                  				; Bit 14 = 1 if date/time is not to be
   868                                  				;   set from clock at CLOSE.  Set by
   869                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   870                                  				;   other reseters of the dirty bit
   871                                  				;   (WRITE)
   872                                  				; Bit 13 = Pipe bit (reserved)
   873                                  				;
   874                                  				; Bits 0-7 (old FCB_devid bits)
   875                                  				; If remote file or local file, bit
   876                                  				; 6=0 if dirty Device ID number, bits
   877                                  				; 0-5 if local file.
   878                                  				; bit 7=0 for local file, bit 7
   879                                  				;      =1 for local I/O device
   880                                  				; If local I/O device, bit 6=0 if EOF (input)
   881                                  				;		Bit 5=1 if Raw mode
   882                                  				;		Bit 0=1 if console input device
   883                                  				;		Bit 1=1 if console output device
   884                                  				;		Bit 2=1 if null device
   885                                  				;		Bit 3=1 if clock device
   886 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   887                                  				; to device header if local device,
   888                                  				; points to net device header if
   889                                  				; remote
   890 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   891 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   892 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   893 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   894 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   895                                  
   896                                  ; Starting here, the next 7 bytes may be used by the file system to store
   897                                  ; an ID
   898                                  
   899                                  ; 09/07/2018 - Retro DOS v3.0
   900                                  
   901                                  ; MSDOS 3.3 SF.INC, 1987
   902                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   903                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   904                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   905                                  ;				; for this file
   906                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   907                                  
   908                                  ; MSDOS 6.0, SF.INC, 1991
   909 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   910 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   911                                  				; for this file
   912 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   913                                  
   914                                  ; End of 7 bytes of file-system specific info.
   915                                  
   916 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   917                                  				; directory entry.  This is used by
   918                                  				; close to detect file deleted and
   919                                  				; disk changed errors.
   920                                  ; SHARING INFO
   921 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   922 0000002F ????                    .sf_UID:	resw	1
   923 00000031 ????                    .sf_PID:	resw	1
   924 00000033 ????                    .sf_MFT:	resw	1
   925                                  
   926                                  ; MSDOS 6.0, SF.INC, 1991
   927 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   928 00000037 ????????                .sf_IFS_HDR:	resd	1
   929                                  
   930                                  .size:
   931                                  endstruc
   932                                  
   933                                  ; 20/07/2018
   934                                  ; MSDOS 3.3, SF.INC, 1987
   935                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   936                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   937                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   938                                  ; MSDOS 6.0, SF.INC, 1991
   939                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   940                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   941                                  
   942                                  ; 19/07/2018
   943                                  ; MSDOS 3.3, SF.INC, 1987
   944                                  
   945                                  sf_default_number  EQU	5
   946                                  
   947                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   948                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   949                                  ; by placing a -1 in the ref_count field.
   950                                  
   951                                  sf_busy EQU -1
   952                                  
   953                                  ; mode mask for FCB detection
   954                                  sf_isFCB		EQU	1000000000000000B
   955                                  
   956                                  ; Flag word masks
   957                                  sf_isnet		EQU	1000000000000000B
   958                                  sf_close_nodate 	EQU	0100000000000000B
   959                                  sf_pipe 		EQU	0010000000000000B
   960                                  sf_no_inherit		EQU	0001000000000000B
   961                                  sf_net_spool		EQU	0000100000000000B
   962                                  
   963                                  ; 25/04/2019
   964                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   965                                  
   966                                  ; ---------------------------------------------------------------------------
   967                                  ; Local file/device flag masks
   968                                  ; ---------------------------------------------------------------------------
   969                                  
   970                                  devid_file_clean        EQU     40h     ; true if file and not written
   971                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   972                                  
   973                                  devid_device            EQU     80h     ; true if a device
   974                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   975                                  devid_device_raw        EQU     20h     ; true if in raw mode
   976                                  devid_device_special    EQU     10h     ; true if special device
   977                                  devid_device_clock      EQU     08h     ; true if clock device
   978                                  devid_device_null       EQU     04h     ; true if null device
   979                                  devid_device_con_out    EQU     02h     ; true if console output
   980                                  devid_device_con_in     EQU     01h     ; true if console input
   981                                  
   982                                  ; ---------------------------------------------------------------------------
   983                                  ; structure of devid field as returned by IOCTL is:
   984                                  ;
   985                                  ;       BIT     7   6   5   4   3   2   1   0
   986                                  ;             |---|---|---|---|---|---|---|---|
   987                                  ;             | I | E | R | S | I | I | I | I |
   988                                  ;             | S | O | A | P | S | S | S | S |
   989                                  ;             | D | F | W | E | C | N | C | C |
   990                                  ;             | E |   |   | C | L | U | O | I |
   991                                  ;             | V |   |   | L | K | L | T | N |
   992                                  ;             |---|---|---|---|---|---|---|---|
   993                                  ;       ISDEV = 1 if this channel is a device
   994                                  ;             = 0 if this channel is a disk file
   995                                  ;
   996                                  ;       If ISDEV = 1
   997                                  ;
   998                                  ;             EOF = 0 if End Of File on input
   999                                  ;             RAW = 1 if this device is in Raw mode
  1000                                  ;                 = 0 if this device is cooked
  1001                                  ;             ISCLK = 1 if this device is the clock device
  1002                                  ;             ISNUL = 1 if this device is the null device
  1003                                  ;             ISCOT = 1 if this device is the console output
  1004                                  ;             ISCIN = 1 if this device is the console input
  1005                                  ;
  1006                                  ;       If ISDEV = 0
  1007                                  ;             EOF = 0 if channel has been written
  1008                                  ;             Bits 0-5 are the block device number for
  1009                                  ;                 the channel (0 = A, 1 = B, ...)
  1010                                  ; ---------------------------------------------------------------------------
  1011                                  
  1012                                  devid_ISDEV     EQU     80h
  1013                                  devid_EOF       EQU     40h
  1014                                  devid_RAW       EQU     20h
  1015                                  devid_SPECIAL   EQU     10H
  1016                                  devid_ISCLK     EQU     08h
  1017                                  devid_ISNUL     EQU     04h
  1018                                  devid_ISCOT     EQU     02h
  1019                                  devid_ISCIN     EQU     01h
  1020                                  
  1021                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1022                                  
  1023                                  ;============================================================================
  1024                                  ; PDB.INC, MSDOS 6.0, 1991
  1025                                  ;============================================================================
  1026                                  ; 04/05/2019 - Retro DOS v4.0
  1027                                  ; 08/07/2018 - Retro DOS v3.0
  1028                                  
  1029                                  ; ---------------------------------------------------------------------------
  1030                                  ; BREAK <Process data block>
  1031                                  ; ---------------------------------------------------------------------------
  1032                                  ;**	Process data block (otherwise known as program header)
  1033                                  ;
  1034                                  
  1035                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1036                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1037                                  ;	for use.
  1038                                  ; ---------------------------------------------------------------------------
  1039                                  
  1040                                  FILPERPROC	EQU     20
  1041                                  
  1042                                  struc PDB	; Process_data_block
  1043 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1044 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1045 00000004 ??                                      resb 1
  1046 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1047 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1048 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1049 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1050 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1051 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1052 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1053 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1054 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1055 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1056 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1057 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1058 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1059 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1060 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1061 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1062 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1063 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1064                                  				;  an extended FCB
  1065                                  ;endstruc 	; MSDOS 3.3
  1066                                  	  	; MSDOS 6.0
  1067 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1068 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1069 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1070 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1071                                  endstruc
  1072                                  
  1073                                  ;============================================================================
  1074                                  ; EXE.INC, MSDOS 6.0, 1991
  1075                                  ;============================================================================
  1076                                  ; 04/05/2019 - Retro DOS v4.0
  1077                                  
  1078                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1079                                  ; ---------------------------------------------------------------------------
  1080                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1081                                  ; whether or not the program is executed or whether or not a program header
  1082                                  ; gets created.
  1083                                  
  1084                                  exec_func_no_execute EQU 1	; no execute bit
  1085                                  exec_func_overlay    EQU 2	; overlay bit
  1086                                  
  1087                                  struc EXEC0
  1088 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1089 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1090 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1091 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1092                                  .size:
  1093                                  endstruc
  1094                                  
  1095                                  struc EXEC1
  1096 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1097 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1098 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1099 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1100 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1101 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1102 00000012 ????                    .IP:		resw 1		; entry point IP
  1103 00000014 ????                    .CS:		resw 1		; entry point CS
  1104                                  .size:
  1105                                  endstruc
  1106                                  
  1107                                  struc EXEC3
  1108 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1109 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1110                                  endstruc
  1111                                  
  1112                                  ;**	Exit codes (in upper byte) for terminating programs
  1113                                  
  1114                                  EXIT_TERMINATE		EQU	0
  1115                                  EXIT_ABORT		EQU	0
  1116                                  EXIT_CTRL_C		EQU	1
  1117                                  EXIT_HARD_ERROR 	EQU	2
  1118                                  EXIT_KEEP_PROCESS	EQU	3
  1119                                  
  1120                                  ;**	EXE File Header Description
  1121                                  
  1122                                  struc EXE
  1123 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1124 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1125 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1126 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1127 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1128 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1129 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1130 0000000E ????                    .SS:          resw 1		; stack of image
  1131 00000010 ????                    .SP:          resw 1		; SP of image
  1132 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1133 00000014 ????                    .IP:          resw 1		; IP of entry
  1134 00000016 ????                    .CS:          resw 1		; CS of entry
  1135 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1136 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1137 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1138                                  .size:
  1139                                  endstruc
  1140                                  
  1141                                  exe_valid_signature     EQU 5A4Dh
  1142                                  exe_valid_old_signature EQU 4D5Ah
  1143                                  
  1144                                  ;**	EXE file symbol info definitions
  1145                                  
  1146                                  struc symbol_entry
  1147 00000000 ????????                .value:	resd 1
  1148 00000004 ????                    .type:	resw 1
  1149 00000006 ??                      .len:	resb 1
  1150 00000007 <res FFh>               .name:	resb 255
  1151                                  endstruc
  1152                                  
  1153                                  ;**	Data structure passed for ExecReady call
  1154                                  
  1155                                  struc ERStruc
  1156 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1157 00000002 ????                     .ER_Flags:	resw	1
  1158 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1159 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1160 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1161 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1162                                   .size:
  1163                                  endstruc
  1164                                  
  1165                                  ;** bit fields in ER_Flags
  1166                                  
  1167                                  ER_EXE		equ	0001h
  1168                                  ER_OVERLAY	equ	0002h
  1169                                  
  1170                                  
  1171                                  ;============================================================================
  1172                                  ; ARENA.INC, MSDOS 6.0, 1991
  1173                                  ;============================================================================
  1174                                  ; 24/04/2019 - Retro DOS v4.0
  1175                                  ; 04/08/2018 - Retro DOS v3.0
  1176                                  
  1177                                  ;BREAK <Memory arena structure>
  1178                                  
  1179                                  ;**	Arena Header
  1180                                  
  1181                                  struc ARENA
  1182 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1183 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1184 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1185 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1186 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1187                                  .headersize:			
  1188                                  endstruc
  1189                                  
  1190                                  ; 20/05/2019 - Retro DOS v4.0
  1191                                  ARENAHEADERSIZE equ ARENA.headersize 
  1192                                  
  1193                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1194                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1195                                  ; Change them and change ALLOC.ASM.
  1196                                  
  1197                                  arena_owner_system  EQU 0               ; free block indication
  1198                                  
  1199                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1200                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1201                                  
  1202                                  FIRST_FIT	EQU	00000000B
  1203                                  BEST_FIT	EQU	00000001B
  1204                                  LAST_FIT	EQU	00000010B
  1205                                  
  1206                                  ; MSDOS 6.0
  1207                                  LOW_FIRST	EQU	00000000B	; M001
  1208                                  HIGH_FIRST	EQU	10000000B	; M001
  1209                                  HIGH_ONLY	EQU	01000000B	; M001
  1210                                  
  1211                                  LINKSTATE	EQU	00000001B	; M002
  1212                                  
  1213                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1214                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1215                                  
  1216                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1217                                  						; M026: used to mask of bits
  1218                                  						; M026: 6 & 7 of AllocMethod
  1219                                  
  1220                                  ;============================================================================
  1221                                  ; MI.INC, MSDOS 6.0, 1991
  1222                                  ;============================================================================
  1223                                  ; 07/07/2018 - Retro DOS v3.0
  1224                                  
  1225                                  ;BREAK <Machine instruction, flag definitions and character types>
  1226                                  
  1227                                  mi_INT		EQU	0CDh
  1228                                  mi_long_jmp	EQU	0EAh
  1229                                  mi_Long_CALL	EQU	09Ah
  1230                                  mi_Long_RET	EQU	0CBh
  1231                                  mi_Near_RET	EQU	0C3h
  1232                                  
  1233                                  ;			xxxxoditszxaxpxc
  1234                                  f_Overflow	EQU	0000100000000000B
  1235                                  f_Direction	EQU	0000010000000000B
  1236                                  f_Interrupt	EQU	0000001000000000B
  1237                                  f_Trace 	EQU	0000000100000000B
  1238                                  f_Sign		EQU	0000000010000000B
  1239                                  f_Zero		EQU	0000000001000000B
  1240                                  f_Aux		EQU	0000000000010000B
  1241                                  f_Parity	EQU	0000000000000100B
  1242                                  f_Carry 	EQU	0000000000000001B
  1243                                  
  1244                                  ;============================================================================
  1245                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1246                                  ;============================================================================
  1247                                  ; 13/07/2018 - Retro DOS v3.0
  1248                                  ; 29/04/2019 - Retro DOS v4.0
  1249                                  
  1250                                  ;**	Standard I/O file handles
  1251                                  
  1252                                  stdin       EQU     0
  1253                                  stdout      EQU     1
  1254                                  stderr      EQU     2
  1255                                  stdaux      EQU     3
  1256                                  stdprn      EQU     4
  1257                                  
  1258                                  ;**	File Modes
  1259                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1260                                  
  1261                                  open_for_read   EQU 0
  1262                                  open_for_write  EQU 1
  1263                                  open_for_both   EQU 2
  1264                                  
  1265                                  ; MSDOS 6.0
  1266                                  OPEN_FOR_BOTH	equ 2
  1267                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1268                                  				; made from exec
  1269                                  
  1270                                  access_mask	EQU 0Fh ; 09/08/2018
  1271                                  
  1272                                  SHARING_MASK	    equ 0F0h
  1273                                  SHARING_COMPAT	    equ 000h
  1274                                  SHARING_DENY_BOTH   equ 010h
  1275                                  SHARING_DENY_WRITE  equ 020h
  1276                                  SHARING_DENY_READ   equ 030h
  1277                                  SHARING_DENY_NONE   equ 040h
  1278                                  SHARING_NET_FCB     equ 070h
  1279                                  SHARING_NO_INHERIT  equ 080h
  1280                                  
  1281                                  ; 29/04/2019
  1282                                  
  1283                                  ;**	Extended Open Definitions
  1284                                  
  1285                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1286                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1287                                  NOT_EXISTS_MASK    equ 0F0h
  1288                                  
  1289                                  ;*	SF_MODE values
  1290                                  
  1291                                  AUTO_COMMIT_WRITE	equ 4000h
  1292                                  INT_24_ERROR		equ 2000h
  1293                                  
  1294                                  ;*	Flags in EXTOPEN_ON
  1295                                  
  1296                                  EXT_OPEN_ON		equ 01h
  1297                                  EXT_FILE_NOT_EXISTS	equ 04h
  1298                                  EXT_OPEN_I24_OFF	equ 02h
  1299                                  
  1300                                  ;*	Flags in EXTOPEN_FLAG
  1301                                  
  1302                                  ACTION_OPENED		equ 01h
  1303                                  ACTION_CREATED_OPENED	equ 02h
  1304                                  ACTION_REPLACED_OPENED	equ 03h
  1305                                  EXT_EXISTS_OPEN 	equ 01h
  1306                                  EXT_EXISTS_FAIL 	equ 00h
  1307                                  EXT_NEXISTS_CREATE	equ 10h
  1308                                  
  1309                                  ;**	Extended Open Structure
  1310                                  
  1311                                  struc EXT_OPEN_PARM
  1312 00000000 ????????                .SET_LIST:	resd 1
  1313 00000004 ????                    .NUM_OF_PARM:	resw 1
  1314                                  endstruc
  1315                                  
  1316                                  ;============================================================================
  1317                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1318                                  ;============================================================================
  1319                                  ; 29/04/2019 - Retro DOS v4.0
  1320                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1321                                  
  1322                                  ; <system call definitions>
  1323                                  
  1324                                  ABORT                           EQU 0   ;  0      0
  1325                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1326                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1327                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1328                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1329                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1330                                  RAW_CON_IO                      EQU 6   ;  6      6
  1331                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1332                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1333                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1334                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1335                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1336                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1337                                  DISK_RESET                      EQU 13  ; 13      D
  1338                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1339                                  FCB_OPEN                        EQU 15  ; 15      F
  1340                                  FCB_CLOSE                       EQU 16  ; 16     10
  1341                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1342                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1343                                  FCB_DELETE                      EQU 19  ; 19     13
  1344                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1345                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1346                                  FCB_CREATE                      EQU 22  ; 22     16
  1347                                  FCB_RENAME                      EQU 23  ; 23     17
  1348                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1349                                  SET_DMA                         EQU 26  ; 26     1A
  1350                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1351                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1352                                  ;                                                                          ;
  1353                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1354                                  ;                                                                          ;
  1355                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1356                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1357                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1358                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1359                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1360                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1361                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1362                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1363                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1364                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1365                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1366                                  GET_DATE                        EQU 42  ; 42     2A
  1367                                  SET_DATE                        EQU 43  ; 43     2B
  1368                                  GET_TIME                        EQU 44  ; 44     2C
  1369                                  SET_TIME                        EQU 45  ; 45     2D
  1370                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1371                                  ; Extended functionality group
  1372                                  GET_DMA                         EQU 47  ; 47     2F
  1373                                  GET_VERSION                     EQU 48  ; 48     30
  1374                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1375                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1376                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1377                                  ;                                                                          ;
  1378                                  GET_DPB                         EQU 50  ; 50     32
  1379                                  ;                                                                          ;
  1380                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1381                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1382                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1383                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1384                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1385                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1386                                  CHAR_OPER                       EQU 55  ; 55     37
  1387                                  INTERNATIONAL                   EQU 56  ; 56     38
  1388                                  ; XENIX CALLS
  1389                                  ;   Directory Group
  1390                                  MKDIR                           EQU 57  ; 57     39
  1391                                  RMDIR                           EQU 58  ; 58     3A
  1392                                  CHDIR                           EQU 59  ; 59     3B
  1393                                  ;   File Group
  1394                                  CREAT                           EQU 60  ; 60     3C
  1395                                  OPEN                            EQU 61  ; 61     3D
  1396                                  CLOSE                           EQU 62  ; 62     3E
  1397                                  READ                            EQU 63  ; 63     3F
  1398                                  WRITE                           EQU 64  ; 64     40
  1399                                  UNLINK                          EQU 65  ; 65     41
  1400                                  LSEEK                           EQU 66  ; 66     42
  1401                                  CHMOD                           EQU 67  ; 67     43
  1402                                  IOCTL                           EQU 68  ; 68     44
  1403                                  XDUP                            EQU 69  ; 69     45
  1404                                  XDUP2                           EQU 70  ; 70     46
  1405                                  CURRENT_DIR                     EQU 71  ; 71     47
  1406                                  ;    Memory Group
  1407                                  ALLOC                           EQU 72  ; 72     48
  1408                                  DEALLOC                         EQU 73  ; 73     49
  1409                                  SETBLOCK                        EQU 74  ; 74     4A
  1410                                  ;    Process Group
  1411                                  EXEC                            EQU 75  ; 75     4B
  1412                                  EXIT                            EQU 76  ; 76     4C
  1413                                  _WAIT				EQU 77  ; 77     4D
  1414                                  FIND_FIRST                      EQU 78  ; 78     4E
  1415                                  ;   Special Group
  1416                                  FIND_NEXT                       EQU 79  ; 79     4F
  1417                                  ; SPECIAL SYSTEM GROUP
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1422                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1423                                  GET_IN_VARS                     EQU 82  ; 82     52
  1424                                  SETDPB                          EQU 83  ; 83     53
  1425                                  ;                                                                          ;
  1426                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1427                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1428                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1429                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1430                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1431                                  ;                                                                          ;
  1432                                  DUP_PDB                         EQU 85  ; 85     55
  1433                                  ;                                                                          ;
  1434                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1435                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1436                                  RENAME                          EQU 86  ; 86     56
  1437                                  FILE_TIMES                      EQU 87  ; 87     57
  1438                                  ALLOCOPER			EQU 88	; 88	 58
  1439                                  ; Network extention system calls
  1440                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1441                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1442                                  CREATENEWFILE			EQU 91	; 91	 5B
  1443                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1444                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1445                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1446                                  ;									   ;
  1447                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1448                                  					;	    CloseByName, CloseUser,
  1449                                  					;	    CloseUserProcess,
  1450                                  					;	    GetOpenFileList
  1451                                  ;									   ;
  1452                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1453                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1454                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1455                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1456                                  XNAMETRANS			EQU 96	; 96	 60
  1457                                  PATHPARSE			EQU 97	; 97	 61
  1458                                  GETCURRENTPSP			EQU 98	; 98	 62
  1459                                  HONGEUL 			EQU 99	; 99	 63
  1460                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1461                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1462                                  ;									   ;
  1463                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1464                                  ;									   ;
  1465                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1466                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1467                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1468                                  GETSETCDPG			EQU 102 ; 102	 66
  1469                                  EXTHANDLE			EQU 103 ; 103	 67
  1470                                  COMMIT				EQU 104 ; 104	 68
  1471                                  
  1472                                  ; 29/04/2019 - Retro DOS v4.0
  1473                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1474                                  
  1475                                  GetSetMediaID			EQU 105 ; 105	 69
  1476                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1477                                  ExtOpen 			EQU 108 ; 108	 6C
  1478                                  
  1479                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1480                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1481                                  ;                                                                          ;
  1482                                  ;ifdef ROMEXEC
  1483                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1484                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1485                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1486                                  ;endif
  1487                                  ;                                                                          ;
  1488                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1489                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1490                                  
  1491                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1492                                  ;OEM_C1				EQU 249 ; 249    F9
  1493                                  ;OEM_C2				EQU 250 ; 250    FA
  1494                                  ;OEM_C3				EQU 251 ; 251    FB
  1495                                  ;OEM_C4				EQU 252 ; 252    FC
  1496                                  ;OEM_C5				EQU 253 ; 253    FD
  1497                                  ;OEM_C6				EQU 254 ; 254    FE
  1498                                  ;OEM_C7				EQU 255 ; 255    FF
  1499                                  
  1500                                  ;============================================================================
  1501                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1502                                  ;============================================================================
  1503                                  ; 24/04/2019 - Retro DOS 4.0
  1504                                  
  1505                                  ;MAJOR_VERSION	EQU     6
  1506                                  ;;MINOR_VERSION	EQU	00
  1507                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1508                                  
  1509                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1510                                  ;MAJOR_VERSION	EQU     5
  1511                                  ;MINOR_VERSION	EQU     0
  1512                                  
  1513                                  ; 30/12/2022 - Retro DOS v4.2
  1514                                  MAJOR_VERSION	EQU     6
  1515                                  MINOR_VERSION	EQU     22
  1516                                  
  1517                                  ;============================================================================
  1518                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1519                                  ;============================================================================
  1520                                  ; 09/07/2018 - Retro DOS 3.0
  1521                                  
  1522                                  ; Current structure of the data returned by the international call
  1523                                  
  1524                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1525                                  .Date_tim_format:
  1526 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1527                                  .Currency_sym:
  1528 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1529                                  .Thous_sep:
  1530 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1531                                  .Decimal_sep:
  1532 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1533                                  .Date_sep:
  1534 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1535                                  .Time_sep:
  1536 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1537                                  .Bit_field:	
  1538 0000000F ??                      		RESB 1		; Bit values
  1539                                                                     ;   Bit 0 = 0 if currency symbol first
  1540                                                                     ;         = 1 if currency symbol last
  1541                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1542                                                                     ;         = 1 if space after currency symbol
  1543                                  .Currency_cents:
  1544 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1545                                  .Time_24:
  1546 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1547                                  .Map_call:
  1548 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1549 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1550                                  				;  in pieces.
  1551                                  .Data_sep:
  1552 00000016 ????                    		RESB	2	; Data list separator character
  1553                                  .size:		
  1554                                  endstruc
  1555                                  
  1556                                  ; Max size of the block returned by the INTERNATIONAL call
  1557                                  
  1558                                  internat_block_max	EQU	32
  1559                                  
  1560                                  ;============================================================================
  1561                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1562                                  ;============================================================================
  1563                                  ; 08/07/2018 - Retro DOS v3.0
  1564                                  
  1565                                  ;SysInitVars STRUC
  1566                                  struc SYSI
  1567 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1568 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1569 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1570 0000000C ????????                .CON:	    resd 1		; CON device
  1571 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1572 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1573 00000016 ????????                .CDS:	    resd 1		; CDS list
  1574 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1575 0000001E ????                    .Keep:	    resw 1		; keep count
  1576 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1577 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1578 00000022 ????????                .DEV:	    resd 1		; device list
  1579                                  ; 09/07/2018
  1580                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1581                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1582 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1583 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1584 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1585 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1586 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1587 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1588 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service routine entry
  1589 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1590 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1591 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1592 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1593 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1594                                  endstruc
  1595                                  ;SysInitVars ENDS
  1596                                  
  1597                                  ;This is added for more information exchange between DOS, BIOS.
  1598                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1599                                  
  1600                                  ;SysInitVars_Ext struc
  1601                                  struc SYSI_EXT
  1602 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1603 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1604                                  endstruc
  1605                                  ;SysInitVars_Ext ends
  1606                                  
  1607                                  ;============================================================================
  1608                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1609                                  ;============================================================================
  1610                                  ; 09/07/2018 - Retro DOS v3.0
  1611                                  
  1612                                  ;*** J.K.
  1613                                  ;General Guide -
  1614                                  ;Category Code:
  1615                                  ; 0... .... DOS Defined
  1616                                  ; 1... .... User defined
  1617                                  ; .xxx xxxx Code
  1618                                  
  1619                                  ;Function Code:
  1620                                  ; 0... .... Return error if unsupported
  1621                                  ; 1... .... Ignore if unsupported
  1622                                  ; .0.. .... Intercepted by DOS
  1623                                  ; .1.. .... Passed to driver
  1624                                  ; ..0. .... Sends data/commands to device
  1625                                  ; ..1. .... Quries data/info from device
  1626                                  ; ...x .... Subfunction
  1627                                  ;
  1628                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1629                                  ; function set.  It plays no critical role; some functions may contain both
  1630                                  ; command and query elements. The convention is that such commands are
  1631                                  ; defined as "sends data".
  1632                                  
  1633                                  ;*****************************;*
  1634                                  ; BLOCK DRIVERS 	      ;*
  1635                                  ;*****************************;*
  1636                                  
  1637                                  ; IOCTL SUB-FUNCTIONS
  1638                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1639                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1640                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1641                                  IOCTL_READ_HANDLE	EQU	2
  1642                                  IOCTL_WRITE_HANDLE	EQU	3
  1643                                  IOCTL_READ_DRIVE	EQU	4
  1644                                  IOCTL_WRITE_DRIVE	EQU	5
  1645                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1646                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1647                                  IOCTL_CHANGEABLE?	EQU	8
  1648                                  IOCTL_DeviceLocOrRem?	EQU	9
  1649                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1650                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1651                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1652                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1653                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1654                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1655                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1656                                  ; (MSDOS 6.0)
  1657                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1658                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1659                                  
  1660                                  ; GENERIC IOCTL CATEGORY CODES
  1661                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1662                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1663                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1664                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1665                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1666                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1667                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1668                                  
  1669                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1670                                  RAWIO			EQU	8
  1671                                  
  1672                                  ; RAWIO SUB-FUNCTIONS
  1673                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1674                                  GET_DEVICE_PARAMETERS	EQU	60H
  1675                                  SET_DEVICE_PARAMETERS	EQU	40H
  1676                                  READ_TRACK		EQU	61H
  1677                                  WRITE_TRACK		EQU	41H
  1678                                  VERIFY_TRACK		EQU	62H
  1679                                  FORMAT_TRACK		EQU	42H
  1680                                  ; (MSDOS 6.0)
  1681                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1682                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1683                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1684                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1685                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1686                                  
  1687                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1688                                  BUILD_DEVICE_BPB	EQU	000000001B
  1689                                  
  1690                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1691                                  INSTALL_FAKE_BPB	EQU	000000001B
  1692                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1693                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1694                                  
  1695                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1696                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1697                                  STATUS_FOR_FORMAT	EQU	000000001B
  1698                                  ; (MSDOS 6.0)
  1699                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1700                                  
  1701                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1702                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1703                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1704                                  
  1705                                  ; DEVICETYPE VALUES
  1706                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1707                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1708                                  DEV_5INCH		EQU	0
  1709                                  DEV_5INCH96TPI		EQU	1
  1710                                  DEV_3INCH720KB		EQU	2
  1711                                  DEV_8INCHSS		EQU	3
  1712                                  DEV_8INCHDS		EQU	4
  1713                                  DEV_HARDDISK		EQU	5
  1714                                  DEV_OTHER		EQU	7
  1715                                  ; (MSDOS 6.0)
  1716                                  ;DEV_3INCH1440KB	EQU	7
  1717                                  DEV_3INCH2880KB		EQU	9
  1718                                  ; Retro DOS v2.0 - 26/03/2018
  1719                                  ;;DEV_TAPE		EQU	6
  1720                                  ;;DEV_ERIMO		EQU	8
  1721                                  ;DEV_3INCH2880KB	EQU	9
  1722                                  DEV_3INCH1440KB		EQU	10
  1723                                  
  1724                                  ; (MSDOS 3.3)
  1725                                  ;MAX_DEV_TYPE		EQU	7
  1726                                  
  1727                                  ; (MSDOS 6.0)
  1728                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1729                                  					; CURRENTLY SUPPORT.
  1730                                  struc A_SECTORTABLE
  1731 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1732 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1733                                  .size:
  1734                                  endstruc
  1735                                  
  1736                                  ;============================================================================
  1737                                  ; DEVSYM.INC
  1738                                  ;============================================================================
  1739                                  ; 07/07/2018 - Retro DOS v3.0
  1740                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1741                                  
  1742                                  ;**	DevSym.inc - Device Symbols
  1743                                  
  1744                                  ; The device table list has the form:
  1745                                  struc	SYSDEV
  1746 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1747 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1748 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1749 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1750 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1751                                  .size:
  1752                                  endstruc
  1753                                  
  1754                                  ;
  1755                                  ; ATTRIBUTE BIT MASKS
  1756                                  ;
  1757                                  ; CHARACTER DEVICES:
  1758                                  ;
  1759                                  ; BIT 15 -> MUST BE 1
  1760                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1761                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1762                                  ;     12 -> UNUSED
  1763                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1764                                  ;     10 -> MUST BE 0
  1765                                  ;      9 -> MUST BE 0
  1766                                  ;      8 -> UNUSED
  1767                                  ;      7 -> UNUSED
  1768                                  ;      6 -> UNUSED
  1769                                  ;      5 -> UNUSED
  1770                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1771                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1772                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1773                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1774                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1775                                  ;
  1776                                  ; BLOCK DEVICES:
  1777                                  ;
  1778                                  ; BIT 15 -> MUST BE 0
  1779                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1780                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1781                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1782                                  ;	    THE SAME PLACE.
  1783                                  ;     12 -> UNUSED
  1784                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1785                                  ;     10 -> MUST BE 0
  1786                                  ;      9 -> MUST BE 0
  1787                                  ;      8 -> UNUSED
  1788                                  ;      7 -> UNUSED
  1789                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1790                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1791                                  ;      5 -> UNUSED
  1792                                  ;      4 -> UNUSED
  1793                                  ;      3 -> UNUSED
  1794                                  ;      2 -> UNUSED
  1795                                  ;      1 -> UNUSED
  1796                                  ;      0 -> UNUSED
  1797                                  ;
  1798                                  
  1799                                  ;Attribute bit masks
  1800                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1801                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1802                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1803                                  
  1804                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1805                                  
  1806                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1807                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1808                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1809                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1810                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1811                                  				;  ENTRY POINTS, 0 IF NOT
  1812                                  
  1813                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1814                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1815                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1816                                  				;  ITS CURRENT FORM.
  1817                                  
  1818                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1819                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1820                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1821                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1822                                  
  1823                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1824                                  
  1825                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1826                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1827                                  				;LOGICAL DRIVES, AND SUPPORTS
  1828                                  				;GENERIC IOCTL CALLS.
  1829                                  				;FOR CHARACTER DEVICES, THIS
  1830                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1831                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1832                                  
  1833                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1834                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1835                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1836                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1837                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1838                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1839                                  
  1840                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1841                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1842                                  
  1843                                  ;Static Reguest Header
  1844                                  struc	SRHEAD
  1845 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1846 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1847 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1848 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1849 00000005 ????????????????                	resb 8		;Reserved for queue links
  1850                                  .size:
  1851                                  endstruc
  1852                                  
  1853                                  ;Status word masks
  1854                                  STERR   EQU     8000H           ;Bit 15 - Error
  1855                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1856                                  STDON   EQU     0100H           ;Bit 8 - Done
  1857                                  STECODE EQU     00FFH           ;Error code
  1858                                  WRECODE EQU     0
  1859                                  
  1860                                  ;Function codes
  1861                                  DINITHL EQU     26              ;Size of init header
  1862                                  DMEDHL  EQU     15              ;Size of media check header
  1863                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1864                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1865                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1866                                  DSTATHL EQU     13              ;Size of status header
  1867                                  DFLSHL  EQU     15              ;Size of flush header
  1868                                  
  1869                                  DEVINIT EQU     0               ;Initialization
  1870                                  DEVMDCH EQU     1               ;Media check
  1871                                  DEVBPB  EQU     2               ;Get BPB
  1872                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1873                                  DEVRD   EQU     4               ;Read
  1874                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1875                                  DEVIST  EQU     6               ;Input status
  1876                                  DEVIFL  EQU     7               ;Input flush
  1877                                  DEVWRT  EQU     8               ;Write
  1878                                  DEVWRTV EQU     9               ;Write with verify
  1879                                  DEVOST  EQU     10              ;Output status
  1880                                  DEVOFL  EQU     11              ;Output flush
  1881                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1882                                  
  1883                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1884                                  DEVOPN	EQU	13		;DEVICE OPEN
  1885                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1886                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1887                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1888                                  ; 07/08/2018 - Retro DOS v3.0
  1889                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1890                                  GENIOCTL EQU	19
  1891                                  
  1892                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1893                                  ;		     20
  1894                                  ;		     21
  1895                                  ;		     22
  1896                                  
  1897                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1898                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1899                                  ; 18/05/2019 - Retro DOS v4.0
  1900                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1901                                  
  1902                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1903                                  
  1904                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1905                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1906                                  
  1907                                  ; ADDED FOR DOS 5.00
  1908                                  
  1909                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1910                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1911                                  
  1912                                  struc IOCTL_REQ
  1913 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1914                                  				; GENERIC IOCTL ADDITION.
  1915 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1916 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1917 0000000F ????                    .REG_SI:	resw 1
  1918 00000011 ????                    .REG_DI:	resw 1
  1919 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1920                                  .size: ; 07/08/2018
  1921                                  endstruc
  1922                                  
  1923                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1924                                  GEN_IOCTL_WRT_TRK EQU	40H
  1925                                  GEN_IOCTL_RD_TRK  EQU	60H
  1926                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1927                                  
  1928                                  ;; 32-bit absolute read/write input list structure
  1929                                  
  1930                                  struc ABS_32RW
  1931 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1932 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1933 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1934                                  .size:
  1935                                  endstruc
  1936                                  
  1937                                  ;; media ID info
  1938                                  
  1939                                  struc MEDIA_ID_INFO
  1940 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1941 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1942 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1943 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1944                                  .size:
  1945                                  endstruc
  1946                                  
  1947                                  ; equates for DOS34_FLAG
  1948                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1949                                  
  1950                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1951                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1952                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1953                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1954                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1955                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1956                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1957                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1958                                  					    ;M018: that knows how to handle 
  1959                                  					    ;M018: open for exec
  1960                                  
  1961                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1962                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1963                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1964                                  
  1965                                  ;============================================================================
  1966                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1967                                  ;============================================================================
  1968                                  ; 16/07/2018 - Retro DOS v3.0 
  1969                                  
  1970                                  ;**	ERROR.INC - DOS Error Codes
  1971                                  ;
  1972                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1973                                  ;    return error codes through AX. If an error occurred then
  1974                                  ;    the carry bit will be set and the error code is in AX. If no error
  1975                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1976                                  ;
  1977                                  ;    Since the set of error codes is being extended as we extend the operating
  1978                                  ;    system, we have provided a means for applications to ask the system for a
  1979                                  ;    recommended course of action when they receive an error.
  1980                                  ;
  1981                                  ;    The GetExtendedError system call returns a universal error, an error
  1982                                  ;    location and a recommended course of action. The universal error code is
  1983                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1984                                  ;    is issued.
  1985                                  
  1986                                  ;	2.0 error codes
  1987                                  
  1988                                  error_invalid_function		EQU	1
  1989                                  error_file_not_found		EQU	2
  1990                                  error_path_not_found		EQU	3
  1991                                  error_too_many_open_files	EQU	4
  1992                                  error_access_denied		EQU	5
  1993                                  error_invalid_handle		EQU	6
  1994                                  error_arena_trashed		EQU	7
  1995                                  error_not_enough_memory 	EQU	8
  1996                                  error_invalid_block		EQU	9
  1997                                  error_bad_environment		EQU	10
  1998                                  error_bad_format		EQU	11
  1999                                  error_invalid_access		EQU	12
  2000                                  error_invalid_data		EQU	13
  2001                                  ;**** reserved			EQU	14	; *****
  2002                                  error_invalid_drive		EQU	15
  2003                                  error_current_directory 	EQU	16
  2004                                  error_not_same_device		EQU	17
  2005                                  error_no_more_files		EQU	18
  2006                                  
  2007                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  2008                                  
  2009                                  error_write_protect		EQU	19
  2010                                  error_bad_unit			EQU	20
  2011                                  error_not_ready 		EQU	21
  2012                                  error_bad_command		EQU	22
  2013                                  error_CRC			EQU	23
  2014                                  error_bad_length		EQU	24
  2015                                  error_seek			EQU	25
  2016                                  error_not_DOS_disk		EQU	26
  2017                                  error_sector_not_found		EQU	27
  2018                                  error_out_of_paper		EQU	28
  2019                                  error_write_fault		EQU	29
  2020                                  error_read_fault		EQU	30
  2021                                  error_gen_failure		EQU	31
  2022                                  
  2023                                  ;	the new 3.0 error codes reported through INT 24
  2024                                  
  2025                                  error_sharing_violation 	EQU	32
  2026                                  error_lock_violation		EQU	33
  2027                                  error_wrong_disk		EQU	34
  2028                                  error_FCB_unavailable		EQU	35
  2029                                  error_sharing_buffer_exceeded	EQU	36
  2030                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2031                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2032                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2033                                  
  2034                                  ;	New OEM network-related errors are 50-79
  2035                                  
  2036                                  error_not_supported		EQU	50
  2037                                  
  2038                                  error_net_access_denied		EQU	65	;M028
  2039                                  
  2040                                  ;	End of INT 24 reportable errors
  2041                                  
  2042                                  error_file_exists		EQU	80
  2043                                  error_DUP_FCB			EQU	81	; *****
  2044                                  error_cannot_make		EQU	82
  2045                                  error_FAIL_I24			EQU	83
  2046                                  
  2047                                  ;	New 3.0 network related error codes
  2048                                  
  2049                                  error_out_of_structures 	EQU	84
  2050                                  error_already_assigned		EQU	85
  2051                                  error_invalid_password		EQU	86
  2052                                  error_invalid_parameter 	EQU	87
  2053                                  error_NET_write_fault		EQU	88
  2054                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2055                                  
  2056                                  ;	BREAK <Interrupt 24 error codes>
  2057                                  
  2058                                  ;**	Int24 Error Codes
  2059                                  
  2060                                  error_I24_write_protect 	EQU	0
  2061                                  error_I24_bad_unit		EQU	1
  2062                                  error_I24_not_ready		EQU	2
  2063                                  error_I24_bad_command		EQU	3
  2064                                  error_I24_CRC			EQU	4
  2065                                  error_I24_bad_length		EQU	5
  2066                                  error_I24_Seek			EQU	6
  2067                                  error_I24_not_DOS_disk		EQU	7
  2068                                  error_I24_sector_not_found	EQU	8
  2069                                  error_I24_out_of_paper		EQU	9
  2070                                  error_I24_write_fault		EQU	0Ah
  2071                                  error_I24_read_fault		EQU	0Bh
  2072                                  error_I24_gen_failure		EQU	0Ch
  2073                                  ; NOTE: Code 0DH is used by MT-DOS.
  2074                                  error_I24_wrong_disk		EQU	0Fh
  2075                                  
  2076                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2077                                  ;
  2078                                  ;	NOTE: ABORT is ALWAYS allowed
  2079                                  
  2080                                  Allowed_FAIL			EQU	00001000B
  2081                                  Allowed_RETRY			EQU	00010000B
  2082                                  Allowed_IGNORE			EQU	00100000B
  2083                                  
  2084                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2085                                  I24_area			EQU	00000110B  ; 00 if DOS
  2086                                  						   ; 01 if FAT
  2087                                  						   ; 10 if root DIR
  2088                                  						   ; 11 if DATA
  2089                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2090                                  
  2091                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2092                                  
  2093                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2094                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2095                                  ;	to take for error codes that they don't explicitly understand.
  2096                                  
  2097                                  ;	Values for error CLASS
  2098                                  
  2099                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2100                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2101                                  errCLASS_Auth		EQU	3	; Permission problem
  2102                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2103                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2104                                  errCLASS_SysFail	EQU	6	; System Failure
  2105                                  errCLASS_Apperr 	EQU	7	; Application Error
  2106                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2107                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2108                                  errCLASS_Locked 	EQU	10	; Locked
  2109                                  errCLASS_Media		EQU	11	; Media Failure
  2110                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2111                                  errCLASS_Unk		EQU	13	; Unknown/other
  2112                                  
  2113                                  ;	Values for error ACTION
  2114                                  
  2115                                  errACT_Retry		EQU	1	; Retry
  2116                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2117                                  errACT_User		EQU	3	; Ask user to regive info
  2118                                  errACT_Abort		EQU	4	; abort with clean up
  2119                                  errACT_Panic		EQU	5	; abort immediately
  2120                                  errACT_Ignore		EQU	6	; ignore
  2121                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2122                                  
  2123                                  ;	Values for error LOCUS
  2124                                  
  2125                                  errLOC_Unk		EQU	1	; No appropriate value
  2126                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2127                                  errLOC_Net		EQU	3	; Network
  2128                                  errLOC_SerDev		EQU	4	; Serial Device
  2129                                  errLOC_Mem		EQU	5	; Memory
  2130                                  
  2131                                  ;============================================================================
  2132                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2133                                  ;============================================================================
  2134                                  ; 04/05/2019 - Retro DOS v4.0
  2135                                  
  2136                                  ;**	Int 2A functions
  2137                                  ; ---------------------------------------------------------------------------
  2138                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2139                                  ;		as a critical section handler since critical sections
  2140                                  ;		were originally created to support the net.
  2141                                  ; ---------------------------------------------------------------------------
  2142                                  
  2143                                  ; ---------------------------------------------------------------------------
  2144                                  ;**	This table was created by examining the source and may not be
  2145                                  ;	complete or completely accurate - JGL
  2146                                  ;
  2147                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2148                                  
  2149                                  ;	(ah) = 0	installation check
  2150                                  ;			   (returns ah !=0 if installed)
  2151                                  ;	(ah) = 1	cooked net bios call
  2152                                  ;	(ah) = 3	query drive shared
  2153                                  ;			   (ds:si) = "n:" asciz string
  2154                                  ;	(ah) = 4	net bios
  2155                                  ;	       (al) = 0	   cooked net bios call
  2156                                  ;	       (al) = 1	   raw net bios call
  2157                                  ;	       (al) = 2	   ???
  2158                                  ;
  2159                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2160                                  ;			NCBs available/outstanding. DX returns the number of
  2161                                  ;			sessions. Supposedly, this is documented in an old
  2162                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2163                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2164                                  ;			not be used, as it is a hack, only to get Lotus
  2165                                  ;			Notes running.
  2166                                  ;
  2167                                  ;	(ah) = 80h	enter critical section
  2168                                  ;	(ah) = 81h	leave critical section
  2169                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2170                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2171                                  ; ---------------------------------------------------------------------------
  2172                                  
  2173                                  ;**	Critical section definitions
  2174                                  ; ---------------------------------------------------------------------------
  2175                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2176                                  ;	which various programs use to make it so, in a limited fashion.
  2177                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2178                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2179                                  ;	DOS's global data structures, such as the memory arena, are not
  2180                                  ;	in this area, so critical section indicators are used to protect
  2181                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2182                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2183                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2184                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2185                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2186                                  ;	critical section they then switch away from that second thread and
  2187                                  ;	let the first one finish and exit the section.
  2188                                  ; ---------------------------------------------------------------------------
  2189                                  
  2190                                  ; These below are subject to leave-all sections
  2191                                  critDisk    EQU     1			; Disk I/O critical section
  2192                                  critShare   EQU     1			; Sharer I/O critical section
  2193                                  critMem     EQU     1			; memory maintenance critical section
  2194                                  critSFT     EQU     1			; sft table allocation
  2195                                  critDevice  EQU     2			; Device I/O critical section
  2196                                  critNet     EQU     5			; network critical section
  2197                                  critIFS     EQU     6			; ifsfunc critical section
  2198                                  ; These below are not subject to leave-all sections
  2199                                  critASSIGN  EQU     8			; Assign has munged a system call
  2200                                  
  2201                                  ;============================================================================
  2202                                  ; MULT.INC (MSDOS 6.0, 1991)
  2203                                  ;============================================================================
  2204                                  ; 04/05/2019 - Retro DOS v4.0
  2205                                  
  2206                                  ;Break <Multiplex channels>
  2207                                  
  2208                                  ; ---------------------------------------------------------------------------
  2209                                  ; The current set of defined multiplex channels is (* means documented):
  2210                                  ;
  2211                                  ;   Channel(h)  Issuer          Receiver    Function
  2212                                  ;      00       server          PSPRINT     print job control
  2213                                  ;     *01       print/apps      PRINT       Queueing of files
  2214                                  ;      02       BIOS            REDIR       signal open/close of printers
  2215                                  ;
  2216                                  ;      05       command         REDIR       obtain text of net int 24 message
  2217                                  ;     *06       server/assign   ASSIGN      Install check
  2218                                  ;
  2219                                  ;      08       external driver IBMBIO      interface to internal routines
  2220                                  ;
  2221                                  ;      10       sharer/server   Sharer      install check
  2222                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2223                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2224                                  ;      13       MSNET           MSNET       movement of NCBs
  2225                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2226                                  ;                                           of alternative INT_13 drivers after
  2227                                  ;                                           boot_up
  2228                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2229                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2230                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2231                                  ;      16       WIN386          WIN386      Windows communications
  2232                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2233                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2234                                  ;      19       Shell
  2235                                  ;      1A       Ansi.sys
  2236                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2237                                  ;
  2238                                  ;      40h      OS/2
  2239                                  ;      41h      Lanman
  2240                                  ;      42h      Lanman
  2241                                  ;      43h      Himem
  2242                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2243                                  ;                               AL = 30h    reserved for Himem external A20 code
  2244                                  ;      44h      Dosextender
  2245                                  ;      45H      Windows profiler
  2246                                  ;      46h      Windows/286 DOS extender
  2247                                  ;      47h      Basic Compiler Vn. 7.0
  2248                                  ;      48h      Doskey
  2249                                  ;      49h      DOS 5.x install 
  2250                                  ;      4Ah      Multi Purpose
  2251                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2252                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2253                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2254                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2255                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2256                                  ;
  2257                                  ;                multSmartdrv           10h
  2258                                  ;                multMagicdrv           11h
  2259                                  ;      4Bh      Task Switcher API
  2260                                  ;
  2261                                  ;      4Ch      APPS            APM         Advanced power management
  2262                                  ;      4Dh      Kana Kanji Converter, MSKK
  2263                                  ;
  2264                                  ;      51h      ODI real mode support driver (for Chicago)
  2265                                  ;
  2266                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2267                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2268                                  ;
  2269                                  ;      55h      COMMAND.COM
  2270                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2271                                  ;                                           instance of command.com
  2272                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2273                                  ;                                           instance of ROM COMMAND
  2274                                  ;      56h      Sewell Development
  2275                                  ;               INTERLNK
  2276                                  ;
  2277                                  ;      57h      Iomega Corp.
  2278                                  ;
  2279                                  ;      ABh      Unspecified IBM use
  2280                                  ;      ACh      Graphics
  2281                                  ;      ADh      NLS (toronto)
  2282                                  ;      AEh
  2283                                  ;      AFh      Mode
  2284                                  ;      B0h      GRAFTABL        GRAFTABL
  2285                                  ;
  2286                                  ;      D7h      Banyan VINES
  2287                                  ; ---------------------------------------------------------------------------
  2288                                  
  2289                                  ;MUX 00-3F reserverd for IBM
  2290                                  ;MUX 80-BF reserverd for IBM
  2291                                  
  2292                                  ;MUX 40-7F reserved for Microsoft
  2293                                  
  2294                                  ;MUX C0-FF users
  2295                                  
  2296                                  MultSHARE   EQU     10h 		; sharer
  2297                                      ;	1   MFT_enter
  2298                                      ;	2   MFTClose
  2299                                      ;	3   MFTclU
  2300                                      ;	4   MFTCloseP
  2301                                      ;	5   MFTCloN
  2302                                      ;	6   set_block
  2303                                      ;	7   clr_block
  2304                                      ;	8   chk_block
  2305                                      ;	9   MFT_get
  2306                                      ;	10  ShSave
  2307                                      ;	11  ShChk
  2308                                      ;	12  ShCol
  2309                                      ;	13  ShCloseFile
  2310                                  
  2311                                  MultNET     EQU     11h 		; Network support
  2312                                  MultIFS     EQU     11h                 ; Network support
  2313                                      ;   1   IFS_RMDIR
  2314                                      ;   2   IFS_SEQ_RMDIR
  2315                                      ;   3   IFS_MKDIR
  2316                                      ;   4   IFS_SEQ_MKDIR
  2317                                      ;   5   IFS_CHDIR
  2318                                      ;   6   IFS_CLOSE
  2319                                      ;   7   IFS_COMMIT
  2320                                      ;   8   IFS_READ
  2321                                      ;   9   IFS_WRITE
  2322                                      ;   10  IFS_LOCK
  2323                                      ;   11  IFS_UNLOCK
  2324                                      ;   12  IFS_DISK_INFO
  2325                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2326                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2327                                      ;   15  IFS_GET_FILE_INFO
  2328                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2329                                      ;   17  IFS_RENAME
  2330                                      ;   18  IFS_SEQ_RENAME
  2331                                      ;   19  IFS_DELETE
  2332                                      ;   20  IFS_SEQ_DELETE
  2333                                      ;   21  IFS_OPEN
  2334                                      ;   22  IFS_SEQ_OPEN
  2335                                      ;   23  IFS_CREATE
  2336                                      ;   24  IFS_SEQ_CREATE
  2337                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2338                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2339                                      ;   27  IFS_SEARCH_FIRST
  2340                                      ;   28  IFS_SEARCH_NEXT
  2341                                      ;   29  IFS_ABORT
  2342                                      ;   30  IFS_ASSOPER
  2343                                      ;   31  Printer_SET_STRING
  2344                                      ;   32  IFSFlushBuf
  2345                                      ;   33  IFSBufWrite
  2346                                      ;   34  IFSResetEnvironment
  2347                                      ;   35  IFSSpoolCheck
  2348                                      ;   36  IFSSpoolClose
  2349                                      ;   37  IFSDeviceOper
  2350                                      ;   38  IFSSpoolEchoCheck
  2351                                      ;   39      - - -   Unused   - - -
  2352                                      ;   40      - - -   Unused   - - -
  2353                                      ;   41      - - -   Unused   - - -
  2354                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2355                                      ;   43  DEVICE_IOCTL
  2356                                      ;   44  IFS_UPDATE_CB
  2357                                      ;   45  IFS_FILE_XATTRIBUTES
  2358                                      ;   46  IFS_XOPEN
  2359                                      ;   47  IFS_DEPENDENT_IOCTL
  2360                                  
  2361                                  MultDOS     EQU     12h 		; DOS call back
  2362                                      ;	1   DOS_CLOSE
  2363                                      ;	2   RECSET
  2364                                      ;	3   Get DOSGROUP
  2365                                      ;	4   PATHCHRCMP
  2366                                      ;	5   OUT
  2367                                      ;	6   NET_I24_ENTRY
  2368                                      ;	7   PLACEBUF
  2369                                      ;	8   FREE_SFT
  2370                                      ;	9   BUFWRITE
  2371                                      ;	10  SHARE_VIOLATION
  2372                                      ;	11  SHARE_ERROR
  2373                                      ;	12  SET_SFT_MODE
  2374                                      ;	13  DATE16
  2375                                      ;	14  SETVISIT
  2376                                      ;	15  SCANPLACE
  2377                                      ;	16  SKIPVISIT
  2378                                      ;	17  StrCpy
  2379                                      ;	18  StrLen
  2380                                      ;	19  UCase
  2381                                      ;	20  POINTCOMP
  2382                                      ;	21  CHECKFLUSH
  2383                                      ;	22  SFFromSFN
  2384                                      ;	23  GetCDSFromDrv
  2385                                      ;	24  Get_User_Stack
  2386                                      ;	25  GetThisDrv
  2387                                      ;	26  DriveFromText
  2388                                      ;	27  SETYEAR
  2389                                      ;	28  DSUM
  2390                                      ;	29  DSLIDE
  2391                                      ;	30  StrCmp
  2392                                      ;	31  initcds
  2393                                      ;	32  pjfnfromhandle
  2394                                      ;	33  $NameTrans
  2395                                      ;	34  CAL_LK
  2396                                      ;	35  DEVNAME
  2397                                      ;	36  Idle
  2398                                      ;   37  DStrLen
  2399                                      ;   38  NLS_OPEN      DOS 3.3
  2400                                      ;   39  $CLOSE        DOS 3.3
  2401                                      ;   40  NLS_LSEEK     DOS 3.3
  2402                                      ;   41  $READ         DOS 3.3
  2403                                      ;   42  FastInit      DOS 4.0
  2404                                      ;   43  NLS_IOCTL     DOS 3.3
  2405                                      ;   44  GetDevList    DOS 3.3
  2406                                      ;   45  NLS_GETEXT    DOS 3.3
  2407                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2408                                      ;   47  FAKE_VERSION  DOS 4.0
  2409                                  
  2410                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2411                                      ;	0   NLSInstall
  2412                                      ;	1   ChgCodePage
  2413                                      ;	2   GetExtInfo
  2414                                      ;	3   SetCodePage
  2415                                      ;	4   GetCntry
  2416                                  
  2417                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2418                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2419                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2420                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2421                                  
  2422                                  multMULT        EQU     4Ah
  2423                                  multMAGIC       EQU     256*multMULT + 11h
  2424                                  multMULTRPLTOM  EQU     06h
  2425                                  
  2426                                      ;   0   swap disk function for single floppy drive m/cs
  2427                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2428                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2429                                      ;       drive
  2430                                      ;
  2431                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2432                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2433                                      ;       returns pointer in ES:DI
  2434                                      ;
  2435                                      ;   3-4 currently used by nobody
  2436                                      ;   5   Switcher API
  2437                                      ;   6   Top of Memory for RPL.
  2438                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2439                                      ;           code present in TOM should respond with a new TOM in DX
  2440                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2441                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2442                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2443                                      ;           It is the responsibility of RPL program to release the mem.
  2444                                      ;   7   Reserved for PROTMAN support.
  2445                                      ;  10   smartdrv 4.0
  2446                                      ;  11   dblspace api
  2447                                      ;  12   MRCI     api
  2448                                      ;  13   dblspace/mrci stealth packet api
  2449                                  
  2450                                  MultAPM     EQU     4ch             ; Obselete ???
  2451                                      ;       00h     APM_VER_CHK
  2452                                      ;       01h     APM_SUS_SYS_REQ
  2453                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2454                                  
  2455                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2456                                  				;  APM events                         ; M036
  2457                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2458                                  
  2459                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2460                                  ;	  it calls Multdos 42 to set up an entry routine address
  2461                                      ;	0   Install status  (reserved)
  2462                                      ;	1   Lookup
  2463                                      ;	2   Insert
  2464                                      ;	3   Delete
  2465                                      ;	4   Purge	    (reserved)
  2466                                  
  2467                                  ;============================================================================
  2468                                  ; FIND.INC (MSDOS 6.0, 1991)
  2469                                  ;============================================================================
  2470                                  ; 17/05/2019 - Retro DOS v4.0
  2471                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2472                                  
  2473                                  ;Break	<find first/next buffer>
  2474                                  
  2475                                  struc find_buf
  2476 00000000 ??                      .drive:	    resb 1		; drive of search
  2477 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2478 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2479 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2480 0000000F ????                    .DirStart:  resw 1		; DirStart
  2481 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2482 00000015 ??                      .attr:	    resb 1		; attribute found
  2483 00000016 ????                    .time:	    resw 1		; time
  2484 00000018 ????                    .date:	    resw 1		; date
  2485 0000001A ????                    .size_l:    resw 1		; low(size)
  2486 0000001C ????                    .size_h:    resw 1		; high(size)
  2487 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2488                                  .size:
  2489                                  endstruc
  2490                                  
  2491                                  ;============================================================================
  2492                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2493                                  ;============================================================================
  2494                                  ; 29/04/2019 - Retro DOS v4.0
  2495                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2496                                  
  2497                                  ;Equates for COUNTRY INFORMATION.
  2498                                  SetCountryInfo	EQU	1	;country info
  2499                                  SetUcase	EQU	2	;uppercase table
  2500                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2501                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2502                                  SetFileList	EQU	5	;valid file character list
  2503                                  SetCollate	EQU	6	;collating sequence
  2504                                  SetDBCS 	EQU	7	;double byte character set
  2505                                  SetALL		EQU	-1	;all the entries
  2506                                  
  2507                                  ;DOS country and code page information table structure.
  2508                                  ;Internally, IBMDOS gives a pointer to this table.
  2509                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2510                                  ;this structure.
  2511                                  
  2512                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2513 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2514 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2515 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2516 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2517 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2518 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2519                                  
  2520 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2521 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2522                                  
  2523 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2524 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2525                                  
  2526 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2527 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2528                                  
  2529                                  ; MSDOS 6.0
  2530 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2531 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2532                                  
  2533 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2534 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2535 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2536 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2537 0000006C ????                    .ccDFormat:		resw 1	;date format
  2538 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2539 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2540 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2541 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2542 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2543 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2544 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2545 0000007D ??                      .ccTFormat:		resb 1	;time format
  2546 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2547 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2548 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2549                                  .size:
  2550                                  endstruc
  2551                                  
  2552                                  ;Ucase table
  2553                                  struc CC_UCASE_TAB
  2554 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2555 00000002 <res 80h>               .ccUcase_data:		resb 128
  2556                                  endstruc
  2557                                  
  2558                                  ;File Ucase table
  2559                                  struc CC_FILE_UCASE_TAB
  2560 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2561 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2562                                  endstruc
  2563                                  
  2564                                  ;File char list
  2565                                  struc CC_FILE_CHAR_TAB
  2566 00000000 ????                    .ccFilechar_leng:	resw 1
  2567 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2568                                  endstruc
  2569                                  
  2570                                  ;collate table
  2571                                  struc CC_COLLATE_TAB
  2572 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2573 00000002 <res 100h>              .ccCollate_data:	resb 256
  2574                                  endstruc
  2575                                  
  2576                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2577                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2578                                  
  2579                                  ; 06/08/2018
  2580                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2581                                  
  2582                                  ;CAPITALIZATION equates
  2583                                  CAP_ONE_CHAR	equ	20H
  2584                                  CAP_STRING	equ	21H
  2585                                  CAP_ASCIIZ	equ	22H
  2586                                  CHECK_YES_NO	equ	23H
  2587                                  UPPER_TABLE	equ	80H
  2588                                  
  2589                                  ;NLS_YES	equ	59H  ; 'Y'
  2590                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2591                                  ;NLS_NO		equ	4EH  ; 'N'	
  2592                                  ;NLS_no2	equ	6EH  ; 'n'	
  2593                                  
  2594                                  ;============================================================================
  2595                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2596                                  ;============================================================================
  2597                                  ; 25/04/2019 - Retro DOS v4.0
  2598                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2599                                  
  2600                                  ;BREAK <Current directory list structure>
  2601                                  
  2602                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2603                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2604                                  ;									   ;
  2605                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2606                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2607                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2608                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2609                                  ; of the disk being changed or if the path must be recracked.		   ;
  2610                                  ;
  2611                                  ;	Some pathnames have special preambles, such as
  2612                                  ;
  2613                                  ;		\\machine\sharename\...
  2614                                  ;	For these pathnames we can't allow ".." processing to back us
  2615                                  ;	up into the special front part of the name.  The CURDIR_END field
  2616                                  ;	holds the address of the seperator character which marks
  2617                                  ;	the split between the special preamble and the regular
  2618                                  ;	path list; ".." processing isn't allowed to back us up past
  2619                                  ;	(i.e., before) CURDIR_END
  2620                                  ;	For the root, it points at the leading /.  For net
  2621                                  ;	assignments it points at the end (nul) of the initial assignment:
  2622                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2623                                  ;	  ^		 ^		     ^
  2624                                  
  2625                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2626                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2627                                  
  2628                                  struc curdir	; curdir_list
  2629 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2630 00000043 ????                    .flags:		resw 1			; various flags
  2631 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2632 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2633 0000004D ????                    .user_word:	resw 1
  2634 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2635                                  ; MSDOS 6.0
  2636 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2637 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2638 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2639                                  .size:
  2640                                  endstruc
  2641                                  
  2642                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2643                                  
  2644                                  %define curdir_netID curdir_ID  ; dword
  2645                                  
  2646                                  ;**	Flag values for CURDIR_FLAGS
  2647                                  
  2648                                  curdir_isnet	EQU	1000000000000000B
  2649                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2650                                  curdir_inuse	EQU	0100000000000000B
  2651                                  curdir_splice	EQU	0010000000000000B
  2652                                  curdir_local	EQU	0001000000000000B
  2653                                  
  2654                                  ;									   ;
  2655                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2657                                  
  2658                                  ;============================================================================
  2659                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2660                                  ;============================================================================
  2661                                  ; 09/07/2018 - Retro DOS v3.0
  2662                                  
  2663                                  ;BREAK <File Control Block definition>
  2664                                  
  2665                                  ;
  2666                                  ; Field definition for FCBs
  2667                                  ; The FCB has the following structure:
  2668                                  ;
  2669                                  ;	+---------------------------+
  2670                                  ;	|   Drive indicator(byte)   |
  2671                                  ;	+---------------------------+
  2672                                  ;	|    Filename (8 chars)     |
  2673                                  ;	+---------------------------+
  2674                                  ;	|    Extension (3 chars)    |
  2675                                  ;	+---------------------------+
  2676                                  ;	|   Current Extent(word)    |
  2677                                  ;	+---------------------------+
  2678                                  ;	|    Record size (word)     |
  2679                                  ;	+---------------------------+
  2680                                  ;	|    File Size (2 words)    |
  2681                                  ;	+---------------------------+
  2682                                  ;	|	Date of write	    |
  2683                                  ;	+---------------------------+
  2684                                  ;	|	Time of write	    |
  2685                                  ;	+---------------------------+
  2686                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2687                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2688                                  ;									   ;
  2689                                  ;	+---------------------------+
  2690                                  ;	|   8 bytes reserved	    |
  2691                                  ;	+---------------------------+
  2692                                  ;									   ;
  2693                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2694                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2695                                  ;	|    next record number     |
  2696                                  ;	+---------------------------+
  2697                                  ;	|   random record number    |
  2698                                  ;	+---------------------------+
  2699                                  ;
  2700                                  
  2701                                  struc	SYS_FCB
  2702 00000000 ??                      .drive:	resb 1
  2703 00000001 ????????????????        .name:	resb 8
  2704 00000009 ??????                  .ext:	resb 3
  2705 0000000C ????                    .EXTENT: resw 1
  2706 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2707 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2708                                  				; following word
  2709 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2710 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2711 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2712                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2713                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2714                                  ;									   ;
  2715 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2716                                  ;									   ;
  2717                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2718                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2719 00000020 ??                      .NR:	resb 1			; Next record
  2720 00000021 ????????                .RR:	resb 4			; Random record
  2721                                  .size:
  2722                                  endstruc
  2723                                  
  2724                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2725                                  				; NEXT
  2726                                  ; 20/07/2018
  2727                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2728                                  
  2729                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2730                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2731                                  ; NOTE about this byte (fcb_nsl_drive)
  2732                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2733                                  ;	00 means a local file or device with sharing loaded
  2734                                  ;	10 means a remote (network) file
  2735                                  ;	01 means a local file with no sharing loaded
  2736                                  ;	11 means a local device with no sharing loaded
  2737                                  
  2738                                  ; 20/07/2018
  2739                                  
  2740                                  ;
  2741                                  ; Network FCB
  2742                                  ;
  2743                                  
  2744                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2745                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2746                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2747                                  
  2748                                  ;
  2749                                  ; No sharing local file FCB
  2750                                  ;
  2751                                  
  2752                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2753                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2754                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2755                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2756                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2757                                  
  2758                                  ;
  2759                                  ; No sharing local device FCB
  2760                                  ;
  2761                                  
  2762                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2763                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2764                                  
  2765                                  ;
  2766                                  ; Sharing local FCB
  2767                                  ;
  2768                                  
  2769                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2770                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2771                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2772                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2773                                  
  2774                                  ;
  2775                                  ; Bogusness:  the four cases are:
  2776                                  ;
  2777                                  ;   local file	    00
  2778                                  ;   local device    40
  2779                                  ;   local sharing   C0
  2780                                  ;   network	    80
  2781                                  ;
  2782                                  ; Since sharing and network collide, we cannot use a test instruction for
  2783                                  ; deciding whether a network or a share check in involved
  2784                                  ;
  2785                                  FCBDEVICE   EQU 040h
  2786                                  FCBNETWORK  EQU 080h
  2787                                  FCBSHARE    EQU 0C0h
  2788                                  
  2789                                  ; FCBSPECIAL must be able to mask off both net and share
  2790                                  FCBSPECIAL  EQU 080h
  2791                                  FCBMASK     EQU 0C0h
  2792                                  
  2793                                  ;============================================================================
  2794                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2795                                  ;============================================================================
  2796                                  ; 11/07/2018 - Retro DOS v3.0
  2797                                  ; 25/04/2019 - Retro DOS v4.0
  2798                                  
  2799                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2800 00000000 ??                      .dirpos:	resb 1
  2801 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2802                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2803 00000005 ????                    .clusnum:	resw 1
  2804 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2805 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2806                                  .size:
  2807                                  endstruc
  2808                                  
  2809                                  ; 23/07/2018
  2810                                  ;FASTOPEN NAME CACHING Subfunctions
  2811                                  FONC_Look_up	equ	1
  2812                                  FONC_insert	equ	2
  2813                                  FONC_delete	equ	3
  2814                                  FONC_update	equ	4
  2815                                  FONC_purge	equ	5	;reserved for the future use.
  2816                                  FONC_Rename	equ	6	;AN001
  2817                                  
  2818                                  ; 27/07/2018
  2819                                  ;FastOpen Data Structure
  2820                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2821 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2822 00000002 ????????                .name_caching:	resd 1
  2823                                  ; MSDOS 6.0
  2824                                  ;.fatchain_caching: resd 1	;reserved for future use
  2825                                  .size:
  2826                                  endstruc
  2827                                  
  2828                                  ; 27/07/2018
  2829                                  ;Equates used in DOS.
  2830                                  FastOpen_Set	       equ     00000001b
  2831                                  FastOpen_Reset	       equ     11111110b
  2832                                  Lookup_Success	       equ     00000010b
  2833                                  Lookup_Reset	       equ     11111101b
  2834                                  Special_Fill_Set       equ     00000100b
  2835                                  Special_Fill_Reset     equ     11111011b
  2836                                  No_Lookup	       equ     00001000b
  2837                                  Set_For_Search	       equ     00010000b	;DCR 167
  2838                                  
  2839                                  ; 09/08/2018 
  2840                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2841                                  ; Fastxxx equates
  2842                                  FastOpen_ID	   equ	   1
  2843                                  FastSeek_ID	   equ	   2
  2844                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2845                                  
  2846                                  ;Structure definitions
  2847                                  ;
  2848                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2849 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2850 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2851                                  endstruc
  2852                                  
  2853                                  ;============================================================================
  2854                                  ; LOCK.INC, MSDOS 6.0, 1991
  2855                                  ;============================================================================
  2856                                  ; 14/07/2018 - Retro DOS v3.0
  2857                                  
  2858                                  ;**	LOCK.INC - Definitions for Record Locking
  2859                                  
  2860                                  ;**	LOCK functions
  2861                                  
  2862                                  LOCK_ALL	    equ    0
  2863                                  UNLOCK_ALL	    equ    1
  2864                                  LOCK_MUL_RANGE	    equ    2
  2865                                  UNLOCK_MUL_RANGE    equ    3
  2866                                  LOCK_READ	    equ    4
  2867                                  WRITE_UNLOCK	    equ    5
  2868                                  LOCK_ADD	    equ    6
  2869                                  
  2870                                  ;**	Structure for Lock buffer
  2871                                  
  2872                                  struc LockBuf
  2873 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2874 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2875                                  endstruc
  2876                                  
  2877                                  ;============================================================================
  2878                                  ; DPL.ASM, MSDOS 6.0, 1991
  2879                                  ;============================================================================
  2880                                  ; 04/08/2018 - Retro DOS v3.0
  2881                                  
  2882                                  ; (SRVCALL.ASM)
  2883                                  
  2884                                  struc DPL
  2885 00000000 ????                    .AX:	resw	1	; AX register
  2886 00000002 ????                    .BX:	resw	1	; BX register
  2887 00000004 ????                    .CX:	resw	1	; CX register
  2888 00000006 ????                    .DX:	resw	1	; DX register
  2889 00000008 ????                    .SI:	resw	1	; SI register
  2890 0000000A ????                    .DI:	resw	1	; DI register
  2891 0000000C ????                    .DS:	resw	1	; DS register
  2892 0000000E ????                    .ES:	resw	1	; ES register
  2893 00000010 ????                    .rsrvd: resw	1	; Reserved
  2894 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2895 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2896                                  .size:
  2897                                  endstruc
  2898                                   
  2899                                  ;----------------------------------------------------------------------------
  2900                                  ; DOSDATA
  2901                                  ;----------------------------------------------------------------------------
  2902                                  ;============================================================================
  2903                                  ; 24/04/2019 - Retro DOS v4.0
  2904                                  
  2905                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2906                                  		; ((just after resident IO.SYS code&data))
  2907                                  
  2908                                  ;============================================================================
  2909                                  ; WIN386.INC, MSDOS 6.0, 1991
  2910                                  ;============================================================================
  2911                                  ; 24/04/2019 - Retro DOS 4.0
  2912                                  
  2913                                  ;
  2914                                  ;  Symbols and structures relating to WIN386 support.
  2915                                  ;
  2916                                  ;  Used by files in both the DOS and the BIOS.
  2917                                  ;
  2918                                  ;  Created: 7-13-89 by MRW
  2919                                  ;
  2920                                  
  2921                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2922                                  
  2923                                  MultWin386		equ     16h	; Int 2f multiplex number
  2924                                  
  2925                                  Win386_Init		equ	05h	; Win386 initialization
  2926                                  Win386_Exit		equ	06h	; Win386 exit
  2927                                  Win386_Devcall		equ	07h	; Win386 device call out
  2928                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2929                                  
  2930                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2931                                  ; answer call outs from the DOSMGR
  2932                                  
  2933                                  Win386_DOSMGR		equ	15H
  2934                                  
  2935                                  ; The following structures are used to communicate instance data to 
  2936                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2937                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2938                                  
  2939                                  struc Win386_SIS	; Startup Info Structure
  2940 00000000 ????                     .Version:		resb	2	; db 3, 0
  2941 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2942 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2943 0000000A ????????                 .Reference_Data:	resd	1
  2944 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2945                                  endstruc
  2946                                  
  2947                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2948                                  
  2949                                  struc Win386_IIS	; Instance Item Structure
  2950 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2951 00000004 ????                    .Size:			resw	1	; size of an instance item
  2952                                  endstruc
  2953                                  
  2954                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2955                                  
  2956                                  ;Win386 DOSMGR function return values to indicate operation done
  2957                                  
  2958                                  WIN_OP_DONE		equ	0B97Ch	; 
  2959                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2960                                  
  2961                                  ;M021
  2962                                  ; WInoldap callout multiplex number
  2963                                  
  2964                                  WINOLDAP		equ	46h	;
  2965                                  
  2966                                  ;============================================================================
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; DOSCODE
  2969                                  ;----------------------------------------------------------------------------
  2970                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2971                                  
  2972                                  ;============================================================================
  2973                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2974                                  ;============================================================================
  2975                                  ; 16/07/2018 - Retro DOS 3.0
  2976                                  ;----------------------------------------------------------------------------
  2977                                  ; 24/04/2019 - Retro DOS 4.0
  2978                                  
  2979                                  ; MSDOS 6.0
  2980                                  ;----------------------------------------------------------------------------
  2981                                  ; FILE : ORIGIN.INC
  2982                                  ;----------------------------------------------------------------------------
  2983                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2984                                  ; is used for ORGing the DOS code.
  2985                                  ;
  2986                                  ; Brief Description of the necessacity of this ORG:
  2987                                  ; -------------------------------------------------
  2988                                  ;
  2989                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2990                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2991                                  ; This means programs running out off the HMA must use non-zero offset base
  2992                                  ; addresses. It also means that if we're running multiple programs from the
  2993                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2994                                  ; HMA segments that precede it.
  2995                                  ; 
  2996                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2997                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2998                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2999                                  ; selecting segment values between f124h and ffffh it could be located 
  3000                                  ; anywhere in the HMA. The problem with this is that programs with such 
  3001                                  ; high ORGs would not be able to run in low RAM.
  3002                                  ;
  3003                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  3004                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  3005                                  ; the following solution has been implemented:
  3006                                  ;
  3007                                  ; The Bios Code segment will have a very small offset and run at the very
  3008                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  3009                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  3010                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  3011                                  ; possible physical address at which DOS code will run, while still providing
  3012                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  3013                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  3014                                  ; mostly true.
  3015                                  ;
  3016                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3017                                  ; putting this value after the first jmp instruction in the DOS code in
  3018                                  ; mshead.asm. 
  3019                                  ;
  3020                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3021                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3022                                  ;
  3023                                  ; Revision History:
  3024                                  ;
  3025                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3026                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3027                                  ;
  3028                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3029                                  ; A utility called getsize will obtain the corresponding values from msdos
  3030                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3031                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3032                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3033                                  ; dependant on that.				  --- Apr 3 '90
  3034                                  ;
  3035                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3036                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3037                                  ; so the offset will not need to be included at the beginning of the code
  3038                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3039                                  ; at offset zero within the segment.
  3040                                  ; 
  3041                                  ;
  3042                                  ;--------------------------------------------------------------------------
  3043                                  
  3044                                  BIODATASTART	EQU	00700h
  3045                                  ;include	bdsize.inc	; this sets the values:
  3046                                  				;	BIODATASIZ
  3047                                  				;	BIOCODESIZ
  3048                                  				;	DOSDATASIZ
  3049                                  
  3050                                  ; 05/12/2022
  3051                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3052                                  			; 0900h for MSDOS 5.0 IO.SYS
  3053                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3054                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3055                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3056                                  			; 1370h for MSDOS 5.0 IO.SYS
  3057                                  ;ifndef ROMDOS
  3058                                  ;
  3059                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3060                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3061                                  ;
  3062                                  ;else
  3063                                  ;
  3064                                  ;BYTSTART	EQU	0
  3065                                  ;PARASTART	EQU	0
  3066                                  ;
  3067                                  ;endif ; ROMDOS
  3068                                  
  3069                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3070                                  ; -----------------------------------------------------------------
  3071                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3072                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3073                                  ;DOSDATASIZE equ MSDAT001E
  3074                                  ; 05/12/2022
  3075                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3076                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3077                                  			    ; of DOSDATA (in low memory) while
  3078                                  			    ; dos/kernel code starts just after 
  3079                                  			    ; this data block ((org = DOSDATASIZE))
  3080                                  			    ; (in low memory or in HMA)	
  3081                                  ; -----------------------------------------------------------------
  3082                                  
  3083                                  ; 04/11/2022	
  3084                                  ; -----------------------------------------------------------------	
  3085                                  ; NOTE:
  3086                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3087                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3088                                  ; -----------------------------------------------------------------
  3089                                  
  3090                                  ; ----------------------------------------------------------------------------
  3091                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3092                                  ; ----------------------------------------------------------------------------
  3093                                  
  3094                                  ;segment .code vstart=3DD0h ; 06/12/2022
  3095                                  ; 29/09/2023
  3096                                  segment .code vstart=3DE0h ; 19/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.22)
  3097                                  								
  3098                                  ; ============================================================================
  3099                                  
  3100                                  
  3101                                  ;[ORG 3DE0h]
  3102                                  
  3103                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3104                                  
  3105                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3106                                  
  3107                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3108                                  	;PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3109                                  			     ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3110                                  	
  3111                                  	; 29/09/2023 
  3112                                  	; 19/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  3113                                  	PARASTART equ 3DE0h	; (MSDOS 6.22 MSDOS.SYS)
  3114                                  
  3115                                  	[ORG PARASTART]	
  3116                                  
  3117                                  _$STARTCODE:
  3118                                  
  3119                                  ;PARASTART:
  3120 00000000 E93275                          JMP     DOSINIT
  3121                                  
  3122                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3123                                  	; 04/11/2022
  3124 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3125                                  
  3126                                  BioDataSeg:
  3127 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3128                                  
  3129                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3130                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3131                                  ; allows getting the DOS data segment without going through the 
  3132                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3133                                  
  3134                                  DosDSeg:
  3135 00000007 0000                    	dw	0
  3136                                  	
  3137                                  ;============================================================================
  3138                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3139                                  ;============================================================================
  3140                                  ; 16/07/2018 - Retro DOS 3.0
  3141                                  ; 29/04/2019 - Retro DOS 4.0
  3142                                  
  3143                                  	; (MSDOS version)
  3144                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3145                                  	;db	6
  3146                                  	;db	20
  3147                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3148                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3149                                  	;db	5
  3150                                  	;db	0	
  3151                                  
  3152                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3153                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3154 00000009 06                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3155 0000000A 16                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3156                                  
  3157                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3158                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3159                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3160                                  
  3161                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3162                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3163                                  ;
  3164                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3165                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3166                                  
  3167                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3168                                  ; those error codes which are "allowed" for each system call. If the error
  3169                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3170                                  ; is to return the "real" error via Extended error, and one of the allowed
  3171                                  ; errors on the actual call.
  3172                                  ;
  3173                                  ; The table is organized as follows:
  3174                                  ;
  3175                                  ;    Each entry in the table is of variable size, but the first
  3176                                  ;       two bytes are always:
  3177                                  ;
  3178                                  ;       Call#,Cnt of bytes following this byte
  3179                                  ;
  3180                                  ; EXAMPLE:
  3181                                  ;       Call 61 (OPEN)
  3182                                  ;
  3183                                  ;       DB      61,5,12,3,2,4,5
  3184                                  ;
  3185                                  ;       61 is the AH INT 21 call value for OPEN.
  3186                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3187                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3188                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3189                                  ;       this case 5).  The last value will be the one returned on the call if
  3190                                  ;       the "real" error is not one of the allowed ones.
  3191                                  ;
  3192                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3193                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3194                                  ;   call, so set up an Extended error and leave the current error code alone.
  3195                                  ;
  3196                                  ; The table is terminated by a call value of 0FFh
  3197                                  
  3198                                  ;PUBLIC I21_MAP_E_TAB
  3199                                  	; 10/08/2018
  3200                                  
  3201                                  ; 29/04/2019
  3202                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3203                                  ; 04/11/2022
  3204                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3205                                  
  3206                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3207 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3208 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3209 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3210 00000018 0205                        DB          error_file_not_found,error_access_denied
  3211 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3212 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3213 00000022 04                          DB          error_too_many_open_files
  3214 00000023 05                          DB          error_access_denied
  3215                                      ; MSDOS 6.0
  3216 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3217 00000029 04                          DB          error_too_many_open_files
  3218 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3219                                      ; MSDOS 3.3
  3220                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3221                                      ;DB		error_too_many_open_files,error_access_denied
  3222 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3223 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3224 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3225 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3226 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3227 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3228 00000045 05                          DB          error_access_denied
  3229 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3230 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3231 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3232 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3233                                      ; MSDOS 6.0	
  3234 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3235                                      ; MSDOS 3.3	
  3236                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3237 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3238 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3239 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3240 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3241 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3242 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3243 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3244 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3245                                      ; MSDOS 6.0
  3246 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3247 0000007D 1005                        DB		error_current_directory,error_access_denied
  3248                                      ; MSDOS 3.3
  3249                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3250                                      ;DB		error_access_denied
  3251                                      ; MSDOS 6.0	
  3252 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3253 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3254                                      ; MSDOS 3.3	
  3255                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3256 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3257 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3258 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3259 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3260 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3261 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3262 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3263 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3264 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3265 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3266 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3267 000000AA 01                          DB              error_invalid_function
  3268                                      ; MSDOS 6.0		
  3269 000000AB 6C0A                        DB	ExtOpen,10
  3270 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3271 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3272 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3273 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3274 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3275 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3276 000000BD FF                          DB  0FFh
  3277                                  
  3278                                  ;19/09/2023
  3279                                  ;22/12/2022
  3280                                  ;04/11/2022	
  3281                                  ;29/04/2019 - Retro DOS v4.0
  3282                                  ;============================================================================
  3283                                  ; 	Retro DOS v4.0
  3284                                  ;============================================================================
  3285 000000BE 00                      	db 	0
  3286                                  RETRODOSMSG:
  3287 000000BF 0D0A                    	db	13,10
  3288                                  	;;;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3289                                  	;;;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3290                                  	;;;db	"Retro DOS v4.1 by Erdogan Tan [2022]"	; 28/12/2022
  3291                                  	;;db	"Retro DOS v4.2 by Erdogan Tan [2022]"	; 30/12/2022
  3292                                  	;db	"Retro DOS v4.2 by Erdogan Tan [2023]"
  3293 000000C1 526574726F20444F53-     	db	"Retro DOS v4.2 by Erdogan Tan [2024]"	; 05/01/2024
  3293 000000CA 2076342E3220627920-
  3293 000000D3 4572646F67616E2054-
  3293 000000DC 616E205B323032345D 
  3294 000000E5 0D0A2400                	db	13,10,"$", 0 
  3295                                  
  3296                                  ;============================================================================
  3297                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3298                                  ;============================================================================
  3299                                  ; 11/07/2018 - Retro DOS v3.0
  3300                                  
  3301                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3302 000000E9 90                      align 2
  3303                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3304                                  
  3305                                  ; Standard Functions
  3306                                  ;DISPATCH  LABEL WORD
  3307                                  DISPATCH:
  3308                                  	; 16/07/2018 - Retro DOS v3.0
  3309                                  	; (MSDOS 3.3)
  3310                                  
  3311                                  ; 29/04/2019
  3312                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3313                                  
  3314                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3315                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3316                                  
  3317 000000EA [C260]                          short_addr  _$ABORT			    ;  0      0
  3318 000000EC [3616]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3319 000000EE [3F16]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3320 000000F0 [F116]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3321 000000F2 [0C17]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3322 000000F4 [1217]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3323 000000F6 [7D15]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3324 000000F8 [A915]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3325 000000FA [5713]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3326 000000FC [B013]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3327 000000FE [BC13]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3328 00000100 [2617]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3329 00000102 [3017]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3330 00000104 [7B0F]                          short_addr  _$DISK_RESET		    ; 13      D
  3331 00000106 [620E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3332 00000108 [FF1D]                          short_addr  _$FCB_OPEN			    ; 15      F
  3333 0000010A [CF17]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3334 0000010C [EE1E]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3335 0000010E [341F]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3336 00000110 [7517]                          short_addr  _$FCB_DELETE		    ; 19     13
  3337 00000112 [561C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3338 00000114 [5A1C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3339 00000116 [DE1E]                          short_addr  _$FCB_CREATE		    ; 22     16
  3340 00000118 [3B18]                          short_addr  _$FCB_RENAME		    ; 23     17
  3341                                  	; 16/07/2018
  3342                                          ;short_addr _CPMFUNC			    ; 24     18	
  3343 0000011A [4D06]                          short_addr  NO_OP			    ; 24     18
  3344 0000011C [5D0E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3345 0000011E [520E]                          short_addr  _$SET_DMA			    ; 26     1A
  3346                                  
  3347                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3348                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3349                                  ;                                                                          ;
  3350 00000120 [0A0F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3351 00000122 [0C0F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3352                                  ;                                                                          ;
  3353                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3354                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3355                                  
  3356                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3357                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3358                                  
  3359                                  ; 08/07/2018 - Retro DOS v3.0
  3360                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3361                                  
  3362 00000124 [4D06]                  	short_addr  NO_OP			    ; 29     1D
  3363 00000126 [4D06]                  	short_addr  NO_OP			    ; 30     1E
  3364                                  
  3365                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3366                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3367                                  ;                                                                          ;
  3368 00000128 [4B0F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3369                                  ;                                                                          ;
  3370                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3371                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3372                                          ;short_addr _CPMFUNC			    ; 32     20
  3373                                  
  3374                                  ; 08/07/2018 - Retro DOS v3.0
  3375                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3376                                  
  3377 0000012A [4D06]                  	short_addr  NO_OP			    ; 32     20
  3378                                  
  3379 0000012C [5E1C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3380 0000012E [621C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3381 00000130 [8717]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3382 00000132 [5D17]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3383                                  
  3384                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3385                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3386                                  
  3387                                  ; Extended Functions
  3388 00000134 [830E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3389                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3390                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3391                                  ;                                                                          ;
  3392 00000136 [8810]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3393                                  ;                                                                          ;
  3394                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3395                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3396 00000138 [521C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3397 0000013A [4E1C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3398 0000013C [FF0E]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3399 0000013E [580A]                          short_addr  _$GET_DATE                      ; 42     2A
  3400 00000140 [750A]                          short_addr  _$SET_DATE                      ; 43     2B
  3401 00000142 [940A]                          short_addr  _$GET_TIME                      ; 44     2C
  3402 00000144 [A50A]                          short_addr  _$SET_TIME                      ; 45     2D
  3403 00000146 [430C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3404                                  
  3405                                  ; Extended functionality group
  3406 00000148 [3F0E]                          short_addr  _$GET_DMA                       ; 47     2F
  3407 0000014A [1A0C]                          short_addr  _$GET_VERSION                   ; 48     30
  3408 0000014C [6660]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3409                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3410                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3411                                  ;                                                                          ;
  3412 0000014E [4D0F]                          short_addr  _$GET_DPB			    ; 50     32
  3413                                  ;                                                                          ;
  3414                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3416 00000150 [6702]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3417 00000152 [350F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3418 00000154 [740E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3419 00000156 [1C0E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3420 00000158 [B00E]                          short_addr  _$CHAR_OPER                     ; 55     37
  3421 0000015A [4A0C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3422                                  ; XENIX CALLS
  3423                                  ;   Directory Group
  3424 0000015C [BA21]                          short_addr  _$MKDIR			    ; 57     39
  3425 0000015E [0621]                          short_addr  _$RMDIR			    ; 58     3A
  3426 00000160 [4121]                          short_addr  _$CHDIR			    ; 59     3B
  3427                                  ;   File Group
  3428 00000162 [6D6E]                          short_addr  _$CREAT			    ; 60     3C
  3429 00000164 [966D]                          short_addr  _$OPEN			    ; 61     3D
  3430 00000166 [D865]                          short_addr  _$CLOSE		 	    ; 62     3E
  3431 00000168 [E166]                          short_addr  _$READ			    ; 63     3F
  3432 0000016A [3E67]                          short_addr  _$WRITE			    ; 64     40
  3433 0000016C [BD6E]                          short_addr  _$UNLINK			    ; 65     41
  3434 0000016E [4367]                          short_addr  _$LSEEK			    ; 66     42
  3435 00000170 [7A6E]                          short_addr  _$CHMOD			    ; 67     43
  3436 00000172 [1B22]                          short_addr  _$IOCTL			    ; 68     44
  3437 00000174 [F867]                          short_addr  _$DUP			    ; 69     45
  3438 00000176 [1668]                          short_addr  _$DUP2			    ; 70     46
  3439 00000178 [A220]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3440                                  ;   Memory Group
  3441 0000017A [5861]                          short_addr  _$ALLOC			    ; 72     48
  3442 0000017C [D262]                          short_addr  _$DEALLOC                       ; 73     49
  3443 0000017E [AE62]                          short_addr  _$SETBLOCK                      ; 74     4A
  3444                                  ;   Process Group
  3445 00000180 [4C5A]                          short_addr  _$EXEC			    ; 75     4B
  3446 00000182 [9E60]                          short_addr  _$EXIT			    ; 76     4C
  3447 00000184 [425A]                          short_addr  _$WAIT			    ; 77     4D
  3448 00000186 [EC1F]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3449                                  ;   Special Group
  3450 00000188 [4020]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3451                                  ; SPECIAL SYSTEM GROUP
  3452                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3453                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3454                                  ;                                                                          ;
  3455 0000018A [B902]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3456 0000018C [C502]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3457 0000018E [410F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3458 00000190 [B00F]                          short_addr  _$SETDPB			    ; 83     53
  3459                                  ;                                                                          ;
  3460                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3461                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3462 00000192 [3E0C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3463                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3464                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3465                                  ;                                                                          ;
  3466 00000194 [7710]                          short_addr  _$DUP_PDB                       ; 85     55
  3467                                  ;                                                                          ;
  3468                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3469                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3470 00000196 [E36E]                          short_addr  _$RENAME			    ; 86     56
  3471 00000198 [AA67]                          short_addr  _$FILE_TIMES                    ; 87     57
  3472 0000019A [0763]                          short_addr  _$ALLOCOPER                     ; 88     58
  3473                                  
  3474                                  ; 08/07/2018 - Retro DOS v3.0
  3475                                  ; -------------------------------------------------------------------------;
  3476                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3477                                  
  3478                                  ; Network extention system calls
  3479 0000019C [C40E]                          short_addr  _$GetExtendedError              ; 89     59
  3480 0000019E [696F]                          short_addr  _$CreateTempFile                ; 90     5A
  3481 000001A0 [516F]                          short_addr  _$CreateNewFile                 ; 91     5B
  3482 000001A2 [1B71]                          short_addr  _$LockOper                      ; 92     5C
  3483 000001A4 [EB63]                          short_addr  _$ServerCall                    ; 93     5D
  3484 000001A6 [E068]                          short_addr  _$UserOper                      ; 94     5E
  3485 000001A8 [4568]                          short_addr  _$AssignOper                    ; 95     5F
  3486 000001AA [316D]                          short_addr  _$NameTrans                     ; 96     60
  3487 000001AC [4D06]                  	short_addr  NO_OP			    ; 97     61
  3488 000001AE [C502]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3489                                  ; the next call is reserved for hangool sys call
  3490                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3491 000001B0 [E40E]                  	short_addr  _$ECS_Call			    ; 99     63
  3492                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3493                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3494                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3495                                  ;                                                                          ;
  3496 000001B2 [D102]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3497                                  ;                                                                          ;
  3498                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3499                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3500 000001B4 [CD0C]                          short_addr  _$GetExtCntry                   ; 101    65
  3501 000001B6 [CA0D]                          short_addr  _$GetSetCdPg                    ; 102    66
  3502 000001B8 [2366]                          short_addr  _$ExtHandle                     ; 103    67
  3503 000001BA [0B66]                          short_addr  _$COMMIT                        ; 104    68
  3504                                  
  3505                                  ; 08/07/2018
  3506                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3507                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3508                                  
  3509                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3510 000001BC [7A11]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3511 000001BE [0B66]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3512 000001C0 [4D06]                  	short_addr  NO_OP                           ; 107    6B   
  3513                                  						    ; IFS_IOCTL no longer 
  3514                                  						    ; supported
  3515 000001C2 [0370]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3516                                  
  3517                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3518                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3519                                  ;                                                                          ;
  3520                                  ;ifdef ROMEXEC
  3521                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3522                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3523                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3524                                  ;endif
  3525                                  ;                                                                          ;
  3526                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3527                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3528                                  
  3529                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3530                                  
  3531                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3532                                  
  3533                                  ; 08/07/2018 - Retro DOS v3.0
  3534                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3535                                  
  3536                                  ;	If 	Installed
  3537                                  
  3538                                  align 2
  3539                                  
  3540                                  ;PUBLIC FOO
  3541                                  
  3542                                  FOO:	; LABEL WORD
  3543 000001C4 [0A07]                          short_addr  Leave2F
  3544                                  
  3545 000001C6 [C801]                  DTab:	DW  DOSTable
  3546                                  
  3547                                  	;PUBLIC FOO,DTAB
  3548                                  
  3549                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3550                                  
  3551                                  ; 29/04/2019
  3552                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3553                                  
  3554                                  
  3555                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3556                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3557                                         
  3558                                  DOSTable:  ; LABEL  WORD
  3559 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3560 000001C9 [2F09]                          short_addr  DOSInstall          ;   0 install check
  3561 000001CB [A82E]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3562 000001CD [A50E]                          short_addr  RECSET              ;   2   RECSET
  3563 000001CF [2909]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3564 000001D1 [864F]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3565 000001D3 [4116]                          short_addr  OUTT                ;   5   OUT
  3566 000001D5 [5852]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3567 000001D7 [CF57]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3568 000001D9 [9D2F]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3569 000001DB [9459]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3570 000001DD [CF71]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3571 000001DF [F42B]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3572 000001E1 [DE2B]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3573 000001E3 [E00A]                          short_addr  DATE16              ;   13  DATE16
  3574 000001E5 [E611]                          short_addr  Idle		;   14      empty slot
  3575 000001E7 [C857]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3576 000001E9 [E611]                          short_addr  Idle		;   16      empty slot
  3577 000001EB [B311]                          short_addr  StrCpy              ;   17  StrCpy
  3578 000001ED [CB11]                          short_addr  StrLen              ;   18  StrLen
  3579 000001EF [314F]                          short_addr  UCase		;   19  UCase
  3580 000001F1 [0C58]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3581 000001F3 [6B59]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3582 000001F5 [5465]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3583 000001F7 [A569]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3584 000001F9 [8104]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3585 000001FB [5069]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3586 000001FD [566D]                          short_addr  DriveFromText       ;   26  DriveFromText
  3587 000001FF [810B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3588 00000201 [100C]                          short_addr  DSUM                ;   28  DSUM
  3589 00000203 [770B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3590 00000205 [9111]                          short_addr  StrCmp              ;   30  StrCmp
  3591 00000207 [9368]                          short_addr  InitCDS             ;   31  initcds
  3592 00000209 [2165]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3593 0000020B [316D]                          short_addr  _$NameTrans		;   33  $NameTrans
  3594 0000020D [7406]                          short_addr  CAL_LK              ;   34  CAL_LK
  3595 0000020F [D440]                          short_addr  DEVNAME             ;   35  DEVNAME
  3596 00000211 [E611]                          short_addr  Idle                ;   36  Idle
  3597 00000213 [D911]                          short_addr  DStrLen             ;   37  DStrLen
  3598 00000215 [8812]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3599 00000217 [D865]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3600 00000219 [8E12]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3601 0000021B [E166]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3602 0000021D [4A12]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3603 0000021F [CB12]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3604 00000221 [BA12]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3605 00000223 [E812]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3606                                          
  3607                                  	; 29/04/2019 - Retro DOS v4.0
  3608 00000225 [EC12]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3609                                  
  3610 00000227 [4D06]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3611                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3612                                  
  3613                                  DOSTableEnd:  ; LABEL BYTE
  3614                                  
  3615                                  	;ENDIF
  3616                                  
  3617                                  ; ----------------------------------------------------------------------------
  3618                                  ; BREAK   <Copyright notice and version>
  3619                                  ; ----------------------------------------------------------------------------
  3620                                  
  3621                                  ;CODSTRT EQU	$
  3622                                  
  3623                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3624                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3625                                  
  3626                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3627                                  ;       module. The reason is so that the data alignments are the same in
  3628                                  ;       IBM-DOS and MS-DOS up through header.
  3629                                  
  3630                                  	;PUBLIC	HEADER
  3631                                  
  3632                                  HEADER:	; LABEL	BYTE
  3633                                          ;IF	DEBUG
  3634                                          ;DB	13,10,"Debugging DOS version "
  3635                                          ;DB	MAJOR_VERSION + "0"
  3636                                          ;DB	"."
  3637                                          ;DB	(MINOR_VERSION / 10) + "0"
  3638                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3639                                          ;ENDIF
  3640                                  
  3641                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3642                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3643                                  %if 0
  3644                                          ;IF	NOT IBM
  3645                                          DB	13,10,"MS-DOS version "
  3646                                          DB	MAJOR_VERSION + "0"
  3647                                          DB	"."
  3648                                          DB	(MINOR_VERSION / 10) + "0"
  3649                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3650                                          DB	(MINOR_VERSION % 10) + "0"
  3651                                  
  3652                                          ;IF	HIGHMEM
  3653                                          ;DB	"H"
  3654                                          ;ENDIF
  3655                                  
  3656                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3657                                  	; 30/04/2019 - Retro DOS v4.0
  3658                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3659                                  
  3660                                  	;ENDIF
  3661                                  
  3662                                  %endif
  3663                                  
  3664                                  ;IF DEBUG
  3665                                  ;	DB	13,10,"$"
  3666                                  ;ENDIF
  3667                                  
  3668                                  ;include copyrigh.inc
  3669                                  
  3670                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3671                                  
  3672                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3673                                  	;DB	"Licensed Material - Property of Microsoft "
  3674                                  	;DB	"All rights reserved "
  3675                                  
  3676                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3677                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3678                                  
  3679                                  ; 28/12/2022 - Retro DOS v4.1
  3680                                  %if 0
  3681                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3682                                  ms_copyright:
  3683                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3684                                  	db	'Licensed Material - Property of Microsoft '
  3685                                  	db	'All rights reserved '
  3686                                  
  3687                                  %endif
  3688                                  	;; 28/12/2022 - Retro DOS v4.1
  3689                                  ;ms_copyright:	
  3690                                    	;db	13,10,"MS DOS Version 5.0"
  3691                                  	;db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3692                                  
  3693                                  ;	; 21/09/2023 - Retro DOS v4.2 MSDOS.SYS
  3694                                  ;	; (MSDOS 6.22 MSDOS.SYS - DOSCODE:3FDDh (File offset: 509))
  3695                                  ;ms_copyright:
  3696                                  ;	db 'MS DOS Version 6 (C)Copyright 1981-1994 Microsoft Corp '
  3697                                  ;	db 'Licensed Material - Property of Microsoft All rights reserved '
  3698                                  
  3699                                  	; 20/09/2023 - Retro DOS v4.2
  3700                                  ms_copyright:	
  3701 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 6.22"
  3701 00000232 56657273696F6E2036-
  3701 0000023B 2E3232             
  3702 0000023E 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1994 Microsoft Corp.",13,10,"$",0	
  3702 00000247 687420313938312D31-
  3702 00000250 393934204D6963726F-
  3702 00000259 736F667420436F7270-
  3702 00000262 2E0D0A2400         
  3703                                  
  3704                                  ;============================================================================
  3705                                  ; MSCODE.ASM
  3706                                  ;============================================================================
  3707                                  
  3708                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3709                                  ; 03/03/2018
  3710                                  
  3711                                  ;
  3712                                  ; MSCODE.ASM -- MSDOS code
  3713                                  ;
  3714                                  
  3715                                  ;INCLUDE DOSSEG.ASM
  3716                                  ;INCLUDE STDSW.ASM
  3717                                  
  3718                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3719                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3720                                  
  3721                                  ;.xcref
  3722                                  ;INCLUDE DOSSYM.ASM
  3723                                  ;INCLUDE DEVSYM.ASM
  3724                                  ;.cref
  3725                                  ;.list
  3726                                  
  3727                                  ;IFNDEF  KANJI
  3728                                  ;KANJI   EQU     0       ; FALSE
  3729                                  ;ENDIF
  3730                                  
  3731                                  ;IFNDEF  IBM
  3732                                  ;IBM     EQU     0
  3733                                  ;ENDIF
  3734                                  
  3735                                  ;IFNDEF  HIGHMEM
  3736                                  ;HIGHMEM  EQU     0
  3737                                  ;ENDIF
  3738                                  
  3739                                          ;i_need  USER_SP,WORD
  3740                                          ;i_need  USER_SS,WORD
  3741                                          ;i_need  SAVEDS,WORD
  3742                                          ;i_need  SAVEBX,WORD
  3743                                          ;i_need  INDOS,BYTE
  3744                                          ;i_need  NSP,WORD
  3745                                          ;i_need  NSS,WORD
  3746                                          ;i_need  CURRENTPDB,WORD
  3747                                          ;i_need  AUXSTACK,BYTE
  3748                                          ;i_need  CONSWAP,BYTE
  3749                                          ;i_need  IDLEINT,BYTE
  3750                                          ;i_need  NOSETDIR,BYTE
  3751                                          ;i_need  ERRORMODE,BYTE
  3752                                          ;i_need  IOSTACK,BYTE
  3753                                          ;i_need  WPERR,BYTE
  3754                                          ;i_need  DSKSTACK,BYTE
  3755                                          ;i_need  CNTCFLAG,BYTE
  3756                                          ;i_need  LEAVEADDR,WORD
  3757                                          ;i_need  NULLDEVPT,DWORD
  3758                                  
  3759                                          ;IF NOT IBM
  3760                                          ;i_need  OEM_HANDLER,DWORD
  3761                                          ;ENDIF
  3762                                  
  3763                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3764                                  
  3765                                  ;============================================================================
  3766                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3767                                  ;============================================================================
  3768                                  ; 11/07/2018 - Retro DOS v3.0
  3769                                  ; 01/05/2019 - Retro DOS v4.0
  3770                                  
  3771                                  ; DosCode SEGMENT
  3772                                  
  3773                                  ; ==========================================================================
  3774                                  ;
  3775                                  ; $Set_CTRL_C_Trapping
  3776                                  ;
  3777                                  ; Function:
  3778                                  ;	Enable disable ^C checking in dispatcher
  3779                                  ;
  3780                                  ; Inputs:
  3781                                  ;		AL = 0 read ^C status
  3782                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3783                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3784                                  ;		AL = 5 get DOS boot drive
  3785                                  ;		AL = 6 Get version number
  3786                                  ;			RETURNS:
  3787                                  ;				BH = Minor version number
  3788                                  ;				BL = Major version number
  3789                                  ;				DL = DOS internal revision
  3790                                  ;				DH = DOS type flags
  3791                                  ;					Bit 3 	- DOS in ROM
  3792                                  ;					Bit 4 	- DOS in HMA
  3793                                  ;					Bit 0-2, 5-7 - Reserved
  3794                                  ; Outputs:
  3795                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3796                                  ;
  3797                                  ; History:
  3798                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3799                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3800                                  ; ==========================================================================
  3801                                  
  3802                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3803                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3804                                  
  3805                                  ; 01/01/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  3806                                  ; DOSCODE:4052h (MSDOS 6.21, MSDOS.SYS)
  3807                                  ; DOSCODE:4052h (MSDOS 6.22, MSDOS.SYS)
  3808                                  ; DOSCODE:4123h (PCDOS 7.1, IBMDOS.COM)
  3809                                  
  3810                                  _$SET_CTRL_C_TRAPPING:
  3811                                  	; 01/05/2019 - Retro DOS v4.0
  3812                                  
  3813 00000267 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3814 00000269 7603                    	jbe	short scct_1		; If yes continue processing
  3815                                  
  3816 0000026B B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3817 0000026D CF                      	iret
  3818                                  scct_1:
  3819 0000026E 1E                      	push	DS
  3820                                  
  3821                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3822 0000026F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3823                                  	
  3824 00000274 50                      	push	AX			; DL only register that can change
  3825 00000275 56                      	push	SI
  3826                                  
  3827 00000276 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3828 00000279 30E4                    	xor	AH,AH			; Clear high byte of AX
  3829 0000027B 09C0                    	or	AX,AX			; Check for subfunction 0
  3830 0000027D 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3831                                  
  3832 0000027F 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3833 00000281 EB30                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3834                                  scct_2:
  3835 00000283 48                      	dec	AX			; Now dec AX and see if it was 1
  3836 00000284 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3837                                  
  3838 00000286 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3839 00000289 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3840 0000028B EB26                    	jmp	SHORT scct_9s		; Jmp to exit
  3841                                  scct_3:
  3842 0000028D 48                      	dec	AX			; Dec AX again to see if it was 2
  3843 0000028E 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3844                                  
  3845 00000290 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3846 00000293 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3847 00000295 EB1C                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3848                                  scct_4:
  3849 00000297 3C03                    	cmp	al,3 ; 01/01/2024 (PCDOS 7.1 IBMDOS.COM)
  3850                                  	;cmp	AX,3 			; Test for 5 after it was dec twice
  3851 00000299 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3852 0000029B 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3853 0000029F EB12                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3854                                  scct_5:
  3855 000002A1 3C04                    	cmp	al,4 ; 01/01/2024 (PCDOS 7.1 IBMDOS.COM)
  3856                                  	;cmp	AX,4 			; Test for 6 after it was dec twice
  3857 000002A3 750E                    	jne	short scct_9s		; If not equal then not get version
  3858                                  	
  3859                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3860                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)
  3861 000002A5 BB0616                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3862                                  	
  3863                                  	;mov	dl,0
  3864                                  	;mov	DL,DOSREVNM ; 0
  3865                                  
  3866                                  	;xor	dh,dh			; assume vanilla DOS
  3867                                  	; 01/01/2024
  3868 000002A8 BA0000                  	mov	dx,0
  3869 000002AB 3836[1112]              	cmp	byte [DosHasHMA],dh ; 0
  3870                                  	;cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3871                                  	;je	short @F
  3872 000002AF 7402                    	je	short scct_6
  3873                                  	; 01/01/2024
  3874 000002B1 B610                    	mov	dh,10h
  3875                                  	;or	dh,10h
  3876                                  	;;or	DH,DOSINHMA ; 10h
  3877                                  ;@@:
  3878                                  scct_6:
  3879                                  
  3880                                  ;ifdef ROMDOS
  3881                                  ;	or	DH,DOSINROM ; 08h
  3882                                  ;endif ; ROMDOS
  3883                                  
  3884                                  scct_9s:
  3885 000002B3 5E                      	pop	SI
  3886 000002B4 58                      	pop	AX
  3887 000002B5 1F                      	pop	DS
  3888                                  scct_9f:
  3889 000002B6 CF                      	iret
  3890                                  
  3891                                  SetCtrlShortEntry:			; This allows a conditional entry
  3892                                  					; from main dispatch code
  3893 000002B7 EBAE                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3894                                  
  3895                                  ; ==========================================================================
  3896                                  ;									   
  3897                                  ; The following two routines are dispatched to directly with ints disabled
  3898                                  ; immediately after the int 21h entry.	no DIS state is set.
  3899                                  ;
  3900                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3901                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3902                                  ;
  3903                                  ; ==========================================================================
  3904                                  
  3905                                  _$SET_CURRENT_PDB:
  3906 000002B9 1E                      	push	DS
  3907                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3908 000002BA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3909 000002BF 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3910 000002C3 1F                      	pop	DS
  3911 000002C4 CF                      	iret
  3912                                  
  3913                                  ; ==========================================================================
  3914                                  ;
  3915                                  ; $get_current_PDB returns in BX the current process
  3916                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3917                                  ;
  3918                                  ; ==========================================================================
  3919                                  
  3920                                  _$GET_CURRENT_PDB:
  3921 000002C5 1E                      	push	DS
  3922                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3923 000002C6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3924 000002CB 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3925 000002CF 1F                      	pop	DS
  3926 000002D0 CF                      	iret
  3927                                  
  3928                                  ; ==========================================================================
  3929                                  ;
  3930                                  ; Sets the Printer Flag to whatever is in AL.
  3931                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3932                                  ;
  3933                                  ; ==========================================================================
  3934                                  
  3935                                  _$SET_PRINTER_FLAG:
  3936 000002D1 1E                      	push	ds
  3937                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3938 000002D2 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3939 000002D7 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3940 000002DA 1F                      	pop	ds
  3941 000002DB CF                      	iret
  3942                                  
  3943                                  ; 01/05/2019 - Retro DOS v4.0
  3944                                  ; 08/07/2018 - Retro DOS v3.0
  3945                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3946                                  
  3947                                  ; ----------------------------------------------------------------------------
  3948                                  ; BREAK   <System call entry points and dispatcher>
  3949                                  ; ----------------------------------------------------------------------------
  3950                                  
  3951                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3952                                  
  3953                                  ; ==========================================================================
  3954                                  ;
  3955                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3956                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3957                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3958                                  ;
  3959                                  ; ==========================================================================
  3960                                  
  3961                                  SYSTEM_CALL:    ; PROC NEAR
  3962                                  
  3963                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3964                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3965                                  
  3966                                  ;entry	QUIT				
  3967                                  QUIT:				; INT 20H entry point	
  3968                                  	;MOV	AH,0
  3969 000002DC 30E4                    	xor	ah,ah ; 08/07/2018
  3970 000002DE EB36                    	JMP     SHORT SAVREGS
  3971                                  
  3972                                  ; ---------------------------------------------------------------------------
  3973                                  
  3974                                  	; The system call in AH is out of the range that we know how
  3975                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3976                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3977                                  	; error as this may break some programs compatability.
  3978                                  
  3979                                  BADCALL:
  3980                                          ;MOV	AL,0
  3981 000002E0 30C0                    	xor	al,al ; 08/07/2018
  3982                                  IRETT:	; 06/05/2019
  3983                                  _IRET:
  3984 000002E2 CF                              IRET
  3985                                  
  3986                                  ; ---------------------------------------------------------------------------
  3987                                  
  3988                                  ; 01/05/2019 - Retro DOS v4.0
  3989                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3990                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3991                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3992                                  
  3993                                  	; An alternative method of entering the system is to perform a
  3994                                  	; CALL 5 in the program segment prefix with the contents of CL
  3995                                  	; indicating what system call the user would like. A subset of
  3996                                  	; the possible system calls is allowed here only the
  3997                                  	; CPM-compatible calls may get dispatched.
  3998                                  
  3999                                  		; System call entry point and dispatcher
  4000                                  CALL_ENTRY:
  4001 000002E3 1E                      	push	DS
  4002                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4003 000002E4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4004 000002E9 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  4005                                  
  4006 000002ED 58                              POP     AX                      ; IP from the long call at 5
  4007 000002EE 58                              POP     AX                      ; Segment from the long call at 5
  4008 000002EF 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  4009                                  
  4010                                  		; Re-order the stack to simulate an interrupt 21.
  4011                                  
  4012 000002F3 9C                      	PUSHF				; Start re-ordering the stack
  4013 000002F4 FA                      	CLI
  4014 000002F5 50                              PUSH    AX                      ; Save segment
  4015 000002F6 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  4016                                  	; 04/11/2022
  4017                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  4018                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  4019 000002FA FF36[EC05]              	push	word [SAVEDS]
  4020 000002FE 1F                      	pop	ds
  4021                                  	;
  4022                                  	;cmp	cl,36
  4023 000002FF 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  4024 00000302 77DC                            JA      SHORT BADCALL
  4025 00000304 88CC                            MOV     AH,CL
  4026                                  	; 08/07/2018
  4027 00000306 EB0E                    	jmp	short SAVREGS
  4028                                  
  4029                                  ; ---------------------------------------------------------------------------
  4030                                  
  4031                                  ; 01/05/2019 - Retro DOS v4.0
  4032                                  
  4033                                  	; This is the normal INT 21 entry point. We first perform a
  4034                                  	; quick test to see if we need to perform expensive DOS-entry
  4035                                  	; functions. Certain system calls are done without interrupts
  4036                                  	; being enabled.
  4037                                  
  4038                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  4039                                  
  4040                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4041                                  ; 04/11/2022
  4042                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4043                                  
  4044                                  COMMAND:
  4045                                  	; 22/12/2022
  4046 00000308 FA                      	cli
  4047                                  
  4048                                  	; 01/05/2019 - Retro DOS v4.0
  4049                                  	; 08/07/2018 - Retro DOS v3.0
  4050                                  
  4051                                  ; 22/12/2022
  4052                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4053                                  	;IF	NOT IBM
  4054 00000309 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4055 0000030C 7203                    	JB	SHORT NOTOEM
  4056 0000030E E97A01                  	JMP	_$SET_OEM_HANDLER
  4057                                  
  4058                                  NOTOEM:
  4059                                  	;ENDIF
  4060                                  
  4061                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4062                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4063                                  
  4064                                  	; 22/12/2022
  4065                                  	;cli	; 08/07/2018
  4066                                  
  4067                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4068                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4069                                  	; 04/11/2022
  4070 00000311 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4071                                  	;JBE	SHORT SAVREGS
  4072 00000314 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4073                                  
  4074                                  	; 31/05/2019
  4075                                  
  4076                                  	; The following set of calls are issued by the server at
  4077                                  	; *arbitrary* times and, therefore, must be executed on
  4078                                  	; the user's entry stack and executed with interrupts off.
  4079                                  
  4080                                  SAVREGS:
  4081                                  	; 01/05/2019 - Retro DOS v4.0
  4082                                  	; 10/08/2018
  4083                                  	; 08/07/2018 - Retro DOS v3.0
  4084 00000316 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4085                                  	;;je	_$SET_CTRL_C_TRAPPING
  4086                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4087 00000319 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4088                                  	; 04/11/2022
  4089 0000031B 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4090 0000031D 80FC64                  	cmp	ah,64h			; Check Max case number
  4091 00000320 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4092 00000322 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4093 00000324 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4094 00000327 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4095 00000329 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4096 0000032C 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4097 0000032E 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4098 00000331 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4099                                  
  4100                                  SaveAllRegs:
  4101                                  	; 01/05/2019 - Retro DOS v4.0
  4102                                  
  4103 00000333 06                              push	ES
  4104 00000334 1E                      	push	DS
  4105 00000335 55                      	push	BP
  4106 00000336 57                      	push	DI
  4107 00000337 56                      	push	SI
  4108 00000338 52                      	push	DX
  4109 00000339 51                      	push	CX
  4110 0000033A 53                      	push	BX
  4111 0000033B 50                      	push	AX
  4112                                  
  4113 0000033C 8CD8                    	mov	AX,DS
  4114                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4115 0000033E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4116 00000343 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4117 00000346 891E[EA05]              	mov	[SAVEBX],BX
  4118                                  
  4119                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4120                                  	
  4121                                  	; 08/07/2018 - Retro DOS v3.0        
  4122                                  	;xor     ax,ax
  4123                                  	;mov     [USER_ID],ax
  4124                                  	;mov     ax,[CurrentPDB]
  4125                                  	;mov     [PROC_ID],ax
  4126                                  
  4127                                  	; 01/05/2019
  4128                                  
  4129                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4130                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4131                                  	; this!!!
  4132                                  
  4133 0000034A A1[8405]                	MOV     AX,[USER_SP]
  4134 0000034D A3[F205]                        MOV     [NSP],AX
  4135 00000350 A1[8605]                        MOV     AX,[USER_SS]
  4136 00000353 A3[F005]                        MOV     [NSS],AX
  4137                                  
  4138 00000356 31C0                    	xor	AX,AX ; 0
  4139 00000358 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4140                                  
  4141 0000035B F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4142 00000360 7503                    	jnz	short set_indos_flag	; if win386 present
  4143 00000362 A3[3E03]                	mov	[USER_ID],AX
  4144                                  set_indos_flag:
  4145 00000365 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4146                                  
  4147 00000369 8926[8405]                      MOV     [USER_SP],SP
  4148 0000036D 8C16[8605]                      MOV     [USER_SS],SS
  4149                                  
  4150 00000371 A1[3003]                	mov	AX,[CurrentPDB]
  4151 00000374 A3[3C03]                	mov	[PROC_ID],AX
  4152 00000377 8ED8                    	mov	DS,AX
  4153 00000379 58                      	pop	AX
  4154 0000037A 50                      	push	AX
  4155                                  
  4156                                  	; save user stack in his area for later returns (possibly from EXEC)
  4157                                  
  4158 0000037B 89262E00                        MOV     [PDB.USER_STACK],SP
  4159 0000037F 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4160                                  
  4161                                  	; 18/07/2018
  4162                                  	;mov	byte [CS:FSHARING], 0
  4163                                  
  4164                                  	;MOV     BX,CS			; no holes here.
  4165                                  	;MOV     SS,BX
  4166                                  
  4167                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4168 00000383 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4169                                  					;entry	REDISP
  4170                                  REDISP:
  4171 00000388 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4172 0000038B FB                              STI                             ; stack is in our space now...
  4173                                  
  4174 0000038C 8CD3                    	mov	bx,ss
  4175 0000038E 8EDB                    	mov	ds,bx
  4176                                  
  4177 00000390 93                      	xchg	ax,bx
  4178                                  
  4179 00000391 31C0                    	xor	ax,ax ; 0
  4180                                  
  4181                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4182                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4183                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4184                                  
  4185                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4186                                  
  4187                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4188                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4189                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4190                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4191                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4192                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4193                                  	;inc	ax
  4194                                  	;;inc	AL			; AL = 1
  4195                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4196                                  
  4197                                  	; 15/12/2022
  4198 00000393 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4199                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4200 00000396 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4201 0000039C A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4202                                  	;mov	byte [IDLEINT],1
  4203 0000039F A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4204 000003A2 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4205 000003A5 40                      	inc	ax
  4206                                  	;inc	al			; AL = 1
  4207 000003A6 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4208                                  
  4209 000003A9 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4210                                  
  4211 000003AA 88E3                    	MOV     BL,AH			
  4212 000003AC D1E3                            SHL     BX,1			; 2 bytes per call in table
  4213                                         
  4214 000003AE FC                      	CLD
  4215                                  		; Since the DOS maintains mucho state information across system
  4216                                  		; calls, we must be very careful about which stack we use.
  4217                                  		; First, all abort operations must be on the disk stack. This
  4218                                  		; is due to the fact that we may be hitting the disk (close
  4219                                  		; operations, flushing) and may need to report an INT 24.
  4220                                          
  4221 000003AF 08E4                    	OR      AH,AH
  4222 000003B1 7416                            JZ      SHORT DSKROUT		; ABORT
  4223                                  
  4224                                          ;CMP	AH,12
  4225                                          ;JBE	SHORT IOROUT		; Character I/O
  4226                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4227                                          ;JZ	SHORT IOROUT
  4228                                          ;CMP	AH,SET_CURRENT_PDB
  4229                                          ;JNZ	SHORT DSKROUT
  4230                                  
  4231                                  		; Second, PRINT and PSPRINT and the server issue
  4232                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4233                                  		; This call MUST, therefore, use the AUXSTACK.
  4234                                  
  4235                                  	; 10/08/2018
  4236 000003B3 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4237 000003B6 7434                    	je      short DISPCALL
  4238                                  	
  4239                                  	; 01/05/2019
  4240                                  	
  4241                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4242                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4243                                  
  4244 000003B8 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4245 000003BB 770C                    	ja      short DSKROUT
  4246                                  
  4247                                  IOROUT:
  4248                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4249                                  	; (ss: prefix was not needed here! ds=ss)
  4250                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4251                                  	; 15/12/2022
  4252 000003BD 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4253 000003C2 7528                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4254 000003C4 BC[A00A]                        MOV     SP,IOSTACK
  4255 000003C7 EB23                            JMP     SHORT DISPCALL
  4256                                  
  4257                                  		; We are on a system call that is classified as "the rest".
  4258                                  		; We place ourselves onto the DSKSTACK and away we go.
  4259                                  		; We know at this point:
  4260                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4261                                  		;    ErrorMode and WpErr
  4262                                  		; *  That there can be no critical sections in effect.
  4263                                  		;    We signal the server to remove all the resources.
  4264                                  
  4265                                  DSKROUT:
  4266                                  	; 01/01/2024
  4267                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4268                                  	; 08/07/2018 - Retro DOS v3.0
  4269 000003C9 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4270                                  	; 01/01/2024
  4271                                  	;mov	byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4272                                  	;MOV	BYTE [WPERR],-1		; error mode, so good place to
  4273                                  	                   		; make sure flags are reset
  4274 000003CC C706[2203]FF01          	mov	word [WPERR],1FFh ; (PCDOS 7.1 IBMDOS.COM))
  4275                                  
  4276                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4277                                  	; (ss: prefix was not needed here! ds=ss)
  4278                                  
  4279                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4280                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4281                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4282                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4283                                                                          ; make sure flags are reset
  4284 000003D2 50                      	push    ax
  4285 000003D3 B482                    	mov     ah,82h			; Release all resource information
  4286 000003D5 CD2A                    	int     2Ah 		; Microsoft Networks 
  4287                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4288 000003D7 58                      	pop     ax
  4289                                  
  4290                                  		; Since we are going to be running on the DSKStack and since
  4291                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4292                                  		; generation of INT 28's.
  4293                                  
  4294                                  	; 15/12/2022
  4295                                  	;mov     byte [ss:IDLEINT],0
  4296                                  	;
  4297                                          ;mov	sp,DSKSTACK
  4298                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4299                                          ;jz	short DISPCALL
  4300                                  
  4301 000003D8 C606[5803]00            	mov     byte [IDLEINT],0
  4302                                  
  4303 000003DD BC[2009]                	MOV     SP,DSKSTACK
  4304 000003E0 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4305 000003E5 7405                    	JZ      SHORT DISPCALL
  4306                                  
  4307 000003E7 50                              PUSH    AX
  4308                                          ;invoke	DSKSTATCHK
  4309 000003E8 E8B44B                          CALL	DSKSTATCHK
  4310 000003EB 58                      	POP     AX
  4311                                  DISPCALL:
  4312                                  	; 01/05/2019 - Retro DOS v4.0
  4313 000003EC 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4314                                  
  4315                                  	; 15/12/2022
  4316 000003F1 871E[EA05]              	xchg	bx,[SAVEBX]
  4317 000003F5 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4318                                  
  4319                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4320                                  	; (ss: prefix was not needed here! ds=ss)        
  4321                                  	;xchg	bx,[ss:SAVEBX]
  4322                                  	;mov	ds,[ss:SAVEDS]
  4323                                  
  4324 000003F9 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4325                                  
  4326                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4327                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4328                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4329                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4330                                  	; because this bit is used to indicate to the next int 21 call that
  4331                                  	; the previous int 21 was an exec.
  4332                                  	;
  4333                                  	; So do not add any code between the call above and the label 
  4334                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4335                                  
  4336                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4337 000003FE 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4338                                  
  4339                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4340                                  ; DOSCODE:41F7h
  4341                                  
  4342                                  ; 01/01/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
  4343                                  ; DOSCODE:4204h
  4344                                  
  4345                                  ;entry LEAVE
  4346                                  ;;;_LEAVE:				; Exit from a system call
  4347                                  LeaveDOS: ; 18/07/2018 
  4348                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4349 00000404 FA                      	CLI
  4350                                  
  4351                                  	; 01/05/2019
  4352                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4353 00000405 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4354 0000040A 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4355 0000040F 7526                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4356                                  
  4357                                  LeaveA20On:
  4358 00000411 FE0E[2103]                      DEC     BYTE [INDOS]
  4359                                          ; 04/11/2022
  4360 00000415 8E16[8605]              	mov	ss,[USER_SS]
  4361 00000419 8B26[8405]              	MOV     SP,[USER_SP]
  4362                                  	;MOV	SS,[USER_SS]
  4363 0000041D 89E5                    	MOV     BP,SP
  4364                                  	;MOV	[BP.user_AX],AL	
  4365                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4366                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h
  4367                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4368                                  
  4369                                  	; 15/12/2022
  4370 0000041F 884600                  	MOV	[BP],AL	; mov [bp+0],al
  4371                                  	
  4372                                  	;MOV	AX,[NSP]
  4373                                          ;MOV	[USER_SP],AX
  4374                                          ;MOV	AX,[NSS]
  4375                                          ;MOV	[USER_SS],AX
  4376                                  	; 01/01/2024
  4377 00000422 C406[F005]              	les	ax,[NSS] ; (PCDOS 7.1 IBMDOS.COM)
  4378 00000426 A3[8605]                	mov	[USER_SS],ax
  4379 00000429 8C06[8405]              	mov	[USER_SP],es
  4380                                  
  4381 0000042D 58                      	pop	AX
  4382 0000042E 5B                      	pop	BX
  4383 0000042F 59                      	pop	CX
  4384 00000430 5A                      	pop	DX
  4385 00000431 5E                      	pop	SI
  4386 00000432 5F                      	pop	DI
  4387 00000433 5D                      	pop	BP
  4388 00000434 1F                      	pop	DS
  4389 00000435 07                      	pop	ES
  4390                                  
  4391 00000436 CF                              IRET
  4392                                  
  4393                                  disa20:	   				; M068 - Start
  4394 00000437 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4395 0000043B 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4396 0000043F 75D0                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4397                                  					;    a20 off
  4398                                  					; Y: turn a20 off and dec a20off_count
  4399 00000441 FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4400                                   					; Start - M004
  4401 00000445 1E                      	push	ds			; segment of stub
  4402 00000446 BB[2D11]                	mov	bx,disa20_iret		; offset in stub
  4403 00000449 53                      	push	bx
  4404 0000044A CB                      	retf	  			; go to stub
  4405                                  					; End - M004
  4406                                  ;SYSTEM_CALL ENDP
  4407                                  
  4408                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4409                                  ; 04/11/2022
  4410                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4411                                  
  4412                                  ; ==========================================================================
  4413                                  ;
  4414                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4415                                  ; the stack prior to giving the user control
  4416                                  ;
  4417                                  ; ==========================================================================
  4418                                  
  4419                                  ; 01/05/2019 - Retro DOS v4.0
  4420                                  
  4421                                          ;procedure restore_world,NEAR
  4422                                  restore_world:
  4423                                  	;getdseg <es>		; es -> dosdata
  4424 0000044B 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4425                                  
  4426 00000450 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4427                                  
  4428 00000455 58                              POP     AX
  4429 00000456 5B                              POP     BX
  4430 00000457 59                              POP     CX
  4431 00000458 5A                              POP     DX
  4432 00000459 5E                              POP     SI
  4433 0000045A 5F                              POP     DI
  4434 0000045B 5D                              POP     BP
  4435 0000045C 1F                              POP     DS
  4436                                  
  4437 0000045D 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4438                                  
  4439                                  ;restore_world	ENDP
  4440                                  
  4441                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4442                                  
  4443                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4444                                  ; 04/11/2022
  4445                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4446                                  
  4447                                  ; ==========================================================================
  4448                                  ;
  4449                                  ; Save_World saves complete registers on the stack
  4450                                  ;
  4451                                  ; ==========================================================================
  4452                                  
  4453                                          ;procedure save_world,NEAR
  4454                                  save_world:
  4455                                  	;getdseg <es>		; es -> dosdata
  4456 00000462 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4457                                  
  4458 00000467 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4459                                  
  4460                                  	; 12/05/2019
  4461                                          
  4462 0000046C 1E                      	PUSH    DS
  4463 0000046D 55                              PUSH    BP
  4464 0000046E 57                              PUSH    DI
  4465 0000046F 56                              PUSH    SI
  4466 00000470 52                              PUSH    DX
  4467 00000471 51                              PUSH    CX
  4468 00000472 53                              PUSH    BX
  4469 00000473 50                              PUSH    AX
  4470                                  
  4471 00000474 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4472                                  
  4473 00000479 55                      	push	BP		
  4474 0000047A 89E5                    	mov	BP,SP
  4475 0000047C 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4476 0000047F 5D                      	pop	BP
  4477                                  	
  4478 00000480 C3                      	retn
  4479                                  
  4480                                  ;save_world	ENDP
  4481                                  
  4482                                  ; 01/05/2019
  4483                                  
  4484                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4485                                  ; 04/11/2022
  4486                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4487                                  
  4488                                  ; ==========================================================================
  4489                                  ;
  4490                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4491                                  ;
  4492                                  ; ==========================================================================
  4493                                  
  4494                                          ;procedure get_user_stack,NEAR
  4495                                  Get_User_Stack:
  4496                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4497 00000481 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4498 00000486 C536[8405]                      lds	si,[USER_SP]
  4499 0000048A C3                      	retn
  4500                                  
  4501                                  ;get_user_stack  ENDP
  4502                                  
  4503                                  ; 22/12/2022
  4504                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4505                                  ;%if 0
  4506                                  
  4507                                  ; ---------------------------------------------------------------------------
  4508                                  ;
  4509                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4510                                  ; Inputs:
  4511                                  ;	User registers, User Stack, INTS disabled
  4512                                  ;	If CALL F8, DS:DX is new handler address
  4513                                  ; Function:
  4514                                  ;	Process OEM INT 21 extensions
  4515                                  ; Outputs:
  4516                                  ;	Jumps to OEM_HANDLER if appropriate
  4517                                  ;
  4518                                  ; ---------------------------------------------------------------------------
  4519                                  
  4520                                  ;IF	NOT IBM
  4521                                  
  4522                                  _$SET_OEM_HANDLER:
  4523                                  	; 01/05/2019 - Retro DOS v4.0
  4524                                  	
  4525                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4526                                  	;(jb	short NOTOOEM)
  4527                                  
  4528 0000048B 06                      	push	es ; *
  4529                                  	;getdseg <es>			; es -> dosdata
  4530 0000048C 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4531                                  
  4532 00000491 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4533                                  						; (message) request	
  4534                                  	; AH = 0F8h = SET OEM HANDLER
  4535                                  
  4536 00000493 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4537 00000498 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4538                                  
  4539 0000049D 07                      	pop	es ; *
  4540                                  
  4541 0000049E CF                      	IRET                            ; Quick return, Have altered no registers
  4542                                  
  4543                                  check_trueversion_request:
  4544                                  	; 18/07/2019 - Retro DOS v3.0
  4545                                  
  4546                                  	; Retro DOS v2.0 - 20/04/2018
  4547 0000049F 83F8FF                  	CMP	AX,0FFFFh
  4548                                  	; 18/07/2018
  4549 000004A2 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4550                                  
  4551                                  	; 01/05/2019
  4552 000004A4 07                      	pop	es ; *
  4553                                  
  4554 000004A5 B40E                    	mov	ah,0Eh
  4555                                  
  4556                                  	; Retro DOS v4.0 feature only!
  4557 000004A7 81FBA101                	cmp	bx,417  ; Signature to bypass
  4558                                  			; Retro DOS true version message	
  4559 000004AB 7414                    	je	short true_version_iret
  4560                                  
  4561 000004AD 56                      	push	si
  4562 000004AE 53                      	push	bx
  4563                                  
  4564 000004AF BE[BF00]                	mov	si,RETRODOSMSG
  4565                                  wrdosmsg:
  4566                                  	;movb	ah,0Eh
  4567 000004B2 BB0700                  	mov	bx,7
  4568                                  wrdosmsg_nxt:
  4569 000004B5 2EAC                    	cs	lodsb
  4570 000004B7 3C24                    	cmp	al,'$'
  4571 000004B9 7404                    	je	short wrdosmsg_ok		
  4572 000004BB CD10                    	int	10h
  4573 000004BD EBF6                    	jmp	short wrdosmsg_nxt
  4574                                  
  4575                                  wrdosmsg_ok:
  4576 000004BF 5B                      	pop	bx
  4577 000004C0 5E                      	pop	si
  4578                                  
  4579                                  true_version_iret:
  4580                                  	; ah = 0Eh
  4581                                  	;mov	al,40h ; Retro DOS v4.0
  4582                                  	; 
  4583                                  	;mov	al,41h ; Retro DOS v4.1 
  4584                                  	; 30/12/2022
  4585 000004C1 B042                    	mov	al,42h ; Retro DOS v4.2
  4586 000004C3 CF                      	iret
  4587                                  
  4588                                  	; If above F8 try to jump to handler
  4589                                  
  4590                                  DO_OEM_FUNC:
  4591                                  	; 01/05/2019
  4592 000004C4 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4593 000004CA 7504                    	JNE     short OEM_JMP
  4594 000004CC 07                      	pop	es ; *
  4595 000004CD E910FE                  	JMP     BADCALL                 ; Handler not initialized
  4596                                  OEM_JMP:
  4597 000004D0 06                      	push	es
  4598 000004D1 1F                      	pop	ds ; DOSDATA segment !
  4599 000004D2 07                      	pop	es ; *
  4600                                  
  4601                                  	; 22/12/2022
  4602 000004D3 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4603                                  
  4604 000004D4 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4605                                  
  4606                                  ;       ENDIF
  4607                                  
  4608                                  ; ---------------------------------------------------------------------------
  4609                                  
  4610                                  ;%endif
  4611                                  
  4612                                  ;============================================================================
  4613                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4614                                  ;============================================================================
  4615                                  ; 17/07/2018 - Retro DOS v3.0
  4616                                  
  4617                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4618                                  ;	NAME	IBMCODE
  4619                                  
  4620                                  ;BREAK <NullDev -- Driver for null device>
  4621                                  
  4622                                  ; ROMDOS note:
  4623                                  ;	NUL device driver used to be here, but it was removed and placed in
  4624                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4625                                  ;	header, which is also in DOSDATA.
  4626                                  
  4627                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4628                                  
  4629                                  ;----------------------------------------------------------------------------
  4630                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4631                                  ;----------------------------------------------------------------------------
  4632                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4633                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4634                                  
  4635                                  ;Public MSC001S,MSC001E
  4636                                  ;MSC001S label byte
  4637                                  	;IF	IBM
  4638                                  ; Codes returned by BIOS
  4639                                  ERRIN:
  4640 000004D8 02                      	DB	2			; NO RESPONSE
  4641 000004D9 06                      	DB	6			; SEEK FAILURE
  4642 000004DA 0C                      	DB	12			; GENERAL ERROR
  4643 000004DB 04                      	DB	4			; BAD CRC
  4644 000004DC 08                      	DB	8			; SECTOR NOT FOUND
  4645 000004DD 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4646                                  ERROUT:
  4647                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4648 000004DE 80                      	DB	80H			; NO RESPONSE
  4649 000004DF 40                      	DB	40H			; Seek failure
  4650 000004E0 02                      	DB	2			; Address Mark not found
  4651 000004E1 10                      	DB	10H			; BAD CRC
  4652 000004E2 04                      	DB	4			; SECTOR NOT FOUND
  4653 000004E3 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4654                                  
  4655                                  NUMERR	EQU	$-ERROUT
  4656                                  	;ENDIF
  4657                                  ;MSC001E label byte
  4658                                  ;----------------------------------------------------------------------------
  4659                                  
  4660                                  ;============================================================================
  4661                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4662                                  ;============================================================================
  4663                                  ; 18/07/2018 - Retro DOS v3.0
  4664                                  ; 15/05/2019 - Retro DOS v4.0
  4665                                  
  4666                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4667                                  
  4668                                  ;   AbsSetup - setup for abs disk functions
  4669                                  ;----------------------------------------------------------------------------
  4670                                  
  4671                                  AbsSetup:
  4672                                  	; 02/01/2024
  4673 000004E4 1E                      	push	ds ; *
  4674 000004E5 16                      	push	ss
  4675 000004E6 1F                      	pop	ds
  4676 000004E7 FE06[2103]              	inc	byte [INDOS]
  4677                                  	;INC	byte [SS:INDOS]		; SS override
  4678 000004EB FB                      	STI
  4679 000004EC FC                      	CLD
  4680                                  	; 02/01/2024
  4681                                  	;PUSH	DS
  4682                                  	;push	ss
  4683                                  	;pop	ds
  4684 000004ED E80901                  	CALL	GETBP
  4685                                  	; 02/01/2024
  4686 000004F0 1F                      	pop	ds ; *
  4687 000004F1 7239                    	JC	short errdriv 		; PM. error drive ;AN000;
  4688                                  	;mov	word [es:bp+1Fh]
  4689 000004F3 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4690                                  
  4691                                  	; 02/01/2024
  4692                                  ;errdriv:
  4693                                  ;	POP	DS
  4694                                  ;	jnc	short AbsSetup2
  4695                                  ;AbsSetup_retn:
  4696                                  ;	retn
  4697                                  
  4698                                  AbsSetup2:
  4699                                  	; 15/05/2019 - Retro DOS v4.0
  4700                                  	; MSDOS 6.0
  4701                                  					; SS override
  4702 000004F9 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4703 00000500 E82F04                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4704 00000503 7227                    	jc	short AbsSetup_retn
  4705 00000505 E81355                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4706                                  
  4707                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4708 00000508 1E                      	PUSH	DS
  4709 00000509 56                      	PUSH	SI
  4710 0000050A 50                      	PUSH	AX
  4711                                  
  4712 0000050B 16                      	push	ss
  4713 0000050C 1F                      	pop	ds
  4714                                  	
  4715 0000050D BE[BE03]                	MOV	SI,OPENBUF
  4716 00000510 8804                    	MOV	[SI],AL
  4717 00000512 800441                  	ADD	BYTE [SI],"A"
  4718 00000515 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4719 0000051A B80003                  	MOV	AX,0300H
  4720 0000051D F8                      	CLC
  4721 0000051E CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4722                                  		
  4723                                  		; 04/11/2022
  4724                                  		; (INT 2Ah - AX = 0300h)
  4725                                  		; Microsoft Networks - CHECK DIRECT I/O
  4726                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4727                                  		;    only drive specifier--must include the colon)
  4728                                  		; Return: CF clear if absolute disk access allowed
  4729                                  
  4730 00000520 58                      	POP	AX
  4731 00000521 5E                      	POP	SI
  4732 00000522 1F                      	POP	DS
  4733 00000523 7307                    	jnc	short AbsSetup_retn
  4734                                  
  4735                                  	;mov	word [ss:EXTERR],32h
  4736 00000525 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4737                                  errdriv:	; 02/01/2024
  4738                                  AbsSetup_retn:
  4739 0000052C C3                      	retn
  4740                                  
  4741                                  ;---------------------------------------------------------------------------
  4742                                  ;
  4743                                  ; Procedure Name : ABSDRD
  4744                                  ;
  4745                                  ; Interrupt 25 handler. Performs absolute disk read.
  4746                                  ; Inputs:	AL - 0-based drive number
  4747                                  ;		DS:BX point to destination buffer
  4748                                  ;		CX number of logical sectors to read
  4749                                  ;		DX starting logical sector number (0-based)
  4750                                  ; Outputs:	Original flags still on stack
  4751                                  ;		Carry set
  4752                                  ;		    AH error from BIOS
  4753                                  ;		    AL same as low byte of DI from INT 24
  4754                                  ;
  4755                                  ;---------------------------------------------------------------------------
  4756                                          ;procedure   ABSDRD,FAR
  4757                                  ABSDRD:
  4758                                  	; 15/05/2019 - Retro DOS v4.0
  4759                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4760                                  	; 04/11/2022
  4761                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4762                                  	
  4763                                  	; MSDOS 6.0
  4764 0000052D FA                      	CLI
  4765                                  	
  4766                                  ;	set up ds to point to DOSDATA
  4767                                  
  4768 0000052E 50                      	push	ax			; preserve AX value
  4769 0000052F 8CD8                    	mov	ax,ds			; store DS value in AX
  4770                                  	;getdseg <ds>
  4771 00000531 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4772 00000536 A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4773 00000539 58                      	pop	ax			; restore AX value
  4774                                  
  4775                                  	; M072:
  4776                                  	; We shall save es on the user stack here. We need to use ES in
  4777                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4778                                  	; time in order to restore the user stack.
  4779                                  
  4780 0000053A 06                      	push	es  ; ****		; M072
  4781                                  
  4782 0000053B 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4783 0000053F 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4784                                  
  4785                                  ; 	set up ss to point to DOSDATA
  4786                                  ;
  4787                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4788                                  ; version of the getdseg macro with the SS register! An interrupt will
  4789                                  ; sneak through.
  4790                                  
  4791                                  ;ifndef ROMDOS
  4792                                  	;getdseg <ss>			; cli in entry of routine
  4793 00000543 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4794                                  ;else
  4795                                  ;	mov	ds, cs:[BioDataSeg]
  4796                                  ;	assume	ds:bdata
  4797                                  ;
  4798                                  ;	mov	ss, ds:[DosDataSg]
  4799                                  ;	assume	ss:DOSDATA
  4800                                  ;
  4801                                  ;endif ; ROMDOS
  4802                                  
  4803 00000548 BC[2009]                	MOV	SP,DSKSTACK
  4804                                  
  4805 0000054B 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4806                                  
  4807 0000054F 06                      	push	es ; *** (MSDOS 6.21)
  4808 00000550 E80FFF                  	call	save_world		; save all regs
  4809                                  
  4810 00000553 06                      	PUSH	ES ; **
  4811 00000554 E88DFF                  	CALL	AbsSetup
  4812 00000557 723D                    	JC	short ILEAVE
  4813                                  
  4814                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4815                                  	;  the secondary cache. The secondary cache does not check for media
  4816                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4817                                  	;  read, and get data from the previous disk. To get around this,
  4818                                  	;  we just won't use the secondary cache for absolute disk reads.
  4819                                  	;                                                      -mw 8/5/88
  4820                                  
  4821                                  	;EnterCrit critDisk
  4822 00000559 E8910D                  	call	ECritDisk
  4823 0000055C 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4824                                  	;LeaveCrit critDisk
  4825 00000562 E8A30D                  	call	LCritDisk
  4826                                  
  4827                                          ;invoke	DSKREAD
  4828 00000565 E82E31                  	CALL	DSKREAD
  4829 00000568 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4830                                  
  4831 0000056A 89F9                            mov     cx,di
  4832 0000056C 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4833 00000571 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4834                                  
  4835                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4836                                  ;            sectors, also termed an "Extent".)
  4837                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4838                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4839                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4840                                  ;
  4841                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4842                                  ;	buffers must be "read" into the transfer memory block, so that the
  4843                                  ;       transfer memory reflects the most recent data.
  4844                                  
  4845                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4846 00000576 E86133                          call	DskRdBufScan
  4847 00000579 EB1B                    	jmp     short ILEAVE
  4848                                  
  4849                                  TLEAVE:
  4850 0000057B 7419                    	JZ	short ILEAVE
  4851                                  
  4852                                  ERR_LEAVE:				; M039
  4853                                  	; 15/07/2018 - Retro DOS v3.0
  4854                                          ;IF	IBM
  4855                                  ; Translate the error code to ancient 1.1 codes
  4856 0000057D 06                              PUSH    ES ; *
  4857 0000057E 0E                              PUSH    CS
  4858 0000057F 07                              POP     ES
  4859 00000580 30E4                            XOR     AH,AH			; Nul error code
  4860                                  	;mov	cx,6
  4861 00000582 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4862 00000585 BF[D804]                        MOV     DI,ERRIN		; Point to error conditions
  4863 00000588 F2AE                            REPNE   SCASB
  4864 0000058A 7504                            JNZ     SHORT LEAVECODE		; Not found
  4865                                  	;mov	ah,[ES:DI+5]
  4866 0000058C 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4867                                  LEAVECODE:
  4868 00000590 07                              POP     ES ; *
  4869                                  	; 15/05/2019 - Retro DOS v4.0
  4870 00000591 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4871                                          ;ENDIF
  4872                                  
  4873 00000595 F9                              STC
  4874                                  ILEAVE:
  4875                                  	; 15/05/2019
  4876 00000596 07                              POP     ES ; **
  4877 00000597 E8B1FE                  	call	restore_world
  4878 0000059A 07                              pop	es ; *** (MSDOS 6.21)
  4879 0000059B FA                      	CLI
  4880 0000059C 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4881 000005A0 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4882 000005A5 16                              push	ss			; M072 - Start
  4883 000005A6 07                      	pop	es			; es - dosdata
  4884 000005A7 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4885 000005AC 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4886 000005B1 07                      	pop	es  ; ****		; Note es was saved on user
  4887                                  					; stack at entry 
  4888                                  					; M072 - End
  4889 000005B2 FB                              STI
  4890 000005B3 CB                      	RETF   ; ! FAR return !
  4891                                  
  4892                                  ;ABSDRD	ENDP
  4893                                  
  4894                                  ;---------------------------------------------------------------------------
  4895                                  ;
  4896                                  ; Procedure Name : ABSDWRT
  4897                                  ;
  4898                                  ; Interrupt 26 handler. Performs absolute disk write.
  4899                                  ; Inputs:	AL - 0-based drive number
  4900                                  ;		DS:BX point to source buffer
  4901                                  ;		CX number of logical sectors to write
  4902                                  ;		DX starting logical sector number (0-based)
  4903                                  ; Outputs:	Original flags still on stack
  4904                                  ;		Carry set
  4905                                  ;		    AH error from BIOS
  4906                                  ;		    AL same as low byte of DI from INT 24
  4907                                  ;
  4908                                  ;---------------------------------------------------------------------------
  4909                                          ;procedure   ABSDWRT,FAR
  4910                                  ABSDWRT:
  4911                                  	; 15/05/2019 - Retro DOS v4.0
  4912                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4913                                  	; 04/11/2022
  4914                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4915                                  
  4916 000005B4 FA                      	CLI
  4917                                  
  4918                                  ;	set up ds to point to DOSDATA
  4919                                  
  4920 000005B5 50                      	push	ax
  4921 000005B6 8CD8                    	mov	ax,ds
  4922                                  	;getdseg <ds>
  4923 000005B8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4924 000005BD A3[0A0D]                	mov	[TEMPSEG],ax
  4925 000005C0 58                      	pop	ax
  4926                                  
  4927                                  	; M072:
  4928                                  	; We shall save es on the user stack here. We need to use ES in
  4929                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4930                                  	; time in order to restore the user stack.
  4931                                  
  4932 000005C1 06                      	push	es ; ****		; M072
  4933                                  
  4934 000005C2 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4935 000005C6 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4936                                  
  4937                                  	; set up ss to point to DOSDATA
  4938                                  	;
  4939                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4940                                  	; ROMDOS version of the getdseg macro with the SS register!
  4941                                  	; An interrupt will sneak through.
  4942                                  
  4943                                  ;ifndef ROMDOS
  4944                                  	;getdseg <ss>			; cli in entry of routine
  4945 000005CA 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4946                                  ;else
  4947                                  ;	mov	ds, cs:[BioDataSeg]
  4948                                  ;	assume	ds:bdata
  4949                                  ;
  4950                                  ;	mov	ss, ds:[DosDataSg]
  4951                                  ;	assume	ss:DOSDATA
  4952                                  ;
  4953                                  ;endif ; ROMDOS
  4954                                  
  4955 000005CF BC[2009]                	MOV	SP,DSKSTACK
  4956                                  		; we are now switched to DOS's disk stack
  4957                                  
  4958 000005D2 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4959                                  
  4960 000005D6 06                      	push	es ; *** (MSDOS 6.21)
  4961                                  
  4962 000005D7 E888FE                  	call	save_world	      	; save all regs
  4963                                  
  4964 000005DA 06                      	PUSH	ES ; **
  4965 000005DB E806FF                  	CALL	AbsSetup
  4966 000005DE 72B6                    	JC	short ILEAVE
  4967                                  
  4968                                  	;EnterCrit critDisk
  4969 000005E0 E80A0D                  	call	ECritDisk
  4970 000005E3 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4971 000005E9 E88B03                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4972                                  	;LeaveCrit critDisk
  4973 000005EC E8190D                  	call	LCritDisk
  4974                                  
  4975                                  ;M039
  4976                                  ;       DS:BX = transfer address (source data address).
  4977                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4978                                  ;	     sectors, also termed an "Extent".)
  4979                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4980                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4981                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4982                                  ;
  4983                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4984                                  ;       written. Note that all the above registers are preserved for
  4985                                  ;       DSKWRITE.
  4986                                  
  4987 000005EF 1E                              push    ds
  4988                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4989 000005F0 E8EB35                  	call	DskWrtBufPurge
  4990 000005F3 1F                              pop     ds
  4991                                  ;M039
  4992                                  	;invoke	DSKWRITE
  4993 000005F4 E8C330                  	call	DSKWRITE
  4994 000005F7 EB82                    	JMP	short TLEAVE
  4995                                  
  4996                                  ;ABSDWRT ENDP
  4997                                  
  4998                                  ;----------------------------------------------------------------------------
  4999                                  ;
  5000                                  ; Procedure Name : GETBP
  5001                                  ;
  5002                                  ; Inputs:
  5003                                  ;	AL = Logical unit number (A = 0)
  5004                                  ; Function:
  5005                                  ;	Find Drive Parameter Block
  5006                                  ; Outputs:
  5007                                  ;	ES:BP points to DPB
  5008                                  ;	[THISDPB] = ES:BP
  5009                                  ;	Carry set if unit number bad or unit is a NET device.
  5010                                  ;		Later case sets extended error error_I24_not_supported
  5011                                  ; No other registers alteredjjj
  5012                                  ;
  5013                                  ;----------------------------------------------------------------------------
  5014                                  
  5015                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5016                                  GETBP:
  5017                                  	; 15/05/2019 - Retro DOS v4.0
  5018                                  	; 11/07/2018 - Retro DOS v3.0
  5019 000005F9 50                      	PUSH	AX
  5020 000005FA 0401                    	ADD	AL, 1		; No increment; need carry flag
  5021 000005FC 7210                    	JC	SHORT SKIPGET
  5022 000005FE E84F63                  	CALL	GETTHISDRV
  5023                                  	; MSDOS 6.0
  5024 00000601 730B                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  5025                                  	
  5026                                  	; 23/03/2024 - Retro DOS v4.2
  5027                                  	;XOR	AH,AH			;DCR. ax= error code 	;AN000;
  5028                                  	;CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  5029                                  	;JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  5030                                  	;STC				;DCR.			;AN000;
  5031 00000603 B400                    	mov	ah,0	
  5032                                  
  5033 00000605 A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  5034 00000608 C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  5035                                  SKIPGET:
  5036 0000060E 58                      	POP	AX
  5037 0000060F 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  5038                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5039                                  	;jnc	short getbp_t
  5040                                  	;retn
  5041                                  getbp_t:
  5042 00000611 C42E[A205]              	LES	BP,[THISCDS]
  5043                                  	; 15/12/2022
  5044 00000615 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  5045                                  	; 07/12/2022
  5046                                  	;TEST	WORD [ES:BP+43H],8000H
  5047                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5048 0000061A 7408                    	JZ	SHORT GETBP_CDS
  5049 0000061C C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  5050 00000622 F9                      	STC
  5051                                  GETBP_RETN:
  5052 00000623 C3                      	RETN
  5053                                  
  5054                                  GETBP_CDS:
  5055                                  	;LES	BP,[ES:BP+45H]
  5056 00000624 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5057                                  GOTDPB:
  5058                                  	; Load THISDPB from ES:BP
  5059 00000628 892E[8A05]              	MOV	[THISDPB],BP
  5060 0000062C 8C06[8C05]              	MOV	[THISDPB+2],ES
  5061 00000630 C3                      	RETN
  5062                                  
  5063                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5064                                  
  5065                                  ;----------------------------------------------------------------------------
  5066                                  ;
  5067                                  ; Procedure Name : SYS_RETURN
  5068                                  ;
  5069                                  ; These are the general system call exit mechanisms. All internal system
  5070                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5071                                  ; is to set the user's flags and set his AX register for return.
  5072                                  ;
  5073                                  ;----------------------------------------------------------------------------
  5074                                  
  5075                                          ;procedure   SYS_RETURN,NEAR
  5076                                  SYS_RETURN:        
  5077                                          ;entry	SYS_RET_OK
  5078                                  SYS_RET_OK:   
  5079 00000631 E84DFE                  	call    Get_User_Stack
  5080                                  		; turn off user's carry flag
  5081                                  SYS_RET_OK_clc: ; 25/06/2019 
  5082                                          ;;and	word [SI+16h],0FFFEh 
  5083                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5084                                          ; 25/06/2019
  5085 00000634 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5086 00000638 EB10                    	JMP     SHORT DO_RET
  5087                                  
  5088                                          ;entry   SYS_RET_ERR
  5089                                  SYS_RET_ERR:        
  5090 0000063A 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5091 0000063C E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5092 0000063F E81A00                  	CALL	ErrorMap
  5093                                  
  5094                                  	;entry	From_GetSet
  5095                                  From_GetSet:
  5096 00000642 E83CFE                          call    Get_User_Stack
  5097                                  		 ; signal carry to user
  5098                                  	;;or	word [SI+16h],1
  5099                                  	;OR	word [SI+user_env.user_F],f_Carry
  5100                                  	; 25/06/2019
  5101 00000645 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5102 00000649 F9                      	STC			; also, signal internal error
  5103                                  DO_RET:
  5104                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5105 0000064A 8904                    	MOV	[SI],AX
  5106 0000064C C3                      	RETN
  5107                                  
  5108                                  	;entry	FCB_RET_OK
  5109                                  FCB_RET_OK:
  5110                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5111                                  NO_OP:
  5112 0000064D 30C0                    	XOR	AL,AL
  5113 0000064F C3                      	retn
  5114                                  
  5115                                  	;entry	FCB_RET_ERR
  5116                                  FCB_RET_ERR:
  5117 00000650 30E4                    	XOR	AH,AH
  5118 00000652 36A3[2403]              	mov	[ss:EXTERR],AX
  5119 00000656 E80300                  	CALL	ErrorMap
  5120 00000659 B0FF                    	MOV	AL,-1
  5121 0000065B C3                      	retn
  5122                                  
  5123                                  	;entry	ErrorMap
  5124                                  ErrorMap:
  5125 0000065C 56                      	PUSH	SI
  5126                                  				; ERR_TABLE_21 is now in DOSDATA
  5127 0000065D BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5128                                  				; SS override for FAILERR and EXTERR
  5129 00000660 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5130 00000666 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5131                                  		 ; Ooops, this is the REAL reason
  5132                                  	;mov	word [SS:EXTERR],53h
  5133 00000668 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5134                                  EXTENDED_NORMAL:
  5135 0000066F E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5136 00000672 5E                      	POP	SI
  5137 00000673 C3                      	retn
  5138                                  
  5139                                  	;EndProc SYS_RETURN
  5140                                  
  5141                                  ;---------------------------------------------------------------------------
  5142                                  ;
  5143                                  ; Procedure Name : CAL_LK
  5144                                  ;
  5145                                  ; Inputs:
  5146                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5147                                  ;		(DS NEED not be DOSDATA)
  5148                                  ;	[EXTERR] is set with error
  5149                                  ; Function:
  5150                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5151                                  ; Outputs:
  5152                                  ;	[EXTERR_CLASS] set
  5153                                  ;	[EXTERR_ACTION] set
  5154                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5155                                  ; Destroys SI, FLAGS
  5156                                  ;
  5157                                  ;---------------------------------------------------------------------------
  5158                                  
  5159                                  	;procedure CAL_LK,NEAR
  5160                                  CAL_LK:
  5161 00000674 1E                      	PUSH	DS
  5162 00000675 50                      	PUSH	AX
  5163 00000676 53                      	PUSH	BX
  5164                                  
  5165                                  ;M048	Context DS		; DS:SI -> Table
  5166                                  ;
  5167                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5168                                  ; is DOSDATA
  5169                                  
  5170                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5171                                  	; 15/05/2019 - Retro DOS v4.0
  5172 00000677 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5173                                  
  5174                                  	; 18/07/2018
  5175                                  	;push	ss
  5176                                  	;pop	ds
  5177                                  
  5178 0000067C 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5179                                  TABLK1:
  5180 00000680 AC                      	LODSB
  5181                                  
  5182 00000681 3CFF                    	CMP	AL,0FFH
  5183 00000683 7409                    	JZ	short GOT_VALS	; End of table
  5184 00000685 38D8                    	CMP	AL,BL
  5185 00000687 7405                    	JZ	short GOT_VALS	; Got entry
  5186 00000689 83C603                  	ADD	SI,3		; Next table entry
  5187                                  	; 15/08/2018
  5188 0000068C EBF2                    	JMP	short TABLK1
  5189                                  
  5190                                  GOT_VALS:
  5191 0000068E AD                      	LODSW			; AL is CLASS, AH is ACTION
  5192                                  
  5193 0000068F 80FCFF                  	CMP	AH,0FFH
  5194 00000692 7404                    	JZ	short NO_SET_ACT
  5195 00000694 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5196                                  NO_SET_ACT:
  5197 00000698 3CFF                    	CMP	AL,0FFH
  5198 0000069A 7403                    	JZ	short NO_SET_CLS
  5199 0000069C A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5200                                  NO_SET_CLS:
  5201 0000069F AC                      	LODSB			; Get LOCUS
  5202                                  
  5203 000006A0 3CFF                    	CMP	AL,0FFH
  5204 000006A2 7403                    	JZ	short NO_SET_LOC
  5205 000006A4 A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5206                                  NO_SET_LOC:
  5207 000006A7 5B                      	POP	BX
  5208 000006A8 58                      	POP	AX
  5209 000006A9 1F                      	POP	DS
  5210 000006AA C3                      	retn
  5211                                  
  5212                                  	;EndProc CAL_LK
  5213                                  
  5214                                  ;---------------------------------------------------------------------------
  5215                                  ;
  5216                                  ; Procedure Name : ETAB_LK
  5217                                  ;
  5218                                  ; Inputs:
  5219                                  ;	AX is error code
  5220                                  ;	[USER_IN_AX] has AH value of system call involved
  5221                                  ; Function:
  5222                                  ;	Make sure error code is appropriate to this call.
  5223                                  ; Outputs:
  5224                                  ;	AX MAY be mapped error code
  5225                                  ;	[EXTERR] = Input AX
  5226                                  ; Destroys ONLY AX and FLAGS
  5227                                  ;
  5228                                  ;---------------------------------------------------------------------------
  5229                                  
  5230                                  	;procedure ETAB_LK,NEAR
  5231                                  
  5232                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5233 000006AB 1E                      	PUSH	DS
  5234 000006AC 56                      	PUSH	SI
  5235 000006AD 51                      	PUSH	CX
  5236 000006AE 53                      	PUSH	BX
  5237                                  
  5238                                  	;Context DS			; SS is DOSDATA
  5239                                  
  5240 000006AF 16                      	push	ss
  5241 000006B0 1F                      	pop	ds
  5242                                  
  5243 000006B1 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5244                                  
  5245                                  					; I21_MAP_E_TAB is now in DOSCODE
  5246 000006B4 BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5247 000006B7 88C7                    	MOV	BH,AL			; Real code to BH
  5248 000006B9 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5249                                  TABLK2:
  5250                                  	; 15/05/2019 - Retro DOS v4.0
  5251 000006BD 2E                      	cs
  5252 000006BE AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5253                                  	
  5254                                  	; 18/07/2018 - Retro DOS v3.0
  5255                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5256                                  
  5257 000006BF 3CFF                    	CMP	AL,0FFH 		; End of table?
  5258 000006C1 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5259 000006C3 38D8                    	CMP	AL,BL			; Found call?
  5260 000006C5 740C                    	JZ	short GOT_CALL		; Yes
  5261 000006C7 86E0                    	XCHG	AH,AL			; Count to AL
  5262 000006C9 30E4                    	XOR	AH,AH			; Make word for add
  5263 000006CB 01C6                    	ADD	SI,AX			; Next table entry
  5264 000006CD EBEE                    	JMP	short TABLK2
  5265                                  
  5266                                  NOT_IN_TABLE:
  5267 000006CF 88F8                    	MOV	AL,BH			; Restore original code
  5268 000006D1 EB0C                    	JMP	SHORT NO_MAP
  5269                                  
  5270                                  GOT_CALL:
  5271 000006D3 88E1                    	MOV	CL,AH
  5272 000006D5 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5273                                  CHECK_CODE:
  5274                                  	; 15/05/2019 - Retro DOS v4.0
  5275 000006D7 2E                      	cs
  5276 000006D8 AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5277                                  
  5278                                  	; 18/07/2018
  5279                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5280                                  
  5281 000006D9 38F8                    	CMP	AL,BH			; Code OK?
  5282 000006DB 7402                    	JZ	short NO_MAP		; Yes
  5283 000006DD E2F8                    	LOOP	CHECK_CODE
  5284                                  NO_MAP:
  5285 000006DF 30E4                    	XOR	AH,AH			; AX is now valid code
  5286 000006E1 5B                      	POP	BX
  5287 000006E2 59                      	POP	CX
  5288 000006E3 5E                      	POP	SI
  5289 000006E4 1F                      	POP	DS
  5290 000006E5 C3                      	retn
  5291                                  
  5292                                  	;EndProc ETAB_LK
  5293                                  
  5294                                  ; 18/07/2018 - Retro DOS v3.0
  5295                                  ;---------------------------------------------------------------------------
  5296                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5297                                  
  5298                                  ;IF installed ; (*)
  5299                                  
  5300                                  ;---------------------------------------------------------------------------
  5301                                  ;
  5302                                  ; Procedure Name : SetBad
  5303                                  ;
  5304                                  ; SetBad sets up info for bad functions
  5305                                  ;
  5306                                  ;---------------------------------------------------------------------------
  5307                                  
  5308                                  SetBad:
  5309                                  	;mov	ax,1
  5310 000006E6 B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5311                                  
  5312                                  	; MSDOS 3.3
  5313                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5314                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5315                                  
  5316                                  ;	set up ds to point to DOSDATA
  5317                                  
  5318                                  	; 15/05/2019 - Retro DOS v4.0
  5319                                  	; MSDOS 6.0
  5320 000006E9 1E                      	push	ds
  5321                                  
  5322                                  	;getdseg <ds>
  5323 000006EA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5324                                  
  5325 000006EF C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5326                                  
  5327 000006F4 1F                      	pop	ds	  	;hkn; restore ds
  5328                                  
  5329 000006F5 F9                      	STC
  5330 000006F6 C3                      	retn
  5331                                  
  5332                                  ;--------------------------------------------------------------------------
  5333                                  ;
  5334                                  ; Procedure Name : BadCall
  5335                                  ;
  5336                                  ; BadCall is the initial routine for bad function calls
  5337                                  ;
  5338                                  ;--------------------------------------------------------------------------
  5339                                  
  5340                                  BadCall:
  5341 000006F7 E8ECFF                  	call	SetBad
  5342 000006FA CB                      	retf
  5343                                  
  5344                                  ;--------------------------------------------------------------------------
  5345                                  ;
  5346                                  ; OKCall always sets carry to off.
  5347                                  ;
  5348                                  ;-----------------------------------------------------------------------
  5349                                  
  5350                                  OKCall:
  5351 000006FB F8                      	CLC
  5352 000006FC CB                      	retf
  5353                                  
  5354                                  ;---------------------------------------------------------------------------
  5355                                  ;
  5356                                  ; Procedure Name : INT2F
  5357                                  ;
  5358                                  ; INT 2F handler works as follows:
  5359                                  ;   PUSH    AX
  5360                                  ;   MOV     AX,multiplex:function
  5361                                  ;   INT     2F
  5362                                  ;   POP     ...
  5363                                  ; The handler itself needs to make the AX available for the various routines.
  5364                                  ;
  5365                                  ;----------------------------------------------------------------------------
  5366                                  
  5367                                  ; 15/05/2019 - Retro DOS v4.0
  5368                                  
  5369                                  ;KERNEL_SEGMENT equ 70h
  5370                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5371                                  DOSBIODATASEG equ 70h
  5372                                  
  5373                                  ; retrodos4.s - offset in BIOSDATA
  5374                                  bios_i2f equ 5
  5375                                  
  5376                                  ;PUBLIC	Int2F
  5377                                  ;INT2F	PROC	FAR
  5378                                  
  5379                                  ; 15/05/2019
  5380                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5381                                  
  5382                                  ; 04/11/2022
  5383                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5384                                  
  5385                                  	; 05/01/2024
  5386                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5387                                  	; 18/07/2018 - Retro DOS v3.0
  5388                                  INT2F:
  5389                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5390                                  INT2FNT:
  5391                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5392 000006FD FB                      	STI
  5393                                  	;cmp	ah,11h
  5394 000006FE 80FC11                  	CMP	AH,MultNET
  5395 00000701 750A                    	JNZ	short INT2FSHR
  5396                                  TestInstall:
  5397 00000703 08C0                    	OR	AL,AL
  5398 00000705 7403                    	JZ	short Leave2F
  5399                                  BadFunc:
  5400 00000707 E8DCFF                  	CALL	SetBad
  5401                                  
  5402                                  	;entry	Leave2F
  5403                                  Leave2F:
  5404 0000070A CA0200                  	RETF	2			; long return + clear flags off stack
  5405                                  
  5406                                  INT2FSHR:
  5407                                  	;cmp	ah,10h
  5408 0000070D 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5409 00000710 74F1                    	JZ	short TestInstall	; yes, check for installation
  5410                                  INT2FNLS:
  5411                                  	;cmp	ah,14h
  5412 00000712 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5413 00000715 74EC                    	JZ	short TestInstall	; yes check for installation
  5414                                  INT2FDOS:
  5415                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5416                                  
  5417                                  	; 18/07/2018
  5418                                  	; MSDOS 3.3
  5419                                  	;;cmp	ah,12h	
  5420                                  	;CMP	AH,MultDOS
  5421                                  	;jz	short DispatchDOS
  5422                                  	;iret
  5423                                  
  5424                                  	; 15/05/2019
  5425                                  	; MSDOS 6.0
  5426                                  	;cmp	ah,12h	; 07/12/2022
  5427 00000717 80FC12                  	CMP	AH,MultDOS
  5428 0000071A 7503                    	JNZ	short check_win		;check if win386 broadcast
  5429 0000071C E9F201                  	jmp	DispatchDOS
  5430                                  
  5431                                  	; .... win386 .... 
  5432                                  
  5433                                  check_win:
  5434                                  	;cmp	ah,16h
  5435 0000071F 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5436 00000722 7408                    	je	short Win386_Msg
  5437                                  
  5438                                  	; M044
  5439                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5440                                  	; of Windows. If so, do special action of going and saving last para
  5441                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5442                                  	; bug
  5443                                  
  5444 00000724 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5445                                  	;jne	short next_i2f		; no, chain on
  5446                                  	; 15/12/2022
  5447                                  	;jmp	winold_swap		; yes, do desired action
  5448 00000727 7442                    	je	short winold_swap
  5449 00000729 E90501                  	jmp	next_i2f
  5450                                  
  5451                                  	; 15/12/2022
  5452                                  ;next_i2f:
  5453                                  ;	;;;jmp	bios_i2f
  5454                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5455                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5456                                  ;	; 04/11/2022
  5457                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5458                                  
  5459                                  ;	IRET				; This assume that we are at the head
  5460                                  					; of the list
  5461                                  ;INT2F	ENDP
  5462                                  
  5463                                  ; 15/05/2019 - Retro DOS v4.0
  5464                                  
  5465                                  ; We have received a message from Win386. There are three possible
  5466                                  ; messages we could get from Win386:
  5467                                  ;
  5468                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5469                                  ;		  to the Win386 startup info structure.
  5470                                  ; Exit		- for this, we clear the IsWin386 flag.
  5471                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5472                                  ;		  has already been handled. this is indicated by setting
  5473                                  ;		  CX to a non-zero value.
  5474                                  
  5475                                  Win386_Msg:
  5476 0000072C 1E                      	push	ds
  5477                                  
  5478                                  	;getdseg <DS>			; ds is DOSDATA
  5479 0000072D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5480                                  
  5481                                  	; For WIN386 2.xx instance data
  5482                                  
  5483 00000732 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5484 00000734 7503                    	jne	short Win386_Msg_exit
  5485 00000736 E92A01                  	jmp	OldWin386Init		; yes, return instance data
  5486                                  Win386_Msg_exit:
  5487 00000739 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5488 0000073B 7503                    	jne	short Win386_Msg_devcall
  5489 0000073D E92C01                  	jmp	Win386_Leaving
  5490                                  Win386_Msg_devcall:
  5491 00000740 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5492 00000742 7503                    	jne	short Win386_Msg_init
  5493 00000744 E96001                  	jmp	Win386_Query
  5494                                  Win386_Msg_init:
  5495 00000747 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5496 00000749 7403                    	je	short Win386_Starting
  5497 0000074B E9E200                  	jmp	win_nexti2f		; no, return
  5498                                  Win386_Starting:
  5499                                  	; 17/12/2022
  5500 0000074E F6C201                  	test	dl,1
  5501                                  	;test	dx,1			; is this really win386?
  5502 00000751 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5503 00000753 E9DA00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5504                                  Win386_vchk:
  5505                                  	; M018 -- start of block changes
  5506                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5507                                  	; than 030Ah, we skip the VxD presence check
  5508                                  
  5509                                  ;M067 -- Begin changes
  5510                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5511                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5512                                  ;So, we null out the VxD ptr before the check.
  5513                                  
  5514                                  	;mov	word [Win386_Info+6],0
  5515 00000756 C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5516                                  	;mov	word [Win386_Info+8],0
  5517 0000075C C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5518                                  
  5519                                  ;M067 -- End changes
  5520                                  
  5521                                  ;ifdef JAPAN
  5522                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5523                                  ;else
  5524 00000762 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5525                                  ;endif
  5526                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5527 00000766 724E                    	jb	short Win386_vxd
  5528 00000768 E9DD00                  	jmp	noVxD31
  5529                                  
  5530                                  	; 15/12/2022
  5531                                  winold_swap:
  5532 0000076B 1E                      	push	ds
  5533 0000076C 06                      	push	es
  5534 0000076D 56                      	push	si
  5535 0000076E 57                      	push	di
  5536 0000076F 51                      	push	cx
  5537                                  
  5538                                  	;getdseg <ds>			;ds = DOSDATA
  5539 00000770 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5540                                  
  5541 00000775 3C01                    	cmp	al,1			;swap Windows out call
  5542 00000777 751B                    	jne	short swapin		;no, check if Swap in call
  5543 00000779 E88801                  	call	getwinlast
  5544 0000077C 1E                      	push	ds
  5545 0000077D 07                      	pop	es
  5546 0000077E 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5547 00000780 31F6                    	xor	si,si
  5548 00000782 BF[0600]                	mov	di,WinoldPatch1
  5549 00000785 B90800                  	mov	cx,8
  5550 00000788 FC                      	cld
  5551 00000789 51                      	push	cx
  5552 0000078A F3A4                    	rep	movsb			;save first 8 bytes
  5553 0000078C 59                      	pop	cx
  5554 0000078D BF[CD0D]                	mov	di,WinoldPatch2
  5555 00000790 F3A4                    	rep	movsb			;save next 8 bytes
  5556 00000792 EB1B                    	jmp	short winold_done
  5557                                  swapin:
  5558 00000794 3C02                    	cmp	al,2			;swap Windows in call?
  5559 00000796 7517                    	jne	short winold_done	;no, something else, pass it on
  5560 00000798 E86901                  	call	getwinlast
  5561 0000079B 8EC6                    	mov	es,si
  5562 0000079D 31FF                    	xor	di,di
  5563 0000079F BE[0600]                	mov	si,WinoldPatch1
  5564 000007A2 B90800                  	mov	cx,8
  5565 000007A5 FC                      	cld
  5566 000007A6 51                      	push	cx
  5567 000007A7 F3A4                    	rep	movsb			;restore first 8 bytes
  5568 000007A9 59                      	pop	cx
  5569 000007AA BE[CD0D]                	mov	si,WinoldPatch2
  5570 000007AD F3A4                    	rep	movsb			;restore next 8 bytes
  5571                                  winold_done:
  5572 000007AF 59                      	pop	cx
  5573 000007B0 5F                      	pop	di
  5574 000007B1 5E                      	pop	si
  5575 000007B2 07                      	pop	es
  5576 000007B3 1F                      	pop	ds
  5577 000007B4 EB7B                    	jmp	short next_i2f		;chain on
  5578                                  	; 15/12/2022
  5579                                  	;jmp	next_i2f	
  5580                                  
  5581                                  Win386_vxd:
  5582 000007B6 50                      	push	ax
  5583 000007B7 53                      	push	bx
  5584 000007B8 51                      	push	cx
  5585 000007B9 52                      	push	dx
  5586 000007BA 56                      	push	si
  5587 000007BB 57                      	push	di			; save regs !!dont change order!!
  5588                                  
  5589 000007BC 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5590 000007C0 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5591 000007C3 741F                    	je	short Vxd31		; N: continue
  5592                                  					; Y: save arena associated with 
  5593                                  					;    umb_head
  5594                                  
  5595 000007C5 C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5596                                  					; umb_arena
  5597 000007CA 1E                      	push	ds
  5598 000007CB 06                      	push	es
  5599                                  
  5600                                  	;mov	ax,ds
  5601                                  	;mov	es,ax			; es - > dosdata
  5602                                  	; 05/01/2024
  5603 000007CC 1E                      	push	ds
  5604 000007CD 07                      	pop	es
  5605                                  
  5606 000007CE 8EDB                    	mov	ds,bx
  5607 000007D0 31F6                    	xor	si,si			; ds:si -> umb_head
  5608                                  
  5609 000007D2 FC                      	cld
  5610                                  
  5611 000007D3 BF[1F12]                	mov	di,UmbSave1
  5612 000007D6 B90B00                  	mov	cx,11
  5613 000007D9 F3A4                    	rep	movsb
  5614                                  
  5615 000007DB BF[D50D]                	mov	di,UmbSave2
  5616                                  	;mov	cx,5
  5617                                  	; 18/12/2022
  5618 000007DE B105                    	mov	cl,5
  5619 000007E0 F3A4                    	rep	movsb	
  5620                                  
  5621 000007E2 07                      	pop	es
  5622 000007E3 1F                      	pop	ds			; M062 - End
  5623                                  
  5624                                  Vxd31:
  5625                                  	;test	byte [DOS_FLAG],2
  5626 000007E4 F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5627 000007E9 7408                    	jz	short Dont_Supress		; M066
  5628 000007EB 5F                      	pop	di				; M066
  5629 000007EC 5E                      	pop	si				; M066
  5630 000007ED 5A                      	pop	dx				; M066
  5631 000007EE 59                      	pop	cx				; M066
  5632 000007EF 5B                      	pop	bx				; M066
  5633 000007F0 58                      	pop	ax				; M066
  5634 000007F1 EB55                    	jmp	short noVxD31			; M066
  5635                                  
  5636                                  	; We check here if the VxD is available in the root of the boot drive. 
  5637                                  	; We do an extended open to suppress any error messages
  5638                                  	
  5639                                  Dont_Supress:
  5640 000007F3 A0[6900]                	mov	al,[BOOTDRIVE]
  5641 000007F6 0440                    	add	al,'A' - 1		; get drive letter
  5642 000007F8 A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5643                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5644                                  	;mov	al,0			; no extended attributes
  5645                                  	; 18/12/2022
  5646 000007FB B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5647 000007FE BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5648                                  					; no inherit, suppress crit err
  5649 00000801 B90700                  	mov	cx,7			; hidden,system,read-only attr
  5650 00000804 BA0100                  	mov	dx,1			; fail if file does not exist
  5651 00000807 BE[3110]                	mov	si,VxDpath	
  5652                                  					; path of VxD file
  5653 0000080A BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5654                                  
  5655 0000080D CD21                    	int	21h			; do extended open
  5656                                  
  5657 0000080F 5F                      	pop	di
  5658 00000810 5E                      	pop	si
  5659 00000811 5A                      	pop	dx
  5660 00000812 59                      	pop	cx
  5661                                  
  5662 00000813 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5663                                  
  5664                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5665                                  	; to indicate error to Windows after displaying message to user that 
  5666                                  	; VxD needs to be present to run Windows in enhanced mode.
  5667                                  
  5668 00000815 52                      	push	dx
  5669 00000816 1E                      	push	ds
  5670 00000817 56                      	push	si
  5671 00000818 BE[AC09]                	mov	si,NoVxDErrMsg
  5672 0000081B 0E                      	push	cs
  5673 0000081C 1F                      	pop	ds
  5674 0000081D B96300                  	mov	cx,VxDMesLen ; 99	;
  5675 00000820 B402                    	mov	ah,2			; write char to console
  5676 00000822 FC                      	cld
  5677                                  vxdlp:
  5678 00000823 AC                      	lodsb
  5679 00000824 86D0                    	xchg	dl,al			; get char in dl
  5680 00000826 CD21                    	int	21h
  5681 00000828 E2F9                    	loop	vxdlp
  5682                                  
  5683 0000082A 5E                      	pop	si
  5684 0000082B 1F                      	pop	ds
  5685 0000082C 5A                      	pop	dx
  5686 0000082D 5B                      	pop	bx
  5687 0000082E 58                      	pop	ax			;all registers restored
  5688 0000082F 41                      	inc	cx			;cx != 0 to indicate error
  5689                                  	; 15/12/22022
  5690                                  	;jmp	win_nexti2f		;chain on
  5691                                  	;jmp	short win_nexti2f
  5692                                  
  5693                                  	; 15/12/2022
  5694                                  win_nexti2f:
  5695 00000830 1F                      	pop	ds
  5696                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5697                                  	; 15/12/2022
  5698                                  next_i2f:
  5699                                  	;;;jmp	bios_i2f
  5700                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5701                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5702                                  	; 04/11/2022
  5703 00000831 EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5704                                  
  5705                                  VxDthere:
  5706 00000836 89C3                    	mov	bx,ax
  5707 00000838 B43E                    	mov	ah,CLOSE ; 3Eh
  5708 0000083A CD21                    	int	21h			;close the file
  5709                                  
  5710                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5711                                  
  5712                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5713                                  	;mov	bx,Win386_Info
  5714                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5715                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5716                                  	; 15/12/2022
  5717 0000083C C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5718 00000842 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5719                                  
  5720 00000846 5B                      	pop	bx
  5721 00000847 58                      	pop	ax
  5722                                  noVxD31:
  5723                                  	; M018; End of block changes
  5724                                  
  5725 00000848 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5726 0000084D 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5727                                  
  5728                                  	; M002;
  5729                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5730                                  
  5731 00000852 52                      	push	dx			; M002
  5732 00000853 89DA                    	mov	dx,bx			; M002
  5733                                  					; point ES:BX to Win386_Info ; M002
  5734 00000855 BB[E20F]                	mov	bx,Win386_Info 
  5735 00000858 895702                  	mov	[bx+2],dx		; M002
  5736 0000085B 8C4704                  	mov	[bx+4],es		; M002
  5737 0000085E 5A                      	pop	dx			; M002
  5738 0000085F 1E                      	push	ds			; M002
  5739 00000860 07                      	pop	es			; M002
  5740                                  	;jmp	win_nexti2f		; M002
  5741                                  	; 15/12/2022
  5742 00000861 EBCD                    	jmp	short win_nexti2f
  5743                                  
  5744                                  	; 15/12/2022
  5745                                  	; Code to return Win386 2.xx instance table
  5746                                  OldWin386Init:
  5747 00000863 58                      	pop	ax			; discard ds pushed on stack
  5748 00000864 BE[E711]                	mov	si,OldInstanceJunk 
  5749                                  					; ds:si = instance table
  5750 00000867 B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5751                                  	;jmp	next_i2f
  5752                                  	; 15/12/2022
  5753 0000086A EBC5                    	jmp	short next_i2f
  5754                                  
  5755                                  Win386_Leaving:
  5756                                  	; 15/12/2022
  5757 0000086C F6C201                  	test 	dl,1
  5758                                  	;test	dx,1			; is this really win386?
  5759                                  	;jz	short Win386_Leaving_c
  5760                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5761                                  	; 15/12/2022
  5762 0000086F 75BF                    	jnz	short win_nexti2f	
  5763                                  
  5764                                  Win386_Leaving_c:
  5765                                  					; M062 - Start
  5766 00000871 803E[DA0D]01            	cmp	byte [UmbSaveFlag],1	; Q: was umb_arena saved at win start
  5767                                  					;    up.
  5768 00000876 7523                    	jne	short noumb		; N: not saved 
  5769 00000878 C606[DA0D]00            	mov	byte [UmbSaveFlag],0	; Y: clear UmbSaveFlag and restore 
  5770                                  					;    previously saved umb_head
  5771                                  	; 05/01/2024
  5772                                  	;push	ax ; (not necessary)
  5773 0000087D 06                      	push	es
  5774 0000087E 51                      	push	cx
  5775 0000087F 56                      	push	si
  5776 00000880 57                      	push	di
  5777                                  
  5778                                  	;mov	ax,[UMB_HEAD]
  5779                                  	;mov	es,ax
  5780                                  	; 05/01/2024
  5781 00000881 8E06[8C00]              	mov	es,[UMB_HEAD]
  5782 00000885 31FF                    	xor	di,di			; es:di -> umb_head
  5783                                  
  5784 00000887 FC                      	cld
  5785                                  
  5786 00000888 BE[1F12]                	mov	si,UmbSave1
  5787 0000088B B90B00                  	mov	cx,11
  5788 0000088E F3A4                    	rep	movsb
  5789 00000890 BE[D50D]                	mov	si,UmbSave2
  5790                                  	;mov	cx,5
  5791                                  	; 18/12/2022
  5792 00000893 B105                    	mov	cl,5
  5793 00000895 F3A4                    	rep	movsb
  5794                                  
  5795 00000897 5F                      	pop	di
  5796 00000898 5E                      	pop	si
  5797 00000899 59                      	pop	cx
  5798 0000089A 07                      	pop	es
  5799                                  	; 05/01/2024
  5800                                  	;pop	ax
  5801                                  noumb:					; M062 - End
  5802 0000089B 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5803 000008A0 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5804 000008A5 EB89                    	jmp	short win_nexti2f
  5805                                  
  5806                                  ;	; 15/12/2022
  5807                                  ;	; Code to return Win386 2.xx instance table
  5808                                  ;OldWin386Init:
  5809                                  ;	pop	ax			; discard ds pushed on stack
  5810                                  ;	mov	si,OldInstanceJunk 
  5811                                  ;					; ds:si = instance table
  5812                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5813                                  ;	;jmp	next_i2f
  5814                                  ;	; 15/12/2022
  5815                                  ;	jmp	short _next_i2f
  5816                                  
  5817                                  Win386_Query:
  5818 000008A7 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5819 000008AA 7584                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5820 000008AC 09C9                    	or	cx,cx			; is it an instance query?
  5821 000008AE 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5822 000008B0 41                      	inc	cx			; indicate that data is instanced
  5823                                  ;
  5824                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5825                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5826                                  ; M001;  
  5827                                  ; M001; OFFSETS STRUC
  5828                                  ; M001; 	Major_version	db	?
  5829                                  ; M001; 	Minor_version	db	?
  5830                                  ; M001; 	SaveDS		dw	?
  5831                                  ; M001; 	SaveBX		dw	?
  5832                                  ; M001; 	Indos		dw	?
  5833                                  ; M001; 	User_id		dw	?
  5834                                  ; M001; 	CritPatch	dw	?
  5835                                  ; M001; OFFSETS	ENDS
  5836                                  ; M001; 
  5837                                  ; M001; User_Id is the only variable really important for proper functioning  
  5838                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5839                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5840                                  ; M001; pass this table because Win386 depends on this table to get the 
  5841                                  ; M001; User_Id offset.
  5842                                  ; M001; 
  5843 000008B1 BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5844 000008B4 1E                      	push	ds			; M001
  5845 000008B5 07                      	pop	es			; es:bx points at offset table ; M001
  5846 000008B6 EB40                    	jmp	short PopIret		; M001
  5847                                  
  5848                                  ; 15/12/2022
  5849                                  ;	; Code to return Win386 2.xx instance table
  5850                                  ;OldWin386Init:
  5851                                  ;	pop	ax			; discard ds pushed on stack
  5852                                  ;	mov	si,OldInstanceJunk 
  5853                                  ;					; ds:si = instance table
  5854                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5855                                  ;	;jmp	next_i2f
  5856                                  ;	; 15/12/2022
  5857                                  ;	jmp	short _next_i2f
  5858                                  
  5859                                  dosmgr_func:
  5860 000008B8 49                      	dec	cx
  5861 000008B9 7435                    	jz	short win386_patch	; call to patch DOS
  5862 000008BB 49                      	dec	cx
  5863 000008BC 743A                    	jz	short PopIret		; remove DOS patches, ignore
  5864 000008BE 49                      	dec	cx
  5865 000008BF 7439                    	jz	short win386_size	; get size of DOS data structures
  5866 000008C1 49                      	dec	cx
  5867 000008C2 7428                    	jz	short win386_inst	; instance more data
  5868                                  	;dec	cx
  5869                                  	;jnz	short PopIret		; no functions above this
  5870                                  	; 05/01/2024 (PCDOS 7.1 IBMDOS.COM DOSCODE:4771h)
  5871 000008C4 E232                    	loop	PopIret
  5872                                  
  5873                                  	; Get DOS device driver size -- es:di points at device driver header
  5874                                  	; In DOS 4.x, the para before the device header contains an arena 
  5875                                  	; header for the driver.
  5876                                  
  5877 000008C6 8CC0                    	mov	ax,es			; ax = device header segment
  5878                                  
  5879                                  	; We check to see if we have a memory arena for this device driver. 
  5880                                  	; The way to do this would be to look at the previous para to see if
  5881                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5882                                  	; in the arena is the same as the device header segment. These two 
  5883                                  	; checks together should take care of all cases
  5884                                  
  5885 000008C8 48                      	dec	ax			; get arena header
  5886 000008C9 06                      	push	es
  5887 000008CA 8EC0                    	mov	es,ax			; arena header for device driver
  5888                                  
  5889 000008CC 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5890 000008D0 7517                    	jnz	short cantsize		; no, cant size this driver
  5891 000008D2 40                      	inc	ax			; get back device header segment
  5892 000008D3 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5893 000008D7 7510                    	jnz	short cantsize		; no, not a proper arena
  5894                                  
  5895 000008D9 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5896 000008DD 07                      	pop	es
  5897                                  
  5898                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5899                                  	; Speed is not critical and so we choose the shortest method 
  5900                                  	; -- use "mul"
  5901                                  
  5902 000008DE BB1000                  	mov	bx,16
  5903 000008E1 F7E3                    	mul	bx
  5904 000008E3 89C1                    	mov	cx,ax
  5905 000008E5 89D3                    	mov	bx,dx
  5906 000008E7 EB09                    	jmp	short win386_done	; return with device driver size
  5907                                  cantsize:
  5908 000008E9 07                      	pop	es
  5909 000008EA 31C0                    	xor	ax,ax
  5910                                  win386_inst:	; 05/01/2024
  5911 000008EC 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5912 000008EE EB08                    	jmp	short PopIret		; return
  5913                                  
  5914                                  win386_patch:
  5915                                  	; dx contains bits marking the patches to be applied. We return 
  5916                                  	; the field with all bits set to indicate that all patches have been
  5917                                  	; done
  5918                                  
  5919 000008F0 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5920                                   	;jmp	short win386_done	; done, return
  5921                                  	; 15/12/2022
  5922                                  	; 15/12/2022
  5923                                  win386_done:
  5924 000008F2 B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5925 000008F5 BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5926                                  PopIret:
  5927 000008F8 1F                      	pop	ds
  5928 000008F9 CF                      	iret	
  5929                                  
  5930                                  win386_size:
  5931                                  	; Return the size of DOS data structures -- currently only CDS size
  5932                                  
  5933                                  	; 17/12/2022
  5934 000008FA F6C201                  	test	dl,1
  5935                                  	;test	dx,1			; check for CDS size bit
  5936 000008FD 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5937                                  
  5938 000008FF B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5939 00000902 EBEE                    	jmp	short win386_done	; return with the size
  5940                                  
  5941                                  ; 05/01/2024
  5942                                  %if 0
  5943                                  win386_inst:
  5944                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5945                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5946                                  	; this by returning a status of not previously instanced. The basic
  5947                                  	; structure of these things have not changed and so the current
  5948                                  	; DOSMGR code should be able to work it out
  5949                                  
  5950                                  	xor	dx,dx			; make sure dx has a not done value
  5951                                  	jmp	short PopIret		; skip done indication
  5952                                  %endif
  5953                                  
  5954                                  	; 15/12/2022
  5955                                  ;win386_done:
  5956                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5957                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5958                                  ;PopIret:
  5959                                  ;	pop	ds
  5960                                  ;	iret				; return back up the chain
  5961                                  
  5962                                  	; 15/12/2022
  5963                                  ;win_nexti2f:
  5964                                  	;pop	ds
  5965                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5966                                  
  5967                                  ;End WIN386 support
  5968                                  
  5969                                  ; 15/05/2019
  5970                                  
  5971                                  ;M044; Start of changes
  5972                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5973                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5974                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5975                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5976                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5977                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5978                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5979                                  ; last para of the Windows memory block and then restore this para on the
  5980                                  ; Windows swapin callout. 
  5981                                  
  5982                                  getwinlast:
  5983                                  	; 07/12/2022
  5984 00000904 8B36[3003]              	mov	si,[CurrentPDB]
  5985 00000908 4E                      	dec	si
  5986 00000909 8EC6                    	mov	es,si
  5987 0000090B 2603360300              	add	si,[es:3]
  5988 00000910 C3                      	retn
  5989                                  
  5990                                  ; 15/12/2022
  5991                                  %if 0
  5992                                  winold_swap:
  5993                                  	push	ds
  5994                                  	push	es
  5995                                  	push	si
  5996                                  	push	di
  5997                                  	push	cx
  5998                                  
  5999                                  	;getdseg <ds>			;ds = DOSDATA
  6000                                  	mov	ds,[cs:DosDSeg]
  6001                                  
  6002                                  	cmp	al,1			;swap Windows out call
  6003                                  	jne	short swapin		;no, check if Swap in call
  6004                                  	call	getwinlast
  6005                                  	push	ds
  6006                                  	pop	es
  6007                                  	mov	ds,si			;ds = memory arena of Windows
  6008                                  	xor	si,si
  6009                                  	mov	di,WinoldPatch1
  6010                                  	mov	cx,8
  6011                                  	cld
  6012                                  	push	cx
  6013                                  	rep	movsb			;save first 8 bytes
  6014                                  	pop	cx
  6015                                  	mov	di,WinoldPatch2
  6016                                  	rep	movsb			;save next 8 bytes
  6017                                  	jmp	short winold_done
  6018                                  swapin:
  6019                                  	cmp	al,2			;swap Windows in call?
  6020                                  	jne	short winold_done	;no, something else, pass it on
  6021                                  	call	getwinlast
  6022                                  	mov	es,si
  6023                                  	xor	di,di
  6024                                  	mov	si,WinoldPatch1
  6025                                  	mov	cx,8
  6026                                  	cld
  6027                                  	push	cx
  6028                                  	rep	movsb			;restore first 8 bytes
  6029                                  	pop	cx
  6030                                  	mov	si,WinoldPatch2
  6031                                  	rep	movsb			;restore next 8 bytes
  6032                                  winold_done:
  6033                                  	pop	cx
  6034                                  	pop	di
  6035                                  	pop	si
  6036                                  	pop	es
  6037                                  	pop	ds
  6038                                  	jmp	next_i2f		;chain on
  6039                                  
  6040                                  %endif
  6041                                  
  6042                                  ;M044; End of changes
  6043                                  
  6044                                  ; 15/05/2019
  6045                                  
  6046                                  DispatchDOS:
  6047 00000911 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  6048 00000916 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  6049 0000091B 50                      	PUSH	AX			; push index
  6050 0000091C 55                      	PUSH	BP
  6051 0000091D 89E5                    	MOV	BP,SP
  6052                                  		; stack looks like:
  6053                                  		;   0	BP
  6054                                  		;   2	DISPATCH
  6055                                  		;   4	TABLE
  6056                                  		;   6	RETURN
  6057                                  		;   8	LONG-RETURN
  6058                                  		;   C	FLAGS
  6059                                  		;   E	AX
  6060                                  	
  6061 0000091F 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6062 00000922 5D                      	POP	BP
  6063 00000923 E8DA08                  	call	TableDispatch
  6064 00000926 E9DEFD                  	JMP	BadFunc 		; return indicates invalid function
  6065                                  
  6066                                  INT2F_etcetera:
  6067                                  	;entry	DosGetGroup
  6068                                  DosGetGroup:
  6069                                  	; MSDOS 3.3
  6070                                  	;push	cs
  6071                                  	;pop	ds
  6072                                  	;retn
  6073                                  
  6074                                  	; MSDOS 6.0
  6075                                  ;SR; Cannot use CS now
  6076                                  ;
  6077                                  ;	PUSH	CS
  6078                                  ;	POP	DS
  6079                                  
  6080                                  	; 04/11/2022
  6081                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  6082                                  
  6083                                  	;getdseg <ds>
  6084 00000929 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6085 0000092E C3                      	retn
  6086                                  
  6087                                  	;entry	DOSInstall
  6088                                  DOSInstall:
  6089 0000092F B0FF                    	MOV	AL,0FFh
  6090 00000931 C3                      	retn
  6091                                  
  6092                                  ;ENDIF ; (*)
  6093                                  
  6094                                  
  6095                                  ; 15/05/2019 - Retro DOS v4.0
  6096                                  
  6097                                  ;------------------------------------------------------------------------
  6098                                  ;
  6099                                  ; Procedure Name : RW32_CONVERT
  6100                                  ;
  6101                                  ;Input: same as ABSDRD and ABSDWRT
  6102                                  ;	 ES:BP -> DPB
  6103                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6104                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6105                                  ;	 carry clear, parms ok
  6106                                  ;
  6107                                  ;------------------------------------------------------------------------
  6108                                  
  6109                                  	; 06/01/2024
  6110                                  RW32_CONVERT:
  6111                                  	;inc	cx ; *	; 01 -> 0
  6112 00000932 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6113 00000935 7429                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6114                                  	;dec	cx ; *
  6115 00000937 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6116 00000938 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6117                                  	;mov	ax,[es:bp+0Dh]
  6118 00000939 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6119                                  	;mov	dl,[es:bp+4]
  6120 0000093D 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6121 00000941 80FAFE                  	CMP	DL,0FEh ; 254		;>32mb  removable ?	;AN000;
  6122 00000944 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6123                                  	;INC	DL			;>32mb			;AN000;
  6124                                  	; 17/12/2022
  6125 00000946 42                      	inc	dx
  6126 00000947 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6127 00000949 F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6128 0000094B 09D2                    	OR	DX,DX	; (clears CF)	;>32mb  > 32mb ?	;AN000;
  6129                                  letold:
  6130 0000094D 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6131 0000094E 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6132 0000094F 7425                    	JZ	short old_style	; cf=0	;>32mb  no 		;AN000;
  6133                                  
  6134 00000951 1E                      	push	ds
  6135                                  	;getdseg <ds>
  6136 00000952 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6137 00000957 C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6138 0000095D 1F                      	pop	ds
  6139                                  
  6140 0000095E F9                      	STC				;>32mb			;AN000;
  6141 0000095F C3                      	retn				;>32mb			;AN000;
  6142                                  
  6143                                  new32format:
  6144                                  	;mov	dx,[bx+2]
  6145 00000960 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6146                                  
  6147 00000963 1E                      	push	ds			; set up ds to DOSDATA
  6148                                  	;getdseg <ds>
  6149 00000964 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6150 00000969 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6151 0000096D 1F                      	pop	ds
  6152                                  
  6153 0000096E 8B17                    	mov	dx,[bx]
  6154                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6155                                  	;mov	cx,[bx+4]
  6156 00000970 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6157                                  	;lds	bx,[bx+6]
  6158 00000973 C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6159                                  old_style:				;>32mb			;AN000;
  6160                                  	; 06/01/2024
  6161                                  	; cf=0
  6162                                  	;CLC				;>32mb			;AN000;
  6163 00000976 C3                      	retn				;>32mb			;AN000;
  6164                                  
  6165                                  ;------------------------------------------------------------------------
  6166                                  ;
  6167                                  ; Procedure Name : Fastxxx_Purge
  6168                                  ;
  6169                                  ; Input: None
  6170                                  ; Functions: Purge Fastopen/ Cache Buffers
  6171                                  ; Output: None
  6172                                  ;
  6173                                  ;------------------------------------------------------------------------
  6174                                  
  6175                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6176                                  
  6177                                  Fastxxx_Purge:
  6178 00000977 50                      	PUSH	AX			; save regs.	;AN000;
  6179 00000978 56                      	PUSH	SI						;AN000;
  6180 00000979 52                      	PUSH	DX						;AN000;
  6181                                  topen:
  6182 0000097A 1E                      	push	ds			; set up ds to DOSDATA
  6183                                  	;getdseg <ds>
  6184 0000097B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6185                                  
  6186 00000980 F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6187                                  					; fastopen installed ?	;AN000;
  6188 00000985 1F                      	pop	ds
  6189 00000986 740B                    	JZ	short nofast		; no			;AN000;
  6190 00000988 B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6191                                  dofast:
  6192 0000098A B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6193                                  	;;mov	dl,[es:bp+0]
  6194                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6195                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6196                                  	; 15/12/2022
  6197 0000098C 268A5600                	mov	dl,[es:bp]
  6198                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6199 00000990 E8F31C                  	call	Fast_Dispatch
  6200                                  nofast:
  6201 00000993 5A                      	POP	DX						;AN000;
  6202 00000994 5E                      	POP	SI			; restore regs		;AN000;
  6203 00000995 58                      	POP	AX			 			;AN000;
  6204 00000996 C3                      	retn				; exit
  6205                                  
  6206                                  ;============================================================================
  6207                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6208                                  ;============================================================================
  6209                                  ; 29/04/2019 - Retro DOS v4.0
  6210                                  
  6211                                  ;include dossym.inc
  6212                                  ;include dosmac.inc
  6213                                  ;include doscntry.inc
  6214                                  
  6215                                  ; DOSCODE Segment
  6216                                  
  6217                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6218                                  ; ---------------------------------------------------------------------------
  6219                                  ;include divmes.inc
  6220                                  
  6221                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6222                                  ; -------------------------------------
  6223                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6224                                  
  6225                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6226                                  	;PUBLIC	DIVMES
  6227                                  
  6228 00000997 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6228 000009A0 6F766572666C6F770D-
  6228 000009A9 0A                 
  6229                                  
  6230                                  	;PUBLIC	DivMesLen
  6231                                  DivMesLen:
  6232 000009AA 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6233                                  
  6234                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6235                                  ; -------------------------------------
  6236                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6237                                  
  6238                                  ; (MSDOS 6.0)
  6239                                  ; VxD not found error message
  6240                                  
  6241                                  NoVxDErrMsg:
  6242 000009AC 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6242 000009B5 686176652074686520-
  6242 000009BE 66696C652057494E41-
  6242 000009C7 32302E33383620696E-
  6242 000009D0 2074686520726F6F74-
  6242 000009D9 206F6620796F757220-
  6242 000009E2 626F6F742064726976-
  6242 000009EB 65                 
  6243 000009EC 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6243 000009F5 57696E646F77732069-
  6243 000009FE 6E20456E68616E6365-
  6243 00000A07 64204D6F64650D0A   
  6244                                  
  6245                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6246                                  
  6247                                  ; 13/05/2019 - Retro DOS v4.0
  6248                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6249                                  
  6250                                  ;include yesno.asm  (MNSDOS 6.0)
  6251                                  ; -------------------------------------
  6252                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6253                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6254                                  
  6255                                  ; This is for country Yes and No
  6256                                  
  6257 00000A0F 59                      NLS_YES:	db 'Y'
  6258 00000A10 4E                      NLS_NO:		db 'N'
  6259 00000A11 79                      NLS_yes2:	db 'y'
  6260 00000A12 6E                      NLS_no2:	db 'n'
  6261                                  
  6262                                  ; ---------------------------------------------------------------------------
  6263                                  
  6264                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6265                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6266                                  
  6267                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6268                                  
  6269                                  ; The following two tables implement the current buffered input editing
  6270                                  ; routines. The tables are pairwise associated in reverse order for ease
  6271                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6272                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6273                                  
  6274                                  	;PUBLIC	CANCHAR
  6275                                  CANCHAR:
  6276 00000A13 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6277                                  	
  6278                                  	;PUBLIC	ESCCHAR
  6279                                  ESCCHAR:
  6280 00000A14 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6281                                  	
  6282                                  	;IF	NOT Rainbow
  6283                                  
  6284                                  ESCTAB:	; LABEL BYTE
  6285                                  
  6286                                  	;IF	IBM
  6287 00000A15 40                      	DB	64		; Ctrl-Z - F6
  6288 00000A16 4D                      	DB	77		; Copy one char - -->
  6289 00000A17 3B                      	DB	59		; Copy one char - F1
  6290 00000A18 53                      	DB	83		; Skip one char - DEL
  6291 00000A19 3C                      	DB	60		; Copy to char - F2
  6292 00000A1A 3E                      	DB	62		; Skip to char - F4
  6293 00000A1B 3D                      	DB	61		; Copy line - F3
  6294 00000A1C 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6295 00000A1D 3F                      	DB	63		; Reedit line (new template) - F5
  6296 00000A1E 4B                      	DB	75		; Backspace - <--
  6297 00000A1F 52                      	DB	82		; Enter insert mode - INS (toggle)
  6298 00000A20 52                      	DB	82		; Exit insert mode - INS (toggle)
  6299 00000A21 41                      	DB	65		; Escape character - F7
  6300 00000A22 41                      	DB	65		; End of table
  6301                                  	;ENDIF
  6302                                  
  6303                                  ESCEND: ; LABEL BYTE
  6304                                  
  6305                                  ESCTABLEN EQU ESCEND-ESCTAB
  6306                                  
  6307                                  ESCFUNC: ; LABEL WORD
  6308                                  	
  6309 00000A23 [F513]                  	short_addr  GETCH	; Ignore the escape sequence
  6310 00000A25 [7214]                  	short_addr  TWOESC
  6311 00000A27 [6715]                  	short_addr  EXITINS
  6312 00000A29 [6715]                  	short_addr  ENTERINS
  6313 00000A2B [6D14]                  	short_addr  BACKSP
  6314 00000A2D [5315]                  	short_addr  REEDIT
  6315 00000A2F [5A14]                  	short_addr  KILNEW
  6316 00000A31 [E914]                  	short_addr  COPYLIN
  6317 00000A33 [1B15]                  	short_addr  SKIPSTR
  6318 00000A35 [EF14]                  	short_addr  COPYSTR
  6319 00000A37 [1215]                  	short_addr  SKIPONE
  6320 00000A39 [F414]                  	short_addr  COPYONE
  6321 00000A3B [F414]                  	short_addr  COPYONE
  6322 00000A3D [6E15]                  	short_addr  CTRLZ
  6323                                  
  6324                                  	;ENDIF
  6325                                  
  6326                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6327                                  ; ---------------------------------------------------------------------------
  6328                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6329                                  
  6330                                  ; OEMFunction key is expected to process a single function
  6331                                  ;   key input from a device and dispatch to the proper
  6332                                  ;   routines leaving all registers UNTOUCHED.
  6333                                  ;
  6334                                  ; Inputs:   CS, SS are DOSGROUP
  6335                                  ; Outputs:  None. This function is expected to JMP to onw of
  6336                                  ;           the following labels:
  6337                                  ;
  6338                                  ;           GetCh       - ignore the sequence
  6339                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6340                                  ;           ExitIns     - toggle insert mode
  6341                                  ;           EnterIns    - toggle insert mode
  6342                                  ;           BackSp      - move backwards one space
  6343                                  ;           ReEdit      - reedit the line with a new template
  6344                                  ;           KilNew      - discard the current line and start from scratch
  6345                                  ;           CopyLin     - copy the rest of the template into the line
  6346                                  ;           SkipStr     - read the next character and skip to it in the template
  6347                                  ;           CopyStr     - read next char and copy from template to line until char
  6348                                  ;           SkipOne     - advance position in template one character
  6349                                  ;           CopyOne     - copy next character in template into line
  6350                                  ;           CtrlZ       - place a ^Z into the template
  6351                                  ; Registers that are allowed to be modified by this function are:
  6352                                  ;           AX, CX, BP
  6353                                  
  6354                                  ; 13/05/2019 - Retro DOS v4.0
  6355                                  ; -------------------------------------
  6356                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6357                                  
  6358                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6359                                  ; -------------------------------------
  6360                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6361                                  
  6362                                  OEMFunctionKey:
  6363 00000A3F E81509                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6364 00000A42 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6365 00000A44 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6366 00000A45 BF[150A]                	MOV     DI,ESCTAB		; offset of second byte table
  6367 00000A48 06                      	push	es
  6368 00000A49 0E                      	push	cs
  6369 00000A4A 07                      	pop	es
  6370 00000A4B F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6371 00000A4D 07                      	pop	es
  6372 00000A4E 5F                      	POP     DI                      ; restore DI
  6373 00000A4F D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6374 00000A51 89CD                    	MOV     BP,CX                   ; move to indexable register
  6375                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6376 00000A53 2EFFA6[230A]            	JMP	word [CS:BP+ESCFUNC]
  6377                                  
  6378                                  ;DOSCODE ENDS
  6379                                  	
  6380                                  ;============================================================================
  6381                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6382                                  ;============================================================================
  6383                                  ; Retro DOS v3.0 - 18/07/2018
  6384                                  
  6385                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6386                                  ;----------------------------------------------------------------------------
  6387                                  ; Retro DOS v2.0 - 13/03/2018
  6388                                  
  6389                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6390                                  
  6391                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6392                                  
  6393                                  ;**	$GET_DATE - Get Current Date
  6394                                  ;----------------------------------------
  6395                                  ;	ENTRY	none
  6396                                  ;	EXIT	(cx:dx) = current date
  6397                                  ;	USES	all
  6398                                  
  6399                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6400                                  
  6401                                  _$GET_DATE:	;System call 42
  6402                                  
  6403 00000A58 16                      	PUSH	SS
  6404 00000A59 1F                      	POP	DS
  6405 00000A5A E8AD00                  	CALL	READTIME	;Check for rollover to next day
  6406 00000A5D A1[5203]                	MOV	AX,[YEAR]
  6407                                  
  6408                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6409                                  
  6410 00000A60 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6411 00000A64 E81AFA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6412                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6413 00000A67 895C06                  	MOV	[SI+user_env.user_DX],BX
  6414 00000A6A 05BC07                  	ADD	AX,1980		;Put bias back
  6415                                  	;MOV	[SI+4],AX	;CX=year
  6416 00000A6D 894404                  	MOV	[SI+user_env.user_CX],AX
  6417 00000A70 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6418                                  RET20:	; 05/11/2022
  6419                                  RET24:	; 18/12/2022
  6420 00000A74 C3                      	RETN
  6421                                  
  6422                                  ;**	$SET_DATE - Set Current Date
  6423                                  ;----------------------------------------
  6424                                  ;	ENTRY	(cx:dx) = current date
  6425                                  ;	EXIT	(al) = -1 iff bad date
  6426                                  ;		(al) = 0 if ok
  6427                                  ;	USES	all
  6428                                  
  6429                                  _$SET_DATE:	;System call 43
  6430                                  
  6431 00000A75 B0FF                    	MOV	AL,-1		;Be ready to flag error
  6432 00000A77 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6433                                  	;JC	SHORT RET24	;Error if not big enough
  6434                                  	; 05/11/2022
  6435 00000A7B 72F7                    	jc	short RET20
  6436 00000A7D 83F977                  	CMP	CX,119		;Year must be less than 2100
  6437 00000A80 77F2                    	JA	SHORT RET24
  6438 00000A82 08F6                    	OR	DH,DH
  6439                                  	;JZ	SHORT RET24
  6440                                   	; 05/11/2022
  6441 00000A84 74EE                    	jz	short RET20
  6442 00000A86 08D2                    	OR	DL,DL
  6443                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6444                                  	; 05/11/2022
  6445 00000A88 74EA                    	jz	short RET20
  6446 00000A8A 80FE0C                  	CMP	DH,12		;Check against max. month
  6447 00000A8D 77E5                    	JA	SHORT RET24
  6448 00000A8F 16                      	PUSH	SS
  6449 00000A90 1F                      	POP	DS
  6450                                  	;CALL	DODATE
  6451                                  	; 18/12/2022
  6452 00000A91 E90301                  	jmp	DODATE
  6453                                  ;RET24:  
  6454                                  	;RETN
  6455                                  
  6456                                  ;**	$GET_TIME - Get Current Time
  6457                                  ;----------------------------------------
  6458                                  ;	ENTRY	none
  6459                                  ;	EXIT	(cx:dx) = current time
  6460                                  ;	USES	all
  6461                                  
  6462                                  _$GET_TIME:			;System call 44
  6463                                  
  6464 00000A94 16                      	PUSH	SS
  6465 00000A95 1F                      	POP	DS
  6466 00000A96 E87100                  	CALL	READTIME
  6467 00000A99 E8E5F9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6468                                  	;MOV	[SI+6],DX
  6469 00000A9C 895406                  	MOV	[SI+user_env.user_DX],DX
  6470                                  	;MOV	[SI+4],CX
  6471 00000A9F 894C04                  	MOV	[SI+user_env.user_CX],CX
  6472                                  set_time_ok:	; 06/01/2024
  6473 00000AA2 30C0                    	XOR	AL,AL
  6474                                  RET26:  
  6475 00000AA4 C3                      	RETN
  6476                                  
  6477                                  ;**	$SET_TIME - Set Current Time
  6478                                  ;----------------------------------------
  6479                                  ;	ENTRY	(cx:dx) = time
  6480                                  ;	EXIT	(al) = 0 if 0k
  6481                                  ;		(al) = -1 if invalid
  6482                                  ;	USES	ALL
  6483                                  
  6484                                  _$SET_TIME:			;System call 45
  6485                                  
  6486 00000AA5 B0FF                    	MOV	AL,-1		;Flag in case of error
  6487 00000AA7 80FD18                  	CMP	CH,24		;Check hours
  6488 00000AAA 73F8                    	JAE	SHORT RET26
  6489 00000AAC 80F93C                  	CMP	CL,60		;Check minutes
  6490 00000AAF 73F3                    	JAE	SHORT RET26
  6491 00000AB1 80FE3C                  	CMP	DH,60		;Check seconds
  6492 00000AB4 73EE                    	JAE	SHORT RET26
  6493 00000AB6 80FA64                  	CMP	DL,100		;Check 1/100's
  6494 00000AB9 73E9                    	JAE	SHORT RET26
  6495 00000ABB 51                      	PUSH	CX
  6496 00000ABC 52                      	PUSH	DX
  6497 00000ABD 16                      	PUSH	SS
  6498 00000ABE 1F                      	POP	DS
  6499                                  
  6500                                  ; 07/02/2024
  6501                                  %if 0
  6502                                  	MOV	BX,TIMEBUF
  6503                                  	MOV	CX,6
  6504                                  	; 06/02/2024 ; *
  6505                                  	;;XOR	DX,DX
  6506                                  	;;MOV	AX,DX
  6507                                  	;xor	ax,ax
  6508                                  	;cwd	; 06/01/2024
  6509                                  	PUSH	BX
  6510                                  	;CALL	SETREAD
  6511                                  	; 06/02/2024 ; *
  6512                                  	call	SETREAD_X
  6513                                  %else
  6514 00000ABF E8193B                  	call	SETREAD_XT
  6515                                  %endif
  6516                                  
  6517 00000AC2 1E                      	PUSH	DS
  6518 00000AC3 C536[2E00]              	LDS	SI,[BCLOCK]
  6519 00000AC7 E89A3A                  	CALL	DEVIOCALL2	;Get correct day count
  6520 00000ACA 1F                      	POP	DS
  6521 00000ACB 5B                      	POP	BX
  6522 00000ACC E8493B                  	CALL	SETWRITE
  6523 00000ACF 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6524 00000AD3 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6525 00000AD7 C536[2E00]              	LDS	SI,[BCLOCK]
  6526 00000ADB E8863A                  	CALL	DEVIOCALL2	;Set the time
  6527                                  	; 06/01/2024
  6528                                  	;XOR	AL,AL
  6529                                  	;RETN
  6530 00000ADE EBC2                    	jmp	short set_time_ok
  6531                                  
  6532                                  ; 11/07/2018 - Retro DOS v3.0
  6533                                  ; Retro DOS v2.0 - 14/03/2018
  6534                                  
  6535                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6536                                  
  6537                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6538                                  ;----------------------------------------------------------
  6539                                  ; Date16 returns the current date in AX, current time in DX
  6540                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6541                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6542                                  
  6543                                  DATE16:
  6544                                  	
  6545                                  ;M048	Context DS
  6546                                  ;
  6547                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6548                                  ; is DOSDATA
  6549                                  
  6550                                  	;push	ss
  6551                                  	;pop	ds
  6552                                  
  6553                                  	;getdseg <ds>		; M048
  6554                                  
  6555                                  	; 13/05/2019 - Retro DOS v4.0
  6556 00000AE0 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6557                                  
  6558 00000AE5 51                      	PUSH	CX
  6559 00000AE6 06                      	PUSH	ES
  6560 00000AE7 E82000                  	CALL	READTIME
  6561 00000AEA 07                      	POP	ES
  6562 00000AEB D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6563 00000AED D0E1                    	SHL	CL,1
  6564 00000AEF D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6565 00000AF1 D1E1                    	SHL	CX,1
  6566 00000AF3 D1E1                    	SHL	CX,1
  6567 00000AF5 D0EE                    	SHR	DH,1		;Count every two seconds
  6568 00000AF7 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6569 00000AF9 89CA                    	MOV	DX,CX
  6570                                  
  6571                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6572                                  
  6573 00000AFB A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6574 00000AFE B104                    	MOV	CL,4
  6575 00000B00 D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6576 00000B02 D1E0                    	SHL	AX,1
  6577 00000B04 59                      	POP	CX
  6578 00000B05 0A06[5003]              	OR	AL,[DAY]
  6579                                  RET21:
  6580 00000B09 C3                      	RETN
  6581                                  
  6582                                  ;----------------------------------------------------------
  6583                                  
  6584                                  READTIME:
  6585                                  
  6586                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6587                                  ;Uses AX, CX, DX.
  6588                                  
  6589 00000B0A C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6590 00000B10 56                      	PUSH	SI
  6591 00000B11 53                      	PUSH	BX
  6592                                  
  6593 00000B12 BB[B603]                	MOV	BX,TIMEBUF
  6594                                  ; 07/02/2024
  6595                                  %if 0
  6596                                  	MOV	CX,6
  6597                                  	; 06/02/2024
  6598                                  	;;XOR	DX,DX
  6599                                  	;;MOV	AX,DX
  6600                                  	;; 06/01/2024
  6601                                  	;xor	ax,ax
  6602                                  	;cwd
  6603                                  	;CALL	SETREAD
  6604                                  	; 06/02/2024
  6605                                  	call	SETREAD_X
  6606                                  %else
  6607 00000B15 E8C73A                  	call	SETREAD_XTC
  6608                                  %endif
  6609 00000B18 1E                      	PUSH	DS
  6610 00000B19 C536[2E00]              	LDS	SI,[BCLOCK]
  6611 00000B1D E8443A                  	CALL	DEVIOCALL2	;Get correct date and time
  6612 00000B20 1F                      	POP	DS
  6613 00000B21 5B                      	POP	BX
  6614 00000B22 5E                      	POP	SI
  6615 00000B23 A1[B603]                	MOV	AX,[TIMEBUF]
  6616 00000B26 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6617 00000B2A 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6618 00000B2E 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6619                                  	;JZ	SHORT RET22
  6620 00000B32 74D5                    	JZ	SHORT RET21 ; 18/07/2018
  6621                                  	;cmp	ax,43830
  6622 00000B34 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6623 00000B37 733D                    	JAE	SHORT RET22	;Ignore if too large
  6624 00000B39 A3[5403]                	MOV	[DAYCNT],AX
  6625 00000B3C 56                      	PUSH	SI
  6626 00000B3D 51                      	PUSH	CX
  6627 00000B3E 52                      	PUSH	DX		;Save time
  6628 00000B3F 31D2                    	XOR	DX,DX
  6629                                  	;mov	cx,1461
  6630 00000B41 B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6631 00000B44 F7F1                    	DIV	CX		;Compute number of 4-year units
  6632 00000B46 D1E0                    	SHL	AX,1
  6633 00000B48 D1E0                    	SHL	AX,1
  6634 00000B4A D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6635 00000B4C 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6636                                  
  6637 00000B4E BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6638                                  
  6639 00000B51 E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6640 00000B54 D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6641 00000B56 7304                    	JNC	SHORT SK	;Extra half-year?
  6642 00000B58 81C2C800                	ADD	DX,200
  6643                                  SK:
  6644 00000B5C E82200                  	CALL	SETYEAR
  6645 00000B5F B101                    	MOV	CL,1		;At least at first month in year
  6646                                  
  6647 00000B61 BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6648                                  	
  6649 00000B64 E81000                  	CALL	DSLIDE		;Find out which month we're in
  6650 00000B67 880E[5103]              	MOV	[MONTH],CL
  6651 00000B6B 42                      	INC	DX		;Remainder is day of month (start with one)
  6652 00000B6C 8816[5003]              	MOV	[DAY],DL
  6653 00000B70 E88A00                  	CALL	WKDAY		;Set day of week
  6654 00000B73 5A                      	POP	DX
  6655 00000B74 59                      	POP	CX
  6656 00000B75 5E                      	POP	SI
  6657                                  RET22:  
  6658 00000B76 C3                      	RETN
  6659                                  
  6660                                  ;----------------------------------------------------------
  6661                                  
  6662                                  DSLIDE:
  6663                                  	;MOV	AH,0
  6664                                  	; 06/01/2024
  6665                                  	; (AH=0)
  6666                                  DSLIDE1:
  6667 00000B77 AC                      	LODSB			;Get count of days
  6668 00000B78 39C2                    	CMP	DX,AX		;See if it will fit
  6669                                  	;JB	SHORT RET23	;If not, done
  6670 00000B7A 72FA                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6671 00000B7C 29C2                    	SUB	DX,AX
  6672 00000B7E 41                      	INC	CX		;Count one more month/year
  6673 00000B7F EBF6                    	JMP	SHORT DSLIDE1
  6674                                  
  6675                                  ;----------------------------------------------------------
  6676                                  
  6677                                  SETYEAR:
  6678                                  
  6679                                  ;Set year with value in CX. Adjust length of February for this year.
  6680                                  
  6681                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6682                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6683                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6684                                  ;	preserve DS as CHKYR is also called as a routine.
  6685                                  
  6686                                  	; MSDOS 6.0 (18/07/2018) ; *
  6687                                  
  6688                                  	;GETDSEG DS
  6689                                  
  6690                                  	;PUSH	CS  ; *
  6691                                  	;POP	DS  ; *
  6692                                  
  6693                                  	; 13/05/2019 - Retro DOS v4.0
  6694 00000B81 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6695                                  
  6696                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6697                                  	; 05/11/2022 
  6698                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6699                                  
  6700 00000B86 880E[5203]              	MOV	[YEAR],CL
  6701                                  CHKYR:
  6702 00000B8A F6C103                  	TEST	CL,3		;Check for leap year
  6703 00000B8D B01C                    	MOV	AL,28
  6704 00000B8F 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6705 00000B91 FEC0                    	INC	AL		;Add leap day
  6706                                  SAVFEB:
  6707 00000B93 A2[1D0D]                	mov	[february],al
  6708                                  	;MOV	[MONTAB+1],AL	;Store for February
  6709                                  RET23:  
  6710 00000B96 C3                      	RETN
  6711                                  
  6712                                  ;----------------------------------------------------------
  6713                                  
  6714                                  DODATE:
  6715 00000B97 E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6716 00000B9A 88F0                    	MOV	AL,DH
  6717                                  
  6718 00000B9C BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6719                                  
  6720 00000B9F D7                      	XLAT			;Look up days in month
  6721 00000BA0 38D0                    	CMP	AL,DL
  6722 00000BA2 B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6723                                  	;JB	SHORT RET25	;Error if too many days
  6724 00000BA4 72F0                    	jb	short RET23 ; 18/07/2018
  6725 00000BA6 E8D8FF                  	CALL	SETYEAR
  6726                                  ;
  6727                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6728                                  ;
  6729 00000BA9 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6730 00000BAD D1E9                    	SHR	CX,1
  6731 00000BAF D1E9                    	SHR	CX,1
  6732                                  	;mov	ax,1461
  6733 00000BB1 B8B505                  	MOV	AX,FOURYEARS
  6734 00000BB4 89D3                    	MOV	BX,DX
  6735 00000BB6 F7E1                    	MUL	CX
  6736 00000BB8 8A0E[5203]              	MOV	CL,[YEAR]
  6737 00000BBC 80E103                  	AND	CL,3
  6738                                  
  6739 00000BBF BE[140D]                	MOV	SI,YRTAB
  6740                                  
  6741 00000BC2 89C2                    	MOV	DX,AX
  6742 00000BC4 D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6743 00000BC6 E84700                  	CALL	DSUM		;Add up the days in each year
  6744 00000BC9 88F9                    	MOV	CL,BH		;Month of year
  6745                                  
  6746 00000BCB BE[1C0D]                	MOV	SI,MONTAB
  6747                                  
  6748 00000BCE 49                      	DEC	CX		;Account for months starting with one
  6749 00000BCF E83E00                  	CALL	DSUM		;Add up days in each month
  6750 00000BD2 88D9                    	MOV	CL,BL		;Day of month
  6751 00000BD4 49                      	DEC	CX		;Account for days starting with one
  6752 00000BD5 01CA                    	ADD	DX,CX		;Add in to day total
  6753 00000BD7 92                      	XCHG	AX,DX		;Get day count in AX
  6754 00000BD8 A3[5403]                	MOV	[DAYCNT],AX
  6755 00000BDB 56                      	PUSH	SI
  6756 00000BDC 53                      	PUSH	BX
  6757 00000BDD 50                      	PUSH	AX
  6758                                  
  6759                                  ; 07/02/2024
  6760                                  %if 0
  6761                                  	MOV	BX,TIMEBUF
  6762                                  	MOV	CX,6
  6763                                  	; 06/02/2024 ; *
  6764                                  	;;XOR	DX,DX
  6765                                  	;;MOV	AX,DX
  6766                                  	;; 06/01/2024
  6767                                  	;xor	ax,ax
  6768                                  	;cwd
  6769                                  	PUSH	BX
  6770                                  	;CALL	SETREAD
  6771                                  	; 06/02/2024 ; *
  6772                                  	call	SETREAD_X
  6773                                  %else
  6774 00000BDE E8FA39                  	call	SETREAD_XT
  6775                                  %endif
  6776                                  
  6777 00000BE1 1E                      	PUSH	DS
  6778 00000BE2 C536[2E00]              	LDS	SI,[BCLOCK]
  6779 00000BE6 E87B39                  	CALL	DEVIOCALL2	;Get correct date and time
  6780 00000BE9 1F                      	POP	DS
  6781 00000BEA 5B                      	POP	BX
  6782 00000BEB E82A3A                  	CALL	SETWRITE
  6783 00000BEE 8F06[B603]              	POP	WORD [TIMEBUF]
  6784 00000BF2 1E                      	PUSH	DS
  6785 00000BF3 C536[2E00]              	LDS	SI,[BCLOCK]
  6786 00000BF7 E86A39                  	CALL	DEVIOCALL2	;Set the date
  6787 00000BFA 1F                      	POP	DS
  6788 00000BFB 5B                      	POP	BX
  6789 00000BFC 5E                      	POP	SI
  6790                                  WKDAY:
  6791 00000BFD A1[5403]                	MOV	AX,[DAYCNT]
  6792 00000C00 31D2                    	XOR	DX,DX
  6793 00000C02 B90700                  	MOV	CX,7
  6794 00000C05 40                      	INC	AX
  6795 00000C06 40                      	INC	AX		;First day was Tuesday
  6796 00000C07 F7F1                    	DIV	CX		;Compute day of week
  6797 00000C09 8816[5603]              	MOV	[WEEKDAY],DL
  6798 00000C0D 30C0                    	XOR	AL,AL		;Flag OK
  6799                                  RET25:
  6800 00000C0F C3                      	RETN
  6801                                  
  6802                                  ;----------------------------------------------------------
  6803                                  
  6804                                  ;**	DSUM - Compute the sum of a string of bytes
  6805                                  ;
  6806                                  ;	ENTRY	(cx) = byte count
  6807                                  ;		(ds:si) = byte address
  6808                                  ;		(dx) = sum register, initialized by caller
  6809                                  ;	EXIT	(dx) updated
  6810                                  ;	USES	ax, cx, dx, si, flags
  6811                                  
  6812                                  DSUM:
  6813 00000C10 B400                    	MOV	AH,0
  6814 00000C12 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6815                                  	;JCXZ	RET25 ; 18/07/2018
  6816                                  DSUM1:
  6817 00000C14 AC                      	LODSB
  6818 00000C15 01C2                    	ADD	DX,AX
  6819 00000C17 E2FB                    	LOOP	DSUM1
  6820                                  DSUM9:
  6821 00000C19 C3                      	RETN
  6822                                  
  6823                                  ;============================================================================
  6824                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6825                                  ;============================================================================
  6826                                  ; 29/04/2019 - Retro DOS v4.0
  6827                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6828                                  
  6829                                  ; 12/03/2018 - Retro DOS v2.0 
  6830                                  
  6831                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6832                                  ;NAME	GETSET
  6833                                  
  6834                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6835                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6836                                  
  6837                                  ;USERNUM:
  6838                                  ;	DW	0			; 24 bit user number
  6839                                  ;       DB      0
  6840                                  ;;	IF      IBM
  6841                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6842                                  ;;	ELSE
  6843                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6844                                  ;;	ENDIF
  6845                                  
  6846                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6847                                  ;; 08/07/2018 - Retro DOS v3.0
  6848                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6849                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6850                                  
  6851                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6852                                  ;----------------------------------------------------------------------------
  6853                                  
  6854                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6855                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6856                                  
  6857                                  _$GET_VERSION:
  6858                                  
  6859                                  ; Inputs:
  6860                                  ;       None
  6861                                  ; Function:
  6862                                  ;       Return MS-DOS version number
  6863                                  ; Outputs:
  6864                                  ;       OEM number in BH
  6865                                  ;       User number in BL:CX (24 bits)
  6866                                  ;       Version number as AL.AH in binary
  6867                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6868                                  
  6869                                  ; MSDOS 6.0
  6870                                  ;
  6871                                  ;	Fake_Count is used to lie about the version numbers to support
  6872                                  ;	old binarys. See ms_table.asm for more info.
  6873                                  ;
  6874                                  ;		if input al = 00
  6875                                  ;		  (bh) = OEM number			
  6876                                  ;		else if input al = 01
  6877                                  ;		  (bh) = version flags
  6878                                  ;		 
  6879                                  ;		       	 bits 0-2 = DOS internal revision
  6880                                  ;		       	 bits 3-7 = DOS type flags
  6881                                  ;		              bit 3    = DOS is in ROM
  6882                                  ;		              bit 4    = DOS in in HMA
  6883                                  ;		              bits 5-7 = reserved
  6884                                  ;               M007 change - only bit 3 is now valid. Other bits
  6885                                  ;               are 0 when AL = 1
  6886                                  
  6887                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6888 00000C1A 36C50E[B203]            	lds	cx, [ss:USERNUM]
  6889 00000C1F 8CDB                    	mov	bx, ds
  6890                                  
  6891                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6892                                  	;--------------------------------------
  6893                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6894                                  
  6895 00000C21 16                              PUSH    SS
  6896 00000C22 1F                              POP     DS
  6897                                          
  6898                                  	; 06/01/2024
  6899                                  	;MOV	BX,[USERNUM+2]
  6900                                          ;MOV	CX,[USERNUM]
  6901                                  
  6902                                  	; 13/05/2019 - Retro DOS v4.0
  6903                                  
  6904                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6905                                  	;DOS flags
  6906                                  
  6907 00000C23 3C01                    	cmp	AL,1
  6908 00000C25 7502                    	jne	short Norm_Vers
  6909                                  
  6910                                  ;ifdef ROMDOS
  6911                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6912                                  ;				(DOSINROM = 8)
  6913                                  ;else
  6914 00000C27 30FF                            xor     bh,bh		; Otherwise return 0
  6915                                  ;endif				;M007 end
  6916                                  
  6917                                  Norm_Vers:
  6918                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6919                                  
  6920                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6921                                  	; 13/05/2019 - Retro DOS v4.0
  6922 00000C29 1E                      	push	ds		; Get the version number from the
  6923 00000C2A 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6924                                  	;mov	ax,[40h]
  6925 00000C2E A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6926                                  	; 07/12/2022
  6927 00000C31 1F                      	pop	ds
  6928 00000C32 E84CF8                  	call	Get_User_Stack
  6929                                  				; Put values for return registers
  6930                                  				; in the proper place on the user's	 
  6931                                  				; stack addressed by DS:SI
  6932                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6933                                  gdrvfspc_ret:
  6934                                          ;MOV	[SI+user_env.user_AX],AX
  6935 00000C35 8904                            MOV	[SI],AX
  6936                                          ;MOV	[SI+4],CX
  6937 00000C37 894C04                  	mov	[SI+user_env.user_CX],CX
  6938                                  set_user_bx:
  6939                                  	;MOV	[SI+2],BX
  6940 00000C3A 895C02                  	mov	[SI+user_env.user_BX],BX
  6941                                  
  6942 00000C3D C3                      	RETN
  6943                                  
  6944                                  ; 18/07/2018 - Retro DOS v3.0
  6945                                  
  6946                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6947                                  ;----------------------------------------------------------------------------
  6948                                  
  6949                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6950                                  ;
  6951                                  ;	ENTRY	none
  6952                                  ;	EXIT	(al) = value of VERIFY flag
  6953                                  ;	USES	all
  6954                                  
  6955                                  
  6956                                  _$GET_VERIFY_ON_WRITE:
  6957                                  
  6958                                  ;hkn; SS override
  6959 00000C3E 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6960 00000C42 C3                      	retn
  6961                                  
  6962                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6963                                  ;
  6964                                  ;	ENTRY	(al) = value of VERIFY flag
  6965                                  ;	EXIT	none
  6966                                  ;	USES	all
  6967                                  
  6968                                  _$SET_VERIFY_ON_WRITE:
  6969                                  
  6970 00000C43 2401                    	AND	AL,1
  6971                                  ;hkn; SS override
  6972 00000C45 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6973                                  RET27:	; 18/07/2018
  6974 00000C49 C3                      	retn
  6975                                  
  6976                                  ; 19/07/2018 - Retro DOS v3.0
  6977                                  
  6978                                  ;BREAK <$International - return country-dependent information>
  6979                                  ;----------------------------------------------------------------------------
  6980                                  ;
  6981                                  ; Procedure Name : $INTERNATIONAL
  6982                                  ;
  6983                                  ; Inputs:
  6984                                  ;	MOV	AH,International
  6985                                  ;	MOV	AL,country	(al = 0 => current country)
  6986                                  ;      [MOV	BX,country]
  6987                                  ;	LDS	DX,block
  6988                                  ;	INT	21
  6989                                  ; Function:
  6990                                  ;	give users an idea of what country the application is running
  6991                                  ; Outputs:
  6992                                  ;	IF DX != -1 on input (get country)
  6993                                  ;	  AL = 0 means return current country table.
  6994                                  ;	  0<AL<0FFH means return country table for country AL
  6995                                  ;	  AL = 0FF means return country table for country BX
  6996                                  ;	  No Carry:
  6997                                  ;	     Register BX will contain the 16-bit country code.
  6998                                  ;	     Register AL will contain the low 8 bits of the country code.
  6999                                  ;	     The block pointed to by DS:DX is filled in with the information
  7000                                  ;	     for the particular country.
  7001                                  ;		BYTE  Size of this table excluding this byte and the next
  7002                                  ;		BYTE  Country code represented by this table
  7003                                  ;			A sequence of n bytes, where n is the number specified
  7004                                  ;			by the first byte above and is not > internat_block_max,
  7005                                  ;			in the correct order for being returned by the
  7006                                  ;			INTERNATIONAL call as follows:
  7007                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  7008                                  ;		5 BYTE	Currency symbol null terminated
  7009                                  ;		2 BYTE	thousands separator null terminated
  7010                                  ;		2 BYTE	Decimal point null terminated
  7011                                  ;		2 BYTE	Date separator null terminated
  7012                                  ;		2 BYTE	Time separator null terminated
  7013                                  ;		1 BYTE	Bit field.  Currency format.
  7014                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  7015                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  7016                                  ;		1 BYTE	No. of significant decimal digits in currency
  7017                                  ;		1 BYTE	Bit field.  Time format.
  7018                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  7019                                  ;		DWORD	Call address of case conversion routine
  7020                                  ;		2 BYTE	Data list separator null terminated.
  7021                                  ;	  Carry:
  7022                                  ;	     Register AX has the error code.
  7023                                  ;	IF DX = -1 on input (set current country)
  7024                                  ;	  AL = 0 is an error
  7025                                  ;	  0<AL<0FFH means set current country to country AL
  7026                                  ;	  AL = 0FF means set current country to country BX
  7027                                  ;	  No Carry:
  7028                                  ;	    Current country SET
  7029                                  ;	    Register AL will contain the low 8 bits of the country code.
  7030                                  ;	  Carry:
  7031                                  ;	     Register AX has the error code.
  7032                                  ;-----------------------------------------------------------------------------
  7033                                  
  7034                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  7035                                  
  7036                                  ; 13/05/2019 - Retro DOS v4.0
  7037                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  7038                                  
  7039                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7040                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  7041                                  
  7042                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  7043                                  	 
  7044 00000C4A 3CFF                    	CMP	AL,0FFH
  7045 00000C4C 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  7046 00000C4E 88C3                    	MOV	BL,AL			; Put AL country code in BX
  7047 00000C50 30FF                    	XOR	BH,BH
  7048                                  BX_HAS_CODE:
  7049 00000C52 1E                      	PUSH	DS
  7050 00000C53 07                      	POP	ES
  7051 00000C54 52                      	PUSH	DX
  7052 00000C55 5F                      	POP	DI			; User buffer to ES:DI
  7053                                  
  7054                                  ;hkn; SS is DOSDATA
  7055                                  ;	context DS
  7056                                  
  7057 00000C56 16                      	push	ss
  7058 00000C57 1F                      	pop	ds
  7059                                  
  7060 00000C58 83FFFF                  	CMP	DI,-1
  7061 00000C5B 745D                    	JZ	short international_set
  7062 00000C5D 09DB                    	OR	BX,BX
  7063 00000C5F 7505                    	JNZ	short international_find
  7064                                  
  7065                                  ;hkn; country_cdpg is in DOSDATA segment.
  7066 00000C61 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7067                                  
  7068 00000C64 EB39                    	JMP	SHORT international_copy
  7069                                  
  7070                                  international_find:
  7071                                  	;MOV	BP,0			 ; flag it for GetCntry only
  7072                                  	; 06/01/2024
  7073 00000C66 31ED                    	xor	bp,bp ; 0
  7074 00000C68 E80A00                  	CALL	international_get
  7075 00000C6B 7255                    	JC	short errtn
  7076                                  	;CMP	BX,0			 ; nlsfunc finished it ?
  7077                                  	; 06/01/2024
  7078 00000C6D 09DB                    	or	bx,bx
  7079 00000C6F 752E                    	JNZ	SHORT international_copy ; no, copy by myself
  7080 00000C71 89D3                    	MOV	BX,DX			 ; put country back
  7081 00000C73 EB3A                    	JMP	SHORT international_ok3
  7082                                  
  7083                                  international_get:
  7084 00000C75 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7085                                  
  7086                                  ;hkn; country_cdpg is in DOSDATA segment.
  7087                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7088                                  
  7089                                  	; MSDOS 3.3
  7090                                  	;;cmp	bx,[SI+63h]
  7091                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  7092                                  	;jz	short RET27
  7093                                  
  7094                                  	; 13/05/2019 - Retro DOS v4.0
  7095                                  
  7096                                  	; MSDOS 6.0
  7097                                  	;cmp	bx,[ss:si+68h]
  7098 00000C78 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7099 00000C7C 74CB                    	jz	short RET27			; return if equal
  7100                                  
  7101 00000C7E 89DA                    	MOV	DX,BX
  7102 00000C80 31DB                    	XOR	BX,BX			; bx = 0, default code page
  7103                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7104 00000C82 B80014                  	mov	ax,1400h
  7105 00000C85 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7106                                  			; Return: AL = 00h not installed, OK to install
  7107                                  			; 01h not installed, not OK
  7108                                  			; FFh installed
  7109 00000C87 3CFF                    	CMP	AL,0FFH
  7110 00000C89 7510                    	JNZ	short interr		; not in memory
  7111                                  	
  7112                                  	; 06/01/2024
  7113 00000C8B B80314                  	mov	ax,1403h		; set country info
  7114                                  
  7115                                  	;cmp	bp,0
  7116 00000C8E 09ED                    	or	bp,bp			; GetCntry ?
  7117 00000C90 7501                    	JNZ	short stcdpg
  7118                                  	
  7119                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  7120                                  	;mov	ax,1404h
  7121 00000C92 40                      	inc	ax	; AX = 1404h ; get country info
  7122                                  
  7123                                  	; 06/01/2024
  7124                                  	;int	2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7125                                  	;		; BX = code page, DX = country code,
  7126                                  	;		; DS:SI -> internal code page structure
  7127                                  	;		; ES:DI -> user buffer
  7128                                  	;		; Return: AL = status
  7129                                  	;
  7130                                  	;JMP	short chkok
  7131                                  	
  7132                                  	;nop
  7133                                  
  7134                                  stcdpg:
  7135                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  7136                                  	; 06/01/2024
  7137                                  	;mov     ax,1403h
  7138                                  gscdpg:
  7139 00000C93 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7140                                  			; DS:SI -> internal code page structure
  7141                                  			; BX = code page, DX = country code
  7142                                  			; Return: AL = status
  7143                                  chkok:
  7144 00000C95 08C0                    	or	al,al			; success ?
  7145                                  	;retz				; yes
  7146 00000C97 74B0                    	jz	short RET27
  7147                                  
  7148                                  setcarry:
  7149 00000C99 F9                      	STC				; set carry
  7150 00000C9A C3                      	retn
  7151                                  interr:
  7152 00000C9B B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7153 00000C9D EBFA                    	JMP	short setcarry
  7154                                  
  7155                                  international_copy:
  7156                                  
  7157                                  ;hkn; country_cdpg is in DOSDATA segment.
  7158                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7159                                  
  7160                                  	; MSDOS 3.3
  7161                                  	;;mov	bx,[SI+63h]
  7162                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7163                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7164                                  
  7165                                  	; 13/05/2019 - Retro DOS v4.0
  7166                                  
  7167                                  	; MSDOS 6.0
  7168                                  	;mov	bx,[ss:si+68h]
  7169 00000C9F 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7170 00000CA3 BE[9612]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7171                                  
  7172                                  	;mov	cx,24
  7173 00000CA6 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7174                                  
  7175                                  	; MSDOS 6.0
  7176                                  
  7177                                  ;hkn;	must set up DS to SS so that international info can be copied
  7178                                  	
  7179 00000CA9 1E                      	push	ds
  7180                                  
  7181 00000CAA 16                      	push	ss			; cs -> ss
  7182 00000CAB 1F                      	pop	ds
  7183                                  
  7184 00000CAC F3A4                    	REP	MOVSB			; copy country info
  7185                                  
  7186                                  	; MSDOS 6.0
  7187                                  
  7188 00000CAE 1F                      	pop	ds	;hkn;	restore ds
  7189                                  
  7190                                  international_ok3:
  7191 00000CAF E8CFF7                  	call	Get_User_Stack
  7192                                  ;ASSUME	DS:NOTHING
  7193                                  	;MOV	[SI+2],BX
  7194 00000CB2 895C02                  	MOV	[SI+user_env.user_BX],BX
  7195                                  international_ok:
  7196 00000CB5 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7197                                  ;SYS_RET_OK_jmp:
  7198                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7199                                  nono:	; 15/12/2022
  7200                                  SYS_RET_OK_jmp:
  7201 00000CB7 E977F9                  	jmp	SYS_RET_OK
  7202                                  
  7203                                  international_set:
  7204                                  
  7205                                  ;hkn; ASSUME	DS:DOSGROUP
  7206                                  ;ASSUME	DS:DOSDATA
  7207                                  
  7208 00000CBA BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7209 00000CBD E8B5FF                  	CALL	international_get
  7210 00000CC0 73F3                    	JNC	short international_ok
  7211                                  errtn:
  7212 00000CC2 3CFF                    	CMP	AL,0FFH
  7213 00000CC4 7403                    	JZ	short errtn2
  7214                                  errtn1:
  7215 00000CC6 E971F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7216                                  errtn2:
  7217                                  	;error	error_invalid_function	; NLSFUNC not existent
  7218                                  
  7219                                  	;mov	al,1
  7220 00000CC9 B001                    	mov	al,error_invalid_function 
  7221 00000CCB EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7222                                  ;errtn3:
  7223                                  ;	jmp	SYS_RET_ERR
  7224                                  
  7225                                  ;EndProc $INTERNATIONAL
  7226                                  
  7227                                  ; 19/07/2018
  7228                                  
  7229                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7230                                  
  7231                                  ;----------------------------------------------------------------------------
  7232                                  ;
  7233                                  ; Procedure Name : $GetExtCntry
  7234                                  ;
  7235                                  ; Inputs:
  7236                                  ;	if AL >= 20H
  7237                                  ;	  AL= 20H    capitalize single char, DL= char
  7238                                  ;	      21H    capitalize string, CX= string length
  7239                                  ;	      22H    capitalize ASCIIZ string
  7240                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7241                                  ;	      80H bit 0 = use normal upper case table
  7242                                  ;		      1 = use file upper case table
  7243                                  ;	   DS:DX points to string
  7244                                  ;
  7245                                  ;	else
  7246                                  ;
  7247                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7248                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7249                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7250                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7251                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7252                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7253                                  ;	INT	21
  7254                                  ; Function:
  7255                                  ;	give users extended country dependent information
  7256                                  ;	or capitalize chars
  7257                                  ; Outputs:
  7258                                  ;	  No Carry:
  7259                                  ;	     extended country info is succesfully returned
  7260                                  ;	  Carry:
  7261                                  ;	     Register AX has the error code.
  7262                                  ;	     AX=0, NO	 for YES/NO CHECK
  7263                                  ;		1, YES
  7264                                  ;----------------------------------------------------------------------------
  7265                                  
  7266                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7267                                  
  7268                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7269                                  
  7270                                  	; MSDOS 6.0
  7271                                  _$GetExtCntry:
  7272 00000CCD 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7273 00000CCF 7269                    	JB	short notcap
  7274                                  capcap: 				;
  7275 00000CD1 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7276 00000CD3 7505                    	JNZ	short fileupper		; file upper case
  7277                                  
  7278                                  ;hkn; UCASE_TAB in DOSDATA
  7279 00000CD5 BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7280 00000CD8 EB05                    	JMP	SHORT capit
  7281                                  
  7282                                  fileupper:
  7283                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7284                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7285                                  	; AL >= 80h
  7286 00000CDA 247F                    	and	al,7Fh 
  7287                                  
  7288                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7289 00000CDC BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7290                                  capit:					;
  7291 00000CDF 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7292 00000CE1 750D                    	JNZ	short chkyes		; no
  7293 00000CE3 88D0                    	MOV	AL,DL			; set up AL
  7294 00000CE5 E86E42                  	call	GETLET3 		; upper case it
  7295 00000CE8 E896F7                  	call	Get_User_Stack		; get user stack
  7296                                  	;mov	[si+6],al
  7297 00000CEB 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7298 00000CEE EBC7                    	JMP	SHORT nono		; done
  7299                                  chkyes: 				;
  7300 00000CF0 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7301 00000CF2 7522                    	JNZ	short capstring		; no
  7302                                  
  7303 00000CF4 31C0                    	XOR	AX,AX			; presume NO
  7304                                  		      
  7305                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7306                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7307                                  
  7308                                  	; 06/08/2018 - Retro DOS v3.0
  7309                                  	; 13/05/2019 - Retro DOS v4.0
  7310                                  	;cmp	dl,'Y'
  7311 00000CF6 2E3A16[0F0A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7312 00000CFB 7416                    	JZ	short yesyes		; yes
  7313                                  	;cmp	dl,'y'
  7314 00000CFD 2E3A16[110A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7315 00000D02 740F                    	JZ	short yesyes		; yes
  7316                                  	;cmp	dl,'N'
  7317 00000D04 2E3A16[100A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7318 00000D09 74AC                    	JZ	short nono		; no
  7319                                  	;cmp	dl,'n'
  7320 00000D0B 2E3A16[120A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7321 00000D10 74A5                    	JZ	short nono		; no
  7322                                  ;dbcs_char:				;
  7323 00000D12 40                      	INC	AX			; not YES or NO
  7324                                  yesyes: 				;
  7325 00000D13 40                      	INC	AX			; return 1
  7326                                  	; 15/12/2022
  7327                                  ;nono:	
  7328 00000D14 EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7329                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7330                                  	;jmp	SYS_RET_OK		; done
  7331                                  
  7332                                  capstring:				;
  7333 00000D16 89D6                    	MOV	SI,DX			; si=dx
  7334 00000D18 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7335 00000D1A 750D                    	JNZ	short capascii		; no
  7336                                  	;OR	CX,CX			; check count 0
  7337                                  	;JZ	short nono		; yes finished
  7338                                  	; 06/01/2024
  7339 00000D1C E399                    	jcxz	nono
  7340                                  concap: 				;
  7341 00000D1E AC                      	LODSB				; get char
  7342 00000D1F E83442                  	call	GETLET3 		; upper case it
  7343 00000D22 8844FF                  	MOV	byte [SI-1],AL		; store back
  7344                                  ;next99: 				;
  7345 00000D25 E2F7                    	LOOP	concap			; continue
  7346 00000D27 EB8E                    	JMP	short nono		; done
  7347                                  capascii:				;
  7348 00000D29 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7349 00000D2B 7545                    	JNZ	short capinval		; no
  7350                                  concap2:				;
  7351 00000D2D AC                      	LODSB				; get char
  7352 00000D2E 08C0                    	or	al,al			; end of string ?
  7353 00000D30 7485                    	JZ	short nono		; yes
  7354 00000D32 E82142                  	call	GETLET3 		; upper case it
  7355 00000D35 8844FF                  	MOV	[SI-1],AL		; store back
  7356 00000D38 EBF3                    	JMP	short concap2 		; continue
  7357                                  
  7358                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7359                                  
  7360                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7361                                  ; _$GetExtCntry:
  7362                                  
  7363                                  notcap:
  7364 00000D3A 83F905                  	CMP	CX,5			; minimum size is 5
  7365 00000D3D 7277                    	jb	short sizeerror
  7366                                  
  7367                                  GEC_CONT:
  7368                                  ;hkn; SS is DOSDATA
  7369                                  	;context DS
  7370                                  
  7371 00000D3F 16                      	push	ss
  7372                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7373 00000D40 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7374                                  	
  7375                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7376 00000D41 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7377                                  
  7378 00000D44 83FAFF                  	CMP	DX,-1			; active country ?
  7379 00000D47 7503                    	JNZ	short GETCDPG 		; no
  7380                                  
  7381                                  ;hkn; use DS override to accesss country_cdpg fields
  7382                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7383                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7384 00000D49 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7385                                  					; get active country id;smr;use DS
  7386                                  GETCDPG:
  7387 00000D4C 83FBFF                  	CMP	BX,-1			; active code page?
  7388 00000D4F 7503                    	JNZ	short CHKAGAIN		; no, check again
  7389                                  
  7390                                  ;hkn; use DS override to accesss country_cdpg fields
  7391                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7392                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7393 00000D51 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7394                                  					; get active code page id;smr;Use DS
  7395                                  CHKAGAIN:
  7396                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7397 00000D54 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7398                                  					; same as active country id?;smr;use DS
  7399 00000D57 7550                    	JNZ	short CHKNLS		; no
  7400                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7401 00000D59 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7402                                  					; same as active code pg id?;smr;use DS
  7403 00000D5C 754B                    	JNZ	short CHKNLS		; no
  7404                                  CHKTYPE:
  7405                                  	;mov	bx,[si+48h]
  7406 00000D5E 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7407                                  					; bx = sys code page id;smr;use DS
  7408 00000D61 51                      	PUSH	CX			; save cx
  7409                                  	;mov	cx,[si+4Ah]
  7410 00000D62 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7411                                  	;mov	si,COUNTRY_CDPG+76
  7412 00000D65 BE[7612]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7413                                  NXTENTRY:
  7414 00000D68 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7415 00000D6A 740B                    	JZ	short FOUNDIT
  7416 00000D6C 83C605                  	ADD	SI,5			; next entry
  7417 00000D6F E2F7                    	LOOP	NXTENTRY
  7418 00000D71 59                      	POP	CX
  7419                                  capinval:
  7420                                  	;error	error_invalid_function	; info type not found
  7421                                  	;mov	al,1
  7422 00000D72 B001                    	mov	al,error_invalid_function
  7423                                  ;SYS_RET_ERR_jmp:
  7424                                  	;jmp	SYS_RET_ERR
  7425                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7426                                  SYS_RET_ERR_jmp:
  7427 00000D74 E9C3F8                  	jmp	SYS_RET_ERR	
  7428                                  
  7429                                  FOUNDIT:
  7430 00000D77 A4                      	MOVSB				; move info id byte
  7431 00000D78 59                      	POP	CX			; restore char count
  7432                                  	;cmp	al,1
  7433 00000D79 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7434 00000D7B 7415                    	JZ	short setsize
  7435 00000D7D B90400                  	MOV	CX,4			; 4 bytes will be moved
  7436 00000D80 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7437                                  OK_RETN:
  7438 00000D83 F3A4                    	REP	MOVSB			; copy info
  7439 00000D85 89C1                    	MOV	CX,AX			; CX = actual length returned
  7440 00000D87 89D8                    	MOV	AX,BX			; return sys code page in ax
  7441                                  GETDONE:
  7442 00000D89 E8F5F6                  	call	Get_User_Stack		; return actual length to user's CX
  7443                                  	;mov	[si+4],cx 
  7444 00000D8C 894C04                  	MOV	[SI+user_env.user_CX],CX
  7445                                  	;jmp	SYS_RET_OK
  7446                                  	; 15/12/2022
  7447                                  	; 25/06/2019
  7448 00000D8F E9A2F8                  	jmp	SYS_RET_OK_clc
  7449                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7450                                  	; 15/12/2022
  7451                                  ;nono_jmp:
  7452                                  	;jmp	short nono
  7453                                  setsize:
  7454 00000D92 83E903                  	SUB	CX,3			; size after length field
  7455 00000D95 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7456 00000D97 7302                    	JAE	short setsize2		; no
  7457 00000D99 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7458                                  setsize2:
  7459 00000D9B 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7460                                  	;ADD	DI,2			; update index
  7461                                  	;ADD	SI,2
  7462                                  	; 06/01/2024
  7463 00000D9E 47                      	inc	di
  7464 00000D9F 47                      	inc	di
  7465 00000DA0 46                      	inc	si
  7466 00000DA1 46                      	inc	si
  7467 00000DA2 89C8                    	MOV	AX,CX
  7468 00000DA4 83C003                  	ADD	AX,3			; AX has the actual length
  7469 00000DA7 EBDA                    	JMP	short OK_RETN 		; go move it
  7470                                  CHKNLS:
  7471 00000DA9 30E4                    	XOR	AH,AH
  7472                                  	;PUSH	AX			; save info type
  7473                                  	;POP	BP			; bp = info type
  7474                                  	; 06/01/2024
  7475 00000DAB 89C5                    	mov	bp,ax
  7476                                  	
  7477                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7478 00000DAD B80014                  	mov     ax,1400h
  7479 00000DB0 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7480                                  			; Return: AL = 00h not installed, OK to install
  7481                                  			; 01h not installed, not OK
  7482                                  			; FFh installed
  7483 00000DB2 3CFF                    	CMP	AL,0FFH
  7484 00000DB4 7404                    	JZ	short NLSNXT		; in memory
  7485                                  
  7486                                  sizeerror:
  7487                                  	;error	error_invalid_function
  7488                                  	;mov	al,1
  7489 00000DB6 B001                    	mov	al,error_invalid_function
  7490                                  	;jmp	SYS_RET_ERR
  7491                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7492                                  sys_ret_err_jmp2:
  7493 00000DB8 EBBA                    	jmp	short SYS_RET_ERR_jmp
  7494                                  
  7495                                  NLSNXT: 
  7496                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7497 00000DBA B80214                  	mov     ax,1402h
  7498 00000DBD CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7499                                  			; BP = subfunction, BX = code page
  7500                                  			; DX = country code, DS:SI -> internal code page structure
  7501                                  			; ES:DI -> user buffer, CX = size of user buffer
  7502                                  			; Return: AL = status
  7503                                  			; 00h successful
  7504                                  			; else DOS error code
  7505                                  
  7506 00000DBF 3C00                    	CMP	AL,0			; success ?
  7507 00000DC1 7505                    	JNZ	short NLSERROR
  7508                                  	;mov	ax,[si+48h] ; 13/05/2019
  7509 00000DC3 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]
  7510                                  			; ax = sys code page id;smr;use ds;
  7511                                  			;BUGBUG;check whether DS is OK after the above calls
  7512 00000DC6 EBC1                    	JMP	short GETDONE
  7513                                  seterr:
  7514                                  	; 15/12/2022
  7515                                  NLSERROR:
  7516                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7517                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7518                                  	;jmp	short sys_ret_err_jmp2
  7519                                  	; 15/12/2022
  7520 00000DC8 EBAA                    	jmp	short SYS_RET_ERR_jmp
  7521                                  
  7522                                  ;EndProc $GetExtCntry
  7523                                  
  7524                                  ; 13/05/2019 - Retro DOS v4.0
  7525                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7526                                  
  7527                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7528                                  ;----------------------------------------------------------------------------
  7529                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7530                                  ;
  7531                                  ;   System call format:
  7532                                  ;
  7533                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7534                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7535                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7536                                  ;	INT	21
  7537                                  ;
  7538                                  ;	ENTRY	(al) = n
  7539                                  ;		(bx) = code page
  7540                                  ;	EXIT	'C' clear
  7541                                  ;		  global code page is set	(set global code page)
  7542                                  ;		  (BX) = active code page id	(get global code page)
  7543                                  ;		  (DX) = system code page id	(get global code page)
  7544                                  ;		'C' set
  7545                                  ;		  (AX) = error code
  7546                                  
  7547                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7548                                  
  7549                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7550                                  	; DOSCODE:4BC9h
  7551                                  
  7552                                  _$GetSetCdPg:
  7553                                  
  7554                                  ;hkn; SS is DOSDATA
  7555                                  	;context DS
  7556                                  
  7557 00000DCA 16                      	push	ss
  7558 00000DCB 1F                      	pop	ds
  7559                                  
  7560                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7561 00000DCC BE[2A12]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7562                                  
  7563 00000DCF 3C01                    	CMP	AL,1		       ; get global code page
  7564 00000DD1 7512                    	JNZ	short setglpg 	       ; set global code page
  7565                                  	
  7566                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7567                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7568 00000DD3 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7569                                  					; get active code page id;smr;use ds
  7570                                  	;mov	dx,[si+48h]
  7571 00000DD6 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7572                                  				  	; get sys code page id;smr;use ds
  7573 00000DD9 E8A5F6                  	call	Get_User_Stack
  7574                                  ;ASSUME DS:NOTHING
  7575                                  	;;mov	[si+2],bx
  7576                                  	;MOV	[SI+user_env.user_BX],BX ; update returned bx
  7577                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7578 00000DDC E85BFE                  	call    set_user_bx	; MOV [SI+user_env.user_BX],BX 
  7579                                  	;mov	[si+6],dx
  7580 00000DDF 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7581                                  OK_RETURN:
  7582                                  	; 15/12/2022
  7583                                  	;transfer SYS_RET_OK
  7584 00000DE2 E94CF8                  	jmp	SYS_RET_OK
  7585                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7586                                  	;jmp	short nono_jmp
  7587                                  
  7588                                  ;hkn; ASSUME DS:DOSGROUP
  7589                                  ;ASSUME	DS:DOSDATA
  7590                                  
  7591                                  setglpg:
  7592 00000DE5 3C02                    	CMP	AL,2
  7593 00000DE7 752F                    	JNZ	short nomem
  7594                                  	
  7595                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7596                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7597 00000DE9 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7598                                  	
  7599                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7600 00000DEC B80014                  	mov     ax,1400h
  7601 00000DEF CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7602                                  			; Return: AL = 00h not installed, OK to install
  7603                                  			; 01h not installed, not OK
  7604                                  			; FFh installed
  7605 00000DF1 3CFF                    	CMP	AL,0FFH
  7606 00000DF3 7523                    	JNZ	short nomem		; not in memory
  7607                                  
  7608                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7609 00000DF5 B80114                  	mov     ax,1401h
  7610 00000DF8 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7611                                  			; DS:SI -> internal code page structure
  7612                                  			; BX = new code page, DX = country code???
  7613                                  			; Return: AL = status
  7614                                  			; 00h successful
  7615                                  			; else DOS error code
  7616                                  	;cmp	al,0
  7617 00000DFA 08C0                    	or	al,al			; success ?
  7618 00000DFC 74E4                    	JZ	short OK_RETURN		; yes
  7619                                  
  7620 00000DFE 3C41                    	CMP	AL,65			; set device code page failed
  7621 00000E00 75C6                    	JNZ	short seterr
  7622                                  	;MOV	AX,65
  7623                                  	; 06/01/2024
  7624 00000E02 98                      	cbw
  7625 00000E03 A3[2403]                	MOV	[EXTERR],AX
  7626                                  	;mov	byte [EXTERR_ACTION],6
  7627                                  	;mov	byte [EXTERR_CLASS],5
  7628                                  	;mov	byte [EXTERR_LOCUS],4
  7629 00000E06 C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7630 00000E0B C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7631 00000E10 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7632                                  	;transfer From_GetSet
  7633 00000E15 E92AF8                  	jmp	From_GetSet
  7634                                  
  7635                                  	; 15/12/2022
  7636                                  ;seterr:
  7637                                  	;;;transfer SYS_RET_ERR
  7638                                  	;;jmp	SYS_RET_ERR
  7639                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7640                                  	;jmp	short NLSERROR
  7641                                  
  7642                                  nomem:
  7643                                  	;error	error_invalid_function	; function not defined
  7644                                  	;mov	al,1
  7645 00000E18 B001                    	mov	al,error_invalid_function
  7646 00000E1A EBAC                    	jmp	short seterr
  7647                                  
  7648                                  ;EndProc $GetSetCdPg
  7649                                  
  7650                                  ; 09/01/2024
  7651                                  ; 13/05/2019 - Retro DOS v4.0
  7652                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7653                                  
  7654                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7655                                  ;----------------------------------------------------------------------------
  7656                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7657                                  ;
  7658                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7659                                  ;		drive.
  7660                                  ;
  7661                                  ;	This call returns the same info in the same registers (except for the
  7662                                  ;	FAT pointer) as the old FAT pointer calls
  7663                                  ;
  7664                                  ;	ENTRY	DL = Drive number
  7665                                  ;	EXIT	AX = Sectors per allocation unit
  7666                                  ;		   = -1 if bad drive specified
  7667                                  ;		On User Stack
  7668                                  ;		    BX = Number of free allocation units
  7669                                  ;		    DX = Total Number of allocation units on disk
  7670                                  ;		    CX = Sector size
  7671                                  
  7672                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7673                                  
  7674                                  _$GET_DRIVE_FREESPACE:
  7675                                  
  7676                                  ;hkn; SS is DOSDATA
  7677                                  	;context DS
  7678 00000E1C 16                      	push	ss
  7679 00000E1D 1F                      	pop	ds
  7680                                  
  7681 00000E1E 88D0                    	MOV	AL,DL
  7682                                  	;invoke	GetThisDrv		; Get drive
  7683 00000E20 E82D5B                  	call	GETTHISDRV
  7684                                  SET_AX_RET:
  7685 00000E23 7212                    	JC	short BADFDRV
  7686                                  	;invoke	DISK_INFO
  7687 00000E25 E8321E                  	call	DISK_INFO
  7688 00000E28 87D3                    	XCHG	DX,BX
  7689                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7690                                  	; 06/01/2024
  7691 00000E2A 720B                    	jc	short BADFDRV
  7692 00000E2C 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7693                                  DoSt:
  7694 00000E2E E850F6                  	call	Get_User_Stack
  7695                                  ;ASSUME	DS:NOTHING
  7696                                  	;mov	[si+6],dx
  7697                                  	;;mov	[si+4],cx
  7698                                  	;;mov	[si+2],bx
  7699                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7700 00000E31 895406                  	MOV	[SI+user_env.user_DX],DX ; total clusters
  7701                                  	;MOV	[SI+user_env.user_CX],CX
  7702                                  	;MOV	[SI+user_env.user_BX],BX
  7703                                  	;;MOV	[SI+user_env.user_AX],AX
  7704                                  	;mov	[si],ax
  7705                                  	;;return
  7706                                  	;retn
  7707                                  	; 09/01/2024
  7708 00000E34 E9FEFD                  	jmp     gdrvfspc_ret    ; ax = sectors per cluster (modified)
  7709                                  
  7710                                  BADFDRV:
  7711                                  	; MSDOS 3.3
  7712                                  	;;mov	al,0Fh
  7713                                  	;mov	al,error_invalid_drive	; Assume error
  7714                                  
  7715                                  	; 13/05/2019 - Retro DOS v4.0
  7716                                  
  7717                                  	; MSDOS 6.0 & MSDOS 3.3
  7718                                  	;invoke	FCB_RET_ERR
  7719 00000E37 E816F8                  	call	FCB_RET_ERR
  7720                                  	
  7721 00000E3A B8FFFF                  	MOV	AX,-1
  7722 00000E3D EBEF                    	JMP	short DoSt
  7723                                  
  7724                                  ;EndProc $GET_DRIVE_FREESPACE
  7725                                  
  7726                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7727                                  ;----------------------------------------------------------------------------
  7728                                  ;**	$Get_DMA - Get Disk Transfer Address
  7729                                  ;
  7730                                  ;	ENTRY	none
  7731                                  ;	EXIT	ES:BX is current transfer address
  7732                                  ;	USES	all
  7733                                  
  7734                                  	; 09/01/2024
  7735                                  _$GET_DMA:
  7736 00000E3F 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7737 00000E44 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7738 00000E49 E835F6                  	call	Get_User_Stack
  7739                                  	;mov	[si+2],bx
  7740                                  	;mov	[si+10h],cx
  7741                                  	; 09/01/2024
  7742                                  	;MOV	[SI+user_env.user_BX],BX
  7743 00000E4C 894C10                  	MOV	[SI+user_env.user_ES],CX
  7744                                  	;retn
  7745                                  	; 09/01/2024
  7746 00000E4F E9E8FD                  	jmp	set_user_bx ; (PCDOS 7.1 IBMDOS.COM)
  7747                                  
  7748                                  ;**	$Set_DMA - Set Disk Transfer Address
  7749                                  ;----------------------------------------------------------------------------
  7750                                  ;	ENTRY	DS:DX is current transfer address
  7751                                  ;	EXIT	none
  7752                                  ;	USES	all
  7753                                  
  7754                                  _$SET_DMA:
  7755 00000E52 368916[2C03]            	MOV	[SS:DMAADD],DX
  7756 00000E57 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7757 00000E5C C3                      	retn
  7758                                  
  7759                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7760                                  ;------------------------------------------------------------------------------
  7761                                  
  7762                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7763                                  ;-----------------------------------------------------
  7764                                  ;	ENTRY	none
  7765                                  ;	EXIT	(AL) = drive number
  7766                                  ;	USES	all
  7767                                  
  7768                                  _$GET_DEFAULT_DRIVE:
  7769 00000E5D 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7770 00000E61 C3                      	retn
  7771                                  
  7772                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7773                                  ;-----------------------------------------------------
  7774                                  ;	ENTRY	(DL) = Drive number for new default drive
  7775                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7776                                  
  7777                                  _$SET_DEFAULT_DRIVE:
  7778 00000E62 88D0                    	MOV	AL,DL
  7779 00000E64 FEC0                    	INC	AL			; A=1, B=2...
  7780 00000E66 E8CB5A                  	call	GetVisDrv		; see if visible drive
  7781 00000E69 7204                    	JC	short SETRET		; errors do not set
  7782 00000E6B 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7783                                  
  7784                                  SETRET:
  7785 00000E6F 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7786 00000E73 C3                      	retn
  7787                                  
  7788                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7789                                  ;----------------------------------------------------------------------------
  7790                                  
  7791                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7792                                  ;---------------------------------------------------
  7793                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7794                                  ;	contents of an interrupt vector.
  7795                                  ;
  7796                                  ;	ENTRY	(AL) = interrupt number
  7797                                  ;	EXIT	(ES:BX) = current interrupt vector
  7798                                  
  7799                                  _$GET_INTERRUPT_VECTOR:
  7800 00000E74 E82E00                  	CALL	RECSET
  7801 00000E77 26C41F                  	LES	BX,[ES:BX]
  7802 00000E7A E804F6                  	call	Get_User_Stack
  7803                                  set_user_es_bx:
  7804                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7805                                  	;;mov	[si+2],bx
  7806                                  	;mov	[si+10h],es
  7807                                  	;MOV	[SI+user_env.user_BX],BX
  7808 00000E7D 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7809                                  	;retn
  7810 00000E80 E9B7FD                  	jmp	set_user_bx
  7811                                  
  7812                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7813                                  ;---------------------------------------------------
  7814                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7815                                  ;	contents of an interrupt vector.
  7816                                  ;
  7817                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7818                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7819                                  ;	for explanation.
  7820                                  ;
  7821                                  ;	ENTRY	(AL) = interrupt number
  7822                                  ;		(ds:dx) = desired new vector value
  7823                                  ;	EXIT	none
  7824                                  ;	USES	all
  7825                                  
  7826                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7827                                  ; 13/05/2019 - Retro DOS v4.0
  7828                                  
  7829                                  _$SET_INTERRUPT_VECTOR:
  7830 00000E83 E81F00                  	CALL	RECSET
  7831 00000E86 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7832 00000E87 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7833 00000E8A 268C5F02                	MOV	[ES:BX+2],DS
  7834 00000E8E FB                      	STI
  7835                                  					; M004, M068 - Start
  7836                                  	; MSDOS 6.0
  7837 00000E8F 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7838                                  					; Q: was the previous call an int 21h
  7839                                  					;    exec call
  7840                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7841                                  	;jnz	short siv_1		; Y: go set count
  7842                                  	;retn				; N: return
  7843                                  	; 15/12/2022
  7844 00000E95 740D                    	jz	short siv_2
  7845                                  siv_1:	
  7846 00000E97 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7847 00000E9D 7505                    	jnz	short siv_2		 ; N: done
  7848                                  	; 20/09/2023
  7849 00000E9F 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
  7850                                  	;mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos
  7851                                  					 ; dispatcher to turn A20 Off before
  7852                                  					 ; returning to user.
  7853                                  siv_2:
  7854                                  	; 07/12/2022
  7855 00000EA4 C3                      	retn				; M004, M068 - End
  7856                                  	
  7857                                  RECSET:
  7858 00000EA5 31DB                    	XOR	BX,BX
  7859 00000EA7 8EC3                    	MOV	ES,BX
  7860 00000EA9 88C3                    	MOV	BL,AL
  7861 00000EAB D1E3                    	SHL	BX,1
  7862 00000EAD D1E3                    	SHL	BX,1
  7863 00000EAF C3                      	retn
  7864                                  
  7865                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7866                                  ;-------------------------------------------------------------------------------------
  7867                                  
  7868                                  ;**	$Char_Oper - Manipulate Switch Character
  7869                                  ;
  7870                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7871                                  ;
  7872                                  ;	ENTRY	AL = function:
  7873                                  ;		    0 - read switch char
  7874                                  ;		    1 - set switch char (char in DL)
  7875                                  ;		    2 - read device availability
  7876                                  ;			Always returns available
  7877                                  ;		    3 - set device availability
  7878                                  ;			No longer supported (NOP)
  7879                                  ;	EXIT	(al) = 0xff iff error
  7880                                  ;		(al) != 0xff if ok
  7881                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7882                                  ;	USES	AL, DL
  7883                                  ;
  7884                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7885                                  ;		The character / is always returned for subfunction 0,
  7886                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7887                                  
  7888                                  ; 13/05/2019 - Retro DOS v4.0
  7889                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7890                                  
  7891                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7892                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7893                                  
  7894                                  _$CHAR_OPER:
  7895                                  	; MSDOS 6.0
  7896 00000EB0 08C0                    	or	al,al				; get switch?
  7897 00000EB2 B22F                    	mov	dl,'/'				; assume yes
  7898 00000EB4 7407                    	jz	short chop_1			; jump if yes
  7899 00000EB6 3C02                    	cmp	al,2				; check device availability?
  7900 00000EB8 B2FF                    	mov	dl,-1				; assume yes
  7901 00000EBA 7401                    	jz	short chop_1			; jump if yes
  7902 00000EBC C3                      	retn					; otherwise just quit
  7903                                  
  7904                                  ; subfunctions requiring return of value to user come here. DL holds
  7905                                  ; value to return
  7906                                  
  7907                                  chop_1:
  7908 00000EBD E8C1F5                  	call	Get_User_Stack
  7909 00000EC0 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7910 00000EC3 C3                      	retn
  7911                                  
  7912                                  	; MSDOS 3.3
  7913                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7914                                  	;push	ss
  7915                                  	;pop	ds
  7916                                  	;cmp	al,1
  7917                                  	;jb	short chop_1
  7918                                  	;jz	short chop_2
  7919                                  	;cmp	al,3
  7920                                  	;jb	short chop_3
  7921                                  	;jz	short chop_5
  7922                                  	;mov	al,0FFh
  7923                                  	;retn
  7924                                  ;chop_1:
  7925                                  	;mov	dl,[chSwitch]
  7926                                  	;jmp	short chop_4
  7927                                  ;chop_2:
  7928                                  	;mov	[chSwitch],dl
  7929                                  	;retn
  7930                                  ;chop_3:
  7931                                  	;mov	dl, FFh
  7932                                  ;chop_4:
  7933                                  	;call	Get_User_Stack
  7934                                  	;mov	[si+6],dx
  7935                                  ;chop_5:
  7936                                  	;retn
  7937                                  
  7938                                  ;**	$GetExtendedError - Return Extended error code
  7939                                  ;----------------------------------------------------------------------------
  7940                                  ;	This function reads up the extended error info from the static
  7941                                  ;	variables where it was stored.
  7942                                  ;
  7943                                  ;	ENTRY	none
  7944                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7945                                  ;		BL = recommended action
  7946                                  ;		BH = class of error
  7947                                  ;		CH = locus of error
  7948                                  ;		ES:DI = may be pointer
  7949                                  ;	USES	ALL
  7950                                  
  7951                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7952                                  
  7953                                  _$GetExtendedError:
  7954 00000EC4 16                      	push	ss
  7955 00000EC5 1F                      	pop	ds
  7956 00000EC6 A1[2403]                	MOV	AX,[EXTERR]
  7957 00000EC9 C43E[2803]              	LES	DI,[EXTERRPT]
  7958 00000ECD 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7959 00000ED1 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7960 00000ED5 E8A9F5                  	call	Get_User_Stack
  7961                                  	;mov	[si+0Ah],di
  7962 00000ED8 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7963                                  
  7964                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7965                                  	;;mov	[si+10h],es
  7966                                  	;MOV	[SI+user_env.user_ES],ES
  7967                                  	;;mov	[si+2],bx
  7968                                  	;MOV	[SI+user_env.user_BX],BX
  7969 00000EDB E89FFF                  	call	set_user_es_bx
  7970                                  
  7971                                  	;mov	[si+4],cx
  7972 00000EDE 894C04                  	MOV	[SI+user_env.user_CX],CX
  7973                                  jmp_SYS_RET_OK:
  7974                                  	; 15/12/2022
  7975                                  	;jmp	SYS_RET_OK
  7976                                  	; 25/06/2019
  7977 00000EE1 E950F7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7978                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7979                                  ;jmp_SYS_RET_OK:
  7980                                  	;jmp	SYS_RET_OK
  7981                                  
  7982                                  ; --------------------------------------------------------------------------
  7983                                  ; 09/01/2024
  7984                                  %if 0
  7985                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7986                                  	; DOSCODE:4CF3h
  7987                                  ;patch_or_unknown:
  7988                                  ;get_code_page:
  7989                                  	push    si
  7990                                  	mov     si, COUNTRY_CDPG
  7991                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7992                                  	mov     ax, [ss:si+6Ah]
  7993                                  	pop     si
  7994                                  	retn
  7995                                  %endif
  7996                                  ; --------------------------------------------------------------------------
  7997                                  
  7998                                  ; 29/04/2019 - Retro DOS v4.0
  7999                                  
  8000                                  ;BREAK	<ECS_call - Extended Code System support function>
  8001                                  ;---------------------------------------------------------------------------
  8002                                  ; Inputs:
  8003                                  ;	AL = 0	get lead byte table
  8004                                  ;		on return DS:SI has the table location
  8005                                  ;
  8006                                  ;	AL = 1	set / reset interim console flag
  8007                                  ;		DL = flag (00H or 01H)
  8008                                  ;		no return
  8009                                  ;
  8010                                  ;	AL = 2	get interim console flag
  8011                                  ;		on return DL = current flag value
  8012                                  ;
  8013                                  ;	AL = OTHER then error, and returns with:
  8014                                  ;		AX = error_invalid_function
  8015                                  ;
  8016                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  8017                                  ;	 SS:SP WILL BE PRESERVED!
  8018                                  ;---------------------------------------------------------------------------
  8019                                  
  8020                                  _$ECS_Call:
  8021 00000EE4 08C0                    	or	al,al			; AL = 0 (get table)?
  8022                                  	;jnz	short _okok
  8023                                  	; 15/12/2022
  8024 00000EE6 7403                    	jz	short get_lbt
  8025                                  ;_okok:
  8026 00000EE8 E946F7                  	jmp	SYS_RET_OK
  8027                                  get_lbt:
  8028 00000EEB E893F5                  	call	Get_User_Stack		; *
  8029                                  
  8030                                  ;hkn; dbcs_table moved low to dosdata
  8031                                  	;mov	word [si+8],DBCS_TAB+2
  8032 00000EEE C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  8033                                  
  8034 00000EF3 06                      	push	es
  8035                                  	;getdseg <es>			; es = DOSDATA
  8036 00000EF4 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  8037                                  	;mov	[si+14],es
  8038 00000EF9 8C440E                  	mov	[SI+user_env.user_DS],es
  8039 00000EFC 07                      	pop	es
  8040                                  
  8041                                  	; 15/12/2022
  8042 00000EFD EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  8043                                  ;_okok:
  8044                                  	; 15/12/2022	
  8045                                  	;;transfer SYS_RET_OK
  8046                                  	;jmp	short jmp_SYS_RET_OK
  8047                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8048                                  	;;jmp	SYS_RET_OK
  8049                                  	;jmp	short jmp_SYS_RET_OK
  8050                                  
  8051                                  ;============================================================================
  8052                                  ; PARSE.ASM, MSDOS 6.0, 1991
  8053                                  ;============================================================================
  8054                                  ; 19/07/2018 - Retro DOS v3.0
  8055                                  ; 15/05/2019 - Retro DOS v4.0
  8056                                  
  8057                                  ; System calls for parsing command lines
  8058                                  ;
  8059                                  ;   $PARSE_FILE_DESCRIPTOR
  8060                                  ;
  8061                                  ;   Modification history:
  8062                                  ;
  8063                                  ;       Created: ARR 30 March 1983
  8064                                  ;               EE PathParse 10 Sept 1983
  8065                                  ;
  8066                                  
  8067                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  8068                                  ;---------------------------------------------------------------------------
  8069                                  ; Inputs:
  8070                                  ;       DS:SI Points to a command line
  8071                                  ;       ES:DI Points to an empty FCB
  8072                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  8073                                  ;                   = 0 Parse stops if separator encountered
  8074                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  8075                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  8076                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  8077                                  ;                   = 0  "       "      "       - put blanks in FCB
  8078                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  8079                                  ;                   = 0  "       "      "        - put blanks in FCB
  8080                                  ; Function:
  8081                                  ;       Parse command line into FCB
  8082                                  ; Returns:
  8083                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  8084                                  ;       DS:SI points to first character after filename
  8085                                  ;---------------------------------------------------------------------------
  8086                                  
  8087                                  _$PARSE_FILE_DESCRIPTOR:
  8088 00000EFF E8FC3E                  	call	MAKEFCB
  8089 00000F02 56                      	PUSH    SI
  8090 00000F03 E87BF5                  	call	Get_User_Stack
  8091                                  	;pop	word [si+8]
  8092 00000F06 8F4408                  	POP     word [SI+user_env.user_SI]
  8093 00000F09 C3                      	retn
  8094                                  
  8095                                  ;============================================================================
  8096                                  ; MISC.ASM, MSDOS 6.0, 1991
  8097                                  ;============================================================================
  8098                                  ; 19/07/2018 - Retro DOS v3.0
  8099                                  
  8100                                  ; 29/04/2019 - Retro DOS v4.0
  8101                                  
  8102                                  ;ENTRYPOINTSEG	EQU	0CH
  8103                                  ;MAXDIF		EQU	0FFFH
  8104                                  ;SAVEXIT 	EQU	10
  8105                                  ;WRAPOFFSET	EQU	0FEF0h
  8106                                  
  8107                                  ;
  8108                                  ;----------------------------------------------------------------------------
  8109                                  ;
  8110                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  8111                                  ;
  8112                                  ;	Return Stuff sort of like old get fat call
  8113                                  ;
  8114                                  ;	ENTRY	none
  8115                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8116                                  ;			GOD help anyone who tries to do ANYTHING except
  8117                                  ;			READ this ONE byte.
  8118                                  ;		DX = Total Number of allocation units on disk
  8119                                  ;		CX = Sector size
  8120                                  ;		AL = Sectors per allocation unit
  8121                                  ;		   = -1 if bad drive specified
  8122                                  ;	USES	all
  8123                                  ;
  8124                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  8125                                  ;
  8126                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  8127                                  ;
  8128                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  8129                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8130                                  ;			GOD help anyone who tries to do ANYTHING except
  8131                                  ;			READ this ONE byte.
  8132                                  ;		DX = Total Number of allocation units on disk
  8133                                  ;		CX = Sector size
  8134                                  ;		AL = Sectors per allocation unit
  8135                                  ;		   = -1 if bad drive specified
  8136                                  ;	USES	all
  8137                                  ;
  8138                                  ;----------------------------------------------------------------------------
  8139                                  ;
  8140                                  
  8141                                  _$SLEAZEFUNC:
  8142                                  	; 10/01/2024
  8143                                  	; 15/05/2019 - Retro DOS v4.0
  8144 00000F0A B200                    	MOV	DL,0
  8145                                  _$SLEAZEFUNCDL:
  8146 00000F0C 16                      	push	ss
  8147 00000F0D 1F                      	pop	ds
  8148                                  	
  8149 00000F0E 88D0                    	MOV	AL,DL
  8150 00000F10 E83D5A                  	call	GETTHISDRV		; Get CDS structure
  8151                                  SET_AL_RET:
  8152                                  	; MSDOS 3.3
  8153                                  	;;mov	al, 0Fh
  8154                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  8155                                  	
  8156                                  	; MSDOS 6.0 & MSDOS 3.3
  8157 00000F13 721D                    	JC	short BADSLDRIVE
  8158                                  
  8159 00000F15 E8421D                  	call	DISK_INFO
  8160                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  8161 00000F18 7218                    	jc	short BADSLDRIVE
  8162 00000F1A 8826[9805]              	MOV	[FATBYTE],AH
  8163                                  
  8164                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  8165                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  8166                                  ; CALL AGAIN
  8167                                  
  8168                                  	; 10/01/2024
  8169                                  	;MOV	DI,FATBYTE
  8170 00000F1E 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  8171 00000F20 E85EF5                  	call	Get_User_Stack
  8172                                  	;mov	[si+4],cx
  8173                                  	;mov	[si+6],bx
  8174                                  	;mov	[si+2],di
  8175 00000F23 894C04                  	MOV	[SI+user_env.user_CX],CX
  8176 00000F26 895C06                  	MOV	[SI+user_env.user_DX],BX
  8177                                  	;MOV	[SI+user_env.user_BX],DI
  8178                                  	; 10/01/2024
  8179 00000F29 C74402[9805]            	MOV	word [SI+user_env.user_BX],FATBYTE
  8180                                  	
  8181                                  	;mov	[si+0Eh],ss
  8182 00000F2E 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  8183                                  
  8184 00000F31 C3                      	retn
  8185                                  
  8186                                  BADSLDRIVE:
  8187 00000F32 E91BF7                  	jmp	FCB_RET_ERR
  8188                                  
  8189                                  ;
  8190                                  ;----------------------------------------------------------------------------
  8191                                  ;
  8192                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8193                                  ;
  8194                                  ;	Returns location of DOS status for interrupt routines
  8195                                  ;
  8196                                  ;	ENTRY	none
  8197                                  ;	EXIT	(es:bx) = flag location
  8198                                  ;	USES	all
  8199                                  ;
  8200                                  ;----------------------------------------------------------------------------
  8201                                  ;
  8202                                  
  8203                                  _$GET_INDOS_FLAG:
  8204 00000F35 E849F5                          CALL	Get_User_Stack
  8205                                          ;MOV	WORD [SI+2],INDOS
  8206 00000F38 C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8207                                  getin_segm:	; 13/01/2024
  8208                                  	;MOV	[SI+10H],SS
  8209 00000F3D 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8210 00000F40 C3                      	RETN 
  8211                                  ;
  8212                                  ;----------------------------------------------------------------------------
  8213                                  ;
  8214                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8215                                  ;
  8216                                  ;	Return a pointer to interesting DOS variables This call is version
  8217                                  ;	dependent and is subject to change without notice in future versions.
  8218                                  ;	Use at risk.
  8219                                  ;
  8220                                  ;	ENTRY	none
  8221                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8222                                  ;	uses	ALL
  8223                                  ;
  8224                                  ;----------------------------------------------------------------------------
  8225                                  ;
  8226                                  
  8227                                  	; 13/01/2024
  8228                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:5226h
  8229                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:4D65h
  8230                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:4D58h	
  8231                                  
  8232                                  _$GET_IN_VARS:
  8233 00000F41 E83DF5                  	CALL	Get_User_Stack
  8234                                  	;MOV	WORD [SI+2],SYSINITVAR
  8235                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8236 00000F44 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8237                                  	; 13/01/2024
  8238                                  	;;MOV	[SI+10H],SS
  8239                                  	;MOV	[SI+user_env.user_ES],SS
  8240                                  	;RETN
  8241 00000F49 EBF2                    	jmp	short getin_segm
  8242                                  
  8243                                  ;
  8244                                  ;----------------------------------------------------------------------------
  8245                                  ;
  8246                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8247                                  ;
  8248                                  ;	Return pointer to drive parameter table for default drive
  8249                                  ;
  8250                                  ;	ENTRY	none
  8251                                  ;	EXIT	(ds:bx) = DPB address
  8252                                  ;	USES	all
  8253                                  ;
  8254                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8255                                  ;
  8256                                  ;	Return pointer to a specified drive parameter table
  8257                                  ;
  8258                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8259                                  ;	EXIT	(al) = 0 iff ok
  8260                                  ;		  (ds:bx) = DPB address
  8261                                  ;		(al) = -1 if bad drive
  8262                                  ;	USES	all
  8263                                  ;
  8264                                  ;----------------------------------------------------------------------------
  8265                                  ;
  8266                                  
  8267                                  ; 15/05/2019 - Retro DOS v4.0
  8268                                  
  8269                                  _$GET_DEFAULT_DPB:
  8270 00000F4B B200                    	MOV	DL,0
  8271                                  _$GET_DPB:
  8272 00000F4D 16                      	push	ss
  8273 00000F4E 1F                      	pop	ds
  8274                                  
  8275 00000F4F 88D0                    	MOV	AL,DL
  8276 00000F51 E8FC59                  	call	GETTHISDRV		; Get CDS structure
  8277 00000F54 7222                    	JC	short ISNODRV 		; no valid drive
  8278 00000F56 C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8279                                  	;;test	word [es:di+43h],8000h
  8280                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8281                                  	;test	byte [es:di+44h],80h
  8282 00000F5A 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8283 00000F5F 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8284 00000F61 E88903                  	call	ECritDisk
  8285 00000F64 E85246                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8286 00000F67 E89E03                  	call	LCritDisk
  8287 00000F6A 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8288                                  					;   have.
  8289 00000F6C E812F5                  	call	Get_User_Stack
  8290                                  	;mov	[si+2],bp
  8291 00000F6F 896C02                  	MOV	[SI+user_env.user_BX],BP
  8292                                  	;mov	[si+0Eh],es
  8293 00000F72 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8294 00000F75 30C0                    	XOR	AL,AL
  8295 00000F77 C3                      	retn
  8296                                  ISNODRV:
  8297 00000F78 B0FF                    	MOV	AL,-1
  8298 00000F7A C3                      	retn
  8299                                  
  8300                                  ;
  8301                                  ;----------------------------------------------------------------------------
  8302                                  ;
  8303                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8304                                  ;
  8305                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8306                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8307                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8308                                  ;
  8309                                  ;	ENTRY	none
  8310                                  ;	EXIT	none
  8311                                  ;	USES	all
  8312                                  ;
  8313                                  ;----------------------------------------------------------------------------
  8314                                  ;
  8315                                  
  8316                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8317                                  	; DOSCODE:4D94h
  8318                                  _$DISK_RESET:
  8319                                  	; 15/05/2019 - Retro DOS v4.0
  8320 00000F7B B0FF                    	mov	al,0FFh	; -1
  8321 00000F7D 16                      	push	ss
  8322 00000F7E 1F                      	pop	ds
  8323                                  	; 06/11/2022
  8324                                  	;MOV	AL,-1
  8325 00000F7F E86B03                  	call	ECritDisk
  8326                                  	; MSDOS 6.0
  8327                                  	;;or	word [DOS34_FLAG],4
  8328                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8329 00000F82 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8330 00000F87 E8A249                  	call	FLUSHBUF
  8331                                  	; MSDOS 6.0
  8332                                  	;and	word [DOS34_FLAG],0FFFBh
  8333                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8334                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8335                                  	; 15/12/2022
  8336 00000F8A 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8337 00000F8F C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8338                                  ;
  8339                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  8340                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8341                                  ; let's do it.
  8342                                  ;
  8343                                  ; Invalidate 'last-buffer' used
  8344                                  ;
  8345 00000F95 BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8346 00000F98 891E[2000]              	MOV	[LastBuffer+2],BX
  8347 00000F9C 891E[1E00]              	MOV	[LastBuffer],BX
  8348                                  
  8349                                  	; MSDOS 3.3 
  8350                                  	; IBMDOS.COM, Offset 1C66h
  8351                                  	;;;;
  8352                                  	;lds	si,[BUFFHEAD]
  8353                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8354                                  				; .buf_flags, AH = 0, reset/clear
  8355                                  ;DRST_1:
  8356                                  	;;mov	[si+4],ax
  8357                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8358                                  	;lds	si,[SI]
  8359                                  	;cmp	si,bx ; -1
  8360                                  	;je	short DRST_2
  8361                                  	;;mov	[si+4],ax
  8362                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8363                                  	;lds	si,[SI]
  8364                                  	;cmp	si,bx
  8365                                  	;jne	short DRST_1
  8366                                  	;;;;
  8367                                  ;DRST_2:
  8368 00000FA0 E86503                  	call	LCritDisk
  8369 00000FA3 B8FFFF                  	MOV	AX,-1
  8370                                  	; 07/12/2022
  8371                                  	;mov	ax,0FFFFh
  8372                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8373 00000FA6 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8374 00000FA7 B82011                  	mov     ax,1120h
  8375 00000FAA CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8376                                  			; DS = DOS CS
  8377                                  			; Return: CF clear (successful)
  8378 00000FAC 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8379                                  	
  8380 00000FAD C3                      	retn
  8381                                  
  8382                                  	; 19/07/2018 - Retro DOS v3.0
  8383                                  
  8384                                  ;
  8385                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8386                                  ;
  8387                                  ;----------------------------------------------------------------------------
  8388                                  ;
  8389                                  ;**	$SetDPB - Create a DPB
  8390                                  ;
  8391                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8392                                  ;
  8393                                  ;	ENTRY	ES:BP Points to DPB
  8394                                  ;		DS:SI Points to BPB
  8395                                  ;	EXIT	DPB setup
  8396                                  ;	USES	ALL but BP, DS, ES
  8397                                  ;
  8398                                  ;----------------------------------------------------------------------------
  8399                                  ;
  8400                                  
  8401                                  ; 10/05/2019 - Retro DOS v4.0
  8402                                  
  8403                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8404                                  
  8405                                  ; MSDOS 6.0
  8406 00000FAE 0300                    word3:	dw	3			; M008 -- word value for divides
  8407                                  
  8408                                  ; 13/01/2024
  8409                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8410                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8411                                  
  8412                                  ;procedure   $SETDPB,NEAR
  8413                                  
  8414                                  _$SETDPB:
  8415 00000FB0 89EF                    	MOV	DI,BP
  8416                                  	;ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8417                                  	; 13/01/2024
  8418 00000FB2 47                      	inc	di
  8419 00000FB3 47                      	inc	di
  8420 00000FB4 AD                      	LODSW
  8421 00000FB5 AB                      	STOSW				; dpb_sector_size
  8422                                  	; MSDOS 6.0
  8423                                  	;cmp	byte [si+3],0
  8424 00000FB6 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8425 00000FBA 7509                    	JNZ	short yesfat			     ; yes		;AN000;
  8426                                  	;mov	byte [es:di+4],0
  8427 00000FBC 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8428                                  	; 13/01/2024
  8429 00000FC1 89C3                    	mov	bx,ax
  8430 00000FC3 EB70                    	JMP	short setend			     ; NO		;AN000;
  8431                                  
  8432                                  yesfat: ; 10/08/2018
  8433 00000FC5 89C2                    	MOV	DX,AX
  8434 00000FC7 AC                      	LODSB
  8435                                  	;DEC	AL
  8436                                  	; 17/12/2022
  8437 00000FC8 48                      	dec	ax
  8438 00000FC9 AA                      	STOSB				; dpb_cluster_mask
  8439                                  	;INC	AL
  8440 00000FCA 40                      	inc	ax
  8441 00000FCB 30E4                    	XOR	AH,AH
  8442                                  LOG2LOOP:
  8443 00000FCD A801                    	test	AL,1
  8444 00000FCF 7506                    	JNZ	short SAVLOG
  8445 00000FD1 FEC4                    	INC	AH
  8446 00000FD3 D0E8                    	SHR	AL,1
  8447 00000FD5 EBF6                    	JMP	SHORT LOG2LOOP
  8448                                  SAVLOG:
  8449 00000FD7 88E0                    	MOV	AL,AH
  8450 00000FD9 AA                      	STOSB				; dpb_cluster_shift
  8451 00000FDA 88C3                    	MOV	BL,AL
  8452 00000FDC A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8453 00000FDD AC                      	LODSB
  8454 00000FDE AA                      	STOSB				; dpb_FAT_count Number of FATs
  8455                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8456                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8457 00000FDF 88C7                    	MOV	BH,AL
  8458 00000FE1 AD                      	LODSW
  8459 00000FE2 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8460 00000FE3 B105                    	MOV	CL,5
  8461 00000FE5 D3EA                    	SHR	DX,CL			; Directory entries per sector
  8462 00000FE7 48                      	DEC	AX
  8463 00000FE8 01D0                    	ADD	AX,DX			; Cause Round Up
  8464 00000FEA 89D1                    	MOV	CX,DX
  8465 00000FEC 31D2                    	XOR	DX,DX
  8466 00000FEE F7F1                    	DIV	CX
  8467 00000FF0 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8468 00000FF2 47                      	INC	DI
  8469 00000FF3 47                      	INC	DI			; Skip dpb_first_sector
  8470 00000FF4 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8471 00000FF5 AC                      	LODSB
  8472                                  	;mov	[es:bp+17h],al
  8473 00000FF6 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8474 00000FFA AD                      	LODSW				; Number of sectors in a FAT
  8475                                  	
  8476                                  	;;;
  8477                                  	;MSDOS 3.3
  8478                                  	;
  8479                                  	;STOSB		; DPB.FAT_SIZE
  8480                                  	;MUL	BH
  8481                                  	
  8482                                  	;MSDOS 6.0
  8483                                  	;
  8484 00000FFB AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8485 00000FFC 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8486 00000FFE 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8487 00001000 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8488                                  	;;;
  8489                                  	
  8490                                  	;add	ax,[es:bp+6]
  8491 00001002 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8492 00001006 AB                      	STOSW				; dpb_dir_sector
  8493 00001007 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8494                                  	;mov	[es:bp+0Bh],ax
  8495 00001009 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8496                                  	
  8497                                  	; MSDOS 6.0
  8498 0000100D 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8499                                  	;;cmp	word [es:bp+0Dh],0
  8500                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8501                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8502                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8503                                  	; 15/12/2022
  8504                                  	; 28/07/2019
  8505 0000100F 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8506 00001013 09DB                    	or	bx,bx
  8507 00001015 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8508                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8509                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8510                                  	
  8511                                  
  8512 00001017 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8513                                  	;mov	bx,[si+8]
  8514 00001019 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8515                                  	;mov	dx,[si+10]
  8516 0000101C 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8517 0000101F 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8518 00001021 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8519 00001024 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8520 00001026 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8521                                  rott:					;AN000;;F.C. >32mb
  8522 00001028 F8                      	CLC				;AN000;;F.C. >32mb
  8523 00001029 D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8524 0000102B D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8525 0000102D E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8526                                  norot:					;AN000;
  8527                                  	; 15/12/2022
  8528                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8529 0000102F EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8530                                  normal_dpb:
  8531                                  	;;sub	ax,[es:bp+0Dh]
  8532                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8533                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8534                                  	; 15/12/2022
  8535                                  	; bx = [es:bp+DSKSIZ]
  8536                                  	;sub	ax,bx ; 28/07/2019
  8537                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8538                                  	; 15/12/2022
  8539 00001031 29C3                    	sub	bx,ax
  8540                                  	;NEG	AX			; Sectors in data area
  8541                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8542                                  	; 15/12/2022
  8543                                  	; CL = cluster shift
  8544                                  	; BX = number of data sectors 
  8545                                  	;SHR	AX,CL			; Div by sectors/cluster
  8546 00001033 D3EB                    	shr	bx,cl 
  8547                                  setend:
  8548                                  ;	M008 - CAS
  8549                                  ;
  8550                                  	; 15/12/2022
  8551 00001035 43                      	inc	bx
  8552                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8553                                  ;
  8554                                  ;	There has been a bug in our fatsize calculation for so long
  8555                                  ;	  that we can't correct it now without causing some user to
  8556                                  ;	  experience data loss. There are even cases where allowing
  8557                                  ;	  the number of clusters to exceed the fats is the optimal
  8558                                  ;	  case -- where adding 2 more fat sectors would make the
  8559                                  ;	  data field smaller so that there's nothing to use the extra
  8560                                  ;	  fat sectors for.
  8561                                  ;
  8562                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8563                                  ;	  still report that there was a cluster left when the disk was
  8564                                  ;	  actually full. Very graceful failure for a corrupt system
  8565                                  ;	  configuration. There may be worse cases that were never
  8566                                  ;	  properly traced back to this bug. The problem cases only
  8567                                  ;	  occurred when partition sizes were very near FAT sector
  8568                                  ;	  rounding boundaries, which were rare cases.
  8569                                  ;
  8570                                  ;	Also, it's possible that some third-party partition program might
  8571                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8572                                  ;	  scheme. In this hypothetical case, the number of allocation
  8573                                  ;	  clusters which don't actually have FAT entries to represent
  8574                                  ;	  them might be larger and might create a more catastrophic
  8575                                  ;	  failure. So we'll provide the safeguard of limiting the
  8576                                  ;	  max_cluster to the amount that will fit in the FATs.
  8577                                  ;
  8578                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8579                                  
  8580                                  ;	make sure the number of fat sectors is actually enough to
  8581                                  ;	  hold that many clusters. otherwise, back the number of
  8582                                  ;	  clusters down
  8583                                  
  8584                                  	; 15/12/2022
  8585                                  	; bx = number of clusters
  8586                                  
  8587                                  	; 19/07/2018 - Retro DOS v3.0
  8588                                  	; MSDOS 6.0
  8589                                  	; 15/12/2022
  8590                                  	;mov	bx,ax			; remember calculated # clusters
  8591                                  
  8592                                  	; 01/08/2018 (MSDOS 3.3)
  8593                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8594                                  	;xor	ah,ah 
  8595                                  
  8596                                  	; 10/05/2019 - Retro DOS v4.0
  8597                                  	;mov	ax,[ES:BP+0Fh]
  8598 00001036 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8599                                  
  8600                                  	;mul	word [es:bp+2]	
  8601 0000103A 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8602 0000103E 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8603 00001042 720D                    	jb	short setend_fat12
  8604 00001044 D1EA                    	shr	dx,1
  8605                                  
  8606                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8607                                  	; 15/12/2022
  8608                                  ;cs3 7/2/92
  8609 00001046 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8610                                  					; than enough for the maximum FAT,
  8611                                  					; so go ahead and use the calculated
  8612                                  					; number of clusters.
  8613                                  ;cs3 7/2/92
  8614                                  
  8615 00001048 D1D8                    	rcr	ax,1			; find number of entries
  8616 0000104A 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8617                                  ;					;  into 12-bit fatland?
  8618 0000104D 7215                    	jb	short setend_faterr	; then go ahead and let the
  8619                                  ;					;  inconsistency pass through
  8620                                  ;					;  rather than lose data by
  8621                                  ;					;  correcting the fat type
  8622 0000104F EB0E                    	jmp	short setend_fat16
  8623                                  
  8624                                  setend_fat12:
  8625 00001051 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8626 00001053 11D2                    	adc	dx,dx
  8627                                  
  8628                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8629                                  ;cs3 7/2/92
  8630                                  	; 15/12/2022
  8631 00001055 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8632 00001058 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8633                                  					; here. Check for it and use
  8634                                  					; the calculated size in this case.
  8635                                  ;cs3 7/2/92
  8636                                  
  8637 0000105A 2EF736[AE0F]            	div	word [cs:word3]
  8638                                  
  8639                                  setend_fat16:
  8640 0000105F 48                      	dec	ax			; limit at 1
  8641 00001060 39D8                    	cmp	ax,bx			; is fat big enough?
  8642 00001062 7602                    	jbe	short setend_fat	; use max value that'll fit
  8643                                  
  8644                                  setend_faterr:
  8645 00001064 89D8                    	mov	ax,bx			; use calculated value
  8646                                  
  8647                                  setend_fat:
  8648                                  
  8649                                  ;	now ax = maximum legal cluster
  8650                                  
  8651                                  ;	end M008
  8652                                  
  8653                                  	;mov	[es:bp+0Dh], ax
  8654 00001066 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8655                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8656                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8657 0000106A 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8658                                  					; Init so first ALLOC starts at
  8659                                  					; begining of FAT
  8660                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8661                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8662 00001070 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8663                                  
  8664 00001076 C3                      	retn
  8665                                  
  8666                                  ;EndProc $SETDPB
  8667                                  
  8668                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8669                                  
  8670                                  ;
  8671                                  ;----------------------------------------------------------------------------
  8672                                  ;
  8673                                  ;**	$Dup_PDB
  8674                                  ;
  8675                                  ; Inputs:   DX is new segment address of process
  8676                                  ;	    SI is end of new allocation block
  8677                                  ;
  8678                                  ;----------------------------------------------------------------------------
  8679                                  ;
  8680                                  
  8681                                  _$DUP_PDB:
  8682                                  
  8683                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8684                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8685                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8686                                  
  8687                                  	; MSDOS 3.3
  8688                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8689                                  	;MOV	DS,[CS:CurrentPDB]
  8690                                  
  8691                                  	; 15/05/2019 - Retro DOS v4.0
  8692                                  	; MSDOS 6.0
  8693 00001077 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8694 0000107C C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8695 00001081 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8696                                  
  8697 00001085 56                      	PUSH	SI
  8698 00001086 EB0A                    	JMP	SHORT CreateCopy
  8699                                  
  8700                                  ;
  8701                                  ;----------------------------------------------------------------------------
  8702                                  ;
  8703                                  ; Inputs:
  8704                                  ;	DX = Segment number of new base
  8705                                  ; Function:
  8706                                  ;	Set up program base and copy term and ^C from int area
  8707                                  ; Returns:
  8708                                  ;	None
  8709                                  ; Called at DOS init
  8710                                  ;
  8711                                  ;----------------------------------------------------------------------------
  8712                                  ;
  8713                                  
  8714                                  ; 15/05/2019 - Retro DOS v4.0
  8715                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8716                                  
  8717                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8718                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8719                                  
  8720                                  _$CREATE_PROCESS_DATA_BLOCK:
  8721                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8722 00001088 E8F6F3                  	CALL	Get_User_Stack
  8723                                  	;mov	ds,[si+14h]
  8724 0000108B 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8725                                  	;push	word [2]
  8726 0000108E FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8727                                  CreateCopy:
  8728 00001092 8EC2                    	MOV	ES,DX
  8729                                  
  8730 00001094 31F6                    	XOR	SI,SI			; copy entire PDB
  8731 00001096 89F7                    	MOV	DI,SI
  8732 00001098 B98000                  	MOV	CX,128
  8733 0000109B F3A5                    	REP	MOVSW
  8734                                  
  8735                                  ; DOS 3.3 7/9/86
  8736                                  	;mov	cx,20
  8737                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8738                                  	; 15/12/2022
  8739 0000109D B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8740                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8741                                  	;mov	cx,FILPERPROC
  8742                                  
  8743                                  	;mov	di,18h
  8744 0000109F BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8745                                  	;;PUSH	DS ; * 15/05/2019
  8746                                  	;;lds	si,[34h]
  8747                                  	;LDS	SI,[PDB.JFN_Pointer]
  8748                                  	;REP	MOVSB
  8749                                  	;;POP	DS ; * 15/05/2019
  8750                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8751                                  	; 05/12/2022
  8752                                  	; (push ds then pop ds is not needed here!)
  8753                                  	;push	ds
  8754                                  	;lds	si,[34h]
  8755 000010A2 C5363400                	lds	si,[PDB.JFN_Pointer]
  8756 000010A6 F3A4                    	rep	movsb
  8757                                  	;pop	ds
  8758                                  
  8759                                  ; DOS 3.3 7/9/86
  8760                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8761                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8762                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8763                                  
  8764 000010A8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8765                                  
  8766                                  	;;test	byte [cs:CreatePDB],0FFh
  8767                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8768                                  	; 17/12/2022
  8769 000010AD 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8770                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8771 000010B1 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8772                                  
  8773                                  ; Here we set up for a new process...
  8774                                  
  8775                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8776                                  	;POP	DS
  8777                                  
  8778                                  	; MSDOS 6.0
  8779                                  	;;getdseg <ds>			; ds -> dosdata
  8780                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8781                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8782                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8783                                  	; 15/12/2022
  8784                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8785                                  
  8786 000010B3 31DB                    	XOR	BX,BX			; dup all jfns
  8787                                  	;mov	cx,20
  8788                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8789                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8790                                  	; 15/12/2022
  8791 000010B5 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8792                                  
  8793                                  Create_dup_jfn:
  8794 000010B7 06                      	PUSH	ES ;**			; save new PDB
  8795 000010B8 E88354                  	call	SFFromHandle		; get sf pointer
  8796 000010BB B0FF                    	MOV	AL,-1			; unassigned JFN
  8797 000010BD 7224                    	JC	short CreateStash	; file was not really open
  8798                                  	;;test	word [es:di+5],1000h
  8799                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8800                                  	; 15/05/2019
  8801                                  	;test	byte [es:di+6],10h
  8802 000010BF 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8803 000010C4 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8804                                  
  8805                                  ; We do not inherit network file handles.
  8806                                  
  8807                                  	;mov	ah,[es:di+2]
  8808 000010C6 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8809                                  	;and	ah,0F0h
  8810 000010CA 80E4F0                  	AND	AH,SHARING_MASK
  8811                                  	;cmp	ah,70h
  8812 000010CD 80FC70                  	CMP	AH,SHARING_NET_FCB
  8813 000010D0 7411                    	jz	short CreateStash
  8814                                  
  8815                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8816                                  ; duplication operation.
  8817                                  
  8818 000010D2 893E[9E05]              	MOV	[THISSFT],DI
  8819 000010D6 8C06[A005]              	MOV	[THISSFT+2],ES
  8820 000010DA E8D918                  	call	DOS_DUP 		; signal duplication
  8821                                  
  8822                                  ; get the old sfn for copy
  8823                                  
  8824 000010DD E84154                  	call	pJFNFromHandle		; ES:DI is jfn
  8825 000010E0 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8826                                  
  8827                                  ; Take AL (old sfn or -1) and stash it into the new position
  8828                                  
  8829                                  CreateStash:
  8830 000010E3 07                      	POP	ES ;**
  8831                                  	;mov	[es:bx+18h],al
  8832 000010E4 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8833 000010E8 43                      	INC	BX			; next jfn...
  8834 000010E9 E2CC                    	LOOP	Create_dup_jfn
  8835                                  
  8836 000010EB 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8837                                  	; 06/11/2022
  8838                                  	;mov	[es:16h],bx
  8839 000010EF 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8840 000010F4 8C06[3003]              	MOV	[CurrentPDB],ES
  8841                                  	;MOV	DS,BX ; 28/07/2019
  8842                                  	; 07/12/2022
  8843                                  	;mov	ds,[cs:DosDSeg]
  8844                                  	; 15/12/2022
  8845                                  	; ds = [cs:DosDSeg]
  8846 000010F8 C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8847                                  	;mov	ds,bx
  8848                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8849                                  	; 15/12/2022
  8850                                  	;mov	ds,bx
  8851                                  
  8852                                  ; end of new process create
  8853                                  
  8854                                  Create_PDB_cont:
  8855                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8856                                  
  8857                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8858                                  
  8859                                  	;; 28/07/2019
  8860                                  	;;push	ds
  8861                                  	;;mov	ds,[cs:DosDSeg]
  8862                                  	;mov	byte [CreatePDB],0
  8863                                  	;;pop	ds
  8864                                  
  8865                                  ; 05/12/2022
  8866                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8867                                  ;	; (push-pop ds is nonsense here! 
  8868                                  ;	;  but i am using same code with original MSDOS.SYS
  8869                                  ;	;  for address compatibility.)
  8870                                  ;	push	ds
  8871                                  ;	; ds = [cs:DosDSeg] !
  8872                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8873                                  ;	mov	byte [CreatePDB],0
  8874                                  ;	pop	ds
  8875                                  
  8876 000010FD 58                      	POP	AX ;*
  8877                                  
  8878                                  	;entry	SETMEM
  8879                                  
  8880                                  	; 17/12/2022
  8881                                  	; cx = 0
  8882                                  
  8883                                  ;---------------------------------------------------------------------------
  8884                                  ; Inputs:
  8885                                  ;	AX = Size of memory in paragraphs
  8886                                  ;	DX = Segment
  8887                                  ; Function:
  8888                                  ;	Completely prepares a program base at the
  8889                                  ;	specified segment.
  8890                                  ; Called at DOS init
  8891                                  ; Outputs:
  8892                                  ;	DS = DX
  8893                                  ;	ES = DX
  8894                                  ;	[0] has INT int_abort
  8895                                  ;	[2] = First unavailable segment
  8896                                  ;	[5] to [9] form a long call to the entry point
  8897                                  ;	[10] to [13] have exit address (from int_terminate)
  8898                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8899                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8900                                  ; DX,BP unchanged. All other registers destroyed.
  8901                                  ;---------------------------------------------------------------------------
  8902                                  
  8903                                  SETMEM:
  8904                                  	;XOR	CX,CX
  8905                                  	; 17/12/2022
  8906                                  	; cx = 0
  8907 000010FE 8ED9                    	MOV	DS,CX
  8908 00001100 8EC2                    	MOV	ES,DX
  8909                                  	;mov	si,88h
  8910 00001102 BE8800                  	MOV	SI,addr_int_terminate
  8911                                  	;mov	di,10 ; 0Ah
  8912 00001105 BF0A00                  	MOV	DI,SAVEXIT
  8913                                  	;MOV	CX,6
  8914                                  	; 15/12/2022
  8915 00001108 B106                    	mov	cl,6
  8916 0000110A F3A5                    	REP	MOVSW
  8917 0000110C 26A30200                	MOV	[ES:2],AX
  8918 00001110 29D0                    	SUB	AX,DX
  8919 00001112 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8920 00001115 7603                    	JBE	short HAVDIF
  8921 00001117 B8FF0F                  	MOV	AX,MAXDIF
  8922                                  HAVDIF:
  8923 0000111A 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8924 0000111D BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8925 00001120 29C3                    	SUB	BX,AX
  8926 00001122 B104                    	MOV	CL,4
  8927 00001124 D3E0                    	SHL	AX,CL
  8928 00001126 8EDA                    	MOV	DS,DX
  8929                                  
  8930                                  	; (MSDOS 6.0 note)
  8931                                  	;
  8932                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8933                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8934                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8935                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8936                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8937                                  	; making this equvalence valid for this particular case. If however
  8938                                  	; there is less than 64K remaining the address in BX:AX will not 
  8939                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8940                                  	; into the PSP.
  8941                                  	;
  8942                                  	; Therefore for the case where there is less than 64K remaining in 
  8943                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8944                                  	; requirements will not work. Call 5, however will continue to work
  8945                                  	; for all cases.
  8946                                  	;
  8947                                  
  8948                                  	;mov	[6],ax
  8949                                  	;mov	[8],bx
  8950                                  
  8951 00001128 A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8952 0000112B 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8953                                  
  8954                                  	; 06/05/2019 - Retro DOS v4.0
  8955 0000112F 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8956                                  					;    memory left
  8957 00001132 740C                    	je	short addr_ok		; Y: the above calculated address is
  8958                                  					;    OK
  8959                                  					; N: 
  8960                                  
  8961 00001134 C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8962 0000113A C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8963                                  addr_ok:
  8964                                  	;mov	word [0],20CDh
  8965 00001140 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8966                                  	;mov	byte [5],9Ah
  8967 00001146 C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8968                                  	;mov	word [50h],21CDh
  8969 0000114B C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8970                                  	;mov	byte [52h],0CBh
  8971 00001151 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8972                                  	;mov	word [34h],18h
  8973 00001156 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8974                                  	;mov	word [36h],ds
  8975 0000115C 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8976                                  	;mov	word [32h],20
  8977 00001160 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8978                                  ;
  8979                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8980                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8981                                  ; particular SFT.  We perform this by requiring that the server link together
  8982                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8983                                  ; initialize this pointer.
  8984                                  ;
  8985                                   	;mov	word [38h],-1
  8986 00001166 C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8987                                  	;mov	word [3Ah],-1
  8988 0000116C C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8989                                  
  8990                                  	; 06/05/2019
  8991                                  	; Set the real version number in the PSP - 5.00
  8992                                  
  8993                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8994                                  	; 07/12/2022
  8995 00001172 26C70640000616          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8996                                  
  8997 00001179 C3                      	retn
  8998                                  
  8999                                  ; 29/04/2019 - Retro DOS v4.0
  9000                                  
  9001                                  ;BREAK <$GSetMediaID -- get set media ID>
  9002                                  
  9003                                  ;---------------------------------------------------------------------------
  9004                                  ; Inputs:
  9005                                  ;	BL= drive number as defined in IOCTL
  9006                                  ;	AL= 0 get media ID
  9007                                  ;	    1 set media ID
  9008                                  ;	DS:DX= buffer containing information
  9009                                  ;		DW  0  info level (set on input)
  9010                                  ;		DD  ?  serial #
  9011                                  ;		DB  11 dup(?)  volume id
  9012                                  ;		DB   8 dup(?)  file system type
  9013                                  ; Function:
  9014                                  ;	Get or set media ID
  9015                                  ; Returns:
  9016                                  ;	carry clear, DS:DX is filled
  9017                                  ;	carry set, error
  9018                                  ;---------------------------------------------------------------------------
  9019                                  
  9020                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9021                                  _$GSetMediaID:
  9022                                  	; RAWIO - GET_MEDIA_ID
  9023 0000117A B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  9024 0000117D 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  9025 0000117F 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  9026                                  	;cmp	al,1		      ;AN000;MS.; set ?
  9027                                  	;jne	short errorfunc	      ;AN000;MS.; no
  9028                                  	; 15/12/2022
  9029 00001181 FEC8                    	dec	al
  9030 00001183 7507                    	jnz	short errorfunc ; al > 1
  9031                                  	; RAWIO - SET_MEDIA_ID
  9032                                  	;mov	cx,0846h	      ;AN001;MS.;
  9033                                  	; 15/12/2022
  9034 00001185 B146                    	mov	cl,46h	; cx = 0846h 
  9035                                  doioctl:			      ;AN000;
  9036 00001187 B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  9037                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  9038                                  	;call	_$IOCTL
  9039                                  	;retn			      ;AN000;MS.;
  9040                                  	; 15/12/2022
  9041 00001189 E98F10                  	jmp	_$IOCTL
  9042                                  errorfunc:			      ;AN000;
  9043                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  9044                                  	;mov	al,1
  9045 0000118C B001                    	mov	al,error_invalid_function
  9046 0000118E E9A9F4                  	jmp	SYS_RET_ERR
  9047                                  
  9048                                  ; 16/05/2019 - Retro DOS v4.0
  9049                                  
  9050                                  ;============================================================================
  9051                                  ; MISC2.ASM, MSDOS 6.0, 1991
  9052                                  ;============================================================================
  9053                                  ; 20/07/2018 - Retro DOS v3.0
  9054                                  ; 29/04/2019 - Retro DOS v4.0
  9055                                  
  9056                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  9057                                  ;----------------------------------------------------------------------------
  9058                                  ;
  9059                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  9060                                  ;	     Strings of different lengths don't match.
  9061                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  9062                                  ;   Outputs: Z if strings same, NZ if different
  9063                                  ;   Registers modified: NONE
  9064                                  ;----------------------------------------------------------------------------
  9065                                  
  9066                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9067                                  StrCmp:
  9068 00001191 56                      	push	si
  9069 00001192 57                      	push	di
  9070 00001193 50                      	push	ax
  9071                                  Cmplp:
  9072 00001194 AC                      	LODSB
  9073 00001195 E8993D                  	call	UCase			; convert to upper case
  9074 00001198 E8EB3D                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9075 0000119B 88C4                    	MOV	AH,AL
  9076 0000119D 268A05                  	MOV	AL,[ES:DI]
  9077 000011A0 47                      	INC	DI
  9078 000011A1 E88D3D                  	call	UCase			; convert to upper case
  9079 000011A4 E8DF3D                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9080 000011A7 38C4                    	CMP	AH,AL
  9081 000011A9 7504                    	JNZ	short PopRet		; Strings dif
  9082                                  
  9083 000011AB 08C0                    	OR	AL,AL
  9084 000011AD 75E5                    	JNZ	short Cmplp		; More string
  9085                                  PopRet:
  9086 000011AF 58                      	pop	ax
  9087 000011B0 5F                      	pop	di
  9088 000011B1 5E                      	pop	si
  9089 000011B2 C3                      	retn
  9090                                  
  9091                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  9092                                  ;----------------------------------------------------------------------------
  9093                                  ;
  9094                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  9095                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  9096                                  ;	characters.
  9097                                  ;
  9098                                  ;   Inputs:	DS:SI - pointer to source string
  9099                                  ;		ES:DI - pointer to destination string
  9100                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  9101                                  ;		DS:SI point byte after nul byte at end of source string
  9102                                  ;   Registers modified: SI,DI
  9103                                  ;----------------------------------------------------------------------------
  9104                                  
  9105                                  StrCpy:
  9106 000011B3 50                      	push	ax
  9107                                  CPYLoop:
  9108 000011B4 AC                      	LODSB
  9109 000011B5 E8793D                  	call	UCase			; convert to upper case
  9110 000011B8 E8CB3D                  	call	PATHCHRCMP		; convert / to \ ;
  9111 000011BB AA                      	STOSB
  9112                                  
  9113 000011BC 08C0                    	OR	AL,AL
  9114 000011BE 75F4                    	JNZ	short CPYLoop
  9115 000011C0 58                      	pop	ax
  9116 000011C1 C3                      	retn
  9117                                  
  9118                                  ;----------------------------------------------------------------------------
  9119                                  ; Procedure Name : FStrCpy
  9120                                  ;----------------------------------------------------------------------------
  9121                                  
  9122                                  FStrCpy:
  9123 000011C2 50                      	push	ax
  9124                                  FCPYLoop:
  9125 000011C3 AC                      	LODSB
  9126 000011C4 AA                      	STOSB
  9127 000011C5 08C0                    	OR	AL,AL
  9128 000011C7 75FA                    	JNZ	short FCPYLoop
  9129 000011C9 58                      	pop	ax
  9130 000011CA C3                      	retn
  9131                                  
  9132                                  ; 20/07/2018 - Retro DOS v3.0
  9133                                  ;----------------------------------------------------------------------------
  9134                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  9135                                  ;----------------------------------------------------------------------------
  9136                                  ;
  9137                                  ;UCase:	
  9138                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  9139                                  ;	retn
  9140                                  
  9141                                  ;Break <StrLen - compute length of string ES:DI>
  9142                                  ;----------------------------------------------------------------------------
  9143                                  ;**	StrLen - Compute Length of String
  9144                                  ;
  9145                                  ;	StrLen computes the length of a string, including the trailing 00
  9146                                  ;
  9147                                  ;	ENTRY	(es:di) = address of string
  9148                                  ;	EXIT	(cx) = size of string
  9149                                  ;	USES	cx, flags
  9150                                  ;----------------------------------------------------------------------------
  9151                                  
  9152                                  StrLen:
  9153 000011CB 57                      	push	di
  9154 000011CC 50                      	push	ax
  9155                                  	;MOV	CX,-1
  9156 000011CD B9FFFF                  	mov	cx,65535
  9157 000011D0 30C0                    	XOR	AL,AL
  9158 000011D2 F2AE                    	REPNE	SCASB
  9159 000011D4 F7D1                    	NOT	CX
  9160 000011D6 58                      	pop	ax
  9161 000011D7 5F                      	pop	di
  9162 000011D8 C3                      	retn
  9163                                  
  9164                                  ;----------------------------------------------------------------------------
  9165                                  ;**	DStrLen - Compute Length of String
  9166                                  ;
  9167                                  ;	ENTRY	(ds:si) = address of string
  9168                                  ;	EXIT	(cx) = size of string, including trailing NUL
  9169                                  ;	USES	cx, flags
  9170                                  ;----------------------------------------------------------------------------
  9171                                  
  9172                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  9173 000011D9 E80300                  	CALL	XCHGP
  9174 000011DC E8ECFF                  	CALL	StrLen
  9175                                  	;CALL	XCHGP
  9176                                  	;retn
  9177                                  	; 18/12/2022
  9178                                  	;jmp	short XCHGP
  9179                                  
  9180                                  ;----------------------------------------------------------------------------
  9181                                  ;**	XCHGP - Exchange Source and Destination Pointers
  9182                                  ;
  9183                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  9184                                  ;
  9185                                  ;	ENTRY	none
  9186                                  ;	EXIT	pairs exchanged
  9187                                  ;	USES	SI, DI, DS, ES
  9188                                  ;----------------------------------------------------------------------------
  9189                                  
  9190                                  XCHGP:
  9191 000011DF 1E                      	push	ds
  9192 000011E0 06                      	push	es
  9193 000011E1 1F                      	pop	ds
  9194 000011E2 07                      	pop	es
  9195 000011E3 87F7                    	XCHG	SI,DI
  9196                                  xchgp_retn:
  9197 000011E5 C3                      	retn
  9198                                  
  9199                                  ;Break	<Idle - wait for a specified amount of time>
  9200                                  ;----------------------------------------------------------------------------
  9201                                  ;
  9202                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9203                                  ;   	   we spin until RetryLoop is exhausted.
  9204                                  ;
  9205                                  ;   Inputs:	RetryLoop is the number of times we spin
  9206                                  ;   Outputs:	Wait
  9207                                  ;   Registers modified: none
  9208                                  ;----------------------------------------------------------------------------
  9209                                  
  9210                                  Idle:
  9211                                  	;test	byte [SS:FSHARING],0FFh
  9212 000011E6 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9213                                  	;retnz
  9214 000011EC 75F7                    	jnz	short xchgp_retn
  9215                                  	;SAVE	<CX>
  9216 000011EE 51                      	push	cx
  9217 000011EF 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9218 000011F4 E308                    	JCXZ	Idle3
  9219                                  Idle1:	
  9220 000011F6 51                      	PUSH	CX
  9221 000011F7 31C9                    	XOR	CX,CX
  9222                                  Idle2:	
  9223 000011F9 E2FE                    	LOOP	Idle2
  9224 000011FB 59                      	POP	CX
  9225 000011FC E2F8                    	LOOP	Idle1
  9226                                  Idle3:	
  9227                                  	;RESTORE <CX>
  9228 000011FE 59                      	pop	cx
  9229 000011FF C3                      	retn
  9230                                  
  9231                                  ;Break	<TableDispatch - dispatch to a table>
  9232                                  ;----------------------------------------------------------------------------
  9233                                  ;
  9234                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9235                                  ;   routine. Preserve all input registers to the routine.
  9236                                  ;
  9237                                  ;   Inputs:	Push	return address
  9238                                  ;		Push	Table address
  9239                                  ;		Push	index (byte)
  9240                                  ;   Outputs:	appropriate routine gets jumped to.
  9241                                  ;		return indicates invalid index
  9242                                  ;   Registers modified: none.
  9243                                  ;----------------------------------------------------------------------------
  9244                                  
  9245                                  struc TFrame	 ; TableFrame
  9246 00000000 ????                    .OldBP:	 resw 1  ; 0
  9247 00000002 ????                    .OldRet: resw 1  ; 2
  9248 00000004 ??                      .Index:	 resb 1  ; 4
  9249 00000005 ??                      .Pad:	 resb 1  ; 5  
  9250 00000006 ????                    .Tab:	 resw 1  ; 6
  9251 00000008 ????                    .NewRet: resw 1  ; 8
  9252                                  endstruc
  9253                                  
  9254                                  TableDispatch:
  9255 00001200 55                      	PUSH	BP
  9256 00001201 89E5                    	MOV	BP,SP
  9257 00001203 53                      	PUSH	BX			; save BX
  9258                                  	;mov	bx,[bp+6]
  9259 00001204 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9260 00001207 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9261                                  	;cmp	[bp+4],bl
  9262 0000120A 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9263 0000120D 7317                    	JAE	short TableError	; yes
  9264                                  	;mov	bl,[bp+4]
  9265 0000120F 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9266 00001212 30FF                    	XOR	BH,BH			; convert to word
  9267 00001214 D1E3                    	SHL	BX,1			; convert to word pointer
  9268 00001216 43                      	INC	BX			; point past first length byte
  9269                                  	; 17/08/2018
  9270                                  	;add	bx,[bp+6]
  9271 00001217 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9272 0000121A 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9273                                  	;mov	[bp+6],bx
  9274 0000121D 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9275 00001220 5B                      	POP	BX			; restore BX
  9276 00001221 5D                      	POP	BP			; restore BP
  9277 00001222 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9278 00001225 C3                      	retn				; do operation
  9279                                  TableError:
  9280 00001226 5B                      	POP	BX			; restore BX
  9281 00001227 5D                      	POP	BP			; restore BP
  9282 00001228 C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9283                                  
  9284                                  ;Break	<TestNet - determine if a CDS is for the network>
  9285                                  ;----------------------------------------------------------------------------
  9286                                  ;
  9287                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9288                                  ;	network CDS. This will handle NULL cds also.
  9289                                  ;
  9290                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9291                                  ;   Outputs:	ES:DI = ThisCDS
  9292                                  ;		carry Set => network
  9293                                  ;		carry Clear => local
  9294                                  ;   Registers modified: none.
  9295                                  ;----------------------------------------------------------------------------
  9296                                  
  9297                                  TestNet:
  9298                                  	;LES	DI,[CS:THISCDS]
  9299                                  
  9300                                  	; 16/05/2019 - Retro DOS v4.0
  9301 0000122B 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9302 00001230 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9303 00001235 83FFFF                  	CMP	DI,-1
  9304 00001238 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9305                                  	;;test	word [es:di+43h],8000h
  9306                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9307                                  	;test	byte [es:di+44h],80h
  9308 0000123A 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9309 0000123F 7501                    	JNZ	short CMCRet		; jump has carry clear
  9310 00001241 C3                      	retn				; carry is clear
  9311                                  CMCRet: 
  9312 00001242 F5                      	CMC
  9313 00001243 C3                      	retn
  9314                                  
  9315                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9316                                  ;----------------------------------------------------------------------------
  9317                                  ;
  9318                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9319                                  ;	network file.
  9320                                  ;
  9321                                  ;   Inputs:	ES:DI point to SFT
  9322                                  ;   Outputs:	Zero set if not network sft
  9323                                  ;		zero reset otherwise
  9324                                  ;		Carry CLEAR!!!
  9325                                  ;   Registers modified: none.
  9326                                  ;----------------------------------------------------------------------------
  9327                                  
  9328                                  IsSFTNet:
  9329                                  	;;test	word [es:di+5],8000h
  9330                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9331                                  	; 16/05/2019 
  9332                                  	;test	byte [es:di+6],80h
  9333 00001244 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9334 00001249 C3                      	retn
  9335                                  
  9336                                  ;Break	<FastInit - Initialize FastTable entries >
  9337                                  ;----------------------------------------------------------------------------
  9338                                  ;   DOS 4.00   2/9/87
  9339                                  ;   FastInit  - initialize the FASTXXX routine entry
  9340                                  ;		  in the FastTable
  9341                                  ;
  9342                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9343                                  ;		DS:SI = address of FASTXXX routine entry
  9344                                  ;		   SI = -1 for query only
  9345                                  ;   Outputs:	Carry flag clear, if success
  9346                                  ;		Carry flag set,   if failure
  9347                                  ;
  9348                                  ;
  9349                                  ;----------------------------------------------------------------------------
  9350                                  
  9351                                  ;Procedure FastInit,NEAR
  9352                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9353                                  
  9354                                  ;	; MSDOS 3.3
  9355                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9356                                  ;FastInit:
  9357                                  ;	mov	di,FastTable ; FastOpenTable
  9358                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9359                                  ;	mov	bx,cs			; get DOS segment
  9360                                  ;	cmp	ax,bx			; first time installed ?	
  9361                                  ;	je	short ok_install	; yes
  9362                                  ;	stc				; set carry
  9363                                  ;	retn				; (cf=1 means) already installed !
  9364                                  ;
  9365                                  ;ok_install:
  9366                                  ;	mov	bx,FastTable ; FastOpenTable
  9367                                  ;	mov	cx,ds
  9368                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9369                                  ;	mov	[cs:bx+4],cx
  9370                                  ;	mov	[cs:bx+2],si
  9371                                  ;	retn
  9372                                  
  9373                                  ; 16/05/2019 - Retro DOS v4.0
  9374                                  
  9375                                  FastInit:
  9376                                  	; MSDOS 6.0
  9377                                  	;hkn; set up es to dosdataseg.
  9378 0000124A 06                      	push	es
  9379                                  	;getdseg <es>			; es -> dosdata
  9380 0000124B 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9381                                  
  9382                                  	;hkn; FastTable is in DOSDATA
  9383 00001250 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9384 00001253 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9385 00001254 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9386 00001256 D1E3                    	SHL	BX,1			;AN000;FO.;; times 4, each entry is DWORD
  9387 00001258 D1E3                    	SHL	BX,1			;AN000;FO.
  9388 0000125A 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9389 0000125C 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9390                                  fcheck: 				;AN000;
  9391 00001260 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9392 00001262 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9393 00001264 7405                    	JZ	short ok_install	;AN000;FO.;; yes
  9394 00001266 09C0                    	OR	AX,AX			;AN000;FO.;
  9395                                  	;JZ	short ok_install	;AN000;FO.;
  9396                                  	;STC				;AN000;FO.;; already installed !
  9397                                  	;JMP	SHORT FSret		;AN000;FO. set carry
  9398                                  	; 14/01/2024
  9399 00001268 F9                      	stc
  9400 00001269 7517                    	jnz	short FSret
  9401                                  ok_install:				;AN000;
  9402 0000126B 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9403 0000126E 7412                    	JZ	short FSret		;AN000;FO.; yes
  9404 00001270 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9405 00001272 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9406 00001276 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9407                                  
  9408                                  ;hkn; FastFlg moved to DOSDATA
  9409 00001279 BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9410 0000127C 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9411                                  	;or	byte [es:di],80h
  9412 0000127E 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9413                                  FSret:					;AN000;
  9414 00001282 07                      	pop	es
  9415 00001283 C3                      	retn				;AN000;FO.
  9416                                  
  9417                                  ;EndProc FastInit
  9418                                  
  9419                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9420                                  ;----------------------------------------------------------------------------
  9421                                  ;   DOS 3.3   6/10/86
  9422                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9423                                  ;
  9424                                  ;   Inputs:	None
  9425                                  ;   Outputs:	AX = -1 and carry flag set
  9426                                  ;
  9427                                  ;   Registers modified: none.
  9428                                  ;----------------------------------------------------------------------------
  9429                                  
  9430                                  FastRet:
  9431                                  	;mov	ax,-1
  9432                                  	;stc
  9433                                  	;retf
  9434 00001284 F9                      	STC
  9435 00001285 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9436 00001287 CB                      	RETF
  9437                                  
  9438                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9439                                  ;----------------------------------------------------------------------------
  9440                                  ;   DOS 3.3   6/10/86
  9441                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9442                                  ;
  9443                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9444                                  ;   Outputs:	same output as $OPEN
  9445                                  ;
  9446                                  ;----------------------------------------------------------------------------
  9447                                  
  9448                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9449                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9450                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9451                                  
  9452                                  NLS_OPEN:
  9453                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9454                                  ;	MOV	BYTE [CPSWFLAG],0
  9455                                  ;	PUSH	BX		 ; save current state
  9456                                  
  9457 00001288 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9458 0000128A E8095B                  	call	_$OPEN
  9459                                  
  9460                                  ;	POP	BX		 ; restore current state
  9461                                  ;	MOV	[CPSWFLAG],BL
  9462                                  
  9463 0000128D C3                      	RETN
  9464                                  
  9465                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9466                                  ;----------------------------------------------------------------------------
  9467                                  ;   DOS 3.3   6/10/86
  9468                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9469                                  ;
  9470                                  ;   Inputs:	BP = open mode
  9471                                  ;   Outputs:	same output as $LSEEK
  9472                                  ;
  9473                                  ;----------------------------------------------------------------------------
  9474                                  
  9475                                  ; 16/05/2019 - Retro DOS v4.0
  9476                                  
  9477                                  NLS_LSEEK:
  9478 0000128E 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9479 00001293 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9480 00001298 E81000                  	CALL	Fake_User_Stack
  9481 0000129B 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9482 0000129D E8A354                  	call	_$LSEEK
  9483 000012A0 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9484 000012A5 368F06[8405]            	POP	word [SS:USER_SP]
  9485 000012AA C3                      	RETN
  9486                                  
  9487                                  ;Break	<Fake_User_Stack - save user stack>
  9488                                  ;----------------------------------------------------------------------------
  9489                                  ;   DOS 3.3   6/10/86
  9490                                  ;   Fake_User_Stack - save user stack pointer
  9491                                  ;
  9492                                  ;----------------------------------------------------------------------------
  9493                                  
  9494                                  Fake_User_Stack:
  9495 000012AB 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9496 000012AF 36A3[8405]              	MOV	[SS:USER_SP],AX
  9497 000012B3 8CD0                    	MOV	AX,SS
  9498 000012B5 36A3[8605]              	MOV	[SS:USER_SS],AX
  9499 000012B9 C3                      	RETN
  9500                                  
  9501                                  ;Break	<GetDevList - get device header list pointer>
  9502                                  ;----------------------------------------------------------------------------
  9503                                  ;   DOS 3.3   7/25/86
  9504                                  ;   GetDevList - get device header list pointer
  9505                                  ;
  9506                                  ;   Output: AX:BX points to the device header list
  9507                                  ;----------------------------------------------------------------------------
  9508                                  
  9509                                  GetDevList:
  9510                                  	; 16/05/2019 - Retro DOS v4.0
  9511 000012BA BE[280D]                	MOV	SI,SysInitTable
  9512 000012BD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9513 000012C2 C534                    	LDS	SI,[SI]
  9514                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9515 000012C4 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9516                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9517 000012C7 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9518 000012CA C3                      	RETN
  9519                                  
  9520                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC>
  9521                                  ;----------------------------------------------------------------------------
  9522                                  ;   DOS 3.3   7/25/86
  9523                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9524                                  ;
  9525                                  ;   Inputs:	BP = function code 0CH
  9526                                  ;   Outputs:	same output as generic $IOCTL
  9527                                  ;
  9528                                  ;----------------------------------------------------------------------------
  9529                                  
  9530                                  NLS_IOCTL:
  9531                                  	; 16/05/2019 - Retro DOS v4.0
  9532 000012CB 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9533 000012D0 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9534 000012D5 E8D3FF                  	CALL	Fake_User_Stack
  9535 000012D8 89E8                    	MOV	AX,BP		; set up correct interface for $IOCTL
  9536 000012DA E83E0F                  	call	_$IOCTL
  9537 000012DD 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9538 000012E2 368F06[8405]            	POP	word [SS:USER_SP]
  9539 000012E7 C3                      	RETN
  9540                                  
  9541                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9542                                  ;----------------------------------------------------------------------------
  9543                                  ;   DOS 3.3   7/25/86
  9544                                  ;   NLS_GETEXT	-
  9545                                  ;
  9546                                  ;   Inputs:	none
  9547                                  ;   Outputs:	AX = extended error
  9548                                  ;
  9549                                  ;----------------------------------------------------------------------------
  9550                                  
  9551                                  NLS_GETEXT:
  9552                                  	; 16/05/2019 - Retro DOS v4.0
  9553 000012E8 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9554                                  	; 23/09/2023
  9555                                  MSG_RETRIEVAL:
  9556 000012EC C3                      	RETN
  9557                                  
  9558                                  ; 29/04/2019 - Retro DOS v4.0
  9559                                  
  9560                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9561                                  
  9562                                  ;----------------------------------------------------------------------------
  9563                                  ;   DOS 4.00
  9564                                  ;
  9565                                  ;   Inputs:	DL=0 get extended error message addr
  9566                                  ;		  =1 set extended error message addr
  9567                                  ;		  =2 get parser error message addr
  9568                                  ;		  =3 set parser error message addr
  9569                                  ;		  =4 get critical error message addr
  9570                                  ;		  =5 set critical error message addr
  9571                                  ;		  =6 get file system error message addr
  9572                                  ;		  =7 set file system error message addr
  9573                                  ;		  =8 get address for code reduction
  9574                                  ;		  =9 set address for code reduction
  9575                                  ;   Function:	get/set message address
  9576                                  ;   Outputs:	ES:DI points to addr when get
  9577                                  ;----------------------------------------------------------------------------
  9578                                  
  9579                                  ;Procedure MSG_RETRIEVAL,NEAR
  9580                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9581                                  
  9582                                  ; 23/09/2023
  9583                                  ;MSG_RETRIEVAL:
  9584                                  
  9585                                  ;;	NOTE:  This function lives in command.com resident code now.
  9586                                  ;;	If the int 2F ever gets this far, we'll return registers
  9587                                  ;;	unchanged, which produces the same result as before, if
  9588                                  ;;	command.com wasn't present (and therefore no messages available).
  9589                                  ;;
  9590                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9591                                  ;;	No_Op zeroes AL.
  9592                                  ;;
  9593                                  ;;;hkn; set up ds to point to DOSDATA
  9594                                  ;;	push	ds
  9595                                  ;;	getdseg	<ds>			; ds -> dosdata
  9596                                  ;;
  9597                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9598                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9599                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9600                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9601                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9602                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9603                                  ;;	DEC	AL		    ;AN000;;MS.
  9604                                  ;;toget:				    ;AN000;
  9605                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9606                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9607                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9608                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9609                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9610                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9611                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9612                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9613                                  ;;getget: 				     ;AN000;
  9614                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9615                                  ;;MSGret: 				     ;AN000;
  9616                                  ;;	POP	SI			     ;AN000;;MS.
  9617                                  ;;	POP	AX			     ;AN000;;MS.
  9618                                  ;;
  9619                                  ;;	pop	ds
  9620                                  
  9621                                  ;	return				     ;AN000;;MS. exit
  9622                                  
  9623                                  ; 23/09/2023
  9624                                  ;	retn	; 29/04/2019
  9625                                  
  9626                                  ;============================================================================
  9627                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9628                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9629                                  ;============================================================================
  9630                                  ; 20/07/2018 - Retro DOS v3.0
  9631                                  
  9632                                  ;	; MSDOS 3.3
  9633                                  ;	; 08/08/2018 - Retro DOS v3.0
  9634                                  ;ECritMEM:
  9635                                  ;ECritSFT:
  9636                                  ;	;
  9637                                  ;ECritDisk:
  9638                                  ;	retn
  9639                                  ;	;push	ax
  9640                                  ;	
  9641                                  ;	mov	ax,8001h
  9642                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9643                                  ;			; AL = critical section number (00h-0Fh)
  9644                                  ;	pop	ax
  9645                                  ;	retn
  9646                                  ;
  9647                                  ;	; MSDOS 3.3
  9648                                  ;	; 08/08/2018 - Retro DOS v3.0
  9649                                  ;LCritMEM:
  9650                                  ;LCritSFT:
  9651                                  ;	;
  9652                                  ;LCritDisk:
  9653                                  ;	retn
  9654                                  ;	;push	ax
  9655                                  ;	
  9656                                  ;	mov	ax,8101h
  9657                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9658                                  ;			; AL = critical section number (00h-0Fh)
  9659                                  ;	pop	ax
  9660                                  ;	retn
  9661                                  ;
  9662                                  ;ECritDevice:
  9663                                  ;	retn
  9664                                  ;	;push	ax
  9665                                  ;	
  9666                                  ;	mov	ax,8002h
  9667                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9668                                  ;			; AL = critical section number (00h-0Fh)
  9669                                  ;	pop	ax
  9670                                  ;	retn
  9671                                  ;
  9672                                  ;LCritDevice:
  9673                                  ;	retn
  9674                                  ;	;push	ax
  9675                                  ;	
  9676                                  ;	mov	ax,8102h
  9677                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9678                                  ;			; AL = critical section number (00h-0Fh)
  9679                                  ;	pop	ax
  9680                                  ;	retn
  9681                                  
  9682                                  ;============================================================================
  9683                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9684                                  ;============================================================================
  9685                                  ; 12/05/2019 - Retro DOS v4.0
  9686                                  
  9687                                  ; Critical Section Routines
  9688                                  
  9689                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9690                                  
  9691                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9692                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9693                                  
  9694                                  ; ---------------------------------------------------------------------------
  9695                                  ; Each handler must leave everything untouched; including flags!
  9696                                  ;
  9697                                  ; Sleaze for time savings: first instruction is a return. This is patched
  9698                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9699                                  ; ---------------------------------------------------------------------------
  9700                                  
  9701                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9702                                  ; ---------------------------------------------------------------------------
  9703                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9704                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9705                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9706                                  ; ---------------------------------------------------------------------------
  9707                                  
  9708                                  ;%macro POPFF 0
  9709                                  ;	jmp	$+3
  9710                                  ;	iret
  9711                                  ;	push	cs
  9712                                  ;	call	$-2
  9713                                  ;%endmacro
  9714                                  
  9715                                  ; ---------------------------
  9716                                  
  9717                                  ;Procedure  ECritDisk,NEAR
  9718                                  	;public  ECritMEM
  9719                                  	;public  ECritSFT
  9720                                  ECritMEM:
  9721                                  ECritSFT:
  9722                                  ;
  9723                                  ECritDisk:
  9724                                  
  9725                                  ;SR; Check if critical section is to be entered
  9726                                  
  9727 000012ED 9C                      	pushf
  9728 000012EE 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9729 000012F4 740D                    	jz	short ECritDisk_2
  9730                                  
  9731                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9732                                  ;	;popff  ; * (macro)
  9733                                  ;	jmp	short ECritDisk_1 ; *
  9734                                  ;
  9735                                  ;ECritDisk_iret: ; *
  9736                                  ;	iret ; *
  9737                                  
  9738                                  	; 16/12/2022
  9739                                  	; 13/11/2022
  9740                                  	;jmp	short ECritDisk_1
  9741                                  	; 06/11/2022
  9742                                  ;ECritDisk_iret:
  9743                                  ;	iret	
  9744                                  
  9745                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9746                                  ECritDisk_1:
  9747 000012F6 0E                      	push	cs ; *
  9748 000012F7 E80800                  	call	ECritDisk_iret ; *		
  9749                                  	
  9750                                  ECritDisk_0:
  9751 000012FA 50                      	PUSH    AX
  9752                                  	;MOV	AX,8000h+critDisk
  9753                                  	;INT	int_IBM
  9754 000012FB B80180                  	mov	ax,8001h
  9755 000012FE CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9756                                  			; AL = critical section number (00h-0Fh)
  9757 00001300 58                      	POP     AX
  9758 00001301 C3                      	retn
  9759                                  
  9760                                  	; 16/12/2022
  9761                                  	; 13/11/2022
  9762                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9763                                  LCritDisk_iret: 
  9764 00001302 CF                      	iret
  9765                                  
  9766                                  ECritDisk_2:
  9767                                  	;;popff ; *
  9768                                  	;;retn
  9769                                  ;	jmp	short ECritDisk_3 ; *
  9770                                  ;ECritDisk_iret2: ; *
  9771                                  ;	iret
  9772                                  	
  9773                                  	; 16/12/2022
  9774                                  	; 13/11/2022
  9775                                  	;jmp	short ECritDisk_3
  9776                                  ;ECritDisk_iret2:
  9777                                  	;iret
  9778                                  
  9779                                  ECritDisk_3:
  9780 00001303 0E                      	push    cs ; *
  9781                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9782                                  	;call	ECritDisk_iret2 ; *
  9783                                  	;retn
  9784                                  	; 16/12/2022
  9785 00001304 E8FBFF                  	call	ECritDisk_iret
  9786 00001307 C3                      	retn
  9787                                  
  9788                                  ;EndProc ECritDisk
  9789                                  
  9790                                  ; ---------------------------
  9791                                  
  9792                                  ;Procedure   LCritDisk,NEAR
  9793                                  	;public  LCritMEM
  9794                                  	;public  LCritSFT
  9795                                  LCritMEM:
  9796                                  LCritSFT:
  9797                                  ;
  9798                                  LCritDisk:
  9799                                  
  9800                                  ;SR; Check if critical section is to be entered
  9801                                  
  9802 00001308 9C                      	pushf
  9803 00001309 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9804 0000130F 740C                    	jz	short LCritDisk_2
  9805                                  	;popff  ; * (macro)
  9806                                  ;	jmp	short LCritDisk_1 ; *
  9807                                  ;
  9808                                  ;LCritDisk_iret: ; *
  9809                                  ;	iret ; *
  9810                                  
  9811                                  	; 16/12/2022
  9812                                  	; 13/11/2022
  9813                                  	;jmp	short LCritDisk_1
  9814                                  ;LCritDisk_iret:
  9815                                  	;iret
  9816                                  
  9817                                  LCritDisk_1:
  9818 00001311 0E                      	push	cs ; *
  9819 00001312 E8EDFF                  	call	LCritDisk_iret ; *		
  9820                                  	
  9821                                  LCritDisk_0:
  9822 00001315 50                      	PUSH	AX
  9823                                  	;MOV	AX,8100h+critDisk
  9824                                  	;INT	int_IBM
  9825 00001316 B80181                  	mov	ax,8101h
  9826 00001319 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9827                                  			; AL = critical section number (00h-0Fh)
  9828 0000131B 58                      	POP	AX
  9829 0000131C C3                      	retn
  9830                                  
  9831                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9832                                  ;	iret
  9833                                  
  9834                                  LCritDisk_2:
  9835                                  	;;popff ; *
  9836                                  	;;retn
  9837                                  ;	jmp	short LCritDisk_3 ; *
  9838                                  ;LCritDisk_iret2: ; *
  9839                                  ;	iret
  9840                                  
  9841                                  	; 16/12/2022
  9842                                  	; 13/11/2022
  9843                                  	;jmp	short LCritDisk_3
  9844                                  ;LCritDisk_iret2:
  9845                                  	;iret
  9846                                  
  9847                                  LCritDisk_3:
  9848 0000131D 0E                      	push    cs ; *
  9849                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9850                                  	;call	LCritDisk_iret2 ; *
  9851                                  	;retn
  9852                                  	; 16/12/2022
  9853 0000131E E8E1FF                  	call	LCritDisk_iret
  9854 00001321 C3                      	retn
  9855                                  
  9856                                  ;EndProc LCritDisk
  9857                                  
  9858                                  ; ---------------------------
  9859                                  
  9860                                  ;Procedure   ECritDevice,NEAR
  9861                                  
  9862                                  ECritDevice:
  9863                                  
  9864                                  ;SR; Check if critical section is to be entered
  9865                                  
  9866 00001322 9C                      	pushf
  9867 00001323 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9868 00001329 740D                    	jz	short ECritDevice_2
  9869                                  	;popff  ; * (macro)
  9870                                  ;	jmp	short ECritDevice_1 ; *
  9871                                  ;
  9872                                  ;ECritDevice_iret: ; *
  9873                                  ;	iret ; *
  9874                                  
  9875                                  	; 16/12/2022	
  9876                                  	; 13/11/2022
  9877                                  	;jmp	short ECritDevice_1
  9878                                  ;ECritDevice_iret:
  9879                                  	;iret
  9880                                  
  9881                                  ECritDevice_1:
  9882 0000132B 0E                      	push	cs ; *
  9883 0000132C E80800                  	call	ECritDevice_iret ; *		
  9884                                  	
  9885                                  ECritDevice_0:
  9886 0000132F 50                      	PUSH	AX
  9887                                  	;MOV	AX,8000h+critDevice
  9888                                  	;INT	int_IBM
  9889 00001330 B80280                  	mov	ax,8002h
  9890 00001333 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9891                                  			; AL = critical section number (00h-0Fh)
  9892 00001335 58                      	POP     AX
  9893 00001336 C3                      	retn
  9894                                  
  9895                                  	; 16/12/2022
  9896                                  	; 06/12/2022
  9897                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9898                                  LCritDevice_iret: 
  9899 00001337 CF                      	iret
  9900                                  
  9901                                  ECritDevice_2:
  9902                                  	;;popff ; *
  9903                                  	;;retn
  9904                                  ;	jmp	short ECritDevice_3 ; *
  9905                                  ;ECritDevice_iret2: ; *
  9906                                  ;	iret
  9907                                  
  9908                                  	; 16/12/2022
  9909                                  	; 13/11/2022
  9910                                  	;jmp	short ECritDevice_3
  9911                                  ;ECritDevice_iret2:
  9912                                  	;iret
  9913                                  
  9914                                  ECritDevice_3:
  9915 00001338 0E                      	push    cs ; *
  9916                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9917                                  	;call	ECritDevice_iret2 ; *
  9918                                  	;retn
  9919                                  	; 16/12/2022
  9920 00001339 E8FBFF                  	call	ECritDevice_iret
  9921 0000133C C3                      	retn
  9922                                  
  9923                                  ;EndProc ECritDevice
  9924                                  
  9925                                  ; ---------------------------
  9926                                  
  9927                                  ;Procedure   LCritDevice,NEAR
  9928                                  
  9929                                  LCritDevice:
  9930                                  
  9931                                  ;SR; Check if critical section is to be entered
  9932                                  
  9933 0000133D 9C                      	pushf
  9934 0000133E 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9935 00001344 740C                    	jz	short LCritDevice_2
  9936                                  	;popff  ; * (macro)
  9937                                  ;	jmp	short LCritDevice_1 ; *
  9938                                  ;
  9939                                  ;LCritDevice_iret: ; *
  9940                                  ;	iret ; *
  9941                                  
  9942                                  	; 16/12/2022
  9943                                  	; 13/11/2022
  9944                                  	;jmp	short LCritDevice_1
  9945                                  ;LCritDevice_iret:
  9946                                  	;iret
  9947                                  
  9948                                  LCritDevice_1:
  9949 00001346 0E                      	push	cs ; *
  9950 00001347 E8EDFF                  	call	LCritDevice_iret ; *		
  9951                                  	
  9952                                  LCritDevice_0:
  9953 0000134A 50                      	PUSH	AX
  9954                                  	;MOV	AX,8100h+critDevice
  9955                                  	;INT	int_IBM
  9956 0000134B B80281                  	mov	ax,8102h
  9957 0000134E CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9958                                  			; AL = critical section number (00h-0Fh)
  9959 00001350 58                      	POP     AX
  9960 00001351 C3                      	retn
  9961                                  
  9962                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9963                                  ;	iret
  9964                                  
  9965                                  LCritDevice_2:
  9966                                  	;;popff ; *
  9967                                  	;;retn
  9968                                  ;	jmp	short LCritDevice_3 ; *
  9969                                  ;LCritDevice_iret2: ; *
  9970                                  ;	iret
  9971                                  
  9972                                  	; 16/12/2022
  9973                                  	; 13/11/2022
  9974                                  	;jmp	short LCritDevice_3
  9975                                  ;LCritDevice_iret2:
  9976                                  	;iret
  9977                                  
  9978                                  LCritDevice_3:
  9979 00001352 0E                      	push    cs ; *
  9980                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9981                                  	;call	LCritDevice_iret2 ; *
  9982                                  	;retn
  9983                                  	; 16/12/2022
  9984 00001353 E8E1FF                  	call	LCritDevice_iret
  9985 00001356 C3                      	retn
  9986                                  
  9987                                  ;EndProc LCritDevice
  9988                                  
  9989                                  ;============================================================================
  9990                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9991                                  ;============================================================================
  9992                                  ; 20/07/2018 - Retro DOS v3.0
  9993                                  
  9994                                  ;============================================================================
  9995                                  ; STDIO.ASM - (MSDOS 2.0)
  9996                                  ;============================================================================
  9997                                  
  9998                                  ;
  9999                                  ; Standard device IO for MSDOS (first 12 function calls)
 10000                                  ;
 10001                                  
 10002                                  ;.xlist
 10003                                  ;.xcref
 10004                                  ;INCLUDE STDSW.ASM
 10005                                  ;INCLUDE DOSSEG.ASM
 10006                                  ;.cref
 10007                                  ;.list
 10008                                  
 10009                                  ;TITLE   STDIO - device IO for MSDOS
 10010                                  ;NAME    STDIO
 10011                                  
 10012                                  ;INCLUDE IO.ASM
 10013                                  
 10014                                  ; ---------------------------------------------------------------------------
 10015                                  ;
 10016                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
 10017                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
 10018                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
 10019                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
 10020                                  ;			    to restore MSDOS 2.0 device IO source code 
 10021                                  ;
 10022                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
 10023                                  	
 10024                                  ;============================================================================
 10025                                  ; STDIO.ASM - (MSDOS 2.0)
 10026                                  ;============================================================================
 10027                                  
 10028                                  ;
 10029                                  ; Standard device IO for MSDOS (first 12 function calls)
 10030                                  ;
 10031                                  
 10032                                  ;.xlist
 10033                                  ;.xcref
 10034                                  ;INCLUDE STDSW.ASM
 10035                                  ;INCLUDE DOSSEG.ASM
 10036                                  ;.cref
 10037                                  ;.list
 10038                                  
 10039                                  ;TITLE   STDIO - device IO for MSDOS
 10040                                  ;NAME    STDIO
 10041                                  
 10042                                  ;INCLUDE IO.ASM
 10043                                  
 10044                                  ; ---------------------------------------------------------------------------
 10045                                  ;
 10046                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
 10047                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
 10048                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
 10049                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
 10050                                  ;			    to restore MSDOS 2.0 device IO source code 
 10051                                  ;
 10052                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
 10053                                  ;
 10054                                  ;============================================================================
 10055                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
 10056                                  ;============================================================================
 10057                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
 10058                                  
 10059                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
 10060                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
 10061                                  
 10062                                  ;============================================================================
 10063                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
 10064                                  ;============================================================================
 10065                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
 10066                                  
 10067                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10068                                  
 10069                                  ;**	Standard device IO for MSDOS (first 12 function calls)
 10070                                  ;
 10071                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
 10072                                  ;	NAME	IBMCPMIO
 10073                                  
 10074                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
 10075                                  ;
 10076                                  ;	$Std_Con_Input_No_Echo
 10077                                  ;	$Std_Con_String_Output
 10078                                  ;	$Std_Con_String_Input
 10079                                  ;	$RawConIO
 10080                                  ;	$RawConInput
 10081                                  ;	RAWOUT
 10082                                  ;	RAWOUT2
 10083                                  ;
 10084                                  
 10085                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10086                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10087                                  ; references to be SS or CS relative which is desired.
 10088                                  
 10089                                  ; ---------------------------------------------------------------------------
 10090                                  
 10091                                  ;	TITLE	CPMIO2 - device IO for MSDOS
 10092                                  ;	NAME	CPMIO2
 10093                                  
 10094                                  ;
 10095                                  ;	Microsoft Confidential
 10096                                  ;	Copyright (C) Microsoft Corporation 1991
 10097                                  ;	All Rights Reserved.
 10098                                  ;
 10099                                  
 10100                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
 10101                                  ;
 10102                                  ;	$Std_Con_Input
 10103                                  ;	$Std_Con_Output
 10104                                  ;	OUTT
 10105                                  ;	TAB
 10106                                  ;	BUFOUT
 10107                                  ;	$Std_Aux_Input
 10108                                  ;	$Std_Aux_Output
 10109                                  ;	$Std_Printer_Output
 10110                                  ;	$Std_Con_Input_Status
 10111                                  ;	$Std_Con_Input_Flush
 10112                                  ;
 10113                                  ;	Revision History:
 10114                                  ;
 10115                                  ;	  AN000	 version 4.00 - Jan. 1988
 10116                                  
 10117                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10118                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10119                                  ; references to be SS or CS relative which is desired.
 10120                                  
 10121                                  ;DOSCODE SEGMENT
 10122                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
 10123                                  
 10124                                  
 10125                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10126                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10127                                  ;hkn;	not valid. 
 10128                                  
 10129                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
 10130                                  ; 08/11/2022
 10131                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
 10132                                  
 10133                                  ;
 10134                                  ;----------------------------------------------------------------------------
 10135                                  ;
 10136                                  ; Procedure : $Std_Con_Input_No_Echo
 10137                                  ;
 10138                                  ;----------------------------------------------------------------------------
 10139                                  ;
 10140                                  
 10141                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
 10142                                  
 10143                                  ; Inputs:
 10144                                  ;	None
 10145                                  ; Function:
 10146                                  ;	Input character from console, no echo
 10147                                  ; Returns:
 10148                                  ;	AL = character
 10149                                  
 10150 00001357 1E                      	push	ds
 10151 00001358 56                      	push	si
 10152                                  INTEST:
 10153 00001359 E8F23C                  	call	STATCHK
 10154 0000135C 753B                    	jnz	short GET ; 08/09/2018
 10155                                  ;*************************************************************************
 10156                                  ;hkn; SS override
 10157 0000135E 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
 10158 00001364 7505                    	jnz	short no_sys_wait
 10159 00001366 B405                    	mov	ah,5			; get input status with system wait
 10160 00001368 E82A30                  	call	IOFUNC
 10161                                  no_sys_wait:
 10162                                  ;**************************************************************************
 10163 0000136B B484                    	MOV	AH,84h
 10164 0000136D CD2A                    	INT	int_IBM	 ; int 2Ah
 10165                                  
 10166                                  ;;; 7/15/86  update the date in the idle loop
 10167                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
 10168                                  ;;;;		 to shorten loop in consideration of the PC Convertible
 10169                                  
 10170                                  ;hkn; SS override
 10171 0000136F 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
 10172 00001375 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
 10173                                  
 10174 00001377 50                      	PUSH	AX
 10175 00001378 53                      	PUSH	BX			; following is tricky,
 10176 00001379 51                      	PUSH	CX			; it may be called by critical handler
 10177 0000137A 52                      	PUSH	DX			; at that time, DEVCALL is used by
 10178                                  					; other's READ or WRITE
 10179 0000137B 1E                      	PUSH	DS			; save DS = SFT's segment
 10180                                  
 10181                                  ;hkn; READTIME must use ds = DOSDATA
 10182                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
 10183                                  
 10184 0000137C 16                      	PUSH	SS ; 04/05/2019
 10185 0000137D 1F                      	POP	DS
 10186                                  
 10187 0000137E B80000                  	MOV	AX,0			; therefore, we save DEVCALL
 10188 00001381 E89102                  	CALL	Save_Restore_Packet	; save DEVCALL packet
 10189                                  	;invoke	READTIME		; readtime
 10190 00001384 E883F7                  	call	READTIME
 10191 00001387 B80100                  	MOV	AX,1
 10192 0000138A E88802                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
 10193                                  
 10194                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
 10195                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
 10196                                  ;	push	bx
 10197                                  ;	mov	bx,DATE_FLAG
 10198                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
 10199                                  ;	cmp	word [cs:bx],5872h
 10200                                  ;	jz	short FETCHI_TAG_chk_ok
 10201                                  ;	call	DOSINIT
 10202                                  ;FETCHI_TAG_chk_ok:
 10203                                  ;	pop	bx
 10204                                  
 10205 0000138D 1F                      	POP	DS			; restore DS
 10206 0000138E 5A                      	POP	DX
 10207 0000138F 59                      	POP	CX
 10208 00001390 5B                      	POP	BX
 10209 00001391 58                      	POP	AX
 10210                                  NoUpdate:
 10211                                  
 10212                                  ;hkn; SS override
 10213 00001392 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10214                                  
 10215                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10216 00001397 EBC0                    	JMP	short INTEST
 10217                                  GET:
 10218 00001399 30E4                    	XOR	AH,AH
 10219 0000139B E8F72F                  	call	IOFUNC
 10220 0000139E 5E                      	POP	SI
 10221 0000139F 1F                      	POP	DS
 10222                                  ;;; 7/15/86
 10223                                  
 10224                                  ;hkn; SS override
 10225                                  	; MSDOS 6.0
 10226 000013A0 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10227                                  	;
 10228 000013A6 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10229 000013A8 7505                    	JNZ	short noscan
 10230                                  
 10231                                  ;hkn; SS override
 10232                                  	;MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10233                                  	; 20/06/2023
 10234 000013AA 36FE06[900D]            	inc	byte [SS:SCAN_FLAG]
 10235                                  noscan:
 10236 000013AF C3                      	retn
 10237                                  ;
 10238                                  ;----------------------------------------------------------------------------
 10239                                  ;
 10240                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10241                                  ;
 10242                                  ;
 10243                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10244                                  ;	EXIT	none
 10245                                  ;	USES	ALL
 10246                                  ;
 10247                                  ;----------------------------------------------------------------------------
 10248                                  ;
 10249                                  
 10250                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10251                                  
 10252 000013B0 89D6                    	mov	si,dx
 10253                                  STRING_OUT1:	
 10254 000013B2 AC                      	lodsb
 10255 000013B3 3C24                    	cmp	al,'$'
 10256 000013B5 74F8                    	je	short noscan
 10257                                  NEXT_STR1:
 10258 000013B7 E88702                  	call	OUTT
 10259 000013BA EBF6                    	jmp	short STRING_OUT1
 10260                                  
 10261                                  ;----------------------------------------------------------------------------
 10262                                  ;
 10263                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10264                                  ;
 10265                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10266                                  ;
 10267                                  ;	ENTRY	(ds:dx) = input buffer
 10268                                  ;	EXIT	none
 10269                                  ;	USES	ALL
 10270                                  ;
 10271                                  ;----------------------------------------------------------------------------
 10272                                  
 10273                                  	; 15/01/2024
 10274                                  
 10275                                  _$STD_CON_STRING_INPUT:		;System call 10
 10276                                  
 10277                                  	; 15/01/2024
 10278                                  	;mov	ax,ss
 10279                                  	;mov	es,ax
 10280 000013BC 16                      	push	ss
 10281 000013BD 07                      	pop	es
 10282                                  
 10283 000013BE 89D6                    	mov	si,dx
 10284 000013C0 30ED                    	xor	ch,ch
 10285 000013C2 AD                      	lodsw
 10286                                  
 10287                                  ;	(AL) = the buffer length
 10288                                  ;	(AH) = the template length
 10289                                  
 10290 000013C3 08C0                            or	al,al
 10291 000013C5 74E8                            jz	short noscan	;Buffer is 0 length!!?
 10292 000013C7 88E3                    	mov	bl,ah		;Init template counter
 10293 000013C9 88EF                            mov	bh,ch		;Init template counter
 10294                                  
 10295                                  ;	(BL) = the number of bytes in the template
 10296                                  
 10297 000013CB 38D8                            cmp	al,bl
 10298 000013CD 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10299 000013CF 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10300 000013D2 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10301                                  
 10302                                  ; The number of chars in the template is >= the number of chars in buffer or
 10303                                  ; there is no CR at the end of the template. This is an inconsistant state
 10304                                  ; of affairs. Pretend that the template was empty:
 10305                                  ;
 10306                                  
 10307                                  NOEDIT:	
 10308 000013D4 88EB                    	mov	bl,ch		;Reset buffer
 10309                                  EDITON: 
 10310 000013D6 88C2                    	mov	dl,al
 10311 000013D8 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10312                                  
 10313                                  ;	Top level. We begin to read a line in.
 10314                                  
 10315                                  NEWLIN: 
 10316 000013D9 36A0[F901]              	mov	al,[SS:CARPOS]
 10317 000013DD 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10318                                  
 10319 000013E1 56                      	push	si
 10320 000013E2 BF[FB01]                	mov	di,INBUF ;Build the new line here
 10321 000013E5 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10322 000013EA 88EF                    	mov	bh,ch		;No chars from template yet
 10323 000013EC 88EE                    	mov	dh,ch		;No chars to new line yet
 10324 000013EE E866FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10325 000013F1 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10326 000013F3 7503                    	jnz	short GOTCH
 10327                                  
 10328                                  ;	This is the main loop of reading in a character and processing it.
 10329                                  ;
 10330                                  ;	(BH) = the index of the next byte in the template
 10331                                  ;	(BL) = the length of the template
 10332                                  ;	(DH) = the number of bytes in the buffer
 10333                                  ;	(DL) = the length of the buffer
 10334                                  
 10335                                  GETCH:
 10336 000013F5 E85FFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10337                                  GOTCH:
 10338                                  ;
 10339                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10340                                  ; input queue.
 10341                                  ;
 10342 000013F8 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10343 000013FA 74F9                    	jz	short GETCH
 10344                                  
 10345                                  ;	If the leading char is the function-key lead byte
 10346                                  
 10347                                  	;cmp	al,[SS:ESCCHAR]
 10348                                  
 10349                                  	; 04/05/2019 - Retro DOS v4.0
 10350                                  
 10351                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10352                                  
 10353 000013FC 2E3A06[140A]            	CMP	AL,[cs:ESCCHAR]
 10354 00001401 7439                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10355                                  
 10356                                  ;	Rubout and ^H are both destructive backspaces.
 10357                                  
 10358 00001403 3C7F                            cmp	al,c_DEL ; 7FH
 10359                                          ;jz	short BACKSPJ
 10360                                          ; 15/01/2024
 10361 00001405 7466                    	je	short BACKSP
 10362 00001407 3C08                    	cmp	al,c_BS  ; 8
 10363                                          ;jz	short BACKSPJ
 10364                                          ; 15/01/2024
 10365 00001409 7462                    	je	short BACKSP
 10366                                  
 10367                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10368                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10369                                  	;	   	after CMP and a CMP again!
 10370                                  	;		
 10371                                  	;		-It would be better if they use a 'JMP short' to 
 10372                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10373                                  	;		between them. Then, they would be able use a patch
 10374                                  	;		between 5271h and 5279h when if it will be required.
 10375                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10376                                  	;	
 10377                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10378                                  
 10379                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10380                                  	;
 10381                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10382                                  
 10383                                  ;DOSCODE:526D	cmp     al, 8
 10384                                  ;DOSCODE:526F	jz      short BACKSPJ
 10385                                  ;DOSCODE:5271	cmp     al, 17h
 10386                                  ;DOSCODE:5273	nop
 10387                                  ;DOSCODE:5274	nop
 10388                                  ;DOSCODE:5275	cmp     al, 15h
 10389                                  ;DOSCODE:5277	nop
 10390                                  ;DOSCODE:5278	nop
 10391                                  ;DOSCODE:5279	cmp     al, 0Dh
 10392                                  ;DOSCODE:527B	jz      short ENDLIN
 10393                                  ;DOSCODE:527D	cmp     al, 0Ah
 10394                                  ;DOSCODE:527F	jz      short PHYCRLF
 10395                                  	
 10396                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10397                                  	; DOSCODE:525Dh
 10398                                  
 10399                                  ; 16/12/2022
 10400                                  %if 0
 10401                                  	; MSDOS 6.0
 10402                                  ;	^W deletes backward once and then backs up until a letter is before the
 10403                                  ;	cursor
 10404                                  
 10405                                  	CMP     AL,"W"-"@" ; 17h
 10406                                  
 10407                                  ;	The removal of the comment characters before the jump statement will
 10408                                  ;	cause ^W to backup a word.
 10409                                  
 10410                                  ;***	JZ	short WordDel
 10411                                  	NOP
 10412                                  	NOP
 10413                                  
 10414                                  	CMP     AL,"U"-"@" ; 15h
 10415                                  
 10416                                  ;	The removal of the comment characters before the jump statement will
 10417                                  ;	cause ^U to clear a line.
 10418                                  
 10419                                  ;***	JZ	short LineDel
 10420                                  	NOP
 10421                                  	NOP
 10422                                  
 10423                                  %endif
 10424                                  
 10425                                  ;	CR terminates the line.
 10426                                  
 10427 0000140B 3C0D                            cmp	al,c_CR ; 0Dh
 10428 0000140D 7430                            jz	short ENDLIN
 10429                                  
 10430                                  ;	LF goes to a new line and keeps on reading.
 10431                                  
 10432 0000140F 3C0A                            cmp	al,c_LF ; 0Ah
 10433 00001411 7442                    	jz	short PHYCRLF
 10434                                  
 10435                                  ;	^X (or ESC) deletes the line and starts over
 10436                                  
 10437                                  	; MSDOS 3.3
 10438                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10439                                  	;jz	short KILNEW
 10440                                  
 10441                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10442                                  
 10443                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10444                                  
 10445 00001413 2E3A06[130A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10446 00001418 7440                    	jz	short KILNEW
 10447                                  	
 10448                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10449                                  	;jz	short KILNEW
 10450                                  
 10451                                  ; Otherwise, we save the input character.
 10452                                  
 10453                                  SAVCH:	
 10454 0000141A 38D6                    	cmp	dh,dl
 10455 0000141C 7317                    	jnb	short BUFFUL		; buffer is full.
 10456 0000141E AA                              stosb
 10457 0000141F FEC6                    	inc	dh                      ; increment count in buffer.
 10458 00001421 E8B102                  	call	BUFOUT			; Print control chars nicely
 10459                                  
 10460 00001424 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10461 0000142A 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10462 0000142C 38DF                            cmp	bh,bl
 10463 0000142E 73C5                            jnb	short GETCH		; no more characters in template
 10464 00001430 46                              inc	si                      ; Skip to next char in template
 10465 00001431 FEC7                            inc	bh                      ; remember position in template
 10466 00001433 EBC0                            jmp	short GETCH
 10467                                  
 10468                                  	; 15/01/2024
 10469                                  ;BACKSPJ: 
 10470                                  	;jmp	short BACKSP
 10471                                  
 10472                                  BUFFUL: 
 10473 00001435 B007                    	mov	al, 7			; Bell to signal full buffer
 10474 00001437 E80702                  	call	OUTT
 10475 0000143A EBB9                    	jmp	short GETCH
 10476                                  
 10477                                  ESCAPE: 
 10478                                  	;transfer OEMFunctionKey
 10479 0000143C E900F6                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10480                                  
 10481                                  ENDLIN:
 10482 0000143F AA                              stosb				; Put the CR in the buffer
 10483 00001440 E8FE01                  	call	OUTT                    ; Echo it
 10484 00001443 5F                              pop	di                      ; Get start of user buffer
 10485 00001444 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10486 00001447 FEC6                            inc	dh			; DH is length including CR
 10487                                  
 10488                                  COPYNEW:
 10489                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10490                                  	;mov	bp, es
 10491                                  	;mov	bx, ds
 10492                                  	;mov	es, bx
 10493                                  	;mov	ds, bp
 10494                                  	;mov	si, INBUF
 10495                                  	;mov	cl, dh
 10496                                  	;rep	movsb
 10497                                  	;retn
 10498                                  
 10499                                  	; CPMIO.ASM (MSDOS 6.0)
 10500                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10501                                  	;SAVE	<DS,ES>
 10502 00001449 1E                      	PUSH	DS
 10503 0000144A 06                      	PUSH	ES
 10504                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10505 0000144B 1F                      	POP	DS
 10506 0000144C 07                      	POP	ES
 10507                                  
 10508                                  ;;hkn; INBUF is in DOSDATA
 10509 0000144D BE[FB01]                        MOV     SI,INBUF
 10510 00001450 88F1                            MOV     CL,DH                   ; set up count
 10511 00001452 F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10512                                  OLDBAK_RETN:
 10513 00001454 C3                              RETN
 10514                                  
 10515                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10516                                  
 10517                                  PHYCRLF:
 10518 00001455 E81B01                  	CALL	CRLF
 10519 00001458 EB9B                            JMP	short GETCH
 10520                                  
 10521                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10522                                  
 10523                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10524                                  
 10525                                  	; Note: Following routines were not used in IBMDOS.COM
 10526                                  	;	-CRTL+W, CRTL+U is not activated-
 10527                                  	;	but they were in the kernel code!?)
 10528                                  
 10529                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10530                                  	; DOSCODE:52B6h
 10531                                  
 10532                                  ;;;;;;;;
 10533                                  
 10534                                  ; 16/12/2022
 10535                                  %if 0
 10536                                  ;
 10537                                  ; Delete the previous line
 10538                                  ;
 10539                                  LineDel:
 10540                                  	OR      DH,DH
 10541                                  	JZ	short GETCH	 ; 06/12/2022
 10542                                  	Call    BackSpace
 10543                                  	JMP	short LineDel
 10544                                  
 10545                                  %endif
 10546                                  
 10547                                  ;
 10548                                  ; delete the previous word.
 10549                                  ;
 10550                                  WordDel:
 10551                                  WordLoop:
 10552                                  ;	Call    BackSpace               ; backspace the one spot
 10553                                  ;	OR      DH,DH
 10554                                  ;	JZ	short GetChj
 10555                                  ;	MOV     AL,[ES:DI-1]
 10556                                  ;	cmp     al,'0'
 10557                                  ;	jb	short GetChj
 10558                                  ;	cmp     al,'9'
 10559                                  ;	jbe	short WordLoop
 10560                                  ;	OR      AL,20h
 10561                                  ;	CMP     AL,'a'
 10562                                  ;	JB	short GetChj
 10563                                  ;	CMP     AL,'z'
 10564                                  ;	JBE	short WordLoop
 10565                                  ;GetChj: 
 10566                                  ;	JMP	GETCH
 10567                                  
 10568                                  ; 16/12/2022
 10569                                  %if 0
 10570                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10571                                  	; (Worddel is not called or jumped from anywhere!)
 10572                                  WordDel:
 10573                                  WordLoop:
 10574                                  	Call    BackSpace               ; backspace the one spot
 10575                                  	OR      DH,DH
 10576                                  	JZ	short GetChj
 10577                                  	MOV     AL,[ES:DI-1]
 10578                                  	cmp     al,'0'
 10579                                  	jb	short GetChj
 10580                                  	cmp     al,'9'
 10581                                  	jbe	short WordLoop
 10582                                  	OR      AL,20h
 10583                                  	CMP     AL,'a'
 10584                                  	JB	short GetChj
 10585                                  	CMP     AL,'z'
 10586                                  	JBE	short WordLoop
 10587                                  GetChj: 
 10588                                  	JMP	GETCH
 10589                                  
 10590                                  %endif
 10591                                  
 10592                                  ;;;;;;;;
 10593                                  
 10594                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10595                                  
 10596                                  ; The user wants to throw away what he's typed in and wants to start over.
 10597                                  ; We print the backslash and then go to the next line and tab to the correct
 10598                                  ; spot to begin the buffered input.
 10599                                  
 10600                                  KILNEW:
 10601 0000145A B05C                            mov	al,'\'
 10602 0000145C E8E201                          call	OUTT            ;Print the CANCEL indicator
 10603 0000145F 5E                              pop	si		;Remember start of edit buffer
 10604                                  PUTNEW:
 10605 00001460 E81001                  	call	CRLF            ;Go to next line on screen
 10606 00001463 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10607 00001467 E84B02                  	call	TAB             ;Tab over
 10608 0000146A E96CFF                          JMP     NEWLIN		;Start over again
 10609                                  
 10610                                  ;	Destructively back up one character position
 10611                                  
 10612                                  BACKSP:
 10613                                  	; 09/09/2018
 10614 0000146D E80800                  	Call    BackSpace
 10615 00001470 EB83                    	JMP     short GETCH	; 15/01/2024
 10616                                  
 10617                                  	; 15/01/2024
 10618                                  ;User really wants an ESC character in his line
 10619                                  TWOESC:	
 10620 00001472 2EA0[140A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10621 00001476 EBA2                    	jmp	short SAVCH
 10622                                  
 10623                                  BackSpace:
 10624 00001478 08F6                    	or	dh,dh
 10625 0000147A 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10626 0000147C E85800                  	call	BACKUP          ;Do the backup
 10627 0000147F 268A05                  	mov	al,[es:di]	;Get the deleted char
 10628 00001482 3C20                            cmp	al,20h	; ' '
 10629 00001484 730F                    	jnb	short OLDBAK	;Was a normal char
 10630 00001486 3C09                            cmp	al,c_HT ; 9
 10631 00001488 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10632                                  ;; 9/27/86 fix for ctrl-U backspace
 10633 0000148A 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10634 0000148C 7407                    	JZ	short OLDBAK
 10635 0000148E 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10636 00001490 7403                    	JZ	short OLDBAK
 10637                                  ;; 9/27/86 fix for ctrl-U backspace
 10638 00001492 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10639                                  OLDBAK:
 10640 00001495 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10641 0000149B 75B7                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10642 0000149D 08FF                    	or	bh,bh
 10643 0000149F 74B3                            jz	short OLDBAK_RETN 
 10644                                  				;Not advanced in template, stay where we are
 10645 000014A1 FECF                    	dec	bh		;Go back in template
 10646 000014A3 4E                              dec	si
 10647 000014A4 C3                      	retn
 10648                                  BAKTAB:
 10649 000014A5 57                              push	di
 10650 000014A6 4F                              dec	di		;Back up one char
 10651 000014A7 FD                              std			;Go backward
 10652 000014A8 88F1                            mov	cl,dh		;Number of chars currently in line
 10653 000014AA B020                            mov	al,20h	; ' '
 10654 000014AC 53                              push	bx
 10655 000014AD B307                            mov	bl,7		;Max
 10656 000014AF E30E                            jcxz	FIGTAB		;At start, do nothing
 10657                                  FNDPOS:
 10658 000014B1 AE                              scasb			;Look back
 10659 000014B2 7609                    	jbe	short CHKCNT
 10660 000014B4 26807D0109              	cmp	byte [es:di+1],9
 10661 000014B9 7409                    	jz	short HAVTAB	;Found a tab
 10662 000014BB FECB                    	dec	bl		;Back one char if non tab control char
 10663                                  CHKCNT:
 10664 000014BD E2F2                            loop	FNDPOS
 10665                                  FIGTAB:		
 10666 000014BF 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10667                                  HAVTAB:
 10668 000014C4 28F3                    	sub	bl,dh
 10669 000014C6 00D9                    	add	cl,bl
 10670 000014C8 80E107                  	and	cl,7		;CX has correct number to erase
 10671 000014CB FC                      	cld			;Back to normal
 10672 000014CC 5B                      	pop	bx
 10673 000014CD 5F                      	pop	di
 10674 000014CE 74C5                    	jz	short OLDBAK	;Nothing to erase
 10675                                  TABBAK:
 10676 000014D0 E80700                  	call	BACKMES
 10677 000014D3 E2FB                    	loop	TABBAK		;Erase correct number of chars
 10678 000014D5 EBBE                    	jmp	short OLDBAK
 10679                                  
 10680                                  BACKUP:
 10681 000014D7 FECE                            dec	dh		;Back up in line
 10682 000014D9 4F                              dec	di
 10683                                  BACKMES:
 10684 000014DA B008                            mov	al,c_BS ; 8	;Backspace
 10685 000014DC E86201                          call	OUTT
 10686 000014DF B020                            mov	al,20h ; ' '	;Erase
 10687 000014E1 E85D01                          call	OUTT
 10688 000014E4 B008                            mov	al,c_BS ; 8	;Backspace
 10689 000014E6 E95801                  	jmp	OUTT		;Done
 10690                                  
 10691                                  	; 15/01/2024
 10692                                  ;User really wants an ESC character in his line
 10693                                  ;TWOESC:	
 10694                                  ;	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10695                                  ;	jmp	SAVCH
 10696                                  
 10697                                  ;Copy the rest of the template
 10698                                  COPYLIN:
 10699 000014E9 88D9                            mov	cl,bl		;Total size of template
 10700 000014EB 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10701 000014ED EB07                            jmp	short COPYEACH
 10702                                  
 10703                                  COPYSTR:
 10704 000014EF E83200                  	call	FINDOLD         ;Find the char
 10705 000014F2 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10706                                  
 10707                                  ;Copy one char from template to line
 10708                                  COPYONE:
 10709 000014F4 B101                            mov	cl,1
 10710                                  ;Copy CX chars from template to line
 10711                                  COPYEACH:
 10712 000014F6 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10713 000014FC 38D6                    	cmp	dh,dl
 10714 000014FE 740F                            jz	short GETCH2		;At end of line, can't do anything
 10715 00001500 38DF                            cmp	bh,bl
 10716 00001502 740B                            jz	short GETCH2		;At end of template, can't do anything
 10717 00001504 AC                              lodsb
 10718 00001505 AA                              stosb
 10719 00001506 E8CC01                  	call	BUFOUT
 10720 00001509 FEC7                            inc	bh			;Ahead in template
 10721 0000150B FEC6                            inc	dh			;Ahead in line
 10722 0000150D E2E7                            loop	COPYEACH
 10723                                  GETCH2:
 10724 0000150F E9E3FE                          jmp	GETCH
 10725                                  
 10726                                  ;Skip one char in template
 10727                                  SKIPONE:
 10728 00001512 38DF                    	cmp	bh,bl
 10729 00001514 74F9                    	jz	short GETCH2		;At end of template
 10730 00001516 FEC7                    	inc	bh			;Ahead in template
 10731 00001518 46                      	inc	si
 10732                                          ;jmp	GETCH
 10733                                  	; 15/01/2024
 10734 00001519 EBF4                    	jmp	short GETCH2
 10735                                  
 10736                                  SKIPSTR:
 10737 0000151B E80600                  	call	FINDOLD                 ;Find out how far to go
 10738 0000151E 01CE                            add	si,cx			;Go there
 10739 00001520 00CF                            add	bh,cl
 10740                                          ;jmp	GETCH
 10741                                  	; 15/01/2024
 10742 00001522 EBEB                    	jmp	short GETCH2
 10743                                  
 10744                                  ;Get the next user char, and look ahead in template for a match
 10745                                  ;CX indicates how many chars to skip to get there on output
 10746                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10747                                  ;       address is popped off and a jump to GETCH is taken.
 10748                                  ;       Make sure nothing extra on stack when this routine
 10749                                  ;       is called!!! (no PUSHes before calling it).
 10750                                  
 10751                                  FINDOLD:
 10752 00001524 E830FE                          call	_$STD_CON_INPUT_NO_ECHO
 10753                                  
 10754                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10755                                  
 10756                                  	;CMP	AL,[SS:ESCCHAR]	
 10757                                  	;JNZ	SHORT FINDSETUP
 10758                                  
 10759                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10760                                  
 10761                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10762                                  
 10763 00001527 2E3A06[140A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10764 0000152C 7505                    	JNZ	SHORT FINDSETUP		; no, set up for scan
 10765                                  
 10766 0000152E E826FE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10767 00001531 EB1D                            JMP	SHORT NOTFND		; go try again
 10768                                  FINDSETUP:
 10769 00001533 88D9                    	mov	cl,bl
 10770 00001535 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10771 00001537 7417                    	jz	short NOTFND	;At end of template
 10772 00001539 49                              dec	cx		;Cannot point past end, limit search
 10773 0000153A 7414                            jz	short NOTFND	;If only one char in template, forget it
 10774 0000153C 06                      	push	es
 10775 0000153D 1E                      	push	ds
 10776 0000153E 07                      	pop	es
 10777 0000153F 57                      	push	di
 10778 00001540 89F7                    	mov	di,si		;Template to ES:DI
 10779 00001542 47                      	inc	di
 10780 00001543 F2AE                    	repne	scasb		;Look
 10781 00001545 5F                      	pop	di
 10782 00001546 07                      	pop	es
 10783 00001547 7507                    	jnz	short NOTFND	;Didn't find the char
 10784 00001549 F6D1                            not	cl		;Turn how far to go into how far we went
 10785 0000154B 00D9                            add	cl,bl		;Add size of template
 10786 0000154D 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10787                                  FINDOLD_RETN:
 10788 0000154F C3                      	retn
 10789                                  
 10790                                  NOTFND:
 10791 00001550 5D                      	pop	bp              ;Chuck return address
 10792                                  	;jmp	GETCH
 10793                                  	; 15/01/2024
 10794                                  GETCH2_j:
 10795 00001551 EBBC                    	jmp	short GETCH2
 10796                                  
 10797                                  REEDIT:
 10798 00001553 B040                    	mov	al,'@'		;Output re-edit character
 10799 00001555 E8E900                  	call	OUTT
 10800 00001558 5F                      	pop	di
 10801 00001559 57                      	push	di
 10802 0000155A 06                      	push	es
 10803 0000155B 1E                      	push	ds
 10804 0000155C E8EAFE                  	call	COPYNEW		;Copy current line into template
 10805 0000155F 1F                      	pop	ds
 10806 00001560 07                      	pop	es
 10807 00001561 5E                      	pop	si
 10808 00001562 88F3                    	mov	bl,dh		;Size of line is new size template
 10809 00001564 E9F9FE                  	jmp	PUTNEW		;Start over again
 10810                                  
 10811                                  EXITINS:
 10812                                  ENTERINS:
 10813 00001567 36F616[7905]            	not	byte [SS:INSMODE]
 10814                                  	;jmp	GETCH
 10815                                  	; 15/01/2024
 10816 0000156C EBE3                    	jmp	short GETCH2_j
 10817                                  
 10818                                  ;Put a real live ^Z in the buffer (embedded)
 10819                                  CTRLZ:
 10820 0000156E B01A                    	mov	al,"Z"-"@" ; 1Ah
 10821 00001570 E9A7FE                          jmp	SAVCH
 10822                                  
 10823                                  ;Output a CRLF
 10824                                  CRLF:
 10825 00001573 B00D                    	mov	al,c_CR ; 0Dh 
 10826 00001575 E8C900                  	call	OUTT
 10827 00001578 B00A                    	mov	al,c_LF ; 0Ah
 10828 0000157A E9C400                  	jmp	OUTT
 10829                                  
 10830                                  ;
 10831                                  ;----------------------------------------------------------------------------
 10832                                  ;
 10833                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10834                                  ;
 10835                                  ;	Input or output raw character from console, no echo
 10836                                  ;
 10837                                  ;	ENTRY	DL = -1 if input
 10838                                  ;		   =  output character if output
 10839                                  ;	EXIT	(AL) = input character if input
 10840                                  ;	USES	all
 10841                                  ;
 10842                                  ;----------------------------------------------------------------------------
 10843                                  ; 20/07/2018 - Retro DOS v3.0
 10844                                  
 10845                                  ; 04/05/2019 - Retro DOS v4.0
 10846                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10847                                  
 10848                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10849                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10850                                  
 10851                                  _$RAW_CON_IO:			; System call 6
 10852 0000157D 88D0                    	MOV	AL,DL
 10853 0000157F 3CFF                    	CMP	AL,-1
 10854 00001581 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10855                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10856                                  	;jz	short rci1
 10857                                  	;jmp	short RAWOUT
 10858                                  	; 16/12/202
 10859                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10860                                  	;nop
 10861                                  rci1:
 10862                                  			; Get pointer to register save area
 10863 00001583 36C43E[8405]            	LES	DI,[SS:USER_SP] ; 12/03/2018
 10864 00001588 31DB                    	XOR	BX,BX
 10865                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10866 0000158A E80120                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10867                                          ;JC	SHORT RET17
 10868 0000158D 72C0                            jc	short FINDOLD_RETN
 10869 0000158F B401                    	MOV	AH,1
 10870 00001591 E8012E                  	CALL	IOFUNC
 10871 00001594 750B                    	JNZ	SHORT RESFLG
 10872 00001596 E8873A                  	CALL	SPOOLINT
 10873                                  	;OR	BYTE [ES:DI+16H],40H
 10874 00001599 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10875 0000159E 30C0                    	XOR	AL,AL
 10876                                  RET17:
 10877 000015A0 C3                      	RETN
 10878                                  
 10879                                  RESFLG:
 10880                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10881 000015A1 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10882                                  				; Reset user's zero flag
 10883                                  ;RILP:
 10884                                  rci0:
 10885 000015A6 E8773A                  	CALL	SPOOLINT
 10886                                  ;
 10887                                  ;----------------------------------------------------------------------------
 10888                                  ;
 10889                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10890                                  ;
 10891                                  ;	Input raw character from console, no echo
 10892                                  ;
 10893                                  ;	ENTRY	none
 10894                                  ;	EXIT	(al) = character
 10895                                  ;	USES	all
 10896                                  ;
 10897                                  ;----------------------------------------------------------------------------
 10898                                  ;
 10899                                  
 10900                                  ;rci0:	invoke	SPOOLINT
 10901                                  
 10902                                  	;entry	$RAW_CON_INPUT
 10903                                  
 10904                                  	; 04/05/2019 - Retro DOS v4.0
 10905                                  
 10906                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10907                                  
 10908                                  _$RAW_CON_INPUT:		; System call 7
 10909 000015A9 53                      	push	bx
 10910 000015AA 31DB                    	XOR	BX,BX
 10911                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10912 000015AC E8DF1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10913 000015AF 5B                      	pop	bx
 10914 000015B0 72EE                    	JC	SHORT RET17
 10915 000015B2 B401                    	MOV	AH,1
 10916 000015B4 E8DE2D                  	CALL	IOFUNC
 10917                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10918                                  	;XOR	AH,AH
 10919                                          ;CALL	IOFUNC
 10920                                          ;RETN
 10921 000015B7 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10922 000015B9 B484                    	MOV	AH,84h
 10923 000015BB CD2A                    	INT	int_IBM  ; int 2Ah
 10924 000015BD EBE7                    	JMP	short rci0
 10925                                  rci5:	
 10926 000015BF 30E4                    	XOR	AH,AH
 10927                                  	;CALL	IOFUNC
 10928                                  	;RETN
 10929                                  	; 18/12/2022
 10930 000015C1 E9D12D                  	jmp	IOFUNC
 10931                                  
 10932                                  ;       Output the character in AL to stdout
 10933                                  ;
 10934                                  	;entry	RAWOUT
 10935                                  RAWOUT:
 10936 000015C4 53                      	PUSH    BX
 10937 000015C5 BB0100                  	MOV     BX,1
 10938                                  
 10939                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10940 000015C8 E8C31F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10941 000015CB 721B                    	JC	SHORT RAWRET1
 10942                                  
 10943                                  	;
 10944                                  	; MSDOS 2.11
 10945                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10946                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10947                                          ;PUSH	DS
 10948                                          ;PUSH	SI
 10949                                          ;LDS	SI,[SI+19H]		; output to special?
 10950                                  	;TEST	BYTE [SI+4],ISSPEC
 10951                                  	;POP	SI
 10952                                  	;
 10953                                          
 10954                                  	; MSDOS 3.3 & MSDOS 6.0
 10955                                  	;mov	bx,[si+5]
 10956 000015CD 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10957                                   ;
 10958                                   ; If we are a network handle OR if we are not a local device then go do the
 10959                                   ; output the hard way.
 10960                                   ;	
 10961                                  	;and	bx,8080h
 10962 000015D0 81E38080                	AND	BX,sf_isnet+devid_device
 10963                                  	;cmp	bx,80h
 10964 000015D4 81FB8000                	CMP	BX,devid_device
 10965 000015D8 7510                    	jnz     short RAWNORM
 10966 000015DA 1E                      	push    ds
 10967                                  	;lds	bx,[si+7]
 10968 000015DB C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10969                                  	;test	byte [bx+4],10h
 10970 000015DE F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10971                                  	;
 10972                                  
 10973 000015E2 1F                      	POP	DS
 10974 000015E3 7405                    	JZ	SHORT RAWNORM		; if not, do normally
 10975                                  
 10976 000015E5 CD29                    	INT	int_fastcon  ; int 29h	; quickly output the char
 10977                                  
 10978                                  	;JMP	SHORT RAWRET
 10979                                  ;RAWNORM:
 10980                                  ;	CALL    RAWOUT3
 10981                                  RAWRET: 
 10982 000015E7 F8                      	CLC
 10983                                  RAWRET1:
 10984 000015E8 5B                      	POP     BX
 10985                                  RAWRET2:
 10986 000015E9 C3                      	RETN
 10987                                  RAWNORM:
 10988 000015EA E80700                  	CALL    RAWOUT3
 10989 000015ED EBF8                    	jmp	short RAWRET
 10990                                  
 10991                                  ;	Output the character in AL to handle in BX
 10992                                  ;
 10993                                  ;	entry	RAWOUT2
 10994                                  
 10995                                  RAWOUT2:
 10996                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10997                                  	;JC	SHORT RET18
 10998 000015EF E89C1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10999 000015F2 72F5                    	JC	SHORT RAWRET2
 11000                                  RAWOUT3:
 11001 000015F4 50                      	PUSH	AX
 11002 000015F5 EB0C                    	JMP	SHORT RAWOSTRT
 11003                                  ROLP:
 11004 000015F7 E8263A                  	CALL	SPOOLINT
 11005                                  
 11006                                  	; 01/05/2019 - Retro DOS v4.0
 11007                                  
 11008                                  	; MSDOS 6.0
 11009                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 11010                                  	; 17/12/2022
 11011 000015FA 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h
 11012                                  	;or	word [ss:DOS34_FLAG],200h
 11013                                  				;AN002; set control break
 11014                                  	;invoke DSKSTATCHK
 11015 00001600 E89C39                  	call	DSKSTATCHK	;AN002; check control break
 11016                                  RAWOSTRT:
 11017 00001603 B403                    	MOV	AH,3
 11018 00001605 E88D2D                  	CALL	IOFUNC
 11019 00001608 74ED                    	JZ	SHORT ROLP
 11020                                  
 11021                                  	; MSDOS 6.0
 11022                                  ;SR;
 11023                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 11024                                  ;the user failed. We do not send a char if this happens. We however return
 11025                                  ;to the caller with carry clear because this DOS call does not return any
 11026                                  ;status. 
 11027                                  ;
 11028 0000160A 40                      	inc	ax		;fail on I24 if ax = -1
 11029 0000160B 58                      	POP	AX
 11030 0000160C 7405                    	jz	short nosend	;yes, do not send char
 11031 0000160E B402                    	MOV	AH,2
 11032 00001610 E8822D                  	call	IOFUNC
 11033                                  nosend:
 11034 00001613 F8                      	CLC			; Clear carry indicating successful
 11035 00001614 C3                      	retn
 11036                                  
 11037                                  	; MSDOS 3.3 & MSDOS 2.11
 11038                                  	;POP	AX
 11039                                  	;MOV	AH,2
 11040                                          ;CALL	IOFUNC
 11041                                  	;CLC			; Clear carry indicating successful
 11042                                  ;RET18:    
 11043                                  	;RETN
 11044                                  
 11045                                  ;;10/08/2018
 11046                                  ; 20/07/2018 - Retro DOS v3.0
 11047                                  ; ---------------------------------------------------------------------------
 11048                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 11049                                  ; ---------------------------------------------------------------------------
 11050                                  
 11051                                  ; This routine is called at DOS init
 11052                                  
 11053                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 11054                                  ;;OUTMES:
 11055                                  ;;	;LODS	CS:BYTE PTR [SI]
 11056                                  ;;	CS	LODSB
 11057                                  ;;	CMP     AL,"$" ; 24h
 11058                                  ;;	JZ	SHORT RET18
 11059                                  ;;	CALL	OUTT
 11060                                  ;;	JMP     SHORT OUTMES
 11061                                  
 11062                                  ; ---------------------------------------------------------------------------
 11063                                  
 11064                                  ; 20/07/2018 - Retro DOS v3.0
 11065                                  
 11066                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 11067                                  
 11068                                  ;
 11069                                  ;----------------------------------------------------------------------------
 11070                                  ;
 11071                                  ; Inputs:
 11072                                  ;	AX=0 save the DEVCALL request packet
 11073                                  ;	  =1 restore the DEVCALL request packet
 11074                                  ; Function:
 11075                                  ;	save or restore the DEVCALL packet
 11076                                  ; Returns:
 11077                                  ;	none
 11078                                  ;
 11079                                  ;----------------------------------------------------------------------------
 11080                                  ;
 11081                                  
 11082                                  ; 04/05/2019 - Retro DOS v4.0
 11083                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 11084                                  
 11085                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11086                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 11087                                  
 11088                                  ; 12/05/2019
 11089                                  
 11090                                  	; 15/01/2024
 11091                                  
 11092                                  Save_Restore_Packet:
 11093 00001615 1E                      	PUSH	DS
 11094 00001616 06                      	PUSH	ES
 11095 00001617 56                      	PUSH	SI
 11096 00001618 57                      	PUSH	DI
 11097                                  
 11098                                  	; 16/12/2022
 11099                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11100                                  	; 09/09/2018
 11101 00001619 BF[6C0D]                	mov	di,FAKE_STACK_2F
 11102 0000161C BE[5A03]                	mov	si,DEVCALL
 11103 0000161F BE[5A03]                	mov	si,DEVCALL
 11104                                  	;
 11105                                  	; 21/09/2023
 11106 00001622 09C0                    	or	ax,ax 
 11107                                  	;CMP	AX,0		; save packet
 11108 00001624 7402                    	JZ	short save_packet ; 16/12/2022
 11109                                  	;je	short set_seg
 11110                                  
 11111                                  	; MSDOS 6.0
 11112                                  restore_packet:
 11113                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 11114                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 11115                                  	; MSDOS 3.3
 11116                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11117                                  	;mov	di,DEVCALL  ; 09/09/2018
 11118                                  	;
 11119                                  	;JMP	short set_seg
 11120                                  
 11121                                  	; 16/12/2022	
 11122                                  	; 09/09/2018
 11123 00001626 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 11124                                  
 11125                                  ; 16/12/2022
 11126                                  %if 0
 11127                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11128                                  	cmp	ax,0		; save packet
 11129                                  	jz	short save_packet
 11130                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 11131                                  	mov	di,DEVCALL 
 11132                                  	jmp	short set_seg
 11133                                  
 11134                                  	; MSDOS 6.0
 11135                                  save_packet:
 11136                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 11137                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 11138                                  	; 09/09/2018
 11139                                  	; MSDOS 3.3
 11140                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11141                                  	;mov	si,DEVCALL ; 09/09/2018
 11142                                  
 11143                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11144                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11145                                  	mov	si,DEVCALL
 11146                                  %endif
 11147                                  
 11148                                  ; 15/01/2024
 11149                                  ; 16/12/2022
 11150                                  save_packet:
 11151                                  ;set_seg:
 11152                                  	; MSDOS 3.3
 11153                                  	;mov	ax,cs
 11154                                  
 11155                                  	; MSDOS 6.0
 11156                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 11157                                  	;MOV	DS,AX
 11158                                  	;MOV	ES,AX
 11159                                  	; 15/01/2024
 11160 00001628 16                      	push	ss
 11161 00001629 1F                      	pop	ds
 11162 0000162A 1E                      	push	ds
 11163 0000162B 07                      	pop	es
 11164                                  
 11165 0000162C B90B00                  	MOV	CX,11		; 11 words to move
 11166 0000162F F3A5                    	REP	MOVSW
 11167                                  
 11168 00001631 5F                      	POP	DI
 11169 00001632 5E                      	POP	SI
 11170 00001633 07                      	POP	ES
 11171 00001634 1F                      	POP	DS
 11172 00001635 C3                      	retn
 11173                                  
 11174                                  ;============================================================================
 11175                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 11176                                  ;============================================================================
 11177                                  ; 20/07/2018 - Retro DOS v3.0
 11178                                  ; 01/05/2019 - Retro DOS v4.0
 11179                                  
 11180                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 11181                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 11182                                  ;hkn;	not valid. 
 11183                                  
 11184                                  ;
 11185                                  ;----------------------------------------------------------------------------
 11186                                  ;
 11187                                  ;**	$STD_CON_INPUT - System Call 1
 11188                                  ;
 11189                                  ;	Input character from console, echo
 11190                                  ;
 11191                                  ;	ENTRY	none
 11192                                  ;	EXIT	(al) = character
 11193                                  ;	USES	ALL
 11194                                  ;
 11195                                  ;----------------------------------------------------------------------------
 11196                                  ;
 11197                                  
 11198                                  _$STD_CON_INPUT:	;System call 1
 11199                                  	
 11200 00001636 E81EFD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 11201 00001639 50                      	PUSH	AX
 11202 0000163A E80400                  	CALL	OUTT
 11203 0000163D 58                      	POP	AX
 11204                                  CON_INPUT_RETN:	
 11205 0000163E C3                      	RETN
 11206                                  
 11207                                  ;
 11208                                  ;----------------------------------------------------------------------------
 11209                                  ;
 11210                                  ;**	$STD_CON_OUTPUT - System Call 2
 11211                                  ;
 11212                                  ;	Output character to console
 11213                                  ;
 11214                                  ;	ENTRY	(dl) = character
 11215                                  ;	EXIT	none
 11216                                  ;	USES	all
 11217                                  ;
 11218                                  ;----------------------------------------------------------------------------
 11219                                  ;
 11220                                  
 11221                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 11222                                  
 11223                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11224                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 11225                                  
 11226                                  _$STD_CON_OUTPUT:	;System call 2
 11227                                  
 11228 0000163F 88D0                    	MOV	AL,DL
 11229                                  OUTT:
 11230 00001641 3C20                    	CMP	AL,20H ; " "
 11231 00001643 725C                    	JB	SHORT CTRLOUT
 11232 00001645 3C7F                    	CMP	AL,c_DEL ; 7Fh
 11233 00001647 7405                    	JZ	SHORT OUTCH
 11234                                  OUTCHA:	
 11235                                  	;INC	BYTE PTR [CARPOS]
 11236 00001649 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11237                                  OUTCH:
 11238 0000164E 1E                      	PUSH	DS
 11239 0000164F 56                      	PUSH	SI
 11240                                  	;INC	BYTE PTR [CHARCO]		;invoke statchk...
 11241                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11242 00001650 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11243                                  	;AND	BYTE [SS:CHARCO],00111111B
 11244                                  	; 01/05/2019 - Retro DOS v4.0
 11245 00001655 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11246 0000165B 7505                    	JNZ	SHORT OUTSKIP
 11247                                  
 11248 0000165D 50                      	PUSH	AX
 11249 0000165E E8ED39                  	CALL	STATCHK
 11250 00001661 58                      	POP	AX
 11251                                  OUTSKIP:
 11252 00001662 E85FFF                  	CALL	RAWOUT				;output the character
 11253                                  
 11254 00001665 5E                      	POP	SI
 11255 00001666 1F                      	POP	DS
 11256                                  
 11257                                  	;TEST	BYTE PTR [PFLAG],-1
 11258                                  	;retz
 11259 00001667 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11260 0000166D 74CF                    	JZ	SHORT CON_INPUT_RETN
 11261                                  
 11262 0000166F 53                      	PUSH	BX
 11263 00001670 1E                      	PUSH	DS
 11264 00001671 56                      	PUSH	SI
 11265 00001672 BB0100                  	MOV	BX,1
 11266                                  	; 20/07/2018 - Retro DOS v3.0
 11267                                  	; MSDOS 3.3
 11268                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11269 00001675 E8161F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI
 11270                                  					;hkn; to sft entry
 11271 00001678 7224                    	JC	SHORT TRIPOPJ
 11272                                  
 11273                                  	; 01/05/2019 - Retro DOS v4.0
 11274                                  
 11275                                  	;mov	bx,[si+5]
 11276 0000167A 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11277                                  	;test	bx,8000h
 11278                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11279 0000167D F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11280 00001680 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11281                                  	;;test	bx,80h
 11282                                  	;TEST	BX,devid_device 		; output to file?
 11283 00001682 F6C380                  	test	bl,devid_device ; 80h
 11284 00001685 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11285                                  	; 14/03/2018
 11286                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11287                                  	;jc	short TRIPOPJ
 11288                                  	; MSDOS 2.11
 11289                                  	;test	byte [SI+18H], 80h
 11290                                  	;jz	short TRIPOPJ
 11291 00001687 BB0400                  	MOV	BX,4
 11292 0000168A E8011F                  	CALL	GET_IO_SFT
 11293 0000168D 720F                    	JC	SHORT TRIPOPJ
 11294                                  	;;test	word [si+5], 800h
 11295                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11296                                  	;test	byte [si+6],8 ; 08/11/2022
 11297 0000168F F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11298                                  						; StdPrn redirected?
 11299                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11300                                  	;jz	LISSTRT2 ; 10/08/2018 
 11301                                  	; 16/12/2022
 11302 00001693 7503                    	jnz	short outch1
 11303 00001695 E98700                  	jmp	LISSTRT2
 11304                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11305                                  	;jz	short LISSTRT2J
 11306                                  outch1:
 11307                                  	;MOV	BYTE [PFLAG],0
 11308 00001698 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11309                                  	; MSDOS 2.11
 11310                                  	;mov	bx,4
 11311                                  	;jmp	short LISSTRT2
 11312                                  	
 11313                                  TRIPOPJ:
 11314                                  	; 20/07/2018
 11315 0000169E E98100                  	JMP	TRIPOP
 11316                                  
 11317                                  	; 16/12/2022
 11318                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11319                                  ;LISSTRT2J:
 11320                                  ;	JMP	LISSTRT2
 11321                                  
 11322                                  CTRLOUT:
 11323 000016A1 3C0D                    	CMP	AL,c_CR ; 0Dh
 11324 000016A3 7420                    	JZ	SHORT ZERPOS
 11325 000016A5 3C08                    	CMP	AL,c_BS ; 8
 11326 000016A7 7424                    	JZ	SHORT BACKPOS
 11327 000016A9 3C09                    	CMP	AL,c_HT ; 9
 11328 000016AB 75A1                    	JNZ	SHORT OUTCH
 11329                                  	;MOV	AL,[CARPOS]
 11330 000016AD 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11331 000016B1 0CF8                    	OR	AL,0F8H
 11332 000016B3 F6D8                    	NEG	AL
 11333                                  TAB:
 11334 000016B5 51                      	PUSH	CX
 11335 000016B6 88C1                    	MOV	CL,AL
 11336 000016B8 B500                    	MOV	CH,0
 11337 000016BA E307                    	JCXZ	POPTAB
 11338                                  TABLP:
 11339 000016BC B020                    	MOV	AL," "
 11340 000016BE E880FF                  	CALL	OUTT
 11341 000016C1 E2F9                    	LOOP	TABLP
 11342                                  POPTAB:
 11343 000016C3 59                      	POP	CX
 11344                                  
 11345 000016C4 C3                      	RETN
 11346                                  
 11347                                  ZERPOS:
 11348                                  	;MOV	BYTE PTR [CARPOS],0
 11349 000016C5 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11350                                  	; 10/08/2018
 11351 000016CB EB81                    	JMP	short OUTCH ; 04/05/2019
 11352                                  	
 11353                                  	; 18/12/2022
 11354                                  ;OUTJ:	
 11355                                  	;JMP	OUTT
 11356                                  
 11357                                  BACKPOS:
 11358                                  	;DEC	BYTE PTR [CARPOS]
 11359 000016CD 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11360 000016D2 E979FF                  	JMP	OUTCH
 11361                                  
 11362                                  BUFOUT:
 11363 000016D5 3C20                    	CMP	AL," "
 11364 000016D7 7315                    	JAE	SHORT OUTJ		;Normal char
 11365 000016D9 3C09                    	CMP	AL,9
 11366 000016DB 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11367                                  	;DOS 3.3  7/14/86
 11368 000016DD 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11369 000016DF 740D                    	JZ	short CTRLU
 11370 000016E1 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11371 000016E3 7409                    	JZ	short CTRLU
 11372                                  NOT_CTRLU:
 11373                                  	;DOS 3.3  7/14/86
 11374 000016E5 50                      	PUSH	AX
 11375 000016E6 B05E                    	MOV	AL,"^"
 11376 000016E8 E856FF                  	CALL	OUTT		;Print '^' before control chars
 11377 000016EB 58                      	POP	AX
 11378 000016EC 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11379                                  CTRLU:
 11380                                  	;CALL	OUTT
 11381                                  	; 18/12/2022
 11382                                  OUTJ:
 11383 000016EE E950FF                  	jmp	OUTT
 11384                                  ;BUFOUT_RETN:
 11385                                  	;RETN
 11386                                  
 11387                                  ;
 11388                                  ;----------------------------------------------------------------------------
 11389                                  ;
 11390                                  ;**	$STD_AUX_INPUT - System Call 3
 11391                                  ;
 11392                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11393                                  ;
 11394                                  ;	ENTRY	none
 11395                                  ;	EXIT	(al) = character
 11396                                  ;	USES	all
 11397                                  ;
 11398                                  ;----------------------------------------------------------------------------
 11399                                  ;
 11400                                  
 11401                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11402                                  
 11403                                  _$STD_AUX_INPUT:	;System call 3
 11404                                  
 11405 000016F1 E85A39                  	CALL	STATCHK
 11406 000016F4 BB0300                  	MOV	BX,3
 11407 000016F7 E8941E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11408                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11409                                  	;retc
 11410                                  	; 16/12/2022
 11411                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11412                                  	;JC	SHORT BUFOUT_RETN
 11413                                  	;JMP	SHORT TAISTRT
 11414                                  	; 07/12/2022
 11415 000016FA 7304                    	jnc	SHORT TAISTRT
 11416 000016FC C3                      	retn	
 11417                                  
 11418                                  AUXILP:
 11419 000016FD E82039                  	CALL	SPOOLINT
 11420                                  TAISTRT:
 11421 00001700 B401                    	MOV	AH,1
 11422 00001702 E8902C                  	CALL	IOFUNC
 11423 00001705 74F6                    	JZ	SHORT AUXILP
 11424 00001707 30E4                    	XOR	AH,AH
 11425                                  	; 16/12/2022
 11426                                  	;CALL	IOFUNC
 11427                                  	;RETN
 11428                                  	; 07/12/2022
 11429 00001709 E9892C                  	jmp	IOFUNC
 11430                                  
 11431                                  ;
 11432                                  ;----------------------------------------------------------------------------
 11433                                  ;
 11434                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11435                                  ;
 11436                                  ;	ENTRY	(dl) = character
 11437                                  ;	EXIT	none
 11438                                  ;	USES	all
 11439                                  ;
 11440                                  ;----------------------------------------------------------------------------
 11441                                  ;
 11442                                  
 11443                                  _$STD_AUX_OUTPUT:	;System call 4
 11444                                  
 11445 0000170C 53                      	PUSH	BX
 11446 0000170D BB0300                  	MOV	BX,3
 11447 00001710 EB04                    	JMP	SHORT SENDOUT
 11448                                  
 11449                                  ;
 11450                                  ;----------------------------------------------------------------------------
 11451                                  ;
 11452                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11453                                  ;
 11454                                  ;	ENTRY	(dl) = character
 11455                                  ;	EXIT	none
 11456                                  ;	USES	all
 11457                                  ;
 11458                                  ;----------------------------------------------------------------------------
 11459                                  ;
 11460                                  
 11461                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11462                                  
 11463 00001712 53                      	PUSH	BX
 11464 00001713 BB0400                  	MOV	BX,4
 11465                                  
 11466                                  SENDOUT:
 11467 00001716 88D0                    	MOV	AL,DL
 11468 00001718 50                      	PUSH	AX
 11469 00001719 E83239                  	CALL	STATCHK
 11470 0000171C 58                      	POP	AX
 11471 0000171D 1E                      	PUSH	DS
 11472 0000171E 56                      	PUSH	SI
 11473                                  LISSTRT2:
 11474 0000171F E8CDFE                  	CALL	RAWOUT2
 11475                                  TRIPOP:
 11476 00001722 5E                      	POP	SI
 11477 00001723 1F                      	POP	DS
 11478 00001724 5B                      	POP	BX
 11479                                  SCIS_RETN:	; 20/07/2018
 11480 00001725 C3                      	RETN
 11481                                  ;
 11482                                  ;----------------------------------------------------------------------------
 11483                                  ;
 11484                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11485                                  ;
 11486                                  ;	Check console input status
 11487                                  ;
 11488                                  ;	ENTRY	none
 11489                                  ;	EXIT	AL = -1 character available, = 0 no character
 11490                                  ;	USES	all
 11491                                  ;
 11492                                  ;----------------------------------------------------------------------------
 11493                                  ;
 11494                                  
 11495                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11496                                  
 11497 00001726 E82539                  	CALL	STATCHK
 11498 00001729 B000                    	MOV	AL,0		; no xor!!
 11499                                  	;retz
 11500 0000172B 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11501 0000172D 0CFF                    	OR	AL,-1
 11502                                  ;SCIS_RETN:
 11503 0000172F C3                      	RETN
 11504                                  
 11505                                  ;
 11506                                  ;----------------------------------------------------------------------------
 11507                                  ;
 11508                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11509                                  ;
 11510                                  ;	Flush console input buffer and perform call in AL
 11511                                  ;
 11512                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11513                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11514                                  ;		return arguments for the fcn supplied in (AL)
 11515                                  ;	USES	all
 11516                                  ;
 11517                                  ;----------------------------------------------------------------------------
 11518                                  ;
 11519                                  
 11520                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11521                                  
 11522 00001730 50                      	PUSH	AX
 11523 00001731 52                      	PUSH	DX
 11524 00001732 31DB                    	XOR	BX,BX
 11525 00001734 E8571E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11526                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11527 00001737 7205                    	JC	SHORT BADJFNCON
 11528 00001739 B404                    	MOV	AH,4
 11529 0000173B E8572C                  	CALL	IOFUNC
 11530                                  
 11531                                  BADJFNCON:
 11532 0000173E 5A                      	POP	DX
 11533 0000173F 58                      	POP	AX
 11534 00001740 88C4                    	MOV	AH,AL
 11535 00001742 3C01                    	CMP	AL,1
 11536 00001744 7413                    	JZ	SHORT REDISPJ
 11537 00001746 3C06                    	CMP	AL,6
 11538 00001748 740F                    	JZ	SHORT REDISPJ
 11539 0000174A 3C07                    	CMP	AL,7
 11540 0000174C 740B                    	JZ	SHORT REDISPJ
 11541 0000174E 3C08                    	CMP	AL,8
 11542 00001750 7407                    	JZ	SHORT REDISPJ
 11543 00001752 3C0A                    	CMP	AL,10
 11544 00001754 7403                    	JZ	SHORT REDISPJ
 11545 00001756 B000                    	MOV	AL,0
 11546 00001758 C3                      	RETN
 11547                                  
 11548                                  REDISPJ:
 11549 00001759 FA                      	CLI
 11550                                  	;transfer REDISP
 11551 0000175A E92BEC                  	JMP	REDISP
 11552                                  
 11553                                  ;============================================================================
 11554                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11555                                  ;============================================================================
 11556                                  ; 20/07/2018 - Retro DOS v3.0
 11557                                  ; 17/05/2019 - Retro DOS v4.0
 11558                                  
 11559                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11560                                  ;
 11561                                  ;	$GET_FCB_POSITION
 11562                                  ;	$FCB_DELETE
 11563                                  ;	$GET_FCB_FILE_LENGTH
 11564                                  ;	$FCB_CLOSE
 11565                                  ;	$FCB_RENAME
 11566                                  ;	SaveFCBInfo
 11567                                  ;	ResetLRU
 11568                                  ;	SetOpenAge
 11569                                  ;	LRUFCB
 11570                                  ;	FCBRegen
 11571                                  ;	BlastSFT
 11572                                  ;	CheckFCB
 11573                                  ;	SFTFromFCB
 11574                                  ;	FCBHardErr
 11575                                  ;
 11576                                  ;	Revision history:
 11577                                  ;
 11578                                  ;		Created: ARR 4 April 1983"
 11579                                  ;			 MZ  6 June  1983 completion of functions
 11580                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11581                                  ;					  times.  Change so successive closes work by
 11582                                  ;					  always returning OK.	Also, detect I/O to
 11583                                  ;					  already closed FCB and return EOF.
 11584                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11585                                  ;					  out of sft into FCB for reconnection
 11586                                  ;
 11587                                  ;		A000	 version 4.00  Jan. 1988
 11588                                  
 11589                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11590                                  ;----------------------------------------------------------------------------
 11591                                  ;
 11592                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11593                                  ;	extent and next record field and set the random record field to point
 11594                                  ;	to that record
 11595                                  ;
 11596                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11597                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11598                                  ;   Registers modified: all
 11599                                  ;
 11600                                  ;----------------------------------------------------------------------------
 11601                                  ;
 11602                                  
 11603                                  _$GET_FCB_POSITION:
 11604 0000175D E8D404                  	call	GetExtended		; point to FCB
 11605 00001760 E8A504                  	call	GetExtent		; DX:AX is current record
 11606                                  	;mov	[si+21h],ax
 11607 00001763 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11608                                  	;mov	[si+23h],dl
 11609 00001766 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11610                                  	;cmp	word [si+0Eh],64
 11611 00001769 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11612 0000176D 7303                    	JAE	short GetFCBBye
 11613                                  	;mov	[si+24h],dh
 11614 0000176F 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11615                                  GoodPath:	; 16/12/2022
 11616                                  GetFCBBye:
 11617 00001772 E9D8EE                  	jmp	FCB_RET_OK
 11618                                  
 11619                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11620                                  ;----------------------------------------------------------------------------
 11621                                  ;
 11622                                  ;**	$FCB_Delete - Delete from FCB Template
 11623                                  ;
 11624                                  ;	given an FCB, remove all directory entries in the current
 11625                                  ;	directory that have names that match the FCB's ?  marks.
 11626                                  ;
 11627                                  ;	ENTRY	(DS:DX) = address of FCB
 11628                                  ;	EXIT	entries matching the FCB are deleted
 11629                                  ;		(al) = ff iff no entries were deleted
 11630                                  ;	USES	all
 11631                                  ;
 11632                                  ;----------------------------------------------------------------------------
 11633                                  ;
 11634                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11635                                  
 11636                                  _$FCB_DELETE:		; System call 19
 11637                                  					; OpenBuf is in DOSDATA
 11638 00001775 BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11639                                  
 11640 00001778 E84A52                  	call	TransFCB		; convert FCB to path
 11641 0000177B 7207                    	JC	short BadPath 		; signal no deletions
 11642                                  
 11643 0000177D 16                      	push	SS
 11644 0000177E 1F                      	pop	DS			; SS is DOSDATA
 11645                                  
 11646 0000177F E8370D                  	call	DOS_DELETE		; wham
 11647                                  	;JC	short BadPath
 11648                                  	; 16/12/2022
 11649 00001782 73EE                    	jnc 	short GoodPath
 11650                                  ;GoodPath:
 11651                                  ;	;jmp	FCB_RET_OK		; do a good return
 11652                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11653                                  ;	jmp	short GetFCBBye
 11654                                  
 11655                                  BadPath:
 11656                                  	; Error code is in AX
 11657                                  
 11658 00001784 E9C9EE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11659                                  
 11660                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11661                                  ;----------------------------------------------------------------------------
 11662                                  ;
 11663                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11664                                  ;	file in records (rounded up if partial).
 11665                                  ;
 11666                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11667                                  ;   Outputs:	Random record field updated to reflect the number of records
 11668                                  ;   Registers modified: all
 11669                                  ;
 11670                                  ;----------------------------------------------------------------------------
 11671                                  ;
 11672                                  	; 15/01/2024
 11673                                  
 11674                                  _$GET_FCB_FILE_LENGTH:
 11675                                  
 11676 00001787 E8AA04                  	call	GetExtended		; get real FCB pointer
 11677                                  					; DX points to Input FCB
 11678                                  
 11679                                  					; OpenBuf is in DOSDATA
 11680 0000178A BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11681                                  
 11682 0000178D 1E                      	push	ds			; save pointer to true FCB
 11683 0000178E 56                      	push	si
 11684 0000178F E83352                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11685 00001792 5E                      	pop	si
 11686 00001793 1F                      	pop	ds
 11687 00001794 72EE                    	JC	short BadPath
 11688 00001796 1E                      	push	ds			; save pointer
 11689 00001797 56                      	push	si
 11690 00001798 16                      	push	ss		
 11691 00001799 1F                      	pop	ds
 11692 0000179A E81A11                  	call	GET_FILE_INFO		; grab the info
 11693 0000179D 5E                      	pop	si			; get pointer back
 11694 0000179E 1F                      	pop	ds
 11695 0000179F 72E3                    	JC	short BadPath 		; invalid something
 11696                                  	; 15/01/2024
 11697                                  	;MOV	DX,BX (*)		; get high order size
 11698                                  	;MOV	AX,DI (**)		; get low order size
 11699 000017A1 89D8                    	mov	ax,bx ; hw of file size
 11700                                  	;
 11701                                  	;mov	bx,[si+0Eh]
 11702 000017A3 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11703 000017A6 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11704 000017A8 7502                    	JNZ	short GetSize 		; not empty
 11705                                  	;MOV	BX,128
 11706 000017AA B380                    	mov	bl,128	; 15/01/2024
 11707                                  GetSize:
 11708                                  	; 15/01/2024
 11709                                  	;MOV	DI,AX			; save low order word
 11710                                  	;MOV	AX,DX			; move high order for divide
 11711                                  	;xchg	ax,dx ; (*)
 11712                                  	; ax = hw of file size
 11713                                  
 11714 000017AC 31D2                    	XOR	DX,DX			; clear out high
 11715 000017AE F7F3                    	DIV	BX			; wham
 11716 000017B0 50                      	PUSH	AX			; save dividend
 11717 000017B1 89F8                    	MOV	AX,DI ; (**)		; get low order piece
 11718 000017B3 F7F3                    	DIV	BX			; wham
 11719 000017B5 89D1                    	MOV	CX,DX			; save remainder
 11720 000017B7 5A                      	POP	DX			; get high order dividend
 11721 000017B8 E306                    	JCXZ	LengthStore		; no roundup
 11722 000017BA 83C001                  	ADD	AX,1
 11723 000017BD 83D200                  	ADC	DX,0			; 32-bit increment
 11724                                  LengthStore:
 11725                                  	;mov	[si+21h],ax
 11726 000017C0 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11727                                  	;mov	[si+23h],dl
 11728 000017C3 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11729 000017C6 08F6                    	OR	DH,DH
 11730 000017C8 74A8                    	JZ	short GoodPath		; not storing insignificant zero
 11731                                  	;mov	[si+24h],dh
 11732 000017CA 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11733                                  	; 16/12/2022
 11734                                  GoodRet:
 11735                                  	;jmp	FCB_RET_OK
 11736 000017CD EBA3                    	jmp	short GoodPath
 11737                                  
 11738                                  ;Break <$FCB_Close - close a file>
 11739                                  ;----------------------------------------------------------------------------
 11740                                  ;
 11741                                  ;   $FCB_Close - given an FCB, look up the SFN and close it. Do not free it
 11742                                  ;	as the FCB may be used for further I/O
 11743                                  ;
 11744                                  ;   Inputs:	DS:DX point to FCB
 11745                                  ;   Outputs:	AL = FF if file was not found on disk
 11746                                  ;   Registers modified: all
 11747                                  ;
 11748                                  ;----------------------------------------------------------------------------
 11749                                  ;
 11750                                  
 11751                                  	; 16/01/2024
 11752                                  
 11753                                  _$FCB_CLOSE:		; System call 16
 11754                                  
 11755 000017CF 30C0                    	XOR	AL,AL			; default search attributes
 11756 000017D1 E86004                  	call	GetExtended		; DS:SI point to real FCB
 11757 000017D4 7403                    	JZ	short NoAttr		; not extended
 11758 000017D6 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11759                                  NoAttr:
 11760                                  					; SS override
 11761 000017D9 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11762 000017DD E8C303                  	call	SFTFromFCB
 11763 000017E0 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11764                                  
 11765                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11766                                  	; there is no need to set the SFT's attribute.
 11767                                  
 11768                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11769                                  	;;; done
 11770                                  
 11771                                  	;mov	al,[es:di+4]
 11772 000017E2 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11773 000017E6 30E4                    	XOR	AH,AH
 11774 000017E8 50                      	PUSH	AX
 11775                                  
 11776                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11777                                  	;;; done
 11778                                  
 11779 000017E9 E8D159                  	call	CheckShare
 11780 000017EC 7508                    	JNZ	short NoStash
 11781 000017EE 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11782                                  	;mov	[es:di+4],al
 11783 000017F2 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11784                                  NoStash:
 11785                                  
 11786                                  ; 16/01/2024
 11787                                  %if 0
 11788                                  	;mov	ax,[si+14h]
 11789                                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11790                                  	;mov	[es:di+0Fh],ax
 11791                                  	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11792                                  	;mov	ax,[si+16h]
 11793                                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11794                                  	;mov	[es:di+0Dh],ax
 11795                                  	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11796                                  	;mov	ax,[si+10h]
 11797                                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11798                                  	;mov	[es:di+11h],ax
 11799                                  	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11800                                  	;mov	ax,[si+12h]
 11801                                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11802                                  	;mov	[es:di+13h],ax
 11803                                  	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11804                                  	;or	word [es:di+5],4000h
 11805                                  	; 17/12/2022
 11806                                  	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11807                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11808                                  %else
 11809                                  	; 16/01/2024 (PCDOS 7.1 IBMDOS.COM)
 11810 000017F6 1E                      	push	ds
 11811                                  	;lds	ax,[si+14h]
 11812 000017F7 C54414                  	lds	ax,[si+SYS_FCB.FDATE]	; move in the time and date
 11813                                  	;mov	[es:di+0Fh],ax
 11814 000017FA 2689450F                	mov	[es:di+SF_ENTRY.sf_date],ax
 11815                                  	;mov	[es:di+0Dh],ds		
 11816 000017FE 268C5D0D                	mov	[es:di+SF_ENTRY.sf_time],ds
 11817 00001802 1F                      	pop	ds
 11818                                  	;lds	ax,[si+10h]
 11819 00001803 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 11820                                  	;mov	[es:di+11h],ax
 11821 00001806 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 11822                                  	;mov	[es:di+13h],ds
 11823 0000180A 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 11824                                  	; 16/01/2024
 11825                                  	;;or	word [es:di+5],4000h
 11826                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 11827 0000180E 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11828                                  %endif
 11829                                  
 11830 00001813 16                      	push	ss
 11831 00001814 1F                      	pop	ds
 11832 00001815 E89016                  	call	DOS_CLOSE	; wham
 11833 00001818 C43E[9E05]              	LES	DI,[THISSFT]
 11834                                  
 11835                                  	;;; 9/8/86 F.C. restore SFT attribute
 11836 0000181C 59                      	POP	CX
 11837                                  	;mov	[es:di+4],cl
 11838 0000181D 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11839                                  	;;; 9/8/86 F.C. restore SFT attribute
 11840                                  
 11841 00001821 9C                      	PUSHF
 11842                                  	;test	word [es:di],0FFFFh
 11843                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11844                                  				; zero ref count gets blasted
 11845 00001822 26833D00                	cmp	word [ES:DI],0
 11846 00001826 7507                    	jnz     short CloseOK
 11847 00001828 50                      	PUSH	AX
 11848 00001829 B04D                    	MOV	AL,'M' ; 4Dh
 11849 0000182B E8F202                  	call	BlastSFT
 11850 0000182E 58                      	POP	AX
 11851                                  CloseOK:
 11852 0000182F 9D                      	POPF
 11853 00001830 739B                    	JNC	short GoodRet
 11854                                  	;cmp	al,6
 11855 00001832 3C06                    	CMP	AL,error_invalid_handle
 11856 00001834 7497                    	JZ	short GoodRet
 11857                                  	;mov	al,2
 11858 00001836 B002                    	MOV	AL,error_file_not_found
 11859                                  fren90:
 11860                                  	; 16/12/2022
 11861                                  fcb_close_err:
 11862 00001838 E915EE                  	jmp	FCB_RET_ERR
 11863                                  
 11864                                  ;
 11865                                  ;----------------------------------------------------------------------------
 11866                                  ;
 11867                                  ;**	$FCB_Rename - Rename a File
 11868                                  ;
 11869                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11870                                  ;	multiple files copying from the meta characters.
 11871                                  ;
 11872                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11873                                  ;		    name of the files to be renamed. Starting at offset 11h
 11874                                  ;		    in the FCB is the destination name.
 11875                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11876                                  ;		AL = FF -> some files may have been renamed but:
 11877                                  ;			rename to existing file or source file not found
 11878                                  ;	USES	ALL
 11879                                  ;
 11880                                  ;----------------------------------------------------------------------------
 11881                                  ;
 11882                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11883                                  
 11884                                  _$FCB_RENAME:		; System call 23
 11885                                  
 11886 0000183B E8F603                  	call	GetExtended		; get pointer to real FCB
 11887 0000183E 52                      	push	dx
 11888 0000183F 8A04                    	MOV	AL,[SI] 		; get drive byte
 11889 00001841 83C610                  	ADD	SI,10h			; point to destination
 11890                                  
 11891                                  					; RenBuf is in DOSDATA
 11892 00001844 BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11893 00001847 FF34                    	push	word [SI]
 11894 00001849 1E                      	push	ds
 11895                                  	;push	di			; save source pointer for TransFCB
 11896                                  	; 16/01/2024 - BugFix !
 11897 0000184A 56                      	push	si
 11898 0000184B 8804                    	MOV	[SI],AL			; drop in real drive
 11899 0000184D 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11900 0000184F E87351                  	call	TransFCB		; munch this pathname
 11901 00001852 5E                      	pop	si
 11902 00001853 1F                      	pop	ds	
 11903 00001854 8F04                    	pop	WORD [SI]		; get path back
 11904 00001856 5A                      	pop	dx			; Original FCB pointer
 11905 00001857 72DF                    	JC	short fren90		; bad path -> error
 11906                                  
 11907                                  					; SS override for WFP_Start & Ren_WFP
 11908 00001859 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11909 0000185E 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11910                                  
 11911                                  					; OpenBuf is in DOSDATA
 11912 00001863 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11913 00001866 E85C51                  	call	TransFCB		; wham
 11914                                  					; NOTE that this call is pointing
 11915                                  					;  back to the ORIGINAL FCB so
 11916                                  					;  SATTRIB gets set correctly
 11917 00001869 72CD                    	JC	short fren90		; error
 11918 0000186B E81F0E                  	call	DOS_RENAME
 11919 0000186E 72C8                    	JC	short fren90
 11920                                  	; 16/12/2022
 11921 00001870 E9DAED                  	jmp	FCB_RET_OK
 11922                                  	
 11923                                  ;	Error -
 11924                                  ;
 11925                                  ;	(al) = error code
 11926                                  
 11927                                  	; 16/12/2022
 11928                                  ;fren90:	
 11929                                  ;	;jmp	FCB_RET_ERR
 11930                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11931                                  ;	jmp	short fcb_close_err
 11932                                  
 11933                                  ;Break <Misbehavior fixers>
 11934                                  ;
 11935                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11936                                  ;   user's space so he may move them at will. Second, they have a small
 11937                                  ;   reserved area that may be used for system information. Third, there was
 11938                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11939                                  ;   usage.
 11940                                  ;
 11941                                  ;   This results in the following misbehavior:
 11942                                  ;
 11943                                  ;	infinite opens of the same file:
 11944                                  ;
 11945                                  ;	While (TRUE) {			While (TRUE) {
 11946                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11947                                  ;	    Read (FCB); 		    Write (FCB);
 11948                                  ;	    }				    }
 11949                                  ;
 11950                                  ;	infinite opens of different files:
 11951                                  ;
 11952                                  ;	While (TRUE) {			While (TRUE) {
 11953                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11954                                  ;	    Read (FCB); 		    Write (FCB);
 11955                                  ;	    }				    }
 11956                                  ;
 11957                                  ;	multiple closes of the same file:
 11958                                  ;
 11959                                  ;	FCBOpen (FCB);
 11960                                  ;	while (TRUE)
 11961                                  ;	    FCBClose (FCB);
 11962                                  ;
 11963                                  ;	I/O after closing file:
 11964                                  ;
 11965                                  ;	FCBOpen (FCB);
 11966                                  ;	while (TRUE) {
 11967                                  ;	    FCBWrite (FCB);
 11968                                  ;	    FCBClose (FCB);
 11969                                  ;	    }
 11970                                  ;
 11971                                  ;   The following is am implementation of a methodology for emulating the
 11972                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11973                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11974                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11975                                  ;   the local machine.
 11976                                  ;
 11977                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11978                                  ;   structures depending on the file itself and the state of operations of the
 11979                                  ;   OS. The information contained in this reserved field is enough to
 11980                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11981                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11982                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11983                                  ;
 11984                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11985                                  ;
 11986                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11987                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11988                                  ;   regenerated.
 11989                                  ;
 11990                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11991                                  ;   longer available. We can make up for this by using the following
 11992                                  ;   information:
 11993                                  ;
 11994                                  ;	The Drive number (from the DPB).
 11995                                  ;	The physical sector of the directory that contains the entry.
 11996                                  ;	The relative position of the entry in the sector.
 11997                                  ;	The first cluster field.
 11998                                  ;	The last used SFT.
 11999                                  ;      OR In the case of a device FCB
 12000                                  ;	The low 6 bits of sf_flags (indicating device type)
 12001                                  ;	The pointer to the device header
 12002                                  ;
 12003                                  ;   We read in the particular directory sector and examine the indicated
 12004                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 12005                                  ;
 12006                                  ;   Some key items need to be remembered:
 12007                                  ;
 12008                                  ;	Even though we are caching SFTs, they may contain useful sharing
 12009                                  ;	information. We enforce good behavior on the FCBs.
 12010                                  ;
 12011                                  ;	Network support must not treat FCBs as impacting the ref counts on
 12012                                  ;	open VCs. The VCs may be closed only at process termination.
 12013                                  ;
 12014                                  ;	If this is not an installed version of the DOS, file sharing will
 12015                                  ;	always be present.
 12016                                  ;
 12017                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 12018                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 12019                                  ;
 12020                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 12021                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 12022                                  ;	proper OI record.
 12023                                  ;
 12024                                  ;   The test bits are:
 12025                                  ;
 12026                                  ;	00 -> local file
 12027                                  ;	40 -> sharing local
 12028                                  ;	80 -> network
 12029                                  ;	C0 -> local device
 12030                                  
 12031                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 12032                                  ;----------------------------------------------------------------------------
 12033                                  ;
 12034                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 12035                                  ;	pieces of information into the FCB to allow for subsequent
 12036                                  ;	regeneration. Poke LRU also.
 12037                                  ;
 12038                                  ;   Inputs:	ThisSFT points to a complete SFT.
 12039                                  ;		DS:SI point to the FCB (not an extended one)
 12040                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 12041                                  ;		DS:SI preserved
 12042                                  ;		ES:DI point to sft
 12043                                  ;   Registers modified: All
 12044                                  ;
 12045                                  ;
 12046                                  ;----------------------------------------------------------------------------
 12047                                  ;
 12048                                  
 12049                                  	; 20/01/2024
 12050                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12051                                  
 12052                                  SaveFCBInfo:
 12053                                  
 12054 00001873 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 12055 00001878 E8C9F9                  	call	IsSFTNet
 12056 0000187B 740B                    	JZ	short SaveLocal		; if not network then save local info
 12057                                  ;
 12058                                  ;----- In net support -----
 12059                                  ;
 12060                                  	; 17/05/2019 - Retro DOS v4.0
 12061                                  
 12062                                  	; MSDOS 3.3
 12063                                  	;;mov	ax,[es:di+1Dh]
 12064                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 12065                                  	;;mov	[si+1Ah],ax
 12066                                  	;mov	[si+fcb_net_handle],ax
 12067                                  	;push	es
 12068                                  	;push	di
 12069                                  	;;les	di,[es:di+19h]
 12070                                  	;LES	DI,[ES:DI+sf_netid]
 12071                                  	;;mov	[si+1Ch],di
 12072                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 12073                                  	;;mov 	[si+1Eh],es
 12074                                  	;MOV	[SI+fcb_netID+2],ES
 12075                                  	;pop	di
 12076                                  	;pop	es
 12077                                  
 12078                                  	; MSDOS 6.0
 12079                                  	;mov	ax,[es:di+0Bh]
 12080 0000187D 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 12081                                  	;mov	[si+1Ch],ax
 12082 00001881 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 12083                                  	
 12084                                  	;mov	bl,80h
 12085 00001884 B380                    	MOV	BL,FCBNETWORK
 12086                                  ;
 12087                                  ;----- END In net support -----
 12088                                  ;
 12089 00001886 EB63                    	jmp	SHORT SaveSFN
 12090                                  
 12091                                  SaveLocal:
 12092                                  	;IF	Installed
 12093 00001888 E83259                  	call	CheckShare
 12094                                  	;JZ	short SaveNoShare	; no sharer
 12095                                  	;JMP	short SaveShare		; sharer present
 12096                                  	; 16/12/2022
 12097                                  	; 28/07/2019
 12098 0000188B 7559                    	jnz	short SaveShare
 12099                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12100                                  	;JZ	short SaveNoShare	; no sharer
 12101                                  	;JMP	short SaveShare		; sharer present
 12102                                  
 12103                                  SaveNoShare:
 12104                                  	;;test 	word [es:di+5],80h
 12105                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12106 0000188D 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 12107 00001892 7542                    	JNZ	short SaveNoShareDev	; Device
 12108                                  
 12109                                  	; Save no sharing local file information
 12110                                  
 12111                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 12112                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 12113 00001894 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 12114                                  	;mov	[si+1Dh],ax
 12115 00001898 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 12116                                  
 12117                                  	; MSDOS 6.0
 12118                                  
 12119                                  	;SR; Store high byte of directory sector
 12120                                  	;mov	ax,[es:di+1Dh]
 12121 0000189B 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 12122                                  	
 12123                                  	; SR;
 12124                                  	; We have to store the read-only and archive attributes of the file.
 12125                                  	; We extract it from the SFT and store it in the top two bits of the 
 12126                                  	; sector number ( sector number == 22 bits only )
 12127                                  
 12128                                  	;mov	bl,[es:di+4]
 12129 0000189F 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 12130 000018A3 88DF                    	mov	bh,bl
 12131 000018A5 D0CB                    	ror	bl,1
 12132 000018A7 D0E7                    	shl	bh,1
 12133 000018A9 08FB                    	or	bl,bh
 12134 000018AB 80E3C0                  	and	bl,0C0h
 12135 000018AE 08D8                    	or	al,bl
 12136                                  	;mov	[si+18h],al ; 08/11/2022
 12137 000018B0 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 12138                                  
 12139                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12140                                  	;mov	al,[es:di+1Fh]
 12141 000018B3 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 12142                                  	;mov	[si+1Fh],al
 12143 000018B7 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 12144                                  	;mov	ax,[es:di+0Bh]
 12145 000018BA 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 12146                                  	;mov	[si+1Bh],ax
 12147 000018BE 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 12148 000018C1 B300                    	MOV	BL,0
 12149                                  
 12150                                  	; Create the bits field from the dirty/device bits of the flags word 
 12151                                  	; and the mode byte
 12152                                  
 12153                                  SetFCBBits:
 12154                                  	;mov	ax,[es:di+5]
 12155 000018C3 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12156 000018C7 24C0                    	AND	AL,0C0h 		; mask off drive bits
 12157                                  	;or	al,[es:di+2]
 12158 000018C9 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 12159                                  	;mov	[si+1Ah], al
 12160 000018CD 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 12161                                  
 12162                                  	; MSDOS 6.0
 12163                                  	
 12164                                  	; SR;
 12165                                  	; Check if we came here for local file or device. If for local file, 
 12166                                  	; skip setting of SFT index
 12167                                  	
 12168 000018D0 08DB                    	or	bl,bl
 12169 000018D2 7428                    	jz	short SaveNoSFN		; do not save SFN if local file
 12170                                  
 12171 000018D4 EB15                    	JMP	short SaveSFN 		; go and save SFN
 12172                                  
 12173                                  	; Save no sharing local device information
 12174                                  
 12175                                  SaveNoShareDev:
 12176                                  	; 20/01/2024
 12177                                  	;;mov	ax,[es:di+7]
 12178                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 12179                                  	;;mov	[si+1Ah],ax
 12180                                  	;MOV	[SI+fcb_nsld_drvptr],AX
 12181                                  	;;mov	ax,[es:di+9]
 12182                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 12183                                  	;MOV	[SI+fcb_nsld_drvptr+2],AX
 12184                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12185 000018D6 06                      	push	es
 12186 000018D7 26C44507                	les	ax,[es:di+SF_ENTRY.sf_devptr]
 12187 000018DB 89441A                  	mov	[si+fcb_nsld_drvptr],ax
 12188 000018DE 8C441C                  	mov	[si+fcb_nsld_drvptr+2],es
 12189 000018E1 07                      	pop	es
 12190                                  	
 12191                                  	;mov	bl,40h
 12192 000018E2 B340                    	MOV	BL,FCBDEVICE
 12193                                  	; 28/12/2022
 12194 000018E4 EBDD                    	JMP	short SetFCBBits	; go and save SFN
 12195                                  
 12196                                  SaveShare:
 12197                                  	;ENDIF
 12198                                  
 12199                                  ;----- In share support -----
 12200                                  
 12201                                  	;call	far [ss:ShSave]
 12202 000018E6 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 12203                                  
 12204                                  ;----- end in share support -----
 12205                                  
 12206                                  	; 17/05/2019
 12207                                  
 12208                                  SaveSFN:
 12209                                  	;lea	ax,[di-6]
 12210 000018EB 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 12211                                  	
 12212                                  	; Adjust for offset to table.
 12213                                  	
 12214 000018EE 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 12215                                  
 12216 000018F3 53                      	push	bx			;bx = FCB type (net/Share or local)
 12217                                  	;;mov	bl,53 ; MSDOS 3.3
 12218                                  	;mov	bl,59 ; MSDOS 6.0
 12219 000018F4 B33B                    	MOV	BL,SF_ENTRY.size
 12220 000018F6 F6F3                    	DIV	BL
 12221                                  	;mov	[si+18h],al
 12222 000018F8 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 12223 000018FB 5B                      	pop	bx			;restore bx
 12224                                  
 12225                                  SaveNoSFN:
 12226                                  	;mov	ax,[es:di+5]
 12227 000018FC 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12228 00001900 243F                    	AND	AL,3Fh			; get real drive
 12229 00001902 08D8                    	OR	AL,BL
 12230                                  	;mov	[si+19h],al
 12231 00001904 884419                  	MOV	[SI+fcb_l_drive],AL
 12232                                  
 12233 00001907 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 12234 0000190B 40                      	INC	AX
 12235                                  	;mov	[es:di+15h],ax
 12236 0000190C 26894515                	MOV	[ES:DI+sf_LRU],AX
 12237 00001910 7506                    	JNZ	short SimpleStuff
 12238                                  	
 12239                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 12240                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 12241                                  	
 12242                                  	;mov	bx,15h
 12243 00001912 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 12244 00001915 E80500                  	call	ResetLRU
 12245                                  
 12246                                  	; Set new LRU to AX
 12247                                  SimpleStuff:
 12248 00001918 36A3[1000]              	MOV	[SS:FCBLRU],AX
 12249 0000191C C3                      	retn
 12250                                  
 12251                                  ;Break	<ResetLRU - reset overflowed lru counts>
 12252                                  ;----------------------------------------------------------------------------
 12253                                  ;
 12254                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 12255                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 12256                                  ;   at 0.
 12257                                  ;
 12258                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 12259                                  ;		ES:DI point to SFT currently being updated
 12260                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 12261                                  ;		AX has 8000h
 12262                                  ;   Registers modified: none
 12263                                  ;
 12264                                  ;----------------------------------------------------------------------------
 12265                                  ;
 12266                                  
 12267                                  	; 17/05/2019 - Retro DOS v4.0
 12268                                  ResetLRU:
 12269                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 12270                                  	; DOSDATA
 12271                                  
 12272 0000191D B80080                  	MOV	AX,8000h
 12273 00001920 06                      	push	es
 12274 00001921 57                      	push	di
 12275                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12276 00001922 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12277                                  	;mov	cx,[es:di+4]
 12278 00001927 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12279                                  	;lea	di,[di+6]
 12280 0000192B 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12281                                  ovScan:
 12282 0000192E 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12283 00001931 7703                    	JA	short ovLoop
 12284 00001933 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12285                                  ovLoop:
 12286                                  	;;add	di,53	; MSDOS 3.3
 12287                                  	;add	di,59	; MSDOS 6.0	
 12288 00001936 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12289 00001939 E2F3                    	LOOP	ovScan
 12290 0000193B 5F                      	pop	di
 12291 0000193C 07                      	pop	es
 12292 0000193D 268901                  	MOV	[ES:DI+BX],AX
 12293 00001940 C3                      	retn
 12294                                  
 12295                                  ;IF  0  ; We dont need this routine any more.
 12296                                  ;
 12297                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12298                                  ;----------------------------------------------------------------------------
 12299                                  ;
 12300                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12301                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12302                                  ;   count here and fill in the appropriate field.
 12303                                  ;
 12304                                  ;   Inputs:	ES:DI point to SFT
 12305                                  ;   Outputs:	ES:DI has the open age field filled in.
 12306                                  ;		If open age has wraparound, we will have subtracted 8000h
 12307                                  ;		    from all open ages.
 12308                                  ;   Registers modified: AX
 12309                                  ;
 12310                                  ;----------------------------------------------------------------------------
 12311                                  ;
 12312                                  ;SetOpenAge:
 12313                                  ;	; 20/07/2018 - Retro DOS v3.0
 12314                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12315                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12316                                  ;
 12317                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12318                                  ;
 12319                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12320                                  ;	INC	AX
 12321                                  ;	;mov	[es:di+17h],ax
 12322                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12323                                  ;	JNZ	short SetDone
 12324                                  ;	;mov	bx,17h
 12325                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12326                                  ;	call	ResetLRU
 12327                                  ;SetDone:
 12328                                  ;	MOV	[CS:OpenLRU],AX
 12329                                  ;	retn
 12330                                  ;
 12331                                  ;ENDIF	; SetOpenAge no longer needed
 12332                                  
 12333                                  ; 21/07/2018 - Retro DOS v3.0
 12334                                  ; LRUFCB for MSDOS 6.0 !
 12335                                  
 12336                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12337                                  ;----------------------------------------------------------------------------
 12338                                  ;
 12339                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12340                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12341                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12342                                  ;
 12343                                  ;   Inputs:	none
 12344                                  ;   Outputs:	ES:DI point to SFT
 12345                                  ;		ThisSFT points to SFT
 12346                                  ;		SFT is zeroed
 12347                                  ;		Carry set of closes failed
 12348                                  ;   Registers modified: none
 12349                                  ;
 12350                                  ;----------------------------------------------------------------------------
 12351                                  ;
 12352                                  ; MSDOS 6.0
 12353                                  ;IF 0	; rewritten this routine
 12354                                  ;
 12355                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12356                                  ;	call	save_world
 12357                                  ;	
 12358                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12359                                  ; to find the lease recently used one that is younger than the open age.  We
 12360                                  ; operate be scanning the list n times finding the least age that is greater
 12361                                  ; or equal to the previous minimum age.
 12362                                  ;
 12363                                  ;   BP is the count of times we need to go through this loop.
 12364                                  ;   AX is the current acceptable minimum age to consider
 12365                                  ;
 12366                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12367                                  ;	XOR	AX,AX			; low = 0;
 12368                                  ;
 12369                                  ; If we've scanned the table n times, then we are done.
 12370                                  ;
 12371                                  ;lru1:
 12372                                  ;	CMP	bp,0			; while (k--) {
 12373                                  ;	JZ	short lru75
 12374                                  ;	DEC	bp
 12375                                  ;
 12376                                  ; Set up for scan.
 12377                                  ;
 12378                                  ;   AX is the minimum age for consideration
 12379                                  ;   BX is the minimum age found during the scan
 12380                                  ;   SI is the position of the entry that corresponds to BX
 12381                                  ;
 12382                                  ;	MOV	BX,-1			;     min = 0xffff;
 12383                                  ;	MOV	si,BX			;     pos = 0xffff;
 12384                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12385                                  ;	;mov	cx,[es:di+4]
 12386                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12387                                  ;	;lea	di,[di+6]
 12388                                  ;	LEA	DI,[DI+SFT.SFTable]
 12389                                  ;
 12390                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12391                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12392                                  ; are done.  In both cases, we use the found entry.
 12393                                  ;
 12394                                  ;lru2:
 12395                                  ;	cmp	word [es:di],0
 12396                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12397                                  ;	jz	short lru25
 12398                                  ;	;cmp	word [es:di],-1
 12399                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 12400                                  ;	cmp	word [es:di],sf_busy
 12401                                  ;	jnz	short lru3
 12402                                  ;
 12403                                  ; The entry is usable without further scan.  Go and use it.
 12404                                  ;
 12405                                  ;lru25:
 12406                                  ;	MOV	si,DI			;	      pos = i;
 12407                                  ;	JMP	short lru11		;	      goto got;
 12408                                  ;
 12409                                  ; See if the entry is for the network or for the sharer.
 12410                                  ;
 12411                                  ;  If for the sharer or network then
 12412                                  ;	if the age < current minimum AND >= allowed minimum then
 12413                                  ;	    this entry becomes current minimum
 12414                                  ;
 12415                                  ;lru3:
 12416                                  ;	;test	word [es:di+5],8000h
 12417                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12418                                  ;					;	  if (!net[i]
 12419                                  ;	JNZ	short lru35
 12420                                  ;if installed
 12421                                  ;	call	CheckShare		;		&& !sharing)
 12422                                  ;	JZ	short lru5		;	  else
 12423                                  ;ENDIF
 12424                                  ;
 12425                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12426                                  ; current minimum.
 12427                                  ;
 12428                                  ;lru35:
 12429                                  ;	;mov	dx,[es:di+17h]
 12430                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12431                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12432                                  ;	JB	short lru5
 12433                                  ;	CMP	DX,BX
 12434                                  ;	JAE	short lru5		;	      age[i] < min) {
 12435                                  ;
 12436                                  ; entry is new minimum.  Remember his age.
 12437                                  ;
 12438                                  ;	mov	bx,DX			;	      min = age[i];
 12439                                  ;	mov	si,di			;	      pos = i;
 12440                                  ;
 12441                                  ; End of loop.	gp back for more
 12442                                  ;
 12443                                  ;lru5:
 12444                                  ;	;add	di,53
 12445                                  ;	add	di,SF_ENTRY.size
 12446                                  ;	loop	lru2			;	      }
 12447                                  ;
 12448                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12449                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12450                                  ; complete.  Go find LRU.
 12451                                  ;
 12452                                  ;lru6:	
 12453                                  ;	cmp	si,-1			; position not -1?
 12454                                  ;	jz	short lru75		; no, done with everything
 12455                                  ;	lea	ax,[bx+1]		; set new threshold age
 12456                                  ;	jmp	short lru1		; go and loop for more
 12457                                  ;lru65:	
 12458                                  ;	stc
 12459                                  ;	jmp	short LRUDead		;	  return -1;
 12460                                  ;
 12461                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12462                                  ; network entry. We now make a second pass through to find the LRU entry
 12463                                  ; that is local-no-share or has age >= AX
 12464                                  ;
 12465                                  ;lru75:
 12466                                  ;	mov	bx,-1			; min = 0xffff;
 12467                                  ;	mov	si,bx			; pos = 0xffff;
 12468                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12469                                  ;	;mov	cx,[es:di+4]
 12470                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12471                                  ;	;lea	di,[di+6]
 12472                                  ;	LEA	DI,[DI+SFT.SFTable]
 12473                                  ;
 12474                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12475                                  ; then check for lru.
 12476                                  ;
 12477                                  ;lru8:
 12478                                  ;	;test	word [es:di+5],8000h
 12479                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12480                                  ;	jnz	short lru85		; is for network, go check age
 12481                                  ;	call	CheckShare		; sharer here?
 12482                                  ;	jz	short lru86		; no, go check lru
 12483                                  ;
 12484                                  ; Network or sharer.  Check age
 12485                                  ;
 12486                                  ;lru85:
 12487                                  ;	;cmp	[es:di+17h],ax
 12488                                  ;	cmp	[es:di+sf_OpenAge],ax
 12489                                  ;	jb	short lru9		; age is before threshold, skip it
 12490                                  ;
 12491                                  ; Check LRU
 12492                                  ;
 12493                                  ;lru86:
 12494                                  ;	;cmp	[es:di+15h],bx
 12495                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12496                                  ;	jae	short lru9		; no, skip this
 12497                                  ;	mov	si,di			; remember position
 12498                                  ;	;mov	bx,[es:di+15h]
 12499                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12500                                  ;
 12501                                  ; Done with this entry, go back for more.
 12502                                  ;
 12503                                  ;lru9:
 12504                                  ;	;add	di, 53
 12505                                  ;	add	di,SF_ENTRY.size
 12506                                  ;	loop	lru8
 12507                                  ;
 12508                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12509                                  ; out. The conditions here are:
 12510                                  ;
 12511                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12512                                  ;
 12513                                  ;lru10:
 12514                                  ;	cmp	si,-1			; if no one f
 12515                                  ;	jz	short lru65		;     return -1;
 12516                                  ;lru11:
 12517                                  ;	mov	di,si
 12518                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12519                                  ;	MOV	[CS:THISSFT+2],ES
 12520                                  ;
 12521                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12522                                  ; is 0.
 12523                                  ;
 12524                                  ;	;test	word [es:di+5],8000h
 12525                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12526                                  ;	JNZ	short LRUClose
 12527                                  ;IF INSTALLED
 12528                                  ;	call	CheckShare
 12529                                  ;	JZ	short LRUDone
 12530                                  ;ENDIF
 12531                                  ;
 12532                                  ; Repeat close until ref count is 0
 12533                                  ;
 12534                                  ;LRUClose:
 12535                                  ;	push	ss
 12536                                  ;	pop	ds
 12537                                  ;	LES	DI,[THISSFT]
 12538                                  ;	cmp     word [es:di],0
 12539                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12540                                  ;	JZ	short LRUDone 		; nope, all done
 12541                                  ;	call	DOS_CLOSE
 12542                                  ;	jnc	short LRUClose		; no error => clean up
 12543                                  ;	;cmp	al,6
 12544                                  ;	cmp	al,error_invalid_handle
 12545                                  ;	jz	short LRUClose
 12546                                  ;	stc
 12547                                  ;	JMP	short LRUDead
 12548                                  ;LRUDone:
 12549                                  ;	XOR	AL,AL
 12550                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12551                                  ;
 12552                                  ;LRUDead:
 12553                                  ;	call	restore_world
 12554                                  ;	LES     DI,[CS:THISSFT]
 12555                                  ;	jnc	short LRUFCB_retn
 12556                                  ;LRUFCB_err:
 12557                                  ;	; mov	al, 23h	
 12558                                  ;	MOV	AL,error_FCB_unavailable
 12559                                  ;LRUFCB_retn:	
 12560                                  ;	retn:
 12561                                  ;
 12562                                  ;ENDIF	; LRUFCB has been rewritten below.
 12563                                  
 12564                                  ; 17/05/2019 - Retro DOS v4.0
 12565                                  ; LRUFCB for MSDOS 6.0 !
 12566                                  ;----------------------------------------------------------------------------
 12567                                  ;
 12568                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12569                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12570                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12571                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12572                                  ; optimize regeneration operations by keeping track of the current local
 12573                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12574                                  ; local SFT in the SFT Block.
 12575                                  ;
 12576                                  ; Inputs: al = 0 => Regenerate SFT operation
 12577                                  ;	    = 1 => Allocate new SFT for Open/Create
 12578                                  ;
 12579                                  ; Outputs: Carry clear
 12580                                  ;	 	es:di = Address of allocated SFT
 12581                                  ;	  	ThisSFT = Address of allocated SFT
 12582                                  ;
 12583                                  ;	  carry set if closes of net/Share files failed 
 12584                                  ;		al = error_FCB_unavailable
 12585                                  ;
 12586                                  ; Registers affected: None
 12587                                  ;
 12588                                  ;----------------------------------------------------------------------------
 12589                                  
 12590                                  ;LruFCB	PROC	NEAR
 12591                                  LRUFCB:
 12592                                  	; 17/05/2019 - Retro DOS v4.0
 12593                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12594                                  
 12595                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12596                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12597                                  
 12598                                  	; 20/01/2024
 12599                                  
 12600 00001941 06                      	push	es	; * (MSDOS 6.21)
 12601                                  	
 12602 00001942 E81DEB                  	call	save_world
 12603                                  	
 12604                                  	;getdseg <ds>		;ds = DOSDATA
 12605 00001945 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12606                                  
 12607 0000194A 08C0                    	or	al,al		;Check if regenerate allocation
 12608 0000194C 7516                    	jnz	short lru1	;Try to find SFT to use
 12609                                  
 12610                                  	; This is a regen call. If LocalSFT contains the address of a valid
 12611                                  	; local SFT, just return that SFT to reuse
 12612                                  
 12613                                  	; 20/01/2024
 12614                                  	;mov	di,[LocalSFT]
 12615                                  	;or	di,[LocalSFT+2]	;is address == 0?
 12616                                  	;jz	short lru1	;invalid local SFT, find one
 12617                                  
 12618                                  	; We have found a valid local SFT. Recycle this SFT
 12619                                  
 12620 0000194E C43E[5D10]              	les	di,[LocalSFT]
 12621                                  
 12622                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12623 00001952 8CC1                    	mov	cx,es
 12624 00001954 09F9                    	or	cx,di		; is address == 0?
 12625 00001956 740C                    	jz	short lru1	; invalid local SFT, find one
 12626                                  
 12627                                  gotlocalSFT:
 12628 00001958 893E[9E05]              	mov	[THISSFT],di
 12629 0000195C 8C06[A005]              	mov	[THISSFT+2],es
 12630 00001960 F8                      	clc
 12631 00001961 E9A900                  	jmp	LRUDone		;clear up SFT and return
 12632                                  
 12633                                  lru1:
 12634 00001964 C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12635                                  	;mov	cx,[es:di+4]
 12636 00001968 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12637                                  	;lea	di,[di+6]
 12638 0000196C 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12639                                  
 12640                                  	; We scan through all the SFTs scanning for a free one. It also 
 12641                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately.
 12642                                  	; bx = min. LRU for local SFTs
 12643                                  	; si = pos. of local SFT with min. LRU
 12644                                  	; dx = min. LRU for net/Share SFTs
 12645                                  	; bp = pos. of net/Share SFT with min. LRU
 12646                                  
 12647 0000196F BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12648 00001972 89DE                    	mov	si,bx
 12649 00001974 89DA                    	mov	dx,bx
 12650 00001976 89DD                    	mov	bp,bx
 12651                                  
 12652                                  findSFT:
 12653                                  	;See if this SFT is a free one. If so, return it
 12654 00001978 26830D00                	or	word [es:di],0
 12655                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12656 0000197C 744C                    	jz	short gotSFT	;yes, SFT is free
 12657                                  	;;cmp	word [es:di],-1
 12658                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12659 0000197E 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12660 00001982 7446                    	jz	short gotSFT	;no, can use it
 12661                                  
 12662                                  	; Check if this SFT is local and store its address in LocalSFT. Can be
 12663                                  	; used for a later regen.
 12664                                  
 12665                                  	; 16/12/2022
 12666                                  	; 08/11/2022
 12667                                  	;test	byte [es:di+6],80h
 12668 00001984 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12669                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12670                                  	;;test	word [es:di+5],8000h
 12671                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12672 00001989 7531                    	jnz	short lru5	;yes, get net/Share LRU
 12673                                  
 12674                                  ;IF installed
 12675 0000198B E82F58                  	call	CheckShare	;Share present?
 12676                                  ;ENDIF
 12677 0000198E 752C                    	jnz	short lru5	;yes, get net/Share LRU
 12678                                  
 12679                                  	;Local SFT, register its address
 12680                                  
 12681                                  	; !!HACK!!!
 12682                                  	; There is a slightly dirty hack out here in a desperate bid to save
 12683                                  	; code space. There is similar code duplicated at label 'gotSFT'. We
 12684                                  	; enter from there if al = 0, update the LocalSFT variable, and since
 12685                                  	; al = 0, we jump out of the loop to the exit point. I have commented
 12686                                  	; out the code that previously existed at label 'gotSFT'
 12687                                  
 12688                                  hackpoint:
 12689 00001990 893E[5D10]              	mov	[LocalSFT],di
 12690 00001994 8C06[5F10]              	mov	[LocalSFT+2],es	;store local SFT address
 12691                                  
 12692 00001998 08C0                    	or	al,al		;Is operation = REGEN?
 12693 0000199A 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12694                                  
 12695                                  	;Get LRU for local files
 12696                                  	
 12697                                  	;cmp	[es:di+15h],bx
 12698 0000199C 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12699 000019A0 7306                    	jae	short lru4	;no, skip 
 12700                                  
 12701                                  	;mov	bx,[es:di+15h]
 12702 000019A2 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12703 000019A6 89FE                    	mov	si,di		;store SFT position
 12704                                  lru4:
 12705                                  	;add	di,59
 12706 000019A8 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12707 000019AB E2CB                    	loop	findSFT
 12708                                  	
 12709                                  	; 20/01/2024
 12710 000019AD 49                      	dec	cx ; -1
 12711                                  
 12712                                  	; Check whether we got a net/Share or local SFT. If local SFT
 12713                                  	; available, we will reuse it instead of net/Share LRU
 12714                                  
 12715 000019AE 89F7                    	mov	di,si
 12716                                  	;cmp	si,-1		;local SFT available?
 12717 000019B0 39CE                    	cmp	si,cx ; 20/01/2024
 12718 000019B2 7516                    	jnz	short gotSFT	;yes, return it
 12719                                  
 12720                                  	;No local SFT, see if we got a net/Share SFT
 12721                                  
 12722 000019B4 89EF                    	mov	di,bp
 12723                                  
 12724 000019B6 39CD                    	cmp	bp,cx ; -1 ; 20/01/2024
 12725                                  	;cmp	bp,-1		;net/Share SFT available?
 12726 000019B8 752D                    	jnz	short gotnetSFT	;yes, return it
 12727                                  noSFT:
 12728                                  	; NB: This error should never occur. We always must have an LRU SFT.
 12729                                  	; This error can occur only if the SFT has been corrupted or the LRU
 12730                                  	; count is not maintained properly.
 12731                                  
 12732 000019BA EB4E                    	jmp	short errorbadSFT ;error, no FCB available.
 12733                                  
 12734                                  	; Handle the LRU for net/Share SFTs
 12735                                  lru5:
 12736                                  	;cmp	[es:di+15h],dx
 12737 000019BC 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12738 000019C0 73E6                    	jae	short lru4	;no, skip
 12739                                  
 12740                                  	;mov	dx,[es:di+15h]
 12741 000019C2 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12742                                  
 12743 000019C6 89FD                    	mov	bp,di		;store SFT position
 12744 000019C8 EBDE                    	jmp	short lru4	;continue with next SFT
 12745                                  
 12746                                  gotSFT:
 12747 000019CA 08C0                    	or	al,al
 12748 000019CC 74C2                    	jz	short hackpoint	;save es:di in LocalSFT
 12749                                  
 12750                                  	; HACK!!!
 12751                                  	; The code here differs from the code at 'hackpoint' only in the
 12752                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint'
 12753                                  	; and then from there jump out to 'gotlocalSFT'. The original code
 12754                                  	; has been commented out below and replaced by the code just above.
 12755                                  
 12756                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12757                                  ;
 12758                                  ;	or	al,al		  ;Regen?
 12759                                  ;	jnz	short notlocaluse ;yes, register it and return
 12760                                  ;
 12761                                  ;Register this SFT as a local one
 12762                                  ;
 12763                                  ;	mov	[LocalSFT],di
 12764                                  ;	mov	[LocalSFT+2],es
 12765                                  ;	jmp	gotlocalSFT	;return to caller
 12766                                  ;
 12767                                  ;notlocaluse:
 12768                                  
 12769                                  	; The caller is probably going to use this SFT for a net/Share file.
 12770                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN)
 12771                                  	; does not really know whether it is a local file or not. We
 12772                                  	; invalidate LocalSFT if the SFT we are going to use was previously
 12773                                  	; registered as a local SFT that can be recycled.
 12774                                  
 12775 000019CE 8CC0                    	mov	ax,es
 12776 000019D0 393E[5D10]              	cmp	[LocalSFT],di		;Offset same?
 12777 000019D4 750E                    	jne	short notinvalid
 12778 000019D6 3906[5F10]              	cmp	[LocalSFT+2],ax		;Segments same?
 12779                                  	;je	short zerolocalSFT	;no, no need to invalidate
 12780                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12781 000019DA 7508                    	jne	short notinvalid
 12782                                  zerolocalSFT:	
 12783 000019DC 31C0                    	xor	ax,ax ; 0
 12784 000019DE A3[5D10]                	mov	[LocalSFT],ax
 12785 000019E1 A3[5F10]                	mov	[LocalSFT+2],ax
 12786                                  	
 12787                                  notinvalid:
 12788 000019E4 E971FF                  	jmp	gotlocalSFT
 12789                                  
 12790                                  	; The SFT we are going to use was registered in the LocalSFT variable.
 12791                                  	; Invalidate this variable i.e LocalSFT = NULL
 12792                                  
 12793                                  ;zerolocalSFT:
 12794                                  	;xor	ax,ax ; 0
 12795                                  	;mov	[LocalSFT],ax
 12796                                  	;mov	[LocalSFT+2],ax
 12797                                  	;
 12798                                  	;jmp	gotlocalSFT
 12799                                  
 12800                                  gotnetSFT:
 12801                                  	; We have an SFT that is currently net/Share. If it is going to be
 12802                                  	; used for a regen, we know it has to be a local SFT. Update the
 12803                                  	; LocalSFT variable
 12804                                  
 12805 000019E7 08C0                    	or	al,al
 12806 000019E9 7508                    	jnz	short closenet
 12807                                  
 12808 000019EB 893E[5D10]              	mov	[LocalSFT],di
 12809 000019EF 8C06[5F10]              	mov	[LocalSFT+2],es	;store local SFT address
 12810                                  closenet:
 12811 000019F3 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12812 000019F7 8C06[A005]              	mov	[THISSFT+2],es
 12813                                  
 12814                                  	; If we have sharing or thisSFT is a net sft, then close it until ref
 12815                                  	; count is 0.
 12816                                  	; NB: We come here only if it is a net/Share SFT that is going to be
 12817                                  	; recycled -- no need to check for this.
 12818                                  
 12819                                  LRUClose:
 12820 000019FB 26833D00                	cmp	word [es:di],0
 12821                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12822 000019FF 740C                    	jz	short LRUDone	; nope, all done
 12823                                  
 12824 00001A01 E8A414                  	call	DOS_CLOSE
 12825 00001A04 73F5                    	jnc	short LRUClose	; no error => clean up
 12826                                  
 12827                                  	; Bugbug: I dont know why we are trying to close after we get an
 12828                                  	; error closing. Seems like we could have a potential infinite loop
 12829                                  	; here. This has to be verified.
 12830                                  
 12831 00001A06 3C06                    	cmp	al,error_invalid_handle ; 6
 12832 00001A08 74F1                    	je	short LRUClose
 12833                                  errorbadSFT:
 12834 00001A0A F9                      	stc
 12835 00001A0B EB05                    	JMP	short LRUDead
 12836                                  LRUDone:
 12837 00001A0D 30C0                    	XOR	AL,AL
 12838 00001A0F E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12839                                  
 12840                                  LRUDead:
 12841 00001A12 E836EA                  	call	restore_world		; use macro
 12842                                  	
 12843 00001A15 07                      	pop	es ; * (MSDOS 6.21)
 12844                                  
 12845                                  	;getdseg <es>
 12846 00001A16 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12847 00001A1B 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12848                                  
 12849                                  	;;retnc
 12850                                  	;jc	short LruFCB_err
 12851                                  	;retn
 12852                                  
 12853                                  	; 16/12/2022
 12854                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12855 00001A20 7302                    	jnc	short LruFCB_retn
 12856                                  	;jc	short LruFCB_err
 12857                                  	;retn
 12858                                  		
 12859                                  LruFCB_err:
 12860 00001A22 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12861                                  LruFCB_retn:
 12862 00001A24 C3                      	retn
 12863                                  	
 12864                                  ;LruFCB	ENDP
 12865                                  
 12866                                  ; 17/05/2019 - Retro DOS v4.0
 12867                                  
 12868                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12869                                  
 12870                                  ; --------------------------------------------------------------------------
 12871                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12872                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12873                                  ; to copy the name to different destinations
 12874                                  ;
 12875                                  ; Inputs: ds:si = source string
 12876                                  ;	 es:di = destination string
 12877                                  ;	 cx = length of string
 12878                                  ;
 12879                                  ; Outputs: String copied to destination
 12880                                  ;
 12881                                  ; Registers affected: cx,di,si
 12882                                  ; --------------------------------------------------------------------------
 12883                                  
 12884                                  RegenCopyName:
 12885                                  CopyName:
 12886 00001A25 AC                      	lodsb			;load character
 12887 00001A26 E80835                  	call	UCase		; convert char to upper case
 12888                                  StuffChar2:
 12889 00001A29 AA                      	STOSB			;store converted character
 12890 00001A2A E2F9                    	LOOP	CopyName	;
 12891                                  DoneName:
 12892 00001A2C C3                      	retn
 12893                                  
 12894                                  ; --------------------------------------------------------------------------
 12895                                  
 12896                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12897                                  FCBRegen:
 12898                                  	; called from SFTFromFCB. SS already DOSDATA
 12899                                  
 12900                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12901                                  	; we do not fill, size we do no fill, position we do not fill,
 12902                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12903                                  
 12904                                  	;mov	al,[si+19h]
 12905 00001A2D 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12906                                  
 12907                                  	; We discriminate based on the first two bits in the reserved field.
 12908                                  	
 12909                                  	;test	al,80h
 12910 00001A30 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12911 00001A32 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12912                                  
 12913                                  	; The FCB is for a network or a sharing based system. At this point 
 12914                                  	; we have already closed the SFT for this guy and reconnection is 
 12915                                  	; impossible.
 12916                                  	;
 12917                                  	; Remember that he may have given us a FCB with bogus information in
 12918                                  	; it. Check to see if sharing is present or if the redir is present.
 12919                                  	; If either is around, presume that we have cycled out the FCB and 
 12920                                  	; give the hard error. Otherwise, just return with carry set.
 12921                                  
 12922 00001A34 E88657                  	call	CheckShare		; test for sharer
 12923 00001A37 7509                    	JNZ	short RegenFail		; yep, fail this.
 12924                                  	
 12925                                  	;mov	ax,1100h
 12926 00001A39 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12927 00001A3C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12928                                  			; Return: AL = 00h  not installed, OK to install
 12929                                  			; 01h  not installed, not OK to install
 12930                                  			; FFh  installed
 12931 00001A3E 08C0                    	OR	AL,AL			; is it there?
 12932 00001A40 740C                    	JZ	short RegenDead		; no, just fail the operation
 12933                                  RegenFail:
 12934                                  	; 17/05/2019 - Retro DOS v4.0
 12935                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12936 00001A42 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12937                                  
 12938                                  	;cmp	ah,10h
 12939 00001A46 80FC10                  	cmp	AH,FCB_CLOSE
 12940 00001A49 7403                    	jz	short RegenDead
 12941 00001A4B E88B01                  	call	FCBHardErr		; massive hard error.
 12942                                  RegenDead:
 12943 00001A4E F9                      	STC				; carry set
 12944                                  FCBRegen_retn:
 12945 00001A4F C3                      	retn
 12946                                  
 12947                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12948                                  	; so fail the operation.
 12949                                  
 12950                                  RegenNoSharing:
 12951 00001A50 E86A57                  	call	CheckShare		; Sharing around?
 12952 00001A53 75ED                    	JNZ	short RegenFail
 12953                                  	
 12954                                  	; Find an SFT for this guy.
 12955                                  	
 12956                                  	; 17/05/2019 - Retro DOS v4.0
 12957                                  
 12958                                  	; MSDOS 3.3
 12959                                  	;call	LRUFCB
 12960                                  	;jc	short FCBRegen_retn
 12961                                  	
 12962                                  	; MSDOS 6.0
 12963 00001A55 50                      	push	ax
 12964 00001A56 B000                    	mov	al,0			;indicate it is a regen operation
 12965 00001A58 E8E6FE                  	call	LRUFCB
 12966 00001A5B 58                      	pop	ax
 12967 00001A5C 72F1                    	jc	short FCBRegen_retn
 12968                                  
 12969                                  	;mov	word [es:di+2],8002h
 12970 00001A5E 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12971 00001A64 243F                    	AND	AL,3Fh			; get drive number for flags
 12972 00001A66 98                      	CBW
 12973                                  	;or	ax,4000h
 12974 00001A67 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12975                                  
 12976                                  	; The bits field consists of the upper two bits (dirty and device) 
 12977                                  	; from the SFT and the low 4 bits from the open mode.
 12978                                  
 12979                                  	;mov	cl,[si+1Ah]
 12980 00001A6A 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12981 00001A6D 88CD                    	MOV	CH,CL
 12982 00001A6F 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12983 00001A72 08E8                    	OR	AL,CH
 12984                                  	;and	cl,0Fh
 12985 00001A74 80E10F                  	AND	CL,access_mask		; get the mode bits
 12986                                  	;mov	[es:di+2],cl
 12987 00001A77 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12988                                  	;mov	[es:di+5],ax
 12989 00001A7B 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12990                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12991 00001A7F 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12992                                  	;mov	[es:di+31h],ax
 12993 00001A83 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12994 00001A87 1E                      	push	ds
 12995 00001A88 56                      	push	si
 12996 00001A89 06                      	push	es
 12997 00001A8A 57                      	push	di
 12998 00001A8B 16                      	push	ss
 12999 00001A8C 07                      	pop	es
 13000 00001A8D BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 13001                                  
 13002 00001A90 B90800                  	MOV	CX,8
 13003 00001A93 46                      	INC	SI			; Skip past drive byte to name in FCB
 13004                                  
 13005                                  	; MSDOS 3.3
 13006                                  ;RegenCopyName:
 13007                                  	;lodsb
 13008                                  	;call	UCase
 13009                                  	;stosb
 13010                                  	;loop	RegenCopyName
 13011                                  
 13012                                  	; MSDOS 6.0
 13013 00001A94 E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 13014                                  
 13015 00001A97 16                      	push	ss	; SS is DOSDATA
 13016 00001A98 1F                      	pop	ds
 13017                                  
 13018                                  	;mov	byte [ATTRIB],16h
 13019 00001A99 C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 13020                                  					; Must set this to something interesting
 13021                                  					; to call DEVNAME.
 13022 00001A9E E83326                  	call	DEVNAME 		; check for device
 13023 00001AA1 5E                      	pop	si
 13024 00001AA2 07                      	pop	es
 13025 00001AA3 5E                      	pop	si
 13026 00001AA4 1F                      	pop	ds
 13027 00001AA5 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 13028                                  
 13029                                  	; Device found. We can ignore disk-specific info
 13030                                  
 13031                                  	;mov	[es:di+5],bh
 13032 00001AA7 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 13033                                  	;mov	byte [es:di+4],0
 13034 00001AAB 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 13035                                  					; SS override
 13036                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 13037 00001AB0 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 13038                                  	;mov	[es:di+7],si
 13039 00001AB5 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13040                                  	;mov	[es:di+9],ds
 13041 00001AB9 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13042 00001ABD C3                      	retn				; carry is clear
 13043                                  
 13044                                  RegenDeadJ:
 13045 00001ABE EB8E                    	JMP	short RegenDead
 13046                                  
 13047                                  	; File found. Just copy in the remaining pieces.
 13048                                  
 13049                                  RegenFileNoSharing:
 13050                                  	;mov	ax,[es:di+5]
 13051 00001AC0 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 13052 00001AC4 83E03F                  	AND	AX,03Fh
 13053 00001AC7 1E                      	push	ds
 13054 00001AC8 56                      	push	si
 13055 00001AC9 E8B24D                  	call	FIND_DPB
 13056                                  	;mov	[es:di+7],si
 13057 00001ACC 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13058                                  	;mov	[es:di+9],ds
 13059 00001AD0 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13060 00001AD4 5E                      	pop	si
 13061 00001AD5 1F                      	pop	ds
 13062 00001AD6 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 13063                                  					; indicator was bogus
 13064                                  	;mov	ax,[si+1Dh]
 13065 00001AD8 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 13066                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 13067                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 13068 00001ADB 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 13069                                  
 13070                                  	; MSDOS 6.0
 13071                                  
 13072                                  	; SR;
 13073                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 13074                                  	; number
 13075                                  
 13076                                  	;mov	al,[si+18h]
 13077 00001ADF 8A4418                  	mov	al,[si+fcb_sfn]
 13078 00001AE2 24C0                    	and	al,0C0h		;get the 2 attribute bits
 13079 00001AE4 88C4                    	mov	ah,al
 13080 00001AE6 D0C4                    	rol	ah,1
 13081 00001AE8 D0E8                    	shr	al,1
 13082 00001AEA 08E0                    	or	al,ah
 13083 00001AEC 243F                    	and	al,03Fh		;mask off unused bits
 13084                                  	;mov	[es:di+4],al
 13085 00001AEE 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 13086                                  
 13087                                  	; SR;
 13088                                  	; Update the higher word of the directory sector from the FCB
 13089                                  
 13090                                  	;;mov	al,[si+18h]
 13091 00001AF2 8A4418                  	mov	al,[si+fcb_sfn]
 13092 00001AF5 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 13093 00001AF7 28E4                    	sub	ah,ah
 13094                                  	;mov	[es:di+1Dh],ax
 13095 00001AF9 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 13096                                  
 13097                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13098                                  	;mov	ax,[si+1Bh]
 13099 00001AFD 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 13100                                  	;mov	[es:di+0Bh],ax
 13101 00001B00 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 13102                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 13103                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 13104 00001B04 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 13105                                  	;mov	al,[si+1Fh]
 13106 00001B08 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 13107                                  	;mov  	[es:di+1Fh],al
 13108 00001B0B 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 13109                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13110 00001B0F 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 13111                                  					; Existing FCB entries would be
 13112                                  					; flushed unnecessarily because of
 13113                                  					; check in CheckFCB of the ref_count.
 13114                                  					; July 22/85 - BAS
 13115                                  	;lea	si,[si+1]
 13116 00001B12 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 13117                                  	;lea	di,[di+20h]
 13118 00001B15 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 13119                                  	;mov	cx,11
 13120 00001B18 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13121                                  	
 13122                                  	; MSDOS 6.0
 13123 00001B1B E807FF                  	call	RegenCopyName	;copy name to SFT 
 13124                                  	
 13125                                  	; MSDOS 3.3
 13126                                  ;RegenCopyName2:
 13127                                  	;lodsb
 13128                                  	;call    UCase
 13129                                  	;stosb
 13130                                  	;loop    RegenCopyName2
 13131                                  
 13132 00001B1E F8                      	clc
 13133 00001B1F C3                      	retn
 13134                                  
 13135                                  ; 17/05/2019 - Retro DOS v4.0
 13136                                  
 13137                                  ;**	BlastSFT - FIll SFT with Garbage
 13138                                  ; --------------------------------------------------------------------------
 13139                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 13140                                  ;	various garbage values to put into the SFT.  I don't know why,
 13141                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 13142                                  ;	necessary to show that the SFT is free after filling it.
 13143                                  ;
 13144                                  ;	ENTRY	(es:di) = address of SFT
 13145                                  ;		(al) = fill character
 13146                                  ;	EXIT	(ax) = -1
 13147                                  ;		'C' clear
 13148                                  ;	USES	AX, CX, Flags
 13149                                  
 13150                                  BlastSFT:
 13151 00001B20 57                      	push	di
 13152                                  	;mov	cx,53 ; MSDOS 3.3
 13153                                  	;mov	cx,59 ; MSDOS 6.0
 13154 00001B21 B93B00                  	mov	cx,SF_ENTRY.size
 13155 00001B24 F3AA                    	rep	stosb
 13156 00001B26 5F                      	pop	di
 13157 00001B27 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 13158 00001B29 268905                  	mov	[es:di],ax
 13159                                  	;mov	[es:di+SF_ENTRY.sf_ref_count],ax ; set ref count    ;
 13160                                  	;mov	[es:di+15h],ax
 13161 00001B2C 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 13162 00001B30 48                      	dec	ax	; -1					    ;
 13163                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 13164 00001B31 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 13165                                  BlastSFT_retn:
 13166 00001B35 C3                      	retn				; return with 'C' clear     ;
 13167                                  
 13168                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 13169                                  ; --------------------------------------------------------------------------
 13170                                  ;
 13171                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 13172                                  ;   regenerated.
 13173                                  ;
 13174                                  ;   Inputs:	DS:SI point to FCB (not extended)
 13175                                  ;		AL is SFT index
 13176                                  ;   Outputs:	Carry Set - FCB needs to be regened
 13177                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 13178                                  ;   Registers modified: AX and BX
 13179                                  ;
 13180                                  ; --------------------------------------------------------------------------
 13181                                  
 13182                                  	; 21/01/2024
 13183                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13184                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 13185                                  CheckFCB:
 13186                                  		
 13187                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 13188                                  
 13189                                  	; MSDOS 3.3
 13190                                  
 13191                                  	; LES	DI,[CS:SFTFCB]
 13192                                  
 13193                                  	; MSDOS 6.0
 13194                                  	
 13195                                  	; SR;
 13196                                  	; We check if the given FCB is for a local file. If so, we return a 
 13197                                  	; bad SFT status forcing the caller to regenerate the SFT.
 13198                                  
 13199                                  	;test	byte [si+19h],0C0h
 13200 00001B36 F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 13201 00001B3A 7447                    	jz	short BadSFT		;Local file, return bad SFT
 13202 00001B3C 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 13203                                  
 13204                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13205                                  	;cmp	[es:di+4],al
 13206 00001B41 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 13207 00001B45 723C                    	JC	short BadSFT
 13208                                  	;;mov	bl,53 ; MSDOS 3.3
 13209                                  	;mov	bl,59 ; MSDOS 6.0
 13210 00001B47 B33B                    	MOV	BL,SF_ENTRY.size
 13211 00001B49 F6E3                    	MUL	BL
 13212                                  	;lea	di,[di+6]
 13213 00001B4B 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 13214 00001B4E 01C7                    	ADD	DI,AX
 13215                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 13216 00001B50 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 13217                                  	;cmp	[es:di+31h],ax
 13218 00001B54 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 13219 00001B58 7529                    	JNZ	short BadSFT		; must match process
 13220 00001B5A 26833D00                	cmp	word [es:di],0
 13221                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 13222 00001B5E 7423                    	JZ	short BadSFT		; must also be in use
 13223                                  	;mov	al,[si+19h]
 13224 00001B60 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 13225                                  	;test	al,80h
 13226 00001B63 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 13227 00001B65 7428                    	JZ	short CheckNoShare	; No. try local or device
 13228                                  
 13229                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 13230                                  	; FCBSHARE is a superset of FCBNETWORK.
 13231                                  
 13232 00001B67 50                      	PUSH	AX
 13233                                  	;and	al,0C0h
 13234 00001B68 24C0                    	AND	AL,FCBMASK
 13235                                  	;cmp	al,0C0h
 13236 00001B6A 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 13237 00001B6C 58                      	POP	AX
 13238 00001B6D 7516                    	JNZ	short CheckNet		; yes
 13239                                  ;
 13240                                  ;----- In share support -----
 13241                                  ;
 13242                                  	;call	far [cs:JShare+(11*4)]
 13243 00001B6F 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 13244 00001B74 720D                    	JC	short BadSFT
 13245                                  
 13246                                  ; 21/01/2024
 13247                                  %if 0
 13248                                  	JMP	SHORT CheckD
 13249                                  ;
 13250                                  ;----- End in share support -----
 13251                                  ;
 13252                                  	; 09/11/2022
 13253                                  	; (There is not any procedure/sub
 13254                                  	;  which calls or jumps to CheckFirClus here)
 13255                                  	;;;
 13256                                  CheckFirClus:
 13257                                  	;cmp     bx,[es:di+0Bh]
 13258                                  	; 07/12/2022
 13259                                  	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 13260                                  	JNZ	short BadSFT
 13261                                  	;;;
 13262                                  %endif
 13263                                  
 13264                                  CheckD: 
 13265 00001B76 243F                    	AND	AL,3Fh
 13266                                  	;mov	ah,[es:di+5]
 13267 00001B78 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 13268 00001B7C 80E43F                  	AND	AH,3Fh
 13269 00001B7F 38C4                    	CMP	AH,AL
 13270                                  	; 16/12/2022
 13271 00001B81 74B2                    	jz	short BlastSFT_retn	; carry is clear
 13272                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13273                                  	;jnz	short BadSFT
 13274                                  ;CheckD_retn:
 13275                                  	;retn
 13276                                  BadSFT: 
 13277 00001B83 F9                      	STC
 13278 00001B84 C3                      	retn
 13279                                  				
 13280                                  CheckNet:
 13281                                  	; 17/05/2019 - Retro DOS v4.0
 13282                                  	
 13283                                  ;----- In net support -----
 13284                                  
 13285                                  	; MSDOS 3.3
 13286                                  	;;mov	ax,[si+1Ah]
 13287                                  	;mov	ax,[si+fcb_net_handle]
 13288                                  	;;cmp	ax,[es:di+1Dh]
 13289                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 13290                                  	;jnz	short BadSFT
 13291                                  	;;cmp	ax,[es:di+19h]
 13292                                  	;cmp	ax,[ES:DI+sf_netid]
 13293                                  	;jnz     short BadSFT
 13294                                  	;;mov	ax,[si+1Eh]
 13295                                  	;mov	ax,[si+fcb_l_attr]
 13296                                  	;;cmp	ax,[es:di+1Bh]
 13297                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13298                                  	;jnz     short BadSFT
 13299                                  
 13300                                  	; MSDOS 6.0
 13301                                  	;mov	ax,[si+1Ch]
 13302 00001B85 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13303                                  	; 09/11/2022
 13304                                  	;cmp	ax,[es:di+0Bh] 
 13305 00001B88 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13306 00001B8C 75F5                    	JNZ	short BadSFT
 13307                                  
 13308                                  ;----- END In net support -----
 13309                                  
 13310                                  CheckNet_retn:
 13311 00001B8E C3                      	retn
 13312                                  
 13313                                  CheckNoShare:
 13314                                  
 13315                                  ; 16/12/2022
 13316                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13317                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13318                                  ;	;test	al,40h
 13319                                  ;	test	AL,FCBDEVICE		; Device?
 13320                                  ;	;jnz	short $+2 ; 09/11/2022
 13321                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13322                                  
 13323                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13324                                  	;;mov	bx,[si+1Dh]
 13325                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13326                                  	;;cmp	bx,[es:di+1Dh]
 13327                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13328                                  	;jnz	short BadSFT
 13329                                  	;;mov	bl,[si+1Fh]
 13330                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13331                                  	;;cmp	bl,[es:di+1Fh]
 13332                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13333                                  	;jnz	short BadSFT
 13334                                  	;;mov	bl,[si+1Ah]
 13335                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13336                                  	;;mov	bh,[es:di+5]
 13337                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13338                                  	;xor	bh,bl
 13339                                  	;and	bh,0C0h
 13340                                  	;jnz	short BadSFT
 13341                                  	;;xor	bl,[es:di+2]
 13342                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13343                                  	;and	bl,0Fh
 13344                                  	;jnz	short BadSFT
 13345                                  	;push	di
 13346                                  	;push	si
 13347                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13348                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13349                                  	;;lea	si,[si+1]
 13350                                  	;LEA	SI,[SI+SYS_FCB.name]
 13351                                  	;;mov	cx,11
 13352                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13353                                  	;repe	cmpsb
 13354                                  	;pop	si
 13355                                  	;pop	di
 13356                                  	;jnz	short BadSFT
 13357                                  	;;mov	bx,[si+1Bh]
 13358                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13359                                  	;jmp	short CheckFirClus
 13360                                  
 13361                                  	; MSDOS 6.0
 13362                                  
 13363                                  	; SR;
 13364                                  	; The code below to match a local FCB with its SFT can no longer be
 13365                                  	; used. We just return a no-match status. This check is done right
 13366                                  	; at the top.
 13367                                  
 13368                                  CheckNoShareDev:
 13369                                  	;mov	bx,[si+1Ah]
 13370 00001B8F 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13371                                  	;cmp	bx,[es:di+7]
 13372 00001B92 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13373 00001B96 75EB                    	JNZ	short BadSFT
 13374                                  	;mov	bx,[si+1Ch]
 13375 00001B98 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13376                                  	;cmp	bx,[es:di+9]
 13377 00001B9B 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13378 00001B9F 75E2                    	JNZ	short BadSFT
 13379 00001BA1 EBD3                    	JMP	short CheckD
 13380                                  
 13381                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13382                                  ;----------------------------------------------------------------------------
 13383                                  ;
 13384                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13385                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13386                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13387                                  ;	with PID
 13388                                  ;
 13389                                  ;   Inputs:	DS:SI point to FCB
 13390                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13391                                  ;		Carry clear -> OK ES:DI -> SFT
 13392                                  ;		Carry set -> error in ax
 13393                                  ;   Registers modified: ES,DI, AX
 13394                                  ;
 13395                                  ;----------------------------------------------------------------------------
 13396                                  
 13397                                  SFTFromFCB:
 13398                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13399                                  
 13400                                  	; 17/05/2019 - Retro DOS v4.0
 13401                                  
 13402 00001BA3 50                      	push	ax
 13403 00001BA4 53                      	push	bx
 13404                                  	;mov	al,[si+18h]
 13405 00001BA5 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13406 00001BA8 E88BFF                  	call	CheckFCB
 13407 00001BAB 5B                      	pop	bx
 13408 00001BAC 58                      	pop	ax
 13409                                  	;MOV	[CS:THISSFT],DI		; SS override
 13410                                  	;MOV	[CS:THISSFT+2],ES
 13411 00001BAD 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13412 00001BB2 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13413 00001BB7 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13414                                  	
 13415                                  	; 09/11/2022 (MSDOS 5.0)
 13416                                  	; 31/05/2019
 13417 00001BB9 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13418 00001BBA E8A5E8                  	call	save_world
 13419 00001BBD E86DFE                  	call	FCBRegen
 13420 00001BC0 E888E8                  	call	restore_world		; use macro restore world
 13421 00001BC3 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13422                                  
 13423                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13424 00001BC4 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13425 00001BC8 72C4                    	jc	short CheckNet_retn
 13426                                  
 13427                                  Set_SFT: 
 13428                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13429 00001BCA 36C43E[9E05]            	les	di,[ss:THISSFT]
 13430                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13431 00001BCF 36FF36[3C03]            	push	word [ss:PROC_ID]
 13432                                  	;pop	word [es:di+31h]
 13433 00001BD4 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13434 00001BD8 C3                      	retn				; carry is clear
 13435                                  
 13436                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13437                                  ;----------------------------------------------------------------------------
 13438                                  ;
 13439                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13440                                  ;	unavailable FCB.
 13441                                  ;
 13442                                  ;   Inputs:	none.
 13443                                  ;   Outputs:	none.
 13444                                  ;   Registers modified: all
 13445                                  ;
 13446                                  ;----------------------------------------------------------------------------
 13447                                  
 13448                                  FCBHardErr:
 13449                                  	; 17/05/2019 - Retro DOS v4.0
 13450 00001BD9 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13451                                  	;
 13452                                  	;mov	ax,23h
 13453 00001BDE B82300                  	MOV	AX,error_FCB_unavailable
 13454                                  	;;mov	byte [cs:ALLOWED],8
 13455                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13456 00001BE1 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13457                                  	
 13458                                  	;LES	BP,[CS:THISDPB]
 13459 00001BE7 26C42E[8A05]            	les	bp,[es:THISDPB]
 13460                                  	
 13461 00001BEC BF0100                  	MOV	DI,1			; Fake some registers
 13462 00001BEF 89F9                    	MOV	CX,DI
 13463                                  	;mov	dx,[es:bp+0Bh]
 13464 00001BF1 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13465 00001BF5 E8F335                  	call	HARDERR
 13466 00001BF8 F9                      	STC
 13467 00001BF9 C3                      	retn
 13468                                  
 13469                                  ;============================================================================
 13470                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13471                                  ;============================================================================
 13472                                  ; 21/07/2018 - Retro DOS v3.0
 13473                                  ; 17/05/2019 - Retro DOS v4.0
 13474                                  
 13475                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13476                                  ;
 13477                                  ;	GetRR
 13478                                  ;	GetExtent
 13479                                  ;	SetExtent
 13480                                  ;	GetExtended
 13481                                  ;	GetRecSize
 13482                                  ;	FCBIO
 13483                                  ;	$FCB_OPEN
 13484                                  ;	$FCB_CREATE
 13485                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13486                                  ;	$FCB_RANDOM_READ_BLOCK
 13487                                  ;	$FCB_SEQ_READ
 13488                                  ;	$FCB_SEQ_WRITE
 13489                                  ;	$FCB_RANDOM_READ
 13490                                  ;	$FCB_RANDOM_WRITE
 13491                                  ;
 13492                                  ;	Revision history:
 13493                                  ;
 13494                                  ;		Created: ARR 4 April 1983
 13495                                  ;			 MZ  6 June  1983 completion of functions
 13496                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13497                                  ;				  times.  Change so successive closes work by
 13498                                  ;				  always returning OK.	Also, detect I/O to
 13499                                  ;				  already closed FCB and return EOF.
 13500                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13501                                  ;				  out of sft into FCB for reconnection
 13502                                  ;
 13503                                  ;	    A000   version 4.00	Jan. 1988
 13504                                  
 13505                                  ; Defintions for FCBOp flags
 13506                                  
 13507                                  RANDOM	equ 2				; random operation
 13508                                  FCBREAD equ 4				; doing a read
 13509                                  BLOCK	equ 8				; doing a block I/O
 13510                                  
 13511                                  ;Break <GetRR - return the random record field in DX:AX>
 13512                                  ;---------------------------------------------------------------------------
 13513                                  ;
 13514                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13515                                  ;	from the FCB pointed to by DS:SI
 13516                                  ;
 13517                                  ;   Inputs:	DS:SI point to an FCB
 13518                                  ;		BX has record size
 13519                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13520                                  ;   Registers modified: none
 13521                                  ;---------------------------------------------------------------------------
 13522                                  
 13523                                  GetRR:
 13524                                  	;mov	ax,[si+21h]
 13525 00001BFA 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13526                                  	;mov	dx,[si+23h]
 13527 00001BFD 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13528 00001C00 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13529 00001C03 7202                    	JB	short GetRRBye
 13530                                  GetExtent_bye:	; 21/01/2024
 13531 00001C05 30F6                    	XOR	DH,DH
 13532                                  GetRRBye:
 13533 00001C07 C3                      	retn
 13534                                  
 13535                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13536                                  ;---------------------------------------------------------------------------
 13537                                  ;
 13538                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13539                                  ;	NR fields in the FCB.
 13540                                  ;
 13541                                  ;   Inputs:	DS:SI - point to FCB
 13542                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13543                                  ;   Registers modified: none
 13544                                  ;---------------------------------------------------------------------------
 13545                                  
 13546                                  GetExtent:
 13547                                  	;mov	al,[si+20h]
 13548 00001C08 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13549                                  	;mov	dx,[si+0Ch]
 13550 00001C0B 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13551 00001C0E D0E0                    	SHL	AL,1
 13552 00001C10 D1EA                    	SHR	DX,1
 13553 00001C12 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13554 00001C14 88D4                    	MOV	AH,DL
 13555 00001C16 88F2                    	MOV	DL,DH
 13556                                  	; 21/01/2024
 13557                                  	;XOR	DH,DH
 13558                                  	;retn
 13559 00001C18 EBEB                    	jmp	short GetExtent_bye
 13560                                  
 13561                                  ;Break <SetExtent - update the extent/NR field>
 13562                                  ;---------------------------------------------------------------------------
 13563                                  ;
 13564                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13565                                  ;	fields
 13566                                  ;
 13567                                  ;   Inputs:	DS:SI point to FCB
 13568                                  ;		DX:AX is a record location in file
 13569                                  ;   Outputs:	Extent/NR fields are filled in
 13570                                  ;   Registers modified: CX
 13571                                  ;---------------------------------------------------------------------------
 13572                                  
 13573                                  SetExtent:
 13574 00001C1A 50                      	push	ax
 13575 00001C1B 52                      	push	dx
 13576 00001C1C 89C1                    	MOV	CX,AX
 13577 00001C1E 247F                    	AND	AL,7FH			; next rec field
 13578                                  	;mov	[si+20h],al
 13579 00001C20 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13580 00001C23 80E180                  	AND	CL,80H			; save upper bit
 13581 00001C26 D1E1                    	SHL	CX,1
 13582 00001C28 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13583 00001C2A 88E8                    	MOV	AL,CH
 13584 00001C2C 88D4                    	MOV	AH,DL
 13585                                  	;mov	[si+0Ch], ax
 13586 00001C2E 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13587 00001C31 5A                      	pop	dx
 13588 00001C32 58                      	pop	ax
 13589 00001C33 C3                      	retn
 13590                                  
 13591                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13592                                  ;---------------------------------------------------------------------------
 13593                                  ;
 13594                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13595                                  ;
 13596                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13597                                  ;   Outputs:	DS:SI point to the FCB part
 13598                                  ;		zeroflag set if not extended fcb
 13599                                  ;   Registers modified: SI
 13600                                  ;---------------------------------------------------------------------------
 13601                                  
 13602                                  GetExtended:
 13603 00001C34 89D6                    	MOV	SI,DX			; point to Something
 13604 00001C36 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13605 00001C39 7503                    	JNZ	short GetBye		; not there
 13606 00001C3B 83C607                  	ADD	SI,7			; point to FCB
 13607                                  GetBye:
 13608 00001C3E 39D6                    	CMP	SI,DX			; set condition codes
 13609                                  getextd_retn:
 13610 00001C40 C3                      	retn
 13611                                  
 13612                                  ;Break <GetRecSize - return in BX the FCB record size>
 13613                                  ;---------------------------------------------------------------------------
 13614                                  ;
 13615                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13616                                  ;
 13617                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13618                                  ;   Outputs:	BX contains the record size
 13619                                  ;   Registers modified: None
 13620                                  ;---------------------------------------------------------------------------
 13621                                  
 13622                                  	; 22/01/2024
 13623                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13624                                  GetRecSize:
 13625                                  	;mov	bx,[si+0Eh]
 13626 00001C41 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13627 00001C44 09DB                    	OR	BX,BX			; is it nul?
 13628                                  	;jz	short getextd_retn
 13629                                  	; 22/01/2024 (BugFix)
 13630 00001C46 75F8                    	jnz	short getextd_retn
 13631                                  	;MOV	BX,128			; use default size
 13632 00001C48 B380                    	mov	bl,128
 13633                                  	;mov	[si+0Eh],bx
 13634 00001C4A 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13635 00001C4D C3                      	retn
 13636                                  ; 23/01/2024 - Retro DOS v5.0
 13637                                  ; PCDOS 7.1 IBMDOS.COM - DOSCODE:61B3h
 13638                                  ; 23/01/2024 - Retro DOS v4.2
 13639                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DC1h
 13640                                  ; 23/01/2024 - Retro DOS v4.1
 13641                                  ; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DADh
 13642                                  
 13643                                  ; 22/07/2018 - Retro DOS v3.0
 13644                                  
 13645                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13646                                  ;----------------------------------------------------------------------------
 13647                                  ;
 13648                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13649                                  ;	and write a number of blocks from it.
 13650                                  ;
 13651                                  ;   Inputs:	DS:DX point to an FCB
 13652                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13653                                  ;		AL <> 0 Not enough room on disk for the output
 13654                                  ;
 13655                                  ;----------------------------------------------------------------------------
 13656                                  
 13657                                  _$FCB_RANDOM_WRITE_BLOCK:
 13658                                  	;mov	AL,0Ah
 13659 00001C4E B00A                    	MOV	AL,RANDOM+BLOCK
 13660 00001C50 EB12                    	JMP	short FCBIO	; 23/01/2024
 13661                                  
 13662                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13663                                  ;----------------------------------------------------------------------------
 13664                                  ;
 13665                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13666                                  ;	and read a number of blocks from it.
 13667                                  ;
 13668                                  ;   Inputs:	DS:DX point to an FCB
 13669                                  ;   Outputs:	AL = error codes defined above
 13670                                  ;
 13671                                  ;----------------------------------------------------------------------------
 13672                                  
 13673                                  _$FCB_RANDOM_READ_BLOCK:
 13674                                  	;mov	AL,0Eh
 13675 00001C52 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13676 00001C54 EB0E                    	JMP	short FCBIO	; 23/01/2024
 13677                                  
 13678                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13679                                  ;----------------------------------------------------------------------------
 13680                                  ;
 13681                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13682                                  ;	memory
 13683                                  ;
 13684                                  ;   Inputs:	DS:DX point to an FCB
 13685                                  ;   Outputs:	AL = error codes defined above
 13686                                  ;
 13687                                  ;----------------------------------------------------------------------------
 13688                                  
 13689                                  _$FCB_SEQ_READ:
 13690                                  	;mov	AL,4
 13691 00001C56 B004                    	MOV	AL,FCBREAD
 13692 00001C58 EB0A                    	JMP	short FCBIO	; 23/01/2024
 13693                                  
 13694                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13695                                  ;----------------------------------------------------------------------------
 13696                                  ;
 13697                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13698                                  ;	file
 13699                                  ;
 13700                                  ;   Inputs:	DS:DX point to an FCB
 13701                                  ;   Outputs:	AL = error codes defined above
 13702                                  ;
 13703                                  ;----------------------------------------------------------------------------
 13704                                  
 13705                                  _$FCB_SEQ_WRITE:
 13706 00001C5A B000                    	MOV	AL,0
 13707 00001C5C EB06                    	JMP	short FCBIO	; 23/01/2024
 13708                                  
 13709                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13710                                  ;----------------------------------------------------------------------------
 13711                                  ;
 13712                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13713                                  ;	record from it.
 13714                                  ;
 13715                                  ;   Inputs:	DS:DX point to an FCB
 13716                                  ;   Outputs:	AL = error codes defined above
 13717                                  ;
 13718                                  ;----------------------------------------------------------------------------
 13719                                  
 13720                                  _$FCB_RANDOM_READ:
 13721                                  	;mov	AL,6
 13722 00001C5E B006                    	MOV	AL,RANDOM+FCBREAD
 13723                                  	; 23/01/2024
 13724                                  	;jmp	FCBIO 		; single block
 13725 00001C60 EB02                    	jmp	short FCBIO
 13726                                  
 13727                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13728                                  ;----------------------------------------------------------------------------
 13729                                  ;
 13730                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13731                                  ;	a record to it.
 13732                                  ;
 13733                                  ;   Inputs:	DS:DX point to an FCB
 13734                                  ;   Outputs:	AL = error codes defined above
 13735                                  ;
 13736                                  ;----------------------------------------------------------------------------
 13737                                  
 13738                                  _$FCB_RANDOM_WRITE:
 13739                                  	;mov	AL,2
 13740 00001C62 B002                    	MOV	AL,RANDOM
 13741                                  	; 23/01/2024
 13742                                  	;;jmp	FCBIO
 13743                                  	;jmp	short FCBIO
 13744                                  
 13745                                  ;BREAK <FCBIO - do internal FCB I/O>
 13746                                  ;---------------------------------------------------------------------------
 13747                                  ;
 13748                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13749                                  ;
 13750                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13751                                  ;		DS:DX point to FCB
 13752                                  ;		CX may have count of number of records to xfer
 13753                                  ;   Outputs:	AL has error code
 13754                                  ;   Registers modified: all
 13755                                  ;---------------------------------------------------------------------------
 13756                                  
 13757                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13758                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13759                                  
 13760                                  	; 23/01/2024
 13761                                  	; DOSCODE:5B2Bh (MSDOS 6.22 MSDOS.SYS)
 13762                                  
 13763                                  	; 23/01/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 13764                                  	; DOSCODE:61C9h (PCDOS 7.1 IBMDOS.COM)
 13765                                  
 13766                                  FCBIO:
 13767                                  
 13768                                  FEOF	EQU	1
 13769                                  FTRIM	EQU	2
 13770                                  
 13771                                  %define	FCBErr	byte [bp-1]  ; byte
 13772                                  %define	cRec	word [bp-3]  ; word
 13773                                  ;%define RecPos	word [bp-7]  ; dword
 13774                                  %define RecPosL	word [bp-7]  ; word
 13775                                  %define RecPosH	word [bp-5]  ; word
 13776                                  %define	RecSize	word [bp-9]  ; word
 13777                                  ;%define bPos	word [bp-13] ; dword
 13778                                  %define bPosL	word [bp-13] ; word
 13779                                  %define bPosH	word [bp-11] ; word
 13780                                  %define cByte	word [bp-15] ; word
 13781                                  %define cResult word [bp-17] ; word
 13782                                  %define	cRecRes	word [bp-19] ; word
 13783                                  %define	FCBOp	byte [bp-20] ; byte
 13784                                  ; 23/01/2024
 13785                                  %define bPos bp-13
 13786                                  
 13787                                  	;Enter
 13788                                  
 13789 00001C64 55                      	push	bp
 13790 00001C65 89E5                    	mov	bp,sp
 13791 00001C67 83EC14                  	sub	sp,20
 13792                                  	;mov	[bp-20],al
 13793 00001C6A 8846EC                  	MOV	FCBOp,AL
 13794                                  	;mov	byte [bp-1],0
 13795 00001C6D C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13796 00001C71 E8C0FF                  	call	GetExtended		;   FCB = GetExtended ();
 13797                                  	;test	byte [bp-20],8
 13798 00001C74 F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13799 00001C78 7503                    	JNZ	short GetPos
 13800 00001C7A B90100                  	MOV	CX,1			;	cRec = 1;
 13801                                  GetPos:
 13802                                  	;mov	[bp-3],cx
 13803 00001C7D 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13804 00001C80 E885FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13805 00001C83 E8BBFF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13806                                  	;mov	[bp-9],bx
 13807 00001C86 895EF7                  	MOV	RecSize,BX
 13808                                  	;test	byte [bp-20],2
 13809 00001C89 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13810 00001C8D 7403                    	JZ	short GetRec
 13811 00001C8F E868FF                  	call	GetRR			;	RecPos = GetRR ();
 13812                                  GetRec:
 13813                                  	;mov	[bp-7],ax
 13814 00001C92 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13815                                  	;mov	[bp-5],dx
 13816 00001C95 8956FB                  	MOV	RecPosH,DX
 13817 00001C98 E87FFF                  	call	SetExtent		;   SetExtent (RecPos);
 13818                                  	;mov	ax,[bp-5]
 13819 00001C9B 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13820 00001C9E F7E3                    	MUL	BX
 13821 00001CA0 89C7                    	MOV	DI,AX
 13822                                  	;mov	ax,[bp-7]
 13823 00001CA2 8B46F9                  	MOV	AX,RecPosL
 13824 00001CA5 F7E3                    	MUL	BX
 13825 00001CA7 01FA                    	ADD	DX,DI
 13826                                  	;mov	[bp-13],ax
 13827 00001CA9 8946F3                  	MOV	bPosL,AX
 13828                                  	;mov	[bp-11],dx
 13829 00001CAC 8956F5                  	MOV	bPosH,DX
 13830                                  	;mov	ax,[bp-3]
 13831 00001CAF 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13832 00001CB2 F7E3                    	MUL	BX
 13833                                  	;mov	[bp-15],ax
 13834 00001CB4 8946F1                  	MOV	cByte,AX
 13835                                  
 13836                                  ;hkn; 	SS override
 13837 00001CB7 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13838 00001CBC 83D200                  	ADC	DX,0
 13839 00001CBF 7419                    	JZ	short DoOper
 13840                                  	;mov	byte [bp-1],2
 13841 00001CC1 C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13842                                  
 13843                                  ;hkn; 	SS override
 13844 00001CC5 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13845 00001CC9 F7D8                    	NEG	AX
 13846 00001CCB 7501                    	JNZ	short DoDiv
 13847 00001CCD 48                      	DEC	AX
 13848                                  DoDiv:
 13849 00001CCE 31D2                    	XOR	DX,DX
 13850 00001CD0 F7F3                    	DIV	BX
 13851                                  	;mov	[bp-3],ax
 13852 00001CD2 8946FD                  	MOV	cRec,AX
 13853 00001CD5 F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13854                                  	;mov	[bp-15],ax
 13855 00001CD7 8946F1                  	MOV	cByte,AX		;	}
 13856                                  DoOper:
 13857 00001CDA 31DB                    	XOR	BX,BX
 13858                                  	;mov	[bp-17],bx
 13859 00001CDC 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13860                                  	;cmp	[bp-15],bx
 13861 00001CDF 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13862 00001CE2 7506                    	JNZ	short DoGetExt
 13863                                  	;test	byte [bp-1],2
 13864 00001CE4 F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13865                                  	;JZ	short DoGetExt
 13866                                  	;JMP	short SkipOp
 13867                                  	; 16/12/2022
 13868 00001CE8 7572                    	jnz	short SkipOp
 13869                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13870                                  	;JZ	short DoGetExt
 13871                                  	;JMP	short SkipOp
 13872                                  DoGetExt:
 13873 00001CEA E8B6FE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13874 00001CED 730F                    	JNC	short ContinueOp
 13875                                  FCBDeath:
 13876 00001CEF E85EE9                  	call	FCB_RET_ERR		; signal error, map for extended
 13877                                  	;mov	word [bp-19],0
 13878 00001CF2 C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13879                                  	;mov	byte [bp-1],1
 13880 00001CF7 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13881 00001CFB E9EB00                  	JMP	FCBSave 		; bam!
 13882                                  ContinueOp:
 13883                                  	; 23/01/2024
 13884                                  	; (PCDOS 7.1 IBMDOS.COM)
 13885                                  	;
 13886                                  	;;mov	ax,[si+10h]
 13887                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ]
 13888                                  	;;mov	[es:di+11h],ax
 13889                                  	;MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13890                                  	;;mov	ax,[si+12h]
 13891                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13892                                  	;;mov	[es:di+13h],ax
 13893                                  	;MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13894                                  	;;;
 13895 00001CFE 1E                      	push	ds
 13896 00001CFF C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 13897 00001D02 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 13898 00001D06 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 13899 00001D0A C546F3                  	lds	ax,[bPos] ; lds ax,[bp-13]
 13900 00001D0D 8CDA                    	mov	dx,ds
 13901 00001D0F 1F                      	pop	ds
 13902                                  	;;;
 13903                                  	;;mov	ax,[bp-13]
 13904                                  	;MOV	AX,bPosL
 13905                                  	;;mov	dx,[bp-11]
 13906                                  	;MOV	DX,bPosH
 13907                                  
 13908                                  	;mov	[es:di+15h],ax
 13909 00001D10 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13910                                  	;xchg	dx,[es:di+17h]
 13911 00001D14 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13912 00001D18 52                      	PUSH	DX			; save away Open age.
 13913                                  	;mov	cx,[bp-15]
 13914 00001D19 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13915                                  
 13916                                  ;hkn; DOS_Read is in DOSCODE
 13917 00001D1C BF[3C32]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13918                                  	;test	byte [bp-20],4
 13919 00001D1F F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13920 00001D23 7503                    	JNZ	short DoContext
 13921                                  
 13922                                  ;hkn; DOS_Write is in DOSCODE
 13923 00001D25 BF[3C34]                	MOV	DI,DOS_WRITE
 13924                                  DoContext:
 13925 00001D28 55                      	push	bp
 13926 00001D29 1E                      	push	ds
 13927 00001D2A 56                      	push	si
 13928                                  
 13929                                  ;hkn; SS is DOSDATA
 13930 00001D2B 16                      	push	ss
 13931 00001D2C 1F                      	pop	ds
 13932                                  
 13933                                  ;; Fix for disk full
 13934 00001D2D FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE
 13935                                  	
 13936 00001D2F 5E                      	pop	si
 13937 00001D30 1F                      	pop	ds
 13938 00001D31 5D                      	pop	bp
 13939 00001D32 72BB                    	JC	short FCBDeath
 13940                                  	
 13941 00001D34 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13942 00001D3A 740A                    	JZ	short NODSKFULL
 13943 00001D3C 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13944                                  
 13945                                  	; (MSDOS 5.0-6.22 MSDOS.SYS) ; 23/01/2024
 13946                                  	;mov	byte [bp-1],1 
 13947 00001D42 C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13948                                  
 13949                                  	; 23/01/2024
 13950                                  	; (PCDOS 7.1 IBMDOS.COM)
 13951                                  	;;mov	byte [bp-1],1 
 13952                                  	;MOV	FCBErr,FEOF		; set disk full flag
 13953                                  
 13954                                  NODSKFULL:
 13955                                  ;; Fix for disk full
 13956                                  	;mov	[bp-17],cx
 13957 00001D46 894EEF                  	MOV	cResult,CX
 13958 00001D49 E827FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13959                                  	;pop	word [es:di+17h]	
 13960 00001D4C 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13961                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)
 13962                                  
 13963                                  	; 23/01/2024
 13964                                  	; (PCDOS 7.1 IBMDOS.COM)
 13965                                  	;
 13966                                  	;;mov	ax,[es:di+11h]
 13967                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13968                                  	;;mov	[si+10h],ax
 13969                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 13970                                  	;;mov	ax,[es:di+13h]
 13971                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13972                                  	;;mov	[si+12h],ax
 13973                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13974                                  	;;;
 13975 00001D50 06                      	push	es
 13976 00001D51 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 13977 00001D55 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 13978 00001D58 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 13979 00001D5B 07                      	pop	es
 13980                                  	;;;
 13981                                  					;	}
 13982                                  SkipOp:
 13983                                  	;mov	ax,[bp-17]
 13984 00001D5C 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13985 00001D5F 31D2                    	XOR	DX,DX
 13986                                  	;div	word [bp-9]
 13987 00001D61 F776F7                  	DIV	RecSize
 13988                                  	;mov	[bp-19],ax
 13989 00001D64 8946ED                  	MOV	cRecRes,AX
 13990                                  	;add	[bp-7],ax
 13991 00001D67 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13992                                  	;adc	word [bp-5],0
 13993 00001D6A 8356FB00                	ADC	RecPosH,0
 13994                                  
 13995                                  ; If we have not gotten the expected number of records, we signal an EOF
 13996                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13997                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13998                                  ; do we.
 13999                                  
 14000                                  	;cmp	ax,[bp-3]
 14001 00001D6E 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 14002 00001D71 7411                    	JZ	short TryBlank
 14003                                  	;test	byte [bp-20],4
 14004 00001D73 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 14005 00001D77 7507                    	JNZ	short SetEOF
 14006                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14007                                  	; MSDOS 3.3
 14008                                  	;;test	word [es:di+5],80h
 14009                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14010                                  	;JNZ	short TryBlank
 14011                                  	; MSDOS 5.0 & MSDOS 6.0
 14012                                  	;test	byte [es:di+5],80h
 14013 00001D79 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 14014 00001D7E 7504                    	jnz	short TryBlank
 14015                                  
 14016                                  SetEOF:
 14017                                  	;mov	byte [bp-1],1
 14018 00001D80 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 14019                                  TryBlank:				;
 14020 00001D84 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 14021 00001D86 7426                    	JZ	short SetExt
 14022                                  	;add	word [bp-7],1
 14023 00001D88 8346F901                	ADD	RecPosL,1		;	RecPos++;
 14024                                  	;adc	word [bp-5],0
 14025 00001D8C 8356FB00                	ADC	RecPosH,0
 14026                                  	;test	byte [bp-20],4
 14027 00001D90 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 14028 00001D94 7418                    	JZ	short SetExt
 14029                                  	;inc	word [bp-19]
 14030 00001D96 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 14031                                  	;mov	byte [bp-1],3
 14032 00001D99 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 14033                                  	;mov	cx,[bp-9]
 14034 00001D9D 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 14035 00001DA0 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 14036 00001DA2 30C0                    	XOR	AL,AL
 14037                                  ;hkn; 	SS override
 14038 00001DA4 36C43E[2C03]            	les     di,[ss:DMAADD]
 14039                                  	;add	di,[bp-17]
 14040 00001DA9 037EEF                  	ADD	DI,cResult
 14041 00001DAC F3AA                    	REP	STOSB			;   }	}
 14042                                  SetExt:
 14043                                  	;mov	dx,[bp-5]
 14044 00001DAE 8B56FB                  	MOV	DX,RecPosH
 14045                                  	;mov	ax,[bp-7]
 14046 00001DB1 8B46F9                  	MOV	AX,RecPosL
 14047                                  	;test	byte [bp-20],2
 14048 00001DB4 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 14049 00001DB8 7406                    	JZ	short DoSetExt
 14050                                  	;test	byte [bp-20],8
 14051 00001DBA F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 14052 00001DBE 7403                    	JZ	short TrySetRR
 14053                                  DoSetExt:
 14054 00001DC0 E857FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 14055                                  TrySetRR:
 14056                                  	;test	byte [bp-20],8
 14057 00001DC3 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14058 00001DC7 740F                    	JZ	short TryReturn
 14059                                  	;mov	[si+21h],ax
 14060 00001DC9 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 14061                                  	;mov	[si+23h],dl
 14062 00001DCC 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 14063                                  	;cmp	word [si+0Eh],64
 14064 00001DCF 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 14065 00001DD3 7303                    	JAE	short TryReturn
 14066                                  	;mov	[si+24h],dh
 14067 00001DD5 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 14068                                  TryReturn: 
 14069                                  	;test	byte [bp-20],4
 14070 00001DD8 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 14071 00001DDC 750B                    	JNZ	short FCBSave
 14072 00001DDE 1E                      	push	ds			;	FCB->FDate = date;
 14073 00001DDF E8FEEC                  	call	DATE16			;	FCB->FTime = time;
 14074 00001DE2 1F                      	pop	ds
 14075                                  	;mov	[si+14h],ax
 14076 00001DE3 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 14077                                  	;mov	[si+16h],dx
 14078 00001DE6 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 14079                                  FCBSave: 
 14080                                  	;test	byte [bp-20],8
 14081 00001DE9 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14082 00001DED 7409                    	jz	short DoReturn
 14083                                  	;mov	cx,[bp-19]
 14084 00001DEF 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 14085 00001DF2 E88CE6                  	call    Get_User_Stack
 14086                                  	;mov	[si+4],cx
 14087 00001DF5 894C04                  	MOV	[SI+user_env.user_CX],CX
 14088                                  DoReturn:
 14089                                  	;mov	al,[bp-1]
 14090 00001DF8 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 14091                                  	;Leave	
 14092 00001DFB 89EC                    	mov     sp,bp
 14093 00001DFD 5D                      	pop     bp
 14094 00001DFE C3                      	retn
 14095                                  
 14096                                  ; 22/07/2018 - Retro DOS v3.0
 14097                                  
 14098                                  ;Break <$FCB_Open - open an old-style FCB>
 14099                                  ;---------------------------------------------------------------------------
 14100                                  ;
 14101                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 14102                                  ;	for us and asked to have the rest filled in.
 14103                                  ;
 14104                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14105                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14106                                  ;		FCB has the following fields filled in:
 14107                                  ;		    Time/Date Extent/NR Size
 14108                                  ;---------------------------------------------------------------------------
 14109                                  
 14110                                  _$FCB_OPEN:			; System call 15
 14111                                  
 14112 00001DFF B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 14113                                  
 14114                                  ;hkn; DOS_Open is in DOSCODE
 14115 00001E02 B9[F22A]                	MOV	CX,DOS_OPEN
 14116                                  
 14117                                  ; The following is common code for Creation and openning of FCBs. AX is
 14118                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 14119                                  ; the FCB
 14120                                  
 14121                                  DoAccess:
 14122 00001E05 1E                      	push	ds
 14123 00001E06 52                      	push	dx
 14124 00001E07 51                      	push	cx
 14125 00001E08 50                      	push	ax			; save FCB pointer away
 14126                                  
 14127                                  ;hkn; 	OpenBuf is in DOSDATA
 14128 00001E09 BF[BE03]                	MOV	DI,OPENBUF
 14129 00001E0C E8B64B                  	call	TransFCB		; crunch the fcb
 14130 00001E0F 58                      	pop	ax
 14131 00001E10 59                      	pop	cx
 14132 00001E11 5A                      	pop	dx
 14133 00001E12 1F                      	pop	ds			; get fcb
 14134 00001E13 7303                    	JNC	short FindFCB		; everything seems ok
 14135                                  FCBOpenErr:
 14136                                  	; AL has error code
 14137 00001E15 E938E8                  	jmp	FCB_RET_ERR
 14138                                  FindFCB:
 14139 00001E18 E819FE                  	call	GetExtended		; DS:SI will point to FCB
 14140                                  
 14141                                  	; 17/05/2019 - Retro DOS v4.0
 14142                                  
 14143                                  	; MSDOS 3.3
 14144                                  	;call	LRUFCB
 14145                                  	;jc	short HardMessage
 14146                                  
 14147                                  	; MSDOS 6.0
 14148 00001E1B 50                      	push	ax
 14149 00001E1C B001                    	mov	al,1			;indicate Open/Create operation
 14150 00001E1E E820FB                  	call	LRUFCB			; get a sft entry (no error)
 14151 00001E21 58                      	pop	ax
 14152 00001E22 722A                    	jc	short HardMessage
 14153                                  	
 14154                                  	;mov	word [es:di+2],8000h
 14155 00001E24 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 14156 00001E2A 1E                      	push	ds
 14157 00001E2B 56                      	push	si	
 14158 00001E2C 53                      	push	bx			; save fcb pointer
 14159 00001E2D 89CE                    	MOV	SI,CX
 14160                                  
 14161                                  ;hkn; SS is DOSDATA
 14162 00001E2F 16                      	push	ss
 14163 00001E30 1F                      	pop	ds			    ; let DOS_Open see variables
 14164 00001E31 FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 14165 00001E33 5B                      	pop	bx
 14166 00001E34 5E                      	pop	si
 14167 00001E35 1F                      	pop	ds			; get fcb
 14168                                  
 14169                                  ;hkn; SS override
 14170 00001E36 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 14171 00001E3B 7318                    	JNC	short FCBOK		; operation succeeded
 14172                                  failopen:
 14173 00001E3D 50                      	PUSH	AX
 14174 00001E3E B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 14175 00001E40 E8DDFC                  	call	BlastSFT
 14176 00001E43 58                      	POP	AX
 14177                                  	;cmp	ax,4
 14178 00001E44 83F804                  	CMP	AX,error_too_many_open_files
 14179 00001E47 7405                    	JZ	short HardMessage
 14180                                  	;cmp	ax,24h
 14181 00001E49 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 14182 00001E4C 7505                    	jnz	short DeadFCB
 14183                                  HardMessage:
 14184 00001E4E 50                      	PUSH	AX
 14185 00001E4F E887FD                  	call	FCBHardErr
 14186 00001E52 58                      	POP	AX
 14187                                  DeadFCB:
 14188                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14189                                  	;jmp	FCB_RET_ERR
 14190 00001E53 EBC0                    	jmp	short FCBOpenErr
 14191                                  FCBOK:
 14192                                  	; MSDOS 6.0
 14193 00001E55 E8ECF3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 14194 00001E58 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 14195 00001E5A E86053                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 14196 00001E5D 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 14197                                  ;SR;
 14198                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 14199                                  ; LocalSFT variable to reflect this.
 14200                                  
 14201 00001E5F 36893E[5D10]            	mov	[ss:LocalSFT],di
 14202 00001E64 368C06[5F10]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 14203                                  ;;SR;
 14204                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 14205                                  ;;
 14206                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 14207                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 14208                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 14209                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 14210                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 14211                                  
 14212                                  FCBOK2:
 14213                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14214 00001E69 26FF05                  	inc	word [es:di]
 14215                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 14216 00001E6C E804FA                  	call	SaveFCBInfo
 14217                                  	; MSDOS 3.3
 14218                                  	;call	SetOpenAge
 14219                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14220                                  	;test	word [es:di+5],80h
 14221                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14222 00001E6F 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 14223 00001E74 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 14224 00001E76 8A04                    	MOV	AL,[SI]			; get drive byte
 14225 00001E78 E8D54A                  	call	GETTHISDRV		; convert
 14226                                  	;INC	AL
 14227                                  	; 17/12/2022
 14228 00001E7B 40                      	inc	ax
 14229 00001E7C 8804                    	MOV	[SI],AL			; stash in good drive letter
 14230                                  
 14231                                  FCBNoDrive:
 14232                                  	;mov	word [si+0Eh],128
 14233 00001E7E C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 14234                                  
 14235                                  	; 23/01/2024
 14236                                  	; (PCDOS 7.1 IBMDOS.COM)
 14237                                  	;;;
 14238                                  	;;mov	ax,[es:di+0Dh]
 14239                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 14240                                  	;;mov	[si+16h],ax
 14241                                  	;MOV	[SI+SYS_FCB.FTIME],AX
 14242                                  	;;mov	ax,[es:di+0Fh]
 14243                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 14244                                  	;;mov	[si+14h],ax
 14245                                  	;MOV	[SI+SYS_FCB.FDATE],AX
 14246                                  	;;mov	ax,[es:di+11h]
 14247                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 14248                                  	;;mov	[si+10h],ax
 14249                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 14250                                  	;;mov	ax,[es:di+13h]
 14251                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 14252                                  	;;mov	[si+12h],ax
 14253                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 14254                                  	;
 14255 00001E83 06                      	push	es
 14256                                  	;les	ax,[es:di+0Dh]
 14257 00001E84 26C4450D                	les	ax,[es:di+SF_ENTRY.sf_time]
 14258                                  	;mov	[si+16h],ax
 14259 00001E88 894416                  	mov	[si+SYS_FCB.FTIME],ax	; set time
 14260                                  	;mov	[si+14h],es
 14261 00001E8B 8C4414                  	mov	[si+SYS_FCB.FDATE],es	; set date
 14262 00001E8E 07                      	pop	es
 14263 00001E8F 06                      	push	es
 14264                                  	;les	ax,[es:di+11h]
 14265 00001E90 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size] ; set size
 14266                                  	;mov	[si+10h],ax
 14267 00001E94 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 14268                                  	;mov	[si+12h],ax
 14269 00001E97 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 14270 00001E9A 07                      	pop	es
 14271                                  	;;;
 14272                                  	
 14273 00001E9B 31C0                    	XOR	AX,AX			; convenient zero
 14274                                  	;mov	[si+0Ch],ax
 14275 00001E9D 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 14276                                  
 14277                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 14278                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 14279                                  
 14280                                  ;hkn; 	SS override
 14281 00001EA0 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 14282                                  	;mov	ah,[es:di+4]
 14283 00001EA5 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 14284                                  OpenScan:
 14285                                  	;cmp	al,[si+18h]
 14286 00001EA9 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 14287 00001EAC 7407                    	JZ	short SkipCheck
 14288 00001EAE 50                      	push	ax			; preserve count
 14289 00001EAF E884FC                  	call	CheckFCB		; do they match
 14290 00001EB2 58                      	pop	ax			; get count back
 14291 00001EB3 7309                    	JNC	short OpenFound		; found a match!
 14292                                  SkipCheck:
 14293 00001EB5 FEC0                    	INC	AL			; advance to next FCB
 14294 00001EB7 38E0                    	CMP	AL,AH			; table full?
 14295 00001EB9 75EE                    	JNZ	short OpenScan		; no, go for more
 14296                                  OpenDone:
 14297 00001EBB 30C0                    	xor	al,al			; return success
 14298 00001EBD C3                      	retn
 14299                                  
 14300                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 14301                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 14302                                  ; Consider:
 14303                                  ;
 14304                                  ;   open (foo)	delete (foo) open (bar)
 14305                                  ;
 14306                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 14307                                  ; foo even though foo is no longer needed; this is due to the server closing
 14308                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 14309                                  ; If we were to CLOSE bar, the server would then close the only reference to
 14310                                  ; bar and subsequent I/O would be lost to the redirector.
 14311                                  ;
 14312                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 14313                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 14314                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 14315                                  ; around. This will allow us to access the same file through multiple network
 14316                                  ; connections and NOT prematurely terminate when the ref count on one
 14317                                  ; connection goes to zero.
 14318                                  
 14319                                  OpenFound:
 14320                                  	;mov	[si+18h],al
 14321 00001EBE 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 14322 00001EC1 26FF05                  	inc	word [es:di]
 14323                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14324                                  					; remember this new invocation
 14325                                  	; 24/01/2024
 14326 00001EC4 16                      	push	ss
 14327 00001EC5 1F                      	pop	ds
 14328                                  	
 14329                                  	;MOV	AX,[SS:FCBLRU]		; update LRU counts
 14330 00001EC6 A1[1000]                	mov	ax,[FCBLRU] ; 24/01/2024
 14331                                  	;mov	[es:di+15h],ax
 14332 00001EC9 26894515                	MOV	[ES:DI+sf_LRU],AX
 14333                                  ;
 14334                                  ; We have an FCB sft that is now of no use. We release sharing info and then
 14335                                  ; blast it to prevent other reuse.
 14336                                  ;
 14337                                  	;push	ss
 14338                                  	;pop	ds
 14339                                  
 14340 00001ECD C43E[9E05]              	LES	DI,[THISSFT]
 14341 00001ED1 26FF0D                  	dec	word [es:di]
 14342                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14343                                  					; free the newly allocated SFT
 14344 00001ED4 E81E53                  	call	ShareEnd
 14345 00001ED7 B043                    	MOV	AL,'C'	 ; 43h
 14346 00001ED9 E844FC                  	call	BlastSFT
 14347 00001EDC EBDD                    	JMP	short OpenDone
 14348                                  
 14349                                  ;BREAK	<$FCB_Create - create a new directory entry>
 14350                                  ;----------------------------------------------------------------------------
 14351                                  ;
 14352                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 14353                                  ;	FCB for us and asked to have the rest filled in.
 14354                                  ;
 14355                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14356                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14357                                  ;		FCB has the following fields filled in:
 14358                                  ;		    Time/Date Extent/NR Size
 14359                                  ;----------------------------------------------------------------------------
 14360                                  
 14361                                  _$FCB_CREATE:		; System call 22
 14362                                  
 14363                                  ;hkn; DOS_Create is in DOSCODE
 14364 00001EDE B9[CC29]                	MOV	CX,DOS_CREATE		; routine to call
 14365 00001EE1 31C0                    	XOR	AX,AX			; attributes to create
 14366 00001EE3 E84EFD                  	call	GetExtended		; get extended FCB
 14367 00001EE6 7403                    	JZ	short DoAccessJ		; not an extended FCB
 14368 00001EE8 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 14369                                  DoAccessJ:
 14370 00001EEB E917FF                  	JMP	DoAccess		; do dirty work
 14371                                  
 14372                                  ;============================================================================
 14373                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 14374                                  ;============================================================================
 14375                                  ; 22/07/2018 - Retro DOS v3.0
 14376                                  ; 17/05/2019 - Retro DOS v4.0
 14377                                  
 14378                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 14379                                  
 14380                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14381                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 14382                                  
 14383                                  ;**	Search.asm
 14384                                  ;----------------------------------------------------------------------------
 14385                                  ;	Directory search system calls.
 14386                                  ;	These will be passed direct text of the pathname from the user. 
 14387                                  ;	They will need to be passed through the macro expander prior to
 14388                                  ;	being sent through the low-level stuff. 
 14389                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14390                                  ;
 14391                                  ;	$Dir_Search_First	  written
 14392                                  ;	$Dir_Search_Next	  written
 14393                                  ;	$Find_First	  written
 14394                                  ;	$Find_Next		  written
 14395                                  ;	PackName		  written
 14396                                  ;
 14397                                  ;	Modification history:
 14398                                  ;
 14399                                  ;	  Created: ARR 4 April 1983
 14400                                  
 14401                                  ;----------------------------------------------------------------------------
 14402                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14403                                  ;
 14404                                  ; Inputs:
 14405                                  ;	DS:DX Points to unopenned FCB
 14406                                  ; Function:
 14407                                  ;	Directory is searched for first matching entry and the directory
 14408                                  ;	entry is loaded at the disk transfer address
 14409                                  ; Returns:
 14410                                  ;	AL = -1 if no entries matched, otherwise 0
 14411                                  ;----------------------------------------------------------------------------
 14412                                  
 14413                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14414                                  
 14415                                  	; 24/01/2024
 14416                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DCBh
 14417                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DDFh
 14418                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:647Bh
 14419                                  
 14420                                  _$DIR_SEARCH_FIRST:
 14421 00001EEE 368916[A605]            	MOV	[SS:THISFCB],DX
 14422 00001EF3 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14423 00001EF8 89D6                    	MOV	SI,DX
 14424 00001EFA 803CFF                  	CMP	BYTE [SI],0FFH
 14425 00001EFD 7503                    	JNZ	short NORMFCB4
 14426 00001EFF 83C607                  	ADD	SI,7			; Point to drive select byte
 14427                                  NORMFCB4:
 14428 00001F02 FF34                    	push	word [SI]		; Save original drive byte for later
 14429                                  
 14430 00001F04 16                      	push	ss
 14431 00001F05 07                      	pop	es			; get es to address DOSGroup
 14432                                  
 14433 00001F06 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14434 00001F09 E8B94A                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14435 00001F0C 7304                    	JNC	short SearchIt		; no error, go and look
 14436 00001F0E 5B                      	pop	bx			; Clean stack
 14437                                  
 14438                                  ; Error code is in AX
 14439                                  
 14440                                  	; 09/11/2022
 14441                                  dcf_errj:
 14442 00001F0F E93EE7                  	jmp	FCB_RET_ERR		; error
 14443                                  
 14444                                  SearchIt:
 14445 00001F12 16                      	push	ss
 14446 00001F13 1F                      	pop	ds			; get ready for search
 14447                                  	;push	word [DMAADD]
 14448                                  	;push	word [DMAADD+2]
 14449                                  	; 24/01/2024
 14450 00001F14 C43E[2C03]              	les	di,[DMAADD]
 14451 00001F18 57                      	push	di
 14452 00001F19 06                      	push	es
 14453 00001F1A C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14454 00001F20 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14455                                  	; MSDOS 3.3
 14456                                  	;call	DOS_SEARCH_FIRST
 14457                                  	; MSDOS 6.0
 14458 00001F24 E8930D                  	call	GET_FAST_SEARCH		; search
 14459 00001F27 8F06[2E03]              	pop	word [DMAADD+2]
 14460 00001F2B 8F06[2C03]              	pop	word [DMAADD]
 14461 00001F2F 735C                    	JNC	short SearchSet		; no error, transfer info
 14462 00001F31 5B                      	pop	bx			; Clean stack
 14463                                  
 14464                                  ; Error code is in AX
 14465                                  
 14466                                  	; 09/11/2022
 14467                                  	;jmp	FCB_RET_ERR
 14468 00001F32 EBDB                    	jmp	short dcf_errj
 14469                                  
 14470                                  ;----------------------------------------------------------------------------
 14471                                  ;
 14472                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14473                                  ;
 14474                                  ; Inputs:
 14475                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14476                                  ; Function:
 14477                                  ;	Directory is searched for the next matching entry and the directory
 14478                                  ;	entry is loaded at the disk transfer address
 14479                                  ; Returns:
 14480                                  ;	AL = -1 if no entries matched, otherwise 0
 14481                                  ;----------------------------------------------------------------------------
 14482                                  
 14483                                  	; 24/01/2024
 14484                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5E5Fh
 14485                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5E73h
 14486                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6517h
 14487                                  
 14488                                  _$DIR_SEARCH_NEXT:
 14489 00001F34 368916[A605]            	MOV	[SS:THISFCB],DX
 14490 00001F39 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14491 00001F3E 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14492 00001F44 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14493                                  
 14494 00001F4A 16                      	push	ss
 14495 00001F4B 07                      	pop	es
 14496                                  
 14497 00001F4C BF[BE04]                	MOV	DI,SEARCHBUF
 14498                                  
 14499 00001F4F 89D6                    	MOV	SI,DX
 14500 00001F51 803CFF                  	CMP	BYTE [SI],0FFh
 14501 00001F54 750D                    	JNZ	short NORMFCB6
 14502 00001F56 83C606                  	ADD	SI,6
 14503 00001F59 AC                      	LODSB
 14504                                  
 14505 00001F5A 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14506 00001F5E 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14507                                  NORMFCB6:
 14508 00001F63 AC                      	LODSB				; Get original user drive byte
 14509 00001F64 50                      	push	ax			; Put it on stack
 14510 00001F65 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14511 00001F68 AA                      	STOSB				; Put in correct place
 14512 00001F69 B90A00                  	MOV	CX,20/2
 14513 00001F6C F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14514                                  
 14515 00001F6E 16                      	push	ss
 14516 00001F6F 1F                      	pop	ds
 14517                                  
 14518                                  	;push	word [DMAADD]
 14519                                  	;push	word [DMAADD+2]
 14520                                  	; 24/01/2024
 14521 00001F70 C43E[2C03]              	les	di,[DMAADD]
 14522 00001F74 57                      	push	di
 14523 00001F75 06                      	push	es
 14524 00001F76 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14525 00001F7C 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14526 00001F80 E8330E                  	call	DOS_SEARCH_NEXT 	; Find it
 14527 00001F83 8F06[2E03]              	pop	word [DMAADD+2]
 14528 00001F87 8F06[2C03]              	pop	word [DMAADD]
 14529 00001F8B 724A                    	JC	short SearchNoMore
 14530                                  	; 24/01/2024
 14531                                  	;JMP	SearchSet		; Ok set return
 14532                                  
 14533                                  ;;;	; 24/01/2024
 14534                                  
 14535                                  ; The search was successful (or the search-next). We store the information
 14536                                  ; into the user's FCB for continuation.
 14537                                  
 14538                                  SearchSet:
 14539 00001F8D BE[BE04]                	MOV	SI,SEARCHBUF
 14540 00001F90 C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14541 00001F94 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14542 00001F99 7403                    	JZ	short NORMFCB1
 14543 00001F9B 83C707                  	ADD	DI,7			; Point past the extension
 14544                                  NORMFCB1:
 14545 00001F9E 5B                      	pop	bx			; Get original drive byte
 14546 00001F9F 08DB                    	OR	BL,BL
 14547 00001FA1 7506                    	JNZ	short SearchDrv
 14548 00001FA3 8A1E[3603]              	MOV	BL,[CURDRV]
 14549 00001FA7 FEC3                    	INC	BL
 14550                                  SearchDrv:
 14551 00001FA9 AC                      	LODSB				; Get correct search contin drive byte
 14552 00001FAA 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14553 00001FAC 47                      	INC	DI
 14554                                  	;STOSB				; Store the correct "user" drive byte
 14555                                  					;  at the start of the search info
 14556 00001FAD B90A00                  	MOV	CX,20/2
 14557 00001FB0 F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14558 00001FB2 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14559                                  					;   byte to AL
 14560 00001FB4 AA                      	STOSB				; Search contin drive byte at end of
 14561                                  					;   contin info
 14562 00001FB5 C43E[2C03]              	LES	DI,[DMAADD]
 14563 00001FB9 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14564 00001FBE 740D                    	JZ	short NORMFCB2
 14565 00001FC0 B0FF                    	MOV	AL,0FFh
 14566 00001FC2 AA                      	STOSB
 14567 00001FC3 FEC0                    	INC	AL
 14568                                  	;MOV	CX,5
 14569                                  	; 17/12/2022
 14570 00001FC5 B105                    	mov	cl,5
 14571 00001FC7 F3AA                    	REP	STOSB
 14572 00001FC9 A0[6D05]                	MOV	AL,[SATTRIB]
 14573 00001FCC AA                      	STOSB
 14574                                  NORMFCB2:
 14575 00001FCD 88D8                    	MOV	AL,BL			; User Drive byte
 14576 00001FCF AA                      	STOSB
 14577                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14578                                  	; 17/12/2022
 14579 00001FD0 B110                    	mov	cl,16
 14580 00001FD2 F3A5                    	REP	MOVSW
 14581 00001FD4 E976E6                  	jmp	FCB_RET_OK
 14582                                  ;;;
 14583                                  
 14584                                  SearchNoMore:
 14585 00001FD7 C43E[A605]              	LES	DI,[THISFCB]
 14586 00001FDB F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14587 00001FE0 7403                    	JZ	short NORMFCB8
 14588 00001FE2 83C707                  	ADD	DI,7			; Point past the extension
 14589                                  NORMFCB8:
 14590 00001FE5 5B                      	pop	bx			; Get original drive byte
 14591 00001FE6 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14592                                  					;  at the right spot
 14593                                  ; error code is in AX
 14594                                  
 14595 00001FE9 E964E6                  	jmp	FCB_RET_ERR
 14596                                  
 14597                                  ; 17/05/2019 - Retro DOS v4.0
 14598                                  
 14599                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14600                                  
 14601                                  ;---------------------------------------------------------------------------
 14602                                  ;
 14603                                  ;   Procedure Name : $FIND_FIRST
 14604                                  ; 
 14605                                  ;   Assembler usage:
 14606                                  ;	    MOV AH, FindFirst
 14607                                  ;	    LDS DX, name
 14608                                  ;	    MOV CX, attr
 14609                                  ;	    INT 21h
 14610                                  ;	; DMA address has datablock
 14611                                  ;
 14612                                  ;   Error Returns:
 14613                                  ;	    AX = error_path_not_found
 14614                                  ;	       = error_no_more_files
 14615                                  ;---------------------------------------------------------------------------
 14616                                  
 14617                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14618                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14619                                  
 14620                                  	; 24/01/2024
 14621                                  	; DOSCODE:5EE6h (MSDOS 6.22, MSDOS.SYS)
 14622                                  
 14623                                  _$FIND_FIRST:
 14624 00001FEC 89D6                    	MOV	SI,DX			; get name in appropriate place
 14625 00001FEE 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14626                                  
 14627 00001FF3 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14628                                  
 14629 00001FF6 E8324A                  	call	TransPathSet		; convert the path
 14630 00001FF9 7305                    	JNC	short Find_it 		; no error, go and look
 14631                                  FindError:
 14632                                  	;mov	al,3
 14633 00001FFB B003                    	mov	al, error_path_not_found ; error and map into one.
 14634                                  	; 09/11/2022
 14635                                  FF_errj:
 14636 00001FFD E93AE6                  	jmp	SYS_RET_ERR
 14637                                  Find_it:
 14638 00002000 16                      	push	ss
 14639 00002001 1F                      	pop	ds
 14640                                  
 14641                                  	;push	word [DMAADD]
 14642                                  	;push	word [DMAADD+2]
 14643                                  	; 24/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14644 00002002 C43E[2C03]              	les	di,[DMAADD]
 14645 00002006 57                      	push	di
 14646 00002007 06                      	push	es
 14647 00002008 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14648 0000200E 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14649                                  	; MSDOS 3.3
 14650                                  	;call	DOS_SEARCH_FIRST
 14651                                  	; MSDOS 6.0
 14652 00002012 E8A50C                  	call	GET_FAST_SEARCH 	; search
 14653 00002015 8F06[2E03]              	pop	word [DMAADD+2]
 14654 00002019 8F06[2C03]              	pop	word [DMAADD]
 14655                                  	
 14656                                  	; 16/12/2022
 14657                                  	;JNC	short FindSet 		; no error, transfer info
 14658 0000201D 72DE                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14659                                  	;
 14660                                  	;jmp	SYS_RET_ERR
 14661                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14662                                  ;FFF_errj:
 14663                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14664                                  
 14665                                  FindSet:
 14666 0000201F BE[BE04]                	MOV	SI,SEARCHBUF
 14667 00002022 C43E[2C03]              	LES	DI,[DMAADD]
 14668 00002026 B91500                  	MOV	CX,21
 14669 00002029 F3A4                    	REP	MOVSB
 14670 0000202B 56                      	PUSH	SI			; Save pointer to start of entry
 14671                                  	;mov	al,[si+0Bh]
 14672 0000202C 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14673 0000202F AA                      	STOSB
 14674                                  	;add	si,16h ; 22
 14675 00002030 83C616                  	ADD	SI,dir_entry.dir_time
 14676 00002033 A5                      	MOVSW				; dir_time
 14677 00002034 A5                      	MOVSW				; dir_date
 14678 00002035 46                      	INC	SI
 14679 00002036 46                      	INC	SI			; Skip dir_first
 14680 00002037 A5                      	MOVSW				; dir_size (2 words)
 14681 00002038 A5                      	MOVSW
 14682 00002039 5E                      	POP	SI			; Point back to dir_name
 14683 0000203A E83300                   	CALL	PackName
 14684 0000203D E9F1E5                  	jmp	SYS_RET_OK		; bye with no errors
 14685                                  
 14686                                  ;---------------------------------------------------------------------------
 14687                                  ;
 14688                                  ;   Procedure Name : $FIND_NEXT
 14689                                  ;
 14690                                  ;   Assembler usage:
 14691                                  ;	; dma points at area returned by find_first
 14692                                  ;	    MOV AH, findnext
 14693                                  ;	    INT 21h
 14694                                  ;	; next entry is at dma
 14695                                  ;
 14696                                  ;   Error Returns:
 14697                                  ;	    AX = error_no_more_files
 14698                                  ;---------------------------------------------------------------------------
 14699                                  
 14700                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14701                                  
 14702                                  	; 24/01/2024
 14703                                  	; DOSCODE:5F3Eh (MSDOS 6.22, MSDOS.SYS)
 14704                                  
 14705                                  _$FIND_NEXT:
 14706 00002040 16                      	push	ss
 14707 00002041 07                      	pop	es
 14708                                  
 14709 00002042 BF[BE04]                	MOV	DI,SEARCHBUF
 14710                                  
 14711 00002045 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14712                                  
 14713 0000204A B91500                  	MOV	CX,21
 14714 0000204D F3A4                    	REP	MOVSB			; Put the search continuation info
 14715                                  					;  in the right place
 14716 0000204F 16                      	push	ss
 14717 00002050 1F                      	pop	ds			; get ready for search
 14718                                  	
 14719                                  	;push	word [DMAADD]
 14720                                  	;push	word [DMAADD+2]
 14721                                  	; 24/01/2024
 14722 00002051 C43E[2C03]              	les	di,[DMAADD]
 14723 00002055 57                      	push	di
 14724 00002056 06                      	push	es
 14725 00002057 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14726 0000205D 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14727 00002061 E8520D                  	call	DOS_SEARCH_NEXT 	; Find it
 14728 00002064 8F06[2E03]              	pop	word [DMAADD+2]
 14729 00002068 8F06[2C03]              	pop	word [DMAADD]
 14730 0000206C 73B1                    	JNC	short FindSet 		; No error, set info
 14731                                  	;jmp	SYS_RET_ERR
 14732                                  	; 16/12/2022
 14733 0000206E EB8D                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14734                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14735                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14736                                  
 14737                                  ;---------------------------------------------------------------------------
 14738                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14739                                  ;
 14740                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14741                                  ;	the ASCIZ format.
 14742                                  ;
 14743                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14744                                  ;		(ES:DI) = destination area (13 bytes)
 14745                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14746                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14747                                  ;---------------------------------------------------------------------------
 14748                                  
 14749                                  	; 25/01/2024 - Retro DOS v4.2
 14750                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5F70h
 14751                                  
 14752                                  PackName:
 14753                                  ;	Move over 8 characters to cover the name component, then trim it's
 14754                                  ;	trailing blanks.
 14755                                  
 14756                                  	;MOV	CX,8			; Pack the name
 14757                                  	;REP	MOVSB			; Move all of it
 14758                                  	; 25/01/2024
 14759 00002070 B90400                  	mov	cx,4
 14760 00002073 F3A5                    	rep	movsw
 14761                                  main_kill_tail:
 14762 00002075 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14763 0000207A 7507                    	JNZ	short find_check_dot
 14764 0000207C 4F                      	DEC	DI			; Back up over trailing space
 14765 0000207D 41                      	INC	CX
 14766 0000207E 83F908                  	CMP	CX,8
 14767 00002081 72F2                    	JB	short main_kill_tail
 14768                                  find_check_dot:
 14769                                  	;CMP	WORD [SI],(" " << 8) | " "
 14770 00002083 813C2020                	cmp     word [si],2020h 
 14771 00002087 7506                    	JNZ	short got_ext 		; Some chars in extension
 14772 00002089 807C0220                	CMP	BYTE [SI+2]," "
 14773 0000208D 740F                    	JZ	short find_done		; No extension
 14774                                  got_ext:
 14775 0000208F B02E                    	MOV	AL,"."	; 2Eh
 14776 00002091 AA                      	STOSB
 14777                                  	;MOV	CX,3
 14778                                  	;; 18/12/2022
 14779                                  	;;mov	cl,3
 14780                                  	;;REP	MOVSB
 14781                                  	;movsb
 14782                                  	;movsb
 14783                                  	;movsb
 14784                                  	; 25/01/2024
 14785 00002092 A5                      	movsw
 14786 00002093 A4                      	movsb
 14787                                  ext_kill_tail:
 14788 00002094 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14789 00002099 7503                    	JNZ	short find_done
 14790 0000209B 4F                      	DEC	DI			; Back up over trailing space
 14791 0000209C EBF6                    	JMP	short ext_kill_tail
 14792                                  find_done:
 14793 0000209E 31C0                    	XOR	AX,AX
 14794 000020A0 AA                      	STOSB				; NUL terminate
 14795 000020A1 C3                      	retn
 14796                                  
 14797                                  ;---------------------------------------------------------------------------
 14798                                  
 14799                                  ; 24/01/2024
 14800                                  %if 0
 14801                                  	; 17/05/2019 - Retro DOS v4.0
 14802                                  GET_FAST_SEARCH:
 14803                                  	; 22/07/2018
 14804                                  	; MSDOS 6.0
 14805                                  	; 17/12/2022
 14806                                  	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14807                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14808                                  					;FO.trigger fastopen ;AN000;
 14809                                  	;call	DOS_SEARCH_FIRST
 14810                                  	;retn
 14811                                  	; 17/12/2022
 14812                                  	jmp	DOS_SEARCH_FIRST
 14813                                  %endif
 14814                                  
 14815                                  ;============================================================================
 14816                                  ; PATH.ASM, MSDOS 6.0, 1991
 14817                                  ;============================================================================
 14818                                  ; 06/08/2018 - Retro DOS v3.0
 14819                                  ; 17/05/2019 - Retro DOS v4.0
 14820                                  
 14821                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14822                                  
 14823                                  ;**	Directory related system calls. These will be passed direct text of the
 14824                                  ;	pathname from the user. They will need to be passed through the macro
 14825                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14826                                  ;	defined in DISPATCH. The system calls are:
 14827                                  ;
 14828                                  ;	$CURRENT_DIR  Written
 14829                                  ;	$RMDIR	  Written
 14830                                  ;	$CHDIR	  Written
 14831                                  ;	$MKDIR	  Written
 14832                                  ;
 14833                                  ;
 14834                                  ;	Modification history:
 14835                                  ;
 14836                                  ;	    Created: ARR 4 April 1983
 14837                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14838                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14839                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14840                                  ;				    current directory.
 14841                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14842                                  
 14843                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14844                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14845                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14846                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14847                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14848                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14849                                  ;	I_Need	cMeta,BYTE
 14850                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14851                                  
 14852                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14853                                  ;----------------------------------------------------------------------------
 14854                                  ;
 14855                                  ;   Procedure Name : $CURRENT_DIR
 14856                                  ;
 14857                                  ;   Assembler usage:
 14858                                  ;		LDS	SI,area
 14859                                  ;		MOV	DL,drive
 14860                                  ;		INT	21h
 14861                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14862                                  ;	    ; current directory.
 14863                                  ;   Error returns:
 14864                                  ;	    AX = error_invalid_drive
 14865                                  ;
 14866                                  ;----------------------------------------------------------------------------
 14867                                  
 14868                                  	; 06/08/2018 - Retro DOS v3.0
 14869                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14870                                  
 14871                                  	; 25/01/2024 - Retro DOS v4.2
 14872                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F9Ch
 14873                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5FB0h
 14874                                  	; Windows ME IO.SYS - BIOSCODE:6393h
 14875                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6664h
 14876                                  
 14877                                  _$CURRENT_DIR:
 14878 000020A2 E848F2                  	call	ECritDisk
 14879 000020A5 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14880 000020A7 E88A48                  	call	GetVisDrv		; grab it
 14881 000020AA 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14882                                  CurdirErr:
 14883 000020AC E859F2                  	call	LCritDisk
 14884                                  
 14885                                  	; MSDOS 3.3
 14886                                  	;mov	al,0Fh
 14887                                  	
 14888                                  	; MSDOS 6.0
 14889 000020AF 1E                      	push	ds
 14890 000020B0 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14891 000020B5 A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14892 000020B8 1F                      	pop	ds
 14893                                  
 14894                                  curdir_errj:
 14895 000020B9 E97EE5                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14896                                  
 14897                                  CurrentValidate:
 14898 000020BC 1E                      	push	ds			; save destination
 14899 000020BD 56                      	push	si
 14900                                  	
 14901                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14902                                  	
 14903                                  	; MSDOS 6.0
 14904 000020BE 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14905                                  	; 25/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14906 000020C3 C606[4C03]00            	mov	byte [NoSetDir],0 ; *
 14907                                  	
 14908                                  	; 25/01/2024
 14909                                  	;lds     si,[THISCDS]
 14910                                  
 14911                                  ; 16/12/2022
 14912                                  %if 0
 14913                                  	; 09/11/2022 (following test instruction is nonsense!)
 14914                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14915                                  
 14916                                  	;test	word [si+43h],8000h
 14917                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14918                                  	;jnz	short $+2  ; 09/11/2022	
 14919                                  	jnz	short DoCheck
 14920                                  %endif
 14921                                  
 14922                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14923                                  ; media check.
 14924                                  ;	CMP	word [SI+curdir.ID],0
 14925                                  ;	JZ	short GetDst
 14926                                  DoCheck:
 14927                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14928                                  
 14929                                  	; 25/01/2024
 14930                                  	; MSDOS 6.0
 14931                                  	;push	ds
 14932                                  	;mov	ds,[cs:DosDSeg]
 14933                                  	;mov	byte [NoSetDir],0 ; *
 14934                                  	;pop	ds
 14935                                  
 14936 000020C8 BF[BE03]                	MOV	DI,OPENBUF
 14937 000020CB E89320                  	call	ValidateCDS		; output is ES:DI -> CDS
 14938                                  
 14939 000020CE 06                      	push	es	 		; swap source and destination
 14940 000020CF 57                      	push	di
 14941 000020D0 5E                      	pop	si
 14942 000020D1 1F                      	pop	ds
 14943                                  GetDst:
 14944 000020D2 5F                      	pop	di
 14945 000020D3 07                      	pop	es			; get real destination
 14946 000020D4 72D6                    	JC	short CurdirErr
 14947                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14948                                  	;
 14949                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14950                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14951                                  	; 16/12/2022
 14952                                  	;add	si,0  ; add si,curdir.text
 14953                                  	;
 14954                                  	;add	si,[si+4Fh] ; 17/05/2019
 14955 000020D6 03744F                  	ADD	SI,[SI+curdir.end]
 14956 000020D9 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14957 000020DC 7501                    	JNZ	short CurrentCopy
 14958 000020DE 46                      	INC	SI
 14959                                  CurrentCopy:
 14960                                  ;	call	FStrCpy
 14961                                  ;; 10/29/86 E5 char
 14962 000020DF 50                      	PUSH	AX
 14963 000020E0 AC                      	LODSB				; get char
 14964 000020E1 08C0                    	OR	AL,AL
 14965 000020E3 7413                    	JZ	short FOK
 14966 000020E5 3C05                    	CMP	AL,05H
 14967 000020E7 740D                    	JZ	short FCHANGE
 14968 000020E9 EB01                    	JMP	short FFF
 14969                                  FCPYNEXT:
 14970 000020EB AC                      	LODSB				; get char
 14971                                  FFF:
 14972 000020EC 3C5C                    	CMP	AL,'\'			; beginning of directory
 14973 000020EE 7508                    	JNZ	short FOK		; no
 14974 000020F0 AA                      	STOSB				; put into user's buffer
 14975 000020F1 AC                      	LODSB				; 1st char of dir is 05?
 14976 000020F2 3C05                    	CMP	AL,05H
 14977 000020F4 7502                    	JNZ	short FOK		; no
 14978                                  FCHANGE:
 14979 000020F6 B0E5                    	MOV	AL,0E5H			; make it E5
 14980                                  FOK:
 14981 000020F8 AA                      	STOSB				; put into user's buffer
 14982 000020F9 08C0                    	OR	AL,AL			; final char
 14983 000020FB 75EE                    	JNZ	short FCPYNEXT		; no
 14984 000020FD 58                      	POP	AX
 14985                                  
 14986                                  ;; 10/29/86 E5 char
 14987 000020FE 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14988 00002100 E805F2                  	call	LCritDisk
 14989 00002103 E92BE5                  	jmp	SYS_RET_OK		; no more, bye!
 14990                                  
 14991                                  ; 17/05/2019 - Retro DOS v4.0
 14992                                  
 14993                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14994                                  
 14995                                  ;BREAK <$RmDir -- Remove a directory>
 14996                                  ;----------------------------------------------------------------------------
 14997                                  ;
 14998                                  ; Procedure Name : $RmDir
 14999                                  ;
 15000                                  ; Inputs:
 15001                                  ;	DS:DX Points to asciz name
 15002                                  ; Function:
 15003                                  ;	Delete directory if empty
 15004                                  ; Returns:
 15005                                  ;	STD XENIX Return
 15006                                  ;	AX = error_path_not_found If path bad
 15007                                  ;	AX = error_access_denied If
 15008                                  ;		Directory not empty
 15009                                  ;		Path not directory
 15010                                  ;		Root directory specified
 15011                                  ;		Directory malformed (. and .. not first two entries)
 15012                                  ;		User tries to delete a current directory
 15013                                  ;	AX = error_current_directory
 15014                                  ;
 15015                                  ;----------------------------------------------------------------------------
 15016                                  
 15017                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15018                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 15019                                  
 15020                                  _$RMDIR:
 15021 00002106 52                      	push	dx			; Save ptr to name
 15022 00002107 1E                      	push	ds
 15023 00002108 89D6                    	mov	si,dx			; Load ptr into si
 15024 0000210A BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 15025 0000210D 57                      	push	di
 15026 0000210E E82249                  	call	TransPathNoSet		; Translate the name
 15027 00002111 5F                      	pop	di			; di = ptr to buf for trans name
 15028 00002112 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 15029 00002114 1F                      	pop	ds
 15030 00002115 5A                      	pop	dx			; Restore the name
 15031                                  	;mov	al,3
 15032 00002116 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 15033                                  	; 16/12/2022
 15034                                  rmdir_errj: ; 10/08/2018
 15035                                  chdir_errj:
 15036 00002118 EB9F                    	jmp	short curdir_errj
 15037                                  	;jmp	SYS_RET_ERR
 15038                                  rmlset:
 15039 0000211A 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 15040 00002120 7512                    	Jnz	short rmerr		;	return (-1);
 15041 00002122 16                      	push	ss
 15042 00002123 07                      	pop	es
 15043 00002124 30C0                    	xor	al,al			; al = 0 , ie drive a:
 15044                                  rmloop: 
 15045 00002126 E87C48                  	call	GetCDSFromDrv		; Get curdir for drive in al
 15046 00002129 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 15047 0000212B E863F0                  	call	StrCmp			; Are the 2 paths the same?
 15048 0000212E 7404                    	jz	short rmerr		; Yes, report error.
 15049 00002130 FEC0                    	inc	al			; No, inc al to next drive number
 15050 00002132 EBF2                    	jmp	short rmloop		; Go check next drive.
 15051                                  rmerr:
 15052 00002134 1F                      	pop	ds
 15053 00002135 5A                      	pop	dx			; Restore the name
 15054                                  	;mov	al,10h
 15055 00002136 B010                    	mov	al,error_current_directory ; error
 15056                                  	; 16/12/2022
 15057                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15058                                  ;chdir_errj:
 15059 00002138 EBDE                    	jmp	short rmdir_errj
 15060                                  rmcont:
 15061 0000213A 1F                      	pop	ds
 15062 0000213B 5A                      	pop	dx			; Restore the name
 15063 0000213C BE[6531]                	MOV	SI,DOS_RMDIR
 15064 0000213F EB7C                    	JMP	DoDirCall
 15065                                  
 15066                                  ; 17/05/2019 - Retro DOS v4.0
 15067                                  
 15068                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 15069                                  
 15070                                  ;BREAK <$ChDir -- Change current directory on a drive>
 15071                                  ;----------------------------------------------------------------------------
 15072                                  ;
 15073                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 15074                                  ; for setting up the CDS for the specified drive appropriately.  There are
 15075                                  ; several cases to consider:
 15076                                  ;
 15077                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 15078                                  ;	it into a WFP.	We verify the existance of this directory and then
 15079                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 15080                                  ;	directory cluster.
 15081                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 15082                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 15083                                  ;	WFP back into the CDS.
 15084                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 15085                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 15086                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 15087                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 15088                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 15089                                  ;	to process the path but to return the logical CDS and the logical
 15090                                  ;	path.  We then copy the logical path into the logical CDS.
 15091                                  ;
 15092                                  ; Inputs:
 15093                                  ;	DS:DX Points to asciz name
 15094                                  ; Returns:
 15095                                  ;	STD XENIX Return
 15096                                  ;	AX = chdir_path_not_found if error
 15097                                  ;
 15098                                  ;----------------------------------------------------------------------------
 15099                                  
 15100                                  _$CHDIR:
 15101 00002141 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15102 00002144 89D6                    	MOV	SI,DX			; get source
 15103 00002146 E8DE48                  	call	TransPath		; go munge the path and get real CDS
 15104 00002149 7304                    	JNC	short ChDirCrack	; no errors, try path
 15105                                  ChDirErrP:
 15106                                  	;mov	al,3
 15107 0000214B B003                    	MOV	AL,error_path_not_found
 15108                                  ChDirErr:
 15109                                  	;jmp	SYS_RET_ERR 	; oops!
 15110                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15111 0000214D EBC9                    	jmp	short chdir_errj
 15112                                  
 15113                                  ChDirCrack:
 15114 0000214F 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 15115 00002154 75F5                    	JNZ	short ChDirErrP
 15116                                  
 15117                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 15118                                  ; found.
 15119                                  
 15120 00002156 C43E[A205]              	LES	DI,[THISCDS]
 15121 0000215A 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 15122 0000215D 74EC                    	JZ	short ChDirErrP		;	error ();
 15123                                  
 15124                                  ; Find out if the directory exists.
 15125                                  
 15126 0000215F E8C00F                  	call	DOS_CHDIR
 15127                                  	;Jc	short ChDirErr
 15128                                  	; 16/12/2022
 15129 00002162 72B4                    	jc	short chdir_errj
 15130                                  ;
 15131                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 15132                                  ; not network). If one was seen, all we need to do is copy in the text
 15133                                  ;
 15134 00002164 C43E[A205]              	LES	DI,[THISCDS]
 15135                                  	;test	word [es:di+43h],2000h
 15136                                  	; 17/12/2022
 15137 00002168 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15138                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 15139 0000216D 7425                    	JZ	short GotCDS
 15140                                  
 15141                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 15142                                  
 15143 0000216F 06                      	push	es	
 15144 00002170 57                      	push	di
 15145 00002171 51                      	push	cx			; save CDS and cluster...
 15146 00002172 E80CE3                  	call	Get_User_Stack		; get original text
 15147                                  	
 15148                                  	;mov	di,[si+6]
 15149 00002175 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 15150                                  	;mov	ds,[si+0Eh]
 15151 00002178 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 15152                                  	
 15153 0000217B BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 15154 0000217E 87F7                    	XCHG	SI,DI
 15155 00002180 30C0                    	XOR	AL,AL			; do no splicing
 15156 00002182 57                      	push	di
 15157 00002183 E8AD48                  	call	TransPathNoSet		; Munge path
 15158 00002186 5E                      	pop	si
 15159                                  
 15160                                  ; There should NEVER be an error here.
 15161                                  
 15162                                  ;IF FALSE
 15163                                  ;	JNC SKipErr
 15164                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 15165                                  ;SkipErr:
 15166                                  ;ENDIF
 15167 00002187 C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 15168                                  	;mov	word [es:di+49h],-1
 15169 0000218B 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 15170                                  					; no valid cluster here...
 15171 00002191 59                      	pop	cx
 15172 00002192 5F                      	pop	di
 15173 00002193 07                      	pop	es
 15174                                  
 15175                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 15176                                  
 15177                                  GotCDS:
 15178                                  
 15179                                  ; wfp_start points to the text. See if it is long enough
 15180                                  
 15181                                  	; MSDOS 3.3
 15182                                  	;push	ss
 15183                                  	;pop	ds
 15184                                  	;mov	si,[WFP_START]
 15185                                  	;push	cx
 15186                                  	;call	DStrLen
 15187                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 15188                                  	;pop	cx
 15189                                  	;ja	short ChDirErrP
 15190                                  
 15191                                  	; MSDOS 6.0
 15192 00002194 E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 15193 00002197 77B2                    	JA	short ChDirErrP
 15194                                  	; MSDOS 3.3 & MSDOS 6.0
 15195                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 15196                                  	; 17/12/2022
 15197 00002199 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 15198 0000219E 7512                    	JNZ	short SkipRecency
 15199                                  	; MSDOS 6.0
 15200                                  	;test	word [es:di+43h],2000h
 15201                                  	; 17/12/2022
 15202 000021A0 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15203                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 15204                                  					;PTM. for Join and Subst ;AN000;
 15205 000021A5 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 15206 000021A7 B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 15207                                  setdirclus:
 15208                                  	;mov	[es:di+49h],cx
 15209 000021AA 26894D49                	MOV	[ES:DI+curdir.ID],CX
 15210 000021AE C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 15211                                  SkipRecency:
 15212 000021B2 E80DF0                  	call	FStrCpy
 15213 000021B5 30C0                    	XOR	AL,AL
 15214                                  mkdir_ok:
 15215 000021B7 E977E4                  	jmp	SYS_RET_OK
 15216                                  
 15217                                  ; 17/05/2019 - Retro DOS v4.0
 15218                                  
 15219                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 15220                                  
 15221                                  ;BREAK <$MkDir - Make a directory entry>
 15222                                  ;---------------------------------------------------------------------------
 15223                                  ;
 15224                                  ; Procedure Name : $MkDir
 15225                                  ; Inputs:
 15226                                  ;	DS:DX Points to asciz name
 15227                                  ; Function:
 15228                                  ;	Make a new directory
 15229                                  ; Returns:
 15230                                  ;	STD XENIX Return
 15231                                  ;	AX = mkdir_path_not_found if path bad
 15232                                  ;	AX = mkdir_access_denied  If
 15233                                  ;		Directory cannot be created
 15234                                  ;		Node already exists
 15235                                  ;		Device name given
 15236                                  ;		Disk or directory(root) full
 15237                                  ;---------------------------------------------------------------------------
 15238                                  
 15239                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15240                                  
 15241                                  _$MKDIR:
 15242 000021BA BE[3530]                	MOV	SI,DOS_MKDIR
 15243                                  DoDirCall:
 15244 000021BD BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15245                                  
 15246 000021C0 56                      	push	si
 15247 000021C1 89D6                    	MOV	SI,DX			; get source
 15248 000021C3 E86148                  	call	TransPath		; go munge the path
 15249 000021C6 5E                      	pop	si
 15250 000021C7 7305                    	JNC	short MkDirCrack	; no errors, try path
 15251                                  MkErrP:
 15252 000021C9 B003                    	MOV	AL,error_path_not_found	; oops!
 15253                                  MkErr:
 15254 000021CB E96CE4                  	jmp	SYS_RET_ERR
 15255                                  MkDirCrack:
 15256 000021CE 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 15257 000021D4 75F3                    	JNZ	short MkErrP
 15258                                  
 15259                                  	; MSDOS 3.3
 15260                                  	;push	ss
 15261                                  	;pop	ds
 15262                                  	;call	si
 15263                                  	;jb	short MkErr
 15264                                  	;;jmp	short mkdir_ok
 15265                                  	;jmp	SYS_RET_OK
 15266                                  
 15267                                  	; MSDOS 6.0
 15268 000021D6 56                      	PUSH	SI			;PTM.			;AN000;
 15269 000021D7 E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 15270 000021DA 5E                      	POP	SI			;PTM.			;AN000;
 15271 000021DB 7604                    	JBE	short pathok		;PTM.			;AN000;
 15272                                  	;mov	al,5
 15273 000021DD B005                    	MOV	AL,error_access_denied	;PTM. ops!
 15274                                  	;jmp	SYS_RET_ERR		;PTM.
 15275 000021DF EBEA                    	jmp	short MkErr
 15276                                  pathok:
 15277 000021E1 FFD6                    	CALL	SI			; go get file
 15278 000021E3 72E6                    	JC	short MkErr		; no errors
 15279                                  	; 16/12/2022
 15280                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15281 000021E5 EBD0                    	jmp	short mkdir_ok
 15282                                  	;jmp	SYS_RET_OK
 15283                                  
 15284                                  ;----------------------------------------------------------------------------
 15285                                  ;
 15286                                  ; Procedure Name : Check_PathLen
 15287                                  ;
 15288                                  ; Inputs:
 15289                                  ;	nothing
 15290                                  ; Function:
 15291                                  ;	check if final path length greater than 67
 15292                                  ; Returns:
 15293                                  ;	Above flag set if > 67
 15294                                  ;
 15295                                  ;---------------------------------------------------------------------------
 15296                                  
 15297                                  Check_PathLen:
 15298                                  	; 09/09/2018
 15299                                  	;mov	SI,[WFP_START]
 15300 000021E7 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 15301                                  Check_PathLen2:
 15302 000021EC 16                      	push	ss
 15303 000021ED 1F                      	pop	ds
 15304                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 15305 000021EE 51                      	push	CX	
 15306 000021EF E8E7EF                  	CALL	DStrLen
 15307 000021F2 83F943                  	CMP	CX,DIRSTRLEN ; 67
 15308 000021F5 59                      	POP	CX
 15309 000021F6 C3                      	retn
 15310                                  
 15311                                  ;============================================================================
 15312                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 15313                                  ;============================================================================
 15314                                  ; 07/08/2018 - Retro DOS v3.0
 15315                                  ; 17/05/2019 - Retro DOS v4.0
 15316                                  
 15317                                  ;**	IOCTL system call.
 15318                                  ;----------------------------------------------------------------------------
 15319                                  ;	$IOCTL
 15320                                  ;
 15321                                  ;	  Revision history:
 15322                                  ;
 15323                                  ;		Created: ARR 4 April 1983
 15324                                  ;
 15325                                  ;		GenericIOCTL added:		KGS	22 April 1985
 15326                                  ;
 15327                                  ;		A000	version 4.00	Jan. 1988
 15328                                  ;
 15329                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 15330                                  ;
 15331                                  
 15332                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 15333                                  ;---------------------------------------------------------------------------
 15334                                  ;
 15335                                  ;   Assembler usage:
 15336                                  ;	    MOV     BX, Handle
 15337                                  ;	    MOV     DX, Data
 15338                                  ;
 15339                                  ;	(or LDS     DX,BUF
 15340                                  ;	    MOV     CX,COUNT)
 15341                                  ;
 15342                                  ;	    MOV     AH, Ioctl
 15343                                  ;	    MOV     AL, Request
 15344                                  ;	    INT     21h
 15345                                  ;
 15346                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 15347                                  ;	    attribute word in DX, handle in BX:
 15348                                  ;	    DH = high word of device driver attributes
 15349                                  ;	    DL = low byte of sf_flags
 15350                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 15351                                  ;	    in BX.
 15352                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 15353                                  ;	    into DS:DX.  Return number read in AX.
 15354                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 15355                                  ;	    DS:DX.  Return bytes written in AX.
 15356                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 15357                                  ;	    into DS:DX.  Return number read in AX.
 15358                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 15359                                  ;	    DS:DX.  Return bytes written in AX.
 15360                                  ;	 6  Return input status of handle in BX. If a read will go to the
 15361                                  ;	    device, AL = 0FFh, otherwise 0.
 15362                                  ;	 7  Return output status of handle in BX. If a write will go to the
 15363                                  ;	    device, AL = 0FFh, otherwise 0.
 15364                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 15365                                  ;	    removable media, 0 otherwise.
 15366                                  ;	 9  Return the contents of the device attribute word in DX for the
 15367                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 15368                                  ;	    network. 8000h is the bit for local use.
 15369                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 15370                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 15371                                  ;	    the count and CX is the delay.
 15372                                  ;
 15373                                  ;   Error returns:
 15374                                  ;	    AX = error_invalid_handle
 15375                                  ;	       = error_invalid_function
 15376                                  ;	       = error_invalid_data
 15377                                  ;
 15378                                  ;-------------------------------------------------------------------------------
 15379                                  ;
 15380                                  ;   This is the documentation copied from DOS 4.0 it is much better
 15381                                  ;   than the above
 15382                                  ;
 15383                                  ;	There are several basic forms of IOCTL calls:
 15384                                  ;
 15385                                  ;
 15386                                  ;	** Get/Set device information:	**
 15387                                  ;
 15388                                  ;	ENTRY	(AL) = function code
 15389                                  ;		  0 - Get device information
 15390                                  ;		  1 - Set device information
 15391                                  ;		(BX) = file handle
 15392                                  ;		(DX) = info for "Set Device Information"
 15393                                  ;	EXIT	'C' set if error
 15394                                  ;		  (AX) = error code
 15395                                  ;		'C' clear if OK
 15396                                  ;		  (DX) = info for "Get Device Information"
 15397                                  ;	USES	ALL
 15398                                  ;
 15399                                  ;
 15400                                  ;	**  Read/Write Control Data From/To Handle  **
 15401                                  ;
 15402                                  ;	ENTRY	(AL) = function code
 15403                                  ;		  2 - Read device control info
 15404                                  ;		  3 - Write device control info
 15405                                  ;		(BX) = file handle
 15406                                  ;		(CX) = transfer count
 15407                                  ;		(DS:DX) = address for data
 15408                                  ;	EXIT	'C' set if error
 15409                                  ;		  (AX) = error code
 15410                                  ;		'C' clear if OK
 15411                                  ;		  (AX) = count of bytes transfered
 15412                                  ;	USES	ALL
 15413                                  ;
 15414                                  ;
 15415                                  ;	**  Read/Write Control Data From/To Block Device  **
 15416                                  ;
 15417                                  ;	ENTRY	(AL) = function code
 15418                                  ;		  4 - Read device control info
 15419                                  ;		  5 - Write device control info
 15420                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15421                                  ;		(CX) = transfer count
 15422                                  ;		(DS:DX) = address for data
 15423                                  ;	EXIT	'C' set if error
 15424                                  ;		  (AX) = error code
 15425                                  ;		'C' clear if OK
 15426                                  ;		  (AX) = count of bytes transfered
 15427                                  ;	USES	ALL
 15428                                  ;
 15429                                  ;
 15430                                  ;	**  Get Input/Output Status  **
 15431                                  ;
 15432                                  ;	ENTRY	(AL) = function code
 15433                                  ;		  6 - Get Input status
 15434                                  ;		  7 - Get Output Status
 15435                                  ;		(BX) = file handle
 15436                                  ;	EXIT	'C' set if error
 15437                                  ;		  (AX) = error code
 15438                                  ;		'C' clear if OK
 15439                                  ;		  (AL) = 00 if not ready
 15440                                  ;		  (AL) = FF if ready
 15441                                  ;	USES	ALL
 15442                                  ;
 15443                                  ;
 15444                                  ;	**  Get Drive Information  **
 15445                                  ;
 15446                                  ;	ENTRY	(AL) = function code
 15447                                  ;		  8 - Check for removable media
 15448                                  ;		  9 - Get device attributes
 15449                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15450                                  ;	EXIT	'C' set if error
 15451                                  ;		  (AX) = error code
 15452                                  ;		'C' clear if OK
 15453                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15454                                  ;		  (DX) = device attribute word (func. 9)
 15455                                  ;	USES	ALL
 15456                                  ;
 15457                                  ;
 15458                                  ;	**  Get Redirected bit	**
 15459                                  ;
 15460                                  ;	ENTRY	(AL) = function code
 15461                                  ;		  0Ah - Network stuff
 15462                                  ;		(BX) = file handle
 15463                                  ;	EXIT	'C' set if error
 15464                                  ;		  (AX) = error code
 15465                                  ;		'C' clear if OK
 15466                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15467                                  ;	USES	ALL
 15468                                  ;
 15469                                  ;
 15470                                  ;	**  Change sharer retry parameters  **
 15471                                  ;
 15472                                  ;	ENTRY	(AL) = function code
 15473                                  ;		  0Bh - Set retry parameters
 15474                                  ;		(CX) = retry loop count
 15475                                  ;		(DX) = number of retries
 15476                                  ;	EXIT	'C' set if error
 15477                                  ;		  (AX) = error code
 15478                                  ;		'C' clear if OK
 15479                                  ;	USES	ALL
 15480                                  ;
 15481                                  ;
 15482                                  ;   =================================================================
 15483                                  ;
 15484                                  ;	**  New Standard Control  **
 15485                                  ;
 15486                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15487                                  ;	FORMS ARE OBSOLETE.
 15488                                  ;
 15489                                  ;   =================================================================
 15490                                  ;
 15491                                  ;	ENTRY	(AL) = function code
 15492                                  ;		  0Ch - Control Function subcode
 15493                                  ;		(BX) = File Handle
 15494                                  ;		(CH) = Category Indicator
 15495                                  ;		(CL) = Function within category
 15496                                  ;		(DS:DX) = address for data, if any
 15497                                  ;		(SI) = Passed to device as argument, use depends upon function
 15498                                  ;		(DI) = Passed to device as argument, use depends upon function
 15499                                  ;	EXIT	'C' set if error
 15500                                  ;		  (AX) = error code
 15501                                  ;		'C' clear if OK
 15502                                  ;		  (SI) = Return value, meaning is function dependent
 15503                                  ;		  (DI) = Return value, meaning is function dependent
 15504                                  ;		  (DS:DX) = Return address, use is function dependent
 15505                                  ;	USES	ALL
 15506                                  ;
 15507                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15508                                  ;     (See inc\ioctl.inc for more info)
 15509                                  ;
 15510                                  ;	ENTRY	(AL) = function code
 15511                                  ;		  0Dh - Control Function subcode
 15512                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15513                                  ;		(CH) = Category Indicator
 15514                                  ;		(CL) = Function within category
 15515                                  ;		(DS:DX) = address for data, if any
 15516                                  ;		(SI) = Passed to device as argument, use depends upon function
 15517                                  ;		(DI) = Passed to device as argument, use depends upon function
 15518                                  ;
 15519                                  ;	EXIT	'C' set if error
 15520                                  ;		  (AX) = error code
 15521                                  ;		'C' clear if OK
 15522                                  ;		  (DS:DX) = Return address, use is function dependent
 15523                                  ;	USES	ALL
 15524                                  ;
 15525                                  ;---------------------------------------------------------------------------
 15526                                  	
 15527                                  	; 17/05/2019 - Retro DOS v4.0
 15528                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15529                                  
 15530                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15531                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15532                                  
 15533                                  IOCTLJMPTABLE:	;label	word
 15534                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15535 000021F7 [3322]                  	dw	ioctl_getset_data	; 0
 15536 000021F9 [3322]                  	dw	ioctl_getset_data   	; 1
 15537 000021FB [8322]                  	dw	ioctl_control_string	; 2
 15538 000021FD [8322]                  	dw	ioctl_control_string	; 3
 15539 000021FF [D123]                  	dw	ioctl_get_dev		; 4
 15540 00002201 [D123]                  	dw	ioctl_get_dev		; 5
 15541 00002203 [9D22]                  	dw	ioctl_status		; 6
 15542 00002205 [9D22]                  	dw	ioctl_status		; 7
 15543 00002207 [3E23]                  	dw	ioctl_rem_media		; 8
 15544 00002209 [7923]                  	dw	ioctl_drive_attr	; 9
 15545 0000220B [C323]                  	dw	ioctl_handle_redir	; A
 15546 0000220D [B922]                  	dw	Set_Retry_Parameters	; B
 15547 0000220F [C722]                  	dw	GENERICIOCTLHANDLE	; C
 15548 00002211 [DE22]                  	dw	GENERICIOCTL		; D
 15549                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15550 00002213 [7424]                  	dw	ioctl_drive_owner	; E
 15551 00002215 [7424]                  	dw	ioctl_drive_owner	; F
 15552                                  	; MSDOS 6.0
 15553 00002217 [C722]                  	dw	query_handle_support	; 10h
 15554 00002219 [DE22]                  	dw	query_device_support	; 11h
 15555                                  
 15556                                  	; 11/11/2022
 15557                                  _$IOCTL:
 15558 0000221B 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15559 0000221D 16                      	push	ss
 15560 0000221E 1F                      	pop	ds			;hkn; SS is DOSDATA
 15561                                  
 15562                                  	; MSDOS 3.3
 15563                                  	;cmp	al,0Fh 
 15564                                  	; MSDOS 6.0
 15565 0000221F 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15566 00002221 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 15567                                  
 15568                                  	; 14/01/2024
 15569                                  	; 28/05/2019
 15570                                  	;push	AX	; 14/01/2024	; Need to save AL for generic IOCTL
 15571 00002223 89C7                    	mov	di,ax			; di NOT a PARM
 15572 00002225 81E7FF00                	and	di,0FFh			; di = al
 15573 00002229 D1E7                    	shl	di,1			; di = index into jmp table
 15574                                  	;pop	AX			; Restore AL for generic IOCTL
 15575                                  
 15576 0000222B 2EFFA5[F721]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15577                                  
 15578                                  ioctl_bad_funj2:
 15579 00002230 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15580                                  
 15581                                  ;--------------------------------------------------------------------------
 15582                                  ;
 15583                                  ; IOCTL: AL = 0,1
 15584                                  ;
 15585                                  ; ENTRY: DS = DOSDATA
 15586                                  ;
 15587                                  ;--------------------------------------------------------------------------
 15588                                  
 15589                                  ioctl_getset_data:
 15590                                  	; MSDOS 6.0
 15591 00002233 E80843                  	call	SFFromHandle		; ES:DI -> SFT
 15592 00002236 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15593                                  ioctl_bad_handle:
 15594                                  	;mov	al,6
 15595 00002238 B006                    	mov	al,error_invalid_handle
 15596                                  ioctl_error:
 15597 0000223A E9FDE3                  	jmp	SYS_RET_ERR
 15598                                  
 15599                                  ioctl_check_permissions:
 15600 0000223D 3C00                    	CMP	AL,0
 15601                                  	;mov	al,[es:di+5]
 15602 0000223F 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15603 00002243 741B                    	JZ	short ioctl_read	; read the byte
 15604                                  
 15605 00002245 08F6                    	or	dh,dh
 15606 00002247 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15607                                  	;mov	al,0Dh
 15608 00002249 B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15609                                  	;jmp	SYS_RET_ERR
 15610 0000224B EBED                    	jmp	short ioctl_error
 15611                                  
 15612                                  ioctl_check_device:
 15613 0000224D A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15614 0000224F 74DF                    	jz	short ioctl_bad_funj2
 15615 00002251 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15616                                  					;   device bit!! He can muck with the
 15617                                  					;   others at will.
 15618 00002254 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15619 00002259 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15620                                  ioctl_ok:
 15621 0000225D E9D1E3                  	jmp	SYS_RET_OK
 15622                                  
 15623                                  ioctl_read:
 15624 00002260 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15625 00002265 30E4                    	XOR	AH,AH
 15626 00002267 A880                    	test	AL,devid_device 	; Should I set high byte
 15627 00002269 740D                    	JZ	short ioctl_no_high	; no
 15628 0000226B C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15629                                  	;les	di,[es:di+7]
 15630 00002270 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15631                                  	;mov	ah,[es:di+5]
 15632 00002274 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15633                                  ioctl_no_high:
 15634 00002278 89C2                    	MOV	DX,AX
 15635                                  ioctl_set_dx:	; 16/12/2022
 15636 0000227A E804E2                  	call	Get_User_Stack
 15637                                  	;mov	[si+6],dx
 15638 0000227D 895406                  	MOV	[SI+user_env.user_DX],DX
 15639                                  	;;jmp	SYS_RET_OK
 15640                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15641                                  ioctl_ok_j:
 15642                                  	; 16/12/2022
 15643 00002280 E9B1E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15644                                  	;jmp	short ioctl_ok
 15645                                  	; 26/07/2019
 15646                                  	;jmp	SYS_RET_OK_clc
 15647                                  
 15648                                  ;--------------------------------------------------------------------------
 15649                                  ;
 15650                                  ; IOCTL: AL = 2,3
 15651                                  ;
 15652                                  ; ENTRY: DS = DOSDATA
 15653                                  ;	 SI = user's DS
 15654                                  ;
 15655                                  ;--------------------------------------------------------------------------
 15656                                  
 15657                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15658                                  ioctl_control_string:
 15659 00002283 E8B842                  	call	SFFromHandle		; ES:DI -> SFT
 15660 00002286 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15661                                  	; 07/12/2022
 15662                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15663                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15664                                  	; MSDOS 5.0 & MSDOS 6.0
 15665 00002288 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15666 0000228D 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15667 0000228F C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15668 00002294 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15669 00002298 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15670 0000229A E93C01                  	JMP	ioctl_do_string
 15671                                  
 15672                                  ;--------------------------------------------------------------------------
 15673                                  ;
 15674                                  ; IOCTL: AL = 6,7
 15675                                  ;
 15676                                  ; ENTRY: DS = DOSDATA
 15677                                  ;
 15678                                  ;--------------------------------------------------------------------------
 15679                                  
 15680                                  ioctl_status:
 15681 0000229D B401                    	MOV	AH,1
 15682 0000229F 2C06                    	SUB	AL,6			; 6=0,7=1
 15683 000022A1 7402                    	JZ	short ioctl_get_status
 15684 000022A3 B403                    	MOV	AH,3
 15685                                  ioctl_get_status:
 15686 000022A5 50                      	PUSH	AX
 15687 000022A6 E8E512                  	call	GET_IO_SFT
 15688 000022A9 58                      	POP	AX
 15689                                  	;JNC	short DO_IOFUNC
 15690                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15691                                  	; 16/12/2022
 15692 000022AA 728C                    	jc	short ioctl_bad_handle
 15693                                  DO_IOFUNC:
 15694 000022AC E8E620                  	call	IOFUNC
 15695 000022AF 88C4                    	MOV	AH,AL
 15696 000022B1 B0FF                    	MOV	AL,0FFH
 15697                                  	;JNZ	short ioctl_status_ret
 15698                                  	; 29/01/2024
 15699 000022B3 75A8                    	jnz	short ioctl_ok
 15700 000022B5 FEC0                    	INC	AL
 15701                                  ioctl_status_ret:
 15702                                  	;jmp	SYS_RET_OK
 15703                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15704                                  	;jmp	short ioctl_ok_j
 15705                                  	; 16/12/2022
 15706 000022B7 EBA4                    	jmp	short ioctl_ok
 15707                                  
 15708                                  ;--------------------------------------------------------------------------
 15709                                  ;
 15710                                  ; IOCTL: AL = B
 15711                                  ;
 15712                                  ; ENTRY: DS = DOSDATA
 15713                                  ;
 15714                                  ;--------------------------------------------------------------------------
 15715                                  
 15716                                  Set_Retry_Parameters:
 15717                                  	; 09/09/2018
 15718 000022B9 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15719 000022BD 09D2                    	OR	DX,DX			; zero retries not allowed
 15720 000022BF 7475                    	JZ	short ioctl_bad_fun
 15721 000022C1 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15722                                  doneok:
 15723                                  	;jmp	SYS_RET_OK		; Done
 15724                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15725                                  	;jmp	short ioctl_status_ret
 15726                                  	; 16/12/2022
 15727 000022C5 EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15728                                  
 15729                                  ;--------------------------------------------------------------------------
 15730                                  ;
 15731                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15732                                  ;
 15733                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15734                                  ;	SI:DX -> Users Device Parameter Table
 15735                                  ;	IOCALL -> IOCTL_Req structure
 15736                                  ;
 15737                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15738                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15739                                  ;	call.
 15740                                  ;
 15741                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15742                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15743                                  ;         return address off the stack if the drive is invalid.
 15744                                  ;
 15745                                  ;--------------------------------------------------------------------------
 15746                                  
 15747                                  query_handle_support:	; Entry point for handles
 15748                                  GENERICIOCTLHANDLE:
 15749 000022C7 E87442                  	call	SFFromHandle		; Get SFT for device.
 15750 000022CA 726F                    	jc	short ioctl_bad_handlej
 15751                                  
 15752                                  	;test	word [es:di+5],8000h
 15753                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15754                                  	;test	byte [es:di+6],80h
 15755 000022CC 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15756 000022D1 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15757                                  
 15758 000022D3 C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15759                                  	;les	di,[es:di+7]
 15760 000022D8 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15761 000022DC EB0F                    	jmp	short Do_GenIOCTL
 15762                                  
 15763                                  query_device_support:	; Entry point for devices:
 15764                                  GENERICIOCTL:
 15765 000022DE C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15766 000022E3 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15767 000022E6 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15768                                  
 15769 000022E8 E87A01                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15770 000022EB 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15771                                  
 15772                                  Do_GenIOCTL:
 15773                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15774                                  					; Can device handle Generic IOCTL funcs
 15775                                  	; 09/09/2018
 15776                                  	;test	byte [es:di+4],40h
 15777 000022ED 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15778 000022F2 7442                    	jz	short ioctl_bad_fun
 15779                                  
 15780                                  	; 17/05/2019 - Retro DOS v4.0
 15781                                  
 15782                                  	; MSDOS 6.0
 15783                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15784 000022F4 C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15785                                  	;cmp	al,10h
 15786 000022F9 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15787 000022FB 7C0C                    	jl	short SetIOCtlBlock
 15788                                  	
 15789                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15790                                  	;test	byte [es:di+4],80h 
 15791 000022FD 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15792 00002302 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15793                                  	;
 15794                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15795 00002304 C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15796                                  
 15797                                  SetIOCtlBlock:
 15798 00002309 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15799 0000230A 57                      	PUSH	DI			; in DS:SI
 15800                                  					; Setup Generic IOCTL Request Block
 15801                                  	;mov	byte [IOCALL_REQLEN],23
 15802 0000230B C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15803                                  	; 07/09/2018 (MSDOS 3.3)
 15804                                  	;;mov	byte [IOCALL_REQFUNC],19
 15805                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15806                                  	;
 15807 00002310 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15808 00002314 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15809 00002318 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15810 0000231C 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15811 00002320 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15812 00002324 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15813 00002328 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15814                                  
 15815                                  ;hkn; IOCALL is in DOSDATA
 15816 0000232C BB[7C03]                	MOV	BX,IOCALL
 15817                                  
 15818 0000232F 16                      	PUSH	SS
 15819 00002330 07                      	POP	ES
 15820                                  					; DS:SI -> Device header.
 15821 00002331 5E                      	POP	SI
 15822 00002332 1F                      	POP	DS
 15823                                  	; 10/08/2018
 15824 00002333 E9DC00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15825                                  
 15826                                  ioctl_bad_fun:
 15827 00002336 B001                    	mov	al, error_invalid_function  ; 1
 15828 00002338 E9FFE2                  	jmp	SYS_RET_ERR	
 15829                                  
 15830                                  ioctl_bad_handlej:
 15831 0000233B E9FAFE                  	jmp	ioctl_bad_handle
 15832                                  
 15833                                  ;---------------------------------------------------------------------------
 15834                                  ;
 15835                                  ; IOCTL: AL = 8
 15836                                  ;
 15837                                  ; ENTRY: DS = DOSDATA
 15838                                  ;
 15839                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15840                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15841                                  ;         return address off the stack if the drive is invalid.
 15842                                  ;
 15843                                  ;-------------------------------------------------------------------------
 15844                                  
 15845                                  	; 30/01/2024
 15846                                  ioctl_rem_media:
 15847                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15848 0000233E E82401                  	CALL	Check_If_Net
 15849 00002341 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15850                                  					;   certainly don't know how to do this
 15851                                  					;   call.
 15852                                  	;test	word [es:di+4],800h
 15853                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15854                                  	;test	byte [es:di+5],8
 15855 00002343 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15856 00002348 74EC                    	JZ	short ioctl_bad_fun		; NO
 15857                                  
 15858                                  ;hkn; SS override for IOCALL
 15859                                  	; 30/01/2024
 15860                                  	; ds = ss = DOSDATA segment ('Get_Driver_BL' in 'Check_If_Net')
 15861                                  	;MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15862 0000234A C606[7E03]0F            	mov	byte [IOCALL_REQFUNC],DEVRMD ; 15
 15863 0000234F B00D                    	MOV	AL,REMHL  ; 13
 15864 00002351 88DC                    	MOV	AH,BL			; Unit number
 15865                                  	;MOV	[SS:IOCALL_REQLEN],AX
 15866 00002353 A3[7C03]                	mov	[IOCALL_REQLEN],ax	
 15867 00002356 31C0                    	XOR	AX,AX
 15868                                  	;MOV	[SS:IOCALL_REQSTAT],AX
 15869 00002358 A3[7F03]                	mov	[IOCALL_REQSTAT],ax ; 0
 15870                                  	
 15871 0000235B 06                      	PUSH	ES
 15872 0000235C 1F                      	POP	DS
 15873 0000235D 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15874 0000235F 16                      	PUSH	SS
 15875 00002360 07                      	POP	ES
 15876                                  
 15877                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15878                                  	; 30/01/2024
 15879                                  	; (ds <> ss, ss = DOSDATA segment)
 15880 00002361 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15881 00002364 1E                      	push	ds
 15882 00002365 56                      	push	si
 15883 00002366 E8FB21                  	call	DEVIOCALL2
 15884 00002369 5E                      	pop	si
 15885 0000236A 1F                      	pop	ds
 15886                                  
 15887                                  ;hkn; SS override
 15888 0000236B 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15889                                  	;AND	AX,STBUI ; 200h		; Mask to busy bit
 15890                                  	; 29/01/2024
 15891 0000236F 80E402                  	and	ah,STBUI>>8
 15892 00002372 B109                    	MOV	CL,9
 15893 00002374 D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15894                                  ioctl_da_ok_j:	; 11/11/2022
 15895 00002376 E9B8E2                  	jmp	SYS_RET_OK
 15896                                  
 15897                                  ;-------------------------------------------------------------------------
 15898                                  ;
 15899                                  ; IOCTL: AL = 9
 15900                                  ;
 15901                                  ; ENTRY: DS = DOSDATA
 15902                                  ;
 15903                                  ;-------------------------------------------------------------------------
 15904                                  
 15905                                  ioctl_drive_attr:
 15906                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15907 00002379 88D8                    	mov	al,bl
 15908 0000237B E8D245                  	call	GETTHISDRV
 15909 0000237E 723E                    	jc	short ioctl_drv_err
 15910 00002380 E8B500                  	call	Get_Driver_BL
 15911                                  	; MSDOS 6.0
 15912 00002383 7239                    	JC	short ioctl_drv_err	; drive not valid
 15913                                  
 15914                                  	;mov	dx,[es:di+4]
 15915 00002385 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15916                                  					; get device attribute word
 15917 00002389 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15918                                  
 15919                                  ;hkn; SS override
 15920                                  	;LES	DI,[SS:THISCDS]
 15921                                  	; 30/01/2024
 15922 0000238B C43E[A205]              	les	di,[THISCDS] ; (Get_Driver_BL)
 15923                                  
 15924                                  	;test	word [es:di+43h],8000h
 15925                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15926                                  	;test	byte [es:di+44h],80h
 15927 0000238F 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15928 00002394 7403                    	JZ	short IOCTLShare
 15929                                  
 15930                                  	;or	dx,1000h ; (MSDOS 3.3)
 15931                                  
 15932                                  ;	Net devices don't return a device attribute word.
 15933                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15934                                  
 15935 00002396 BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15936                                  
 15937                                  IOCTLShare:
 15938                                  	; 30/01/2024
 15939                                  	; ds = ss = DOSDATA segment
 15940                                  	;push	ss
 15941                                  	;pop	ds
 15942                                  
 15943 00002399 BE[BE03]                	MOV	SI,OPENBUF
 15944 0000239C 80C341                  	ADD	BL,"A"	; 41h
 15945 0000239F 881C                    	MOV	[SI],BL
 15946 000023A1 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15947 000023A6 B80003                  	MOV	AX,0300h
 15948 000023A9 F8                      	CLC
 15949                                  	;INT	int_IBM
 15950 000023AA CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15951                                  			; DS:SI -> ASCIZ disk device name 
 15952                                  			; (may be full path or only drive
 15953                                  			; specifier--must include the colon)
 15954                                  			; Return: CF clear if absolute disk access allowed
 15955 000023AC 7303                    	JNC	short IOCTLLocal	; Not shared
 15956                                  	;OR	DX,0200H		; Shared, bit 9
 15957                                  	; 17/12/2022
 15958 000023AE 80CE02                  	or	dh,02h
 15959                                  IOCTLLocal:
 15960                                  	;test	word [es:di+43h],1000h
 15961                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15962                                  	;test	byte [es:di+44h],10h
 15963 000023B1 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15964                                  	;JZ	short ioctl_set_DX
 15965                                  	; 16/12/2022
 15966 000023B6 7403                    	jz	short _ioctl_set_DX
 15967                                  	;OR	DX,8000h
 15968                                  	; 17/12/2022
 15969 000023B8 80CE80                  	or	dh,80h
 15970                                  ;ioctl_set_DX:
 15971                                  _ioctl_set_DX:
 15972                                  	; 16/12/2022
 15973 000023BB E9BCFE                  	jmp	ioctl_set_dx
 15974                                  ; 16/12/2022
 15975                                  %if 0	
 15976                                  	call	Get_User_Stack
 15977                                  	MOV	[SI+user_env.user_DX],DX
 15978                                  	;;jmp	SYS_RET_OK
 15979                                  	;; 25/06/2019
 15980                                  	;jmp	SYS_RET_OK_clc
 15981                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15982                                  ioctl_gd_ok_j:
 15983                                  	jmp	short ioctl_da_ok_j
 15984                                  %endif
 15985                                  
 15986                                  ioctl_drv_err:
 15987 000023BE B00F                    	mov	al,error_invalid_drive ; 0Fh
 15988                                  ioctl_gd_err_j:	; 11/11/2022
 15989 000023C0 E977E2                  	jmp	SYS_RET_ERR
 15990                                  
 15991                                  ;--------------------------------------------------------------------------
 15992                                  ;
 15993                                  ; IOCTL: AL = A
 15994                                  ;
 15995                                  ; ENTRY: DS = DOSDATA
 15996                                  ;
 15997                                  ;--------------------------------------------------------------------------
 15998                                  
 15999                                  ioctl_handle_redir:
 16000 000023C3 E87841                  	call	SFFromHandle		; ES:DI -> SFT
 16001 000023C6 7303                    	JNC	short ioctl_got_sft	; have valid handle
 16002 000023C8 E96DFE                  	jmp	ioctl_bad_handle ; 10/08/2018
 16003                                  
 16004                                  ioctl_got_sft:
 16005                                  	;mov	dx,[es:di+5]
 16006 000023CB 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 16007                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 16008                                  	; 16/12/2022
 16009 000023CF EBEA                    	jmp	short _ioctl_set_DX
 16010                                  
 16011                                  	; 16/12/2022
 16012                                  ;ioctl_bad_funj:
 16013                                  	;JMP	ioctl_bad_fun
 16014                                  
 16015                                  ;--------------------------------------------------------------------------
 16016                                  ;
 16017                                  ; IOCTL: AL= 4,5
 16018                                  ;
 16019                                  ; ENTRY: DS = DOSDATA
 16020                                  ;	 SI = user's DS
 16021                                  ;
 16022                                  ;
 16023                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 16024                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16025                                  ;         return address off the stack if the drive is invalid.
 16026                                  ;
 16027                                  ;-------------------------------------------------------------------------
 16028                                  
 16029                                  ioctl_get_dev:
 16030 000023D1 E89100                  	CALL	Check_If_Net
 16031                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 16032                                  					; certainly don't know how to do this
 16033                                  					; call.
 16034                                  	; 16/12/2022
 16035 000023D4 7403                    	jz	short ioctl_do_string
 16036                                  ioctl_bad_funj:
 16037 000023D6 E95DFF                  	JMP	ioctl_bad_fun
 16038                                  
 16039                                  ioctl_do_string:
 16040                                  	;test	word [es:di+4],4000h
 16041                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 16042                                  	;test	byte [es:di+5],40h
 16043 000023D9 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 16044 000023DE 74F6                    	JZ	short ioctl_bad_funj		; NO
 16045                                  					; assume IOCTL read
 16046 000023E0 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 16047                                  
 16048 000023E5 A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 16049 000023E7 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 16050                                  
 16051                                  					; it is an IOCTL write
 16052 000023E9 C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 16053                                  
 16054                                  ioctl_control_call:
 16055 000023EE B016                    	MOV	AL,DRDWRHL ; 22
 16056                                  ioctl_setup_pkt:
 16057 000023F0 88DC                    	MOV	AH,BL			; Unit number
 16058 000023F2 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16059 000023F5 31C0                    	XOR	AX,AX
 16060 000023F7 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16061 000023FA A2[8903]                	MOV	[IOMED],AL
 16062 000023FD 890E[8E03]              	MOV	[IOSCNT],CX
 16063 00002401 8916[8A03]              	MOV	[IOXAD],DX
 16064 00002405 8936[8C03]              	MOV	[IOXAD+2],SI
 16065 00002409 06                      	PUSH	ES
 16066 0000240A 1F                      	POP	DS
 16067 0000240B 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16068 0000240D 16                      	PUSH	SS
 16069 0000240E 07                      	POP	ES
 16070                                  
 16071 0000240F BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16072                                  ioctl_do_IO:
 16073 00002412 E84F21                  	call	DEVIOCALL2
 16074                                  
 16075                                  ;hkn; SS override for IOCALL
 16076                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 16077                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16078                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16079 00002415 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16080 0000241B 7507                    	JNZ	short ioctl_string_err
 16081                                  
 16082                                  ;hkn; SS override
 16083 0000241D 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 16084                                  	; 16/12/2022
 16085 00002421 E90DE2                  	jmp	SYS_RET_OK
 16086                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16087                                  	;jmp	short ioctl_gd_ok_j
 16088                                  
 16089                                  ioctl_string_err:
 16090 00002424 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 16091                                  device_err:
 16092 00002429 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 16093 0000242D 89F8                    	MOV	AX,DI
 16094 0000242F E8B32F                  	call	SET_I24_EXTENDED_ERROR
 16095                                  
 16096                                  ;hkn; use SS override
 16097                                  ;hkn;	mov	ax,[CS:EXTERR]
 16098 00002432 36A1[2403]              	mov	ax,[SS:EXTERR]
 16099                                  	;jmp	SYS_RET_ERR
 16100                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16101 00002436 EB88                    	jmp	short ioctl_gd_err_j
 16102                                  
 16103                                  ; 17/05/2019 - Retro DOS v4.0
 16104                                  
 16105                                  ;--------------------------------------------------------------------------
 16106                                  ; Proc name : Get_Driver_BL
 16107                                  ;
 16108                                  ;	DS is DOSDATA
 16109                                  ;	BL is drive number (0=default)
 16110                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 16111                                  ;	No regs modified
 16112                                  ;
 16113                                  ;---------------------------------------------------------------------------
 16114                                  
 16115                                  	; 30/01/2024
 16116                                  Get_Driver_BL:
 16117 00002438 50                      	PUSH	AX
 16118 00002439 88D8                    	MOV	AL,BL			; Drive
 16119 0000243B E81245                  	call	GETTHISDRV
 16120 0000243E 7223                    	jc	short ioctl_bad_drv
 16121 00002440 30DB                    	XOR	BL,BL			; Unit zero on Net device
 16122 00002442 C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 16123 00002447 C43E[A205]              	LES	DI,[THISCDS]
 16124                                  	;test	word [es:di+43h],8000h
 16125                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16126                                  	;test	byte [es:di+44h],80h
 16127 0000244B 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16128                                  	;les	di,[es:di+45h]
 16129 00002450 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 16130 00002454 750D                    	JNZ	short got_dev_ptr	 ; Is net
 16131 00002456 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16132                                  	;mov	bl,[es:di+1]
 16133 0000245B 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 16134                                  	;les	di,[es:di+13h]
 16135 0000245F 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 16136                                  got_dev_ptr:
 16137                                  	; 30/01/2024
 16138                                  	; cf=0
 16139                                  	;CLC
 16140                                  ioctl_bad_drv:
 16141 00002463 58                      	POP	AX
 16142 00002464 C3                      	retn
 16143                                  
 16144                                  ;-------------------------------------------------------------------------
 16145                                  ; Proc Name : Check_If_Net:
 16146                                  ;
 16147                                  ;
 16148                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 16149                                  ; If no device is found, the return address is popped off the stack, and a
 16150                                  ; jump is made to ioctl_drv_err.
 16151                                  ;
 16152                                  ; On Entry:
 16153                                  ; Registers same as those for Get_Driver_BL
 16154                                  ;
 16155                                  ; On Exit:
 16156                                  ; ZERO flag	- set if not a net device
 16157                                  ;		- reset if net device
 16158                                  ; ES:DI -> the device
 16159                                  ;
 16160                                  ;
 16161                                  ; BUGBUG: This function assumes the following stack setup on entry
 16162                                  ;
 16163                                  ;	  SP+2 -> Error return address
 16164                                  ;	  SP   -> Normal return address
 16165                                  ;
 16166                                  ;-------------------------------------------------------------------------
 16167                                  
 16168                                  	; 30/01/2024 - Retro DOS v5.0
 16169                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:639Ch
 16170                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6A91h
 16171                                  	; Windows ME IO.SYS - BIOSCODE:68E1h
 16172                                  
 16173                                  Check_If_Net:
 16174                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16175 00002465 E8D0FF                  	CALL	Get_Driver_BL
 16176 00002468 7201                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 16177                                  
 16178                                  ; 30/01/2024 ('Get_Driver_BL' returns with
 16179                                  ;	      'curdir_isnet' condition/ZF, no need to a second test)
 16180                                  %if 0
 16181                                  	;;;
 16182                                  	; (PCDOS 7.1 IBMDOS.COM, Windows ME IO.SYS)
 16183                                  	PUSH	ES
 16184                                  	PUSH	DI
 16185                                  	LES	DI,[THISCDS]
 16186                                  	;test	word [es:di+43h],8000h
 16187                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16188                                  	;test	byte [es:di+44h],80h
 16189                                  	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16190                                  	POP	DI
 16191                                  	POP	ES
 16192                                  	;;;
 16193                                  %endif
 16194 0000246A C3                      	retn
 16195                                  
 16196                                  ioctl_drv_err_pop:
 16197 0000246B 58                      	pop	ax			; pop off return address
 16198 0000246C E94FFF                  	jmp	ioctl_drv_err
 16199                                  
 16200                                  ioctl_bad_funj3:
 16201 0000246F E9C4FE                  	jmp	ioctl_bad_fun
 16202                                  
 16203                                  ioctl_string_errj:
 16204 00002472 EBB0                    	jmp	short ioctl_string_err  ; 25/05/2019
 16205                                  
 16206                                  ;--------------------------------------------------------------------------
 16207                                  ;
 16208                                  ; IOCTL: AL = E, F
 16209                                  ;
 16210                                  ; ENTRY: DS = DOSDATA
 16211                                  ;
 16212                                  ;
 16213                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 16214                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16215                                  ;         return address off the stack if the drive is invalid.
 16216                                  ;
 16217                                  ;--------------------------------------------------------------------------
 16218                                  
 16219                                  ioctl_drive_owner:
 16220                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16221 00002474 E8EEFF                  	Call	Check_If_Net
 16222 00002477 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 16223                                  					;   certainly don't know how to do this
 16224                                  					;   call.
 16225                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 16226                                  	; 09/09/2018
 16227                                  	;test	byte [es:di+4],40h
 16228 00002479 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 16229 0000247E 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 16230                                  	;mov	byte [IOCALL_REQFUNC],23
 16231 00002480 C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 16232 00002485 3C0E                    	cmp	al,0Eh			; Get Owner ?
 16233 00002487 7405                    	jz	short GetOwner
 16234                                  SetOwner:
 16235 00002489 C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 16236                                  GetOwner:
 16237 0000248E B00D                    	MOV	AL,OWNHL ; 13
 16238 00002490 88DC                    	MOV	AH,BL			; Unit number
 16239 00002492 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16240 00002495 31C0                    	XOR	AX,AX
 16241 00002497 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16242 0000249A 06                      	PUSH	ES
 16243 0000249B 1F                      	POP	DS
 16244 0000249C 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16245 0000249E 16                      	PUSH	SS
 16246 0000249F 07                      	POP	ES
 16247 000024A0 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16248 000024A3 1E                      	push	ds
 16249 000024A4 56                      	push	si
 16250 000024A5 E8BC20                  	call	DEVIOCALL2
 16251 000024A8 5E                      	pop	si
 16252 000024A9 1F                      	pop	ds
 16253                                  ;hkn; SS override
 16254                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16255                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16256 000024AA 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16257 000024B0 75C0                    	jnz	short ioctl_string_errj
 16258 000024B2 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 16259                                  					; owner returned is 1-based.
 16260 000024B6 E978E1                  	jmp	SYS_RET_OK
 16261                                  
 16262                                  ;============================================================================
 16263                                  ; DELETE.ASM, MSDOS 6.0, 1991
 16264                                  ;============================================================================
 16265                                  ; 07/08/2018 - Retro DOS v3.0
 16266                                  ; 17/05/2019 - Retro DOS v4.0
 16267                                  
 16268                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 16269                                  ;	NAME	DOS_DELETE
 16270                                  
 16271                                  ;
 16272                                  ;	Microsoft Confidential
 16273                                  ;	Copyright (C) Microsoft Corporation 1991
 16274                                  ;	All Rights Reserved.
 16275                                  ;
 16276                                  
 16277                                  ;**	DELETE.ASM - Low level routine for deleting files
 16278                                  ;----------------------------------------------------------------------------
 16279                                  ;		DOS_DELETE
 16280                                  ;		REN_DEL_Check
 16281                                  ;		FastOpen_Delete	       ; DOS 3.3
 16282                                  ;		FastOpen_Update	       ; DOS 3.3
 16283                                  
 16284                                  ;   Revision history:
 16285                                  ;
 16286                                  ;   A000  version 4.00	Jan. 1988
 16287                                  ;   A001  Fastopen Rename fix	April 1989
 16288                                  
 16289                                  ;Installed = TRUE
 16290                                  
 16291                                  ;	i_need	NoSetDir,BYTE
 16292                                  ;	i_need	Creating,BYTE
 16293                                  ;	i_need	DELALL,BYTE
 16294                                  ;	i_need	THISDPB,DWORD
 16295                                  ;	i_need	THISSFT,DWORD
 16296                                  ;	i_need	THISCDS,DWORD
 16297                                  ;	i_need	CURBUF,DWORD
 16298                                  ;	i_need	ATTRIB,BYTE
 16299                                  ;	i_need	SATTRIB,BYTE
 16300                                  ;	i_need	WFP_START,WORD
 16301                                  ;	i_need	REN_WFP,WORD			 ;BN001
 16302                                  ;	i_need	NAME1,BYTE			 ;BN001
 16303                                  ;	i_need	FoundDel,BYTE
 16304                                  ;	i_need	AUXSTACK,BYTE
 16305                                  ;	i_need	VOLCHNG_FLAG,BYTE
 16306                                  ;	i_need	JShare,DWORD
 16307                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 16308                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 16309                                  ;
 16310                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 16311                                  ;
 16312                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 16313                                  ;	i_need	DMAADD,DWORD
 16314                                  ;	i_need	RENAMEDMA,BYTE
 16315                                  
 16316                                  ;----------------------------------------------------------------------------
 16317                                  ;
 16318                                  ; Procedure Name : DOS_DELETE
 16319                                  ;
 16320                                  ; Inputs:
 16321                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16322                                  ;		terminated)
 16323                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16324                                  ;		( = -1 if current dir not involved, else
 16325                                  ;		 Points to first char after last "/" of current dir part)
 16326                                  ;	[THISCDS] Points to CDS being used
 16327                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16328                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16329                                  ; Function:
 16330                                  ;	Delete the specified file(s)
 16331                                  ; Outputs:
 16332                                  ;	CARRY CLEAR
 16333                                  ;		OK
 16334                                  ;	CARRY SET
 16335                                  ;	    AX is error code
 16336                                  ;		error_file_not_found
 16337                                  ;			Last element of path not found
 16338                                  ;		error_path_not_found
 16339                                  ;			Bad path (not in curr dir part if present)
 16340                                  ;		error_bad_curr_dir
 16341                                  ;			Bad path in current directory part of path
 16342                                  ;		error_access_denied
 16343                                  ;			Attempt to delete device or directory
 16344                                  ;		***error_sharing_violation***
 16345                                  ;			Deny both access required, generates an INT 24.
 16346                                  ;			This error is NOT returned. The INT 24H is generated,
 16347                                  ;			  and the file is ignored (not deleted). Delete will
 16348                                  ;			  simply continue on looking for more files.
 16349                                  ;			  Carry will NOT be set in this case.
 16350                                  ; DS preserved, others destroyed
 16351                                  ;
 16352                                  ;----------------------------------------------------------------------------
 16353                                  
 16354                                  FILEFOUND   equ 01h
 16355                                  FILEDELETED equ 10h
 16356                                  
 16357                                  
 16358                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16359                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 16360                                  
 16361                                  	; 30/01/2024
 16362                                  
 16363                                  DOS_DELETE:
 16364                                  
 16365                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 16366                                  ;hkn; appropriately at this point.
 16367                                  
 16368 000024B9 E86FED                  	call	TestNet
 16369 000024BC 7306                    	JNC	short LOCAL_DELETE
 16370                                  
 16371                                  ;IF NOT Installed
 16372                                  ;	transfer NET_DELETE
 16373                                  ;ELSE
 16374                                  	;MOV	AX,(MultNET SHL 8) | 19
 16375                                  	;INT	2FH
 16376                                  	;return
 16377                                  
 16378 000024BE B81311                  	mov	ax,1113h
 16379 000024C1 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 16380                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 16381                                  			;		fully-qualified filename in DOS CS
 16382                                  			; SDA CDS pointer -> current directory structure for drive with file
 16383                                  			; Return: CF set on error
 16384 000024C3 C3                      	retn
 16385                                  ;ENDIF
 16386                                  
 16387                                  LOCAL_DELETE:
 16388 000024C4 C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 16389 000024C9 E821EE                  	call	ECritDisk
 16390                                  	;mov	word [CREATING],0E500h
 16391 000024CC C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 16392 000024D2 8B36[B205]              	MOV	SI,[WFP_START]
 16393                                  SKPNUL:
 16394 000024D6 AC                      	LODSB
 16395 000024D7 08C0                    	OR	AL,AL
 16396 000024D9 75FB                    	JNZ	short SKPNUL		; go to end
 16397 000024DB 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 16398 000024DE 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 16399 000024E2 7506                    	JNZ	short TEST_QUEST
 16400 000024E4 807C022A                	CMP	BYTE [SI+2],"*"
 16401 000024E8 741F                    	JZ	short CHECK_ATTS
 16402                                  TEST_QUEST:
 16403 000024EA 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 16404 000024ED 87FE                    	XCHG	DI,SI
 16405                                  
 16406 000024EF 16                      	push	ss
 16407                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 16408 000024F0 07                      	pop	es ; 17/05/2019
 16409                                  
 16410 000024F1 B83F3F                  	MOV	AX,"??" ; 3F3Fh
 16411 000024F4 B90400                  	MOV	CX,4		; four sets of "??"
 16412 000024F7 F3AF                    	REPE	SCASW
 16413 000024F9 751C                    	JNZ	short NOT_ALL
 16414 000024FB 87FE                    	XCHG	DI,SI
 16415 000024FD AD                      	LODSW
 16416 000024FE 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 16417 00002501 7514                    	JNZ	short NOT_ALL
 16418 00002503 AD                      	LODSW
 16419 00002504 3D3F3F                  	CMP	AX,"??"
 16420 00002507 750E                    	JNZ	short NOT_ALL
 16421                                  CHECK_ATTS:
 16422 00002509 A0[6D05]                	MOV	AL,[SATTRIB]
 16423                                  	;and	al,1Fh
 16424 0000250C 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16425                                  					; Look only at hidden bits
 16426                                  	;cmp	al,1Fh
 16427 0000250E 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16428                                  					; All must be set
 16429 00002510 7505                    	JNZ	short NOT_ALL
 16430                                  
 16431                                  ; NOTE WARNING DANGER-----
 16432                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 16433                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 16434                                  
 16435 00002512 C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 16436                                  NOT_ALL:
 16437 00002517 C606[4C03]01            	MOV	byte [NoSetDir],1
 16438 0000251C E81819                  	call	GetPathNoSet
 16439 0000251F 7312                    	JNC	short Del_found
 16440 00002521 750B                    	JNZ	short _bad_path
 16441 00002523 08C9                    	OR	CL,CL
 16442 00002525 7407                    	JZ	short _bad_path
 16443                                  No_file:
 16444 00002527 B80200                  	MOV	AX,error_file_not_found
 16445                                  ErrorReturn:
 16446 0000252A F9                      	STC
 16447                                  	;call	LCritDisk
 16448                                  	;retn
 16449                                  	; 18/12/2022
 16450 0000252B E9DAED                  	jmp	LCritDisk
 16451                                  
 16452                                  _bad_path:
 16453 0000252E B80300                  	MOV	AX,error_path_not_found
 16454 00002531 EBF7                    	JMP	short ErrorReturn
 16455                                  
 16456                                  Del_found:
 16457 00002533 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 16458 00002535 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 16459 0000253A 7405                    	JZ	short NOT_DIR
 16460                                  Del_access_err:
 16461 0000253C B80500                  	MOV	AX,error_access_denied
 16462 0000253F EBE9                    	JMP	short ErrorReturn
 16463                                  
 16464                                  NOT_DIR:
 16465 00002541 08E4                    	OR	AH,AH			; Check if device name
 16466 00002543 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 16467                                  
 16468                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 16469                                  
 16470                                  DELFILE:
 16471 00002545 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 16472                                  
 16473                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 16474                                  ; DOS issue a build BPB call the next time this drive is accessed.
 16475                                  
 16476 0000254A 1E                      	PUSH	DS
 16477 0000254B 8A26[7F05]              	MOV	AH,[DELALL]
 16478 0000254F C53E[E205]              	LDS	DI,[CURBUF]
 16479                                  	
 16480                                  ;hkn; SS override
 16481 00002553 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16482 00002559 7509                    	JNZ	short DoDelete		; yes
 16483                                  
 16484 0000255B F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16485 0000255F 7403                    	JZ	short DoDelete		; not read only
 16486                                  
 16487                                  	; 30/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16488                                  Skip_it:
 16489 00002561 1F                      	POP	DS
 16490 00002562 EB2F                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16491                                  
 16492                                  DoDelete:
 16493 00002564 E88100                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16494                                  	;JNC	short DEL_SHARE_OK
 16495                                  	;POP	DS
 16496                                  	;JMP	SHORT DELNXT		; Skip it
 16497                                  	; 30/01/2024
 16498 00002567 72F8                    	jc	short Skip_it
 16499                                  
 16500                                  DEL_SHARE_OK:
 16501                                  	; 17/05/2019 - Retro DOS v4.0
 16502                                  	; MSDOS 6.0
 16503                                  	;test	byte [di+5],40h
 16504 00002569 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16505                                  					;LB. if already dirty		  ;AN000;
 16506 0000256D 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16507 0000256F E8BC34                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16508                                  	;or	byte [di+5],40h
 16509 00002572 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16510                                  yesdirty:
 16511 00002576 8827                    	mov	[bx],ah 
 16512                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16513 00002578 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16514 0000257A 1F                      	POP	DS
 16515 0000257B 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16516                                  
 16517 00002580 83FB02                  	CMP	BX,2
 16518 00002583 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16519                                  	;cmp	bx,[es:bp+0Dh]
 16520 00002585 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16521 00002589 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16522                                  
 16523 0000258B E82328                  	call	RELEASE 		; Free file data
 16524 0000258E 7252                    	JC	short No_fileJ
 16525                                  
 16526                                  ; DOS 3.3  FastOpen
 16527                                  
 16528 00002590 E8C200                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16529                                  
 16530                                  ; DOS 3.3  FastOpen
 16531                                  
 16532                                  DELNXT:
 16533 00002593 C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16534 00002597 E80A18                  	call	GETENTRY		; Registers need to be reset
 16535 0000259A 7246                    	JC	short No_fileJ
 16536 0000259C E84517                  	call	NEXTENT
 16537 0000259F 73A4                    	JNC	short DELFILE
 16538 000025A1 C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16539                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16540                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16541                                  	;;mov	al,[es:bp+0]
 16542                                  	; 15/12/2022
 16543 000025A5 268A4600                	MOV	AL,[ES:BP]
 16544 000025A9 E88033                  	call	FLUSHBUF
 16545 000025AC 7234                    	JC	short No_fileJ
 16546                                  ;
 16547                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16548                                  ;
 16549                                  ;   not found not deleted		file not found
 16550                                  ;   not found	  deleted		*** impossible ***
 16551                                  ;	found not deleted		access denied (read-only)
 16552                                  ;	found	  deleted		no error
 16553                                  ;
 16554 000025AE F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16555 000025B3 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16556                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16557                                  ; and to force the DOS to issue a media check.
 16558 000025B5 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16559 000025BA 741C                    	jz	short No_Set_Flag
 16560 000025BC 50                      	PUSH	AX
 16561 000025BD 06                      	PUSH	ES
 16562 000025BE 57                      	PUSH	DI
 16563 000025BF C43E[A205]              	LES	DI,[THISCDS]
 16564 000025C3 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16565 000025C6 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16566 000025C9 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16567                                  	
 16568                                  	; MSDOS 6.0
 16569 000025CD 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16570 000025CF E8C804                  	call	Set_Media_ID		;>32mb set volume id to boot record	 ;AN000;
 16571                                  	 
 16572 000025D2 E8E42F                  	call	FATREAD_CDS		; force media check
 16573 000025D5 5F                      	POP	DI
 16574 000025D6 07                      	POP	ES
 16575 000025D7 58                      	POP	AX
 16576                                  No_Set_Flag:
 16577                                  	;call	LCritDisk		; carry is clear
 16578                                  	;retn
 16579                                  	; 18/12/2022
 16580 000025D8 E92DED                  	jmp	LCritDisk
 16581                                  DelError:
 16582 000025DB F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16583 000025E0 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16584                                  No_fileJ:
 16585 000025E2 E942FF                  	JMP	No_file ; 10/08/2018 		; Nope
 16586                                  Del_access_errJ:
 16587 000025E5 E954FF                  	JMP	Del_access_err ; 10/08/2018
 16588                                  
 16589                                  ; 08/08/2018 - Retro DOS v3.0
 16590                                  
 16591                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16592                                  ;---------------------------------------------------------------------------
 16593                                  ; Procedure Name : REN_DEL_Check
 16594                                  ;
 16595                                  ; Inputs:
 16596                                  ;	[THISDPB] set
 16597                                  ;	[CURBUF+2]:BX points to entry
 16598                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16599                                  ;	[WFP_Start] points to name
 16600                                  ; Function:
 16601                                  ;	Check for Exclusive access on given file.
 16602                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16603                                  ; Outputs:
 16604                                  ;	ES:BP = [THISDPB]
 16605                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16606                                  ;		last element will be loaded from the directory entry.  This is
 16607                                  ;		so the name given to the sharer doesn't have any meta chars in
 16608                                  ;		it.
 16609                                  ;	Carry set if sharing violation, INT 24H generated
 16610                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16611                                  ;		This is because input AX is preserved.
 16612                                  ;		Caller must set the error if needed.
 16613                                  ;	Carry clear
 16614                                  ;		OK
 16615                                  ; AX,DS,BX,SI,DI preserved
 16616                                  ;---------------------------------------------------------------------------
 16617                                  
 16618                                  REN_DEL_Check:
 16619                                  
 16620 000025E8 1E                      	PUSH	DS
 16621 000025E9 57                      	PUSH	DI
 16622 000025EA 50                      	PUSH	AX
 16623 000025EB 53                      	PUSH	BX
 16624 000025EC 56                      	PUSH	SI		; Save CURBUF pointers
 16625                                  	
 16626 000025ED 16                      	push	ss
 16627 000025EE 07                      	pop	es
 16628                                  
 16629                                  ;hkn; context ES will assume ES to DOSDATA
 16630                                  ;hkn; ASSUME	ES:DOSGROUP
 16631                                  
 16632                                  ;hkn; SS override
 16633 000025EF 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16634 000025F4 89DE                    	MOV	SI,BX
 16635                                  
 16636                                  ;hkn; SS override
 16637 000025F6 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16638 000025FB 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16639                                  	;ADD	BX,2		; Skip over d: to point to leading '\'
 16640                                  	; 31/01/2024
 16641 000025FD 43                      	inc	bx
 16642 000025FE 43                      	inc	bx
 16643 000025FF E8C9EB                  	call	StrLen		; CX is length of ES:DI including NUL
 16644 00002602 49                      	DEC	CX		; Don't include nul in count
 16645 00002603 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16646 00002605 E80246                  	call	SkipBack	; Back up one element
 16647 00002608 47                      	INC	DI		; Point to start of last element
 16648                                  
 16649                                  	; 17/05/2019 - Retro DOS v4.0
 16650                                  ;hkn; SS override
 16651                                  	; MSDOS 6.0
 16652 00002609 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16653                                  	;
 16654 0000260E E85FFA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16655 00002611 5E                      	POP	SI		; Get back entry pointers
 16656 00002612 5B                      	POP	BX
 16657 00002613 53                      	PUSH	BX
 16658 00002614 56                      	PUSH	SI		; Back on stack
 16659                                  	
 16660 00002615 16                      	push	ss
 16661 00002616 1F                      	pop	ds
 16662                                  
 16663                                  ;hkn; context DS will assume ES to DOSDATA
 16664                                  ;hkn; ASSUME	DS:DOSGROUP
 16665                                  
 16666                                  ; Close the file if possible by us.
 16667                                  ;
 16668                                  ;if installed
 16669 00002617 FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16670                                  ;else
 16671                                  ;	Call	ShCloseFile
 16672                                  ;endif
 16673 0000261B 8C1E[A005]              	MOV	[THISSFT+2],DS
 16674                                  
 16675                                  ;hkn; AUXSTACK is in DOSDATA
 16676 0000261F C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16677                                  				; Scratch space
 16678 00002625 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16679 00002627 E81A24                  	call	DOOPEN		; Fill in SFT for share check
 16680 0000262A C43E[9E05]              	LES	DI,[THISSFT]
 16681                                  	;mov	word [es:di+2],10h
 16682 0000262E 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16683                                  				; requires exclusive access
 16684                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16685 00002634 26C7050100              	mov	word [ES:DI],1
 16686 00002639 E8BE4B                  	call	ShareEnter
 16687 0000263C 720D                    	jc	short CheckDone
 16688 0000263E C43E[9E05]              	LES	DI,[THISSFT]
 16689                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16690 00002642 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16691                                  	
 16692 00002647 E8AB4B                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16693 0000264A F8                      	CLC
 16694                                  CheckDone:
 16695 0000264B C42E[8A05]              	LES	BP,[THISDPB]
 16696 0000264F 5E                      	POP	SI
 16697 00002650 5B                      	POP	BX
 16698 00002651 58                      	POP	AX
 16699 00002652 5F                      	POP	DI
 16700 00002653 1F                      	POP	DS
 16701 00002654 C3                      	retn
 16702                                  
 16703                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16704                                  ;---------------------------------------------------------------------------
 16705                                  ; Procedure Name : FastOpen_Delete
 16706                                  ; Inputs:
 16707                                  ;	None
 16708                                  ; Function:
 16709                                  ;	Call FastOpen to delete the dir info.
 16710                                  ; Outputs:
 16711                                  ;	None
 16712                                  ;---------------------------------------------------------------------------
 16713                                  
 16714                                  	; 31/01/2024
 16715                                  
 16716                                  FastOpen_Delete:
 16717 00002655 9C                      	PUSHF			; save flag
 16718 00002656 56                      	PUSH	SI		; save registers
 16719 00002657 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16720 00002658 53                      	PUSH	BX
 16721 00002659 50                      	PUSH	AX
 16722                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16723                                  ;hkn; SS override
 16724                                  	; 17/05/2019 - Retro DOS v4.0
 16725                                  	; MSDOS 6.0
 16726 0000265A 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16727                                  	
 16728 0000265F B003                    	MOV	AL,FONC_delete	; al = 3
 16729                                  
 16730                                  ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16731                                  %if 0 
 16732                                  fastinvoke:
 16733                                  ;hkn; FastTable is in DOSDATA
 16734                                  	MOV	BX,FastTable+2
 16735                                  	CALL	far [BX]	; call fastopen
 16736                                  	POP	AX		; restore registers
 16737                                  	POP	BX
 16738                                  	;pop	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16739                                  	POP	SI
 16740                                  	POPF			; restore flag
 16741                                  	retn
 16742                                  %else
 16743 00002661 EB0F                    	jmp	short fastinvoke ; 31/01/2024
 16744                                  %endif
 16745                                  
 16746                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16747                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16748                                  
 16749                                  	; 31/01/2024 Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 16750                                  	; DOSCODE:65B4h (MSDOS 6.22 MSDOS.SYS)
 16751                                  	; DOSCODE:6D07h (PCDOS 7.1 IBMDOS.COM)
 16752                                  
 16753                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16754                                  ;---------------------------------------------------------------------------
 16755                                  ; PROCEDURE Name : FastOpen_Rename
 16756                                  ;
 16757                                  ; Inputs:
 16758                                  ;	 REN_WFP   = Path Name
 16759                                  ;	 NAME1	   = New Name
 16760                                  ; Function:
 16761                                  ;	Call FastOpen to rename the dir entry in the cache
 16762                                  ; Outputs:
 16763                                  ;	None
 16764                                  ;---------------------------------------------------------------------------
 16765                                  
 16766                                  FastOpen_Rename:
 16767                                  	; 17/05/2019 - Retro DOS v4.0
 16768                                  	; 08/08/2018 - Retro DOS v3.0
 16769                                  	; MSDOS 6.0
 16770 00002663 9C                      	PUSHF			;AN001 save flag
 16771 00002664 56                      	PUSH	SI		;AN001 save registers
 16772 00002665 57                      	PUSH	DI		;AN001
 16773 00002666 53                      	PUSH	BX		;AN001
 16774 00002667 50                      	PUSH	AX		;AN001
 16775                                  	;
 16776                                  ;hkn; SS override
 16777 00002668 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16778                                  
 16779                                  ;hkn; NAME1 is in DOSDATA
 16780 0000266D BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16781                                  	;mov	al,6
 16782 00002670 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16783                                  
 16784                                  fastinvoke:	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16785                                  	
 16786                                  ;hkn; FastTable is in DOSDATA
 16787 00002672 BB[320D]                	MOV	BX,FastTable+2
 16788 00002675 FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16789                                  	
 16790 00002677 58                      	POP	AX		; restore registers  ;AN001
 16791 00002678 5B                      	POP	BX				     ;AN001
 16792 00002679 5F                      	POP	DI				     ;AN001
 16793 0000267A 5E                      	POP	SI				     ;AN001
 16794 0000267B 9D                      	POPF			; restore flag	     ;AN001
 16795 0000267C C3                      	retn					     ;AN001
 16796                                  
 16797                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16798                                  ;---------------------------------------------------------------------------
 16799                                  ; Procedure Name : FastOpen_Update
 16800                                  ;
 16801                                  ; Inputs:
 16802                                  ;	DL     drive number (A=0,B=1,,,)
 16803                                  ;	CX     first cluster #
 16804                                  ;	AH     0 updates dir entry
 16805                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16806                                  ;	ES:DI  directory entry
 16807                                  ; Function:
 16808                                  ;	Call FastOpen to update the dir info.
 16809                                  ; Outputs:
 16810                                  ;	None
 16811                                  ;---------------------------------------------------------------------------
 16812                                  
 16813                                  FastOpen_Update:
 16814 0000267D 9C                      	PUSHF			; save flag
 16815 0000267E 56                      	PUSH	SI
 16816 0000267F 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16817 00002680 53                      	PUSH	BX		; save regs
 16818 00002681 50                      	PUSH	AX
 16819 00002682 B004                    	MOV	AL,FONC_update	; al = 4
 16820 00002684 EBEC                    	JMP	short fastinvoke
 16821                                  
 16822                                  	; 17/05/2019
 16823                                  
 16824                                  	; MSDOS 6.0
 16825                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16826                                  ;---------------------------------------------------------------------------
 16827                                  Fast_Dispatch:
 16828                                  ;hkn; FastTable is in DOSDATA
 16829 00002686 BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16830                                  ;hkn; use SS override
 16831 00002689 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16832 0000268C C3                      	retn
 16833                                  
 16834                                  ;============================================================================
 16835                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16836                                  ;============================================================================
 16837                                  ; 08/08/2018 - Retro DOS v3.0
 16838                                  ; 17/05/2019 - Retro DOS v4.0
 16839                                  
 16840                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16841                                  ;	NAME	DOS_RENAME
 16842                                  
 16843                                  ;**	Low level routine for renaming files
 16844                                  ;----------------------------------------------------------------------------
 16845                                  ;	DOS_RENAME
 16846                                  ;
 16847                                  ;	Modification history:
 16848                                  ;
 16849                                  ;	    Created: ARR 30 March 1983
 16850                                  
 16851                                  ;----------------------------------------------------------------------------
 16852                                  ;
 16853                                  ; Procedure Name : DOS_RENAME
 16854                                  ;
 16855                                  ; Inputs:
 16856                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16857                                  ;		chars, NUL terminated)
 16858                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16859                                  ;		( = -1 if current dir not involved, else
 16860                                  ;		 Points to first char after last "/" of current dir part)
 16861                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16862                                  ;		chars, NUL terminated)
 16863                                  ;	[THISCDS] Points to CDS being used
 16864                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16865                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16866                                  ; Function:
 16867                                  ;	Rename the specified file(s)
 16868                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16869                                  ; Outputs:
 16870                                  ;	CARRY CLEAR
 16871                                  ;	    OK
 16872                                  ;	CARRY SET
 16873                                  ;	    AX is error code
 16874                                  ;		error_file_not_found
 16875                                  ;			No match for source, or dest path invalid
 16876                                  ;		error_not_same_device
 16877                                  ;			Source and dest are on different devices
 16878                                  ;		error_access_denied
 16879                                  ;			Directory specified (not simple rename),
 16880                                  ;			Device name given, Destination exists.
 16881                                  ;			NOTE: In third case some renames may have
 16882                                  ;			 been done if metas.
 16883                                  ;		error_path_not_found
 16884                                  ;			Bad path (not in curr dir part if present)
 16885                                  ;			SOURCE ONLY
 16886                                  ;		error_bad_curr_dir
 16887                                  ;			Bad path in current directory part of path
 16888                                  ;			SOURCE ONLY
 16889                                  ;		error_sharing_violation
 16890                                  ;			Deny both access required, generates an INT 24.
 16891                                  ; DS preserved, others destroyed
 16892                                  ;
 16893                                  ;----------------------------------------------------------------------------
 16894                                  
 16895                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16896                                  
 16897                                  	; 31/01/2024
 16898                                  
 16899                                  DOS_RENAME:
 16900                                  
 16901                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16902                                  ;hkn; at this point to DOSDATA.
 16903                                  
 16904 0000268D E89BEB                  	call	TestNet
 16905 00002690 7306                    	JNC	short LOCAL_RENAME
 16906                                  
 16907                                  ;IF NOT Installed
 16908                                  ;	transfer NET_RENAME
 16909                                  ;ELSE
 16910                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16911                                  	;INT	2FH
 16912                                  	;return
 16913                                  
 16914 00002692 B81111                  	mov     ax, 1111h
 16915 00002695 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16916                                  			; SS = DS = DOS CS, 
 16917                                  			; SDA first filename pointer = offset of fully-qualified old name
 16918                                  			; SDA CDS pointer -> current directory
 16919                                  			; Return: CF set on error
 16920 00002697 C3                      	retn
 16921                                  ;ENDIF
 16922                                  
 16923                                  LOCAL_RENAME:
 16924 00002698 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16925 0000269D 8B36[B205]              	MOV	SI,[WFP_START]
 16926 000026A1 8B3E[B405]              	MOV	DI,[REN_WFP]
 16927 000026A5 8A04                    	MOV	AL,[SI]
 16928 000026A7 8A25                    	MOV	AH,[DI]
 16929 000026A9 0D2020                  	OR	AX,2020H		; Lower case
 16930 000026AC 38E0                    	CMP	AL,AH
 16931 000026AE 7405                    	JZ	short SAMEDRV
 16932 000026B0 B81100                  	MOV	AX,error_not_same_device ; 11h
 16933 000026B3 F9                      	STC
 16934 000026B4 C3                      	retn
 16935                                  
 16936                                  SAMEDRV:
 16937 000026B5 FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16938 000026B9 FF36[2C03]              	PUSH	WORD [DMAADD]
 16939 000026BD 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16940                                  
 16941                                  ;hkn; RENAMEDMA is in DOSDATA
 16942 000026C1 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16943 000026C7 C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16944 000026CC E81EEC                  	call	ECritDisk
 16945 000026CF E8EE05                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16946                                  					;    points to entry
 16947 000026D2 7314                    	JNC	short Check_Dev
 16948 000026D4 83F812                  	CMP	AX,error_no_more_files ; 12h
 16949 000026D7 7503                    	JNZ	short GOTERR
 16950 000026D9 B80200                  	MOV	AX,error_file_not_found ; 2
 16951                                  GOTERR:
 16952 000026DC F9                      	STC
 16953                                  RENAME_POP:
 16954 000026DD 8F06[2C03]              	POP	WORD [DMAADD]
 16955 000026E1 8F06[2E03]              	POP	WORD [DMAADD+2]
 16956                                  	;call	LCritDisk
 16957                                  	;retn
 16958                                  	; 16/12/2022
 16959 000026E5 E920EC                  	jmp	LCritDisk
 16960                                  
 16961                                  Check_Dev:
 16962                                  	; 17/05/2019 - Retro DOS v4.0
 16963                                  	;mov	ax,5
 16964 000026E8 B80500                  	MOV	AX,error_access_denied	; Assume error
 16965                                  	
 16966                                  	; MSDOS 6.0
 16967 000026EB 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16968 000026EC C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  check if source a dir  ;AN000;
 16969                                  	;add	si,21
 16970 000026F0 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16971                                  	;test	byte [si+11],10h
 16972 000026F3 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16973 000026F7 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16974 000026F9 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16975 000026FD E8ECFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16976                                  notdir:
 16977 00002700 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16978 00002701 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16979                                  
 16980                                  	; MSDOS 3.3 & MSDOS 6.0
 16981 00002703 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16982 00002708 75D2                    	JNZ	short GOTERR
 16983                                  
 16984                                  ; At this point a source has been found. There is search continuation info (a
 16985                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16986                                  ; directory entry found.
 16987                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16988                                  ; throughout the RENAME since it is known at this point that the source and
 16989                                  ; destination are both on the same device.
 16990                                  ; [SATTRIB] is also set.
 16991                                  
 16992 0000270A 89DE                    	MOV	SI,BX
 16993                                  	;add	si,26
 16994 0000270C 83C61A                  	ADD	SI,dir_entry.dir_first
 16995 0000270F E8D6FE                  	call	REN_DEL_Check
 16996 00002712 7305                    	JNC	short REN_OK1
 16997 00002714 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16998 00002717 EBC4                    	JMP	short RENAME_POP
 16999                                  
 17000                                  ;------------------------------------------------------------------------------
 17001                                  ; Check if the source is a file or directory. If file, delete the entry
 17002                                  ; from the Fastopen cache. If directory, rename it later
 17003                                  ;------------------------------------------------------------------------------
 17004                                  
 17005                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 17006                                  	; MSDOS 6.0
 17007                                  	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 17008                                  	;PUSH	SI
 17009 00002719 C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 17010                                  	;add	si,21
 17011 0000271D 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17012                                  	;test	byte [si+11],10h
 17013 00002720 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 17014                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 17015 00002724 7503                    	jnz	short SWAP_SOURCE ; 31/01/2024
 17016                                  	;POP	SI			;BN00X
 17017                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 17018                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 17019                                  	;POP	SI
 17020                                  
 17021                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17022 00002726 E82CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 17023                                  SWAP_SOURCE:
 17024                                  	; MSDOS 3.3
 17025                                  	;MOV	SI,[REN_WFP]
 17026                                  	;MOV	[WFP_START],SI
 17027                                  	; MSDOS 6.0
 17028 00002729 A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 17029 0000272C 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 17030 00002730 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 17031 00002734 A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 17032                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17033 00002737 C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 17034                                  	;mov	word [CREATING],0E5FFh
 17035 0000273D C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 17036                                  					; A rename is like a CREATE_NEW as far
 17037                                  					; as the destination is concerned.
 17038 00002743 E8F116                  	call	GetPathNoSet
 17039                                  
 17040                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 17041                                  ;   since no files match the destination name. If it fails for any other
 17042                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 17043                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 17044                                  ;   if the rename should fail because we haven't built an explicit name by
 17045                                  ;   substituting for the meta chars in it. In this case the destination file
 17046                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 17047                                  ;   in the directory entry part.
 17048                                  	
 17049 00002746 7223                    	JC	short NODEST
 17050                                  	
 17051                                  	; MSDOS 6.0
 17052                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 17053                                  	; !! MSDOS 3.3 !!
 17054                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 17055                                  
 17056 00002748 08E4                    	OR	AH,AH			; Device?
 17057 0000274A 792C                    	JNS	short SAVEDEST		; No, continue
 17058                                  BAD_ACC:
 17059 0000274C B80500                  	MOV	AX,error_access_denied
 17060 0000274F F9                      	STC
 17061                                  RENAME_CLEAN:
 17062 00002750 9C                      	PUSHF				; Save carry state
 17063 00002751 50                      	PUSH	AX			; and error code (if carry set)
 17064 00002752 A0[7605]                	MOV	AL,[THISDRV]
 17065 00002755 E8D431                  	call	FLUSHBUF
 17066 00002758 58                      	POP	AX
 17067 00002759 803E[4A03]00            	CMP	byte [FAILERR],0
 17068 0000275E 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 17069 00002760 9D                      	POPF
 17070 00002761 E979FF                  	JMP	RENAME_POP
 17071                                  
 17072                                  BAD_ERR:
 17073 00002764 58                      	POP	AX			; Saved flags
 17074                                  	; 16/12/202
 17075                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17076                                  BAD_PATH: ; *
 17077 00002765 B80300                  	MOV	AX,error_path_not_found
 17078 00002768 E971FF                  	JMP	GOTERR
 17079                                  
 17080                                  NODEST:
 17081 0000276B 75F8                    	JNZ	short BAD_PATH
 17082 0000276D 803E[4A03]00            	CMP	byte [FAILERR],0
 17083 00002772 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 17084                                  					; because user FAILed on I 24
 17085                                  	; 14/11/2022
 17086 00002774 08C9                    	OR	CL,CL
 17087                                  	;JNZ	short SAVEDEST
 17088                                  	; 17/05/2019
 17089 00002776 74ED                    	jz	short BAD_PATH ; *
 17090                                  ;BAD_PATH: ; *
 17091                                  ;	MOV	AX,error_path_not_found
 17092                                  ;	;STC
 17093                                  ;	;JMP	RENAME_POP
 17094                                  ;	; 17/05/2019
 17095                                  ;	jmp	GOTERR 
 17096                                  
 17097                                  ; 16/12/2022
 17098                                  %if 0
 17099                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17100                                  	or	cl,cl
 17101                                  	jnz	short SAVEDEST
 17102                                  	;jz	short BAD_PATH ; *
 17103                                  BAD_PATH: ; *
 17104                                  	;mov	ax,3
 17105                                  	mov	ax,error_path_not_found
 17106                                  	stc
 17107                                  	jmp	RENAME_POP
 17108                                  %endif
 17109                                  
 17110                                  SAVEDEST:
 17111 00002778 16                      	push	ss
 17112 00002779 07                      	pop	es
 17113                                  
 17114                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 17115 0000277A BF[5705]                	MOV	DI,NAME2
 17116 0000277D BE[4B05]                	MOV	SI,NAME1
 17117                                  
 17118 00002780 B90B00                  	MOV	CX,11
 17119 00002783 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 17120 00002785 A1[C205]                	MOV	AX,[DIRSTART]
 17121 00002788 A3[6405]                	MOV	[DESTSTART],AX
 17122                                  BUILDDEST:
 17123                                  	; 31/01/2024
 17124                                  	;push	ss
 17125                                  	;pop	es			; needed due to JMP BUILDDEST below
 17126                                  
 17127                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 17128 0000278B BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 17129 0000278E BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 17130 00002791 BE[5705]                	MOV	SI,NAME2		; Raw dest
 17131                                  
 17132 00002794 B90B00                  	MOV	CX,11
 17133                                  
 17134                                  	; 17/05/2019 - Retro DOS v4.0
 17135                                  	
 17136                                  	; MSDOS 6.0
 17137 00002797 E81101                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 17138                                  
 17139                                  	; MSDOS 3.3
 17140                                  
 17141                                  ; 08/08/2018 - Retro DOS v3.0
 17142                                  ; MSDOS 6.0 
 17143                                  ;---------------------------------------------------------------------------
 17144                                  ;Procedure: NEW_RENAME
 17145                                  ;
 17146                                  ;Input: DS:SI -> raw string with ?
 17147                                  ;	ES:DI -> destination string
 17148                                  ;	DS:BX -> source string
 17149                                  ;Function: replace ? chars of raw string with chars in source string and
 17150                                  ;	   put in destination string
 17151                                  ;Output: ES:DI-> new string
 17152                                  ;---------------------------------------------------------------------------
 17153                                  ;
 17154                                  ;NEW_RENAME:
 17155                                  ;NEWNAM:
 17156                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 17157                                  ;	LODSB
 17158                                  ;	CMP	AL,"?"
 17159                                  ;	JNZ	short NOCHG
 17160                                  ;	MOV	AL,[BX] 		; Get replace char
 17161                                  ;NOCHG:
 17162                                  ;	STOSB
 17163                                  ;	INC	BX			; Next replace char
 17164                                  ;	LOOP	NEWNAM
 17165                                  ;	; MSDOS 6.0
 17166                                  ;	;retn
 17167                                  
 17168                                  	; MSDOS 3.3 & MSDOS 6.0
 17169                                  	;mov	byte [ATTRIB],16h
 17170 0000279A C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 17171 0000279F C606[7E05]FF            	MOV	byte [CREATING],0FFH
 17172 000027A4 E82D19                  	call	DEVNAME 		; Check if we built a device name
 17173 000027A7 73A3                    	JNC	short BAD_ACC
 17174 000027A9 8B1E[6405]              	MOV	BX,[DESTSTART]
 17175 000027AD C42E[8A05]              	LES	BP,[THISDPB]
 17176 000027B1 E82016                  	call	SETDIRSRCH		; Reset search to start of dir
 17177 000027B4 7296                    	JC	short BAD_ACC 		; Screw up
 17178 000027B6 E8E114                  	call	FINDENTRY		; See if new name already exists
 17179 000027B9 7391                    	JNC	short BAD_ACC 		; Error if found
 17180 000027BB 803E[4A03]00            	CMP	byte [FAILERR],0
 17181 000027C0 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 17182 000027C2 A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 17183 000027C5 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 17184 000027C9 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 17185                                  
 17186                                  	;mov	al,[RENAMEDMA+32]
 17187 000027CB A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 17188 000027CE A810                    	TEST	AL,attr_directory ; 10h
 17189 000027D0 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 17190                                  					; otherwise the . and .. entries get
 17191                                  					; wiped.
 17192 000027D2 A2[6B05]                	MOV	[ATTRIB],AL
 17193 000027D5 8C1E[A005]              	MOV	[THISSFT+2],DS
 17194                                  
 17195                                  ;hkn; AUXSTACK is in DOSDATA
 17196                                  	;mov	si,RENAMEDMA+145h
 17197 000027D9 BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 17198 000027DC 8936[9E05]              	MOV	[THISSFT],SI
 17199                                  	;mov	word [SI+2],2
 17200 000027E0 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17201 000027E5 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 17202 000027E7 E8C320                  	call	RENAME_MAKE		; This is in mknode
 17203 000027EA 7303                    	JNC	short GOT_DEST
 17204                                  BAD_ACCJ:
 17205 000027EC E95DFF                  	JMP	BAD_ACC
 17206                                  
 17207                                  GOT_DEST:
 17208 000027EF 53                      	push	bx
 17209 000027F0 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 17210 000027F4 E8FE49                  	call	ShareEnd		; we need to remove it.
 17211 000027F7 5B                      	pop	bx
 17212                                  
 17213                                  ; A zero length entry with the correct new name has now been made at
 17214                                  ;   [CURBUF+2]:BX.
 17215                                  
 17216 000027F8 C43E[E205]              	LES	DI,[CURBUF]
 17217                                  
 17218                                  	; MSDOS 6.0
 17219                                  	;test	byte [es:di+5],40h
 17220 000027FC 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17221                                  					;LB. if already dirty		  ;AN000;
 17222 00002801 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 17223 00002803 E82832                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17224                                  	;or	byte [es:di+5],40h
 17225 00002806 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17226                                  yesdirty1:
 17227 0000280B 89DF                    	MOV	DI,BX
 17228                                  	;add	di,11
 17229 0000280D 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 17230                                  
 17231                                  ;hkn; RENAMEDMA is in DOSDATA
 17232                                  	;mov	si,[RENAMEDMA+32]
 17233 00002810 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 17234                                  	;mov	cx,21
 17235 00002813 B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 17236 00002816 F3A4                    	REP	MOVSB
 17237 00002818 E87A00                  	CALL	GET_SOURCE
 17238 0000281B 7275                    	JC	short RENAME_OVER
 17239 0000281D 89DF                    	MOV	DI,BX
 17240 0000281F 8E06[E405]              	MOV	ES,[CURBUF+2]
 17241 00002823 B0E5                    	MOV	AL,DIRFREE ; 0E5h
 17242 00002825 AA                      	STOSB				; "free" the source
 17243 00002826 EB13                    	JMP	SHORT DIRTY_IT
 17244                                  
 17245                                  SIMPLE_RENAME:
 17246 00002828 E86A00                  	CALL	GET_SOURCE		; Get the source back
 17247 0000282B 7265                    	JC	short RENAME_OVER
 17248 0000282D 89DF                    	MOV	DI,BX
 17249 0000282F 8E06[E405]              	MOV	ES,[CURBUF+2]
 17250                                  
 17251                                  ;hkn; NAME1 is in DOSDATA
 17252 00002833 BE[4B05]                	MOV	SI,NAME1		; New Name
 17253 00002836 B90B00                  	MOV	CX,11
 17254 00002839 F3A4                    	REP	MOVSB
 17255                                  DIRTY_IT:
 17256 0000283B 8B3E[E205]              	MOV	DI,[CURBUF]
 17257                                  
 17258                                  	; MSDOS 6.0
 17259 0000283F 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17260                                  					;LB. if already dirty		  ;AN000;
 17261 00002844 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 17262 00002846 E8E531                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17263                                  	
 17264 00002849 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17265                                  
 17266                                  ;------------------------------------------------------------------------------
 17267                                  ; Check if the source is a directory of file. If directory rename it to the
 17268                                  ; the new name in the Fastopen cache buffer. If file name it has been
 17269                                  ; previously deleted.
 17270                                  ;------------------------------------------------------------------------------
 17271                                  
 17272                                  yesdirty2:
 17273                                  	; MSDOS 6.0
 17274 0000284E 56                      	PUSH	SI
 17275 0000284F C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 17276 00002853 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17277 00002856 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 17278 0000285A 7403                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 17279 0000285C E804FE                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 17280                                  	; 31/01/2024
 17281                                  	;POP	SI
 17282                                  	;JMP	SHORT NOT_DIRTY1
 17283                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 17284 0000285F 5E                      	POP	SI
 17285                                  NOT_DIRTY1:				;;BN00X
 17286                                  NEXT_SOURCE:
 17287                                  ;hkn; RENAMEDMA is in DOSDATA
 17288 00002860 BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 17289                                  
 17290                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 17291                                  ; to enter it before going to RENAME_Next.
 17292                                  
 17293 00002863 E887EA                  	call	ECritDisk
 17294 00002866 C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 17295                                  				  ;  to FF when we made the prev new file).
 17296 0000286B E89405                  	call	RENAME_NEXT
 17297                                  
 17298                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 17299                                  ; we were before.
 17300                                  
 17301 0000286E 7222                    	JC	short RENAME_OVER
 17302                                  
 17303                                  	;lea	si,[bx+26]
 17304 00002870 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 17305 00002873 E872FD                  	call	REN_DEL_Check
 17306 00002876 7306                    	JNC	short REN_OK2
 17307 00002878 B82000                  	MOV	AX,error_sharing_violation ; 20h
 17308                                  jmp_to_rename_clean: ; 28/12/2022
 17309 0000287B E9D2FE                  	JMP	RENAME_CLEAN ; 10/08/2018
 17310                                  
 17311                                  ;------------------------------------------------------------------------------
 17312                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 17313                                  ; if directory, rename directory name in the Fastopen cache.
 17314                                  ;-----------------------------------------------------------------------------
 17315                                  
 17316                                  REN_OK2:
 17317                                  	; MSDOS 6.0
 17318                                  	;mov	al,[RERNAMEDMA+32]
 17319 0000287E A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 17320                                  	;test	al,10h
 17321 00002881 A810                    	TEST	AL,attr_directory	;;BN00X directory
 17322 00002883 7408                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 17323                                  	
 17324                                  	; MSDOS 3.3 & MSDOS 6.0
 17325 00002885 E8CDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 17326                                  jmp_to_builddest: ; 28/12/2022
 17327                                  	; 31/01/2024
 17328 00002888 16                      	push	ss
 17329 00002889 07                      	pop	es
 17330 0000288A E9FEFE                  	JMP	BUILDDEST		;;BN00X
 17331                                  
 17332                                  	; MSDOS 6.0
 17333                                  Ren_Directory:
 17334 0000288D E8D3FD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 17335                                  	;JMP	BUILDDEST
 17336                                  	; 28/12/2022
 17337 00002890 EBF6                    	jmp	short jmp_to_builddest
 17338                                  
 17339                                  RENAME_OVER:
 17340 00002892 F8                      	CLC
 17341                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 17342                                  	; 28/12/2022
 17343 00002893 EBE6                    	jmp	short jmp_to_rename_clean
 17344                                  
 17345                                  ;----------------------------------------------------------------------------
 17346                                  ; Procedure: GET_SOURCE
 17347                                  ;
 17348                                  ; Inputs:
 17349                                  ;	RENAMEDMA has source info
 17350                                  ; Function:
 17351                                  ;	Re-find the source
 17352                                  ; Output:
 17353                                  ;	[CURBUF] set
 17354                                  ;	[CURBUF+2]:BX points to entry
 17355                                  ;	Carry set if error (currently user FAILed to I 24)
 17356                                  ; DS preserved, others destroyed
 17357                                  ;----------------------------------------------------------------------------
 17358                                  
 17359                                  GET_SOURCE:
 17360 00002895 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 17361 00002899 C42E[8A05]              	LES	BP,[THISDPB]
 17362 0000289D E83415                  	call	SETDIRSRCH
 17363 000028A0 7214                    	JC	short gs_ret_label	; retc
 17364 000028A2 E80E18                  	call	STARTSRCH
 17365 000028A5 A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 17366                                  	;call	GETENT
 17367                                  	; 18/12/2022
 17368 000028A8 E9FC14                  	jmp	GETENT
 17369                                  ;gs_ret_label:
 17370                                  	;retn
 17371                                  
 17372                                  ; MSDOS 6.0 
 17373                                  ;---------------------------------------------------------------------------
 17374                                  ;Procedure: NEW_RENAME
 17375                                  ;
 17376                                  ;Input: DS:SI -> raw string with ?
 17377                                  ;	ES:DI -> destination string
 17378                                  ;	DS:BX -> source string
 17379                                  ;Function: replace ? chars of raw string with chars in source string and
 17380                                  ;	   put in destination string
 17381                                  ;Output: ES:DI-> new string
 17382                                  ;---------------------------------------------------------------------------
 17383                                  
 17384                                  NEW_RENAME:
 17385                                  	; 17/05/2019 - Retro DOS v4.0
 17386                                  NEWNAM:
 17387                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 17388 000028AB AC                      	LODSB
 17389 000028AC 3C3F                    	CMP	AL,"?" ; 3Fh
 17390 000028AE 7502                    	JNZ	short NOCHG
 17391 000028B0 8A07                    	MOV	AL,[BX] 		; Get replace char
 17392                                  NOCHG:
 17393 000028B2 AA                      	STOSB
 17394 000028B3 43                      	INC	BX			; Next replace char
 17395 000028B4 E2F5                    	LOOP	NEWNAM
 17396                                  	; MSDOS 6.0
 17397                                  gs_ret_label:	; 18/12/2022
 17398 000028B6 C3                      	retn
 17399                                  
 17400                                  ;============================================================================
 17401                                  ; FINFO.ASM, MSDOS 6.0, 1991
 17402                                  ;============================================================================
 17403                                  ; 08/08/2018 - Retro DOS v3.0
 17404                                  ; 17/05/2019 - Retro DOS v4.0
 17405                                  
 17406                                  ;**	Low level routines for returning file information and setting file
 17407                                  ;	attributes
 17408                                  ;
 17409                                  ;	GET_FILE_INFO
 17410                                  ;	SET_FILE_ATTRIBUTE
 17411                                  ;
 17412                                  ;	Modification history:
 17413                                  ;
 17414                                  ;	    Created: ARR 30 March 1983
 17415                                  ;
 17416                                  ;	M025: Return access_denied if attempting to set
 17417                                  ;	      attribute of root directory.
 17418                                  ;
 17419                                  
 17420                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 17421                                  
 17422                                  ;---------------------------------------------------------------------------
 17423                                  ; Procedure Name : GET_FILE_INFO
 17424                                  ;
 17425                                  ; Inputs:
 17426                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17427                                  ;		terminated)
 17428                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17429                                  ;		( = -1 if current dir not involved, else
 17430                                  ;		 Points to first char after last "/" of current dir part)
 17431                                  ;	[THISCDS] Points to CDS being used
 17432                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17433                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17434                                  ; Function:
 17435                                  ;	Get Information about a file
 17436                                  ; Returns:
 17437                                  ;	CARRY CLEAR
 17438                                  ;	    AX = Attribute of file
 17439                                  ;	    CX = Time stamp of file
 17440                                  ;	    DX = Date stamp of file
 17441                                  ;	    BX:DI = Size of file (32 bit)
 17442                                  ;	CARRY SET
 17443                                  ;	    AX is error code
 17444                                  ;		error_file_not_found
 17445                                  ;			Last element of path not found
 17446                                  ;		error_path_not_found
 17447                                  ;			Bad path (not in curr dir part if present)
 17448                                  ;		error_bad_curr_dir
 17449                                  ;			Bad path in current directory part of path
 17450                                  ; DS preserved, others destroyed
 17451                                  ;---------------------------------------------------------------------------
 17452                                  
 17453                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17454                                  
 17455                                  GET_FILE_INFO:
 17456                                  
 17457                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 17458                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17459                                  
 17460 000028B7 E871E9                  	call	TestNet
 17461 000028BA 7306                    	JNC	short LOCAL_INFO
 17462                                  
 17463                                  ;IF NOT Installed
 17464                                  ;	transfer NET_GET_FILE_INFO
 17465                                  ;ELSE
 17466                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 17467                                  ;	INT	2FH
 17468                                  ;	return
 17469                                  
 17470 000028BC B80F11                  	mov     ax, 110Fh
 17471 000028BF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 17472                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17473                                  			; SDA CDS pointer -> current directory
 17474                                  			; Return: CF set on error, AX = file attributes
 17475 000028C1 C3                      	retn
 17476                                  ;ENDIF
 17477                                  
 17478                                  LOCAL_INFO:
 17479 000028C2 E828EA                  	call	ECritDisk
 17480 000028C5 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17481                                  	; MSDOS 3.3
 17482                                  	;call	GETPATH
 17483                                  	; MSDOS 6.0
 17484 000028CA E8D700                  	call	GET_FAST_PATH
 17485                                  	; MSDOS 3.3 & MSDOS 6.0
 17486 000028CD 7312                    	JNC	short info_check_dev
 17487                                  NO_PATH:
 17488 000028CF 750B                    	JNZ	short bad_path1
 17489 000028D1 08C9                    	OR	CL,CL
 17490 000028D3 7407                    	JZ	short bad_path1
 17491                                  info_no_file:
 17492 000028D5 B80200                  	MOV	AX,error_file_not_found
 17493                                  BadRet:
 17494 000028D8 F9                      	STC
 17495                                  JustRet:
 17496                                  	;call	LCritDisk
 17497                                  	;retn
 17498                                  	; 18/12/2022
 17499 000028D9 E92CEA                  	jmp	LCritDisk
 17500                                  
 17501                                  bad_path1:
 17502 000028DC B80300                  	MOV	AX,error_path_not_found
 17503 000028DF EBF7                    	jmp	short BadRet
 17504                                  
 17505                                  info_check_dev:
 17506 000028E1 08E4                    	OR	AH,AH
 17507 000028E3 78F0                    	JS	short info_no_file	; device
 17508                                  
 17509                                  	; MSDOS 6.0
 17510                                  ;SR;
 17511                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 17512                                  ;for a root dir
 17513                                  
 17514 000028E5 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 17515 000028EA 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 17516                                  
 17517 000028EC 30E4                    	xor	ah,ah
 17518 000028EE B010                    	mov	al,attr_directory ; 10h
 17519                                  	;clc
 17520                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17521                                  	; (DOSCODE:683Eh)
 17522                                  	; 16/12/2022
 17523                                  	;clc
 17524 000028F0 EBE7                    	jmp	short JustRet
 17525                                  
 17526                                  not_root:
 17527                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17528 000028F2 1E                      	PUSH	DS
 17529 000028F3 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17530 000028F7 89DE                    	MOV	SI,BX
 17531 000028F9 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17532 000028FB 89DF                    	MOV	DI,BX
 17533                                  	;mov	cx,[si+16h]
 17534 000028FD 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17535                                  	;mov	dx,[si+18h]
 17536 00002900 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17537 00002903 30E4                    	XOR	AH,AH
 17538                                  	;mov	al,[si+0Bh]
 17539 00002905 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17540                                  	;test	al,10h
 17541 00002908 A810                    	TEST	AL,attr_directory
 17542 0000290A 7506                    	JNZ	short NO_SIZE
 17543                                  	;mov	di,[si+1Ch]
 17544 0000290C 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17545                                  	;mov	bx,[si+1Eh]
 17546 0000290F 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17547                                  NO_SIZE:
 17548 00002912 1F                      	POP	DS
 17549                                  	;CLC
 17550                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17551                                  	; (DOSCODE:6864h)
 17552                                  	; 16/12/2022
 17553                                  	;clc
 17554 00002913 EBC4                    	jmp	short JustRet
 17555                                  
 17556                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17557                                  ;-------------------------------------------------------------------------------
 17558                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17559                                  ; Inputs:
 17560                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17561                                  ;		terminated)
 17562                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17563                                  ;		( = -1 if current dir not involved, else
 17564                                  ;		 Points to first char after last "/" of current dir part)
 17565                                  ;	[THISCDS] Points to CDS being used
 17566                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17567                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17568                                  ;	AX is new attributes to give to file
 17569                                  ; Function:
 17570                                  ;	Set File Attributes
 17571                                  ; Returns:
 17572                                  ;	CARRY CLEAR
 17573                                  ;	    No error
 17574                                  ;	CARRY SET
 17575                                  ;	    AX is error code
 17576                                  ;		error_file_not_found
 17577                                  ;			Last element of path not found
 17578                                  ;		error_path_not_found
 17579                                  ;			Bad path (not in curr dir part if present)
 17580                                  ;		error_bad_curr_dir
 17581                                  ;			Bad path in current directory part of path
 17582                                  ;		error_access_denied
 17583                                  ;			Attempt to set an attribute which cannot be set
 17584                                  ;			(attr_directory, attr_volume_ID)
 17585                                  ;		error_sharing_violation
 17586                                  ;			Sharing mode of file did not allow the change
 17587                                  ;			(this request requires exclusive write/read access)
 17588                                  ;			(INT 24H generated)
 17589                                  ; DS preserved, others destroyed
 17590                                  ;----------------------------------------------------------------------------
 17591                                  
 17592                                  SET_FILE_ATTRIBUTE:
 17593                                  
 17594                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17595                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17596                                  
 17597 00002915 A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17598 00002918 7414                    	JZ	short set_look
 17599                                  _BAD_ACC:
 17600 0000291A C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17601 0000291F C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17602 00002924 C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17603 00002929 B80500                  	MOV	AX,error_access_denied ; 5
 17604 0000292C F9                      	STC
 17605 0000292D C3                      	retn
 17606                                  
 17607                                  set_look:
 17608 0000292E E8FAE8                  	call	TestNet
 17609 00002931 7308                    	JNC	short LOCAL_SET
 17610                                  
 17611                                  ;IF NOT Installed
 17612                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17613                                  ;ELSE
 17614 00002933 50                      	PUSH	AX
 17615                                  	
 17616                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17617                                  	;INT	2FH
 17618                                  
 17619 00002934 B80E11                  	mov     ax, 110Eh
 17620 00002937 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17621                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17622                                  			; SDA CDS pointer -> current directory
 17623                                  			; STACK: WORD new file attributes
 17624                                  			; Return: CF set on error
 17625                                  
 17626 00002939 5B                      	POP	BX			; clean stack
 17627 0000293A C3                      	retn
 17628                                  ;ENDIF
 17629                                  
 17630                                  LOCAL_SET:
 17631 0000293B E8AFE9                  	call	ECritDisk
 17632 0000293E 50                      	PUSH	AX			; Save new attributes
 17633 0000293F C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17634 00002944 E8EA14                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17635 00002947 7308                    	JNC	short set_check_device
 17636 00002949 5B                      	POP	BX			; Clean stack (don't zap AX)
 17637 0000294A EB83                    	JMP	short NO_PATH
 17638                                  
 17639                                  	; MSDOS 6.0
 17640                                  cannot_set_root:			; M025:
 17641 0000294C B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17642                                  	;stc				; M025: to set attr. of root
 17643                                  	;jmp	short OK_BYE		; M025:
 17644                                  	; 01/02/2024
 17645 0000294F EB87                    	jmp	short BadRet
 17646                                  
 17647                                  set_check_device:
 17648 00002951 08E4                    	OR	AH,AH
 17649 00002953 7906                    	JNS	short set_check_share
 17650 00002955 58                      	POP	AX
 17651 00002956 E8AFE9                  	call	LCritDisk
 17652 00002959 EBBF                    	JMP	short _BAD_ACC 		; device
 17653                                  
 17654                                  set_check_share:
 17655 0000295B 58                      	POP	AX			; Get new attributes
 17656                                  
 17657                                  	; MSDOS 6.0
 17658 0000295C 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17659 00002961 74E9                    	je	short cannot_set_root	; M025: Y: return error
 17660                                  
 17661                                  	; MSDOS 3.3 & MSDOS 6.0
 17662 00002963 E882FC                  	call	REN_DEL_Check
 17663 00002966 7305                    	JNC	short set_do
 17664 00002968 B82000                  	MOV	AX,error_sharing_violation ; 32
 17665 0000296B EB34                    	jmp	short OK_BYE
 17666                                  
 17667                                  set_do:
 17668                                  	; MSDOS 3.3 & MSDOS 6.0
 17669 0000296D C43E[E205]              	LES	DI,[CURBUF]
 17670 00002971 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17671 00002976 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17672                                  
 17673                                  	; MSDOS 6.0
 17674 0000297A 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17675                                  					;LB. if already dirty		  ;AN000;
 17676 0000297F 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17677 00002981 E8AA30                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17678                                  	
 17679 00002984 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17680                                  yesdirty3:
 17681 00002989 A0[7605]                	MOV	AL,[THISDRV]
 17682                                  ;;;; 10/1/86 F.C update fastopen cache
 17683 0000298C 52                      	PUSH	DX
 17684 0000298D 57                      	PUSH	DI
 17685 0000298E B400                    	MOV	AH,0		  ; dir entry update
 17686 00002990 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17687 00002992 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17688 00002994 E8E6FC                  	call	FastOpen_Update
 17689 00002997 5F                      	POP	DI
 17690 00002998 5A                      	POP	DX
 17691                                  ;;;; 9/11/86 F.C update fastopen cache
 17692 00002999 E8902F                  	call	FLUSHBUF
 17693 0000299C 7303                    	JNC	short OK_BYE
 17694 0000299E B80200                  	MOV	AX,error_file_not_found
 17695                                  OK_BYE:
 17696                                  	;call	LCritDisk
 17697                                  	;retn
 17698                                  	; 16/12/2022
 17699 000029A1 E964E9                  	jmp	LCritDisk
 17700                                  
 17701                                  	; 17/05/2019 - Retro DOS v4.0
 17702                                  
 17703                                  	; MSDOS 6.0
 17704                                  GET_FAST_PATH:
 17705                                  ;hkn; use SS override for FastOpenFlg
 17706 000029A4 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17707                                  					;FO. trigger fastopen	;AN000;
 17708 000029AA E88414                  	call	GETPATH
 17709 000029AD 9C                      	PUSHF			 	;FO.			;AN000;
 17710 000029AE 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17711                                  					;FO. clear all fastopen flags ;AN000;
 17712 000029B4 9D                      	POPF				;FO.			;AN000;
 17713 000029B5 C3                      	retn
 17714                                  
 17715                                  ;============================================================================
 17716                                  ; DUP.ASM, MSDOS 6.0, 1991
 17717                                  ;============================================================================
 17718                                  ; 08/08/2018 - Retro DOS v3.0
 17719                                  ; 17/05/2019 - Retro DOS v4.0
 17720                                  
 17721                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17722                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17723                                  ;
 17724                                  ;	DOS_DUP
 17725                                  ;
 17726                                  ;	Modification history:
 17727                                  ;
 17728                                  ;	  Created: ARR 30 March 1983
 17729                                  
 17730                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17731                                  ;---------------------------------------------------------------------------
 17732                                  ; Procedure Name : DOS_DUP
 17733                                  ;
 17734                                  ; Inputs:
 17735                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17736                                  ;		(a non net SFT is OK, in this case the ref
 17737                                  ;		 count is simply incremented)
 17738                                  ; Function:
 17739                                  ;	Signal to the devices that a logical open is occurring
 17740                                  ; Returns:
 17741                                  ;	ES:DI point to SFT
 17742                                  ;    Carry clear
 17743                                  ;	SFT ref_count is incremented
 17744                                  ; Registers modified: None.
 17745                                  ; NOTE:
 17746                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17747                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17748                                  ;	that time.
 17749                                  ;---------------------------------------------------------------------------
 17750                                  
 17751                                  DOS_DUP:
 17752                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17753                                  
 17754                                  	; MSDOS 6.0
 17755 000029B6 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17756 000029BB 26C43E[9E05]            	les	di,[es:THISSFT]
 17757                                  
 17758                                  	;Entry	Dos_Dup_Direct
 17759                                  DOS_Dup_Direct:
 17760 000029C0 E881E8                  	call	IsSFTNet
 17761 000029C3 7503                    	JNZ	short DO_INC
 17762 000029C5 E81B1B                  	call	DEV_OPEN_SFT
 17763                                  DO_INC:
 17764                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17765 000029C8 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17766                                  					;   we're in big trouble anyway)
 17767 000029CB C3                      	retn
 17768                                  
 17769                                  ;============================================================================
 17770                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17771                                  ;============================================================================
 17772                                  ; 08/08/2018 - Retro DOS v3.0
 17773                                  ; 18/05/2019 - Retro DOS v4.0
 17774                                  
 17775                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17776                                  ;NAME	DOS_CREATE
 17777                                  ;----------------------------------------------------------------------------
 17778                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17779                                  ;
 17780                                  ;	DOS_CREATE
 17781                                  ;	DOS_CREATE_NEW
 17782                                  ;	SET_MKND_ERR
 17783                                  ;	SET_Media_ID
 17784                                  ;	SET_EXT_Mode
 17785                                  ;
 17786                                  ;	Revision history:
 17787                                  ;
 17788                                  ;	    A000 version 4.00	  Jan. 1988
 17789                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17790                                  
 17791                                  ;Installed = TRUE
 17792                                  
 17793                                  ;	i_need	THISSFT,DWORD
 17794                                  ;	i_need	THISCDS,DWORD
 17795                                  ;	I_need	EXTERR,WORD
 17796                                  ;	I_Need	ExtErr_locus,BYTE
 17797                                  ;	I_need	JShare,DWORD
 17798                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17799                                  ;	I_need	SATTRIB,BYTE
 17800                                  ;	I_need	CALLVIDM,DWORD
 17801                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17802                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17803                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17804                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17805                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17806                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17807                                  
 17808                                  ;***	DOS_CREATE - Create a File
 17809                                  ;----------------------------------------------------------------------------
 17810                                  ;	DOS_Create is called to create the specified file, truncating
 17811                                  ;	the old one if it exists.
 17812                                  ;
 17813                                  ;	ENTRY	AX is Attribute to create
 17814                                  ;		(ds) = DOSDATA
 17815                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17816                                  ;			terminated)
 17817                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17818                                  ;			( = -1 if current dir not involved, else
 17819                                  ;			 Points to first char after last "/" of current dir part)
 17820                                  ;		[THISCDS] Points to CDS being used
 17821                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17822                                  ;		[THISSFT] Points to SFT to fill in if file created
 17823                                  ;			(sf_mode field set so that FCB may be detected)
 17824                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17825                                  ;
 17826                                  ;	EXIT	sf_ref_count is NOT altered
 17827                                  ;		CARRY CLEAR
 17828                                  ;		    THISSFT filled in.
 17829                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17830                                  ;		CARRY SET
 17831                                  ;		    AX is error code
 17832                                  ;			error_path_not_found
 17833                                  ;				Bad path (not in curr dir part if present)
 17834                                  ;			error_bad_curr_dir
 17835                                  ;				Bad path in current directory part of path
 17836                                  ;			error_access_denied
 17837                                  ;				Attempt to re-create read only file , or
 17838                                  ;				create a second volume id or create a dir
 17839                                  ;			error_sharing_violation
 17840                                  ;				The sharing mode was correct but not allowed
 17841                                  ;				generates an INT 24
 17842                                  ;	USES	all but DS
 17843                                  ;----------------------------------------------------------------------------
 17844                                  
 17845                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17846                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17847                                  
 17848                                  DOS_CREATE:
 17849                                  	; 18/05/2019 - Retro DOS v4.0
 17850                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17851                                  
 17852                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17853                                  ;hkn; this point.
 17854                                  
 17855 000029CC 30E4                    	XOR	AH,AH		; Truncate is OK
 17856                                  
 17857                                  ;	Enter here from Dos_Create_New
 17858                                  ;
 17859                                  ;	(ah) = 0 iff truncate OK
 17860                                  
 17861                                  Create_inter:
 17862 000029CE A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17863                                  				; Mask out any meaningless bits
 17864 000029D0 7511                    	JNZ	short AttErr
 17865 000029D2 A808                    	TEST	AL,attr_volume_id
 17866 000029D4 7407                    	JZ	short NoReset
 17867                                  	
 17868                                  	; MSDOS 6.0
 17869                                  	; 16/12/2022
 17870 000029D6 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17871                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17872                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17873                                  	
 17874 000029DB B008                    	MOV	AL,attr_volume_id ; 8
 17875                                  NoReset:
 17876 000029DD 0C20                    	OR	AL,attr_archive ; File changed  ; 20h
 17877 000029DF A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17878 000029E1 740A                    	JZ	short ATT_OK
 17879                                  AttErr:
 17880 000029E3 B80500                  	MOV	AX,5		; Attribute problem
 17881 000029E6 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17882 000029EB EB62                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17883                                  				   ;	attr_device to be set.
 17884                                  ATT_OK:
 17885 000029ED C43E[9E05]              	LES	DI,[THISSFT]
 17886 000029F1 06                      	PUSH	ES
 17887 000029F2 C436[A205]              	LES	SI,[THISCDS]
 17888 000029F6 83FEFF                  	CMP	SI,-1
 17889 000029F9 751B                    	JNE	short TEST_RE_NET
 17890                                  
 17891                                  ;	No CDS, it must be redirected.
 17892                                  
 17893 000029FB 07                      	POP	ES
 17894                                  
 17895                                  	; MSDOS 6.0
 17896                                  ;Extended open hooks
 17897                                  	;test	byte [EXTOPEN_ON],1
 17898 000029FC F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17899 00002A01 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17900                                  IFS_extopen:				    ;AN000;EO.
 17901 00002A03 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17902                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17903 00002A04 B82E11                  	mov	ax,112Eh
 17904                                  NOEXTOP2:	; 01/02/2024 (PCDOS 7.1 IBMDOS.COM)
 17905 00002A07 CD2F                    	INT	2FH			    ;AN000;EO.
 17906 00002A09 5B                      	POP	BX			    ;AN000;EO. trash bx
 17907 00002A0A C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17908 00002A0F C3                      	retn				    ;AN000;EO.
 17909                                  NOEXTOP:				    ;AN000;
 17910                                  ;Extended open hooks
 17911                                  
 17912                                  ;IF NOT Installed
 17913                                  ;	transfer NET_SEQ_CREATE
 17914                                  ;ELSE
 17915 00002A10 50                      	PUSH	AX
 17916                                  
 17917                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17918                                  	;INT	2FH
 17919                                  
 17920 00002A11 B81811                  	mov	ax,1118h
 17921                                  	; 01/02/2024
 17922                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17923                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17924                                  			; SDA first filename pointer -> fully-qualified name of file
 17925                                  			; STACK: WORD file creation mode???
 17926                                  
 17927                                  	;POP	BX			; BX is trashed anyway
 17928                                  	;retn
 17929 00002A14 EBF1                    	jmp	short NOEXTOP2 ; 01/02/2024
 17930                                  ;ENDIF
 17931                                  
 17932                                  ;	We have a CDS. See if it's network
 17933                                  
 17934                                  TEST_RE_NET:
 17935                                  	;;test	word [es:si+43h],8000h
 17936                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17937                                  	; 07/12/2022
 17938                                  	;test	byte [es:si+44h],80h
 17939                                  	; 17/12/2022
 17940 00002A16 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17941 00002A1B 07                      	POP	ES
 17942 00002A1C 7417                    	JZ	short LOCAL_CREATE
 17943                                  
 17944                                  	; MSDOS 6.0
 17945 00002A1E E8BD00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17946 00002A21 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17947                                  	;;or	word [es:di+2],2
 17948                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17949                                  	; 17/12/2022
 17950 00002A23 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17951                                  
 17952                                  ;Extended open hooks
 17953                                  dochk:
 17954 00002A28 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17955 00002A2D 75D4                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17956                                  ;Extended open hooks
 17957                                  
 17958                                  ;IF NOT Installed
 17959                                  ;	transfer NET_CREATE
 17960                                  ;ELSE
 17961 00002A2F 50                      	PUSH	AX
 17962                                  	
 17963                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17964                                  	;INT	2FH
 17965                                  	
 17966 00002A30 B81711                  	mov	ax,1117h
 17967                                  	
 17968                                  	; 01/02/2024
 17969                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17970                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17971                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17972                                  			; SDA CDS pointer -> current directory
 17973                                  			; Return: CF set on error
 17974                                  
 17975                                  	;POP	BX			; BX is trashed anyway
 17976                                  ;nomore:
 17977                                  	;retn
 17978 00002A33 EBD2                    	jmp	short NOEXTOP2 ; 01/02/2024
 17979                                  ;ENDIF
 17980                                  
 17981                                  ;**	It's a local create. We have a local CDS for it.
 17982                                  
 17983                                  LOCAL_CREATE:
 17984                                  	; MSDOS 6.0
 17985 00002A35 E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17986 00002A38 7205                    	JC	short setdone	;AN000;EO.
 17987                                  	
 17988                                  	; MSDOS 3.3 & MSDOS 6.0
 17989                                  	; 17/12/2022
 17990                                  	;;or	word [es:di+2],2
 17991                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17992                                  	;or	byte [es:di+2],2
 17993 00002A3A 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17994                                  setdone:
 17995 00002A3F E8ABE8                  	call	ECritDisk
 17996 00002A42 E8441E                  	call	MakeNode
 17997 00002A45 7317                    	JNC	short Create_ok
 17998 00002A47 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17999 00002A4C E8B9E8                  	call	LCritDisk
 18000                                  
 18001                                  	;entry	SET_MKND_ERR
 18002                                  SET_MKND_ERR:
 18003                                  
 18004                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 18005                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 18006                                  
 18007                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 18008 00002A4F BB[562A]                	MOV     BX,CRTERRTAB
 18009                                  	;XLAT  ; MSDOS 3.3
 18010                                  	; 18/05/2019 - Retro DOS v4.0
 18011 00002A52 2E                      	CS
 18012 00002A53 D7                      	XLAT
 18013                                  CreatBadRet:
 18014 00002A54 F9                      	STC
 18015 00002A55 C3                      	retn
 18016                                  
 18017                                  ; 13/05/2019 - Retro DOS v4.0
 18018                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 18019                                  ; ---------------------------------------------------------------------------
 18020                                  
 18021                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 18022                                  
 18023                                  ; 17/07/2018 - Retro DOS v3.0
 18024                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 18025                                  
 18026                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 18027                                  ;	db	0,5,52h,50h,3,5,20h
 18028                                  
 18029                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 18030                                  ;	db	0,5,52h,50h,3,5,20h,2
 18031                                  
 18032                                  ; 08/08/2018
 18033                                  
 18034                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 18035 00002A56 00                      	DB	0			; none
 18036 00002A57 05                      	DB	error_access_denied	; MakeNode error 1
 18037 00002A58 52                      	DB	error_cannot_make	; MakeNode error 2
 18038 00002A59 50                      	DB	error_file_exists	; MakeNode error 3
 18039 00002A5A 03                      	DB	error_path_not_found	; MakeNode error 4
 18040 00002A5B 05                      	DB	error_access_denied	; MakeNode error 5
 18041 00002A5C 20                      	DB	error_sharing_violation ; MakeNode error 6
 18042                                  	; MSDOS 6.0
 18043 00002A5D 02                      	DB	error_file_not_found	; MakeNode error 7
 18044                                  
 18045                                  ; ---------------------------------------------------------------------------
 18046                                  
 18047                                  ; We have just created a new file. This results in the truncation of old
 18048                                  ; files. We must inform the sharer to slash all the open SFT's for this
 18049                                  ; file to the current size.
 18050                                  
 18051                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 18052                                  ; drive number to force a Build BPB after Media Check.
 18053                                  
 18054                                  ;;; FASTOPEN 8/29/86
 18055                                  Create_ok:
 18056 00002A5E E8F4FB                  	call	FastOpen_Delete
 18057                                  ;;; FASTOPEN 8/29/86
 18058 00002A61 A0[6D05]                	mov	al,[SATTRIB]
 18059 00002A64 A808                    	test	al,attr_volume_id
 18060 00002A66 741C                    	jz	short NoVolLabel
 18061 00002A68 C43E[A205]              	LES	DI,[THISCDS]
 18062                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 18063 00002A6C 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 18064 00002A6F 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 18065 00002A72 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 18066                                  	
 18067                                  	; 18/05/2019 - Retro DOS v4.0
 18068                                  
 18069                                  	; MSDOS 6.0
 18070 00002A76 B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 18071 00002A78 E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 18072                                  	
 18073 00002A7B E86FE8                  	call	ECritDisk
 18074 00002A7E E8382B                  	call	FATREAD_CDS		; force a media check
 18075 00002A81 E884E8                  	call	LCritDisk
 18076                                  
 18077                                  NoVolLabel:
 18078 00002A84 B80200                  	MOV	ax,2
 18079 00002A87 C43E[9E05]              	LES	DI,[THISSFT]
 18080                                  ;if installed
 18081                                  	;call	JShare + 14 * 4
 18082 00002A8B FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 18083                                  ;else
 18084                                  ;	Call	ShSU
 18085                                  ;endif
 18086 00002A8F E876E8                  	call	LCritDisk
 18087 00002A92 E94901                  	jmp	SET_SFT_MODE
 18088                                  
 18089                                  ;---------------------------------------------------------------------------
 18090                                  ; Procedure Name : Dos_Create_New
 18091                                  ;
 18092                                  ; Inputs:
 18093                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18094                                  ;		terminated)
 18095                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18096                                  ;		( = -1 if current dir not involved, else
 18097                                  ;		 Points to first char after last "/" of current dir part)
 18098                                  ;	[THISCDS] Points to CDS being used
 18099                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18100                                  ;	[THISSFT] Points to SFT to fill in if file created
 18101                                  ;		(sf_mode field set so that FCB may be detected)
 18102                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18103                                  ;	AX is Attribute to create
 18104                                  ; Function:
 18105                                  ;	Try to create the specified file truncating an old one that exists
 18106                                  ; Outputs:
 18107                                  ;	sf_ref_count is NOT altered
 18108                                  ;	CARRY CLEAR
 18109                                  ;	    THISSFT filled in.
 18110                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 18111                                  ;	CARRY SET
 18112                                  ;	    AX is error code
 18113                                  ;		error_path_not_found
 18114                                  ;			Bad path (not in curr dir part if present)
 18115                                  ;		error_bad_curr_dir
 18116                                  ;			Bad path in current directory part of path
 18117                                  ;		error_access_denied
 18118                                  ;			Create a second volume id or create a dir
 18119                                  ;		error_file_exists
 18120                                  ;			Already a file by this name
 18121                                  ; DS preserved, others destroyed
 18122                                  ;---------------------------------------------------------------------------
 18123                                  
 18124                                  DOS_Create_New:
 18125 00002A95 B401                    	MOV	AH,1		; Truncate is NOT OK
 18126 00002A97 E934FF                  	JMP	Create_inter
 18127                                  
 18128                                  ; MSDOS 6.0
 18129                                  ;---------------------------------------------------------------------------
 18130                                  ; Procedure Name : Set_Media_ID
 18131                                  ;
 18132                                  ; Inputs:
 18133                                  ;	NAME1= Volume ID
 18134                                  ;	BH= 0, delete volume id
 18135                                  ;	    1, set new volume id
 18136                                  ;	DS= DOSGROUP
 18137                                  ; Function:
 18138                                  ;	Set Volume ID to DOS 4.00 Boot record.
 18139                                  ; Outputs:
 18140                                  ;	CARRY CLEAR
 18141                                  ;	    volume id set
 18142                                  ;	CARRY SET
 18143                                  ;	    AX is error code
 18144                                  ;---------------------------------------------------------------------------
 18145                                  
 18146                                  	; 18/05/2019 - Retro DOS v4.0
 18147                                  Set_Media_ID:
 18148 00002A9A 50                      	PUSH	AX		;AN000;;>32mb
 18149 00002A9B 06                      	PUSH	ES		;AN000;;>32mb
 18150 00002A9C 57                      	PUSH	DI		;AN000;;>32mb
 18151                                  
 18152 00002A9D FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 18153 00002A9F 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 18154 00002AA1 B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 18155 00002AA3 B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 18156                                  
 18157                                  ;hkn; PACKET_TEMP is in DOSDATA
 18158 00002AA6 BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 18159                                  
 18160 00002AA9 53                      	PUSH	BX		;AN000;;>32mb
 18161 00002AAA 52                      	PUSH	DX		;AN000;;>32mb
 18162 00002AAB 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18163                                  
 18164                                  	;invoke	$IOCTL		;AN000;;>32mb
 18165 00002AAD E86BF7                  	call	_$IOCTL	
 18166                                  
 18167 00002AB0 5A                      	POP	DX		;AN000;;>32mb
 18168 00002AB1 5B                      	POP	BX		;AN000;;>32mb
 18169 00002AB2 7224                    	JC	short geterr	;AN000;;>32mb
 18170                                  
 18171 00002AB4 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 18172 00002AB6 7405                    	JZ	short NoName	;AN000;>32mb yes
 18173                                  
 18174                                  ;hkn; NAME1 is in DOSDATA
 18175 00002AB8 BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 18176                                  
 18177 00002ABB EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 18178                                  NoName: 			;AN000;
 18179                                  
 18180                                  ;hkn; NO_NAME_ID is in DOSDATA
 18181 00002ABD BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 18182                                  
 18183                                  doset:				;AN000;
 18184 00002AC0 89D7                    	MOV	DI,DX		;AN000;;>32mb
 18185                                  	;add	di,6
 18186 00002AC2 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 18187                                  
 18188                                  ;hkn; ES & DS must point to SS
 18189                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 18190 00002AC5 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 18191                                  
 18192 00002AC6 1F                      	POP	DS		;AN000;;>32mb
 18193                                  
 18194                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 18195 00002AC7 16                      	PUSH	SS		;AN000;;>32mb
 18196                                  
 18197 00002AC8 07                      	POP	ES		;AN000;;>32mb
 18198 00002AC9 B90B00                  	MOV	CX,11		;AN000;;>32mb
 18199 00002ACC F3A4                    	REP	MOVSB		;AN000;;>32mb
 18200 00002ACE B94608                  	MOV	CX,0846H	;AN001;;>32mb
 18201 00002AD1 B00D                    	MOV	AL,0DH		;AN000;;>32mb
 18202 00002AD3 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18203                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 18204 00002AD5 E843F7                  	call	_$IOCTL	
 18205                                  geterr: 			;AN000;
 18206                                  ;hkn;	PUSH	CS		;AN000;>32mb
 18207 00002AD8 16                      	PUSH	SS		;AN000;>32mb
 18208                                  
 18209 00002AD9 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 18210                                  
 18211 00002ADA 5F                      	POP	DI		;AN000;;>32mb
 18212 00002ADB 07                      	POP	ES		;AN000;;>32mb
 18213 00002ADC 58                      	POP	AX		;AN000;;>32mb
 18214 00002ADD C3                      	retn			;AN000;>32mb
 18215                                  
 18216                                  ; MSDOS 6.0
 18217                                  ;---------------------------------------------------------------------------
 18218                                  ; Procedure Name : Set_EXT_mode
 18219                                  ;
 18220                                  ; Inputs:
 18221                                  ;	[EXTOPEN_ON]= flag for extended open
 18222                                  ;	SAVE_BX= mode specified in Extended Open
 18223                                  ; Function:
 18224                                  ;	Set mode in ThisSFT
 18225                                  ; Outputs:
 18226                                  ;	carry set,mode is set if from Extended Open
 18227                                  ;	carry clear, mode not set yet
 18228                                  ;---------------------------------------------------------------------------
 18229                                  
 18230                                  ; 13/05/2019 - Retro DOS v4.0
 18231                                  
 18232                                  Set_EXT_mode:
 18233                                  
 18234                                  ;hkn; SS override
 18235 00002ADE 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 18236 00002AE4 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 18237 00002AE6 50                      	PUSH	AX			    ;AN000;EO.
 18238                                  
 18239                                  ;hkn; SS override
 18240 00002AE7 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 18241                                  	;or	[es:di+2],ax
 18242 00002AEB 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 18243 00002AEF 58                      	POP	AX			    ;AN000;EO.
 18244 00002AF0 F9                      	STC				    ;AN000;EO.
 18245                                  NOTEX:					    ;AN000;
 18246 00002AF1 C3                      	retn				    ;AN000;EO.
 18247                                  
 18248                                  ;============================================================================
 18249                                  ; OPEN.ASM, MSDOS 6.0, 1991
 18250                                  ;============================================================================
 18251                                  ; 08/08/2018 - Retro DOS v3.0
 18252                                  ; 18/05/2019 - Retro DOS v4.0
 18253                                  
 18254                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 18255                                  ;	NAME	DOS_OPEN
 18256                                  
 18257                                  ;**	OPEN.ASM - File Open
 18258                                  ;----------------------------------------------------------------------------
 18259                                  ;	Low level routines for openning a file from a file spec.
 18260                                  ;	Also misc routines for sharing errors
 18261                                  ;
 18262                                  ;	DOS_Open
 18263                                  ;	Check_Access_AX
 18264                                  ;	SHARE_ERROR
 18265                                  ;	SET_SFT_MODE
 18266                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 18267                                  ;
 18268                                  ;	Revision history:
 18269                                  ;
 18270                                  ;	    Created: ARR 30 March 1983
 18271                                  ;	    A000	version 4.00   Jan. 1988
 18272                                  ;
 18273                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 18274                                  ; 	       remote extended opens and not save_cx.
 18275                                  ;
 18276                                  ;	M035 - if open made from exec then we must set the appropriate bits
 18277                                  ;	       on the stack before calling off to the redir.
 18278                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 18279                                  ;	       to handle open from exec. In this case set the appropriate bit
 18280                                  ;	       else do not.
 18281                                  ;----------------------------------------------------------------------------	
 18282                                  
 18283                                  ;Installed = TRUE
 18284                                  
 18285                                  ;	i_need	NoSetDir,BYTE
 18286                                  ;	i_need	THISSFT,DWORD
 18287                                  ;	i_need	THISCDS,DWORD
 18288                                  ;	i_need	CURBUF,DWORD
 18289                                  ;	i_need	CurrentPDB,WORD
 18290                                  ;	i_need	CURR_DIR_END,WORD
 18291                                  ;	I_need	RetryCount,WORD
 18292                                  ;	I_need	Open_Access,BYTE
 18293                                  ;	I_need	fSharing,BYTE
 18294                                  ;	i_need	JShare,DWORD
 18295                                  ;	I_need	FastOpenFlg,byte
 18296                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 18297                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 18298                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 18299                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 18300                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 18301                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 18302                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 18303                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 18304                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 18305                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 18306                                  ;	I_need	SAVE_BX,WORD			  ;M034
 18307                                  ;
 18308                                  ;	I_need	DOS_FLAG,BYTE
 18309                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 18310                                  
 18311                                  ;Break	<DOS_Open - internal file access>
 18312                                  ;---------------------------------------------------------------------------
 18313                                  ; Procedure Name : DOS_Open
 18314                                  ;
 18315                                  ; Inputs:
 18316                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18317                                  ;		terminated)
 18318                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18319                                  ;		( = -1 if current dir not involved, else
 18320                                  ;		 Points to first char after last "/" of current dir part)
 18321                                  ;	[THISCDS] Points to CDS being used
 18322                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18323                                  ;	[THISSFT] Points to SFT to fill in if file found
 18324                                  ;		(sf_mode field set so that FCB may be detected)
 18325                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18326                                  ;	AX is Access and Sharing mode
 18327                                  ;	  High NIBBLE of AL (Sharing Mode)
 18328                                  ;		sharing_compat	   file is opened in compatibility mode
 18329                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18330                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18331                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18332                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18333                                  ;	  Low NIBBLE of AL (Access Mode)
 18334                                  ;		open_for_read	file is opened for reading
 18335                                  ;		open_for_write	file is opened for writing
 18336                                  ;		open_for_both	file is opened for both reading and writing.
 18337                                  ;
 18338                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 18339                                  ;		(not checked)
 18340                                  ; Function:
 18341                                  ;	Try to open the specified file
 18342                                  ; Outputs:
 18343                                  ;	sf_ref_count is NOT altered
 18344                                  ;	CARRY CLEAR
 18345                                  ;	    THISSFT filled in.
 18346                                  ;	CARRY SET
 18347                                  ;	    AX is error code
 18348                                  ;		error_file_not_found
 18349                                  ;			Last element of path not found
 18350                                  ;		error_path_not_found
 18351                                  ;			Bad path (not in curr dir part if present)
 18352                                  ;		error_bad_curr_dir
 18353                                  ;			Bad path in current directory part of path
 18354                                  ;		error_invalid_access
 18355                                  ;			Bad sharing mode or bad access mode or bad combination
 18356                                  ;		error_access_denied
 18357                                  ;			Attempt to open read only file for writting, or
 18358                                  ;			open a directory
 18359                                  ;		error_sharing_violation
 18360                                  ;			The sharing mode was correct but not allowed
 18361                                  ;			generates an INT 24 on compatibility mode SFTs
 18362                                  ; DS preserved, others destroyed
 18363                                  ;----------------------------------------------------------------------------
 18364                                  
 18365                                  ; 18/05/2019 - Retro DOS v4.0
 18366                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 18367                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18368                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 18369                                  
 18370                                  DOS_OPEN:
 18371                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 18372                                  
 18373 00002AF2 C606[4C03]00            	MOV	byte [NoSetDir],0
 18374 00002AF7 E83301                  	CALL	Check_Access_AX
 18375 00002AFA 722B                    	JC	short do_ret_label	    ; retc
 18376                                  
 18377 00002AFC C43E[9E05]              	LES	DI,[THISSFT]
 18378 00002B00 30E4                    	XOR	AH,AH
 18379                                  
 18380                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 18381                                  
 18382 00002B02 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 18383 00002B06 06                      	PUSH	ES
 18384 00002B07 C436[A205]              	LES	SI,[THISCDS]
 18385                                  	; 18/08/2018
 18386 00002B0B 83FEFF                  	CMP	SI,-1
 18387 00002B0E 7530                    	JNZ	short TEST_RE_NET1
 18388 00002B10 07                      	POP	ES
 18389                                  
 18390                                  	; MSDOS 6.0
 18391                                  ;Extended open hooks
 18392 00002B11 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 18393 00002B16 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 18394                                  _IFS_extopen:									;AN000;
 18395 00002B18 A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 18396                                  					    ; with which call was made. This
 18397                                  					    ; has the open access bits. 
 18398                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 18399                                  	
 18400 00002B1B 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 18401                                  	;mov	ax,112Eh
 18402                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 18403 00002B1C B82E11                  	mov	ax,(MultNET*256)+46 
 18404 00002B1F CD2F                    	INT	2FH			    ;FT.				;AN000;
 18405 00002B21 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 18406 00002B22 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 18407                                  
 18408                                  do_ret_label:
 18409 00002B27 C3                      	retn				    ;FT.				;AN000;
 18410                                  _NOEXTOP:
 18411                                  ;Extended open hooks
 18412                                  	;
 18413                                  ;IF NOT Installed
 18414                                  	;transfer NET_SEQ_OPEN
 18415                                  ;ELSE
 18416                                  	
 18417                                  do_net_int2f:
 18418 00002B28 F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 18419 00002B2D 7409                    	jz	short not_exec_open	; N: just do net open
 18420                                  					; Y: check to see if redir is aware
 18421                                  					;    of this 
 18422                                  	
 18423                                  					; M042 - start
 18424                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 18425 00002B2F F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 18426                                  					; Q: does this redir know how to 
 18427                                  					;    this
 18428 00002B34 7402                    	jz	short not_exec_open	; N: just do net open
 18429                                  					; Y: set bit 3 of access byte and 
 18430                                  					;    set sharing mode to DENY_WRITE
 18431                                  					; M042 - end
 18432                                  	
 18433                                  	; NOTE: This specific mode has not been set for the code assembled
 18434                                  	; under the "NOT Installed" conditional. Currently Installed is 
 18435                                  	; always one.
 18436                                  					; M035 - set the bits on the stack
 18437                                  	;mov	al,23h
 18438 00002B36 B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 18439                                  	
 18440                                  not_exec_open:
 18441                                  	; MSDOS 3.3 & MSDOS 6.0
 18442 00002B38 50                      	PUSH	AX
 18443                                  
 18444                                  	;MOV	AX,(MultNET SHL 8) OR 22
 18445                                  	;INT	2FH
 18446                                  
 18447 00002B39 B81611                  	mov     ax,1116h
 18448 00002B3C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 18449                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 18450                                  			; SDA first filename pointer -> fully-qualified name of file to open
 18451                                  			; STACK: WORD file open mode
 18452                                  			; Return: CF set on error
 18453                                  
 18454 00002B3E 5B                      	POP	BX			; clean stack
 18455                                  ;do_ret_label: ; 09/08/2018
 18456 00002B3F C3                      	retn
 18457                                  ;ENDIF
 18458                                  
 18459                                  TEST_RE_NET1:
 18460                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 18461                                  	; 17/12/2022
 18462 00002B40 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 18463 00002B45 07                      	POP	ES
 18464                                  	; 18/05/2019
 18465 00002B46 7409                    	JZ	short LOCAL_OPEN
 18466                                  
 18467                                  ;Extended open hooks
 18468                                  	; MSDOS 6.0
 18469 00002B48 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 18470 00002B4D 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 18471                                  ;Extended open hooks
 18472                                  
 18473                                  ;IF NOT Installed
 18474                                  ;	transfer NET_OPEN
 18475                                  ;ELSE
 18476 00002B4F EBD7                    	jmp	short do_net_int2f
 18477                                  ;ENDIF
 18478                                  
 18479                                  LOCAL_OPEN:
 18480                                  	; MSDOS 3.3 & MSDOS 6.0
 18481 00002B51 E899E7                  	call	ECritDisk
 18482                                  
 18483                                  ; DOS 3.3 FastOPen 6/16/86
 18484                                  
 18485                                  	;or	byte [FastOpenFlg],5
 18486 00002B54 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 18487                                  
 18488 00002B59 E8D512                  	call	GETPATH
 18489                                  
 18490                                  ; DOS 3.3 FastOPen 6/16/86
 18491                                  
 18492 00002B5C 731D                    	JNC	short Open_found
 18493 00002B5E 7511                    	JNZ	short bad_path2
 18494 00002B60 08C9                    	OR	CL,CL
 18495 00002B62 740D                    	JZ	short bad_path2
 18496                                  OpenFNF:
 18497 00002B64 B80200                  	MOV	AX,error_file_not_found	; 2
 18498                                  OpenBadRet:
 18499                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 18500                                  	; 12/08/2018
 18501                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 18502                                  	; MSDOS 6.0
 18503 00002B67 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 18504 00002B6D F9                      	STC
 18505                                  	;call	LCritDisk
 18506                                  	; 16/12/2022
 18507 00002B6E E997E7                  	jmp	LCritDisk
 18508                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 18509                                  	;retn 	; 08/09/2018
 18510                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18511                                  	;jmp	Clear_FastOpen
 18512                                  
 18513                                  bad_path2:
 18514 00002B71 B80300                  	MOV	AX,error_path_not_found	; 3
 18515 00002B74 EBF1                    	JMP	short OpenBadRet
 18516                                  
 18517                                  Open_Bad_Access:
 18518 00002B76 B80500                  	MOV	AX,error_access_denied	; 5
 18519 00002B79 EBEC                    	JMP	short OpenBadRet
 18520                                  
 18521                                  Open_found:
 18522 00002B7B 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 18523 00002B7D 08E4                    	OR	AH,AH
 18524 00002B7F 783E                    	JS	short open_ok		; Devices don't have attributes
 18525 00002B81 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 18526                                  	;mov	al,[es:bx+0Bh]
 18527 00002B85 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 18528 00002B89 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18529 00002B8B 75E9                    	JNZ	short Open_Bad_Access
 18530 00002B8D A801                    	TEST	AL,attr_read_only	; check write on read only
 18531 00002B8F 742E                    	JZ	short open_ok
 18532                                  
 18533                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18534                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18535                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18536                                  ; processing until the actual write operation:
 18537                                  ;
 18538                                  ; If FCB, then we change the mode to be read_only.
 18539                                  ; If net_FCB, then we change the mode to be read_only.
 18540                                  ; If not open for read then error.
 18541                                  
 18542 00002B91 1E                      	push	ds
 18543 00002B92 56                      	push	si
 18544 00002B93 C536[9E05]              	LDS	SI,[THISSFT]
 18545                                  	;mov	cx,[si+2]
 18546 00002B97 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18547                                  	; 17/12/2022
 18548                                  	;test	ch,80h
 18549 00002B9A F6C580                  	test	ch,sf_isFCB>>8
 18550                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18551 00002B9D 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18552 00002B9F 88CA                    	MOV	DL,CL
 18553 00002BA1 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18554 00002BA4 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18555 00002BA7 7508                    	JNZ	short NormalOpen	; no
 18556                                  ResetAccess:
 18557                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18558                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18559                                  	; 16/12/2022
 18560 00002BA9 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18561                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18562 00002BAC 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18563 00002BAF EB0C                    	JMP	SHORT FillSFT
 18564                                  
 18565                                  ; The SFT is normal. See if the requested access is open_for_read
 18566                                  
 18567                                  NormalOpen:
 18568 00002BB1 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18569 00002BB4 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18570 00002BB7 7404                    	JZ	short FillSFT
 18571 00002BB9 5E                      	pop	si
 18572 00002BBA 1F                      	pop	ds
 18573 00002BBB EBB9                    	JMP	short Open_Bad_Access
 18574                                  ;
 18575                                  ; All done, restore registers and fill the SFT.
 18576                                  ;
 18577                                  FillSFT:
 18578 00002BBD 5E                      	pop	si
 18579 00002BBE 1F                      	pop	ds
 18580                                  open_ok:
 18581 00002BBF E8821E                  	call	DOOPEN			; Fill in SFT
 18582                                  
 18583                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18584                                  	; 18/05/2019
 18585                                  	;and	byte [ss:FastOpenFlag],80h
 18586 00002BC2 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18587                                  	; 12/08/2018
 18588                                  	;and	byte [FastOpenFlg],Fast_yes	
 18589                                  
 18590                                  	; MSDOS 6.0
 18591 00002BC8 E84300                  	CALL	DO_SHARE_CHECK
 18592 00002BCB 7303                    	JNC	short SHARE_OK
 18593                                  	;call	LCritDisk
 18594                                  	; 16/12/2022
 18595 00002BCD E938E7                  	jmp	LCritDisk
 18596                                  	;;JMP	short Clear_FastOpen
 18597                                  	;retn	; 18/05/2019
 18598                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18599                                  	;jmp	short Clear_FastOpen	
 18600                                  
 18601                                  	; MSDOS 3.3
 18602                                  ;DO_SHARE_CHECK:
 18603                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18604                                  ;OpenShareRetry:
 18605                                  ;	push	cx			; Save number left to do
 18606                                  ;	call	SHARE_CHECK		; Final Check
 18607                                  ;	pop	cx			; CX = # left
 18608                                  ;	JNC	short SHARE_OK		; No problem with access
 18609                                  ;	call	Idle
 18610                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18611                                  ;OpenShareFail:
 18612                                  ;	LES	DI,[THISSFT]
 18613                                  ;	call	SHARE_ERROR
 18614                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18615                                  	
 18616                                  	;12/08/2018
 18617                                  	;mov	byte [ss:FastOpenFlg],0
 18618                                  	;08/09/2018
 18619                                  	;mov	byte [FastOpenFlg],0
 18620                                  	;call	LCritDisk
 18621                                  	;JMP	short Clear_FastOpen
 18622                                  	;retn
 18623                                  
 18624                                  SHARE_OK:
 18625                                  	; MSDOS 3.3 & MSDOS 6.0
 18626 00002BD0 B80300                  	MOV	AX,3
 18627 00002BD3 C43E[9E05]              	LES	DI,[THISSFT]
 18628                                  ;if installed
 18629                                  	;call	JShare + 14 * 4
 18630 00002BD7 FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18631                                  ;else
 18632                                  ;	Call	ShSU
 18633                                  ;endif
 18634 00002BDB E82AE7                  	call	LCritDisk
 18635                                  	
 18636                                  	;FallThru Set_SFT_Mode
 18637                                  
 18638                                  ;----------------------------------------------------------------------------
 18639                                  ; Procedure Name : SET_SFT_MODE
 18640                                  ;
 18641                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18642                                  ;
 18643                                  ;   Inputs:
 18644                                  ;	ThisSFT points to SFT
 18645                                  ;
 18646                                  ;   Outputs:
 18647                                  ;	Carry clear
 18648                                  ;   Registers modified: AX.
 18649                                  ;---------------------------------------------------------------------------
 18650                                  
 18651                                  ;hkn; called from create. DS already set up to DOSDATA.
 18652                                  
 18653                                  SET_SFT_MODE:
 18654 00002BDE C43E[9E05]              	LES	DI,[THISSFT]
 18655 00002BE2 E8FE18                  	call	DEV_OPEN_SFT
 18656                                  	;test	word [es:di+2],8000h
 18657                                  	; 17/12/2022
 18658                                  	;test	byte [es:di+3],80h
 18659 00002BE5 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18660                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18661 00002BEA 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18662 00002BEC A1[3003]                	MOV	AX,[CurrentPDB]
 18663                                  	;mov	[es:di+31h],ax
 18664 00002BEF 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18665                                  
 18666                                  Clear_FastOpen:
 18667 00002BF3 C3                      	retn			       ;;;;; DOS 3.3
 18668                                  
 18669                                  ;----------------------------------------------------------------------------
 18670                                  ; Procedure Name : SHARE_ERROR
 18671                                  ;
 18672                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18673                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18674                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18675                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18676                                  ;---------------------------------------------------------------------------
 18677                                  
 18678                                  SHARE_ERROR:
 18679                                  	; 17/12/2022
 18680                                  	;test	byte [es:di+3],80h
 18681 00002BF4 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18682                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18683 00002BF9 7509                    	JNZ	short _HARD_ERR
 18684 00002BFB 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18685 00002BFF 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18686                                  	;CMP	CL,SHARING_COMPAT ; 0
 18687                                  	;JNE	short _NO_HARD_ERR
 18688                                  	; 21/09/2023
 18689 00002C02 7505                    	jnz	short _NO_HARD_ERR
 18690                                  _HARD_ERR:
 18691 00002C04 E8C845                  	call	SHARE_VIOLATION
 18692                                  	;retnc				; User wants retry
 18693 00002C07 73EA                    	jnc	short Clear_FastOpen
 18694                                  _NO_HARD_ERR:
 18695 00002C09 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18696 00002C0C F9                      	STC
 18697 00002C0D C3                      	retn
 18698                                  
 18699                                  ; MSDOS 6.0
 18700                                  ;----------------------------------------------------------------------------
 18701                                  ; Procedure Name : DO_SHARE_CHECK
 18702                                  ;
 18703                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18704                                  ; Functions: check file sharing mode is valid
 18705                                  ; Output: carry set, error
 18706                                  ;	  carry clear, share ok
 18707                                  ;----------------------------------------------------------------------------
 18708                                  
 18709                                  	; 18/05/2019 - Retro DOS v4.0
 18710                                  DO_SHARE_CHECK:
 18711 00002C0E E8DCE6                  	call	ECritDisk		; enter critical section
 18712                                  OPN_RETRY:
 18713 00002C11 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18714                                  OpenShareRetry:
 18715 00002C15 51                      	push	cx			; Save number left to do
 18716 00002C16 E8B145                  	call	SHARE_CHECK		; Final Check
 18717 00002C19 59                      	pop	cx			; CX = # left
 18718 00002C1A 730E                    	JNC	short Share_Ok2		; No problem with access
 18719 00002C1C E8C7E5                  	call	Idle
 18720 00002C1F E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18721                                  OpenShareFail:
 18722 00002C21 C43E[9E05]              	LES	DI,[THISSFT]
 18723 00002C25 E8CCFF                  	call	SHARE_ERROR
 18724 00002C28 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18725                                  Share_Ok2:
 18726                                  	;call	LCritDisk		; leave critical section
 18727                                  	;retn
 18728                                  	; 18/12/2022
 18729 00002C2A E9DBE6                  	jmp	LCritDisk
 18730                                  
 18731                                  ;-----------------------------------------------------------------------------
 18732                                  ; Procedure Name : Check_Access
 18733                                  ;
 18734                                  ; Inputs:
 18735                                  ;	AX is mode
 18736                                  ;	  High NIBBLE of AL (Sharing Mode)
 18737                                  ;		sharing_compat	   file is opened in compatibility mode
 18738                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18739                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18740                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18741                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18742                                  ;	  Low NIBBLE of AL (Access Mode)
 18743                                  ;		open_for_read	file is opened for reading
 18744                                  ;		open_for_write	file is opened for writing
 18745                                  ;		open_for_both	file is opened for both reading and writing.
 18746                                  ; Function:
 18747                                  ;	Check this access mode for correctness
 18748                                  ; Outputs:
 18749                                  ;	[open_access] = AL input
 18750                                  ;	Carry Clear
 18751                                  ;		Mode is correct
 18752                                  ;		AX unchanged
 18753                                  ;	Carry Set
 18754                                  ;		Mode is bad
 18755                                  ;		AX = error_invalid_access
 18756                                  ; No other registers effected
 18757                                  ;----------------------------------------------------------------------------
 18758                                  
 18759                                  Check_Access_AX:
 18760 00002C2D A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18761 00002C30 53                      	PUSH	BX
 18762                                  
 18763                                  ;	If sharing, then test for special sharing mode for FCBs
 18764                                  
 18765 00002C31 88C3                    	MOV	BL,AL
 18766 00002C33 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18767 00002C36 803E[7205]FF            	CMP	byte [FSHARING],-1
 18768 00002C3B 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18769 00002C3D 80FB70                  	CMP	BL,SHARING_NET_FCB
 18770 00002C40 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18771                                  CheckShareMode:
 18772 00002C42 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18773 00002C45 770D                    	JA	short Make_Bad_Access
 18774                                  CheckAccessMode:
 18775 00002C47 88C3                    	MOV	BL,AL
 18776 00002C49 80E30F                  	AND	BL,access_mask
 18777 00002C4C 80FB02                  	CMP	BL,2
 18778 00002C4F 7703                    	JA	short Make_Bad_Access
 18779 00002C51 5B                      	POP	BX
 18780 00002C52 F8                      	CLC
 18781 00002C53 C3                      	retn
 18782                                  
 18783                                  Make_Bad_Access:
 18784 00002C54 B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18785 00002C57 5B                      	POP	BX
 18786 00002C58 F9                      	STC
 18787 00002C59 C3                      	retn
 18788                                  
 18789                                  ;============================================================================
 18790                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18791                                  ;============================================================================
 18792                                  ; 08/08/2018 - Retro DOS v3.0
 18793                                  ; 18/05/2019 - Retro DOS v4.0
 18794                                  
 18795                                  ;**	Low level routine for returning disk drive information from a local
 18796                                  ;	  or NET device
 18797                                  ;
 18798                                  ;	DISK_INFO
 18799                                  ;
 18800                                  ;	  Modification history:
 18801                                  ;
 18802                                  ;		Created: ARR 30 March 1983
 18803                                  
 18804                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18805                                  ;---------------------------------------------------------------------------
 18806                                  ; Procedure Name : DISK_INFO
 18807                                  ;
 18808                                  ; Inputs:
 18809                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18810                                  ;		(It MAY NOT be NUL, error not detected)
 18811                                  ; Function:
 18812                                  ;	Get Interesting Drive Information
 18813                                  ; Returns:
 18814                                  ;	DX = Number of free allocation units
 18815                                  ;	BX = Total Number of allocation units on disk
 18816                                  ;	CX = Sector size
 18817                                  ;	AL = Sectors per allocation unit
 18818                                  ;	AH = FAT ID BYTE
 18819                                  ;	Carry set if error (currently user FAILed to I 24)
 18820                                  ; Segs except ES preserved, others destroyed
 18821                                  ;----------------------------------------------------------------------------
 18822                                  
 18823                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18824                                  ;hkn; DOSDATA. 
 18825                                  
 18826                                  DISK_INFO:
 18827                                  	; 08/08/2018 - Retro DOS v3.0
 18828                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18829                                  
 18830 00002C5A E8CEE5                  	call	TestNet
 18831 00002C5D 7306                    	JNC	short LOCAL_DSK_INFO
 18832                                  
 18833                                  ;IF NOT Installed
 18834                                  ;	transfer NET_DISK_INFO
 18835                                  ;ELSE
 18836                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18837                                  	;INT	2FH
 18838                                  	;return
 18839                                  
 18840 00002C5F B80C11                  	mov     ax,110Ch
 18841 00002C62 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18842                                  			; ES:DI -> current directory
 18843                                  			; Return: AL = sectors per cluster, BX = total clusters
 18844                                  			; CX = bytes per sector, DX = number of available clusters
 18845 00002C64 C3                      	retn
 18846                                  ;ENDIF
 18847                                  
 18848                                  LOCAL_DSK_INFO:
 18849 00002C65 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18850 00002C6A E880E6                  	call	ECritDisk
 18851 00002C6D E84929                  	call	FATREAD_CDS		; perform media check.
 18852 00002C70 7241                    	JC	short CRIT_LEAVE
 18853 00002C72 BB0200                  	MOV	BX,2
 18854 00002C75 E8AB27                  	call	UNPACK			; Get first FAT sector into CURBUF
 18855 00002C78 7239                    	JC	short CRIT_LEAVE
 18856 00002C7A C536[E205]              	LDS	SI,[CURBUF]
 18857                                  	;mov	ah,[si+20]
 18858 00002C7E 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18859                                  
 18860                                  ;hkn; SS is DOSDATA
 18861 00002C81 16                      	push	ss
 18862 00002C82 1F                      	pop	ds
 18863                                  	;mov	cx,[es:bp+0Dh]
 18864 00002C83 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18865                                  
 18866                                  ; Examine the current free count. If it indicates that we have an invalid
 18867                                  ; count, do the expensive calculation.
 18868                                  
 18869                                  	;mov	dx,[es:bp+1Fh]
 18870 00002C87 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18871 00002C8B 83FAFF                  	CMP	DX,-1			; is it valid?
 18872 00002C8E 7404                    	JZ	short DoScan
 18873                                  
 18874                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18875                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18876                                  ; the count.
 18877                                  
 18878 00002C90 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18879 00002C92 7222                    	JB	short GotVal		; yes, trust it.
 18880                                  DoScan:
 18881 00002C94 31D2                    	XOR	DX,DX
 18882 00002C96 49                      	DEC	CX
 18883                                  SCANFREE:
 18884 00002C97 E88927                  	call	UNPACK
 18885 00002C9A 7217                    	JC	short CRIT_LEAVE
 18886 00002C9C 7501                    	JNZ	short NOTFREECLUS
 18887 00002C9E 42                      	INC	DX			; A free one
 18888                                  NOTFREECLUS:
 18889 00002C9F 43                      	INC	BX			; Next cluster
 18890 00002CA0 E2F5                    	LOOP	SCANFREE
 18891 00002CA2 4B                      	DEC	BX			; BX was next cluster. Convert to
 18892                                  ReturnVals:
 18893 00002CA3 4B                      	DEC	BX			; count
 18894                                  	;mov	al,[es:bp+4]
 18895 00002CA4 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18896 00002CA8 FEC0                    	INC	AL			; Sectors/cluster
 18897                                  	;mov	cx,[es:bp+2]
 18898 00002CAA 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18899                                  	;mov	[es:bp+1Fh],dx
 18900 00002CAE 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18901 00002CB2 F8                      	CLC
 18902                                  CRIT_LEAVE:
 18903                                  	;call	LCritDisk
 18904                                  	;retn
 18905                                  	; 17/12/2022
 18906 00002CB3 E952E6                  	jmp	LCritDisk
 18907                                  
 18908                                  ; We have correctly computed everything previously. Load up registers for
 18909                                  ; return.
 18910                                  
 18911                                  GotVal: 
 18912 00002CB6 89CB                    	MOV	BX,CX			; get cluster count
 18913 00002CB8 EBE9                    	JMP	short ReturnVals
 18914                                  
 18915                                  ;============================================================================
 18916                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18917                                  ;============================================================================
 18918                                  ; 22/07/2018 - Retro DOS v3.0
 18919                                  
 18920                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18921                                  ;	NAME	DOS_SEARCH
 18922                                  
 18923                                  ;**	Low level routines for doing local and NET directory searches
 18924                                  ;
 18925                                  ;	DOS_SEARCH_FIRST
 18926                                  ;	DOS_SEARCH_NEXT
 18927                                  ;	RENAME_NEXT
 18928                                  ;
 18929                                  ;	Revision history:
 18930                                  ;
 18931                                  ;	    Created: ARR 30 March 1983
 18932                                  ;	    A000	version 4.00  Jan. 1988
 18933                                  ;	    A001	PTM 3564 -- search for fastopen
 18934                                  
 18935                                  ;Installed = TRUE
 18936                                  
 18937                                  ;--------------------------------------------------------------------------
 18938                                  ;
 18939                                  ; Procedure Name : DOS_SEARCH_FIRST
 18940                                  ;
 18941                                  ; Inputs:
 18942                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18943                                  ;		terminated)
 18944                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18945                                  ;		( = -1 if current dir not involved, else
 18946                                  ;		 Points to first char after last "/" of current dir part)
 18947                                  ;	[THISCDS] Points to CDS being used
 18948                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18949                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18950                                  ;	[DMAADD] Points to 53 byte buffer
 18951                                  ; Function:
 18952                                  ;	Initiate a search for the given file spec
 18953                                  ; Outputs:
 18954                                  ;	CARRY CLEAR
 18955                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18956                                  ;
 18957                                  ;	LOCAL
 18958                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18959                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18960                                  ;	    11 byte search name with Meta chars in it
 18961                                  ;	    Search Attribute Byte, attribute of search
 18962                                  ;	    WORD LastEnt value
 18963                                  ;	    WORD DirStart
 18964                                  ;	    4 byte pad
 18965                                  ;	    32 bytes of the directory entry found
 18966                                  ;	NET
 18967                                  ;	    21 bytes First byte has high bit set
 18968                                  ;	    32 bytes of the directory entry found
 18969                                  ;
 18970                                  ;	CARRY SET
 18971                                  ;	    AX = error code
 18972                                  ;		error_no_more_files
 18973                                  ;			No match for this file
 18974                                  ;		error_path_not_found
 18975                                  ;			Bad path (not in curr dir part if present)
 18976                                  ;		error_bad_curr_dir
 18977                                  ;			Bad path in current directory part of path
 18978                                  ; DS preserved, others destroyed
 18979                                  ;---------------------------------------------------------------------------
 18980                                  
 18981                                  ; 24/01/2024
 18982                                  %if 1
 18983                                  	; 17/05/2019 - Retro DOS v4.0
 18984                                  GET_FAST_SEARCH:
 18985                                  	; 22/07/2018
 18986                                  	; MSDOS 6.0
 18987                                  	; 17/12/2022
 18988 00002CBA 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 18989                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 18990                                  					;FO.trigger fastopen ;AN000;
 18991                                  	;call	DOS_SEARCH_FIRST
 18992                                  	;retn
 18993                                  	; 24/01/2024
 18994                                  	; 17/12/2022
 18995                                  	;jmp	DOS_SEARCH_FIRST
 18996                                  %endif
 18997                                  
 18998                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18999                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 19000                                  
 19001                                  DOS_SEARCH_FIRST:
 19002                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 19003                                  
 19004 00002CC0 C43E[A205]              	LES	DI,[THISCDS]
 19005 00002CC4 83FFFF                  	CMP	DI,-1
 19006 00002CC7 7506                    	JNZ	short TEST_RE_NET2
 19007                                  
 19008                                  ;IF NOT Installed
 19009                                  ;	transfer NET_SEQ_SEARCH_FIRST
 19010                                  ;ELSE
 19011                                  	;mov	ax,1119h
 19012 00002CC9 B81911                  	MOV	AX,(MultNET<<8)|25
 19013 00002CCC CD2F                    	INT	2Fh
 19014 00002CCE C3                      	retn
 19015                                  ;ENDIF
 19016                                  
 19017                                  TEST_RE_NET2:
 19018                                  	;test	word [es:di+43h],8000h
 19019                                  	; 17/12/2022
 19020                                  	;test	byte [es:di+44h],80h
 19021                                  	; 28/12/2022
 19022 00002CCF 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 19023                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 19024 00002CD4 7406                    	JZ	short LOCAL_SEARCH_FIRST
 19025                                  
 19026                                  ;IF NOT Installed
 19027                                  ;	transfer NET_SEARCH_FIRST
 19028                                  ;ELSE
 19029                                  	;mov	ax,111Bh
 19030 00002CD6 B81B11                  	MOV	AX,(MultNET<<8)|27
 19031 00002CD9 CD2F                    	INT	2FH
 19032 00002CDB C3                      	retn
 19033                                  ;ENDIF
 19034                                  	; 18/05/2019 - Retro DOS v4.0
 19035                                  LOCAL_SEARCH_FIRST:
 19036 00002CDC E80EE6                  	call	ECritDisk
 19037                                  	; MSDOS 6.0
 19038                                  	;;test	word [DOS34_FLAG],400h
 19039                                  	; 17/12/2022
 19040                                  	;test	byte [DOS34_FLAG+1],04h
 19041 00002CDF F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 19042                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 19043 00002CE4 7405                    	JZ	short NOFN			;AN000;
 19044                                  	;or	byte [FastOpenFlg],1
 19045 00002CE6 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 19046                                  NOFN:						;AN000;
 19047 00002CEB C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19048                                  
 19049                                  ; 03/02/2024
 19050                                  %if 0
 19051                                  	; MSDOS 6.0
 19052                                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 19053                                  	JNC	short norm_GETPATH	;AN000;;FO. no
 19054                                  %else
 19055                                  	; 03/02/2024
 19056 00002CF0 16                      	push	ss
 19057 00002CF1 1F                      	pop	ds			;AN000;;FO. ds:si -> final path
 19058 00002CF2 8B36[B205]              	mov	si,[WFP_START]		;AN000;;FO.
 19059                                  getnext:				;AN000;
 19060 00002CF6 AC                      	lodsb				;AN000;;FO. get char
 19061 00002CF7 08C0                    	or	al,al			;AN000;;FO. is it null
 19062 00002CF9 7409                    	jz	short NO_Question	;AN000;;FO. yes
 19063 00002CFB 3C3F                    	cmp	al,'?'                  ;AN000;;FO. is '?'
 19064 00002CFD 75F7                    	jne	short getnext 		;AN000;;FO. no
 19065                                  %endif
 19066                                  	;and	byte [FastOpenFlg],80h
 19067 00002CFF 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19068                                  NO_Question:	; 03/02/2024
 19069                                  norm_GETPATH:
 19070 00002D04 E82A11                  	call	GETPATH
 19071                                  	; BX = offset NAME1
 19072                                  ;_getdone:
 19073 00002D07 7318                    	JNC	short find_check_dev
 19074 00002D09 7511                    	JNZ	short bad_path3
 19075 00002D0B 08C9                    	OR	CL,CL
 19076 00002D0D 740D                    	JZ	short bad_path3
 19077                                  find_no_more:
 19078                                  	;mov	ax,12h
 19079 00002D0F B81200                  	MOV	AX,error_no_more_files
 19080                                  BadBye:
 19081                                  	; MSDOS 6.0
 19082 00002D12 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 19083                                  
 19084 00002D18 F9                      	STC
 19085                                  	;call	LCritDisk
 19086                                  	;retn
 19087                                  	; 18/12/2022
 19088 00002D19 E9ECE5                  	jmp	LCritDisk
 19089                                  
 19090                                  bad_path3:
 19091                                  	;mov	ax,3
 19092 00002D1C B80300                  	MOV	AX,error_path_not_found
 19093 00002D1F EBF1                    	JMP	short BadBye
 19094                                  
 19095                                  find_check_dev:
 19096 00002D21 08E4                    	OR	AH,AH
 19097 00002D23 790A                    	JNS	short found_entry
 19098 00002D25 C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 19099 00002D2B FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 19100                                  found_entry:
 19101                                  
 19102                                  ; We set the physical drive byte here Instead of after found_it; Doing
 19103                                  ; a search-next may not have wfp_start set correctly
 19104                                  
 19105 00002D2F C43E[2C03]              	LES	DI,[DMAADD]
 19106 00002D33 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 19107 00002D37 AC                      	LODSB
 19108 00002D38 2C40                    	SUB	AL,'A'-1                ; logical drive
 19109 00002D3A AA                      	STOSB				; High bit not set (local)
 19110                                  found_it:
 19111 00002D3B C43E[2C03]              	LES	DI,[DMAADD]
 19112 00002D3F 47                      	INC	DI
 19113                                  
 19114                                  	; MSDOS 6.0
 19115 00002D40 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 19116                                  	;test	byte [FastOpenFlg],10h
 19117 00002D41 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 19118 00002D46 7408                    	JZ	short notfast			  ;FO.;AN001;
 19119 00002D48 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 19120 00002D4A 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 19121 00002D4E EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 19122                                  
 19123                                  notfast:
 19124 00002D50 BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 19125                                  movmov:
 19126                                  ; Special E5 code
 19127 00002D53 A4                      	MOVSB
 19128 00002D54 26807DFF05              	CMP	BYTE [ES:DI-1],5
 19129 00002D59 7505                    	JNZ	short NOTKANJB
 19130 00002D5B 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 19131                                  NOTKANJB:
 19132                                  	;MOV	CX,10
 19133                                  	;REP	MOVSB
 19134                                  	; 03/02/2024
 19135 00002D60 B90500                  	mov	cx,5
 19136 00002D63 F3A5                    	rep	movsw
 19137                                  
 19138                                  	; 08/09/2018
 19139 00002D65 1F                      	POP	DS			;FO.;AN001; restore ds
 19140                                  
 19141 00002D66 A0[6B05]                	MOV	AL,[ATTRIB]
 19142 00002D69 AA                      	STOSB
 19143 00002D6A 50                      	PUSH	AX			; Save AH device info
 19144 00002D6B A1[4803]                	MOV	AX,[LASTENT]
 19145 00002D6E AB                      	STOSW
 19146 00002D6F A1[C205]                	MOV	AX,[DIRSTART]
 19147 00002D72 AB                      	STOSW
 19148                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 19149 00002D73 83C704                  	ADD	DI,4
 19150 00002D76 58                      	POP	AX			; Recover AH device info
 19151 00002D77 08E4                    	OR	AH,AH
 19152 00002D79 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 19153 00002D7B 833E[E205]FF            	CMP	WORD [CURBUF],-1
 19154 00002D80 7510                    	JNZ	short OKSTORE
 19155                                  
 19156                                  	; MSDOS 6.0
 19157 00002D82 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 19158                                  					;AN000;;FO. from fastopen and is good
 19159 00002D87 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 19160                                  
 19161                                  	; The user has specified the root directory itself, rather than some
 19162                                  	; contents of it. We can't "find" that.
 19163                                  
 19164 00002D89 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 19165                                  					;   stuffing a -1 at Lastent
 19166 00002D8F E97DFF                  	JMP	find_no_more
 19167                                  
 19168                                  OKSTORE:
 19169 00002D92 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19170                                  DOSREL:
 19171                                  	; BX = offset NAME1 (from GETPATH)
 19172 00002D96 89DE                    	MOV	SI,BX			; SI-> start of entry
 19173                                  
 19174                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 19175                                  
 19176                                  	;;mov	cx,32
 19177                                  	;MOV	CX,dir_entry.size
 19178                                  	; 03/02/2024
 19179 00002D98 B91000                  	mov	cx,dir_entry.size>>1
 19180                                  ;;;;; 7/29/86
 19181 00002D9B 89F8                    	MOV	AX,DI			; save the 1st byte addr
 19182                                  	;REP	MOVSB
 19183 00002D9D F3A5                    	rep	movsw
 19184                                  	;
 19185 00002D9F 89C7                    	MOV	DI,AX			; restore 1st byte addr
 19186 00002DA1 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 19187 00002DA5 7504                    	JNZ	short NO05
 19188 00002DA7 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 19189                                  NO05:
 19190                                  
 19191                                  ;;;;; 7/29/86
 19192                                  
 19193                                  ;hkn; FastOpenflg is in DOSDATA use SS
 19194                                  	; 16/12/2022
 19195                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19196                                  	; MSDOS 6.0
 19197                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19198                                  	; 18/05/2019 - Retro DOS v4.0
 19199 00002DAB 16                      	push	ss
 19200 00002DAC 1F                      	pop	ds
 19201                                  	; 16/12/2022
 19202 00002DAD 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 19203                                  
 19204                                  ;hkn; SS is DOSDATA
 19205                                  	;push	ss
 19206                                  	;pop	ds
 19207 00002DB2 F8                      	CLC
 19208                                  	;call	LCritDisk
 19209                                  	;retn
 19210                                  	; 16/12/2022
 19211 00002DB3 E952E5                  	jmp	LCritDisk
 19212                                  
 19213                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 19214                                  ;----------------------------------------------------------------------------
 19215                                  ;
 19216                                  ; Procedure Name : DOS_SEARCH_NEXT
 19217                                  ;
 19218                                  ; Inputs:
 19219                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 19220                                  ;	    (only first 21 bytes must have valid information)
 19221                                  ; Function:
 19222                                  ;	Look for subsequent matches
 19223                                  ; Outputs:
 19224                                  ;	CARRY CLEAR
 19225                                  ;	    The 53 bytes at DMAADD are updated for next call
 19226                                  ;		(see DOS_SEARCH_FIRST)
 19227                                  ;	CARRY SET
 19228                                  ;	    AX = error code
 19229                                  ;		error_no_more_files
 19230                                  ;			No more files to find
 19231                                  ; DS preserved, others destroyed
 19232                                  ;---------------------------------------------------------------------------
 19233                                  
 19234                                  ;hkn; called from search.asm. DS already set up at this point.
 19235                                  
 19236                                  DOS_SEARCH_NEXT:
 19237 00002DB6 C43E[2C03]              	LES	DI,[DMAADD]
 19238 00002DBA 268A05                  	MOV	AL,[ES:DI]
 19239 00002DBD A880                    	TEST	AL,80H			; Test for NET
 19240 00002DBF 7406                    	JZ	short LOCAL_SEARCH_NEXT
 19241                                  ;IF NOT Installed
 19242                                  ;	transfer NET_SEARCH_NEXT
 19243                                  ;ELSE
 19244                                  	;mov	ax,111Ch
 19245 00002DC1 B81C11                  	MOV	AX,(MultNET<<8)|28
 19246 00002DC4 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 19247                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 19248                                  		     ; Return: CF set on error, AX = DOS error code
 19249                                  		     ; CF clear if successful
 19250 00002DC6 C3                      	retn
 19251                                  ;ENDIF
 19252                                  
 19253                                  LOCAL_SEARCH_NEXT:
 19254                                  	;AL is drive A=1
 19255                                  	;mov	byte [EXTERR_LOCUS],2
 19256 00002DC7 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19257 00002DCC E81EE5                  	call	ECritDisk
 19258                                  
 19259                                  ;hkn; DummyCDS is in DOSDATA
 19260 00002DCF C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 19261                                  ;hkn; Segment address is DOSDATA - use ds
 19262                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 19263 00002DD5 8C1E[A405]              	mov	[THISCDS+2],DS
 19264                                  
 19265 00002DD9 0440                    	ADD	AL,'A'-1
 19266 00002DDB E8B53A                  	call	InitCDS
 19267                                  
 19268                                  ;	call	GETTHISDRV		; Set CDS pointer
 19269                                  
 19270 00002DDE 7246                    	JC	short No_files		; Bogus drive letter
 19271 00002DE0 C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 19272                                  	;les	bp,[es:di+45h]
 19273 00002DE4 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 19274 00002DE8 E83DD8                  	call	GOTDPB			; [THISDPB] = ES:BP
 19275                                  
 19276                                  	; 16/12/2022
 19277 00002DEB 268A4600                	mov	al,[ES:BP]
 19278                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19279                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 19280 00002DEF A2[7605]                	mov	[THISDRV],AL
 19281                                  	;mov	word [CREATING],0E500h
 19282 00002DF2 C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 19283 00002DF8 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19284 00002DFD C536[2C03]              	LDS	SI,[DMAADD]
 19285 00002E01 AC                      	LODSB				; Drive Byte
 19286                                  
 19287                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 19288                                  RENAME_NEXT:
 19289                                  	;context ES
 19290 00002E02 16                      	push	ss
 19291 00002E03 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 19292                                  
 19293                                  ;hkn; NAME1 is in DOSDATA
 19294 00002E04 BF[4B05]                	MOV	DI,NAME1
 19295                                  
 19296 00002E07 B90B00                  	MOV	CX,11
 19297 00002E0A F3A4                    	REP	MOVSB			; Search name
 19298 00002E0C AC                      	LODSB				; Attribute
 19299                                  
 19300                                  ;hkn; SS override
 19301 00002E0D 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19302 00002E11 AD                      	LODSW				; LastEnt
 19303 00002E12 09C0                    	OR	AX,AX
 19304                                  	; 03/02/2024
 19305                                  	;JNS	short cont_load
 19306 00002E14 7810                    	js	short No_files
 19307                                  ;No_files:
 19308                                  	;JMP	find_no_more
 19309                                  
 19310                                  cont_load:
 19311 00002E16 50                      	PUSH	AX			; Save LastEnt
 19312 00002E17 AD                      	LODSW				; DirStart
 19313 00002E18 89C3                    	MOV	BX,AX
 19314                                  
 19315                                  ;hkn; SS is DOSDATA
 19316                                  	;context DS
 19317 00002E1A 16                      	push	ss
 19318 00002E1B 1F                      	pop	ds
 19319 00002E1C C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 19320                                  	;invoke	SetDirSrch
 19321 00002E20 E8B10F                  	call	SETDIRSRCH
 19322 00002E23 7304                    	JNC	short SEARCH_GOON
 19323 00002E25 58                      	POP	AX			; Clean stack
 19324                                  	;JMP	short No_files
 19325                                  	; 03/02/2024
 19326                                  No_files:
 19327 00002E26 E9E6FE                  	JMP	find_no_more
 19328                                  
 19329                                  SEARCH_GOON:
 19330 00002E29 E88712                  	call	STARTSRCH
 19331 00002E2C 58                      	POP	AX
 19332 00002E2D E8770F                  	call	GETENT
 19333 00002E30 72F4                    	JC	short No_files
 19334 00002E32 E8AF0E                  	call	NEXTENT
 19335 00002E35 72EF                    	JC	short No_files
 19336 00002E37 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 19337 00002E39 E9FFFE                  	JMP	found_it ; 10/08/2018
 19338                                  
 19339                                  ; MSDOS 6.0
 19340                                  ;---------------------------------------------------------------------------
 19341                                  ;
 19342                                  ; Procedure Name : CHECK_QUESTION
 19343                                  ;
 19344                                  ; Input: [WFP_START]= pointer to final path
 19345                                  ; Function: check '?' char
 19346                                  ; Output: carry clear, if no '?'
 19347                                  ;	 carry set, if '?' exists
 19348                                  ;---------------------------------------------------------------------------
 19349                                  
 19350                                  ; 03/02/2024
 19351                                  %if 0
 19352                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19353                                  CHECK_QUESTION:
 19354                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 19355                                  ;hkn;	PUSH	CS			;AN000;;FO.
 19356                                  	push	ss
 19357                                  	POP	DS			;AN000;;FO. ds:si -> final path
 19358                                  	; 16/12/2022
 19359                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19360                                  	MOV	SI,[WFP_START]		;AN000;;FO.
 19361                                  	;mov	si,[ss:WFP_START]
 19362                                  getnext:				;AN000;
 19363                                  	LODSB				;AN000;;FO. get char
 19364                                  	OR	AL,AL			;AN000;;FO. is it null
 19365                                  	JZ	short NO_Question	;AN000;;FO. yes
 19366                                  	CMP	AL,'?'                  ;AN000;;FO. is '?'
 19367                                  	JNZ	short getnext 		;AN000;;FO. no
 19368                                  	STC				;AN000;;FO.
 19369                                  NO_Question:				;AN000;
 19370                                  	retn				;AN000;;FO.
 19371                                  %endif
 19372                                  
 19373                                  ;============================================================================
 19374                                  ; ABORT.ASM, MSDOS 6.0, 1991
 19375                                  ;============================================================================
 19376                                  ; 23/07/2018 - Retro DOS v3.0
 19377                                  ; 18/05/2019 - Retro DOS v4.0
 19378                                  
 19379                                  ;**
 19380                                  ;
 19381                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 19382                                  ;  If process has NET resources a close all is sent out over the net.
 19383                                  ;
 19384                                  ;   DOS_ABORT
 19385                                  ;
 19386                                  ;   Modification history:
 19387                                  ;
 19388                                  ;       Created: ARR 30 March 1983
 19389                                  ;
 19390                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 19391                                  ;				being terminated only if it is busy.
 19392                                  ;
 19393                                  
 19394                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 19395                                  ;--------------------------------------------------------------------------
 19396                                  ;
 19397                                  ; Procedure Name : DOS_ABORT
 19398                                  ;
 19399                                  ; Inputs:
 19400                                  ;       [CurrentPDB] set to PID of process aborting
 19401                                  ; Function:
 19402                                  ;       Close all files and free all SFTs for this PID
 19403                                  ; Returns:
 19404                                  ;       None
 19405                                  ; All destroyed except stack
 19406                                  ;---------------------------------------------------------------------------
 19407                                  
 19408                                  DOS_ABORT:
 19409 00002E3C 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 19410 00002E41 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 19411                                  reset_free_jfn:
 19412 00002E46 89CB                    	MOV     BX,CX
 19413 00002E48 51                      	PUSH    CX
 19414 00002E49 4B                      	DEC     BX                      ; get jfn (start with last one)
 19415                                  
 19416 00002E4A E88B37                  	CALL	_$CLOSE
 19417 00002E4D 59                      	POP     CX
 19418 00002E4E E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 19419                                  
 19420                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 19421                                  ; are running in the no-sharing no-network environment, we are simulating the
 19422                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 19423                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 19424                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 19425                                  ;
 19426                                  ; If sharing is loaded, then the following call to close process will
 19427                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 19428                                  ;
 19429                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 19430                                  ; known network resources. These resources are then responsible for cleaning
 19431                                  ; up after this process.
 19432                                  ;
 19433                                  ; Sleazy, eh?
 19434                                  
 19435                                  	;context DS			; SS is DOSDATA
 19436 00002E50 16                      	push	ss
 19437 00002E51 1F                      	pop	ds  ; 09/09/2018
 19438                                  
 19439                                  	;CallInstall Net_Abort, MultNET, 29
 19440 00002E52 B81D11                  	mov	ax,111Dh
 19441 00002E55 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 19442                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 19443                                  			; DS???, SS = DOS CS
 19444                                  ;if installed
 19445 00002E57 FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 19446                                  ;else
 19447                                  ;	call 	MFTCloseP
 19448                                  ;endif
 19449                                  
 19450                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 19451                                  ; counts.
 19452                                  					; SS override
 19453 00002E5B 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 19454                                  	;mov	cx,[es:di+4]
 19455 00002E60 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 19456 00002E64 E317                    	jcxz    FCBScanDone
 19457                                  	;lea	di,[di+6]
 19458 00002E66 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 19459 00002E69 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19460                                  FCBTest:
 19461                                  	;cmp	[es:di+31h],ax
 19462 00002E6D 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 19463 00002E71 7505                    	jnz	short FCBNext		; no, skip it
 19464 00002E73 26C7050000              	mov	word [es:di],0
 19465                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 19466                                  FCBNext:
 19467 00002E78 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 19468 00002E7B E2F0                    	loop    FCBTest
 19469                                  FCBScanDone:
 19470                                  
 19471                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 19472                                  
 19473 00002E7D 31DB                    	XOR     BX,BX
 19474                                  Scan:
 19475 00002E7F 53                      	push    bx
 19476 00002E80 E8D136                  	call	SFFromSFN
 19477 00002E83 5B                      	pop     bx
 19478                                  	;jnc	short Scan1
 19479                                  	;retn
 19480                                  
 19481                                  	; 18/12/2022
 19482                                  	;jc	short NO_Question ; retn
 19483                                  	; 03/02/2024
 19484 00002E84 7234                    	jc	short RET2
 19485                                  
 19486                                  ;M038
 19487                                  ; Do what the comment above says, check for busy state
 19488                                  
 19489                                  Scan1:
 19490                                  	;cmp	word [es:di],0
 19491                                  	;jz	short scan_next  ; MSDOS 3.3
 19492                                  	; MSDOS 6.0
 19493 00002E86 26833DFF                	cmp	word [es:di],sf_busy ; -1
 19494                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 19495                                  				; Is Sft busy? ;M038
 19496 00002E8A 7519                    	jnz	short scan_next
 19497                                  ;
 19498                                  ; we have a SFT that is busy. See if it is for the current process
 19499                                  ;
 19500 00002E8C 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19501                                  	;cmp	[es:di+31h],ax
 19502 00002E90 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 19503 00002E94 750F                    	jnz	short scan_next
 19504 00002E96 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 19505                                  	;cmp	[es:di+2Fh],ax
 19506 00002E9A 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 19507 00002E9E 7505                    	jnz	short scan_next
 19508                                  
 19509                                  ; This SFT is labelled as ours.
 19510                                  
 19511 00002EA0 26C7050000              	mov	word [es:di],0
 19512                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 19513                                  scan_next:
 19514 00002EA5 43                      	inc     bx
 19515 00002EA6 EBD7                    	jmp     short Scan
 19516                                  
 19517                                  ;============================================================================
 19518                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 19519                                  ;============================================================================
 19520                                  ; 23/07/2018 - Retro DOS v3.0
 19521                                  ; 18/05/2019 - Retro DOS v4.0
 19522                                  
 19523                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 19524                                  ;
 19525                                  ;	DOS_CLOSE
 19526                                  ;	DOS_COMMIT
 19527                                  ;	FREE_SFT
 19528                                  ;	SetSFTTimes
 19529                                  ;
 19530                                  ;	Revision history:
 19531                                  ;
 19532                                  ;	   AN000  version 4.00	Jan. 1988
 19533                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 19534                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 19535                                  
 19536                                  ;Installed = TRUE
 19537                                  
 19538                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 19539                                  ;---------------------------------------------------------------------------
 19540                                  ;
 19541                                  ; Procedure Name : DOS_CLOSE
 19542                                  ;
 19543                                  ; Inputs:
 19544                                  ;	[THISSFT] set to the SFT for the file being used
 19545                                  ; Function:
 19546                                  ;	Close the indicated file via the SFT
 19547                                  ; Returns:
 19548                                  ;	sf_ref_count decremented otherwise
 19549                                  ;	ES:DI point to SFT
 19550                                  ;	Carry set if error
 19551                                  ;	    AX has error code
 19552                                  ; DS preserved, others destroyed
 19553                                  ;---------------------------------------------------------------------------
 19554                                  
 19555                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS already set up.
 19556                                  
 19557                                  ; 18/05/2019 - Retro DOS v4.0
 19558                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 19559                                  
 19560                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19561                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 19562                                  
 19563                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 19564                                  
 19565                                  DOS_CLOSE:
 19566 00002EA8 C43E[9E05]              	LES	DI,[THISSFT]
 19567                                  	;mov	bx,[ES:DI+5]
 19568 00002EAC 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19569                                  
 19570                                  ; Network closes are handled entirely by the net code.
 19571                                  
 19572                                  	;;test	bx,8000h
 19573                                  	;TEST	BX,sf_isnet
 19574                                  	; 17/12/2022
 19575                                  	;test	bh,80h
 19576 00002EB0 F6C780                  	test	bh,(sf_isnet>>8)
 19577 00002EB3 7406                    	JZ	short LocalClose
 19578                                  
 19579                                  	;CallInstall Net_Close,MultNET,6
 19580 00002EB5 B80611                  	mov     ax,1106h
 19581 00002EB8 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19582                                  			; ES:DI -> SFT
 19583                                  			; SFT DPB field -> DPB of drive containing file
 19584                                  			; Return: CF set on error, AX = DOS error code
 19585                                  			; CF clear if successful
 19586                                  RET2:		; 03/02/2024
 19587 00002EBA C3                      	retn
 19588                                  
 19589                                  ; All closes release the sharing information.
 19590                                  ; No commit releases sharing information
 19591                                  ;
 19592                                  ; All closes decrement the ref count.
 19593                                  ; No commit decrements the ref count.
 19594                                  
 19595                                  LocalClose:
 19596 00002EBB E82FE4                  	call	ECritDisk
 19597 00002EBE E85801                  	CALL	SetSFTTimes
 19598 00002EC1 E8D900                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19599                                  
 19600                                  ;hkn; SS is DOSDATA
 19601                                  	;Context DS
 19602 00002EC4 16                      	push	ss
 19603 00002EC5 1F                      	pop	ds
 19604                                  
 19605 00002EC6 50                      	push	ax
 19606 00002EC7 53                      	push	bx
 19607 00002EC8 E82A43                  	call	ShareEnd
 19608 00002ECB 5B                      	pop	bx
 19609 00002ECC 58                      	pop	ax
 19610                                  
 19611                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19612                                  
 19613                                  CloseEntry:
 19614 00002ECD 50                      	PUSH	AX
 19615                                  
 19616                                  ; File clean or device does not get stamped nor disk looked at.
 19617                                  
 19618                                  	;test	bx,0C0h
 19619                                  	; 17/12/2022
 19620 00002ECE F6C3C0                  	test	bl,devid_file_clean+devid_device
 19621                                  	;TEST	BX,devid_file_clean+devid_device
 19622 00002ED1 7403                    	JZ	short rdir
 19623                                  	; 14/11/2022
 19624 00002ED3 E9B500                  	JMP	FREE_SFT_OK		; either clean or device
 19625                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19626                                  
 19627                                  ; Retrieve the directory entry for the file
 19628                                  
 19629                                  rdir:
 19630 00002ED6 E8D100                  	CALL	DirFromSFT
 19631                                  	;mov	al,5
 19632 00002ED9 B005                    	MOV	AL,error_access_denied
 19633 00002EDB 7303                    	JNC	short clook
 19634                                  	; 14/11/2022
 19635 00002EDD E9AC00                  	JMP	CloseFinish		; pretend the close worked.
 19636                                  	;jc	short CloseFinish ; 24/07/2019
 19637                                  clook:
 19638                                  
 19639                                  ; ES:DI points to entry
 19640                                  ; DS:SI points to SFT
 19641                                  ; ES:BX points to buffer header
 19642                                  
 19643 00002EE0 57                      	push	di
 19644 00002EE1 56                      	push	si
 19645                                  	;lea	si,[si+20h]
 19646 00002EE2 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19647                                  
 19648                                  ; ES:DI point to directory entry
 19649                                  ; DS:SI point to unpacked name
 19650                                  
 19651 00002EE5 E8F7E2                  	call	XCHGP
 19652                                  
 19653                                  ; ES:DI point to unpacked name
 19654                                  ; DS:SI point to directory entry
 19655                                  
 19656 00002EE8 E8570E                  	call	MetaCompare
 19657 00002EEB E8F1E2                  	call	XCHGP
 19658 00002EEE 5E                      	pop	si
 19659 00002EEF 5F                      	pop	di
 19660 00002EF0 740C                    	JZ	short CLOSE_GO		; Name OK
 19661                                  Bye:	
 19662 00002EF2 89F7                    	MOV	DI,SI
 19663 00002EF4 1E                      	PUSH	DS
 19664 00002EF5 07                      	POP	ES			; ES:DI points to SFT
 19665 00002EF6 16                      	PUSH	SS
 19666 00002EF7 1F                      	POP	DS
 19667 00002EF8 F9                      	STC
 19668                                  	;mov	al,2
 19669 00002EF9 B002                    	MOV	AL,error_file_not_found
 19670 00002EFB E98E00                  	JMP	CloseFinish ; 24/07/2019
 19671                                  
 19672                                  	; 18/05/2019 - Retro DOS v4.0
 19673                                  CLOSE_GO:
 19674                                  	; 03/02/2024
 19675                                  	;mov	al,[si+4]
 19676 00002EFE 8A4404                  	mov	al,[si+SF_ENTRY.sf_attr]
 19677                                  	
 19678                                  	; MSDOS 6.0
 19679                                  	;test	word [si+2],8000h
 19680                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19681                                  	; 17/12/2022
 19682                                  	;test	byte [si+3],80h
 19683 00002F01 F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19684 00002F05 740A                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19685                                  	; MSDOS 3.3 & MSDOS 6.0
 19686                                  	;mov	ch,[es:di+0Bh]
 19687 00002F07 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19688                                  
 19689                                  	; 03/02/2024
 19690                                  	;;mov	al,[si+4]
 19691                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr]
 19692                                  
 19693                                  ;hkn; SS override
 19694 00002F0B 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19695                                  	; MSDOS 3.3
 19696                                  	;;call	MatchAttributes
 19697                                  	;;JNZ	short Bye		; attributes do not match
 19698                                  	; 18/05/2019
 19699 00002F0F EB04                    	JMP	SHORT setattr		;FT.
 19700                                  nofcb:
 19701                                  	; 03/02/2024
 19702                                  	; MSDOS 6.0
 19703                                  	;;mov	al,[si+4]
 19704                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19705                                  
 19706 00002F11 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19707                                  setattr:
 19708                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19709                                  	;or	byte [es:di+0Bh],20h
 19710 00002F15 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19711                                  	; MSDOS 6.0
 19712                                  	;mov	ax,[es:di+1Ah]
 19713 00002F1A 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19714                                  					;F.O. save old first cluster
 19715                                  ;hkn; SS override
 19716 00002F1E 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19717                                  
 19718                                  ; 03/02/2024
 19719                                  %if 0
 19720                                  	;mov	ax,[si+0Bh]
 19721                                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19722                                  	;mov	[es:di+1Ah],ax
 19723                                  	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19724                                  	;mov	ax,[si+11h]
 19725                                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19726                                  	;mov	[es:di+1Ch],ax
 19727                                  	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19728                                  	;mov	ax,[si+13h]
 19729                                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19730                                  	;mov	[es:di+1Eh],ax
 19731                                  	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19732                                  	;mov	ax,[si+0Fh]
 19733                                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19734                                  	;mov	[es:di+18h],ax
 19735                                  	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19736                                  	;mov	ax,[si+0Dh]
 19737                                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19738                                  	;mov	[es:di+16h],ax
 19739                                  	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19740                                  %else
 19741                                  	; 03/02/2024 - Retro DOS v4.2
 19742 00002F22 56                      	push	si
 19743 00002F23 83C60B                  	add	si,0Bh
 19744 00002F26 AD                      	lodsw	; [si+SF_ENTRY.sf_firclus]
 19745                                  	;mov	[es:di+1Ah],ax
 19746 00002F27 2689451A                	mov	[es:di+dir_entry.dir_first],ax	; Set first cluster
 19747 00002F2B AD                      	lodsw	; [si+SF_ENTRY.sf_time]
 19748 00002F2C 26894516                	mov	[es:di+dir_entry.dir_time],ax	; Set time
 19749 00002F30 AD                      	lodsw	; [si+SF_ENTRY.sf_date]
 19750 00002F31 26894518                	mov	[es:di+dir_entry.dir_date],ax	; Set date
 19751 00002F35 AD                      	lodsw	; [si+SF_ENTRY.sf_size]
 19752 00002F36 2689451C                	mov	[es:di+dir_entry.dir_size_l],ax	; Set size
 19753 00002F3A AD                      	lodsw	; [si+SF_ENTRY.sf_size+2]
 19754 00002F3B 2689451E                	mov	[es:di+dir_entry.dir_size_h],ax
 19755 00002F3F 5E                      	pop	si
 19756                                  %endif
 19757                                  
 19758                                  	; MSDOS 6.0
 19759                                  ;; File Tagging
 19760 00002F40 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty
 19761                                  				  ;LB. if already dirty		    ;AN000;
 19762 00002F45 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19763                                  	; 02/06/2019
 19764 00002F47 E8E42A                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19765                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19766                                  	;or	byte [es:bx+5],40h
 19767 00002F4A 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19768                                  yesdirty4:
 19769 00002F4F 1E                      	push	ds
 19770 00002F50 56                      	push	si
 19771                                  	; MSDOS 6.0
 19772                                  	;mov	cx,[si+0Bh]
 19773                                  	; 07/12/2022
 19774 00002F51 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19775                                  ;hkn; SS override
 19776 00002F54 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19777                                  	; MSDOS 3.3 
 19778                                  	;push	ss
 19779                                  	;pop	ds
 19780                                  	;MOV	AL,[THISDRV]
 19781                                  ;;; 10/1/86  update fastopen cache
 19782                                  	; MSDOS 3.3 & MSDOS 6.0
 19783 00002F58 52                      	PUSH	DX
 19784 00002F59 B400                    	MOV	AH,0			; dir entry update
 19785 00002F5B 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19786                                  	; MSDOS 6.0
 19787 00002F5D 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19788 00002F5F 750D                    	JNZ	short do_update2	;AN005; no, do update
 19789 00002F61 B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19790                                  	;mov	di,[si+1Bh]
 19791 00002F63 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19792                                  	;mov	cx,[si+1Dh]
 19793 00002F66 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19794                                  	;mov	dh,[si+1Fh]
 19795 00002F69 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19796 00002F6C EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19797                                  do_update2:				;AN011;F.O.
 19798                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19799                                  	; 
 19800 00002F6E 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19801 00002F73 7407                    	JZ	short do_update		;AN011;F.O. yes
 19802 00002F75 B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19803 00002F77 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19804                                  do_update:				;AN005;
 19805                                  ;hkn; SS is DOSDATA
 19806                                  	;Context DS
 19807 00002F7C 16                      	push	ss
 19808 00002F7D 1F                      	pop	ds
 19809                                  	; MSDOS 3.3 & MSDOS 6.0
 19810 00002F7E E8FCF6                  	call	FastOpen_Update 	; invoke fastopen
 19811 00002F81 5A                      	POP	DX
 19812                                  
 19813                                  ;;; 10/1/86  update fastopen cache
 19814 00002F82 E8A729                  	call	FLUSHBUF		; flush all relevant buffers
 19815 00002F85 5F                      	pop	di
 19816 00002F86 07                      	pop	es
 19817                                  	;mov	al,5
 19818 00002F87 B005                    	MOV	AL,error_access_denied
 19819 00002F89 7201                    	JC	short CloseFinish
 19820                                  FREE_SFT_OK:
 19821 00002F8B F8                      	CLC				; signal no error.
 19822                                  CloseFinish:
 19823                                  
 19824                                  ; Indicate to the device that the SFT is being closed.
 19825                                  
 19826                                  ;;;; 7/21/86
 19827 00002F8C 9C                      	PUSHF				; save flag from DirFromSFT
 19828 00002F8D E85B15                  	call	DEV_CLOSE_SFT
 19829 00002F90 9D                      	POPF
 19830                                  ;;;; 7/21/86
 19831                                  ;
 19832                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19833                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19834                                  ; going to be moving from busy to free.
 19835                                  ;
 19836 00002F91 59                      	POP	CX			; get old ref count
 19837 00002F92 9C                      	PUSHF
 19838                                  	; 03/02/2024
 19839                                  	;DEC	CX			; if cx != 1
 19840                                  	;JNZ	short NoFree		; then do NOT free SFT
 19841 00002F93 E203                    	loop	NoFree ; PCDOS 7.1 IBMDOS.COM
 19842                                  
 19843 00002F95 26890D                  	mov	[es:di],cx ; 0
 19844                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19845                                  NoFree:
 19846 00002F98 E86DE3                  	call	LCritDisk
 19847 00002F9B 9D                      	POPF
 19848 00002F9C C3                      	retn
 19849                                  
 19850                                  ;---------------------------------------------------------------------------
 19851                                  ;
 19852                                  ; Procedure Name : FREE_SFT
 19853                                  ;
 19854                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19855                                  ; Flags preserved. Return old ref count in AX
 19856                                  ;
 19857                                  ; Note that busy is indicated by the SFT ref count being -1.
 19858                                  ;
 19859                                  ;---------------------------------------------------------------------------
 19860                                  
 19861                                  FREE_SFT:
 19862 00002F9D 9C                      	PUSHF		; Save carry state
 19863 00002F9E 268B05                  	mov	ax,[es:di]
 19864                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19865 00002FA1 48                      	DEC	AX
 19866 00002FA2 7501                    	JNZ	short SetCount
 19867 00002FA4 48                      	DEC	AX
 19868                                  SetCount:
 19869 00002FA5 268705                  	xchg	ax,[es:di]
 19870                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19871 00002FA8 9D                      	POPF
 19872 00002FA9 C3                      	retn
 19873                                  
 19874                                  	; 18/05/2019 - Retro DOS v4.0
 19875                                  
 19876                                  ;----------------------------------------------------------------------------
 19877                                  ;
 19878                                  ; Procedure Name : DirFromSFT
 19879                                  ;
 19880                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19881                                  ;
 19882                                  ;   Inputs:	ES:DI point to SFT
 19883                                  ;		DS = DOSDATA
 19884                                  ;   Outputs:
 19885                                  ;		EXTERR_LOCUS = errLOC_Disk
 19886                                  ;		CurBuf points to buffer
 19887                                  ;		Carry Clear -> operation OK
 19888                                  ;		    ES:DI point to entry
 19889                                  ;		    ES:BX point to buffer
 19890                                  ;		    DS:SI point to SFT
 19891                                  ;		Carry SET   -> operation failed
 19892                                  ;		    registers trashified
 19893                                  ;   Registers modified: ALL
 19894                                  ;----------------------------------------------------------------------------
 19895                                  
 19896                                  DirFromSFT:
 19897                                  	;mov	byte [EXTERR_LOCUS],2
 19898 00002FAA C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19899 00002FAF 06                      	push	es
 19900 00002FB0 57                      	push	di
 19901                                  	; MSDOS 3.3
 19902                                  	;;mov	dx,[es:di+1Dh]
 19903                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19904                                  	; MSDOS 6.0
 19905                                  	;mov	dx,[es:[di+1Dh]
 19906 00002FB1 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19907 00002FB5 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19908                                  	; 04/02/2024
 19909 00002FB9 52                      	push	dx
 19910                                  	;mov	dx,[es:di+1Bh]
 19911 00002FBA 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19912                                  	; 04/02/2024
 19913                                  	; 19/05/2019
 19914                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19915                                  	; MSDOS 3.3 & MSDOS 6.0
 19916 00002FBE 52                      	PUSH	DX
 19917 00002FBF E8E725                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19918                                  					; [THISDPB] set
 19919 00002FC2 5A                      	POP	DX
 19920 00002FC3 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19921 00002FC7 721E                    	JC	short PopDone
 19922                                  	; 22/09/2023
 19923                                  	;XOR	AL,AL	; *		; Pre read
 19924                                  	;;mov	byte [ALLOWED],18h
 19925                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19926                                  	;call	GETBUFFR
 19927                                  	; 22/09/2023
 19928 00002FC9 E85C28                  	call	GETBUFFER ; * 		; Pre read
 19929 00002FCC 7219                    	JC	short PopDone
 19930 00002FCE 5E                      	pop	si
 19931 00002FCF 1F                      	pop	ds			; Get back SFT pointer
 19932                                  
 19933                                  ;hkn; SS override
 19934 00002FD0 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19935                                  	;or	byte [es:di+5],4
 19936 00002FD5 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19937 00002FDA 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19938                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19939                                  	;lea	di,[di+20] ; MSDOS 6.0
 19940 00002FDC 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19941                                  	;mov	al,32
 19942 00002FDF B020                    	MOV	AL,dir_entry.size
 19943                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19944 00002FE1 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19945 00002FE4 01C7                    	ADD	DI,AX			; Point at the entry
 19946 00002FE6 C3                      	retn				; carry is clear
 19947                                  PopDone:
 19948 00002FE7 5F                      	pop	di
 19949 00002FE8 07                      	pop	es
 19950                                  PopDone_retn:
 19951 00002FE9 C3                      	retn
 19952                                  
 19953                                  ;----------------------------------------------------------------------------
 19954                                  ;
 19955                                  ;**	DOS_Commit - UPdate Directory Entries
 19956                                  ;
 19957                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19958                                  ;		(DS) = DOSGROUP
 19959                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19960                                  ;	USES	all but DS
 19961                                  ;
 19962                                  ;----------------------------------------------------------------------------
 19963                                  
 19964                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19965                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19966                                  
 19967                                  DOS_COMMIT:
 19968                                  	;hkn; called from srvcall. DS already set up.
 19969 00002FEA C43E[9E05]              	LES	DI,[THISSFT]
 19970                                  	;mov	bx,[es:di+5]
 19971 00002FEE 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19972                                  	;test	bx,0C0h
 19973                                  	; 17/12/2022
 19974 00002FF2 F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19975                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19976 00002FF5 75F2                    	jnz	short PopDone_retn
 19977                                  	;test	bx,8000h
 19978                                  	; 17/12/2022
 19979                                  	;test	bh,80h
 19980 00002FF7 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19981                                  	;TEST	BX,sf_isnet ; 8000h
 19982 00002FFA 7406                    	JZ	short LOCAL_COMMIT
 19983                                  
 19984                                  ;IF NOT Installed
 19985                                  ;	transfer NET_COMMIT
 19986                                  ;ELSE
 19987                                  	;mov	ax,1107h
 19988 00002FFC B80711                  	MOV	AX,(MultNET<<8)|7
 19989 00002FFF CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19990                                  			; ES:DI -> SFT
 19991                                  			; SFT DPB field -> DPB of drive containing file
 19992                                  			; Return: CF set on error, AX = DOS error code
 19993                                  			; CF clear if successful
 19994                                  localcommit_retn: ; 18/12/2022	
 19995 00003001 C3                      	retn
 19996                                  ;ENDIF
 19997                                  
 19998                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19999                                  ; There are three ways we can do this. One is to enter a critical section to
 20000                                  ; protect a potential free. The second is to increment the ref count to mask
 20001                                  ; the close decrementing.
 20002                                  ;
 20003                                  ; The proper way is to let the caller's of close decide if a decrement should
 20004                                  ; be done. We do this by providing another entry into close after the
 20005                                  ; decrement and after the share information release.
 20006                                  
 20007                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 20008                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 20009                                  
 20010                                  LOCAL_COMMIT:
 20011 00003002 E8E8E2                  	call	ECritDisk
 20012                                  	; MSDOS 6.0
 20013 00003005 E8E5E2                  	call	ECritDisk	;PTM.
 20014 00003008 E80E00                  	call	SetSFTTimes
 20015 0000300B B8FFFF                  	MOV	AX,-1
 20016 0000300E E8BCFE                  	call	CloseEntry
 20017                                  	; MSDOS 6.0
 20018 00003011 9C                      	PUSHF			;PTM.				;AN000;
 20019 00003012 E8CE14                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 20020 00003015 9D                      	POPF			;PTM.				;AN000;
 20021                                  	;call	LCritDisk	;PTM.				;AN000;
 20022                                  	; 18/12/2022
 20023 00003016 E9EFE2                  	jmp	LCritDisk
 20024                                  ;localcommit_retn:
 20025                                  ;	retn
 20026                                  
 20027                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 20028                                  ;----------------------------------------------------------------------------
 20029                                  ;
 20030                                  ; Procedure Name : SetSFTTimes
 20031                                  ;
 20032                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 20033                                  ;   Reflect these times in other SFT's for the same file.
 20034                                  ;
 20035                                  ;   Inputs:	ES:DI point to SFT
 20036                                  ;		BX = sf_flags set apprpriately
 20037                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 20038                                  ;   Registers modified: All except ES:DI, BX, AX
 20039                                  ;
 20040                                  ;----------------------------------------------------------------------------
 20041                                  
 20042                                  	; 04/02/2024 - Retro DOS v4.2
 20043                                  
 20044                                  SetSFTTimes:
 20045                                  
 20046                                  ; 04/02/2024
 20047                                  %if 0
 20048                                  ;	File clean or device does not get stamped nor disk looked at.
 20049                                  	
 20050                                  	;test	bx,0C0h
 20051                                  	; 17/12/2022
 20052                                  	test	bl,devid_file_clean+devid_device
 20053                                  	;TEST	BX,devid_file_clean+devid_device
 20054                                  	;retnz				; clean or device => no timestamp
 20055                                  	jnz	short localcommit_retn
 20056                                  
 20057                                  ;	file and dirty. See if date is good
 20058                                  
 20059                                  	;test	bx,4000h
 20060                                  	; 17/12/2022
 20061                                  	;test	bh,40h
 20062                                  	test	bh,(sf_close_nodate>>8)
 20063                                  	;TEST	BX,sf_close_nodate
 20064                                  	;retnz				; nodate => no timestamp
 20065                                  	jnz	short localcommit_retn
 20066                                  %else
 20067                                  	; 04/02/2024
 20068                                  	; (PCDOS 7.1 IBMDOS.COM)
 20069                                  	;test	bx,40C0h
 20070 00003019 F7C3C040                	test	bx,sf_close_nodate+devid_file_clean+devid_device
 20071 0000301D 75E2                    	jnz	short localcommit_retn
 20072                                  %endif
 20073                                  
 20074 0000301F 50                      	push	ax
 20075 00003020 53                      	push	bx
 20076 00003021 E8BCDA                  	call	DATE16			; Date/Time to AX/DX
 20077                                  	;mov	[es:di+0Fh],ax
 20078 00003024 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 20079                                  	;mov	[es:di+0Dh],dx
 20080 00003028 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 20081 0000302C 31C0                    	XOR	AX,AX
 20082                                  ;if installed
 20083                                  	;call	JShare + 14 * 4
 20084 0000302E FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 20085                                  ;else
 20086                                  ;	call	ShSU
 20087                                  ;endif
 20088 00003032 5B                      	pop	bx
 20089 00003033 58                      	pop	ax
 20090 00003034 C3                      	retn
 20091                                  
 20092                                  ;============================================================================
 20093                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 20094                                  ;============================================================================
 20095                                  ; 23/07/2018 - Retro DOS v3.0
 20096                                  ; 18/05/2019 - Retro DOS v4.0
 20097                                  
 20098                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 20099                                  
 20100                                  ;TITLE DIRCALL - Directory manipulation internal calls
 20101                                  ;NAME  DIRCALL
 20102                                  
 20103                                  ;**	Low level directory manipulation routines for making removing and
 20104                                  ;	  verifying local or NET directories
 20105                                  ;
 20106                                  ;	DOS_MKDIR
 20107                                  ;	DOS_CHDIR
 20108                                  ;	DOS_RMDIR
 20109                                  ;
 20110                                  ;	Modification history:
 20111                                  ;
 20112                                  ;		Created: ARR 30 March 1983
 20113                                  
 20114                                  ;BREAK <DOS_MkDir - Make a directory entry>
 20115                                  ;---------------------------------------------------------------------------
 20116                                  ;
 20117                                  ; Procedure Name : DOS_MkDir
 20118                                  ;
 20119                                  ; Inputs:
 20120                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20121                                  ;		terminated)
 20122                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20123                                  ;		( = -1 if current dir not involved, else
 20124                                  ;		 Points to first char after last "/" of current dir part)
 20125                                  ;	[THISCDS] Points to CDS being used
 20126                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20127                                  ; Function:
 20128                                  ;	Make a new directory
 20129                                  ; Returns:
 20130                                  ;	Carry Clear
 20131                                  ;		No error
 20132                                  ;	Carry Set
 20133                                  ;	    AX is error code
 20134                                  ;		error_path_not_found
 20135                                  ;			Bad path (not in curr dir part if present)
 20136                                  ;		error_bad_curr_dir
 20137                                  ;			Bad path in current directory part of path
 20138                                  ;		error_access_denied
 20139                                  ;			Already exists, device name
 20140                                  ; DS preserved, Others destroyed
 20141                                  ;---------------------------------------------------------------------------
 20142                                  
 20143                                  ;hkn; called from path.asm. DS already set up.
 20144                                  
 20145                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20146                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 20147                                  
 20148                                  ; 04/02/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 20149                                  ; DOSCODE:6FDAh (MSDOS 6.22, MSDOS.SYS)
 20150                                  
 20151                                  DOS_MKDIR:
 20152 00003035 E8F3E1                  	call	TestNet
 20153 00003038 7313                    	JNC	short LOCAL_MKDIR
 20154                                  
 20155                                  ;IF NOT Installed
 20156                                  ;	transfer NET_MKDIR
 20157                                  ;ELSE
 20158                                  	;mov	ax,1103h
 20159 0000303A B80311                  	MOV	AX,(MultNET<<8)|3
 20160 0000303D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 20161                                  			; SS = DOS CS
 20162                                  			; SDA first filename pointer -> fully-qualified directory name
 20163                                  			; SDA CDS pointer -> current directory
 20164                                  			; Return: CF set on error, AX = DOS error code
 20165                                  			; CF clear if successful
 20166 0000303F C3                      	retn
 20167                                  ;ENDIF
 20168                                  
 20169                                  NODEACCERRJ:
 20170                                  	;mov	ax,5
 20171 00003040 B80500                  	MOV	AX,error_access_denied
 20172                                  _BadRet:
 20173 00003043 F9                      	STC
 20174                                  	;call	LCritDisk
 20175                                  	;retn
 20176                                  	; 18/12/2022
 20177 00003044 E9C1E2                  	jmp	LCritDisk
 20178                                  
 20179                                  PATHNFJ:
 20180 00003047 E8BEE2                  	call	LCritDisk
 20181 0000304A E902FA                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 20182                                  
 20183                                  LOCAL_MKDIR:
 20184 0000304D E89DE2                  	call	ECritDisk
 20185                                  
 20186                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 20187                                  
 20188 00003050 8C16[A005]              	MOV	[THISSFT+2],SS
 20189                                  
 20190                                  ;hkn; DOSDATA
 20191 00003054 C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 20192                                  
 20193                                  ;  NOTE: Need WORD PTR because MASM takes type of
 20194                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 20195                                  
 20196                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 20197 0000305A C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 20198                                  				; make sure SHARER won't complain.
 20199                                  	;mov	al,10h
 20200 00003060 B010                    	MOV	AL,attr_directory
 20201 00003062 E82418                  	call	MakeNode
 20202 00003065 72E0                    	JC	short PATHNFJ
 20203 00003067 83F803                  	CMP	AX,3
 20204 0000306A 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 20205 0000306C C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 20206 00003070 C53E[E205]              	LDS	DI,[CURBUF]
 20207 00003074 29FE                    	SUB	SI,DI
 20208 00003076 56                      	PUSH	SI		; Pointer to dir_first
 20209                                  
 20210                                  ; 04/02/2024
 20211                                  %if 0
 20212                                  	; MSDOS 6.0
 20213                                  	;push	word [DI+8]
 20214                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 20215                                  	; MSDOS 3.3 & MSDOS 6.0
 20216                                  	;push	word [di+6]
 20217                                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 20218                                  %else
 20219                                  	; 04/02/2024
 20220                                  	; (PCDOS 7.1 IBMDOS.COM)
 20221 00003077 C54506                  	lds	ax,[di+BUFFINFO.buf_sector] ; Sector of new node
 20222 0000307A 1E                      	push	ds
 20223 0000307B 50                      	push	ax
 20224                                  %endif
 20225                                  
 20226 0000307C 16                      	push	ss
 20227 0000307D 1F                      	pop	ds
 20228                                  
 20229                                  	; 04/02/2024
 20230                                  	;PUSH	word [DIRSTART]	; Parent for .. entry
 20231 0000307E 31C0                    	XOR	AX,AX
 20232                                  	;MOV	[DIRSTART],AX	; Null directory
 20233 00003080 8706[C205]              	xchg	ax,[DIRSTART]
 20234 00003084 50                      	push	ax
 20235                                  
 20236 00003085 E83E17                  	call	NEWDIR
 20237 00003088 726F                    	JC	short NODEEXISTSPOPDEL ; No room
 20238 0000308A E81A0D                  	call	GETENT		; First entry
 20239 0000308D 726A                    	JC	short NODEEXISTSPOPDEL ; Screw up
 20240 0000308F C43E[E205]              	LES	DI,[CURBUF]
 20241                                  
 20242                                  	; MSDOS 6.0
 20243 00003093 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 20244                                  				 ;LB. if already dirty		    ;AN000;
 20245 00003098 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 20246 0000309A E89129                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 20247                                  	
 20248                                  	; MSDOS 3.3 & MSDOS 6.0
 20249                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 20250 0000309D 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 20251                                  yesdirty5:
 20252                                  	;;add	di,16 ; MSDOS 3.3
 20253                                  	;add	di,20 ; MSDOS 6.0
 20254 000030A2 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 20255 000030A5 B82E20                  	MOV	AX,202EH	; ". "
 20256 000030A8 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 20257 000030AC E8B717                  	call	SETDOTENT
 20258 000030AF B82E2E                  	MOV	AX,2E2EH	; ".."
 20259 000030B2 5A                      	POP	DX		; Parent
 20260 000030B3 E8B017                  	call	SETDOTENT
 20261 000030B6 C42E[8A05]              	LES	BP,[THISDPB]
 20262                                  	; 22/09/2023
 20263                                  	;;mov	byte [ALLOWED],18h
 20264                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20265 000030BA 5A                      	POP	DX		; Entry sector
 20266                                  	; MSDOS 6.0
 20267 000030BB 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 20268                                  
 20269                                  	;XOR	AL,AL ; *	; Pre read
 20270                                  	;call	GETBUFFR
 20271                                  	; 22/09/2023
 20272 000030BF E86627                  	call	GETBUFFER ; *	; Pre read
 20273 000030C2 725B                    	JC	short NODEEXISTSP
 20274 000030C4 8B16[C205]              	MOV	DX,[DIRSTART]
 20275 000030C8 C53E[E205]              	LDS	DI,[CURBUF]
 20276                                  	;or	byte [di+5],4
 20277 000030CC 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20278 000030D0 5E                      	POP	SI		; dir_first pointer
 20279 000030D1 01FE                    	ADD	SI,DI
 20280 000030D3 8914                    	MOV	[SI],DX
 20281 000030D5 31D2                    	XOR	DX,DX
 20282 000030D7 895402                  	MOV	[SI+2],DX	; Zero size
 20283 000030DA 895404                  	MOV	[SI+4],DX
 20284                                  DIRUP:
 20285                                  	; MSDOS 6.0
 20286 000030DD F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 20287                                  	;			 ;LB. if already dirty 		   ;AN000;
 20288 000030E1 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 20289 000030E3 E84829                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 20290                                  	
 20291                                  	; MSDOS 3.3 & MSDOS 6.0
 20292                                  	;or	byte [di+5],40h
 20293 000030E6 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 20294                                  yesdirty6:
 20295 000030EA 16                      	push	ss
 20296 000030EB 1F                      	pop	ds
 20297 000030EC 268A4600                	mov	al,[es:bp]
 20298                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 20299 000030F0 E83928                  	call	FLUSHBUF
 20300                                  	;mov	ax,5
 20301 000030F3 B80500                  	MOV	AX,error_access_denied
 20302                                  	;call	LCritDisk
 20303                                  	;retn
 20304                                  	; 18/12/2022
 20305 000030F6 E90FE2                  	jmp	LCritDisk
 20306                                  
 20307                                  NODEEXISTSPOPDEL:
 20308 000030F9 5A                      	POP	DX		; Parent
 20309 000030FA 5A                      	POP	DX		; Entry sector
 20310                                  	; MSDOS 6.0 
 20311 000030FB 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 20312 000030FF C42E[8A05]              	LES	BP,[THISDPB]
 20313                                  	; 22/09/2023
 20314                                  	;;mov	byte [ALLOWED],18h
 20315                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20316                                  	;XOR	AL,AL ; *	; Pre read
 20317                                  	;call	GETBUFFR
 20318                                  	; 22/09/2023
 20319 00003103 E82227                  	call	GETBUFFER ; *	; Pre read
 20320 00003106 7217                    	JC	short NODEEXISTSP
 20321 00003108 C53E[E205]              	LDS	DI,[CURBUF]
 20322                                  	;or	byte [di+5],4
 20323 0000310C 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20324 00003110 5E                      	POP	SI		; dir_first pointer
 20325 00003111 01FE                    	ADD	SI,DI
 20326                                  	;sub	si,1Ah ; 26
 20327 00003113 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 20328 00003116 C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 20329 00003119 E8C1FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 20330                                  NODEEXISTS:
 20331 0000311C E921FF                  	JMP	NODEACCERRJ ; 10/08/2018
 20332                                  
 20333                                  NODEEXISTSP:
 20334 0000311F 5E                      	POP	SI		; Clean stack
 20335 00003120 EBFA                    	JMP	short NODEEXISTS
 20336                                  
 20337                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20338                                  
 20339                                  ;BREAK <DOS_ChDir -- Verify a directory>
 20340                                  ;----------------------------------------------------------------------------
 20341                                  ;
 20342                                  ; Procedure Name : DOS_ChDir
 20343                                  ;
 20344                                  ; Inputs:
 20345                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20346                                  ;		terminated)
 20347                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20348                                  ;		( = -1 if current dir not involved, else
 20349                                  ;		 Points to first char after last "/" of current dir part)
 20350                                  ;	[THISCDS] Points to CDS being used May not be NUL
 20351                                  ; Function:
 20352                                  ;	Validate the path for potential new current directory
 20353                                  ; Returns:
 20354                                  ;	NOTE:
 20355                                  ;	    [SATTRIB] is modified by this call
 20356                                  ;	Carry Clear
 20357                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 20358                                  ;		Caller must NOT set ID fields on a NET CDS.
 20359                                  ;	Carry Set
 20360                                  ;	    AX is error code
 20361                                  ;		error_path_not_found
 20362                                  ;			Bad path
 20363                                  ;		error_access_denied
 20364                                  ;			device or file name
 20365                                  ; DS preserved, Others destroyed
 20366                                  ;----------------------------------------------------------------------------
 20367                                  
 20368                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 20369                                  
 20370                                  ; 18/05/2019 - Retro DOS v4.0
 20371                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 20372                                  
 20373                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20374                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 20375                                  
 20376                                  DOS_CHDIR:
 20377 00003122 E806E1                  	call	TestNet
 20378 00003125 7306                    	JNC	short LOCAL_CHDIR
 20379                                  
 20380                                  ;IF NOT Installed
 20381                                  ;	transfer NET_CHDIR
 20382                                  ;ELSE
 20383                                  	;mov	ax,1105h
 20384 00003127 B80511                  	MOV	AX,(MultNET<<8)|5
 20385 0000312A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 20386                                  			; SS = DOS CS
 20387                                  			; SDA first filename pointer -> fully-qualified directory name
 20388                                  			; SDA CDS pointer -> current directory
 20389                                  			; Return: CF set on error, AX = DOS error code
 20390                                  			; CF clear if successful
 20391 0000312C C3                      	retn
 20392                                  ;ENDIF
 20393                                  
 20394                                  LOCAL_CHDIR:
 20395 0000312D E8BDE1                  	call	ECritDisk
 20396                                  	; MSDOS 6.0
 20397                                  	;;test	word [es:di+43h],2000h
 20398                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 20399                                  	; 17/12/2022
 20400                                  	;test	byte [es:di+44h],20h
 20401 00003130 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 20402 00003135 7406                    	JZ	short nojoin		   ;PTM.
 20403                                  	;mov	word [es:di+49h], 0FFFFh
 20404 00003137 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 20405                                  nojoin:
 20406                                  	; MSDOS 3.3 & MSDOS 6.0
 20407 0000313D C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 20408                                  	;mov	byte [SATTRIB],16h
 20409 00003142 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20410                                  				; Dir calls can find these
 20411                                  ; DOS 3.3  6/24/86 FastOpen
 20412 00003147 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 20413 0000314C E8E20C                  	call	GETPATH
 20414                                  
 20415                                  	; 04/02/2024
 20416                                  	;PUSHF						;AN000;
 20417 0000314F 9F                      	lahf						
 20418 00003150 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 20419                                  	;POPF						;AN000;
 20420 00003155 9E                      	sahf
 20421                                  
 20422                                  ; DOS 3.3  6/24/86 FastOpen
 20423                                  
 20424                                  	; MSDOS 3.3
 20425                                  	;mov	byte [FastOpenFlg],0
 20426                                  	
 20427                                  	;mov	ax,3
 20428 00003156 B80300                  	MOV	AX,error_path_not_found
 20429 00003159 7207                    	JC	short ChDirDone
 20430 0000315B 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20431 0000315D 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 20432 00003161 F8                      	CLC
 20433                                  ChDirDone:
 20434                                  	;call	LCritDisk
 20435                                  	;retn
 20436                                  	; 18/12/2022
 20437 00003162 E9A3E1                  	jmp	LCritDisk
 20438                                  
 20439                                  ;BREAK <DOS_RmDir -- Remove a directory>
 20440                                  ;----------------------------------------------------------------------------
 20441                                  ;
 20442                                  ; Procedure Name : DOS_RmDir
 20443                                  ;
 20444                                  ; Inputs:
 20445                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20446                                  ;		terminated)
 20447                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20448                                  ;		( = -1 if current dir not involved, else
 20449                                  ;		 Points to first char after last "/" of current dir part)
 20450                                  ;	[THISCDS] Points to CDS being used
 20451                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20452                                  ; Function:
 20453                                  ;	Remove a directory
 20454                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 20455                                  ; Returns:
 20456                                  ;	NOTE:
 20457                                  ;	    [SATTRIB] is modified by this call
 20458                                  ;	Carry Clear
 20459                                  ;		No error
 20460                                  ;	Carry Set
 20461                                  ;	    AX is error code
 20462                                  ;		error_path_not_found
 20463                                  ;			Bad path (not in curr dir part if present)
 20464                                  ;		error_bad_curr_dir
 20465                                  ;			Bad path in current directory part of path
 20466                                  ;		error_access_denied
 20467                                  ;			device or file name, root directory
 20468                                  ;			Bad directory ('.' '..' messed up)
 20469                                  ; DS preserved, Others destroyed
 20470                                  ;----------------------------------------------------------------------------
 20471                                  
 20472                                  ;hkn; called from path.asm. DS already set up.
 20473                                  
 20474                                  ; 18/05/2019 - Retro DOS v4.0
 20475                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 20476                                  
 20477                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20478                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 20479                                  
 20480                                  DOS_RMDIR:
 20481 00003165 E8C3E0                  	call	TestNet
 20482 00003168 7306                    	JNC	short LOCAL_RMDIR
 20483                                  
 20484                                  ;IF NOT Installed
 20485                                  ;	transfer NET_RMDIR
 20486                                  ;ELSE
 20487                                  	;mov	ax,1101h
 20488 0000316A B80111                  	MOV	AX,(MultNET<<8)|1
 20489 0000316D CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 20490                                  			; SS = DOS CS
 20491                                  			; SDA first filename pointer -> fully-qualified directory name
 20492                                  			; SDA CDS pointer -> current directory
 20493                                  			; Return: CF set on error, AX = DOS error code
 20494                                  			; CF clear if successful
 20495 0000316F C3                      	retn
 20496                                  ;ENDIF
 20497                                  
 20498                                  LOCAL_RMDIR:
 20499 00003170 E87AE1                  	call	ECritDisk
 20500 00003173 C606[4C03]00            	MOV	byte [NoSetDir],0
 20501                                  	;mov	byte [SATTRIB],16h
 20502 00003178 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20503                                  					; Dir calls can find these
 20504 0000317D E8B10C                  	call	GETPATH
 20505 00003180 720C                    	JC	short NOPATH		; Path not found
 20506 00003182 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20507 00003184 8B3E[C205]              	MOV	DI,[DIRSTART]
 20508 00003188 09FF                    	OR	DI,DI			; Root ?
 20509 0000318A 750E                    	JNZ	short rmdir_get_buf	; No
 20510 0000318C EB09                    	JMP	SHORT NOTDIRPATH
 20511                                  
 20512                                  NOPATH:
 20513                                  	;mov	ax,3
 20514 0000318E B80300                  	MOV	AX,error_path_not_found
 20515 00003191 E9AFFE                  	JMP	_BadRet
 20516                                  
 20517                                  NOTDIRPATHPOP:
 20518 00003194 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 20519 00003195 58                      	POP	AX
 20520                                  NOTDIRPATHPOP2:
 20521 00003196 58                      	POP	AX
 20522                                  NOTDIRPATH:
 20523 00003197 E9A6FE                  	JMP	NODEACCERRJ
 20524                                  
 20525                                  rmdir_get_buf:
 20526 0000319A C53E[E205]              	LDS	DI,[CURBUF]
 20527 0000319E 29FB                    	SUB	BX,DI		; Compute true offset
 20528 000031A0 53                      	PUSH	BX		; Save entry pointer
 20529                                  	
 20530                                  	; MSDOS 6.0
 20531                                  	;push	word [di+8]
 20532 000031A1 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 20533                                  	
 20534                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20535                                  	;push	word [di+6]
 20536 000031A4 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 20537                                  
 20538                                  ;hkn; SS is DOSDATA
 20539                                  	;context DS
 20540 000031A7 16                      	push	ss
 20541 000031A8 1F                      	pop	ds
 20542                                  	;context ES
 20543 000031A9 16                      	push	ss
 20544 000031AA 07                      	pop	es
 20545                                  
 20546                                  ;hkn; NAME1 is in DOSDATA
 20547 000031AB BF[4B05]                	MOV	DI,NAME1
 20548 000031AE B03F                    	MOV	AL,'?'
 20549 000031B0 B90B00                  	MOV	CX,11
 20550 000031B3 F3AA                    	REP	STOSB
 20551 000031B5 30C0                    	XOR	AL,AL
 20552 000031B7 AA                      	STOSB				; Nul terminate it
 20553 000031B8 E8F80E                  	call	STARTSRCH		; Set search
 20554 000031BB E8E60B                  	call	GETENTRY		; Get start of directory
 20555 000031BE 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 20556 000031C0 8E1E[E405]              	MOV	DS,[CURBUF+2]
 20557 000031C4 89DE                    	MOV	SI,BX
 20558 000031C6 AD                      	LODSW
 20559                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 20560 000031C7 3D2E20                  	cmp	ax,202Eh ; ". "
 20561 000031CA 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 20562                                  	;add	si,30
 20563 000031CC 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 20564 000031CF AD                      	LODSW
 20565                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 20566                                  	;cmp	ax, '..'
 20567 000031D0 3D2E2E                  	cmp	ax,2E2Eh
 20568 000031D3 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 20569                                  
 20570                                  ;hkn; SS is DOSDATA
 20571                                  	;context DS
 20572 000031D5 16                      	push	ss
 20573 000031D6 1F                      	pop	ds
 20574 000031D7 C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 20575 000031DD E8C40B                  	call	GETENTRY		; Get next entry
 20576 000031E0 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 20577                                  	;mov	byte [ATTRIB],16h
 20578 000031E2 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 20579 000031E7 E8C40A                  	call	SRCH			; Do a search
 20580 000031EA 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 20581 000031EC 803E[4A03]00            	CMP	byte [FAILERR],0
 20582 000031F1 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 20583 000031F3 C42E[8A05]              	LES	BP,[THISDPB]
 20584 000031F7 8B1E[C205]              	MOV	BX,[DIRSTART]
 20585 000031FB E8B31B                  	call	RELEASE 		; Release data in sub dir
 20586 000031FE 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 20587 00003200 5A                      	POP	DX			; Sector # of entry
 20588 00003201 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 20589                                  	; 22/09/2023
 20590                                  	;;mov	byte [ALLOWED],18h
 20591                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20592                                  	;XOR	AL,AL ; *		; Pre read
 20593                                  	;call	GETBUFFR		; Get sector back
 20594 00003205 E82026                  	call	GETBUFFER ; *		; Pre Read
 20595 00003208 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 20596 0000320A C53E[E205]              	LDS	DI,[CURBUF]
 20597                                  	;or	byte [di+5],4
 20598 0000320E 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20599 00003212 5B                      	POP	BX			; Pointer to start of entry
 20600 00003213 01FB                    	ADD	BX,DI			; Corrected
 20601 00003215 C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 20602                                  
 20603                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20604 00003218 1E                      	PUSH	DS
 20605                                  
 20606                                  ;hkn; SS is DOSDATA
 20607                                  	;context DS
 20608 00003219 16                      	push	ss
 20609 0000321A 1F                      	pop	ds
 20610                                  
 20611                                  	; MSDOS 6.0
 20612 0000321B E837F4                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 20613                                  
 20614                                  ;	; MSDOS 3.3
 20615                                  ;_FastOpen_Delete:
 20616                                  ;	push	ax
 20617                                  ;	mov	si,[WFP_START]
 20618                                  ;	mov	bx,FastTable
 20619                                  ;	;mov	al,3  ; FONC_delete
 20620                                  ;	mov	al,FONC_delete
 20621                                  ;	call	far [BX+2]  ; FastTable+2
 20622                                  ;	pop	ax
 20623                                  
 20624 0000321E 1F                      	POP	DS
 20625                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20626                                  
 20627 0000321F E9BBFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 20628                                  
 20629                                  ;============================================================================
 20630                                  ; DISK.ASM, MSDOS 6.0, 1991
 20631                                  ;============================================================================
 20632                                  ; 23/07/2018 - Retro DOS v3.0 
 20633                                  ; 04/05/2019 - Retro DOS v4.0
 20634                                  
 20635                                  ;	TITLE	DISK - Disk utility routines
 20636                                  ;	NAME	Disk
 20637                                  
 20638                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 20639                                  ;
 20640                                  ;	SWAPCON
 20641                                  ;	SWAPBACK
 20642                                  ;	DOS_READ
 20643                                  ;	DOS_WRITE
 20644                                  ;	get_io_sft
 20645                                  ;	DirRead
 20646                                  ;	FIRSTCLUSTER
 20647                                  ;	SET_BUF_AS_DIR
 20648                                  ;	FATSecRd
 20649                                  ;	DREAD
 20650                                  ;	CHECK_WRITE_LOCK
 20651                                  ;	CHECK_READ_LOCK
 20652                                  ;
 20653                                  ;	Revision history:
 20654                                  ;
 20655                                  ;		A000   version 4.00  Jan. 1988
 20656                                  ;
 20657                                  ;----------------------------------------------------------------------------
 20658                                  ;
 20659                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 20660                                  ;		error happens, DOS retries the entire block assuming that
 20661                                  ;		zero characters were transferred. Modified the code to take
 20662                                  ;		into account the number of characters transfered before
 20663                                  ;		retrying the operation.
 20664                                  ;
 20665                                  ;----------------------------------------------------------------------------
 20666                                  ;
 20667                                  
 20668                                  ;Installed = TRUE
 20669                                  
 20670                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20671                                  
 20672                                  ; **** Drivers for file input from devices ****
 20673                                  ;----------------------------------------------------------------------------
 20674                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20675                                  ;   of handles 0 and 1
 20676                                  ;
 20677                                  ;   Inputs:	DS is DOSDATA
 20678                                  ;   Outputs:	CONSWAP is set to false.
 20679                                  ;   Registers modified: none
 20680                                  ;----------------------------------------------------------------------------
 20681                                  
 20682                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20683                                  
 20684                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20685                                  ; 04/05/2019 - Retro DOS v4.0
 20686                                  
 20687                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20688                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20689                                  
 20690                                  SWAPBACK:
 20691 00003222 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20692 00003227 C3                      	retn
 20693                                  
 20694                                  ;----------------------------------------------------------------------------
 20695                                  ;
 20696                                  ; Procedure Name : SWAPCON
 20697                                  ;
 20698                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20699                                  ;
 20700                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20701                                  ;		DS is DOSDATA
 20702                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20703                                  ;   Registers modified: none
 20704                                  ;--------------------------------------------------------------------------
 20705                                  
 20706                                  SWAPCON:
 20707                                  	; MSDOS 3.3
 20708                                  	;push	es
 20709                                  	;push	di
 20710                                  	;mov	byte [CONSWAP],1
 20711                                  	;les	di,[THISSFT]
 20712                                  	;mov	word [CONSFT],di
 20713                                  	;mov	word [CONSFT+2],es
 20714                                  	;pop	di
 20715                                  	;pop	es
 20716                                  	;retn
 20717                                  
 20718                                  	; MSDOS 6.0
 20719 00003228 C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20720 0000322D 50                      	push	ax
 20721 0000322E A1[9E05]                	mov	ax,[THISSFT]
 20722 00003231 A3[E605]                	mov	[CONSFT],ax
 20723 00003234 A1[A005]                	mov	ax,[THISSFT+2]
 20724 00003237 A3[E805]                	mov	[CONSFT+2],ax
 20725 0000323A 58                      	pop	ax
 20726 0000323B C3                      	retn
 20727                                  
 20728                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20729                                  ; 04/05/2019 - Retro DOS v4.0
 20730                                  
 20731                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20732                                  ;-----------------------------------------------------------------------------
 20733                                  ;
 20734                                  ; Inputs:
 20735                                  ;	ThisSFT set to the SFT for the file being used
 20736                                  ;	[DMAADD] contains transfer address
 20737                                  ;	CX = No. of bytes to read
 20738                                  ;	DS = DOSDATA
 20739                                  ; Function:
 20740                                  ;	Perform read operation
 20741                                  ; Outputs:
 20742                                  ;    Carry clear
 20743                                  ;	SFT Position and cluster pointers updated
 20744                                  ;	CX = No. of bytes read
 20745                                  ;	ES:DI point to SFT
 20746                                  ;    Carry set
 20747                                  ;	AX is error code
 20748                                  ;	CX = 0
 20749                                  ;	ES:DI point to SFT
 20750                                  ; DS preserved, all other registers destroyed
 20751                                  ;
 20752                                  ;-----------------------------------------------------------------------------
 20753                                  
 20754                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20755                                  
 20756                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20757                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20758                                  
 20759                                  DOS_READ:
 20760 0000323C C43E[9E05]              	LES	DI,[THISSFT]
 20761                                  
 20762                                  ; Verify that the sft has been opened in a mode that allows reading.
 20763                                  
 20764                                  	;mov	al,[es:di+2]
 20765 00003240 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20766                                  	;and	al,0Fh
 20767 00003244 240F                    	AND	AL,access_mask
 20768                                  	;cmp	al,1
 20769 00003246 3C01                    	CMP	AL,open_for_write
 20770 00003248 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20771 0000324A E9CD05                  	jmp	SET_ACC_ERR
 20772                                  
 20773                                  READ_NO_MODE:
 20774 0000324D E8B204                  	call	SETUP
 20775 00003250 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20776 00003252 E8EFDF                  	call	IsSFTNet
 20777 00003255 7408                    	JZ	short LOCAL_READ
 20778                                  
 20779                                  ;IF NOT Installed
 20780                                  ;	transfer NET_READ
 20781                                  ;ELSE
 20782                                  	;mov	ax,1108h
 20783 00003257 B80811                  	MOV	AX,(MultNET<<8)|8
 20784 0000325A CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20785                                  			; ES:DI -> SFT
 20786                                  			; SFT DPB field -> DPB of drive containing file
 20787                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20788                                  			; Return: CF set on error, CX = bytes read
 20789 0000325C C3                      	retn
 20790                                  ;ENDIF
 20791                                  
 20792                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20793                                  ; except return immediately.
 20794                                  
 20795                                  NoIORet:
 20796 0000325D F8                      	CLC
 20797 0000325E C3                      	retn
 20798                                  
 20799                                  LOCAL_READ:
 20800                                  	;test	word [es:di+5],80h
 20801                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20802 0000325F 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20803 00003264 750E                    	JNZ	short READDEV
 20804                                  
 20805                                  	;mov	byte [EXTERR_LOCUS],2
 20806 00003266 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20807 0000326B E87FE0                  	call	ECritDisk
 20808 0000326E E86C05                  	call	DISKREAD
 20809                                  
 20810                                  critexit:
 20811                                  	;call	LCritDisk
 20812                                  	;retn
 20813                                  	; 16/12/2022
 20814 00003271 E994E0                  	jmp	LCritDisk
 20815                                  
 20816                                  ; We are reading from a device. Examine the status of the device to see if we
 20817                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20818                                  ; null device, we can safely indicate no transfer.
 20819                                  
 20820                                  READDEV:
 20821                                  	;mov	byte [EXTERR_LOCUS],4
 20822 00003274 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20823                                  	;mov	bl,[es:di+5]
 20824 00003279 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20825 0000327D C43E[2C03]              	LES	DI,[DMAADD]
 20826                                  	;test	bl,40h
 20827 00003281 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20828 00003284 7407                    	JZ	short ENDRDDEVJ3
 20829                                  	;test	bl,4
 20830 00003286 F6C304                  	test	BL,devid_device_null	; NUL device?
 20831 00003289 7405                    	JZ	short TESTRAW 		; NO
 20832 0000328B 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20833                                  ENDRDDEVJ3:
 20834                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20835                                  	;JMP	short ENDRDDEVJ2
 20836                                  	; 16/12/2022
 20837 0000328D E93E01                  	jmp	ENDRDDEV ; 04/05/2019
 20838                                  
 20839                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20840                                  ; bizarre std_con_string_input.
 20841                                  
 20842                                  TESTRAW:
 20843                                  	;test	bl,20h
 20844 00003290 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20845 00003293 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20846                                  	;test	bl,1
 20847 00003295 F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20848 00003298 7457                    	JZ	short NOTRDCON
 20849 0000329A E96601                  	JMP	READCON
 20850                                  
 20851                                  DVRDRAW:
 20852 0000329D 06                      	PUSH	ES
 20853 0000329E 1F                      	POP	DS			; Xaddr to DS:DI
 20854                                  
 20855                                  	; 04/05/2019 - Retro DOS v4.0
 20856                                  
 20857                                  	; MSDOS 6.0
 20858                                  ;SR;
 20859                                  ;Check for win386 presence -- if present, do polled read of characters
 20860                                  
 20861 0000329F 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20862 000032A5 7408                    	jz	short ReadRawRetry	;not present
 20863 000032A7 F6C301                  	test	bl,devid_device_con_in	;is it console device
 20864 000032AA 7403                    	jz	short ReadRawRetry	;no, do normal read
 20865 000032AC E9A700                  	jmp	do_polling		;yes, do win386 polling loop
 20866                                  
 20867                                  ReadRawRetry:
 20868                                  
 20869                                  ; 07/02/2024
 20870                                  %if 0
 20871                                  	MOV	BX,DI			; DS:BX transfer addr
 20872                                  	; 06/02/2024 ; *
 20873                                  	;XOR	AX,AX			; Media Byte, unit = 0
 20874                                  	;;MOV	DX,AX			; Start at 0
 20875                                  	;; 06/02/2024
 20876                                  	;cwd
 20877                                  	;call	SETREAD
 20878                                  	; 06/02/2024 ; *
 20879                                  	call	SETREAD_X
 20880                                  %else
 20881 000032AF E82513                  	call	SETREAD_XJ
 20882                                  %endif
 20883                                  
 20884                                  ;hkn; SS override
 20885 000032B2 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20886 000032B7 E8A712                  	call	DEVIOCALL
 20887 000032BA 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20888 000032BC B486                    	MOV	AH,86H			; Read error
 20889                                  
 20890                                  ;hkn; SS override
 20891 000032BE 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20892                                  	; MSDOS 3.3
 20893                                  	;test	di,8000h
 20894                                  	;jz	short CRDROK
 20895                                  	; MSDOS 6.0
 20896 000032C3 09FF                    	or	di,di
 20897 000032C5 7920                    	jns	short CRDROK		; no errors
 20898                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20899 000032C7 E8F01E                  	call	CHARHARD
 20900                                  
 20901                                  ; 06/02/2024 - Retrro DOS v5.0
 20902                                  %if 0
 20903                                  	MOV	DI,DX			; DS:DI is Xaddr
 20904                                  	; 04/05/2019
 20905                                  	; MSDOS 6.0
 20906                                  	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20907                                  	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20908                                  %else
 20909 000032CA 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 20910 000032CF 29F9                    	sub	cx,di			; update transfer count
 20911 000032D1 01D7                    	add	di,dx			; update pointer
 20912                                  %endif
 20913                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20914 000032D3 08C0                    	OR	AL,AL
 20915 000032D5 7410                    	JZ	short CRDROK		; Ignore
 20916 000032D7 3C03                    	CMP	AL,3
 20917 000032D9 7403                    	JZ	short CRDFERR 		; fail.
 20918 000032DB 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20919 000032DC EBD1                    	JMP	short ReadRawRetry	; Retry
 20920                                  
 20921                                  ; We have encountered a device-driver error. We have informed the user of it
 20922                                  ; and he has said for us to fail the system call.
 20923                                  
 20924                                  CRDFERR:
 20925 000032DE 5F                      	POP	DI			; Clean stack
 20926                                  DEVIOFERR:
 20927                                  
 20928                                  ;hkn; SS override
 20929 000032DF 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20930 000032E4 E93105                  	jmp	SET_ACC_ERR_DS
 20931                                  
 20932                                  CRDROK:
 20933 000032E7 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20934 000032E8 89D7                    	MOV	DI,DX
 20935                                  
 20936                                  ;hkn; SS override
 20937 000032EA 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20938                                  	;JMP	SHORT ENDRDDEVJ3
 20939                                  	; 16/12/2022
 20940 000032EF EB63                    	jmp	short ENDRDDEVJ2
 20941                                  
 20942                                  ; We are going to do a cooked read on some character device. There is a
 20943                                  ; problem here, what does the data look like? Is it a terminal device, line
 20944                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20945                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20946                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20947                                  ; included in data). this "simulates" the way con works in cooked mode
 20948                                  ; reading one line at a time. With file data, however, the lines will look
 20949                                  ; like, LF line CR. This is a little weird.
 20950                                  
 20951                                  NOTRDCON:
 20952                                  	;MOV	AX,ES
 20953                                  	;MOV	DS,AX
 20954                                  	; 07/02/2024
 20955 000032F1 06                      	push	es
 20956 000032F2 1F                      	pop	ds
 20957                                  
 20958                                  ; 07/02/2024
 20959                                  %if 0
 20960                                  	MOV	BX,DI
 20961                                  	; 06/02/2024 ; *
 20962                                  	;;XOR	DX,DX
 20963                                  	;;MOV	AX,DX
 20964                                  	;; 06/02/2024
 20965                                  	;xor	ax,ax
 20966                                  	;cwd
 20967                                  	PUSH	CX
 20968                                  	MOV	CX,1
 20969                                  	;call	SETREAD
 20970                                  	; 06/02/2024 ; *
 20971                                  	call	SETREAD_X
 20972                                  	POP	CX
 20973                                  %else
 20974 000032F3 51                      	push	cx
 20975 000032F4 B90100                  	mov	cx,1
 20976 000032F7 E8DD12                  	call	SETREAD_XJ
 20977 000032FA 59                      	pop	cx
 20978                                  %endif
 20979                                  
 20980                                  ;hkn; SS override
 20981 000032FB 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20982                                  	;lds	si,[si+7]
 20983 00003300 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20984                                  DVRDLP:
 20985 00003303 E8991C                  	call	DSKSTATCHK
 20986 00003306 E85B12                  	call	DEVIOCALL2
 20987 00003309 57                      	PUSH	DI			; Save "count" done
 20988 0000330A B486                    	MOV	AH,86H
 20989                                  
 20990                                  ;hkn; SS override
 20991 0000330C 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20992                                  	
 20993                                  	; MSDOS 3.3
 20994                                  	;test	di,8000h
 20995                                  	;jz	short CRDOK
 20996                                  	; MSDOS 6.0
 20997 00003311 09FF                    	or	di,di
 20998 00003313 7917                    	jns	short CRDOK
 20999                                  	
 21000 00003315 E8A21E                  	call	CHARHARD
 21001 00003318 5F                      	POP	DI
 21002                                  
 21003                                  ;hkn; SS override
 21004 00003319 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21005 00003320 3C01                    	CMP	AL,1
 21006 00003322 74DF                    	JZ	short DVRDLP		; Retry
 21007 00003324 3C03                    	CMP	AL,3
 21008 00003326 74B7                    	JZ	short DEVIOFERR		; FAIL
 21009 00003328 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 21010 0000332A EB12                    	JMP	SHORT DVRDIGN
 21011                                  
 21012                                  CRDOK:
 21013 0000332C 5F                      	POP	DI
 21014                                  
 21015                                  ;hkn; SS override
 21016 0000332D 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 21017                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 21018 00003333 751F                    	JNZ	short ENDRDDEVJ2
 21019                                  	; 16/12/2022
 21020                                  	;jnz	short ENDRDDEV ; 24/07/2019
 21021                                  
 21022 00003335 1E                      	PUSH	DS
 21023                                  
 21024                                  ;hkn; SS override
 21025 00003336 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21026 0000333B 8A05                    	MOV	AL,[DI]			; Get the character we just read
 21027 0000333D 1F                      	POP	DS
 21028                                  DVRDIGN:
 21029                                  
 21030                                  ;hkn; SS override
 21031 0000333E 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 21032 00003343 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21033 0000334A 47                      	INC	DI			; Next character
 21034 0000334B 3C1A                    	CMP	AL,1Ah			; ^Z?
 21035                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 21036 0000334D 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 21037                                  	; 16/12/2022
 21038                                  	;jz	short ENDRDDEV ; 24/07/2019	
 21039 0000334F 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 21040 00003351 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 21041 00003353 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 21042                                  					;  AX=FFFF which is not likely
 21043                                  ENDRDDEVJ2:
 21044                                  	; 16/12/2022
 21045                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 21046                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21047 00003354 EB78                    	jmp	ENDRDDEV
 21048                                  
 21049                                  	; 04/05/2019
 21050                                  
 21051                                  	; MSDOS 6.0
 21052                                  ;SR;
 21053                                  ;Polling code for raw read on CON when WIN386 is present
 21054                                  ;
 21055                                  ;At this point -- ds:di is transfer address
 21056                                  ;		  cx is count
 21057                                  
 21058                                  do_polling:
 21059                                  
 21060                                  ; 07/02/2024
 21061                                  %if 0
 21062                                  	mov	bx,di			;ds:bx is Xfer address
 21063                                  	; 06/02/2024 ; *
 21064                                  	;xor	ax,ax
 21065                                  	;;mov	dx,ax
 21066                                  	;; 06/02/2024
 21067                                  	;cwd
 21068                                  	;call	SETREAD			;prepare device packet
 21069                                  	; 06/02/2024 ; *
 21070                                  	call	SETREAD_X
 21071                                  %else
 21072 00003356 E87E12                  	call	SETREAD_XJ
 21073                                  %endif
 21074                                  
 21075                                  do_io:
 21076                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 21077                                  
 21078 00003359 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 21079 0000335E 1E                      	push	ds
 21080 0000335F 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 21081 00003364 E8FA11                  	call	DEVIOCALL		;call device driver
 21082 00003367 1F                      	pop	ds
 21083                                  	
 21084                                  	;test	word [es:bx+3],8000h
 21085                                  	; 16/12/2022
 21086                                  	;test	byte [es:bx+4],80h
 21087 00003368 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 21088                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 21089 0000336D 7413                    	jz	short check_busy	;no
 21090                                  
 21091 0000336F 1E                      	push	ds
 21092 00003370 89FA                    	mov	dx,di
 21093                                  
 21094                                  invoke_charhard:	; 07/02/2024
 21095                                  	;invoke charhard		;invoke int 24h handler
 21096 00003372 E8451E                  	call	CHARHARD
 21097 00003375 89D7                    	mov	di,dx
 21098 00003377 08C0                    	or	al,al
 21099 00003379 744D                    	jz	short pop_done_read	;ignore by user, assume read done
 21100 0000337B 3C03                    	cmp	al,3
 21101 0000337D 7438                    	jz	short devrderr		;user asked to fail
 21102 0000337F 1F                      	pop	ds
 21103 00003380 EBD7                    	jmp	short do_io		;user asked to retry
 21104                                  
 21105                                  check_busy:
 21106                                  	;test	word [es:bx+3],200h
 21107                                  	; 16/12/2022
 21108 00003382 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 21109                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 21110 00003387 7537                    	jnz	short no_char		;yes, no character available
 21111                                  
 21112                                  ;Character is available. Read in 1 character at a time until all characters
 21113                                  ;are read in or no character is available
 21114                                  
 21115 00003389 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 21116 0000338E 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 21117 00003394 1E                      	push	ds
 21118 00003395 36C536[9E05]            	lds	si,[ss:THISSFT]
 21119 0000339A E8C411                  	call	DEVIOCALL
 21120                                  
 21121 0000339D 89FA                    	mov	dx,di
 21122 0000339F B486                    	mov	ah,86h
 21123                                  	;mov	di,[es:bx+3]
 21124 000033A1 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 21125 000033A5 F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 21126                                  	;jz	short next_char		;no,read next character
 21127                                  	; 07/02/2024
 21128 000033A9 75C7                    	jnz	short invoke_charhard
 21129                                  
 21130                                  ; 07/02/2024
 21131                                  %if 0
 21132                                  	;invoke	charhard		;invoke int 24h handler
 21133                                  	call	CHARHARD
 21134                                  	mov	di,dx			;restore di
 21135                                  	or	al,al			;
 21136                                  	jz	short pop_done_read	;ignore by user,assume read is done
 21137                                  	cmp	al,3
 21138                                  	jz	short devrderr		;user issued a 'fail',indicate error
 21139                                  	pop	ds
 21140                                  	jmp	short do_io		;user issued a retry
 21141                                  %endif
 21142                                  
 21143                                  next_char:
 21144 000033AB 1F                      	pop	ds
 21145 000033AC 89D7                    	mov	di,dx
 21146 000033AE 49                      	dec	cx			;decrement count
 21147                                  	;jcxz	done_read		;all characters read in
 21148                                  	; 07/02/2024
 21149 000033AF 7418                    	jz	short done_read
 21150 000033B1 26FF470E                	inc	word [es:bx+14]		;update transfer address
 21151 000033B5 EBA2                    	jmp	short do_io		;read next character in
 21152                                  
 21153                                  devrderr:
 21154 000033B7 5F                      	pop	di			;discard segment address
 21155 000033B8 36C43E[9E05]            	les	di,[ss:THISSFT]
 21156                                  	;transfer SET_ACC_ERR_DS	;indicate error
 21157 000033BD E95804                  	jmp     SET_ACC_ERR_DS
 21158                                  
 21159                                  no_char:
 21160                                  ;Since no character is available, we let win386 switch the VM out
 21161                                  
 21162 000033C0 50                      	push	ax
 21163 000033C1 B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 21164 000033C3 CD2A                    	int	2Ah			;indicate idle to WIN386
 21165                                  
 21166                                  ;When control returns from WIN386, we continue the raw read
 21167                                  
 21168 000033C5 58                      	pop	ax
 21169 000033C6 EB91                    	jmp	do_io
 21170                                  
 21171                                  pop_done_read:
 21172 000033C8 1F                      	pop	ds
 21173                                  done_read:
 21174 000033C9 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 21175                                  
 21176                                  	; 16/12/2022
 21177                                  
 21178                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21179                                  	;jmp	ENDRDDEV ; 04/05/2019
 21180                                  
 21181                                  	; 04/05/2019 - Retro DOS v4.0
 21182                                  ENDRDDEV:
 21183 000033CE 16                      	push	ss
 21184 000033CF 1F                      	pop	ds
 21185 000033D0 EB1F                    	jmp	short endrddev1
 21186                                  
 21187                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21188                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21189                                  
 21190                                  TRANBUF:
 21191 000033D2 AC                      	LODSB
 21192 000033D3 AA                      	STOSB
 21193 000033D4 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 21194 000033D6 7503                    	JNZ	short NORMCH
 21195 000033D8 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 21196                                  NORMCH:
 21197 000033DB 3C0A                    	CMP	AL,c_LF ; 0Ah
 21198 000033DD E0F3                    	LOOPNZ	TRANBUF
 21199 000033DF 7507                    	JNZ	short ENDRDCON
 21200 000033E1 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 21201 000033E3 E85BE2                  	call	OUTT		; Transmit linefeed
 21202 000033E6 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 21203                                  ENDRDCON:
 21204                                  ;hkn; SS is DOSDATA
 21205 000033E8 16                      	push	ss
 21206 000033E9 1F                      	pop	ds
 21207 000033EA E835FE                  	CALL	SWAPBACK
 21208 000033ED 8936[2200]              	MOV	[CONTPOS],SI
 21209                                  
 21210                                  	; 16/12/2022
 21211                                  ;ENDRDDEV:
 21212                                  ;;hkn; SS is DOSDATA
 21213                                  ;	push	ss
 21214                                  ;	pop	ds
 21215                                  endrddev1:	; 04/05/2019
 21216 000033F1 893E[B805]              	MOV	[NEXTADD],DI
 21217 000033F5 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21218 000033F7 C43E[9E05]              	LES	DI,[THISSFT]
 21219                                  	;and	byte [es:di+5],0BFh
 21220 000033FB 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 21221                                  				; Mark as no more data available
 21222                                  SETSFTC:
 21223                                  	; 31/07/2019
 21224                                  	;call	SETSFT
 21225                                  	;retn
 21226 00003400 E9A904                  	jmp	SETSFT
 21227                                  
 21228                                  ; 16/12/2022
 21229                                  %if 0
 21230                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21231                                  ENDRDDEV:
 21232                                  ;hkn; SS is DOSDATA
 21233                                  	push	ss
 21234                                  	pop	ds
 21235                                  	MOV	[NEXTADD],DI
 21236                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21237                                  	LES	DI,[THISSFT]
 21238                                  	;and	byte [es:di+5],0BFh
 21239                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 21240                                  				; Mark as no more data available
 21241                                  SETSFTC:
 21242                                  	;call	SETSFT
 21243                                  	;retn
 21244                                  	jmp	SETSFT	
 21245                                  %endif
 21246                                  
 21247                                  READCON:
 21248 00003403 E822FE                  	CALL	SWAPCON
 21249 00003406 8B36[2200]              	MOV	SI,[CONTPOS]
 21250 0000340A 09F6                    	OR	SI,SI
 21251 0000340C 75C4                    	JNZ	short TRANBUF
 21252 0000340E 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 21253 00003413 7406                    	JZ	short GETBUF
 21254 00003415 C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 21255                                  GETBUF:
 21256 0000341B 51                      	PUSH	CX
 21257 0000341C 06                      	PUSH	ES
 21258 0000341D 57                      	PUSH	DI
 21259                                  
 21260                                  ;hkn; CONBUF is in DOSDATA
 21261 0000341E BA[7B02]                	MOV	DX,CONBUF
 21262                                  
 21263 00003421 E898DF                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 21264 00003424 5F                      	POP	DI
 21265 00003425 07                      	POP	ES
 21266 00003426 59                      	POP	CX
 21267                                  
 21268                                  ;hkn; CONBUF is in DOSDATA
 21269 00003427 BE[7D02]                	MOV	SI,CONBUF+2
 21270                                  
 21271 0000342A 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 21272 0000342D 75A3                    	JNZ	short TRANBUF
 21273 0000342F B01A                    	MOV	AL,1AH
 21274 00003431 AA                      	STOSB
 21275 00003432 4F                      	DEC	DI
 21276 00003433 B00A                    	MOV	AL,c_LF
 21277 00003435 E809E2                  	call	OUTT		; Send linefeed
 21278 00003438 31F6                    	XOR	SI,SI
 21279 0000343A EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 21280                                  
 21281                                  ; 24/07/2018 - Retro DOS v3.0
 21282                                  
 21283                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 21284                                  ;---------------------------------------------------------------------------
 21285                                  ;
 21286                                  ; Procedure Name : DOS_WRITE
 21287                                  ;
 21288                                  ; Inputs:
 21289                                  ;	ThisSFT set to the SFT for the file being used
 21290                                  ;	[DMAADD] contains transfer address
 21291                                  ;	CX = No. of bytes to write
 21292                                  ; Function:
 21293                                  ;	Perform write operation
 21294                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 21295                                  ;		to current sf_position
 21296                                  ; Outputs:
 21297                                  ;    Carry clear
 21298                                  ;	SFT Position and cluster pointers updated
 21299                                  ;	CX = No. of bytes written
 21300                                  ;	ES:DI point to SFT
 21301                                  ;    Carry set
 21302                                  ;	AX is error code
 21303                                  ;	CX = 0
 21304                                  ;	ES:DI point to SFT
 21305                                  ; DS preserved, all other registers destroyed
 21306                                  ;---------------------------------------------------------------------------
 21307                                  
 21308                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 21309                                  ;hkn; point to DOSDATA.
 21310                                  
 21311                                  ; 04/05/2019 - Retro DOS v4.0
 21312                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 21313                                  
 21314                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21315                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 21316                                  
 21317                                  DOS_WRITE:
 21318 0000343C C43E[9E05]              	LES	DI,[THISSFT]
 21319                                  	;mov	al,[ES:DI+2]
 21320 00003440 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 21321                                  	;and	al,0Fh
 21322 00003444 240F                    	AND	AL,access_mask
 21323                                  	;cmp	al,0
 21324 00003446 3C00                    	CMP	AL,open_for_read
 21325 00003448 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 21326                                  BadMode:
 21327 0000344A E9CD03                  	jmp	SET_ACC_ERR
 21328                                  
 21329                                  ; NOTE: The following check for writting to a Read Only File is performed
 21330                                  ;	    ONLY on FCBs!!!!
 21331                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 21332                                  ;	    of a read only file which can then be written to.
 21333                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 21334                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 21335                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 21336                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 21337                                  ;	    to a read-only file.
 21338                                  
 21339                                  Check_FCB_RO:
 21340                                  	;;test	word [es:di+2],8000h
 21341                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21342                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 21343                                  	
 21344                                  	;test	byte [es:di+3],80h
 21345 0000344D 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21346 00003452 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 21347                                  
 21348                                  	;test	byte [es:di+4],1
 21349 00003454 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 21350 00003459 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 21351                                  WRITE_NO_MODE:
 21352 0000345B E8A402                  	call	SETUP
 21353 0000345E E8E3DD                  	call	IsSFTNet
 21354 00003461 7406                    	JZ	short LOCAL_WRITE
 21355                                  
 21356                                  ;IF NOT Installed
 21357                                  ;	transfer NET_WRITE
 21358                                  ;ELSE
 21359                                  	;mov	ax,1109h
 21360 00003463 B80911                  	MOV	AX,(MultNET<<8)|9
 21361 00003466 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 21362                                  			; ES:DI -> SFT
 21363                                  			; SFT DPB field -> DPB of drive containing file
 21364                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 21365                                  			; Return: CF set on error, CX = bytes written
 21366 00003468 C3                      	retn
 21367                                  ;ENDIF
 21368                                  
 21369                                  LOCAL_WRITE:
 21370                                  	;;test	word [es:di+5],80h
 21371                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 21372                                  	;jnz	short WRTDEV
 21373                                  
 21374                                  	;test	byte [es:di+5],80h
 21375 00003469 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 21376 0000346E 756D                    	jnz	short WRTDEV
 21377                                  
 21378                                  	;mov	byte [EXTERR_LOCUS],2
 21379 00003470 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 21380 00003475 E875DE                  	call	ECritDisk
 21381                                  
 21382 00003478 E8E104                  	call	DISKWRITE
 21383                                  
 21384                                  	; 04/05/2019 - Retro DOS v4.0
 21385                                  
 21386                                  	; MSDOS 6.0
 21387                                  ; Extended Open
 21388 0000347B 7210                    	JC	short nocommit
 21389                                  	
 21390 0000347D C43E[9E05]              	LES	DI,[THISSFT]
 21391                                  	
 21392                                  	;;test	word [ES:DI+2],4000h
 21393                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 21394                                  	;JZ	short nocommit
 21395                                  	
 21396                                  	;test	byte [ES:DI+3],40h
 21397 00003481 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 21398 00003486 7405                    	JZ	short nocommit
 21399                                  	
 21400 00003488 51                      	PUSH	CX
 21401 00003489 E85EFB                  	call	DOS_COMMIT
 21402 0000348C 59                      	POP	CX
 21403                                  nocommit:
 21404                                  ; Extended Open
 21405                                  	;call	LCritDisk
 21406                                  	;retn
 21407                                  	; 18/12/2022
 21408 0000348D E978DE                  	jmp	LCritDisk
 21409                                  
 21410                                  DVWRTRAW:
 21411 00003490 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 21412 00003492 E88311                  	call	SETWRITE
 21413 00003495 1E                      	PUSH	DS			; Save seg of transfer
 21414                                  
 21415                                  ;hkn; SS override
 21416 00003496 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21417 0000349B E8C310                  	call	DEVIOCALL		; DS:SI -> DEVICE
 21418                                  
 21419 0000349E 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 21420 000034A0 B487                    	MOV	AH,87H
 21421                                  
 21422                                  ;hkn; SS override
 21423 000034A2 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21424                                  
 21425                                  	; MSDOS 3.3
 21426                                  	;test	di,8000h
 21427                                  	;jz	short CWRTROK
 21428                                  
 21429                                  	; MSDOS 6.0
 21430 000034A7 09FF                    	or	di,di
 21431 000034A9 791F                    	jns	short CWRTROK
 21432                                  	
 21433                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21434 000034AB E80C1D                  	call	CHARHARD
 21435                                  
 21436                                  	; 04/05/2019  - Retro DOS v4.0
 21437                                  
 21438                                  	; MSDOS 6.0
 21439                                  	;sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 21440                                  	; 08/02/2024
 21441 000034AE 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 21442 000034B3 29F9                    	sub	cx,di
 21443 000034B5 89D3                    	mov	bx,dx			; number of chars xferred	M065
 21444                                  	;add	bx,[ss:CALLSCNT]	;				M065
 21445 000034B7 01FB                    	add	bx,di
 21446 000034B9 89DF                    	mov	di,bx			;				M065
 21447                                  	
 21448                                  	; MSDOS 3.3
 21449                                  	;MOV	BX,DX			; Recall transfer addr		M065
 21450                                  
 21451                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21452 000034BB 08C0                    	OR	AL,AL
 21453 000034BD 740B                    	JZ	short CWRTROK 		; Ignore
 21454 000034BF 3C03                    	CMP	AL,3
 21455 000034C1 7403                    	JZ	short CWRFERR
 21456 000034C3 1F                      	POP	DS			; Recover saved seg of transfer
 21457 000034C4 EBCA                    	JMP	short DVWRTRAW		; Try again
 21458                                  CWRFERR:
 21459 000034C6 58                      	POP	AX			; Chuck saved seg of transfer
 21460 000034C7 E914FE                  	JMP	CRDFERR 		; Will pop one more stack element
 21461                                  CWRTROK:
 21462 000034CA 58                      	POP	AX			; Chuck saved seg of transfer
 21463 000034CB 1F                      	POP	DS
 21464 000034CC A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 21465                                  ENDWRDEV:
 21466 000034CF C43E[9E05]              	LES	DI,[THISSFT]
 21467 000034D3 89C1                    	MOV	CX,AX
 21468                                  	;call	ADDREC
 21469                                  	;retn
 21470                                  	; 16/12/2022
 21471                                  	; 10/06/2019
 21472 000034D5 E9F503                  	jmp	ADDREC
 21473                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21474                                  	;call	ADDREC
 21475                                  	;retn
 21476                                  	
 21477                                  WRTNUL:
 21478 000034D8 89CA                    	MOV	DX,CX			; Entire transfer done
 21479                                  WRTCOOKJ:
 21480 000034DA E98D00                  	JMP	WRTCOOKDONE
 21481                                  WRTDEV:
 21482                                  	;mov	byte [EXTERR_LOCUS],4
 21483 000034DD C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 21484                                  	;or	byte [es:di+5],40h
 21485 000034E2 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 21486                                  					; Reset EOF for input
 21487                                  	;mov	bl,[es:di+5]
 21488 000034E7 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 21489 000034EB 31C0                    	XOR	AX,AX
 21490 000034ED E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 21491 000034EF 1E                      	PUSH	DS
 21492 000034F0 88D8                    	MOV	AL,BL
 21493 000034F2 C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 21494 000034F6 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 21495 000034F8 31D2                    	XOR	DX,DX			; Set starting point
 21496                                  	;test	al,20h
 21497 000034FA A820                    	test	AL,devid_device_raw	; Raw?
 21498                                  	;JZ	short TEST_DEV_CON
 21499                                  	;JMP	DVWRTRAW
 21500                                  	; 16/12/2022
 21501 000034FC 7592                    	jnz	short DVWRTRAW
 21502                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21503                                  	;JZ	short TEST_DEV_CON
 21504                                  	;JMP	short DVWRTRAW
 21505                                  
 21506                                  TEST_DEV_CON:
 21507                                  	;test	al,2
 21508 000034FE A802                    	test	AL,devid_device_con_out ; Console output device?
 21509 00003500 756E                    	jnz	short WRITECON
 21510                                  	;test	al,4
 21511 00003502 A804                    	test	AL,devid_device_null
 21512 00003504 75D2                    	JNZ	short WRTNUL
 21513 00003506 89D0                    	MOV	AX,DX
 21514 00003508 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 21515 0000350B 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 21516 0000350D 51                      	PUSH	CX
 21517 0000350E B90100                  	MOV	CX,1
 21518 00003511 E80411                  	call	SETWRITE
 21519 00003514 59                      	POP	CX
 21520                                  
 21521                                  ;hkn; SS override
 21522 00003515 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21523                                  ;
 21524                                  ;SR; Removed X25 support from here
 21525                                  ;
 21526                                  	;lds	si,[si+7]
 21527 0000351A C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 21528                                  DVWRTLP:
 21529 0000351D E87F1A                  	call	DSKSTATCHK
 21530 00003520 E84110                  	call	DEVIOCALL2
 21531 00003523 57                      	PUSH	DI
 21532 00003524 B487                    	MOV	AH,87H
 21533                                  
 21534                                  ;hkn; SS override
 21535 00003526 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21536                                  	
 21537                                  	; MSDOS 3.3
 21538                                  	;test	di,8000h
 21539                                  	;jz	short CWROK
 21540                                  
 21541                                  	; MSDOS 6.0
 21542 0000352B 09FF                    	or	di,di
 21543 0000352D 7916                    	jns	short CWROK
 21544                                  	
 21545                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21546 0000352F E8881C                  	call	CHARHARD
 21547 00003532 5F                      	POP	DI
 21548                                  
 21549                                  ;hkn; SS override
 21550 00003533 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21551 0000353A 3C01                    	CMP	AL,1
 21552 0000353C 74DF                    	JZ	short DVWRTLP 	; Retry
 21553 0000353E 08C0                    	OR	AL,AL
 21554 00003540 740C                    	JZ	short DVWRTIGN	; Ignore
 21555                                  	; 10/08/2018
 21556 00003542 E999FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 21557                                  CWROK:
 21558 00003545 5F                      	POP	DI
 21559                                  
 21560                                  ;hkn; SS override
 21561 00003546 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 21562 0000354C 741C                    	JZ	short WRTCOOKDONE
 21563                                  DVWRTIGN:
 21564 0000354E 42                      	INC	DX
 21565                                  
 21566                                  ;hkn; SS override for CALLXAD
 21567 0000354F 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 21568 00003554 47                      	INC	DI
 21569 00003555 1E                      	PUSH	DS
 21570 00003556 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21571 0000355B 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 21572 0000355E 1F                      	POP	DS
 21573 0000355F 7409                    	JZ	short WRTCOOKDONE
 21574                                  
 21575                                  ;hkn; SS override
 21576 00003561 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21577 00003568 E2B3                    	LOOP	DVWRTLP
 21578                                  WRTCOOKDONE:
 21579 0000356A 89D0                    	MOV	AX,DX
 21580 0000356C 1F                      	POP	DS
 21581 0000356D E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 21582                                  
 21583                                  WRITECON:
 21584 00003570 1E                      	PUSH	DS
 21585                                  
 21586                                  ;hkn; SS is DOSDATA
 21587 00003571 16                      	push	ss
 21588 00003572 1F                      	pop	ds
 21589 00003573 E8B2FC                  	CALL	SWAPCON
 21590 00003576 1F                      	POP	DS
 21591 00003577 89DE                    	MOV	SI,BX
 21592 00003579 51                      	PUSH	CX
 21593                                  WRCONLP:
 21594 0000357A AC                      	LODSB
 21595 0000357B 3C1A                    	CMP	AL,1Ah		; ^Z?
 21596 0000357D 7405                    	JZ	short CONEOF
 21597 0000357F E8BFE0                  	call	OUTT
 21598 00003582 E2F6                    	LOOP	WRCONLP
 21599                                  CONEOF:
 21600 00003584 58                      	POP	AX			; Count
 21601 00003585 29C8                    	SUB	AX,CX			; Amount actually written
 21602 00003587 1F                      	POP	DS
 21603 00003588 E897FC                  	CALL	SWAPBACK
 21604 0000358B E941FF                  	JMP	ENDWRDEV
 21605                                  
 21606                                  ;---------------------------------------------------------------------------
 21607                                  ;
 21608                                  ; Procedure Name : get_io_sft
 21609                                  ;
 21610                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 21611                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 21612                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 21613                                  ;
 21614                                  ;---------------------------------------------------------------------------
 21615                                  
 21616                                  ; 04/05/2019 - Retro DOS v4.0
 21617                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 21618                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21619                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 21620                                  
 21621                                  GET_IO_SFT:
 21622                                  	;test	byte [SS:CONSWAP],0FFh
 21623 0000358E 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 21624 00003594 7512                    	JNZ	short GetRedir
 21625                                  GetNormal:
 21626 00003596 16                      	push	ss
 21627 00003597 1F                      	pop	ds
 21628 00003598 06                      	PUSH	ES
 21629 00003599 57                      	PUSH	DI
 21630 0000359A E8A12F                  	call	SFFromHandle
 21631 0000359D 7206                    	JC	short RET44P
 21632 0000359F 8CC6                    	MOV	SI,ES
 21633 000035A1 8EDE                    	MOV	DS,SI
 21634 000035A3 89FE                    	MOV	SI,DI
 21635                                  RET44P:
 21636 000035A5 5F                      	POP	DI
 21637 000035A6 07                      	POP	ES
 21638 000035A7 C3                      	retn
 21639                                  GetRedir:
 21640 000035A8 83FB01                  	CMP	BX,1
 21641 000035AB 77E9                    	JA	short GetNormal
 21642 000035AD 36C536[E605]            	LDS	SI,[SS:CONSFT]
 21643 000035B2 F8                      	CLC
 21644                                  get_io_sft_retn:
 21645 000035B3 C3                      	retn
 21646                                  
 21647                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 21648                                  ;---------------------------------------------------------------------------
 21649                                  ;
 21650                                  ; Procedure Name : DIRREAD
 21651                                  ;
 21652                                  ; Inputs:
 21653                                  ;	AX = Directory block number (relative to first block of directory)
 21654                                  ;	ES:BP = Base of drive parameters
 21655                                  ;	[DIRSEC] = First sector of first cluster of directory
 21656                                  ;	[CLUSNUM] = Next cluster
 21657                                  ;	[CLUSFAC] = Sectors/Cluster
 21658                                  ; Function:
 21659                                  ;	Read the directory block into [CURBUF].
 21660                                  ; Outputs:
 21661                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 21662                                  ;	[SECCLUSPOS] Set
 21663                                  ;	ES:BP unchanged
 21664                                  ;	[CURBUF] Points to Buffer with dir sector
 21665                                  ;	Carry set if error (user said FAIL to I 24)
 21666                                  ; DS preserved, all other registers destroyed.
 21667                                  ;---------------------------------------------------------------------------
 21668                                  
 21669                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 21670                                  
 21671                                  DIRREAD:
 21672                                  
 21673                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 21674                                  ; the same as what is in the DPB! In the case of the root directory, we have
 21675                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 21676                                  ; by DIRStart = 0.
 21677                                  
 21678 000035B4 31D2                    	XOR	DX,DX
 21679                                  	;CMP	word [DIRSTART],0
 21680                                  	; 21/09/2023
 21681 000035B6 3916[C205]              	cmp	[DIRSTART],dx ; 0
 21682 000035BA 7503                    	jnz	short SubDir
 21683 000035BC 92                      	XCHG	AX,DX
 21684 000035BD EB0C                    	JMP	short DoRead
 21685                                  
 21686                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 21687                                  
 21688                                  SubDir:
 21689 000035BF 88C2                    	MOV	DL,AL
 21690                                  	;and	dl,[es:bp+4]
 21691 000035C1 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 21692                                  
 21693                                  ;	(DX) = sector-in-cluster
 21694                                  
 21695                                  	;mov	cl,[es:bp+5]
 21696 000035C5 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21697 000035C9 D3E8                    	SHR	AX,CL
 21698                                  
 21699                                  ;	(DX) = position in cluster
 21700                                  ;	(AX) = number of clusters to skip
 21701                                  
 21702                                  DoRead:
 21703 000035CB 8816[7305]              	MOV	[SECCLUSPOS],DL
 21704 000035CF 89C1                    	MOV	CX,AX
 21705 000035D1 88D4                    	MOV	AH,DL
 21706                                  
 21707                                  ;	(CX) = number of clusters to skip.
 21708                                  ;	(AH) = remainder
 21709                                  
 21710                                  	; 04/05/2019 - Retro DOS v4.0
 21711                                  	 
 21712                                  	; MSDOS 6.0
 21713                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 21714                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 21715                                  	;MOV	DX,[DIRSEC]
 21716                                  	;ADD	DL,AH
 21717                                  	;ADC	DH,0
 21718                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 21719                                  	; 21/09/2023
 21720 000035D3 31DB                    	xor	bx,bx ; 0
 21721 000035D5 8B16[BE05]              	mov	dx,[DIRSEC]
 21722 000035D9 00E2                    	add	dl,ah
 21723 000035DB 10DE                    	adc	dh,bl ; 0
 21724 000035DD 131E[C005]              	adc	bx,[DIRSEC+2]
 21725 000035E1 891E[0706]              	mov	[HIGH_SECTOR],bx
 21726                                  
 21727 000035E5 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21728 000035E9 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21729 000035ED E319                    	JCXZ	FIRSTCLUSTER
 21730                                  SKPCLLP:
 21731 000035EF E8311E                  	call	UNPACK
 21732 000035F2 72BF                    	jc	short get_io_sft_retn
 21733 000035F4 87DF                    	XCHG	BX,DI
 21734 000035F6 E8131E                  	call	IsEOF			; test for eof based on fat size
 21735 000035F9 7302                    	JAE	short HAVESKIPPED
 21736 000035FB E2F2                    	LOOP	SKPCLLP
 21737                                  HAVESKIPPED:
 21738 000035FD 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21739 00003601 89FA                    	MOV	DX,DI
 21740 00003603 88E3                    	MOV	BL,AH
 21741 00003605 E8D916                  	call	FIGREC
 21742                                  
 21743                                  	;entry	FIRSTCLUSTER
 21744                                  
 21745                                  FIRSTCLUSTER:
 21746                                  	; 22/09/2023
 21747                                  	;;mov	byte [ALLOWED],18h
 21748                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 21749                                  	;XOR	AL,AL ; *	; Indicate pre-read
 21750                                  	;call	GETBUFFR
 21751 00003608 E81D22                  	call	GETBUFFER ; *	; pre-read
 21752 0000360B 72A6                    	jc	short get_io_sft_retn
 21753                                  
 21754                                  	;entry	SET_BUF_AS_DIR
 21755                                  
 21756                                  SET_BUF_AS_DIR:
 21757                                  
 21758                                  ;	Set the type of CURBUF to be a directory sector.
 21759                                  ;	Only flags are modified.
 21760                                  
 21761 0000360D 1E                      	PUSH	DS
 21762 0000360E 56                      	PUSH	SI
 21763 0000360F C536[E205]              	LDS	SI,[CURBUF]
 21764                                  	;or	byte [si+5],4
 21765 00003613 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21766 00003617 5E                      	POP	SI
 21767 00003618 1F                      	POP	DS
 21768                                  dirread_retn:
 21769 00003619 C3                      	retn
 21770                                  
 21771                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21772                                  ;----------------------------------------------------------------------------
 21773                                  ;
 21774                                  ; Procedure Name : FATSECRD
 21775                                  ; Inputs:
 21776                                  ;	Same as DREAD
 21777                                  ;	DS:BX = Transfer address
 21778                                  ;	CX = Number of sectors
 21779                                  ;	DX = Absolute record number
 21780                                  ;	ES:BP = Base of drive parameters
 21781                                  ; Function:
 21782                                  ;	Calls BIOS to perform FAT read.
 21783                                  ; Outputs:
 21784                                  ;	Same as DREAD
 21785                                  ;---------------------------------------------------------------------------
 21786                                  
 21787                                  	; 04/05/2019 - Retro DOS v4.0
 21788                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21789                                  
 21790                                  FATSECRD:
 21791                                  ;hkn; SS override
 21792                                  	;mov	byte [ss:ALLOWED],18h
 21793 0000361A 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21794 00003620 89CF                    	MOV	DI,CX
 21795                                  	;mov	cl,[es:bp+8]
 21796 00003622 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21797                                  	; MSDOS 3.3
 21798                                  	;;mov	al,[es:bp+0Fh]
 21799                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE]
 21800                                  	;XOR	AH,AH
 21801                                  	; MSDOS 6.0
 21802                                  	;mov	ax,[es:bp+0Fh]
 21803 00003626 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21804 0000362A 30ED                    	XOR	CH,CH
 21805 0000362C 52                      	PUSH	DX
 21806                                  NXTFAT:
 21807                                  	; MSDOS 6.0
 21808                                  ;hkn; SS override
 21809 0000362D 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21810 00003634 51                      	PUSH	CX			;32mb
 21811 00003635 50                      	PUSH	AX
 21812 00003636 89F9                    	MOV	CX,DI
 21813 00003638 E85B00                  	call	DSKREAD
 21814 0000363B 58                      	POP	AX
 21815 0000363C 59                      	POP	CX
 21816 0000363D 7420                    	JZ	short RET41P		; Carry clear
 21817 0000363F 01C2                    	ADD	DX,AX
 21818 00003641 E2EA                    	LOOP	NXTFAT
 21819 00003643 5A                      	POP	DX
 21820 00003644 89F9                    	MOV	CX,DI
 21821                                  
 21822                                  ; NOTE FALL THROUGH
 21823                                  
 21824                                  ;Break	<DREAD -- DO A DISK READ>
 21825                                  ;---------------------------------------------------------------------------
 21826                                  ;
 21827                                  ; Procedure Name : DREAD
 21828                                  ;
 21829                                  ; Inputs:
 21830                                  ;	DS:BX = Transfer address
 21831                                  ;	CX = Number of sectors
 21832                                  ;	DX = Absolute record number	      (LOW)
 21833                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21834                                  ;	ES:BP = Base of drive parameters
 21835                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21836                                  ; Function:
 21837                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21838                                  ;	errors, will call HARDERRRW for further action.
 21839                                  ; Outputs:
 21840                                  ;	Carry set if error (currently user FAILED to INT 24)
 21841                                  ; DS,ES:BP preserved. All other registers destroyed.
 21842                                  ;---------------------------------------------------------------------------
 21843                                  
 21844                                  	;entry	DREAD
 21845                                  DREAD:
 21846 00003646 E84D00                  	call	DSKREAD
 21847 00003649 74CE                    	jz	short dirread_retn	; Carry clear
 21848                                  ;hkn; SS override
 21849 0000364B 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21850 00003651 E89500                  	call	HARDERRRW
 21851 00003654 3C01                    	CMP	AL,1			; Check for retry
 21852 00003656 74EE                    	JZ	short DREAD
 21853                                  
 21854                                  fail_ignore:	; 09/02/2024
 21855 00003658 3C03                    	CMP	AL,3			; Check for FAIL
 21856 0000365A F8                      	CLC
 21857 0000365B 7501                    	JNZ	short NO_CAR		; Ignore
 21858 0000365D F9                      	STC
 21859                                  NO_CAR:
 21860 0000365E C3                      	retn
 21861                                  RET41P: 
 21862 0000365F 5A                      	POP	DX
 21863 00003660 C3                      	retn
 21864                                  
 21865                                  ; 24/07/2018 - Retro DOS v3.0
 21866                                  
 21867                                  ;Break	<CHECK_WRITE_LOCK>
 21868                                  ;---------------------------------------------------------------------------
 21869                                  ;
 21870                                  ; Procedure Name : CHECK_WRITE_LOCK
 21871                                  ;
 21872                                  ; Inputs:
 21873                                  ;	output of SETUP
 21874                                  ;	ES:DI -> SFT
 21875                                  ; Function:
 21876                                  ;	check write lock
 21877                                  ; Outputs:
 21878                                  ;	Carry set if error
 21879                                  ;	Carry clear if ok
 21880                                  ;
 21881                                  ;----------------------------------------------------------------------------
 21882                                  
 21883                                  	; 04/05/2019 - Retro DOS v4.0
 21884                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21885                                  
 21886                                  CHECK_WRITE_LOCK:
 21887                                  	; MSDOS 6.0
 21888                                  	;test	byte [es:di+4],8
 21889 00003661 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21890                                  	;JZ	short write_cont			     ;no
 21891                                  	;;call	SET_ACC_ERR_DS
 21892                                  	;;retn
 21893                                  	;;jnz	SET_ACC_ERR_DS
 21894                                  	; 19/08/2018
 21895                                  	;jz	short write_cont
 21896                                  	;jmp	SET_ACC_ERR_DS
 21897                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21898 00003666 7403                    	JZ	short write_cont
 21899                                  	;call	SET_ACC_ERR_DS
 21900                                  	;retn
 21901                                  	; 16/12/2022
 21902 00003668 E9AD01                  	jmp	SET_ACC_ERR_DS
 21903                                  
 21904                                  write_cont:				;
 21905 0000366B 51                      	PUSH	CX			;save reg
 21906 0000366C 09C9                    	OR	CX,CX			;
 21907 0000366E 7501                    	JNZ	short Not_Truncate	;
 21908 00003670 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21909                                  Not_Truncate:				;
 21910 00003671 B080                    	MOV	AL,80H			;check write access
 21911 00003673 E80B3B                  	call	LOCK_CHECK		;check lock
 21912 00003676 59                      	POP	CX			;restore reg
 21913 00003677 7305                    	JNC	short WRITE_OK		;lock ok
 21914 00003679 E85A01                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21915 0000367C 73ED                    	JNC	short write_cont	;retry
 21916                                  WRITE_OK:				;
 21917 0000367E C3                      	retn				;
 21918                                  
 21919                                  ;Break	<CHECK_READ_LOCK>
 21920                                  ;---------------------------------------------------------------------------
 21921                                  ;
 21922                                  ; Procedure Name : CHECK_READ_LOC
 21923                                  ;
 21924                                  ; Inputs:
 21925                                  ;	ES:DI -> SFT
 21926                                  ;	output of SETUP
 21927                                  ; Function:
 21928                                  ;	check read lock
 21929                                  ; Outputs:
 21930                                  ;	Carry set if error
 21931                                  ;	Carry clear if ok
 21932                                  ;----------------------------------------------------------------------------
 21933                                  
 21934                                  CHECK_READ_LOCK:
 21935                                  	; MSDOS 6.0
 21936                                  	;test	byte [es:di+4],8
 21937 0000367F 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21938                                  	;JZ	short do_retry			   	     ; no
 21939                                  	;;call	SET_ACC_ERR
 21940                                  	;;retn
 21941                                  	;;jnz	SET_ACC_ERR
 21942                                  	; 16/12/2022
 21943                                  	; 28/07/2019
 21944 00003684 7403                    	jz	short do_retry
 21945 00003686 E99101                  	jmp	SET_ACC_ERR
 21946                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21947                                  	;JZ	short do_retry
 21948                                  	;call	SET_ACC_ERR
 21949                                  	;retn
 21950                                  do_retry:				;
 21951 00003689 30C0                    	xor	al,al			;check read access
 21952 0000368B E8F33A                  	call	LOCK_CHECK		;check lock
 21953 0000368E 7305                    	JNC	short READLOCK_OK 	;lock ok
 21954 00003690 E82301                  	call	READ_LOCK_VIOLATION	;issue I24
 21955 00003693 73F4                    	JNC	short do_retry		;retry
 21956                                  READLOCK_OK:				;
 21957                                  dw_ret_label:	; 09/02/2024
 21958 00003695 C3                      	retn				;
 21959                                  
 21960                                  ;============================================================================
 21961                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21962                                  ;============================================================================
 21963                                  ; 24/07/2018 - Retro DOS v3.0
 21964                                  ; 04/05/2019 - Retro DOS v4.0
 21965                                  
 21966                                  ;	TITLE	DISK2 - Disk utility routines
 21967                                  ;	NAME	Disk2
 21968                                  
 21969                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21970                                  ;
 21971                                  ;	DskRead
 21972                                  ;	DWRITE
 21973                                  ;	DSKWRITE
 21974                                  ;	HarderrRW
 21975                                  ;	SETUP
 21976                                  ;	BREAKDOWN
 21977                                  ;	READ_LOCK_VIOLATION
 21978                                  ;	WRITE_LOCK_VIOLATION
 21979                                  ;	DISKREAD
 21980                                  ;	SET_ACC_ERR_DS
 21981                                  ;	SET_ACC_ERR
 21982                                  ;	SETSFT
 21983                                  ;	SETCLUS
 21984                                  ;	AddRec
 21985                                  ;
 21986                                  ;	Revision history:
 21987                                  ;
 21988                                  ;		AN000 version 4.00 Jan. 1988
 21989                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21990                                  
 21991                                  ; 04/05/2019 - Retro DOS v4.0
 21992                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21993                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21994                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21995                                  
 21996                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21997                                  ;---------------------------------------------------------------------------
 21998                                  ;
 21999                                  ; Procedure Name : DSKREAD
 22000                                  ;
 22001                                  ; Inputs:
 22002                                  ;	DS:BX = Transfer addr
 22003                                  ;	CX = Number of sectors
 22004                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22005                                  ;	DX = Absolute record number	       (LOW)
 22006                                  ;	ES:BP = Base of drive parameters
 22007                                  ; Function:
 22008                                  ;	Call BIOS to perform disk read
 22009                                  ; Outputs:
 22010                                  ;	DI = CX on entry
 22011                                  ;	CX = Number of sectors unsuccessfully transfered
 22012                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 22013                                  ;	Zero set if OK (from BIOS) (carry clear)
 22014                                  ;	Zero clear if error (carry clear)
 22015                                  ; SI Destroyed, others preserved
 22016                                  ;---------------------------------------------------------------------------
 22017                                  
 22018                                  DSKREAD:
 22019 00003696 51                      	PUSH	CX
 22020                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 22021 00003697 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 22022                                  	;mov	al,[es:bp+1]
 22023 0000369B 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 22024 0000369F 53                      	PUSH	BX
 22025 000036A0 06                      	PUSH	ES
 22026 000036A1 E8410F                  	call	SETREAD
 22027 000036A4 EB22                    	JMP	short DODSKOP
 22028                                  
 22029                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 22030                                  ;--------------------------------------------------------------------------
 22031                                  ;
 22032                                  ; Procedure Name : DWRITE
 22033                                  ;
 22034                                  ; Inputs:
 22035                                  ;	DS:BX = Transfer address
 22036                                  ;	CX = Number of sectors
 22037                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22038                                  ;	DX = Absolute record number	       (LOW)
 22039                                  ;	ES:BP = Base of drive parameters
 22040                                  ;	[ALLOWED] must be set in case HARDERR called
 22041                                  ; Function:
 22042                                  ;	Calls BIOS to perform disk write. If BIOS reports
 22043                                  ;	errors, will call HARDERRRW for further action.
 22044                                  ; Output:
 22045                                  ;	Carry set if error (currently, user FAILed to I 24)
 22046                                  ; BP preserved. All other registers destroyed.
 22047                                  ;----------------------------------------------------------------------------
 22048                                  
 22049                                  	;entry	DWRITE
 22050                                  DWRITE:
 22051 000036A6 E81100                  	CALL	DSKWRITE
 22052 000036A9 74EA                    	jz	short dw_ret_label	; Carry clear (retz)
 22053                                  
 22054                                  ;hkn; SS override
 22055 000036AB 36C606[7505]01          	MOV	BYTE [SS:READOP],1	; Write
 22056 000036B1 E83500                  	call	HARDERRRW
 22057 000036B4 3C01                    	CMP	AL,1			; Check for retry
 22058 000036B6 74EE                    	JZ	short DWRITE
 22059                                  
 22060                                  ; 09/02/2024
 22061                                  %if 0
 22062                                  	CMP	AL,3			; Check for FAIL
 22063                                  	CLC
 22064                                  	JNZ	short NO_CAR2 		; Ignore
 22065                                  	STC
 22066                                  NO_CAR2:
 22067                                  dw_ret_label:
 22068                                  	retn
 22069                                  %else
 22070                                  	; 09/02/2024 - Retro DOS v4.1
 22071 000036B8 EB9E                    	jmp	short fail_ignore
 22072                                  %endif
 22073                                  
 22074                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 22075                                  ;---------------------------------------------------------------------------
 22076                                  ;
 22077                                  ; Procedure Name : DSKWRITE
 22078                                  ;
 22079                                  ; Inputs:
 22080                                  ;	DS:BX = Transfer addr
 22081                                  ;	CX = Number of sectors
 22082                                  ;	DX = Absolute record number	       (LOW)
 22083                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22084                                  ;	ES:BP = Base of drive parameters
 22085                                  ; Function:
 22086                                  ;	Call BIOS to perform disk read
 22087                                  ; Outputs:
 22088                                  ;	DI = CX on entry
 22089                                  ;	CX = Number of sectors unsuccessfully transfered
 22090                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 22091                                  ;	Zero set if OK (from BIOS) (carry clear)
 22092                                  ;	Zero clear if error (carry clear)
 22093                                  ; SI Destroyed, others preserved
 22094                                  ;
 22095                                  ;----------------------------------------------------------------------------
 22096                                  
 22097                                  	;entry	DSKWRITE
 22098                                  DSKWRITE:
 22099 000036BA 51                      	PUSH	CX
 22100                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 22101 000036BB 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 22102                                  	;mov	al,[es:bp+1]
 22103 000036BF 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 22104 000036C3 53                      	PUSH	BX
 22105 000036C4 06                      	PUSH	ES
 22106 000036C5 E8500F                  	call	SETWRITE
 22107                                  DODSKOP:
 22108 000036C8 8CD9                    	MOV	CX,DS		; Save DS
 22109 000036CA 1F                      	POP	DS		; DS:BP points to DPB
 22110 000036CB 1E                      	PUSH	DS
 22111                                  
 22112                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 22113 000036CC 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 22114 000036D0 E8910E                  	call	DEVIOCALL2
 22115                                  
 22116 000036D3 8ED9                    	MOV	DS,CX		; Restore DS
 22117 000036D5 07                      	POP	ES		; Restore ES
 22118 000036D6 5B                      	POP	BX
 22119                                  
 22120                                  ;hkn; SS override
 22121 000036D7 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 22122 000036DC 5F                      	POP	DI
 22123 000036DD 29F9                    	SUB	CX,DI
 22124 000036DF F7D9                    	NEG	CX		; Number of sectors not transferred
 22125                                  
 22126                                  ;hkn; SS override
 22127 000036E1 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 22128                                  	;test	ax,8000h
 22129                                  	; 17/12/2022
 22130                                  	;test	ah,80h
 22131 000036E5 F6C480                  	test	ah,(STERR>>8)
 22132                                  	;test	AX,STERR
 22133 000036E8 C3                      	retn
 22134                                  
 22135                                  ;Break	<HardErrRW - map extended errors and call harderr>
 22136                                  ;---------------------------------------------------------------------------
 22137                                  ;
 22138                                  ; Procedure Name : HardErrRW
 22139                                  ;
 22140                                  ; Inputs:
 22141                                  ;	AX is error code from read or write
 22142                                  ;	Other registers set as per HARDERR
 22143                                  ; Function:
 22144                                  ;	Checks the error code for special extended
 22145                                  ;	errors and maps them if needed. Then invokes
 22146                                  ;	Harderr
 22147                                  ; Outputs:
 22148                                  ;	Of HARDERR
 22149                                  ; AX may be modified prior to call to HARDERR.
 22150                                  ; No other registers altered.
 22151                                  ;
 22152                                  ;---------------------------------------------------------------------------
 22153                                  
 22154                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22155                                  HARDERRRW:
 22156                                  	;cmp	al,0Fh
 22157 000036E9 3C0F                    	CMP	AL,error_I24_wrong_disk
 22158 000036EB 7512                    	JNZ	short DO_ERR				; Nothing to do
 22159                                  
 22160                                  	; MSDOS 3.3
 22161                                  	;push	ds
 22162                                  	;push	si
 22163                                  	;lds	si,[ss:CALLVIDRW]
 22164                                  	;mov	[ss:EXTERRPT+2], ds
 22165                                  	;mov	[ss:EXTERRPT], si
 22166                                  	;pop	si
 22167                                  	;pop	ds
 22168                                  
 22169                                  	; MSDOS 6.0
 22170 000036ED 50                      	push	ax
 22171 000036EE 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 22172 000036F2 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 22173 000036F6 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 22174 000036FA 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 22175 000036FE 58                      	pop	ax
 22176                                  DO_ERR:
 22177                                  	;;call	HARDERR
 22178                                  	;;retn
 22179                                  	; 16/12/2022
 22180                                  	; 10/06/2019
 22181 000036FF E9E91A                  	jmp	HARDERR	
 22182                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22183                                  	;call	HARDERR
 22184                                  	;retn
 22185                                  
 22186                                  ; 24/07/2018 - Retro DOS v3.0
 22187                                  
 22188                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 22189                                  ;----------------------------------------------------------------------------
 22190                                  ;
 22191                                  ; Procedure Name : SETUP
 22192                                  ;
 22193                                  ; Inputs:
 22194                                  ;	ES:DI point to SFT (value also in THISSFT)
 22195                                  ;	DMAAdd contains transfer address
 22196                                  ;	CX = Byte count
 22197                                  ;	DS = DOSDATA
 22198                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 22199                                  ;		2nd of caller of caller.
 22200                                  ; Outputs:
 22201                                  ;	    CX = byte count
 22202                                  ;	    [THISDPB] = Base of drive parameters if file
 22203                                  ;		      = Pointer to device header if device or NET
 22204                                  ;	    ES:DI Points to SFT
 22205                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 22206                                  ;	    [TRANS] = 0 (No transfers yet)
 22207                                  ;	    BytPos = Byte position in file
 22208                                  ;
 22209                                  ;	The following fields are relevant to local files (not devices) only:
 22210                                  ;
 22211                                  ;	    SecPos = Position of first sector (local files only)
 22212                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 22213                                  ;	    [CLUSNUM] = First cluster (local files only)
 22214                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 22215                                  ;	    [THISDRV] = Physical unit number (local files only)
 22216                                  ;
 22217                                  ;      RETURNS ONE LEVEL UP WITH:
 22218                                  ;	   CX = 0
 22219                                  ;	   CARRY = Clear
 22220                                  ;	IF AN ERROR IS DETECTED
 22221                                  ; All other registers destroyed
 22222                                  ;----------------------------------------------------------------------------
 22223                                  
 22224                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 22225                                  
 22226                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 22227                                  
 22228                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22229                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 22230                                  
 22231                                  SETUP:
 22232                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 22233                                  
 22234                                  	;lds 	si,[es:di+7]
 22235 00003702 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 22236                                  
 22237                                  ;hkn; SS override
 22238 00003706 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 22239                                  
 22240                                  ;hkn; SS is DOSDATA
 22241 0000370B 16                      	push	ss
 22242 0000370C 1F                      	pop	ds
 22243                                  
 22244 0000370D 8936[8A05]              	MOV	[THISDPB],SI
 22245                                  
 22246 00003711 8B1E[2C03]              	MOV	BX,[DMAADD]
 22247 00003715 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 22248 00003719 C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 22249                                  	;mov	ax,[es:di+15h]
 22250 0000371E 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 22251                                  	;mov	dx,[es:di+17h]
 22252 00003722 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 22253 00003726 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 22254 0000372A A3[CE05]                	MOV	[BYTPOS],AX
 22255                                  	;test	word [es:di+5],8080h
 22256 0000372D 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 22257 00003733 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 22258 00003735 06                      	PUSH	ES
 22259 00003736 C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 22260                                  
 22261                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22262                                  	;;mov	bl,[es:bp+0]
 22263                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 22264                                  	; 05/12/2022
 22265 0000373A 268A5E00                	mov	bl,[es:bp]
 22266                                  	
 22267 0000373E 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 22268                                  	;mov	bx,[es:bp+2]
 22269 00003742 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 22270                                  
 22271                                  	;; MSDOS 3.3
 22272                                  	;cmp	dx,bx
 22273                                  	;jnb	short EOFERR
 22274                                  	;div	bx
 22275                                  	;mov	[SECPOS],ax
 22276                                  	;mov	[BYTSECPOS],dx
 22277                                  	;mov	dx,ax
 22278                                  	;;and	al,[es:bp+4]
 22279                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 22280                                  	;mov	[SECCLUSPOS],al
 22281                                  	;mov	ax,cx
 22282                                  	;;mov	cl,[es:bp+5]
 22283                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22284                                  	;shr	dx,cl
 22285                                  	;mov	[CLUSNUM],dx
 22286                                  	;pop	es
 22287                                  	;mov	cx,ax
 22288                                  
 22289                                  	; 04/05/2019 - Retro DOS v4.0
 22290                                  
 22291                                  	; MSDOS 6.0
 22292                                  ;M039: Optimized this section.
 22293 00003746 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 22294 00003747 E81A05                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 22295 0000374A 8916[CC05]              	MOV	[BYTSECPOS],DX
 22296 0000374E A3[C405]                	MOV	[SECPOS],AX
 22297 00003751 890E[C605]              	MOV	[SECPOS+2],CX
 22298 00003755 89CA                    	MOV	DX,CX
 22299                                  
 22300 00003757 89C3                    	MOV	BX,AX
 22301                                  	;and	bl,[es:bp+4]
 22302 00003759 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 22303 0000375D 881E[7305]              	MOV	[SECCLUSPOS],BL
 22304                                  
 22305 00003761 E82705                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 22306 00003764 59                      	POP	CX			;CX = byte count.
 22307 00003765 751F                    	JNZ	short EOFERR		;cluster number above 64k
 22308                                  	;cmp	ax,[es:bp+0Dh]
 22309 00003767 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 22310 0000376B 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 22311                                  
 22312 0000376D A3[BC05]                	MOV	[CLUSNUM],AX
 22313 00003770 07                      	POP	ES			; ES:DI point to SFT
 22314                                  ;M039
 22315                                  
 22316                                  NOSETSTUFF:
 22317 00003771 89C8                    	MOV	AX,CX		; AX = Byte count.
 22318 00003773 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 22319 00003777 730C                    	JNC	short setup_OK	; Must be less than 64
 22320 00003779 A1[2C03]                	MOV	AX,[DMAADD]
 22321 0000377C F7D8                    	NEG	AX		; Amount of room left in segment (know
 22322                                  				;    less than 64K since max value of CX
 22323                                  				;    is FFFF).
 22324 0000377E 7501                    	JNZ	short NoDec
 22325 00003780 48                      	DEC	AX
 22326                                  NoDec:
 22327 00003781 89C1                    	MOV	CX,AX		; Can do this much
 22328 00003783 E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 22329                                  setup_OK:
 22330 00003785 C3                      	retn
 22331                                  
 22332                                  EOFERR:
 22333 00003786 07                      	POP	ES		; ES:DI point to SFT
 22334 00003787 31C9                    	XOR	CX,CX		; No bytes read
 22335                                  ;;;;;;;;;;; 7/18/86
 22336                                  	; MSDOS 3.3
 22337                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 22338                                  ;;;;;;;;;;;
 22339                                  NOROOM:
 22340 00003789 5B                      	POP	BX		; Kill return address
 22341 0000378A F8                      	CLC
 22342 0000378B C3                      	retn			; RETURN TO CALLER OF CALLER
 22343                                  
 22344                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 22345                                  ;---------------------------------------------------------------------------
 22346                                  ;
 22347                                  ; Procedure Name : BREAKDOWN
 22348                                  ;
 22349                                  ; Inputs:
 22350                                  ;	CX = Length of disk transfer in bytes
 22351                                  ;	ES:BP = Base of drive parameters
 22352                                  ;	[BYTSECPOS] = Byte position within first sector
 22353                                  ;	DS = DOSDATA
 22354                                  ; Outputs:
 22355                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 22356                                  ;	[SECCNT] = No. of whole sectors to transfer
 22357                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 22358                                  ; AX, BX, DX destroyed. No other registers affected.
 22359                                  ;---------------------------------------------------------------------------
 22360                                  
 22361                                  BREAKDOWN:
 22362 0000378C A1[CC05]                	MOV	AX,[BYTSECPOS]
 22363 0000378F 89CB                    	MOV	BX,CX
 22364 00003791 09C0                    	OR	AX,AX
 22365 00003793 740E                    	JZ	short SAVFIR	; Partial first sector?
 22366                                  	;sub	ax,[es:bp+2]
 22367 00003795 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 22368 00003799 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 22369 0000379B 29C3                    	SUB	BX,AX		; Subtract from total length
 22370 0000379D 7304                    	JAE	short SAVFIR
 22371 0000379F 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 22372 000037A1 31DB                    	XOR	BX,BX		; And no bytes are left
 22373                                  SAVFIR:
 22374 000037A3 A3[D205]                	MOV	[BYTCNT1],AX
 22375 000037A6 89D8                    	MOV	AX,BX
 22376 000037A8 31D2                    	XOR	DX,DX
 22377                                  	;div	word [ES:BP+2]
 22378 000037AA 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 22379 000037AE A3[D605]                	MOV	[SECCNT],AX
 22380 000037B1 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 22381                                  	; MSDOS 3.3
 22382                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 22383                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 22384                                  	;CMP	AX,1
 22385                                  	;retnz
 22386                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 22387                                  	;MOV	[BYTCNT2],AX
 22388                                  	;MOV	[SECCNT],DX	; DX = 0
 22389                                  _RET45:
 22390 000037B5 C3                      	retn
 22391                                  
 22392                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 22393                                  
 22394                                  ;----------------------------------------------------------------------------
 22395                                  ;
 22396                                  ; Procedure Name : READ_LOCK_VIOLATION
 22397                                  ;
 22398                                  ; ES:DI points to SFT. This entry used by NET_READ
 22399                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 22400                                  ; Else do retrys.
 22401                                  ; ES:DI,DS,CX preserved
 22402                                  ;
 22403                                  ;----------------------------------------------------------------------------
 22404                                  
 22405                                  READ_LOCK_VIOLATION:
 22406 000037B6 C606[7505]00            	MOV	byte [READOP],0
 22407                                  ERR_ON_CHECK:
 22408                                  	;;test	word [es:di+2],8000h
 22409                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 22410                                  	;JNZ	short HARD_ERR
 22411                                  
 22412                                  	; 04/05/2019
 22413                                  	;test	byte [es:di+3],80h
 22414 000037BB 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 22415 000037C0 7508                    	JNZ	short HARD_ERR
 22416                                  
 22417                                  	;PUSH	CX
 22418                                  	;;mov	cl,[es:di+2]
 22419                                  	;MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 22420                                  	;;and	cl,0F0h
 22421                                  	;AND	CL,SHARING_MASK
 22422                                  	;;cmp	cl,0
 22423                                  	;CMP	CL,SHARING_COMPAT
 22424                                  	;POP	CX
 22425                                  	;JNE	short NO_HARD_ERR
 22426                                  	; 21/09/2023
 22427 000037C2 268A4502                	mov	al,[ES:DI+SF_ENTRY.sf_mode]
 22428 000037C6 24F0                    	and	al,SHARING_MASK
 22429                                  	;cmp	al,SHARING_COMPAT
 22430                                  	;jne	short NO_HARD_ERR
 22431 000037C8 7505                    	jnz	short NO_HARD_ERR
 22432                                  HARD_ERR:
 22433 000037CA E8CA39                  	call	LOCK_VIOLATION
 22434 000037CD 73E6                    	jnc	short _RET45		; User wants Retrys
 22435                                  NO_HARD_ERR:
 22436 000037CF 31C9                    	XOR	CX,CX			;No bytes transferred
 22437                                  	;mov	ax,21h
 22438 000037D1 B82100                  	MOV	AX,error_lock_violation
 22439 000037D4 F9                      	STC
 22440                                  RET3:		; 06/02/2024
 22441 000037D5 C3                      	retn
 22442                                  
 22443                                  ;----------------------------------------------------------------------------
 22444                                  ;
 22445                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 22446                                  ;
 22447                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 22448                                  ; This entry used by NET_WRITE
 22449                                  ;
 22450                                  ;----------------------------------------------------------------------------
 22451                                  
 22452                                  WRITE_LOCK_VIOLATION:
 22453 000037D6 C606[7505]01            	MOV	byte [READOP],1
 22454 000037DB EBDE                    	JMP	short ERR_ON_CHECK
 22455                                  
 22456                                  ; 04/05/2019 - Retro DOS v4.0
 22457                                  
 22458                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 22459                                  
 22460                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 22461                                  ;----------------------------------------------------------------------------
 22462                                  ;
 22463                                  ; Procedure Name : DISKREAD
 22464                                  ;
 22465                                  ; Inputs:
 22466                                  ;	Outputs of SETUP
 22467                                  ; Function:
 22468                                  ;	Perform disk read
 22469                                  ; Outputs:
 22470                                  ;    Carry clear
 22471                                  ;	CX = No. of bytes read
 22472                                  ;	ES:DI point to SFT
 22473                                  ;	SFT offset and cluster pointers updated
 22474                                  ;    Carry set
 22475                                  ;	CX = 0
 22476                                  ;	ES:DI point to SFT
 22477                                  ;	AX has error code
 22478                                  ;----------------------------------------------------------------------------
 22479                                  
 22480                                  ;hkn; called from disk.asm. DS already set up.
 22481                                  
 22482                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22483                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 22484                                  
 22485                                  DISKREAD:
 22486                                  	;mov	ax,[es:di+11h]
 22487 000037DD 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 22488                                  	;mov	bx,[es:di+13h]
 22489 000037E1 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 22490 000037E5 2B06[CE05]              	SUB	AX,[BYTPOS]
 22491 000037E9 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 22492 000037ED 721F                    	JB	short RDERR		;Read starts past EOF
 22493 000037EF 750A                    	JNZ	short ENUF		;More than 64k to EOF
 22494 000037F1 09C0                    	OR	AX,AX
 22495 000037F3 7419                    	JZ	short RDERR		;Read starts at EOF
 22496 000037F5 39C8                    	CMP	AX,CX
 22497 000037F7 7302                    	JAE	short ENUF		;I/O fits
 22498 000037F9 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 22499                                  ENUF:
 22500                                  	; MSDOS 3.3
 22501                                  	;test	byte [es:di+4],8
 22502                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22503                                  	;jnz	short SET_ACC_ERR
 22504                                  	;call	LOCK_CHECK
 22505                                  	;jnb	short _READ_OK
 22506                                  	;call	READ_LOCK_VIOLATION
 22507                                  	;jnb	short ENUF
 22508                                  	;retn
 22509                                  
 22510                                  	; MSDOS 6.0
 22511 000037FB E881FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 22512                                  	;JNC	short _READ_OK 		; There are no locks
 22513                                  	;retn
 22514                                  	; 06/02/2024
 22515 000037FE 72D5                    	jc	short RET3
 22516                                  
 22517                                  _READ_OK:
 22518 00003800 C42E[8A05]              	LES	BP,[THISDPB]
 22519 00003804 E885FF                  	CALL	BREAKDOWN
 22520                                  
 22521                                  ; 10/02/2024
 22522                                  %if 0
 22523                                  	MOV	CX,[CLUSNUM] ; *
 22524                                  	call	FNDCLUS
 22525                                       	; MSDOS 6.0			;M022 conditional removed here
 22526                                  	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 22527                                  					; migrated from 330a - HKN
 22528                                  %else
 22529                                  	; 10/02/2024 - Retro DOS v4.2
 22530 00003807 E83A13                  	call	FNDCLUS_X ; *
 22531 0000380A 720E                    	jc	short SET_ACC_ERR ; ds=ss
 22532                                  %endif
 22533                                  	;OR	CX,CX
 22534                                  	;JZ	short SKIPERR
 22535                                  	; 06/02/2024
 22536 0000380C E313                    	jcxz	SKIPERR
 22537                                  
 22538                                  RDERR:
 22539 0000380E B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 22540 00003810 E91802                  	jmp	WRTERR22
 22541                                  
 22542                                  ;RDLASTJ: 
 22543                                  	;JMP	RDLAST                  ;M039
 22544                                  
 22545                                  SETSFTJ2: 
 22546 00003813 E99600                  	JMP	SETSFT
 22547                                  
 22548                                  CANOT_READ:
 22549                                  	; MSDOS 3.3
 22550                                  	;POP	CX		;M039.
 22551                                  	; MSDOS 3.3 & MSDOS 6.0
 22552 00003816 59                      	POP	CX              ;Clean stack.
 22553 00003817 5B                      	POP	BX
 22554                                  
 22555                                  	;entry	SET_ACC_ERR_DS
 22556                                  SET_ACC_ERR_DS:
 22557                                  
 22558                                  ;hkn; SS is DOSDATA
 22559                                  	;Context DS
 22560 00003818 16                      	push	ss
 22561 00003819 1F                      	pop	ds
 22562                                  
 22563                                  	;entry	SET_ACC_ERR
 22564                                  SET_ACC_ERR:
 22565 0000381A 31C9                    	XOR	CX,CX
 22566                                  	;mov	ax,5
 22567 0000381C B80500                  	MOV	AX,error_access_denied
 22568 0000381F F9                      	STC
 22569 00003820 C3                      	retn
 22570                                  
 22571                                  SKIPERR:
 22572 00003821 8916[BA05]              	MOV	[LASTPOS],DX
 22573 00003825 891E[BC05]              	MOV	[CLUSNUM],BX
 22574 00003829 833E[D205]00            	CMP	word [BYTCNT1],0
 22575 0000382E 7405                    	JZ	short RDMID
 22576                                  
 22577 00003830 E88B13                  	call	BUFRD
 22578                                  	;JC	short SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 22579                                  	; 10/02/2024
 22580                                  	; ds=ss
 22581 00003833 72E5                    	jc	short SET_ACC_ERR
 22582                                  
 22583                                  RDMID:
 22584 00003835 833E[D605]00            	CMP	word [SECCNT],0
 22585                                  	;JZ	RDLAST ; 10/08/2018
 22586 0000383A 7453                    	jz	short RDLAST
 22587                                  
 22588 0000383C E81314                  	call	NEXTSEC
 22589 0000383F 72D2                    	JC	short SETSFTJ2
 22590                                  
 22591 00003841 C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 22592                                  ONSEC:
 22593 00003846 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 22594 0000384A 8B0E[D605]              	MOV	CX,[SECCNT]
 22595 0000384E 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 22596                                  RDLP:
 22597 00003852 E82E14                  	call	OPTIMIZE
 22598                                  	;JC	short SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 22599                                  	; 10/02/2024
 22600                                  	; ds=ss
 22601 00003855 72C3                    	jc	short SET_ACC_ERR
 22602                                  
 22603 00003857 57                      	PUSH	DI                      ;DI = Next physical cluster.
 22604 00003858 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 22605 00003859 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 22606                                  	;mov	byte [ALLOWED],38h
 22607 0000385A C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22608 0000385F 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 22609                                  
 22610 00003863 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 22611 00003864 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 22612                                  
 22613                                  	; 04/05/2019 - Retro DOS v4.0
 22614                                  
 22615                                  	; MSDOS 6.0
 22616 00003865 E8B321                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 22617                                  
 22618                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22619 00003868 E8DBFD                  	call	DREAD
 22620                                  
 22621                                  	; 10/02/2024
 22622                                  	; ds<>ss
 22623                                  
 22624                                  	; MSDOS 3.3 
 22625                                  	;pop	bx
 22626                                  	;pop	dx
 22627                                  	;jc	short CANOT_READ
 22628                                  	;add	bx,dx	; (bx = Extent end)
 22629                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 22630                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 22631                                  	;call	SETVISIT
 22632                                  	; ->***
 22633                                  ;M039
 22634                                  	; MSDOS 6.0 
 22635 0000386B 59                      	pop	cx
 22636 0000386C 5A                      	pop	dx
 22637 0000386D 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 22638 00003872 72A2                    	jc	short CANOT_READ
 22639                                  
 22640 00003874 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 22641                                  
 22642                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22643                                  ;            sectors, also termed an "Extent".)
 22644                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22645                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22646                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22647                                  ;
 22648                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 22649                                  ;	buffers must be "read" into the transfer memory block, so that the
 22650                                  ;       transfer memory reflects the most recent data.
 22651                                  
 22652 00003879 E85E00                  	call	DskRdBufScan
 22653                                  
 22654                                  	;Context DS
 22655 0000387C 16                      	push	ss
 22656 0000387D 1F                      	pop	ds
 22657                                          
 22658 0000387E 59                      	pop	cx
 22659 0000387F 5B                              pop	bx
 22660                                  
 22661                                  ;       CX = # of sector remaining.
 22662                                  ;       BX = Next physical cluster.
 22663                                  
 22664                                  ;M039
 22665                                  
 22666                                  ;;;;;;;;
 22667                                  ;	; 25/07/2018 - Retro DOS v3.0
 22668                                  ;	; ***->
 22669                                  ;	; MSDOS 3.3
 22670                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 22671                                  ;bufq:
 22672                                  ;;	DX = Extent start.
 22673                                  ;;	BX = Extent end.
 22674                                  ;;	 AL = Drive #.
 22675                                  ;;     DS:DI-> 1st buffer in queue.
 22676                                  ;
 22677                                  ;	;or	byte [di+5],20h
 22678                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22679                                  ;	;cmp	al,[di+4]	
 22680                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 22681                                  ;	jnz	short bufq3
 22682                                  ;	;cmp	[di+6],dx
 22683                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 22684                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 22685                                  ;	;cmp	[di+6],bx
 22686                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 22687                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 22688                                  ;	
 22689                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 22690                                  ;
 22691                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 22692                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 22693                                  ;;      as MRU (Most Recently Used).
 22694                                  ;
 22695                                  ;	;test	byte [di+5],40h
 22696                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 22697                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 22698                                  ;	pop	ax ; transfer address
 22699                                  ;	push	ax
 22700                                  ;	push	di
 22701                                  ;	push	dx
 22702                                  ;	;sub	dx,[di+6]
 22703                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 22704                                  ;	neg	dx
 22705                                  ;
 22706                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 22707                                  ;;           block.
 22708                                  ;
 22709                                  ;	mov	si,di
 22710                                  ;	mov	di,ax
 22711                                  ;	mov	ax,dx
 22712                                  ;	;mov	cx,[es:bp+6]	
 22713                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 22714                                  ;	mul	cx
 22715                                  ;	add	di,ax
 22716                                  ;
 22717                                  ;	lea	si,[si+16]
 22718                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 22719                                  ;	shr	cx,1
 22720                                  ;	push	es
 22721                                  ;	mov	es,[SS:DMAADD+2]
 22722                                  ;
 22723                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22724                                  ;;      DS:SI-> Buffer sector data.
 22725                                  ;;      ES:DI-> Destination within Transfer memory block.
 22726                                  ;
 22727                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 22728                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22729                                  ;	;rep	movsb                   ;Copy last byte.
 22730                                  ;	jnc	short bufq1
 22731                                  ;	movsb
 22732                                  ;bufq1:
 22733                                  ;	pop	es
 22734                                  ;	pop	dx
 22735                                  ;	pop	di
 22736                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 22737                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 22738                                  ;bufq2:
 22739                                  ;	call	SCANPLACE
 22740                                  ;bufq3:
 22741                                  ;	call	SKIPVISIT
 22742                                  ;	jnz	short bufq
 22743                                  ;	
 22744                                  ;	push	ss
 22745                                  ;	pop	ds
 22746                                  ;	pop	cx
 22747                                  ;	pop	cx
 22748                                  ;	pop	bx	
 22749                                  ;bufq4:
 22750                                  ;;;;;;;
 22751 00003880 E30D                    	JCXZ	RDLAST
 22752                                  
 22753 00003882 E8871B                  	call	IsEOF			; test for eof on fat size
 22754 00003885 7325                    	JAE	short SETSFT
 22755                                  
 22756 00003887 B200                    	MOV	DL,0
 22757 00003889 FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 22758 0000388D EBC3                    	JMP	short RDLP ; 19/05/2019
 22759                                  
 22760                                  RDLAST:
 22761 0000388F A1[D405]                	MOV	AX,[BYTCNT2]
 22762 00003892 09C0                    	OR	AX,AX
 22763 00003894 7416                    	JZ	short SETSFT
 22764 00003896 A3[D205]                	MOV	[BYTCNT1],AX
 22765                                  
 22766 00003899 E8B613                  	call	NEXTSEC
 22767 0000389C 720E                    	JC	short SETSFT
 22768                                  
 22769 0000389E C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22770 000038A4 E81713                  	call	BUFRD
 22771                                  	; 10/08/2018
 22772 000038A7 7303                    	JNC	short SETSFT
 22773                                  	;JMP	SET_ACC_ERR_DS
 22774                                  	; 10/02/2024
 22775                                  	; ds=ss
 22776 000038A9 E96EFF                  	jmp	SET_ACC_ERR
 22777                                  
 22778                                  ;------------------------------------------------------------------------------
 22779                                  ;
 22780                                  ; Procedure Name : SETSFT
 22781                                  ; Inputs:
 22782                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22783                                  ;		and set cluster fields
 22784                                  ; Function:
 22785                                  ;	Update [THISSFT] based on the transfer
 22786                                  ; Outputs:
 22787                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22788                                  ;	ES:DI points to [THISSFT]
 22789                                  ;	CX No. of bytes transferred
 22790                                  ;	Carry clear
 22791                                  ;
 22792                                  ;----------------------------------------------------------------------------
 22793                                  
 22794                                  	;entry	SETSFT
 22795                                  
 22796                                  ; 26/07/2018 - Retro DOS v3.0
 22797                                  SETSFT:
 22798 000038AC C43E[9E05]              	LES	DI,[THISSFT]
 22799                                  
 22800                                  ; Same as SETSFT except ES:DI already points to SFT
 22801                                  	;entry	SETCLUS
 22802                                  SETCLUS:	
 22803 000038B0 8B0E[B805]              	MOV	CX,[NEXTADD]
 22804 000038B4 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22805                                  	;;test	word [es:di+5],80h
 22806                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22807                                  	;JNZ	short ADDREC		; don't set clusters if device
 22808                                  
 22809                                  	; 04/05/2019 - Retro DOS v4.0
 22810                                  	;test	byte [es:di+5],80h
 22811 000038B8 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22812 000038BD 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22813                                  
 22814 000038BF A1[BC05]                	MOV	AX,[CLUSNUM]
 22815                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22816                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22817 000038C2 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22818 000038C6 A1[BA05]                	MOV	AX,[LASTPOS]
 22819                                  	;mov	[es:di+19h],ax
 22820 000038C9 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22821                                  
 22822                                  ;----------------------------------------------------------------------------
 22823                                  ;
 22824                                  ; Procedure : AddRec
 22825                                  ; Inputs:
 22826                                  ;	ES:DI points to SFT
 22827                                  ;	CX is No. Bytes transferred
 22828                                  ; Function:
 22829                                  ;	Update the SFT offset based on the transfer
 22830                                  ; Outputs:
 22831                                  ;	sf_position updated to point to first byte after transfer
 22832                                  ;	ES:DI points to SFT
 22833                                  ;	CX No. of bytes transferred
 22834                                  ;	Carry clear
 22835                                  ;----------------------------------------------------------------------------
 22836                                  
 22837                                  	;entry	AddRec
 22838                                  ADDREC:
 22839 000038CD E309                    	JCXZ	RET28		; If no records read,  don't change position
 22840                                  	;add	[es:di+15h],cx
 22841 000038CF 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22842                                  	;adc	word [es:di+17h], 0
 22843 000038D3 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22844                                  RET28:	
 22845 000038D8 F8                      	CLC
 22846 000038D9 C3                      	retn
 22847                                  
 22848                                  ; 25/07/2018
 22849                                  ; MSDOS 6.0
 22850                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22851                                  ;----------------------------------------------------------------------------
 22852                                  ;
 22853                                  ; Procedure Name : DskRdBufScan
 22854                                  ;
 22855                                  ; Inputs:
 22856                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22857                                  ;            sectors, also termed an "Extent".)
 22858                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22859                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22860                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22861                                  ;
 22862                                  ; Function:
 22863                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22864                                  ;	"read" into the transfer memory block, so that the transfer memory
 22865                                  ;	reflects the most recent data.
 22866                                  ;
 22867                                  ; Outputs:
 22868                                  ;       Transfer memory updated as required.
 22869                                  ;
 22870                                  ; Uses:
 22871                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22872                                  ;       SS override for all global variables.
 22873                                  ;
 22874                                  ; Notes:
 22875                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22876                                  ;	than the FIRST.
 22877                                  ;----------------------------------------------------------------------------
 22878                                  ;M039: Created
 22879                                  
 22880                                  ; 04/05/2019 - Retro DOS v4.0
 22881                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22882                                  
 22883                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22884                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22885                                  
 22886                                  ;procedure DskRdBufScan,NEAR
 22887                                  ;
 22888                                  ;ASSUME  DS:NOTHING
 22889                                  
 22890                                  DskRdBufScan:
 22891 000038DA 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22892 000038E0 743C                    	je	short bufx		     ; -no, skip all work.
 22893                                  
 22894 000038E2 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22895 000038E7 89DE                    	mov     si,bx
 22896 000038E9 01D1                    	add     cx,dx
 22897 000038EB 83D600                  	adc     si,0
 22898                                  
 22899 000038EE E8C51E                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22900                                  	;mov	ax,[di+2]
 22901 000038F1 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22902 000038F4 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22903                                  		
 22904                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22905                                  	;;mov	al,[es:bp+0]
 22906                                  	;mov	al,[es:bp+DPB.DRIVE]
 22907                                  	; 15/12/2022
 22908 000038F8 268A4600                	mov	al,[es:bp]
 22909                                  
 22910                                  ;       BX:DX = Extent start.
 22911                                  ;       SI:CX = Extent end + 1.
 22912                                  ;          AL = Drive #.
 22913                                  ;       DS:DI-> 1st buffer in queue.
 22914                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22915                                  
 22916                                  bufq:	
 22917                                  	;cmp	al,[di+4]
 22918 000038FC 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22919 000038FF 7514                    	jne	short bufq1        	;  -no, jump.
 22920                                  
 22921                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22922                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22923                                  
 22924                                  	;cmp	bx,[di+8]
 22925 00003901 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22926 00003904 7503                    	jne	short bufq01
 22927                                  	;cmp	dx,[di+6]
 22928 00003906 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22929                                  bufq01:
 22930 00003909 770A                    	ja	short bufq1
 22931                                  
 22932                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22933                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22934                                  
 22935                                  	;cmp	si,[di+8]
 22936 0000390B 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22937 0000390E 7503                    	jne	short bufq02
 22938                                  	;cmp	cx,[di+6]
 22939 00003910 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22940                                  bufq02:
 22941 00003913 770A                    	ja	short bufq2
 22942                                  bufq1:	
 22943 00003915 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22944 0000391A 8B3D                    	mov	di,[di]
 22945                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22946 0000391C 75DE                    	jne	short bufq		; -no, do next buffer
 22947                                  bufx:
 22948 0000391E C3                      	retn				;Exit.
 22949                                  
 22950                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22951                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22952                                  ;       as MRU (Most Recently Used).
 22953                                  
 22954                                  bufq2:	
 22955 0000391F 50                      	push	ax
 22956                                  	;test	byte [di+5],40h
 22957 00003920 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22958 00003924 7428                    	jz	short bufq3                    ; -no, jump.
 22959                                  
 22960                                  ;       SaveReg <cx,dx,si,di,es>
 22961 00003926 51                      	push	cx
 22962 00003927 52                      	push	dx
 22963 00003928 56                      	push	si
 22964 00003929 57                      	push	di
 22965 0000392A 06                      	push	es
 22966                                  
 22967 0000392B 89D0                    	mov     ax,dx
 22968                                  	;sub	ax,[di+6]
 22969 0000392D 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22970 00003930 F7D8                    	neg	ax
 22971                                  
 22972                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22973                                  ;            block. (Note: the upper word of the sector # may be ignored
 22974                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22975                                  ;            is imposed by the input parameters of the disk read operation.)
 22976                                  
 22977                                  	;lea	si,[di+20]
 22978 00003932 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22979                                  	;mov	cx,[es:bp+2]
 22980 00003935 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22981 00003939 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22982                                  	;mov	di,[ss:TEMP_VAR]
 22983                                  	; 09/02/2024
 22984 0000393B 36C43E[0C06]            	les	di,[ss:TEMP_VAR]
 22985 00003940 01C7                    	add	di,ax
 22986                                  	;mov	es,[ss:TEMP_VAR2]
 22987 00003942 D1E9                    	shr	cx,1
 22988                                  
 22989                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22990                                  ;       DS:SI-> Buffer sector data.
 22991                                  ;       ES:DI-> Destination within Transfer memory block.
 22992                                  
 22993 00003944 F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22994                                  	;; 04/05/2019
 22995                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22996                                  	;;rep	movsb                   ;Copy last byte.
 22997                                  	;jnc	short bufq03	
 22998                                  	;movsb
 22999                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23000                                  	;adc	cx,0
 23001                                  	;rep	movsb
 23002                                  	; 22/09/2023
 23003 00003946 7301                    	jnc	short bufq03
 23004 00003948 A4                      	movsb
 23005                                  bufq03:
 23006                                  	;RestoreReg <es,di,si,dx,cx>
 23007 00003949 07                      	pop	es
 23008 0000394A 5F                      	pop	di
 23009 0000394B 5E                      	pop	si
 23010 0000394C 5A                      	pop	dx
 23011 0000394D 59                      	pop	cx
 23012                                  
 23013                                  ;       DS:DI -> current buffer.
 23014                                  bufq3:	
 23015 0000394E 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 23016                                          ;invoke SCANPLACE
 23017 00003950 E8751E                  	call	SCANPLACE
 23018 00003953 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 23019 00003958 58                      	pop	ax
 23020                                  	;jne	short bufq		; -no, jump.
 23021                                  	;;jmp	short bufx		; -yes, exit.
 23022                                  	;; 12/06/2019
 23023                                  	;retn
 23024                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 23025 00003959 75A1                    	jne	short bufq
 23026                                  	;jmp	short bufx
 23027                                  	; 09/02/2024
 23028 0000395B C3                      	retn	; Exit
 23029                                  
 23030                                  ;EndProc DskRdBufScan
 23031                                  
 23032                                  ;============================================================================
 23033                                  ; DISK3.ASM, MSDOS 6.0, 1991
 23034                                  ;============================================================================
 23035                                  ; 04/05/2019 - Retro DOS v4.0
 23036                                  ; 24/07/2018 - Retro DOS v3.0
 23037                                  
 23038                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 23039                                  ;----------------------------------------------------------------------------
 23040                                  ;
 23041                                  ; Procedure Name : DISKWRITE
 23042                                  ;
 23043                                  ; Inputs:
 23044                                  ;       Outputs of SETUP
 23045                                  ; Function:
 23046                                  ;       Perform disk write
 23047                                  ; Outputs:
 23048                                  ;    Carry clear
 23049                                  ;       CX = No. of bytes written
 23050                                  ;       ES:DI point to SFT
 23051                                  ;       SFT offset and cluster pointers updated
 23052                                  ;    Carry set
 23053                                  ;       CX = 0
 23054                                  ;       ES:DI point to SFT
 23055                                  ;       AX has error code
 23056                                  ;----------------------------------------------------------------------------
 23057                                  
 23058                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 23059                                  
 23060                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 23061                                  
 23062                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23063                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 23064                                  
 23065                                  DISKWRITE:
 23066                                  	; MSDOS 3.3
 23067                                  	; IBMDOS.COM - Offset 436Dh
 23068                                  	;;test	byte [es:di+4],8
 23069                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 23070                                  	;jz	short write_cont
 23071                                  	;jmp	SET_ACC_ERR_DS
 23072                                  ;write_cont:
 23073                                  	;push	cx
 23074                                  	;or	cx,cx
 23075                                  	;jnz	short Not_Truncate
 23076                                  	;;mov	cx,-1
 23077                                  	;dec	cx
 23078                                  ;Not_Truncate:
 23079                                  	;call	LOCK_CHECK
 23080                                  	;pop	cx
 23081                                  	;jnb	short _WRITE_OK
 23082                                  	;call	WRITE_LOCK_VIOLATION
 23083                                  	;jnb	short DISKWRITE
 23084                                  	;retn
 23085                                  
 23086                                  	; MSDOS 6.0
 23087 0000395C E802FD                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 23088                                  	; 19/08/2018
 23089 0000395F 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 23090 00003961 C3                      	retn
 23091                                  
 23092                                  WRTEOFJ:
 23093 00003962 E9D101                  	JMP     WRTEOF
 23094                                  
 23095                                  _WRITE_OK:
 23096                                   	; 27/07/2018
 23097                                  	; IBMDOS.COM - Offset 438Eh
 23098                                  	
 23099                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23100                                  	;and	word [es:di+5],0BFBFh
 23101 00003965 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 23102                                  				; Mark file as dirty, clear no date on close
 23103                                  ; 10/02/2024
 23104                                  %if 0
 23105                                  	; 04/05/2019 - Retro DOS v4.0
 23106                                  
 23107                                  	; MSDOS 6.0
 23108                                  	;mov 	ax,[es:di+11h]
 23109                                  	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 23110                                          MOV	[TEMP_VAR],AX                           ;M039
 23111                                  	;mov	ax,[es:di+13h]
 23112                                  	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 23113                                          MOV	[TEMP_VAR2],AX                          ;M039
 23114                                  %else
 23115                                  	; 10/02/2024 (PCDOS 7.1 IBMDOS COM)
 23116                                  	;les	ax,[es:di+11h]
 23117 0000396B 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 23118 0000396F 8C06[0E06]              	mov	[TEMP_VAR2],es
 23119 00003973 A3[0C06]                	mov	[TEMP_VAR],ax
 23120                                  %endif
 23121                                  
 23122                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 23123                                  
 23124                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23125 00003976 C42E[8A05]              	LES     BP,[THISDPB]
 23126                                  
 23127 0000397A E80FFE                  	call	BREAKDOWN
 23128                                  
 23129 0000397D A1[CE05]                	MOV     AX,[BYTPOS]
 23130 00003980 8B16[D005]              	MOV     DX,[BYTPOS+2]
 23131 00003984 E3DC                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 23132 00003986 01C8                    	ADD     AX,CX
 23133 00003988 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 23134                                  
 23135                                  	;mov	bx,[es:bp+2]
 23136 0000398B 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 23137                                  
 23138                                  	; MSDOS 3.3
 23139                                  	;cmp	dx,bx
 23140                                  	;jnb	short WRTERR33
 23141                                  	;div	bx
 23142                                  	;mov	bx,ax
 23143                                  	;OR	DX,DX
 23144                                  	;JNZ	short CALCLUS
 23145                                  	;dec	ax
 23146                                  ;CALCLUS:
 23147                                  	; MSDOS 3.3
 23148                                  	;mov	cl,[es:bp+5]
 23149                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 23150                                  	;shr	ax,cl
 23151                                  	;push	ax
 23152                                  	;push	dx
 23153                                  	;push	es
 23154                                  	;les	di,[THISSFT]
 23155                                  	;;mov	ax,[es:di+11h]
 23156                                  	;;mov	dx,[es:di+13h]
 23157                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 23158                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 23159                                  	;pop	es
 23160                                  	;;DX:AX = current file size (in bytes).
 23161                                  	;;div	word [es:bp+2]
 23162                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23163                                  	;mov	cx,ax
 23164                                  	;or	dx,dx
 23165                                  	;jz	short NORND
 23166                                  	;inc	ax
 23167                                  ;NORND:
 23168                                  	; MSDOS 6.0
 23169 0000398F E8D202                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 23170 00003992 89C6                    	MOV	SI,AX
 23171 00003994 890E[0706]                      MOV	[HIGH_SECTOR],CX
 23172                                  
 23173                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 23174                                  
 23175 00003998 09D2                    	OR	DX,DX
 23176 0000399A 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 23177 0000399B 89CA                    	MOV	DX,CX			;M039
 23178 0000399D 7506                    	JNZ	short CALCLUS
 23179 0000399F 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 23180 000039A2 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 23181                                  
 23182                                  CALCLUS:
 23183                                  	; MSDOS 6.0
 23184 000039A5 E8E302                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 23185 000039A8 5A                      	POP	DX
 23186                                  
 23187                                  ;       AX = Last cluster to write.
 23188                                  ;       DX = # of bytes in last sector to write (the "tail").
 23189                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 23190                                  
 23191 000039A9 50                      	PUSH	AX
 23192 000039AA 52                      	PUSH	DX
 23193                                  ;M039
 23194 000039AB 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 23195 000039AF A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 23196 000039B2 E8AF02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 23197 000039B5 890E[0E06]              	mov	[TEMP_VAR2],cx
 23198 000039B9 890E[CA05]              	mov	[VALSEC+2],cx
 23199 000039BD 89C1                    	mov	cx,ax
 23200 000039BF 89F3                    	mov	bx,si
 23201                                  
 23202                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 23203                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 23204                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 23205                                  ;                     DX = # of bytes in last sector of current file.
 23206                                  ;M039
 23207 000039C1 09D2                    	OR	DX,DX
 23208 000039C3 7407                    	JZ	short NORND
 23209                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 23210                                  	;ADC	word [VALSEC+2],0
 23211                                  	; 22/09/2023
 23212 000039C5 40                      	inc	ax  ; 0FFFFh -> 0
 23213 000039C6 7504                    	jnz	short NORND
 23214 000039C8 FF06[CA05]              	inc	word [VALSEC+2]
 23215                                  NORND:	
 23216                                  	; MSDOS 3.3 & MSDOS 6.0
 23217 000039CC A3[C805]                	MOV     [VALSEC],AX
 23218                                  
 23219                                  ;       [VALSEC] = Last sector of current file.
 23220                                  
 23221 000039CF 31C0                    	XOR     AX,AX
 23222 000039D1 A3[DE05]                	MOV     [GROWCNT],AX
 23223 000039D4 A3[E005]                	MOV     [GROWCNT+2],AX
 23224 000039D7 58                      	POP     AX
 23225                                  
 23226                                  	; MSDOS 6.0
 23227 000039D8 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 23228 000039DC 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 23229 000039E0 7263                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 23230 000039E2 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 23231 000039E4 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 23232 000039E6 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 23233 000039EA EB08                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 23234                                  lowsec:
 23235                                  	;MOV	DI,0			;F.C. >32mb
 23236                                  	; 22/09/2023
 23237 000039EC 31FF                    	xor	di,di
 23238                                  	; MSDOS 3.3 & MSDOS 6.0
 23239 000039EE 29CB                    	SUB	BX,CX			; Number of full sectors
 23240 000039F0 7253                    	JB	short NOGROW
 23241 000039F2 7444                    	JZ	short TESTTAIL
 23242                                  yesgrow:
 23243                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23244 000039F4 89D1                    	MOV     CX,DX
 23245 000039F6 93                      	XCHG    AX,BX
 23246                                  	;mul	word [es:bp+2]
 23247 000039F7 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 23248                                  	
 23249                                  	; MSDOS 6.0
 23250 000039FB 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb save dx		;AN000;
 23251 000039FF A3[0E06]                	MOV	[TEMP_VAR2],AX		;M039; F.C. >32mb save ax	;AN000;
 23252 00003A02 89F8                    	MOV	AX,DI			;F.C. >32mb			;AN000;
 23253                                  	;mul	word [es:bp+2]
 23254 00003A04 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 23255                                  	
 23256 00003A08 0306[0706]              	ADD	AX,[HIGH_SECTOR]	;F.C. >32mb add lower value	;AN000;
 23257 00003A0C 89C2                    	MOV	DX,AX			;F.C. >32mb DX:AX is the result of ;AN000;
 23258 00003A0E A1[0E06]                	MOV	AX,[TEMP_VAR2]		;M039; F.C. >32mb a 32 bit multiply ;AN000;
 23259                                  
 23260                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23261 00003A11 29C8                    	SUB     AX,CX			; Take off current "tail"
 23262 00003A13 83DA00                  	SBB     DX,0			; 32-bit extension
 23263 00003A16 01D8                    	ADD     AX,BX			; Add on new "tail"
 23264 00003A18 83D200                  	ADC     DX,0			; ripple tim's head off
 23265 00003A1B EB21                    	JMP     SHORT SETGRW
 23266                                  
 23267                                  HAVSTART:
 23268                                  	;int 3
 23269 00003A1D 89C1                    	MOV     CX,AX
 23270 00003A1F E84611                  	call	SKPCLP
 23271                                  	;JCXZ	DOWRTJ
 23272                                  	; 16/12/2022
 23273 00003A22 E353                    	jcxz	DOWRT
 23274                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23275                                  	;jcxz	DOWRTJ
 23276                                  
 23277 00003A24 E8DE12                  	call	ALLOCATE
 23278                                  	;JNC	short DOWRTJ
 23279                                  	; 16/12/2022
 23280 00003A27 734E                    	jnc	short DOWRT
 23281                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23282                                  	;jnc	short DOWRTJ
 23283                                  
 23284                                  	;entry   WRTERR
 23285                                  WRTERR:
 23286 00003A29 B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort	;AN000;
 23287                                  
 23288                                  	;entry WRTERR22
 23289                                  WRTERR22:
 23290 00003A2B A0[7605]                	MOV     AL,[THISDRV]		;MS.				;AN000;
 23291                                  
 23292                                  	; 27/07/2018
 23293                                  WRTERR33:
 23294                                  	;MOV	CX,0			;No bytes transferred
 23295 00003A2E 31C9                    	XOR     CX,CX
 23296                                  
 23297 00003A30 C43E[9E05]              	LES     DI,[THISSFT]
 23298                                  	;CLC ; 19/05/2019
 23299                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23300                                  	; 16/12/2022
 23301                                  	;clc
 23302 00003A34 C3                      	retn
 23303                                  
 23304                                  	; 16/12/2022
 23305                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23306                                  ;DOWRTJ:
 23307                                  	;JMP	short DOWRT
 23308                                  
 23309                                  ACC_ERRWJ:
 23310                                  	; 10/08/2018
 23311                                  	;JMP	SET_ACC_ERRW
 23312                                  	; 16/12/2022
 23313                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 23314                                  	; 10/02/2024
 23315                                  	; ds=ss
 23316 00003A35 E9E2FD                  	jmp	SET_ACC_ERR
 23317                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23318                                  	;;jmp	SET_ACC_ERRW	
 23319                                  
 23320                                  TESTTAIL:
 23321 00003A38 29D0                    	SUB     AX,DX
 23322 00003A3A 7609                    	JBE	short NOGROW
 23323 00003A3C 31D2                    	XOR     DX,DX
 23324                                  SETGRW:
 23325 00003A3E A3[DE05]                	MOV	[GROWCNT],AX
 23326 00003A41 8916[E005]              	MOV	[GROWCNT+2],DX
 23327                                  NOGROW:
 23328 00003A45 58                      	POP     AX
 23329                                  
 23330                                  ; 10/02/2024
 23331                                  %if 0
 23332                                  	MOV     CX,[CLUSNUM] ; *+ ; First cluster accessed
 23333                                  	call	FNDCLUS
 23334                                  %else
 23335                                  	; 10/02/2024 - Retro DOS v4.2
 23336 00003A46 E8FB10                  	call	FNDCLUS_X ; *+
 23337                                  %endif
 23338 00003A49 72EA                    	JC	short ACC_ERRWJ ; ds=ss ; 10/02/2024
 23339                                  
 23340 00003A4B 891E[BC05]              	MOV     [CLUSNUM],BX
 23341 00003A4F 8916[BA05]              	MOV     [LASTPOS],DX
 23342                                  
 23343 00003A53 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 23344 00003A55 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 23345 00003A57 E3C4                    	JCXZ    HAVSTART        ; See if no more data
 23346 00003A59 51                      	PUSH    CX              ; No. of clusters short of first
 23347 00003A5A 89C1                    	MOV     CX,AX
 23348 00003A5C E8A612                  	call	ALLOCATE
 23349 00003A5F 59                      	POP     CX
 23350 00003A60 72C7                    	JC	short WRTERR
 23351 00003A62 8B16[BA05]              	MOV     DX,[LASTPOS]
 23352 00003A66 42                      	INC     DX
 23353 00003A67 49                      	DEC     CX
 23354 00003A68 7405                    	JZ	short NOSKIP
 23355 00003A6A E8FB10                  	call	SKPCLP
 23356 00003A6D 72C6                    	JC	short ACC_ERRWJ ; ds=ss ; 10/02/2024
 23357                                  NOSKIP:
 23358 00003A6F 891E[BC05]              	MOV     [CLUSNUM],BX
 23359 00003A73 8916[BA05]              	MOV     [LASTPOS],DX
 23360                                  DOWRT:
 23361 00003A77 833E[D205]00            	CMP     word [BYTCNT1],0
 23362 00003A7C 7405                    	JZ	short WRTMID
 23363                                  	; 09/02/2024
 23364                                  	;MOV	BX,[CLUSNUM]	 ; (not used in 'BUFWRT') ; 09/02/2024
 23365 00003A7E E87611                  	call	BUFWRT
 23366 00003A81 72B2                    	JC	short ACC_ERRWJ
 23367                                  WRTMID:
 23368 00003A83 A1[D605]                	MOV     AX,[SECCNT]
 23369 00003A86 09C0                    	OR      AX,AX
 23370                                  	; 20/11/2022
 23371 00003A88 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 23372 00003A8A 0106[C405]              	ADD     [SECPOS],AX
 23373                                  	; 19/05/2019
 23374                                  	; MSDOS 6.0
 23375 00003A8E 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 23376 00003A93 E8BC11                  	call	NEXTSEC
 23377                                  	; 16/12/2022
 23378 00003A96 729D                    	JC	short ACC_ERRWJ
 23379                                  	;JC	short SET_ACC_ERRW	;M039
 23380 00003A98 C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 23381 00003A9D 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 23382 00003AA1 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 23383 00003AA5 8B0E[D605]              	MOV     CX,[SECCNT]
 23384                                  WRTLP:
 23385 00003AA9 E8D711                  	call	OPTIMIZE
 23386 00003AAC 7248                    	JC	short SET_ACC_ERRW
 23387                                  	; 16/12/2022
 23388                                  	;JC	short ACC_ERRWJ
 23389                                  
 23390                                  ;M039
 23391                                  ;       DI = Next physical cluster.
 23392                                  ;       AX = # sectors remaining.
 23393                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 23394                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23395                                  ;	     sectors, also termed an "Extent".)
 23396                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23397                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23398                                  ;
 23399                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23400                                  ;	are in Extent; they are being over-written.
 23401                                  
 23402 00003AAE 57                      	push    di
 23403 00003AAF 50                      	push    ax
 23404                                  
 23405                                  	; MSDOS 3.3
 23406                                  	; IBMDOS.COM (1987) - Offset 4497h
 23407                                  	;push	dx
 23408                                  	;push	bx
 23409                                  	;mov	al,[es:bp]
 23410                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 23411                                  	;mov	bx,cx
 23412                                  	;add	bx,dx	; (bx = Extent end)
 23413                                  
 23414                                  ;	DX = Extent start.
 23415                                  ;	BX = Extent end.
 23416                                  ;	AL = Drive #.
 23417                                  
 23418                                  	;call	SETVISIT
 23419                                  
 23420                                  ;wbufq1:
 23421                                  	;;or	byte [di+5],20h
 23422                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 23423                                  	;;cmp	al,[di+4]
 23424                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 23425                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 23426                                  	;;cmp	[di+6],dx
 23427                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 23428                                  	;jb	short wbufq2
 23429                                  	;;cmp	[di+6],bx
 23430                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 23431                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 23432                                  
 23433                                  	;; Buffer sector is in the Extent
 23434                                  
 23435                                  	;;mov	word [di+4],20FFh
 23436                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 23437                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 23438                                  	;				; .buf_flags, AH = 0, reset/clear
 23439                                  	;call	SCANPLACE
 23440                                  ;wbufq2:
 23441                                  	;call	SKIPVISIT
 23442                                  	;jnz	short wbufq1
 23443                                  	;pop	bx
 23444                                  	;pop	dx
 23445                                  
 23446                                          ; MSDOS 6.0
 23447 00003AB0 E82B01                  	call	DskWrtBufPurge		;DS trashed.
 23448                                  
 23449                                  ;ASSUME DS:NOTHING
 23450                                  ;M039
 23451                                  	; MSDOS 3.3 & MSDOS 6.0
 23452                                  ;hkn; SS override for DMAADD and ALLOWED
 23453 00003AB3 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 23454                                  	;mov	byte [ss:ALLOWED],38h
 23455 00003AB8 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 23456                                  
 23457                                  ;	put logic from DWRITE in-line here so we can modify it
 23458                                  ;	for DISK FULL conditions.
 23459                                  
 23460                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23461                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 23462                                  
 23463                                  	; 16/12/2022
 23464                                  	; MSDOS 3.3 (& MSDOS 5.0)
 23465                                  	;call	DWRITE
 23466                                  
 23467                                  ;DWRITE_OKAY:
 23468                                  
 23469                                  	; 16/12/2022
 23470                                  	; MSDOS 5.0 (& MSDOS 3.3)
 23471                                  	;pop	cx
 23472                                  	;pop	bx
 23473                                  	;push	ss
 23474                                  	;pop	ds
 23475                                  	;jc	short SET_ACC_ERRW
 23476                                  	;jcxz	WRTLAST
 23477                                  	;mov	dl,0
 23478                                  	;inc	word [LASTPOS]
 23479                                  	;jmp	short WRTLP
 23480                                  
 23481                                  	; 16/12/2022
 23482                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23483                                  DWRITE_LUP:
 23484                                  	; 23/07/2019 - Retro DOS v3.2
 23485                                  
 23486                                  	; MSDOS 6.0
 23487 00003ABE E8F9FB                  	call	DSKWRITE
 23488 00003AC1 7417                    	jz	short DWRITE_OKAY
 23489                                  
 23490                                  ;;	int	3
 23491                                  
 23492 00003AC3 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 23493 00003AC5 7423                    	jz	short DWRITE_DISK_FULL
 23494                                  
 23495                                  	; 16/12/2022
 23496                                  
 23497                                  ;;hkn; SS override
 23498 00003AC7 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 23499 00003ACD E819FC                  	call	HARDERRRW
 23500 00003AD0 3C01                    	CMP	AL,1		; Check for retry
 23501 00003AD2 74EA                    	JZ	short DWRITE_LUP
 23502                                  
 23503                                  	; 16/12/2022
 23504                                  	; 23/07/2019
 23505                                  	;POP	CX ; *4*
 23506                                  	;POP	BX ; *5*
 23507                                  	;
 23508                                  	;push	ss
 23509                                  	;pop	ds
 23510                                  	;
 23511                                  
 23512                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23513                                  
 23514                                  	; 16/12/2022
 23515 00003AD4 3C03                    	CMP	AL,3		; Check for FAIL
 23516 00003AD6 F8                      	CLC
 23517 00003AD7 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 23518 00003AD9 F9                      	STC
 23519                                  
 23520                                  DWRITE_OKAY:
 23521                                  	; 16/12/2022
 23522                                  	; 23/07/2019
 23523                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23524 00003ADA 59                      	POP	CX ; *4*
 23525 00003ADB 5B                      	POP	BX ; *5*
 23526                                  
 23527                                  ;       CX = # sectors remaining.
 23528                                  ;       BX = Next physical cluster.
 23529                                  
 23530                                  ;hkn; SS override
 23531                                          ;Context DS
 23532                                  	; 16/12/2022
 23533                                  	;push	ss
 23534                                  	;pop	ds
 23535                                  
 23536                                  	; 10/02/2024
 23537                                  	; 16/12/2022
 23538                                  	;jc	short SET_ACC_ERRW
 23539                                  
 23540                                  	; 16/12/2022
 23541 00003ADC 16                      	push	ss
 23542 00003ADD 1F                      	pop	ds
 23543                                  
 23544                                  	; 10/02/2024
 23545 00003ADE 7216                    	jc	short SET_ACC_ERRW
 23546                                  
 23547 00003AE0 E317                    	JCXZ    WRTLAST
 23548                                  
 23549                                  	; 10/02/2024
 23550 00003AE2 B200                    	MOV	DL,0
 23551                                  	;xor	dl,dl ; 23/07/2019
 23552 00003AE4 FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 23553 00003AE8 EBBF                    	JMP     short WRTLP
 23554                                  
 23555                                  	; 23/07/2019 - Retro DOS v3.2
 23556                                  	; 09/08/2018
 23557                                  	; MSDOS 6.0
 23558                                  DWRITE_DISK_FULL:
 23559                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 23560                                  	; 16/12/2022
 23561 00003AEA 16                      	push	ss
 23562 00003AEB 1F                      	pop	ds
 23563 00003AEC 59                      	pop	cx		; unjunk stack
 23564 00003AED 5B                      	pop	bx
 23565 00003AEE C606[0B06]01            	mov	byte [DISK_FULL],1
 23566                                  	;stc
 23567 00003AF3 E933FF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 23568                                  
 23569                                  SET_ACC_ERRW:
 23570                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 23571                                  	; 10/02/2024
 23572                                  	; ds=ss
 23573 00003AF6 E921FD                  	jmp	SET_ACC_ERR
 23574                                  
 23575                                  WRTLAST:
 23576 00003AF9 A1[D405]                	MOV     AX,[BYTCNT2]
 23577 00003AFC 09C0                    	OR      AX,AX
 23578 00003AFE 7413                    	JZ	short FINWRT
 23579 00003B00 A3[D205]                	MOV     [BYTCNT1],AX
 23580 00003B03 E84C11                  	call	NEXTSEC
 23581 00003B06 72EE                    	JC	short SET_ACC_ERRW
 23582 00003B08 C706[CC05]0000          	MOV     word [BYTSECPOS],0
 23583 00003B0E E8E610                  	call	BUFWRT
 23584 00003B11 72E3                    	JC	short SET_ACC_ERRW
 23585                                  FINWRT:
 23586 00003B13 C43E[9E05]              	LES     DI,[THISSFT]
 23587 00003B17 A1[DE05]                	MOV     AX,[GROWCNT]
 23588 00003B1A 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 23589 00003B1E 09C0                    	OR      AX,AX
 23590 00003B20 7502                    	JNZ	short UPDATE_size
 23591 00003B22 E30F                    	JCXZ    SAMSIZ
 23592                                  UPDATE_size:
 23593                                  	;add	[es:di+11h],ax
 23594 00003B24 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 23595                                  	;adc	[es:di+13h],cx
 23596 00003B28 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 23597                                  
 23598                                  ; Make sure that all other SFT's see this growth also.
 23599                                  
 23600 00003B2C B80100                  	MOV     AX,1
 23601                                  ;if installed
 23602                                  	;Call	JShare + 14 * 4
 23603 00003B2F FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23604                                  ;else
 23605                                  ;	Call    ShSU
 23606                                  ;endif
 23607                                  
 23608                                  SAMSIZ:
 23609 00003B33 E97AFD                  	jmp	SETCLUS	; ES:DI already points to SFT
 23610                                  
 23611                                  	; 16/12/2022
 23612                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23613                                  ;SET_ACC_ERRW:
 23614                                  	;jmp	SET_ACC_ERR_DS
 23615                                  
 23616                                  WRTEOF:
 23617 00003B36 89C1                    	MOV     CX,AX
 23618 00003B38 09D1                    	OR      CX,DX
 23619 00003B3A 746A                    	JZ	short KILLFIL
 23620 00003B3C 83E801                  	SUB     AX,1
 23621 00003B3F 83DA00                  	SBB     DX,0
 23622                                  
 23623                                  	; MSDOS 3.3
 23624                                  	;;div	word [es:bp+2]
 23625                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23626                                  	;;mov	cl,[es:bp+5]
 23627                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 23628                                  	;shr	ax,cl
 23629                                  
 23630                                  	; MSDOS 6.0
 23631 00003B42 53                      	PUSH	BX
 23632                                  	;mov	bx,[es:bp+2]
 23633 00003B43 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 23634 00003B47 E81A01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 23635 00003B4A 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 23636 00003B4B 89CA                    	MOV	DX,CX			      ;M039
 23637 00003B4D 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 23638 00003B51 E83701                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 23639                                  
 23640 00003B54 89C1                    	MOV     CX,AX
 23641 00003B56 E8EF0F                  	call	FNDCLUS
 23642                                  SET_ACC_ERRWJ2:
 23643 00003B59 729B                    	JC	short SET_ACC_ERRW
 23644                                  
 23645 00003B5B E324                    	JCXZ    RELFILE
 23646 00003B5D E8A511                  	call	ALLOCATE
 23647                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 23648                                  	; 16/12/2022
 23649 00003B60 7303                    	jnc	short UPDATE
 23650 00003B62 E9C4FE                  	JMP	WRTERR
 23651                                  UPDATE:
 23652 00003B65 C43E[9E05]              	LES	DI,[THISSFT]
 23653 00003B69 A1[CE05]                	MOV	AX,[BYTPOS]
 23654                                  	;mov	[es:di+11h],ax
 23655 00003B6C 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 23656 00003B70 A1[D005]                	MOV	AX,[BYTPOS+2]
 23657                                  	;mov	[es:di+13h],ax
 23658 00003B73 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 23659                                  ;
 23660                                  ; Make sure that all other SFT's see this growth also.
 23661                                  ;
 23662 00003B77 B80200                  	MOV     AX,2
 23663                                  ;if installed
 23664                                  	;Call	JShare + 14 * 4
 23665 00003B7A FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23666                                  ;else
 23667                                  ;	Call    ShSU
 23668                                  ;endif
 23669 00003B7E 31C9                    	XOR     CX,CX ; 0
 23670                                  	;jmp	ADDREC
 23671                                  	; 08/02/2024
 23672 00003B80 C3                      	retn
 23673                                  
 23674                                  	; 16/12/2022
 23675                                  ;WRTERRJ: 
 23676                                  	;JMP	WRTERR
 23677                                  
 23678                                  ;;;;;;;;;;;;;;;; 7/18/86
 23679                                  ;;;;;;;;;;;;;;;;
 23680                                  
 23681                                  RELFILE:
 23682                                  	; MSDOS 6.0
 23683 00003B81 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 23684 00003B82 C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 23685                                  	;cmp	dx,[es:di+19h]
 23686 00003B86 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 23687 00003B8A 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 23688                                  	;mov	[es:di+19h],0
 23689 00003B8C 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 23690                                  	;mov	dx,[es:di+0Bh]
 23691 00003B92 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 23692                                  	;mov	[es:di+35h],dx
 23693 00003B96 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 23694                                  SKIPRESET:                            		;AN002; BL
 23695 00003B9A 07                      	POP     ES                    		;AN002; BL
 23696                                  ;
 23697 00003B9B BAFFFF                  	MOV     DX,0FFFFH
 23698 00003B9E E81212                  	call	RELBLKS
 23699                                  	; 16/12/2022
 23700                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23701 00003BA1 73C2                    	jnc	short UPDATE
 23702                                  SET_ACC_ERRWJ:
 23703                                  	;JC	short SET_ACC_ERRWJ2
 23704                                  	;JMP	SHORT UPDATE
 23705                                  	; 16/12/2022
 23706                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss
 23707                                  	; 10/02/2024
 23708                                  	; ds=ss
 23709 00003BA3 E974FC                  	jmp	SET_ACC_ERR
 23710                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23711                                  	;JC	short SET_ACC_ERRWJ2
 23712                                  	;JMP	SHORT UPDATE
 23713                                  
 23714                                  KILLFIL:
 23715 00003BA6 31DB                    	XOR     BX,BX
 23716 00003BA8 06                      	PUSH    ES
 23717 00003BA9 C43E[9E05]              	LES     DI,[THISSFT]
 23718                                  	;mov	[es:di+19h],bx
 23719 00003BAD 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 23720                                  	;mov	[es:di+35h],bx ; 04/05/2019
 23721 00003BB1 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 23722                                  	;xchg	bx,[es:di+0Bh]
 23723 00003BB5 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 23724 00003BB9 07                      	POP	ES
 23725                                  
 23726 00003BBA 09DB                    	OR	BX,BX
 23727                                  	;JZ	short UPDATEJ
 23728                                  	; 16/12/2022
 23729 00003BBC 74A7                    	jz	short UPDATE
 23730                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23731                                  	;jz	short UPDATEJ
 23732                                  
 23733                                  ;; 10/23/86 FastOpen update
 23734 00003BBE 06                      	PUSH	ES              ; since first cluster # is 0
 23735 00003BBF 55                      	PUSH	BP              ; we must delete the old cache entry
 23736 00003BC0 50                      	PUSH	AX
 23737 00003BC1 51                      	PUSH	CX
 23738 00003BC2 52                      	PUSH	DX
 23739 00003BC3 C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 23740                                  	; 15/12/2022
 23741 00003BC7 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 23742                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23743                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 23744 00003BCB 89D9                    	MOV	CX,BX                    ; first cluster #
 23745 00003BCD B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 23746 00003BCF E8ABEA                  	call	FastOpen_Update          ; call fastopen
 23747 00003BD2 5A                      	POP	DX
 23748 00003BD3 59                      	POP	CX
 23749 00003BD4 58                      	POP	AX
 23750 00003BD5 5D                      	POP	BP
 23751 00003BD6 07                      	POP	ES
 23752                                  ;; 10/23/86 FastOpen update
 23753                                  
 23754 00003BD7 E8D711                  	call	RELEASE
 23755 00003BDA 72C7                    	JC	short SET_ACC_ERRWJ
 23756                                  UPDATEJ:
 23757                                  	; 20/11/2022
 23758 00003BDC EB87                    	JMP	short UPDATE ; 10/08/2018
 23759                                  
 23760                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 23761                                  ;----------------------------------------------------------------------------
 23762                                  ;
 23763                                  ; Procedure Name : DskWrtBufPurge
 23764                                  ;
 23765                                  ; Inputs:
 23766                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23767                                  ;	     sectors, also termed an "Extent".)
 23768                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23769                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23770                                  ;
 23771                                  ; Function:
 23772                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23773                                  ;	are in Extent; they are being over-written.
 23774                                  ;
 23775                                  ; Outputs:
 23776                                  ;       (Same as Input.)
 23777                                  ; Uses:
 23778                                  ;       All registers except DS,AX,SI,DI preserved.
 23779                                  ;       SS override for all global variables.
 23780                                  ;----------------------------------------------------------------------------
 23781                                  ;M039: Created
 23782                                  
 23783                                  ;procedure   DskWrtBufPurge,NEAR
 23784                                  ;
 23785                                  ;ASSUME  DS:NOTHING
 23786                                  
 23787                                  ; 04/05/2019 - Retro DOS v4.0
 23788                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 23789                                  
 23790                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23791                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 23792                                  
 23793                                  DskWrtBufPurge:
 23794                                  	;SaveReg <bx,cx>
 23795 00003BDE 53                      	push	bx
 23796 00003BDF 51                      	push	cx
 23797                                  
 23798 00003BE0 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23799 00003BE5 89DE                    	mov	si,bx
 23800 00003BE7 01D1                    	add	cx,dx
 23801 00003BE9 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23802                                  
 23803                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23804                                  	;;mov	al,[es:bp+0]
 23805                                  	;mov	al,[es:bp+DPB.DRIVE]
 23806                                  	; 15/12/2022
 23807 00003BEC 268A4600                	mov	al,[es:bp]
 23808                                  
 23809                                  ;	BX:DX = Extent start.
 23810                                  ;	SI:CX = Extent end + 1.
 23811                                  ;	AL = Drive #
 23812                                  
 23813 00003BF0 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23814 00003BF6 7431                    	je	short nosc		; -no, jump.
 23815                                  
 23816                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23817                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23818                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23819                                  
 23820 00003BF8 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23821 00003BFD 752A                    	jne	short nosc		; -no, jump.
 23822                                  
 23823 00003BFF 50                      	push    ax
 23824 00003C00 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23825 00003C04 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23826                                  
 23827                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23828                                  	;jbe	short sc5		; -yes, jump.
 23829                                  
 23830 00003C09 39FE                    	cmp	si,di
 23831 00003C0B 7502                    	jne	short sc01
 23832 00003C0D 39C1                    	cmp	cx,ax
 23833                                  sc01: 
 23834 00003C0F 7617                    	jbe	short sc5
 23835                                  
 23836 00003C11 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23837 00003C16 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23838                                  	
 23839                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23840                                  	;jae	short sc5		; -yes, jump.
 23841                                  
 23842 00003C19 39FB                    	cmp	bx,di
 23843 00003C1B 7502                    	jne	short sc02
 23844 00003C1D 39C2                    	cmp	dx,ax
 23845                                  sc02:
 23846 00003C1F 7307                    	jnb	short sc5
 23847                                  
 23848 00003C21 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23849                                  sc5:	
 23850 00003C28 58                      	pop     ax
 23851                                  
 23852                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23853                                  ;	written.
 23854                                  
 23855                                  nosc:	
 23856 00003C29 E88A1B                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23857                                  
 23858                                  _bufq:	
 23859                                  	;cmpo	al,[di+4]
 23860 00003C2C 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23861 00003C2F 7527                    	jne	short bufq5		; -no, jump.
 23862                                  
 23863                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23864                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23865                                  
 23866                                  	;cmp	bx,[di+8]
 23867 00003C31 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23868 00003C34 7503                    	jne	short bufq04
 23869                                  	;cmp	dx,[di+6]
 23870 00003C36 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23871                                  bufq04:
 23872 00003C39 771D                    	ja	short bufq5
 23873                                  
 23874                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23875                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23876                                  
 23877                                  	;cmp	si,[di+8]
 23878 00003C3B 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23879 00003C3E 7503                    	jne	short bufq05
 23880                                  	;cmp	cx,[di+6]
 23881 00003C40 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23882                                  bufq05:
 23883 00003C43 7613                    	jbe	short bufq5
 23884                                  
 23885                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23886                                  
 23887                                  	;test	byte [di+5],40h
 23888 00003C45 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23889 00003C49 7403                    	jz	short bufq4		; -no, jump.
 23890 00003C4B E8E61D                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23891                                  bufq4:
 23892                                  	;mov	word [di+4],20FFh
 23893 00003C4E C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23894                                  
 23895 00003C53 E8721B                  	call	SCANPLACE
 23896 00003C56 EB02                    	jmp     short bufq6
 23897                                  bufq5: 
 23898 00003C58 8B3D                    	mov     di,[di]
 23899                                  	;mov	di,[di+BUFFINFO.buf_next]
 23900                                  bufq6: 
 23901 00003C5A 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23902 00003C5F 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23903                                  	
 23904                                  	;RestoreReg <cx,bx>
 23905 00003C61 59                      	pop	cx
 23906 00003C62 5B                      	pop	bx
 23907 00003C63 C3                      	retn
 23908                                  
 23909                                  ;EndProc DskWrtBufPurge
 23910                                  
 23911                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23912                                  ;----------------------------------------------------------------------------
 23913                                  ;
 23914                                  ; Procedure Name : DIV32
 23915                                  ;
 23916                                  ; Inputs:
 23917                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23918                                  ; Function:
 23919                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23920                                  ; Outputs:
 23921                                  ;       CX:AX = quotient , DX= remainder
 23922                                  ; Uses:
 23923                                  ;       All registers except AX,CX,DX preserved.
 23924                                  ;----------------------------------------------------------------------------
 23925                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23926                                  
 23927                                  ; 04/05/2019 - Retro DOS v4.0
 23928                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23929                                  
 23930                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23931                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23932                                  
 23933                                  DIV32:
 23934 00003C64 81FB0002                	cmp	bx,512
 23935 00003C68 7515                    	jne	short div5
 23936                                  
 23937 00003C6A 89D1                    	mov	cx,dx
 23938 00003C6C 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23939 00003C6E 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23940 00003C72 88E0                    	mov	al,ah
 23941 00003C74 88CC                    	mov	ah,cl
 23942 00003C76 88E9                    	mov	cl,ch
 23943 00003C78 30ED                    	xor	ch,ch
 23944 00003C7A D1E9                    	shr	cx,1
 23945 00003C7C D1D8                    	rcr	ax,1
 23946 00003C7E C3                      	retn
 23947                                  div5:	
 23948 00003C7F 89C1                    	mov	cx,ax
 23949 00003C81 89D0                    	mov	ax,dx
 23950 00003C83 31D2                    	xor	dx,dx
 23951 00003C85 F7F3                    	div	bx              ; 0:AX/BX
 23952 00003C87 91                      	xchg	cx,ax
 23953 00003C88 F7F3                    	div	bx              ; DX:AX/BX
 23954 00003C8A C3                      	retn
 23955                                  
 23956                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23957                                  ;----------------------------------------------------------------------------
 23958                                  ;
 23959                                  ; Procedure Name : SHR32
 23960                                  ;
 23961                                  ; Inputs:
 23962                                  ;	DX:AX = 32 bit sector number
 23963                                  ; Function:
 23964                                  ;       Perform 32 bit shift right
 23965                                  ; Outputs:
 23966                                  ;	AX = cluster number
 23967                                  ;	ZF = 1 if no error
 23968                                  ;	   = 0 if error (cluster number > 64k)
 23969                                  ; Uses:
 23970                                  ;       DX,CX
 23971                                  ;---------------------------------------------------------------------------
 23972                                  ; M017	- SHR32 rewritten for better performance
 23973                                  ; M039	- Additional optimization
 23974                                  
 23975                                  ; 04/05/2019 - Retro DOS v4.0
 23976                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23977                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23978                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23979                                  
 23980                                  SHR32:
 23981                                  	;mov	cl,[es:bp+5]
 23982 00003C8B 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23983 00003C8F 30ED                    	xor	ch,ch	    ;ZF=1
 23984 00003C91 E306                    	jcxz	norota
 23985                                  
 23986                                  rotashft2:
 23987 00003C93 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23988 00003C95 D1D8                    	rcr	ax,1	    ;ZF not affected.
 23989 00003C97 E2FA                    	loop	rotashft2
 23990                                  norota:
 23991 00003C99 C3                      	retn
 23992                                  
 23993                                  ;============================================================================
 23994                                  ; DIR.ASM, MSDOS 6.0, 1991
 23995                                  ;============================================================================
 23996                                  ; 27/07/2018 - Retro DOS v3.0
 23997                                  ; 19/05/2019 - Retro DOS v4.0
 23998                                  
 23999                                  ;	TITLE	DIR - Directory and path cracking
 24000                                  ;	NAME	Dir
 24001                                  
 24002                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 24003                                  ;---------------------------------------------------------------------------
 24004                                  ;
 24005                                  ; Procedure Name : FINDENTRY,SEARCH
 24006                                  ;
 24007                                  ; Inputs:
 24008                                  ;	[THISDPB] set
 24009                                  ;	[SECCLUSPOS] = 0
 24010                                  ;	[DIRSEC] = Starting directory sector number
 24011                                  ;	[CLUSNUM] = Next cluster of directory
 24012                                  ;	[CLUSFAC] = Sectors/Cluster
 24013                                  ;	[NAME1] = Name to look for
 24014                                  ; Function:
 24015                                  ;	Find file name in disk directory.
 24016                                  ;	"?" matches any character.
 24017                                  ; Outputs:
 24018                                  ;	Carry set if name not found
 24019                                  ;	ELSE
 24020                                  ;	Zero set if attributes match (always except when creating)
 24021                                  ;	AH = Device ID (bit 7 set if not disk)
 24022                                  ;	[THISDPB] = Base of drive parameters
 24023                                  ;	DS = DOSGROUP
 24024                                  ;	ES = DOSGROUP
 24025                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 24026                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 24027                                  ;	[CURBUF] has directory record with match
 24028                                  ;	[NAME1] has file name
 24029                                  ;	[LASTENT] is entry number of the entry
 24030                                  ; All other registers destroyed.
 24031                                  ;----------------------------------------------------------------------------
 24032                                  
 24033                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 24034                                  ;hkn; this point.
 24035                                  
 24036                                  SEARCH:
 24037                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24038                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 24039                                  
 24040                                  	; 19/05/2019 - Retro DOS v4.0
 24041                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 24042                                  
 24043                                  	; 27/07/2018 - Retro DOS v3.0
 24044                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 24045                                  	; 15/03/2018 - Retro DOS v2.0
 24046                                  
 24047                                  	; 24/01/2024
 24048                                  
 24049                                  	;entry	FindEntry
 24050                                  FINDENTRY:
 24051 00003C9A E81604                  	call	STARTSRCH
 24052 00003C9D A0[6B05]                	MOV	AL,[ATTRIB]
 24053                                  	;and	al,9Eh
 24054 00003CA0 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 24055                                  	;cmp	al,8
 24056 00003CA2 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 24057 00003CA4 7503                    	JNZ	short NOTVOLSRCH	; No
 24058 00003CA6 E86601                  	CALL	SETROOTSRCH		; Yes force search of root
 24059                                  NOTVOLSRCH:
 24060 00003CA9 E8F800                  	CALL	GETENTRY
 24061                                  	;JNC	short SRCH
 24062                                  	;JMP	SETESRET
 24063                                  	; 24/01/2024
 24064 00003CAC 723F                    	jc	short SETESRET
 24065                                  
 24066                                  	;entry	Srch
 24067                                  SRCH:
 24068 00003CAE 1E                      	PUSH	DS
 24069 00003CAF 8E1E[E405]              	MOV	DS,[CURBUF+2]
 24070                                  
 24071                                  ;	(DS:BX) = directory entry address
 24072                                  
 24073 00003CB3 8A27                    	mov	ah,[BX]
 24074                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 24075 00003CB5 08E4                    	OR	AH,AH			; End of directory?
 24076 00003CB7 7437                    	JZ	short FREE
 24077                                  
 24078                                  ;hkn; SS override
 24079 00003CB9 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 24080 00003CBE 7430                    	JZ	short FREE
 24081                                  	;test	byte [bx+0Bh],8
 24082 00003CC0 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 24083                                  					; Volume ID file?
 24084 00003CC4 7405                    	JZ	short CHKFNAM 		; NO
 24085                                  
 24086                                  ;hkn; SS override
 24087 00003CC6 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 24088                                  CHKFNAM:
 24089                                  ;	Context ES
 24090 00003CCB 8CD6                    	MOV	SI,SS
 24091 00003CCD 8EC6                    	MOV	ES,SI
 24092 00003CCF 89DE                    	MOV	SI,BX
 24093                                  
 24094                                  ;hkn; NAME1 is in DOSDATA
 24095 00003CD1 BF[4B05]                	MOV	DI,NAME1
 24096                                  ;;;;; 7/29/86
 24097                                  
 24098                                  ;hkn; SS override for NAME1
 24099                                  	;CMP	BYTE [SS:NAME1],0E5H	; special char check
 24100                                  	;JNZ	short NO_E5
 24101                                  	;MOV	BYTE [SS:NAME1],05H
 24102                                  	; 22/09/2023
 24103 00003CD4 26803DE5                	cmp	byte [es:di],0E5h
 24104 00003CD8 7504                    	jnz	short NO_E5
 24105 00003CDA 26C60505                	mov	byte [es:di],05h
 24106                                  NO_E5:
 24107                                  ;;;;; 7/29/86
 24108 00003CDE E86100                  	CALL	MetaCompare
 24109 00003CE1 7429                    	JZ	short FOUND
 24110 00003CE3 1F                      	POP	DS
 24111                                  
 24112                                  	;entry	NEXTENT
 24113                                  NEXTENT:
 24114 00003CE4 C42E[8A05]              	LES	BP,[THISDPB]
 24115 00003CE8 E86600                  	CALL	NEXTENTRY
 24116 00003CEB 73C1                    	JNC	short SRCH
 24117                                  	;JMP	SHORT SETESRET
 24118                                  	; 24/01/2024
 24119                                  SETESRET:
 24120 00003CED 16                      	PUSH	SS
 24121 00003CEE 07                      	POP	ES
 24122 00003CEF C3                      	retn
 24123                                  FREE:
 24124 00003CF0 1F                      	POP	DS
 24125 00003CF1 8B0E[4803]              	MOV	CX,[LASTENT]
 24126 00003CF5 3B0E[D805]              	CMP	CX,[ENTFREE]
 24127 00003CF9 7304                    	JAE	short TSTALL
 24128 00003CFB 890E[D805]              	MOV	[ENTFREE],CX
 24129                                  TSTALL:
 24130 00003CFF 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 24131                                  NEXTENTJ:
 24132 00003D03 74DF                    	je	short NEXTENT 		; No - continue search
 24133 00003D05 890E[DA05]              	MOV	[ENTLAST],CX
 24134 00003D09 F9                      	STC
 24135 00003D0A EBE1                    	JMP	SHORT SETESRET
 24136                                  
 24137                                  FOUND:
 24138                                  ; We have a file with a matching name. We must now consider the attributes:
 24139                                  ; ATTRIB	Action
 24140                                  ; ------	------
 24141                                  ; Volume_ID	Is Volume_ID in test?
 24142                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 24143                                  ;		If create then Is ATTRIB equal to test?
 24144                                  
 24145 00003D0C 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 24146 00003D0E 1F                      	POP	DS
 24147 00003D0F 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 24148                                  	;and	ah,9Eh
 24149 00003D13 80E4DE                  	AND	AH,~attr_ignore
 24150                                  	;lea	si,[si+15]
 24151 00003D16 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 24152                                  					; point to first cluster field
 24153                                  	;test	ch,8
 24154 00003D19 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 24155 00003D1C 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 24156                                  	;test	ah,8
 24157 00003D1E F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 24158                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 24159                                  	; 16/12/2022
 24160 00003D21 74C1                    	jz	short NEXTENT ; 19/05/2019
 24161                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24162                                  	;JZ	short NEXTENTJ
 24163 00003D23 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 24164 00003D25 EB11                    	JMP	SHORT RETFF		; Found Volume ID
 24165                                  check_one_volume_id:
 24166                                  	;CMP	ah,8
 24167 00003D27 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 24168                                  	;JZ	short NEXTENTJ		; Yes, continue search
 24169                                  	; 16/12/2022
 24170 00003D2A 74B8                    	je	short NEXTENT ; 19/05/2019
 24171                                  	;JZ	short NEXTENTJ
 24172 00003D2C E89803                  	CALL	MatchAttributes
 24173 00003D2F 7407                    	JZ	SHORT RETFF
 24174 00003D31 F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 24175                                  	; 16/12/2022
 24176                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 24177 00003D36 74AC                    	jz	short NEXTENT ; 19/05/2019
 24178                                  RETFF:
 24179 00003D38 C42E[8A05]              	LES	BP,[THISDPB]
 24180                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24181                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 24182                                  	; 15/12/2022
 24183 00003D3C 268A6600                	MOV	AH,[ES:BP]
 24184                                  ;SETESRET:
 24185                                  	;PUSH	SS
 24186                                  	;POP	ES
 24187                                  	;retn
 24188                                  	; 24/01/2024
 24189 00003D40 EBAB                    	jmp	short SETESRET
 24190                                  
 24191                                  ;----------------------------------------------------------------------------
 24192                                  ;
 24193                                  ; Procedure Name : MetaCompare
 24194                                  ;
 24195                                  ; Inputs:
 24196                                  ;	DS:SI -> 11 character FCB style name NO '?'
 24197                                  ;	    Typically this is a directory entry. It MUST be in upper case
 24198                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 24199                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 24200                                  ; Function:
 24201                                  ;	Compare FCB style names allowing for ? match to any char
 24202                                  ; Outputs:
 24203                                  ;	Zero if match else NZ
 24204                                  ; Destroys CX,SI,DI all others preserved
 24205                                  ;----------------------------------------------------------------------------
 24206                                  
 24207                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24208                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 24209                                  
 24210                                  MetaCompare:
 24211 00003D42 B90B00                  	MOV	CX,11
 24212                                  WILDCRD:
 24213 00003D45 F3A6                    	REPE	CMPSB
 24214 00003D47 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 24215                                  CHECK_META:
 24216 00003D49 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 24217 00003D4E 74F5                    	JZ	short WILDCRD
 24218                                  MetaRet:
 24219 00003D50 C3                       	retn				; Zero set, Match
 24220                                  
 24221                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 24222                                  ;----------------------------------------------------------------------------
 24223                                  ;
 24224                                  ; Procedure Name : NEXTENTRY
 24225                                  ;
 24226                                  ; Inputs:
 24227                                  ;	Same as outputs of GETENTRY, above
 24228                                  ; Function:
 24229                                  ;	Update BX, and [LASTENT] for next directory entry.
 24230                                  ;	Carry set if no more.
 24231                                  ;----------------------------------------------------------------------------
 24232                                  
 24233                                  NEXTENTRY:
 24234                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24235                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 24236                                  
 24237                                  	; 19/05/2019 - Retro DOS v4.0
 24238                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 24239                                  
 24240                                  	; 27/07/2018 - Retro DOS v3.0
 24241                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 24242                                  	; 15/03/2018 - Retro DOS v2.0
 24243                                  
 24244 00003D51 A1[4803]                	MOV	AX,[LASTENT]
 24245 00003D54 3B06[DA05]              	CMP	AX,[ENTLAST]
 24246 00003D58 7422                    	JZ	short NONE
 24247 00003D5A 40                      	INC	AX
 24248                                  	;ADD	BX,32
 24249 00003D5B 8D5F20                  	LEA	BX,[BX+32]
 24250 00003D5E 39D3                    	CMP	BX,DX
 24251                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 24252                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 24253                                  	; 16/12/2022
 24254 00003D60 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 24255 00003D62 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 24256 00003D66 FEC3                    	INC	BL
 24257 00003D68 3A1E[7705]              	CMP	BL,[CLUSFAC]
 24258 00003D6C 7215                    	JB	short SAMECLUS
 24259 00003D6E 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 24260 00003D72 E89716                  	call	IsEOF
 24261 00003D75 7305                    	JAE	short NONE
 24262                                  	; 23/07/2019
 24263 00003D77 83FB02                  	CMP	BX,2
 24264                                  	;JB	short NONE
 24265                                  	;JMP	short GETENT
 24266                                  	; 16/12/2022
 24267 00003D7A 732B                    	jnb	short GETENT
 24268                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24269                                  	;JB	short NONE
 24270                                  	;JMP	short GETENT
 24271                                  NONE:
 24272 00003D7C F9                      	STC
 24273 00003D7D C3                      	retn
 24274                                  HAVIT:
 24275 00003D7E A3[4803]                	MOV	[LASTENT],AX
 24276 00003D81 F8                      	CLC
 24277                                  nextentry_retn:
 24278 00003D82 C3                      	retn
 24279                                  
 24280                                  SAMECLUS:
 24281 00003D83 881E[7305]              	MOV	[SECCLUSPOS],BL
 24282 00003D87 A3[4803]                	MOV	[LASTENT],AX
 24283 00003D8A 1E                      	PUSH	DS
 24284 00003D8B C53E[E205]              	LDS	DI,[CURBUF]
 24285                                  	; 19/05/2019
 24286                                  	; MSDOS 6.0
 24287                                  	;;mov	dx,[di+8]
 24288                                  	; 23/09/2023
 24289                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 24290                                  ;hkn; SS override
 24291                                  	;MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 24292                                  
 24293                                  ; 14/02/2024
 24294                                  %if 0
 24295                                  	; 23/09/2023
 24296                                  	mov	si,[di+BUFFINFO.buf_sector+2]
 24297                                  	
 24298                                  	;mov	dx,[di+6]
 24299                                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 24300                                  
 24301                                  	;inc	dx ; MSDOS 3.3
 24302                                  	; MSDOS 6.0
 24303                                  	;ADD	DX,1				;AN000; >32mb
 24304                                  	;ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 24305                                  	; 23/09/2023
 24306                                  	inc	dx
 24307                                  	jnz	short nextexntry_fc
 24308                                  	inc	si
 24309                                  	;inc	word [SS:HIGH_SECTOR]
 24310                                  nextexntry_fc:
 24311                                  	; 23/09/2023
 24312                                  	mov	[SS:HIGH_SECTOR],si
 24313                                  	; MSDOS 3.3 & MSDOS 6.0
 24314                                  	POP	DS
 24315                                  %else
 24316                                  	; 14/02/2024 - Retro DOS v4.2
 24317 00003D8F C55506                  	lds	dx,[di+BUFFINFO.buf_sector]
 24318 00003D92 8CDE                    	mov	si,ds
 24319 00003D94 1F                      	pop	ds
 24320 00003D95 42                      	inc	dx
 24321 00003D96 7501                    	jnz	short nextexntry_fc
 24322 00003D98 46                      	inc	si
 24323                                  nextexntry_fc:
 24324 00003D99 8936[0706]              	mov	[HIGH_SECTOR],si
 24325                                  %endif
 24326                                  
 24327 00003D9D E868F8                  	call	FIRSTCLUSTER
 24328 00003DA0 31DB                    	XOR	BX,BX
 24329 00003DA2 EB21                    	JMP	short SETENTRY
 24330                                  
 24331                                  ;----------------------------------------------------------------------------
 24332                                  ;
 24333                                  ; Procedure Name : GETENTRY
 24334                                  ;
 24335                                  ; Inputs:
 24336                                  ;	[LASTENT] has directory entry
 24337                                  ;	ES:BP points to drive parameters
 24338                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 24339                                  ; Function:
 24340                                  ;	Locates directory entry in preparation for search
 24341                                  ;	GETENT provides entry for passing desired entry in AX
 24342                                  ; Outputs:
 24343                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 24344                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 24345                                  ;	[LASTENT] = New directory entry number
 24346                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 24347                                  ;	Carry set if error (currently user FAILed to I 24)
 24348                                  ;----------------------------------------------------------------------------
 24349                                  
 24350                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24351                                  GETENTRY:
 24352                                  	; 27/07/2018 - Retro DOS v3.0
 24353 00003DA4 A1[4803]                	MOV	AX,[LASTENT]
 24354                                  
 24355                                  	;entry	GETENT
 24356                                  GETENT:
 24357 00003DA7 A3[4803]                	MOV	[LASTENT],AX
 24358                                  ;
 24359                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 24360                                  ; directory.
 24361                                  ;
 24362 00003DAA B105                    	mov	cl,5			; shift left by 5 = mult by 32
 24363 00003DAC D3C0                    	rol	ax,cl			; keep hight order bits
 24364 00003DAE 89C2                    	mov	dx,ax
 24365                                  	; 19/05/2019 - Retro DOS v4.0
 24366                                  	;and	ax,0FFE0h
 24367                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24368                                  	;and	ax,~(32-1)		; mask off high order bits
 24369                                  	; 16/12/2022
 24370 00003DB0 24E0                    	and	al,0E0h ; ~31
 24371 00003DB2 83E21F                  	and	dx,1Fh
 24372                                  	;and	dx,32-1			; mask off low order bits
 24373                                  ;
 24374                                  ; DX:AX contain the byte offset of the required directory entry from the
 24375                                  ; beginning of the directory. Convert this to a sector number. Round the
 24376                                  ; sector size down to a multiple of 32.
 24377                                  ;
 24378                                  	;mov	bx,[es:bp+2]
 24379 00003DB5 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 24380 00003DB9 80E3E0                  	and	bl,0E0h
 24381                                  	;AND	BL,255-31		; Must be multiple of 32
 24382 00003DBC F7F3                    	DIV	BX
 24383                                  	; 14/02/2024
 24384                                  	;MOV	BX,DX			; Position within sector
 24385                                  				; NOTE: This BX value is not used in DIRREAD
 24386                                  				; Erdogan Tan - 14/02/2024
 24387                                  	;PUSH	BX
 24388 00003DBE 52                      	push	dx
 24389                                  	;
 24390 00003DBF E8F2F7                  	call	DIRREAD
 24391 00003DC2 5B                      	POP	BX
 24392                                  	;retc
 24393 00003DC3 72BD                    	jc	short nextentry_retn
 24394                                  SETENTRY:
 24395 00003DC5 8B16[E205]              	MOV	DX,[CURBUF]
 24396                                  	;add	dx,16 ; MSDOS 3.3
 24397                                  	;add	dx,20 ; MSDOS 6.0 
 24398 00003DC9 83C214                  	ADD	DX,BUFINSIZ
 24399 00003DCC 01D3                    	ADD	BX,DX
 24400                                  	;add	dx,[es:bp+2]
 24401 00003DCE 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 24402                                  	; 29/12/2022
 24403                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 24404 00003DD2 F8                      	clc
 24405 00003DD3 C3                      	retn
 24406                                  
 24407                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 24408                                  ;----------------------------------------------------------------------------
 24409                                  ;
 24410                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 24411                                  ;
 24412                                  ; Inputs:
 24413                                  ;	BX cluster number of start of directory
 24414                                  ;	ES:BP Points to DPB
 24415                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 24416                                  ; Function:
 24417                                  ;	Set up a directory search
 24418                                  ; Outputs:
 24419                                  ;	[DIRSTART] = BX
 24420                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 24421                                  ;	Carry set if error (currently user FAILed to I 24)
 24422                                  ; destroys AX,DX,BX
 24423                                  ;----------------------------------------------------------------------------
 24424                                  
 24425                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24426                                  SETDIRSRCH:
 24427 00003DD4 09DB                    	OR	BX,BX
 24428 00003DD6 7437                    	JZ	short SETROOTSRCH
 24429 00003DD8 891E[C205]              	MOV	[DIRSTART],BX
 24430                                  	;mov	al,[es:bp+4]
 24431 00003DDC 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 24432 00003DE0 FEC0                    	INC	AL
 24433 00003DE2 A2[7705]                	MOV	[CLUSFAC],AL
 24434                                  
 24435                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24436                                  	;SAVE	<SI>
 24437 00003DE5 56                      	push	si
 24438                                  	;test	byte [FastOpenFlg],2
 24439 00003DE6 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24440 00003DEB 7507                    	JNZ	short UNP_OK
 24441                                  
 24442                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24443                                  	;invoke	UNPACK
 24444 00003DED E83316                  	call	UNPACK
 24445 00003DF0 7302                    	JNC	short UNP_OK
 24446                                  	;RESTORE <SI>
 24447 00003DF2 5E                      	pop	si
 24448                                  	;return
 24449 00003DF3 C3                      	retn
 24450                                  
 24451                                  UNP_OK:
 24452 00003DF4 893E[BC05]              	MOV	[CLUSNUM],DI
 24453 00003DF8 89DA                    	MOV	DX,BX
 24454 00003DFA 30DB                    	XOR	BL,BL
 24455 00003DFC 881E[7305]              	MOV	[SECCLUSPOS],BL
 24456                                  	;invoke	FIGREC
 24457 00003E00 E8DE0E                  	call	FIGREC
 24458                                  	;RESTORE <SI>
 24459 00003E03 5E                      	pop	si
 24460                                  	
 24461                                  	; 19/05/2019 - Retro DOS v4.0
 24462                                  
 24463                                  	; MSDOS 6.0
 24464                                  	;PUSH	DX			   ;AN000; >32mb
 24465                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 24466                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 24467                                  	;POP	DX			   ;AN000; >32mb
 24468                                  
 24469                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24470                                  	;push	dx
 24471                                  	;mov	dx,[HIGH_SECTOR]
 24472                                  	;mov	[DIRSEC+2],dx
 24473                                  	;pop	dx
 24474                                  	;MOV	[DIRSEC],dx
 24475                                  	; 16/12/2022
 24476 00003E04 A1[0706]                	mov	ax,[HIGH_SECTOR]
 24477 00003E07 A3[C005]                	mov	[DIRSEC+2],AX
 24478 00003E0A 8916[BE05]              	MOV	[DIRSEC],DX
 24479                                  
 24480                                  	; 16/12/2022
 24481                                  	; cf=0 (at the return of FIGREC)
 24482                                  	;CLC
 24483 00003E0E C3                      	retn
 24484                                  
 24485                                  	;entry	SETROOTSRCH
 24486                                  SETROOTSRCH:
 24487 00003E0F 31C0                    	XOR	AX,AX
 24488 00003E11 A3[C205]                	MOV	[DIRSTART],AX
 24489                                  	; 22/09/2023
 24490 00003E14 A3[C005]                	mov	[DIRSEC+2],ax ; 0
 24491 00003E17 A2[7305]                	MOV	[SECCLUSPOS],AL
 24492 00003E1A 48                      	DEC	AX
 24493 00003E1B A3[BC05]                	MOV	[CLUSNUM],AX
 24494                                  	;mov	ax,[es:bp+0Bh]
 24495 00003E1E 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 24496                                  	; 19/05/2019
 24497                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 24498                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 24499 00003E22 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 24500 00003E26 29D0                    	SUB	AX,DX
 24501 00003E28 A2[7705]                	MOV	[CLUSFAC],AL
 24502 00003E2B 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 24503                                  	; 22/09/2023
 24504                                  	; MSDOS 6.0
 24505                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 24506 00003E2F F8                      	CLC
 24507 00003E30 C3                      	retn
 24508                                  
 24509                                  ;============================================================================
 24510                                  ; DIR2.ASM, MSDOS 6.0, 1991
 24511                                  ;============================================================================
 24512                                  ; 27/07/2018 - Retro DOS v3.0
 24513                                  ; 19/05/2019 - Retro DOS v4.0 
 24514                                  
 24515                                  ;	TITLE	DIR2 - Directory and path cracking
 24516                                  ;	NAME	Dir2
 24517                                  
 24518                                  ;Break	<GETPATH -- PARSE A WFP>
 24519                                  ;----------------------------------------------------------------------------
 24520                                  ;
 24521                                  ; Procedure Name : GETPATH
 24522                                  ;
 24523                                  ; Inputs:
 24524                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 24525                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 24526                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24527                                  ;		( = -1 if current dir not involved, else
 24528                                  ;		 Points to first char after last "/" of current dir part)
 24529                                  ;	[THISCDS] Points to CDS being used
 24530                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 24531                                  ;	[NoSetDir] set
 24532                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 24533                                  ; Function:
 24534                                  ;	Crack the path
 24535                                  ; Outputs:
 24536                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 24537                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 24538                                  ;	ID1 field of [THISCDS] updated appropriately
 24539                                  ;	[ATTRIB] = [SATTRIB]
 24540                                  ;	ES:BP Points to DPB
 24541                                  ;	Carry set if bad path
 24542                                  ;	   SI Points to path element causing failure
 24543                                  ;	   Zero set
 24544                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24545                                  ;	      start a search on the last directory
 24546                                  ;	      CL is zero if there is a bad name in the path
 24547                                  ;	      CL is non-zero if the name was simply not found
 24548                                  ;		 [ENTFREE] may have free spot in directory
 24549                                  ;		 [NAME1] is the name.
 24550                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24551                                  ;	   Zero reset
 24552                                  ;	      File in middle of path or bad name in path or attribute mismatch
 24553                                  ;		or path too long or malformed path
 24554                                  ;	ELSE
 24555                                  ;	   [CurBuf] = -1 if root directory
 24556                                  ;	   [CURBUF] contains directory record with match
 24557                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24558                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 24559                                  ;	   AH = device ID
 24560                                  ;	      bit 7 of AH set if device SI and BX
 24561                                  ;	      will point DOSGROUP relative The firclus
 24562                                  ;	      field of the device entry contains the device pointer
 24563                                  ;	   [NAME1] Has name looked for
 24564                                  ;	   If last element is a directory zero is set and:
 24565                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24566                                  ;	      are set up to start a search on it.
 24567                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24568                                  ;	      like that for a file (except for zero flag)
 24569                                  ;	   If last element is a file zero is reset
 24570                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24571                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24572                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24573                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24574                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24575                                  ; DS preserved, Others destroyed
 24576                                  ;---------------------------------------------------------------------------
 24577                                  
 24578                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 24579                                  ;hkn; DS already set up at this point.
 24580                                  
 24581                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24582                                  GETPATH:
 24583                                  	;mov	word [CREATING],0E500h
 24584 00003E31 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 24585                                  
 24586                                  ; Same as GetPath only CREATING and DELALL already set
 24587                                  
 24588                                  	;entry	GetPathNoSet
 24589                                  GetPathNoSet:
 24590                                  	;mov	byte [EXTERR_LOCUS],2	
 24591 00003E37 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 24592 00003E3C C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 24593                                  
 24594                                  ; See if the input indicates a device that has already been detected. If so,
 24595                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 24596                                  
 24597 00003E42 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 24598                                  	;cmp	word [DI+1],5C3Ah
 24599                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 24600 00003E46 817D013A5C              	cmp	word [DI+1],':\'
 24601 00003E4B 7437                    	JZ	short CrackIt
 24602                                  
 24603                                  ; Let ChkDev find it in the device list
 24604                                  
 24605 00003E4D 83C703                  	ADD	DI,3
 24606                                  	; 18/08/2018
 24607                                  	;MOV	SI,DI			; let CHKDEV see the original name
 24608                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24609                                  	; 16/12/2022
 24610                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 24611 00003E50 E89E00                  	CALL	CHKDEV
 24612 00003E53 722D                    	JC	short InternalError
 24613                                  
 24614                                  Build_devJ:
 24615 00003E55 A0[6D05]                	MOV	AL,[SATTRIB]
 24616 00003E58 A2[6B05]                	MOV	[ATTRIB],AL
 24617                                  	;mov	byte [EXTERR_LOCUS],1
 24618 00003E5B C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 24619                                  					; "finding" a char device
 24620                                  					; set LOCUS to Unknown. This makes
 24621                                  					; certain idiotic problems reported
 24622                                  					; by a certain 3 letter OEM go away.
 24623                                  
 24624                                  ; Take name in name1 and pack it back into where wfp_start points. This
 24625                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 24626                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 24627                                  ; wfp into the share set.
 24628                                  ;
 24629                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 24630                                  ; non-space seen +1.  This position is kept in DX.
 24631                                  
 24632                                  ;hkn; SS is DOSDATA
 24633 00003E60 16                      	push	ss
 24634 00003E61 07                      	pop	es
 24635                                  
 24636                                  ;hkn; NAME1 is in DOSDATA
 24637 00003E62 BE[4B05]                	mov	si,NAME1
 24638 00003E65 8B3E[B205]              	mov	di,[WFP_START]
 24639 00003E69 89FA                    	mov	dx,di
 24640 00003E6B B90800                  	mov	cx,8			; 8 chars in device name
 24641                                  MoveLoop:
 24642 00003E6E AC                      	lodsb
 24643 00003E6F AA                      	stosb
 24644 00003E70 3C20                    	cmp	al," "
 24645 00003E72 7402                    	jz	short NoSave
 24646                                  
 24647 00003E74 89FA                    	mov	dx,di
 24648                                  NoSave:
 24649 00003E76 E2F6                    	loop	MoveLoop
 24650                                  
 24651                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 24652                                  ; at this point.
 24653                                  
 24654 00003E78 89D7                    	mov	di,dx
 24655                                  	;mov	byte [di],0		; end of string
 24656                                  	; 15/02/2024
 24657 00003E7A 880D                    	mov	[di],cl ; 0
 24658 00003E7C E8B402                  	call	Build_device_ent	; Clears carry sets zero
 24659 00003E7F FEC0                    	INC	AL			; reset zero
 24660 00003E81 C3                      	retn
 24661                                  
 24662                                  InternalError:
 24663                                  InternalError_loop:
 24664 00003E82 EBFE                    	JMP	short InternalError_loop ; freeze
 24665                                  
 24666                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 24667                                  
 24668                                  CrackIt:
 24669                                  ; 15/02/2024
 24670                                  %if 0
 24671                                  	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 24672                                  	CMP	SI,-1			; valid?
 24673                                  	JNZ	short LOOK_SING		; Yes, use it.
 24674                                  	LEA	SI,[DI+3]		; skip D:\.
 24675                                  LOOK_SING:
 24676                                  %endif
 24677                                  	;mov	byte [ATTRIB],16h
 24678 00003E84 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 24679                                  					; Attributes to search through Dirs
 24680 00003E89 C43E[A205]              	LES	DI,[THISCDS]
 24681 00003E8D B8FFFF                  	MOV	AX,-1
 24682                                  	;mov	bx,[es:di+73]
 24683 00003E90 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 24684 00003E94 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 24685                                  
 24686                                  ; AX = -1
 24687                                  ; BX = cluster number of current directory. THis number is -1 if the media
 24688                                  ;      has been uncertainly changed.
 24689                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 24690                                  ;      may be -1 if no current directory part has been used.
 24691                                  
 24692 00003E98 39C6                    	CMP	SI,AX			; if Current directory is not part
 24693 00003E9A 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 24694 00003E9C 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 24695                                  
 24696                                  ; DOS 3.3  6/25/86
 24697 00003E9E 7437                    	JZ	short NO_CURR_D		; no, crack from the root
 24698                                  	;test	byte [FastOpenFlg],1
 24699 00003EA0 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 24700 00003EA5 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 24701 00003EA7 06                      	PUSH	ES			; save registers
 24702 00003EA8 57                      	PUSH	DI
 24703 00003EA9 51                      	PUSH	CX
 24704 00003EAA FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 24705 00003EAD 56                      	PUSH	SI
 24706 00003EAE 53                      	PUSH	BX
 24707                                  
 24708 00003EAF C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 24709 00003EB3 8B36[B205]              	MOV	SI,[WFP_START]
 24710                                  
 24711                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 24712 00003EB7 BB[300D]                	MOV	BX,FastOpenTable
 24713 00003EBA BF[460D]                	MOV	DI,Dir_Info_Buff
 24714 00003EBD B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24715                                  	;mov	al,1
 24716 00003EC0 B001                    	MOV	AL,FONC_Look_up
 24717 00003EC2 1E                      	PUSH	DS
 24718 00003EC3 07                      	POP	ES
 24719                                  	;call	far [BX+2]
 24720 00003EC4 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 24721 00003EC7 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 24722                                  					; Go to Got_Srch_cluster
 24723                                  	; 29/12/2022
 24724                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 24725                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 24726                                  	;stc
 24727                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 24728                                  
 24729 00003EC9 803C01                  	cmp	byte [si],1
 24730                                  GO_Chk_end1:	; 29/12/2022
 24731 00003ECC F5                      	cmc 
 24732                                  	; [si] = 0 -> cf = 0
 24733                                  	; [si] > 0 -> cf = 1
 24734                                  
 24735                                  ;GO_Chk_end1:
 24736                                  	; 29/12/2022
 24737                                  	;clc
 24738                                  
 24739                                  GO_Chk_end:				; restore registers
 24740 00003ECD 5B                      	POP	BX
 24741 00003ECE 5E                      	POP	SI
 24742 00003ECF 8F44FF                  	POP	word [SI-1]
 24743 00003ED2 59                      	POP	CX
 24744 00003ED3 5F                      	POP	DI
 24745 00003ED4 07                      	POP	ES
 24746 00003ED5 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 24747                                  
 24748                                  ; DOS 3.3  6/25/86
 24749                                  ;
 24750                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 24751                                  ; of path and go crack from root.
 24752                                  
 24753                                  NO_CURR_D:
 24754 00003ED7 8B36[B205]              	MOV	SI,[WFP_START]
 24755                                  	;LEA	SI,[SI+3]		; Skip "d:/"
 24756                                  	; 15/02/2024
 24757 00003EDB 83C603                  	add	si,3
 24758 00003EDE C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24759 00003EE2 EB3B                    	JMP	short ROOTPATH
 24760                                  
 24761                                  ; We are able to crack from the current directory part. Go set up for search
 24762                                  ; of specified cluster.
 24763                                  
 24764                                  GOT_SEARCH_CLUSTER:
 24765 00003EE4 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24766 00003EE8 E8E9FE                  	call	SETDIRSRCH
 24767                                  	;JC	short SETFERR
 24768                                  	;JMP	short FINDPATH
 24769                                  	; 16/12/2022
 24770 00003EEB 7342                    	jnc	short FINDPATH ; 17/08/2018
 24771                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24772                                  	;JC	short SETFERR
 24773                                  	;JMP	short FINDPATH
 24774                                  SETFERR:
 24775 00003EED 30C9                    	XOR	CL,CL			; set zero
 24776 00003EEF F9                      	STC
 24777 00003EF0 C3                      	retn
 24778                                  
 24779                                  ;---------------------------------------------------------------------------
 24780                                  ;
 24781                                  ; Procedure Name : ChkDev
 24782                                  ;
 24783                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 24784                                  ;   device.
 24785                                  ; Blasts CX,SI,DI,AX,BX
 24786                                  ;---------------------------------------------------------------------------
 24787                                  
 24788                                  CHKDEV:
 24789 00003EF1 89FE                    	MOV	SI,DI
 24790 00003EF3 8CD7                    	MOV	DI,SS
 24791 00003EF5 8EC7                    	MOV	ES,DI
 24792                                  
 24793 00003EF7 BF[4B05]                	MOV	DI,NAME1
 24794 00003EFA B90900                  	MOV	CX,9
 24795                                  TESTLOOP:
 24796 00003EFD E83010                  	call	GETLET
 24797                                  
 24798 00003F00 3C2E                    	CMP	AL,'.'
 24799 00003F02 740E                    	JZ	short TESTDEVICE
 24800 00003F04 E87F10                  	call	PATHCHRCMP
 24801 00003F07 7407                    	JZ	short NOTDEV
 24802 00003F09 08C0                    	OR	AL,AL
 24803 00003F0B 7405                    	JZ	short TESTDEVICE
 24804                                  
 24805 00003F0D AA                      	STOSB
 24806 00003F0E E2ED                    	LOOP	TESTLOOP
 24807                                  NOTDEV:
 24808 00003F10 F9                      	STC
 24809 00003F11 C3                      	retn
 24810                                  
 24811                                  TESTDEVICE:
 24812                                  	;ADD	CX,2
 24813                                  	; 24/09/2023
 24814 00003F12 41                      	inc	cx
 24815 00003F13 41                      	inc	cx
 24816 00003F14 B020                    	MOV	AL,' '
 24817 00003F16 F3AA                    	REP	STOSB
 24818 00003F18 8CD0                    	MOV	AX,SS
 24819 00003F1A 8ED8                    	MOV	DS,AX
 24820                                  	;call	DEVNAME
 24821                                  	;retn
 24822                                  	; 18/12/2022
 24823 00003F1C E9B501                  	jmp	DEVNAME
 24824                                  
 24825                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 24826                                  ;----------------------------------------------------------------------------
 24827                                  ;
 24828                                  ; Procedure Name : ROOTPATH,FINDPATH
 24829                                  ;
 24830                                  ; Inputs:
 24831                                  ;	Same as FINDPATH but,
 24832                                  ;	SI Points to asciz string of path which is assumed to start at
 24833                                  ;		the root (no leading '/').
 24834                                  ; Function:
 24835                                  ;	Search from root for path
 24836                                  ; Outputs:
 24837                                  ;	Same as FINDPATH but:
 24838                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 24839                                  ;	[NoSetDir] is ignored.
 24840                                  ;----------------------------------------------------------------------------
 24841                                  
 24842                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24843                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 24844                                  
 24845                                  ROOTPATH:
 24846 00003F1F E8EDFE                  	call	SETROOTSRCH
 24847                                  	; 24/09/2023
 24848 00003F22 30E4                    	xor	ah,ah
 24849                                  	;CMP	BYTE [SI],0
 24850 00003F24 3824                    	cmp	[si],ah ; 0
 24851 00003F26 7507                    	JNZ	short FINDPATH
 24852                                  
 24853                                  ; Root dir specified
 24854 00003F28 A0[6D05]                	MOV	AL,[SATTRIB]
 24855 00003F2B A2[6B05]                	MOV	[ATTRIB],AL
 24856                                  	; 24/09/2023
 24857                                  	;XOR	AH,AH			; Sets "device ID" byte, sets zero
 24858                                  					; (dir), clears carry.
 24859 00003F2E C3                      	retn
 24860                                  
 24861                                  ; Inputs:
 24862                                  ;	[ATTRIB] Set to get through directories
 24863                                  ;	[SATTRIB] Set to find last element
 24864                                  ;	ES:BP Points to DPB
 24865                                  ;	SI Points to asciz string of path (no leading '/').
 24866                                  ;	[SECCLUSPOS] = 0
 24867                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 24868                                  ;	[CLUSNUM] = Cluster # of next cluster
 24869                                  ;	[CLUSFAC] = Sectors per cluster
 24870                                  ;	[NoSetDir] set
 24871                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24872                                  ;		( = -1 if current dir not involved, else
 24873                                  ;		 Points to first char after last "/" of current dir part)
 24874                                  ;	[THISCDS] Points to CDS being used
 24875                                  ;	[CREATING] and [DELALL] set
 24876                                  ; Function:
 24877                                  ;	Parse path name
 24878                                  ; Outputs:
 24879                                  ;	ID1 field of [THISCDS] updated appropriately
 24880                                  ;	[ATTRIB] = [SATTRIB]
 24881                                  ;	ES:BP Points to DPB
 24882                                  ;	[THISDPB] = ES:BP
 24883                                  ;	Carry set if bad path
 24884                                  ;	   SI Points to path element causing failure
 24885                                  ;	   Zero set
 24886                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24887                                  ;	      start a search on the last directory
 24888                                  ;	      CL is zero if there is a bad name in the path
 24889                                  ;	      CL is non-zero if the name was simply not found
 24890                                  ;		 [ENTFREE] may have free spot in directory
 24891                                  ;		 [NAME1] is the name.
 24892                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24893                                  ;	   Zero reset
 24894                                  ;	      File in middle of path or bad name in path
 24895                                  ;		or path too long or malformed path
 24896                                  ;	ELSE
 24897                                  ;	   [CURBUF] contains directory record with match
 24898                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24899                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24900                                  ;	   [NAME1] Has name looked for
 24901                                  ;	   AH = device ID
 24902                                  ;	      bit 7 of AH set if device SI and BX
 24903                                  ;	      will point DOSGROUP relative The firclus
 24904                                  ;	      field of the device entry contains the device pointer
 24905                                  ;	   If last element is a directory zero is set and:
 24906                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24907                                  ;	      are set up to start a search on it,
 24908                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24909                                  ;	      like that for a file (except for zero flag)
 24910                                  ;	   If last element is a file zero is reset
 24911                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24912                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24913                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24914                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24915                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24916                                  ; Destroys all other registers
 24917                                  
 24918                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24919                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24920                                  
 24921                                  	; 15/02/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 24922                                  	; DOSCODE:7F93h (MSDOS 6.22, MSDOS.SYS)
 24923                                  
 24924                                      	;entry	FINDPATH
 24925                                  FINDPATH:
 24926 00003F2F 06                      	PUSH	ES			; Save ES:BP
 24927 00003F30 56                      	PUSH	SI
 24928 00003F31 89F7                    	MOV	DI,SI
 24929 00003F33 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24930 00003F37 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24931 00003F3C 740E                    	JZ	short NOIDS		; No current dir part
 24932 00003F3E 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24933 00003F42 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24934 00003F44 C43E[A205]              	LES	DI,[THISCDS]
 24935                                  	;mov	[es:di+73],cx
 24936 00003F48 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory cluster
 24937                                  NOIDS:
 24938                                  
 24939                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24940                                  ; character in the string. CX,DI may be destroyed.
 24941                                  ;
 24942                                  ;	invoke	NAMETRANS
 24943                                  ;	MOV	CL,AL
 24944                                  ;
 24945                                  ; The above is the slow method. The name has *already* been munged by
 24946                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24947                                  ; the name until ., \ or 0 is hit.
 24948                                  
 24949                                  	;MOV	AX,SS
 24950                                  	;MOV	ES,AX
 24951                                  	; 15/02/2024 - Retro DOS v4.2
 24952 00003F4C 16                      	push	ss
 24953 00003F4D 07                      	pop	es
 24954                                  
 24955                                  ;hkn; Name1 is in DOSDATA
 24956 00003F4E BF[4B05]                	MOV	DI,NAME1
 24957 00003F51 B82020                  	MOV	AX,'  ' ; 2020h
 24958 00003F54 AA                      	STOSB
 24959 00003F55 AB                      	STOSW
 24960 00003F56 AB                      	STOSW
 24961 00003F57 AB                      	STOSW
 24962 00003F58 AB                      	STOSW
 24963 00003F59 AB                      	STOSW
 24964                                  
 24965                                  ;hkn; Name1 is in DOSDATA
 24966 00003F5A BF[4B05]                	MOV	DI,NAME1
 24967 00003F5D 30E4                    	XOR	AH,AH			; bits for CL
 24968                                  GetNam:
 24969                                  	; 19/05/2019 - Retro DOS v4.0
 24970                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24971                                  
 24972                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24973                                  	; 16/12/2022
 24974                                  	;inc	cl ; not required !	
 24975                                  	
 24976 00003F5F AC                      	LODSB
 24977 00003F60 3C2E                    	CMP	AL,'.'	; 2Eh
 24978 00003F62 7412                    	JZ	short _SetExt
 24979 00003F64 08C0                    	OR	AL,AL
 24980 00003F66 7424                    	JZ	short _GetDone
 24981 00003F68 3C5C                    	CMP	AL,'\'	; 5Ch
 24982 00003F6A 7420                    	JZ	short _GetDone
 24983 00003F6C 3C3F                    	CMP	AL,'?'	; 3Fh
 24984 00003F6E 7503                    	JNZ	short StoNam
 24985 00003F70 80CC01                  	OR	AH,1
 24986                                  StoNam: 
 24987 00003F73 AA                      	STOSB
 24988 00003F74 EBE9                    	JMP	short GetNam
 24989                                  _SetExt:
 24990 00003F76 BF[5305]                	MOV	DI,NAME1+8
 24991                                  GetExt:
 24992 00003F79 AC                      	LODSB
 24993 00003F7A 08C0                    	OR	AL,AL
 24994 00003F7C 740E                    	JZ	short _GetDone
 24995 00003F7E 3C5C                    	CMP	AL,'\'
 24996 00003F80 740A                    	JZ	short _GetDone
 24997 00003F82 3C3F                    	CMP	AL,'?'
 24998 00003F84 7503                    	JNZ	short StoExt
 24999 00003F86 80CC01                  	OR	AH,1
 25000                                  StoExt: 
 25001 00003F89 AA                      	STOSB
 25002 00003F8A EBED                    	JMP	short GetExt
 25003                                  _GetDone:
 25004 00003F8C 4E                      	DEC	SI
 25005 00003F8D 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 25006 00003F8F 80C980                  	OR	CL,80H
 25007 00003F92 5F                      	POP	DI			; Start of this element
 25008 00003F93 07                      	POP	ES			; Restore ES:BP
 25009 00003F94 39FE                    	CMP	SI,DI
 25010 00003F96 7503                    	JNZ	short check_device
 25011 00003F98 E9E000                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 25012                                  check_device:
 25013 00003F9B 56                      	PUSH	SI			; Start of next element
 25014                                  	;MOV	AL,[SI]
 25015                                  	; 15/02/2024
 25016 00003F9C 08C0                    	OR	AL,AL
 25017                                  	; 23/09/2023
 25018                                  	;cmp	byte [si],0
 25019 00003F9E 7508                    	JNZ	short NOT_LAST
 25020                                  
 25021                                  ; for last element of the path switch to the correct search attributes
 25022                                  
 25023 00003FA0 8A3E[6D05]              	MOV	BH,[SATTRIB]
 25024 00003FA4 883E[6B05]              	MOV	[ATTRIB],BH
 25025                                  
 25026                                  NOT_LAST:
 25027                                  
 25028                                  ; check name1 to see if we have a device...
 25029                                  
 25030 00003FA8 06                      	PUSH	ES			; Save ES:BP
 25031                                  
 25032                                  ;hkn; SS is DOSDATA
 25033                                  	;context ES
 25034 00003FA9 16                      	push	ss
 25035 00003FAA 07                      	pop	es
 25036 00003FAB E82601                  	call	DEVNAME 		; blast BX
 25037 00003FAE 07                      	POP	ES			; Restore ES:BP
 25038 00003FAF 720B                    	JC	short FindFile		; Not a device
 25039 00003FB1 08C0                    	OR	AL,AL			; Test next char again
 25040 00003FB3 7403                    	JZ	short GO_BDEV
 25041 00003FB5 E9C700                  	JMP	FILEINPATH		; Device name in middle of path
 25042                                  
 25043                                  GO_BDEV:
 25044 00003FB8 5E                      	POP	SI			; Points to NUL at end of path
 25045 00003FB9 E999FE                  	JMP	Build_devJ
 25046                                  
 25047                                  FindFile:
 25048                                  ;;;; 7/28/86
 25049 00003FBC 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 25050 00003FC1 7505                    	JNZ	short NOE5		; no
 25051 00003FC3 C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 25052                                  NOE5:
 25053                                  ;;;; 7/28/86
 25054 00003FC8 57                      	PUSH	DI			; Start of this element
 25055 00003FC9 06                      	PUSH	ES			; Save ES:BP
 25056 00003FCA 51                      	PUSH	CX			; CL return from NameTrans
 25057                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25058                                  
 25059 00003FCB E88F02                  	CALL	LookupPath		; call fastopen to get dir entry
 25060 00003FCE 7303                    	JNC	short DIR_FOUND		; found dir entry
 25061                                  
 25062                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25063 00003FD0 E8C7FC                  	call	FINDENTRY
 25064                                  DIR_FOUND:
 25065 00003FD3 59                      	POP	CX
 25066 00003FD4 07                      	POP	ES
 25067 00003FD5 5F                      	POP	DI
 25068 00003FD6 7303                    	JNC	short LOAD_BUF
 25069 00003FD8 E9C900                  	JMP	BADPATHPOP
 25070                                  
 25071                                  LOAD_BUF:
 25072 00003FDB C53E[E205]              	LDS	DI,[CURBUF]
 25073                                  	;test	byte [bx+0Bh],10h
 25074 00003FDF F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 25075 00003FE3 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 25076 00003FE5 E99700                  	JMP	FILEINPATH		; Error or end of path
 25077                                  
 25078                                  ; if we are not setting the directory, then check for end of string
 25079                                  
 25080                                  GO_NEXT:
 25081                                  ;hkn; SS override
 25082 00003FE8 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 25083 00003FEE 7423                    	JZ	short SetDir
 25084 00003FF0 89FA                    	MOV	DX,DI			; Save pointer to entry
 25085 00003FF2 8CD9                    	MOV	CX,DS
 25086                                  
 25087                                  ;hkn; SS is DOSDATA
 25088                                  	;context DS
 25089 00003FF4 16                      	push	ss
 25090 00003FF5 1F                      	pop	ds
 25091 00003FF6 5F                      	POP	DI			; Start of next element
 25092                                  	; 19/05/2019 - Retro DOS v4.0
 25093                                  	; MSDOS 6.0
 25094 00003FF7 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25095 00003FFC 740B                    	JZ	short _nofast			; the FastOpen
 25096 00003FFE F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 25097 00004003 7404                    	JZ	short _nofast			; no
 25098 00004005 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 25099                                  _nofast:
 25100 00004009 803D00                  	CMP	BYTE [DI],0
 25101                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 25102                                  	;;JMP	_SETRET  ; retn		; Got it
 25103                                  	;retn	; 05/09/2018
 25104                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25105                                  	;jmp	_SETRET
 25106                                  	; 16/12/2022
 25107 0000400C 7421                    	jz	short _SETRET
 25108                                  
 25109                                  NEXT_ONE:
 25110 0000400E 57                      	PUSH	DI			; Put start of next element back on stack
 25111 0000400F 89D7                    	MOV	DI,DX
 25112 00004011 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 25113                                  SetDir:
 25114 00004013 8B14                    	MOV	DX,[SI] 		; Dir_first
 25115                                  
 25116                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25117 00004015 1E                      	PUSH	DS		      ; save [curbuf+2]
 25118                                  ;hkn; SS is DOSDATA
 25119 00004016 16                      	push	ss
 25120 00004017 1F                      	pop	ds		      ; set DS Dosgroup
 25121                                  	;test	byte [FastOpenFlg],2
 25122 00004018 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25123 0000401D 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 25124 0000401F 89D3                    	MOV	BX,DX		      ; not found
 25125 00004021 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 25126 00004025 50                      	PUSH	AX		      ; save device id (AH)
 25127 00004026 E8ABFD                  	call	SETDIRSRCH
 25128 00004029 58                      	POP	AX		      ; restore device id (AH)
 25129 0000402A 83C402                  	ADD	SP,2		      ; pop ds in stack
 25130 0000402D EB36                    	JMP	short FAST_OPEN_SKIP
 25131                                  
 25132                                  	; 16/12/2022
 25133                                  _SETRET:
 25134 0000402F C3                      	retn
 25135                                  
 25136                                  DO_NORMAL:
 25137 00004030 1F                      	POP	DS			; DS = [curbuf + 2]
 25138                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25139                                  
 25140 00004031 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 25141 00004033 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 25142 00004035 53                      	PUSH	BX
 25143 00004036 50                      	PUSH	AX
 25144 00004037 56                      	PUSH	SI
 25145 00004038 51                      	PUSH	CX
 25146                                  
 25147                                  ; 16/02/2024
 25148                                  %if 0
 25149                                  	;push	word [di+6]
 25150                                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 25151                                  	; 19/05/2019
 25152                                  	; MSDOS 6.0
 25153                                  	;push	word [di+8]
 25154                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 25155                                  %else	
 25156                                  	; 16/02/2024
 25157                                  	;lds	bx,[di+6]
 25158 00004039 C55D06                  	lds	bx,[di+BUFFINFO.buf_sector]
 25159 0000403C 53                      	push	bx
 25160 0000403D 1E                      	push	ds
 25161                                  %endif
 25162                                  
 25163 0000403E 89D3                    	MOV	BX,DX
 25164                                  
 25165                                  ;hkn; SS is DOSDATA
 25166                                  	;context DS
 25167 00004040 16                      	push	ss
 25168 00004041 1F                      	pop	ds
 25169                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 25170 00004042 E88FFD                  	call	SETDIRSRCH		; the entry sector buffer
 25171                                  	; 19/05/2019
 25172                                  	; MSDOS 6.0
 25173 00004045 8F06[0706]              	POP	word [HIGH_SECTOR]
 25174 00004049 5A                      	POP	DX
 25175 0000404A 7203                    	JC	short SKIP_GETB
 25176                                  	; 22/09/2023
 25177                                  	;;mov	byte [ALLOWED],18h
 25178                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 25179                                  	;XOR	AL,AL ; *
 25180                                  	;;invoke GETBUFFR		; Get the entry buffer back
 25181                                  	;call	GETBUFFR
 25182 0000404C E8D917                  	call	GETBUFFER ; * ; pre-read
 25183                                  SKIP_GETB:
 25184 0000404F 59                      	POP	CX
 25185 00004050 5E                      	POP	SI
 25186 00004051 58                      	POP	AX
 25187 00004052 5B                      	POP	BX
 25188 00004053 7305                    	JNC	short SET_THE_BUF
 25189 00004055 5F                      	POP	DI			; Start of next element
 25190 00004056 89FE                    	MOV	SI,DI			; Point with SI
 25191 00004058 EB21                    	JMP	SHORT _BADPATH
 25192                                  
 25193                                  SET_THE_BUF:
 25194 0000405A E8B0F5                  	call	SET_BUF_AS_DIR
 25195 0000405D 8B3E[E205]              	MOV	DI,[CURBUF]
 25196 00004061 01FE                    	ADD	SI,DI			; Get the offsets back
 25197 00004063 01FB                    	ADD	BX,DI
 25198                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25199                                  FAST_OPEN_SKIP:
 25200 00004065 5F                      	POP	DI			; Start of next element
 25201 00004066 E89802                  	CALL	InsertPath		; insert dir entry info
 25202                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25203 00004069 8A05                    	MOV	AL,[DI]
 25204 0000406B 08C0                    	OR	AL,AL
 25205 0000406D 74C0                    	JZ	short _SETRET		; At end
 25206 0000406F 47                      	INC	DI			; Skip over "/"
 25207 00004070 89FE                    	MOV	SI,DI			; Point with SI
 25208 00004072 E8110F                  	call	PATHCHRCMP
 25209 00004075 7503                    	JNZ	short find_bad_name	; oops
 25210 00004077 E9B5FE                  	JMP	FINDPATH		; Next element
 25211                                  
 25212                                  find_bad_name:
 25213 0000407A 4E                      	DEC	SI			; Undo above INC to get failure point
 25214                                  _BADPATH:
 25215 0000407B 30C9                    	XOR	CL,CL			; Set zero
 25216 0000407D EB2C                    	JMP	SHORT BADPRET
 25217                                  
 25218                                  FILEINPATH:
 25219 0000407F 5F                      	POP	DI			; Start of next element
 25220                                  
 25221                                  ;hkn; SS is DOSDATA
 25222                                  	;context DS			; Got to from one place with DS gone
 25223 00004080 16                      	push	ss
 25224 00004081 1F                      	pop	ds
 25225                                  
 25226                                  ; DOS 3.3 FastOpen
 25227                                  	;test	byte [FastOpenFlg],1
 25228 00004082 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 25229 00004087 740B                    	JZ	short NO_FAST		; device info to fastopen
 25230                                  	;test	byte [FastOpenFlg],2
 25231 00004089 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25232 0000408E 7404                    	JZ	short NO_FAST
 25233 00004090 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 25234                                  					 ; success
 25235                                  NO_FAST:
 25236                                  ; DOS 3.3 FastOpen
 25237 00004094 8A05                    	MOV	AL,[DI]
 25238 00004096 08C0                    	OR	AL,AL
 25239 00004098 7404                    	JZ	short INCRET
 25240 0000409A 89FE                    	MOV	SI,DI			; Path too long
 25241 0000409C EB0D                    	JMP	SHORT BADPRET
 25242                                  
 25243                                  INCRET:
 25244                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25245                                  
 25246 0000409E E86002                  	CALL   InsertPath		; insert dir entry info
 25247                                  
 25248                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25249 000040A1 FEC0                    	INC	AL			; Reset zero
 25250                                  	; 16/12/2022	
 25251                                  ;_SETRET:
 25252 000040A3 C3                      	retn
 25253                                  
 25254                                  BADPATHPOP:
 25255 000040A4 5E                      	POP	SI			; Start of next element
 25256 000040A5 8A04                    	MOV	AL,[SI]
 25257 000040A7 89FE                    	MOV	SI,DI			; Start of bad element
 25258 000040A9 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 25259                                  BADPRET:
 25260 000040AB A0[6D05]                	MOV	AL,[SATTRIB]
 25261 000040AE A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 25262 000040B1 F9                      	STC
 25263 000040B2 C3                      	retn
 25264                                  
 25265                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 25266                                  ;---------------------------------------------------------------------------
 25267                                  ;
 25268                                  ; Procedure Name : STARTSRCH
 25269                                  ;
 25270                                  ; Inputs:
 25271                                  ;	[THISDPB] Set
 25272                                  ; Function:
 25273                                  ;	Set up a search for GETENTRY and NEXTENTRY
 25274                                  ; Outputs:
 25275                                  ;	ES:BP = Drive parameters
 25276                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 25277                                  ; Destroys ES,BP,AX
 25278                                  ;--------------------------------------------------------------------------
 25279                                  
 25280                                  STARTSRCH:
 25281 000040B3 C42E[8A05]              	LES	BP,[THISDPB]
 25282 000040B7 31C0                    	XOR	AX,AX
 25283 000040B9 A3[4803]                	MOV	[LASTENT],AX
 25284 000040BC A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 25285 000040BF 48                      	DEC	AX
 25286 000040C0 A3[D805]                	MOV	[ENTFREE],AX
 25287 000040C3 A3[DA05]                	MOV	[ENTLAST],AX
 25288 000040C6 C3                      	retn
 25289                                  
 25290                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 25291                                  ;----------------------------------------------------------------------------
 25292                                  ; Procedure Name : MatchAttributes
 25293                                  ;
 25294                                  ; Input:    [Attrib] = attribute to search for
 25295                                  ;	    CH = found attribute
 25296                                  ; Output:   JZ <match>
 25297                                  ;	    JNZ <nomatch>
 25298                                  ; Registers modified: noneski
 25299                                  ;----------------------------------------------------------------------------
 25300                                  
 25301                                  MatchAttributes:
 25302 000040C7 50                      	PUSH	AX
 25303                                  
 25304                                  ;hkn; SS override
 25305 000040C8 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 25306 000040CC F6D0                    	NOT	AL			; AL <- SearchSet'
 25307 000040CE 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 25308                                  	;and	al,16h
 25309 000040D0 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 25310                                  ;
 25311                                  ; the result is non-zero if an attribute is not in the search set
 25312                                  ; and in the found set and in the important set. This means that we do not
 25313                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 25314                                  ;
 25315 000040D2 58                      	POP	AX
 25316 000040D3 C3                      	retn
 25317                                  
 25318                                  ; 19/05/2019 - Retro DOS v4.0
 25319                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 25320                                  
 25321                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25322                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 25323                                  
 25324                                  ;Break <DevName - Look for name of device>
 25325                                  ;---------------------------------------------------------------------------
 25326                                  ;
 25327                                  ; Procedure Name : DevName
 25328                                  ;
 25329                                  ; Inputs:
 25330                                  ;	DS,ES:DOSDATA
 25331                                  ;	Filename in NAME1
 25332                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 25333                                  ; Function:
 25334                                  ;	Determine if file is in list of I/O drivers
 25335                                  ; Outputs:
 25336                                  ;	Carry set if not a device
 25337                                  ;	ELSE
 25338                                  ;	Zero flag set
 25339                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 25340                                  ;	     bits 0-4 set from low byte of attribute word
 25341                                  ;	DEVPT = DWORD pointer to Device header of device
 25342                                  ; BX destroyed, others preserved
 25343                                  ;---------------------------------------------------------------------------
 25344                                  
 25345                                  DEVNAME:
 25346                                  	; 28/07/2018 - Retro DOS v3.0
 25347                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 25348                                  
 25349 000040D4 56                      	PUSH	SI
 25350 000040D5 57                      	PUSH	DI
 25351 000040D6 51                      	PUSH	CX
 25352 000040D7 50                      	PUSH	AX
 25353                                  
 25354                                  ; E5 special code
 25355 000040D8 FF36[4B05]              	PUSH	WORD [NAME1]
 25356 000040DC 803E[4B05]05            	CMP	byte [NAME1],5
 25357 000040E1 7505                    	JNZ	short NOKTR
 25358 000040E3 C606[4B05]E5            	MOV	byte [NAME1],0E5h
 25359                                  NOKTR:
 25360                                  	;test	byte [ATTRIB],8
 25361 000040E8 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 25362                                  					; If looking for VOL id don't find devs
 25363 000040ED 7521                    	JNZ	short RET31
 25364                                  
 25365                                  ;hkn; NULDEV is in DOSDATA
 25366 000040EF BE[4800]                	MOV	SI,NULDEV
 25367                                  LOOKIO:
 25368                                  	; 21/11/2022
 25369                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 25370                                  	; 17/12/2022
 25371                                  	;test	byte [si+5],80h
 25372 000040F2 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25373                                  	;;test	word [si+4],8000h
 25374                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25375 000040F6 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 25376 000040F8 89F0                    	MOV	AX,SI
 25377                                  	;add	si,10
 25378 000040FA 83C60A                  	ADD	SI,SYSDEV.NAME
 25379                                  
 25380                                  ;hkn; NAME1 is in DOSDATA
 25381 000040FD BF[4B05]                	MOV	DI,NAME1
 25382 00004100 B90400                  	MOV	CX,4			; All devices are 8 letters
 25383 00004103 F3A7                    	REPE	CMPSW			; Check for name in list
 25384 00004105 89C6                    	MOV	SI,AX
 25385 00004107 7415                    	JZ	short IOCHK		; Found it?
 25386                                  SKIPDEV:
 25387 00004109 C534                    	LDS	SI,[SI]			; Get address of next device
 25388 0000410B 83FEFF                  	CMP	SI,-1			; At end of list?
 25389 0000410E 75E2                    	JNZ	short LOOKIO
 25390                                  RET31:	
 25391 00004110 F9                      	STC				; Not found
 25392                                  RETNV:	
 25393 00004111 8CD1                    	MOV	CX,SS
 25394 00004113 8ED9                    	MOV	DS,CX
 25395                                  
 25396 00004115 8F06[4B05]              	POP	WORD [NAME1]
 25397 00004119 58                      	POP	AX
 25398 0000411A 59                      	POP	CX
 25399 0000411B 5F                      	POP	DI
 25400 0000411C 5E                      	POP	SI
 25401 0000411D C3                      	RETN
 25402                                  
 25403                                  IOCHK:
 25404                                  ;hkn; SS override for DEVPT
 25405 0000411E 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 25406                                  	;mov	bh,[si+4]
 25407 00004123 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 25408 00004126 80CFC0                  	OR	BH,0C0h
 25409 00004129 80E7DF                  	and	bh,0DFh
 25410                                  	;AND	BH,~(020h)		; Clears Carry
 25411 0000412C 368936[9A05]            	MOV	[SS:DEVPT],SI
 25412 00004131 EBDE                    	JMP	short RETNV
 25413                                  
 25414                                  ;BREAK <Build_device_ent - Make a Directory entry>
 25415                                  ;---------------------------------------------------------------------------
 25416                                  ; Procedure Name : Build_device_ent
 25417                                  ;
 25418                                  ; Inputs:
 25419                                  ;	[NAME1] has name
 25420                                  ;	BH is attribute field (supplied by DEVNAME)
 25421                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 25422                                  ; Function:
 25423                                  ;	Build a directory entry for a device at DEVFCB
 25424                                  ; Outputs:
 25425                                  ;	BX points to DEVFCB
 25426                                  ;	SI points to dir_first field
 25427                                  ;	AH = input BH
 25428                                  ;	AL = 0
 25429                                  ;	dir_first = DEVPT
 25430                                  ;	Zero Set, Carry Clear
 25431                                  ; DS,ES,BP preserved, others destroyed
 25432                                  ;--------------------------------------------------------------------------
 25433                                  
 25434                                  Build_device_ent:
 25435 00004133 B82020                  	MOV	AX,"  " ; 2020h
 25436                                  
 25437                                  ;hkn; DEVFCB is in DOSDATA
 25438 00004136 BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 25439                                  
 25440                                  ;	Fill dir_ext  BUGBUG - use ERRNZs for this stuff!
 25441                                  
 25442 00004139 AB                      	STOSW
 25443 0000413A AA                      	STOSB				; Blank out extent field
 25444                                  	;mov	al,40h
 25445 0000413B B040                    	MOV	AL,attr_device
 25446                                  
 25447                                  ;	Fill Dir_attr
 25448                                  
 25449 0000413D AA                      	STOSB				; Set attribute field
 25450 0000413E 31C0                    	XOR	AX,AX
 25451 00004140 B90A00                  	MOV	CX,10
 25452                                  
 25453                                  ; Fill dir_pad
 25454                                  
 25455 00004143 F3AB                    	REP	STOSW			; Fill rest with zeros
 25456 00004145 E898C9                  	call	DATE16
 25457                                  
 25458                                  ;hkn; DEVFCB is in DOSDATA
 25459 00004148 BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 25460 0000414B 92                      	XCHG	AX,DX
 25461                                  
 25462                                  ; Fill dir_time
 25463                                  
 25464 0000414C AB                      	STOSW
 25465 0000414D 92                      	XCHG	AX,DX
 25466                                  
 25467                                  ; Fill dir_date
 25468                                  
 25469 0000414E AB                      	STOSW
 25470 0000414F 89FE                    	MOV	SI,DI			; SI points to dir_first field
 25471 00004151 A1[9A05]                	MOV	AX,[DEVPT]
 25472                                  
 25473                                  ; Fill dir_first
 25474                                  
 25475 00004154 AB                      	STOSW				; Dir_first points to device
 25476 00004155 A1[9C05]                	MOV	AX,[DEVPT+2]
 25477                                  ;
 25478                                  ; Fill dir_size_l
 25479                                  ;
 25480 00004158 AB                      	STOSW
 25481 00004159 88FC                    	MOV	AH,BH			; Put device atts in AH
 25482                                  
 25483                                  ;hkn; DEVFCB is in DOSDATA
 25484 0000415B BB[4B05]                	MOV	BX,DEVFCB
 25485 0000415E 30C0                    	XOR	AL,AL			; Set zero, clear carry
 25486 00004160 C3                      	retn
 25487                                  
 25488                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 25489                                  ;----------------------------------------------------------------------------
 25490                                  ;
 25491                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 25492                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 25493                                  ;   If invalid, reset original CDS to root.
 25494                                  ;
 25495                                  ;   Inputs:	ThisCDS points to CDS of interest
 25496                                  ;		SS:DI points to temp buffer
 25497                                  ;   Outputs:	The current directory string is validated on the appropriate
 25498                                  ;		    drive
 25499                                  ;		ThisDPB changed
 25500                                  ;		ES:DI point to CDS
 25501                                  ;		Carry set if error (currently user FAILed to I 24)
 25502                                  ;   Registers modified: all
 25503                                  ;----------------------------------------------------------------------------
 25504                                  
 25505                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25506                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 25507                                  
 25508                                  ValidateCDS:
 25509                                  	; 19/05/2019 - Retro DOS v4.0
 25510                                  	; 28/07/2018 - Retro DOS v3.0
 25511                                  
 25512                                     %define  Temp	[bp-2]	; word
 25513                                     %define  SaveCDS	[bp-6]	; dword
 25514                                     %define  SaveCDSL	[bp-6]	; word
 25515                                     %define  SaveCDSH	[bp-4]	; word
 25516                                  
 25517                                  	;Enter
 25518 00004161 55                      	push	bp
 25519 00004162 89E5                    	mov	bp,sp
 25520 00004164 83EC06                  	sub	sp,6
 25521                                  
 25522 00004167 897EFE                  	MOV	Temp,DI
 25523                                  
 25524                                  ;hkn; SS override
 25525 0000416A 36C536[A205]            	LDS	SI,[SS:THISCDS]
 25526 0000416F 8976FA                  	MOV	SaveCDSL,SI
 25527 00004172 8C5EFC                  	MOV	SaveCDSH,DS
 25528                                  	;EnterCrit critDisk
 25529 00004175 E875D1                  	call	ECritDisk
 25530                                  	; 21/11/2022
 25531                                  	;test	byte [SI+curdir.flags+1],80h
 25532                                  	;test	word [si+67],8000h
 25533                                  	; 17/12/2022
 25534                                  	;test	byte [SI+68],80h
 25535 00004178 F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 25536                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 25537 0000417C 7403                    	JZ	short _DoSplice
 25538 0000417E E98D00                  	JMP	FatFail
 25539                                  _DoSplice:
 25540 00004181 30D2                    	XOR	DL,DL
 25541 00004183 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 25542                                  
 25543                                  ;hkn; SS is DOSDATA
 25544                                  	;Context ES
 25545 00004188 16                      	push	ss
 25546 00004189 07                      	pop	es
 25547                                  	;Invoke	FStrcpy
 25548 0000418A E835D0                  	call	FStrCpy
 25549 0000418D 8B76FE                  	MOV	SI,Temp
 25550                                  
 25551                                  ;hkn; SS is DOSDATA
 25552                                  	;Context DS
 25553 00004190 16                      	push	ss
 25554 00004191 1F                      	pop	ds	
 25555                                  	;Invoke	Splice
 25556 00004192 E8162B                  	call	Splice
 25557                                  
 25558                                   ;hkn; SS is DOSDATA
 25559                                  	;Context DS			;   FatReadCDS (ThisCDS);
 25560 00004195 16                      	push	ss
 25561 00004196 1F                      	pop	ds
 25562 00004197 8816[4C03]              	MOV	[NoSetDir],DL
 25563 0000419B C43E[A205]              	LES	DI,[THISCDS]
 25564                                  	;SAVE	<BP>
 25565 0000419F 55                      	push	bp
 25566                                  	;Invoke	FATREAD_CDS
 25567 000041A0 E81614                  	call	FATREAD_CDS	
 25568                                  	;RESTORE <BP>
 25569 000041A3 5D                      	pop	bp
 25570 000041A4 7268                    	JC	short FatFail
 25571                                  
 25572 000041A6 C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 25573                                  	;cmp	word [si+73],-1
 25574 000041AA 837C49FF                	CMP	word [SI+curdir.ID],-1
 25575 000041AE 7550                    	JNZ	short RestoreCDS
 25576                                  
 25577                                  ;hkn; SS is DOSDATA
 25578                                  	;Context ES
 25579 000041B0 16                      	push	ss
 25580 000041B1 07                      	pop	es
 25581                                  
 25582                                  ;hkn; SS override
 25583                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 25584 000041B2 36FF36[B205]            	push	word [SS:WFP_START]
 25585                                  	;cmp	si,[bp-6]
 25586 000041B7 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 25587 000041BA 750B                    	JNZ	short DoChdir
 25588                                  	;mov	di,[bp-2]
 25589 000041BC 8B7EFE                  	MOV	DI,Temp
 25590                                  
 25591                                  ;hkn; SS override
 25592 000041BF 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 25593                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 25594 000041C4 E8FBCF                  	call	FStrCpy
 25595                                  DoChdir:
 25596                                  ;hkn; SS is DOSDATA
 25597                                  	;Context DS
 25598 000041C7 16                      	push	ss
 25599 000041C8 1F                      	pop	ds
 25600                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 25601 000041C9 FF36[6D05]              	push	word [SATTRIB]
 25602 000041CD 55                      	push	bp
 25603                                  	;Invoke	DOS_ChDir
 25604 000041CE E851EF                  	call	DOS_CHDIR
 25605                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 25606 000041D1 5D                      	pop	bp
 25607 000041D2 5B                      	pop	bx
 25608 000041D3 8F06[B205]              	pop	word [WFP_START]
 25609 000041D7 881E[6D05]              	MOV	[SATTRIB],BL
 25610 000041DB C576FA                  	LDS	SI,SaveCDS
 25611 000041DE 730F                    	JNC	short SetCluster	;	if (c == -1) {
 25612                                  
 25613                                  ;hkn; SS override for THISCDS
 25614 000041E0 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 25615 000041E5 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 25616 000041EA 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 25617 000041EC 884C03                  	MOV	[SI+3],CL		;	    }
 25618                                  SetCluster:
 25619                                  	; 16/02/2024
 25620                                  	;;mov	word [si+73],0FFFFh
 25621                                  	;MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 25622                                  	;
 25623 000041EF 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 25624                                  	; 21/11/2022
 25625                                  	;test	byte [si+curdir.flags+1],20h
 25626                                  	; 19/05/2019
 25627                                  	; MSDOS 6.0
 25628                                  	; 17/12/2022
 25629                                  	;test	byte [si+68],20h
 25630 000041F4 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 25631                                  	;;test	word [si+67],2000h
 25632                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 25633 000041F8 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 25634 000041FA B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 25635                                  _setdirclus:
 25636                                  	;mov	[si+73],cx
 25637 000041FD 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 25638                                  RestoreCDS:
 25639 00004200 C47EFA                  	LES	DI,SaveCDS
 25640 00004203 36893E[A205]            	MOV	[SS:THISCDS],DI
 25641 00004208 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 25642 0000420D F8                      	CLC
 25643                                  FatFail:
 25644                                  	;LeaveCrit critDisk
 25645 0000420E E8F7D0                  	call	LCritDisk
 25646                                  
 25647                                  	;les	di,[bp-6]
 25648 00004211 C47EFA                  	LES	DI,SaveCDS
 25649                                  	;Leave
 25650 00004214 89EC                    	mov	sp,bp
 25651 00004216 5D                      	pop	bp
 25652 00004217 C3                      	retn
 25653                                  
 25654                                  ; 28/07/2018 - Retro DOS v3.0
 25655                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 25656                                  
 25657                                  ;Break	<CheckThisDevice - Check for being a device>
 25658                                  ;---------------------------------------------------------------------------
 25659                                  ;
 25660                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 25661                                  ;   device specified. We will return carry if there is a device present. 
 25662                                  ;   The forms of devices we will recognize are:
 25663                                  ;
 25664                                  ;	[path]device
 25665                                  ;
 25666                                  ;   Note that the drive letter has *already* been removed. All other forms
 25667                                  ;   are not considered to be devices. If such a device is found we change
 25668                                  ;   the source pointer to point to the device component.
 25669                                  ;
 25670                                  ;   Inputs:	ES is DOSDATA
 25671                                  ;		DS:SI contains name
 25672                                  ;   Outputs:	ES is DOSDATA
 25673                                  ;		DS:SI point to name or device
 25674                                  ;		Carry flag set if device was found
 25675                                  ;		Carry flag reset otherwise
 25676                                  ;   Registers Modified: all except ES:DI, DS
 25677                                  ;----------------------------------------------------------------------------
 25678                                  
 25679                                  CheckThisDevice:
 25680 00004218 57                      	push	di
 25681 00004219 56                      	push	si
 25682 0000421A 89F7                    	MOV	DI,SI
 25683                                  
 25684                                  ; Check for presence of \dev\ (Dam multiplan!)
 25685                                  
 25686 0000421C 8A04                    	MOV	AL,[SI]
 25687 0000421E E8650D                  	call	PATHCHRCMP		; is it a path char?
 25688 00004221 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 25689 00004223 46                      	INC	SI			; simulate LODSB
 25690                                  
 25691                                  ; We have the leading path separator. Look for DEV part.
 25692                                  
 25693 00004224 AD                      	LODSW
 25694 00004225 0D2020                  	OR	AX,2020h
 25695 00004228 3D6465                  	cmp	ax,"de"
 25696                                  	;CMP	AX,"e"<< 8 + "d"
 25697 0000422B 752D                    	JNZ	short NotDevice		; not "de", assume not device
 25698 0000422D AC                      	LODSB
 25699 0000422E 0C20                    	OR	AL,20h
 25700 00004230 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 25701 00004232 7526                    	JNZ	short NotDevice
 25702 00004234 AC                      	LODSB
 25703 00004235 E84E0D                  	call	PATHCHRCMP		; do we have the last path separator?
 25704 00004238 7520                    	JNZ	short NotDevice		; no. go for it.
 25705                                  
 25706                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 25707                                  ; SI and DevName may destroy DS.
 25708                                  
 25709                                  ParseDev:
 25710 0000423A 1E                      	push	ds
 25711 0000423B 56                      	push	si			; preserve the source pointer
 25712 0000423C E8890C                  	call	NameTrans		; advance DS:SI
 25713 0000423F 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 25714 00004242 F9                      	STC				; simulate a Carry return from DevName
 25715 00004243 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 25716                                  
 25717                                  ;hkn; SS is DOSDATA
 25718 00004245 16                      	push	ss
 25719 00004246 1F                      	pop	ds
 25720                                  
 25721                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 25722                                  ;
 25723                                  ; SR;
 25724                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 25725                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 25726                                  ; old call set the volume attribute bit.
 25727                                  
 25728 00004247 A0[6D05]                	mov	al,[SATTRIB]
 25729 0000424A A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 25730                                  
 25731                                  ; M026 - end
 25732                                  
 25733 0000424D E884FE                  	call	DEVNAME
 25734                                  
 25735                                  SkipSearch:
 25736 00004250 5E                      	pop	si
 25737 00004251 1F                      	pop	ds
 25738                                  
 25739                                  ; SI points to the beginning of the potential device. If we have a device
 25740                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 25741                                  ; original value. At this point Carry set indicates FILE.
 25742                                  
 25743                                  CheckReturn:
 25744 00004252 5F                      	pop	di			; get original SI
 25745 00004253 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 25746 00004255 89FE                    	MOV	SI,DI
 25747                                  Check_Done:
 25748 00004257 5F                      	pop	di
 25749 00004258 F5                      	CMC				; invert carry. Carry => device
 25750 00004259 C3                      	retn
 25751                                  NotDevice:
 25752 0000425A F9                      	STC
 25753 0000425B EBF5                    	JMP	short CheckReturn
 25754                                  
 25755                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 25756                                  ;-----------------------------------------------------------------------------
 25757                                  ;
 25758                                  ; Procedure Name : LookupPath
 25759                                  ;
 25760                                  ; Output  DS:SI -> path name,
 25761                                  ;	  ES:DI -> dir entry info buffer
 25762                                  ;	  ES:CX -> extended dir info buffer
 25763                                  ;
 25764                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 25765                                  ;			     FastOpen, DS:SI points to char just one after
 25766                                  ;			     the last char of path name which is fully or
 25767                                  ;			     partially found in FastOPen
 25768                                  ;	  carry flag set : FastOpen not in memory or path name not found
 25769                                  ;
 25770                                  ;----------------------------------------------------------------------------
 25771                                  
 25772                                  LookupPath:
 25773                                  ;	PUSH	AX
 25774                                  
 25775                                  ;hkn; SS override
 25776                                  	;test	byte [ss:FastOpenFlg],1
 25777 0000425D 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 25778 00004263 7503                    	JNZ	short FASTINST			    ; and this routine is
 25779                                  NOLOOK:
 25780 00004265 E99700                  	JMP	NOLOOKUP			    ; executed once
 25781                                  
 25782                                  FASTINST:
 25783                                  ;hkn; SS override
 25784                                  	;test	byte [ss:FastOpenFlg],8
 25785 00004268 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 25786 0000426E 75F5                    	JNZ	short NOLOOK			    ; yes
 25787                                  
 25788 00004270 BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 25789                                  
 25790                                  ;hkn; SS override
 25791 00004273 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 25792 00004278 BF[460D]                	MOV	DI,Dir_Info_Buff
 25793 0000427B B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 25794 0000427E B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 25795 00004280 1E                      	PUSH	DS
 25796 00004281 07                      	POP	ES
 25797                                  
 25798                                  ;hkn; SS override
 25799                                  	;call	far [bx+2]
 25800 00004282 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 25801 00004285 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 25802                                  
 25803 00004287 8D5CFE                  	LEA	BX,[SI-2]
 25804                                  
 25805                                  ;hkn; SS override
 25806 0000428A 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 25807 0000428F 745D                    	JZ	short NOTFOUND			    ; no
 25808                                  
 25809                                  	; 19/05/2019 - Retro DOS v4.0
 25810                                  
 25811                                  	; MSDOS 6.0				    ; fully or partially found
 25812 00004291 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 25813 00004294 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 25814 00004296 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 25815                                  
 25816                                  ;hkn; SS override for attrib/sattrib
 25817 00004297 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 25818 0000429C 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 25819 000042A1 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 25820                                  	;mov	ch,[es:di+0Bh]
 25821 000042A6 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 25822 000042AA E81AFE                  	call	MatchAttributes 		    ;AN000;FO.;
 25823                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 25824 000042AD 59                      	POP	CX				    ;AN000;FO.;
 25825 000042AE 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 25826                                  parfnd:
 25827                                  
 25828                                  ;hkn; SS override
 25829 000042B0 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 25830 000042B5 89CB                    	MOV	BX,CX
 25831                                  	; MSDOS 6.0
 25832                                  	;mov	ax,[bx+7]
 25833 000042B7 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 25834                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 25835 000042BA 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 25836 000042BE 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 25837 000042C1 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 25838                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25839                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 25840                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 25841 000042C5 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 25842 000042C8 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 25843                                  
 25844 000042CC 06                      	PUSH	ES				    ; save ES
 25845                                  ;hkn; SS override
 25846 000042CD 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 25847 000042D2 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 25848                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 25849 000042D5 07                      	POP	ES				    ; pop ES
 25850                                  ;SR;
 25851                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 25852                                  ;indicate it is not a root dir
 25853                                  
 25854 000042D6 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 25855 000042DD 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 25856 000042E2 89FB                    	MOV	BX,DI				    ; start of entry
 25857                                  	;lea	si,[di+1Ah]
 25858 000042E4 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 25859                                  						    ; dir_first field in the
 25860                                  						    ; dir entry
 25861                                  ;hkn; SS override for FastOpenFlg
 25862                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 25863 000042E7 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 25864                                  ;	POP	AX
 25865 000042ED C3                      	RETN
 25866                                  NOTFOUND:
 25867 000042EE 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 25868 000042F1 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 25869 000042F3 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 25870                                  Partial_Success:
 25871                                  	;and	byte [SS:FastOpenFlg],0FBh
 25872 000042F9 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 25873                                  NOLOOKUP:
 25874                                  ;	POP	AX
 25875 000042FF F9                      	STC
 25876 00004300 C3                      	RETN
 25877                                  
 25878                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 25879                                  ;-----------------------------------------------------------------------------
 25880                                  ;
 25881                                  ; Procedure Name : InsertPath
 25882                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 25883                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 25884                                  ;	  DS = DOSDATA
 25885                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 25886                                  ;
 25887                                  ;-----------------------------------------------------------------------------
 25888                                  
 25889                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25890                                  
 25891                                  InsertPath:
 25892 00004301 9C                      	PUSHF
 25893                                  ;hkn; SS override for FastOpenFlag
 25894                                  	;test	byte [SS:FastOpenFlg], 1
 25895 00004302 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25896 00004308 7477                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 25897                                  	;test	byte [ss:FastOpenFlg],2
 25898 0000430A 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25899 00004310 740D                    	JZ	short INSERT_DIR_INFO		; no
 25900                                  	;and	byte [ss:FastOpenFlg],0FDh
 25901 00004312 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25902 00004318 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25903 0000431D EB5C                    	JMP	short GET_NEXT2
 25904                                  
 25905                                  INSERT_DIR_INFO:				; save registers
 25906 0000431F 1E                      	PUSH	DS
 25907 00004320 06                      	PUSH	ES
 25908 00004321 53                      	PUSH	BX
 25909 00004322 56                      	PUSH	SI
 25910 00004323 57                      	PUSH	DI
 25911 00004324 51                      	PUSH	CX
 25912 00004325 50                      	PUSH	AX
 25913                                  
 25914                                  ;hkn; SS override
 25915 00004326 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 25916 0000432B BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 25917                                  
 25918                                  ; 21/02/2024
 25919                                  %if 0
 25920                                  	;mov	ax,[di+6]
 25921                                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25922                                  	; MSDOS 6.0
 25923                                  	;mov	[ss:si+1],ax
 25924                                  	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25925                                  	; 19/05/2019 - Retro DOS v4.0
 25926                                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25927                                  
 25928                                  ;hkn; SS is DOSDATA
 25929                                  	push	ss
 25930                                  	pop	ds
 25931                                  	; MSDOS 3.3
 25932                                  	;;mov	[si+1],ax
 25933                                  	;MOV	[SI+FEI.dirsec],AX
 25934                                  	; MSDOS 6.0
 25935                                  	;mov	[si+3],ax
 25936                                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 25937                                  %else
 25938                                  	;lds	ax,[di+6]
 25939 0000432E C54506                  	lds	ax,[di+BUFFINFO.buf_sector]	; get directory sector
 25940                                  	;mov	[ss:si+1],ax
 25941 00004331 36894401                	mov	[ss:si+FEI.dirsec],ax
 25942                                  	;mov	[ss:si+3],ax
 25943 00004335 368C5C03                	mov	[ss:si+FEI.dirsec+2],ds
 25944 00004339 16                      	push	ss
 25945 0000433A 1F                      	pop	ds
 25946                                  %endif
 25947                                  
 25948                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25949 0000433B A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25950                                  	;;mov	[si+5],ax ; MSDOS 6.0
 25951                                  	;mov	[si+3],ax ; MSDOS 3.3
 25952 0000433E 894405                  	MOV	[SI+FEI.clusnum],AX
 25953                                  	; MSDOS 6.0
 25954 00004341 A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25955                                  	;mov	[si+7],ax
 25956 00004344 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25957 00004347 A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25958                                  	;mov	[si+9],ax
 25959 0000434A 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25960                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25961 0000434D 89D8                    	MOV	AX,BX
 25962                                  	;;add	di,16  ; MSDOS 3.3
 25963                                  	;add	di,20  ; MSDOS 6.0
 25964 0000434F 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25965 00004352 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25966                                  	;mov	cl,32
 25967 00004354 B120                    	MOV	CL,dir_entry.size
 25968 00004356 F6F1                    	DIV	CL
 25969                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25970 00004358 8804                    	mov	[si],al
 25971                                  
 25972 0000435A 1E                      	PUSH	DS
 25973 0000435B 07                      	POP	ES
 25974                                  
 25975 0000435C 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25976 00004360 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25977                                  	;cmp	word [di+1Ah],0
 25978 00004362 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25979                                  					; never insert info when file is empty
 25980 00004366 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25981                                  
 25982 00004368 56                      	PUSH	SI			; ES:BX -> extended info
 25983 00004369 5B                      	POP	BX
 25984                                  
 25985                                  	;mov	al,2
 25986 0000436A B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25987 0000436C BE[300D]                	MOV	SI,FastOpenTable
 25988                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 25989                                  	; 07/12/2022
 25990 0000436F 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25991                                  
 25992 00004373 F8                      	CLC
 25993                                  SKIP_INSERT:
 25994 00004374 58                      	POP	AX
 25995 00004375 59                      	POP	CX			; restore registers
 25996 00004376 5F                      	POP	DI
 25997 00004377 5E                      	POP	SI
 25998 00004378 5B                      	POP	BX
 25999 00004379 07                      	POP	ES
 26000 0000437A 1F                      	POP	DS
 26001                                  GET_NEXT2:
 26002                                  	;or	[ss:FastOpenFlg],8
 26003 0000437B 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 26004                                  					; we got dir info from fastopen so
 26005                                  GET_NEXT_ELEMENT:
 26006 00004381 9D                      	POPF
 26007 00004382 C3                      	RETN
 26008                                  
 26009                                  ;============================================================================
 26010                                  ; DEV.ASM (MSDOS 6.0, 1991)
 26011                                  ;============================================================================
 26012                                  ; 17/07/2018 - Retro DOS v3.0
 26013                                  ; 30/04/2019 - Retro DOS v4.0
 26014                                  
 26015                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 26016                                  
 26017                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 26018                                  
 26019                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 26020                                  
 26021                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 26022                                  ;DEV001s:
 26023                                  ;		length of packets
 26024 00004383 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 26025                                  ;LenTab: db	22,14,22,13,15,14
 26026                                  
 26027                                  ;	Error Function
 26028                                  
 26029                                  CmdTab:
 26030 00004389 8604                    	DB	86h, DEVRD	; 0 input
 26031 0000438B 8605                    	DB	86h, DEVRDND	; 1 input status
 26032 0000438D 8708                    	DB	87h, DEVWRT	; 2 output
 26033 0000438F 870A                    	DB	87h, DEVOST	; 3 output status
 26034 00004391 8607                    	DB	86h, DEVIFL	; 4 input flush
 26035 00004393 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 26036                                  
 26037                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 26038                                  
 26039                                  ;CmdTab:
 26040                                  ;	db	86h, 4
 26041                                  ;	db	86h, 5
 26042                                  ;	db	87h, 8
 26043                                  ;	db	87h, 10
 26044                                  ;	db	86h, 7
 26045                                  ;	db	86h, 5
 26046                                  
 26047                                  ;DEV001E:
 26048                                  
 26049                                  ; 30/04/2019 - Retro DOS v4.0
 26050                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 26051                                  
 26052                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 26053                                  ;----------------------------------------------------------------------------
 26054                                  ;
 26055                                  ; Procedure Name : IOFUNC
 26056                                  ;
 26057                                  ; Inputs:
 26058                                  ;	DS:SI Points to SFT
 26059                                  ;	AH is function code
 26060                                  ;		= 0 Input
 26061                                  ;		= 1 Input Status
 26062                                  ;		= 2 Output
 26063                                  ;		= 3 Output Status
 26064                                  ;		= 4 Flush
 26065                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 26066                                  ;				   present.
 26067                                  ;	AL = character if output
 26068                                  ; Function:
 26069                                  ;	Perform indicated I/O to device or file
 26070                                  ; Outputs:
 26071                                  ;	AL is character if input
 26072                                  ;	If a status call
 26073                                  ;		zero set if not ready
 26074                                  ;		zero reset if ready (character in AL for input status)
 26075                                  ; For regular files:
 26076                                  ;	Input Status
 26077                                  ;		Gets character but restores position
 26078                                  ;		Zero set on EOF
 26079                                  ;	Input
 26080                                  ;		Gets character advances position
 26081                                  ;		Returns ^Z on EOF
 26082                                  ;	Output Status
 26083                                  ;		Always ready
 26084                                  ; AX altered, all other registers preserved
 26085                                  ;----------------------------------------------------------------------------
 26086                                  
 26087                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26088                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 26089                                  
 26090                                  IOFUNC:
 26091 00004395 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 26092                                  					; DEVIOBUF
 26093 0000439A 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 26094 000043A1 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 26095 000043A8 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 26096                                  	;test	byte [si+6],80h
 26097                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 26098 000043AC F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26099 000043B0 7403                    	JZ	short IOTO22		;AN000;
 26100 000043B2 E9A500                  	JMP	IOTOFILE		;AN000;
 26101                                  IOTO22:
 26102                                  	;test	word [si+5],80h
 26103                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 26104 000043B5 F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 26105 000043B9 7503                    	JNZ	short IOTO33		;AN000;
 26106 000043BB E99C00                  	JMP	IOTOFILE		;AN000;
 26107                                  IOTO33:
 26108 000043BE 06                      	push	es ; * (MSDOS 6.21)
 26109 000043BF E8A0C0                  	call	save_world
 26110 000043C2 8CDA                    	MOV	DX,DS
 26111 000043C4 8CD3                    	MOV	BX,SS
 26112 000043C6 8EDB                    	MOV	DS,BX
 26113 000043C8 8EC3                    	MOV	ES,BX
 26114 000043CA 31DB                    	XOR	BX,BX
 26115 000043CC 80FC05                  	cmp	ah,5		    ; system wait enabled?
 26116 000043CF 7503                    	jnz	short _no_sys_wait
 26117                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26118                                  	; 16/12/2022
 26119 000043D1 80CF04                  	or	bh,04h
 26120                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 26121                                  				    ; It is up to device driver to carry out
 26122                                  				    ; appropriate action.
 26123                                  _no_sys_wait:
 26124 000043D4 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 26125 000043D8 31DB                    	XOR	BX,BX
 26126 000043DA 881E[8903]              	MOV	[IOMED],BL
 26127                                  
 26128 000043DE 88E3                    	MOV	BL,AH		 	; get function
 26129 000043E0 2E8AA7[8343]            	MOV	AH,[cs:BX+LenTab]
 26130 000043E5 D1E3                    	SHL	BX,1
 26131 000043E7 2E8B8F[8943]            	MOV	CX,[cs:BX+CmdTab]
 26132 000043EC BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 26133 000043EF 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 26134 000043F3 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 26135                                  
 26136 000043F7 8EDA                    	MOV	DS,DX
 26137 000043F9 E86501                  	CALL	DEVIOCALL
 26138 000043FC 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 26139 00004401 21FF                    	and	di,di
 26140 00004403 7834                    	js	short DevErr
 26141                                  OKDevIO:
 26142 00004405 8CD0                    	MOV	AX,SS
 26143 00004407 8ED8                    	MOV	DS,AX
 26144                                  
 26145                                  	;cmp	ch,5
 26146 00004409 80FD05                  	CMP	CH,DEVRDND
 26147 0000440C 7506                    	JNZ	short DNODRD
 26148 0000440E A0[8903]                	MOV	AL,[IORCHR]
 26149 00004411 A2[BC03]                	MOV	[DEVIOBUF],AL
 26150                                  
 26151                                  DNODRD: 
 26152 00004414 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 26153 00004418 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 26154                                  	;and	ah,2
 26155 0000441A 80E402                  	AND	AH,STBUI>>8
 26156                                  
 26157                                  QuickReturn:				;AN000; 2/13/KK
 26158 0000441D E82BC0                  	call	restore_world
 26159 00004420 07                      	pop	es ; * (MSDOS 6.21)
 26160                                  
 26161                                  	; SR;
 26162                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 26163                                  	; IoStatFail = -1 (set after return from the I24)
 26164                                  
 26165                                  	; MSDOS 6.0
 26166 00004421 9C                      	pushf
 26167 00004422 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 26168 00004426 98                      	cbw				;sign extend to word
 26169 00004427 83F8FF                  	cmp	ax,-1
 26170 0000442A 7507                    	jne	short not_fail_ret
 26171 0000442C 36FE06[8300]            	inc	byte [ss:IoStatFail]
 26172 00004431 9D                      	popf
 26173 00004432 C3                      	retn
 26174                                  
 26175                                  not_fail_ret:
 26176 00004433 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 26177 00004437 9D                      	popf
 26178 00004438 C3                      	retn
 26179                                  
 26180                                  DevErr:
 26181 00004439 88CC                    	MOV	AH,CL
 26182 0000443B E87C0D                  	call	CHARHARD
 26183 0000443E 3C01                    	CMP	AL,1
 26184 00004440 7507                    	JNZ	short NO_RETRY
 26185 00004442 E806C0                  	call	restore_world
 26186                                  	; 12/05/2019
 26187 00004445 07                      	pop	es ; * (MSDOS 6.21)		
 26188 00004446 E94CFF                  	JMP	IOFUNC	; 10/08/2018
 26189                                  
 26190                                  NO_RETRY:
 26191                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 26192                                  	; ready so that DOS doesn't get caught in a status loop when user 
 26193                                  	; simply wants to ignore the error.
 26194                                  	;
 26195                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 26196                                  	; should be checked by the caller on return
 26197                                  
 26198                                  					; SS override
 26199 00004449 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 26200                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 26201                                  
 26202                                  	; SR;
 26203                                  	; Check if user failed
 26204                                  
 26205                                  	; MSDOS 6.0
 26206 0000444F 3C03                    	cmp	al,3
 26207 00004451 7505                    	jnz	short not_fail
 26208 00004453 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 26209                                  not_fail:
 26210 00004458 EBAB                    	JMP	short OKDevIO
 26211                                  
 26212                                  IOTOFILE:
 26213 0000445A 08E4                    	OR	AH,AH
 26214 0000445C 7421                    	JZ	short IOIN
 26215 0000445E FECC                    	DEC	AH
 26216 00004460 7405                    	JZ	short IOIST
 26217 00004462 FECC                    	DEC	AH
 26218 00004464 7411                    	JZ	short IOUT
 26219                                  IOUT_retn:	; 18/12/2022
 26220 00004466 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 26221                                  IOIST:
 26222                                  	;push	word [si+15h]
 26223 00004467 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 26224                                  	;push	word [si+17h]
 26225 0000446A FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 26226 0000446D E80F00                  	CALL	IOIN
 26227                                  	;pop	word [si+17h]
 26228 00004470 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 26229                                  	;pop	word [si+15h]
 26230 00004473 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 26231 00004476 C3                      	retn
 26232                                  IOUT:
 26233 00004477 E82500                  	CALL	SETXADDR
 26234 0000447A E8BFEF                  	call	DOS_WRITE
 26235                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 26236                                  	; 18/12/2022
 26237 0000447D EB4F                    	jmp	RESTXADDR
 26238                                  ;IOUT_retn:
 26239                                  	;retn			; come crying to me when things don't
 26240                                  				; work ARR
 26241                                  IOIN:
 26242 0000447F E81D00                  	CALL	SETXADDR
 26243                                  					; SS override for DOS34_FLAG
 26244                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 26245                                  	;or	word [ss:DOS34_FLAG],40h
 26246                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26247                                  	; 16/12/2022
 26248 00004482 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 26249 00004488 E8B1ED                  	CALL	DOS_READ
 26250                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 26251                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 26252                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26253                                  	; 16/12/2022
 26254 0000448B 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 26255 00004491 09C9                    	OR	CX,CX			; Check EOF
 26256 00004493 E83800                  	CALL	RESTXADDR
 26257                                  					; SS override
 26258 00004496 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 26259 0000449A 75CA                    	jnz	short IOUT_retn	
 26260 0000449C B01A                    	MOV	AL,1AH			; ^Z if no bytes
 26261 0000449E C3                      	retn
 26262                                  
 26263                                  SETXADDR:
 26264                                  					; SS override
 26265 0000449F 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 26266                                  
 26267 000044A4 06                      	push	es ; * (MSDOS 6.21)
 26268                                  
 26269 000044A5 E8BABF                  	call	save_world
 26270                                  					; SS override for DMAADD and THISSFT
 26271                                  	; 24/09/2023
 26272                                  	;PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 26273                                  	;PUSH	WORD [SS:DMAADD+2]
 26274 000044A8 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 26275                                  
 26276                                  ; 22/02/2024
 26277                                  %if 0
 26278                                  	push	ss
 26279                                  	pop	ds
 26280                                  
 26281                                  	; 24/09/2023
 26282                                  	push	word [DMAADD]
 26283                                  	push	word [DMAADD+2]
 26284                                  
 26285                                  	MOV	[THISSFT],SI		; Finish setting SFT pointer
 26286                                  	MOV	CX,[IOXAD+2]
 26287                                  	MOV	[DMAADD+2],CX
 26288                                  	MOV	CX,[IOXAD]
 26289                                  	MOV	[DMAADD],CX		; Set byte trans addr
 26290                                  %else
 26291                                  	; 22/02/2024 - Retro DOS v4.2
 26292                                  	; PCDOS 7.1 IBMDOS.COM
 26293                                  	
 26294 000044AD 36C50E[2C03]            	lds	cx,[ss:DMAADD]		; Save Disk transfer address
 26295 000044B2 51                      	push	cx
 26296 000044B3 1E                      	push	ds
 26297 000044B4 36C50E[8A03]            	lds	cx,[ss:IOXAD]		; Set byte trans address
 26298 000044B9 368C1E[2E03]            	mov	[ss:DMAADD+2],ds
 26299 000044BE 16                      	push	ss
 26300 000044BF 1F                      	pop	ds
 26301 000044C0 890E[2C03]              	mov	[DMAADD],cx
 26302 000044C4 8936[9E05]              	mov	[THISSFT],si
 26303                                  %endif
 26304 000044C8 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 26305 000044CC EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 26306                                  
 26307                                  RESTXADDR:
 26308 000044CE 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 26309 000044D2 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 26310 000044D6 8F06[2C03]              	POP	WORD [DMAADD]
 26311                                  
 26312 000044DA E86EBF                  	call	restore_world
 26313                                  
 26314 000044DD 07                      	pop	es ; * (MSDOS 6.21)
 26315                                  					; SS override
 26316                                  RESTRET:
 26317 000044DE 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 26318                                  
 26319                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 26320                                  ; 21/11/2022
 26321                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 26322                                  
 26323                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 26324                                  
 26325                                  ;----------------------------------------------------------------------------
 26326                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 26327                                  ;
 26328                                  ;	Dev_Open_SFT issues an open call to the device associated with
 26329                                  ;	the SFT.
 26330                                  ;
 26331                                  ;	ENTRY	(ES:DI) = SFT
 26332                                  ;	EXIT	none
 26333                                  ;	USES	all
 26334                                  ;----------------------------------------------------------------------------
 26335                                  
 26336                                  DEV_OPEN_SFT:
 26337 000044E3 06                      	push	es ; * (MSDOS 6.21)
 26338 000044E4 E87BBF                  	call	save_world
 26339                                  	;mov	al,0Dh	
 26340 000044E7 B00D                    	MOV	AL,DEVOPN
 26341 000044E9 EB06                    	JMP	SHORT DO_OPCLS
 26342                                  
 26343                                  ;----------------------------------------------------------------------------
 26344                                  ; Procedure Name : DEV_CLOSE_SFT
 26345                                  ;
 26346                                  ; Inputs:
 26347                                  ;	ES:DI Points to SFT
 26348                                  ; Function:
 26349                                  ;	Issue a CLOSE call to the correct device
 26350                                  ; Outputs:
 26351                                  ;	None
 26352                                  ; ALL preserved
 26353                                  ;----------------------------------------------------------------------------
 26354                                  
 26355                                  DEV_CLOSE_SFT:
 26356 000044EB 06                      	push	es ; * (MSDOS 6.21)
 26357 000044EC E873BF                  	call	save_world
 26358                                  	;mov	al,0Eh	
 26359 000044EF B00E                    	MOV	AL,DEVCLS
 26360                                  
 26361                                  	; Main entry for device open and close. AL contains the function 
 26362                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 26363                                  	; open/close to block devices. This allows networks to function but 
 26364                                  	; does NOT hang up with bogus change-line code.
 26365                                  
 26366                                  	;entry	DO_OPCLS
 26367                                  DO_OPCLS:
 26368                                  	; Is the SFT for the net? If so, no action necessary.
 26369                                  
 26370                                  	; MSDOS 6.0
 26371                                  	;test	word [es:di+5],8000h
 26372                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 26373 000044F1 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26374 000044F6 7564                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 26375 000044F8 30E4                    	XOR	AH,AH			; Unit
 26376                                  	;test	byte [es:di+5],80h
 26377 000044FA 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26378                                  	;les	di,[es:di+7]
 26379 000044FF 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 26380 00004503 7511                    	JNZ	short GOT_DEV_ADDR
 26381                                  
 26382                                  	; We are about to call device open/close on a block driver. If no 
 26383                                  	; sharing then just short circuit to done.
 26384                                  	
 26385                                  	; MSDOS 6.0
 26386                                  					; SS override
 26387 00004505 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 26388 0000450B 764F                    	JBE	short OPCLS_DONE	;AN010; yes
 26389                                  
 26390                                  ; 22/02/2024
 26391                                  %if 0
 26392                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26393                                  	;mov	ah,[es:di+1]
 26394                                  	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 26395                                  	mov	cl,[es:di]
 26396                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 26397                                  %else
 26398                                  	; 22/02/2024 - Retro DOS v4.2
 26399                                  	; (PCDOS 7.1 IBMDOS.COM)
 26400                                  	;mov	cx,[es:di+DPB.DRIVE]
 26401 0000450D 268B0D                  	mov	cx,[es:di]
 26402 00004510 88EC                    	mov	ah,ch			; AH = unit
 26403                                  					; CL = drive
 26404                                  %endif
 26405                                  
 26406                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 26407                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 26408 00004512 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 26409                                  GOT_DEV_ADDR:				; ES:DI -> device
 26410                                  	;test	word [es:di+4],800h
 26411                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 26412 00004516 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 26413 0000451B 743F                    	JZ	short OPCLS_DONE	; Device can't
 26414 0000451D 06                      	PUSH	ES
 26415 0000451E 1F                      	POP	DS
 26416 0000451F 89FE                    	MOV	SI,DI			; DS:SI -> device
 26417                                  
 26418                                  OPCLS_RETRY:
 26419                                  	;Context ES
 26420 00004521 16                      	push	ss
 26421 00004522 07                      	pop	es
 26422                                  					; DEVCALL is in DOSDATA
 26423 00004523 BF[5A03]                	MOV	DI,DEVCALL
 26424                                  
 26425 00004526 89FB                    	MOV	BX,DI
 26426 00004528 50                      	PUSH	AX
 26427                                  	;mov	al,13
 26428 00004529 B00D                    	MOV	AL,DOPCLHL
 26429 0000452B AA                      	STOSB				; Length
 26430 0000452C 58                      	POP	AX
 26431                                  
 26432 0000452D 86E0                    	XCHG	AH,AL
 26433                                  	;STOSB				; Unit
 26434                                  	; 22/02/2024 (PCDOS 7.1 IBMDOS.COM)
 26435 0000452F AB                      	stosw				; Unit, Command
 26436 00004530 86E0                    	XCHG	AH,AL
 26437                                  	;STOSB				; Command
 26438                                  
 26439 00004532 26C7050000              	MOV	WORD [ES:DI],0		; Status
 26440 00004537 50                      	PUSH	AX			; Save Unit,Command
 26441                                  	;invoke	DEVIOCALL2
 26442 00004538 E82900                  	call	DEVIOCALL2
 26443                                  
 26444                                  	;mov	di,[es:bx+3]
 26445 0000453B 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 26446                                  	;test	di,8000h
 26447                                  	;jz	short OPCLS_DONEP	
 26448 0000453F 21FF                    	and	di,di
 26449 00004541 7918                    	jns	short OPCLS_DONEP	; No error
 26450                                  	; 21/11/2022
 26451                                  	;test	word [si+4],8000h
 26452                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 26453                                  	;test	word [si+5],80h
 26454 00004543 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 26455 00004547 7404                    	JZ	short BLKDEV
 26456 00004549 B486                    	MOV	AH,86H			; Read error in data, Char dev
 26457 0000454B EB04                    	JMP	SHORT HRDERR
 26458                                  BLKDEV:
 26459 0000454D 88C8                    	MOV	AL,CL			; Drive # in AL
 26460 0000454F B406                    	MOV	AH,6			; Read error in data, Blk dev
 26461                                  HRDERR:
 26462                                  	;invoke	CHARHARD
 26463 00004551 E8660C                  	call	CHARHARD
 26464 00004554 3C01                    	cmp	al,1
 26465 00004556 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 26466                                  					;  Note that FAIL is essentually IGNORED
 26467 00004558 58                      	POP	AX			; Get back Unit, Command
 26468 00004559 EBC6                    	JMP	short OPCLS_RETRY
 26469                                  OPCLS_DONEP:
 26470 0000455B 58                      	POP	AX			; Clean stack
 26471                                  OPCLS_DONE:
 26472 0000455C E8ECBE                  	call	restore_world
 26473 0000455F 07                      	pop	es ; * (MSDOS 6.21)
 26474 00004560 C3                      	retn
 26475                                  
 26476                                  ; 30/04/2019 - Retro DOS v4.0
 26477                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 26478                                  
 26479                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26480                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 26481                                  
 26482                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 26483                                  ;----------------------------------------------------------------------------
 26484                                  ;**	DevIoCall  - Call Device
 26485                                  ;
 26486                                  ;	ENTRY	DS:SI Points to device SFT
 26487                                  ;		ES:BX Points to request data
 26488                                  ;	EXIT	DS:SI -> Device driver
 26489                                  ;	USES	DS:SI,AX
 26490                                  ;----------------------------------------------------------------------------
 26491                                  ;**	DevIoCall2 - Call Device
 26492                                  ;
 26493                                  ;	ENTRY	DS:SI Points to DPB
 26494                                  ;		ES:BX Points to request data
 26495                                  ;	EXIT	DS:SI -> Device driver
 26496                                  ;	USES	DS:SI,AX
 26497                                  ;----------------------------------------------------------------------------
 26498                                  
 26499                                  DEVIOCALL:
 26500                                  					; SS override for CALLSSEC, 
 26501                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 26502 00004561 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 26503                                  
 26504                                  	;entry	DEVIOCALL2
 26505                                  DEVIOCALL2:
 26506                                  	;EnterCrit critDevice
 26507 00004564 E8BBCD                  	call	ECritDevice
 26508                                  
 26509                                  	; MSDOS 6.0
 26510                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 26511                                  	;test	byte [si+5],80h
 26512 00004567 F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 26513 0000456B 7545                    	jnz	short chardev2		;AN000; >32mb no
 26514                                  
 26515                                  	; 16/12/2022
 26516                                  	; 22/11/2022
 26517 0000456D 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 26518 00004571 3C04                    	cmp	al,DEVRD	; 4
 26519 00004573 7408                    	je	short chkext	
 26520 00004575 3C08                    	cmp	al,DEVWRT	; 8
 26521 00004577 7404                    	je	short chkext
 26522 00004579 3C09                    	cmp	al,DEVWRTV	; 9
 26523 0000457B 7535                    	jne	short chardev2
 26524                                  
 26525                                  	; 16/12/2022
 26526                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26527                                  	;;cmp	byte [es:bx+2],4
 26528                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 26529                                  	;JZ	short chkext		;AN000; >32mb   yes
 26530                                  	;;cmp	byte [es:bx+2],8
 26531                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 26532                                  	;JZ	short chkext		;AN000; >32mb   yes
 26533                                  	;;cmp	byte [es:bx+2],9
 26534                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 26535                                  	;				;AN000; >32mb write/verify ?
 26536                                  	;JNZ	short chardev2		;AN000; >32mb no
 26537                                  chkext:
 26538 0000457D E8A400                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 26539 00004580 7252                    	JC	short dev_exit		;AN000;LB. done
 26540                                  
 26541                                  	;test	byte [si+4],2
 26542 00004582 F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 26543 00004586 741A                    	JZ	short chksector		;AN000;>32mb   no
 26544 00004588 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 26545                                  
 26546                                  	;MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 26547                                  	;MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 26548                                  	; 22/02/2024
 26549 0000458C B8FFFF                  	mov	ax,-1 ; 0FFFFh
 26550 0000458F 368706[6E03]            	xchg    ax,[ss:CALLSSEC]
 26551                                  
 26552 00004594 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 26553 00004598 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 26554 0000459C 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 26555 000045A0 EB10                    	JMP	short chardev2		;AN000; >32mb
 26556                                  chksector:				;AN000; >32mb
 26557 000045A2 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 26558 000045A8 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 26559                                  	;mov	word [es:bx+3],8107h
 26560 000045AA 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 26561                                  					;AN000; >32mb
 26562 000045B0 EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 26563                                  
 26564                                  chardev2:				;AN000;
 26565                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 26566                                  	; preserved
 26567                                  
 26568                                  	;mov	ax,[si+6]
 26569 000045B2 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 26570 000045B5 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26571 000045B9 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 26572 000045BE 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26573                                  
 26574                                  	;mov	ax,[si+8]
 26575 000045C3 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 26576 000045C6 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26577 000045CA 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26578                                  
 26579                                  	; MSDOS 6.0
 26580 000045CF E84801                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 26581 000045D2 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 26582                                  
 26583                                  dev_exit:
 26584                                  	;LeaveCrit critDevice
 26585                                  	;call	LCritDevice
 26586                                  	;retn
 26587                                  	; 18/12/2022
 26588 000045D4 E966CD                  	jmp	LCritDevice
 26589                                  
 26590                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 26591                                  ; 22/11/2022
 26592                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 26593                                  
 26594                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 26595                                  ;---------------------------------------------------------------------------
 26596                                  ;
 26597                                  ; Procedure Name : SETREAD, SETWRITE
 26598                                  ;
 26599                                  ; Inputs:
 26600                                  ;	DS:BX = Transfer Address
 26601                                  ;	CX = Record Count
 26602                                  ;	DX = Starting Record
 26603                                  ;	AH = Media Byte
 26604                                  ;	AL = Unit Code
 26605                                  ; Function:
 26606                                  ;	Set up the device call header at DEVCALL
 26607                                  ; Output:
 26608                                  ;	ES:BX Points to DEVCALL
 26609                                  ; No other registers effected
 26610                                  ;
 26611                                  ;---------------------------------------------------------------------------
 26612                                  
 26613                                  SETREAD_XJ:
 26614                                  	;;;
 26615                                  	; 07/02/2024 - Retro DOS v4.2
 26616 000045D7 89FB                    	mov	bx,di
 26617 000045D9 EB07                    	jmp	short SETREAD_X
 26618                                  	;;;
 26619                                  
 26620                                  SETREAD_XT:
 26621                                  	;;;
 26622                                  	; 07/02/2024 - Retro DOS v4.2
 26623 000045DB BB[B603]                	mov	bx,TIMEBUF
 26624 000045DE 53                      	push	bx
 26625                                  SETREAD_XTC:
 26626 000045DF B90600                  	mov	cx,6
 26627                                  	;;;
 26628                                  SETREAD_X:
 26629                                  	;;;
 26630                                  	; 06/02/2024 - Retro DOS v4.2
 26631 000045E2 31C0                    	xor	ax,ax
 26632                                  	;mov	dx,ax ; 0
 26633 000045E4 99                      	cwd
 26634                                  	;;;
 26635                                  
 26636                                  ; ------------------------------------
 26637                                  
 26638                                  SETREAD:
 26639 000045E5 57                      	PUSH	DI
 26640 000045E6 51                      	PUSH	CX
 26641 000045E7 50                      	PUSH	AX
 26642 000045E8 B104                    	MOV	CL,DEVRD ; mov cl,4
 26643                                  SETCALLHEAD:
 26644 000045EA B016                    	MOV	AL,DRDWRHL ; mov al,16h
 26645 000045EC 16                      	PUSH	SS
 26646 000045ED 07                      	POP	ES
 26647                                  					; DEVCALL is in DOSDATA
 26648 000045EE BF[5A03]                	MOV	DI,DEVCALL
 26649                                  
 26650 000045F1 AA                      	STOSB				; length
 26651 000045F2 58                      	POP	AX			; 
 26652 000045F3 AA                      	STOSB				; Unit
 26653 000045F4 50                      	PUSH	AX
 26654 000045F5 88C8                    	MOV	AL,CL
 26655 000045F7 AA                      	STOSB				; Command code
 26656 000045F8 31C0                    	XOR	AX,AX
 26657 000045FA AB                      	STOSW				; Status
 26658 000045FB 83C708                  	ADD	DI,8			; Skip link fields
 26659 000045FE 58                      	POP	AX
 26660 000045FF 86E0                    	XCHG	AH,AL
 26661 00004601 AA                      	STOSB				; Media byte
 26662 00004602 86C4                    	XCHG	AL,AH
 26663 00004604 50                      	PUSH	AX
 26664 00004605 89D8                    	MOV	AX,BX
 26665 00004607 AB                      	STOSW
 26666                                  
 26667 00004608 8CD8                    	MOV	AX,DS
 26668 0000460A AB                      	STOSW				; Transfer addr
 26669                                  
 26670 0000460B 59                      	POP	CX			; Real AX
 26671 0000460C 58                      	POP	AX			; Real CX
 26672 0000460D AB                      	STOSW				; Count
 26673                                  
 26674 0000460E 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 26675 0000460F AB                      	STOSW				; Start
 26676 00004610 91                      	XCHG	AX,CX
 26677 00004611 87D1                    	XCHG	DX,CX
 26678 00004613 5F                      	POP	DI
 26679                                  					; DEVCALL is in DOSDATA
 26680 00004614 BB[5A03]                	MOV	BX,DEVCALL
 26681 00004617 C3                      	retn
 26682                                  
 26683                                  	;entry	SETWRITE
 26684                                  SETWRITE:
 26685                                  
 26686                                  ; Inputs:
 26687                                  ;	DS:BX = Transfer Address
 26688                                  ;	CX = Record Count
 26689                                  ;	DX = Starting Record
 26690                                  ;	AH = Media Byte
 26691                                  ;	AL = Unit Code
 26692                                  ; Function:
 26693                                  ;	Set up the device call header at DEVCALL
 26694                                  ; Output:
 26695                                  ;	ES:BX Points to DEVCALL
 26696                                  ; No other registers effected
 26697                                  
 26698 00004618 57                      	PUSH	DI
 26699 00004619 51                      	PUSH	CX
 26700 0000461A 50                      	PUSH	AX
 26701 0000461B B108                    	MOV	CL,DEVWRT ; mov cl,8
 26702 0000461D 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 26703 00004622 EBC6                    	JMP	SHORT SETCALLHEAD
 26704                                  
 26705                                  ; 30/04/2019 - Retro DOS v4.0
 26706                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 26707                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26708                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 26709                                  
 26710                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 26711                                  ;---------------------------------------------------------------------------
 26712                                  ;
 26713                                  ; Procedure Name : RW_SC
 26714                                  ;
 26715                                  ; Inputs:
 26716                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 26717                                  ;	 [SC_STATUS]= SC validity status
 26718                                  ;	 [SEQ_SECTOR]= last sector read
 26719                                  ; Function:
 26720                                  ;	Read from or write through secondary cache
 26721                                  ; Output:
 26722                                  ;	ES:BX Points to DEVCALL
 26723                                  ;	carry clear, I/O is not done
 26724                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 26725                                  ;	carry set, I/O is done
 26726                                  ;
 26727                                  ;----------------------------------------------------------------------------
 26728                                  
 26729                                  RW_SC:
 26730                                  	; SS override for all variables used.
 26731                                  	
 26732 00004624 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 26733 0000462A 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 26734 0000462C 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 26735 00004632 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 26736 00004634 51                      	PUSH	CX			    ;AN000;LB.
 26737 00004635 52                      	PUSH	DX			    ;AN000;LB. yes
 26738 00004636 1E                      	PUSH	DS			    ;AN000;LB. save registers
 26739 00004637 56                      	PUSH	SI			    ;AN000;LB.
 26740 00004638 06                      	PUSH	ES			    ;AN000;LB.
 26741 00004639 57                      	PUSH	DI			    ;AN000;LB.
 26742                                  
 26743 0000463A 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 26744 0000463F 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 26745 00004645 7408                    	JZ	short doread		    ;AN000;LB. yes
 26746 00004647 E8BE00                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 26747 0000464A E98B00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 26748                                  scexit4:				    ;AN000;
 26749 0000464D F8                      	CLC				    ;AN000;LB. I/O not done yet
 26750 0000464E C3                      	retn				    ;AN000;LB.
 26751                                  doread: 				    ;AN000;
 26752 0000464F E82001                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 26753 00004652 720A                    	JC	short readSC		    ;AN000;LB.
 26754 00004654 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 26755 0000465B F9                      	STC				    ;AN000;LB. set carry
 26756 0000465C EB68                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 26757                                  readSC: 				    ;AN000;
 26758 0000465E 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 26759 00004662 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 26760 00004667 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 26761 0000466C 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 26762                                  	; 24/09/2023
 26763                                  	;CMP	AX,0			    ;AN000;LB. greater than 64K
 26764 00004671 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 26765                                  chklow: 						
 26766 00004673 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 26767 00004676 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 26768 00004678 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 26769 0000467F 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 26770 00004683 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 26771                                  readsr:
 26772 00004687 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 26773 0000468B 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 26774 0000468F 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 26775 00004693 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 26776                                  
 26777 00004697 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 26778 0000469B 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 26779 0000469F 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26780 000046A3 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 26781 000046A7 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 26782 000046AD 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 26783 000046B1 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 26784 000046B5 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 26785 000046B9 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 26786 000046BD 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 26787 000046C1 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 26788                                  saveseq2:				    ;AN000;
 26789 000046C5 F8                      	CLC				    ;AN000;LB. clear carry
 26790                                  saveseq:				    ;AN000;	
 26791 000046C6 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 26792 000046CA 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 26793 000046CE 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 26794 000046D2 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 26795 000046D6 EB01                    	JMP	short scexit 		    ;AN000;LB.	
 26796                                  scexit2:				    ;AN000;LB.
 26797 000046D8 F8                      	CLC				    ;AN000;LB.	clear carry
 26798                                  scexit: 				    ;AN000;		
 26799 000046D9 5F                      	POP	DI			    ;AN000;LB.
 26800 000046DA 07                      	POP	ES			    ;AN000;LB. restore registers
 26801 000046DB 5E                      	POP	SI			    ;AN000;LB.
 26802 000046DC 1F                      	POP	DS			    ;AN000;LB.
 26803 000046DD 5A                      	POP	DX			    ;AN000;LB.
 26804 000046DE 59                      	POP	CX			    ;AN000;LB.
 26805 000046DF C3                      	retn				    ;AN000;LB.
 26806                                  
 26807                                  ;Break	<IN_SC -- check if in secondary cache>
 26808                                  ;--------------------------------------------------------------------------
 26809                                  ;
 26810                                  ; Procedure Name : IN_SC
 26811                                  ;
 26812                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26813                                  ;	   [CURSC_DRIVE]= current SC drive
 26814                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26815                                  ;	   [SC_CACHE_COUNT]= SC count
 26816                                  ;	   [HIGH_SECTOR]:DX= sector number
 26817                                  ; Function:
 26818                                  ;	Check if the sector is in secondary cache
 26819                                  ; Output:
 26820                                  ;	carry clear, in SC
 26821                                  ;	   CX= the index in the secondary cache
 26822                                  ;	carry set, not in SC
 26823                                  ;
 26824                                  ;---------------------------------------------------------------------------
 26825                                  
 26826                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26827                                  IN_SC:
 26828                                  	; SS override for all variables used
 26829 000046E0 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 26830 000046E4 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 26831 000046E9 751B                    	JNZ	short outrange2		    ;AN000;;LB. no
 26832 000046EB 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 26833 000046EF 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 26834 000046F1 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 26835 000046F6 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 26836                                  	; 24/09/2023
 26837                                  	;CMP	AX,0			    ;AN000;;LB. greater than 64K
 26838 000046FB 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 26839 000046FD 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 26840 00004702 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 26841 00004704 F8                      	CLC				    ;AN000;;LB. clear carry
 26842                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 26843                                  	; 16/12/2022
 26844 00004705 C3                      	retn	; 30/04/2019
 26845                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26846                                  	;jmp	short inexit
 26847                                  
 26848                                  outrange2:				    ;AN000;;LB. set carry
 26849 00004706 F9                      	STC				    ;AN000;;LB.
 26850                                  inexit: 				    ;AN000;;LB.
 26851 00004707 C3                      	retn				    ;AN000;;LB.
 26852                                  
 26853                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 26854                                  ;---------------------------------------------------------------------------
 26855                                  ;
 26856                                  ; Procedure Name : Invalidate_Sc
 26857                                  ;
 26858                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26859                                  ;	   [CURSC_DRIVE]= current SC drive
 26860                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26861                                  ;	   [SC_CACHE_COUNT]= SC count
 26862                                  ;	   [SC_STATUS]= SC status word
 26863                                  ;	   [HIGH_SECTOR]:DX= sector number
 26864                                  ;
 26865                                  ; Function:
 26866                                  ;	invalidate secondary cache if in there
 26867                                  ; Output:
 26868                                  ;	[SC_STATUS] is updated
 26869                                  ;---------------------------------------------------------------------------
 26870                                  
 26871                                  INVALIDATE_SC:
 26872                                  	; SS override for all variables used
 26873                                  
 26874 00004708 E8D5FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 26875 0000470B 720C                    	JC	short outrange		    ;AN000;;LB. no
 26876 0000470D B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 26877 00004710 D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 26878 00004712 F7D0                    	NOT	AX			    ;AN000;;LB.
 26879 00004714 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 26880                                  outrange:				    ;AN000;;LB.
 26881 00004719 C3                      	retn				    ;AN000;;LB.
 26882                                  
 26883                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 26884                                  ; 22/11/2022
 26885                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 26886                                  
 26887                                  ;Break	<VIRREAD- virtually read data into buffer>
 26888                                  ;--------------------------------------------------------------------------
 26889                                  ;
 26890                                  ; Procedure Name : SC_FLAG
 26891                                  ;
 26892                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 26893                                  ;		     1, continuous sectors were read into SC
 26894                                  ; Function:
 26895                                  ;	   Move data from SC to buffer
 26896                                  ; Output:
 26897                                  ;	 carry clear, data is moved to buffer
 26898                                  ;	 carry set, bad sector or exceeds maximum sector
 26899                                  ;	   SC_FLAG =0
 26900                                  ;	   CALLSCNT=1
 26901                                  ;	   SC_STATUS= -1 if succeeded
 26902                                  ;     
 26903                                  ;		       0 if failed
 26904                                  ;--------------------------------------------------------------------------
 26905                                  
 26906                                  VIRREAD:
 26907                                  	; SS override for all variables used
 26908                                  
 26909 0000471A 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 26910 00004720 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 26911 00004722 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 26912 00004726 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 26913 0000472A 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 26914 0000472E 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 26915 00004732 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 26916 00004738 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 26917                                  
 26918                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 26919 0000473F 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 26920 00004745 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 26921 00004747 1E                      	PUSH	DS			    ;AN000;;LB.
 26922 00004748 56                      	PUSH	SI			    ;AN000;;LB.
 26923 00004749 06                      	PUSH	ES			    ;AN000;;LB.
 26924 0000474A 57                      	PUSH	DI			    ;AN000;;LB.
 26925 0000474B 52                      	PUSH	DX			    ;AN000;;LB.
 26926 0000474C 51                      	PUSH	CX			    ;AN000;;LB.
 26927 0000474D 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 26928 0000474F E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buf
 26929 00004752 59                      	POP	CX
 26930 00004753 5A                      	POP	DX			    ;AN000;;LB.
 26931 00004754 5F                      	POP	DI			    ;AN000;;LB.
 26932 00004755 07                      	POP	ES			    ;AN000;;LB.
 26933 00004756 5E                      	POP	SI			    ;AN000;;LB.
 26934 00004757 1F                      	POP	DS			    ;AN000;;LB.
 26935 00004758 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 26936                                  scerror:				    ;AN000;
 26937 0000475A 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 26938 00004761 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 26939 00004768 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 26940 0000476E F9                      	STC				    ;AN000;;LB. carry set
 26941 0000476F C3                      	retn				    ;AN000;;LB.
 26942                                  sc2end: 				    ;AN000;
 26943 00004770 F8                      	CLC				    ;AN000;;LB. carry clear
 26944 00004771 C3                      	retn				    ;AN000;;LB.
 26945                                  
 26946                                  ; 30/04/2019 - Retro  DOS v4.0
 26947                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 26948                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26949                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 26950                                  
 26951                                  ;Break	<SC2BUF- move data from SC to buffer>
 26952                                  ;----------------------------------------------------------------------------
 26953                                  ;
 26954                                  ; Procedure Name : SC2BUF
 26955                                  ;
 26956                                  ; Inputs:  [SC_STATUS] = SC validity status
 26957                                  ;	   [SC_SECTOR_SIZE] = request sector size
 26958                                  ;	   [SC_CACHE_PTR] = pointer to SC
 26959                                  ; Function:
 26960                                  ;	   Move data from SC to buffer
 26961                                  ; Output:
 26962                                  ;	   carry clear, in SC  and data is moved
 26963                                  ;	   carry set, not in SC and data is not moved
 26964                                  ;---------------------------------------------------------------------------
 26965                                  
 26966                                  SC2BUF:
 26967                                  	; SS override for all variables used
 26968 00004772 E86BFF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 26969                                  	;JC	short noSC		    ;AN000;LB. no
 26970                                  	; 24/09/2023
 26971 00004775 723D                    	jc	short sexit
 26972 00004777 B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 26973 0000477A D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 26974 0000477C 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 26975 00004781 7430                    	JZ	short noSC		    ;AN000;LB. invalid
 26976                                  ;entry SC2BUF2
 26977                                  SC2BUF2:				    ;AN000;
 26978                                  	;MOV	AX,CX			    ;AN000;LB. times index with
 26979                                  	;MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 26980                                  	; 24/09/2023
 26981 00004783 36A1[AD0D]              	mov	ax,[ss:SC_SECTOR_SIZE]
 26982 00004787 91                      	xchg	ax,cx ; cx = [ss:SC_SECTOR_SIZE]
 26983 00004788 F7E1                    	mul	cx
 26984 0000478A 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 26985 0000478F 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26986 00004794 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 26987 00004796 89C6                    	MOV	SI,AX			    ;AN000;LB.
 26988 00004798 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 26989 0000479D 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 26990                                  	; 24/09/2023
 26991                                  	;MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 26992 000047A2 D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 26993                                  ;entry MOVWORDS
 26994                                  MOVWORDS:				    ;AN000;
 26995 000047A4 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 26996 000047AA 7403                    	JZ	short nodd		    ;AN000;LB. no
 26997 000047AC D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 26998 000047AE 66                      	DB	66H			    ;AN000;LB. use double word move
 26999                                  nodd:
 27000 000047AF F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 27001 000047B1 F8                      	CLC				    ;AN000;LB. clear carry
 27002 000047B2 C3                      	retn				    ;AN000;LB. exit
 27003                                  noSC:					    ;AN000;
 27004 000047B3 F9                      	STC				    ;AN000;LB. set carry
 27005                                  sexit:					    ;AN000;
 27006 000047B4 C3                      	retn				    ;AN000;LB.
 27007                                  
 27008                                  ;============================================================================
 27009                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 27010                                  ;============================================================================
 27011                                  ; 29/07/2018 - Retro DOS v3.0
 27012                                  ; 19/05/2019 - Retro DOS v4.0
 27013                                  
 27014                                  ;	TITLE	MKNODE - Node maker
 27015                                  ;	NAME	MKNODE
 27016                                  
 27017                                  ;**	MKNODE.ASM
 27018                                  ;----------------------------------------------------------------------------
 27019                                  ;	Low level routines for making a new local file system node
 27020                                  ;	and filling in an SFT from a directory entry
 27021                                  ;
 27022                                  ;	BUILDDIR
 27023                                  ;	SETDOTENT
 27024                                  ;	MakeNode
 27025                                  ;	NEWENTRY
 27026                                  ;	FREEENT
 27027                                  ;	NEWDIR
 27028                                  ;	DOOPEN
 27029                                  ;	RENAME_MAKE
 27030                                  ;	CHECK_VIRT_OPEN
 27031                                  ;
 27032                                  ;	Revision history:
 27033                                  ;
 27034                                  ;	 AN000	version 4.0  Jan. 1988
 27035                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 27036                                  
 27037                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 27038                                  ;----------------------------------------------------------------------------
 27039                                  ;
 27040                                  ; Procedure Name : BUILDDIR,NEWDIR
 27041                                  ;
 27042                                  ; Inputs:
 27043                                  ;       ES:BP Points to DPB
 27044                                  ;       [THISSFT] Set if using NEWDIR entry point
 27045                                  ;               (used by ALLOCATE)
 27046                                  ;       [LASTENT] current last valid entry number in directory if no free
 27047                                  ;               entries
 27048                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 27049                                  ; Function:
 27050                                  ;       Grow directory if no free entries and not root
 27051                                  ; Outputs:
 27052                                  ;       CARRY SET IF FAILURE
 27053                                  ;       ELSE
 27054                                  ;          AX entry number of new entry
 27055                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 27056                                  ;               AX = first entry of new dir
 27057                                  ;       GETENT should be called to set [LASTENT]
 27058                                  ;
 27059                                  ;----------------------------------------------------------------------------
 27060                                  
 27061                                  ; 19/05/2019 - Retro DOS v4.0
 27062                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 27063                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27064                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 27065                                  
 27066                                  ; 24/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 MSDOS.SYS)
 27067                                  ; DOSCODE:8845h (MSDOS 6.22, MSDOS.SYS)
 27068                                  
 27069                                  BUILDDIR:
 27070                                  	; 29/07/2018 - Retro DOS v3.0
 27071                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 27072                                  
 27073 000047B5 A1[D805]                        MOV     AX,[ENTFREE]
 27074 000047B8 83F8FF                          CMP     AX,-1 ; 0FFFFh
 27075                                  	;JZ	short CHECK_IF_ROOT
 27076                                          ;CLC
 27077                                          ;retn
 27078                                  	; 24/09/2023
 27079 000047BB 7507                    	jne	short builddir_cmc_retn  ; cf=1 (will be 0)
 27080                                  
 27081                                  CHECK_IF_ROOT:
 27082 000047BD 833E[C205]00                    CMP     word [DIRSTART],0
 27083 000047C2 7502                            JNZ	short NEWDIR
 27084                                          ;STC
 27085                                  	; 24/09/2023
 27086                                  	; [DIRSTART]=0, cf=0, zf=1 (cf will be 1 after cmc instruction)
 27087                                  builddir_cmc_retn:
 27088                                  	; 24/09/2023
 27089 000047C4 F5                      	cmc	; cf=1 <-> cf=0
 27090                                  builddir_retn:
 27091 000047C5 C3                              retn				; Can't grow root
 27092                                  
 27093                                  	;entry   NEWDIR
 27094                                  NEWDIR: 
 27095 000047C6 8B1E[C205]              	MOV     BX,[DIRSTART]
 27096 000047CA 09DB                            OR      BX,BX
 27097 000047CC 7405                            JZ	short NULLDIR
 27098 000047CE E81B06                  	call	GETEOF
 27099 000047D1 72F2                            jc	short builddir_retn	; Screw up
 27100                                  NULLDIR:
 27101 000047D3 B90100                          MOV     CX,1
 27102 000047D6 E82C05                  	call	ALLOCATE
 27103 000047D9 72EA                            jc	short builddir_retn
 27104 000047DB 8B16[C205]                      MOV     DX,[DIRSTART]
 27105 000047DF 09D2                            OR      DX,DX
 27106 000047E1 750D                            JNZ	short ADDINGDIR
 27107 000047E3 E8EEF5                  	call	SETDIRSRCH
 27108 000047E6 72DD                            jc	short builddir_retn
 27109 000047E8 C706[4803]FFFF                  MOV     word [LASTENT],-1
 27110 000047EE EB29                            JMP     SHORT GOTDIRREC
 27111                                  ADDINGDIR:
 27112 000047F0 53                              PUSH    BX
 27113 000047F1 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27114 000047F5 E8140C                          call	IsEOF
 27115 000047F8 5B                              POP     BX
 27116 000047F9 7217                            JB	short NOTFIRSTGROW
 27117                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 27118 000047FB 891E[BC05]                      MOV     [CLUSNUM],BX
 27119                                  	; 24/09/2023
 27120                                  	;PUSH	CX ; (not necessary)
 27121 000047FF 50                      	PUSH	AX
 27122 00004800 55                      	PUSH	BP
 27123 00004801 B401                            MOV     AH,1			; CLUSNUM update
 27124                                  	; 15/12/2022
 27125 00004803 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 27126                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27127                                  	;;mov	dl,[es:bp+0]
 27128                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 27129 00004807 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 27130 0000480B 89DD                            MOV     BP,BX 			; CLUSNUM
 27131 0000480D E86DDE                  	call	FastOpen_Update
 27132 00004810 5D                              POP     BP
 27133 00004811 58                              POP     AX
 27134                                  	; 24/09/2023
 27135                                          ;POP	CX
 27136                                  
 27137                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 27138                                  NOTFIRSTGROW:
 27139 00004812 89DA                            MOV     DX,BX
 27140 00004814 30DB                            XOR     BL,BL
 27141 00004816 E8C804                  	call	FIGREC
 27142                                  GOTDIRREC:
 27143                                  	;mov	cl,[es:bp+4]
 27144 00004819 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 27145 0000481D FEC1                            INC     CL
 27146 0000481F 30ED                            XOR     CH,CH
 27147                                  ZERODIR:
 27148 00004821 51                              PUSH    CX
 27149                                  	; 22/09/2023
 27150                                  	;;mov	byte [ALLOWED],18h
 27151                                          ;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 27152 00004822 B0FF                            MOV     AL,0FFH
 27153                                          ;call	GETBUFFR
 27154 00004824 E80310                          call	GETBUFFRD ; *
 27155 00004827 7302                    	JNC	short GET_SSIZE
 27156 00004829 59                              POP     CX
 27157 0000482A C3                              retn
 27158                                  
 27159                                  GET_SSIZE:
 27160                                  	;mov	cx,[es:bp+2]
 27161 0000482B 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 27162 0000482F 06                              PUSH    ES
 27163 00004830 C43E[E205]                      LES     DI,[CURBUF]
 27164                                  	;or	byte [es:di+5],4
 27165 00004834 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 27166 00004839 57                              PUSH    DI
 27167                                  	;;add	di,16	; MSDOS 3.3
 27168                                  	;add	di,20	; MSDOS 6.0	
 27169 0000483A 83C714                          ADD     DI,BUFINSIZ
 27170 0000483D 31C0                            XOR     AX,AX
 27171 0000483F D1E9                            SHR     CX,1
 27172 00004841 F3AB                            REP     STOSW
 27173 00004843 7301                            JNC	short EVENZ
 27174 00004845 AA                              STOSB
 27175                                  EVENZ:
 27176 00004846 5F                              POP     DI
 27177                                  
 27178                                  	; MSDOS 6.0
 27179 00004847 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27180                                  					;LB. if already dirty		  ;AN000;
 27181 0000484C 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 27182 0000484E E8DD11                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 27183                                          
 27184                                  	;or	byte [es:di+5],40h
 27185 00004851 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27186                                  yesdirty7:
 27187 00004856 07                              POP	ES
 27188 00004857 59                              POP	CX
 27189                                  
 27190                                  	; 19/05/2019 - Retro DOS v4.0
 27191                                  
 27192                                  	; MSDOS 3.3
 27193                                  	;INC	DX
 27194                                  
 27195                                  	; MSDOS 6.0
 27196                                  	; 24/09/2023
 27197                                  	;add	dx,1
 27198                                  	;;adc	word [HIGH_SECTOR],0
 27199                                  	;; 24/09/2023
 27200                                  	;; ax=0
 27201                                  	;adc	[HIGH_SECTOR],ax ; 0
 27202                                  	; 24/09/2023
 27203 00004858 42                      	inc	dx
 27204 00004859 7504                    	jnz	short loop_zerodir
 27205 0000485B FF06[0706]              	inc	word [HIGH_SECTOR]
 27206                                  loop_zerodir:
 27207 0000485F E2C0                            LOOP    ZERODIR
 27208                                  
 27209 00004861 A1[4803]                        MOV     AX,[LASTENT]
 27210 00004864 40                              INC     AX
 27211                                  	; 24/09/2023
 27212                                  	; cf=0
 27213                                  	;CLC
 27214 00004865 C3                              retn
 27215                                  
 27216                                  ;--------------------------------------------------------------------------
 27217                                  ;
 27218                                  ; Procedure Name : SETDOTENT
 27219                                  ;
 27220                                  ; set up a . or .. directory entry for a directory.
 27221                                  ;
 27222                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 27223                                  ;               AX contains ". " or ".."
 27224                                  ;               DX contains first cluster of entry
 27225                                  ;
 27226                                  ;----------------------------------------------------------------------------
 27227                                  
 27228                                  SETDOTENT:
 27229                                  ;	Fill in name field
 27230 00004866 AB                      	STOSW
 27231 00004867 B90400                  	MOV	CX,4
 27232 0000486A B82020                  	MOV	AX,"  " ; 2020h
 27233 0000486D F3AB                    	REP	STOSW
 27234 0000486F AA                      	STOSB
 27235                                  
 27236                                  ;	Set up attribute
 27237                                  	;mov	al, 10h
 27238 00004870 B010                    	MOV	AL,attr_directory
 27239 00004872 AA                      	STOSB
 27240                                  
 27241                                  ;	Initialize time and date of creation
 27242 00004873 83C70A                  	ADD	DI,10
 27243 00004876 8B36[9E05]              	MOV	SI,[THISSFT]
 27244                                  	;mov	ax,[si+0Dh]
 27245 0000487A 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 27246 0000487D AB                      	STOSW
 27247                                  	;mov	ax,[si+0Fh]
 27248 0000487E 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 27249 00004881 AB                      	STOSW
 27250                                  
 27251                                  ;	Set up first cluster field
 27252 00004882 89D0                    	MOV	AX,DX
 27253 00004884 AB                      	STOSW
 27254                                  
 27255                                  ;	0 file size
 27256                                  	;XOR	AX,AX
 27257 00004885 91                      	xchg	ax,cx ; 23/02/2024
 27258 00004886 AB                      	STOSW
 27259 00004887 AB                      	STOSW
 27260 00004888 C3                      	retn
 27261                                  
 27262                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 27263                                  ;---------------------------------------------------------------------------
 27264                                  ;
 27265                                  ; Procedure Name : MakeNode
 27266                                  ;
 27267                                  ; Inputs:
 27268                                  ;       AL - attribute to create
 27269                                  ;       AH = 0 if it is ok to truncate a file already by this name
 27270                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 27271                                  ;               (AH ignored on dirs and devices)
 27272                                  ;
 27273                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 27274                                  ;               a name already existant is ALWAYS an error in these cases.
 27275                                  ;
 27276                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 27277                                  ;               terminated)
 27278                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 27279                                  ;               ( = -1 if current dir not involved, else
 27280                                  ;                Points to first char after last "/" of current dir part)
 27281                                  ;       [THISCDS] Points to CDS being used
 27282                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 27283                                  ; Function:
 27284                                  ;       Make a new node
 27285                                  ; Outputs:
 27286                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 27287                                  ;       CARRY SET IF ERROR
 27288                                  ;          AX = 1 A node by this name exists and is a directory
 27289                                  ;          AX = 2 A new node could not be created
 27290                                  ;          AX = 3 A node by this name exists and is a disk file
 27291                                  ;               (AH was NZ on input)
 27292                                  ;          AX = 4 Bad Path
 27293                                  ;               SI return from GetPath maintained
 27294                                  ;          AX = 5 Attribute mismatch
 27295                                  ;          AX = 6 Sharing Violation
 27296                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 27297                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 27298                                  ;       ELSE
 27299                                  ;          AX = 0 Disk Node
 27300                                  ;          AX = 3 Device Node (error in some cases)
 27301                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 27302                                  ;               containing new node.
 27303                                  ;          [CURBUF+2]:BX Points to entry
 27304                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 27305                                  ;          [THISSFT] is filled in
 27306                                  ;               sf_mode = unchanged.
 27307                                  ;          Attribute byte in entry is input AL
 27308                                  ; DS preserved, others destroyed
 27309                                  ;
 27310                                  ;-------------------------------------------------------------------------
 27311                                  
 27312                                  ; 19/05/2019 - Retro DOS v4.0
 27313                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 27314                                  
 27315                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27316                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 27317                                  
 27318                                  ; 23/02/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 27319                                  ; DOSCODE:8925h (MSDOS 6.22, MSDOS.SYS)
 27320                                  ; DOSCODE:951Ah (PCDOS 7.1, IBMDOS.COM)
 27321                                  
 27322                                  MakeNode:
 27323                                  	;mov	word [CREATING],0E5FFh
 27324 00004889 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 27325 0000488F 50                      	PUSH	AX 		; Save AH value
 27326 00004890 C606[4C03]00            	MOV	byte [NoSetDir],0
 27327 00004895 A2[6D05]                	MOV	[SATTRIB],AL
 27328 00004898 E89CF5                  	call	GetPathNoSet
 27329 0000489B 88CA                    	MOV	DL,CL		; Save CL info
 27330                                  	;MOV	CX,AX		; Device ID to CH
 27331                                  	; 23/02/2024
 27332 0000489D 91                      	xchg	ax,cx
 27333 0000489E 58                      	POP	AX		; Get back AH
 27334 0000489F 732D                    	JNC	short make_exists ; File existed
 27335 000048A1 7505                    	JNZ	short make_err_4 ; Path bad
 27336 000048A3 80FA80                  	CMP	DL,80h		; Check "CL" return from GETPATH
 27337 000048A6 7405                    	JZ	short make_type	; Name simply not found, and no metas
 27338                                  make_err_4:
 27339 000048A8 B004                    	MOV	AL,4		; case 1 bad path
 27340                                  make_err_ret:
 27341                                  	;XOR	AH,AH
 27342                                  	; 23/02/2024
 27343 000048AA 98                      	cbw
 27344 000048AB F9                      	STC
 27345                                  ;make_retn:	; 22/11/2022
 27346 000048AC C3                      	retn
 27347                                  
 27348                                  	;entry	RENAME_MAKE	; Used by DOS_RENAME to "copy" a node
 27349                                  RENAME_MAKE:
 27350                                  make_type:
 27351                                  ;Extended Open hooks
 27352                                  	; MSDOS 6.0
 27353                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 27354 000048AD F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 27355 000048B2 7411                    	JZ	short make_type2	;FT. no				;AN000;
 27356 000048B4 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 27357                                  					;FT. set for extended open ;AN000;
 27358                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 27359 000048B9 F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 27360 000048BE 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 27361 000048C0 F9                      	STC				;FT. set carry			;AN000;
 27362 000048C1 B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 27363                                  	; 22/11/2022
 27364                                  make_retn:
 27365                                  	;return
 27366 000048C4 C3                      	retn				;FT.				;AN000;
 27367                                  
 27368                                  ;	Extended Open hooks
 27369                                  
 27370                                  make_type2:
 27371 000048C5 C43E[9E05]              	LES	DI,[THISSFT]
 27372 000048C9 31C0                    	XOR	AX,AX		; nothing exists Disk Node
 27373 000048CB F9                      	STC			; Not found
 27374 000048CC EB59                    	JMP	short make_new
 27375                                  
 27376                                  ; The node exists. It may be either a device, directory or file:
 27377                                  ;   Zero set => directory
 27378                                  ;   High bit of CH on => device
 27379                                  ;   else => file
 27380                                  
 27381                                  make_exists:
 27382 000048CE 7447                    	JZ	short make_exists_dir
 27383 000048D0 B003                    	MOV	AL,3		; file exists type 3  (error or device node)
 27384                                  	;test	byte [ATTRIB],18h
 27385 000048D2 F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 27386 000048D7 753A                    	JNZ	short make_err_ret_5
 27387                                  				; Cannot already exist as Disk or Device Node
 27388                                  				;  if making DIR or Volume ID
 27389 000048D9 08ED                    	OR	CH,CH
 27390 000048DB 781A                    	JS	short make_share ; No further checks on attributes if device
 27391 000048DD 08E4                    	OR	AH,AH
 27392 000048DF 75C9                    	JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 27393 000048E1 51                      	PUSH	CX		; Save device ID
 27394 000048E2 8E06[E405]              	MOV	ES,[CURBUF+2]
 27395                                  	;mov	ch,[es:bx+0Bh]
 27396 000048E6 268A6F0B                	MOV	CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 27397                                  	;test	ch,1
 27398 000048EA F6C501                  	test	CH,attr_read_only
 27399 000048ED 7523                    	JNZ	short make_err_ret_5P ; Cannot create on read only files
 27400 000048EF E8D5F7                  	call	MatchAttributes
 27401 000048F2 59                      	POP	CX		; Devid back in CH
 27402 000048F3 751E                    	JNZ	short make_err_ret_5 ; Attributes not ok
 27403 000048F5 30C0                    	XOR	AL,AL		; AL = 0, Disk Node
 27404                                  
 27405                                  make_share:
 27406                                  	;XOR	AH,AH
 27407                                  	; 23/02/2024
 27408 000048F7 98                      	cbw
 27409 000048F8 50                      	PUSH	AX		; Save Disk or Device node
 27410 000048F9 51                      	PUSH	CX		; Save Device ID
 27411 000048FA 88EC                    	MOV	AH,CH		; Device ID to AH
 27412 000048FC E84501                  	CALL	DOOPEN		; Fill in SFT for share check
 27413 000048FF C43E[9E05]              	LES	DI,[THISSFT]
 27414 00004903 56                      	push	si
 27415 00004904 53                      	push	bx		; Save CURBUF pointers
 27416 00004905 E8F228                  	call	ShareEnter
 27417 00004908 735A                    	jnc	short MakeEndShare
 27418                                  
 27419                                  ; User failed request.
 27420 0000490A 5B                      	pop	bx
 27421 0000490B 5E                      	pop	si
 27422 0000490C 59                      	pop	cx
 27423 0000490D 58                      	pop	ax
 27424                                  
 27425                                  Make_Share_ret:
 27426 0000490E B006                    	MOV	AL,6
 27427 00004910 EB98                    	JMP	short make_err_ret
 27428                                  
 27429                                  make_err_ret_5P:
 27430 00004912 59                      	POP	CX		; Get back device ID
 27431                                  make_err_ret_5:
 27432 00004913 B005                    	MOV     AL,5		; Attribute mismatch
 27433                                          ; 22/11/2022
 27434 00004915 EB93                    	JMP	short make_err_ret
 27435                                  
 27436                                  make_exists_dir:
 27437 00004917 B001                    	MOV	AL,1		; exists as directory, always an error
 27438                                  	; 22/11/2022
 27439 00004919 EB8F                    	JMP	short make_err_ret
 27440                                  
 27441                                  make_save:
 27442 0000491B 50                      	PUSH	AX		; Save whether Disk or File
 27443 0000491C 89C8                    	MOV	AX,CX		; Device ID to AH
 27444 0000491E E87400                  	CALL	NEWENTRY
 27445 00004921 58                      	POP	AX		; 0 if Disk, 3 if File
 27446 00004922 73A0                    	jnc	short make_retn
 27447 00004924 B002                    	MOV	AL,2		; create failed case 2
 27448                                  make_save_retn:
 27449 00004926 C3                      	retn
 27450                                  
 27451                                  make_new:
 27452 00004927 E8F1FF                  	call	make_save
 27453 0000492A 72FA                    	jc	short make_save_retn	; case 2 fail
 27454                                  	;test	byte [ATTRIB],10h
 27455 0000492C F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 27456 00004931 75F3                    	jnz	short make_save_retn	; Don't "open" directories,
 27457                                  					; so don't tell the sharer about them
 27458 00004933 50                      	push	ax
 27459 00004934 53                      	push	bx
 27460 00004935 56                      	push	si
 27461 00004936 E8C128                  	call	ShareEnter
 27462 00004939 5E                      	pop	si
 27463 0000493A 5B                      	pop	bx
 27464 0000493B 58                      	pop	ax
 27465 0000493C 73E8                    	jnc	short make_save_retn
 27466                                  
 27467                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 27468                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 27469                                  ; possible: delete the newly created directory entry and return share_error.
 27470                                  
 27471 0000493E 50                      	PUSH	AX
 27472 0000493F C43E[E205]              	LES	DI,[CURBUF]
 27473                                  	;mov	byte [es:bx],0E5h
 27474 00004943 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 27475                                  	
 27476                                  	; MSDOS 6.0
 27477                                  	;test	byte [es:di+5],40h
 27478 00004947 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 27479                                  					;LB. if already dirty		  ;AN000;
 27480 0000494C 7508                    	JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 27481                                  	; 22/11/2022
 27482 0000494E E8DD10                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27483                                  	;or	byte [es:di+5],40h
 27484 00004951 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 27485                                  yesdirty8:
 27486 00004956 C42E[8A05]              	LES	BP,[THISDPB]
 27487                                  	; 15/12/2022
 27488 0000495A 268A4600                	mov	al,[ES:BP]
 27489                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27490                                  	;;mov	al,[es:bp+0]
 27491                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 27492 0000495E E8CB0F                  	call	FLUSHBUF		; write out buffer.
 27493 00004961 58                      	POP	AX
 27494 00004962 EBAA                    	jmp	short Make_Share_ret
 27495                                  
 27496                                  ; We have found an existing file. We have also entered it into the share set.
 27497                                  ; At this point we need to call newentry to correctly address the problem of
 27498                                  ; getting rid of old data (create an existing file) or creating a new
 27499                                  ; directory entry (create a new file). Unfortunately, this operation may
 27500                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 27501                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 27502                                  ; the share set now, do the operation and then reassert the share access.
 27503                                  ;
 27504                                  ; We are allowed to do this! There is no window! After all, we are in
 27505                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 27506                                  
 27507                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27508                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 27509                                  
 27510                                  MakeEndShare:
 27511 00004964 C43E[9E05]              	LES	DI,[THISSFT]		; grab SFT
 27512 00004968 31C0                    	XOR	AX,AX
 27513 0000496A E880C9                  	call	ECritSFT
 27514 0000496D 268705                  	xchg	AX,[ES:DI]
 27515                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 27516 00004970 50                      	push	ax
 27517 00004971 57                      	push	di
 27518 00004972 06                      	push	es
 27519 00004973 9C                      	PUSHF
 27520 00004974 E87E28                  	call	ShareEnd		; remove sharing
 27521 00004977 9D                      	POPF
 27522 00004978 07                      	pop	es
 27523 00004979 5F                      	pop	di
 27524 0000497A 268F05                  	pop	word [ES:DI]
 27525                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 27526 0000497D E888C9                  	call	LCritSFT
 27527                                  	; 22/11/2022
 27528                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 27529 00004980 5B                      	pop	bx
 27530 00004981 5E                      	pop	si
 27531 00004982 59                      	pop	cx
 27532 00004983 58                      	pop	ax
 27533 00004984 E894FF                  	CALL	make_save
 27534                                  
 27535                                  ; If the user failed, we do not reenter into the sharing set.
 27536                                  
 27537 00004987 729D                    	jc	short make_save_retn	; bye if error
 27538 00004989 50                      	push	ax
 27539 0000498A 53                      	push	bx
 27540 0000498B 56                      	push	si
 27541 0000498C 9C                      	PUSHF
 27542 0000498D E86A28                  	call	ShareEnter
 27543 00004990 9D                      	POPF
 27544 00004991 5E                      	pop	si
 27545 00004992 5B                      	pop	bx
 27546 00004993 58                      	pop	ax
 27547                                  
 27548                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 27549                                  
 27550                                  makeendshare_retn:
 27551 00004994 C3                      	retn
 27552                                  
 27553                                  ;---------------------------------------------------------------------------
 27554                                  ;
 27555                                  ; Procedure Name : NEWENTRY
 27556                                  ;
 27557                                  ; Inputs:
 27558                                  ;	  [THISSFT] set
 27559                                  ;	  [THISDPB] set
 27560                                  ;	  [LASTENT] current last valid entry number in directory if no free
 27561                                  ;		  entries
 27562                                  ;	  [VOLID] set if a volume ID was found during search
 27563                                  ;	Attrib Contains attributes for new file
 27564                                  ;	  [DIRSTART] Points to first cluster of dir (0 means root)
 27565                                  ;	  CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 27566                                  ;		  NC means file existed (device)
 27567                                  ;		  C  means file did not exist
 27568                                  ;	  AH = Device ID byte
 27569                                  ;	  If FILE
 27570                                  ;	  [CURBUF+2]:BX points to start of directory entry
 27571                                  ;	  [CURBUF+2]:SI points to dir_first of directory entry
 27572                                  ;	  If device
 27573                                  ;	  DS:BX points to start of "fake" directory entry
 27574                                  ;	  DS:SI points to dir_first of "fake" directory entry
 27575                                  ;		  (has DWORD pointer to device header)
 27576                                  ; Function:
 27577                                  ;	  Make a new directory entry
 27578                                  ;	  If an old one existed it is truncated first
 27579                                  ; Outputs:
 27580                                  ;	  Carry set if error
 27581                                  ;		  Can't grow dir, atts didn't match, attempt to make 2nd
 27582                                  ;		  vol ID, user FAILed to I 24
 27583                                  ;	  else
 27584                                  ;		  outputs of DOOPEN
 27585                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 27586                                  ;
 27587                                  ;----------------------------------------------------------------------------
 27588                                  
 27589                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27590                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 27591                                  
 27592                                  NEWENTRY:
 27593 00004995 C42E[8A05]              	LES	BP,[THISDPB]
 27594 00004999 7315                    	JNC	short EXISTENT
 27595 0000499B 803E[4A03]00            	CMP	byte [FAILERR],0
 27596                                  	;STC
 27597                                  	;jnz	short makeendshare_retn	; User FAILed, node might exist
 27598                                  	; 24/09/2023
 27599 000049A0 750C                    	jnz	short ERRRET3
 27600 000049A2 E810FE                  	CALL	BUILDDIR	; Try to build dir
 27601 000049A5 72ED                    	jc	short makeendshare_retn	; Failed
 27602 000049A7 E8FDF3                  	call	GETENT		; Point at that free entry
 27603 000049AA 72E8                    	jc	short makeendshare_retn	; Failed
 27604 000049AC EB0E                    	JMP	SHORT FREESPOT
 27605                                  
 27606                                  ERRRET3:
 27607 000049AE F9                      	STC
 27608                                  newentry_retn:
 27609 000049AF C3                      	retn
 27610                                  
 27611                                  EXISTENT:
 27612 000049B0 08E4                    	OR	AH,AH		; Check if file is I/O device
 27613 000049B2 7903                    	JNS	short NOT_DEV1
 27614 000049B4 E98D00                  	JMP	DOOPEN		; If so, proceed with open
 27615                                  
 27616                                  NOT_DEV1:
 27617 000049B7 E82801                  	call	FREEENT	; Free cluster chain
 27618 000049BA 72F3                    	jc	short newentry_retn ; Failed
 27619                                  FREESPOT:
 27620                                  	;test	byte [ATTRIB],8
 27621 000049BC F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 27622 000049C1 7407                    	JZ	short NOTVOLID
 27623 000049C3 803E[7B05]00            	CMP	BYTE [VOLID],0
 27624 000049C8 75E4                    	JNZ	short ERRRET3	; Can't create a second volume ID
 27625                                  NOTVOLID:
 27626 000049CA 8E06[E405]              	MOV	ES,[CURBUF+2]
 27627 000049CE 89DF                    	MOV	DI,BX
 27628                                  
 27629 000049D0 BE[4B05]                	MOV	SI,NAME1
 27630                                  
 27631 000049D3 B90500                  	MOV	CX,5
 27632 000049D6 F3A5                    	REP	MOVSW
 27633 000049D8 A4                      	MOVSB			; Move name into dir entry
 27634 000049D9 A0[6B05]                	MOV	AL,[ATTRIB]
 27635 000049DC AA                      	STOSB			; Attributes
 27636                                  
 27637                                  ;; File Tagging for Create DOS 4.00
 27638 000049DD B105                    	MOV	CL,5		;FT. assume normal FBUGBUG	;AN000;
 27639                                  ;; File Tagging for Create DOS 4.00
 27640                                  
 27641 000049DF 31C0                    	XOR	AX,AX
 27642 000049E1 F3AB                    	REP	STOSW		; Zero pad
 27643 000049E3 E8FAC0                  	call	DATE16
 27644 000049E6 92                      	XCHG	AX,DX
 27645 000049E7 AB                      	STOSW			; dir_time
 27646 000049E8 92                      	XCHG	AX,DX
 27647 000049E9 AB                      	STOSW			; dir_date
 27648 000049EA 31C0                    	XOR	AX,AX
 27649 000049EC 57                      	PUSH	DI		; Correct SI input value
 27650                                  				; (recomputed for new buffer)
 27651 000049ED AB                      	STOSW			; Zero dir_first and size
 27652 000049EE AB                      	STOSW
 27653 000049EF AB                      	STOSW
 27654                                  updnxt:
 27655 000049F0 8B36[E205]              	MOV	SI,[CURBUF]
 27656                                  
 27657                                  	; 19/05/2019 - Retro DOS v4.0
 27658                                  
 27659                                  	; MSDOS 6.0
 27660 000049F4 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27661                                  				;LB. if already dirty		  ;AN000;
 27662 000049F9 7508                    	JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 27663 000049FB E83010                  	call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 27664                                  	
 27665                                  	;or	byte [es:si+5],40h
 27666 000049FE 26804C0540              	OR	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27667                                  yesdirty9:
 27668 00004A03 C42E[8A05]              	LES	BP,[THISDPB]
 27669                                  	; 15/12/2022
 27670 00004A07 268A4600                	MOV	AL,[ES:BP]
 27671                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27672                                  	;;mov	al,[es:bp+0]
 27673                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 27674 00004A0B 50                      	PUSH	AX
 27675 00004A0C 53                      	PUSH	BX
 27676                                  
 27677                                  ; If we have a file, we need to increment the open ref. count so that
 27678                                  ; we have some protection against invalid media changes if an Int 24
 27679                                  ; error occurs.
 27680                                  ; Do nothing for a device.
 27681                                  
 27682 00004A0D 06                      	push	es
 27683 00004A0E 57                      	push	di
 27684 00004A0F C43E[9E05]              	LES	DI,[THISSFT]
 27685                                  	;test	word [es:di+5],80h
 27686                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 27687 00004A13 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 27688 00004A18 751A                    	jnz	short GotADevice
 27689 00004A1A 1E                      	push	ds
 27690 00004A1B 53                      	push	bx
 27691 00004A1C C51E[8A05]              	LDS	BX,[THISDPB]
 27692                                  	;mov	[es:di+7],bx
 27693 00004A20 26895D07                	MOV	[ES:DI+SF_ENTRY.sf_devptr],BX
 27694 00004A24 8CDB                    	MOV	BX,DS
 27695                                  	;mov	[es:di+9],bx
 27696 00004A26 26895D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],BX
 27697 00004A2A 5B                      	pop	bx
 27698 00004A2B 1F                      	pop	ds ; need to use DS for segment later on
 27699                                  
 27700 00004A2C E8B4FA                  	call	DEV_OPEN_SFT	; increment ref. count
 27701 00004A2F C606[A20A]01            	mov	byte [VIRTUAL_OPEN],1; set flag
 27702                                  
 27703                                  GotADevice:
 27704 00004A34 5F                      	pop	di
 27705 00004A35 07                      	pop	es
 27706                                  
 27707 00004A36 E8F30E                  	call	FLUSHBUF
 27708                                  
 27709 00004A39 E8EC00                  	Call	CHECK_VIRT_OPEN	; decrement ref. count	;AN000;
 27710                                  
 27711 00004A3C 5B                      	POP	BX
 27712 00004A3D 58                      	POP	AX
 27713 00004A3E 5E                      	POP	SI		; Get SI input back
 27714 00004A3F 88C4                    	MOV	AH,AL		; Get I/O driver number back
 27715 00004A41 7301                    	jnc	short DOOPEN	
 27716 00004A43 C3                      	retn			; Failed
 27717                                  	
 27718                                  ;NOTE FALL THROUGH
 27719                                  
 27720                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 27721                                  
 27722                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27723                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 27724                                  
 27725                                  ; DOOPEN
 27726                                  ;----------------------------------------------------------------------------
 27727                                  ;
 27728                                  ; Inputs:
 27729                                  ;	  [THISDPB] points to DPB if file
 27730                                  ;	  [THISSFT] points to SFT being used
 27731                                  ;	  AH = Device ID byte
 27732                                  ;	  If FILE
 27733                                  ;	  [CURBUF+2]:BX points to start of directory entry
 27734                                  ;	  [CURBUF+2]:SI points to dir_first of directory entry
 27735                                  ;	  If device
 27736                                  ;	  DS:BX points to start of "fake" directory entry
 27737                                  ;	  DS:SI points to dir_first of "fake" directory entry
 27738                                  ;		  (has DWORD pointer to device header)
 27739                                  ; Function:
 27740                                  ;	  Fill in SFT from dir entry
 27741                                  ; Outputs:
 27742                                  ;	  CARRY CLEAR
 27743                                  ;	  sf_ref_count and sf_mode fields not altered
 27744                                  ;	  sf_flags high byte = 0
 27745                                  ;	  sf_flags low byte = AH except
 27746                                  ;	  sf_flags Bit 6 set (not dirty or not EOF)
 27747                                  ;	  sf_attr sf_date sf_time sf_name set from entry
 27748                                  ;	  sf_position = 0
 27749                                  ;	  If device
 27750                                  ;	  sf_devptr = dword at dir_first (pointer to device header)
 27751                                  ;	  sf_size = 0
 27752                                  ;	  If file
 27753                                  ;	  sf_firclus sf_size set from entry
 27754                                  ;	  sf_devptr = [THISDPB]
 27755                                  ;	  sf_cluspos = 0
 27756                                  ;	  sf_lstclus = sf_firclus
 27757                                  ;	  sf_dirsec sf_dirpos set
 27758                                  ; DS,SI,BX preserved, others destroyed
 27759                                  ;
 27760                                  ;----------------------------------------------------------------------------
 27761                                  
 27762                                  	;entry	DOOPEN
 27763                                  DOOPEN:
 27764                                  ;	Generate and store attribute
 27765                                  
 27766 00004A44 88E6                    	MOV	DH,AH	  	; AH to different place
 27767 00004A46 C43E[9E05]              	LES	DI,[THISSFT]
 27768                                  	;add	di,4
 27769 00004A4A 83C704                  	ADD	DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 27770                                  	; 24/09/2023
 27771 00004A4D 31C0                    	xor	ax,ax
 27772                                  	;XOR	AL,AL		; Assume it's a device, devices have an
 27773                                  				;  attribute of 0 (for R/O testing etc).
 27774 00004A4F 08F6                    	OR	DH,DH		; See if our assumption good.
 27775 00004A51 7807                    	JS	short DEV_SFT1	; If device DS=DOSGROUP
 27776 00004A53 8E1E[E405]              	MOV	DS,[CURBUF+2]
 27777                                  	;mov	al,[BX+0Bh]
 27778 00004A57 8A470B                  	MOV	AL,[BX+dir_entry.dir_attr]
 27779                                  				; If file, get attrib from dir entry
 27780                                  DEV_SFT1:
 27781 00004A5A AA                      	STOSB			; sf_attr, ES:DI -> sf_flags
 27782                                  
 27783                                  ;	Generate and store flags word
 27784                                  
 27785                                  	; 24/09/2023
 27786                                  	;XOR	AX,AX
 27787                                  	; ah=0
 27788 00004A5B 88F0                    	MOV	AL,DH
 27789                                  	;or	al,40h
 27790 00004A5D 0C40                    	OR	AL,devid_file_clean
 27791 00004A5F AB                      	STOSW			; sf_flags, ES:DI -> sf_devptr
 27792                                  
 27793                                  ;	Generate and store device pointer
 27794                                  
 27795 00004A60 1E                      	PUSH	DS
 27796                                  	;lds	ax,[bx+1Ah]
 27797 00004A61 C5471A                  	LDS	AX,[BX+dir_entry.dir_first] ; Assume device
 27798 00004A64 08F6                    	OR	DH,DH
 27799 00004A66 7805                    	JS	short DEV_SFT2
 27800                                  
 27801                                  ;hkn; SS override
 27802 00004A68 36C506[8A05]            	LDS	AX,[SS:THISDPB]	; Was file
 27803                                  DEV_SFT2:
 27804 00004A6D AB                      	STOSW			; store offset
 27805 00004A6E 8CD8                    	MOV	AX,DS
 27806 00004A70 1F                      	POP	DS
 27807 00004A71 AB                      	STOSW			; store segment
 27808                                  				; ES:DI -> sf_firclus
 27809                                  
 27810                                  ;	Generate pointer to, generate and store first cluster
 27811                                  ;	(irrelevant for devices)
 27812                                  
 27813 00004A72 56                      	PUSH	SI		; Save pointer to dir_first
 27814 00004A73 A5                      	MOVSW			; dir_first -> sf_firclus
 27815                                  				; DS:SI -> dir_size_l, ES:DI -> sf_time
 27816                                  
 27817                                  ;	Copy time/date of last modification
 27818                                  
 27819                                  	;sub	si,6
 27820 00004A74 83EE06                  	SUB	SI,dir_entry.dir_size_l - dir_entry.dir_time 
 27821                                  				; DS:SI->dir_time
 27822 00004A77 A5                      	MOVSW			; dir_time -> sf_time
 27823                                  				; DS:SI -> dir_date, ES:DI -> sf_date
 27824 00004A78 A5                      	MOVSW			; dir_date -> sf_date
 27825                                  				; DS:SI -> dir_first, ES:DI -> sf_size
 27826                                  
 27827                                  ;	Generate and store file size (0 for devices)
 27828                                  
 27829 00004A79 AD                      	LODSW			; skip dir_first, DS:SI -> dir_size_l
 27830 00004A7A AD                      	LODSW			; dir_size_l in AX, DS:SI -> dir_size_h
 27831                                  	;MOV	CX,AX		; dir_size_l in CX
 27832                                  	; 23/02/2024
 27833 00004A7B 91                      	xchg	ax,cx
 27834 00004A7C AD                      	LODSW			; dir_size_h (size AX:CX), DS:SI -> ????
 27835 00004A7D 08F6                    	OR	DH,DH
 27836 00004A7F 7904                    	JNS	short FILE_SFT1
 27837 00004A81 31C0                    	XOR	AX,AX
 27838 00004A83 89C1                    	MOV	CX,AX		; Devices are open ended
 27839                                  FILE_SFT1:
 27840 00004A85 91                      	XCHG	AX,CX
 27841 00004A86 AB                      	STOSW			; Low word of sf_size
 27842 00004A87 91                      	XCHG	AX,CX
 27843 00004A88 AB                      	STOSW			; High word of sf_size
 27844                                  				; ES:DI -> sf_position
 27845                                  ; Initialize position to 0
 27846                                  
 27847 00004A89 31C0                    	XOR	AX,AX
 27848 00004A8B AB                      	STOSW
 27849 00004A8C AB                      	STOSW			; sf_position
 27850                                  				; ES:DI -> sf_cluspos
 27851                                  
 27852                                  ; Generate cluster optimizations for files
 27853                                  
 27854 00004A8D 08F6                    	OR	DH,DH
 27855 00004A8F 7843                    	JS	short DEV_SFT3
 27856 00004A91 AB                      	STOSW			; sf_cluspos ; 19h
 27857                                  	;mov	ax,[bx+1Ah]
 27858 00004A92 8B471A                  	MOV	AX,[BX+dir_entry.dir_first]
 27859                                  	; 19/05/2019
 27860                                  	; MSDOS 3.3
 27861                                  	;STOSW			; sf_lstclus ; 1Bh
 27862                                  	; MSDOS 6.0
 27863 00004A95 57                      	PUSH	DI		;AN004; save dirsec offset
 27864                                  	;sub	di,1Bh
 27865 00004A96 83EF1B                  	SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 27866                                  	;mov	[es:di+35h],ax
 27867 00004A99 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 27868 00004A9D 5F                      	POP	DI		;AN004; restore dirsec offset
 27869                                  
 27870                                  ; DOS 3.3  FastOpen  6/13/86
 27871                                  
 27872 00004A9E 1E                      	PUSH	DS
 27873                                  
 27874                                  ;hkn; SS is DOSDATA
 27875 00004A9F 16                      	push	ss
 27876 00004AA0 1F                      	pop	ds
 27877                                  	;test	byte [FastOpenFlg],4
 27878 00004AA1 F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 27879 00004AA6 7411                    	JZ	short Not_FastOpen
 27880                                  
 27881                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 27882 00004AA8 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 27883                                  
 27884                                  	;mov	ax,[si+1]
 27885 00004AAB 8B4401                  	MOV	AX,[SI+FEI.dirsec]
 27886 00004AAE AB                      	STOSW		  	; sf_dirsec
 27887                                  	; MSDOS 6.0
 27888                                  	;mov	ax,[si+3]
 27889 00004AAF 8B4403                  	MOV	AX,[SI+FEI.dirsec+2]
 27890                                  		;;; changed for >32mb
 27891 00004AB2 AB                      	STOSW		  	; sf_dirsec
 27892                                  	; 19/08//2018
 27893 00004AB3 8A04                    	mov	al,[SI]
 27894                                  	;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 27895 00004AB5 AA                      	STOSB		  	; sf_dirpos
 27896 00004AB6 1F                      	POP	DS
 27897                                  	;JMP	short Next_Name
 27898                                  	; 24/09/2023
 27899 00004AB7 EB1E                    	jmp	short FILE_SFT2	; cf=0 (after 'test' instruction)
 27900                                  
 27901                                  ; DOS 3.3  FastOpen  6/13/86
 27902                                  
 27903                                  Not_FastOpen:
 27904                                  	;POP	DS		; normal path
 27905                                  
 27906                                  ;hkn; SS override
 27907                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 27908                                  	; 16/12/2022
 27909                                  	; 28/07/2019
 27910 00004AB9 8B36[E205]              	mov	si,[CURBUF]
 27911 00004ABD 1F                      	pop	ds
 27912                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27913                                  	;pop	ds
 27914                                  	;mov	si,[ss:CURBUF]
 27915                                  	
 27916                                  	;mov	ax,[si+6]
 27917 00004ABE 8B4406                  	MOV	AX,[SI+BUFFINFO.buf_sector]	;F.C. >32mb ;AN000;
 27918 00004AC1 AB                      	STOSW		  	; sf_dirsec	;F.C. >32mb ;AN000;
 27919                                  	; 19/05/2019	
 27920                                  	; MSDOS 6.0
 27921                                  	;mov	ax,[si+8]
 27922 00004AC2 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 27923 00004AC5 AB                      	STOSW		  	; sf_dirsec	;F.C. >32mb ;AN000;
 27924                                  	
 27925 00004AC6 89D8                    	MOV	AX,BX
 27926                                  	;;add	si,16	; MSDOS 3.3
 27927                                  	;add	si,20	; MSDOS 6.0
 27928 00004AC8 83C614                  	ADD	SI,BUFINSIZ	; DS:SI-> start of data in buffer
 27929 00004ACB 29F0                    	SUB	AX,SI		; AX = BX relative to start of sector
 27930                                  	;mov	cl,32
 27931 00004ACD B120                    	MOV	CL,dir_entry.size
 27932 00004ACF F6F1                    	DIV	CL
 27933 00004AD1 AA                      	STOSB		  	; sf_dirpos
 27934                                  Next_Name:
 27935 00004AD2 EB03                    	JMP	SHORT FILE_SFT2
 27936                                  
 27937                                  	; 24/09/2023
 27938                                  	; cf=0 (after 'or' instruction)
 27939                                  DEV_SFT3:
 27940                                  	;add	di,7
 27941 00004AD4 83C707                  	ADD	DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 27942                                  FILE_SFT2:
 27943                                  
 27944                                  ; Copy in the object's name
 27945                                  
 27946 00004AD7 89DE                    	MOV	SI,BX		; DS:SI points to dir_name
 27947 00004AD9 B90B00                  	MOV	CX,11
 27948 00004ADC F3A4                    	REP	MOVSB		; sf_name
 27949 00004ADE 5E                      	POP	SI		; recover DS:SI -> dir_first
 27950                                  
 27951                                  ;hkn; SS is DOSDATA
 27952 00004ADF 16                      	push	ss
 27953 00004AE0 1F                      	pop	ds
 27954                                  	; 24/09/2023
 27955                                  	; cf=0
 27956                                  	;CLC
 27957 00004AE1 C3                      	retn
 27958                                  
 27959                                  ;---------------------------------------------------------------------------
 27960                                  ;
 27961                                  ; Procedure Name : FREEENT
 27962                                  ;
 27963                                  ; Inputs:
 27964                                  ;	  ES:BP -> DPB
 27965                                  ;	  [CURBUF] Set
 27966                                  ;	  [CURBUF+2]:BX points to directory entry
 27967                                  ;	  [CURBUF+2]:SI points to above dir_first
 27968                                  ; Function:
 27969                                  ;	  Free the cluster chain for the entry if present
 27970                                  ; Outputs:
 27971                                  ;	  Carry set if error (currently user FAILed to I 24)
 27972                                  ;	  (NOTE dir_firclus and dir_size_l/h are wrong)
 27973                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 27974                                  ;---------------------------------------------------------------------------
 27975                                  
 27976                                  	; 24/02/2024 - Retro DOS v4.2
 27977                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27978                                  FREEENT:
 27979 00004AE2 1E                      	PUSH	DS
 27980 00004AE3 C53E[E205]              	LDS	DI,[CURBUF]
 27981 00004AE7 8B0C                    	MOV	CX,[SI]		; Get pointer to clusters
 27982                                  	; 19/05/2019 - Retro DOS v4.0
 27983                                  	; MSDOS 6.0
 27984 00004AE9 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb  ;AN000;
 27985                                  ;hkn; SS override
 27986 00004AEC 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	      ;F.C. >32mb  ;AN000;
 27987 00004AF1 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]
 27988 00004AF4 1F                      	POP	DS
 27989 00004AF5 83F902                  	CMP	CX,2
 27990 00004AF8 722C                    	JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 27991                                  	;cmp	cx,[es:bp+0Dh]
 27992 00004AFA 263B4E0D                	CMP	CX,[ES:BP+DPB.MAX_CLUSTER]
 27993                                  	;JA	short RET1	; Treat like zero length file (firclus mucked)
 27994 00004AFE 7715                    	ja	short freeent_retn ; 24/02/2024
 27995 00004B00 29FB                    	SUB	BX,DI
 27996 00004B02 53                      	PUSH	BX		; Save offset
 27997 00004B03 FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27998 00004B07 52                      	PUSH	DX		; Save sector number
 27999 00004B08 89CB                    	MOV	BX,CX
 28000 00004B0A E8A402                  	call	RELEASE		; Free any data allocated
 28001 00004B0D 5A                      	POP	DX
 28002 00004B0E 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 28003 00004B12 7302                    	JNC	short GET_BUF_BACK
 28004 00004B14 5B                      	POP	BX
 28005                                  freeent_retn:
 28006 00004B15 C3                      	retn			; Screw up
 28007                                  
 28008                                  GET_BUF_BACK:
 28009                                  	; 22/09/2023
 28010                                  	;;mov	byte [ALLOWED],18h
 28011                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 28012                                  	;XOR	AL,AL ; *
 28013                                  	;call	GETBUFFR	; Get sector back
 28014 00004B16 E80F0D                  	call	GETBUFFER ; *	; pre read
 28015                                  
 28016 00004B19 5B                      	POP	BX		; Get offset back
 28017 00004B1A 72F9                    	jc	short freeent_retn
 28018 00004B1C E8EEEA                  	call	SET_BUF_AS_DIR
 28019 00004B1F 031E[E205]              	ADD	BX,[CURBUF]	; Correct it for new buffer
 28020                                  
 28021                                  	;MOV	SI,BX
 28022                                  	;;add	si,1Ah
 28023                                  	;ADD	SI,dir_entry.dir_first	; Get corrected SI
 28024                                  	; 24/02/2024
 28025                                  	;lea	si,[bx+1Ah]
 28026 00004B23 8D771A                  	lea	si,[bx+dir_entry.dir_first]
 28027                                  RET1:
 28028 00004B26 F8                      	CLC
 28029 00004B27 C3                      	retn
 28030                                  
 28031                                  ;---------------------------------------------------------------------------
 28032                                  ;
 28033                                  ; Procedure Name : CHECK_VIRT_OPEN
 28034                                  ;
 28035                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 28036                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 28037                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 28038                                  ; flag [VIRTUAL_OPEN].
 28039                                  ; No registers affected (including flags).
 28040                                  ; On input, [THISSFT] points to current SFT.
 28041                                  ;
 28042                                  ;---------------------------------------------------------------------------
 28043                                  
 28044                                  CHECK_VIRT_OPEN:
 28045 00004B28 50                      	PUSH	AX
 28046 00004B29 9F                      	lahf			; preserve flags
 28047 00004B2A 803E[A20A]00            	CMP	byte [VIRTUAL_OPEN],0
 28048 00004B2F 7410                    	JZ	short ALL_CLOSED
 28049 00004B31 C606[A20A]00            	mov	byte [VIRTUAL_OPEN],0 ; reset flag
 28050 00004B36 06                      	push	es
 28051 00004B37 57                      	push	di
 28052 00004B38 C43E[9E05]              	LES	DI,[THISSFT]
 28053 00004B3C E8ACF9                  	call	DEV_CLOSE_SFT
 28054 00004B3F 5F                      	pop	di
 28055 00004B40 07                      	pop	es
 28056                                  
 28057                                  ALL_CLOSED:
 28058 00004B41 9E                      	sahf			; restore flags
 28059 00004B42 58                      	POP	AX
 28060 00004B43 C3                      	retn
 28061                                  
 28062                                  ;============================================================================
 28063                                  ; ROM.ASM, MSDOS 6.0, 1991
 28064                                  ;============================================================================
 28065                                  ; 29/07/2018 - Retro DOS v3.0
 28066                                  ; 20/05/2019 - Retro DOS v4.0
 28067                                  
 28068                                  ;	TITLE	ROM - Miscellaneous routines
 28069                                  ;	NAME	ROM
 28070                                  
 28071                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 28072                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 28073                                  ;
 28074                                  ;	SKPCLP
 28075                                  ;	FNDCLUS
 28076                                  ;	BUFSEC
 28077                                  ;	BUFRD
 28078                                  ;	BUFWRT
 28079                                  ;	NEXTSEC
 28080                                  ;	OPTIMIZE
 28081                                  ;	FIGREC
 28082                                  ;	ALLOCATE
 28083                                  ;	RESTFATBYT
 28084                                  ;	RELEASE
 28085                                  ;	RELBLKS
 28086                                  ;	GETEOF
 28087                                  ;
 28088                                  ;	Modification history:
 28089                                  ;
 28090                                  ;		Created: ARR 30 March 1983
 28091                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 28092                                  
 28093                                  ;Break   <FNDCLUS -- Skip over allocation units>
 28094                                  ;--------------------------------------------------------------------------
 28095                                  ;
 28096                                  ; Procedure Name : FNDCLUS
 28097                                  ;
 28098                                  ; Inputs:
 28099                                  ;       CX = No. of clusters to skip
 28100                                  ;       ES:BP = Base of drive parameters
 28101                                  ;       [THISSFT] point to SFT
 28102                                  ; Outputs:
 28103                                  ;       BX = Last cluster skipped to
 28104                                  ;       CX = No. of clusters remaining (0 unless EOF)
 28105                                  ;       DX = Position of last cluster
 28106                                  ;       Carry set if error (currently user FAILed to I 24)
 28107                                  ; DI destroyed. No other registers affected.
 28108                                  ;--------------------------------------------------------------------------
 28109                                  
 28110                                  	; 10/02/2024 - Retro DOS v4.2
 28111                                  FNDCLUS_X:
 28112 00004B44 8B0E[BC05]              	mov	cx,[CLUSNUM]
 28113                                  
 28114                                  ; 20/05/2019 - Retro DOS v4.0
 28115                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 28116                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28117                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 28118                                  
 28119                                  FNDCLUS:
 28120 00004B48 06                      	PUSH	ES
 28121 00004B49 C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 28122                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 28123                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 28124 00004B4D 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 28125                                  	;mov	dx,[es:di+19h]
 28126 00004B51 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 28127 00004B55 09DB                    	OR	BX,BX
 28128 00004B57 7424                    	JZ	short NOCLUS
 28129                                  
 28130 00004B59 29D1                            SUB     CX,DX
 28131 00004B5B 7308                            JNB	short FINDIT
 28132                                  
 28133 00004B5D 01D1                            ADD     CX,DX
 28134 00004B5F 31D2                            XOR     DX,DX
 28135                                  	;mov	bx,[es:di+0Bh]
 28136 00004B61 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 28137                                  FINDIT:
 28138 00004B65 07                              POP	ES
 28139 00004B66 E313                    	JCXZ	RET9
 28140                                  
 28141                                  	;entry	SKPCLP
 28142                                  SKPCLP:
 28143 00004B68 E8B808                  	call	UNPACK
 28144 00004B6B 7214                            jc	short fndclus_retn	; retc
 28145                                  
 28146                                  	; 09/09/2018
 28147                                  
 28148                                  	; MSDOS 3.3
 28149                                  	;push	bx
 28150                                  	;mov	bx,di
 28151                                  	;call	IsEOF
 28152                                  	;pop	bx	
 28153                                  	;jae	short RET9
 28154                                  
 28155                                  	; 20/05/2019 - Retro DOS v4.0
 28156                                  
 28157                                  	; MSDOS 6.0
 28158 00004B6D 87DF                    	xchg	bx,di
 28159 00004B6F E89A08                  	call	IsEOF
 28160 00004B72 87DF                    	xchg	bx,di
 28161 00004B74 7305                    	jae	short RET9
 28162                                  
 28163 00004B76 87DF                            XCHG    BX,DI
 28164 00004B78 42                              INC     DX
 28165                                  
 28166 00004B79 E2ED                    	LOOP	SKPCLP			; RMFS
 28167                                  RET9:	
 28168 00004B7B F8                      	CLC
 28169 00004B7C C3                              retn
 28170                                  NOCLUS:
 28171 00004B7D 07                              POP	ES
 28172 00004B7E 41                              INC	CX
 28173 00004B7F 4A                              DEC	DX
 28174 00004B80 F8                              CLC
 28175                                  
 28176                                  fndclus_retn:
 28177 00004B81 C3                              retn
 28178                                  
 28179                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 28180                                  ;--------------------------------------------------------------------------
 28181                                  ;
 28182                                  ; Procedure Name : BUFSEC
 28183                                  ;
 28184                                  ; Inputs:
 28185                                  ;       AH = priority of buffer
 28186                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 28187                                  ;       ES:BP = Base of drive parameters
 28188                                  ;       [CLUSNUM] = Physical cluster number
 28189                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 28190                                  ;       [BYTCNT1] = Size of transfer
 28191                                  ; Function:
 28192                                  ;       Insure specified sector is in buffer, flushing buffer before
 28193                                  ;       read if necessary.
 28194                                  ; Outputs:
 28195                                  ;       ES:DI = Pointer to buffer
 28196                                  ;       SI = Pointer to transfer address
 28197                                  ;       CX = Number of bytes
 28198                                  ;       [NEXTADD] updated
 28199                                  ;       [TRANS] set to indicate a transfer will occur
 28200                                  ;       Carry set if error (user FAILed to I 24)
 28201                                  ;--------------------------------------------------------------------------
 28202                                  
 28203                                  BUFSEC:
 28204 00004B82 8B16[BC05]              	MOV	DX,[CLUSNUM]
 28205 00004B86 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 28206                                  	;mov	byte [ALLOWED],38h
 28207 00004B8A C606[4B03]38            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 28208 00004B8F E84F01                  	CALL	FIGREC
 28209 00004B92 E89A0C                  	call	GETBUFFR
 28210 00004B95 72EA                    	jc	short fndclus_retn
 28211                                  
 28212 00004B97 C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 28213 00004B9C 8B36[B805]              	MOV	SI,[NEXTADD]
 28214 00004BA0 89F7                    	MOV	DI,SI
 28215 00004BA2 8B0E[D205]              	MOV	CX,[BYTCNT1]
 28216 00004BA6 01CF                    	ADD	DI,CX
 28217 00004BA8 893E[B805]              	MOV	[NEXTADD],DI
 28218 00004BAC C43E[E205]              	LES	DI,[CURBUF]
 28219                                  	;or	byte [es:di+5],8
 28220 00004BB0 26804D0508              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 28221                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 28222                                  	;lea	di,[di+20] ; MSDOS 6.0
 28223 00004BB5 8D7D14                  	LEA	DI,[DI+BUFINSIZ]        ; Point to buffer
 28224 00004BB8 033E[CC05]              	ADD	DI,[BYTSECPOS]
 28225 00004BBC F8                      	CLC
 28226 00004BBD C3                      	retn
 28227                                  
 28228                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 28229                                  
 28230                                  ;---------------------------------------------------------------------------
 28231                                  ;
 28232                                  ; Procedure Name : BUFRD
 28233                                  ;
 28234                                  ; Do a partial sector read via one of the system buffers
 28235                                  ; ES:BP Points to DPB
 28236                                  ; Carry set if error (currently user FAILed to I 24)
 28237                                  ;
 28238                                  ; DS - set to DOSDATA
 28239                                  ;
 28240                                  ;----------------------------------------------------------------------------
 28241                                  
 28242                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28243                                  	; 20/05/2019 - Retro DOS v4.0
 28244                                  BUFRD:
 28245 00004BBE 06                      	PUSH	ES
 28246 00004BBF 31C0                    	xor	ax,ax			; pre-read sector
 28247 00004BC1 E8BEFF                  	CALL	BUFSEC
 28248 00004BC4 7303                    	JNC	short BUF_OK ; ds=ss
 28249                                  
 28250                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 28251 00004BC6 07                      	POP	ES
 28252 00004BC7 EB2D                    	JMP	SHORT RBUFPLACED ; ds=ss ; 25/02/2024 - Retro DOS v4.2
 28253                                  
 28254                                  BUF_OK:
 28255 00004BC9 8CC3                    	MOV	BX,ES
 28256 00004BCB 8E06[2E03]              	MOV	ES,[DMAADD+2]
 28257 00004BCF 8EDB                    	MOV	DS,BX
 28258 00004BD1 87FE                    	XCHG	DI,SI
 28259 00004BD3 D1E9                    	SHR	CX,1
 28260                                  ;M039
 28261                                  	; MSDOS 3.3
 28262                                  	;JNC	short EVENRD
 28263                                  	;MOVSB
 28264                                  ;EVENRD:
 28265                                  	;REP	MOVSW
 28266                                  
 28267                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 28268                                  ;       DS:SI-> Source within Buffer.
 28269                                  ;       ES:DI-> Destination within Transfer memory block.
 28270                                  
 28271                                  	; MSDOS 6.0
 28272 00004BD5 F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 28273                                  	;adc	cx,0			;CX=1 if odd # of bytes, else CX=0.
 28274                                  	;rep	movsb			;Copy last byte.
 28275                                  	; 16/12/2022
 28276 00004BD7 7301                    	jnc	short EVENRD ; **** 20/05/2019
 28277 00004BD9 A4                      	movsb ; ****
 28278                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28279                                  	;adc	cx,0
 28280                                  	;rep	movsb
 28281                                  ;M039
 28282                                  EVENRD: ; ****
 28283 00004BDA 07                      	POP	ES
 28284                                  ;hkn; SS override
 28285 00004BDB 36C53E[E205]            	LDS	DI,[SS:CURBUF]
 28286                                  	;;lea	bx,[di+16]
 28287                                  	;lea	bx,[di+20] ; MSDOS 6.0
 28288 00004BE0 8D5D14                  	LEA	BX,[DI+BUFINSIZ]
 28289 00004BE3 29DE                    	SUB	SI,BX			; Position in buffer
 28290 00004BE5 E8E70B                  	call	PLACEBUF
 28291                                  	;cmp	si,[es:bp+2]
 28292 00004BE8 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 28293 00004BEC 7205                    	JB	short RBUFPLACEDC ; ds<>ss ; No, leave buf where it is
 28294                                  ;M039
 28295                                  	; MSDOS 3.3
 28296                                  	;call	PLACEHEAD 		; Make it prime candidate for chucking
 28297                                  					;  even though it is MRU.
 28298                                  	; MSDOS 6.0
 28299 00004BEE 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 28300                                  ;M039					; chucking even though it is MRU.
 28301                                  
 28302                                  RBUFPLACEDC:
 28303 00004BF3 F8                      	CLC
 28304                                  ;RBUFPLACED:
 28305 00004BF4 16                      	push	ss
 28306 00004BF5 1F                      	pop	ds
 28307                                  RBUFPLACED:	; 25/02/2024 (ds=ss)
 28308 00004BF6 C3                      	retn
 28309                                  
 28310                                  ;----------------------------------------------------------------------------
 28311                                  ;
 28312                                  ; Procedure : BUFWRT
 28313                                  ;
 28314                                  ; Do a partial sector write via one of the system buffers
 28315                                  ; ES:BP Points to DPB
 28316                                  ; Carry set if error (currently user FAILed to I 24)
 28317                                  ;
 28318                                  ; DS - set to DOSDATA
 28319                                  ;
 28320                                  ;----------------------------------------------------------------------------
 28321                                  
 28322                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28323                                  	; 20/05/2019 - Retro DOS v4.0
 28324                                  BUFWRT:
 28325                                  	;MOV	AX,[SECPOS]
 28326                                  	; MSDOS 6.0
 28327                                  	;ADD	AX,1			; Set for next sector
 28328                                  	;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 28329                                  	;ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 28330                                  	; 24/09/2023
 28331 00004BF7 FF06[C405]              	inc	word [SECPOS]
 28332 00004BFB 7504                    	jnz	short bufw_secpos
 28333 00004BFD FF06[C605]              	inc	word [SECPOS+2]
 28334                                  bufw_secpos:
 28335 00004C01 A1[C605]                	MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 28336 00004C04 3B06[CA05]              	CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 28337 00004C08 B001                    	MOV	AL,1			;F.C. >32mb	;AN000;
 28338 00004C0A 770F                    	JA	short NOREAD		;F.C. >32mb	;AN000;
 28339 00004C0C 720B                    	JB	short _doread		;F.C. >32mb	;AN000;
 28340 00004C0E A1[C405]                	MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 28341                                  
 28342                                  	; MSDOS 3.3
 28343                                  	;INC	AX
 28344                                  	;MOV	[SECPOS],AX ; 09/09/2018
 28345                                  
 28346                                  	; 20/05/2019
 28347                                  	; MSDOS 3.3 & MSDOS 6.0
 28348 00004C11 3B06[C805]              	CMP	AX,[VALSEC]		; Has sector been written before?
 28349 00004C15 B001                    	MOV	AL,1
 28350 00004C17 7702                    	JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 28351                                  _doread:
 28352 00004C19 30C0                    	XOR	AL,AL
 28353                                  NOREAD:
 28354 00004C1B 06                      	PUSH	ES
 28355 00004C1C E863FF                  	CALL	BUFSEC
 28356 00004C1F 72A5                    	JC	short BUF_IO_FAIL
 28357 00004C21 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 28358 00004C25 D1E9                    	SHR	CX,1
 28359                                  ;M039
 28360                                  	; MSDOS 3.3
 28361                                  	;JNC	short EVENWRT ; 09/09/2018
 28362                                  	;MOVSB
 28363                                  ;EVENWRT:
 28364                                  	;REP	MOVSW
 28365                                  
 28366                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 28367                                  ;	DS:SI-> Source within Transfer memory block.
 28368                                  ;	ES:DI-> Destination within Buffer.
 28369                                  
 28370                                  	; MSDOS 6.0
 28371 00004C27 F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 28372                                  	;adc	cx,0			;CX=1 if odd # of bytes, else CX=0.
 28373                                  	;rep	movsb		  	;Copy last byte.
 28374                                  	; 16/12/2022
 28375 00004C29 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 28376 00004C2B A4                      	movsb ; ****
 28377                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28378                                  	;adc	cx,0
 28379                                  	;rep	movsb
 28380                                  ;M039
 28381                                  EVENWRT: ; ****
 28382 00004C2C 07                      	POP	ES
 28383                                  
 28384                                  ;hkn; SS override
 28385 00004C2D 36C51E[E205]            	LDS	BX,[SS:CURBUF]
 28386                                  
 28387                                  	; MSDOS 6.0
 28388 00004C32 F6470540                	TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28389                                  					;LB. if already dirty		 ;AN000;
 28390 00004C36 7507                    	JNZ	short yesdirty10	;LB. don't increment dirty count ;AN000;
 28391 00004C38 E8F30D                  	call	INC_DIRTY_COUNT		;LB.				 ;AN000;
 28392                                  	
 28393                                  	;or	byte [bx+5],40h
 28394 00004C3B 804F0540                	OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28395                                  yesdirty10:
 28396                                  	;;lea	si,[bx+16]
 28397                                  	;lea	si,[bx+20] ; MSDOS 6.0
 28398 00004C3F 8D7714                  	LEA	SI,[BX+BUFINSIZ]
 28399 00004C42 29F7                    	SUB	DI,SI		  	; Position in buffer
 28400                                  ;M039
 28401                                  	; MSDOS 3.3
 28402                                  	;MOV	SI,DI
 28403                                  	;MOV	DI,BX
 28404                                  	;call	PLACEBUF
 28405                                  	;;cmp	si,[es:bp+2]
 28406                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28407                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 28408                                  	;call	PLACEHEAD		; Make it prime candidate for chucking
 28409                                  					;  even though it is MRU.
 28410                                  	; 10/02/2024
 28411 00004C44 16                      	push	ss
 28412 00004C45 1F                      	pop	ds
 28413                                  
 28414                                  	; MSDOS 6.0
 28415                                  	;cmp	di,[es:bp+2]
 28416 00004C46 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28417 00004C4A 7204                    	JB	short WBUFPLACED	; No, leave buf where it is
 28418                                  
 28419                                  	; 10/02/2024
 28420                                  	;MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 28421                                  					; chucking even though it is MRU.
 28422 00004C4C 891E[6D00]              	mov	[BufferQueue],bx
 28423                                  ;M039
 28424                                  
 28425                                  WBUFPLACED:
 28426 00004C50 F8                      	CLC
 28427                                  	; 10/02/2024
 28428                                  	;push	ss
 28429                                  	;pop	ds
 28430 00004C51 C3                      	retn
 28431                                  
 28432                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 28433                                  ;---------------------------------------------------------------------------
 28434                                  ;
 28435                                  ; Procedure Name : NEXTSEC
 28436                                  ;
 28437                                  ; Compute the next sector to read or write
 28438                                  ; ES:BP Points to DPB
 28439                                  ;
 28440                                  ;---------------------------------------------------------------------------
 28441                                  
 28442                                  NEXTSEC:
 28443 00004C52 F606[7405]FF            	test	byte [TRANS],0FFh ; -1
 28444                                  	;JZ	short CLRET
 28445                                  	; 29/02/2024
 28446 00004C57 7427                    	jz	short CLRET2
 28447                                  
 28448 00004C59 A0[7305]                	MOV	AL,[SECCLUSPOS]
 28449 00004C5C FEC0                    	INC	AL
 28450                                  	;cmp	al,[es:bp+4]
 28451 00004C5E 263A4604                	CMP	AL,[ES:BP+DPB.CLUSTER_MASK]
 28452 00004C62 7618                    	JBE	short SAVPOS
 28453                                  
 28454 00004C64 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 28455 00004C68 E8A107                  	call	IsEOF
 28456 00004C6B 7314                    	JAE	short NONEXT
 28457                                  
 28458 00004C6D E8B307                  	call	UNPACK
 28459                                  	;JC	short NONEXT
 28460                                  	; 26/02/2024
 28461 00004C70 7210                    	jc	short NONEXT2
 28462                                  clusgot:
 28463 00004C72 893E[BC05]              	MOV	[CLUSNUM],DI
 28464 00004C76 FF06[BA05]              	INC	word [LASTPOS]
 28465 00004C7A B000                    	MOV	AL,0
 28466                                  SAVPOS:
 28467 00004C7C A2[7305]                	MOV	[SECCLUSPOS],AL
 28468                                  CLRET:
 28469 00004C7F F8                              CLC
 28470                                  CLRET2:		; 29/02/2024
 28471 00004C80 C3                      	retn
 28472                                  NONEXT:
 28473 00004C81 F9                      	STC
 28474                                  NONEXT2:	; 26/02/2024
 28475 00004C82 C3                      	retn
 28476                                  
 28477                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 28478                                  ;----------------------------------------------------------------------------
 28479                                  ;
 28480                                  ; Procedure Name : OPTIMIZE
 28481                                  ;
 28482                                  ; Inputs:
 28483                                  ;	  BX = Physical cluster
 28484                                  ;	  CX = No. of records
 28485                                  ;	  DL = sector within cluster
 28486                                  ;	  ES:BP = Base of drive parameters
 28487                                  ;	  [NEXTADD] = transfer address
 28488                                  ; Outputs:
 28489                                  ;	  AX = No. of records remaining
 28490                                  ;	  BX = Transfer address
 28491                                  ;	  CX = No. or records to be transferred
 28492                                  ;	  DX = Physical sector address (LOW)
 28493                                  ;	  [HIGH_SECTOR] = Physical sector address (HIGH)
 28494                                  ;	  DI = Next cluster
 28495                                  ;	  [CLUSNUM] = Last cluster accessed
 28496                                  ;	  [NEXTADD] updated
 28497                                  ;	  Carry set if error (currently user FAILed to I 24)
 28498                                  ; ES:BP unchanged. Note that segment of transfer not set.
 28499                                  ;
 28500                                  ;---------------------------------------------------------------------------
 28501                                  
 28502                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28503                                  OPTIMIZE:
 28504 00004C83 52                      	PUSH	DX
 28505 00004C84 53                      	PUSH	BX
 28506                                  	;mov	al,[es:bp+4]
 28507 00004C85 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 28508 00004C89 FEC0                    	INC	AL		; Number of sectors per cluster
 28509 00004C8B 88C4                    	MOV	AH,AL
 28510 00004C8D 28D0                    	SUB	AL,DL		; AL = Num of sectors left in first cluster
 28511 00004C8F 89CA                    	MOV	DX,CX
 28512                                  	;MOV	CX,0
 28513                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28514                                  	; 16/12/2022
 28515 00004C91 31C9                    	xor	cx,cx	; sub cx,cx
 28516                                  OPTCLUS:
 28517                                  ; AL has number of sectors available in current cluster
 28518                                  ; AH has number of sectors available in next cluster
 28519                                  ; BX has current physical cluster
 28520                                  ; CX has number of sequential sectors found so far
 28521                                  ; DX has number of sectors left to transfer
 28522                                  ; ES:BP Points to DPB
 28523                                  ; ES:SI has FAT pointer
 28524                                  
 28525                                  do_norm3:
 28526 00004C93 E88D07                  	call	UNPACK
 28527 00004C96 7236                    	JC	short OP_ERR
 28528                                  clusgot2:
 28529 00004C98 00C1                    	ADD	CL,AL
 28530 00004C9A 80D500                  	ADC	CH,0
 28531 00004C9D 39D1                    	CMP	CX,DX
 28532 00004C9F 7332                    	JAE	short BLKDON
 28533 00004CA1 88E0                    	MOV	AL,AH
 28534 00004CA3 43                      	INC	BX
 28535 00004CA4 39DF                    	CMP	DI,BX
 28536 00004CA6 74EB                    	JZ	short OPTCLUS
 28537 00004CA8 4B                      	DEC	BX
 28538                                  FINCLUS:
 28539 00004CA9 891E[BC05]              	MOV	[CLUSNUM],BX	; Last cluster accessed
 28540 00004CAD 29CA                    	SUB	DX,CX		; Number of sectors still needed
 28541 00004CAF 52                      	PUSH	DX
 28542 00004CB0 89C8                    	MOV	AX,CX
 28543                                  	;mul	word[ES:BP+2]
 28544 00004CB2 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 28545                                  				; Number of sectors times sector size
 28546 00004CB6 8B36[B805]              	MOV	SI,[NEXTADD]
 28547 00004CBA 01F0                    	ADD	AX,SI		; Adjust by size of transfer
 28548 00004CBC A3[B805]                	MOV	[NEXTADD],AX
 28549 00004CBF 58                      	POP	AX		; Number of sectors still needed
 28550 00004CC0 5A                      	POP	DX		; Starting cluster
 28551 00004CC1 29D3                    	SUB	BX,DX		; Number of new clusters accessed
 28552 00004CC3 011E[BA05]              	ADD	[LASTPOS],BX
 28553 00004CC7 5B                      	POP	BX		; BL = sector position within cluster
 28554 00004CC8 E81600                  	call	FIGREC
 28555 00004CCB 89F3                    	MOV	BX,SI
 28556                                  	; 24/09/2023
 28557                                  	; cf=0 (at the return of FIGREC)
 28558                                  	;CLC
 28559 00004CCD C3                      	retn
 28560                                  OP_ERR:
 28561 00004CCE 83C404                  	ADD	SP,4
 28562 00004CD1 F9                      	STC
 28563 00004CD2 C3                      	retn
 28564                                  BLKDON:
 28565 00004CD3 29D1                    	SUB	CX,DX	  	; Number of sectors in cluster we don't want
 28566 00004CD5 28CC                    	SUB	AH,CL	  	; Number of sectors in cluster we accepted
 28567 00004CD7 FECC                    	DEC	AH		; Adjust to mean position within cluster
 28568 00004CD9 8826[7305]              	MOV	[SECCLUSPOS],AH
 28569 00004CDD 89D1                    	MOV	CX,DX		; Anyway, make the total equal to the request
 28570 00004CDF EBC8                    	JMP	SHORT FINCLUS
 28571                                  
 28572                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 28573                                  ;---------------------------------------------------------------------------
 28574                                  ;
 28575                                  ; Procedure Name : FIGREC
 28576                                  ;
 28577                                  ; Inputs:
 28578                                  ;	  DX = Physical cluster number
 28579                                  ;	  BL = Sector position within cluster
 28580                                  ;	  ES:BP = Base of drive parameters
 28581                                  ; Outputs:
 28582                                  ;	  DX = physical sector number (LOW)
 28583                                  ;	  [HIGH_SECTOR] Physical sector address (HIGH)
 28584                                  ; No other registers affected.
 28585                                  ;
 28586                                  ;---------------------------------------------------------------------------
 28587                                  
 28588                                  	; 10/06/2019
 28589                                  	; 20/05/2019 - Retro DOS v4.0
 28590                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 28591                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28592                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)
 28593                                  
 28594                                  	; 27/02/2024 - Retro DOS v4.2
 28595                                  	; (ds=ss)
 28596                                  FIGREC:
 28597 00004CE1 51                      	PUSH	CX
 28598                                  	;
 28599                                  	; 27/02/2024
 28600 00004CE2 31C9                    	xor	cx,cx
 28601 00004CE4 890E[0706]              	mov	[HIGH_SECTOR],cx ;0
 28602                                  	;
 28603                                  	;mov	cl,[es:bp+5]
 28604 00004CE8 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 28605 00004CEC 4A                      	DEC	DX
 28606 00004CED 4A                      	DEC	DX
 28607                                  
 28608                                  	; MSDOS 3.3
 28609                                  	;SHL	DX,CL
 28610                                  
 28611                                  ;hkn; SS override HIGH_SECTOR
 28612                                  	; MSDOS 6.0
 28613                                  	;MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 28614                                  	; 27/02/2024
 28615                                  	;mov	word [HIGH_SECTOR],0
 28616                                  	; 24/09/2023
 28617                                  	;;xor	ch,ch				;F.C. >32mb
 28618                                  	;OR	CL,CL				;F.C. >32mb
 28619                                  	;JZ	short noshift			;F.C. >32mb
 28620                                  	; 27/02/2024
 28621 00004CEE E309                    	jcxz	noshift
 28622                                  	; 27/02/2024
 28623                                  	;;XOR	CH,CH				;F.C. >32mb
 28624                                  rotleft:					;F.C. >32mb
 28625 00004CF0 F8                      	CLC					;F.C. >32mb
 28626 00004CF1 D1D2                    	RCL	DX,1				;F.C. >32mb
 28627                                  	; 10/06/2019
 28628                                  	;RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 28629                                  	; 27/02/2024
 28630 00004CF3 D116[0706]              	rcl	word [HIGH_SECTOR],1
 28631 00004CF7 E2F7                    	LOOP	rotleft				;F.C. >32mb
 28632                                  noshift:
 28633                                  	; MSDOS 3.3 & MSDOS 6.0
 28634 00004CF9 08DA                    	OR	DL,BL
 28635                                  	;add	dx,[es:bp+0Bh]
 28636 00004CFB 2603560B                	ADD	DX,[ES:BP+DPB.FIRST_SECTOR]
 28637                                  	; MSDOS 6.0
 28638                                  	; 10/06/2019
 28639                                  	;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 28640                                  	; 24/09/2023
 28641                                  	; cx=0
 28642                                  	;ADC	word [ss:HIGH_SECTOR],cx ; 0
 28643                                  	; 27/02/2024
 28644 00004CFF 110E[0706]              	adc	word [HIGH_SECTOR],cx ; 0
 28645                                  
 28646                                  	; MSDOS 3.3 & MSDOS 6.0
 28647 00004D03 59                      	POP	CX
 28648                                  figrec_retn:
 28649 00004D04 C3                      	retn
 28650                                  
 28651                                  ; 20/05/2019 - Retro DOS v4.0
 28652                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 28653                                  
 28654                                  ; 30/07/2018 - Retro DOS v3.0
 28655                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 28656                                  
 28657                                  ;Break   <ALLOCATE -- Assign disk space>
 28658                                  ;---------------------------------------------------------------------------
 28659                                  ;
 28660                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 28661                                  ;
 28662                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 28663                                  ;   FAT-chained onto the end of the existing file.
 28664                                  ;
 28665                                  ;   The DPB contains the cluster # of the last free cluster allocated
 28666                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 28667                                  ;   numbered clusters, looking for the necessary free blocks.
 28668                                  ;
 28669                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 28670                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 28671                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 28672                                  ;
 28673                                  ;       If we get to the end of the disk without satisfaction:
 28674                                  ;
 28675                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 28676                                  ;               return (insufficient_disk_space)
 28677                                  ;           ELSE
 28678                                  ;               dpb_next_free = 2; start scan over from the beginning.
 28679                                  ;
 28680                                  ;   Note that there is no multitasking interlock. There is no race when
 28681                                  ;   examining the entrys in an in-core FAT block since there will be no
 28682                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 28683                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 28684                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 28685                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 28686                                  ;   satisfied. We can't allow another activation to think this cluster is
 28687                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 28688                                  ;   allocated.
 28689                                  ;
 28690                                  ;   Note that when we run out of space this algorithem will scan from
 28691                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 28692                                  ;   redundantly scanning the later part of the disk. This only happens when
 28693                                  ;   we run out of space, so sue me.
 28694                                  ;
 28695                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28696                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28697                                  ;                                                                          ;
 28698                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 28699                                  ;   explanation:
 28700                                  ;
 28701                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 28702                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 28703                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 28704                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 28705                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 28706                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 28707                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 28708                                  ;   the
 28709                                  ;           LOOP   findfre         ; alloc more if needed
 28710                                  ;   instruction when the first cluster is allocated to the nul file. The
 28711                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 28712                                  ;
 28713                                  ;   This method is obviously useless (because it is non-reentrant) for
 28714                                  ;   multitasking, and will have to be changed. Storing the required value on
 28715                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 28716                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 28717                                  ;   problems with INT 24 well.
 28718                                  ;
 28719                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28720                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28721                                  ;                                                                          ;
 28722                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 28723                                  ;               CX = No. of clusters to allocate
 28724                                  ;               ES:BP = Base of drive parameters
 28725                                  ;               [THISSFT] = Points to SFT
 28726                                  ;
 28727                                  ;       EXIT    'C' set if insufficient space
 28728                                  ;                 [FAILERR] can be tested to see the reason for failure
 28729                                  ;                 CX = max. no. of clusters that could be added to file
 28730                                  ;               'C' clear if space allocated
 28731                                  ;                 BX = First cluster allocated
 28732                                  ;                 FAT is fully updated
 28733                                  ;                 sf_FIRCLUS field of SFT set if file was null
 28734                                  ;
 28735                                  ;       USES    ALL but SI, BP
 28736                                  
 28737                                  ;callmagic  proc near
 28738                                  ;       push    ds                             ;push segment of routine 
 28739                                  ;       push    Offset MagicPatch              ;push offset for routine
 28740                                  ;       retf                                   ;simulate jmp far
 28741                                  ;                                              ;far return address is on
 28742                                  ;                                              ;stack, so far return from
 28743                                  ;                                              ;call will return this routine
 28744                                  ;callmagic  endp
 28745                                  
 28746                                  
 28747                                  ; 25/09/2023
 28748                                  %if 0
 28749                                  callmagic:
 28750                                  	push	ds
 28751                                  	push	MagicPatch
 28752                                  	retf	
 28753                                  %endif
 28754                                  
 28755                                  ALLOCATE:
 28756                                  	; 10/09/2018
 28757                                  ;BEGIN MAGICDRV MODIFICATIONS
 28758                                  ;
 28759                                  ;7/5/92 scottq
 28760                                  ;
 28761                                  ;This is the disk compression patch location which allows
 28762                                  ;the disk compression software to fail allocations if the
 28763                                  ;FAT would allows allocation, but the free space for compressed
 28764                                  ;data would not.
 28765                                  ;        
 28766                                  ;;;	call    far ptr MAGICPATCH
 28767                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 28768                                  ;;; but we do know the segment and offset of the routine
 28769                                  ;;; so simulate a far call to dosdata:magicpatch
 28770                                  ;;; note dosassume above, so DS -> dosdata
 28771                                  
 28772                                  	; MSDOS 6.0
 28773                                          ;clc				;clear carry so we fall through
 28774                                  	;				;if no patch is present
 28775                                  	;push	cs			;push segment for far return
 28776                                          ;call	callmagic		;this is a near call
 28777                                          ;jnc	short Regular_Allocate_Path
 28778                                  	;jmp	Disk_Full_Return
 28779                                  
 28780                                  ; 25/09/2023
 28781                                  %if 0
 28782                                  	clc
 28783                                  	push	cs
 28784                                  	call	callmagic
 28785                                  	jnc	short Regular_Allocate_Path
 28786                                  	jmp	Disk_Full_Return
 28787                                  Regular_Allocate_Path:
 28788                                  %endif
 28789                                  
 28790                                  	; 20/05/2019 - Retro DOS v4.0
 28791                                  ;END MAGICDRV MODIFICATIONS
 28792                                  
 28793                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28794                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 28795                                  
 28796 00004D05 53                              PUSH    BX                      ; save (bx)
 28797 00004D06 31DB                            XOR     BX,BX
 28798 00004D08 E81807                  	call	UNPACK
 28799 00004D0B 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 28800 00004D0F 5B                              POP     BX
 28801 00004D10 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 28802                                  
 28803 00004D12 51                              PUSH    CX
 28804 00004D13 53                              PUSH    BX
 28805                                  
 28806 00004D14 89DA                            MOV     DX,BX
 28807                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 28808                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 28809 00004D16 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 28810 00004D1A 83FB02                          cmp     bx,2
 28811 00004D1D 7709                            ja	short FINDFRE
 28812                                  
 28813                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 28814                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 28815                                  
 28816                                  ads1:
 28817                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 28818                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 28819 00004D1F 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 28820 00004D25 BB0100                          mov     bx,1                    ; Counter next instruction so first
 28821                                                                          ;       cluster examined is 2
 28822                                  
 28823                                  ;   Scanning both forwards and backwards for a free cluster
 28824                                  ;
 28825                                  ;       (BX) = forwards scan pointer
 28826                                  ;       (CX) = clusters remaining to be allocated
 28827                                  ;       (DX) = current last cluster in file
 28828                                  ;       (TOS) = last cluster of file
 28829                                  
 28830                                  FINDFRE:
 28831 00004D28 43                              INC     BX
 28832                                  	;cmp	bx,[es:bp+0Dh]
 28833 00004D29 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 28834 00004D2D 7757                    	ja	short ads7	; at end of disk
 28835 00004D2F E8F106                          call	UNPACK          ; check out this cluster
 28836 00004D32 722F                            jc	short ads4	; FAT error             [INTERR?]
 28837 00004D34 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 28838                                  
 28839                                  ;   Have found a free cluster. Chain it to the file
 28840                                  ;
 28841                                  ;       (BX) = found free cluster #
 28842                                  ;       (DX) = current last cluster in file
 28843                                  
 28844                                  	;;mov	[es:bp+1Ch],bx
 28845                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 28846 00004D36 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 28847 00004D3A 92                              xchg    ax,dx           ; save (dx) in ax
 28848 00004D3B BA0100                          mov     dx,1            ; mark this free guy as "1"
 28849 00004D3E E83607                  	call	PACK            ; set special "temporary" mark
 28850 00004D41 7220                            jc	short ads4	; FAT error             [INTERR?]
 28851                                  	;;cmp	word [es:bp+1Eh],-1
 28852                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28853 00004D43 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28854 00004D48 7404                            JZ	short NO_ALLOC	; No
 28855                                  	;;dec	word [es:bp+1Eh]
 28856                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 28857 00004D4A 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 28858                                  NO_ALLOC:
 28859 00004D4E 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 28860 00004D4F 87DA                            XCHG    BX,DX
 28861 00004D51 89D0                            MOV     AX,DX
 28862 00004D53 E82107                  	call	PACK            ; link free cluster onto file
 28863                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 28864                                                                  ;    cluster 0 with FIRCLUS value.
 28865 00004D56 720B                            jc	short ads4	; FAT error [INTERR?]
 28866 00004D58 93                              xchg    BX,AX           ; (BX) = last one we looked at
 28867 00004D59 89DA                            mov     dx,bx           ; (dx) = current end of file
 28868 00004D5B E2CB                            LOOP    FINDFRE         ; alloc more if needed
 28869                                  
 28870                                  ;   We've successfully extended the file. Clean up and exit
 28871                                  ;
 28872                                  ;       (BX) = last cluster in file
 28873                                  
 28874 00004D5D BAFFFF                          MOV     DX,0FFFFH
 28875 00004D60 E81407                  	call	PACK            ; mark last cluster EOF
 28876                                  
 28877                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 28878                                  ;   2 whole bytes. Hope its worth it...
 28879                                  ;
 28880                                  ;       'C' set if error
 28881                                  ;       calling (BX) and (CX) pushed on stack
 28882                                  
 28883                                  ads4:   
 28884 00004D63 5B                      	POP     BX
 28885 00004D64 59                              POP     CX              ; Don't need this stuff since we're successful
 28886 00004D65 729D                            jc	short figrec_retn
 28887 00004D67 E8B906                          call	UNPACK          ; Get first cluster allocated for return
 28888                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 28889 00004D6A 7298                            jc	short figrec_retn
 28890 00004D6C E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 28891 00004D6F 7293                            jc	short figrec_retn
 28892 00004D71 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 28893 00004D73 09FF                            OR      DI,DI           ; clear 'C'
 28894 00004D75 758D                    	jnz	short figrec_retn ; we were extending an existing file
 28895                                  
 28896                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 28897                                  ;   info
 28898                                  dofastk:
 28899                                  	; 20/05/2019
 28900                                  	; MSDOS 6.0
 28901                                  	;push	dx ; * MSDOS 6.0
 28902                                  	;;mov	dl,[es:bp+0]
 28903                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 28904                                  	;mov	dl,[es:bp]
 28905                                  
 28906                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28907                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 28908                                  	
 28909                                  	; 16/12/2022
 28910                                  	;push	dx ; *
 28911                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 28912                                  	; 15/12/2022
 28913                                  	;mov	dl,[es:bp]
 28914                                  	
 28915                                  	; MSDOS 3.3 & MSDOS 6.0
 28916 00004D77 06                      	PUSH	ES
 28917 00004D78 C43E[9E05]              	LES     DI,[THISSFT]
 28918                                  	;mov	[es:di+0Bh],bx
 28919 00004D7C 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 28920                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 28921                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 28922 00004D80 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 28923 00004D84 07                      	POP	ES
 28924                                  	;retn
 28925                                  
 28926                                  	;pop	dx ; * MSDOS 6.0
 28927                                  
 28928                                  	; 16/12/2022
 28929                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28930                                  	;pop	dx ; *
 28931                                  
 28932 00004D85 C3                      	retn	
 28933                                  
 28934                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 28935                                  ;   of the disk...
 28936                                  
 28937                                  ads7:   
 28938 00004D86 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 28939 00004D8B 7592                    	jnz	short ads1	; start scan from front of disk
 28940                                  
 28941                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 28942                                  ;   the space back to the free list and tell the caller how much he could have
 28943                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 28944                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 28945                                  ;
 28946                                  ;       (CX) = clusters remaining to be allocated
 28947                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 28948                                  ;       (TOS+1) = # of clusters wanted to allocate
 28949                                  
 28950 00004D8D 5B                              POP     BX              ; (BX) = last cluster of file
 28951 00004D8E BAFFFF                          MOV     DX,0FFFFH
 28952 00004D91 E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 28953 00004D94 58                              POP     AX              ; No. of clusters requested
 28954                                                                  ; Don't "retc". We are setting Carry anyway,
 28955                                                                  ;   Alloc failed, so proceed with return CX
 28956                                                                  ;   setup.
 28957 00004D95 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 28958 00004D97 E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 28959                                                                  ;   Alloc failed.
 28960                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 28961                                          ; MSDOS 6.0
 28962 00004D9A C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 28963 00004D9F F9                              STC
 28964 00004DA0 C3                              retn
 28965                                  
 28966                                  ;-----------------------------------------------------------------------
 28967                                  ;
 28968                                  ; Procedure Name : RESTFATBYT
 28969                                  ;
 28970                                  ; SEE ALLOCATE CAVEAT
 28971                                  ;       Carry set if error (currently user FAILed to I 24)
 28972                                  ;-----------------------------------------------------------------------
 28973                                  
 28974                                  RESTFATBYT:
 28975 00004DA1 53                              PUSH    BX
 28976 00004DA2 52                              PUSH    DX
 28977 00004DA3 57                              PUSH    DI
 28978 00004DA4 31DB                            XOR     BX,BX
 28979 00004DA6 8B16[9605]                      MOV     DX,[FATBYT]
 28980 00004DAA E8CA06                  	call	PACK
 28981 00004DAD 5F                              POP     DI
 28982 00004DAE 5A                              POP     DX
 28983 00004DAF 5B                              POP     BX
 28984                                  ; 16/12/2022
 28985                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28986                                  ;RELEASE_flush:
 28987 00004DB0 C3                      	retn
 28988                                  
 28989                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 28990                                  ;---------------------------------------------------------------------------
 28991                                  ;
 28992                                  ; Procedure Name : RELEASE
 28993                                  ;
 28994                                  ; Inputs:
 28995                                  ;       BX = Cluster in file
 28996                                  ;       ES:BP = Base of drive parameters
 28997                                  ; Function:
 28998                                  ;       Frees cluster chain starting with [BX]
 28999                                  ;       Carry set if error (currently user FAILed to I 24)
 29000                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 29001                                  ;
 29002                                  ;-----------------------------------------------------------------------------
 29003                                  
 29004                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29005                                  	; 20/05/2019 - Retro DOS v4.0
 29006                                  RELEASE:
 29007 00004DB1 31D2                            XOR     DX,DX
 29008                                  
 29009                                  	;entry	RELBLKS
 29010                                  RELBLKS:
 29011                                  
 29012                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 29013                                  ;   and free the rest in the chain.
 29014                                  
 29015 00004DB3 E86D06                  	call	UNPACK
 29016 00004DB6 7224                    	jc	short RELEASE_flush
 29017 00004DB8 7422                    	jz	short RELEASE_flush
 29018 00004DBA 89F8                            MOV     AX,DI
 29019 00004DBC 52                              PUSH    DX
 29020 00004DBD E8B706                  	call	PACK
 29021 00004DC0 5A                              POP     DX
 29022 00004DC1 7219                    	jc	short RELEASE_flush
 29023 00004DC3 09D2                            OR      DX,DX
 29024 00004DC5 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 29025                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 29026                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 29027 00004DC7 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 29028 00004DCC 7404                            JZ	short NO_DEALLOC	; No
 29029 00004DCE 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 29030                                  NO_DEALLOC:
 29031 00004DD2 89C3                            MOV     BX,AX
 29032 00004DD4 48                              dec     ax              ; check for "1"
 29033 00004DD5 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 29034 00004DD7 E83206                  	call	IsEOF
 29035 00004DDA 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 29036                                  
 29037                                  	; 16/12/2022
 29038                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29039                                  ;%if 0
 29040                                  RELEASE_flush:
 29041                                  	; MSDOS 6.0
 29042 00004DDC 268A4600                	mov	al,[es:bp]
 29043                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29044 00004DE0 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 29045 00004DE1 51                      	push	cx		;  them to be preserved.
 29046 00004DE2 06                      	push	es
 29047 00004DE3 55                      	push	bp
 29048 00004DE4 E8450B                  	call	FLUSHBUF	; commit buffers for this drive
 29049 00004DE7 5D                      	pop	bp
 29050 00004DE8 07                      	pop	es
 29051 00004DE9 59                      	pop	cx
 29052 00004DEA 5E                      	pop	si
 29053                                  ;%endif
 29054                                  RET12:
 29055 00004DEB C3                      	retn
 29056                                  
 29057                                  ;Break	<GETEOF -- Find the end of a file>
 29058                                  ;------------------------------------------------------------------------
 29059                                  ;
 29060                                  ; Procedure Name : GETEOF
 29061                                  ;
 29062                                  ; Inputs:
 29063                                  ;       ES:BP Points to DPB
 29064                                  ;       BX = Cluster in a file
 29065                                  ;       DS = CS
 29066                                  ; Outputs:
 29067                                  ;       BX = Last cluster in the file
 29068                                  ;       Carry set if error (currently user FAILed to I 24)
 29069                                  ; DI destroyed. No other registers affected.
 29070                                  ;
 29071                                  ;--------------------------------------------------------------------------
 29072                                  
 29073                                  GETEOF:
 29074 00004DEC E83406                  	call	UNPACK
 29075 00004DEF 72FA                            jc	short RET12
 29076 00004DF1 53                              PUSH    BX
 29077 00004DF2 89FB                            MOV     BX,DI
 29078 00004DF4 E81506                  	call	IsEOF
 29079 00004DF7 5B                              POP     BX
 29080 00004DF8 73F1                            JAE     short RET12
 29081 00004DFA 89FB                            MOV     BX,DI
 29082 00004DFC EBEE                            JMP     short GETEOF
 29083                                  
 29084                                  ;============================================================================
 29085                                  ; FCB.ASM, MSDOS 6.0, 1991
 29086                                  ;============================================================================
 29087                                  ; 30/07/2018 - Retro DOS v3.0
 29088                                  ; 20/05/2019 - Retro DOS v4.0
 29089                                  
 29090                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 29091                                  ;	NAME	FCB
 29092                                  
 29093                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 29094                                  ;		  filename characters
 29095                                  ;
 29096                                  ;	MakeFcb
 29097                                  ;	NameTrans
 29098                                  ;	PATHCHRCMP
 29099                                  ;	GetLet
 29100                                  ;	UCase
 29101                                  ;	GetLet3
 29102                                  ;	GetCharType
 29103                                  ;	TESTKANJ
 29104                                  ;	NORMSCAN
 29105                                  ;	DELIM
 29106                                  ;
 29107                                  ;	Revision history:
 29108                                  ;
 29109                                  ;		A000  version 4.00  Jan. 1988
 29110                                  ;	
 29111                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 29112                                  
 29113                                  TableLook	EQU	-1
 29114                                  
 29115                                  SCANSEPARATOR	EQU	1
 29116                                  DRVBIT		EQU	2
 29117                                  NAMBIT		EQU	4
 29118                                  EXTBIT		EQU	8
 29119                                  
 29120                                  ;----------------------------------------------------------------------------
 29121                                  ;
 29122                                  ; Procedure : MakeFcb
 29123                                  ;
 29124                                  ;----------------------------------------------------------------------------
 29125                                  
 29126                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29127                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 29128                                  
 29129                                  	; 29/02/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 29130                                  	; (MSDOS 6.22 MSDOS.SYS - DOSCODE:8ED3h)
 29131                                  MAKEFCB:
 29132                                  ;hkn; SS override
 29133                                  	;MOV	BYTE [SS:SpaceFlag],0
 29134 00004DFE 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 29135                                  	; 29/02/2024
 29136 00004E00 368816[4E03]            	mov	[ss:SpaceFlag],dl ; 0
 29137                                  	;test	al,2
 29138 00004E05 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 29139 00004E07 7503                    	JNZ	short DEFDRV
 29140                                  	;MOV	BYTE [ES:DI],0	; No - use default drive
 29141                                  	; 29/02/2024
 29142 00004E09 268815                  	mov	[es:di],dl ; 0
 29143                                  DEFDRV:
 29144 00004E0C 47                      	INC	DI
 29145 00004E0D B90800                  	MOV	CX,8
 29146                                  	;test	al,4
 29147 00004E10 A804                    	test	AL,NAMBIT	; Use current name fields as default?
 29148 00004E12 93                      	XCHG	AX,BX		; Save bits in BX
 29149 00004E13 B020                    	MOV	AL," "
 29150 00004E15 7404                    	JZ	short FILLB	; If not, go fill with blanks
 29151 00004E17 01CF                    	ADD	DI,CX
 29152 00004E19 31C9                    	XOR	CX,CX		; Don't fill any
 29153                                  FILLB:
 29154 00004E1B F3AA                    	REP	STOSB
 29155 00004E1D B103                    	MOV	CL,3
 29156 00004E1F F6C308                  	test	BL,EXTBIT	; Use current extension as default
 29157 00004E22 7404                    	JZ	short FILLB2
 29158 00004E24 01CF                    	ADD	DI,CX
 29159 00004E26 31C9                    	XOR	CX,CX
 29160                                  FILLB2:
 29161 00004E28 F3AA                    	REP	STOSB
 29162 00004E2A 91                      	XCHG	AX,CX		; Put zero in AX
 29163 00004E2B AB                      	STOSW
 29164 00004E2C AB                      	STOSW			; Initialize two words after to zero
 29165 00004E2D 83EF10                  	SUB	DI,16		; Point back at start
 29166                                  	;test	bl,1
 29167 00004E30 F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 29168 00004E33 7409                    	JZ	short SKPSPC
 29169 00004E35 E88800                  	CALL	SCANB		; Peel off blanks and tabs
 29170 00004E38 E81E01                  	CALL	DELIM		; Is it a one-time-only delimiter?
 29171 00004E3B 7504                    	JNZ	short NOSCAN
 29172 00004E3D 46                      	INC	SI		; Skip over the delimiter
 29173                                  SKPSPC:
 29174 00004E3E E87F00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 29175                                  NOSCAN:
 29176 00004E41 E8EC00                  	CALL	GETLET
 29177 00004E44 761E                    	JBE	short NODRV	; Quit if termination character
 29178 00004E46 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 29179 00004E49 7519                    	JNZ	short NODRV
 29180 00004E4B 46                      	INC	SI		; Skip over colon
 29181 00004E4C 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 29182 00004E4E 760F                    	JBE	short BADDRV	; Drive letter out of range
 29183                                  
 29184 00004E50 50                      	PUSH	AX
 29185 00004E51 E8E01A                  	call	GetVisDrv
 29186 00004E54 58                      	POP	AX
 29187 00004E55 730A                    	JNC	short HAVDRV
 29188                                  
 29189                                  	; 20/05/2019 - Retro DOS v4.0
 29190                                  	; MSDOS 6.0
 29191                                  ;hkn; SS override
 29192 00004E57 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 29193                                  					; if not FAT drive ;AN000;
 29194 00004E5D 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 29195                                  BADDRV:
 29196 00004E5F B2FF                    	MOV	DL,-1
 29197                                  HAVDRV:
 29198 00004E61 AA                      	STOSB			; Put drive specifier in first byte
 29199 00004E62 46                      	INC	SI
 29200 00004E63 4F                      	DEC	DI		; Counteract next two instructions
 29201                                  NODRV:
 29202 00004E64 4E                      	DEC	SI		; Back up
 29203 00004E65 47                      	INC	DI		; Skip drive byte
 29204                                  
 29205                                  	;entry	NORMSCAN
 29206                                  NORMSCAN:
 29207 00004E66 B90800                  	MOV	CX,8
 29208 00004E69 E82200                  	CALL	GETWORD 	; Get 8-letter file name
 29209 00004E6C 803C2E                  	CMP	BYTE [SI],"."
 29210 00004E6F 7510                    	JNZ	short NODOT
 29211 00004E71 46                      	INC	SI		; Skip over dot if present
 29212                                  
 29213                                  	; 24/09/2023
 29214                                  	;mov	cx,3
 29215 00004E72 B103                    	mov	cl,3	; ch=0
 29216                                  
 29217                                  	; MSDOS 6.0
 29218                                  ;hkn; SS override
 29219                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 29220                                  	; 10/06/2019
 29221 00004E74 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 29222 00004E7A 7402                    	JZ	short VOLOK				;AN000;
 29223 00004E7C A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 29224                                  	; 24/09/2023
 29225                                  	;MOV	CX,2					;AN000;
 29226 00004E7D 49                      	dec	cx  ; cx=2
 29227                                  	;JMP	SHORT contvol				;AN000;
 29228                                  VOLOK:
 29229                                  	;MOV	CX,3		; Get 3-letter extension
 29230                                  contvol:
 29231 00004E7E E81300                  	CALL	MUSTGETWORD
 29232                                  NODOT:
 29233 00004E81 88D0                    	MOV	AL,DL
 29234                                  
 29235                                  	; MSDOS 6.0
 29236                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 29237                                  	; 18/12/2022
 29238 00004E83 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 29239                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 29240                                  
 29241 00004E89 C3                      	retn
 29242                                  
 29243                                  NONAM:
 29244 00004E8A 01CF                    	ADD	DI,CX
 29245 00004E8C 4E                      	DEC	SI
 29246 00004E8D C3                      	retn
 29247                                  
 29248                                  GETWORD:
 29249 00004E8E E89F00                  	CALL	GETLET		
 29250 00004E91 76F7                    	JBE	short NONAM	; Exit if invalid character
 29251 00004E93 4E                      	DEC	SI
 29252                                  
 29253                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 29254                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 29255                                  
 29256                                  MUSTGETWORD:
 29257 00004E94 E89900                  	CALL	GETLET
 29258                                  
 29259                                  ;	If spaceFlag is set then we allow spaces in a pathname
 29260                                  
 29261                                  ;IF NOT TABLELOOK
 29262                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 29263                                  ;ENDIF
 29264 00004E97 750C                    	JNZ	short MustCheckCX
 29265                                  
 29266                                  ;hkn; SS override
 29267 00004E99 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 29268 00004E9F 7419                    	JZ	short FILLNAM
 29269 00004EA1 3C20                    	CMP	AL," "
 29270 00004EA3 7515                    	JNZ	short FILLNAM
 29271                                  
 29272                                  MustCheckCX:
 29273 00004EA5 E3ED                    	JCXZ	MUSTGETWORD
 29274 00004EA7 49                      	DEC	CX
 29275 00004EA8 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 29276 00004EAA 7504                    	JNZ	short NOSTAR
 29277 00004EAC B03F                    	MOV	AL,"?"
 29278 00004EAE F3AA                    	REP	STOSB
 29279                                  NOSTAR:
 29280 00004EB0 AA                      	STOSB
 29281 00004EB1 3C3F                    	CMP	AL,"?"
 29282 00004EB3 75DF                    	JNZ	short MUSTGETWORD
 29283 00004EB5 80CA01                  	OR	DL,1		; Flag ambiguous file name
 29284 00004EB8 EBDA                    	JMP	short MUSTGETWORD
 29285                                  FILLNAM:
 29286 00004EBA B020                    	MOV	AL," "
 29287 00004EBC F3AA                    	REP	STOSB
 29288 00004EBE 4E                      	DEC	SI
 29289 00004EBF C3                      	retn
 29290                                  
 29291                                  SCANB:
 29292 00004EC0 AC                      	LODSB
 29293 00004EC1 E89D00                  	CALL	SPCHK
 29294 00004EC4 74FA                    	JZ	short SCANB
 29295 00004EC6 4E                      	DEC	SI
 29296                                  scanb_retn:
 29297 00004EC7 C3                      	retn
 29298                                  
 29299                                  ;----------------------------------------------------------------------------
 29300                                  ;
 29301                                  ; Procedure Name : NameTrans
 29302                                  ;
 29303                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 29304                                  ; allow spaces in pathnames
 29305                                  ;
 29306                                  ;   Inputs:	DS:SI points to start of path element
 29307                                  ;   Outputs:	Name1 has unpacked name, uppercased
 29308                                  ;		ES = DOSGroup
 29309                                  ;		DS:SI advanced after name
 29310                                  ;   Registers modified: DI,AX,DX,CX
 29311                                  ;
 29312                                  ;----------------------------------------------------------------------------
 29313                                  
 29314                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29315                                  	; 20/05/2019 - Retro DOS v4.0
 29316                                  
 29317                                  	; 29/02/2024 - Retro DOS v4.1
 29318                                  
 29319                                  NameTrans:
 29320                                  ;hkn; SS override
 29321 00004EC8 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 29322 00004ECE 16                      	push	ss
 29323 00004ECF 07                      	pop	es
 29324                                  
 29325                                  ;hkn; NAME1 is in DOSDATA
 29326 00004ED0 BF[4B05]                	MOV	DI,NAME1
 29327 00004ED3 57                      	PUSH	DI
 29328                                  
 29329                                  ; 29/02/2024
 29330                                  %if 0
 29331                                  	MOV	AX,'  '	; 2020h
 29332                                  	MOV	CX,5
 29333                                  	STOSB
 29334                                  	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 29335                                  	XOR	AL,AL		; Set stuff for NORMSCAN
 29336                                  	MOV	DL,AL
 29337                                  %else
 29338                                  	; 29/02/2024
 29339                                  	; (PCDOS 7.1 IBMDOS.COM)
 29340 00004ED4 B020                    	mov     al,20h ; ' '
 29341 00004ED6 B90B00                  	mov     cx,11
 29342 00004ED9 F3AA                    	rep stosb               ; Fill "FCB" at NAME1 with spaces
 29343 00004EDB 91                      	xchg    ax,cx
 29344 00004EDC 99                      	cwd
 29345                                  %endif
 29346                                  
 29347 00004EDD AA                      	STOSB
 29348 00004EDE 5F                      	POP	DI
 29349                                  
 29350 00004EDF E884FF                  	CALL	NORMSCAN
 29351                                  
 29352                                  ;hkn; SS override for NAME1
 29353 00004EE2 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 29354 00004EE8 75DD                    	jnz	short scanb_retn
 29355 00004EEA 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 29356 00004EF0 C3                      	retn
 29357                                  
 29358                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 29359                                  ;============================================================================
 29360                                  
 29361                                  ; 20/05/2019 - Retro DOS v4.0
 29362                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29363                                  
 29364                                  ;If TableLook
 29365                                  
 29366                                  ;hkn; Table	SEGMENT
 29367                                  ;	PUBLIC	CharType
 29368                                  ;----------------------------------------------------------------------------
 29369                                  
 29370                                  ; Character type table for file name scanning
 29371                                  ; Table provides a mapping of characters to validity bits.
 29372                                  ; Four bits are provided for each character. Values 7Dh and above
 29373                                  ; have all bits set, so that part of the table is chopped off, and
 29374                                  ; the translation routine is responsible for screening these values.
 29375                                  ; The bit values are defined in DOSSYM.INC
 29376                                  
 29377                                  ;	      ; ^A and NUL
 29378                                  ;CharType:
 29379                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29380                                  ;	      ; ^C and ^B
 29381                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29382                                  ;	      ; ^E and ^D
 29383                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29384                                  ;	      ; ^G and ^F
 29385                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29386                                  ;	      ; TAB and BS
 29387                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29388                                  ;	      ; ^K and ^J
 29389                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29390                                  ;	      ; ^M and ^L
 29391                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29392                                  ;	      ; ^O and ^N
 29393                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29394                                  ;	      ; ^Q and ^P
 29395                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29396                                  ;	      ; ^S and ^R
 29397                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29398                                  ;	      ; ^U and ^T
 29399                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29400                                  ;	      ; ^W and ^V
 29401                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29402                                  ;	      ; ^Y and ^X
 29403                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29404                                  ;	      ; ESC and ^Z
 29405                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29406                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29408                                  ;	      ; ^_ and ^^
 29409                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29410                                  ;	      ; ! and SPACE
 29411                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 29412                                  ;	      ; # and "
 29413                                  ;	 db   LOW (NOT FFCB+FCHK)
 29414                                  ;	      ; $ - )
 29415                                  ;	 db   3 dup (0FFh)
 29416                                  ;	      ; + and *
 29417                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 29418                                  ;	      ; - and '
 29419                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 29420                                  ;	      ; / and .
 29421                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 29422                                  ;	      ; 0 - 9
 29423                                  ;	 db   5 dup (0FFh)
 29424                                  ;	      ; ; and :
 29425                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29426                                  ;	      ; = and <
 29427                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29428                                  ;	      ; ? and >
 29429                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29430                                  ;	      ; A - Z
 29431                                  ;	 db   13 dup (0FFh)
 29432                                  ;	      ; \ and [
 29433                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 29434                                  ;	      ; ^ and ]
 29435                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29436                                  ;	      ; _ - {
 29437                                  ;	 db   15 dup (0FFh)
 29438                                  ;	      ; } and |
 29439                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29440                                  
 29441                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 29442                                  ;					; character in the table
 29443                                  
 29444                                  ;FCHK	equ 1		; normal name char, no chks needed
 29445                                  ;FDELIM	equ 2		; is a delimiter
 29446                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 29447                                  ;FFCB	equ 8		; is valid in an FCB
 29448                                  
 29449                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29450                                  ;----------------------------------------------------------------------------
 29451                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 29452                                  
 29453                                  CharType: ; 63 bytes
 29454 00004EF1 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 29455 00004EF9 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 29456 00004F01 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 29457 00004F09 FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 29458 00004F11 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 29459 00004F19 FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 29460 00004F21 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 29461 00004F29 FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 29462                                  
 29463                                  CharType_last equ ($ - CharType) * 2
 29464                                  
 29465                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 29466                                  ;----------------------------------------------------------------------------
 29467                                  ;CharType:
 29468                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29469                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29470                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29471                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29472                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 29473                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 29474                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29475                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 29476                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29477                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29478                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29479                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 29480                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29481                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29482                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29483                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 29484                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29485                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29486                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29487                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29488                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29489                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29490                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29491                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29492                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29493                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29494                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29495                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29496                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29497                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29498                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29499                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29500                                  
 29501                                  ;hkn; Table	ENDS
 29502                                  
 29503                                  ;ENDIF
 29504                                  
 29505                                  ; 20/05/2019 - Retro DOS v4.0
 29506                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 29507                                  
 29508                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29509                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 29510                                  
 29511                                  ;----------------------------------------------------------------------------
 29512                                  ;
 29513                                  ; Procedure Names : GetLet, UCase, GetLet3
 29514                                  ;
 29515                                  ; These routines take a character, convert it to upper case, and check
 29516                                  ; for delimiters.  Three different entry points:
 29517                                  ;	GetLet -  DS:[SI] = character to convert
 29518                                  ;	UCase  -  AL = character to convert
 29519                                  ;	GetLet3 - AL = character
 29520                                  ;		  [BX] = translation table to use
 29521                                  ;
 29522                                  ;	Exit (in all cases) : AL = upper case character
 29523                                  ;			      CY set if char is control char other than TAB
 29524                                  ;			      ZF set if char is a delimiter
 29525                                  ;	Uses : AX, flags
 29526                                  ;
 29527                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 29528                                  ; inline version.  Return with carry set is only possible in the inline
 29529                                  ; version. The table lookup version is the one in use.
 29530                                  ;
 29531                                  ;----------------------------------------------------------------------------
 29532                                  
 29533                                  ; This entry point has character at [SI]
 29534                                  
 29535                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 29536                                  GETLET:	
 29537 00004F30 AC                      	LODSB
 29538                                  
 29539                                  ; This entry point has character in AL
 29540                                  
 29541                                  	;entry	UCase
 29542                                  UCase:	
 29543                                  	; 09/08/2018
 29544                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 29545                                  _UCase:
 29546 00004F31 53                      	PUSH	BX
 29547 00004F32 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 29548                                  
 29549                                  ; Convert the character in AL to upper case
 29550                                  
 29551                                  gl_0:
 29552 00004F35 3C61                    	CMP	AL,"a"
 29553 00004F37 7214                    	JB	short gl_2	; Already upper case, go check type
 29554 00004F39 3C7A                    	CMP	AL,"z"
 29555 00004F3B 7702                    	JA	short gl_1
 29556 00004F3D 2C20                    	SUB	AL,20H		; Convert to upper case
 29557                                  
 29558                                  ; Map European character to upper case
 29559                                  
 29560                                  gl_1:
 29561 00004F3F 3C80                    	CMP	AL,80H
 29562 00004F41 720A                    	JB	short gl_2	; Not EuroChar, go check type
 29563 00004F43 2C80                    	SUB	AL,80H		; translate to upper case with this index
 29564                                  
 29565                                  	; M048 - Start 
 29566                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 29567                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 29568                                  	; preserve it.
 29569                                  
 29570                                  	; 09/08/2018 - Retro DOS v3.0
 29571                                  	; MSDOS 3.3
 29572                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 29573                                  	;CS	XLAT
 29574                                  
 29575                                  	; 20/05/2019 - Retro DOS v4.0
 29576                                  
 29577                                  	; MSDOS 6.0
 29578 00004F45 1E                      	push	ds
 29579                                  	;getdseg <ds>
 29580 00004F46 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29581 00004F4B D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 29582 00004F4C 1F                      	pop	ds
 29583                                  
 29584                                  	; M048 - End
 29585                                  
 29586                                  ; Now check the type
 29587                                  
 29588                                  ;If TableLook
 29589                                  gl_2:
 29590                                  	; 20/05/2019 - Retro DOS v4.0
 29591 00004F4D 50                      	PUSH	AX
 29592                                  
 29593                                  	; MSDOS 3.3
 29594                                  	;mov	bx,CharType
 29595                                  	;; 09/08/2018
 29596                                  	;;xlat	byte [cs:bx]
 29597                                  	;cs	xlat	
 29598                                  	
 29599                                  	; MSDOS 6.0
 29600 00004F4E E81800                  	CALL	GetCharType	; returns type flags in AL
 29601                                  	
 29602                                  	;test	al,1	
 29603 00004F51 A801                    	TEST	AL,FCHK 	; test for normal character
 29604 00004F53 58                      	POP	AX
 29605                                  
 29606 00004F54 5B                      	POP	BX
 29607 00004F55 C3                      	RETN
 29608                                  
 29609                                  ; This entry has character in AL and lookup table in BX
 29610                                  
 29611                                  	; MSDOS 6.0
 29612                                  ;	;entry GetLet3
 29613                                  GETLET3: ; 10/08/2018
 29614 00004F56 53                      	PUSH	BX
 29615 00004F57 EBDC                    	JMP	short gl_0
 29616                                  ;ELSE
 29617                                  ;
 29618                                  ;gl_2:
 29619                                  ;	POP	BX
 29620                                  ;	CMP	AL,"."
 29621                                  ;	retz
 29622                                  ;	CMP	AL,'"'
 29623                                  ;	retz
 29624                                  ;	CALL	PATHCHRCMP
 29625                                  ;	retz
 29626                                  ;	CMP	AL,"["
 29627                                  ;	retz
 29628                                  ;	CMP	AL,"]"
 29629                                  ;	retz
 29630                                  ;ENDIF
 29631                                  
 29632                                  ;---------------------------------------------------------------------
 29633                                  ;
 29634                                  ; DELIM - check if character is a delimiter
 29635                                  ;	Entry : AX = character to check
 29636                                  ;	Exit  : ZF set if character is not a delimiter
 29637                                  ;	Uses  : Flags
 29638                                  ;
 29639                                  ;--------------------------------------------------------------------
 29640                                  
 29641                                  	;entry	DELIM
 29642                                  DELIM:
 29643                                  ;IF TableLook
 29644                                  	; 20/05/2019 - Retro DOS v4.0
 29645 00004F59 50                      	PUSH	AX
 29646                                  
 29647                                  	; MSDOS 3.3
 29648                                  	;push	bx
 29649                                  	;mov	bx,CharType
 29650                                  	;;09/08/2018
 29651                                  	;;xlat	byte [cs:bx]
 29652                                  	;cs	xlat
 29653                                  	;pop	bx
 29654                                  
 29655                                  	; MSDOS 6.0
 29656 00004F5A E80C00                  	CALL	GetCharType
 29657                                  	
 29658                                  	;test	al,2
 29659 00004F5D A802                    	TEST	AL,FDELIM
 29660 00004F5F 58                      	POP	AX
 29661 00004F60 C3                      	RETN
 29662                                  ;ELSE
 29663                                  ;	CMP	AL,":"
 29664                                  ;	retz
 29665                                  ;
 29666                                  ;	CMP	AL,"<"
 29667                                  ;	retz
 29668                                  ;	CMP	AL,"|"
 29669                                  ;	retz
 29670                                  ;	CMP	AL,">"
 29671                                  ;	retz
 29672                                  ;
 29673                                  ;	CMP	AL,"+"
 29674                                  ;	retz
 29675                                  ;	CMP	AL,"="
 29676                                  ;	retz
 29677                                  ;	CMP	AL,";"
 29678                                  ;	retz
 29679                                  ;	CMP	AL,","
 29680                                  ;	retz
 29681                                  ;ENDIF
 29682                                  
 29683                                  ;-------------------------------------------------------------------------
 29684                                  ;
 29685                                  ;  SPCHK - checks to see if a character is a space or equivalent
 29686                                  ;	Entry : AL = character to check
 29687                                  ;	Exit  : ZF set if character is a space
 29688                                  ;	Uses  : flags
 29689                                  ;
 29690                                  ;-------------------------------------------------------------------------
 29691                                  
 29692                                  	;entry SPCHK
 29693                                  SPCHK:
 29694                                  ;IF TableLook
 29695                                  	; 20/05/2019 - Retro DOS v4.0
 29696 00004F61 50                      	PUSH	AX
 29697                                  
 29698                                  	; MSDOS 3.3
 29699                                  	;push	bx
 29700                                  	;mov	bx,CharType
 29701                                  	;; 09/08/2018
 29702                                  	;;xlat	byte [cs:bx]
 29703                                  	;cs	xlat
 29704                                  	;pop	bx
 29705                                  
 29706                                  	; MSDOS 6.0
 29707 00004F62 E80400                  	CALL	GetCharType
 29708                                  	
 29709                                  	;test	al,4
 29710 00004F65 A804                    	TEST	AL,FSPCHK
 29711 00004F67 58                      	POP	AX
 29712 00004F68 C3                      	RETN
 29713                                  ;ELSE
 29714                                  ;	CMP	AL,9		; Filter out tabs too
 29715                                  ;	retz
 29716                                  ;; WARNING! " " MUST be the last compare
 29717                                  ;	CMP	AL," "
 29718                                  ;	return
 29719                                  ;ENDIF
 29720                                  
 29721                                  ;-------------------------------------------------------------------------
 29722                                  ;
 29723                                  ;  GetCharType - return flag bits indicating character type
 29724                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 29725                                  ;	defined above at label CharType.
 29726                                  ;
 29727                                  ;	Entry : AL = character to return type flags for
 29728                                  ;	Exit  : AL = type flags
 29729                                  ;	Uses  : AL, flags
 29730                                  ;
 29731                                  ;-------------------------------------------------------------------------
 29732                                  
 29733                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29734                                  
 29735                                  	; 20/05/2019 - Retro DOS v4.0
 29736                                  	; MSDOS 6.0
 29737                                  GetCharType:
 29738                                  	;cmp	al,7Eh
 29739 00004F69 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 29740 00004F6B 7316                    	jae	short gct_90		; return standard value
 29741                                  
 29742 00004F6D 53                      	push	bx
 29743 00004F6E BB[F14E]                	mov	bx,CharType		; load lookup table
 29744 00004F71 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 29745                                  	;xlat	cs:[bx] 		; get flags
 29746 00004F73 2ED7                    	cs	xlat	
 29747 00004F75 5B                      	pop	bx
 29748                                  
 29749                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 29750                                  ; we have to shift the flags down to the low nibble
 29751                                  
 29752 00004F76 7308                    	jnc	short gct_80		; carry clear, no shift needed
 29753                                  
 29754 00004F78 D0E8                    	shr	al,1			; we want high nibble, shift it down
 29755 00004F7A D0E8                    	shr	al,1
 29756 00004F7C D0E8                    	shr	al,1
 29757 00004F7E D0E8                    	shr	al,1
 29758                                  gct_80:
 29759 00004F80 240F                    	and	al,0Fh			; clear the unused nibble
 29760 00004F82 C3                      	retn
 29761                                  gct_90:
 29762 00004F83 B00F                    	mov	al,0Fh			; set all flags
 29763 00004F85 C3                      	retn
 29764                                  
 29765                                  ;----------------------------------------------------------------------------
 29766                                  ;
 29767                                  ; Procedure : PATHCHRCMP
 29768                                  ;
 29769                                  ;----------------------------------------------------------------------------
 29770                                  
 29771                                  PATHCHRCMP:
 29772 00004F86 3C2F                    	CMP	AL,'/'
 29773 00004F88 7606                    	JBE	short PathRet
 29774 00004F8A 3C5C                    	CMP	AL,'\'
 29775 00004F8C C3                      	retn
 29776                                  GotFor:
 29777 00004F8D B05C                    	MOV	AL,'\'
 29778 00004F8F C3                      	retn
 29779                                  PathRet:
 29780 00004F90 74FB                    	JZ	short GotFor
 29781 00004F92 C3                      	retn
 29782                                  
 29783                                  ;============================================================================
 29784                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 29785                                  ;============================================================================
 29786                                  ; 30/07/2018 - Retro DOS v3.0
 29787                                  ; 29/04/2019 - Retro DOS v4.0
 29788                                  
 29789                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 29790                                  
 29791                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 29792                                  
 29793                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 29794                                  ;	NAME	IBMCTRLC
 29795                                  
 29796                                  ;**	Low level routines for detecting special characters on CON input,
 29797                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 29798                                  ;	process termination code, and the INT 0 divide overflow handler.
 29799                                  ;
 29800                                  ;	FATAL
 29801                                  ;	FATAL1
 29802                                  ;	reset_environment
 29803                                  ;	DSKSTATCHK
 29804                                  ;	SPOOLINT
 29805                                  ;	STATCHK
 29806                                  ;	CNTCHAND
 29807                                  ;	DIVOV
 29808                                  ;	CHARHARD
 29809                                  ;	HardErr
 29810                                  ;
 29811                                  ;	Revision history:
 29812                                  ;
 29813                                  ;	    AN000	version 4.0   Jan 1988
 29814                                  ;	    A002	PTM    -- dir >lpt3 hangs
 29815                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 29816                                  ;
 29817                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 29818                                  ;	      flags register. In order to return to user normally DOS used to
 29819                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 29820                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 29821                                  ;
 29822                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 29823                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 29824                                  ;	      charhard.
 29825                                  
 29826                                  ; 29/04/2019 - Retro DOS v4.0
 29827                                  	; MSDOS 6.0
 29828                                  ;		public	LowInt23Addr		
 29829                                  LowInt23Addr: ;	LABEL	DWORD
 29830 00004F93 [E710]0000              	DW	LowInt23, 0
 29831                                  
 29832                                  ;		public	LowInt24Addr
 29833                                  LowInt24Addr: ;	LABEL	DWORD
 29834 00004F97 [FB10]0000              	DW	LowInt24, 0
 29835                                  
 29836                                  ;		public	LowInt28Addr
 29837                                  LowInt28Addr: ;	LABEL	DWORD
 29838 00004F9B [0F11]0000              	DW	LowInt28, 0
 29839                                  
 29840                                  ;Break	<Checks for ^C in CON I/O>
 29841                                  
 29842                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29843                                  ; 05/05/2019 - Retro DOS v4.0
 29844                                  
 29845                                  ;---------------------------------------------------------------------------
 29846                                  ;
 29847                                  ; Procedure Name : DSKSTATCHK
 29848                                  ;
 29849                                  ; Check for ^C if only one level in
 29850                                  ;
 29851                                  ;---------------------------------------------------------------------------
 29852                                  
 29853                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 29854                                  
 29855                                  	; 29/02/2024 - Retro DOS v4.2
 29856                                  
 29857                                  DSKSTATCHK:        
 29858                                  	;CMP	BYTE [INDOS],1
 29859 00004F9F 36803E[2103]01          	CMP	BYTE [SS:INDOS],1 ; 15/03/2018
 29860                                  	;retnz			; Do NOTHING
 29861                                  	; 16/12/2022
 29862 00004FA5 7537                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018
 29863                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29864                                  	;jz	short _RET37 ; dskstatchk1
 29865                                  	;retn
 29866                                  ;_RET37:
 29867                                  ;dskstatchk1:
 29868 00004FA7 51                      	PUSH    CX
 29869 00004FA8 06                      	PUSH    ES
 29870 00004FA9 53                      	PUSH    BX
 29871 00004FAA 1E                      	PUSH    DS
 29872 00004FAB 56                      	PUSH    SI
 29873                                          
 29874                                  	;PUSH	CS
 29875                                  	;POP	ES
 29876                                  	;PUSH	CS
 29877                                  	;POP	DS
 29878                                  
 29879 00004FAC 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 29880 00004FAE 8EC3                    	MOV	ES,BX		; for deviocall2
 29881 00004FB0 8EDB                    	MOV	DS,BX
 29882                                  
 29883                                  	; 16/12/2022
 29884                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29885                                  
 29886                                  	; 05/05/2019
 29887                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 29888                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 29889                                  	;mov	word [ss:DSKSTST],0
 29890                                  
 29891                                  	; 16/12/2022
 29892                                  	; 25/06/2019
 29893 00004FB2 C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 29894 00004FB7 C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 29895 00004FBC C706[9503]0000          	mov	word [DSKSTST],0
 29896                                  
 29897 00004FC2 BB[9203]                        MOV     BX,DSKSTCALL
 29898                                  
 29899                                  	;LDS	SI,[ss:BCON]
 29900                                          ; 25/062019
 29901 00004FC5 C536[3200]              	lds	si,[BCON]
 29902                                  
 29903                                  ; 16/12/2022
 29904                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29905                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 29906                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 29907                                  ;	mov	word [ss:DSKSTST],0
 29908                                  ;	mov	bx,DSKSTCALL
 29909                                  ;	lds	si,[ss:BCON]
 29910                                  
 29911 00004FC9 E898F5                  	CALL	DEVIOCALL2
 29912                                  
 29913                                  	; 29/02/2024
 29914 00004FCC 1E                      	push	ds ; *
 29915 00004FCD 16                      	push	ss
 29916 00004FCE 1F                      	pop	ds
 29917                                  
 29918                                   	; 15/03/2018
 29919                                  	;;test	word [ss:DSKSTST],200h
 29920                                          ;TEST	WORD [SS:DSKSTST],STBUI
 29921                                  	; 05/05/2019
 29922                                  	;test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 29923                                  	; 29/02/2024
 29924 00004FCF F606[9603]02            	test	byte [DSKSTST+1],(STBUI>>8) ; 2
 29925 00004FD4 7409                    	jz	short _GotCh		; No characters available
 29926                                  
 29927 00004FD6 30C0                    	XOR	AL,AL			; Set zero
 29928                                  RET36:
 29929                                  	; 29/02/2024
 29930 00004FD8 5E                      	pop	si ; *
 29931                                  	;
 29932 00004FD9 5E                      	POP	SI
 29933 00004FDA 1F                      	POP	DS
 29934 00004FDB 5B                      	POP	BX
 29935 00004FDC 07                      	POP	ES
 29936 00004FDD 59                      	POP	CX
 29937                                  	; 16/12/2022
 29938                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29939                                  _RET37:
 29940 00004FDE C3                      	RETN
 29941                                  
 29942                                  _GotCh:
 29943                                  
 29944                                  ; 29/02/2024
 29945                                  %if 0
 29946                                  	MOV	AL,[SS:DSKCHRET]	; SS override
 29947                                  
 29948                                  	CMP	AL,"C"-"@" ; cmp al,3
 29949                                  	JNZ	SHORT RET36
 29950                                  	MOV	BYTE [SS:DSKSTCOM],DEVRD
 29951                                  	MOV	BYTE [SS:DSKSTCALL],DRDWRHL
 29952                                  	MOV	[SS:DSKCHRET],CL
 29953                                  	; 09/09/2018
 29954                                  	MOV	word [SS:DSKSTST],0
 29955                                  	MOV	word [SS:DSKSTCNT],1
 29956                                  %else
 29957                                  	; 29/02/2024
 29958 00004FDF A0[9F03]                	mov	al,[DSKCHRET]
 29959                                  
 29960 00004FE2 3C03                    	cmp	al,"C"-"@" ; cmp al,3
 29961 00004FE4 75F2                    	jnz	short RET36
 29962                                  
 29963 00004FE6 C606[9403]04            	mov	byte [DSKSTCOM],DEVRD
 29964 00004FEB C606[9203]16            	mov	byte [DSKSTCALL],DRDWRHL
 29965 00004FF0 880E[9F03]              	mov	[DSKCHRET],cl
 29966 00004FF4 C706[9503]0000          	mov	word [DSKSTST],0
 29967 00004FFA C706[A403]0100          	mov	word [DSKSTCNT],1
 29968 00005000 1F                      	pop	ds ; *
 29969                                  %endif
 29970                                  	
 29971 00005001 E860F5                  	CALL	DEVIOCALL2              ; Eat the ^C
 29972                                  
 29973 00005004 5E                              POP     SI
 29974 00005005 1F                              POP     DS
 29975 00005006 5B                              POP     BX                      ; Clean stack
 29976 00005007 07                              POP     ES
 29977 00005008 59                              POP     CX
 29978 00005009 E9CF00                          JMP	CNTCHAND ; 10/08/2018
 29979                                  
 29980                                  	; 05/05/2019
 29981                                  NOSTOP:
 29982                                  	; MSDOS 6.0
 29983 0000500C 3C10                    	CMP	AL,"P"-"@"
 29984 0000500E 7509                    	JNZ	short check_next
 29985                                  				    	; SS override
 29986 00005010 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 29987 00005016 7405                    	JZ	short INCHKJ		; no
 29988                                  check_end:	; 24/09/2023
 29989 00005018 C3                      	retn
 29990                                  check_next:
 29991                                  	;IF	NOT TOGLPRN
 29992                                  	;CMP	AL,"N"-"@"
 29993                                  	;JZ	short INCHKJ
 29994                                  	;ENDIF
 29995                                  
 29996 00005019 3C03                    	CMP	AL,"C"-"@"
 29997                                  	; 24/09/2023
 29998                                  	;JZ	short INCHKJ
 29999                                  ;check_end:
 30000                                  	;retn
 30001 0000501B 75FB                    	jnz	short check_end
 30002                                  
 30003                                  	; 24/09/2023
 30004                                  	; 08/09/2018
 30005                                  INCHKJ:	; 10/08/2018
 30006 0000501D E9A500                  	jmp	INCHK
 30007                                  
 30008                                  	; MSDOS 3.3
 30009                                          ;CMP	AL,"P"-"@"  ; cmp al,16
 30010                                          ;JZ	short INCHKJ
 30011                                  
 30012                                  	; 15/04/2018
 30013                                          ;;IF	NOT TOGLPRN
 30014                                          ;CMP	AL,"N"-"@"
 30015                                          ;JZ	SHORT INCHKJ
 30016                                          ;;ENDIF
 30017                                  	
 30018                                  	;CMP	AL,"C"-"@"  ; cmp al,3
 30019                                          ;JZ	short INCHKJ
 30020                                  	;RETN
 30021                                  
 30022                                  ;	; 08/09/2018
 30023                                  ;INCHKJ:; 10/08/2018
 30024                                  ;	JMP	INCHK
 30025                                  
 30026                                  ;----------------------------------------------------------------------------
 30027                                  ;
 30028                                  ; Procedure Name : SpoolInt
 30029                                  ;
 30030                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 30031                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 30032                                  ; the middle of an INT 24.
 30033                                  ;
 30034                                  ;----------------------------------------------------------------------------
 30035                                  
 30036                                  SPOOLINT:
 30037 00005020 9C                      	PUSHF
 30038                                  	; 15/03/2018
 30039 00005021 36803E[5803]00          	CMP	BYTE [SS:IDLEINT],0	; SS override
 30040 00005027 7423                    	JZ	SHORT POPFRET
 30041 00005029 36803E[2003]00          	CMP	BYTE [SS:ERRORMODE],0
 30042 0000502F 751B                    	JNZ	SHORT POPFRET		; No spool ints in error mode
 30043                                  
 30044                                  	; 30/07/2018
 30045                                  
 30046                                  	; Note that we are going to allow an external program to issue system 
 30047                                  	; calls at this time. We MUST preserve IdleInt across this.
 30048                                  
 30049 00005031 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 30050                                  
 30051                                  	; 05/05/2019 - Retro DOS v4.0
 30052                                   
 30053                                  	; MSDOS 6.0
 30054 00005036 36803E[1112]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 30055 0000503C 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 30056 0000503E CD28                    	INT	int_spooler  ; int 28h	; N: Execute user int 28 handler
 30057 00005040 EB05                    	jmp	short spool_ret_addr
 30058                                  
 30059                                  do_low_int28:
 30060                                  	;call	far [ss:LowInt28Addr]
 30061 00005042 2EFF1E[9B4F]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 30062                                  
 30063                                  spool_ret_addr:
 30064                                  	;INT	int_spooler		; INT 28h
 30065                                  
 30066 00005047 368F06[5803]            	POP	WORD [SS:IDLEINT]
 30067                                  POPFRET:
 30068 0000504C 9D                      	POPF
 30069                                  _RET18:  
 30070 0000504D C3                      	RETN
 30071                                  
 30072                                  ; 05/05/2019 - Retro DOS v4.0
 30073                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 30074                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30075                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 30076                                  
 30077                                  ;----------------------------------------------------------------------------
 30078                                  ;
 30079                                  ; Procedure Name : STATCHK
 30080                                  ;
 30081                                  ;----------------------------------------------------------------------------
 30082                                  
 30083                                  STATCHK:
 30084 0000504E E84EFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 30085                                                                          ; input redirection
 30086 00005051 53                              PUSH    BX
 30087 00005052 31DB                            XOR     BX,BX
 30088 00005054 E837E5                          CALL	GET_IO_SFT
 30089 00005057 5B                              POP     BX
 30090 00005058 72F3                            JC      SHORT _RET18
 30091                                  
 30092 0000505A B401                            MOV     AH,1
 30093 0000505C E836F3                          CALL	IOFUNC
 30094 0000505F 74BF                            JZ      SHORT SPOOLINT
 30095 00005061 3C13                            CMP     AL,'S'-'@'
 30096 00005063 75A7                            JNZ     SHORT NOSTOP
 30097                                  
 30098                                  	; 05/05/2019
 30099                                  	; MSDOS 6.0			; SS override
 30100 00005065 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 30101 0000506B 75AB                    	JNZ	short check_end		; AN000; yes
 30102                                  
 30103 0000506D 30E4                            XOR     AH,AH
 30104 0000506F E823F3                          CALL	IOFUNC                  ; Eat Cntrl-S
 30105 00005072 EB4A                            JMP     SHORT PAUSOSTRT
 30106                                  PRINTOFF:
 30107                                  PRINTON:
 30108 00005074 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 30109                                  
 30110                                  	; 30/07/2018 - Retro DOS v3.0
 30111 00005079 53                      	PUSH	BX
 30112 0000507A BB0400                  	MOV	BX,4
 30113 0000507D E80EE5                  	call	GET_IO_SFT
 30114 00005080 5B                      	POP	BX
 30115 00005081 72CA                    	jc	short _RET18
 30116 00005083 06                      	PUSH	ES
 30117 00005084 57                      	PUSH	DI
 30118 00005085 1E                      	PUSH	DS
 30119 00005086 07                      	POP	ES
 30120 00005087 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 30121                                  	;test	word [es:di+5],800h
 30122                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 30123                                  	; 05/05/2019
 30124 00005089 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 30125 0000508E 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 30126                                  
 30127                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 30128                                  					; See if allowed
 30129 00005090 50                      	push	ax
 30130 00005091 B82611                  	mov	ax,1126h
 30131 00005094 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 30132                                  			; Return: CF set on error, AX = error code
 30133                                  			; STACK unchanged
 30134 00005096 58                      	pop	ax
 30135                                  
 30136 00005097 730F                    	JNC	short NORM_PR 		; Echo is OK
 30137                                  
 30138                                  					; SS override
 30139 00005099 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 30140                                  
 30141                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 30142                                  
 30143 0000509F 50                      	push    ax
 30144 000050A0 B82411                  	mov     ax,1124h
 30145 000050A3 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 30146                                  			; ES:DI -> SFT, SS = DOS CS
 30147 000050A5 58                      	pop     ax
 30148                                  
 30149 000050A6 EB10                    	JMP	SHORT RETP6
 30150                                  NORM_PR:
 30151 000050A8 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 30152 000050AE 7505                    	JNZ	short PRNOPN
 30153 000050B0 E838F4                  	call	DEV_CLOSE_SFT
 30154 000050B3 EB03                    	JMP	SHORT RETP6
 30155                                  PRNOPN:
 30156 000050B5 E82BF4                  	call	DEV_OPEN_SFT
 30157                                  RETP6:
 30158 000050B8 5F                      	POP	DI
 30159 000050B9 07                      	POP	ES
 30160                                  STATCHK_RETN:
 30161 000050BA C3                              RETN
 30162                                  PAUSOLP:
 30163 000050BB E862FF                          CALL    SPOOLINT
 30164                                  PAUSOSTRT:
 30165 000050BE B401                            MOV     AH,1
 30166 000050C0 E8D2F2                          CALL	IOFUNC
 30167 000050C3 74F6                            JZ      SHORT PAUSOLP
 30168                                  INCHK:
 30169 000050C5 53                              PUSH    BX
 30170 000050C6 31DB                            XOR     BX,BX
 30171 000050C8 E8C3E4                          CALL	GET_IO_SFT
 30172 000050CB 5B                              POP     BX
 30173 000050CC 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 30174 000050CE 30E4                            XOR     AH,AH
 30175 000050D0 E8C2F2                          CALL	IOFUNC
 30176                                  	; 30/07/2018
 30177                                  	; MSDOS 3.3
 30178                                          ;CMP	AL,'P'-'@' ;cmp al,16
 30179                                          ;JNZ	SHORT NOPRINT
 30180                                  
 30181                                  	;cmp	byte [SS:SCAN_FLAG],0
 30182                                  	;JZ	SHORT PRINTON	
 30183                                  	;mov	byte [ss:SCAN_FLAG],0
 30184                                  
 30185                                  	; 05/05/2019
 30186                                  	; MSDOS 6.0
 30187 000050D3 3C10                    	CMP	AL,"P"-"@"
 30188                                  	;;;;  7/14/86	ALT_Q key fix
 30189 000050D5 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 30190                                  ;NOPRINT:	
 30191                                  	;IF	NOT TOGLPRN
 30192                                  	;CMP	AL,"N"-"@"
 30193                                  	;JZ	short PRINTOFF
 30194                                  	;ENDIF
 30195 000050D7 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 30196                                  	;retnz
 30197 000050D9 75DF                    	jnz	short STATCHK_RETN
 30198                                  
 30199                                  	; !! NOTE: FALL THROUGH !!
 30200                                  
 30201                                  ;---------------------------------------------------------------------------
 30202                                  ;
 30203                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 30204                                  ;
 30205                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 30206                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 30207                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 30208                                  ; processing to continue; 2) the original interrupt return address to the code
 30209                                  ; that performed the function call in the first place. If the user CTRL-C
 30210                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 30211                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 30212                                  ; is simulated.
 30213                                  ;
 30214                                  ;---------------------------------------------------------------------------
 30215                                  
 30216                                  CNTCHAND:
 30217                                  	; MSDOS 6.0			; SS override
 30218                                  					; AN002; from RAWOUT
 30219                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 30220                                  	;JNZ	short around_deadlock 	; AN002;
 30221                                  
 30222                                  	; 05/05/2019 - Retro DOS v4.0
 30223                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 30224 000050DB 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 30225 000050E1 7508                    	JNZ	short around_deadlock 	; AN002;
 30226                                  
 30227 000050E3 B003                            MOV     AL,3			; Display "^C"
 30228 000050E5 E8EDC5                          CALL	BUFOUT
 30229 000050E8 E888C4                          CALL	CRLF
 30230                                  around_deadlock:
 30231 000050EB 16                              PUSH    SS
 30232 000050EC 1F                              POP     DS
 30233 000050ED 803E[5703]00                    CMP     BYTE [CONSWAP],0
 30234 000050F2 7403                            JZ      SHORT NOSWAP
 30235 000050F4 E82BE1                          CALL	SWAPBACK
 30236                                  NOSWAP:
 30237 000050F7 FA                      	CLI				; Prepare to play with stack
 30238 000050F8 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 30239 000050FC 8B26[8405]              	MOV	SP,[USER_SP]
 30240 00005100 E848B3                          CALL	restore_world       ; User registers now restored
 30241                                  
 30242                                  	; 30/07/2018 - Retro DOS v3.0 
 30243                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 30244                                          ; 14/03/2018 - Retro DOS v2.0
 30245                                  	;MOV	BYTE [CS:INDOS],0	
 30246                                          ;MOV	BYTE [CS:ERRORMODE],0
 30247                                          ;MOV	[CS:ConC_Spsave],SP
 30248                                  	;clc	;30/07/2018
 30249                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 30250                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 30251                                  			; Return: return via RETF 2 with CF set
 30252                                  			; DOS will abort program with errorlevel 0
 30253                                  			; else
 30254                                  			; interrupted DOS call continues
 30255                                  
 30256                                  	; 05/05/2019 - Retro DOS v4.0
 30257                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 30258                                  
 30259                                  	; CS was used to address these variables. We have to use DOSDATA
 30260                                  	
 30261 00005103 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 30262                                  			; (pop es, after 'call restore_world')	
 30263 00005104 1E                      	push	ds
 30264                                  	;getdseg <ds>			; ds -> dosdata
 30265 00005105 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30266 0000510A C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 30267 0000510F C606[2003]00            	mov	byte [ERRORMODE],0
 30268 00005114 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 30269                                  	; User SP has changed because of push. Adjust for it
 30270 00005118 8306[3203]02            	add	word [ConC_Spsave],2
 30271                                  
 30272 0000511D 803E[1112]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 30273 00005122 1F                       	pop	ds	; restore ds
 30274 00005123 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 30275 00005125 F8                      	CLC				
 30276 00005126 CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 30277 00005128 EB06                    	jmp	short ctrlc_ret_addr
 30278                                  
 30279                                  	; 05/05/2019
 30280                                  do_low_int23:
 30281 0000512A F8                      	clc
 30282 0000512B 2EFF1E[934F]            	call	far [cs:LowInt23Addr]	
 30283                                  
 30284                                  	; 30/07/2018 
 30285                                  
 30286                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 30287                                  
 30288                                  ; The user has returned to us. The circumstances we allow are:
 30289                                  ;
 30290                                  ;   IRET	We retry the operation by redispatching the system call
 30291                                  ;   CLC/RETF	POP the stack and retry
 30292                                  ;   ... 	Exit the current process with ^C exit
 30293                                  ;
 30294                                  ; User's may RETURN to us and leave interrupts on. 
 30295                                  ; Turn 'em off just to be sure
 30296                                  
 30297                                  ctrlc_ret_addr: ; 05/05/2019
 30298                                  
 30299 00005130 FA                      	CLI
 30300                                  
 30301                                  	; MSDOS 3.3 
 30302                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 30303                                  	;PUSHF				; and the flags (maybe new call)
 30304                                  	;POP	AX
 30305                                  
 30306                                  	; 05/05/2019
 30307                                  	; MSDOS 6.0
 30308                                  
 30309                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 30310                                  
 30311 00005131 50                      	push	ax
 30312 00005132 8CD8                    	mov	ax,ds
 30313                                  	;getdseg <ds>			; ds -> dosdata
 30314 00005134 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30315 00005139 A3[0A0D]                	mov	[TEMPSEG],ax
 30316 0000513C 58                      	pop	ax
 30317 0000513D A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 30318 00005140 9C                      	pushf				; and the flags (maybe new call)
 30319 00005141 58                      	pop	ax
 30320                                  
 30321                                  ; See if the input stack is identical to the output stack
 30322                                  
 30323                                  	; MSDOS 3.3
 30324                                  	;CMP	SP,[CS:ConC_Spsave]
 30325                                  	;JNZ	SHORT ctrlc_try_new	; current SP not the same as saved SP
 30326                                  
 30327                                  	; MSDOS 6.0
 30328 00005142 3B26[3203]              	CMP	SP,[ConC_Spsave]
 30329 00005146 750A                    	JNZ	SHORT ctrlc_try_new	; current SP not the same as saved SP
 30330                                  
 30331                                  ; Repeat the operation by redispatching the system call.
 30332                                  
 30333                                  ctrlc_repeat:
 30334                                  	; MSDOS 3.3
 30335                                  	;MOV	AX,[CS:USER_IN_AX]
 30336                                  	; 05/05/2019
 30337                                  	; MSDOS 6.0
 30338 00005148 A1[3A03]                	mov	ax,[USER_IN_AX]
 30339 0000514B 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 30340                                  	; MSDOS 3.3 & MSDOS 6.0 
 30341                                  	;transfer COMMAND
 30342                                  COMMANDJ:
 30343 0000514F E9B6B1                  	JMP	COMMAND
 30344                                  
 30345                                  ; The current SP is NOT the same as the input SP. Presume that he 
 30346                                  ; RETF'd leaving some flags on the stack and examine the input
 30347                                  
 30348                                  ctrlc_try_new:
 30349                                  	; 29/02/2024
 30350                                  	;ADD	SP,2			; pop those flags
 30351                                  	;
 30352                                  	;;test	ax,1
 30353                                  	;TEST	AX,f_Carry		; did he return with carry?
 30354 00005152 A801                    	test	al,f_Carry ; test al,1
 30355                                  	;
 30356                                  	; 29/02/2024
 30357 00005154 58                      	pop	ax  ; (PCDOS 7.1 IBMDOS.COM)
 30358                                  	;
 30359 00005155 74F1                    	JZ	short ctrlc_repeat	; no carry set, just retry
 30360                                  
 30361                                  	; MSDOS 6.0
 30362 00005157 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 30363                                  
 30364                                  	; Well...  time to abort the user.  
 30365                                  	; Signal a ^C exit and use the EXIT system call..
 30366                                  
 30367                                  ctrlc_abort:
 30368                                  	; MSDOS 3.3
 30369                                          ;;MOV	AX,(EXIT SHL 8) + 0
 30370                                          ;MOV	AX,(EXIT*256) + 0 ; 4C00h
 30371                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 30372                                          ;transfer COMMAND	    ; give up by faking $EXIT
 30373                                  	;;JMP	SHORT COMMANDJ
 30374                                  	;JMP	COMMAND
 30375                                  
 30376                                  	; 05/05/2019 - Retro DOS v4.0
 30377                                  	; MSDOS 6.0
 30378 0000515B B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 30379 0000515E 1E                      	push	ds
 30380                                  	;getdseg <ds>			; ds -> dosdata
 30381 0000515F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 30382 00005164 C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 30383 00005169 1F                      	pop	ds
 30384                                  	;transfer COMMAND		; give up by faking $EXIT
 30385 0000516A EBE3                    	JMP	SHORT COMMANDJ
 30386                                  	;JMP	COMMAND
 30387                                  
 30388                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 30389                                  ;----------------------------------------------------------------------------
 30390                                  ;
 30391                                  ; Procedure Name : DIVOV
 30392                                  ;
 30393                                  ; Default handler for division overflow trap
 30394                                  ;
 30395                                  ;----------------------------------------------------------------------------
 30396                                  
 30397                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30398                                  DIVOV: 
 30399                                  	; 05/05/2019 - Retro DOS v4.0
 30400                                  	; 30/07/2018
 30401                                  	; 07/07/2018 - Retro DOS v3.0
 30402 0000516C BE[9709]                	mov	si,DIVMES
 30403 0000516F 2E8B1E[AA09]            	mov	bx,[cs:DivMesLen]
 30404                                  	;mov	ax,cs
 30405                                  	;mov	ss,ax
 30406                                  	; 05/05/2019
 30407                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 30408 00005174 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 30409 00005179 BC[A007]                	mov     sp,AUXSTACK
 30410                                  	;call	RealDivOv ; MSDOS 3.3
 30411 0000517C E80200                  	call	_OUTMES ; MSDOS 6.0
 30412 0000517F EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 30413                                  
 30414                                  ; 30/07/2018
 30415                                  
 30416                                  ; MSDOS 6.0
 30417                                  ;---------------------------------------------------------------------------
 30418                                  ;
 30419                                  ; Procedure Name : OutMes
 30420                                  ;
 30421                                  ;
 30422                                  ; OutMes: perform message output
 30423                                  ; Inputs:   SS:SI points to message
 30424                                  ;	    BX has message length
 30425                                  ; Outputs:  message to BCON
 30426                                  ;
 30427                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30428                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30429                                  ;NB. This procedure is called only from DIVOV. -SR
 30430                                  ;
 30431                                  ;---------------------------------------------------------------------------
 30432                                  
 30433                                  ;MSDOS 3.3
 30434                                  ;---------------------------------------------------------------------------
 30435                                  ; RealDivOv: perform actual divide overflow stuff.
 30436                                  ; Inputs:   none
 30437                                  ; Outputs:  message to BCON
 30438                                  ;---------------------------------------------------------------------------
 30439                                  
 30440                                  	; 05/05/2019 - Retro DOS v4.0
 30441                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 30442                                  
 30443                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30444                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 30445                                  
 30446                                  ;---------------------------------------------------------------------------
 30447                                  ;
 30448                                  ; Procedure Name : OutMes
 30449                                  ;
 30450                                  ; OutMes: perform message output
 30451                                  ; Inputs:   SS:SI points to message
 30452                                  ;	    BX has message length
 30453                                  ; Outputs:  message to BCON
 30454                                  ;
 30455                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30456                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30457                                  ;NB. This procedure is called only from DIVOV. -SR
 30458                                  ;
 30459                                  ;---------------------------------------------------------------------------
 30460                                  
 30461                                  	; 30/07/2018
 30462                                  	; MSDOS 6.0
 30463                                  _OUTMES:
 30464                                  	; MSDOS 3.3
 30465                                  ;RealDivOv:
 30466                                  	; 07/07/2018 - Retro DOS v3.0
 30467                                          ;Context ES
 30468 00005181 16                      	push	ss ; 05/05/2019
 30469                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 30470 00005182 07                      	POP	ES
 30471                                          ;Context DS
 30472 00005183 16                      	push	ss ; 05/05/2019	
 30473                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 30474 00005184 1F                      	POP	DS
 30475 00005185 C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 30476 0000518A C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 30477 0000518F C706[9503]0000                  MOV     WORD [DSKSTST],0
 30478                                  	; BX = [DivMesLen] = 19
 30479 00005195 891E[A403]                      MOV     [DSKSTCNT],BX
 30480 00005199 BB[9203]                        MOV     BX,DSKSTCALL
 30481 0000519C 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 30482                                  	; 08/09/2018
 30483                                  	;mov	[DEVIOBUF_PTR],si
 30484                                  	; MSDOS 6.0
 30485                                  					; CS is used for string, fill in 
 30486                                  					; segment address 
 30487                                  	;mov	[DOSSEG_INIT],cs ; 29/02/2024
 30488 000051A0 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 30489                                  
 30490 000051A4 C536[3200]                      LDS     SI,[BCON]
 30491 000051A8 E8B9F3                          CALL	DEVIOCALL2
 30492                                  
 30493                                  	;; 14/03/2018
 30494                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 30495                                  	;; 08/09/2018
 30496                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 30497                                          ;MOV	WORD [CS:DSKSTCNT],1
 30498                                          
 30499                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30500                                  
 30501                                  	; ES still points to DOSDATA. ES is
 30502                                  					; not destroyed by deviocall2. So use
 30503                                  					; ES override.
 30504                                  
 30505 000051AB 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 30506 000051B2 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 30507                                  
 30508 000051B9 C3                      	RETN
 30509                                  
 30510                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 30511                                  ;---------------------------------------------------------------------------
 30512                                  ;
 30513                                  ; Procedure Name : CHARHARD
 30514                                  ;
 30515                                  ;
 30516                                  ; Character device error handler
 30517                                  ; Same function as HARDERR
 30518                                  ;
 30519                                  ;---------------------------------------------------------------------------
 30520                                  
 30521                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30522                                  CHARHARD:
 30523                                  	; 05/05/2019 - Retro DOS v4.0
 30524                                  	; 30/07/2018
 30525                                  	; 08/07/2018 - Retro DOS v3.0
 30526                                  
 30527                                  	; MSDOS 6.0
 30528                                  		   			; M024 - start
 30529 000051BA 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 30530                                  	;jne	short @f		; Y: allow fail
 30531 000051C0 750B                    	jne	short chard1
 30532                                  
 30533 000051C2 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 30534                                  
 30535 000051C5 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 30536 000051CB 7503                    	jnz	short ctrlp		; Y: 
 30537                                  ;@@:
 30538                                  chard1:					; M024 - end
 30539                                  	; MSDOS 6.0 & MSDOS 3.3
 30540                                  
 30541                                  ; Character device error handler
 30542                                  ; Same function as HARDERR
 30543                                  
 30544                                  	;or	ah,38h
 30545 000051CD 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 30546                                  ctrlp:			; SS override for Allowed and EXITHOLD
 30547 000051D0 368826[4B03]            	mov	[SS:ALLOWED],ah
 30548                                  
 30549                                  	; 15/03/2018
 30550 000051D5 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 30551 000051DA 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 30552 000051DF 56                              PUSH    SI
 30553                                  	;and	di,0FFh
 30554 000051E0 81E7FF00                        AND     DI,STECODE
 30555 000051E4 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 30556 000051E6 E86400                          CALL    FATALC
 30557 000051E9 5E                              POP     SI
 30558                                  	;return
 30559 000051EA C3                              RETN
 30560                                  
 30561                                  ;---------------------------------------------------------------------------
 30562                                  ;
 30563                                  ; Procedure Name : HardErr
 30564                                  ;
 30565                                  ; Hard disk error handler. Entry conditions:
 30566                                  ;	DS:BX = Original disk transfer address
 30567                                  ;	DX = Original logical sector number
 30568                                  ;	CX = Number of sectors to go (first one gave the error)
 30569                                  ;	AX = Hardware error code
 30570                                  ;	DI = Original sector transfer count	
 30571                                  ;	ES:BP = Base of drive parameters
 30572                                  ;	[READOP] = 0 for read, 1 for write
 30573                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 30574                                  ; Output:
 30575                                  ;	[FAILERR] will be set if user responded FAIL
 30576                                  ;
 30577                                  ;--------------------------------------------------------------------------
 30578                                  
 30579                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30580                                  HARDERR:
 30581                                  	; 05/05/2019 - Retro DOS v4.0
 30582                                  	; 30/07/2018
 30583                                  	; 08/07/2018 - Retro DOS v3.0
 30584 000051EB 97                      	XCHG    AX,DI			; Error code in DI, count in AX
 30585                                  	;and	di,0FFh
 30586 000051EC 81E7FF00                	AND	DI,STECODE		; And off status bits
 30587                                  	;CMP	DI,WRECODE		; Write Protect Error?
 30588                                  	;cmp	di,0
 30589 000051F0 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 30590 000051F3 750A                    	JNZ	short NOSETWRPERR
 30591 000051F5 50                      	PUSH    AX
 30592                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30593                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30594                                  	;;MOV	AL,[ES:BP+0]
 30595                                  	; 15/12/2022
 30596 000051F6 268A4600                	mov	al,[ES:BP]
 30597                                  		; 15/03/2018
 30598 000051FA 36A2[2203]              	MOV	[SS:WPERR],AL		; Flag drive with WP error
 30599 000051FE 58                      	POP	AX
 30600                                  NOSETWRPERR:
 30601 000051FF 29C8                    	SUB	AX,CX		  ; Number of sectors successfully transferred
 30602 00005201 01C2                    	ADD	DX,AX		  ; First sector number to retry
 30603 00005203 52                      	PUSH    DX
 30604                                  	; 08/07/2018
 30605                                  	;MUL	word [ES:BP+2] 		; Number of bytes transferred
 30606 00005204 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 30607 00005208 5A                      	POP	DX
 30608 00005209 01C3                    	ADD	BX,AX			; First address for retry
 30609 0000520B 30E4                    	XOR	AH,AH			; Flag disk section in error
 30610                                  	;CMP	DX,[ES:BP+6] 		; In reserved area?
 30611 0000520D 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 30612 00005211 721A                    	JB	SHORT ERRINT
 30613 00005213 FEC4                    	INC	AH			; Flag for FAT
 30614                                  	;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 30615                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019
 30616 00005215 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 30617 00005219 7308                    	JAE	short TESTDIR		; No
 30618                                  		; Err in FAT must force recomp of freespace
 30619                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 30620                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 30621 0000521B 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 30622 00005221 EB0A                    	JMP	SHORT ERRINT
 30623                                  TESTDIR:
 30624 00005223 FEC4                    	INC	AH
 30625                                  	;CMP	DX,[ES:BP+0BH]		; In directory?
 30626 00005225 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR]
 30627 00005229 7202                    	JB	SHORT ERRINT
 30628 0000522B FEC4                    	INC	AH			; Must be in data area
 30629                                  ERRINT:
 30630 0000522D D0E4                    	SHL	AH,1			; Make room for read/write bit
 30631 0000522F 360A26[7505]            	OR	AH,[SS:READOP] ; 15/03/2018
 30632                                  
 30633                                  	; 15/08/2018
 30634                                  					; SS override for allowed and EXITHOLD
 30635 00005234 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 30636                                  
 30637                                  	;entry   FATAL
 30638                                  FATAL:
 30639                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30640                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30641                                  	;;MOV	AL,[ES:BP+0]		; Get drive number
 30642                                  	; 15/12/2022
 30643 00005239 268A4600                	MOV	AL,[ES:BP]
 30644                                  
 30645                                  	;entry   FATAL1
 30646                                  FATAL1:  
 30647                                  	; 15/03/2018	
 30648 0000523D 368C06[8205]            	MOV	[SS:EXITHOLD+2],ES
 30649 00005242 36892E[8005]            	MOV	[SS:EXITHOLD],BP	; The only things we preserve
 30650                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 30651                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 30652 00005247 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 30653 0000524B 8CC5                    	MOV	BP,ES		  ; BP:SI points to the device involved
 30654                                  
 30655                                  	; DI has the INT-24-style extended error. We now map the error code
 30656                                  	; for this into the normalized get extended error set by using the
 30657                                  	; ErrMap24 table as a translate table. Note that we translate ONLY
 30658                                  	; the device returned codes and leave all others beyond the look up
 30659                                  	; table alone.
 30660                                  
 30661                                  	; 08/07/2018 - Retro DOS v3.0
 30662                                  FATALC:
 30663 0000524D E89501                  	call	SET_I24_EXTENDED_ERROR
 30664                                  	;cmp	di,0Ch
 30665 00005250 83FF0C                  	CMP	DI,error_I24_gen_failure
 30666 00005253 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 30667 00005255 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 30668                                  					;  Only come via GetExtendedError
 30669                                  ;** ----------------------------------------------------------------
 30670                                  ;
 30671                                  ; Entry point used by REDIRector on Network I 24 errors.
 30672                                  ;
 30673                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 30674                                  ;
 30675                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 30676                                  ;	EXITHOLD set for restore of ES:BP.
 30677                                  ; ------------------------------------------------------------------
 30678                                  	;entry	NET_I24_ENTRY
 30679                                  NET_I24_ENTRY:
 30680                                  GOT_RIGHT_CODE:
 30681 00005258 36803E[2003]00          	CMP	BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 30682 0000525E 7404                    	JZ	SHORT NoSetFail
 30683 00005260 B003                    	MOV	AL,3
 30684 00005262 EB6C                    	JMP	short FailRet
 30685                                  NoSetFail:
 30686 00005264 368926[8805]            	MOV	[SS:CONTSTK],SP		; SS override
 30687 00005269 16                      	PUSH	SS
 30688 0000526A 07                      	POP	ES
 30689                                      
 30690                                  	; Wango!!! We may need to free some user state info... In 
 30691                                  	; particular, we may have locked down a JFN for a user and he may
 30692                                  	; NEVER return to us. Thus,we need to free it here and then
 30693                                  	; reallocate it when we come back.
 30694                                  
 30695 0000526B 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 30696 00005271 740C                    	JZ	short _NoFree
 30697 00005273 1E                      	push	ds
 30698 00005274 56                      	push	si
 30699 00005275 36C536[AE05]            	LDS	SI,[SS:PJFN]
 30700 0000527A C604FF                  	MOV	BYTE [SI],0FFH
 30701 0000527D 5E                      	pop	si
 30702 0000527E 1F                      	pop	ds
 30703                                  
 30704                                  _NoFree:
 30705 0000527F FA                      	CLI
 30706                                  					; Prepare to play with stack
 30707 00005280 36FE06[2003]            	INC	BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 30708 00005285 36FE0E[2103]            	DEC	BYTE [SS:INDOS]		; INT 24 handler might not return
 30709                                  
 30710                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30711                                  
 30712                                  	;; Extended Open hooks
 30713                                  					; AN000;IFS.I24 error disabled
 30714                                  	;test	byte [ss:EXTOPEN_ON],2
 30715 0000528A 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF
 30716 00005290 7404                    	JZ	short i24yes		; AN000;IFS.no
 30717                                  faili24:				; AN000;
 30718 00005292 B003                    	MOV	AL,3			; AN000;IFS.fake fail
 30719 00005294 EB29                    	JMP	short passi24 		; AN000;IFS.exit
 30720                                  i24yes: 				; AN000;
 30721                                  	;; Extended Open hooks
 30722                                  
 30723 00005296 368E16[8605]            	MOV	SS,[SS:USER_SS]
 30724 0000529B 268B26[8405]            	MOV	SP,[ES:USER_SP]	; User stack pointer restored
 30725                                  
 30726                                  	;;int	24h	
 30727                                  	;IN	int_fatal_abort		; Fatal error interrupt vector,
 30728                                  					; must preserve ES
 30729                                  	; 05/05/2019
 30730 000052A0 26803E[1112]00          	cmp	byte [es:DosHasHMA],0	; Q: is dos running in HMA (M021)
 30731 000052A6 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 30732 000052A8 CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 30733                                  					; must preserve ES
 30734 000052AA EB05                    	jmp	short criterr_ret_addr
 30735                                  
 30736                                  do_low_int24:
 30737                                  	; 05/05/2019
 30738                                  	; MSDOS 6.0
 30739 000052AC 2EFF1E[974F]            	call    far [cs:LowInt24Addr]
 30740                                  criterr_ret_addr:
 30741 000052B1 268926[8405]            	MOV	[ES:USER_SP],SP	; restore our stack
 30742 000052B6 268C16[8605]            	MOV	[ES:USER_SS],SS
 30743 000052BB 8CC5                    	MOV	BP,ES
 30744 000052BD 8ED5                    	MOV	SS,BP
 30745                                  passi24:
 30746 000052BF 368B26[8805]            	MOV	SP,[SS:CONTSTK]
 30747 000052C4 36FE06[2103]            	INC	BYTE [SS:INDOS]		; Back in the DOS
 30748 000052C9 36C606[2003]00          	MOV	BYTE [SS:ERRORMODE],0	; Back from INT 24
 30749 000052CF FB                      	STI
 30750                                  FailRet:
 30751 000052D0 36C42E[8005]            	LES	BP,[SS:EXITHOLD]
 30752                                  	
 30753                                  	; 08/07/2018
 30754                                  
 30755                                  	; Triage the user's reply.
 30756                                  
 30757 000052D5 3C01                    	CMP	AL,1
 30758 000052D7 723D                    	JB	short CheckIgnore	; 0 => ignore
 30759 000052D9 7445                    	JZ	short CheckRetry	; 1 => retry
 30760 000052DB 3C03                    	CMP	AL,3			; 3 => fail
 30761 000052DD 7549                    	JNZ	short DoAbort 		; 2, invalid => abort
 30762                                  
 30763                                  	; The reply was fail. See if we are allowed to fail.
 30764                                  
 30765                                  					; SS override for ALLOWED, EXTOPEN_ON,
 30766                                  					; ALLOWED, FAILERR, WPERR, SFN, pJFN
 30767                                  	;test	byte [ss:ALLOWED],8
 30768 000052DF 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 30769 000052E5 7441                    	jz	short DoAbort		; No, do abort
 30770                                  DoFail:
 30771 000052E7 B003                    	MOV	AL,3			; just in case...
 30772                                  					; AN000;EO. I24 error disabled
 30773                                  	; 05/05/2019
 30774                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 30775 000052E9 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 30776 000052EF 7505                    	jnz	short CleanUp 		; AN000;EO. no
 30777                                  	
 30778 000052F1 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 30779                                  CleanUp:
 30780 000052F6 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 30781 000052FC 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 30782                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30783                                  	;jnz	short CleanUp2
 30784                                  	;retn
 30785                                  	; 17/12/2022
 30786 00005302 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 30787                                  CleanUp2:
 30788 00005304 1E                      	push	ds
 30789 00005305 56                      	push	si
 30790 00005306 50                      	push	ax
 30791 00005307 36A1[AA05]              	MOV	AX,[ss:SFN]
 30792 0000530B 36C536[AE05]            	LDS	SI,[ss:PJFN]
 30793 00005310 8804                    	MOV	[SI],AL
 30794 00005312 58                      	pop	ax
 30795 00005313 5E                      	pop	si
 30796 00005314 1F                      	pop	ds
 30797                                  Cleanup_retn:
 30798 00005315 C3                      	retn
 30799                                  
 30800                                  	; The reply was IGNORE. See if we are allowed to ignore.
 30801                                  
 30802                                  CheckIgnore:
 30803                                  	;test	byte [ss:ALLOWED],20h
 30804 00005316 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 30805                                  CheckRI:	; 29/02/2024
 30806 0000531C 74C9                    	jz	short DoFail			; No, do fail
 30807 0000531E EBD6                    	jmp	short CleanUp
 30808                                  
 30809                                  	; The reply was RETRY. See if we are allowed to retry.
 30810                                  
 30811                                  CheckRetry:
 30812                                  	;test	byte [ss:ALLOWED],10h
 30813 00005320 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 30814                                  	;jz	short DoFail			; No, do fail
 30815                                  	;JMP	short CleanUp
 30816                                  	; 29/02/2024 (PCDOS 7.1 IBMDOS.COM)
 30817 00005326 EBF4                    	jmp	short CheckRI
 30818                                  
 30819                                  	; The reply was ABORT.
 30820                                  DoAbort:
 30821 00005328 16                      	push	ss
 30822 00005329 1F                      	pop	ds
 30823                                  
 30824 0000532A 803E[5703]00            	CMP	byte [CONSWAP],0
 30825 0000532F 7403                    	JZ	short NOSWAP2
 30826 00005331 E8EEDE                  	call	SWAPBACK
 30827                                  NOSWAP2:
 30828                                  	; See if we are to truly abort. If we are in the process of aborting, 
 30829                                  	; turn this abort into a fail.
 30830                                  
 30831                                  	;test	[fAborting],0FFh
 30832                                  	;jnz	short DoFail
 30833                                  
 30834 00005334 803E[5903]00            	cmp	byte [fAborting],0
 30835 00005339 75AC                    	JNZ	short DoFail
 30836                                  
 30837                                  	; Set return code
 30838                                  
 30839 0000533B C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 30840 00005340 30C0                    	XOR	AL,AL
 30841                                  
 30842                                  	; we are truly aborting the process. Go restore information from 
 30843                                  	; the PDB as necessary.
 30844                                  
 30845 00005342 E9700D                  	jmp	exit_inner
 30846                                  
 30847                                  ;** --------------------------------------------------------------------------
 30848                                  ;
 30849                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 30850                                  ; different, then an old-style return is performed. If they are the same,
 30851                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 30852                                  ; the source of the terminate addresses.
 30853                                  ;
 30854                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 30855                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 30856                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 30857                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 30858                                  ; flag that will indicate that if any abort code is seen, we just continue the
 30859                                  ; operation. In essence, we dis-allow the abort response.
 30860                                  ;
 30861                                  ; output:   none.
 30862                                  ; ----------------------------------------------------------------------------
 30863                                  
 30864                                  	;entry	reset_environment
 30865                                  	
 30866                                  reset_environment:
 30867                                  	; 30/07/2018 - Retro DOS v3.0
 30868                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 30869                                  
 30870                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 30871                                  
 30872 00005345 1E                      	PUSH	DS			; save PDB of process
 30873                                  
 30874                                  	; There are no critical sections in force. Although we may enter
 30875                                  	; here with critical sections locked down, they are no longer 
 30876                                  	; relevant. We may safely free all allocated resources.
 30877                                  
 30878 00005346 B482                    	MOV	AH,82h
 30879                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 30880                                  	;int	2Ah 	
 30881 00005348 CD2A                    	INT	int_IBM
 30882                                  
 30883                                  					; SS override
 30884 0000534A 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 30885                                  
 30886                                  					; DOS 4.00 doesn't need it
 30887                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 30888                                  					; Allow REDIR to clear some stuff
 30889                                  					; On process exit.
 30890 00005350 B82211                  	mov	ax, 1122h
 30891 00005353 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 30892                                  			; SS = DOS CS
 30893                                  	;mov	al,22h	
 30894 00005355 B022                    	MOV	AL,int_terminate
 30895 00005357 E81ABB                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 30896                                  
 30897 0000535A 59                      	POP	CX			; get ThisPDB
 30898 0000535B 06                      	push	es
 30899 0000535C 53                      	push	bx			; save return address
 30900                                  
 30901 0000535D 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 30902 00005362 8EDB                    	MOV	DS,BX
 30903 00005364 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 30904                                  
 30905                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 30906                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper
 30907                                  	; is not Exit_keep_process
 30908                                  	
 30909 00005367 39D8                    	CMP	AX,BX
 30910 00005369 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 30911 0000536B 39CB                    	CMP	BX,CX
 30912 0000536D 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 30913 0000536F 50                      	PUSH	AX			; save parent
 30914                                  
 30915                                  					; SS override
 30916                                  	;cmp	byte [SS:EXIT_TYPE],3
 30917 00005370 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 30918 00005376 7406                    	JZ	short reset_to_parent 	; keeping this process
 30919                                  
 30920                                  	; We are truly removing a process. Free all allocation blocks
 30921                                  	; belonging to this PDB
 30922                                  
 30923                                  	;invoke	arena_free_process
 30924 00005378 E8720D                  	call	arena_free_process
 30925                                  
 30926                                  	; Kill off remainder of this process. Close file handles and signal
 30927                                  	; to relevant network folks that this process is dead. Remember that
 30928                                  	; CurrentPDB is STILL the current process!
 30929                                  
 30930                                  	;invoke	DOS_ABORT
 30931 0000537B E8BEDA                  	call	DOS_ABORT
 30932                                  
 30933                                  reset_to_parent:
 30934                                  					; SS override
 30935 0000537E 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 30936                                  
 30937                                  reset_return:				; come here for normal return
 30938                                  	;Context DS			; DS is used to refer to DOSDATA
 30939 00005383 16                      	push	ss
 30940 00005384 1F                      	pop	ds	
 30941                                  
 30942 00005385 B0FF                    	MOV	AL,-1
 30943                                  
 30944                                  	; make sure that everything is clean In this case ignore any errors,
 30945                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 30946                                  
 30947                                  	;EnterCrit critDisk
 30948 00005387 E863BF                  	call	ECritDisk
 30949                                  	;invoke	FLUSHBUF
 30950 0000538A E89F05                  	call	FLUSHBUF
 30951                                  	;LeaveCrit critDisk
 30952 0000538D E878BF                  	call	LCritDisk
 30953                                  
 30954                                  	; Decrement open ref. count if we had done a virtual open earlier.
 30955                                  
 30956 00005390 E895F7                  	call	CHECK_VIRT_OPEN
 30957 00005393 FA                      	CLI
 30958 00005394 C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 30959 00005399 C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 30960 0000539E C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 30961 000053A3 8F06[8005]              	POP	WORD [EXITHOLD]
 30962 000053A7 8F06[8205]              	POP	WORD [EXITHOLD+2]
 30963                                  
 30964                                  	; Snake into multitasking... Get stack from CurrentPDB person
 30965                                  
 30966 000053AB 8E1E[3003]              	MOV	DS,[CurrentPDB]
 30967 000053AF 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 30968 000053B3 8B262E00                	MOV	SP,[PDB.USER_STACK]
 30969                                  
 30970 000053B7 E891B0                  	call	restore_world
 30971                                  
 30972                                  	; 05/05/2019
 30973 000053BA 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 30974                                  
 30975                                  	; MSDOS 6.0
 30976 000053BB 50                      	push	ax			; set up ds, but save ds in TEMPSEG
 30977 000053BC 8CD8                    	mov	ax,ds			; and not on stack.
 30978                                  	;getdseg <ds>			; ds -> dosdata
 30979 000053BE 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 30980 000053C3 A3[0A0D]                	mov	[TEMPSEG],ax
 30981 000053C6 58                      	pop	ax
 30982                                  					; set up ds to DOSDATA
 30983                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 30984 000053C7 A3[8405]                	mov	[USER_SP],ax
 30985                                  
 30986 000053CA 58                      	POP	AX			; suck off CS:IP of interrupt...
 30987 000053CB 58                      	POP	AX
 30988 000053CC 58                      	POP	AX
 30989                                  
 30990                                  ; M011 : BEGIN
 30991                                  
 30992                                  	; MSDOS 3.3
 30993                                  ;	MOV	AX,0F202h	; STI
 30994                                  
 30995                                  	; MSDOS 6.0
 30996 000053CD 9F                      	LAHF
 30997 000053CE 86E0                    	XCHG	AH,AL
 30998 000053D0 2402                    	AND	AL,2
 30999 000053D2 B4F2                    	MOV	AH,0F2h
 31000                                  
 31001                                  ; M011 : END
 31002                                  
 31003                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31004 000053D4 50                      	PUSH	AX
 31005                                   
 31006                                  	;PUSH	word [CS:EXITHOLD+2]
 31007                                  	;PUSH	word [CS:EXITHOLD]
 31008                                  	
 31009                                  	; MSDOS 6.0
 31010 000053D5 FF36[8205]              	PUSH	word [EXITHOLD+2]
 31011 000053D9 FF36[8005]              	PUSH	word [EXITHOLD]
 31012                                  
 31013                                  	;MOV	AX,[CS:USER_SP]
 31014                                  
 31015                                  	; MSDOS 6.0
 31016 000053DD A1[8405]                	MOV	AX,[USER_SP]
 31017 000053E0 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 31018                                  
 31019 000053E4 CF                      	IRET			; Long return back to user terminate address
 31020                                  
 31021                                  ;---------------------------------------------------------------------------
 31022                                  ;
 31023                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 31024                                  ;
 31025                                  ; This routine handles extended error codes.
 31026                                  ; Input : DI = error code from device
 31027                                  ; Output: All EXTERR fields are set
 31028                                  ;
 31029                                  ;--------------------------------------------------------------------------
 31030                                  
 31031                                  SET_I24_EXTENDED_ERROR:
 31032 000053E5 50                      	PUSH	AX
 31033                                  					; ErrMap24End is in DOSDATA
 31034 000053E6 B8[BB0E]                	MOV	AX,ErrMap24End
 31035 000053E9 2D[AB0E]                	SUB	AX,ErrMap24
 31036                                  					; Change to dosdata to access
 31037                                  					; ErrMap24 and EXTERR -SR
 31038                                  	; 05/05/2019 - Retro DOS v4.0
 31039                                  	
 31040                                  	; MSDOS 6.0
 31041 000053EC 1E                      	push	ds
 31042                                  	;getdseg <ds>			; ds ->dosdata
 31043 000053ED 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 31044                                  
 31045                                  	; AX is the index of the first unavailable error. Do not translate
 31046                                  	; if greater or equal to AX.
 31047                                  
 31048 000053F2 39C7                    	CMP	DI,AX
 31049 000053F4 89F8                    	MOV	AX,DI
 31050 000053F6 7306                    	JAE	short NoTrans
 31051                                  
 31052                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 31053 000053F8 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 31054 000053FC 30E4                    	XOR	AH,AH
 31055                                  NoTrans:
 31056                                  	;MOV	[CS:EXTERR],AX
 31057 000053FE A3[2403]                	mov	[EXTERR],AX
 31058 00005401 1F                      	pop	ds
 31059                                  	;assume	ds:nothing
 31060 00005402 58                      	POP	AX
 31061                                  
 31062                                  	; Now Extended error is set correctly. Translate it to get correct
 31063                                  	; error locus class and recommended action.
 31064                                  
 31065 00005403 56                      	PUSH	SI
 31066                                  					; ERR_TABLE_24 is in DOSCODE 
 31067 00005404 BE[5B0E]                	MOV	SI,ERR_TABLE_24
 31068 00005407 E86AB2                  	call	CAL_LK			; Set other extended error fields
 31069 0000540A 5E                      	POP	SI
 31070 0000540B C3                      	retn
 31071                                  
 31072                                  ;============================================================================
 31073                                  ; FAT.ASM, MSDOS 6.0, 1991
 31074                                  ;============================================================================
 31075                                  ; 30/07/2018 - Retro DOS v3.0
 31076                                  ; 20/05/2019 - Retro DOS v4.0
 31077                                  
 31078                                  ;	TITLE	FAT - FAT maintenance routines
 31079                                  ;	NAME	FAT
 31080                                  
 31081                                  ;**	FAT.ASM
 31082                                  ;----------------------------------------------------------------------------
 31083                                  ;	Low level local device routines for performing disk change sequence,
 31084                                  ;	setting cluster validity, and manipulating the FAT
 31085                                  ;
 31086                                  ;	IsEof
 31087                                  ;	UNPACK
 31088                                  ;	PACK
 31089                                  ;	MAPCLUSTER
 31090                                  ;	FATREAD_SFT
 31091                                  ;	FATREAD_CDS
 31092                                  ;	FAT_operation
 31093                                  ;
 31094                                  ;	Revision history:
 31095                                  ;
 31096                                  ;	  AN000  version Jan. 1988
 31097                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 31098                                  ;
 31099                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 31100                                  ;	       from CL0FATENTRY rather than disk.
 31101                                  
 31102                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 31103                                  
 31104                                  ;Break <IsEOF - check the quantity in BX for EOF>
 31105                                  ;----------------------------------------------------------------------------
 31106                                  ;
 31107                                  ; Procedure Name : IsEOF
 31108                                  ;
 31109                                  ; IsEOF - check the fat value in BX for eof.
 31110                                  ;
 31111                                  ;   Inputs:	ES:BP point to DPB
 31112                                  ;		BX has fat value
 31113                                  ;   Outputs:	JAE eof
 31114                                  ;   Registers modified: none
 31115                                  ;
 31116                                  ;---------------------------------------------------------------------------
 31117                                  
 31118                                  IsEOF:
 31119                                  	;cmp	word [es:bp+0Dh],0FF6h
 31120 0000540C 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 31121 00005412 730B                    	JAE	short EOF16			; yes, check for eof there
 31122                                  
 31123                                  ;J.K. 8/27/86
 31124                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 31125                                  ;of any media that has "F0"(Other) as a MediaByte.
 31126                                  ;Hopely, this does not create any side effect for those who may use any value
 31127                                  ;other than "FF8-FFF" as an EOF for their own file.
 31128                                  
 31129 00005414 81FBF00F                	cmp	bx,0FF0h
 31130 00005418 7404                    	je	short IsEOF_other
 31131                                  
 31132 0000541A 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 31133                                  IsEOF_other:
 31134 0000541E C3                      	retn
 31135                                  EOF16:
 31136 0000541F 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 31137 00005422 C3                      	retn
 31138                                  
 31139                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 31140                                  
 31141                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 31142                                  ;---------------------------------------------------------------------------
 31143                                  ;
 31144                                  ; Procedur Name : UNPACK
 31145                                  ;
 31146                                  ; Inputs:
 31147                                  ;	BX = Cluster number (may be full 16-bit quantity)
 31148                                  ;	ES:BP = Base of drive parameters
 31149                                  ; Outputs:
 31150                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 31151                                  ;	Zero set means DI=0 (free cluster)
 31152                                  ;	Carry set means error (currently user FAILed to I 24)
 31153                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 31154                                  ;
 31155                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 31156                                  ;
 31157                                  ;----------------------------------------------------------------------------
 31158                                  	
 31159                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31160                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 31161                                  
 31162                                  	; 20/05/2019 - Retro DOS v4.0
 31163                                  UNPACK:
 31164                                  	; MSDOS 6.0			; M014 - Start
 31165 00005423 09DB                    	or	bx,bx			; Q: are we unpacking cluster 0
 31166 00005425 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 31167 00005427 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 31168 0000542B 09FF                    	or	di,di 			; return z if di=0
 31169 0000542D C3                      	retn				; done
 31170                                  up_cont:				; M014 - End
 31171                                  	; MSDOS 3.3 & MSDOS 6.0
 31172                                  	;cmp	bx,[es:bp+0Dh]
 31173 0000542E 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 31174 00005432 7726                    	JA	short HURTFAT
 31175 00005434 E8D600                  	CALL	MAPCLUSTER
 31176 00005437 721E                    	jc	short _DoContext
 31177 00005439 8B3D                    	MOV	DI,[DI]
 31178 0000543B 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 31179 0000543D 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 31180 00005441 81FEF60F                	CMP	SI,4096-10
 31181 00005445 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 31182 00005447 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 31183 00005449 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 31184                                  High12:
 31185 0000544B D1EF                    	SHR	DI,1
 31186 0000544D D1EF                    	SHR	DI,1
 31187 0000544F D1EF                    	SHR	DI,1
 31188 00005451 D1EF                    	SHR	DI,1
 31189                                  Unpack12:
 31190 00005453 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 31191                                  _DoContext:
 31192 00005457 16                      	PUSH	SS
 31193 00005458 1F                      	POP	DS
 31194 00005459 C3                      	retn
 31195                                  HURTFAT:
 31196                                  	;;mov	word [es:bp+1Eh],0FFFFh
 31197                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31198 0000545A 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 31199 00005460 50                      	PUSH	AX
 31200 00005461 B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 31201                                  
 31202                                  ;hkn; SS override
 31203 00005463 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 31204                                  ;
 31205                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 31206                                  ;
 31207 00005469 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 31208 0000546C E8CAFD                  	call	FATAL
 31209 0000546F 3C03                    	CMP	AL,3
 31210 00005471 F8                      	CLC
 31211 00005472 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 31212 00005474 F9                      	STC				; User said FAIL
 31213                                  OKU_RET:
 31214 00005475 58                      	POP	AX
 31215                                  hurtfat_retn:
 31216 00005476 C3                      	retn
 31217                                  
 31218                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 31219                                  
 31220                                  ;Break	<PACK -- PACK FAT ENTRIES>
 31221                                  ;----------------------------------------------------------------------------
 31222                                  ;
 31223                                  ; Procedure Name : PACK
 31224                                  ;
 31225                                  ; Inputs:
 31226                                  ;	BX = Cluster number
 31227                                  ;	DX = Data
 31228                                  ;	ES:BP = Pointer to drive DPB
 31229                                  ; Outputs:
 31230                                  ;	The data is stored in the FAT at the given cluster.
 31231                                  ;	SI,DX,DI all destroyed
 31232                                  ;	Carry set means error (currently user FAILed to I 24)
 31233                                  ;	No other registers affected
 31234                                  ;
 31235                                  ; NOTE: if BX = 0 then data in DX is stored in CL0FATENTRY.
 31236                                  ;
 31237                                  ;---------------------------------------------------------------------------
 31238                                  
 31239                                  	; 02/01/2024
 31240                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31241                                  	; 20/05/2019 - Retro DOS v4.0
 31242                                  PACK:
 31243                                  	; MSDOS 6.0			; M014 - start
 31244 00005477 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 31245 00005479 7505                    	jnz	short p_cont		; N: proceed with normal pack
 31246 0000547B 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 31247 0000547F C3                      	retn				; done
 31248                                  p_cont:					; M014 - end
 31249                                  	; MSDOS 3.3 & MSDOS 6.0
 31250 00005480 E88A00                  	CALL	MAPCLUSTER
 31251 00005483 72D2                    	JC	short _DoContext
 31252 00005485 8B35                    	MOV	SI,[DI]
 31253 00005487 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 31254 00005489 51                      	PUSH	CX			; move data to upper 12 bits
 31255 0000548A B104                    	MOV	CL,4
 31256 0000548C D3E2                    	SHL	DX,CL
 31257 0000548E 59                      	POP	CX
 31258 0000548F 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 31259 00005492 EB14                    	JMP	SHORT PACKIN
 31260                                  ALIGNED:
 31261                                  	;cmp	word [es:bp+0Dh],0FF6h
 31262 00005494 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 31263 0000549A 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 31264 0000549C 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 31265 000054A0 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 31266 000054A4 EB02                    	JMP	SHORT PACKIN		; MZ go store
 31267                                  Pack16:
 31268 000054A6 31F6                    	XOR	SI,SI			; MZ no original data
 31269                                  PACKIN:
 31270 000054A8 09D6                    	OR	SI,DX
 31271 000054AA 8935                    	MOV	[DI],SI
 31272                                  
 31273                                  ;hkn; SS override
 31274 000054AC 36C536[E205]            	LDS	SI,[SS:CURBUF]
 31275                                  	; MSDOS 6.0
 31276 000054B1 F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 31277                                  					;LB. if already dirty		  ;AN000;
 31278 000054B5 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 31279                                  	; 10/06/2019
 31280 000054B7 E87405                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 31281                                  	
 31282                                  	;or	byte [si+5],40h
 31283 000054BA 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 31284                                  yesdirty11:				;LB.				;AN000;
 31285                                  ;hkn; SS override
 31286 000054BE 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 31287                                  ;hkn; SS is DOSDATA
 31288 000054C4 16                      	push	ss
 31289 000054C5 1F                      	pop	ds
 31290 000054C6 74AE                    	jz	short hurtfat_retn	; Carry clear
 31291 000054C8 50                      	PUSH	AX
 31292 000054C9 53                      	PUSH	BX
 31293 000054CA 51                      	PUSH	CX
 31294 000054CB A1[8E05]                	MOV	AX,[CLUSSAVE]
 31295 000054CE 8E1E[E405]              	MOV	DS,[CURBUF+2]
 31296                                  	;;add	si,16 ; MSDOS 3.3
 31297                                  	;add	si,20 ; MSDOS 6.0
 31298 000054D2 83C614                  	ADD	SI,BUFINSIZ
 31299 000054D5 8824                    	MOV	[SI],AH
 31300                                  ;hkn; SS is DOSDATA
 31301                                  	;Context DS
 31302 000054D7 16                      	push	ss
 31303 000054D8 1F                      	pop	ds
 31304                                  	
 31305 000054D9 50                      	PUSH	AX
 31306                                  	
 31307                                  	; MSDOS 6.0
 31308 000054DA 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 31309 000054DE 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 31310                                  
 31311                                  	; MSDOS 3.3 & MSDOS 6.0
 31312 000054E2 8B16[9005]              	MOV	DX,[CLUSSEC]
 31313                                  
 31314                                  	;MOV	SI,1	  ; *
 31315                                  	;XOR	AL,AL     ; *
 31316                                  	;call	GETBUFFRB ; *
 31317                                  	; 22/09/2023
 31318 000054E6 E83803                  	call	GETBUFFRA ; *
 31319                                  
 31320 000054E9 58                      	POP	AX
 31321 000054EA 721B                    	JC	short POPP_RET
 31322 000054EC C53E[E205]              	LDS	DI,[CURBUF]
 31323                                  	
 31324                                  	; MSDOS 6.0
 31325 000054F0 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 31326                                  					;LB. if already dirty		  ;AN000;
 31327 000054F4 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 31328 000054F6 E83505                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 31329                                  	
 31330                                  	;or	byte [di+5],40h
 31331 000054F9 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 31332                                  yesdirty12:
 31333                                  	;;add	di,16
 31334                                  	;add	di,20 ; MSDOS 6.0
 31335                                  	; 02/01/2024
 31336                                  	;ADD	DI,BUFINSIZ
 31337                                  	;DEC	DI
 31338 000054FD 83C713                  	add	di,BUFINSIZ-1 ; 19
 31339                                  
 31340                                  	;add	di,[es:bp+2]
 31341 00005500 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 31342 00005504 8805                    	MOV	[DI],AL
 31343 00005506 F8                      	CLC
 31344                                  POPP_RET:
 31345 00005507 16                      	PUSH	SS
 31346 00005508 1F                      	POP	DS
 31347 00005509 59                      	POP	CX
 31348 0000550A 5B                      	POP	BX
 31349 0000550B 58                      	POP	AX
 31350 0000550C C3                      	retn
 31351                                  
 31352                                  ; 31/07/2018 - Retro DOS v3.0
 31353                                  
 31354                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 31355                                  ;---------------------------------------------------------------------------
 31356                                  ;
 31357                                  ; Procedure Name : MAPCLUSTER
 31358                                  ;
 31359                                  ; Inputs:
 31360                                  ;	ES:BP Points to DPB
 31361                                  ;	BX Is cluster number
 31362                                  ; Function:
 31363                                  ;	Get a pointer to the cluster
 31364                                  ; Outputs:
 31365                                  ;	DS:DI Points to contents of FAT for given cluster
 31366                                  ;	DS:SI Points to start of buffer
 31367                                  ;	Zero Not set if cluster data is in high 12 bits of word
 31368                                  ;	Zero set if cluster data is in low 12 or 16 bits
 31369                                  ;	Carry set if failed.
 31370                                  ; SI is destroyed.
 31371                                  ;
 31372                                  ;---------------------------------------------------------------------------
 31373                                  
 31374                                  	; 20/05/2019 - Retro DOS v4.0
 31375                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 31376                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31377                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 31378                                  
 31379                                  MAPCLUSTER:
 31380                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 31381 0000550D C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 31382                                  	;SAVE	<AX,BX,CX,DX>
 31383 00005512 50                      	push	ax
 31384 00005513 53                      	push	bx
 31385 00005514 51                      	push	cx
 31386 00005515 52                      	push	dx
 31387 00005516 89D8                    	MOV	AX,BX			; AX = BX
 31388 00005518 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 31389 0000551E 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 31390 00005520 D1E8                    	SHR	AX,1			; AX = BX/2
 31391                                  Map16:	
 31392                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 31393 00005522 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 31394                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31395 00005524 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 31396 00005526 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 31397 00005528 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 31398                                  
 31399                                  ;IF FastDiv
 31400                                  ;
 31401                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 31402                                  ; case and apply a really fast algorithm to get the desired results
 31403                                  ;
 31404                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 31405                                  ; Fast method takes 39+20*4=119
 31406                                  ;
 31407                                  ; This saves a bunch.
 31408                                  
 31409 0000552C 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 31410 00005530 7510                    	jne	short _DoDiv		; 4  for no jump
 31411 00005532 89C2                    	MOV	DX,AX			; 2  get set for remainder
 31412 00005534 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 31413 00005538 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 31414                                  	; MDOS 3.3
 31415                                  	;shr	al,1	
 31416                                  	; MDOS 6.0
 31417 0000553A D1EF                    	shr	di,1			; 2
 31418 0000553C D0D8                    	rcr	al,1			; 2
 31419                                  	; MDOS 3.3 (& MSDOS 6.0)
 31420 0000553E 30E4                    	xor	ah,ah			; 3
 31421 00005540 EB04                    	jmp	short DivDone		; 16
 31422                                  _DoDiv:
 31423                                  ;ENDIF
 31424                                  	; MSDOS 3.3
 31425                                  	;xor	dx,dx
 31426                                  	; MSDOS 6.0
 31427 00005542 89FA                    	mov	dx,di			; 2
 31428                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31429 00005544 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 31430                                  ;IF FastDiv
 31431                                  DivDone:
 31432                                  ;ENDIF
 31433                                  	;add	ax,[es:bp+6]
 31434 00005546 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 31435 0000554A 49                      	DEC	CX			; CX is sector size - 1
 31436                                  	;SAVE	<AX,DX,CX>
 31437 0000554B 50                      	push	ax
 31438 0000554C 52                      	push	dx
 31439 0000554D 51                      	push	cx
 31440 0000554E 89C2                    	MOV	DX,AX
 31441                                  
 31442                                  	; MSDOS 6.0
 31443                                  	; 22/09/2023
 31444                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb  low sector #
 31445                                  	;
 31446                                  	; MDOS 3.3 (& MSDOS 6.0)
 31447                                  	;XOR	AL,AL	   ; *
 31448                                  	;MOV	SI,1	   ; *
 31449                                  	;;invoke GETBUFFRB ; *
 31450                                  	;call	GETBUFFRB  ; *
 31451                                  	; 22/09/2023
 31452 00005550 E8C802                  	call	GETBUFFRC  ; *!
 31453                                  
 31454                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 31455 00005553 59                      	pop	cx
 31456 00005554 58                      	pop	ax
 31457 00005555 5A                      	pop	dx
 31458 00005556 724C                    	JC	short MAP_POP
 31459                                  
 31460 00005558 C536[E205]              	LDS	SI,[CURBUF]
 31461                                  	;;lea	di,[si+16]
 31462                                  	;lea	di,[si+20] ; MSDOS 6.0
 31463 0000555C 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31464 0000555F 01C7                    	ADD	DI,AX
 31465 00005561 39C8                    	CMP	AX,CX
 31466 00005563 752C                    	JNZ	short MAPRET
 31467 00005565 8A05                    	MOV	AL,[DI]
 31468                                  	;Context DS		 	;hkn; SS is DOSDATA
 31469 00005567 16                      	push	ss
 31470 00005568 1F                      	pop	ds	
 31471 00005569 FE06[7805]              	INC	BYTE [CLUSSPLIT]
 31472 0000556D A2[8E05]                	MOV	[CLUSSAVE],AL
 31473 00005570 8916[9005]              	MOV	[CLUSSEC],DX
 31474                                  	; MSDOS 6.0
 31475 00005574 C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb	;AN000;
 31476 0000557A 42                      	INC	DX
 31477                                  
 31478                                  	; 22/09/2023
 31479                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb FAT sector <32mb ;AN000;
 31480                                  	;
 31481                                  	; MDOS 3.3 (& MSDOS 6.0)
 31482                                  	;XOR	AL,AL	   ; *
 31483                                  	;MOV	SI,1	   ; *
 31484                                  	;;invoke GETBUFFRB ; *
 31485                                  	;call	GETBUFFRB  ; *
 31486                                  	; 22/09/2023
 31487 0000557B E89D02                  	call	GETBUFFRC  ; *!
 31488 0000557E 7224                    	JC	short MAP_POP
 31489                                  
 31490 00005580 C536[E205]              	LDS	SI,[CURBUF]
 31491 00005584 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31492 00005587 8A05                    	MOV	AL,[DI]
 31493                                  	;Context DS			;hkn; SS is DOSDATA
 31494 00005589 16                      	push	ss
 31495 0000558A 1F                      	pop	ds
 31496 0000558B A2[8F05]                	MOV	[CLUSSAVE+1],AL
 31497                                  
 31498                                  ;hkn; CLUSSAVE is in DOSDATA
 31499 0000558E BF[8E05]                	MOV	DI,CLUSSAVE
 31500                                  MAPRET:
 31501                                  	;RESTORE <DX,CX,BX>
 31502 00005591 5A                      	pop	dx
 31503 00005592 59                      	pop	cx
 31504 00005593 5B                      	pop	bx
 31505 00005594 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 31506 00005596 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 31507 0000559C 7302                    	JAE	short MapSet		; MZ no, set flags
 31508 0000559E 89D8                    	MOV	AX,BX
 31509                                  MapSet:
 31510 000055A0 A801                    	TEST	AL,1			; set zero flag if not on boundary
 31511                                  	;RESTORE <AX>
 31512 000055A2 58                      	pop	ax
 31513 000055A3 C3                      	retn
 31514                                  
 31515                                  MAP_POP:
 31516                                  	;RESTORE <DX,CX,BX,AX>
 31517 000055A4 5A                      	pop	dx
 31518 000055A5 59                      	pop	cx
 31519 000055A6 5B                      	pop	bx
 31520 000055A7 58                      	pop	ax
 31521                                  fatread_sft_retn: ; 17/12/2022
 31522 000055A8 C3                      	retn
 31523                                  
 31524                                  ; 20/05/2019 - Retro DOS v4.0
 31525                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 31526                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31527                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 31528                                  
 31529                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 31530                                  ;----------------------------------------------------------------------------
 31531                                  ;
 31532                                  ; Procedure Name : FATREAD_SFT
 31533                                  ;
 31534                                  ; Inputs:
 31535                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 31536                                  ;		giving a NET SFT will produce system crashing results).
 31537                                  ;	DS DOSDATA
 31538                                  ; Function:
 31539                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 31540                                  ;	if disk changed.
 31541                                  ;	In other respects, same as FATREAD_CDS.
 31542                                  ;	(note ES:DI destroyed!)
 31543                                  ; Outputs:
 31544                                  ;	Carry set if error (currently user FAILed to I 24)
 31545                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 31546                                  ;	as far as invalidating curdir_ID is concerned.
 31547                                  ;	Since getting a true disk changed on this call is a screw up
 31548                                  ;	anyway, that's the way it goes.
 31549                                  ;
 31550                                  ;---------------------------------------------------------------------------
 31551                                  
 31552                                  FATREAD_SFT:
 31553 000055A9 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 31554                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31555                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31556                                  	; 15/12/2022
 31557 000055AD 268A4600                	mov	AL,[ES:BP]
 31558 000055B1 A2[7605]                	MOV	[THISDRV],AL
 31559 000055B4 E871B0                  	call	GOTDPB			;Set THISDPB
 31560                                  	;CALL	FAT_GOT_DPB
 31561                                  	; 17/12/2022
 31562 000055B7 EB78                    	jmp	FAT_GOT_DPB
 31563                                  ;fatread_sft_retn:
 31564                                  	;retn
 31565                                  
 31566                                  ;----------------------------------------------------------------------------
 31567                                  ;
 31568                                  ; Procedure Name : FATREAD_CDS
 31569                                  ;
 31570                                  ; Inputs:
 31571                                  ;	DS:DOSDATA
 31572                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 31573                                  ;		giving a NET or NUL CDS will produce system crashing results).
 31574                                  ; Function:
 31575                                  ;	If disk may have been changed, media is determined and buffers are
 31576                                  ;	flagged invalid. If not, no action is taken.
 31577                                  ; Outputs:
 31578                                  ;	ES:BP = Drive parameter block
 31579                                  ;	THISDPB = ES:BP
 31580                                  ;	THISDRV set
 31581                                  ;	Carry set if error (currently user FAILed to I 24)
 31582                                  ; DS preserved , all other registers destroyed
 31583                                  ;
 31584                                  ;---------------------------------------------------------------------------
 31585                                  
 31586                                  	; 20/05/2019 - Retro DOS v4.0
 31587                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 31588                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31589                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 31590                                  
 31591                                  FATREAD_CDS:
 31592 000055B9 06                      	PUSH	ES
 31593 000055BA 57                      	PUSH	DI
 31594                                  	;les	bp,[es:di+45h]
 31595 000055BB 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 31596                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31597                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31598                                  	; 15/12/2022
 31599 000055BF 268A4600                	mov	AL,[ES:BP]
 31600 000055C3 A2[7605]                	MOV	[THISDRV],AL
 31601 000055C6 E85FB0                  	call	GOTDPB			;Set THISDPB
 31602 000055C9 E86500                  	CALL	FAT_GOT_DPB
 31603 000055CC 5F                      	POP	DI			;Get back CDS pointer
 31604 000055CD 07                      	POP	ES
 31605 000055CE 72D8                    	jc	short fatread_sft_retn
 31606 000055D0 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 31607                                  
 31608                                  ;	Media changed. We now need to find all CDS structures which use this
 31609                                  ;	DPB and invalidate their ID pointers.
 31610                                  
 31611                                  MED_CHANGE:
 31612 000055D2 31C0                    	XOR	AX,AX
 31613 000055D4 48                      	DEC	AX			; AX = -1
 31614 000055D5 1E                      	PUSH	DS
 31615 000055D6 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 31616 000055DA 30ED                    	XOR	CH,CH			; CX is number of structures
 31617                                  	;lds	si,[es:di+45h]
 31618 000055DC 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 31619                                  
 31620                                  ;hkn; SS override
 31621                                  
 31622                                  ;	Find all CDSs with this DevPtr
 31623                                  ;
 31624                                  ;	(ax) = -1
 31625                                  ;	(ds:si) = DevPtr
 31626                                  
 31627 000055E0 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 31628                                  frcd20: 
 31629                                  	;;test	word [es:di+43h],8000h
 31630                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 31631 000055E5 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 31632 000055EA 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 31633                                  
 31634                                  	; MSDOS 3.3
 31635                                  	;push	es
 31636                                  	;push	di
 31637                                  	;les	di,[es:di+45h]
 31638                                  	;;les	di,[ES:DI+curdir.devptr]
 31639                                  	;call	POINTCOMP
 31640                                  	;pop	di
 31641                                  	;pop	es
 31642                                  	;jnz	short frcd25
 31643                                  
 31644                                  	; MSDOS 6.0
 31645 000055EC 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 31646 000055F0 7512                    	jne	short frcd25		; no match
 31647 000055F2 8CDB                    	mov	bx,ds
 31648 000055F4 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 31649 000055F8 750A                    	jne	short frcd25		; CDS not for this drive
 31650                                  
 31651                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31652                                  	;test	[es:di+49h],ax
 31653 000055FA 26854549                	test	[ES:DI+curdir.ID],AX
 31654 000055FE 7404                    	JZ	short frcd25		; If root (0), leave root
 31655                                  	;mov	[es:di+49h],ax
 31656 00005600 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 31657                                  frcd25:	
 31658                                  	;;add	di,81  ; MSDOS 3.3
 31659                                  	;add	di,88  ; MSDOS 6.0	 
 31660 00005604 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 31661 00005607 E2DC                    	LOOP	frcd20
 31662 00005609 1F                      	POP	DS
 31663                                  NO_CHANGE:
 31664 0000560A C42E[8A05]              	LES	BP,[THISDPB]
 31665 0000560E F8                      	CLC
 31666 0000560F C3                      	retn
 31667                                  
 31668                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 31669                                  ;----------------------------------------------------------------------------
 31670                                  ;
 31671                                  ; Procedure Name : FAT_operation
 31672                                  ;
 31673                                  ;----------------------------------------------------------------------------
 31674                                  
 31675                                  	; 03/01/2024
 31676                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31677                                  
 31678                                  FAT_operation:
 31679                                  	; 31/07/2018 - Retro DOS v3.0
 31680                                  FATERR:
 31681                                  	;mov	word [es:bp+1Eh],-1
 31682                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 31683 00005610 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 31684                                  					; Err in FAT must force recomp of freespace
 31685                                  	;and	di,0FFh
 31686 00005616 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 31687                                  	;mov	byte [ALLOWED],18h
 31688 0000561A C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31689                                  	;mov	ah,1Ah
 31690 0000561F B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 31691 00005621 A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 31692 00005624 E816FC                  	call	FATAL1
 31693 00005627 C42E[8A05]              	LES	BP,[THISDPB]
 31694 0000562B 3C03                    	CMP	AL,3
 31695 0000562D 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 31696 0000562F F9                      	STC				; User said FAIL
 31697 00005630 C3                      	retn
 31698                                  
 31699                                  FAT_GOT_DPB:
 31700                                  	;Context DS			;hkn; SS is DOSDATA
 31701 00005631 16                      	push	ss			
 31702 00005632 1F                      	pop	ds
 31703                                  	;mov	al,0Fh
 31704 00005633 B00F                    	MOV	AL,DMEDHL
 31705                                  	;mov	ah,[es:bp+1]
 31706 00005635 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 31707 00005639 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 31708 0000563C C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 31709 00005641 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31710                                  	;;mov	al,[es:bp+16h]
 31711                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 31712 00005647 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31713 0000564B A2[6703]                	MOV	[CALLMED],AL
 31714 0000564E 06                      	PUSH	ES
 31715 0000564F 1E                      	PUSH	DS
 31716                                  
 31717                                  ;hkn; DEVCALL is in DOSDATA
 31718 00005650 BB[5A03]                	MOV	BX,DEVCALL
 31719                                  	;;lds	si,[es:bp+12h]
 31720                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 31721 00005653 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 31722 00005657 07                      	POP	ES			; ES:BX Points to call header
 31723 00005658 E809EF                  	call	DEVIOCALL2
 31724                                  	;Context DS		 	;hkn; SS is DOSDATA
 31725 0000565B 16                      	push	ss
 31726 0000565C 1F                      	pop	ds
 31727 0000565D 07                      	POP	ES			; Restore ES:BP
 31728 0000565E 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31729                                  	;test	di,8000h
 31730                                  	;jnz	short FATERR
 31731 00005662 09FF                    	or	di,di
 31732 00005664 78AA                    	js	short FATERR		; have error
 31733 00005666 30E4                    	XOR	AH,AH
 31734                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 31735                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 31736 00005668 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 31737 0000566C A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 31738                                  ; See if we had changed volume id by creating one on the diskette
 31739 0000566F 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 31740 00005673 7508                    	jnz	short CHECK_BYT
 31741 00005675 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 31742 0000567A E9A300                  	jmp	GOGETBPB		; Need to get device driver to read in
 31743                                  					; new volume label.
 31744                                  CHECK_BYT:
 31745 0000567D 0A26[6803]              	OR	AH,[CALLRBYT]
 31746                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31747                                  	;JMP	short NEWDSK
 31748                                  	; 17/12/2022
 31749 00005681 7861                    	js	short NEWDSK
 31750                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31751                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31752                                  	;JMP	short NEWDSK
 31753                                  
 31754                                  CHECK_ZR:
 31755 00005683 743B                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 31756                                  	; 24/09/2023
 31757                                  	; cf=0 (after 'or' instruction)
 31758                                  	;CLC
 31759 00005685 C3                      	retn				; If Media not changed (NZ)
 31760                                  
 31761                                  DISK_CHNG_ERR:
 31762 00005686 06                      	PUSH	ES
 31763 00005687 55                      	PUSH	BP
 31764                                  	;;les	bp,[es:bp+12h]
 31765                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 31766 00005688 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 31767                                  	;;test	word [es:bp+4],800h
 31768                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 31769 0000568C 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 31770 00005691 5D                      	POP	BP
 31771 00005692 07                      	POP	ES
 31772                                  	;JZ	short FAIL_OPJ2		; Nope, FAIL
 31773                                  	; 03/03/2024
 31774 00005693 7443                    	jz	short FAIL_OP
 31775 00005695 1E                      	PUSH	DS			; Save buffer pointer for ignore
 31776 00005696 57                      	PUSH	DI
 31777 00005697 16                      	push	ss			;hkn; SS is DOSDATA
 31778 00005698 1F                      	pop	ds
 31779                                  	;mov	byte [ALLOWED],18h
 31780 00005699 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31781 0000569E 06                      	PUSH	ES
 31782 0000569F C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 31783 000056A3 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 31784 000056A7 07                      	POP	ES
 31785 000056A8 893E[2803]              	MOV	[EXTERRPT],DI
 31786                                  	;mov	ax,0Fh
 31787 000056AC B80F00                  	MOV	AX,error_I24_wrong_disk
 31788 000056AF C606[7505]01            	MOV	byte [READOP],1		; Write
 31789                                  	;invoke	HARDERR
 31790 000056B4 E834FB                  	call	HARDERR
 31791 000056B7 5F                      	POP	DI			; Get back buffer for ignore
 31792 000056B8 1F                      	POP	DS
 31793 000056B9 3C03                    	CMP	AL,3
 31794                                  FAIL_OPJ2:
 31795 000056BB 741B                    	JZ	short FAIL_OP
 31796 000056BD E971FF                  	JMP	FAT_GOT_DPB		; Retry
 31797                                  
 31798                                  CHKBUFFDIRT:
 31799                                  	; 20/05/2019 - Retro DOS v4.0
 31800                                  
 31801                                  	; MSDOS 3.3
 31802                                  	;lds	di,[BUFFHEAD]
 31803                                  
 31804                                  	; MSDOS 6.0
 31805                                  	;cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 31806                                  	; 03/03/2024
 31807                                  	; ds=ss
 31808                                  	;;;
 31809 000056C0 833E[7100]00            	cmp	word [DirtyBufferCount],0 ; (Win ME IO.SYS - BIOSCODE:0C7A7h)
 31810                                  	;;;
 31811 000056C5 741D                    	je	short NEWDSK			; no, skip the check
 31812 000056C7 E8EC00                  	call	GETCURHEAD			; get pointer to first buffer
 31813                                  nbuffer:
 31814                                  	;cmp	al,[di+4]
 31815 000056CA 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 31816 000056CD 750C                    	jne	short lfnxt			; no, go for next buffer
 31817                                  	;test   byte [di+5],40h
 31818 000056CF F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 31819 000056D3 7406                    	jz	short lfnxt			; no, go for next buffer
 31820                                  
 31821                                  FAIL_OP2:	; 03/03/2024
 31822                                  	;Context DS
 31823 000056D5 16                      	push	ss
 31824 000056D6 1F                      	pop	ds
 31825                                  	; 24/09/2023
 31826                                  	; cf=0 (after 'test' instruction)
 31827                                  	;clc
 31828 000056D7 C3                      	retn
 31829                                  
 31830                                  FAIL_OP:					; This label & code is here
 31831                                  	;Context DS				;  for reachability
 31832                                  	;push	ss
 31833                                  	;pop	ds
 31834 000056D8 F9                      	STC
 31835                                  	; 03/03/2024
 31836                                  	;retn
 31837 000056D9 EBFA                    	jmp	short FAIL_OP2 ; cf=1
 31838                                  
 31839                                  lfnxt:
 31840                                  	; 15/08/2018 - Retro DOS v3.0
 31841                                  	; MSDOS 3.3
 31842                                  	;lds	di,[di]
 31843                                  
 31844                                  	; 20/05/2019 - Retro DOS v4.0
 31845 000056DB 8B3D                    	mov	di,[di]
 31846                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 31847                                  	
 31848                                  	; MSDOS 3.3
 31849                                  	;cmp	di,-1
 31850                                  	;jne	short nbuffer
 31851                                  	
 31852                                  	; MSDOS 6.0
 31853 000056DD 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 31854 000056E2 75E6                    	jne	short nbuffer			; no, check this guy also
 31855                                  
 31856                                  ; If no dirty buffers, assume Media changed
 31857                                  NEWDSK:
 31858                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 31859                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31860 000056E4 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 31861                                  						;  recompute
 31862                                  	; MSDOS 3.3
 31863                                  	;call	SETVISIT
 31864                                  	; MSDOS 6.0
 31865 000056EA E8C900                  	call	 GETCURHEAD
 31866                                  nxbuffer:
 31867                                  	; MSDOS 3.3
 31868                                  	;or 	byte [di+5],20h
 31869                                  	; MSDOS 3.3 & MSDOS 6.0
 31870                                  	;cmp	[di+4],al
 31871 000056ED 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 31872 000056F0 7510                    	jne	short lfnxt2
 31873                                  	;test	byte [di+5],40h
 31874 000056F2 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31875 000056F6 758E                    	jnz	short DISK_CHNG_ERR
 31876                                  	;mov	word [di+4],20FFh
 31877 000056F8 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 31878 000056FD E8C800                  	call	SCANPLACE
 31879                                  	; MSDOS 6.0
 31880 00005700 EB02                    	jmp	short skpbuff
 31881                                  lfnxt2:
 31882 00005702 8B3D                    	mov	di,[di]
 31883                                  	;mov	di,[di+BUFFINFO.buf_next]
 31884                                  skpbuff:
 31885                                  	; MSDOS 6.0
 31886 00005704 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 31887 00005709 75E2                    	jne	short nxbuffer
 31888                                  
 31889 0000570B 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 31890 00005711 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 31891 00005713 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 31892 00005718 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 31893 0000571A 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 31894                                  ;lfnxt2:
 31895                                  	; MSDOS 3.3
 31896                                  	;call	SKIPVISIT
 31897                                  	;jnz	short nxbuffer
 31898                                  GOGETBPB:
 31899                                  	; MSDOS 3.3 & MSDOS 6.0
 31900                                  	;;lds	di,[es:bp+12h]
 31901                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 31902 00005720 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 31903                                  	; 20/05/2019
 31904                                  	;test	word [di+4],2000h
 31905                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 31906 00005724 F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 31907 00005728 7510                    	JNZ	short GETFREEBUF
 31908                                  	;context DS	    		;hkn; SS is DOSDATA
 31909 0000572A 16                      	push	ss
 31910 0000572B 1F                      	pop	ds
 31911 0000572C BB0200                  	MOV	BX,2
 31912 0000572F E8F1FC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 31913                                  FAIL_OPJ:
 31914                                  	;JC	short FAIL_OP
 31915                                  	; 03/03/2024
 31916 00005732 72A1                    	jc	short FAIL_OP2 ; cf=1
 31917 00005734 C53E[E205]              	LDS	DI,[CURBUF]
 31918 00005738 EB13                    	JMP	SHORT GOTGETBUF
 31919                                  
 31920                                  GETFREEBUF:
 31921 0000573A 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 31922 0000573B 55                      	PUSH	BP
 31923                                  	; MSDOS 3.3
 31924                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 31925                                  	; MSDOS 6.0
 31926 0000573C 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 31927                                  ;hkn; SS override
 31928 0000573E 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX ; 0	;LB.  buffer addr	  ;AN000;
 31929 00005743 E87000                  	call	GETCURHEAD		;LB.			  ;AN000;
 31930                                  	; MSDOS 3.3 & MSDOS 6.0
 31931 00005746 E84B02                  	call	BUFWRITE
 31932 00005749 5D                      	POP	BP
 31933 0000574A 07                      	POP	ES
 31934                                  	;;JC	short FAIL_OPJ
 31935                                  	;jc	short FAIL_OP
 31936                                  	; 03/03/2024
 31937 0000574B 7288                    	jc	short FAIL_OP2 ; cf=1
 31938                                  
 31939                                  GOTGETBUF:
 31940                                  	;;add	di,16
 31941                                  	;add	di,20 ; MSDOS 6.0
 31942 0000574D 83C714                  	ADD	DI,BUFINSIZ
 31943                                  
 31944                                  ;hkn; SS override
 31945 00005750 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 31946                                  	;Context DS			;hkn; SS is DOSDATA
 31947 00005755 16                      	push	ss
 31948 00005756 1F                      	pop	ds
 31949 00005757 893E[6803]              	MOV	[CALLXAD],DI
 31950                                  	;mov	al,16h
 31951 0000575B B016                    	MOV	AL,DBPBHL
 31952                                  	;mov	ah,[es:bp+1]
 31953 0000575D 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 31954 00005761 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 31955 00005764 C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 31956 00005769 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31957                                  	;;mov	al,[es:bp+16h]
 31958                                  	;mov	al,[es:bp+17h]
 31959 0000576F 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31960 00005773 A2[6703]                	MOV	[CALLMED],AL
 31961 00005776 06                      	PUSH	ES ; **
 31962 00005777 1E                      	PUSH	DS ; *
 31963                                  	;;
 31964                                  ; 03/01/2024
 31965                                  %if 0
 31966                                  	;;push	word [es:bp+14h]
 31967                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 31968                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 31969                                  	;;push	word [es:bp+12h]
 31970                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 31971                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 31972                                  
 31973                                  ;hkn; DEVCALL is in DOSDATA
 31974                                  	MOV	BX,DEVCALL
 31975                                  	POP	SI
 31976                                  	POP	DS			; DS:SI Points to device header
 31977                                  %endif
 31978                                  	; 03/01/2024
 31979 00005778 BB[5A03]                	mov	bx,DEVCALL
 31980                                  	;lds	si,[es:bp+13h]
 31981 0000577B 26C57613                	lds	si,[es:bp+DPB.DRIVER_ADDR]
 31982                                  					; DS:SI Points to device header
 31983                                  	;;
 31984 0000577F 07                      	POP	ES ; *			; ES:BX Points to call header
 31985                                  	;invoke	DEVIOCALL2
 31986 00005780 E8E1ED                  	call	DEVIOCALL2
 31987 00005783 07                      	POP	ES ; **			; Restore ES:BP
 31988                                  	;Context DS
 31989 00005784 16                      	push	ss		 	;hkn; SS is DOSDATA
 31990 00005785 1F                      	pop	ds
 31991 00005786 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31992                                  	; MSDOS 3.3
 31993                                  	;test	di,8000h
 31994                                  	;jnz	short FATERRJ
 31995                                  	; MSDOS 6.0
 31996 0000578A 09FF                    	or	di,di
 31997 0000578C 7825                    	js	short FATERRJ 		; have error
 31998                                  
 31999                                  ; 04/03/2024
 32000                                  %if 0
 32001                                  	;;mov	al,[es:bp+16h]
 32002                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 32003                                  	MOV	AL,[ES:BP+DPB.MEDIA]
 32004                                  %endif
 32005                                  
 32006 0000578E C536[6C03]              	LDS	SI,[CALLBPB]
 32007                                  	;;mov	word [es:bp+1Ch],0
 32008                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 32009 00005792 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 32010                                  	;invoke	$SETDPB
 32011 00005798 E815B8                  	call	_$SETDPB
 32012                                  
 32013                                  ;hkn; SS override
 32014 0000579B 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 32015                                  	;mov	al,[es:bp+8]
 32016 000057A0 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 32017                                  
 32018                                  	; MSDOS 3.3
 32019                                  	;;mov	ah,[es:bp+0Fh]
 32020                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 32021                                  	;;mov	[DI-8],ax
 32022                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 32023                                  
 32024                                  	; MSDOS 6.0
 32025                                  	;mov	[di-0Ah],al
 32026 000057A4 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 32027                                  						;>32mb		  ;AN000;
 32028                                  	;mov	ax,[es:bp+0Fh]
 32029 000057A7 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 32030                                  	;mov	[di-9h],ax			  ;AC000;
 32031 000057AB 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 32032                                  					;>32mb Correct buffer info ;AC000;
 32033                                  	;Context DS			;hkn; SS is DOSDATA
 32034 000057AE 16                      	push	ss
 32035 000057AF 1F                      	pop	ds
 32036 000057B0 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 32037 000057B2 C3                      	retn
 32038                                  
 32039                                  FATERRJ: 
 32040 000057B3 E95AFE                  	JMP	FATERR
 32041                                  
 32042                                  ;============================================================================
 32043                                  ; STDBUF.ASM
 32044                                  ;============================================================================
 32045                                  ; Retro DOS v2.0 - 12/03/2018
 32046                                  
 32047                                  ;
 32048                                  ; Standard buffer management for MSDOS
 32049                                  ;
 32050                                  
 32051                                  ;.xlist
 32052                                  ;.xcref
 32053                                  ;INCLUDE STDSW.ASM
 32054                                  ;.cref
 32055                                  ;.list
 32056                                  
 32057                                  ;TITLE	STDBUF - MSDOS buffer management
 32058                                  ;NAME	STDBUF
 32059                                  
 32060                                  ;INCLUDE BUF.ASM
 32061                                  
 32062                                  ;============================================================================
 32063                                  ; BUF.ASM
 32064                                  ;============================================================================
 32065                                  ; 31/07/2018 - Retro DOS v3.0
 32066                                  ; Retro DOS v2.0 - 12/03/2018
 32067                                  ;
 32068                                  ; buffer management for MSDOS
 32069                                  ;
 32070                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 32071                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 32072                                  ;
 32073                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 32074                                  ;
 32075                                  ;SETVISIT:
 32076                                  ;	; 31/07/2018 - Retro DOS v3.0
 32077                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 32078                                  ;; Inputs:
 32079                                  ;;      None
 32080                                  ;; Function:
 32081                                  ;;      Set up a scan of I/O buffers
 32082                                  ;; Outputs:
 32083                                  ;;      All visit flags = 0
 32084                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 32085                                  ;;                    may cause a scan to stop in the middle leaving some
 32086                                  ;;                    visit flags set, and some not set.
 32087                                  ;;      DS:DI Points to [BUFFHEAD]
 32088                                  ;; No other registers altered
 32089                                  ;
 32090                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 32091                                  ;	PUSH    AX
 32092                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 32093                                  ;	;mov	al,0DFh
 32094                                  ;	mov	al,~buf_visit
 32095                                  ;SETLOOP:
 32096                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 32097                                  ;	;and	[DI+5],al
 32098                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 32099                                  ;       LDS     DI,[DI]
 32100                                  ;       CMP     DI,-1
 32101                                  ;       JNZ     SHORT SETLOOP
 32102                                  ;       POP     AX ; 09/09/2018
 32103                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 32104                                  ;SVISIT_RETN:
 32105                                  ;       RETN
 32106                                  ;
 32107                                  ;SKIPVISIT:
 32108                                  ;	; 31/07/2018 - Retro DOS v3.0
 32109                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 32110                                  ;
 32111                                  ;; Inputs:
 32112                                  ;;      DS:DI Points to a buffer
 32113                                  ;; Function:
 32114                                  ;;      Skip visited buffers
 32115                                  ;; Outputs:
 32116                                  ;;      DS:DI Points to next unvisited buffer
 32117                                  ;;      Zero is set if skip to LAST buffer
 32118                                  ;; No other registers altered
 32119                                  ;
 32120                                  ;       CMP     DI,-1
 32121                                  ;       ;retz
 32122                                  ;       JZ	SHORT SVISIT_RETN
 32123                                  ;
 32124                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 32125                                  ;       ;;;retnz
 32126                                  ;       ;;JNZ	SHORT SVISIT_RETN
 32127                                  ;
 32128                                  ;	;test	byte [di+5],20h
 32129                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 32130                                  ;	JNZ	short SKIPLOOP
 32131                                  ;	
 32132                                  ;	push	ax
 32133                                  ;	or	al,1
 32134                                  ;	pop	ax
 32135                                  ;	retn	
 32136                                  ;
 32137                                  ;SKIPLOOP:
 32138                                  ;	LDS     DI,[DI]
 32139                                  ;       JMP     SHORT SKIPVISIT
 32140                                  
 32141                                  ;============================================================================
 32142                                  ; BUF.ASM, MSDOS 6.0, 1991
 32143                                  ;============================================================================
 32144                                  ; 31/07/2018 - Retro DOS v3.0
 32145                                  ; 04/05/2019 - Retro DOS v4.0
 32146                                  
 32147                                  ;	TITLE	BUF - MSDOS buffer management
 32148                                  ;	NAME	BUF
 32149                                  
 32150                                  ;**	BUF.ASM - Low level routines for buffer cache management
 32151                                  ;
 32152                                  ;	GETCURHEAD
 32153                                  ;	ScanPlace
 32154                                  ;	PLACEBUF
 32155                                  ;	PLACEHEAD
 32156                                  ;	PointComp
 32157                                  ;	GETBUFFR
 32158                                  ;	GETBUFFRB
 32159                                  ;	FlushBuf
 32160                                  ;	BufWrite
 32161                                  ;	SET_RQ_SC_PARMS
 32162                                  ;
 32163                                  ;	Revision history:
 32164                                  ;
 32165                                  ;		AN000  version 4.00  Jan. 1988
 32166                                  ;		A004   PTM 3765 -- Disk reset failed
 32167                                  ;		M039 DB 10/17/90 - Disk write optimization
 32168                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 32169                                  
 32170                                  ;Break	<GETCURHEAD -- Get current buffer header>
 32171                                  ;----------------------------------------------------------------------------
 32172                                  ; Procedure Name : GetCurHead
 32173                                  ; Inputs:
 32174                                  ;	 No Inputs
 32175                                  ; Function:
 32176                                  ;	Returns the pointer to the first buffer in Queue
 32177                                  ;	and updates FIRST_BUFF_ADDR
 32178                                  ;       and invalidates LASTBUFFER (recency pointer)
 32179                                  ; Outputs:
 32180                                  ;	DS:DI = pointer to the first buffer in Queue
 32181                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 32182                                  ;       LASTBUFFER = -1
 32183                                  ; No other registers altered
 32184                                  ;----------------------------------------------------------------------------
 32185                                  
 32186                                  ; 04/05/2019 - Retro DOS v4.0
 32187                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 32188                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32189                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 32190                                  
 32191                                  GETCURHEAD:
 32192 000057B6 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 32193 000057BB 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 32194 000057C2 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 32195 000057C7 C3                      	retn
 32196                                  
 32197                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 32198                                  ;----------------------------------------------------------------------------
 32199                                  ; Procedure Name : ScanPlace
 32200                                  ; Inputs:
 32201                                  ;	Same as PLACEBUF
 32202                                  ; Function:
 32203                                  ;	Save scan location and call PLACEBUF
 32204                                  ; Outputs:
 32205                                  ;	DS:DI Points to saved scan location
 32206                                  ; All registers, except DS:DI, preserved.
 32207                                  ;----------------------------------------------------------------------------
 32208                                  ;M039: Rewritten to preserve registers.
 32209                                  
 32210                                  ;SCANPLACE:
 32211                                  ;	; 31/07/2018 - Retro DOS v3.0
 32212                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 32213                                  ;	push	es
 32214                                  ;	les	si,[di]
 32215                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 32216                                  ;	call	PLACEBUF
 32217                                  ;	push	es
 32218                                  ;	pop	ds
 32219                                  ;	mov	di,si
 32220                                  ;	pop	es
 32221                                  ;scanplace_retn:
 32222                                  ;	retn	
 32223                                  	
 32224                                  	; MSDOS 6.0
 32225                                  SCANPLACE:
 32226 000057C8 FF35                    	push	word [di]
 32227                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 32228 000057CA E80200                  	call	PLACEBUF
 32229 000057CD 5F                      	pop	di
 32230 000057CE C3                      	retn
 32231                                  
 32232                                  ;----------------------------------------------------------------------------
 32233                                  ; Procedure Name : PlaceBuf
 32234                                  ; Input:
 32235                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 32236                                  ; Function:
 32237                                  ;	Remove buffer from queue and re-insert it in proper place.
 32238                                  ; NO registers altered
 32239                                  ;----------------------------------------------------------------------------
 32240                                  
 32241                                  ;procedure PLACEBUF,NEAR
 32242                                  
 32243                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32244                                  	; 20/05/2019 - Retro DOS v4.0
 32245                                  PLACEBUF:
 32246                                  	; 31/07/2018 - Retro DOS v3.0
 32247                                  
 32248                                  	; MSDOS 6.0
 32249 000057CF 50                      	push	AX			;Save only regs we modify	;AN000;
 32250 000057D0 53                      	push	BX							;AN000;
 32251                                  	; 23/09/2023
 32252                                  	;push	SI							;AN000;
 32253                                  	
 32254 000057D1 8B05                    	mov	ax,[di]
 32255                                  	;mov	ax,[di+BUFFINFO.buf_next]
 32256 000057D3 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 32257                                  	
 32258 000057D8 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 32259 000057DA 7422                    	je	short nret			;Yes, special case	;AN000;
 32260 000057DC 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 32261 000057DE 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 32262 000057E0 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 32263 000057E4 EB18                    	jmp	short nret 			;Continue with repositioning;AN000;
 32264                                  not_first:
 32265                                  	; 23/09/2023
 32266 000057E6 56                      	push	si
 32267                                  	;mov	si,[di+2]
 32268 000057E7 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 32269 000057EA 8904                    	mov	[si],ax
 32270                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 32271 000057EC 96                      	xchg	si,ax
 32272                                  	;mov	[si+2],ax
 32273 000057ED 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 32274                                  	
 32275 000057F0 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 32276 000057F3 893C                    	mov	[si],di
 32277                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 32278 000057F5 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 32279 000057F8 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 32280 000057FB 891D                    	mov	[di],bx
 32281                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 32282                                  	; 23/09/2023
 32283 000057FD 5E                      	pop	si
 32284                                  nret:	
 32285                                  	; 23/09/2023							;AN000;
 32286                                  	;pop	SI							;AN000;
 32287 000057FE 5B                      	pop	BX							;AN000;
 32288 000057FF 58                      	pop	AX							;AN000;
 32289                                  									;AN000;
 32290                                  	;cmp	byte [di+4],0FFh
 32291 00005800 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 32292 00005804 7505                            jne	short pbx			; M039: -no, jump.
 32293 00005806 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 32294                                  pbx:	
 32295 0000580B C3                      	retn								;AN000;
 32296                                  
 32297                                  	; 31/07/2018 - Retro DOS v3.0
 32298                                  
 32299                                  	; MSDOS 3.3
 32300                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 32301                                  
 32302                                  ;PLACEBUF:
 32303                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 32304                                  ;	
 32305                                  ;       CALL	save_world
 32306                                  ;       LES     CX,[DI]
 32307                                  ;       CMP     CX,-1           	; Buf is LAST?
 32308                                  ;       JZ      SHORT NRET		; Buffer already last
 32309                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 32310                                  ;       PUSH    DS
 32311                                  ;       POP     ES              	; Buf is ES:DI
 32312                                  ;	; 15/03/2018
 32313                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 32314                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 32315                                  ;       JNZ     SHORT BUFLOOP
 32316                                  ;       MOV     [SS:BUFFHEAD],CX
 32317                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 32318                                  ;       JMP     SHORT LOOKEND
 32319                                  ;BUFLOOP:
 32320                                  ;	; 31/07/2018
 32321                                  ;	mov	ax,ds
 32322                                  ;	mov	bx,si
 32323                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32324                                  ;       LDS     SI,[SI]
 32325                                  ;       CALL    POINTCOMP
 32326                                  ;       jnz	short BUFLOOP
 32327                                  ;	;
 32328                                  ;	mov	ds,ax
 32329                                  ;	mov	si,bx
 32330                                  ;	mov	[SI],cx
 32331                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 32332                                  ;	mov	[SI+2],bp
 32333                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 32334                                  ;LOOKEND:
 32335                                  ;	mov	ax,ds
 32336                                  ;	mov	bx,si
 32337                                  ;       LDS     SI,[SI]
 32338                                  ;       CMP     SI,-1
 32339                                  ;       jnz     short LOOKEND
 32340                                  ;GOTHEEND:
 32341                                  ;       mov	ds,ax
 32342                                  ;	mov	[BX],di
 32343                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 32344                                  ;       MOV     WORD [ES:DI],-1
 32345                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 32346                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 32347                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 32348                                  ;NRET:
 32349                                  ;       CALL	restore_world
 32350                                  ;	
 32351                                  ;	;cmp	byte [di+4],-1
 32352                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 32353                                  ;	jnz     short scanplace_retn
 32354                                  ;	call    PLACEHEAD
 32355                                  ;	retn
 32356                                  
 32357                                  ;EndProc PLACEBUF
 32358                                  
 32359                                  ;M039 - Removed PLACEHEAD.
 32360                                  ;----------------------------------------------------------------------------
 32361                                  ; places buffer at head
 32362                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 32363                                  ;	ONE IN THE LIST!!!!!!!
 32364                                  ; BUGBUG ---- this routine can be removed because it has only
 32365                                  ; BUGBUG ---- one instruction. This routine is called from
 32366                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 32367                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 32368                                  ; BUGBUG ---- But kept as it is for modularity
 32369                                  ;----------------------------------------------------------------------------
 32370                                  ;procedure   PLACEHEAD,NEAR
 32371                                  ;	mov	word ptr [BufferQueue], di
 32372                                  ;	ret
 32373                                  ;EndProc PLACEHEAD
 32374                                  ;M039
 32375                                  
 32376                                  ;----------------------------------------------------------------------------
 32377                                  ; Procedure Name : PLACEHEAD
 32378                                  ;
 32379                                  ; SAME AS PLACEBUF except places buffer at head
 32380                                  ;----------------------------------------------------------------------------
 32381                                  
 32382                                  	; MSDOS 3.3 (Retro DOS v3.0)
 32383                                  	; 05/09/2018
 32384                                  	; MSDOS 2.11 (Retro DOS v2.0)
 32385                                  ;PLACEHEAD:
 32386                                  ;	; 31/07/2018 - Retro DOS v3.0
 32387                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 32388                                  ;
 32389                                  ;       CALL	save_world
 32390                                  ;       PUSH	DS
 32391                                  ;       POP	ES
 32392                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 32393                                  ;       LDS     SI,[SS:BUFFHEAD]
 32394                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 32395                                  ;	CALL    POINTCOMP
 32396                                  ;       JZ      SHORT GOTHEEND2
 32397                                  ;	MOV	[ES:DI],SI
 32398                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 32399                                  ;       MOV	[ES:DI+2],DS
 32400                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 32401                                  ;       MOV	[SS:BUFFHEAD],DI
 32402                                  ;       MOV	[SS:BUFFHEAD+2],ES
 32403                                  ;LOOKEND2:
 32404                                  ;       mov	ax,ds
 32405                                  ;	mov	bx,si
 32406                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32407                                  ;       LDS     SI,[SI]
 32408                                  ;       CALL    POINTCOMP
 32409                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 32410                                  ;       mov	ds,ax
 32411                                  ;	mov	word [bx],-1
 32412                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 32413                                  ;	mov	word [bx+2],-1
 32414                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 32415                                  ;GOTHEEND2:
 32416                                  ;      	call	restore_world
 32417                                  ;placehead_retn:
 32418                                  ;	retn
 32419                                  
 32420                                  ; 20/05/2019 - Retro DOS v4.0
 32421                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 32422                                  
 32423                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 32424                                  ;----------------------------------------------------------------------------
 32425                                  ;
 32426                                  ; Procedure Name : PointComp
 32427                                  ; Inputs:
 32428                                  ;         DS:SI & ES:DI
 32429                                  ; Function:
 32430                                  ;          Checks for ((SI==DI) && (ES==DS))
 32431                                  ;	   Assumes that pointers are normalized for the
 32432                                  ;	   same segment
 32433                                  ;
 32434                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 32435                                  ; DO NOT USE FOR < or >
 32436                                  ; No Registers altered
 32437                                  ;
 32438                                  ;----------------------------------------------------------------------------
 32439                                  
 32440                                  POINTCOMP:
 32441                                  	; 31/07/2018 - Retro DOS v3.0
 32442                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 32443 0000580C 39FE                    	CMP	SI,DI
 32444 0000580E 750A                    	jnz	short _ret_label	; return if nz
 32445                                  	;jnz	short placehead_retn 
 32446 00005810 51                      	PUSH	CX
 32447 00005811 52                      	PUSH	DX
 32448 00005812 8CD9                    	MOV	CX,DS
 32449 00005814 8CC2                    	MOV	DX,ES
 32450 00005816 39D1                    	CMP	CX,DX
 32451 00005818 5A                      	POP	DX
 32452 00005819 59                      	POP	CX
 32453                                  _ret_label:
 32454 0000581A C3                      	retn
 32455                                  
 32456                                  ; 01/08/2018 - Retro DOS v3.0
 32457                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 32458                                  
 32459                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 32460                                  
 32461                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 32462                                  ;----------------------------------------------------------------------------
 32463                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 32464                                  ;	It gets the specified local sector into one of the I/O buffers
 32465                                  ;	and shuffles the queue
 32466                                  ; 
 32467                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32468                                  ;		       ELSE no pre-read
 32469                                  ;		(DX) = Desired physical sector number	      (LOW)
 32470                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32471                                  ;		(ES:BP) = Pointer to drive parameters
 32472                                  ;		ALLOWED set in case of INT 24
 32473                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32474                                  ;		'C' clear if OK
 32475                                  ;		CURBUF Points to the Buffer for the sector
 32476                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32477                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32478                                  ;----------------------------------------------------------------------------
 32479                                  
 32480                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 32481                                  ;----------------------------------------------------------------------------
 32482                                  ;	GetBuffrb reads a sector from the FAT file system's FAT table.
 32483                                  ;	It gets the specified sector into one of the I/O buffers
 32484                                  ;	and shuffles the queue. We need a special entry point so that
 32485                                  ;	we can read the alternate FAT sector if the first read fails, also
 32486                                  ;	so we can mark the buffer as a FAT sector.
 32487                                  ; 
 32488                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32489                                  ;		       ELSE no pre-read
 32490                                  ;		(DX) = Desired physical sector number	     (LOW)
 32491                                  ;		(SI) != 0
 32492                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32493                                  ;		(ES:BP) = Pointer to drive parameters
 32494                                  ;		ALLOWED set in case of INT 24
 32495                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32496                                  ;		'C' clear if OK
 32497                                  ;		CUR ddBUF Points to the Buffer for the sector
 32498                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32499                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32500                                  ;----------------------------------------------------------------------------
 32501                                  
 32502                                  	; 22/09/2023 - RetroDOS v4.2 MSDOS.SYS (optimization)
 32503                                  GETBUFFRC:
 32504 0000581B C706[0706]0000          	mov	word [HIGH_SECTOR],0
 32505                                  GETBUFFRA:
 32506 00005821 30C0                    	xor	al,al
 32507 00005823 BE0100                  	mov	si,1
 32508 00005826 EB09                    	jmp	short GETBUFFRB
 32509                                  
 32510                                  	; 22/09/2023
 32511                                  GETBUFFER:
 32512 00005828 30C0                    	xor	al,al
 32513                                  GETBUFFRD:
 32514                                  	;mov	byte [ALLOWED],18h
 32515 0000582A C606[4B03]18            	mov	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 32516                                  
 32517                                  	; 20/05/2019 - Retro DOS v4.0
 32518                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 32519                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32520                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 32521                                  GETBUFFR:
 32522 0000582F 31F6                    	XOR	SI,SI
 32523                                  
 32524                                  ;	This entry point is called for FAT buffering with SI != 0
 32525                                  
 32526                                  GETBUFFRB:
 32527 00005831 A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 32528                                  	; 15/12/2022
 32529 00005834 268A4600                	mov	al,[ES:BP]
 32530                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32531                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 32532 00005838 C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 32533                                  	; MSDOS 6.0
 32534                                  ;hkn; SS override
 32535 0000583C 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb	;AN000;
 32536                                  
 32537                                  ;	See if this is the buffer that was most recently returned.
 32538                                  ;	A big performance win if it is.
 32539                                  
 32540 00005841 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 32541 00005844 7412                    	je	short getb5			; No
 32542                                  	;cmp	dx,[di+6]
 32543 00005846 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32544 00005849 750D                    	JNZ	short getb5			; Wrong sector
 32545                                  	
 32546                                  	; MSDOS 6.0
 32547                                  	;cmp	cx,[di+8]
 32548 0000584B 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb	;AN000;
 32549 0000584E 7508                    	JNZ	short getb5			; F.C. >32mb	;AN000;
 32550                                  	
 32551                                  	;cmp	al,[di+4]
 32552 00005850 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32553                                  	;JZ	getb35				; Just asked for same buffer
 32554 00005853 7503                    	jnz	short getb5
 32555                                  	;jmp	getb35
 32556                                  	; 17/12/2022
 32557                                  	; 28/07/2019
 32558 00005855 E9C700                  	jmp	getb35x
 32559                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32560                                  	;jmp	getb35
 32561                                  
 32562                                  ;	It's not the buffer most recently returned. See if it's in the
 32563                                  ;	cache.
 32564                                  ;
 32565                                  ;	(cx:dx) = sector #
 32566                                  ;	(al) = drive #
 32567                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32568                                  ;	??? list may be incomplete ???
 32569                                  
 32570                                  getb5:	
 32571                                  	; MSDOS 3.3
 32572                                  	;lds	di,[SS:BUFFHEAD]
 32573                                  	; MSDOS 6.0
 32574 00005858 E85BFF                  	CALL	GETCURHEAD			; get Q Head
 32575                                  getb10:	
 32576                                  	;cmp	dx,[di+6]
 32577 0000585B 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32578 0000585E 750D                    	jne	short getb12			; wrong sector lo
 32579                                  	
 32580                                  	; MSDOS 6.0
 32581                                  	;cmp	cx,[di+8]
 32582 00005860 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 32583 00005863 7508                    	jne	short getb12			; wrong sector hi
 32584                                  	
 32585                                  	;cmp	al,[di+4]
 32586 00005865 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32587                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 32588 00005868 7503                    	jne	short getb12
 32589 0000586A E98C00                  	jmp	getb25
 32590                                  getb12:	
 32591                                  	; MSDOS 3.3
 32592                                  	;;mov	di,[DI]
 32593                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 32594                                  	;
 32595                                  	; 15/08/2018
 32596                                  	;lds	di,[di]
 32597                                  
 32598                                  	;cmp	di,-1 ; 0FFFFh
 32599                                  	;jne	short getb10
 32600                                  	;lds	di,[SS:BUFFHEAD]
 32601                                  
 32602                                  	; MSDOS 6.0
 32603 0000586D 8B3D                    	mov	di,[di]
 32604                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 32605 0000586F 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 32606 00005874 75E5                    	jne	short getb10			; no, continue looking
 32607                                  
 32608                                  ;	The requested sector is not available in the buffers. DS:DI now points
 32609                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 32610                                  ;	new sector into it.
 32611                                  ;
 32612                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 32613                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 32614                                  ;	him, we should take LRU. And the above lookup shouldn't be
 32615                                  ;	down a chain, but should be hashed.
 32616                                  ;
 32617                                  ;	(DS:DI) = first buffer in the queue
 32618                                  ;	(CX:DX) = sector # we want
 32619                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32620                                  
 32621                                  	; MSDOS 3.3 & MSDOS 6.0
 32622                                  ;hkn; SS override
 32623 00005876 51                      	PUSH	CX  ; MSDOS 6.0
 32624 00005877 56                      	push	si
 32625 00005878 52                      	push	dx
 32626 00005879 55                      	push	bp
 32627 0000587A 06                      	push	es
 32628 0000587B E81601                  	CALL	BUFWRITE			; Write out the dirty buffer
 32629 0000587E 07                      	pop	es
 32630 0000587F 5D                      	pop	bp
 32631 00005880 5A                      	pop	dx
 32632 00005881 5E                      	pop	si
 32633 00005882 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 32634                                  	;jc	short getbx			; if got hard error
 32635 00005887 7303                    	jnc	short getb13
 32636 00005889 E99D00                  	jmp	getbx
 32637                                  
 32638                                  getb13:
 32639                                  	; MSDOS 6.0
 32640 0000588C E88C01                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 32641                                  
 32642                                  ;	We're ready to read in the buffer, if need be. If the caller
 32643                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 32644                                  
 32645 0000588F 30E4                    	XOR	AH,AH				; initial flags
 32646                                  ;hkn; SS override
 32647                                  	;test	byte [ss:PREREAD],0FFh
 32648                                  	;jnz	short getb20
 32649 00005891 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 32650 00005896 7549                    	JNZ	short getb20			; no, we're done
 32651                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 32652                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32653 00005898 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 32654                                  	;MOV	CX,1
 32655                                  	; 22/09/2023
 32656 0000589B 29C9                    	sub	cx,cx ; 0
 32657 0000589D 56                      	push	si
 32658 0000589E 57                      	push	di
 32659 0000589F 52                      	push	dx
 32660                                  	; MSDOS 6.0
 32661 000058A0 06                      	push	es ; ***
 32662                                  
 32663                                  ; Note: As far as I can tell, all disk reads into buffers go through
 32664                                  ;	this point. -mrw 10/88
 32665                                  	
 32666                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 32667                                  	; 22/09/2023
 32668 000058A1 36380E[7900]            	cmp	[ss:BuffInHMA],cl ; 0
 32669 000058A6 7407                    	jz	short getb14
 32670 000058A8 1E                      	push	ds ; **
 32671 000058A9 53                      	push	bx ; *
 32672 000058AA 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 32673                                  getb14:
 32674                                  ;M039: Eliminated redundant HMA code.
 32675                                  
 32676                                  	; 22/09/2023
 32677 000058AF 41                      	inc	cx ; cx = 1
 32678                                  
 32679                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32680 000058B0 09F6                    	OR	SI,SI			; FAT sector ?
 32681 000058B2 7407                    	JZ	short getb15		
 32682                                  
 32683 000058B4 E863DD                  	call	FATSECRD
 32684                                  	;mov	ah,2
 32685 000058B7 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 32686                                  
 32687 000058B9 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 32688                                  
 32689                                  getb15:
 32690 000058BB E888DD                  	call	DREAD			; Buffer is marked free if read barfs
 32691 000058BE B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 32692                                  getb17:
 32693                                  	; 17/12/2022	
 32694                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32695                                  ;%if 0
 32696                                  	; MSDOS 6.0							  ;I001
 32697 000058C0 9C                      	pushf								  ;I001
 32698 000058C1 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 32699 000058C7 7411                    	jz	short not_in_hma	; no				  ;I001
 32700                                  	;mov	cx,[es:bp+2]
 32701 000058C9 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 32702 000058CD D1E9                    	shr	cx,1							  ;I001
 32703 000058CF 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 32704 000058D0 89DE                    	mov	si,bx							  ;I001
 32705 000058D2 5F                      	pop	di ; *							  ;I001
 32706 000058D3 07                      	pop	es ; **							  ;I001
 32707 000058D4 FC                      	cld								  ;I001
 32708 000058D5 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 32709 000058D6 F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 32710 000058D8 06                      	push	es							  ;I001
 32711 000058D9 1F                      	pop	ds							  ;I001
 32712                                  ;%endif
 32713                                  
 32714                                  ; 17/12/2022
 32715                                  %if 0
 32716                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32717                                  	; MSDOS 5.0
 32718                                  	pushf
 32719                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 32720                                  	jz	short not_in_hma	; no
 32721                                  	popf
 32722                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 32723                                  	shr	cx,1
 32724                                  	mov	si,bx
 32725                                  	pop	di ; *
 32726                                  	pop	es ; **
 32727                                  	cld
 32728                                  	rep	movsw
 32729                                  	push	es
 32730                                  	pop	ds
 32731                                  	jmp	short getb19 ; 27/11/2022
 32732                                  %endif
 32733                                  
 32734                                  not_in_hma:								  ;I001
 32735 000058DA 9D                      	popf							 	  ;I001
 32736                                  getb19:
 32737 000058DB 07                      	pop	es ; ***
 32738 000058DC 5A                      	pop	dx
 32739 000058DD 5F                      	pop	di
 32740 000058DE 5E                      	pop	si
 32741 000058DF 7248                    	JC	short getbx
 32742                                  
 32743                                  ;	The buffer has the data setup in it (if we were to read)
 32744                                  ;	Setup the various buffer fields
 32745                                  ;
 32746                                  ;	(ds:di) = buffer address
 32747                                  ;	(es:bp) = DPB address
 32748                                  ;	(HIGH_SECTOR:DX) = sector #
 32749                                  ;	(ah) = BUF_FLAGS value
 32750                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 32751                                  
 32752                                  ;hkn; SS override
 32753                                  getb20:	; MSDOS 6.0
 32754 000058E1 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 32755                                  	;mov	[di+8],cx
 32756 000058E6 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 32757                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 32758                                   	;mov	[di+6],dx
 32759 000058E9 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 32760                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 32761                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 32762 000058EC 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 32763                                  	;;mov	[di+0Ch],es
 32764                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 32765 000058EF 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 32766                                  	; 15/12/2022
 32767 000058F2 268A4600                	mov	al,[es:bp]
 32768                                  	;mov	al,[es:bp+0]
 32769                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 32770                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 32771                                  	;mov	[di+4],ax
 32772 000058F6 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 32773                                  getb25:	
 32774                                  	; MSDOS 3.3
 32775                                  	;mov     ax,1
 32776                                  
 32777                                  	; MSDOS 6.0
 32778                                  	;mov	byte [di+0Ah],1
 32779 000058F9 C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 32780 000058FD 31C0                    	XOR	AX,AX
 32781                                  
 32782                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32783 000058FF 09F6                    	OR	SI,SI				; FAT sector ?
 32784 00005901 740B                    	JZ	short getb30
 32785                                  
 32786                                  	;mov	al,[es:bp+8]
 32787 00005903 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 32788                                  	
 32789                                  	; MSDOS 6.0
 32790 00005907 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 32791                                  	;mov	ax,[es:bp+0Fh]
 32792 0000590A 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 32793                                  						;  sectors
 32794                                  	; MSDOS 3.3
 32795                                  	;;mov	ah,[es:bp+0Fh]
 32796                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 32797                                  
 32798                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 32799                                  ;		is set
 32800                                  
 32801                                  getb30:	
 32802                                  	; MSDOS 6.0
 32803                                  	;mov	[di+0Bh],ax
 32804 0000590E 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 32805                                  
 32806                                  	; MSDOS 3.3
 32807                                  	;;mov	[di+8],ax ; 15/08/2018	
 32808                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 32809                                  
 32810 00005911 E8BBFE                  	CALL	PLACEBUF
 32811                                  
 32812                                  ;hkn; SS override for next 4
 32813                                  getb35: 
 32814                                  	; 17/12/2022
 32815                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32816                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 32817                                  	;MOV	[SS:CURBUF+2],DS
 32818                                  	;MOV	[SS:LastBuffer+2],DS
 32819                                  	;MOV	[SS:CURBUF],DI
 32820                                  	;MOV	[SS:LastBuffer],DI
 32821                                  	;CLC
 32822                                  
 32823                                  	; 17/12/2022
 32824                                  	; 07/12/2022
 32825                                  	; Retro DOS v4.0
 32826 00005914 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 32827 00005919 36893E[1E00]            	mov	[ss:LastBuffer],di
 32828 0000591E F8                      	clc
 32829                                  getb35x: ; 28/07/2019
 32830 0000591F 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 32831 00005924 36893E[E205]            	MOV	[ss:CURBUF],di
 32832                                  
 32833                                  ;	Return with 'C' set appropriately
 32834                                  ;	(dx) = caller's original value
 32835                                  
 32836                                  getbx:	
 32837 00005929 16                      	push	ss
 32838 0000592A 1F                      	pop	ds
 32839                                  	;retn
 32840                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32841                                  getbuffrb_retn:
 32842                                  ;flushbuf_retn:	; 17/12/2022
 32843 0000592B C3                      	retn
 32844                                  
 32845                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 32846                                  ;----------------------------------------------------------------------------
 32847                                  ; Input:
 32848                                  ;	DS = DOSGROUP
 32849                                  ;	AL = Physical unit number local buffers only
 32850                                  ;	   = -1 for all units and all remote buffers
 32851                                  ; Function:
 32852                                  ;	Write out all dirty buffers for unit, and flag them as clean
 32853                                  ;	Carry set if error (user FAILed to I 24)
 32854                                  ;	    Flush operation completed.
 32855                                  ; DS Preserved, all others destroyed (ES too)
 32856                                  ;----------------------------------------------------------------------------
 32857                                  
 32858                                  	; 20/05/2019 - Retro DOS v4.0
 32859                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 32860                                  
 32861                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32862                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 32863                                  FLUSHBUF:
 32864                                  	; MSDOS 3.3
 32865                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 32866                                  	;lds	di,[BUFFHEAD]
 32867                                  
 32868                                  	; MSDOS 6.0
 32869 0000592C E887FE                  	call	GETCURHEAD
 32870                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32871 0000592F 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32872 00005935 7508                    	jnz	short scan_buf_queue
 32873 00005937 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 32874 0000593D 7423                    	je	short end_scan
 32875                                  	
 32876                                  scan_buf_queue:
 32877 0000593F E82900                  	call	CHECKFLUSH
 32878                                  	;push	ax  ; MSDOS 3.3
 32879                                  	; MSDOS 6.0
 32880                                  	;mov	ah,[di+4]
 32881 00005942 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 32882 00005945 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 32883 0000594A 7408                    	je	short free_the_buf
 32884                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32885 0000594C 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32886 00005952 7405                    	jz	short dont_free_the_buf
 32887                                  	; MSDOS 3.3
 32888                                  	;;mov	al,[di+4]
 32889                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 32890                                  	;cmp	[SS:WPERR],al					;hkn;
 32891                                  	; 15/08/2018
 32892                                  	;jne	short dont_free_the_buf	
 32893                                  free_the_buf:
 32894                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32895 00005954 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 32896                                  dont_free_the_buf:
 32897                                  	;pop	ax  ; MSDOS 3.3 	   	
 32898                                  
 32899                                  	; MSDOS 3.3
 32900                                  	;mov	di,[DI]
 32901                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 32902                                  	;
 32903                                  	; 15/08/2018
 32904                                  	;lds	di,[di]
 32905                                  	;
 32906                                  	;cmp	di,-1 ; 0FFFFh
 32907                                  	;jnz	short scan_buf_queue 
 32908                                  	
 32909                                  	; MSDOS 6.0
 32910 00005959 8B3D                    	mov	di,[di]
 32911                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 32912 0000595B 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 32913 00005960 75DD                    	jne	short scan_buf_queue
 32914                                  
 32915                                  end_scan:
 32916 00005962 16                      	push	ss
 32917 00005963 1F                      	pop	ds
 32918                                  	; 01/08/2018 - Retro DOS v3.0
 32919                                  	;cmp	byte [FAILERR],0
 32920                                  	;jne	short bad_flush
 32921                                  	;retn
 32922                                  ;bad_flush:
 32923                                  	;stc
 32924                                  	;retn
 32925                                  
 32926                                  	; 17/12/2022
 32927                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32928                                  	; 01/08/2018 - Retro DOS v3.0
 32929 00005964 803E[4A03]01            	cmp	byte [FAILERR],1
 32930 00005969 F5                      	cmc
 32931                                  flushbuf_retn:
 32932 0000596A C3                      	retn
 32933                                  	
 32934                                  	; 17/12/2022
 32935                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32936                                  	;cmp	byte [FAILERR],0
 32937                                  	;jne	short bad_flush
 32938                                  	;retn
 32939                                  ;bad_flush:
 32940                                  	;stc
 32941                                  	;retn
 32942                                  
 32943                                  ;----------------------------------------------------------------------------
 32944                                  ;
 32945                                  ; Procedure Name : CHECKFLUSH
 32946                                  ;
 32947                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 32948                                  ;	   DS:DI - pointer to buffer
 32949                                  ;
 32950                                  ; Function : Write out a buffer if it is dirty
 32951                                  ;
 32952                                  ; Carry set if problem (currently user FAILed to I 24)
 32953                                  ;
 32954                                  ;----------------------------------------------------------------------------
 32955                                  
 32956                                  CHECKFLUSH:
 32957                                  	; MSDOS 6.0
 32958 0000596B B4FF                    	mov	ah,-1	; 01/08/2018 Retro DOS v3.0
 32959                                  	;cmp	[di+4],ah
 32960 0000596D 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 32961 00005970 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 32962 00005972 38C4                    	CMP	AH,AL			; 
 32963 00005974 7406                    	JZ	short DOBUFFER		; do this buffer
 32964                                  	;cmp	al,[di+4]
 32965 00005976 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32966 00005979 F8                      	CLC
 32967 0000597A 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 32968                                  DOBUFFER:
 32969                                  	;test	byte [di+5],40h
 32970 0000597C F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 32971 00005980 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 32972 00005982 50                      	PUSH	AX
 32973                                  	;push	word [di+4]
 32974 00005983 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 32975 00005986 E80B00                  	CALL	BUFWRITE
 32976 00005989 58                      	POP	AX
 32977 0000598A 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 32978                                  	;and	ah,0BFh
 32979 0000598C 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 32980                                  	;mov	[di+4],ax
 32981 0000598F 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 32982                                  LEAVE_BUF:
 32983 00005992 58                      	POP	AX			; Search info
 32984                                  checkflush_retn:
 32985 00005993 C3                      	retn
 32986                                  
 32987                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 32988                                  ;----------------------------------------------------------------------------
 32989                                  ;
 32990                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 32991                                  ;
 32992                                  ;	ENTRY	DS:DI Points to the buffer
 32993                                  ;
 32994                                  ;	EXIT	Buffer marked free
 32995                                  ;		Carry set if error (currently user FAILed to I 24)
 32996                                  ;
 32997                                  ;	USES	All buf DS:DI
 32998                                  ;		HIGH_SECTOR
 32999                                  ;----------------------------------------------------------------------------
 33000                                  
 33001                                  	; 20/05/2019 - Retro DOS v4.0
 33002                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 33003                                  
 33004                                  
 33005                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33006                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 33007                                  
 33008                                  BUFWRITE:
 33009                                  	; 10/09/2018
 33010                                  	; 01/08/2018 - Retro DOS v3.0
 33011                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 33012 00005994 B8FF00                  	MOV	AX,00FFH
 33013                                  	;xchg	ax,[di+4]
 33014 00005997 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 33015 0000599A 3CFF                    	CMP	AL,0FFH
 33016 0000599C 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 33017                                  	;test	ah,40h
 33018 0000599E F6C440                  	test	AH,buf_dirty
 33019 000059A1 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 33020                                  	; MSDOS 6.0
 33021 000059A3 E88E00                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 33022                                  
 33023                                  ;hkn; SS override
 33024 000059A6 363A06[2203]            	CMP	AL,[SS:WPERR]
 33025 000059AB 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 33026                                  
 33027                                  ;hkn; SS override
 33028                                  	; MSDOS 6.0
 33029 000059AD 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 33030                                  	
 33031                                  	; 07/03/2024
 33032                                  	;;;les	bp,[di+10] ; MSDOS 3.3
 33033                                  	;;les	bp,[di+13] ; MSDOS 6.0
 33034                                  	;LES	BP,[DI+BUFFINFO.buf_DPB]
 33035                                  
 33036                                  	;;lea	bx,[di+16]
 33037                                  	;lea	bx,[di+20] ; MSDOS 6.0
 33038 000059B1 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 33039                                  
 33040                                  ; 07/03/2024
 33041                                  %if 0
 33042                                  	;mov	dx,[di+6]
 33043                                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 33044                                  	
 33045                                  	; MSDOS 6.0
 33046                                  	;mov	cx,[di+8]
 33047                                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 33048                                  
 33049                                  ;hkn; SS override
 33050                                  	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 33051                                  %else
 33052                                  	; 07/03/2024 (PCDOS 7.1 IBMDOS.COM)
 33053                                  	;;;
 33054                                  	;les	dx,[di+6]
 33055 000059B4 C45506                  	les	dx,[di+BUFFINFO.buf_sector]
 33056 000059B7 368C06[0706]            	mov	[ss:HIGH_SECTOR],es
 33057                                  
 33058                                  	;;les	bp,[di+10] ; MSDOS 3.3
 33059                                  	;les	bp,[di+13] ; MSDOS 6.0
 33060 000059BC C46D0D                  	les	bp,[di+BUFFINFO.buf_DPB]
 33061                                  	;;;
 33062                                  %endif
 33063                                  
 33064 000059BF 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 33065                                  	; MSDOS 3.3
 33066                                  	;;mov	cx,[DI+8]
 33067                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 33068                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 33069 000059C2 30ED                    	XOR	CH,CH
 33070                                  	;;mov	ah,ch ; MSDOS 3.3
 33071                                  
 33072                                  ;hkn; SS override for ALLOWED
 33073                                  	;mov	byte [SS:ALLOWED],18h
 33074 000059C4 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 33075                                  	;test	byte [di+5],8
 33076                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 33077                                  	;test	ah,8
 33078 000059CA F6C408                  	test	AH,buf_isDATA
 33079 000059CD 7406                    	JZ	short NO_IGNORE
 33080                                  	;or	byte [SS:ALLOWED],20h
 33081 000059CF 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 33082                                  NO_IGNORE:
 33083                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 33084                                  	; MSDOS 6.0
 33085                                  	;mov	ax,[di+11]
 33086 000059D5 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 33087                                  
 33088 000059D8 57                      	PUSH	DI		; Save buffer pointer
 33089 000059D9 31FF                    	XOR	DI,DI		; Indicate failure
 33090                                  
 33091 000059DB 1E                      	push	ds ; *
 33092 000059DC 53                      	push	bx ; **
 33093                                  WRTAGAIN:
 33094 000059DD 57                      	push	di ; ***
 33095 000059DE 51                      	push	cx ; ****
 33096 000059DF 50                      	push	ax ; *****
 33097                                  	;MOV	CX,1
 33098                                  	; 17/12/2022
 33099                                  	; ch = 0
 33100 000059E0 B101                    	mov	cl,1 ; 24/07/2019
 33101                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 33102                                  	;mov	cx,1
 33103 000059E2 53                      	push	bx ; ******
 33104 000059E3 52                      	push	dx ; *******
 33105 000059E4 1E                      	push	ds ; ********
 33106                                  
 33107                                  ; Note: As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 33108                                  
 33109                                  	; MSDOS 6.0
 33110                                  	;cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 33111                                  	; 22/09/2023
 33112 000059E5 36382E[7900]            	cmp	[ss:BuffInHMA],ch ; 0
 33113 000059EA 7418                    	jz	short NBUFFINHMA
 33114 000059EC 51                      	push	cx
 33115 000059ED 06                      	push	es
 33116 000059EE 89DE                    	mov	si,bx
 33117 000059F0 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 33118 000059F4 D1E9                    	shr	cx,1
 33119 000059F6 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 33120 000059FB 89FB                    	mov	bx,di
 33121 000059FD FC                      	cld
 33122 000059FE F3A5                    	rep	movsw
 33123 00005A00 06                      	push	es
 33124 00005A01 1F                      	pop	ds
 33125 00005A02 07                      	pop	es
 33126 00005A03 59                      	pop	cx
 33127                                  NBUFFINHMA:
 33128 00005A04 E89FDC                  	call	DWRITE		; Write out the dirty buffer
 33129 00005A07 1F                      	pop	ds ; ********
 33130 00005A08 5A                      	pop	dx ; *******
 33131 00005A09 5B                      	pop	bx ; ******
 33132 00005A0A 58                      	pop	ax ; *****
 33133 00005A0B 59                      	pop	cx ; ****
 33134 00005A0C 5F                      	pop	di ; ***
 33135 00005A0D 7201                    	JC	short NOSET
 33136 00005A0F 47                      	INC	DI		; If at least ONE write succeedes, the operation
 33137                                  NOSET:				;	succeedes.
 33138 00005A10 01C2                    	ADD	DX,AX
 33139 00005A12 E2C9                    	LOOP	WRTAGAIN
 33140 00005A14 5B                      	pop	bx ; **
 33141 00005A15 1F                      	pop	ds ; *
 33142                                  	;OR	DI,DI		; Clears carry
 33143                                  	;JNZ	short BWROK	; At least one write worked
 33144                                  	;STC			; DI never got INCed, all writes failed.
 33145                                  	; 22/09/2023
 33146 00005A16 83FF01                  	cmp	di,1
 33147                                  BWROK:	
 33148 00005A19 5F                      	POP	DI
 33149 00005A1A C3                      	retn
 33150                                  
 33151                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 33152                                  ;----------------------------------------------------------------------------
 33153                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 33154                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 33155                                  ;	SC_DRIVE even if SC is disabled to save the testing
 33156                                  ;	code and time
 33157                                  ;
 33158                                  ;	ENTRY	ES:BP = drive parameter block
 33159                                  ;
 33160                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 33161                                  ;		[SC_DRIVE]= drive #
 33162                                  ;
 33163                                  ;	USES	Flags
 33164                                  ;----------------------------------------------------------------------------
 33165                                  
 33166                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33167                                  ; 04/05/2019 - Retro DOS v4.0
 33168                                  
 33169                                  SET_RQ_SC_PARMS:
 33170                                  ;hkn; SS override for all variables used in this procedure.
 33171 00005A1B 50                      	push	ax
 33172                                  	;mov	ax,[es:bp+2]
 33173 00005A1C 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 33174 00005A20 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 33175                                  	;;mov	al,[es:bp+0]
 33176                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 33177                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 33178                                  	; 15/12/2022
 33179 00005A24 268A4600                	mov	al,[ES:BP]
 33180 00005A28 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 33181 00005A2C 58                      	pop	ax
 33182                                  srspx:	
 33183 00005A2D C3                      	retn					;LB. return
 33184                                  
 33185                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 33186                                  ;----------------------------------------------------------------------------
 33187                                  ; Input:
 33188                                  ;	none
 33189                                  ; Function:
 33190                                  ;	increment dirty buffers count
 33191                                  ; Output:
 33192                                  ;	dirty buffers count is incremented
 33193                                  ;
 33194                                  ; All registers preserved
 33195                                  ;----------------------------------------------------------------------------
 33196                                  
 33197                                  INC_DIRTY_COUNT:
 33198                                  ;; BUGBUG  ---- remove this routine
 33199                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 33200 00005A2E 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 33201 00005A33 C3                      	retn
 33202                                  
 33203                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 33204                                  ;----------------------------------------------------------------------------
 33205                                  ; Input:
 33206                                  ;	none
 33207                                  ; Function:
 33208                                  ;	decrement dirty buffers count
 33209                                  ; Output:
 33210                                  ;	dirty buffers count is decremented
 33211                                  ;
 33212                                  ; All registers preserved
 33213                                  ;----------------------------------------------------------------------------
 33214                                  
 33215                                  DEC_DIRTY_COUNT:
 33216 00005A34 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 33217 00005A3A 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 33218 00005A3C 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 33219                                  					; error condition to underflow here? ;hkn;
 33220                                  ddcx:	
 33221 00005A41 C3                      	retn
 33222                                  
 33223                                  ;============================================================================
 33224                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 33225                                  ;============================================================================
 33226                                  ; 02/08/2018 - Retro DOS v3.0
 33227                                  ; 29/04/2019 - Retro DOS v4.0
 33228                                  
 33229                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 33230                                  
 33231                                  ; Pseudo EXEC system call for DOS
 33232                                  
 33233                                  ;	TITLE	MSPROC - process maintenance
 33234                                  ;	NAME	MSPROC
 33235                                  
 33236                                  ; =========================================================================
 33237                                  ;**	Process related system calls and low level routines for DOS 2.X.
 33238                                  ;	I/O specs are defined in DISPATCH.
 33239                                  ;
 33240                                  ;	$WAIT
 33241                                  ;	$EXEC
 33242                                  ;	$Keep_process
 33243                                  ;	Stay_resident
 33244                                  ;	$EXIT
 33245                                  ;	$ABORT
 33246                                  ;	abort_inner
 33247                                  ;
 33248                                  ;	Modification history:
 33249                                  ;
 33250                                  ;		Created: ARR 30 March 1983
 33251                                  ;		AN000	version 4.0 jan. 1988
 33252                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 33253                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 33254                                  ;
 33255                                  ;		M000	added support for loading programs into UMBs 7/9/90
 33256                                  ;
 33257                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 33258                                  ;		       dossym.inc. 7/30/90
 33259                                  ;		M005 - Support for EXE programs with out STACK segment and 
 33260                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 33261                                  ;		       stack is provided at the end of the program. Note that
 33262                                  ;		       only SP is changed.
 33263                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 33264                                  ;
 33265                                  ;		M028 - 4b04 implementation
 33266                                  ;
 33267                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 33268                                  ;			in memory block >= 64K, sp = 0. If memory block
 33269                                  ;			obtained is <64K, point sp at the end of the memory
 33270                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 33271                                  ;			added for a stack segment which may be needed if it
 33272                                  ;			is loaded in low memory situations.
 33273                                  ;
 33274                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 33275                                  ;
 33276                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 33277                                  ;			a bad environment if it reached 32767 bytes. Changed
 33278                                  ;			to allow 32768 bytes of environment.
 33279                                  ;
 33280                                  ;		M047 - Release the allocated UMB when we failed to load a 
 33281                                  ;		       COM file high. Also ensure that if the biggest block
 33282                                  ;		       into which we load the com file is less than 64K then
 33283                                  ;		       we provide atleast 256 bytes of stack to the user.
 33284                                  ;
 33285                                  ;		M050 - Made Lie table search CASE insensitive
 33286                                  ;
 33287                                  ;		M060 - Removed special version table from the kernal and
 33288                                  ;                      put it in a device drive which puts the address
 33289                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 33290                                  ;		       as a DWORD.
 33291                                  ;
 33292                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 33293                                  ;		       entry do not try to load low if there is no space in
 33294                                  ;		       UMBs.
 33295                                  ;
 33296                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 33297                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 33298                                  ;		       change return address to LeaveDos if AL=5.
 33299                                  ;
 33300                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 33301                                  ;                      controls building a version of MSDOS.SYS that only
 33302                                  ;                      runs programs from a fixed list (defined in the
 33303                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 33304                                  ;                      for details.  This feature is used to build a
 33305                                  ;                      "special" version of DOS that can be handed out to
 33306                                  ;                      OEM/ISV customers as part of a "service" disk.
 33307                                  ;
 33308                                  ; =========================================================================
 33309                                  
 33310                                  ;SAVEXIT  EQU  10
 33311                                  
 33312                                  ;BREAK	<$WAIT - return previous process error code>
 33313                                  ; =========================================================================
 33314                                  ;	$WAIT - Return previous process error code.
 33315                                  ;
 33316                                  ;	Assembler usage:
 33317                                  ;
 33318                                  ;	    MOV     AH, WaitProcess
 33319                                  ;	    INT     int_command
 33320                                  ;
 33321                                  ;	ENTRY	none
 33322                                  ;	EXIT	(ax) = exit code
 33323                                  ;	USES	all
 33324                                  ; =========================================================================
 33325                                  
 33326                                  	; 20/05/2019 - Retro DOS v4.0
 33327                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 33328                                  
 33329                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33330                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 33331                                  _$WAIT:
 33332                                  	; 02/08/2018 - Retro DOS v3.0
 33333                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 33334                                  
 33335 00005A42 31C0                    	xor	AX,AX
 33336 00005A44 368706[3403]            	xchg	AX,[ss:exit_code]
 33337 00005A49 E9E5AB                  	jmp	SYS_RET_OK
 33338                                  
 33339                                  ; =========================================================================
 33340                                  ;BREAK <$exec - load/go a program>
 33341                                  ;	EXEC.ASM - EXEC System Call
 33342                                  ;
 33343                                  ;
 33344                                  ; Assembler usage:
 33345                                  ;	    lds     DX, Name
 33346                                  ;	    les     BX, Blk
 33347                                  ;	    mov     AH, Exec
 33348                                  ;	    mov     AL, FUNC
 33349                                  ;	    int     INT_COMMAND
 33350                                  ;
 33351                                  ;	AL  Function
 33352                                  ;	--  --------
 33353                                  ;	 0  Load and execute the program.
 33354                                  ;	 1  Load, create the program header but do not
 33355                                  ;	    begin execution.
 33356                                  ;	 3  Load overlay. No header created.
 33357                                  ;
 33358                                  ;	    AL = 0 -> load/execute program
 33359                                  ;
 33360                                  ;	    +---------------------------+
 33361                                  ;	    | WORD segment address of	|
 33362                                  ;	    | environment.		|
 33363                                  ;	    +---------------------------+
 33364                                  ;	    | DWORD pointer to ASCIZ	|
 33365                                  ;	    | command line at 80h	|
 33366                                  ;	    +---------------------------+
 33367                                  ;	    | DWORD pointer to default	|
 33368                                  ;	    | FCB to be passed at 5Ch	|
 33369                                  ;	    +---------------------------+
 33370                                  ;	    | DWORD pointer to default	|
 33371                                  ;	    | FCB to be passed at 6Ch	|
 33372                                  ;	    +---------------------------+
 33373                                  ;
 33374                                  ;	    AL = 1 -> load program
 33375                                  ;
 33376                                  ;	    +---------------------------+
 33377                                  ;	    | WORD segment address of	|
 33378                                  ;	    | environment.		|
 33379                                  ;	    +---------------------------+
 33380                                  ;	    | DWORD pointer to ASCIZ	|
 33381                                  ;	    | command line at 80h	|
 33382                                  ;	    +---------------------------+
 33383                                  ;	    | DWORD pointer to default	|
 33384                                  ;	    | FCB to be passed at 5Ch	|
 33385                                  ;	    +---------------------------+
 33386                                  ;	    | DWORD pointer to default	|
 33387                                  ;	    | FCB to be passed at 6Ch	|
 33388                                  ;	    +---------------------------+
 33389                                  ;	    | DWORD returned value of	|
 33390                                  ;	    | CS:IP			|
 33391                                  ;	    +---------------------------+
 33392                                  ;	    | DWORD returned value of	|
 33393                                  ;	    | SS:IP			|
 33394                                  ;	    +---------------------------+
 33395                                  ;
 33396                                  ;	    AL = 3 -> load overlay
 33397                                  ;
 33398                                  ;	    +---------------------------+
 33399                                  ;	    | WORD segment address where|
 33400                                  ;	    | file will be loaded.	|
 33401                                  ;	    +---------------------------+
 33402                                  ;	    | WORD relocation factor to |
 33403                                  ;	    | be applied to the image.	|
 33404                                  ;	    +---------------------------+
 33405                                  ;
 33406                                  ; Returns:
 33407                                  ;	    AX = error_invalid_function
 33408                                  ;	       = error_bad_format
 33409                                  ;	       = error_bad_environment
 33410                                  ;	       = error_not_enough_memory
 33411                                  ;	       = error_file_not_found
 33412                                  ; =========================================================================
 33413                                  ;
 33414                                  ;   Revision history:
 33415                                  ;
 33416                                  ;	 A000	version 4.00  Jan. 1988
 33417                                  ;
 33418                                  ; =========================================================================
 33419                                  
 33420                                  Exec_Internal_Buffer		EQU	OPENBUF
 33421                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 33422                                  
 33423                                  ; =========================================================================
 33424                                  
 33425                                  ;IF1		; warning message on buffers
 33426                                  ;%out	Please make sure that the following are contiguous and of the
 33427                                  ;%out	following sizes:
 33428                                  ;%out
 33429                                  ;%out	OpenBuf     128
 33430                                  ;%out	RenBuf	    128
 33431                                  ;%out	SearchBuf    53
 33432                                  ;%out	DummyCDS    curdirLen
 33433                                  ;ENDIF
 33434                                  
 33435                                  ; =========================================================================
 33436                                  
 33437                                  ; =========================================================================
 33438                                  ;
 33439                                  ; =========================================================================
 33440                                  
 33441                                  	; 20/05/2019 - Retro DOS v4.0
 33442                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 33443                                  
 33444                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33445                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 33446                                  	
 33447                                  _$EXEC:
 33448                                  	; 02/08/2018 - Retro DOS v3.0
 33449                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 33450                                  
 33451                                  EXEC001S:
 33452                                  	;LocalVar    Exec_Blk		,DWORD
 33453                                  	;LocalVar    Exec_Func		,BYTE
 33454                                  	;LocalVar    Exec_Load_High	,BYTE
 33455                                  	;LocalVar    Exec_FH		,WORD
 33456                                  	;LocalVar    Exec_Rel_Fac	,WORD
 33457                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 33458                                  	;LocalVar    Exec_Environ	,WORD
 33459                                  	;LocalVar    Exec_Size		,WORD
 33460                                  	;LocalVar    Exec_Load_Block	,WORD
 33461                                  	;LocalVar    Exec_DMA		,WORD
 33462                                  	;LocalVar    ExecNameLen 	,WORD
 33463                                  	;LocalVar    ExecName		,DWORD
 33464                                  	;
 33465                                  	;LocalVar    Exec_DMA_Save	,WORD
 33466                                  	;LocalVar    Exec_NoStack	,BYTE
 33467                                  
 33468                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33469                                  	;%define	Exec_Blk	dword [bp-4]
 33470                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 33471                                  	%define		Exec_BlkL	word [bp-4]	
 33472                                  	%define		Exec_BlkH	word [bp-2]
 33473                                  	%define		Exec_Func	byte [bp-5]
 33474                                  	%define		Exec_Load_High	byte [bp-6]
 33475                                  	%define		Exec_FH		word [bp-8]
 33476                                  	%define		Exec_Rel_Fac	word [bp-10]
 33477                                  	%define		Exec_Res_Len_Para word [bp-12]
 33478                                  	%define		Exec_Environ	word [bp-14]
 33479                                  	%define		Exec_Size	word [bp-16]
 33480                                  	%define		Exec_Load_Block	word [bp-18]
 33481                                  	%define		Exec_DMA	word [bp-20]
 33482                                  	%define		ExecNameLen	word [bp-22]
 33483                                  	;%define	ExecName	dword [bp-26]
 33484                                  	%define		ExecName	[bp-26] ; 09/08/2018
 33485                                  	%define		ExecNameL	word [bp-26]	
 33486                                  	%define		ExecNameH	word [bp-24]
 33487                                  	; MSDOS 6.0
 33488                                  	%define		Exec_DMA_Save	word [bp-28]
 33489                                  	%define		Exec_NoStack	byte [bp-29]
 33490                                  	
 33491                                  	; ==================================================================
 33492                                  	; validate function
 33493                                  	; ==================================================================
 33494                                  		      	
 33495                                  	; M068 - Start
 33496                                  	;
 33497                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 33498                                  	; possibility that the count may not be decremented all the way to
 33499                                  	; 0. A typical case is if the program for which we intended to keep 
 33500                                  	; the A20 off for a sufficiently long time (A20OFF_COUNT int 21 
 33501                                  	; calls), exits pre-maturely due to error conditions.
 33502                                  
 33503                                  	; MSDOS 6.0
 33504 00005A4C 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 33505                                  
 33506                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 33507                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 33508                                  	; bit set in DOS_FLAG by ExecReady is not cleared in msdisp.asm
 33509                                  
 33510 00005A52 3C05                    	cmp	al,5			; Q: is this ExecReady call
 33511                                  	;jne	short @f
 33512 00005A54 7505                    	jne	short Exec_@f		; N: continue
 33513                                  					; Y: change ret addr. to LeaveDos.
 33514 00005A56 59                      	pop	cx			; Note CX is not input to ExecReady
 33515 00005A57 B9[0404]                	mov	cx,LeaveDOS
 33516 00005A5A 51                      	push	cx
 33517                                  ;@@:
 33518                                  Exec_@f:
 33519                                  	; M068 - End
 33520                                  	
 33521                                  	;Enter
 33522                                  
 33523 00005A5B 55                      	push	bp
 33524 00005A5C 89E5                    	mov	bp,sp
 33525                                  	;;sub	sp,26	; MSDOS 3.3
 33526                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 33527                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 33528                                  	; 17/12/2022
 33529                                  	; 20/05/2019
 33530 00005A5E 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 33531                                  
 33532                                  	; MSDOS 6.0
 33533 00005A61 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 33534                                  					; M030
 33535 00005A63 7614                    	jna	short Exec_Check_2
 33536                                  
 33537                                  	; MSDOS 3.3
 33538                                  	;cmp	AL,3
 33539                                  	;jna	short Exec_Check_2
 33540                                  
 33541                                  Exec_Bad_Fun:
 33542 00005A65 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 33543                                  					; Extended Error Locus	;smr;SS Override
 33544                                  	;mov	al,1
 33545 00005A6B B001                    	mov	al,error_invalid_function
 33546                                  
 33547                                  Exec_Ret_Err:
 33548                                  	;Leave
 33549 00005A6D 89EC                    	mov	sp,bp
 33550 00005A6F 5D                      	pop	bp
 33551                                  	;transfer SYS_RET_ERR
 33552 00005A70 E9C7AB                  	jmp	SYS_RET_ERR
 33553                                  
 33554                                  	; MSDOS 6.0
 33555                                  ExecReadyJ:
 33556 00005A73 E8A617                  	call	ExecReady		; M028
 33557 00005A76 E90204                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 33558                                  
 33559                                  Exec_Check_2:
 33560 00005A79 3C02                    	cmp	AL,2			
 33561 00005A7B 74E8                    	je	short Exec_Bad_Fun
 33562                                  
 33563                                  	; MSDOS 6.0
 33564 00005A7D 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 33565 00005A7F 74E4                    	je	short Exec_Bad_Fun
 33566                                  	
 33567 00005A81 3C05                    	cmp	al,5			; M028 ; M030
 33568 00005A83 74EE                    	je	short ExecReadyJ	; M028
 33569                                  
 33570                                  	;mov	[bp-4],bx
 33571 00005A85 895EFC                  	mov	Exec_BlkL,BX		; stash args
 33572                                  	;mov	[bp-2],es
 33573 00005A88 8C46FE                  	mov	Exec_BlkH,ES
 33574                                  	;mov	[bp-5],al
 33575 00005A8B 8846FB                  	mov	Exec_Func,AL
 33576                                  	;mov	byte [bp-6],0
 33577 00005A8E C646FA00                	mov	Exec_Load_High,0
 33578                                  
 33579                                  	;mov	[bp-26],dx
 33580 00005A92 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 33581                                  	;mov	[bp-24],ds
 33582 00005A95 8C5EE8                  	mov	ExecNameH,DS
 33583 00005A98 89D6                    	mov	SI,DX			; move pointer to convenient place
 33584                                  	;invoke	DStrLen
 33585 00005A9A E83CB7                  	call	DStrLen
 33586                                  	;mov	[bp-22],cx
 33587 00005A9D 894EEA                  	mov	ExecNameLen,CX		; save length
 33588                                  
 33589                                  	; MSDOS 6.0
 33590 00005AA0 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 33591 00005AA4 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 33592                                  
 33593 00005AA8 30C0                    	xor	AL,AL			; open for reading
 33594 00005AAA 55                      	push	BP
 33595                                  
 33596                                  	; MSDOS 6.0
 33597                                  	;or	byte [ss:DOS_FLAG],1
 33598 00005AAB 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 33599                                  					; the redir that this open call is
 33600                                  					; due to an exec.
 33601                                  
 33602                                  	;invoke	$OPEN			; is the file there?
 33603 00005AB1 E8E212                  	call	_$OPEN
 33604                                  
 33605                                  	; MSDOS 6.0
 33606 00005AB4 9C                      	pushf
 33607                                  	; 02/06/2019
 33608                                  	;and	byte [ss:DOS_FLAG],0FEh
 33609 00005AB5 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 33610 00005ABB 9D                      	popf
 33611                                  
 33612 00005ABC 5D                      	pop	BP
 33613                                  
 33614                                  	; MSDOS 3.3 & MSDOS 6.0
 33615 00005ABD 72AE                    	jc	short Exec_Ret_Err
 33616                                  
 33617                                  	;mov	[bp-8],ax
 33618 00005ABF 8946F8                  	mov	Exec_FH,AX
 33619 00005AC2 89C3                    	mov	BX,AX
 33620 00005AC4 30C0                    	xor	AL,AL
 33621                                  	;invoke	$Ioctl
 33622 00005AC6 E852C7                  	call	_$IOCTL
 33623 00005AC9 7207                    	jc	short Exec_BombJ
 33624                                  
 33625                                  	;test	dl,80h
 33626 00005ACB F6C280                  	test	DL,devid_ISDEV
 33627 00005ACE 740A                    	jz	short Exec_Check_Environ
 33628                                  
 33629                                  	;mov	al,2
 33630 00005AD0 B002                    	mov	AL,error_file_not_found
 33631                                  Exec_BombJ:
 33632 00005AD2 E9C800                  	jmp	Exec_Bomb
 33633                                  
 33634                                  BadEnv:
 33635                                  	;mov	al,0Ah
 33636 00005AD5 B00A                    	mov	AL,error_bad_environment
 33637 00005AD7 E9C300                  	jmp	Exec_Bomb
 33638                                  
 33639                                  Exec_Check_Environ:
 33640                                  	;mov	word [bp-18],0
 33641 00005ADA C746EE0000              	mov	Exec_Load_Block,0
 33642                                  	;mov	word [bp-14],0
 33643 00005ADF C746F20000              	mov	Exec_Environ,0
 33644                                  					; overlays... no environment
 33645                                  	;test	byte [bp-5],2
 33646 00005AE4 F646FB02                	test	Exec_Func,exec_func_overlay
 33647 00005AE8 7552                    	jnz	short Exec_Read_Header
 33648                                  
 33649                                  	;lds	si,[bp-4]
 33650 00005AEA C576FC                  	lds	SI,Exec_Blk		; get block
 33651 00005AED 8B04                    	mov	ax,[SI]
 33652                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 33653 00005AEF 09C0                    	or	AX,AX
 33654 00005AF1 750C                    	jnz	short Exec_Scan_Env
 33655                                  
 33656 00005AF3 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 33657                                  	;mov	ax,[44]
 33658 00005AF8 A12C00                  	mov	AX,[PDB.ENVIRON]
 33659                                  
 33660                                  ; MSDOS 6.0
 33661                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 33662                                  ;
 33663                                  ; Exec_environ is being correctly initialized after the environment has been
 33664                                  ; allocated and copied form the parent's env. It must not be initialized here.
 33665                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 33666                                  ; parent's environment.
 33667                                  ;	mov	Exec_Environ,AX
 33668                                  ;
 33669                                  ;----------------------------------------------------------------------------
 33670                                  
 33671                                  	;mov	[bp-14],ax
 33672                                  	;mov	Exec_Environ,ax
 33673                                  
 33674 00005AFB 09C0                    	or	AX,AX
 33675 00005AFD 743D                    	jz	short Exec_Read_Header
 33676                                  
 33677                                  Exec_Scan_Env:
 33678 00005AFF 8EC0                    	mov	ES,AX
 33679 00005B01 31FF                    	xor	DI,DI
 33680                                  	;mov	cx,7FFFh ; MSDOS 3.3
 33681 00005B03 B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 33682 00005B06 30C0                    	xor	AL,AL
 33683                                  
 33684                                  Exec_Get_Environ_Len:
 33685 00005B08 F2AE                    	repnz	scasb			; find that nul byte
 33686 00005B0A 75C9                    	jnz	short BadEnv
 33687                                  
 33688 00005B0C 49                      	dec	CX			; Dec CX for the next nul byte test
 33689 00005B0D 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 33690                                  
 33691 00005B0F AE                      	scasb				; is there another nul byte?
 33692 00005B10 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 33693                                  
 33694 00005B12 57                      	push	DI
 33695                                  	;lea	bx,[DI+11h]
 33696 00005B13 8D5D11                  	lea	BX,[DI+0Fh+2]
 33697                                  	;add	bx,[bp-22]
 33698 00005B16 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 33699                                  					; remember argv[0] length
 33700                                  					; round up and remember argc
 33701 00005B19 B104                    	mov	CL,4
 33702 00005B1B D3EB                    	shr	BX,CL			; number of paragraphs needed
 33703 00005B1D 06                      	push	ES
 33704                                  	;invoke	$Alloc			; can we get the space?
 33705 00005B1E E83706                  	call	_$ALLOC
 33706 00005B21 1F                      	pop	DS
 33707 00005B22 59                      	pop	CX
 33708                                  
 33709                                  	;jnc	short Exec_Save_Environ
 33710                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 33711                                  	; 17/12/2022
 33712 00005B23 7272                    	jc	short Exec_No_Mem ; 02/06/2019
 33713                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33714                                  	;jnc	short Exec_Save_Environ
 33715                                  	;jmp	SHORT Exec_No_Mem
 33716                                  
 33717                                  Exec_Save_Environ:
 33718 00005B25 8EC0                    	mov	ES,AX
 33719                                  	;mov	[bp-14],ax
 33720 00005B27 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 33721 00005B2A 31F6                    	xor	SI,SI
 33722 00005B2C 89F7                    	mov	DI,SI
 33723 00005B2E F3A4                    	rep	movsb			; copy the environment
 33724 00005B30 B80100                  	mov	AX,1
 33725 00005B33 AB                      	stosw
 33726                                  	;lds	si,[bp-26]
 33727 00005B34 C576E6                  	lds	SI,ExecName
 33728                                  	;mov	cx,[bp-22]
 33729 00005B37 8B4EEA                  	mov	CX,ExecNameLen
 33730 00005B3A F3A4                    	rep	movsb
 33731                                  
 33732                                  Exec_Read_Header:
 33733                                  	; We read in the program header into the above data area and
 33734                                  	; determine where in this memory the image will be located.
 33735                                  
 33736                                  	;Context DS
 33737 00005B3C 16                      	push	ss
 33738 00005B3D 1F                      	pop	ds
 33739                                  	;mov	cx,26
 33740 00005B3E B91A00                  	mov	CX,exec_header_len	; header size
 33741 00005B41 BA[C80F]                	mov	DX,exec_signature
 33742 00005B44 06                      	push	ES
 33743 00005B45 1E                      	push	DS
 33744 00005B46 E87704                  	call	ExecRead
 33745 00005B49 1F                      	pop	DS
 33746 00005B4A 07                      	pop	ES
 33747 00005B4B 724E                    	jc	short Exec_Bad_File
 33748                                  
 33749 00005B4D 09C0                    	or	AX,AX
 33750 00005B4F 744A                    	jz	short Exec_Bad_File
 33751                                  	;cmp	ax,26
 33752 00005B51 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 33753 00005B54 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 33754                                  
 33755 00005B56 F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 33756 00005B5C 7504                    	jnz	short Exec_Check_Sig
 33757                                  
 33758                                  	;mov	byte [bp-6],0FFh
 33759 00005B5E C646FAFF                	mov	Exec_Load_High,-1
 33760                                  
 33761                                  Exec_Check_Sig:
 33762 00005B62 A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 33763                                  	;cmp	ax,5A4Dh ; 'MZ'
 33764 00005B65 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 33765 00005B68 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33766                                  
 33767                                  	;cmp	ax,4D5Ah ; 'ZM'
 33768 00005B6A 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 33769 00005B6D 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33770                                  
 33771                                  Exec_Com_Filej:
 33772 00005B6F E9E701                  	jmp	Exec_Com_File
 33773                                  
 33774                                  	; We have the program header... determine memory requirements
 33775                                  
 33776                                  Exec_Save_Start:
 33777 00005B72 A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 33778 00005B75 B105                    	mov	CL,5			; convert to paragraphs
 33779 00005B77 D3E0                    	shl	AX,CL
 33780 00005B79 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 33781                                  	;mov	[bp-12],ax
 33782 00005B7D 8946F4                  	mov	Exec_Res_Len_Para,AX
 33783                                  
 33784                                  		; Do we need to allocate memory?
 33785                                  		; Yes if function is not load-overlay
 33786                                  
 33787                                  	;test	byte [bp-5],2
 33788 00005B80 F646FB02                	test	Exec_Func,exec_func_overlay
 33789 00005B84 7443                    	jz	short Exec_Allocate	; allocation of space
 33790                                  
 33791                                  		; get load address from block
 33792                                  
 33793                                  	;les	di,[bp-4]
 33794 00005B86 C47EFC                  	les	DI,Exec_Blk
 33795                                  
 33796                                  ; 07/03/2024
 33797                                  %if 0
 33798                                  	mov	ax,[es:di]
 33799                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 33800                                  	;mov	[bp-20],ax
 33801                                  	mov	Exec_DMA,AX
 33802                                  
 33803                                  	; 17/12/2022
 33804                                  	;;mov	ax,[es:di+2]
 33805                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 33806                                  	;;mov	[bp-10],ax
 33807                                  	;mov	Exec_Rel_Fac,AX
 33808                                  
 33809                                  	; 17/12/2022
 33810                                  	; 30/11/2022 (!most proper code!)
 33811                                  	;mov	dx,[es:di+2]
 33812                                  	mov	dx,[ES:DI+EXEC3.reloc_fac]
 33813                                  	;mov	[bp-10],dx
 33814                                  	mov	Exec_Rel_Fac,dx
 33815                                  %else
 33816                                  	; 07/03/2024 (PCDOS 7.1 IBMDOS.COM)
 33817                                  	;;;
 33818 00005B89 06                      	push	es
 33819 00005B8A 26C405                  	les	ax,[es:di]
 33820                                  	;les	ax,[ES:DI+EXEC3.load_addr]
 33821                                  	;mov	[bp-20],ax
 33822 00005B8D 8946EC                  	mov	Exec_DMA,ax
 33823                                  	;mov	[bp-10],es
 33824 00005B90 8C46F6                  	mov	Exec_Rel_Fac,es
 33825 00005B93 07                      	pop	es
 33826                                  	;;;
 33827                                  %endif
 33828                                  	; ax = Exec_DMA
 33829 00005B94 E9DE00                  	jmp	Exec_Find_Res
 33830                                  
 33831                                  ; 17/12/2022
 33832                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33833                                  ; 27/09/2023
 33834                                  %if 0
 33835                                  	; 02/06/2019 - Retro DOS v4.0
 33836                                  	;mov	ax,[bp-20]  ; *+*
 33837                                  	mov	AX,Exec_DMA ; *+*
 33838                                  	; 10/08/2018
 33839                                  	jmp	Exec_Find_Res		; M000
 33840                                  %endif
 33841                                  
 33842                                  Exec_No_Mem:
 33843                                  	;mov	al,8
 33844 00005B97 B008                    	mov	AL,error_not_enough_memory
 33845 00005B99 EB02                    	jmp	short Exec_Bomb
 33846                                  
 33847                                  Exec_Bad_File:
 33848                                  	;mov	al,0Bh
 33849 00005B9B B00B                    	mov	AL,error_bad_format
 33850                                  
 33851                                  Exec_Bomb:
 33852                                  	;mov	bx,[bp-8]
 33853 00005B9D 8B5EF8                  	mov	BX,Exec_FH
 33854 00005BA0 E83604                  	call	Exec_Dealloc
 33855                                  	;LeaveCrit CritMem
 33856 00005BA3 E862B7                  	call	LCritMEM
 33857                                  	;save	<AX,BP>
 33858 00005BA6 50                      	push	ax
 33859 00005BA7 55                      	push	bp
 33860                                  	;invoke	$CLOSE
 33861 00005BA8 E82D0A                  	call	_$CLOSE
 33862                                  	;restore <BP,AX>
 33863 00005BAB 5D                      	pop	bp
 33864 00005BAC 58                      	pop	ax
 33865 00005BAD E9BDFE                  	jmp	Exec_Ret_Err
 33866                                  
 33867                                  Exec_Chk_Mem: 
 33868                                  
 33869                                  	; 24/09/2023
 33870                                  	; ds = DOSDATA
 33871                                  ; 17/12/2022
 33872                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33873                                  ;%if 0
 33874                                  	; MSDOS 6.0    			; M063 - Start
 33875                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33876                                  	; 10/06/2019
 33877 00005BB0 A0[0203]                	mov	al,[AllocMethod]
 33878                                  	;mov	bl,[ss:ALLOCMSAVE]
 33879 00005BB3 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 33880                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 33881 00005BB7 881E[0203]              	mov	[AllocMethod],bl
 33882                                  	
 33883 00005BBB F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33884 00005BBE 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33885                                  	;				; N: continue
 33886                                  	;
 33887 00005BC0 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33888 00005BC2 74D3                    	jz	short Exec_No_Mem	; N: no memory
 33889                                  	; 02/06/2019
 33890                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33891 00005BC4 A1[8A00]                	mov	ax,[SAVE_AX]
 33892                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 33893                                  					; M063 - End
 33894 00005BC7 EB2B                    	jmp	short Exec_Norm_Alloc1
 33895                                  ;%endif
 33896                                  
 33897                                  ; 17/12/2022
 33898                                  %if 0
 33899                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33900                                  	; MSDOS 6.0    			; M063 - Start
 33901                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33902                                  	mov	bl,[ss:ALLOCMSAVE]
 33903                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33904                                  
 33905                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33906                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33907                                  	;				; N: continue
 33908                                  	;
 33909                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33910                                  	jz	short Exec_No_Mem	; N: no memory
 33911                                  
 33912                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33913                                  	jmp	short Exec_Norm_Alloc	;    Try again
 33914                                  					; M063 - End
 33915                                  %endif
 33916                                  
 33917                                  Exec_Allocate:
 33918                                  	; 09/09/2018
 33919                                  
 33920                                  	; M005 - START
 33921                                  	; If there is no STACK segment for this exe file and if this
 33922                                  	; not an overlay and the resident size is less than 64K - 
 33923                                  	; 256 bytes we shall add 256 bytes to the programs 
 33924                                  	; resident memory requirement and set Exec_SP to this value.
 33925                                  	
 33926                                  	; 17/12/2022
 33927 00005BC9 29DB                    	sub	bx,bx ; 0	
 33928                                  
 33929                                  	; MSDOS 6.0
 33930                                  	;;mov	byte [bp-29],0
 33931                                  	;mov	Exec_NoStack,0
 33932                                  	; 17/12/2022
 33933 00005BCB 885EE3                  	mov	Exec_NoStack,bl ; 0
 33934 00005BCE 391E[D60F]              	cmp	[exec_SS],bx ; 0
 33935                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 33936 00005BD2 7511                    	jne	short ea1		; Y: continue normal processing
 33937 00005BD4 391E[D80F]              	cmp	[exec_SP],bx ; 0
 33938                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 33939 00005BD8 750B                    	jne	short ea1		; Y: continue normal processing
 33940                                  
 33941                                  	;inc	byte [bp-29]
 33942 00005BDA FE46E3                  	inc	Exec_NoStack
 33943 00005BDD 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 33944 00005BE0 7303                    	jae	short ea1		; Y: don't set Exec_SP
 33945                                  
 33946 00005BE2 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 33947                                  ea1:
 33948                                  	; M005 - END
 33949                                  
 33950                                  	; MSDOS 6.0			; M000 - start
 33951                                  	; 20/05/2019
 33952                                  	; (ds = ss = DOSDATA)
 33953 00005BE5 F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 33954                                  					; Q: is the alloc strat high_first
 33955 00005BEA 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 33956                                  					; Y: set high_only bit
 33957 00005BEC 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 33958                                  					; M000 - end
 33959                                  Exec_Norm_Alloc:
 33960 00005BF1 A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd
 33961                                  Exec_Norm_Alloc1:	; 02/06/2019
 33962                                  					; M000: attempt at allocating memory
 33963                                  	; MSDOS 3.3
 33964                                  	;push	ax			; M000
 33965                                  
 33966 00005BF4 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 33967 00005BF7 1E                      	push	DS
 33968                                  	;invoke	$Alloc			; should have carry set and BX has max
 33969 00005BF8 E85D05                  	call	_$ALLOC
 33970 00005BFB 1F                      	pop	DS
 33971                                  
 33972                                  	; MSDOS 6.0
 33973 00005BFC A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 33974                                  	; MSDOS 3.3
 33975                                  	;pop	ax			; M000
 33976                                  
 33977 00005BFF 83C010                  	add	AX,10h			; room for header
 33978 00005C02 83FB11                  	cmp	BX,11h			; enough room for a header
 33979                                  	; MSDOS 6.0
 33980 00005C05 72A9                    	jb	short Exec_Chk_Mem	; M000
 33981                                  	; MSDOS 3.3	
 33982                                  	;jb	short Exec_No_Mem
 33983                                  
 33984 00005C07 39D8                    	cmp	AX,BX			; is there enough for bare image?
 33985                                  	; MSDOS 6.0
 33986 00005C09 77A5                    	ja	short Exec_Chk_Mem	; M000
 33987                                  	; MSDOS 3.3
 33988                                  	;ja	short Exec_No_Mem
 33989                                  
 33990                                  	;test	byte [bp-6],0FFh
 33991 00005C0B F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 33992 00005C0F 7518                    	jnz	short Exec_BX_Max	; use max
 33993                                  
 33994                                  	; 09/09/2018
 33995                                  
 33996 00005C11 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 33997                                  	; MSDOS 6.0
 33998 00005C15 7299                    	jc	short Exec_Chk_Mem	; M000
 33999                                  	; MSDOS 3.3
 34000                                  	;jc	short Exec_No_Mem
 34001                                  
 34002 00005C17 39D8                    	cmp	AX,BX			; enough space?
 34003                                  	; MSDOS 6.0
 34004 00005C19 7795                    	ja	short Exec_Chk_Mem	; M000: nope...
 34005                                  	; MSDOS 3.3
 34006                                  	;ja	short Exec_No_Mem
 34007                                  
 34008 00005C1B 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 34009 00005C1F 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 34010 00005C23 7204                    	jc	short Exec_BX_Max
 34011                                  
 34012 00005C25 39D8                    	cmp	AX,BX
 34013 00005C27 7602                    	jbe	short Exec_Got_Block
 34014                                  
 34015                                  Exec_BX_Max:
 34016 00005C29 89D8                    	mov	AX,BX
 34017                                  
 34018                                  Exec_Got_Block:
 34019                                  	; 03/08/2018 - Retro DOS v3.0
 34020                                  
 34021 00005C2B 1E                      	push	DS
 34022 00005C2C 89C3                    	mov	BX,AX
 34023                                  	;mov	[bp-16],bx
 34024 00005C2E 895EF0                  	mov	Exec_Size,BX
 34025                                  	;invoke	$Alloc			; get the space
 34026 00005C31 E82405                  	call	_$ALLOC
 34027 00005C34 1F                      	pop	DS
 34028                                  	; MSDOS 6.0
 34029                                  	;jc	short Exec_Chk_Mem	; M000
 34030                                  	; MSDOS 3.3
 34031                                  	;;jc	short Exec_No_Mem
 34032                                  	; 20/05/2019
 34033 00005C35 7303                    	jnc	short ea0
 34034 00005C37 E976FF                  	jmp	Exec_Chk_Mem
 34035                                  ea0:
 34036                                  	; MSDOS 6.0
 34037 00005C3A 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 34038 00005C3E 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 34039                                  
 34040                                  ;M029; Begin changes
 34041                                  ; This code does special handling for programs with no stack segment. If so,
 34042                                  ;check if the current block is larger than 64K. If so, we do not modify
 34043                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 34044                                  ;case Exec_SS is not changed.
 34045                                  
 34046                                  	; MSDOS 6.0
 34047                                  	;cmp	byte [bp-29],0
 34048 00005C42 807EE300                	cmp	Exec_NoStack,0
 34049                                  	;je	@f
 34050 00005C46 7412                    	je	short ea2
 34051                                  
 34052 00005C48 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 34053                                  	;jae	@f			; Y: Exec_SP = 0
 34054 00005C4C 730C                    	jae	short ea2
 34055                                  
 34056                                  ;Make Exec_SP point at the top of the memory block
 34057                                  
 34058 00005C4E B104                    	mov	cl,4
 34059 00005C50 D3E3                    	shl	bx,cl			; get byte offset
 34060 00005C52 81EB0001                	sub	bx,100h			; take care of PSP
 34061 00005C56 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 34062                                  ea2:
 34063                                  ;@@:
 34064                                  ;M029; end changes
 34065                                  
 34066                                  	;mov	[bp-18],ax
 34067 00005C5A 8946EE                  	mov	Exec_Load_Block,AX
 34068 00005C5D 83C010                  	add	AX,10h
 34069                                  	;test	byte [bp-6],0FFh
 34070 00005C60 F646FAFF                	test	Exec_Load_High,-1
 34071 00005C64 7409                    	jz	short Exec_Use_AX	; use ax for load info
 34072                                  
 34073                                  	;add	ax,[bp-16]
 34074 00005C66 0346F0                  	add	AX,Exec_Size		; go to end
 34075                                  	;sub	ax,[bp-12]
 34076 00005C69 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 34077 00005C6C 83E810                  	sub	AX,10h			; drop off pdb
 34078                                  
 34079                                  Exec_Use_AX:
 34080                                  	;mov	[bp-10],ax
 34081 00005C6F 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 34082                                  	;mov	[bp-20],ax
 34083 00005C72 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 34084                                  
 34085                                  	; Determine the location in the file of the beginning of
 34086                                  	; the resident
 34087                                  
 34088                                  ; 17/12/2022
 34089                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 34090                                  ;%if 0
 34091                                  
 34092                                  Exec_Find_Res:
 34093                                  	; MSDOS 6.0
 34094                                  	;;mov	dx,[bp-20]
 34095                                  	;mov	DX,Exec_DMA ; *+*
 34096                                  	;;mov	[bp-28],dx
 34097                                  	;mov	Exec_DMA_Save,DX
 34098                                  
 34099                                  	; 17/12/2022
 34100                                  	; AX = Exec_DMA
 34101                                  
 34102                                  	; 02/06/2019 - Retro DOS v4.0
 34103                                  	;mov	[bp-28],ax ; *+*
 34104 00005C75 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 34105                                  
 34106                                  ;%endif
 34107                                  
 34108                                  ; 17/12/2022
 34109                                  %if 0
 34110                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 34111                                  Exec_Find_Res:
 34112                                  	;mov	dx,[bp-20]
 34113                                  	mov	DX,Exec_DMA ; *+*
 34114                                  	;mov	[bp-28],dx
 34115                                  	mov	Exec_DMA_Save,DX
 34116                                  %endif
 34117                                  
 34118                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34119 00005C78 8B16[D00F]              	mov	DX,[exec_par_dir]
 34120 00005C7C 52                      	push	DX
 34121 00005C7D B104                    	mov	CL,4
 34122 00005C7F D3E2                    	shl	DX,CL			; low word of location
 34123 00005C81 58                      	pop	AX
 34124 00005C82 B10C                    	mov	CL,12
 34125 00005C84 D3E8                    	shr	AX,CL			; high word of location
 34126 00005C86 89C1                    	mov	CX,AX			; CX <- high
 34127                                  
 34128                                  		; Read in the resident image (first, seek to it)
 34129                                  	;mov	bx,[bp-8]
 34130 00005C88 8B5EF8                  	mov	BX,Exec_FH
 34131 00005C8B 1E                      	push	DS
 34132 00005C8C 30C0                    	xor	AL,AL
 34133                                  	;invoke	$Lseek			; Seek to resident
 34134 00005C8E E8B20A                  	call	_$LSEEK
 34135 00005C91 1F                      	pop	DS
 34136 00005C92 7303                    	jnc	short Exec_Big_Read
 34137                                  
 34138 00005C94 E906FF                  	jmp	Exec_Bomb
 34139                                  
 34140                                  Exec_Big_Read:				; Read resident into memory
 34141                                  	;mov	bx,[bp-12]
 34142 00005C97 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 34143 00005C9A 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 34144 00005C9E 7203                    	jb	short Exec_Read_OK
 34145                                  
 34146 00005CA0 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 34147                                  
 34148                                  Exec_Read_OK:
 34149                                  	;sub	[bp-12],bx
 34150 00005CA3 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 34151 00005CA6 53                      	push	BX
 34152 00005CA7 B104                    	mov	CL,4
 34153 00005CA9 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 34154 00005CAB 89D9                    	mov	CX,BX			; Count in correct register
 34155 00005CAD 1E                      	push	DS
 34156                                  	;mov	ds,[bp-20]
 34157 00005CAE 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 34158                                  
 34159 00005CB1 31D2                    	xor	DX,DX
 34160 00005CB3 51                      	push	CX			; Save our count
 34161 00005CB4 E80903                  	call	ExecRead
 34162 00005CB7 59                      	pop	CX			; Get old count to verify
 34163 00005CB8 1F                      	pop	DS
 34164 00005CB9 7248                    	jc	short Exec_Bad_FileJ
 34165                                  
 34166 00005CBB 39C1                    	cmp	CX,AX			; Did we read enough?
 34167 00005CBD 5B                      	pop	BX			; Get paragraph count back
 34168 00005CBE 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 34169                                  
 34170                                  	; The read did not match the request. If we are off by 512
 34171                                  	; bytes or more then the header lied and we have an error.
 34172                                  
 34173 00005CC0 29C1                    	sub	CX,AX
 34174 00005CC2 81F90002                	cmp	CX,512
 34175 00005CC6 733B                    	jae	short Exec_Bad_FileJ
 34176                                  
 34177                                  	; We've read in CX bytes... bump DTA location
 34178                                  
 34179                                  ExecCheckEnd:
 34180                                  	;add	[bp-20],bx
 34181 00005CC8 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 34182                                  	;test	word [bp-12],0FFFFh
 34183 00005CCB F746F4FFFF              	test	Exec_Res_Len_Para,-1
 34184 00005CD0 75C5                    	jnz	short Exec_Big_Read
 34185                                  
 34186                                  	; The image has now been read in. We must perform relocation
 34187                                  	; to the current location.
 34188                                  
 34189                                  exec_do_reloc:
 34190                                  	;mov	cx,[bp-10]
 34191 00005CD2 8B4EF6                  	mov	CX,Exec_Rel_Fac
 34192 00005CD5 A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 34193 00005CD8 01C8                    	add	AX,CX			; and relocate him
 34194 00005CDA A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 34195                                  
 34196 00005CDD A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 34197 00005CE0 A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 34198                                  
 34199 00005CE3 C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 34200 00005CE7 A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 34201 00005CEA 8CC0                    	mov	AX,ES			; rms;NSS
 34202 00005CEC 01C8                    	add	AX,CX			; relocated...
 34203 00005CEE A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 34204                                  
 34205 00005CF1 31C9                    	xor	CX,CX
 34206 00005CF3 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 34207                                  	;mov	bx,[bp-8]
 34208 00005CF7 8B5EF8                  	mov	BX,Exec_FH
 34209 00005CFA 1E                      	push	DS
 34210 00005CFB 31C0                    	xor	AX,AX
 34211                                  	;invoke	$Lseek
 34212 00005CFD E8430A                  	call	_$LSEEK
 34213 00005D00 1F                      	pop	DS
 34214 00005D01 7303                    	jnc	short exec_get_entries
 34215                                  
 34216                                  Exec_Bad_FileJ:
 34217 00005D03 E995FE                  	jmp	Exec_Bad_File
 34218                                  
 34219                                  exec_get_entries:
 34220 00005D06 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 34221                                  
 34222                                  exec_read_reloc:
 34223 00005D0A 52                      	push	DX
 34224                                  	;mov	dx,OPENBUF
 34225 00005D0B BA[BE03]                	mov	DX,Exec_Internal_Buffer
 34226                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 34227                                  	;mov	cx,396 ; MSDOS 6.0
 34228 00005D0E B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 34229 00005D11 1E                      	push	DS
 34230 00005D12 E8AB02                  	call	ExecRead
 34231 00005D15 07                      	pop	ES
 34232 00005D16 5A                      	pop	DX
 34233 00005D17 72EA                    	jc	short Exec_Bad_FileJ
 34234                                  
 34235                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 34236                                  	;mov	cx,99 ;  MSDOS 6.0
 34237 00005D19 B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 34238                                  					; Pointer to byte location in header
 34239                                  	;mov	di,OPENBUF
 34240 00005D1C BF[BE03]                	mov	DI,Exec_Internal_Buffer
 34241                                  	;mov	si,[bp-10]
 34242 00005D1F 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 34243                                  
 34244                                  exec_reloc_one:
 34245 00005D22 09D2                    	or	DX,DX			; Any more entries?
 34246 00005D24 7416                    	jz	short Exec_Set_PDBJ
 34247                                  
 34248                                  exec_get_addr:
 34249 00005D26 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 34250 00005D29 8CD8                    	mov	AX,DS			; Relocate address of item
 34251                                  
 34252                                  	; MSDOS 6.0
 34253                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 34254                                  	;add	ax,[bp-28]
 34255 00005D2B 0346E4                  	add	AX,Exec_DMA_Save
 34256                                  
 34257 00005D2E 8ED8                    	mov	DS,AX
 34258 00005D30 0137                    	add	[BX],SI
 34259 00005D32 83C704                  	add	DI,4
 34260 00005D35 4A                      	dec	DX
 34261 00005D36 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 34262                                  
 34263                                  	; We've exhausted a single buffer's worth. Read in the next
 34264                                  	; piece of the relocation table.
 34265                                  
 34266 00005D38 06                      	push	ES
 34267 00005D39 1F                      	pop	DS
 34268 00005D3A EBCE                    	jmp	short exec_read_reloc
 34269                                  
 34270                                  Exec_Set_PDBJ:
 34271                                  	; MSDOS 6.0
 34272                                  	
 34273                                  	; We now determine if this is a buggy exe packed file and if
 34274                                  	; so we patch in the right code. Note that fixexepatch will
 34275                                  	; point to a ret if dos loads low. The load segment as
 34276                                  	; determined above will be in exec_dma_save
 34277                                  	
 34278 00005D3C 06                      	push	es
 34279 00005D3D 50                      	push	ax			; M030
 34280 00005D3E 51                      	push	cx			; M030
 34281                                  	;mov	es,[bp-28]
 34282 00005D3F 8E46E4                  	mov	es,Exec_DMA_Save
 34283 00005D42 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 34284 00005D46 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 34285 00005D4B 36FF16[1212]            	call	word [ss:FixExePatch]
 34286                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34287                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 34288                                  	;call	word [ss:Rational386PatchPtr]
 34289 00005D50 59                      	pop	cx			; M030
 34290 00005D51 58                      	pop	ax			; M030
 34291 00005D52 07                      	pop	es
 34292                                  
 34293 00005D53 E9DD00                  	jmp	Exec_Set_PDB
 34294                                  
 34295                                  Exec_No_Memj:
 34296 00005D56 E93EFE                  	jmp	Exec_No_Mem
 34297                                  
 34298                                  	; we have a .COM file. First, determine if we are merely
 34299                                  	; loading an overlay.
 34300                                  
 34301                                  Exec_Com_File:
 34302                                  	;test	byte [bp-5],2
 34303 00005D59 F646FB02                	test	Exec_Func,exec_func_overlay
 34304 00005D5D 742D                    	jz	short Exec_Alloc_Com_File
 34305                                  	;lds	si,[bp-4]
 34306 00005D5F C576FC                  	lds	SI,Exec_Blk		; get arg block
 34307 00005D62 AD                      	lodsw				; get load address
 34308                                  	;mov	[bp-20],ax
 34309 00005D63 8946EC                  	mov	Exec_DMA,AX
 34310 00005D66 B8FFFF                  	mov	AX,0FFFFh
 34311 00005D69 EB63                    	jmp	short Exec_Read_Block	; read it all!
 34312                                  
 34313                                  Exec_Chk_Com_Mem:			
 34314                                  	; MSDOS 6.0	     		; M063 - Start
 34315 00005D6B 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 34316 00005D6F 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 34317 00005D74 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 34318 00005D79 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 34319 00005D7C 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 34320                                  					; N: continue
 34321                                  	
 34322 00005D7E A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 34323 00005D80 74D4                    	jz	short Exec_No_Memj	; N: no memory
 34324                                  	
 34325                                  	;mov	ax,[bp-18]
 34326 00005D82 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated
 34327 00005D85 31DB                    	xor	bx,bx			; M047: bx => free arena
 34328 00005D87 E86B02                  	call	ChangeOwner		; M047: free this block
 34329                                  	
 34330 00005D8A EB0E                    	jmp	short Exec_Norm_Com_Alloc
 34331                                  					; M063 - End
 34332                                  	
 34333                                  	; We must allocate the max possible size block (ick!)
 34334                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 34335                                  	; size of block.
 34336                                  
 34337                                  Exec_Alloc_Com_File:
 34338                                  	; MSDOS 6.0			; M000 -start
 34339 00005D8C 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 34340                                  					; Q: is the alloc strat high_first
 34341 00005D92 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 34342                                  					; Y: set high_only bit
 34343 00005D94 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 34344                                  					; M000 - end
 34345                                  Exec_Norm_Com_Alloc:			; M000
 34346                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34347 00005D9A BBFFFF                  	mov	BX,0FFFFh
 34348                                  	;invoke	$Alloc			; largest piece available as error
 34349 00005D9D E8B803                  	call	_$ALLOC
 34350 00005DA0 09DB                    	or	BX,BX
 34351                                  	; MSDOS 6.0
 34352 00005DA2 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 34353                                  	; MSDOS 3.3
 34354                                  	;jz	short Exec_No_Memj
 34355                                  
 34356                                  	;mov	[bp-16],bx
 34357 00005DA4 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 34358 00005DA7 53                      	push	BX
 34359                                  	;invoke	$ALLOC			; largest piece available
 34360 00005DA8 E8AD03                  	call	_$ALLOC
 34361 00005DAB 5B                      	pop	BX			; get size of block...
 34362                                  	;mov	[bp-18],ax
 34363 00005DAC 8946EE                  	mov	Exec_Load_Block,AX
 34364                                  
 34365 00005DAF 83C010                  	add	AX,10h			; increment for header
 34366                                  	;mov	[bp-20],ax
 34367 00005DB2 8946EC                  	mov	Exec_DMA,AX
 34368                                  
 34369 00005DB5 31C0                    	xor	AX,AX			; presume 64K read...
 34370 00005DB7 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 34371 00005DBB 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 34372                                  
 34373 00005DBD 89D8                    	mov	AX,BX			; convert size to bytes
 34374 00005DBF B104                    	mov	CL,4
 34375 00005DC1 D3E0                    	shl	AX,CL
 34376                                  	; 17/12/2022
 34377                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34378                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 34379                                  	; MSDOS 5.0
 34380                                  	;cmp	AX,100h   
 34381                                  	; 02/06/2019 - Retro DOS v4.0
 34382                                  	; MSDOS 6.0
 34383                                          ; 17/12/2022
 34384 00005DC3 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 34385 00005DC6 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34386                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 34387                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 34388                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34389                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 34390                                  
 34391                                  					; M047: size of the block is < 64K
 34392 00005DC8 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 34393                                  
 34394                                  Exec_Read_Com:
 34395                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34396 00005DCB 2D0001                  	sub	AX,100h 		; remember size of psp
 34397                                  Exec_Read_Block:
 34398 00005DCE 50                      	push	AX			; save number to read
 34399                                  	;mov	bx,[bp-8]
 34400 00005DCF 8B5EF8                  	mov	BX,Exec_FH		; of com file
 34401 00005DD2 31C9                    	xor	CX,CX			; but seek to 0:0
 34402 00005DD4 31C0                    	xor	AX,AX			; seek relative to beginning
 34403                                  	;mov	DX,CX
 34404                                  	; 08/03/2024
 34405 00005DD6 99                      	cwd
 34406                                  	;invoke	$Lseek			; back to beginning of file
 34407 00005DD7 E86909                  	call	_$LSEEK
 34408 00005DDA 59                      	pop	CX			; number to read
 34409                                  	;mov	ds,[bp-20]
 34410 00005DDB 8E5EEC                  	mov	DS,Exec_DMA
 34411 00005DDE 31D2                    	xor	DX,DX
 34412 00005DE0 51                      	push	CX
 34413 00005DE1 E8DC01                  	call	ExecRead
 34414 00005DE4 5E                      	pop	SI			; get number of bytes to read
 34415 00005DE5 7303                    	jnc	short OkRead
 34416 00005DE7 E9B1FD                  	jmp	Exec_Bad_File
 34417                                  
 34418                                  	; 10/09/2018
 34419                                  OkRead:
 34420 00005DEA 39F0                    	cmp	AX,SI			; did we read them all?
 34421                                  	; MSDOS 6.0
 34422                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no
 34423                                  	; MSDOS 3.3
 34424                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 34425 00005DEC 7503                    	jne	short OkRead2
 34426 00005DEE E97AFF                  	jmp	Exec_Chk_Com_Mem
 34427                                  OkRead2:
 34428                                  	; MSDOS 6.0
 34429 00005DF1 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 34430 00005DF6 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 34431                                  
 34432                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34433                                  	;test	byte [bp-5],2
 34434 00005DFB F646FB02                	test	Exec_Func,exec_func_overlay
 34435 00005DFF 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 34436                                  
 34437                                  	;mov	ax,[bp-20]
 34438 00005E01 8B46EC                  	mov	AX,Exec_DMA
 34439 00005E04 83E810                  	sub	AX,10h
 34440 00005E07 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 34441 00005E0B 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 34442                                  
 34443                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 34444                                  	; of 0 on stack.
 34445                                  
 34446 00005E12 81C6FE00                	add	SI,0FEh 		; make room for stack
 34447                                  
 34448                                  	; MSDOS 6.0
 34449 00005E16 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 34450 00005E19 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 34451 00005E1B 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 34452                                  
 34453                                  Exec_St_Ok:
 34454                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34455 00005E1F 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 34456 00005E24 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 34457 00005E28 8ED8                    	mov	DS,AX
 34458 00005E2A C7040000                	mov	WORD [SI],0		; 0 for return
 34459                                  
 34460                                  	; MSDOS 6.0
 34461                                  
 34462                                  	; M068
 34463                                  	;
 34464                                  	; We now determine if this is a Copy Protected App. If so the
 34465                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to
 34466                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 34467                                  
 34468 00005E2E 36FF16[6100]            	call	word [ss:ChkCopyProt]
 34469                                  
 34470                                  Exec_Set_PDB:
 34471                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34472                                  	;mov	bx,[bp-8]
 34473 00005E33 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 34474 00005E36 E8A001                  	call	Exec_Dealloc
 34475 00005E39 55                      	push	BP
 34476                                  	;invoke	$Close			; release the jfn
 34477 00005E3A E89B07                  	call	_$CLOSE
 34478 00005E3D 5D                      	pop	BP
 34479 00005E3E E88A01                  	call	Exec_Alloc
 34480                                  	;test	byte [bp-5],2
 34481 00005E41 F646FB02                	test	Exec_Func,exec_func_overlay
 34482 00005E45 743A                    	jz	short Exec_Build_Header
 34483                                  
 34484                                  	; MSDOS 6.0
 34485 00005E47 E8B901                  	call	Scan_Execname
 34486 00005E4A E8CD01                  	call	Scan_Special_Entries
 34487                                  ;SR;
 34488                                  ;The current lie strategy uses the PSP to store the lie version. However,
 34489                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 34490                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 34491                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 34492                                  ;Sysinit and therefore must be a device driver load. We then get the lie
 34493                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 34494                                  ;issues the version check, it gets the lie version until the next overlay
 34495                                  ;call is issued.
 34496                                  
 34497 00005E4D 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 34498 00005E53 7426                    	je	short norm_ovl		;yes, no special handling
 34499 00005E55 56                      	push	si
 34500 00005E56 06                      	push	es
 34501 00005E57 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 34502                                  	 
 34503                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s)
 34504 00005E5C 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 34505 00005E60 7411                    	je	short sysinit_done	;no, Sysinit is finished
 34506                                  	
 34507 00005E62 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 34508 00005E67 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 34509 00005E6C 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 34510                                  		;;; PDB.VERSION
 34511 00005E71 EB06                    	jmp	short setver_done
 34512                                  sysinit_done:
 34513 00005E73 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 34514                                  setver_done:
 34515 00005E79 07                      	pop	es
 34516 00005E7A 5E                      	pop	si
 34517                                  norm_ovl:
 34518                                  	;leave
 34519 00005E7B 89EC                    	mov	sp,bp
 34520 00005E7D 5D                      	pop	bp
 34521                                  
 34522                                  	;transfer SYS_RET_OK		; overlay load -> done
 34523 00005E7E E9B0A7                  	jmp	SYS_RET_OK
 34524                                  
 34525                                  Exec_Build_Header:
 34526                                  	;mov	dx,[bp-18]
 34527 00005E81 8B56EE                  	mov	DX,Exec_Load_Block
 34528                                  					; assign the space to the process
 34529                                  	;mov	si,1
 34530 00005E84 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 34531                                  	;mov	ax,[bp-14]
 34532 00005E87 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 34533 00005E8A 09C0                    	or	AX,AX
 34534 00005E8C 7405                    	jz	short No_Owner		; no environment
 34535                                  
 34536 00005E8E 48                      	dec	AX			; point to header
 34537 00005E8F 8ED8                    	mov	DS,AX
 34538 00005E91 8914                    	mov	[SI],DX 		; assign ownership
 34539                                  No_Owner:
 34540                                  	;mov	ax,[bp-18]
 34541                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 34542                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34543                                  	; 17/12/2022
 34544 00005E93 89D0                    	mov	ax,dx ; 06/06/2019
 34545                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 34546                                  	
 34547 00005E95 48                      	dec	AX
 34548 00005E96 8ED8                    	mov	DS,AX			; point to header
 34549 00005E98 8914                    	mov	[SI],DX 		; assign ownership
 34550                                  
 34551                                  	; MSDOS 6.0
 34552 00005E9A 1E                      	push	DS			;AN000;MS. make ES=DS
 34553 00005E9B 07                      	pop	ES			;AN000;MS.
 34554                                  	;mov	di,8
 34555 00005E9C BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 34556 00005E9F E86101                  	call	Scan_Execname		;AN007;MS. parse execname
 34557                                  					;	   ds:si->name, cx=name length
 34558 00005EA2 51                      	push	CX			;AN007;;MS. save for fake version
 34559 00005EA3 56                      	push	SI			;AN007;;MS. save for fake version
 34560                                  
 34561                                  MoveName:				;AN000;
 34562 00005EA4 AC                      	lodsb				;AN000;;MS. get char
 34563 00005EA5 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.', may be name.exe
 34564 00005EA7 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 34565                                  					;AN000;
 34566 00005EA9 AA                      	stosb				;AN000;;MS. move char
 34567                                  					; MSKK bug fix - limit length copied
 34568 00005EAA 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 34569 00005EAD 7302                    	jae	short Mem_Done		; jump if so
 34570                                  	;
 34571 00005EAF E2F3                    	loop	MoveName		;AN000;;MS. continue
 34572                                  Mem_Done:				;AN000;
 34573 00005EB1 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 34574                                  	;cmp	di,16
 34575 00005EB3 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 34576 00005EB6 7301                    	jae	short Fill8		;AN000;MS.
 34577                                  	
 34578 00005EB8 AA                      	stosb				;AN000;MS.
 34579                                  	
 34580                                  Fill8:					;AN000;
 34581 00005EB9 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 34582 00005EBA 59                      	pop	CX			;AN007;MS.
 34583                                  	
 34584 00005EBB E85C01                  	call	Scan_Special_Entries	;AN007;MS.
 34585                                  
 34586                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34587 00005EBE 52                      	push	DX
 34588                                  	;mov	si,[bp-16]
 34589 00005EBF 8B76F0                  	mov	SI,Exec_Size
 34590 00005EC2 01D6                    	add	SI,DX
 34591                                  	;Invoke	$Dup_PDB		; ES is now PDB
 34592 00005EC4 E8B0B1                  	call	_$DUP_PDB
 34593 00005EC7 5A                      	pop	DX
 34594                                  
 34595                                  	;push	word [bp-14]
 34596 00005EC8 FF76F2                  	push	Exec_Environ
 34597                                  	;pop	WORD [ES:2Ch]
 34598 00005ECB 268F062C00              	pop	word [ES:PDB.ENVIRON]
 34599                                  
 34600                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 34601                                  					; version number in PSP
 34602 00005ED0 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 34603 00005ED5 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 34604                                  		; PDB.VERSION
 34605                                  
 34606                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 34607                                  	;lds	si,[bp-4]
 34608 00005EDA C576FC                  	lds	SI,Exec_Blk		; get the block
 34609 00005EDD 1E                      	push	DS			; save its location
 34610 00005EDE 56                      	push	SI
 34611                                  	;lds	si,[si+6]
 34612 00005EDF C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 34613                                  
 34614                                  	; DS points to user space 5C FCB
 34615                                  
 34616 00005EE2 B90C00                  	mov	CX,12			; copy drive, name and ext
 34617 00005EE5 51                      	push	CX
 34618 00005EE6 BF5C00                  	mov	DI,5Ch
 34619 00005EE9 8A1C                    	mov	BL,[SI]
 34620 00005EEB F3A4                    	rep	movsb
 34621                                  
 34622                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 34623                                  
 34624                                  	;xor	AX,AX			; zero extent, etc for CPM
 34625 00005EED 91                      	xchg	ax,cx	; 08/03/2024
 34626 00005EEE AB                      	stosw
 34627 00005EEF AB                      	stosw
 34628                                  
 34629                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 34630                                  
 34631 00005EF0 59                      	pop	CX
 34632 00005EF1 5E                      	pop	SI			; get block
 34633 00005EF2 1F                      	pop	DS
 34634 00005EF3 1E                      	push	DS			; save (again)
 34635 00005EF4 56                      	push	SI
 34636                                  	;lds	si,[si+0Ah]
 34637 00005EF5 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 34638                                  
 34639                                  	; DS points to user space 6C FCB
 34640                                  
 34641 00005EF8 8A3C                    	mov	BH,[SI] 		; do same as above
 34642 00005EFA F3A4                    	rep	movsb
 34643 00005EFC AB                      	stosw
 34644 00005EFD AB                      	stosw
 34645 00005EFE 5E                      	pop	SI			; get block (last time)
 34646 00005EFF 1F                      	pop	DS
 34647                                  	;ld	si,[si+2]
 34648 00005F00 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 34649                                  
 34650                                  	; DS points to user space 80 command line
 34651                                  
 34652 00005F03 80C980                  	or	CL,80h
 34653 00005F06 89CF                    	mov	DI,CX
 34654 00005F08 F3A4                    	rep	movsb			; Wham!
 34655                                  
 34656                                  	; Process BX into default AX (validity of drive specs on args).
 34657                                  	; We no longer care about DS:SI.
 34658                                  
 34659 00005F0A FEC9                    	dec	CL			; get 0FFh in CL
 34660 00005F0C 88F8                    	mov	AL,BH
 34661 00005F0E 30FF                    	xor	BH,BH
 34662                                  	;invoke	GetVisDrv
 34663 00005F10 E8210A                  	call	GetVisDrv
 34664 00005F13 7302                    	jnc	short Exec_BL
 34665                                  
 34666 00005F15 88CF                    	mov	BH,CL
 34667                                  
 34668                                  Exec_BL:
 34669 00005F17 88D8                    	mov	AL,BL
 34670 00005F19 30DB                    	xor	BL,BL
 34671                                  	;invoke	GetVisDrv
 34672 00005F1B E8160A                  	call	GetVisDrv
 34673 00005F1E 7302                    	jnc	short Exec_Set_Return
 34674                                  
 34675 00005F20 88CB                    	mov	BL,CL
 34676                                  
 34677                                  Exec_Set_Return:
 34678                                  	;invoke	Get_User_Stack			; get his return address
 34679 00005F22 E85CA5                  	call	Get_User_Stack
 34680                                  
 34681                                  ; 08/03/2024
 34682                                  %if 0
 34683                                  	;push	word [si+14h]
 34684                                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34685                                  	;push	word [si+12h]
 34686                                  	push	word [SI+user_env.user_IP]
 34687                                  	;push	word [si+14h]
 34688                                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34689                                  	;push	word [si+12h]
 34690                                  	push	word [SI+user_env.user_IP]
 34691                                  	;pop	word [ES:0Ah]
 34692                                  	pop	WORD [ES:PDB.EXIT]
 34693                                  	;pop	word [ES:0Ch]
 34694                                  	pop	WORD [ES:PDB.EXIT+2]
 34695                                  %else
 34696                                  	; 07/03/2024 (PCDOS 7.1 IBMDOS.COM)
 34697                                  	;;;
 34698                                  	;lds	ax,[si+12h]
 34699 00005F25 C54412                  	lds	ax,[SI+user_env.user_IP] ; suck out the CS and IP
 34700 00005F28 1E                      	push	ds              
 34701 00005F29 50                      	push	ax
 34702                                  	;mov	[es:0Ah],ax
 34703 00005F2A 26A30A00                	mov	[ES:PDB.EXIT],ax
 34704                                  	;mov	[es:0Ch],ds
 34705 00005F2E 268C1E0C00              	mov	[ES:PDB.EXIT+2],ds
 34706                                  	;;;
 34707                                  %endif
 34708                                  	
 34709 00005F33 31C0                    	xor	AX,AX
 34710 00005F35 8ED8                    	mov	DS,AX
 34711                                  					; save them where we can get them
 34712                                  					; later when the child exits.
 34713                                  	;pop	word [88h]
 34714 00005F37 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 34715                                  	;pop	word [90h]
 34716 00005F3B 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 34717                                  
 34718 00005F3F 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 34719 00005F46 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 34720 00005F4B 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 34721                                  
 34722                                  	;test	byte [bp-5],1
 34723 00005F50 F646FB01                	test	Exec_Func,exec_func_no_execute
 34724 00005F54 7427                    	jz	short exec_go
 34725                                  
 34726 00005F56 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 34727                                  	;les	di,[bp-4]
 34728 00005F5B C47EFC                  	les	DI,Exec_Blk		; and block for return
 34729                                  	;mov	[es:di+10h],ds
 34730 00005F5E 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 34731                                  
 34732 00005F62 4E                      	dec	SI			; 'push' default AX
 34733 00005F63 4E                      	dec	SI
 34734 00005F64 891C                    	mov	[SI],BX 		; save default AX reg
 34735                                  	;mov	[es:di+0Eh], si
 34736 00005F66 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 34737                                  
 34738 00005F6A 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 34739                                  	;mov	[es:di+14h],ds
 34740 00005F6F 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 34741                                  	;mov	[es:di+12h],ax
 34742 00005F73 26894512                	mov	[ES:DI+EXEC1.IP],AX
 34743                                  	
 34744                                  	;leave
 34745 00005F77 89EC                    	mov	sp,bp
 34746 00005F79 5D                      	pop	bp	
 34747                                  
 34748                                  	;transfer SYS_RET_OK
 34749 00005F7A E9B4A6                  	jmp	SYS_RET_OK
 34750                                  
 34751                                  exec_go:
 34752 00005F7D 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 34753 00005F82 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 34754 00005F87 8CC0                    	mov	AX,ES
 34755                                  
 34756                                  	; MSDOS 6.0
 34757 00005F89 36803E[1112]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 34758 00005F8F 741A                    	je	short Xfer_To_User	; N: transfer control to user
 34759                                  
 34760 00005F91 1E                      	push	ds			; Y: control must go to low mem stub
 34761                                  		
 34762 00005F92 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 34763                                  					;    control to user 
 34764 00005F97 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 34765                                  					; M004: Set bit to signal int 21
 34766                                  					; ah = 25 & ah= 49. See dossym.inc 
 34767                                  					; under TAG M003 & M009 for 
 34768                                  					; explanation
 34769 00005F9C 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 34770                                  					; M068: going to be turned OFF.
 34771                                  	
 34772 00005FA0 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 34773 00005FA2 1F                      	pop	ds
 34774                                  	
 34775 00005FA3 50                      	push	ax			; ret far into the low mem stub
 34776 00005FA4 B8[1511]                	mov	ax,disa20_xfer
 34777 00005FA7 50                      	push	ax
 34778 00005FA8 8CC0                    	mov	AX,ES			; restore ax
 34779 00005FAA CB                      	retf
 34780                                  
 34781                                  Xfer_To_User:
 34782                                  	; DS:SI points to entry point
 34783                                  	; AX:DI points to initial stack
 34784                                  	; DX has PDB pointer
 34785                                  	; BX has initial AX value
 34786                                  
 34787 00005FAB FA                      	cli
 34788                                  	; 15/08/2018
 34789 00005FAC 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 34790                                  
 34791 00005FB2 8ED0                    	mov	SS,AX			; set up user's stack
 34792 00005FB4 89FC                    	mov	SP,DI			; and SP
 34793 00005FB6 FB                      	sti
 34794                                  
 34795 00005FB7 1E                      	push	DS			; fake long call to entry
 34796 00005FB8 56                      	push	SI
 34797 00005FB9 8EC2                    	mov	ES,DX			; set up proper seg registers
 34798 00005FBB 8EDA                    	mov	DS,DX
 34799 00005FBD 89D8                    	mov	AX,BX			; set up proper AX
 34800                                  
 34801 00005FBF CB                      	retf
 34802                                  
 34803                                  ; 04/08/2018 - Retro DOS v3.0
 34804                                  
 34805                                  ;----------------------------------------------------------------------------
 34806                                  ;
 34807                                  ;----------------------------------------------------------------------------
 34808                                  
 34809                                  ExecRead:
 34810 00005FC0 E81600                  	CALL	Exec_Dealloc
 34811                                  	;mov	bx,[bp-8]
 34812 00005FC3 8B5EF8                  	MOV	bx,Exec_FH
 34813                                  
 34814 00005FC6 55                      	PUSH	BP
 34815 00005FC7 E81707                  	call	_$READ
 34816 00005FCA 5D                      	POP	BP
 34817                                  
 34818                                  	;CALL	Exec_Alloc
 34819                                  	;retn
 34820                                  	; 18/12/2022
 34821                                  	;jmp	short Exec_Alloc
 34822                                  
 34823                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 34824                                  
 34825                                  ;----------------------------------------------------------------------------
 34826                                  ;
 34827                                  ;----------------------------------------------------------------------------
 34828                                  
 34829                                  Exec_Alloc:
 34830 00005FCB 53                      	push	BX
 34831                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34832                                  	; 20/05/2019 - Retro DOS v4.0
 34833                                  	; MSDOS 6.0
 34834 00005FCC 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 34835 00005FD1 E81000                  	call	ChangeOwners
 34836 00005FD4 E831B3                  	call	LCritMEM
 34837 00005FD7 5B                      	pop	BX
 34838 00005FD8 C3                      	retn
 34839                                  
 34840                                  ;----------------------------------------------------------------------------
 34841                                  ;
 34842                                  ;----------------------------------------------------------------------------
 34843                                  
 34844                                  Exec_Dealloc:
 34845 00005FD9 53                      	push	BX
 34846                                  	;mov	bx,0
 34847 00005FDA 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 34848 00005FDC E80EB3                  	call	ECritMEM
 34849 00005FDF E80200                  	call	ChangeOwners
 34850 00005FE2 5B                      	pop	BX
 34851 00005FE3 C3                      	retn
 34852                                  
 34853                                  ; 18/12/2022
 34854                                  %if 0
 34855                                  ;----------------------------------------------------------------------------
 34856                                  ;
 34857                                  ;----------------------------------------------------------------------------
 34858                                  
 34859                                  Exec_Alloc:
 34860                                  	push	BX
 34861                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34862                                  	; 20/05/2019 - Retro DOS v4.0
 34863                                  	; MSDOS 6.0
 34864                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 34865                                  	call	ChangeOwners
 34866                                  	call	LCritMEM
 34867                                  	pop	BX
 34868                                  	retn
 34869                                  
 34870                                  %endif
 34871                                  
 34872                                  ;----------------------------------------------------------------------------
 34873                                  ;
 34874                                  ;----------------------------------------------------------------------------
 34875                                  
 34876                                  ChangeOwners:
 34877 00005FE4 9C                      	pushf
 34878 00005FE5 50                      	push	AX
 34879                                  	;mov	ax,[bp-14]
 34880 00005FE6 8B46F2                  	mov	AX,Exec_Environ
 34881 00005FE9 E80900                  	call	ChangeOwner
 34882                                  	;mov	ax,[bp-18]
 34883 00005FEC 8B46EE                  	mov	AX,Exec_Load_Block
 34884 00005FEF E80300                  	call	ChangeOwner
 34885 00005FF2 58                      	pop	AX
 34886 00005FF3 9D                      	popf
 34887                                  chgown_retn:
 34888 00005FF4 C3                      	retn
 34889                                  
 34890                                  ;----------------------------------------------------------------------------
 34891                                  ;
 34892                                  ;----------------------------------------------------------------------------
 34893                                  
 34894                                  ChangeOwner:
 34895 00005FF5 09C0                    	or	AX,AX			; is area allocated?
 34896 00005FF7 74FB                    	jz	short chgown_retn	; no, do nothing
 34897 00005FF9 48                      	dec	AX
 34898 00005FFA 1E                      	push	DS
 34899 00005FFB 8ED8                    	mov	DS,AX
 34900 00005FFD 891E0100                	mov	[ARENA.OWNER],BX
 34901 00006001 1F                      	pop	DS
 34902 00006002 C3                      	retn
 34903                                  
 34904                                  ;----------------------------------------------------------------------------
 34905                                  ;
 34906                                  ;----------------------------------------------------------------------------
 34907                                  
 34908                                  ; 20/05/2019 - Retro DOS v4.0
 34909                                  
 34910                                  	; MSDOS 6.0
 34911                                  Scan_Execname:
 34912 00006003 C576E6                  	lds	SI,ExecName		; DS:SI points to name
 34913                                  Scan_Execname1:				; M028
 34914                                  Save_Begin:				;
 34915 00006006 89F1                    	mov	CX,SI			; CX= starting addr
 34916                                  Scan0:					;
 34917 00006008 AC                      	lodsb				; get char
 34918                                  
 34919 00006009 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 34920 0000600B 74F9                    	jz	short Save_Begin	; yes, save si
 34921 0000600D 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 34922 0000600F 74F5                    	jz	short Save_Begin	; yes, save si
 34923 00006011 3C00                    	cmp	AL,0			; is end of name
 34924 00006013 75F3                    	jnz	short Scan0		; no, continue scanning
 34925 00006015 29CE                    	sub	SI,CX			; get name's length
 34926 00006017 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 34927                                  
 34928 00006019 C3                      	retn
 34929                                  
 34930                                  ;----------------------------------------------------------------------------
 34931                                  ;
 34932                                  ;----------------------------------------------------------------------------
 34933                                  
 34934                                  ; 20/05/2019 - Retro DOS v4.0
 34935                                  
 34936                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34937                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 34938                                  
 34939                                  	; MSDOS 6.0
 34940                                  
 34941                                  Scan_Special_Entries:
 34942                                  
 34943 0000601A 49                      	dec	CX			; cx= name length
 34944                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 34945                                  					;reset to current version
 34946                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 34947                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 34948                                  	;mov	word [ss:SPECIAL_VERSION],5
 34949                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 34950                                  
 34951                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 34952 0000601B 36C706[BD0E]0616        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 34953                                  				; 0005h for Retro DOS v4.1 (MSDOS 5.0)
 34954                                  				; 24/09/2023
 34955                                  				; 1606h for Retro DOS v4.2 (MSDOS 6.22)
 34956                                  ;***	call	Reset_Version
 34957                                  
 34958                                  ;M060	push	SS
 34959                                  ;M060	pop	ES
 34960                                  
 34961 00006022 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 34962 00006027 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 34963 00006029 09F8                    	or	AX,DI			;M060; be sure the table exists
 34964 0000602B 7427                    	jz	short End_List		;M060; If ZR then no table
 34965                                  
 34966                                  GetEntries:
 34967 0000602D 268A05                  	mov	AL,[ES:DI]		; end of list
 34968 00006030 08C0                    	or	AL,AL
 34969 00006032 7420                    	jz	short End_List		; yes
 34970                                  
 34971 00006034 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 34972 00006039 38C8                    	cmp	AL,CL			; same length ?
 34973 0000603B 751B                    	jnz	short SkipOne 		; no
 34974                                  
 34975 0000603D 47                      	inc	DI			; es:di -> special name
 34976 0000603E 51                      	push	CX			; save length and name addr
 34977 0000603F 56                      	push	SI
 34978                                  
 34979                                  ; M050 - BEGIN
 34980                                  
 34981 00006040 50                      	push	ax			; save len
 34982                                  sse_next_char:
 34983 00006041 AC                      	lodsb
 34984 00006042 E8ECEE                  	call	UCase
 34985 00006045 AE                      	scasb
 34986 00006046 750D                    	jne	short Not_Matched
 34987 00006048 E2F7                    	loop	sse_next_char
 34988                                  	
 34989                                  ;	repz	cmpsb			; same name ?
 34990                                  ;	jnz	short Not_Matched	; no
 34991                                  
 34992 0000604A 58                      	pop	ax			; take len off the stack
 34993                                  
 34994                                  ; M050 - END
 34995                                  
 34996 0000604B 268B05                  	mov	AX,[ES:DI]		; get special version
 34997 0000604E 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 34998                                  
 34999                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 35000                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 35001                                  
 35002 00006052 5E                      	pop	SI
 35003 00006053 59                      	pop	CX
 35004                                  	; 18/12/2022
 35005                                  	;jmp	SHORT End_List
 35006                                  
 35007                                  	; 18/12/2022
 35008                                  End_List:
 35009 00006054 C3                      	retn
 35010                                  
 35011                                  Not_Matched:
 35012 00006055 58                      	pop	ax			; get len from stack ; M050
 35013 00006056 5E                      	pop	SI			; restore si,cx
 35014 00006057 59                      	pop	CX
 35015                                  
 35016                                  SkipOne:
 35017 00006058 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 35018 0000605D 30E4                    	xor	AH,AH			; position to next entry
 35019 0000605F 01C7                    	add	DI,AX
 35020                                  
 35021 00006061 83C703                  	add	DI,3			; DI -> next entry length
 35022                                  ;***	add	DI,4			; DI -> next entry length
 35023                                  
 35024 00006064 EBC7                    	jmp	short GetEntries
 35025                                  
 35026                                  	; 18/12/2022
 35027                                  ;End_List:
 35028                                  	;retn
 35029                                  
 35030                                  ; 04/08/2018 - Retro DOS v3.0
 35031                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 633Dh
 35032                                  
 35033                                  ;----------------------------------------------------------------------------
 35034                                  ;SUBTTL Terminate and stay resident handler
 35035                                  ;
 35036                                  ; Input:    DX is an offset from CurrentPDB at which to
 35037                                  ;	    truncate the current block.
 35038                                  ;
 35039                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 35040                                  ;	    paragraphs long. An exit is simulated via resetting CurrentPDB
 35041                                  ;	    and restoring the vectors.
 35042                                  ;
 35043                                  ;----------------------------------------------------------------------------
 35044                                  
 35045                                  	; 20/05/2019 - Retro DOS v4.0
 35046                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 35047                                  
 35048                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35049                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 35050                                  
 35051                                  _$KEEP_PROCESS:
 35052 00006066 50                      	push	AX			; keep exit code around
 35053                                  	;mov	byte [SS:EXIT_TYPE],3
 35054 00006067 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 35055 0000606D 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 35056 00006072 83FA06                  	cmp	DX,6h			; keep enough space around for system
 35057 00006075 7303                    	jae	short Keep_Shrink	; info
 35058                                  
 35059 00006077 BA0600                  	mov	DX,6h
 35060                                  
 35061                                  Keep_Shrink:
 35062 0000607A 89D3                    	mov	BX,DX
 35063 0000607C 53                      	push	BX
 35064 0000607D 06                      	push	ES
 35065 0000607E E82D02                  	call	_$SETBLOCK		; ignore return codes.
 35066 00006081 1F                      	pop	DS
 35067 00006082 5B                      	pop	BX
 35068 00006083 7207                    	jc	short Keep_Done		; failed on modification
 35069                                  
 35070 00006085 8CD8                    	mov	AX,DS
 35071 00006087 01D8                    	add	AX,BX
 35072                                  	;mov	[2],ax
 35073 00006089 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 35074                                  
 35075                                  Keep_Done:
 35076 0000608C 58                      	pop	AX
 35077 0000608D EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 35078                                  
 35079                                  ;----------------------------------------------------------------------------
 35080                                  ;
 35081                                  ;----------------------------------------------------------------------------
 35082                                  
 35083                                  STAY_RESIDENT:
 35084                                  	;mov	ax,3100h
 35085 0000608F B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 35086 00006092 83C20F                  	add	DX,15
 35087 00006095 D1DA                    	rcr	DX,1
 35088 00006097 B103                    	mov	CL,3
 35089 00006099 D3EA                    	shr	DX,CL
 35090                                  
 35091 0000609B E96AA2                  	jmp	COMMAND
 35092                                  
 35093                                  ;----------------------------------------------------------------------------
 35094                                  ;SUBTTL $EXIT - return to parent process
 35095                                  ;   Assembler usage:
 35096                                  ;	    MOV     AL, code
 35097                                  ;	    MOV     AH, Exit
 35098                                  ;	    INT     int_command
 35099                                  ;   Error return:
 35100                                  ;	    None.
 35101                                  ;
 35102                                  ;----------------------------------------------------------------------------
 35103                                  
 35104                                  	; 20/05/2019 - Retro DOS v4.0
 35105                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 35106                                  
 35107                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35108                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 35109                                  _$EXIT:
 35110                                  	; 04/08/2018 - Retro DOS v3.0
 35111                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 35112 0000609E 30E4                    	xor	AH,AH
 35113 000060A0 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 35114 000060A5 08E4                    	or	AH,AH
 35115                                  	;mov	BYTE [SS:EXIT_TYPE],0
 35116 000060A7 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 35117 000060AD 7406                    	jz	short exit_inner
 35118                                  	;mov	BYTE [SS:EXIT_TYPE],1
 35119 000060AF 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 35120                                  
 35121                                  	;entry	Exit_inner
 35122                                  exit_inner:
 35123 000060B5 E8C9A3                  	call	Get_User_Stack		;PBUGBUG
 35124                                  
 35125 000060B8 36FF36[3003]            	push	word [ss:CurrentPDB]
 35126                                  	;pop	word [si+14h]
 35127 000060BD 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 35128 000060C0 EB08                    	jmp	short abort_inner
 35129                                  
 35130                                  ;BREAK <$ABORT -- Terminate a process>
 35131                                  ;----------------------------------------------------------------------------
 35132                                  ; Inputs:
 35133                                  ;	user_CS:00 must point to valid program header block
 35134                                  ; Function:
 35135                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 35136                                  ;	to the terminate address
 35137                                  ; Returns:
 35138                                  ;	TO THE TERMINATE ADDRESS
 35139                                  ;----------------------------------------------------------------------------
 35140                                  
 35141                                  _$ABORT:
 35142 000060C2 30C0                    	xor	AL,AL
 35143                                  	;mov	byte [SS:EXIT_TYPE],0
 35144                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 35145 000060C4 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 35146                                  
 35147                                  	; abort_inner must have AL set as the exit code! The exit type
 35148                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 35149                                  	; to be correct as the one that is terminating.
 35150                                  
 35151                                  abort_inner:
 35152 000060CA 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 35153 000060CF 36A3[3403]              	mov	[SS:exit_code],AX
 35154 000060D3 E8ABA3                  	call	Get_User_Stack
 35155                                  
 35156                                  	;mov	ds,[si+14h]
 35157 000060D6 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 35158 000060D9 31C0                    	xor	AX,AX
 35159 000060DB 8EC0                    	mov	ES,AX
 35160                                  	;mov	si,10
 35161 000060DD BE0A00                  	mov	SI,SAVEXIT
 35162                                  	;mov	di,88h
 35163 000060E0 BF8800                  	mov	DI,addr_int_terminate
 35164 000060E3 A5                      	movsw
 35165 000060E4 A5                      	movsw
 35166 000060E5 A5                      	movsw
 35167 000060E6 A5                      	movsw
 35168 000060E7 A5                      	movsw
 35169 000060E8 A5                      	movsw
 35170 000060E9 E959F2                  	jmp	reset_environment
 35171                                  
 35172                                  ;----------------------------------------------------------------------------
 35173                                  ;
 35174                                  ; fixexepatch will point to this is DOS loads low. 
 35175                                  ;
 35176                                  ;----------------------------------------------------------------------------
 35177                                  ; MSDOS 6.0
 35178                                  
 35179                                  ; 29/04/2019 - Retro DOS v4.0
 35180                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 35181                                  
 35182                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35183                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 35184                                  
 35185                                  RetExePatch: ; proc near
 35186                                  	
 35187 000060EC C3                      	retn
 35188                                  
 35189                                  ;============================================================================
 35190                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 35191                                  ;============================================================================
 35192                                  ; 04/08/2018 - Retro DOS v3.0
 35193                                  ; 14/05/2019 - Retro DOS v4.0
 35194                                  
 35195                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 35196                                  
 35197                                  ;**
 35198                                  ;	Microsoft Confidential
 35199                                  ;	Copyright (C) Microsoft Corporation 1991
 35200                                  ;	All Rights Reserved.
 35201                                  ;
 35202                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 35203                                  ;	I/O specs are defined in DISPATCH.
 35204                                  ;
 35205                                  ;	$ALLOC
 35206                                  ;	$SETBLOCK
 35207                                  ;	$DEALLOC
 35208                                  ;	$AllocOper
 35209                                  ;	arena_free_process
 35210                                  ;	arena_next
 35211                                  ;	check_signature
 35212                                  ;	Coalesce
 35213                                  ;
 35214                                  ;	Modification history:
 35215                                  ;
 35216                                  ;	    Created: ARR 30 March 1983
 35217                                  ;
 35218                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 35219                                  ;		      M003 - added support for link/unlink UMBs from
 35220                                  ;			     DOS arena chain. 7/18/90
 35221                                  ;		      M009 - Added error returns invalid function and 
 35222                                  ;			     arena trashed in set link state call.
 35223                                  ;		      M010 - Release UMB arenas allocated to current PDB
 35224                                  ;			     if UMB_HEAD is initialized.
 35225                                  ;
 35226                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 35227                                  ;			     support. Please see under M009 in 
 35228                                  ;			     ..\inc\dossym.inc. 8/31/90.
 35229                                  ;
 35230                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 35231                                  ;			     sure that umb_head arena is valid and also make
 35232                                  ;			     sure that the previous arena is pointing to 
 35233                                  ;			     umb_head.
 35234                                  ;
 35235                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 35236                                  ;			     set allloc strategy.
 35237                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 35238                                  ;			     bx in AllocSetStrat.
 35239                                  ;
 35240                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 35241                                  ;			     a bit to indicate to dos dispatcher to turn
 35242                                  ;			     a20 off before iret. See M016.
 35243                                  ;
 35244                                  
 35245                                  ;	BREAK	<memory allocation utility routines>
 35246                                  
 35247                                  
 35248                                  ; 15/04/2018 - Retro DOS v2.0
 35249                                  ;----------------------------------------------------------------------------
 35250                                  ; xenix memory calls for MSDOS
 35251                                  ;
 35252                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 35253                                  ; arena_owner_system are all equal to zero and are contained in DI.
 35254                                  ;
 35255                                  ;INCLUDE DOSSEG.ASM
 35256                                  
 35257                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 35258                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 35259                                  
 35260                                  ;.xlist
 35261                                  ;.xcref
 35262                                  ;INCLUDE DOSSYM.ASM
 35263                                  ;INCLUDE DEVSYM.ASM
 35264                                  ;.cref
 35265                                  ;.list
 35266                                  
 35267                                  ;TITLE ALLOC.ASM - memory arena manager
 35268                                  ;NAME Alloc
 35269                                  
 35270                                  ;SUBTTL memory allocation utility routines
 35271                                  ;PAGE
 35272                                  ;
 35273                                  ; arena data
 35274                                  ;
 35275                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 35276                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 35277                                  ;       i_need  FirstArena,WORD         ; first free block found
 35278                                  ;       i_need  BestArena,WORD          ; best free block found
 35279                                  ;       i_need  LastArena,WORD          ; last free block found
 35280                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 35281                                  
 35282                                  ;**	Arena_Free_Process
 35283                                  ;----------------------------------------------------------------------------
 35284                                  ;	Free all arena blocks allocated to a prOcess
 35285                                  ;
 35286                                  ;	ENTRY	(bx) = PID of process
 35287                                  ;	EXIT	none
 35288                                  ;	USES	????? BUGBUG
 35289                                  ;----------------------------------------------------------------------------
 35290                                  
 35291                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35292                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 35293                                  
 35294                                  arena_free_process:
 35295                                  	; 14/05/2019 - Retro DOS v4.0
 35296                                  	; 04/08/2018 - Retro DOS v3.0
 35297 000060ED 36A1[2400]                      MOV	AX,[SS:arena_head]
 35298                                  arena_free_process_start:
 35299 000060F1 BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 35300                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 35301 000060F4 E82F00                          CALL	check_signature         ; ES <- AX, check for valid block
 35302                                  
 35303                                  arena_free_process_loop:
 35304                                          ;retc
 35305 000060F7 7225                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 35306 000060F9 06                      	PUSH    ES
 35307 000060FA 1F                              POP     DS
 35308                                  	;cmp	[1],bx 
 35309 000060FB 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 35310 000060FF 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 35311                                  	;mov	[1],di
 35312 00006101 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 35313                                  
 35314                                  arena_free_next:
 35315                                  	;cmp	byte [di],5Ah ;'Z'
 35316 00006105 803D5A                          CMP     BYTE [DI],arena_signature_end
 35317                                                                          ; end of road, Jack?
 35318                                          ;retz				; never come back no more
 35319                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 35320                                  	; 14/05/2019
 35321                                  	; MSDOS 6.0
 35322 00006108 7405                    	jz	short arena_chk_umbs
 35323                                          
 35324 0000610A E81200                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 35325 0000610D EBE8                            JMP     SHORT arena_free_process_loop
 35326                                  
 35327                                  	; MSDOS 6.0
 35328                                  arena_chk_umbs:				; M010 - Start
 35329                                  	; 20/05/2019
 35330 0000610F 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 35331 00006113 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 35332 00006116 741D                    	je	short ret_label		; N: we're done
 35333                                  	
 35334 00006118 8CDF                    	mov	di,ds			; di = last arena
 35335 0000611A 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 35336                                  	;jae	short ret_label		; Y: we've scanned umbs also. done.
 35337                                  	;jmp	short arena_free_process_start
 35338                                  					; M010 - End
 35339                                  	; 10/03/2024 (PCDOS 7.1 IBMDOS.COM)
 35340 0000611C 72D3                    	jb	short arena_free_process_start
 35341                                  
 35342                                  	; 10/03/2024
 35343                                  AFP_RETN:
 35344 0000611E C3                      	RETN
 35345                                  
 35346                                  ;	BREAK	<Arena Helper Routines>
 35347                                  
 35348                                  ;**	Arena_Next - Find Next item in Arena
 35349                                  ;----------------------------------------------------------------------------
 35350                                  ;	ENTRY	DS - pointer to block head
 35351                                  ;		(di) = 0
 35352                                  ;	EXIT	AX,ES - pointers to next head
 35353                                  ;		'C' set iff arena damaged
 35354                                  ;----------------------------------------------------------------------------
 35355                                  
 35356                                  arena_next:
 35357 0000611F 8CD8                            MOV     AX,DS                   ; AX <- current block
 35358 00006121 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 35359 00006125 40                              INC     AX                      ; remember that header!
 35360                                  
 35361                                  ;       fall into check_signature and return
 35362                                  ;
 35363                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 35364                                  ;       RETN
 35365                                  
 35366                                  ;**	Check_Signature - Check Memory Block Signature
 35367                                  ;----------------------------------------------------------------------------
 35368                                  ;	ENTRY	(AX) = address of block header
 35369                                  ;		(di) = 0
 35370                                  ;	EXIT	 ES = AX
 35371                                  ;		'C' clear if signature good
 35372                                  ;		'C' set if signature bad
 35373                                  ;	USES	ES, Flags
 35374                                  ;----------------------------------------------------------------------------
 35375                                  
 35376                                  check_signature:        
 35377                                  
 35378 00006126 8EC0                    	MOV     ES,AX                   ; ES <- AX
 35379                                  	;cmp	byte [es:di],4Dh ; 'M'
 35380 00006128 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 35381                                                                          ; IF next signature = not_end THEN
 35382 0000612C 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 35383                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 35384 0000612E 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 35385                                                                          ; IF next signature = end then
 35386 00006132 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 35387 00006134 F9                              STC                             ; set error
 35388                                  ret_label: ; MSDOS 6.0
 35389                                  ;AFP_RETN:	; 10/03/2024
 35390                                   	; Retro DOS v2.0 - 05/03/2018
 35391                                  check_signature_ok:
 35392                                  COALESCE_RETN:
 35393 00006135 C3                      	RETN
 35394                                  
 35395                                  ;**	Coalesce - Combine free blocks ahead with current block
 35396                                  ;----------------------------------------------------------------------------
 35397                                  ;	Coalesce adds the block following the argument to the argument block,
 35398                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 35399                                  ;	some callers (such as $setblock) use it to join a free block to it's
 35400                                  ;	preceeding allocated block.
 35401                                  ;
 35402                                  ;	ENTRY	(ds) = pointer to the head of a free block
 35403                                  ;		(di) = 0
 35404                                  ;	EXIT	'C' clear if OK
 35405                                  ;		  (ds) unchanged, this block updated
 35406                                  ;		  (ax) = address of next block, IFF not at end
 35407                                  ;		'C' set if arena trashed
 35408                                  ;	USES	(cx)
 35409                                  ;----------------------------------------------------------------------------
 35410                                          
 35411                                  Coalesce:
 35412                                  	;cmp	byte [di],5Ah ; 'Z'
 35413 00006136 803D5A                  	CMP     BYTE [DI],arena_signature_end
 35414                                                                          ; IF current signature = END THEN
 35415                                          ;retz				;   GOTO ok
 35416 00006139 74FA                            jz	short COALESCE_RETN
 35417 0000613B E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 35418                                          ;retc				; IF no error THEN GOTO check
 35419 0000613E 72F5                    	jc	short COALESCE_RETN
 35420                                  
 35421                                  coalesce_check:
 35422                                  	;cmp	[es:1],di
 35423 00006140 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 35424                                          ;retnz				; IF next block isnt free THEN return
 35425 00006145 75EE                            JNZ	SHORT COALESCE_RETN
 35426                                  	;mov	cx,[ES:3]
 35427 00006147 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 35428 0000614C 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 35429                                          ;ADD	[3],CX
 35430 0000614D 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 35431 00006151 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 35432 00006154 880D                            MOV     [DI],CL
 35433 00006156 EBDE                            JMP     SHORT Coalesce		; try again
 35434                                  
 35435                                  ; 04/08/2018 - Retro DOS v3.0
 35436                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 35437                                  
 35438                                  ;	BREAK  <$Alloc - allocate space in memory>
 35439                                  
 35440                                  ; MSDOS 6.0
 35441                                  ;----------------------------------------------------------------------------
 35442                                  ;**	$Alloc - Allocate Memory Space
 35443                                  ;
 35444                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 35445                                  ;	Alloc returns a pointer to a free block of memory that
 35446                                  ;	has the requested size in paragraphs.
 35447                                  ;
 35448                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 35449                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 35450                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 35451                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 35452                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 35453                                  ;
 35454                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 35455                                  ;	starts from arena_head.
 35456                                  ;
 35457                                  ;	Assembler usage:
 35458                                  ;           MOV     BX,size
 35459                                  ;           MOV     AH,Alloc
 35460                                  ;           INT     21h
 35461                                  ;
 35462                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 35463                                  ;	so that we start searching the arena at it's first non-trivial free
 35464                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 35465                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 35466                                  ;	doesn't have too many memory objects in it beyond the first free one.
 35467                                  ;	verify that this is true; if so, this can stay as is
 35468                                  ;
 35469                                  ;	ENTRY	(bx) = requested size, in bytes
 35470                                  ;		(DS) = (ES) = DOSGROUP
 35471                                  ;	EXIT	'C' clear if memory allocated
 35472                                  ;		  (ax:0) = address of requested memory
 35473                                  ;		'C' set if request failed
 35474                                  ;		  (AX) = error_not_enough_memory
 35475                                  ;		    (bx) = max size we could have allocated
 35476                                  ;		  (ax) = error_arena_trashed
 35477                                  ;	USES	All
 35478                                  ;----------------------------------------------------------------------------
 35479                                  
 35480                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35481                                  ;----------------------------------------------------------------------------
 35482                                  ;SUBTTL $Alloc - allocate space in memory
 35483                                  ;
 35484                                  ;   Assembler usage:
 35485                                  ;           MOV     BX,size
 35486                                  ;           MOV     AH,Alloc
 35487                                  ;           INT     21h
 35488                                  ;         AX:0 is pointer to allocated memory
 35489                                  ;         BX is max size if not enough memory
 35490                                  ;
 35491                                  ;   Description:
 35492                                  ;           Alloc returns  a  pointer  to  a  free  block of
 35493                                  ;       memory that has the requested  size  in  paragraphs.
 35494                                  ;
 35495                                  ;   Error return:
 35496                                  ;           AX = error_not_enough_memory
 35497                                  ;              = error_arena_trashed
 35498                                  ;----------------------------------------------------------------------------
 35499                                  
 35500                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 35501                                  
 35502                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35503                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 35504                                  
 35505                                  _$ALLOC:
 35506                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 35507                                  	; 14/05/2019 - Retro DOS v4.0
 35508                                  	; 04/08/2018 - Retro DOS v3.0
 35509                                  	;EnterCrit critMem
 35510 00006158 E892B1                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35511                                  
 35512                                  ; 17/12/2022
 35513                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35514                                  ;%if 0
 35515                                  	; 14/05/2019
 35516 0000615B 16                      	push	ss
 35517 0000615C 1F                      	pop	ds
 35518                                  
 35519                                  	; MSDOS 6.0
 35520                                  	;mov	ax,[ss:arena_head]
 35521                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35522                                  
 35523 0000615D A1[2400]                	mov	ax,[arena_head]
 35524 00006160 A3[8E00]                	mov	[START_ARENA],ax
 35525                                  	
 35526                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35527 00006163 F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 35528                                  					; Q: should we start scanning from
 35529                                  					;    UMB's
 35530 00006168 740D                    	jz	short norm_alloc	; N: scan from arena_head
 35531                                  		
 35532                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35533                                  	;cmp	word [UMB_HEAD],-1
 35534                                  	;je	short norm_alloc	; N: scan from arena_head
 35535                                  
 35536                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35537 0000616A F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 35538 0000616F 7406                    	jz	short norm_alloc	; N: scan from arena_head
 35539                                  	
 35540                                  	;mov	ax,[ss:UMB_HEAD]
 35541                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35542 00006171 A1[8C00]                	mov	ax,[UMB_HEAD]
 35543 00006174 A3[8E00]                	mov	[START_ARENA],ax
 35544                                  					; M000 - end
 35545                                  norm_alloc:
 35546 00006177 31C0                            XOR     AX,AX
 35547 00006179 89C7                            MOV     DI,AX
 35548                                  	; 15/03/2018
 35549                                          ;MOV	[SS:FirstArena],AX	; init the options
 35550                                          ;MOV	[SS:BestArena],AX
 35551                                          ;MOV	[SS:LastArena],AX
 35552                                  	; 14/05/2019
 35553 0000617B A3[4003]                	MOV	[FirstArena],AX		; init the options
 35554 0000617E A3[4203]                        MOV	[BestArena],AX
 35555 00006181 A3[4403]                        MOV	[LastArena],AX
 35556 00006184 50                              PUSH    AX                      ; alloc_max <- 0
 35557                                  	; 04/08/2018
 35558                                  start_scan:
 35559                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35560                                  	;MOV	AX,[arena_head]
 35561                                  
 35562                                  	; 14/05/2019	
 35563                                  	; MSDOS 6.0
 35564                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35565 00006185 A1[8E00]                	mov	ax,[START_ARENA]
 35566                                  
 35567                                  	; 27/09/2023 (BugFix) (*)
 35568                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 35569                                  start_scan_x:
 35570                                  
 35571 00006188 E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 35572 0000618B 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 35573                                  
 35574                                  ;%endif
 35575                                  
 35576                                  ; 17/12/2022
 35577                                  %if 0
 35578                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35579                                  
 35580                                  	; MSDOS 6.0
 35581                                  	mov	ax,[ss:arena_head]
 35582                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35583                                  
 35584                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35585                                  					; Q: should we start scanning from
 35586                                  					;    UMB's
 35587                                  	jz	short norm_alloc	; N: scan from arena_head
 35588                                  		
 35589                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35590                                  	;je	short norm_alloc	; N: scan from arena_head
 35591                                  
 35592                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35593                                  	jz	short norm_alloc	; N: scan from arena_head
 35594                                  	
 35595                                  	mov	ax,[ss:UMB_HEAD]
 35596                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35597                                  					; M000 - end
 35598                                  norm_alloc:
 35599                                          XOR     AX,AX
 35600                                          MOV     DI,AX
 35601                                  	; 15/03/2018
 35602                                  	MOV	[SS:FirstArena],AX	; init the options
 35603                                  	MOV	[SS:BestArena],AX
 35604                                  	MOV	[SS:LastArena],AX
 35605                                          PUSH    AX                      ; alloc_max <- 0
 35606                                  	; 04/08/2018
 35607                                  start_scan:
 35608                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35609                                  	; 14/05/2019	
 35610                                  	; MSDOS 6.0
 35611                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35612                                  	CALL    check_signature         ; ES <- AX, carry set if error
 35613                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 35614                                  %endif
 35615                                  
 35616                                  alloc_scan:
 35617 0000618D 06                              PUSH    ES
 35618 0000618E 1F                              POP     DS                      ; DS <- ES
 35619 0000618F 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 35620 00006193 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 35621                                  
 35622                                  alloc_next:
 35623                                  	; MSDOS 6.0			; M000 - start 
 35624 00006195 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35625 0000619B 741C                    	jz	short norm_strat	; N: see if we reached last arena
 35626                                  	
 35627 0000619D 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 35628                                  					; Q: is alloc strategy high_first
 35629 000061A3 7414                    	jz	short norm_strat	; N: see if we reached last arena
 35630 000061A5 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 35631 000061A9 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 35632                                  					;    arena_head
 35633 000061AE 7509                    	jne	short norm_strat	; N: see if we reached last arena
 35634 000061B0 8CD8                    	mov	ax,ds			; ax = current block
 35635 000061B2 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 35636 000061B7 EB03                    	jmp	short alloc_chk_end
 35637                                  
 35638                                  norm_strat:
 35639                                  	;cmp	byte [di],5Ah ; 'Z'
 35640 000061B9 803D5A                          CMP     BYTE [DI],arena_signature_end
 35641                                                                          ; IF current block is last THEN
 35642                                  alloc_chk_end:
 35643 000061BC 740E                            JZ      SHORT alloc_end		;   GOTO end
 35644 000061BE E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 35645 000061C1 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 35646                                  
 35647                                  alloc_err:
 35648 000061C3 58                              POP     AX
 35649                                  
 35650                                  alloc_trashed:
 35651                                  	;LeaveCrit critMem
 35652 000061C4 E841B1                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35653                                          ;error	error_arena_trashed
 35654                                  	;mov	al,7
 35655 000061C7 B007                    	MOV	AL,error_arena_trashed
 35656                                  alloc_errj:
 35657 000061C9 E96EA4                  	JMP	SYS_RET_ERR
 35658                                  
 35659                                  alloc_end:
 35660                                  	; 18/05/2019
 35661 000061CC 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 35662 000061D2 7403                    	jz	short alloc_chk 
 35663 000061D4 E98400                  	jmp	alloc_do_split
 35664                                  
 35665                                  alloc_chk:
 35666                                  	; MSDOS 6.0
 35667 000061D7 36A1[2400]              	mov	ax,[ss:arena_head]
 35668 000061DB 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 35669 000061E0 740E                    	je	short alloc_fail	; Y: not enough memory
 35670                                  					; N:
 35671                                  					; Q: is the alloc strat HIGH_ONLY
 35672 000061E2 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 35673 000061E8 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 35674                                  	
 35675 000061EA 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 35676                                  	; 27/09/2023 (*)
 35677 000061EE EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 35678                                  	;jmp	short start_scan
 35679                                  					; M000 - end
 35680                                  
 35681                                  alloc_fail:
 35682                                          ;invoke Get_User_Stack
 35683 000061F0 E88EA2                          CALL	Get_User_Stack
 35684 000061F3 5B                      	POP     BX
 35685                                          ;MOV	[SI].user_BX,BX
 35686                                  	;MOV	[SI+2],BX
 35687 000061F4 895C02                  	mov	[SI+user_env.user_BX],bx
 35688                                  	;LeaveCrit critMem
 35689 000061F7 E80EB1                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35690                                  	;error	error_not_enough_memory
 35691                                  	;mov	al,8
 35692 000061FA B008                    	MOV	AL,error_not_enough_memory
 35693                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35694 000061FC EBCB                    	jmp	short alloc_errj
 35695                                  	;JMP	SYS_RET_ERR
 35696                                  
 35697                                  alloc_free:
 35698 000061FE E835FF                          CALL    Coalesce		; add following free block to current
 35699 00006201 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 35700 00006203 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35701 00006207 5A                              POP     DX                      ; check for max found size
 35702 00006208 39D1                            CMP     CX,DX
 35703 0000620A 7602                            JNA     SHORT alloc_test
 35704 0000620C 89CA                            MOV     DX,CX
 35705                                  
 35706                                  alloc_test:
 35707 0000620E 52                              PUSH    DX
 35708 0000620F 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 35709 00006211 7782                    	JA      SHORT alloc_next	;   GOTO next
 35710                                  
 35711                                  	; 15/03/2018
 35712 00006213 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 35713 00006219 7505                    	JNZ	SHORT alloc_best
 35714 0000621B 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 35715                                  alloc_best:
 35716 00006220 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 35717 00006226 740E                            JZ      SHORT alloc_make_best	; initial best
 35718 00006228 06                              PUSH	ES
 35719 00006229 368E06[4203]                    MOV     ES,[SS:BestArena]
 35720 0000622E 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 35721 00006233 07                              POP	ES
 35722 00006234 7605                            JBE     SHORT alloc_last
 35723                                  alloc_make_best:
 35724 00006236 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 35725                                  alloc_last:
 35726 0000623B 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 35727 00006240 E952FF                          JMP     alloc_next
 35728                                  ;
 35729                                  ; split the block high
 35730                                  ;
 35731                                  alloc_do_split_high:
 35732 00006243 368E1E[4403]                    MOV     DS,[SS:LastArena]
 35733 00006248 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35734 0000624C 29D9                            SUB     CX,BX
 35735 0000624E 8CDA                            MOV     DX,DS
 35736 00006250 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 35737 00006252 01CA                            ADD     DX,CX                   ; point to next block
 35738 00006254 8EC2                            MOV     ES,DX                   ; no decrement!
 35739 00006256 49                              DEC     CX
 35740 00006257 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 35741 00006259 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 35742                                  ;
 35743                                  ; we have scanned memory and have found all appropriate blocks
 35744                                  ; check for the type of allocation desired; first and best are identical
 35745                                  ; last must be split high
 35746                                  ;
 35747                                  alloc_do_split:
 35748                                  
 35749                                  ; 17/12/2022
 35750                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35751                                  ;%if 0
 35752                                  	; 14/05/2019
 35753                                  	; MSDOS 6.0			; M000 - start
 35754                                  	;xor	cx,cx
 35755 0000625B 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 35756                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35757 00006260 80E13F                  	and	cl,3Fh
 35758                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35759 00006263 80F901                  	cmp	cl,BEST_FIT
 35760 00006266 77DB                    	ja	short alloc_do_split_high
 35761                                  ;%endif
 35762                                  
 35763                                  	; 17/12/2022
 35764                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35765                                  	; MSDOS 6.0 & MSDOS 5.0
 35766                                  	;xor	cx,cx
 35767                                  	;mov	cl,[ss:AllocMethod]
 35768                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35769                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35770                                  	;ja	short alloc_do_split_high
 35771                                  
 35772                                  	; 15/03/2018
 35773                                          ;;CMP	BYTE [SS:AllocMethod], 1
 35774                                  	; 04/08/2018
 35775                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 35776                                          ;JA	SHORT alloc_do_split_high
 35777                                          
 35778 00006268 368E1E[4003]            	MOV     DS,[SS:FirstArena]
 35779 0000626D 7205                    	JB      SHORT alloc_get_size
 35780 0000626F 368E1E[4203]            	MOV     DS,[SS:BestArena]
 35781                                  
 35782                                  alloc_get_size:
 35783 00006274 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35784 00006278 29D9                            SUB     CX,BX                   ; get room left over
 35785 0000627A 8CD8                            MOV     AX,DS
 35786 0000627C 89C2                            MOV     DX,AX                   ; save for owner setting
 35787 0000627E 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 35788 00006280 01D8                            ADD     AX,BX
 35789 00006282 40                              INC     AX                      ; remember the header
 35790 00006283 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 35791 00006285 49                              DEC     CX                      ; CX <- size of split block
 35792                                  alloc_set_sizes:
 35793 00006286 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 35794 0000628A 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 35795                                  	;mov	bl,4Dh ; 'M'
 35796 0000628F B34D                            MOV     BL,arena_signature_normal
 35797 00006291 861D                            XCHG    BL,[DI]			; current signature <- 4D
 35798 00006293 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 35799 00006296 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35800                                  
 35801                                  alloc_set_owner:
 35802 0000629B 8EDA                            MOV     DS,DX
 35803 0000629D 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 35804 000062A1 A30100                          MOV     [ARENA.OWNER],AX
 35805 000062A4 8CD8                            MOV     AX,DS
 35806 000062A6 40                              INC     AX
 35807 000062A7 5B                              POP     BX
 35808                                  	;LeaveCrit critMem
 35809 000062A8 E85DB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35810                                  	
 35811                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35812                                  alloc_ok:
 35813                                          ;transfer SYS_RET_OK
 35814 000062AB E983A3                  	JMP	SYS_RET_OK
 35815                                  
 35816                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 35817                                  
 35818                                  ; MSDOS 6.0
 35819                                  ;----------------------------------------------------------------------------
 35820                                  ;**	$SETBLOCK - Change size of an Allocated Block
 35821                                  ;
 35822                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 35823                                  ;	any following free space onto this block; then we try to trim the
 35824                                  ;	block down to the size requested.
 35825                                  ;
 35826                                  ;	Note that if the guy wants to grow the block but that growth fails,
 35827                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 35828                                  ;	Thus the maximum-size-possible value that we return has already
 35829                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 35830                                  ;
 35831                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 35832                                  ;		finish it's work. For this reason we build the allocsf
 35833                                  ;		structure on the frame, to make us compatible with $ALLOCs
 35834                                  ;		code.
 35835                                  ;
 35836                                  ;	ENTRY	(es) = segment of old block
 35837                                  ;		(bx) = newsize
 35838                                  ;		(ah) = SETBLOCK
 35839                                  ;
 35840                                  ;	EXIT	'C' clear if OK
 35841                                  ;		'C' set if error
 35842                                  ;		  (ax) = error_invalid_block
 35843                                  ;		       = error_arena_trashed
 35844                                  ;		       = error_not_enough_memory
 35845                                  ;		       = error_invalid_function
 35846                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 35847                                  ;	USES	???? BUGBUG
 35848                                  ;----------------------------------------------------------------------------
 35849                                  
 35850                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35851                                  ;----------------------------------------------------------------------------
 35852                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 35853                                  ;
 35854                                  ;   Assembler usage:
 35855                                  ;           MOV     ES,block
 35856                                  ;           MOV     BX,newsize
 35857                                  ;           MOV     AH,setblock
 35858                                  ;           INT     21h
 35859                                  ;         if setblock fails for growing, BX will have the maximum
 35860                                  ;         size possible
 35861                                  ;   Error return:
 35862                                  ;           AX = error_invalid_block
 35863                                  ;              = error_arena_trashed
 35864                                  ;              = error_not_enough_memory
 35865                                  ;              = error_invalid_function
 35866                                  ;----------------------------------------------------------------------------
 35867                                  
 35868                                  _$SETBLOCK:        
 35869                                  	; 04/08/2018 - Retro DOS v3.0
 35870                                  	;EnterCrit   critMem
 35871 000062AE E83CB0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35872                                  
 35873 000062B1 BF0000                  	MOV     DI,ARENA.SIGNATURE
 35874 000062B4 8CC0                            MOV     AX,ES
 35875 000062B6 48                              DEC     AX
 35876 000062B7 E86CFE                          CALL    check_signature
 35877 000062BA 7303                            JNC     SHORT setblock_grab
 35878                                  
 35879                                  setblock_bad:
 35880 000062BC E905FF                          JMP     alloc_trashed
 35881                                  
 35882                                  setblock_grab:
 35883 000062BF 8ED8                            MOV     DS,AX
 35884 000062C1 E872FE                          CALL    Coalesce
 35885 000062C4 72F6                            JC      SHORT setblock_bad
 35886 000062C6 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35887 000062CA 51                              PUSH    CX
 35888 000062CB 39CB                            CMP     BX,CX
 35889 000062CD 76A5                            JBE     SHORT alloc_get_size
 35890 000062CF E91EFF                          JMP     alloc_fail
 35891                                  
 35892                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 35893                                  
 35894                                  ; MSDOS 6.0
 35895                                  ;----------------------------------------------------------------------------
 35896                                  ;**	$DEALLOC - Free Heap Memory
 35897                                  ;
 35898                                  ;	ENTRY	(es) = address of item
 35899                                  ;
 35900                                  ;	EXIT	'C' clear of OK
 35901                                  ;		'C' set if error
 35902                                  ;		  (AX) = error_invalid_block
 35903                                  ;	USES	???? BUGBUG
 35904                                  
 35905                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35906                                  ;----------------------------------------------------------------------------
 35907                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 35908                                  ;
 35909                                  ;   Assembler usage:
 35910                                  ;           MOV     ES,block
 35911                                  ;           MOV     AH,dealloc
 35912                                  ;           INT     21h
 35913                                  ;
 35914                                  ;   Error return:
 35915                                  ;           AX = error_invalid_block
 35916                                  ;              = error_arena_trashed
 35917                                  ;---------------------------------------------------------------------------- 
 35918                                  
 35919                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35920                                  _$DEALLOC:
 35921                                  	; 14/05/2019 - Retro DOS v4.0    
 35922                                  	; 04/08/2018 - Retro DOS v3.0
 35923                                  	;EnterCrit   critMem
 35924 000062D2 E818B0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35925                                  
 35926                                  	; MSDOS 6.0			; M016, M068 - Start
 35927 000062D5 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 35928                                  					; Q: was the previous call an int 21
 35929                                  					;    exec call
 35930 000062DB 740D                    	jz	short deallocate	; N: continue
 35931 000062DD 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 35932 000062E3 7505                    	jne	short deallocate	; N: continue
 35933                                  	;mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 35934                                  	; 25/09/2023
 35935 000062E5 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
 35936                                  deallocate:				; M016, M068 - End
 35937 000062EA BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 35938 000062ED 8CC0                            MOV     AX,ES
 35939 000062EF 48                              DEC     AX
 35940 000062F0 E833FE                          CALL    check_signature
 35941 000062F3 720A                            JC      SHORT dealloc_err
 35942 000062F5 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35943                                  	;LeaveCrit critMem
 35944 000062FA E80BB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35945                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35946                                          ;transfer SYS_RET_OK
 35947                                  dealloc_ok:
 35948 000062FD EBAC                    	jmp	short alloc_ok
 35949                                  	;JMP	SYS_RET_OK
 35950                                  
 35951                                  dealloc_err:
 35952                                  	;LeaveCrit critMem
 35953 000062FF E806B0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35954                                          ;error	error_invalid_block
 35955                                  	;mov	al,9
 35956 00006302 B009                    	MOV	AL,error_invalid_block
 35957                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35958                                  dealloc_errj:
 35959                                  AllocOperErrj:	; 17/12/2022
 35960 00006304 E933A3                  	JMP	SYS_RET_ERR
 35961                                  
 35962                                  ;	BREAK $AllocOper - get/set allocation mechanism
 35963                                  
 35964                                  ; MSDOS 6.0
 35965                                  ;----------------------------------------------------------------------------
 35966                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 35967                                  ;
 35968                                  ;	Assembler usage:
 35969                                  ;           MOV     AH,AllocOper
 35970                                  ;           MOV     BX,method
 35971                                  ;           MOV     AL,func
 35972                                  ;           INT     21h
 35973                                  ;
 35974                                  ;	ENTRY	
 35975                                  ;		(al) = 0
 35976                                  ;		  Get allocation Strategy in (ax)
 35977                                  ;
 35978                                  ;		(al) = 1, (bx) = method = zw0000xy
 35979                                  ;		  Set allocation strategy.
 35980                                  ;		   w  = 1  => HIGH_ONLY
 35981                                  ;		   z  = 1  => HIGH_FIRST
 35982                                  ;		   xy = 00 => FIRST_FIT
 35983                                  ;		      = 01 => BEST_FIT
 35984                                  ;		      = 10 => LAST_FIT
 35985                                  ;
 35986                                  ;		(al) = 2
 35987                                  ;		  Get UMB link state in (al)
 35988                                  ;
 35989                                  ;		(al) = 3
 35990                                  ;		  Set UMB link state
 35991                                  ;		   (bx) = 0 => Unlink UMBs
 35992                                  ;		   (bx) = 1 => Link UMBs
 35993                                  ;
 35994                                  ;
 35995                                  ;	EXIT	'C' clear if OK
 35996                                  ;
 35997                                  ;		 if (al) = 0
 35998                                  ;		  (ax) = existing method
 35999                                  ;		 if (al) = 1
 36000                                  ;		  Sets allocation strategy
 36001                                  ;		 if (al) = 2
 36002                                  ;		  (al) = 0 => UMBs not linked
 36003                                  ;		  (al) = 1 => UMBs linked in
 36004                                  ;		 if (al) = 3
 36005                                  ;		  Links/Unlinks the UMBs into DOS chain
 36006                                  ;
 36007                                  ;		'C' set if error
 36008                                  ;		  AX = error_invalid_function
 36009                                  ;
 36010                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 36011                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 36012                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 36013                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 36014                                  ;		    arena' if an arena sig is damaged.
 36015                                  ;----------------------------------------------------------------------------
 36016                                  
 36017                                  ; MSDOS 2.11 (& MSDOS 3.3)
 36018                                  ;----------------------------------------------------------------------------
 36019                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 36020                                  ;
 36021                                  ;   Assembler usage:
 36022                                  ;           MOV     AH,AllocOper
 36023                                  ;           MOV     BX,method
 36024                                  ;           MOV     AL,func
 36025                                  ;           INT     21h
 36026                                  ;
 36027                                  ;   Error return:
 36028                                  ;           AX = error_invalid_function
 36029                                  ;----------------------------------------------------------------------------
 36030                                  
 36031                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36032                                  _$ALLOCOPER:
 36033                                  	; 14/05/2019 - Retro DOS v4.0
 36034                                  	; MSDOS 6.0
 36035 00006307 08C0                    	or	al,al ; 0
 36036 00006309 741E                    	jz	short AllocGetStrat
 36037                                  	; 17/12/2022
 36038                                  	;cmp	al,1
 36039                                  	;jz	short AllocSetStrat
 36040                                  
 36041                                  	; 01/12/2022
 36042                                  	;cmp	al, 2
 36043                                  	;jb	short AllocSetStrat
 36044                                  	;ja	short AllocSetLink
 36045                                  	;;jmp	short AllocGetLink
 36046                                  ;AllocGetLink:
 36047                                  	; MSDOS 6.0
 36048                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 36049                                  	;and 	al,LINKSTATE
 36050                                  	;;transfer SYS_RET_OK
 36051                                  	;jmp	SYS_RET_OK
 36052                                  
 36053 0000630B 3C02                    	cmp	al,2
 36054                                  	; 17/12/2022
 36055 0000630D 7223                    	jb	short AllocSetStrat ; al = 1
 36056 0000630F 7432                    	je	short AllocGetLink
 36057                                  
 36058                                  	;cmp	al,2
 36059                                  	;jz	short AllocGetLink
 36060 00006311 3C03                    	cmp	al,3
 36061 00006313 7436                    	jz	short AllocSetLink
 36062                                  
 36063                                  	; 15/04/2018
 36064                                  	;CMP	AL,1
 36065                                          ;JB	SHORT AllocOperGet
 36066                                          ;JZ	SHORT AllocOperSet
 36067                                  
 36068                                  AllocOperError:
 36069                                  	; 04/08/2018 - Retro DOS v3.0
 36070                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus
 36071                                  	;mov	byte [ss:EXTERR_LOCUS],5
 36072 00006315 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 36073                                  	;error	error_invalid_function
 36074                                  	;mov	al,1
 36075 0000631B B001                    	MOV	AL,error_invalid_function
 36076                                  	; 17/12/2022
 36077                                  ;AllocOperErrj:
 36078                                  	;JMP	SYS_RET_ERR
 36079                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36080                                  	;jmp	short dealloc_errj
 36081                                  	; 17/12/2022
 36082 0000631D EBE5                    	jmp	short AllocOperErrj
 36083                                  
 36084                                  AllocArenaError:
 36085                                  	; MSDOS 6.0
 36086 0000631F 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 36087                                  					; M009: Extended Error Locus
 36088                                  	;error	error_arena_trashed	; M009:
 36089                                  	;mov	al,7
 36090 00006325 B007                    	MOV	AL,error_arena_trashed
 36091                                  	;JMP	SYS_RET_ERR
 36092 00006327 EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 36093                                  
 36094                                  AllocGetStrat: 
 36095                                  	; MSDOS 6.0
 36096                                  AllocOperGet:
 36097 00006329 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 36098 0000632D 30E4                            XOR     AH,AH
 36099                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36100                                  	;transfer SYS_RET_OK
 36101                                  AllocOperOk:
 36102                                  	; 17/12/2022
 36103                                  	;jmp	short dealloc_ok
 36104 0000632F E9FFA2                  	JMP	SYS_RET_OK
 36105                                  
 36106                                  AllocSetStrat: 
 36107                                  	; 14/05/2019
 36108                                  	; MSDOS 6.0
 36109 00006332 53                      	push	bx			; M000 - start
 36110                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36111                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 36112                                  	; 17/12/2022
 36113 00006333 80E33F                  	and	bl,3Fh
 36114 00006336 83FB02                  	cmp	bx,2			; BX must be 0-2
 36115                                  	;cmp	bl,2
 36116 00006339 5B                      	pop	bx			; M000 - end
 36117 0000633A 77D9                    	ja	short AllocOperError
 36118                                  
 36119                                  AllocOperSet:
 36120 0000633C 36881E[0203]                    MOV     [SS:AllocMethod],BL
 36121                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36122                                  	;transfer SYS_RET_OK
 36123                                  AllocOperOkj:
 36124 00006341 EBEC                    	jmp	short AllocOperOk
 36125                                  	;JMP	SYS_RET_OK
 36126                                  
 36127                                  AllocGetLink:
 36128                                  	; MSDOS 6.0
 36129 00006343 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 36130                                  	;and	al,1
 36131 00006347 2401                    	and 	al,LINKSTATE
 36132                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36133                                  	;transfer SYS_RET_OK
 36134                                  AllocOperOkj2:
 36135                                  	; 17/12/2022
 36136 00006349 EBE4                    	jmp	short AllocOperOk
 36137                                  	;jmp	short AllocOperOkj
 36138                                  	;;JMP	SYS_RET_OK
 36139                                  
 36140                                  AllocSetLink:
 36141                                  	; MSDOS 6.0			; M009 - start
 36142 0000634B 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 36143 00006350 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 36144 00006353 74C0                    	je	short AllocOperError	; N: error
 36145                                  					; Y: continue
 36146                                  					; M009 - end
 36147 00006355 83FB01                  	cmp	bx,1
 36148                                  	;jb	short UnlinkUmbs
 36149                                  	;jz	short LinkUmbs
 36150                                  	;jmp	short AllocOperError
 36151                                  	; 10/03/2024
 36152 00006358 741C                    	jz	short LinkUmbs
 36153 0000635A 77B9                    	ja	short AllocOperError
 36154                                  
 36155                                  UnlinkUmbs:
 36156                                  	;test	byte [ss:UMBFLAG],1
 36157 0000635C 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 36158 00006362 7410                    	jz	short unlinked		; Y: return 
 36159                                  	
 36160 00006364 E82900                  	call	GetLastArena		; get arena before umb_head in DS
 36161 00006367 72B6                    	jc	short AllocArenaError	; M009: arena trashed
 36162                                  	
 36163                                  					; make it last
 36164 00006369 C60600005A              	mov	byte [0],arena_signature_end
 36165                                  	
 36166                                  	;and	byte [ss:UMBFLAG],0FEh
 36167 0000636E 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 36168                                  	
 36169                                  unlinked:
 36170                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36171                                  	;transfer SYS_RET_OK
 36172                                  	; 17/12/2022
 36173 00006374 EBB9                    	jmp	short AllocOperOk
 36174                                  	;jmp	short AllocOperOkj2
 36175                                  	;;JMP	SYS_RET_OK
 36176                                  
 36177                                  LinkUmbs:
 36178 00006376 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 36179 0000637C 7510                    	jnz	short linked		; Y: return
 36180                                  	
 36181 0000637E E80F00                  	call	GetLastArena		; get arena before umb_head
 36182 00006381 729C                    	jc	short AllocArenaError	; M009: arena trashed
 36183                                  	
 36184                                  					; make it normal. M061: ds points to
 36185                                  					; arena before umb_head
 36186 00006383 C60600004D              	mov	byte [0],arena_signature_normal
 36187                                  	
 36188 00006388 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 36189                                  linked:
 36190                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36191                                  	;transfer SYS_RET_OK
 36192                                  	; 17/12/2022
 36193 0000638E EB9F                    	jmp	short AllocOperOk
 36194                                  	;jmp	short unlinked
 36195                                  	;;JMP	SYS_RET_OK
 36196                                  
 36197                                  ; MSDOS 6.0
 36198                                  ;--------------------------------------------------------------------------
 36199                                  ; Procedure Name : GetLastArena		-  M003
 36200                                  ;
 36201                                  ; Inputs	 : cx = umb_head
 36202                                  ;
 36203                                  ;
 36204                                  ; Outputs	 : If UMBs are linked
 36205                                  ;			ES = umb_head
 36206                                  ;			DS = arena before umb_head
 36207                                  ;		   else
 36208                                  ;			DS = last arena
 36209                                  ;			ES = next arena. will be umb_head if NC.
 36210                                  ;
 36211                                  ;		   CY if error
 36212                                  ;
 36213                                  ; Uses		 : DS, ES, DI, BX
 36214                                  ;--------------------------------------------------------------------------
 36215                                  
 36216                                  ; 14/05/2019 - Retro DOS v4.0
 36217                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 36218                                  
 36219                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36220                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 36221                                  	
 36222                                  GetLastArena:
 36223 00006390 50                      	push	ax			; save ax
 36224                                  
 36225 00006391 36A1[2400]              	mov	ax,[ss:arena_head]
 36226 00006395 8EC0                    	mov	es,ax			; es = arena_head
 36227 00006397 31FF                    	xor	di,di
 36228                                  
 36229 00006399 26803D5A                	cmp     byte [es:di],arena_signature_end
 36230                                  					; Q: is this the last arena
 36231 0000639D 7419                    	je	short GLA_done		; Y: return last arena in ES
 36232                                  
 36233                                  GLA_next:
 36234 0000639F 8ED8                    	mov	ds,ax
 36235 000063A1 E87BFD                  	call	arena_next		; ax, es -> next arena
 36236                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36237                                  	;jc	short GLA_err
 36238                                  	; 17/12/2022
 36239 000063A4 7228                    	jc	short GLA_err2
 36240                                  
 36241 000063A6 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 36242 000063AC 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is
 36243                                  					;    umb_head
 36244                                  					; N: terminating condition is 05Ah
 36245                                  
 36246 000063AE 26803D5A                	cmp     byte [es:di],arena_signature_end
 36247                                  					; Q: is this the last arena
 36248 000063B2 EB02                    	jmp	short GLA_@f
 36249                                  GLA_chkumb:
 36250 000063B4 39C8                    	cmp	ax,cx			; Q: is this umb_head
 36251                                  GLA_@f:
 36252 000063B6 75E7                    	jne	short GLA_next		; N: get next arena
 36253                                  
 36254                                  GLA_done:
 36255                                  					; M061 - Start
 36256 000063B8 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 36257 000063BE 750B                    	jnz	short GLA_ret		; Y: we're done
 36258                                  					; N: let us confirm that the next
 36259                                  					;    arena is umb_head
 36260 000063C0 8ED8                    	mov	ds,ax
 36261 000063C2 E85AFD                  	call	arena_next		; ax, es -> next arena
 36262                                  	;jc	short GLA_err
 36263 000063C5 7207                    	jc	short GLA_err2
 36264 000063C7 39C8                    	cmp	ax,cx			; Q: is this umb_head
 36265 000063C9 7502                    	jne	short GLA_err		; N: error
 36266                                  					; M061 - End
 36267                                  GLA_ret:
 36268                                  	; 17/12/2022
 36269                                  	;clc
 36270                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36271                                  	;clc
 36272 000063CB 58                      	pop	ax			; M061
 36273 000063CC C3                      	retn				; M061
 36274                                  
 36275                                  GLA_err:
 36276 000063CD F9                      	stc				; M061
 36277                                  GLA_err2:
 36278 000063CE 58                      	pop	ax
 36279 000063CF C3                      	retn
 36280                                  
 36281                                  ;============================================================================
 36282                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 36283                                  ;============================================================================
 36284                                  ; 04/08/2018 - Retro DOS v3.0
 36285                                  
 36286                                  ;	TITLE SRVCALL - Server DOS call
 36287                                  ;	NAME  SRVCALL
 36288                                  
 36289                                  ;**	SRVCALL.ASM - Server DOS call functions
 36290                                  ;
 36291                                  ;
 36292                                  ;	$ServerCall
 36293                                  ;
 36294                                  ;	Modification history:
 36295                                  ;
 36296                                  ;	    Created: ARR 08 August 1983
 36297                                  
 36298                                  ;AsmVars <Installed>
 36299                                  
 36300                                  ;include dpl.asm
 36301                                  
 36302                                  ;Installed = TRUE
 36303                                  
 36304                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 36305                                  ; ---------------------------------------------------------------------------
 36306                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36307                                  
 36308                                  ;BREAK <ServerCall -- Server DOS call>
 36309                                  
 36310                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 36311                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 36312                                  
 36313                                  ;hkn; TABLE	SEGMENT
 36314                                  ;Public SRVC001S,SRVC001E
 36315                                  ;SRVC001S label byte
 36316                                  
 36317                                  SRVC001S:
 36318                                  
 36319 000063D0 [D463]                  SERVERTAB:	dw	SERVER_DISP
 36320 000063D2 [2664]                  SERVERLEAVE:	dw	SERVERRETURN
 36321 000063D4 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 36322 000063D5 [8C64]                  		dw	SRV_CALL	; 0
 36323 000063D7 [2764]                  		dw	COMMIT_ALL	; 1
 36324 000063D9 [5D64]                  		dw	CLOSE_NAME	; 2
 36325 000063DB [6664]                  		dw	CLOSE_UID	; 3
 36326 000063DD [6D64]                  		dw	CLOSE_UID_PID	; 4
 36327 000063DF [7464]                  		dw	GET_LIST	; 5
 36328 000063E1 [CD64]                  		dw	GET_DOS_DATA	; 6
 36329 000063E3 [F164]                  		dw	SPOOL_OPER	; 7
 36330 000063E5 [F164]                  		dw	SPOOL_OPER	; 8
 36331 000063E7 [F164]                  		dw	SPOOL_OPER	; 9
 36332 000063E9 [FD64]                  		dw	_$SetExtendedError  ; 10
 36333                                  
 36334                                  SERVER_DISP_END:  ;  LABEL BYTE
 36335                                  
 36336                                  ;SRVC001E label byte
 36337                                  
 36338                                  SRVC001E:
 36339                                  
 36340                                  ;hkn; TABLE	ENDS
 36341                                  
 36342                                  ;----------------------------------------------------------------------------
 36343                                  ;
 36344                                  ; Procedure Name : $ServerCall
 36345                                  ;
 36346                                  ; Inputs:
 36347                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 36348                                  ; Function:
 36349                                  ;	AL=0	Server DOS call
 36350                                  ;	AL=1	Commit All files
 36351                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 36352                                  ;	AL=3	Close all files for DPL_UID
 36353                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 36354                                  ;	AL=5	Get open file list entry
 36355                                  ;		    IN: BX File Index
 36356                                  ;			CX User Index
 36357                                  ;		    OUT:ES:DI -> Name
 36358                                  ;			BX = UID
 36359                                  ;		    CX = # locked blocks held by this UID
 36360                                  ;	AL=6	Get DOS data area
 36361                                  ;		    OUT: DS:SI -> Start
 36362                                  ;			CX size in bytes of swap if indos
 36363                                  ;			DX size in bytes of swap always
 36364                                  ;	AL=7	Get truncate flag
 36365                                  ;	AL=8	Set truncate flag
 36366                                  ;	AL=9	Close all spool files
 36367                                  ;	AL=10	SetExtendedError
 36368                                  ;
 36369                                  ;----------------------------------------------------------------------------
 36370                                  
 36371                                  _$ServerCall:
 36372                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36373                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 36374                                  	; 10/06/2019
 36375                                  	; 29/04/2019 - Retro DOS v4.0
 36376                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 36377                                  
 36378                                  	; 05/08/2018 - Retro DOS v3.0
 36379                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 36380 000063EB 3C07                    	CMP	AL,7
 36381 000063ED 7204                    	JB	short SET_STUFF
 36382 000063EF 3C09                    	CMP	AL,9
 36383 000063F1 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 36384                                  SET_STUFF:
 36385 000063F3 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 36386                                  	;mov	bx,[si+12h]
 36387 000063F5 8B5C12                  	MOV	BX,[SI+DPL.UID]
 36388                                  
 36389                                  	; MSDOS 6.0
 36390                                  ;SR;
 36391                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 36392                                  ; of USER_ID
 36393                                  
 36394 000063F8 36F606[3010]01          	test	byte [SS:IsWin386],1
 36395 000063FE 7505                    	jnz	short skip_win386
 36396                                  
 36397                                  ;hkn; SS override for user_id and proc_id
 36398                                  	; 15/08/2018
 36399 00006400 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 36400                                  
 36401                                  skip_win386:
 36402 00006405 8B5C14                  	MOV	BX,[SI+DPL.PID]
 36403 00006408 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 36404                                  NO_SET_ID:
 36405                                  	; 10/06/2019 - Retro DOS v4.0
 36406 0000640D 2EFF36[D263]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 36407 00006412 2EFF36[D063]            	PUSH	word [cS:SERVERTAB]	; push table address
 36408 00006417 50                      	PUSH	AX
 36409 00006418 E8E5AD                  	call	TableDispatch
 36410                                  
 36411                                  ;hkn; SS override
 36412                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 36413 0000641B 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36414                                  	;error	error_invalid_function
 36415                                  	;mov	al,1
 36416 00006421 B001                    	MOV	AL,error_invalid_function
 36417                                  servercall_error:
 36418 00006423 E914A2                  	JMP	SYS_RET_ERR
 36419                                  
 36420                                  SERVERRETURN:
 36421 00006426 C3                      	retn
 36422                                  
 36423                                  ; Commit - iterate through the open file list and make sure that the
 36424                                  ; directory entries are correctly updated.
 36425                                  
 36426                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36427                                  COMMIT_ALL:
 36428 00006427 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 36429 00006429 16                      	push	ss
 36430 0000642A 1F                      	pop	ds
 36431 0000642B E8BFAE                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 36432                                  CommitLoop:
 36433 0000642E 53                      	push	bx
 36434 0000642F E82201                  	call	SFFromSFN
 36435 00006432 7222                    	JC	short CommitDone
 36436 00006434 26833D00                	cmp	word [es:di],0
 36437                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 36438                                  					; if (ThisSFT->refcount != 0)
 36439 00006438 7418                    	JZ	short CommitNext
 36440                                  	;cmp	word [es:di],0FFFFh ; -1
 36441 0000643A 26833DFF                	cmp	word [ES:DI],sf_busy
 36442                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 36443                                  					; BUSY SFTs have god knows what
 36444 0000643E 7412                    	JZ	short CommitNext	;   in them.
 36445                                  	; 17/12/2022
 36446 00006440 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 36447                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 36448 00006445 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 36449                                  					;	doesn't deadlock
 36450 00006447 893E[9E05]              	MOV	[THISSFT],DI
 36451 0000644B 8C06[A005]              	MOV	[THISSFT+2],ES
 36452 0000644F E898CB                  	call	DOS_COMMIT		;	DOSCommit ();
 36453                                  CommitNext:
 36454 00006452 5B                      	pop	bx
 36455 00006453 43                      	INC	BX
 36456 00006454 EBD8                    	JMP	short CommitLoop
 36457                                  CommitDone:
 36458 00006456 E8AFAE                  	call	LCritSFT
 36459 00006459 5B                      	pop	bx
 36460                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36461                                  Commit_Ok:
 36462 0000645A E9D4A1                  	jmp	SYS_RET_OK
 36463                                  	
 36464                                  CLOSE_NAME:
 36465                                  
 36466                                  ;if installed
 36467                                  
 36468                                  ;hkn; SS override
 36469                                  	;call	far [ss:MFTcloN]
 36470 0000645D 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 36471                                  ;else
 36472                                  ;	Call	MFTcloN
 36473                                  ;endif
 36474                                  
 36475                                  CheckReturns:
 36476                                  
 36477                                  ; 10/03/2024
 36478                                  %if 0
 36479                                  	JC	short func_err
 36480                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36481                                  	;transfer SYS_RET_OK
 36482                                  Commit_Okj:
 36483                                  	jmp	short Commit_Ok
 36484                                  	;jmp	SYS_RET_OK
 36485                                  %else
 36486 00006462 73F6                    	jnc	short Commit_Ok
 36487                                  %endif
 36488                                  
 36489                                  func_err:
 36490                                  	;transfer SYS_RET_ERR
 36491                                  	;jmp	SYS_RET_ERR
 36492 00006464 EBBD                    	jmp	short servercall_error
 36493                                  
 36494                                  CLOSE_UID:
 36495                                  
 36496                                  ;if installed
 36497                                  ;hkn; SS override
 36498                                  	;call	far [ss:MFTclU]
 36499 00006466 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 36500                                  ;else
 36501                                  ;	Call	MFTclU
 36502                                  ;endif
 36503 0000646B EBF5                    	JMP	short CheckReturns
 36504                                  
 36505                                  CLOSE_UID_PID:
 36506                                  
 36507                                  ;if installed
 36508                                  ;hkn; SS override
 36509                                  	;call	far [ss:MFTCloseP]
 36510 0000646D 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP
 36511                                  ;else
 36512                                  ;	Call	MFTCloseP
 36513                                  ;endif
 36514 00006472 EBEE                    	JMP	short CheckReturns
 36515                                  
 36516                                  GET_LIST:
 36517                                  
 36518                                  ;if installed
 36519                                  ;hkn; SS override
 36520                                  	;call	far [ss:MFT_get]
 36521 00006474 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 36522                                  ;else
 36523                                  ;	Call	MFT_get
 36524                                  ;endif
 36525 00006479 72E9                    	JC	short func_err
 36526 0000647B E803A0                  	call	Get_User_Stack
 36527                                  	;mov	[si+2],bx
 36528 0000647E 895C02                  	MOV	[SI+user_env.user_BX],BX
 36529                                  	;mov	[si+10],di
 36530 00006481 897C0A                  	MOV	[SI+user_env.user_DI],DI
 36531                                  	;mov	[si+16],es
 36532 00006484 8C4410                  	MOV	[SI+user_env.user_ES],ES
 36533                                  SetCXOK:
 36534                                  	;mov	[si+4],cx
 36535 00006487 894C04                  	MOV	[SI+user_env.user_CX],CX
 36536                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36537                                  	;transfer SYS_RET_OK
 36538                                  Commit_Okj2:
 36539                                  	; 17/12/2022
 36540 0000648A EBCE                    	jmp	short Commit_Ok
 36541                                  	;jmp	short Commit_Okj
 36542                                  	;;jmp	SYS_RET_OK
 36543                                  
 36544                                  SRV_CALL:
 36545 0000648C 58                      	POP	AX			; get rid of call to $srvcall
 36546 0000648D 1E                      	push	ds
 36547 0000648E 56                      	push	si
 36548 0000648F E8EF9F                  	call	Get_User_Stack
 36549 00006492 5F                      	pop	di
 36550 00006493 07                      	pop	es
 36551                                  
 36552                                  ; DS:SI point to stack
 36553                                  ; ES:DI point to DPL
 36554                                  
 36555 00006494 E848AD                  	call	XCHGP
 36556                                  
 36557                                  ; DS:SI point to DPL
 36558                                  ; ES:DI point to stack
 36559                                  ;
 36560                                  ; We now copy the registers from DPL to save stack
 36561                                  
 36562 00006497 56                      	push	si
 36563 00006498 B90600                  	MOV	CX,6
 36564 0000649B F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 36565 0000649D 47                      	INC	DI
 36566 0000649E 47                      	INC	DI			; Skip user_BP
 36567 0000649F A5                      	MOVSW				; DS
 36568 000064A0 A5                      	MOVSW				; ES
 36569 000064A1 5E                      	pop	si			; DS:SI -> DPL
 36570 000064A2 8B04                    	mov	ax,[SI]
 36571                                  	;MOV	AX,[SI+DPL.AX]
 36572                                  	;mov	bx,[si+2]
 36573 000064A4 8B5C02                  	MOV	BX,[SI+DPL.BX]
 36574                                  	;mov	cx,[si+4]
 36575 000064A7 8B4C04                  	MOV	CX,[SI+DPL.CX]
 36576                                  	;mov	dx,[si+6]
 36577 000064AA 8B5406                  	MOV	DX,[SI+DPL.DX]
 36578                                  	;mov	di,[si+10]
 36579 000064AD 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 36580                                  	;mov	es,[si+14]
 36581 000064B0 8E440E                  	MOV	ES,[SI+DPL.ES]
 36582                                  	;push	word [si+8]
 36583 000064B3 FF7408                  	PUSH	word [SI+DPL.SI]
 36584                                  	;mov	ds,[si+12]
 36585 000064B6 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 36586 000064B9 5E                      	POP	SI
 36587                                  
 36588                                  ;hkn; SS override for next 3
 36589 000064BA 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 36590 000064BF 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 36591 000064C4 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 36592 000064CA E9BB9E                  	jmp	REDISP
 36593                                  
 36594                                  GET_DOS_DATA:
 36595 000064CD 16                      	push	ss
 36596 000064CE 07                      	pop	es
 36597 000064CF BF[2003]                	MOV     DI,SWAP_START
 36598 000064D2 B9[AC0A]                	MOV     CX,SWAP_END
 36599 000064D5 BA[3A03]                	MOV     DX,SWAP_ALWAYS
 36600 000064D8 29F9                    	SUB     CX,DI
 36601 000064DA 29FA                    	SUB     DX,DI
 36602 000064DC D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 36603 000064DE 83D100                  	ADC     CX,0                    ; div by 2 + round up
 36604 000064E1 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 36605 000064E3 E89B9F                  	call	Get_User_Stack
 36606                                  	;mov	[si+14],es
 36607 000064E6 8C440E                  	MOV     [SI+user_env.user_DS],ES
 36608                                  	;mov	[si+8],di
 36609 000064E9 897C08                  	MOV     [SI+user_env.user_SI],DI
 36610                                  	;mov	[si+6],dx
 36611 000064EC 895406                  	MOV     [SI+user_env.user_DX],DX
 36612 000064EF EB96                    	JMP	short SetCXOK
 36613                                  
 36614                                  SPOOL_OPER:
 36615                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 36616                                  
 36617 000064F1 50                      	push    ax
 36618 000064F2 B82511                  	mov     ax,1125h
 36619 000064F5 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 36620                                  			; STACK: WORD subfunction
 36621                                  			; Return: CF set on error, AX = error code
 36622                                  			; STACK unchanged
 36623 000064F7 5B                      	pop	bx
 36624                                  	; 17/12/2022
 36625                                  	;JC	short func_err2
 36626 000064F8 7390                    	jnc	short Commit_Okj2
 36627                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36628                                  	;;jmp	SYS_RET_OK
 36629                                  	;jmp	short Commit_Okj2
 36630                                  	
 36631                                  func_err2:
 36632 000064FA E93DA1                  	jmp	SYS_RET_ERR
 36633                                  
 36634                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 36635                                  ;--------------------------------------------------------------------------
 36636                                  ;
 36637                                  ; Procedure Name : $SetExtendedError
 36638                                  ;
 36639                                  ; $SetExtendedError takes extended error information and loads it up for the
 36640                                  ; next extended error call. This is used by interrupt-level proccessors to
 36641                                  ; mask their actions.
 36642                                  ;
 36643                                  ;   Inputs: DS:SI points to DPL which contains all registers
 36644                                  ;   Outputs: none
 36645                                  ;
 36646                                  ;---------------------------------------------------------------------------
 36647                                  
 36648                                  _$SetExtendedError:
 36649                                  
 36650                                  ;hkn; SS override for all variables used
 36651                                  
 36652 000064FD 8B04                    	mov	ax,[si]
 36653                                  	;MOV	AX,[SI+DPL.AX]
 36654 000064FF 36A3[2403]              	MOV	[SS:EXTERR],AX
 36655                                  	;mov	ax,[si+10]
 36656 00006503 8B440A                  	MOV	AX,[SI+DPL.DI]
 36657 00006506 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 36658                                  	;mov	ax,[si+14]
 36659 0000650A 8B440E                  	MOV	AX,[SI+DPL.ES]
 36660 0000650D 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 36661                                  	;mov	ax,[si+2]
 36662 00006511 8B4402                  	MOV	AX,[SI+DPL.BX]
 36663 00006514 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 36664                                  	;mov	ax,[si+4]
 36665 00006518 8B4404                  	MOV	AX,[SI+DPL.CX]
 36666 0000651B 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 36667 00006520 C3                      	retn
 36668                                  
 36669                                  ;============================================================================
 36670                                  ; UTIL.ASM, MSDOS 6.0, 1991
 36671                                  ;============================================================================
 36672                                  ; 05/08/2018 - Retro DOS v3.0
 36673                                  ; 05/05/2019 - Retro DOS v4.0
 36674                                  
 36675                                  ;**	Handle related utilities for MSDOS 2.X.
 36676                                  ;----------------------------------------------------------------------------
 36677                                  ;	pJFNFromHandle	written
 36678                                  ;	SFFromHandle	written
 36679                                  ;	SFFromSFN	written
 36680                                  ;	JFNFree 	written
 36681                                  ;	SFNFree 	written
 36682                                  ;
 36683                                  ;	Modification history:
 36684                                  ;
 36685                                  ;	    Created: MZ 1 April 1983
 36686                                  ;----------------------------------------------------------------------------
 36687                                  
 36688                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 36689                                  
 36690                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 36691                                  ;----------------------------------------------------------------------------
 36692                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 36693                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 36694                                  ;
 36695                                  ;	NOTE:
 36696                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36697                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 36698                                  ;
 36699                                  ;	ENTRY	(bx) = handle
 36700                                  ;	EXIT	'C' clear if ok
 36701                                  ;		  (es:di) = address of JFN value
 36702                                  ;		'C' set if error
 36703                                  ;		  (ax) = error code
 36704                                  ;	USES	AX, DI, ES, Flags
 36705                                  ;----------------------------------------------------------------------------
 36706                                  
 36707                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36708                                  
 36709                                  pJFNFromHandle:
 36710                                  	; 05/05/2019 - Retro DOS v4.0
 36711                                  	;getdseg <es>			; es -> dosdata
 36712 00006521 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36713                                  	
 36714                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 36715 00006526 268E06[3003]            	mov	es,[es:CurrentPDB]
 36716                                  
 36717                                  	;cmp	bx,[ES:32h]
 36718 0000652B 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 36719 00006530 7204                    	JB	short pjfn10		; no, get offset
 36720                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 36721                                  	;mov	al,6
 36722 00006532 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 36723                                  ReturnCarry:
 36724 00006534 F9                      	STC                             ; signal error
 36725 00006535 C3                      	retn				; go back
 36726                                  pjfn10: 
 36727                                  	;les	di,[es:34h]
 36728 00006536 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 36729 0000653B 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 36730                                  	;clc
 36731                                  pJFNFromHandle_error:
 36732 0000653D C3                      	retn
 36733                                  
 36734                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 36735                                  ;----------------------------------------------------------------------------
 36736                                  ;
 36737                                  ; Procedure Name : SFFromHandle
 36738                                  ;
 36739                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 36740                                  ;
 36741                                  ;   Input:      BX has handle
 36742                                  ;   Output:     Carry Set
 36743                                  ;                   AX has error code
 36744                                  ;               Carry Reset
 36745                                  ;                   ES:DI has pointer to SF entry
 36746                                  ;   Registers modified: If error, AX,ES, else ES:DI
 36747                                  ; NOTE:
 36748                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36749                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36750                                  ;
 36751                                  ;----------------------------------------------------------------------------
 36752                                  
 36753                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36754                                  
 36755                                  SFFromHandle:
 36756 0000653E E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 36757                                  	;retc				; return if error
 36758 00006541 72FA                    	jc	short pJFNFromHandle_error
 36759 00006543 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 36760                                  	;JNZ	short GetSF		; nope, suck out SF
 36761                                  	;;mov	al,6
 36762                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36763                                  	;jmp	short ReturnCarry	; signal it
 36764                                  	; 17/12/2022
 36765                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36766 00006547 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 36767                                  	;JNZ	short GetSF		; nope, suck out SF
 36768                                  	;;mov	al,6
 36769                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36770                                  	;jmp	short ReturnCarry	; signal it
 36771                                  GetSF:
 36772 00006549 53                      	push	bx			; save handle
 36773 0000654A 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 36774 0000654D 30FF                    	XOR     BH,BH                   ; ignore upper half
 36775 0000654F E80200                  	CALL    SFFromSFN               ; get real sf spot
 36776 00006552 5B                      	pop	bx			; restore
 36777 00006553 C3                      	retn                        	; say goodbye
 36778                                  
 36779                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 36780                                  
 36781                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 36782                                  ;----------------------------------------------------------------------------
 36783                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 36784                                  ;	is more than just a simple index instruction because the SF table
 36785                                  ;	can be made up of multiple pieces chained together. We follow the
 36786                                  ;	chain to the right piece and then do the index operation.
 36787                                  ;
 36788                                  ;   NOTE:
 36789                                  ;	This routine is called from SFFromHandle which is called
 36790                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36791                                  ;
 36792                                  ;	ENTRY	BX has SF index
 36793                                  ;	EXIT	'C' clear if OK
 36794                                  ;		  ES:DI points to SF entry
 36795                                  ;		'C' set if index too large
 36796                                  ;	USES	BX, DI, ES
 36797                                  ;----------------------------------------------------------------------------
 36798                                  
 36799                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36800                                  
 36801                                  SFFromSFN:
 36802                                  	; 05/05/2019 - Retro DOS v4.0
 36803                                  	;getdseg <es>			; es -> dosdata
 36804 00006554 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36805                                  
 36806                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 36807 00006559 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 36808                                  sfsfn5:	
 36809                                  	;cmp	bx,[es:di+4]
 36810 0000655E 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 36811 00006562 720E                    	JB	short sfsfn7		; yes, go grab it
 36812                                  	;sub	bx,[es:di+4]
 36813 00006564 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 36814 00006568 26C43D                  	les	di,[es:di] ; 14/08/2018
 36815                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 36816 0000656B 83FFFF                  	CMP     DI,-1                   ; end of tables?
 36817 0000656E 75EE                    	JNZ	short sfsfn5		; no, try again
 36818 00006570 F9                      	STC
 36819 00006571 C3                      	retn				; return with error, not found
 36820                                  sfsfn7:
 36821 00006572 50                      	push	ax
 36822                                  	;mov	ax,53 ; MSDOS 3.3
 36823                                  	;mov	ax,59 ; MSDOS 6.0
 36824                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 36825                                  	
 36826                                  	; 17/12/2022
 36827 00006573 B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 36828                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36829                                  	;mov	ax,SF_ENTRY.size ; 59
 36830                                  	
 36831 00006575 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 36832 00006577 01C7                    	ADD	DI,AX			; add base of SF block
 36833 00006579 58                      	pop	ax
 36834                                  	;add	di,6
 36835 0000657A 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 36836 0000657D C3                      	retn				; return with 'C' clear
 36837                                  
 36838                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 36839                                  
 36840                                  ;**	JFNFree - Find a Free JFN Slot
 36841                                  ;----------------------------------------------------------------------------
 36842                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 36843                                  ;
 36844                                  ;	ENTRY	(ss) = DOSDATA
 36845                                  ;	EXIT	'C' clear if OK
 36846                                  ;		  (bx) = new handle
 36847                                  ;		  (es:di) = pointer to JFN slot
 36848                                  ;		'C' set if error
 36849                                  ;		  (al) = error code
 36850                                  ;	USES	bx, di, es, flags
 36851                                  ;----------------------------------------------------------------------------
 36852                                  
 36853                                  JFNFree:
 36854 0000657E 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 36855                                  jfnf1:	
 36856 00006580 E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 36857 00006583 7209                    	JC	short jfnf5		; no more handles
 36858 00006585 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 36859 00006589 7405                    	je	short jfnfx		; yes, carry is clear
 36860 0000658B 43                      	INC     BX                      ; no, next handle
 36861 0000658C EBF2                    	JMP	short jfnf1		; and try again
 36862                                  
 36863                                  	; Error. 'C' set
 36864                                  jfnf5:	
 36865                                  	;mov	al,4
 36866 0000658E B004                    	MOV	AL,error_too_many_open_files
 36867                                  jfnfx:	
 36868 00006590 C3                      	retn				; bye
 36869                                  
 36870                                  ;	BREAK <SFNFree - Allocate a free SFN>
 36871                                  
 36872                                  ;**	SFNFree - Allocate a Free SFN/SFT
 36873                                  ;----------------------------------------------------------------------------
 36874                                  ;	SFNFree scans through the sf table looking for a free entry
 36875                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 36876                                  ;
 36877                                  ;	The problem is that we want to mark the SFT busy so that other threads
 36878                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 36879                                  ;	we can't just mark it busy because we may get blown out of our open
 36880                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 36881                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 36882                                  ;	an SFT with this value we look to see if it belongs to this user
 36883                                  ;	and process.  If it does belong to us then it must be an orphan
 36884                                  ;	and we reclaim it.
 36885                                  ;
 36886                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 36887                                  ;		over and over, but we could at least set a high water mark...
 36888                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 36889                                  ;		even though this is not a frequently called routine - jgl
 36890                                  ;
 36891                                  ;	ENTRY	(ss) = DOSDATA
 36892                                  ;	EXIT	'C' clear if no error
 36893                                  ;		  (bx) = SFN
 36894                                  ;		  (es:di) = pointer to SFT
 36895                                  ;		  es:[di].SFT_REF_COUNT = -1
 36896                                  ;		'C' set if error
 36897                                  ;		  (al) = error code
 36898                                  ;	USES	bx, di, es, Flags
 36899                                  ;----------------------------------------------------------------------------
 36900                                  
 36901                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36902                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 36903                                  
 36904                                  SFNFree:
 36905                                  	; 12/08/2018
 36906                                  	; 05/08/2018 - Retro DOS v3.0
 36907                                  	;
 36908                                  	; MSDOS 6.0
 36909 00006591 50                      	push	ax
 36910 00006592 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 36911                                  sfnf5:	
 36912 00006594 53                      	push	bx
 36913 00006595 E8BCFF                  	call	SFFromSFN		; get the potential handle
 36914 00006598 5B                      	pop	bx
 36915 00006599 723A                    	jc	short sfnf95		; no more free SFNs
 36916 0000659B 26833D00                	cmp	word [ES:DI],0
 36917                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 36918 0000659F 741D                    	je	short sfnf20			; yep, got one
 36919                                  	
 36920                                  	;cmp	word [es:di],0FFFFh ; -1
 36921 000065A1 26833DFF                	cmp	word [ES:DI],sf_busy
 36922                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36923 000065A5 7403                    	je	short sfnf10		; special busy mark
 36924                                  sfnf7:	
 36925 000065A7 43                      	inc	bx			; try the next one
 36926 000065A8 EBEA                    	jmp	short sfnf5
 36927                                  
 36928                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 36929                                  ;	it was abandoned during a earlier call and we can use it.
 36930                                  ;
 36931                                  ;	(bx)	= SFN
 36932                                  ;	(es:di) = pointer to SFT
 36933                                  ;	(TOS)	= caller's (ax)
 36934                                  
 36935                                  sfnf10:	
 36936 000065AA 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36937                                  	;cmp	[es:di+2Fh],ax
 36938 000065AE 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 36939 000065B2 75F3                    	jnz	short sfnf7		; not ours
 36940 000065B4 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36941                                  	;cmp	[es:di+31h],ax
 36942 000065B8 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 36943 000065BC 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 36944                                  
 36945                                  ;	We have an SFT to allocate
 36946                                  ;
 36947                                  ;	(bx)	= SFN
 36948                                  ;	(es:di) = pointer to SFT
 36949                                  ;	(TOS)	= caller's (ax)
 36950                                  
 36951                                  sfnf20:
 36952                                  	; cf = 0 ;; Retro DOS v3.0
 36953                                  
 36954                                  	;mov	word [es:di],0FFFFh
 36955 000065BE 26C705FFFF              	mov	word [ES:DI],sf_busy
 36956                                  					; make sure that this is allocated
 36957                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 36958                                  
 36959 000065C3 36A1[3E03]              	mov	ax,[SS:USER_ID]
 36960                                  	;mov	[es:di+2Fh],ax
 36961 000065C7 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 36962 000065CB 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 36963                                  	;mov	[es:di+31h],ax
 36964 000065CF 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 36965                                  sfnf21: ;; Retro DOS v3.0
 36966                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36967                                  	;pop	ax
 36968                                  	;;clc
 36969                                  	;retn				; return with no error
 36970                                  	; 17/12/2022
 36971 000065D3 58                      	pop	ax
 36972                                  	;clc
 36973 000065D4 C3                      	retn
 36974                                  
 36975                                  ;**	Error - no more free SFNs
 36976                                  ;
 36977                                  ;	'C' set
 36978                                  ;	(TOS) = saved ax
 36979                                  
 36980                                  sfnf95: 
 36981 000065D5 58                      	pop	ax
 36982                                  
 36983                                  ; 11/03/2024
 36984                                  %if 0
 36985                                  	;mov	al,4
 36986                                  	mov	al,error_too_many_open_files
 36987                                  	retn				; return with 'C' and error
 36988                                  %else
 36989                                  	; 11/03/2024
 36990 000065D6 EBB6                    	jmp	short jfnf5
 36991                                  %endif
 36992                                  
 36993                                  ;============================================================================
 36994                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 36995                                  ;============================================================================
 36996                                  ; 13/07/2018 - Retro DOS v3.0
 36997                                  ; 20/05/2019 - Retro DOS v4.0
 36998                                  
 36999                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 37000                                  
 37001                                  ;	BREAK <$Close - return a handle to the system>
 37002                                  ;----------------------------------------------------------------------------
 37003                                  ;
 37004                                  ;**	$Close - Close a file Handle
 37005                                  ;
 37006                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 37007                                  ;		path
 37008                                  ;
 37009                                  ;	Assembler usage:
 37010                                  ;	    MOV     BX, handle
 37011                                  ;	    MOV     AH, Close
 37012                                  ;	    INT     int_command
 37013                                  ;
 37014                                  ;	ENTRY	(bx) = handle
 37015                                  ;	EXIT	<normal INT21 return convention>
 37016                                  ;	USES	all
 37017                                  ;
 37018                                  ;----------------------------------------------------------------------------
 37019                                  
 37020                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37021                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 37022                                  
 37023                                  _$CLOSE:
 37024                                  ;	Grab the SFT pointer from the JFN.
 37025                                  
 37026 000065D8 E84902                  	call	CheckOwner		; get system file entry
 37027 000065DB 722B                    	jc	short CloseError	; error return
 37028 000065DD 16                      	push	ss
 37029 000065DE 1F                      	pop	ds			; For DOS_CLOSE
 37030 000065DF 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 37031 000065E3 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 37032                                  
 37033                                  ; DS:SI point to JFN table entry.
 37034                                  ; ES:DI point to SFT
 37035                                  ;
 37036                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 37037                                  ; FCB, we examine the ref count on the SFT; if it was 1, we free the JFN.
 37038                                  ; If the file was not a net FCB, we free the JFN too.
 37039                                  
 37040                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 37041 000065E7 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 37042 000065EB 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 37043                                  	;mov	al,[ES:DI+2]
 37044 000065ED 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 37045                                  	;and	al,0F0h
 37046 000065F1 24F0                    	AND	AL,SHARING_MASK
 37047                                  	;cmp	al,70h
 37048 000065F3 3C70                    	CMP	AL,SHARING_NET_FCB
 37049 000065F5 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 37050                                  
 37051                                  ; The JFN must be freed. Get the pointer to it and replace the contents with
 37052                                  ; -1.
 37053                                  
 37054                                  FreeJFN:
 37055 000065F7 E827FF                  	call	pJFNFromHandle		; d = pJFN (handle);
 37056 000065FA 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 37057                                  PostFree:
 37058                                  
 37059                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 37060                                  
 37061 000065FE E8A7C8                  	call	DOS_CLOSE
 37062                                  
 37063                                  ; DOS_Close may return an error. If we see such an error, we report it but
 37064                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 37065                                  
 37066 00006601 7205                    	JC	short CloseError
 37067                                  	;mov	ah,3Eh
 37068 00006603 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 37069                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37070                                  CloseOk:
 37071 00006605 E929A0                  	jmp	SYS_RET_OK
 37072                                  CloseError:
 37073                                  CommitError:	; 11/03/2024
 37074 00006608 E92FA0                  	jmp	SYS_RET_ERR
 37075                                  
 37076                                  ;	BREAK <$Commit - commit the file>
 37077                                  ;----------------------------------------------------------------------------
 37078                                  ;
 37079                                  ;**	$Commit - Commit a File
 37080                                  ;
 37081                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 37082                                  ;	flushed out. BUGBUG - I'm pretty sure that $Commit doesn't update
 37083                                  ;	the directory entry, etc., so this commit is pretty useless. check
 37084                                  ;	and fix this!! jgl
 37085                                  ;
 37086                                  ;	Assembler usage:
 37087                                  ;	    MOV     BX, handle
 37088                                  ;	    MOV     AH, Commit
 37089                                  ;	    INT     int_command
 37090                                  ;
 37091                                  ;	ENTRY	(bx) = handle
 37092                                  ;	EXIT	none
 37093                                  ;	USES	all
 37094                                  ;;----------------------------------------------------------------------------
 37095                                  
 37096                                  _$COMMIT:
 37097                                  ;	Grab the SFT pointer from the JFN.
 37098                                  
 37099 0000660B E81602                  	call	CheckOwner		; get system file entry
 37100                                  	;JC	short CommitError	; error return
 37101                                  	; 11/03/2024
 37102 0000660E 72F8                    	jc	short CommitError
 37103                                  
 37104 00006610 16                      	push	ss
 37105 00006611 1F                      	pop	ds			; For DOS_COMMIT
 37106 00006612 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 37107 00006616 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 37108                                  
 37109                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 37110                                  ;
 37111                                  ;	ES:DI point to SFT
 37112                                  
 37113 0000661A E8CDC9                  	call	DOS_COMMIT
 37114 0000661D 72E9                    	JC	short CommitError
 37115                                  	; 07/12/2022
 37116                                  	;jc	short CloseError
 37117                                  	;mov	ah,68h
 37118 0000661F B468                    	MOV	AH,COMMIT
 37119                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37120                                  	;jmp	SYS_RET_OK
 37121                                  CommitOk:
 37122 00006621 EBE2                    	jmp	short CloseOk
 37123                                  
 37124                                  ; 11/03/2024
 37125                                  ;CommitError:
 37126                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37127                                  ;	;jmp	SYS_RET_ERR
 37128                                  ;	jmp	short CloseError
 37129                                  
 37130                                  ;	BREAK <$ExtHandle - extend handle count>
 37131                                  
 37132                                  ;**	$ExtHandle - Extend Handle Count
 37133                                  ;----------------------------------------------------------------------------
 37134                                  ;	Assembler usage:
 37135                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 37136                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 37137                                  ;	    INT     int_command 		 busy )
 37138                                  ;
 37139                                  ;	ENTRY	(bx) = new number of handles
 37140                                  ;	EXIT	'C' clear if OK
 37141                                  ;		'C' set iff err
 37142                                  ;		  (ax) = error code
 37143                                  ;			 AX = error_not_enough_memory
 37144                                  ;			      error_too_many_open_files
 37145                                  ;	USES	all
 37146                                  ;----------------------------------------------------------------------------
 37147                                  
 37148                                  _$ExtHandle:
 37149 00006623 31ED                    	XOR	BP,BP			; 0: enlarge  1: shrink  2:psp
 37150                                  	;cmp	bx,20
 37151 00006625 83FB14                  	CMP	BX,FILPERPROC
 37152 00006628 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 37153 0000662A BB1400                  	MOV	BX,FILPERPROC
 37154                                  exth2:	
 37155 0000662D 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 37156                                  	;mov	cx,[ES:32h]
 37157 00006632 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 37158 00006637 39CB                    	CMP	BX,CX			; the requested == current
 37159                                  	;JE	short ok_done 		; yes and exit
 37160                                  	; 11/03/2024
 37161 00006639 74CA                    	je	short CloseOk
 37162 0000663B 771E                    	JA	short larger		; go allocate new table
 37163                                  
 37164                                  ;	We're going to shrink the # of handles available
 37165                                  
 37166                                  	;MOV	BP,1			; shrink
 37167                                  	; 11/03/2024
 37168 0000663D 45                      	inc	bp
 37169                                  	;mov	ds,[ES:36h]
 37170 0000663E 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 37171 00006643 89DE                    	MOV	SI,BX			;
 37172 00006645 29D9                    	SUB	CX,BX			; get difference
 37173                                  
 37174                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 37175                                  chck_handles:
 37176 00006647 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 37177 0000664A 753B                    	JNZ	short too_many_files	; status
 37178 0000664C 46                      	INC	SI
 37179 0000664D E2F8                    	LOOP	chck_handles
 37180 0000664F 83FB14                  	CMP	BX,FILPERPROC		; = 20
 37181 00006652 7707                    	JA	short larger		; no
 37182                                  
 37183                                  	;MOV	BP,2			; psp
 37184                                  	; 11/03/2024
 37185 00006654 45                      	inc	bp
 37186                                  	;mov	di,24
 37187 00006655 BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 37188 00006658 53                      	PUSH	BX
 37189 00006659 EB1D                    	JMP	short movhandl
 37190                                  
 37191                                  larger:
 37192 0000665B 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 37193 0000665E 747D                    	JZ	short invalid_func	; 10/08/2018
 37194 00006660 F8                      	CLC
 37195 00006661 53                      	PUSH	BX			; save requested number
 37196 00006662 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 37197 00006665 B104                    	MOV	CL,4
 37198                                  	;ror	bx,cl			; MSDOS 3.3
 37199 00006667 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 37200 00006669 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 37201                                  
 37202 0000666D 55                      	PUSH	BP
 37203 0000666E E8E7FA                  	call	_$ALLOC			; allocate memory
 37204 00006671 5D                      	POP	BP
 37205 00006672 7264                    	JC	short no_memory		; not enough memory
 37206                                  
 37207 00006674 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 37208 00006676 31FF                    	XOR	DI,DI
 37209                                  movhandl:
 37210 00006678 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 37211                                  
 37212 0000667D F7C50300                	test	BP,3			; enlarge ?
 37213 00006681 7409                    	JZ	short enlarge 		; yes
 37214 00006683 59                      	POP	CX			; cx = the amount you shrink
 37215 00006684 51                      	PUSH	CX
 37216 00006685 EB09                    	JMP	short copy_hand
 37217                                  
 37218                                  ;	Done.  'C' clear
 37219                                  
 37220                                  ; 17/12/2022
 37221                                  ;ok_done:
 37222                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37223                                  ;	;jmp	short CommitOk
 37224                                  ;	; 17/12/2022
 37225                                  ;	jmp	SYS_RET_OK
 37226                                  
 37227                                  too_many_files:
 37228                                  	;mov	al,4
 37229 00006687 B004                    	MOV	AL,error_too_many_open_files
 37230                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37231                                  	;jmp	SYS_RET_ERR
 37232                                  CommitErrorj:
 37233                                  	;jmp	short CommitError
 37234                                  	; 17/12/2022
 37235 00006689 E9AE9F                  	jmp	SYS_RET_ERR
 37236                                  
 37237                                  ; 11/03/2024
 37238                                  ; 17/12/2022
 37239                                  ;ok_done:
 37240                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37241                                  ;	;jmp	short CommitOk
 37242                                  ;	; 17/12/2022
 37243                                  ;	jmp	SYS_RET_OK
 37244                                  
 37245                                  enlarge:
 37246                                  	;mov	cx,[32h]
 37247 0000668C 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 37248                                  copy_hand:
 37249 00006690 89CA                    	MOV	DX,CX
 37250                                  	;lds	si,[34h]
 37251 00006692 C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 37252 00006696 F3A4                    	REP	MOVSB			; copy information to new table
 37253 00006698 59                      	POP	CX			; get new number of handles
 37254 00006699 51                      	PUSH	CX			; save it again
 37255 0000669A 29D1                    	SUB	CX,DX			; get the difference
 37256 0000669C B0FF                    	MOV	AL,-1			; set availability to handles
 37257 0000669E F3AA                    	REP	STOSB
 37258 000066A0 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 37259                                  	;cmp	word [34h],0
 37260 000066A5 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 37261 000066AA 750D                    	JNZ	short update_info	; yes, go update PDB entries
 37262 000066AC 55                      	PUSH	BP
 37263 000066AD 1E                      	PUSH	DS			; save old table segment
 37264 000066AE 06                      	PUSH	ES			; save new table segment
 37265 000066AF 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 37266 000066B3 E81CFC                  	call	_$DEALLOC		; deallocate old table memory
 37267 000066B6 07                      	POP	ES			; restore new table segment
 37268 000066B7 1F                      	POP	DS			; restore old table segment
 37269 000066B8 5D                      	POP	BP
 37270                                  
 37271                                  update_info:
 37272 000066B9 F7C50200                	test	BP,2			; psp?
 37273 000066BD 7408                    	JZ	short non_psp 		; no
 37274                                  	;mov	word [34h],18h ; 24
 37275 000066BF C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 37276 000066C5 EB06                    	JMP	short final
 37277                                  non_psp:
 37278                                  	;mov	word [34h],0
 37279 000066C7 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 37280                                  final:
 37281                                  	;mov	[36h],es	
 37282 000066CD 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 37283                                  	;pop	word [32h]
 37284 000066D1 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 37285                                  	; 11/03/2024
 37286                                  ok_done:
 37287                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37288 000066D5 E9599F                  	jmp	SYS_RET_OK
 37289                                  ;ok_done_j:
 37290                                  ;	jmp	short ok_done
 37291                                  
 37292                                  no_memory:
 37293 000066D8 5B                      	POP	BX			; clean stack
 37294                                  	;mov	al,8
 37295 000066D9 B008                    	MOV	AL,error_not_enough_memory
 37296                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37297                                  	;jmp	SYS_RET_ERR
 37298                                  CommitErrorj2:
 37299 000066DB EBAC                    	jmp	short CommitErrorj
 37300                                  
 37301                                  invalid_func:
 37302                                  	;mov	al,1
 37303 000066DD B001                    	MOV	AL,error_invalid_function
 37304                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37305                                  	;jmp	SYS_RET_ERR
 37306                                  CommitErrorj3:
 37307                                  	;jmp	short CommitErrorj2
 37308                                  	; 17/12/2022
 37309 000066DF EBA8                    	jmp	short CommitErrorj
 37310                                  
 37311                                  ; 20/05/2019 - Retro DOS v4.0
 37312                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 37313                                  
 37314                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37315                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 37316                                  
 37317                                  ;	BREAK <$READ - Read from a file handle>
 37318                                  ;----------------------------------------------------------------------------
 37319                                  ;
 37320                                  ;**	$Read - Read from a File Handle
 37321                                  ;
 37322                                  ;   Assembler usage:
 37323                                  ;
 37324                                  ;	LDS	DX, buf
 37325                                  ;	MOV	CX, count
 37326                                  ;	MOV	BX, handle
 37327                                  ;	MOV	AH, Read
 37328                                  ;	INT	int_command
 37329                                  ;	  AX has number of bytes read
 37330                                  ;
 37331                                  ;	ENTRY	(bx) = file handle
 37332                                  ;		(cx) = byte count
 37333                                  ;		(ds:dx) = buffer address
 37334                                  ;	EXIT	Through system call return so that to user:
 37335                                  ;		  'C' clear if OK
 37336                                  ;		    (ax) = bytes read
 37337                                  ;		  'C' set if error
 37338                                  ;		    (ax) = error code
 37339                                  ;
 37340                                  ;----------------------------------------------------------------------------
 37341                                  
 37342                                  	; 12/03/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 37343                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:0A83Ah
 37344                                  
 37345                                  	; (PCDOS 7.1 IBMDOS.COM - DOSCODE:0BA2Eh)
 37346                                  	; (Windows ME IO.SYS - BIOSCODE:0A256h)
 37347                                  
 37348                                  _$READ:
 37349 000066E1 BE[3C32]                	MOV	SI,DOS_READ
 37350                                  ReadDo:
 37351 000066E4 E83AFE                  	call	pJFNFromHandle
 37352 000066E7 7208                    	JC	short ReadError
 37353                                  
 37354 000066E9 268A05                  	MOV	AL,[ES:DI]
 37355 000066EC E83501                  	call	CheckOwner		; get the handle
 37356 000066EF 7303                    	JNC	short ReadSetup		; no errors do the operation
 37357                                  
 37358                                  ;	Have an error. 'C' set
 37359                                  
 37360                                  ReadError:
 37361                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37362                                  	;;jmp	SYS_RET_ERR		; go to error traps
 37363                                  	;jmp	short CommitErrorj3
 37364                                  	; 17/12/2022
 37365 000066F1 E9469F                  	jmp	SYS_RET_ERR
 37366                                  
 37367                                  ReadSetup:
 37368 000066F4 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 37369 000066F9 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 37370                                  	; 20/05/2019 - Retro DOS v4.0
 37371                                  	; MSDOS 6.0 
 37372                                  ;; Extended Open
 37373                                  	;test	byte [es:di+3],20h
 37374 000066FE 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 37375                                  						 ;AN000;;EO. need i24
 37376 00006703 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 37377 00006705 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 37378                                  					;AN000;;EO. set it off;smr;SS Override
 37379                                  needi24:				;AN000;
 37380                                  
 37381                                  ; 12/03/2024
 37382                                  %if 0
 37383                                  
 37384                                  ;; Extended Open
 37385                                  	push	word [SS:DMAADD]
 37386                                  	push	word [SS:DMAADD+2]	;smr;SS Override
 37387                                  
 37388                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 37389                                  
 37390                                  	; 26/07/2019
 37391                                  
 37392                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37393                                  	;
 37394                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 37395                                  	; there is not another caller; it is better to put the code in this proc
 37396                                   	; here instead of calling it as a subroutine; but I have modified code
 37397                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 37398                                  
 37399                                  	; MSDOS 6.0
 37400                                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 37401                                  	
 37402                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37403                                  	; MSDOS 3.3
 37404                                  	;MOV	BX,DX			; copy offset
 37405                                  	;push	cx			; don't stomp on count
 37406                                  	;MOV	CL,4			; bits to shift bytes->para
 37407                                  	;SHR	BX,CL			; get number of paragraphs
 37408                                  	;pop	cx			; get count back
 37409                                  	;MOV	AX,DS			; get original segment
 37410                                  	;ADD	AX,BX			; get new segment
 37411                                  	;MOV	DS,AX			; in seg register
 37412                                  	;AND	DX,0Fh			; normalize offset
 37413                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37414                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37415                                  						;smr;SS Override
 37416                                  %else
 37417                                  	; 12/03/2024 (PCDOS 7.1 IBMDOS.COM)
 37418                                  	;;;
 37419 0000670B 8CD8                    	mov	ax,ds			; original segment
 37420 0000670D 36C51E[2C03]            	lds	bx,[ss:DMAADD]
 37421 00006712 53                      	push	bx
 37422 00006713 1E                      	push	ds
 37423 00006714 89D3                    	mov	bx,dx
 37424 00006716 D1EB                    	shr	bx,1
 37425 00006718 D1EB                    	shr 	bx,1
 37426 0000671A D1EB                    	shr	bx,1
 37427 0000671C D1EB                    	shr	bx,1
 37428 0000671E 01D8                    	add	ax,bx			; new segment
 37429 00006720 83E20F                  	and	dx,0Fh			; normalize offset
 37430                                  	;mov	[ss:DMAADD],dx		; use user DX as offset
 37431                                  	; 23/03/2024
 37432 00006723 36A3[2E03]              	mov	[ss:DMAADD+2],ax 	; use user DS as segment for DMA
 37433                                  	;;;
 37434                                  
 37435                                  %endif
 37436                                  
 37437                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 37438                                  	
 37439 00006727 16                      	push	ss			; go for DOS addressability
 37440 00006728 1F                      	pop	ds
 37441                                  
 37442                                  	; 12/03/2024 - Retro DOS v4.2
 37443                                  	;;;
 37444 00006729 8916[2C03]              	mov	[DMAADD],dx	
 37445                                  	;;;
 37446                                  
 37447 0000672D FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 37448                                  
 37449 0000672F 8F06[2E03]              	pop	word [DMAADD+2]
 37450 00006733 8F06[2C03]              	pop	word [DMAADD]
 37451                                  	;JNC	short READ_OK		;AN002;
 37452                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 37453                                  	; 17/12/2022
 37454 00006737 72B8                    	jc	short ReadError
 37455                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37456                                  	;jnc	short READ_OK		;AN002;
 37457                                  	;jmp	short ReadError
 37458                                  
 37459                                  READ_OK:
 37460 00006739 89C8                    	MOV	AX,CX			; get correct return in correct reg
 37461                                  Read_Okj:
 37462                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37463                                  	;;jmp	SYS_RET_OK		; successful return
 37464                                  	;jmp	short ok_done_j
 37465                                  	; 17/12/2022
 37466 0000673B E9F39E                  	jmp	SYS_RET_OK
 37467                                  
 37468                                  ; 13/07/2018 - Retro DOS v3.0
 37469                                  
 37470                                  ;----------------------------------------------------------------------------
 37471                                  
 37472                                  ; 12/03/2024
 37473                                  %if 0
 37474                                  
 37475                                  ;   Input: DS:DX points to user's buffer addr
 37476                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 37477                                  ;   Output: [DMAADD] set
 37478                                  
 37479                                  ; 20/05/2019 - Retro DOS v4.0
 37480                                  ; 26/07/2019
 37481                                  ;	; MSDOS 6.0
 37482                                  ;Align_Buffer:
 37483                                  ;	MOV	BX,DX			; copy offset
 37484                                  ;	push	cx			; don't stomp on count
 37485                                  ;	MOV	CL,4			; bits to shift bytes->para
 37486                                  ;	SHR	BX,CL			; get number of paragraphs
 37487                                  ;	pop	cx			; get count back
 37488                                  ;	MOV	AX,DS			; get original segment
 37489                                  ;	ADD	AX,BX			; get new segment
 37490                                  ;	MOV	DS,AX			; in seg register
 37491                                  ;	AND	DX,0Fh			; normalize offset
 37492                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37493                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37494                                  ;						;smr;SS Override
 37495                                  ;	retn
 37496                                  
 37497                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37498                                  Align_Buffer:
 37499                                  	MOV	BX,DX			; copy offset
 37500                                  	push	cx			; don't stomp on count
 37501                                  	MOV	CL,4			; bits to shift bytes->para
 37502                                  	SHR	BX,CL			; get number of paragraphs
 37503                                  	pop	cx			; get count back
 37504                                  	MOV	AX,DS			; get original segment
 37505                                  	ADD	AX,BX			; get new segment
 37506                                  	MOV	DS,AX			; in seg register
 37507                                  	AND	DX,0Fh			; normalize offset
 37508                                  	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37509                                  	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37510                                  						;smr;SS Override
 37511                                  	retn
 37512                                  
 37513                                  %endif
 37514                                  
 37515                                  ; 20/05/2019 - Retro DOS v4.0
 37516                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 37517                                  
 37518                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37519                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 37520                                  
 37521                                  ; 12/03/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 37522                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:0A8A0h
 37523                                  
 37524                                  ; (PCDOS 7.1 IBMDOS.COM - DOSCODE:0BA8Ch)
 37525                                  ; (Windows ME IO.SYS - BIOSCODE:0A2B9h)
 37526                                  
 37527                                  ;BREAK <$WRITE - write to a file handle>
 37528                                  ;----------------------------------------------------------------------------
 37529                                  ;
 37530                                  ;   Assembler usage:
 37531                                  ;	    LDS     DX, buf
 37532                                  ;	    MOV     CX, count
 37533                                  ;	    MOV     BX, handle
 37534                                  ;	    MOV     AH, Write
 37535                                  ;	    INT     int_command
 37536                                  ;	  AX has number of bytes written
 37537                                  ;   Errors:
 37538                                  ;	    AX = write_invalid_handle
 37539                                  ;	       = write_access_denied
 37540                                  ;
 37541                                  ;   Returns in register AX
 37542                                  ;
 37543                                  ;----------------------------------------------------------------------------
 37544                                  
 37545                                  _$WRITE:
 37546 0000673E BE[3C34]                	MOV	SI,DOS_WRITE
 37547 00006741 EBA1                    	JMP	short ReadDo
 37548                                  
 37549                                  ;BREAK <$LSEEK - move r/w pointer>
 37550                                  ;----------------------------------------------------------------------------
 37551                                  ;
 37552                                  ;   Assembler usage:
 37553                                  ;	    MOV     DX, offsetlow
 37554                                  ;	    MOV     CX, offsethigh
 37555                                  ;	    MOV     BX, handle
 37556                                  ;	    MOV     AL, method
 37557                                  ;	    MOV     AH, LSeek
 37558                                  ;	    INT     int_command
 37559                                  ;	  DX:AX has the new location of the pointer
 37560                                  ;   Error returns:
 37561                                  ;	    AX = error_invalid_handle
 37562                                  ;	       = error_invalid_function
 37563                                  ;   Returns in registers DX:AX
 37564                                  ;
 37565                                  ;----------------------------------------------------------------------------
 37566                                  
 37567                                  ; 21/05/2019 - Retro DOS v4.0
 37568                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 37569                                  
 37570                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37571                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 37572                                  
 37573                                  _$LSEEK:
 37574 00006743 E8DE00                  	call	CheckOwner		; get system file entry
 37575                                  
 37576                                  	; 17/12/2022
 37577                                  ;LSeekError:
 37578                                  	;JNC	short CHKOWN_OK		;AN002;
 37579                                  	;JMP	short ReadError		;AN002; error return
 37580                                  	; 17/12/2022
 37581                                  	; 02/06/2019
 37582 00006746 72A9                    	jc	short ReadError
 37583                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37584                                  	;JNC	short CHKOWN_OK		;AN002;
 37585                                  	;JMP	short ReadError		;AN002; error return
 37586                                  
 37587                                  CHKOWN_OK:
 37588                                  					;AN002;
 37589 00006748 3C02                    	CMP	AL,2			; is the seek value correct?
 37590 0000674A 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 37591                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 37592 0000674C 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37593                                  					;smr;SS Override
 37594                                  	;mov	al,1
 37595 00006752 B001                    	mov	al,error_invalid_function ; invalid method
 37596                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37597                                  LSeekError2:
 37598 00006754 EB9B                    	jmp	short ReadError
 37599                                  
 37600                                  LSeekDisp:
 37601 00006756 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 37602 00006758 720A                    	JB	short LSeekStore	; just store CX:DX
 37603 0000675A 771B                    	JA	short LSeekEOF		; seek from end of file
 37604                                  	;add	dx,[es:di+21]
 37605 0000675C 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 37606                                  	;adc	cx,[es:di+23]
 37607 00006760 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 37608                                  LSeekStore:
 37609 00006764 89C8                    	MOV	AX,CX			; AX:DX
 37610 00006766 92                      	XCHG	AX,DX			; DX:AX is the correct value
 37611                                  LSeekSetpos:
 37612                                  	;mov	[es:di+21],ax
 37613 00006767 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 37614                                  	;mov	[es:di+23],dx
 37615 0000676B 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 37616 0000676F E80F9D                  	call	Get_User_Stack
 37617                                  	;mov	[si+6],dx
 37618 00006772 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 37619                                  	;jmp	SYS_RET_OK		; successful return
 37620                                  	; 25/06/2019
 37621                                  	;jmp	SYS_RET_OK_clc
 37622                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37623                                  	;jmp	SYS_RET_OK_clc
 37624                                  LSeekOk:
 37625 00006775 EBC4                    	jmp     short Read_Okj
 37626                                  
 37627                                  LSeekEOF:
 37628                                  	;;test	word [es:di+5],8000h
 37629                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 37630                                  	; 21/05/2019 - Retro DOS v4.0
 37631 00006777 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 37632 0000677C 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 37633                                  LOCAL_LSeek:
 37634                                  	;add	dx,[es:di+17]
 37635 0000677E 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 37636                                  	;adc	cx,[es:di+19]
 37637 00006782 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 37638 00006786 EBDC                    	JMP	short LSeekStore	; go and set the position
 37639                                  
 37640                                  Check_LSeek_Mode:
 37641                                  	;;test	word [es:di+2],8000h
 37642                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 37643                                  	; 21/05/2019
 37644 00006788 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 37645 0000678D 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 37646                                  	;mov	ax,[es:di+2]
 37647 0000678F 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 37648                                  	;and	ax,0F0h
 37649 00006793 25F000                  	AND	AX,SHARING_MASK
 37650                                  	;cmp	ax,40h
 37651 00006796 83F840                  	CMP	AX,SHARING_DENY_NONE
 37652 00006799 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 37653                                  	;cmp	ax,30h
 37654 0000679B 83F830                  	CMP	AX,SHARING_DENY_READ
 37655 0000679E 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 37656                                  NET_LSEEK:
 37657                                  ;	JMP	short LOCAL_LSeek
 37658                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 37659                                  	;CallInstall Net_Lseek,MultNET,33
 37660                                  	;JNC	short LSeekSetPos
 37661                                  
 37662 000067A0 B82111                  	mov     ax,1121h
 37663 000067A3 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 37664                                  			; CX:DX = offset (in bytes) from end
 37665                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 37666                                  			; SS = DOS CS
 37667                                  			; Return: CF set on error
 37668                                  			; CF clear if successful, DX:AX = new file position
 37669 000067A5 73C0                    	jnb     short LSeekSetpos
 37670                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37671                                  	;jmp	SYS_RET_ERR
 37672                                  ;LSeekError3:
 37673                                  	; 17/12/2022
 37674                                  LSeekError:
 37675                                  	;jmp	short LSeekError2
 37676                                  DupErr:	; 17/12/2022
 37677 000067A7 E9909E                  	jmp	SYS_RET_ERR
 37678                                  
 37679                                  ;BREAK <FileTimes - modify write times on a handle>
 37680                                  ;----------------------------------------------------------------------------
 37681                                  ;
 37682                                  ;   Assembler usage:
 37683                                  ;	    MOV AH, FileTimes (57H)
 37684                                  ;	    MOV AL, func
 37685                                  ;	    MOV BX, handle
 37686                                  ;	; if AL = 1 then then next two are mandatory
 37687                                  ;	    MOV CX, time
 37688                                  ;	    MOV DX, date
 37689                                  ;	    INT 21h
 37690                                  ;	; if AL = 0 then CX/DX has the last write time/date
 37691                                  ;	; for the handle.
 37692                                  ;
 37693                                  ;	AL=02		 get extended attributes
 37694                                  ;	   BX=handle
 37695                                  ;	   CX=size of buffer (0, return max size )
 37696                                  ;	   DS:SI query list (si=-1, selects all EA)
 37697                                  ;	   ES:DI buffer to hold EA list
 37698                                  ;
 37699                                  ;	AL=03		 get EA name list
 37700                                  ;	   BX=handle
 37701                                  ;	   CX=size of buffer (0, return max size )
 37702                                  ;	   ES:DI buffer to hold name list
 37703                                  ;
 37704                                  ;	AL=04		 set extended attributes
 37705                                  ;	   BX=handle
 37706                                  ;	   ES:DI buffer of EA list
 37707                                  ;
 37708                                  ;
 37709                                  ;   Error returns:
 37710                                  ;	    AX = error_invalid_function
 37711                                  ;	       = error_invalid_handle
 37712                                  ;
 37713                                  ;----------------------------------------------------------------------------
 37714                                  
 37715                                  ; 21/05/2019 - Retro DOS v4.0
 37716                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 37717                                  
 37718                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37719                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 37720                                  
 37721                                  _$FILE_TIMES:
 37722                                  	; 13/07/2018 - Retro DOS v3.0
 37723                                  
 37724                                  	; MSDOS 3.3
 37725                                  	;cmp	al,2			; correct subfunction ?
 37726                                  	;jb	short ft1
 37727                                  
 37728                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 37729                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37730                                  						;SS Overr
 37731                                  	;;mov	al,1
 37732                                  	;mov	al,error_invalid_function ; give bad return
 37733                                  	;jmp	SYS_RET_ERR
 37734                                  
 37735                                  	; MSDOS 6.0
 37736 000067AA 3C02                    	cmp	al,2			; correct subfunction ?
 37737 000067AC 7340                    	jae	short inval_func
 37738                                  ;ft1:
 37739 000067AE E87300                  	call	CheckOwner		; get sft
 37740                                  	; 17/12/2022
 37741 000067B1 72F4                    	jc	short LSeekError	; bad handle
 37742                                  
 37743 000067B3 08C0                    	or	al,al			; get time/date ?
 37744 000067B5 7515                    	jnz	short ft_set_time
 37745                                  
 37746                                  ;------ here we get the time & date from the sft for the user
 37747                                  
 37748 000067B7 FA                      	cli				; is this cli/sti reqd ? BUGBUG
 37749                                  	;mov	cx,[es:di+13]
 37750 000067B8 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 37751                                  	;mov	dx,[es:di+15]
 37752 000067BC 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 37753 000067C0 FB                      	sti
 37754 000067C1 E8BD9C                  	call	Get_User_Stack
 37755                                  	;mov	[si+4],cx
 37756 000067C4 894C04                  	mov	[si+user_env.user_CX],cx
 37757                                  	;mov	[si+6],dx
 37758 000067C7 895406                  	mov	[si+user_env.user_DX],dx
 37759 000067CA EB1F                    	jmp	short ok_ret
 37760                                  
 37761                                  ;------ here we set the time in sft
 37762                                  
 37763                                  ft_set_time:
 37764 000067CC E81EAB                  	call    ECritSFT
 37765                                  	;mov	[es:di+13],cx
 37766 000067CF 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 37767                                  	;mov	[es:di+15],dx
 37768 000067D3 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 37769                                  
 37770 000067D7 31C0                    	xor	ax, ax
 37771 000067D9 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 37772                                  
 37773                                  ;------ set the flags in SFT entry
 37774                                  	;and	word [es:di+5],0FFBFh
 37775                                  	; 18/12/2022
 37776                                  	;and	byte [es:di+5],0BFh
 37777 000067DE 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 37778                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 37779                                  							; mark file as dirty
 37780                                  	;or	word [es:di+5],4000h
 37781                                  	; 17/12/2022
 37782                                  	;or	byte [es:di+6],40h
 37783 000067E3 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 37784                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 37785                                  							; ask close not to
 37786                                  							;   bother about date
 37787                                  							;   and time
 37788 000067E8 E81DAB                  	call	LCritSFT
 37789                                  ok_ret:
 37790                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37791                                  	; 17/12/2022
 37792 000067EB E9439E                  	jmp	SYS_RET_OK
 37793                                  	;jmp	short LSeekOk
 37794                                  
 37795                                  inval_func:
 37796                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37797 000067EE 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37798                                  						;SS Overr
 37799                                  	;mov	al,1
 37800 000067F4 B001                    	mov	al,error_invalid_function ; give bad return
 37801                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37802                                  ft_error:
 37803                                  	;;jmp	SYS_RET_ERR
 37804                                  	;jmp	short LSeekError3
 37805                                  	; 17/12/2022
 37806 000067F6 EBAF                    	jmp	short LSeekError
 37807                                  
 37808                                  ; 21/05/2019 - Retro DOS v4.0
 37809                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 37810                                  
 37811                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37812                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 37813                                  
 37814                                  ;BREAK <$DUP - duplicate a jfn>
 37815                                  ;----------------------------------------------------------------------------
 37816                                  ;
 37817                                  ;   Assembler usage:
 37818                                  ;	    MOV     BX, fh
 37819                                  ;	    MOV     AH, Dup
 37820                                  ;	    INT     int_command
 37821                                  ;	  AX has the returned handle
 37822                                  ;   Errors:
 37823                                  ;	    AX = dup_invalid_handle
 37824                                  ;	       = dup_too_many_open_files
 37825                                  ;
 37826                                  ;----------------------------------------------------------------------------
 37827                                  
 37828                                  _$DUP:
 37829 000067F8 89D8                    	MOV	AX,BX			; save away old handle in AX
 37830 000067FA E881FD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 37831                                  DupErrorCheck:
 37832 000067FD 72A8                    	JC	short DupErr		; nope, bye
 37833 000067FF 06                      	push	es
 37834 00006800 57                      	push	di			; save away SFT
 37835 00006801 5E                      	pop	si			; into convenient place DS:SI
 37836 00006802 1F                      	pop	ds
 37837 00006803 93                      	XCHG	AX,BX			; get back old handle
 37838 00006804 E81D00                  	call	CheckOwner		; get sft in ES:DI
 37839 00006807 729E                    	JC	short DupErr		; errors go home
 37840 00006809 E8B4C1                  	call	DOS_Dup_Direct
 37841 0000680C E812FD                  	call	pJFNFromHandle		; get pointer
 37842 0000680F 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 37843 00006812 881C                    	MOV	[SI],BL			; stuff in new SFT
 37844                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37845                                  	;jmp	SYS_RET_OK		; and go home
 37846 00006814 EBD5                    	jmp	short ok_ret
 37847                                  
 37848                                  	; 17/12/2022
 37849                                  ;DupErr:
 37850                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37851                                  	;;jmp	SYS_RET_ERR
 37852                                  	;jmp	short ft_error
 37853                                  
 37854                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 37855                                  ;----------------------------------------------------------------------------
 37856                                  ;
 37857                                  ;   Assembler usage:
 37858                                  ;	    MOV     BX, fh
 37859                                  ;	    MOV     CX, newfh
 37860                                  ;	    MOV     AH, Dup2
 37861                                  ;	    INT     int_command
 37862                                  ;   Error returns:
 37863                                  ;	    AX = error_invalid_handle
 37864                                  ;
 37865                                  ;----------------------------------------------------------------------------
 37866                                  
 37867                                  _$DUP2:
 37868 00006816 53                      	push	bx
 37869 00006817 51                      	push	cx			; save source
 37870 00006818 89CB                    	MOV	BX,CX			; get one to close
 37871 0000681A E8BBFD                  	call	_$CLOSE			; close destination handle
 37872 0000681D 5B                      	pop	bx
 37873 0000681E 58                      	pop	ax			; old in AX, new in BX
 37874 0000681F E8FFFC                  	call	pJFNFromHandle		; get pointer
 37875 00006822 EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 37876                                  
 37877                                  ;Break	<CheckOwner - verify ownership of handles from server>
 37878                                  ;----------------------------------------------------------------------------
 37879                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 37880                                  ;   process without the process knowing it (delete/rename of open files, for
 37881                                  ;   example), it is possible for the redirector to issue a call to a handle
 37882                                  ;   that it soes not rightfully own. We check here to make sure that the
 37883                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 37884                                  ;   SFFromHandle to really make sure that the SFT is good.
 37885                                  ;
 37886                                  ;	ENTRY	BX has the handle
 37887                                  ;		User_ID is the current user
 37888                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 37889                                  ;		Carry Set => AX has error code
 37890                                  ;	USES	none
 37891                                  ;----------------------------------------------------------------------------
 37892                                  
 37893                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37894                                  	; 21/05/2019 - Retro DOS v4.0
 37895                                  CheckOwner:
 37896                                  	; 13/07/2018 - Retro DOS v3.0
 37897                                  
 37898 00006824 E817FD                  	call	SFFromHandle
 37899 00006827 721B                    	jc	short co_ret_label	; retc
 37900                                  
 37901 00006829 50                      	push	ax
 37902                                  
 37903                                  	; MSDOS 6.0
 37904                                  
 37905                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 37906                                  ;SR; are shared across multiple VMs in win386.
 37907                                  
 37908 0000682A 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 37909 00006830 7404                    	jz	short no_win386		;win386 is not present
 37910 00006832 31C0                    	xor	ax,ax			;set the zero flag
 37911 00006834 EB08                    	jmp	short _skip_win386	
 37912                                  
 37913                                  no_win386:
 37914 00006836 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 37915                                  	;cmp	ax,[es:di+47]
 37916 0000683A 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 37917                                  
 37918                                  _skip_win386:
 37919 0000683E 58                      	pop	ax
 37920                                  	
 37921                                  	; 17/12/2022
 37922 0000683F 7403                    	jz	short co_ret_label
 37923                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37924                                  	;jnz	short CheckOwner_err
 37925                                  	;retn
 37926                                  	
 37927                                  CheckOwner_err:
 37928                                  	;mov	al,6
 37929 00006841 B006                    	mov	al,error_invalid_handle
 37930 00006843 F9                      	stc
 37931                                  
 37932                                  co_ret_label:
 37933 00006844 C3                      	retn
 37934                                  
 37935                                  ;============================================================================
 37936                                  ; MACRO.ASM, MSDOS 6.0, 1991
 37937                                  ;============================================================================
 37938                                  ; Retro	DOS v3.0 - 11/07/2018
 37939                                  ; 21/05/2019 - Retro DOS v4.0
 37940                                  
 37941                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 37942                                  ;	NAME	MACRO
 37943                                  
 37944                                  ;	Microsoft Confidential
 37945                                  ;	Copyright (C) Microsoft Corporation 1991
 37946                                  ;	All Rights Reserved.
 37947                                  
 37948                                  ;**	MACRO.ASM
 37949                                  ;
 37950                                  ;	$AssignOper
 37951                                  ;	FIND_DPB
 37952                                  ;	InitCDS
 37953                                  ;	$UserOper
 37954                                  ;	GetVisDrv
 37955                                  ;	GetThisDrv
 37956                                  ;	GetCDSFromDrv
 37957                                  ;
 37958                                  ;   Revision history:
 37959                                  ;
 37960                                  ;	Created: MZ 4 April 1983
 37961                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 37962                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 37963                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 37964                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 37965                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 37966                                  ;				    aliasing.
 37967                                  ;
 37968                                  ;   MSDOS performs several types of name translation. First, we maintain for
 37969                                  ;   each valid drive letter the text of the current directory on that drive.
 37970                                  ;   For invalid drive letters, there is no current directory so we pretend to
 37971                                  ;   be at the root. A current directory is either the raw local directory
 37972                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 37973                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 37974                                  ;
 37975                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 37976                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 37977                                  ;   this and all * are expanded into ?'s.
 37978                                  ;
 37979                                  ;   The second part of name translation involves subtree aliasing. A list of
 37980                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 37981                                  ;   the previous 'canonicalization' are then examined to see if any of the
 37982                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 37983                                  ;   replaced with the other subtree in the pair.
 37984                                  ;
 37985                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 37986                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 37987                                  ;   The output of the previous translation is examined to see if any of the
 37988                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 37989                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 37990                                  ;   'mount' one device under another.
 37991                                  ;
 37992                                  ;   The final form of name translation involves the mapping of a user's
 37993                                  ;   logical drive number into the internal physical drive. This is
 37994                                  ;   accomplished by converting the drive number into letter:CON, performing
 37995                                  ;   the above translation and then converting the character back into a drive
 37996                                  ;   number.
 37997                                  ;
 37998                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 37999                                  ;   take a path and form the real text of the pathname with all . and ..
 38000                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 38001                                  ;   TransPath.
 38002                                  ;
 38003                                  ;	A000	version 4.00  Jan. 1988
 38004                                  
 38005                                  ;Installed = TRUE
 38006                                  
 38007                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 38008                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 38009                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 38010                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 38011                                  ;					; current drive)
 38012                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 38013                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 38014                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 38015                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 38016                                  ;	I_need	MYNAME,16		; machine name
 38017                                  ;	I_need	MYNUM,WORD		; machine number
 38018                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 38019                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 38020                                  ;	I_need	DrvErr,BYTE		; drive error
 38021                                  
 38022                                  ;BREAK <$AssignOper -- Set up a Macro>
 38023                                  ;----------------------------------------------------------------------------
 38024                                  ; Inputs:
 38025                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 38026                                  ;	AL = 01 set assign mode 		    (SetMode)
 38027                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 38028                                  ;	AL = 03 Define Macro (attch start)
 38029                                  ;	    BL = Macro type
 38030                                  ;	       = 0 alias
 38031                                  ;	       = 1 file/device
 38032                                  ;	       = 2 drive
 38033                                  ;	       = 3 Char device -> network
 38034                                  ;	       = 4 File device -> network
 38035                                  ;	    DS:SI -> ASCIZ source name
 38036                                  ;	    ES:DI -> ASCIZ destination name
 38037                                  ;	AL = 04 Cancel Macro
 38038                                  ;	    DS:SI -> ASCIZ source name
 38039                                  ;	AL = 05 Modified get attach list entry
 38040                                  ;	AL = 06 Get ifsfunc item
 38041                                  ;	AL = 07 set in_use of a drive's CDS
 38042                                  ;	     DL = drive number, 0=default  0=A,,
 38043                                  ;	AL = 08 reset in_use of a drive's CDS
 38044                                  ;	     DL = drive number, 0=A, 1=B,,,
 38045                                  ; Function:
 38046                                  ;	Do macro stuff
 38047                                  ; Returns:
 38048                                  ;	Std Xenix style error return
 38049                                  ;----------------------------------------------------------------------------
 38050                                  
 38051                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38052                                  	; 21/05/2019 - Retro DOS v4.0
 38053                                  _$AssignOper:
 38054                                  	; MSDOS 6.0
 38055 00006845 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 38056 00006847 7525                    	JNZ	short chk08		      ; no			;AN000;
 38057                                  srinuse:								;AN000;
 38058 00006849 50                      	PUSH	AX			      ; save al 		;AN000;
 38059 0000684A 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 38060 0000684C E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 38061 0000684F 58                      	POP	AX			      ; 			;AN000;
 38062 00006850 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 38063                                  	;cmp	word [si+45h],0
 38064 00006852 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 38065 00006856 7410                    	JZ	short baddrv		      ;     no			;AN000;
 38066 00006858 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 38067 0000685A 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 38068                                  	;or	word [si+43h],4000h
 38069                                  	; 17/12/2022
 38070                                  	;or	byte [si+44h],40h
 38071 0000685C 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 38072                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 38073 00006860 EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 38074                                  resetdrv:
 38075                                  	;and	word [si+43h],0BFFFh									;AN000;
 38076                                  	; 18/12/2022
 38077 00006862 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 38078                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 38079 00006866 EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 38080                                  
 38081                                  	; 17/12/2022
 38082                                  baddrv: 								;AN000;
 38083 00006868 B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 38084                                  
 38085                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38086                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 38087                                  	; 17/12/2022
 38088                                  	; 21/05/2019
 38089                                  ASS_ERR:
 38090 0000686B E9CC9D                  	jmp	SYS_RET_ERR
 38091                                  
 38092                                  chk08:									;AN000;
 38093 0000686E 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 38094 00006870 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 38095                                  
 38096                                    ;IF	NOT INSTALLED
 38097                                  	;transfer NET_ASSOPER
 38098                                    ;ELSE
 38099                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38100 00006872 50                      	PUSH	AX
 38101                                  	;mov	ax,111Eh
 38102                                  	;MOV	AX,(MultNET SHL 8) OR 30
 38103 00006873 B81E11                  	mov	ax,(MultNET*256)+30
 38104 00006876 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 38105                                  			; SS = DOS CS
 38106                                  			; STACK: WORD function to execute
 38107                                  			; Return: CF set on error, AX = error code
 38108                                  			; STACK unchanged
 38109 00006878 5B                      	POP	BX			; Don't zap error code in AX
 38110 00006879 72F0                    	JC	short ASS_ERR
 38111                                  okdone:
 38112 0000687B E9B39D                  	jmp	SYS_RET_OK
 38113                                  
 38114                                  	; 17/12/2022
 38115                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38116                                  ;ASS_ERR:
 38117                                  	;jmp	SYS_RET_ERR
 38118                                  
 38119                                    ;ENDIF
 38120                                  
 38121                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 38122                                  ;----------------------------------------------------------------------------
 38123                                  ;**	FIND_DPB - Find a DPB from a Drive #
 38124                                  ;
 38125                                  ;	ENTRY	AL has drive number A = 0
 38126                                  ;	EXIT	'C' set
 38127                                  ;		    No DPB for this drive number
 38128                                  ;		'C' clear
 38129                                  ;		    DS:SI points to DPB for drive
 38130                                  ;	USES	SI, DS, Flags
 38131                                  ;----------------------------------------------------------------------------
 38132                                  
 38133                                  	; 21/05/2019 - Retro DOS v4.0
 38134                                  FIND_DPB:
 38135 0000687E 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 38136                                  fdpb5:	
 38137 00006883 83FEFF                  	CMP	SI,-1
 38138 00006886 7409                    	JZ	short fdpb10
 38139 00006888 3A04                    	cmp	al,[si]
 38140                                  	;CMP	AL,[SI+DPB.DRIVE]
 38141 0000688A 7406                    	jz	short ret_label15	; Carry clear (retz)
 38142                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 38143                                  	;lds	si,[si+19h] ; MSDOS 6.0
 38144 0000688C C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 38145 0000688F EBF2                    	JMP	short fdpb5
 38146                                  fdpb10:	
 38147 00006891 F9                      	STC
 38148                                  ret_label15:
 38149 00006892 C3                      	retn
 38150                                  
 38151                                  ;	Break <InitCDS - set up an empty CDS>
 38152                                  ;----------------------------------------------------------------------------
 38153                                  ;**	InitCDS - Setup an Empty CDS
 38154                                  ;
 38155                                  ;	ENTRY	ThisCDS points to CDS
 38156                                  ;		AL has uppercase drive letter
 38157                                  ;	EXIT	ThisCDS is now empty
 38158                                  ;		(ES:DI) = CDS
 38159                                  ;		'C' set if no DPB associated with drive
 38160                                  ;	USES	AH,ES,DI, Flags
 38161                                  ;----------------------------------------------------------------------------
 38162                                  
 38163                                  ; 21/05/2019 - Retro DOS v4.0
 38164                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 38165                                  
 38166                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38167                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 38168                                  
 38169                                  InitCDS:
 38170                                  	; 19/08/2018
 38171                                  	; 05/08/2018 - Retro DOS v3.0
 38172                                  	; MSDOS 6.0
 38173 00006893 50                      	push	ax			; save (AL) for caller
 38174 00006894 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 38175                                  	;mov	word [es:di+67],0
 38176 00006899 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 38177 0000689F 2C40                    	SUB	AL,"A"-1                ; A = 1
 38178 000068A1 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 38179 000068A6 7236                    	JC	short icdsx		; Drive does not map a physical drive
 38180 000068A8 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 38181 000068A9 50                      	PUSH	AX			; save drive number for later
 38182 000068AA 0441                    	add	al,"A"
 38183 000068AC B43A                    	MOV	AH,':'
 38184 000068AE 268905                  	mov	[ES:DI],ax
 38185                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 38186                                  	;mov	ax,"\"
 38187                                  	;mov	[es:di+2],ax
 38188                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 38189 000068B1 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 38190                                  	;or	word [es:di+67],4000h
 38191                                  	;or	byte [es:di+68],40h
 38192 000068B7 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 38193 000068BC 29C0                    	sub	ax,ax
 38194                                  	;MOV	[es:di+73],ax ; 0
 38195 000068BE 26894549                	MOV	[ES:DI+curdir.ID],ax
 38196                                  	;mov	[es:di+75],ax ; 0
 38197 000068C2 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 38198 000068C6 B002                    	mov	al,2
 38199                                  	;mov	[es:di+79],aX ; 2
 38200 000068C8 2689454F                	MOV	[ES:DI+curdir.end],ax
 38201 000068CC 58                      	POP	AX			; (al) = drive number
 38202 000068CD 1E                      	push	ds
 38203 000068CE 56                      	push	si
 38204 000068CF E8ACFF                  	call	FIND_DPB
 38205 000068D2 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 38206                                  	;mov	[es:di+69],si
 38207 000068D4 26897545                	MOV	[ES:DI+curdir.devptr],SI
 38208                                  	;mov	[es:di+71],ds
 38209 000068D8 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 38210                                  icds5:	
 38211 000068DC 5E                      	pop	si
 38212 000068DD 1F                      	pop	ds
 38213                                  icdsx:	
 38214 000068DE 58                      	pop	ax
 38215                                  RET45:
 38216 000068DF C3                      	retn
 38217                                  
 38218                                  ;Break <$UserOper - get/set current user ID (for net)>
 38219                                  ;----------------------------------------------------------------------------
 38220                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 38221                                  ;	maintain this string and do no verifications.
 38222                                  ;
 38223                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 38224                                  ;				      4-printer-set-flags,5-printer-get-flags)
 38225                                  ;		DS:DX is user string pointer (calls 1,2)
 38226                                  ;		ES:DI is user buffer (call 3)
 38227                                  ;		BX is assign index (calls 2,3,4,5)
 38228                                  ;		CX is user number (call 1)
 38229                                  ;		DX is flag word (call 4)
 38230                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 38231                                  ;			and user CX is set to the user number
 38232                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 38233                                  ;		If AL = 5 then DX is flag word
 38234                                  ;----------------------------------------------------------------------------
 38235                                  
 38236                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38237                                  	; 21/05/2019 - Retro DOS v4.0
 38238                                  _$UserOper:
 38239                                  	; 05/08/2018 - Retro DOS v3.0
 38240                                  	; MSDOS 6.0 (& MSDOS 3.3)
 38241 000068E0 50                      	PUSH	AX
 38242 000068E1 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 38243 000068E3 58                      	POP	AX
 38244 000068E4 7211                    	JB	short UserGet 		; return to user the string
 38245 000068E6 742E                    	JZ	short UserSet 		; set the current user
 38246 000068E8 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 38247 000068EA 763D                    	JBE	short UserPrint		; yep
 38248                                  	;mov	byte [ss:EXTERR_LOCUS],1
 38249 000068EC 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 38250                                  					; Extended Error Locus
 38251                                  	;error	error_invalid_function	; not 0,1,2,3
 38252                                  	;mov	al,1
 38253 000068F2 B001                    	MOV	AL,error_invalid_function
 38254                                  useroper_error:
 38255                                  	; 17/12/2022
 38256                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38257 000068F4 E9439D                  	JMP	SYS_RET_ERR
 38258                                  	;jmp	short ASS_ERR
 38259                                  
 38260                                  UserGet:
 38261                                  ; Transfer MYNAME to DS:DX
 38262                                  ; Set Return CX to MYNUM
 38263 000068F7 1E                      	PUSH	DS			; switch registers
 38264 000068F8 07                      	POP	ES
 38265 000068F9 89D7                    	MOV	DI,DX			; destination
 38266 000068FB 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 38267 00006900 E87E9B                  	call	Get_User_Stack
 38268                                  	;mov	[si+4],cx
 38269 00006903 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 38270 00006906 16                      	push	ss			; point to DOSDATA
 38271 00006907 1F                      	pop	ds
 38272 00006908 BE[0503]                	MOV	SI,MYNAME		; point source to user string
 38273                                  UserMove:
 38274 0000690B B90F00                  	MOV	CX,15
 38275 0000690E F3A4                    	REP	MOVSB			; blam.
 38276 00006910 31C0                    	XOR	AX,AX			; 16th byte is 0
 38277 00006912 AA                      	STOSB
 38278                                  UserBye:
 38279 00006913 E91B9D                  	jmp	SYS_RET_OK		; no errors here
 38280                                  
 38281                                  UserSet:
 38282                                  ; Transfer DS:DX to MYNAME
 38283                                  ; CX to MYNUM
 38284 00006916 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 38285 0000691B 89D6                    	MOV	SI,DX			; user space has source
 38286 0000691D 16                      	push	ss
 38287 0000691E 07                      	pop	es
 38288 0000691F BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 38289 00006922 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 38290 00006927 EBE2                    	JMP	short UserMove
 38291                                  
 38292                                  UserPrint:
 38293                                  
 38294                                    ;IF NOT Installed
 38295                                    ;	transfer PRINTER_GETSET_STRING
 38296                                    ;ELSE
 38297 00006929 50                      	PUSH	AX
 38298                                  	;mov	ax,111Fh
 38299                                  	;MOV	AX,(MultNET SHL 8) OR 31
 38300 0000692A B81F11                  	mov	ax,(MultNET<<8)|31
 38301 0000692D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 38302                                  			; STACK: WORD function
 38303                                  			; Return: CF set on error, AX = error code
 38304                                  			; STACK unchanged
 38305 0000692F 5A                      	POP	DX			; Clean stack
 38306                                  	;JNC	short OKPA
 38307 00006930 73E1                    	jnc	short UserBye ; 21/05/2019
 38308                                  	; 17/12/2022
 38309 00006932 EBC0                    	jmp	short useroper_error
 38310                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38311                                  	;jnb     short OKPA
 38312                                  	;jmp     short useroper_error
 38313                                  
 38314                                  	; 17/12/2022
 38315                                  ;OKPA:
 38316                                  ;	jmp	short UserBye
 38317                                  
 38318                                    ;ENDIF
 38319                                  
 38320                                  
 38321                                  ;Break	<GetVisDrv - return visible drive>
 38322                                  ;----------------------------------------------------------------------------
 38323                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 38324                                  ;
 38325                                  ;   Inputs:	AL has drive identifier (0=default)
 38326                                  ;   Outputs:	Carry Set - invalid drive/macro
 38327                                  ;		Carry Clear - AL has physical drive (0=A)
 38328                                  ;		    ThisCDS points to CDS
 38329                                  ;   Registers modified: AL
 38330                                  ;----------------------------------------------------------------------------
 38331                                  
 38332                                  	; 21/05/2019 - Retro DOS v4.0
 38333                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 38334                                  
 38335                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38336                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 38337                                  GetVisDrv:
 38338                                  	; 05/08/2018 - Retro DOS v3.0
 38339                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 38340 00006934 E81900                  	CALL	GETTHISDRV		; get inuse drive
 38341 00006937 72A6                    	jc	short RET45
 38342 00006939 1E                      	push	ds
 38343 0000693A 56                      	push	si
 38344 0000693B 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 38345                                  	;test	word [si+67],2000h
 38346                                  	; 17/12/2022
 38347                                  	;test	byte [si+68],20h
 38348 00006940 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 38349                                  	;TEST	word [SI+curdir.flags],curdir_splice
 38350 00006944 5E                      	pop	si
 38351 00006945 1F                      	pop	ds
 38352 00006946 7497                    	jz	short RET45		; if not spliced, return OK
 38353                                  	; MSDOS 6.0
 38354                                  	;mov	byte [ss:DrvErr],0Fh
 38355 00006948 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 38356 0000694E F9                      	STC				; signal error
 38357 0000694F C3                      	retn
 38358                                  
 38359                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 38360                                  ;----------------------------------------------------------------------------
 38361                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 38362                                  ;	macro pointer
 38363                                  ;
 38364                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 38365                                  ;   Outputs:
 38366                                  ;		Carry Set - invalid drive/macro
 38367                                  ;		Carry Clear - AL has physical drive (0=A)
 38368                                  ;		   ThisCDS points to macro
 38369                                  ;   Registers modified: AL
 38370                                  ;----------------------------------------------------------------------------
 38371                                  
 38372                                  	; 21/05/2019 - Retro DOS v4.0
 38373                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 38374                                  
 38375                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38376                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)
 38377                                  GETTHISDRV:
 38378                                  	; 05/08/2018
 38379                                  	; 12/07/2018 - Retro DOS v3.0
 38380                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 38381                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38382 00006950 08C0                    	OR	AL,AL			; are we using default drive?
 38383 00006952 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 38384 00006954 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 38385                                  	;INC	ax			; Counteract next instruction
 38386                                  	; 04/09/2018
 38387                                  	;inc	al
 38388                                  	; 07/12/2022
 38389 00006958 40                      	inc	ax
 38390                                  GTD10:	
 38391                                  	;DEC	AX
 38392                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38393 00006959 48                      	dec	ax			; 0 = A
 38394                                  	;dec	al
 38395 0000695A 1E                      	PUSH	DS			; save world
 38396 0000695B 56                      	PUSH	SI
 38397                                  	;mov	byte [ss:EXTERR_LOCUS],2
 38398 0000695C 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 38399                                  
 38400                                  	;TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 38401                                  	;JZ	SHORT GTD20		; Logical
 38402                                  	; 13/03/2024 (PCDOS71. IBMDOS.COM)
 38403                                  	;;;
 38404 00006962 36803E[7205]00          	cmp	byte [ss:FSHARING],0
 38405 00006968 7420                    	jz	short GTD20
 38406                                  	;;;
 38407                                  
 38408 0000696A 50                      	PUSH	AX
 38409 0000696B 06                      	PUSH	ES
 38410 0000696C 57                      	PUSH	DI
 38411 0000696D 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 38412                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 38413 00006974 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 38414 00006979 0441                    	ADD	AL,'A'
 38415 0000697B E815FF                  	CALL	InitCDS			; InitCDS(c);
 38416                                  	;test	word [es:di+67],4000h
 38417                                  	; 17/12/2022
 38418                                  	;test	byte [es:di+68],40h
 38419 0000697E 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 38420                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 38421 00006983 5F                      	POP	DI
 38422 00006984 07                      	POP	ES
 38423 00006985 58                      	POP	AX
 38424 00006986 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 38425 00006988 EB18                    	JMP	SHORT GTDX		; carry clear
 38426                                  GTD20:
 38427 0000698A E81800                  	CALL	GetCDSFromDrv
 38428 0000698D 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 38429                                  	;test	word [si+43h],4000h
 38430                                  	; 17/12/2022
 38431                                  	;test	byte [si+44h],40h
 38432 0000698F F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 38433                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 38434 00006993 750D                    	JNZ	SHORT GTDX		; carry clear
 38435                                  GTD30:	
 38436                                  	; 21/05/2019
 38437                                  	; MSDOS 6.0
 38438 00006995 B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 38439 00006997 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 38440                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 38441 0000699B 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 38442 000069A1 F9                      	STC
 38443                                  GTDX:	
 38444 000069A2 5E                      	POP	SI			; restore world
 38445 000069A3 1F                      	POP	DS
 38446 000069A4 C3                      	RETN
 38447                                  
 38448                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 38449                                  ;----------------------------------------------------------------------------
 38450                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 38451                                  ;	pointer, returning an error if the drive number is greater than the
 38452                                  ;	number of CDS's
 38453                                  ;
 38454                                  ;   Inputs:	AL is physical unit # A=0...
 38455                                  ;   Outputs:	Carry Set if Bad Drive
 38456                                  ;		Carry Clear
 38457                                  ;		    DS:SI -> CDS
 38458                                  ;		    [THISCDS] = DS:SI
 38459                                  ;   Registers modified: DS,SI
 38460                                  ;----------------------------------------------------------------------------
 38461                                  
 38462                                  	; 21/05/2019 - Retro DOS v4.0
 38463                                  GetCDSFromDrv:
 38464 000069A5 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 38465                                  	;JB	SHORT GetCDS	; cf=1	; yes, go get the macro
 38466                                  	;STC				; signal error
 38467                                  	;RETN				; bye
 38468                                  	; 23/09/2023
 38469 000069AA F5                      	cmc	; cf=1 <-> cf=0
 38470 000069AB 7217                    	jc	short GetCDS_retn
 38471                                  GetCDS:
 38472                                  	; 23/09/2023
 38473                                  	;PUSH	BX
 38474 000069AD 50                      	PUSH	AX
 38475 000069AE 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 38476                                  	;mov	bl,81 ; MSDOS 3.3
 38477                                  	;mov	bl,88 ; MSDOS 6.0 
 38478                                  	; 23/09/2023
 38479                                  	;MOV	BL,curdir.size		; size in convenient spot
 38480                                  	;MUL	BL			; get net offset
 38481 000069B3 B458                    	mov	ah,curdir.size
 38482 000069B5 F6E4                    	mul	ah
 38483 000069B7 01C6                    	ADD	SI,AX ; *		; convert to true pointer
 38484 000069B9 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 38485 000069BE 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 38486 000069C3 58                      	POP	AX
 38487                                  	; 23/09/2023
 38488                                  	;POP	BX
 38489                                  	; (cf must be 0 here) ; *
 38490                                  	;CLC				; no error
 38491                                  GetCDS_retn:
 38492 000069C4 C3                      	RETN				; bye!
 38493                                  
 38494                                  ;============================================================================
 38495                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 38496                                  ;============================================================================
 38497                                  ; Retro	DOS v3.0 - 12/07/2018
 38498                                  ; 22/05/2019 - Retro DOS v4.0
 38499                                  
 38500                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 38501                                  ;----------------------------------------------------------------------------
 38502                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 38503                                  ;       gritty substitution.
 38504                                  ;
 38505                                  ;   Inputs:     DS:DX - pointer to FCB
 38506                                  ;               ES:DI - point to destination
 38507                                  ;   Outputs:    Carry Set - invalid path in final map
 38508                                  ;               Carry Clear - FCB has been mapped into ES:DI
 38509                                  ;                   Sattrib is set from possibly extended FCB
 38510                                  ;                   ExtFCB set if extended FCB found
 38511                                  ;   Registers modified: most
 38512                                  ;----------------------------------------------------------------------------
 38513                                  
 38514                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38515                                  TransFCB:
 38516                                  	; 22/05/2019 - Retro DOS v4.0
 38517                                  	; 12/07/2018 - Retro DOS v3.0
 38518                                  	;LocalVar FCBTmp,16
 38519                                  	;ENTER
 38520 000069C5 55                      	push	bp
 38521 000069C6 89E5                    	mov	bp,sp
 38522                                  	;sub	sp,15	; MSDOS 3.3
 38523 000069C8 83EC10                  	sub	sp,16	; MSDOS 6.0
 38524 000069CB 16                      	push	ss
 38525 000069CC 07                      	pop	es
 38526 000069CD 06                      	push	es
 38527 000069CE 57                      	push	di
 38528                                  	;lea	di,[bp-15] ; MSDOS 3.3
 38529                                  	;LEA	DI,FCBTmp 
 38530 000069CF 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 38531 000069D2 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 38532 000069D8 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 38533 000069DE E853B2                  	call	GetExtended             ; get FCB, extended or not
 38534                                  	; 06/12/2022
 38535 000069E1 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 38536 000069E3 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 38537 000069E6 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 38538 000069EA 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 38539                                  GetDrive:
 38540 000069F0 AC                      	lodsb				; get drive byte
 38541 000069F1 E85CFF                  	call	GETTHISDRV
 38542 000069F4 722A                    	jc	short BadPack
 38543 000069F6 E87303                  	call	TextFromDrive           ; convert 0-based drive to text
 38544                                  
 38545                                  ; Scan the source to see if there are any illegal chars
 38546                                  
 38547                                  	;mov	bx,CharType		; load lookup table
 38548 000069F9 B90B00                  	mov	cx,11
 38549 000069FC 56                      	push	si			; back over name, ext
 38550                                  FCBScan:
 38551 000069FD AC                      	lodsb				; get a byte
 38552                                  	
 38553                                  	; 09/08/2018
 38554                                  	;;xlat	byte [es:bx]
 38555                                  	;es	xlat
 38556                                  
 38557                                  	; 22/05/2019 - Retro DOS v4.0	
 38558 000069FE E868E5                  	call	GetCharType		; get flags
 38559                                  
 38560                                  	;test	al,8	
 38561 00006A01 A808                    	test	al,FFCB
 38562 00006A03 741B                    	jz	short BadPack
 38563                                  NextCh: 
 38564 00006A05 E2F6                    	loop	FCBScan
 38565 00006A07 5E                      	pop	si
 38566 00006A08 89FB                    	mov	bx,di
 38567 00006A0A E863B6                  	call	PackName                ; crunch the path
 38568 00006A0D 5F                      	pop	di			; get original destination
 38569 00006A0E 07                      	pop	es
 38570 00006A0F 16                      	push	ss			; get DS addressability
 38571 00006A10 1F                      	pop	ds
 38572                                  	;lea	si,[bp-15] ; MSDOS 3.3
 38573                                  	;LEA	SI,FCBTmp		; point at new pathname
 38574 00006A11 8D76F0                  	lea	si,[bp-16]
 38575 00006A14 803F00                  	cmp	byte [bx],0
 38576 00006A17 7407                    	jz	short BadPack
 38577 00006A19 55                      	push	bp
 38578 00006A1A E80E00                  	call	TransPathSet            ; convert the path
 38579 00006A1D 5D                      	pop	bp
 38580 00006A1E 7303                    	jnc	short FCBRet		; bye with transPath error code
 38581                                  BadPack:
 38582 00006A20 F9                      	STC
 38583                                  	;mov	al,3
 38584 00006A21 B003                    	MOV     AL,error_path_not_found
 38585                                  FCBRet: 
 38586                                  	;LEAVE
 38587 00006A23 89EC                    	mov	sp,bp
 38588 00006A25 5D                      	pop	bp
 38589                                  TransPath_retn:
 38590 00006A26 C3                      	retn
 38591                                  
 38592                                  ; 12/07/2018 - Retro DOS v3.0
 38593                                  
 38594                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 38595                                  ;----------------------------------------------------------------------------
 38596                                  ;
 38597                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 38598                                  ;       substitution, insertion of current directory and fixing . and ..
 38599                                  ;       entries. Perform splicing. Allow input string to match splice
 38600                                  ;       exactly.
 38601                                  ;
 38602                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 38603                                  ;       matches splice.
 38604                                  ;
 38605                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 38606                                  ;
 38607                                  ;   The following anomalous behaviour is required:
 38608                                  ;
 38609                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 38610                                  ;       Paths on devices are ignored. (truncate to 0-length)
 38611                                  ;       Raw net I/O sets ThisCDS => NULL.
 38612                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 38613                                  ;
 38614                                  ;   Other behaviour:
 38615                                  ;
 38616                                  ;       ThisCDS set up.
 38617                                  ;       FatRead done on local CDS.
 38618                                  ;       ValidateCDS done on local CDS.
 38619                                  ;
 38620                                  ;   Brief flowchart:
 38621                                  ;
 38622                                  ;       if fSharing then
 38623                                  ;           set up DummyCDS (ThisCDS)
 38624                                  ;           canonicalize (sets cMeta)
 38625                                  ;           splice
 38626                                  ;           fatRead
 38627                                  ;           return
 38628                                  ;       if \\ or d:\\ lead then
 38629                                  ;           set up null CDS (ThisCDS)
 38630                                  ;           canonicalize (sets cMeta)
 38631                                  ;           return
 38632                                  ;       if device then
 38633                                  ;           set up dummyCDS (ThisCDS)
 38634                                  ;           canonicalize (sets cMeta)
 38635                                  ;           return
 38636                                  ;       if file then
 38637                                  ;           getCDS (sets (ThisCDS) from name)
 38638                                  ;           validateCDS (may reset current dir)
 38639                                  ;           Copy current dir
 38640                                  ;           canonicalize (set cMeta)
 38641                                  ;           splice
 38642                                  ;           generate correct CDS (ThisCDS)
 38643                                  ;           if local then
 38644                                  ;               fatread
 38645                                  ;           return
 38646                                  ;
 38647                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38648                                  ;               DI - point to buffer in DOSDATA
 38649                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38650                                  ;                   syntax, etc. or user FAILed to I 24.
 38651                                  ;               WFP_Start - points to beginning of buffer
 38652                                  ;               Curr_Dir_End - points to end of current dir in path
 38653                                  ;               DS - DOSDATA
 38654                                  ;   Registers modified: most
 38655                                  ;
 38656                                  ;----------------------------------------------------------------------------
 38657                                  
 38658                                  ; 22/05/2019
 38659                                  ; 13/05/2019 - Retro DOS v4.0
 38660                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 38661                                  
 38662                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38663                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 38664                                  
 38665                                  TransPath:
 38666 00006A27 30C0                    	XOR     AL,AL
 38667 00006A29 EB02                    	JMP     SHORT SetSplice
 38668                                  TransPathSet:
 38669 00006A2B B0FF                    	MOV     AL,-1
 38670                                  SetSplice:
 38671 00006A2D 36A2[4C03]              	MOV	[SS:NoSetDir],AL	; NoSetDir = !fExact;	;smr;SS Override
 38672 00006A31 B0FF                    	MOV     AL,-1
 38673                                  TransPathNoSet:
 38674 00006A33 36A2[7105]              	MOV	[SS:FSPLICE],AL		; fSplice = TRUE;	;smr;SS Override
 38675 00006A37 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 38676 00006A3D 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 38677 00006A42 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 38678 00006A49 16                      	push	ss
 38679 00006A4A 07                      	pop	es
 38680                                  	;lea	bp,[di+134]
 38681 00006A4B 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 38682                                  ;
 38683                                  ; if this is through the server dos call, fsharing is set. We set up a
 38684                                  ; dummy cds and let the operation go.
 38685                                  ;
 38686                                  	;TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 38687                                  	;JZ	short CheckUNC		; skip to UNC check
 38688                                  	; 13/03/2024 (PCDOS 7.1 IBMDOS.COM)
 38689                                  	;;;
 38690 00006A4F 36803E[7205]00          	cmp	byte [ss:FSHARING],0
 38691 00006A55 7435                    	jz	short CheckUNC
 38692                                  	;;;
 38693                                  ;
 38694                                  ; ES:DI point to buffer
 38695                                  ;
 38696 00006A57 E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 38697 00006A5A E8F3FE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 38698 00006A5D 722A                    	jc	short NoPath
 38699 00006A5F E80A03                  	CALL	TextFromDrive		; drop in new
 38700 00006A62 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 38701 00006A65 E83401                  	CALL	Canonicalize            ; copy and canonicalize
 38702 00006A68 72BC                    	jc	short TransPath_retn	; errors
 38703                                  ;
 38704                                  ; Perform splices for net guys.
 38705                                  ;
 38706 00006A6A 16                      	push	ss
 38707 00006A6B 1F                      	pop	ds
 38708 00006A6C 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 38709 00006A70 F606[7105]FF            	TEST	byte [FSPLICE],-1
 38710 00006A75 7403                    	JZ	short NoServerSplice
 38711 00006A77 E83102                  	CALL    Splice
 38712                                  NoServerSplice:
 38713 00006A7A 16                      	push	ss
 38714 00006A7B 1F                      	pop	ds                      ; for FATREAD
 38715 00006A7C C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 38716 00006A80 E86AA8                  	call	ECritDisk
 38717 00006A83 E833EB                  	call	FATREAD_CDS
 38718 00006A86 E87FA8                  	call	LCritDisk
 38719                                  NoPath:
 38720                                  	;mov	al,3
 38721 00006A89 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38722 00006A8B C3                      	retn				; any errors are in Carry flag
 38723                                  
 38724                                  ; Let the network decide if the name is for a spooled device. It will map
 38725                                  ; the name if so.
 38726                                  
 38727                                  CheckUNC:
 38728 00006A8C 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 38729                                  	;CallInstall NetSpoolCheck,MultNET,35
 38730 00006A93 B82311                  	mov	ax,1123h
 38731 00006A96 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 38732                                  			; DS:SI -> ASCIZ filename to canonicalize
 38733                                  			; ES:DI -> 128-byte buffer for qualified name
 38734                                  			; Return: CF set if not resolved
 38735 00006A98 7329                    	JNC	short UNCDone
 38736                                  
 38737                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 38738                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 38739                                  ; input, then the name has been changed to the remote spooler by the above net
 38740                                  ; call. Also, there may be a drive in front of the \\.
 38741                                  
 38742                                  NO_CHECK:
 38743 00006A9A E8B902                  	CALL    DriveFromText		; eat drive letter
 38744 00006A9D 50                      	PUSH    AX                      ; save it
 38745 00006A9E 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 38746 00006AA0 E8E3E4                  	call    PATHCHRCMP              ; convert to normal form
 38747 00006AA3 86E0                    	XCHG    AH,AL                   ; swap for second byte
 38748 00006AA5 E8DEE4                  	call    PATHCHRCMP              ; convert to normal form
 38749 00006AA8 751F                    	JNZ	short CheckDevice	; not a path char
 38750 00006AAA 38C4                    	CMP     AH,AL                   ; are they same?
 38751 00006AAC 751B                    	JNZ	short CheckDevice	; nope
 38752                                  
 38753                                  ; We have a UNC request. We must copy the string up to the beginning of the
 38754                                  ; local machine root path
 38755                                  
 38756 00006AAE 58                      	POP     AX
 38757 00006AAF A5                      	MOVSW                           ; get the lead \\.
 38758                                  UNCCpy:
 38759 00006AB0 AC                      	LODSB                           ; get a byte
 38760 00006AB1 E87DE4                   	call	UCase                   ;AN000;; convert the char
 38761 00006AB4 08C0                    	OR      AL,AL
 38762 00006AB6 740E                    	JZ	short UNCTerm		; end of string. All done.
 38763 00006AB8 E8CBE4                  	call    PATHCHRCMP              ; is it a path char?
 38764 00006ABB 89FB                    	MOV     BX,DI                   ; backup position
 38765 00006ABD AA                      	STOSB
 38766 00006ABE 75F0                    	JNZ	short UNCCpy		; no, go copy
 38767 00006AC0 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 38768                                  UNCDone:
 38769 00006AC3 16                      	push	ss
 38770 00006AC4 1F                      	pop	ds
 38771 00006AC5 C3                       	retn				; return error code
 38772                                  UNCTerm:
 38773 00006AC6 AA                      	STOSB                           ;AN000;
 38774 00006AC7 EBFA                    	JMP	short UNCDone		;AN000;
 38775                                  
 38776                                  CheckDevice:
 38777                                  
 38778                                  ; Check DS:SI for device. First eat any path stuff
 38779                                  
 38780 00006AC9 58                      	POP     AX                      ; retrieve drive info
 38781 00006ACA 803C00                  	CMP     BYTE [SI],0		; check for null file
 38782 00006ACD 7504                    	JNZ	short CheckPath
 38783                                  	;mov	al,2 
 38784 00006ACF B002                    	MOV     AL,error_file_not_found ; bad file error
 38785 00006AD1 F9                      	STC                             ; signal error on null input
 38786 00006AD2 C3                      	RETN				; bye!
 38787                                  CheckPath:
 38788 00006AD3 50                      	push	ax
 38789 00006AD4 55                      	push	bp			; save drive number
 38790                                  
 38791                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38792                                  %if 0
 38793                                  	; MSDOS 6.0
 38794                                  ;;;BUGBUG BUG 10-26-1992 scottq
 38795                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 38796                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 38797                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 38798                                  ;;;end up having a 5D in the opcode's displacement field. The
 38799                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 38800                                  ;;;
 38801                                  ;;;What we do here is do a call to a function that is less than 5Dh
 38802                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 38803                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 38804                                  ;;;
 38805                                  ;;;More info:
 38806                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 38807                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 38808                                  ;;;
 38809                                  	call	no5Dshere
 38810                                  start5Dhack:
 38811                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice
 38812                                  backfrom5Dhack:
 38813                                  
 38814                                  %endif
 38815                                  
 38816                                  ; 13/03/2024
 38817                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:AC47h
 38818                                  ; PCDOS 7.1 IBMDOS.COM - DOSCODE:BECBh
 38819                                  ; (Windows ME IO.SYS - BIOSCODE:A6C2h)
 38820                                  %if 0
 38821                                  	call	no5Dshere
 38822                                  %else
 38823                                  ; 13/03/2024 - Retro DOS v4.2
 38824                                  
 38825                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38826                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 38827 00006AD5 E840D7                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 38828                                  %endif
 38829 00006AD8 5D                      	pop	bp
 38830 00006AD9 58                      	pop	ax			; get drive letter back
 38831 00006ADA 731C                    	JNC	short DoFile		; yes we have a file.
 38832                                  
 38833                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 38834                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 38835                                  ; call.
 38836                                  
 38837 00006ADC 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 38838 00006AE2 E86BFE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 38839 00006AE5 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 38840                                  
 38841                                  ; Now that we have noted that we have a device, we put it into a form that
 38842                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 38843                                  ; string. We relax this to state that if the d:\ is present then the path
 38844                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 38845                                  ; a device.
 38846                                  
 38847 00006AEB E87E02                  	CALL    TextFromDrive
 38848 00006AEE B02F                    	MOV     AL,'/'                  ; path sep.
 38849 00006AF0 AA                      	STOSB
 38850 00006AF1 E8BFA6                  	call	StrCpy			; move remainder of string
 38851                                  
 38852 00006AF4 F8                      	CLC                             ; everything OK.
 38853 00006AF5 16                      	push	ss
 38854 00006AF6 1F                      	pop	ds                      ; remainder of OK stuff
 38855                                  DoFile_retn:
 38856 00006AF7 C3                      	retn
 38857                                  
 38858                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38859                                  %if 0
 38860                                  
 38861                                  no5Dshere:
 38862                                  	; 10/08/2018
 38863                                  	jmp	CheckThisDevice		; snoop for device
 38864                                  %endif
 38865                                  
 38866                                  ;.erre (no5Dshere - start5Dhack - 5D)
 38867                                  
 38868                                  ; We have a file. Get the raw CDS.
 38869                                  
 38870                                  DoFile:
 38871                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38872                                  
 38873 00006AF8 E839FE                  	call	GetVisDrv               ; get proper CDS
 38874                                  	;mov	al,3 
 38875 00006AFB B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 38876 00006AFD 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 38877                                  
 38878                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 38879                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 38880                                  ; Use the one that we are going to use (ES:DI).
 38881                                  
 38882                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 38883 00006AFF 1E                      	push	ds
 38884 00006B00 56                      	push	si
 38885 00006B01 06                      	push	es
 38886 00006B02 57                      	push	di
 38887 00006B03 E85BD6                  	call	ValidateCDS             ; poke CDS and make everything OK
 38888                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 38889 00006B06 5F                      	pop	di
 38890 00006B07 07                      	pop	es
 38891 00006B08 5E                      	pop	si
 38892 00006B09 1F                      	pop	ds
 38893                                  	;mov	al,3
 38894 00006B0A B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38895                                  	;retc				; someone failed an operation
 38896 00006B0C 72E9                    	jc	short DoFile_retn
 38897                                  
 38898                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 38899                                  ; current directory. Copy it in.
 38900                                  
 38901 00006B0E 1E                      	push	ds
 38902 00006B0F 56                      	push	si
 38903 00006B10 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 38904 00006B15 89FB                    	MOV     BX,DI                   ; point to destination
 38905                                  	;add	bx,[si+79] ; MSDOS 6.0
 38906 00006B17 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 38907                                  	;lea	bp,[di+134]
 38908 00006B1A 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 38909                                  					;AN000;
 38910 00006B1E E8A1A6                  	call	FStrCpy                 ; copy string. ES:DI point to end
 38911 00006B21 4F                      	DEC     DI                      ; point to NUL byte
 38912                                  
 38913                                  ; Make sure that there is a path char at end.
 38914                                  
 38915 00006B22 B05C                    	MOV     AL,'\'
 38916 00006B24 263845FF                	CMP     [ES:DI-1],AL
 38917 00006B28 7401                    	JZ	short GetOrig
 38918 00006B2A AA                      	STOSB
 38919                                  
 38920                                  ; Now get original string.
 38921                                  
 38922                                  GetOrig:
 38923 00006B2B 4F                      	DEC     DI                      ; point to path char
 38924 00006B2C 5E                      	pop	si
 38925 00006B2D 1F                      	pop	ds
 38926                                  
 38927                                  ; BX points to the end of the root part of the CDS (at where a path char
 38928                                  ; should be). Now, we decide whether we use this root or extend it with the
 38929                                  ; current directory. See if the input string begins with a leading 
 38931 00006B2E E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 38932 00006B31 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 38933 00006B33 08C0                    	OR      AL,AL                   ; end of string?
 38934 00006B35 7410                    	JZ	short DoCanon		; yes, skip.
 38935                                  ;
 38936                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 38937                                  ; to this root. Make sure that there is a path char there and advance the
 38938                                  ; source string over all leading \'s.
 38939                                  ;
 38940 00006B37 89DF                    	MOV     DI,BX                   ; back up to root point.
 38941                                  SkipPath:
 38942 00006B39 AC                      	LODSB
 38943 00006B3A E849E4                  	call    PATHCHRCMP
 38944 00006B3D 74FA                    	JZ	short SkipPath
 38945 00006B3F 4E                      	DEC     SI
 38946 00006B40 08C0                    	OR      AL,AL
 38947 00006B42 7403                    	JZ	short DoCanon
 38948                                  
 38949                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 38950                                  ; for yucks.
 38951                                  
 38952                                  PathAssure:
 38953 00006B44 B05C                    	MOV     AL,'\'	; 5Ch
 38954 00006B46 AA                      	STOSB
 38955                                  
 38956                                  ; ES:DI point to the correct spot for canonicalization to begin.
 38957                                  ; BP is the max extent to advance DI
 38958                                  ; BX is the backup limit for ..
 38959                                  
 38960                                  DoCanon:
 38961 00006B47 E85200                  	CALL    Canonicalize            ; wham.
 38962                                  	;retc				; badly formatted path.
 38963 00006B4A 72AB                    	jc	short DoFile_retn
 38964                                  
 38965                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 38966                                  ; to wfp_start and do string substitution. BP is still the max position in
 38967                                  ; buffer.
 38968                                  
 38969 00006B4C 16                      	push	ss
 38970 00006B4D 1F                      	pop	ds
 38971 00006B4E 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 38972 00006B52 C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 38973 00006B56 E81B02                  	CALL    PathPref                ; is there a prefix?
 38974 00006B59 7514                    	JNZ	short DoSplice		; no, do splice
 38975                                  
 38976                                  ; We have a match. Check to see if we ended in a path char.
 38977                                  
 38978 00006B5B 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 38979 00006B5E E825E4                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 38980 00006B61 740C                    	JZ	short DoSplice		; yes, no current dir here.
 38981                                  Pathline:                               ; 2/13/KK
 38982 00006B63 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 38983 00006B67 7406                    	JZ	short DoSplice
 38984 00006B69 47                      	INC     DI                      ; point to after current path char
 38985 00006B6A 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 38986                                  
 38987                                  ; Splice the result.
 38988                                  
 38989                                  DoSplice:
 38990 00006B6F 16                      	push	ss
 38991 00006B70 1F                      	pop	ds			; back to DOSDATA
 38992 00006B71 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 38993 00006B75 31C9                    	XOR     CX,CX
 38994 00006B77 F606[7105]FF            	TEST	byte [FSPLICE],-1
 38995 00006B7C 7403                    	JZ	short SkipSplice
 38996 00006B7E E82A01                  	CALL    Splice                  ; replaces in place.
 38997                                  SkipSplice:
 38998                                  
 38999                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 39000                                  ; device.
 39001                                  
 39002 00006B81 16                      	push	ss
 39003 00006B82 1F                      	pop	ds
 39004 00006B83 C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 39005                                  	;test	word [es:di+67],8000h
 39006                                  	; 17/12/2022
 39007                                  	;test	byte [es:di+68],80h
 39008 00006B87 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 39009                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 39010 00006B8C 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 39011 00006B8E E30B                    	JCXZ    Done
 39012 00006B90 E85AA7                  	call	ECritDisk
 39013 00006B93 E823EA                  	call	FATREAD_CDS
 39014 00006B96 E86FA7                  	call	LCritDisk
 39015                                  	;mov	al, 3
 39016 00006B99 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 39017                                  Done:   
 39018 00006B9B C3                      	retn                         ; any errors in carry flag.
 39019                                  
 39020                                  ; 13/07/2018
 39021                                  
 39022                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 39023                                  ;----------------------------------------------------------------------------
 39024                                  ;   Canonicalize - copy path removing . and .. entries.
 39025                                  ;
 39026                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 39027                                  ;               ES:DI - point to buffer
 39028                                  ;               BX - backup limit (offset from ES) points to slash
 39029                                  ;               BP - end of buffer
 39030                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 39031                                  ;                   syntax, etc.
 39032                                  ;               Carry Clear -
 39033                                  ;                   DS:DI - advanced to end of string
 39034                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 39035                                  ;   Registers modified: AX CX DX (in addition to those above)
 39036                                  ;----------------------------------------------------------------------------
 39037                                  
 39038                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39039                                  
 39040                                  Canonicalize:
 39041                                  
 39042                                  ; We copy all leading path separators.
 39043                                  
 39044 00006B9C AC                      	LODSB                           ;   while (PathChr (*s))
 39045 00006B9D E8E6E3                  	call    PATHCHRCMP
 39046 00006BA0 7507                    	JNZ	short CanonDec
 39047 00006BA2 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 39048 00006BA4 7319                    	JAE	short CanonBad		;           goto error;
 39049 00006BA6 AA                      	STOSB
 39050 00006BA7 EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 39051                                  CanonDec:
 39052 00006BA9 4E                      	DEC     SI
 39053                                  
 39054                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 39055                                  ; component (no leading path separators) and ES:DI being the destination
 39056                                  ; buffer.
 39057                                  
 39058                                  CanonLoop:
 39059                                  
 39060                                  ; If we are at the end of the source string, then we need to check to see that
 39061                                  ; a potential drive specifier is correctly terminated with a path sep char.
 39062                                  ; Otherwise, do nothing
 39063                                  
 39064 00006BAA 31C0                    	XOR     AX,AX
 39065 00006BAC 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 39066 00006BAE 751A                    	JNZ	short DoComponent
 39067 00006BB0 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 39068 00006BB5 7505                    	JNZ	short DoTerminate
 39069 00006BB7 B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 39070 00006BB9 AA                      	STOSB
 39071 00006BBA 88E0                    	MOV     AL,AH
 39072                                  DoTerminate:
 39073 00006BBC AA                      	STOSB                           ;           *d++ = 0;
 39074 00006BBD F8                      	CLC                             ;           return (0);
 39075 00006BBE C3                      	retn
 39076                                  
 39077                                  CanonBad:
 39078 00006BBF E8CB01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 39079                                  	;mov	al,3
 39080 00006BC2 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 39081 00006BC4 7402                    	JZ	short PathEnc		; path character encountered in string
 39082                                  	;mov	al,2
 39083 00006BC6 B002                    	MOV     AL,error_file_not_found ; Set bad file error
 39084                                  PathEnc:
 39085 00006BC8 F9                      	STC
 39086                                  CanonBad_retn:
 39087 00006BC9 C3                      	retn
 39088                                  
 39089                                  ; We have a textual component that we must copy. We uppercase it and truncate
 39090                                  ; it to 8.3
 39091                                  
 39092                                  DoComponent:                            ;           }
 39093 00006BCA E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 39094 00006BCD 72FA                    	jc	short CanonBad_retn	;           return (-1);
 39095                                  
 39096                                  ; We special case the . and .. cases. These will be backed up.
 39097                                  
 39098                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 39099 00006BCF 26833D2E                	CMP	WORD [ES:DI],002Eh
 39100 00006BD3 7408                    	JZ	short Skip1
 39101                                  	;CMP	WORD PTR ES:[DI],'..'
 39102 00006BD5 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 39103 00006BDA 750A                    	JNZ	short CanonNormal
 39104 00006BDC 4F                      	DEC     DI                      ;           d--;
 39105                                  Skip1:  
 39106 00006BDD E82A00                  	CALL    SkipBack                ;           SkipBack ();
 39107                                  	;mov	al,3
 39108 00006BE0 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 39109 00006BE2 72E5                    	jc	short CanonBad_retn
 39110 00006BE4 EB02                    	JMP     short CanonPath         ;           }
 39111                                  
 39112                                  ; We have a normal path. Advance destination pointer over it.
 39113                                  
 39114                                  CanonNormal:                            ;       else
 39115 00006BE6 01CF                    	ADD     DI,CX                   ;           d += ct;
 39116                                  
 39117                                  ; We have successfully copied a component. We are now pointing at a path
 39118                                  ; sep char or are pointing at a nul or are pointing at something else.
 39119                                  ; If we point at something else, then we have an error.
 39120                                  
 39121                                  CanonPath:
 39122 00006BE8 E81600                  	CALL    PathSep
 39123 00006BEB 75D2                    	JNZ	short CanonBad		; something else...
 39124                                  
 39125                                  ; Copy the first path char we see.
 39126                                  
 39127 00006BED AC                      	LODSB                           ; get the char
 39128 00006BEE E895E3                  	call    PATHCHRCMP              ; is it path char?
 39129 00006BF1 75B6                    	JNZ	short CanonDec		; no, go test for nul
 39130 00006BF3 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 39131 00006BF5 73C8                    	JAE	short CanonBad		; yep, error.
 39132 00006BF7 AA                      	STOSB                           ; copy the one byte
 39133                                  
 39134                                  ; Skip all remaining path chars
 39135                                  
 39136                                  CanonPathLoop:
 39137 00006BF8 AC                      	LODSB                           ; get next byte
 39138 00006BF9 E88AE3                  	call    PATHCHRCMP              ; path char again?
 39139 00006BFC 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 39140 00006BFE 4E                      	DEC     SI                      ; back up
 39141 00006BFF EBA9                    	JMP	short  CanonLoop	; go copy component
 39142                                  
 39143                                  ;BREAK <PathSep - determine if char is a path separator>
 39144                                  ;----------------------------------------------------------------------------
 39145                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 39146                                  ;   Inputs:     DS:SI - point to a char
 39147                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 39148                                  ;               Zero set if AL is / \ or NUL
 39149                                  ;               Zero reset otherwise
 39150                                  ;   Registers modified: AL
 39151                                  ;----------------------------------------------------------------------------
 39152                                  
 39153                                  PathSep:
 39154 00006C01 8A04                    	MOV     AL,[SI]                 ; get the character
 39155                                  PathSepGotCh:				; already have character
 39156 00006C03 08C0                    	OR      AL,AL                   ; test for zero
 39157 00006C05 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 39158                                  	;call	PATHCHRCMP              ; check for path character
 39159                                  	;retn				; and return HIS determination
 39160                                  	; 18/12/2022
 39161 00006C07 E97CE3                  	jmp	PATHCHRCMP
 39162                                  
 39163                                  ;BREAK <SkipBack - move backwards to a path separator>
 39164                                  ;----------------------------------------------------------------------------
 39165                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 39167                                  ;               BX has current directory back up limit (point to a / \)
 39168                                  ;   Outputs:    ES:DI backed up to point to a path char
 39169                                  ;               AL has char from output ES:DI (path sep if carry clear)
 39170                                  ;               Carry set if illegal backup
 39171                                  ;               Carry Clear if ok
 39172                                  ;   Registers modified: DI,AL
 39173                                  ;----------------------------------------------------------------------------
 39174                                  
 39175                                  SkipBack:
 39176 00006C0A 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 39177 00006C0C 720B                    	JB	short SkipBad		;       if (d < dlim)
 39178 00006C0E 4F                      	DEC     DI                      ;           goto err;
 39179 00006C0F 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 39180 00006C12 E871E3                  	call    PATHCHRCMP              ;           break;
 39181 00006C15 75F3                    	JNZ	short SkipBack		;       }
 39182 00006C17 F8                      	CLC                             ;   return (0);
 39183 00006C18 C3                      	retn				;
 39184                                  SkipBad:                                ;err:
 39185                                  	;mov	al,3
 39186 00006C19 B003                    	MOV     AL,error_path_not_found ; bad path error
 39187 00006C1B F9                      	STC                             ;   return (-1);
 39188 00006C1C C3                      	retn				;
 39189                                  
 39190                                  ;Break <CopyComponent - copy out a file path component>
 39191                                  ;----------------------------------------------------------------------------
 39192                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 39193                                  ;
 39194                                  ;   Inputs:     DS:SI - source path
 39195                                  ;               ES:DI - destination
 39196                                  ;               ES:BP - end of buffer
 39197                                  ;   Outputs:    Carry Set - too long
 39198                                  ;               Carry Clear - DS:SI moved past component
 39199                                  ;                   CX has length of destination
 39200                                  ;   Registers modified: AX,CX,DX
 39201                                  ;----------------------------------------------------------------------------
 39202                                  
 39203                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39204                                  
 39205                                  CopyComponent:
 39206                                  
 39207                                  %define CopyBP	 [BP]		; word
 39208                                  %define CopyD	 [BP+2]		; dword
 39209                                  %define CopyDoff [BP+2]		; word
 39210                                  %define CopyS	 [BP+6]		; dword
 39211                                  %define CopySoff [BP+6]		; word
 39212                                  %define CopyTemp [BP+10]	; byte
 39213                                  
 39214 00006C1D 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 39215 00006C20 1E                      	push	ds
 39216 00006C21 56                      	push	si
 39217 00006C22 06                      	push	es
 39218 00006C23 57                      	push	di
 39219 00006C24 55                      	push	bp
 39220 00006C25 89E5                    	MOV     BP,SP
 39221 00006C27 B42E                    	MOV     AH,'.'
 39222 00006C29 AC                      	LODSB
 39223 00006C2A AA                      	STOSB
 39224 00006C2B 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 39225 00006C2D 7518                    	JNZ	short NormalComp
 39226 00006C2F E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 39227 00006C32 740B                    	JZ	short NulTerm
 39228                                  TryTwoDot:
 39229 00006C34 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 39230 00006C35 AA                      	STOSB
 39231 00006C36 38E0                    	CMP     AL,AH
 39232 00006C38 7557                    	JNZ	short CopyBad
 39233 00006C3A E8C4FF                  	CALL    PathSep
 39234 00006C3D 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 39235                                  NulTerm:                                ;               return -1;
 39236 00006C3F 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 39237 00006C41 AA                      	STOSB
 39238 00006C42 897606                  	MOV     CopySoff,SI
 39239 00006C45 EB47                    	JMP     SHORT _GoodRet		;       }
 39240                                  NormalComp:                             ;   else {
 39241 00006C47 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 39242 00006C4A E87BE2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 39243 00006C4D 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 39244 00006C50 743F                    	JZ	short CopyBad		;           return (-1);
 39245 00006C52 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 39246 00006C58 7510                    	JNZ	short DoPack
 39247 00006C5A 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 39248 00006C5D 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 39249 00006C62 7F2D                    	JG	short CopyBad		;               return (-1);
 39250 00006C64 7504                    	JNZ	short DoPack		;           else
 39251 00006C66 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 39252 00006C68 742F                    	JZ	short CopyBadPath	;               return (-1);
 39253                                  DoPack:                                 ;           }
 39254 00006C6A 897606                  	MOV     CopySoff,SI ; [bp+6]
 39255 00006C6D 16                      	push	ss
 39256 00006C6E 1F                      	pop	ds
 39257 00006C6F BE[4B05]                	MOV     SI,NAME1
 39258 00006C72 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 39259 00006C75 57                      	push	di
 39260 00006C76 E8F7B3                  	call	PackName                ;       PackName (Name1, temp);
 39261 00006C79 5F                      	pop	di
 39262 00006C7A E84EA5                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 39263 00006C7D 49                      	DEC     CX
 39264 00006C7E 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 39265                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39266                                  	;cmp	cx,[bp+0]
 39267                                  	; 15/12/2022
 39268                                  	;cmp	cx,[bp]
 39269 00006C81 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 39270 00006C84 730B                    	JAE	short CopyBad		;           return (-1);
 39271 00006C86 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 39272 00006C88 C47E02                  	LES     DI,CopyD    ; [bp+2]	
 39273 00006C8B E834A5                  	call	FStrCpy
 39274                                  _GoodRet:				;       }
 39275 00006C8E F8                      	CLC
 39276 00006C8F EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 39277                                  CopyBad:
 39278 00006C91 F9                      	STC
 39279 00006C92 E8F800                  	CALL    ScanPathChar            ; check for path chars in rest of string
 39280                                  	;mov	al,2
 39281 00006C95 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 39282 00006C97 7503                    	JNZ	short CopyEnd
 39283                                  CopyBadPath:
 39284 00006C99 F9                      	STC
 39285                                  	;mov	al,3
 39286 00006C9A B003                    	MOV     AL,error_path_not_found ; Set bad path error
 39287                                  CopyEnd:
 39288 00006C9C 5D                      	pop	bp
 39289 00006C9D 5F                      	pop	di
 39290 00006C9E 07                      	pop	es
 39291 00006C9F 5E                      	pop	si
 39292 00006CA0 1F                      	pop	ds
 39293 00006CA1 9F                      	LAHF
 39294 00006CA2 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 39295 00006CA5 E823A5                  	call	StrLen
 39296 00006CA8 49                      	DEC     CX
 39297 00006CA9 9E                      	SAHF
 39298 00006CAA C3                      	retn
 39299                                  
 39300                                  ; 14/05/2019 - Retro DOS v4.0
 39301                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 39302                                  
 39303                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39304                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 39305                                  
 39306                                  ;Break <Splice - pseudo mount by string substitution>
 39307                                  ;----------------------------------------------------------------------------
 39308                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 39309                                  ;       ThisCDS to point to physical drive CDS.
 39310                                  ;   Inputs:     DS:SI point to string
 39311                                  ;               NoSetDir = TRUE => exact matches with splice fail
 39312                                  ;   Outputs:    DS:SI points to thisCDS
 39313                                  ;               ES:DI points to DPB
 39314                                  ;               String at DS:SI may be reduced in length by removing prefix
 39315                                  ;               and substituting drive letter.
 39316                                  ;               CX = 0 If no splice done
 39317                                  ;               CX <> 0 otherwise
 39318                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 39319                                  ;                   left alone
 39320                                  ;               ThisDPB points to proper DPB
 39321                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 39322                                  ;----------------------------------------------------------------------------
 39323                                  
 39324                                  Splice:
 39325 00006CAB 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 39326 00006CB1 7469                    	JZ	short AllDone
 39327 00006CB3 36FF36[A205]            	push	word [SS:THISCDS]
 39328 00006CB8 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 39329 00006CBD 1E                      	push	ds
 39330 00006CBE 56                      	push	si
 39331 00006CBF 5F                      	pop	di
 39332 00006CC0 07                      	pop	es
 39333 00006CC1 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 39334                                  SpliceScan:
 39335 00006CC3 E8DFFC                  	call	GetCDSFromDrv
 39336 00006CC6 724A                    	JC	short SpliceDone
 39337 00006CC8 FEC0                    	INC     AL
 39338                                  	; 17/12/2022
 39339                                  	;test	byte [si+68],20h
 39340 00006CCA F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 39341                                  	;;test	word [si+67],2000h
 39342                                  	;TEST	word [SI+curdir.flags],curdir_splice
 39343 00006CCE 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 39344 00006CD0 57                      	push	di
 39345 00006CD1 E8A000                  	CALL    PathPref                ;           if (!PathPref (s, d))
 39346 00006CD4 7403                    	JZ	short SpliceFound	;
 39347                                  SpliceSkip:
 39348 00006CD6 5F                      	pop	di
 39349 00006CD7 EBEA                    	JMP	short SpliceScan	;               continue;
 39350                                  SpliceFound:
 39351 00006CD9 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 39352 00006CDD 7508                    	JNZ	short SpliceDo
 39353 00006CDF 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 39354 00006CE5 75EF                    	JNZ	short SpliceSkip
 39355                                  SpliceDo:
 39356 00006CE7 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 39357 00006CE9 06                      	push	es
 39358 00006CEA 1F                      	pop	ds
 39359 00006CEB 5F                      	pop	di
 39360 00006CEC E87F00                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 39361 00006CEF 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 39362 00006CF3 09C0                    	OR      AX,AX
 39363 00006CF5 7808                    	JS	short NoPoke
 39364 00006CF7 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 39365 00006CF9 29F0                    	SUB     AX,SI
 39366 00006CFB 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 39367                                  NoPoke:
 39368 00006CFF 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 39369 00006D02 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 39370 00006D04 B05C                    	MOV     AL,"\"
 39371 00006D06 AA                      	STOSB
 39372                                  SpliceCopy:                             ;               strcpy (src, p);
 39373 00006D07 E8B8A4                  	call	FStrCpy
 39374 00006D0A 83C404                  	ADD     SP,4                    ; throw away saved stuff
 39375 00006D0D 80C901                  	OR      CL,1                    ; signal splice done.
 39376 00006D10 EB0C                    	JMP     SHORT DoSet             ;               return;
 39377                                  SpliceDone:                             ;               }
 39378 00006D12 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 39379 00006D17 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 39380                                  AllDone:
 39381 00006D1C 31C9                    	XOR     CX,CX
 39382                                  DoSet:
 39383 00006D1E 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 39384                                  	;les	di,[si+69]
 39385 00006D23 C47C45                  	LES     DI,[SI+curdir.devptr]	
 39386 00006D26 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 39387 00006D2B 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 39388                                  Splice_retn:
 39389 00006D30 C3                      	retn
 39390                                  
 39391                                  ; 15/05/2019 - Retro DOS v4.0
 39392                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 39393                                  
 39394                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39395                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 39396                                  
 39397                                  ;Break <$NameTrans - partially process a name>
 39398                                  ;----------------------------------------------------------------------------
 39399                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 39400                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 39401                                  ;   to Transpath playing games with devices, we need to insure that the output
 39402                                  ;   has drive letter and : in it.
 39403                                  ;
 39404                                  ;   Inputs:     DS:SI - source string for translation
 39405                                  ;               ES:DI - pointer to buffer
 39406                                  ;   Outputs:
 39407                                  ;       Carry Clear
 39408                                  ;               Buffer at ES:DI is filled in with data
 39409                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 39410                                  ;       Carry Set
 39411                                  ;               AX = error_path_not_found
 39412                                  ;   Registers modified: all
 39413                                  ;----------------------------------------------------------------------------
 39414                                  
 39415                                  _$NameTrans:
 39416 00006D31 1E                      	push	ds
 39417 00006D32 56                      	push	si
 39418 00006D33 06                      	push	es
 39419 00006D34 57                      	push	di
 39420 00006D35 51                      	push	cx ; MSDOS 6.0
 39421                                  	
 39422                                  	; MSDOS 6.0	
 39423                                  ; M027 - Start
 39424                                  ;
 39425                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 39426                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 39427                                  ; device if the old call set the volume attribute bit. Note that devname in
 39428                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 39429                                  ; and restore CX.
 39430                                  
 39431                                  	;mov	ch,16h
 39432 00006D36 B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 39433 00006D38 E8B402                  	call	SetAttrib
 39434                                  
 39435                                  ; M027 - End
 39436                                  
 39437                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39438 00006D3B BF[BE03]                	MOV     DI,OPENBUF
 39439 00006D3E E8E6FC                  	CALL    TransPath               ; to translation (everything)
 39440 00006D41 59                      	pop	cx ; MSDOS 6.0
 39441 00006D42 5F                      	pop     di
 39442 00006D43 07                      	pop	es
 39443 00006D44 5E                      	pop     si
 39444 00006D45 1F                      	pop     ds
 39445 00006D46 7303                    	JNC	short TransOK
 39446 00006D48 E9EF98                  	jmp	SYS_RET_ERR
 39447                                  TransOK:
 39448 00006D4B BE[BE03]                	MOV     SI,OPENBUF
 39449 00006D4E 16                      	push	ss
 39450 00006D4F 1F                      	pop	ds
 39451                                  ;GotText:
 39452 00006D50 E86FA4                  	call	FStrCpy
 39453 00006D53 E9DB98                  	jmp	SYS_RET_OK
 39454                                  
 39455                                  ;Break   <DriveFromText - return drive number from a text string>
 39456                                  ;----------------------------------------------------------------------------
 39457                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 39458                                  ;   pointer.
 39459                                  ;
 39460                                  ;   Inputs:     DS:SI point to a text string
 39461                                  ;   Outputs:    AL has drive number
 39462                                  ;               DS:SI advanced
 39463                                  ;   Registers modified: AX,SI.
 39464                                  ;----------------------------------------------------------------------------
 39465                                  
 39466                                  DriveFromText:
 39467 00006D56 30C0                    	XOR     AL,AL                   ;       drive = 0;
 39468                                  	;CMP	BYTE [SI],0		;       if (*s &&
 39469                                  	; 23/09/2023
 39470 00006D58 3804                    	cmp	[si],al ; 0
 39471 00006D5A 74D4                    	jz	short Splice_retn
 39472 00006D5C 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 39473 00006D60 75CE                    	jnz	short Splice_retn
 39474 00006D62 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 39475 00006D63 0C20                    	OR      AL,20h
 39476                                  	;sub	al,60h
 39477 00006D65 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 39478 00006D67 75C7                    	jnz	short Splice_retn
 39479 00006D69 B0FF                    	MOV	AL,-1                   ; nuke AL...
 39480                                  	; 23/09/2023
 39481                                  	;dec	al ; -1
 39482 00006D6B C3                      	retn				;           }
 39483                                  
 39484                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 39485                                  ;----------------------------------------------------------------------------
 39486                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 39487                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 39488                                  ;
 39489                                  ;   Inputs:     AL has 0-based drive number
 39490                                  ;   Outputs:    ES:DI advanced
 39491                                  ;   Registers modified: AX
 39492                                  ;----------------------------------------------------------------------------
 39493                                  
 39494                                  TextFromDrive:
 39495 00006D6C FEC0                    	INC     AL
 39496                                  TextFromDrive1:
 39497                                  	;add	al,40h
 39498 00006D6E 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 39499 00006D70 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 39500 00006D72 AB                      	STOSW
 39501                                  PathPref_retn:
 39502 00006D73 C3                      	retn
 39503                                  
 39504                                  ;Break   <PathPref - see if one path is a prefix of another>
 39505                                  ;----------------------------------------------------------------------------
 39506                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 39507                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 39508                                  ;   prefix: A:\ and A:\FOO
 39509                                  ;
 39510                                  ;   Inputs:     DS:SI potential prefix
 39511                                  ;               ES:DI string
 39512                                  ;   Outputs:    Zero set => prefix found
 39513                                  ;                   DI/SI advanced past matching part
 39514                                  ;               Zero reset => no prefix, DS/SI garbage
 39515                                  ;   Registers modified: CX
 39516                                  ;----------------------------------------------------------------------------
 39517                                  
 39518                                  PathPref:
 39519 00006D74 E862A4                  	call	DStrLen                 ; get length
 39520 00006D77 49                      	DEC     CX                      ; do not include nul byte
 39521 00006D78 F3A6                    	REPZ    CMPSB                   ; compare
 39522 00006D7A 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 39523 00006D7C 50                      	push	ax			; save char register
 39524 00006D7D 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 39525 00006D80 E803E2                  	call    PATHCHRCMP              ; is it a path char (Root!)
 39526 00006D83 7406                    	JZ	short Prefix		; yes, match root (I hope)
 39527                                  NotSep:                                 ; 2/13/KK
 39528 00006D85 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 39529 00006D88 E878FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 39530                                  Prefix:
 39531 00006D8B 58                      	pop	ax			; get back original
 39532 00006D8C C3                      	retn
 39533                                  
 39534                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 39535                                  ;----------------------------------------------------------------------------
 39536                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 39537                                  ;     a path separator.
 39538                                  ;
 39539                                  ;     Input:    DS:SI target string (null terminated)
 39540                                  ;     Output:   Zero set => path separator encountered in string
 39541                                  ;               Zero clear => null encountered
 39542                                  ;     Registers modified: SI
 39543                                  ;----------------------------------------------------------------------------
 39544                                  
 39545                                  ScanPathChar:
 39546 00006D8D AC                      	LODSB                           ; fetch a character
 39547 00006D8E E872FE                  	call    PathSepGotCh
 39548 00006D91 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 39549                                  	;call	PATHCHRCMP              ; path separator?
 39550                                  	;retn
 39551                                  	; 18/12/2022
 39552 00006D93 E9F0E1                  	jmp	PATHCHRCMP
 39553                                  
 39554                                  ;============================================================================
 39555                                  ; FILE.ASM, MSDOS 6.0, 1991
 39556                                  ;============================================================================
 39557                                  ; 14/07/2018 - Retro DOS v3.0
 39558                                  
 39559                                  ; 13/05/2019 - Retro DOS v4.0
 39560                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 39561                                  
 39562                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39563                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 39564                                  
 39565                                  ; MSDOS 2.11
 39566                                  ;BREAK <$Open - open a file handle>
 39567                                  ;----------------------------------------------------------------------------
 39568                                  ;   Assembler usage:
 39569                                  ;           LDS     DX, Name
 39570                                  ;           MOV     AH, Open
 39571                                  ;           MOV     AL, access
 39572                                  ;           INT     int_command
 39573                                  ;
 39574                                  ;       ACCESS          Function
 39575                                  ;       ------          --------
 39576                                  ;       open_for_read   file is opened for reading
 39577                                  ;       open_for_write  file is opened for writing
 39578                                  ;       open_for_both   file is opened for both reading and writing.
 39579                                  ;
 39580                                  ;   Error returns:
 39581                                  ;           AX = error_invalid_access
 39582                                  ;              = error_file_not_found
 39583                                  ;              = error_access_denied
 39584                                  ;              = error_too_many_open_files
 39585                                  ;----------------------------------------------------------------------------
 39586                                  
 39587                                  ; MSDOS 6.0
 39588                                  ;	BREAK <$Open - open a file from a path string>
 39589                                  ;----------------------------------------------------------------------------
 39590                                  ;
 39591                                  ;**	$OPen - Open a File
 39592                                  ;
 39593                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 39594                                  ;	file and and returns a handle
 39595                                  ;
 39596                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 39597                                  ;		(AL) = open mode
 39598                                  ;	EXIT	'C' clear if OK
 39599                                  ;		  (ax) = file handle
 39600                                  ;		'C' set if error
 39601                                  ;		  (ax) = error code
 39602                                  ;	USES	all
 39603                                  ;
 39604                                  ;----------------------------------------------------------------------------
 39605                                  
 39606                                  ; 13/05/2019 - Retro DOS v4.0
 39607                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39608                                  
 39609                                  _$OPEN:       
 39610 00006D96 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 39611                                  _$Open2:
 39612                                  	;mov	ch,16h
 39613 00006D98 B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 39614 00006D9A E85202                  	call	SetAttrib
 39615 00006D9D B9[F22A]                	mov	cx,DOS_OPEN
 39616                                  
 39617                                  	;xor	ah,ah  ; MSDOS 3.3
 39618                                  
 39619 00006DA0 50                      	push	ax
 39620                                  
 39621                                  ;*	General file open/create code. The $CREATE call and the various
 39622                                  ;	$OPEN calls all come here.
 39623                                  ;
 39624                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 39625                                  ;	path names, etc., and then dispatch to our individual handlers.
 39626                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 39627                                  ;
 39628                                  ;	(TOS) = create mode
 39629                                  ;	(CX) = address of routine to call to do actual function
 39630                                  ;	(DS:DX) = ASCIZ name
 39631                                  ;	SAttrib = Attribute mask
 39632                                  
 39633                                  ;	Get a free SFT and mark it "being allocated"
 39634                                  
 39635                                  AccessFile:
 39636 00006DA1 E849A5                  	call	ECritSFT
 39637 00006DA4 E8EAF7                  	call	SFNFree			; get a free sfn
 39638 00006DA7 E85EA5                  	call	LCritSFT
 39639 00006DAA 7214                    	jc	short OpenFailJ		; oops, no free sft's
 39640 00006DAC 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 39641 00006DB1 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 39642 00006DB6 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 39643                                  
 39644                                  ;	Find a free area in the user's JFN table.
 39645                                  
 39646 00006DBB E8C0F7                  	call	JFNFree			; get a free jfn
 39647 00006DBE 7303                    	jnc	short SaveJFN
 39648                                  OpenFailJ:
 39649 00006DC0 E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 39650                                  
 39651                                  SaveJFN:
 39652 00006DC3 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 39653 00006DC8 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 39654 00006DCD 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 39655                                  
 39656                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 39657                                  ;	reusing the same JFN.
 39658                                  
 39659 00006DD2 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 39660 00006DD7 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 39661 00006DDA 89D6                    	MOV	SI,DX			; get name in appropriate place
 39662 00006DDC BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39663 00006DDF 51                      	push	cx			; save routine to call
 39664 00006DE0 E844FC                  	call	TransPath		; convert the path
 39665 00006DE3 5B                      	pop	bx			; (bx) = routine to call
 39666                                  
 39667 00006DE4 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 39668                                  	;JC	short OpenCleanJ	; no error, go and open file
 39669                                  	; 14/03/2024
 39670 00006DE9 725C                    	jc	short OpenClean
 39671                                  
 39672 00006DEB 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 39673 00006DF1 7404                    	JZ	short SetSearch
 39674                                  	;mov	al,2
 39675 00006DF3 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 39676                                  OpenCleanJ:
 39677 00006DF5 EB50                    	JMP	short OpenClean
 39678                                  
 39679                                  SetSearch:
 39680 00006DF7 58                      	pop	ax			; Mode (Open), Attributes (Create)
 39681                                  
 39682                                  ;	We need to get the new inheritance bits.
 39683                                  
 39684 00006DF8 31C9                    	xor	cx,cx
 39685                                  	; MSDOS 6.0
 39686                                  	;mov	[si+2],cx ; 0
 39687 00006DFA 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 39688                                  	;mov    [si+51],cx ; 0
 39689 00006DFD 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 39690                                  	;
 39691 00006E00 81FB[F22A]              	CMP	BX,DOS_OPEN
 39692 00006E04 7509                    	JNZ	short _DoOper
 39693                                  	;test   al,80h
 39694 00006E06 A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 39695 00006E08 7405                    	JZ	short _DoOper ; 10/08/2018
 39696 00006E0A 247F                    	AND	AL,7Fh			; mask off inherit bit
 39697                                  	;mov	cx,1000h
 39698 00006E0C B90010                  	MOV	CX,sf_no_inherit
 39699                                  _DoOper:
 39700                                  	;; MSDOS 3.3
 39701                                  	;;mov	word [si+2], 0
 39702                                  	;;mov	word [si+33h], 0
 39703                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 39704                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 39705                                  
 39706                                  	; MSDOS 6.0
 39707                                  ;**	Check if this is an extended open. If so you must set the
 39708                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 39709                                  ;	Set_EXT_mode in creat.asm
 39710                                  
 39711                                  	; MSDOS 6.0
 39712                                  	;SAVE	<di, es>                ;M022 conditional removed here
 39713 00006E0F 57                      	push	di
 39714 00006E10 06                      	push	es
 39715 00006E11 1E                      	push	ds
 39716 00006E12 07                      	pop	es
 39717 00006E13 56                      	push	si
 39718 00006E14 5F                      	pop	di			; (es:di) = SFT address
 39719 00006E15 E8C6BC                  	call	Set_EXT_mode
 39720                                  	;RESTORE <es, di>
 39721 00006E18 07                      	pop	es
 39722 00006E19 5F                      	pop	di
 39723                                  
 39724                                  	;Context DS
 39725 00006E1A 16                      	push	ss
 39726 00006E1B 1F                      	pop	ds	
 39727                                  
 39728 00006E1C 51                      	push	cx
 39729 00006E1D FFD3                    	CALL	BX			; blam!
 39730 00006E1F 59                      	pop	cx
 39731 00006E20 C536[9E05]              	LDS	SI,[THISSFT]
 39732 00006E24 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 39733                                  	;jc	short OpenE ; MSDOS 3.3
 39734                                  
 39735                                  ;	The SFT was successfully opened. Remove busy mark.
 39736                                  
 39737                                  OpenOK:
 39738                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 39739 00006E26 C7040100                	mov	word [SI],1
 39740                                  	;or	[SI+5],cx
 39741 00006E2A 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 39742                                  
 39743                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 39744                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 39745                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 39746                                  ;
 39747                                  ; Since this is only relevant on sharer systems, we stick this code into the
 39748                                  ; sharer.
 39749                                  
 39750 00006E2D 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 39751 00006E31 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 39752                                  
 39753 00006E36 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 39754                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39755                                  OpenOkj:
 39756 00006E3D E9F197                  	jmp	SYS_RET_OK		; bye with no errors
 39757                                  
 39758                                  	; MSDOS 6.0
 39759                                  ;Extended Open hooks check
 39760                                  OpenE2:					;AN000;;EO.
 39761 00006E40 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 39762 00006E43 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 39763 00006E45 EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 39764                                  
 39765                                  ;	Extended Open hooks check
 39766                                  ;
 39767                                  ;	AL has error code. Stack has argument to dos_open/dos_create.
 39768                                  
 39769                                  OpenClean:
 39770 00006E47 5B                      	pop	bx			; clean off stack
 39771                                  OpenE:
 39772                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 39773 00006E48 C7040000                	mov	word [SI],0
 39774 00006E4C 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 39775 00006E51 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 39776 00006E54 EB02                    	JMP	SHORT OpenCritLeave
 39777                                  
 39778                                  OpenFail:
 39779 00006E56 FB                      	STI
 39780 00006E57 59                      	pop	cx			; Clean stack
 39781                                  OpenCritLeave:
 39782 00006E58 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 39783                                  
 39784                                  	; MSDOS 6.0
 39785                                  ; File Tagging DOS 4.00
 39786 00006E5F 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 39787                                  					;AN000;;FT. code page mismatch
 39788 00006E65 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 39789 00006E67 E9D897                  	jmp	From_GetSet		;AN000;;FT. yes
 39790                                  NORERR: 				;AN000;
 39791                                  ; File Tagging DOS 4.00
 39792                                  
 39793 00006E6A E9CD97                  	jmp	SYS_RET_ERR		; no free, return error
 39794                                  
 39795                                  ; MSDOS 2.11
 39796                                  ;BREAK <$CREAT - creat a new file and open him for input>
 39797                                  ;----------------------------------------------------------------------------
 39798                                  ;   Assembler usage:
 39799                                  ;           LDS     DX, name
 39800                                  ;           MOV     AH, Creat
 39801                                  ;           MOV     CX, access
 39802                                  ;           INT     21h
 39803                                  ;       ; AX now has the handle
 39804                                  ;
 39805                                  ;   Error returns:
 39806                                  ;           AX = error_access_denied
 39807                                  ;              = error_path_not_found
 39808                                  ;              = error_too_many_open_files
 39809                                  ;----------------------------------------------------------------------------
 39810                                  
 39811                                  ; MSDOS 6.0
 39812                                  ;	BREAK <$Creat - create a brand-new file>
 39813                                  ;----------------------------------------------------------------------------
 39814                                  ;
 39815                                  ;**	$Creat - Create a File
 39816                                  ;
 39817                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 39818                                  ;	initial attributes contained in CX
 39819                                  ;
 39820                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 39821                                  ;		(CX) = initial attributes
 39822                                  ;	EXIT	'C' set if error
 39823                                  ;		  (ax) = error code
 39824                                  ;		'C' clear if OK
 39825                                  ;		  (ax) = file handle
 39826                                  ;	USES	all
 39827                                  ;
 39828                                  ;----------------------------------------------------------------------------
 39829                                  
 39830                                  _$CREAT:
 39831 00006E6D 51                      	push	cx			; Save attributes on stack
 39832 00006E6E B9[CC29]                	mov	CX,DOS_CREATE		; routine to call
 39833                                  AccessSet:
 39834                                  	;mov	byte [ss:SATTRIB],6
 39835 00006E71 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 39836                                  	; 10/08/2018
 39837 00006E77 E927FF                  	JMP	AccessFile		; use good ol' open
 39838                                  
 39839                                  ; MSDOS 6.0 (MSDOS 3.3)
 39840                                  ;	BREAK <$CHMOD - change file attributes>
 39841                                  ;----------------------------------------------------------------------------
 39842                                  ;
 39843                                  ;**	$CHMOD - Change File Attributes
 39844                                  ;
 39845                                  ;   Assembler usage:
 39846                                  ;	    LDS     DX, name
 39847                                  ;	    MOV     CX, attributes
 39848                                  ;	    MOV     AL,func (0=get, 1=set)
 39849                                  ;	    INT     21h
 39850                                  ;   Error returns:
 39851                                  ;	    AX = error_path_not_found
 39852                                  ;	    AX = error_access_denied
 39853                                  ;
 39854                                  ;----------------------------------------------------------------------------
 39855                                  
 39856                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39857                                  _$CHMOD:
 39858                                  	; 05/08/2018 - Retro DOS v3.0
 39859                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 39860 00006E7A BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39861 00006E7D 50                      	push	ax
 39862 00006E7E 51                      	push	cx			; save function and attributes
 39863 00006E7F 89D6                    	MOV	SI,DX			; get things in appropriate places
 39864 00006E81 E8A7FB                  	call	TransPathSet		; get correct path
 39865 00006E84 59                      	pop	cx
 39866 00006E85 58                      	pop	ax			; and get function and attrs back
 39867 00006E86 7257                    	JC	short ChModErr		; errors get mapped to path not found
 39868 00006E88 16                      	push	ss			; set up for later possible calls
 39869 00006E89 1F                      	pop	ds
 39870 00006E8A 803E[7A05]FF            	CMP	byte [CMETA],-1
 39871 00006E8F 754E                    	JNZ	short ChModErr
 39872                                  	;mov	byte [SATTRIB],16h
 39873 00006E91 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 39874 00006E96 2C01                    	SUB	AL,1			; fast way to discriminate
 39875 00006E98 720B                    	JB	short ChModGet		; 0 -> go get value
 39876 00006E9A 7417                    	JZ	short ChModSet		; 1 -> go set value
 39877                                  	;mov	byte [EXTERR_LOCUS],1
 39878 00006E9C C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 39879                                  	;mov	al,1
 39880 00006EA1 B001                    	mov	al,error_invalid_function ; bad value
 39881                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39882                                  chmod_errj:	
 39883                                  	;;jmp	SYS_RET_ERR
 39884                                  	;jmp	short ChModE	
 39885 00006EA3 EBC5                    	jmp	short NORERR	; 06/12/2022
 39886                                  ChModGet:
 39887 00006EA5 E80FBA                  	call	GET_FILE_INFO		; suck out the ol' info
 39888 00006EA8 7237                    	JC	short ChModE		; error codes are already set for ret
 39889 00006EAA E8D495                  	call	Get_User_Stack		; point to user saved vaiables
 39890                                  	;mov	[SI+4],ax
 39891 00006EAD 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 39892                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39893                                  OpenOkj2:
 39894                                  	; 17/12/2022
 39895                                  	;;jmp	SYS_RET_OK		; say sayonara
 39896                                  	;jmp	short OpenOkj
 39897                                  	; 25/06/2019
 39898 00006EB0 E98197                  	jmp	SYS_RET_OK_clc
 39899                                  
 39900                                  ChModSet:
 39901 00006EB3 89C8                    	MOV	AX,CX			; get attrs in position
 39902 00006EB5 E85DBA                  	call	SET_FILE_ATTRIBUTE	; go set
 39903 00006EB8 7227                    	JC	short ChModE		; errors are set
 39904                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 39905                                  	;jmp	SYS_RET_OK
 39906                                  OpenOkj3:
 39907                                  	;jmp	short OpenOkj2
 39908                                  	; 17/12/2022
 39909 00006EBA E97497                  	jmp	SYS_RET_OK
 39910                                  
 39911                                  ; 17/12/2022
 39912                                  %if 0
 39913                                  ChModErr:
 39914                                  NotFound:	; 17/12/2022
 39915                                  	;mov	al,3
 39916                                  	mov	al,error_path_not_found
 39917                                  ChModE:
 39918                                  UnlinkE:	; 17/12/2022
 39919                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39920                                  	;;jmp	SYS_RET_ERR
 39921                                  	;jmp	short chmod_errj
 39922                                  	; 17/12/2022
 39923                                  	jmp	short NORERR
 39924                                  %endif
 39925                                  
 39926                                  ; 22/05/2019 - Retro DOS v4.0
 39927                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 39928                                  
 39929                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39930                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 39931                                  
 39932                                  ;	BREAK <$UNLINK - delete a file entry>
 39933                                  ;----------------------------------------------------------------------------
 39934                                  ;
 39935                                  ;**	$UNLINK - Delete a File
 39936                                  ;
 39937                                  ;
 39938                                  ;	Assembler usage:
 39939                                  ;	    LDS     DX, name
 39940                                  ;	    IF VIA SERVER DOS CALL
 39941                                  ;	     MOV     CX,SEARCH_ATTRIB
 39942                                  ;	    MOV     AH, Unlink
 39943                                  ;	    INT     21h
 39944                                  ;
 39945                                  ;	ENTRY	(ds:dx) = path name
 39946                                  ;		(cx) = search_attribute, if via server_dos
 39947                                  ;	EXIT	'C' clear if no error
 39948                                  ;		'C' set if error
 39949                                  ;		  (ax) = error code
 39950                                  ;			= error_file_not_found
 39951                                  ;			= error_access_denied
 39952                                  ;
 39953                                  ;----------------------------------------------------------------------------
 39954                                  
 39955                                  _$UNLINK:
 39956 00006EBD 51                      	push	cx			; Save possible CX input parm
 39957 00006EBE 89D6                    	MOV	SI,DX			; Point at input string
 39958 00006EC0 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 39959 00006EC3 E865FB                  	call	TransPathSet		; go get normalized path
 39960 00006EC6 59                      	pop	cx
 39961 00006EC7 7216                    	JC	short ChModErr		; badly formed path
 39962 00006EC9 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 39963 00006ECF 750E                    	JNZ	short NotFound
 39964 00006ED1 16                      	push	ss
 39965 00006ED2 1F                      	pop	ds
 39966                                  	;mov	ch,6
 39967 00006ED3 B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 39968 00006ED5 E81701                  	call	SetAttrib
 39969 00006ED8 E8DEB5                  	call	DOS_DELETE		; remove that file
 39970                                  	;JC	short UnlinkE 		; error is there
 39971                                  	; 17/12/2022
 39972 00006EDB 728D                    	jc	short NORERR
 39973                                  
 39974                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39975                                  UnlinkOk:
 39976                                  	;jmp	SYS_RET_OK		; okey doksy
 39977 00006EDD EBDB                    	jmp	short OpenOkj3
 39978                                  
 39979                                  	; 17/12/2022
 39980                                  ChModErr:	; 17/12/2022
 39981                                  NotFound:
 39982                                  	;mov	al,3
 39983 00006EDF B003                    	MOV	AL,error_path_not_found
 39984                                  ChModE:		; 17/12/2022
 39985                                  UnlinkE:
 39986                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39987                                  	;;jmp	SYS_RET_ERR		; bye
 39988                                  	;jmp	short ChModE
 39989                                  	; 17/12/2022
 39990 00006EE1 EB87                    	jmp	short NORERR
 39991                                  
 39992                                  ;BREAK <$RENAME - move directory entries around>
 39993                                  ;----------------------------------------------------------------------------
 39994                                  ;
 39995                                  ;   Assembler usage:
 39996                                  ;	    LDS     DX, source
 39997                                  ;	    LES     DI, dest
 39998                                  ;	    IF VIA SERVER DOS CALL
 39999                                  ;	      MOV   CX,SEARCH_ATTRIB
 40000                                  ;	    MOV     AH, Rename
 40001                                  ;	    INT     21h
 40002                                  ;
 40003                                  ;   Error returns:
 40004                                  ;	    AX = error_file_not_found
 40005                                  ;	       = error_not_same_device
 40006                                  ;	       = error_access_denied
 40007                                  ;
 40008                                  ;----------------------------------------------------------------------------
 40009                                  
 40010                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40011                                  _$RENAME:
 40012                                  	; MSDOS 3.3 (& MSDOS 6.0)
 40013 00006EE3 51                      	push	cx
 40014 00006EE4 1E                      	push	ds
 40015 00006EE5 52                      	push	dx			; save source and possible CX arg
 40016 00006EE6 06                      	PUSH	ES
 40017 00006EE7 1F                      	POP	DS			; move dest to source
 40018 00006EE8 89FE                    	MOV	SI,DI			; save for offsets
 40019 00006EEA BF[3E04]                	MOV	DI,RENBUF
 40020 00006EED E83BFB                  	call	TransPathSet		; munge the paths
 40021 00006EF0 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 40022 00006EF5 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 40023 00006EFA 5E                      	pop	si
 40024 00006EFB 1F                      	pop	ds
 40025 00006EFC 59                      	pop	cx			; get back source and possible CX arg
 40026                                  epjc2:	
 40027 00006EFD 72E0                    	JC	short ChModErr		; get old error
 40028 00006EFF 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 40029 00006F05 75D8                    	JNZ	short NotFound
 40030 00006F07 51                      	push	cx			; Save possible CX arg
 40031 00006F08 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 40032 00006F0B E81DFB                  	call	TransPathSet		; wham
 40033 00006F0E 59                      	pop	cx
 40034                                  	;JC	short epjc2
 40035                                  	; 15/03/2024
 40036 00006F0F 72CE                    	jc	short ChModErr
 40037                                  
 40038 00006F11 16                      	push	ss
 40039 00006F12 1F                      	pop	ds
 40040 00006F13 803E[7A05]FF            	CMP	byte [CMETA],-1
 40041 00006F18 72C5                    	JB	short NotFound
 40042                                  
 40043                                  	; MSDOS 6.0
 40044                                  	;PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 40045                                  	;PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 40046                                  	; 15/03/2024
 40047                                  	;;;
 40048 00006F1A C43E[A205]              	les	di,[THISCDS]
 40049 00006F1E 57                      	push	di
 40050 00006F1F 06                      	push	es
 40051                                  	;;;
 40052                                  
 40053 00006F20 BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 40054 00006F23 16                      	PUSH	SS			   ;AN000;;MS.
 40055 00006F24 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 40056 00006F25 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 40057                                  rnloop:					   ;AN000;
 40058 00006F27 E87BFA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 40059 00006F2A 720F                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 40060 00006F2C E862A2                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 40061 00006F2F 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 40062 00006F31 FEC0                    	INC	AL			   ;AN000;;MS.	next
 40063 00006F33 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 40064                                  rnerr:					   ;AN000;
 40065                                  	;ADD	SP,4			   ;AN000;;MS. pop thiscds
 40066                                  	; 15/03/2024 (PCDOS 7.1 IBMDOS.COM)
 40067 00006F35 58                      	pop	ax
 40068 00006F36 58                      	pop	ax
 40069                                  
 40070                                  	;error	error_current_directory    ;AN000;;MS.
 40071 00006F37 B010                    	mov	al,error_current_directory 
 40072                                  	;jmp	SYS_RET_ERR
 40073                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40074 00006F39 EBA6                    	jmp	short UnlinkE
 40075                                  dorn:
 40076                                  
 40077                                  ; 15/03/2024
 40078                                  %if 0					   ;AN000;
 40079                                  	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 40080                                  	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 40081                                  %endif
 40082 00006F3B 16                      	push	ss
 40083 00006F3C 1F                      	pop	ds
 40084                                  
 40085                                  ; 15/03/2024
 40086                                  %if 1
 40087 00006F3D 8F06[A405]              	pop	word [THISCDS+2]
 40088 00006F41 8F06[A205]              	pop	word [THISCDS]
 40089                                  %endif
 40090                                  	; MSDOS 3.3 (& MSDOS 6.0)
 40091                                  	;mov	ch,16h
 40092 00006F45 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 40093                                  					; rename appropriate files
 40094 00006F47 E8A500                  	call	SetAttrib
 40095 00006F4A E840B7                  	call	DOS_RENAME		; do the deed
 40096 00006F4D 7292                    	JC	short UnlinkE 		; errors
 40097                                  
 40098                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40099                                  	;jmp	SYS_RET_OK
 40100 00006F4F EB8C                    	jmp	short UnlinkOk
 40101                                  
 40102                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40103                                  
 40104                                  ; 14/07/2018 - Retro DOS v3.0
 40105                                  ; MSDOS 3.3 (& MSDOS 6.0)
 40106                                  
 40107                                  ;Break <$CreateNewFile - Create a new directory entry>
 40108                                  ;----------------------------------------------------------------------------
 40109                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 40110                                  ;	was no previous directory entry, and fail if a directory entry with
 40111                                  ;	the same name existed previously.
 40112                                  ;
 40113                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 40114                                  ;		CX contains default file attributes
 40115                                  ;   Outputs:	Carry Clear:
 40116                                  ;		    AX has file handle opened for read/write
 40117                                  ;		Carry Set:
 40118                                  ;		    AX has error code
 40119                                  ;   Registers modified: All
 40120                                  ;----------------------------------------------------------------------------
 40121                                  
 40122                                  _$CreateNewFile:
 40123 00006F51 51                      	push	cx			; Save attributes on stack
 40124 00006F52 B9[952A]                	MOV	CX,DOS_Create_New	; routine to call
 40125 00006F55 E919FF                  	JMP	AccessSet		; use good ol' open
 40126                                  
 40127                                  ;**	BinToAscii - convert a number to a string.
 40128                                  ;----------------------------------------------------------------------------
 40129                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 40130                                  ;	This routine is used to generate temp file names so we don't spend
 40131                                  ;	the time and code needed for a true hex number, we just use
 40132                                  ;	A thorugh O.
 40133                                  ;
 40134                                  ;	ENTRY	(ax) = value
 40135                                  ;		(es:di) = destination
 40136                                  ;	EXIT	(es:di) updated by 4
 40137                                  ;	USES	cx, di, flags
 40138                                  ;----------------------------------------------------------------------------
 40139                                  
 40140                                  ; MSDOS 3.3
 40141                                  ;BinToAscii:
 40142                                  ;	mov     cx,4
 40143                                  ;bta5:
 40144                                  ;	push    cx
 40145                                  ;	mov     cl,4
 40146                                  ;	rol     ax,cl
 40147                                  ;	push    ax
 40148                                  ;	and     al,0Fh
 40149                                  ;	add     al,'0'
 40150                                  ;	cmp     al,'9'
 40151                                  ;	jbe     short bta6
 40152                                  ;	add     al,7
 40153                                  ;bta6: 
 40154                                  ;	stosb
 40155                                  ;	pop     ax
 40156                                  ;	pop     cx
 40157                                  ;	loop    bta5
 40158                                  ;	retn
 40159                                  
 40160                                  ; 15/03/2024
 40161                                  ; MSDOS 5.0-6.22 & Windows ME
 40162                                  ; (MSDOS 6.22 MSDOS.SYS - DOSCODE:0B0D9h)
 40163                                  ; (Windows ME IO.SYS - BIOSCODE:0ABA4h)
 40164                                  %if 1
 40165                                  
 40166                                  ; MSDOS 6.0
 40167                                  BinToAscii:
 40168 00006F58 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 40169                                  bta5:	
 40170 00006F5B D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 40171 00006F5D 50                      	push	ax			; preserve remainder of digits
 40172 00006F5E 240F                    	AND	AL,0Fh			; grab low nibble
 40173 00006F60 0441                    	ADD	AL,'A'			; turn into ascii
 40174 00006F62 AA                      	STOSB				; drop in the character
 40175 00006F63 58                      	pop	ax			; (ax) = shifted number
 40176 00006F64 FECD                    	dec	ch
 40177 00006F66 75F3                    	jnz	short bta5		; process 4 digits
 40178 00006F68 C3                      	retn
 40179                                  %else
 40180                                  ; 15/03/2024
 40181                                  ; PCDOS 7.1 IBMDOS.COM - DOSCODE:0C385h
 40182                                  
 40183                                  BinToAscii:
 40184                                  	push	ax		; convert a number to a string ; ax = value
 40185                                  	xchg	ah,al
 40186                                  	;db	0D4h,10h
 40187                                  	aam	10h		; AH = AL / 16 and AL = remainder
 40188                                  	add	ax,4141h	; 'AA'
 40189                                  	stosw
 40190                                  	pop	ax
 40191                                  	;db	0D4h,10h
 40192                                  	aam	10h
 40193                                  	add	ax,4141h	; add ax,'AA'
 40194                                  	stosw
 40195                                  	retn	
 40196                                  %endif
 40197                                  
 40198                                  ;Break	<$CreateTempFile - create a unique name>
 40199                                  ;----------------------------------------------------------------------------
 40200                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 40201                                  ;	Method used is to get the current time, convert to a name and attempt
 40202                                  ;	a create new. Repeat until create new succeeds.
 40203                                  ;
 40204                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 40205                                  ;		CX  contains default attributes
 40206                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 40207                                  ;		AX has handle
 40208                                  ;   Registers modified: all
 40209                                  ;----------------------------------------------------------------------------
 40210                                  
 40211                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40212                                  
 40213                                  _$CreateTempFile:
 40214                                  	;Enter
 40215 00006F69 55                      	push	bp
 40216 00006F6A 89E5                    	mov	bp,sp
 40217                                  
 40218                                  	;LocalVar  EndPtr,DWORD
 40219                                  	;LocalVar  FilPtr,DWORD
 40220                                  	;LocalVar  Attr,WORD
 40221                                  
 40222 00006F6C 83EC0A                  	sub	sp,10
 40223                                  
 40224                                  	;test	cx,0FFD8h
 40225 00006F6F F7C1D8FF                	test	CX,~attr_changeable
 40226 00006F73 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 40227                                  
 40228                                  ; We need this "hook" here to detect these cases (like user sets one both of
 40229                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 40230                                  ; below. The code loops on error_access_denied, but if one of the non
 40231                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 40232                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 40233                                  ; need to detect these cases before getting to the loop.
 40234                                  
 40235                                  	;mov	ax, 5
 40236 00006F75 B80500                  	MOV	AX,error_access_denied
 40237 00006F78 EB69                    	JMP	SHORT SETTMPERR
 40238                                  
 40239                                  OKatts:
 40240                                  	;MOV	attr,CX 		; save attribute
 40241 00006F7A 894EF6                  	mov     [bp-10],cx
 40242                                  	;MOV	FilPtrL,DX		; pointer to file
 40243 00006F7D 8956F8                  	mov	[bp-8],dx
 40244                                  	;MOV	FilPtrH,DS
 40245 00006F80 8C5EFA                  	mov	[bp-6],ds
 40246                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 40247 00006F83 8C5EFE                  	mov	[bp-2],ds
 40248 00006F86 1E                      	PUSH	DS
 40249 00006F87 07                      	POP	ES			; destination for nul search
 40250 00006F88 89D7                    	MOV	DI,DX
 40251 00006F8A 89F9                    	MOV	CX,DI
 40252 00006F8C F7D9                    	NEG	CX			; number of bytes remaining in segment
 40253                                  	; MSDOS 6.0
 40254 00006F8E 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 40255 00006F90 7501                    	JNZ	short okok		;AN000;MS. no
 40256                                  	;MOV	CX,-1			;AN000;MS.
 40257                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40258                                  	; 17/12/2022
 40259 00006F92 49                      	dec	cx  ; mov cx,-1
 40260                                  	;mov	cx,-1 ; 0FFFh
 40261                                  okok:					;AN000;
 40262 00006F93 31C0                    	XOR	AX,AX			;AN000;
 40263 00006F95 F2AE                    	REPNZ	SCASB			;AN000;
 40264                                  					;AN000;
 40265 00006F97 4F                      	DEC	DI			; point back to the null
 40266 00006F98 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 40267 00006F9C E8E7DF                  	call	PATHCHRCMP		; Is it a path separator?
 40268 00006F9F 7403                    	JZ	short SETENDPTR		; Yes
 40269                                  STOREPTH:
 40270 00006FA1 B05C                    	MOV	AL,'\'
 40271 00006FA3 AA                      	STOSB				; Add a path separator (and INC DI)
 40272                                  SETENDPTR:
 40273                                  	;MOV	EndPtrL,DI		; pointer to the tail
 40274 00006FA4 8856FC                  	mov	[bp-4],dl
 40275                                  CreateLoop:
 40276 00006FA7 16                      	push	ss			; let ReadTime see variables
 40277 00006FA8 1F                      	pop	ds
 40278 00006FA9 55                      	push	bp
 40279 00006FAA E85D9B                  	call	READTIME		; go get time
 40280 00006FAD 5D                      	pop	bp
 40281                                  ;
 40282                                  ; Time is in CX:DX. Go drop it into the string.
 40283                                  ;
 40284                                  	;les	di,EndPtr		; point to the string
 40285 00006FAE C47EFC                  	les	di,[BP-4]
 40286 00006FB1 89C8                    	mov	ax,cx
 40287 00006FB3 E8A2FF                  	call	BinToAscii		; store upper word
 40288 00006FB6 89D0                    	mov	ax,dx
 40289 00006FB8 E89DFF                  	call	BinToAscii		; store lower word
 40290 00006FBB 30C0                    	xor	al,al
 40291 00006FBD AA                      	STOSB				; nul terminate
 40292                                  	;LDS	DX,FilPtr		; get name
 40293 00006FBE C556F8                  	lds	dx,[bp-8]
 40294                                  	;MOV	CX,Attr 		; get attr
 40295 00006FC1 8B4EF6                  	mov	cx,[bp-10]
 40296 00006FC4 55                      	push	bp
 40297 00006FC5 E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 40298 00006FC8 5D                      	pop	bp
 40299 00006FC9 7319                    	JNC	short CreateDone	; failed, go try again
 40300                                  
 40301                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 40302                                  ; error and figure out what to do.
 40303                                  
 40304                                  	;; MSDOS 3.3			; M049 - start
 40305                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 40306                                  ;;	cmp	al,error_file_exists
 40307                                  ;;	jz	short CreateLoop	; file existed => try with new name
 40308                                  ;;	cmp	al,error_access_denied
 40309                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 40310                                  
 40311                                  	; MSDOS 6.0
 40312                                  	;cmp	al,50h
 40313 00006FCB 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 40314 00006FCD 74D8                    	JZ	short CreateLoop	; Y: try again
 40315                                  	;cmp	al,5
 40316 00006FCF 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 40317 00006FD1 7510                    	JNZ	short SETTMPERR		; N: Error out
 40318                                  					; Y: Check to see if we got this due
 40319                                  					;    to the network drive. Note that
 40320                                  					;    the redir will set the exterr
 40321                                  					;    to error_cannot_make if this is 
 40322                                  					;    so. 
 40323 00006FD3 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 40324                                  					; See if it's REALLY an att mismatch
 40325 00006FD9 7408                    	je	short SETTMPERR		; no, network error, stop
 40326                                  ;M070
 40327                                  ; If the user failed on an I24, we do not want to try again
 40328                                  ;
 40329 00006FDB 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 40330                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 40331                                  
 40332                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 40333                                  	; 17/12/2022
 40334 00006FE1 75C4                    	jne	short CreateLoop ; 10/06/2019 
 40335                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40336                                  	;jz	short SETTMPERR
 40337                                  	;jmp	short CreateLoop
 40338                                  
 40339                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 40340                                  					; M049 - end
 40341                                  SETTMPERR:
 40342 00006FE3 F9                      	STC
 40343                                  CreateDone:
 40344                                  	;Leave
 40345 00006FE4 89EC                    	mov	sp,bp
 40346 00006FE6 5D                      	pop	bp
 40347 00006FE7 7203                    	JC	short CreateFail
 40348 00006FE9 E94596                  	jmp	SYS_RET_OK		; success!
 40349                                  CreateFail:
 40350 00006FEC E94B96                  	jmp	SYS_RET_ERR
 40351                                  
 40352                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 40353                                  ;   (CH) or to the value in CL if the current system call is through
 40354                                  ;   serverdoscall.
 40355                                  ;
 40356                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 40357                                  ;		fSharing == TRUE => set sattrib to CL
 40358                                  ;   Outputs:	none
 40359                                  ;   Registers changed:	CX
 40360                                  
 40361                                  SetAttrib:
 40362                                  	;test	byte [SS:FSHARING],-1		;smr;SS Override
 40363                                  	;jnz	short Set
 40364                                  	; 15/03/2024
 40365 00006FEF 36803E[7205]00          	cmp	byte [ss:FSHARING],0
 40366 00006FF5 7502                    	jnz	short Set
 40367                                  
 40368 00006FF7 88E9                    	mov	cl,ch
 40369                                  Set:
 40370 00006FF9 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 40371 00006FFE C3                      	retn
 40372                                  
 40373                                  ;----------------------------------------------------------------------------
 40374                                  	; 16/03/2024 - Retro DOS v4.2
 40375                                  ext_inval2:
 40376                                  	;mov	al,1
 40377 00006FFF B001                    	mov	al,error_invalid_function
 40378                                  eo_err:
 40379                                  	;jmp	SYS_RET_ERR
 40380 00007001 EBE9                    	jmp	short CreateFail
 40381                                  
 40382                                  ; 14/07/2018 - Retro DOS v3.0
 40383                                  ; MSDOS 6.0
 40384                                  
 40385                                  ; 29/04/2019 - Retro DOS v4.0
 40386                                  
 40387                                  ;Break	<Extended_Open- Extended open the file>
 40388                                  ;----------------------------------------------------------------------------
 40389                                  ; Input: AL= 0 reserved  AH=6CH
 40390                                  ;	 BX= mode
 40391                                  ;	 CL= create attribute  CH=search attribute (from server)
 40392                                  ;	 DX= flag
 40393                                  ;	 DS:SI = file name
 40394                                  ;	 ES:DI = parm list
 40395                                  ;			   DD  SET EA list (-1) null
 40396                                  ;			   DW  n  parameters
 40397                                  ;			   DB  type (TTTTTTLL)
 40398                                  ;			   DW  IOMODE
 40399                                  ; Function: Extended Open
 40400                                  ; Output: carry clear
 40401                                  ;		     AX= handle
 40402                                  ;		     CX=1 file opened
 40403                                  ;			2 file created/opened
 40404                                  ;			3 file replaced/opened
 40405                                  ;	  carry set: AX has error code
 40406                                  ;----------------------------------------------------------------------------
 40407                                  
 40408                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40409                                  _$Extended_Open:			  ;AN000;
 40410                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 40411 00007003 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 40412 00007008 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 40413                                  	; 17/12/2022
 40414 0000700F F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 40415                                  	;;test	dx,0FE00h
 40416                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0 ?
 40417 00007012 75EB                    	JNZ	short ext_inval2	  ;AN000;EO. no
 40418 00007014 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 40419 00007016 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 40420 00007019 74E4                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 40421                                  	;and	dl,0Fh
 40422 0000701B 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 40423 0000701E 80FA02                  	CMP	DL,2			  ;AN000;EO, > 2
 40424 00007021 77DC                    	JA	short ext_inval2	  ;AN000;EO. yes, error
 40425                                  	;and	ah,0F0h
 40426 00007023 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 40427 00007026 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 40428 00007029 77D4                    	JA	short ext_inval2	  ;AN000;EO. yes, error
 40429                                  
 40430 0000702B 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 40431 00007030 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 40432 00007035 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 40433 0000703A 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 40434 0000703F 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 40435 00007044 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 40436 00007049 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 40437 0000704E 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 40438 00007053 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 40439 00007055 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 40440                                  ; 16/03/2024
 40441                                  %if 0
 40442                                  	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 40443                                  ext_inval2:				  ;AN000;;EO.
 40444                                  	;mov	al,1
 40445                                  	mov	al,error_invalid_function ;AN000;EO.. invalid function
 40446                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40447                                  eo_err:
 40448                                  	;jmp	SYS_RET_ERR
 40449                                  	jmp	short CreateFail
 40450                                  %endif
 40451                                  
 40452                                  ; 16/03/2024
 40453                                  %if 0
 40454                                  ext_inval_parm:				  ;AN000;EO..
 40455                                  	POP	CX			  ;AN000;EO..  pop up satck
 40456                                  	POP	SI			  ;AN000;EO..
 40457                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 40458                                  	;mov	al,13
 40459                                  	mov	al,error_invalid_data
 40460                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40461                                  	;;jmp	SYS_RET_ERR
 40462                                  	;jmp	short eo_err
 40463                                  	; 17/12/2022
 40464                                  	jmp	short CreateFail
 40465                                  %endif
 40466                                  	; 17/12/2022	
 40467                                  ;error_return:				  ;AN000;EO.
 40468                                  ;	retn				  ;AN000;EO.. return with error
 40469                                  
 40470                                  goopen2:				  ;AN000;
 40471                                  	; 17/12/2022
 40472                                  	;test	bh,20h				 
 40473 00007057 F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 40474                                  	;;test	bx,2000h
 40475                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 40476 0000705A 7406                    	JZ	short goopen		  ;AN000;EO.. no
 40477                                  	;or	byte [SS:EXTOPEN_ON],2
 40478 0000705C 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 40479                                  goopen:					  ;AN000;
 40480                                  	;or	byte [SS:EXTOPEN_ON],1 
 40481 00007062 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 40482                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 40483                                  	; 18/12/2022
 40484 00007068 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 40485                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 40486 0000706E 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 40487 00007074 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 40488 00007076 E8D8FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 40489 00007079 723F                    	JC	short error_return	  ;AN000;;EO. error
 40490                                  
 40491 0000707B 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 40492 00007081 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 40493                                  
 40494                                  	;mov	word [SS:EXTOPEN_FLAG],2
 40495 00007083 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. created/opened;smr;SS Override
 40496 0000708A EB7F                    	JMP	short setXAttr ; 16/03/2024 ;AN000;;EO. set XAs
 40497                                  
 40498                                  	; 17/12/2022
 40499                                  ;ok_return2:
 40500                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 40501                                  
 40502                                  chknext:
 40503                                  	; 17/12/2022
 40504 0000708C 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 40505                                  	;;test	word [SS:EXTOPEN_FLAG],1
 40506                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 40507 00007092 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 40508 00007094 E8D6FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 40509 00007097 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 40510 00007099 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 40511 0000709F 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 40512 000070A1 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 40513 000070A8 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 40514 000070AE 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 40515 000070B0 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 40516 000070B7 EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 40517                                  
 40518                                  error_return2:
 40519 000070B9 F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 40520                                  error_return:	 ; 17/12/2022
 40521 000070BA C3                      	retn				  ;AN000;;EO. return with error
 40522                                  
 40523                                  	; 17/12/2022
 40524                                  ok_return:
 40525                                  ok_return2:
 40526 000070BB E97395                  	jmp	SYS_RET_OK
 40527                                  
 40528                                  exist_open:				  ;AN000;
 40529                                  	;test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 40530                                  	;jz	short noserver		  ;AN000;;EO. no
 40531                                  	; 16/03/2024
 40532                                  	;;;
 40533 000070BE 36803E[7205]00          	cmp	byte [ss:FSHARING],0	; server doscall?
 40534 000070C4 7402                    	jz	short noserver		; no
 40535                                  	;;;
 40536 000070C6 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 40537                                  noserver:
 40538 000070C8 E8CDFC                  	call	_$Open2			  ;AN000;;EO. do open
 40539 000070CB 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 40540 000070CD 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 40541 000070D3 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 40542                                  local_extopen:
 40543                                  	;cmp	ax,2
 40544 000070D5 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 40545 000070D8 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 40546                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 40547                                  	; 17/12/2022
 40548 000070DA 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 40549                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 40550                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 40551                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 40552                                  	; 17/12/2022
 40553 000070E0 7446                    	jz	short extexit ; 10/06/2019
 40554                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40555                                  	;jnz	short do_creat
 40556                                  	;jmp	short extexit
 40557                                  do_creat:
 40558 000070E2 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 40559 000070E7 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 40560 000070EC 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 40561 000070EE E87CFD                  	call	_$CREAT			  ;AN000;;EO. do create
 40562 000070F1 7235                    	JC	short extexit 		  ;AN000;;EO. error
 40563                                  	;mov	word [SS:EXTOPEN_FLAG],2
 40564 000070F3 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40565                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 40566 000070FA EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 40567                                  
 40568                                  ext_ok:
 40569 000070FC 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 40570 00007102 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 40571                                  	;mov	word [SS:EXTOPEN_FLAG],1
 40572 00007104 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 40573                                  setXAttr:
 40574                                  	; 29/04/2019
 40575 0000710B 50                      	push	ax
 40576 0000710C E87293                  	call	Get_User_Stack		  ;AN000;;EO.
 40577 0000710F 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 40578                                  	;mov	[si+4],ax
 40579 00007113 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 40580 00007116 58                      	pop	ax			  ;AN000;;EO.
 40581 00007117 8904                    	mov	[si],ax
 40582                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 40583                                  	; 17/12/2022
 40584 00007119 EBA0                    	jmp	short ok_return
 40585                                  ;ok_return:				  ;AN000;
 40586                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 40587                                  
 40588                                  ; 16/03/2024
 40589                                  %if 0
 40590                                  extexit2:				  ;AN000; ERROR RECOVERY
 40591                                  	POP	BX			  ;AN000;EO. close the handle
 40592                                  	PUSH	AX			  ;AN000;EO. save error code from set XA
 40593                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 40594                                  	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40595                                  					  ;AN000;EO. from create;smr;SS Override
 40596                                  	JNZ	short justopen		  ;AN000;EO.
 40597                                  	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 40598                                  	LDS	DX,[SI]			  ;AN000;EO.
 40599                                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 40600                                  	JMP	SHORT reserror		  ;AN000;EO.
 40601                                  
 40602                                  justopen:				  ;AN000;
 40603                                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 40604                                  reserror:				  ;AN000;
 40605                                  	POP	AX			  ;AN000;EO. restore error code from set XA
 40606                                  
 40607                                  	JMP	SHORT extexit		  ;AN000;EO.
 40608                                  
 40609                                  ext_file_unfound:			  ;AN000;
 40610                                  	;mov	ax,2
 40611                                  	MOV	AX,error_file_not_found   ;AN000;EO.
 40612                                  	JMP	SHORT extexit		  ;AN000;EO.
 40613                                  ext_inval:				  ;AN000;
 40614                                  	;mov	ax,1
 40615                                  	MOV	AX,error_invalid_function ;AN000;EO.
 40616                                  
 40617                                  lockoperr:	; 17/12/2022
 40618                                  extexit:
 40619                                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 40620                                  
 40621                                  %endif
 40622                                  
 40623                                  ;============================================================================
 40624                                  ; LOCK.ASM, MSDOS 6.0, 1991
 40625                                  ;============================================================================
 40626                                  ; 14/07/2018 - Retro DOS v3.0
 40627                                  ; 22/05/2019 - Retro DOS v4.0
 40628                                  
 40629                                  ;BREAK <$LockOper - Lock Calls>
 40630                                  ;----------------------------------------------------------------------------
 40631                                  ;
 40632                                  ;   Assembler usage:
 40633                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 40634                                  ;	    MOV     CX, OffsetHigh
 40635                                  ;	    MOV     DX, OffsetLow
 40636                                  ;	    MOV     SI, LengthHigh
 40637                                  ;	    MOV     DI, LengthLow
 40638                                  ;	    MOV     AH, LockOper
 40639                                  ;	    MOV     AL, Request
 40640                                  ;	    INT     21h
 40641                                  ;
 40642                                  ;   Error returns:
 40643                                  ;	    AX = error_invalid_handle
 40644                                  ;	       = error_invalid_function
 40645                                  ;	       = error_lock_violation
 40646                                  ;
 40647                                  ;   Assembler usage:
 40648                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 40649                                  ;
 40650                                  ;				    0? lock all
 40651                                  ;				    8? lock write
 40652                                  ;				    ?2 lock multiple
 40653                                  ;				    ?3 unlock multiple
 40654                                  ;				    ?4 lock/read
 40655                                  ;				    ?5 write/unlock
 40656                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 40657                                  ;	    MOV     BX, Handle
 40658                                  ;	    MOV     CX, count or size
 40659                                  ;	    LDS     DX, buffer
 40660                                  ;	    INT     21h
 40661                                  ;
 40662                                  ;   Error returns:
 40663                                  ;	    AX = error_invalid_handle
 40664                                  ;	       = error_invalid_function
 40665                                  ;	       = error_lock_violation
 40666                                  ;
 40667                                  ;----------------------------------------------------------------------------
 40668                                  
 40669                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40670                                  
 40671                                  	; 17/03/2024
 40672                                  	; 16/03/2024 - Retro DOS v4.2
 40673                                  _$LockOper:
 40674 0000711B 3C01                    	CMP	AL,1
 40675 0000711D 770C                    	JA	short lock_bad_func
 40676                                  
 40677 0000711F 57                      	PUSH	DI			       ; Save LengthLow
 40678 00007120 E81BF4                  	call	SFFromHandle		       ; ES:DI -> SFT
 40679 00007123 731E                    	JNC	short lock_do 		       ; have valid handle
 40680 00007125 5F                      	POP	DI			       ; Clean stack
 40681                                  	;mov	al,6
 40682 00007126 B006                    	mov	al,error_invalid_handle
 40683                                  
 40684                                  	; 16/03/2024
 40685                                  extexit:
 40686                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40687                                  lockoperr:
 40688 00007128 E90F95                  	jmp	SYS_RET_ERR
 40689                                  	; 17/12/2022
 40690                                  	;jmp	short lockoperr ; jmp SYS_RET_ERR
 40691                                  
 40692                                  lock_bad_func:
 40693                                  	;mov	byte [ss:EXTERR_LOCUS],1
 40694 0000712B 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 40695                                  	;mov	al,1
 40696 00007131 B001                    	mov	al,error_invalid_function
 40697                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40698                                  lockoperrj:
 40699                                  	;jmp	SYS_RET_ERR
 40700 00007133 EBF3                    	jmp	short lockoperr
 40701                                  
 40702                                  	; 22/05/2019 - Retro DOS v4.0
 40703                                  
 40704                                  	; MSDOS 6.0 
 40705                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 40706                                  ; Dead code deleted, MD, 23 Mar 90
 40707                                  
 40708                                  ;lock_do:
 40709                                  ;	; MSDOS 3.3
 40710                                  ;	or	al,al
 40711                                  ;	pop	ax
 40712                                  ;	jz	short DOS_Lock
 40713                                  ;DOS_Unlock:
 40714                                  ;	;test	word [es:di+5],8000h
 40715                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40716                                  ;	JZ	short LOCAL_UNLOCK
 40717                                  ;	push    ax
 40718                                  ;	mov     ax,110Bh
 40719                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40720                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40721                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 40722                                  ;			; SFT DPB field -> DPB of drive containing file
 40723                                  ;			; Return: CF set error
 40724                                  ;	pop     bx
 40725                                  ;	jmp     short ValChk
 40726                                  ;
 40727                                  ;LOCAL_UNLOCK:
 40728                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40729                                  ;ValChk:
 40730                                  ;	JNC	short Lock_OK
 40731                                  ;lockerror:
 40732                                  ;	jmp	SYS_RET_ERR
 40733                                  ;Lock_OK:
 40734                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40735                                  ;	jmp	SYS_RET_OK
 40736                                  ;DOS_Lock:
 40737                                  ;	;test	word [es:di+5],8000h
 40738                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40739                                  ;	JZ	short LOCAL_LOCK
 40740                                  ;	;CallInstall NET_XLock,MultNET,10
 40741                                  ;	mov     ax, 110Ah
 40742                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40743                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40744                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 40745                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40746                                  ;			; Return: CF set error
 40747                                  ;	JMP	short ValChk
 40748                                  ;
 40749                                  ;LOCAL_LOCK:
 40750                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40751                                  ;	JMP	short ValChk
 40752                                  
 40753                                  ; 17/12/2022
 40754                                  LOCAL_UNLOCK:
 40755                                  	; MSDOS 3.3
 40756                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40757                                  	; MSDOS 6.0
 40758 00007135 FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40759                                  ValChk:
 40760 00007139 7302                    	JNC	short Lock_OK
 40761                                  lockerror:
 40762                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40763                                  	;;jmp	SYS_RET_ERR
 40764                                  	;jmp	short lockoperrj
 40765                                  	; 17/12/2022
 40766 0000713B EBEB                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 40767                                  Lock_OK:
 40768                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40769                                  	; 10/06/2019
 40770 0000713D A1[0C06]                	mov	ax,[TEMP_VAR]
 40771 00007140 E9EE94                  	jmp	SYS_RET_OK
 40772                                  
 40773                                  	; 22/05/2019
 40774                                  lock_do:
 40775                                  	; MSDOS 6.0
 40776 00007143 89C3                    	MOV	BX,AX				; save AX
 40777 00007145 BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 40778                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40779                                  	;;mov	[bp+0],dx
 40780                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 40781                                  	; 15/12/2022
 40782 00007148 895600                  	mov	[bp],dx
 40783                                  	;mov	[bp+2],cx
 40784 0000714B 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 40785                                  
 40786                                  	; 16/03/2024
 40787                                  	;POP	CX				; get low length
 40788                                  	;;mov	[bp+4],cx
 40789                                  	;MOV	[BP+LockBuf.Lock_length],CX	; set low length
 40790 0000714E 8F4604                  	pop	word [bp+LockBuf.Lock_length]
 40791                                  
 40792                                  	;mov	[bp+6],si
 40793 00007151 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 40794 00007154 B90100                  	MOV	CX,1				; one range
 40795                                  
 40796                                  ;	PUSH	CS				;
 40797                                  ;	POP	DS				; DS:DX points to
 40798                                  
 40799 00007157 16                      	push	ss
 40800 00007158 1F                      	pop	ds
 40801                                  
 40802 00007159 89EA                    	MOV	DX,BP				; Lock_Buffer
 40803                                  	;test	al,1
 40804 0000715B A801                    	TEST	AL,UNLOCK_ALL			; function 1
 40805                                  	;JNZ	short DOS_Unlock		; yes
 40806                                  	;JMP	short DOS_Lock			; function 0
 40807                                  	; 17/12/2022
 40808                                  	; 10/06/2019
 40809 0000715D 740E                    	jz	short DOS_Lock
 40810                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40811                                  	;JNZ	short DOS_Unlock
 40812                                  	;JMP	short DOS_Lock
 40813                                  
 40814                                  DOS_Unlock:
 40815                                  	;;test	word [es:di+5],8000h
 40816                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40817 0000715F 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40818 00007164 74CF                    	JZ	short LOCAL_UNLOCK
 40819                                  
 40820                                  ; 17/03/2024
 40821                                  ;lock_unlock: ; 22/05/2019
 40822                                  
 40823                                  	;CallInstall Net_Xlock,MultNET,10
 40824                                  ;	
 40825                                  ;	; MSDOS 3.3
 40826                                  ;	;mov     ax,110Bh
 40827                                  ;	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40828                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40829                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 40830                                  ;			; SFT DPB field -> DPB of drive containing file
 40831                                  ;			; Return: CF set error
 40832                                  
 40833                                  ; 17/03/2024 - Retro DOS v4.2
 40834                                  lock_unlock:
 40835                                  
 40836                                  	; MSDOS 6.0
 40837 00007166 B80A11                  	mov     ax,110Ah
 40838 00007169 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40839                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40840                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40841                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40842                                  			; Return: CF set error
 40843                                  
 40844 0000716B EBCC                    	JMP	SHORT ValChk
 40845                                  
 40846                                  ; 17/12/2022
 40847                                  %if 0
 40848                                  LOCAL_UNLOCK:
 40849                                  	; MSDOS 3.3
 40850                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40851                                  	; MSDOS 6.0
 40852                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40853                                  ValChk:
 40854                                  	JNC	short Lock_OK
 40855                                  lockerror:
 40856                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40857                                  	;jmp	SYS_RET_ERR
 40858                                  	jmp	short lockoperrj
 40859                                  Lock_OK:
 40860                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40861                                  	; 10/06/2019
 40862                                  	mov	ax,[TEMP_VAR]
 40863                                  	jmp	SYS_RET_OK
 40864                                  %endif
 40865                                  
 40866                                  DOS_Lock:
 40867                                  	;;test	word [es:di+5],8000h
 40868                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40869 0000716D 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40870                                  	;JZ	short LOCAL_LOCK
 40871                                  	; 17/03/2024
 40872 00007172 75F2                    	jnz	short lock_unlock
 40873                                  
 40874                                  	;CallInstall NET_XLock,MultNET,10
 40875                                  
 40876 00007174 B80A11                  	mov     ax,110Ah
 40877 00007177 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40878                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40879                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40880                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40881                                  			; Return: CF set error
 40882                                  
 40883 00007179 EBBE                    	JMP	short ValChk
 40884                                  
 40885                                  LOCAL_LOCK:
 40886                                  	; MSDOS 3.3
 40887                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40888                                  	; MSDOS 6.0
 40889 0000717B FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40890                                  
 40891 0000717F EBB8                    	JMP	short ValChk
 40892                                  
 40893                                  ; 14/07/2018 - Retro DOS v3.0
 40894                                  ; LOCK_CHECK
 40895                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40896                                  
 40897                                  ;----------------------------------------------------------------------------
 40898                                  ; Inputs:
 40899                                  ;	Outputs of SETUP
 40900                                  ;	[USER_ID] Set
 40901                                  ;	[PROC_ID] Set
 40902                                  ; Function:
 40903                                  ;	Check for lock violations on local I/O
 40904                                  ;	Retries are attempted with sleeps in between
 40905                                  ; Outputs:
 40906                                  ;    Carry clear
 40907                                  ;	Operation is OK
 40908                                  ;    Carry set
 40909                                  ;	A lock violation detected
 40910                                  ; Outputs of SETUP preserved
 40911                                  ;----------------------------------------------------------------------------
 40912                                  
 40913                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40914                                  	; 22/05/2019 - Retro DOS v4.0
 40915                                  LOCK_CHECK:
 40916 00007181 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 40917                                  LockRetry:
 40918 00007185 53                      	push	bx		; save regs
 40919 00007186 50                      	push	ax ; MSDOS 6.0
 40920                                  
 40921                                  	;MSDOS 3.3
 40922                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 40923                                  	;MSDOS 6.0
 40924 00007187 FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 40925                                  
 40926 0000718B 58                      	pop	ax ; MSDOS 6.0
 40927 0000718C 5B                      	pop	bx		; restrore regs
 40928 0000718D 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 40929                                  LockN:
 40930 0000718F E854A0                  	call	Idle		; wait a while
 40931 00007192 4B                      	DEC	BX		; remember a retry
 40932 00007193 75F0                    	JNZ	short LockRetry	; more retries left...
 40933 00007195 F9                      	STC
 40934                                  lc_ret_label:
 40935 00007196 C3                      	retn
 40936                                  
 40937                                  ; 14/07/2018 - Retro DOS v3.0
 40938                                  ; LOCK_VIOLATION
 40939                                  ;MSDOS 6.0 (& MSDOS 3.3)
 40940                                  
 40941                                  ;----------------------------------------------------------------------------
 40942                                  ; Inputs:
 40943                                  ;	[THISDPB] set
 40944                                  ;	[READOP] indicates whether error on read or write
 40945                                  ; Function:
 40946                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 40947                                  ; Outputs:
 40948                                  ;	Carry set if user says FAIL, causes error_lock_violation
 40949                                  ;	Carry clear if user wants a retry
 40950                                  ;
 40951                                  ; DS, ES, DI, CX preserved, others destroyed
 40952                                  ;----------------------------------------------------------------------------
 40953                                  
 40954                                  LOCK_VIOLATION:
 40955 00007197 1E                      	PUSH	DS
 40956 00007198 06                      	PUSH	ES
 40957 00007199 57                      	PUSH	DI
 40958 0000719A 51                      	PUSH	CX
 40959                                  	;mov	ax,21h
 40960 0000719B B82100                  	MOV	AX,error_lock_violation
 40961                                  	;mov	byte [ALLOWED],18h
 40962 0000719E C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 40963 000071A3 C42E[8A05]              	LES	BP,[THISDPB]
 40964 000071A7 BF0100                  	MOV	DI,1		; Fake some registers
 40965 000071AA 89F9                    	MOV	CX,DI
 40966                                  	;mov	dx,[es:bp+11]
 40967 000071AC 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 40968 000071B0 E838E0                  	call	HARDERR
 40969 000071B3 59                      	POP	CX
 40970 000071B4 5F                      	POP	DI
 40971 000071B5 07                      	POP	ES
 40972 000071B6 1F                      	POP	DS
 40973 000071B7 3C01                    	CMP	AL,1
 40974 000071B9 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 40975 000071BB F9                      	STC
 40976 000071BC C3                      	retn
 40977                                  
 40978                                  ; 14/07/2018 - Retro DOS v3.0
 40979                                  
 40980                                  ;----------------------------------------------------------------------------
 40981                                  
 40982                                  ;	do a retz to return error
 40983                                  
 40984                                  	; 22/05/2019 - Retro DOS v4.0
 40985                                  CheckShare:
 40986                                  	; MSDOS 3.3
 40987                                  	;cmp	byte [cs:fShare],0
 40988                                  	;retn
 40989                                  
 40990                                  	; MSDOS 6.0
 40991 000071BD 1E                      	push	ds			;smr;
 40992                                  	;getdseg <ds>			; ds -> dosdata
 40993 000071BE 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 40994 000071C3 803E[0303]00            	cmp	byte [fShare],0
 40995 000071C8 1F                      	pop	ds			;smr;
 40996 000071C9 C3                      	retn
 40997                                  	
 40998                                  ;============================================================================
 40999                                  ; SHARE.ASM, MSDOS 6.0, 1991
 41000                                  ;============================================================================
 41001                                  ; 14/07/2018 - Retro DOS v3.0
 41002                                  ; 22/05/2019 - Retro DOS v4.0
 41003                                  
 41004                                  ; SHARE_CHECK
 41005                                  ;----------------------------------------------------------------------------
 41006                                  ; Inputs:
 41007                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 41008                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 41009                                  ;       [WFP_START] has full path of name
 41010                                  ;       [USER_ID] Set
 41011                                  ;       [PROC_ID] Set
 41012                                  ; Function:
 41013                                  ;       Check for sharing violations on local file/device access
 41014                                  ; Outputs:
 41015                                  ;    Carry clear
 41016                                  ;       Sharing approved
 41017                                  ;    Carry set
 41018                                  ;       A sharing violation detected
 41019                                  ;           AX is error code
 41020                                  ; USES    ALL but DS
 41021                                  ;----------------------------------------------------------------------------
 41022                                  
 41023                                  	; 22/05/2019 - Retro DOS v4.0
 41024                                  SHARE_CHECK:
 41025                                  	; 26/07/2019
 41026 000071CA FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 41027                                  shchk_retn:
 41028 000071CE C3                      	retn
 41029                                  
 41030                                  ; SHARE_VIOLATION
 41031                                  ;----------------------------------------------------------------------------
 41032                                  ; Inputs:
 41033                                  ;       [THISDPB] Set
 41034                                  ;       AX has error code
 41035                                  ; Function:
 41036                                  ;       Handle Sharing errors
 41037                                  ; Outputs:
 41038                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 41039                                  ;       Carry clear if user wants a retry
 41040                                  ;
 41041                                  ; DS, ES, DI preserved, others destroyed
 41042                                  ;----------------------------------------------------------------------------
 41043                                  
 41044                                  SHARE_VIOLATION:
 41045 000071CF 1E                      	PUSH    DS
 41046 000071D0 06                      	PUSH	ES
 41047 000071D1 57                      	PUSH    DI
 41048 000071D2 C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 41049                                  	;mov	byte [ALLOWED],18h
 41050 000071D7 C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 41051 000071DC C42E[8A05]              	LES     BP,[THISDPB]
 41052 000071E0 BF0100                  	MOV     DI,1			; Fake some registers
 41053 000071E3 89F9                    	MOV     CX,DI
 41054                                  	;mov	dx,[es:bp+17]
 41055 000071E5 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 41056 000071E9 E8FFDF                  	call	HARDERR
 41057 000071EC 5F                      	POP     DI
 41058 000071ED 07                      	POP	ES
 41059 000071EE 1F                      	POP     DS
 41060 000071EF 3C01                    	CMP     AL,1
 41061 000071F1 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 41062 000071F3 F9                      	STC
 41063 000071F4 C3                      	retn
 41064                                  
 41065                                  ;----------------------------------------------------------------------------
 41066                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 41067                                  ;       NOT perform a close, it merely asserts that the sharing information
 41068                                  ;       for the SFT/UID/PID may be safely released.
 41069                                  ;
 41070                                  ;   Inputs:     ES:DI points to an SFT
 41071                                  ;   Outputs:    None
 41072                                  ;   Registers modified: all except DS,ES,DI
 41073                                  ;----------------------------------------------------------------------------
 41074                                  
 41075                                  ShareEnd:
 41076                                  	; 26/07/2019
 41077 000071F5 FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 41078 000071F9 C3                      	retn
 41079                                  
 41080                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 41081                                  ;----------------------------------------------------------------------------
 41082                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 41083                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 41084                                  ;
 41085                                  ;   Inputs:     ThisSFT points to the SFT
 41086                                  ;               WFP_Start points to the WFP
 41087                                  ;   Outputs:    Carry clear => successful entry
 41088                                  ;               Carry set => failed system call
 41089                                  ;   Registers modified: all
 41090                                  ;----------------------------------------------------------------------------
 41091                                  
 41092                                  ShareEnter:
 41093 000071FA 51                      	push	cx
 41094                                  retry:
 41095 000071FB 8B0E[1A00]              	mov     cx,[RetryCount]
 41096                                  attempt:
 41097 000071FF C43E[9E05]              	les     di,[THISSFT]		; grab sft
 41098 00007203 31C0                    	XOR     AX,AX
 41099                                   	;mov	[es:di+51],ax
 41100 00007205 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 41101 00007209 51                      	push	cx
 41102 0000720A E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 41103 0000720D 59                      	pop	cx
 41104 0000720E 730A                    	jnc	short done		; success, let the user see this
 41105 00007210 E8D39F                  	call	Idle                    ; wait a while
 41106 00007213 E2EA                    	loop    attempt                 ; go back for another attempt
 41107 00007215 E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 41108 00007218 73E1                    	jnc	short retry		; user said to retry, go do it
 41109                                  done:
 41110 0000721A 59                      	pop	cx
 41111 0000721B C3                      	retn
 41112                                  
 41113                                  ;============================================================================
 41114                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 41115                                  ;============================================================================
 41116                                  ; 29/04/2019 - Retro DOS 4.0
 41117                                  
 41118                                  ;** EXEPATCH.ASM 
 41119                                  ;----------------------------------------------------------------------------
 41120                                  ;	Contains the foll:
 41121                                  ;
 41122                                  ;		- code to find and overlay buggy unpack code
 41123                                  ;		- new code to be overlayed on buggy unpack code 
 41124                                  ;		- old code sequence to identify buggy unpack code
 41125                                  ;
 41126                                  ;	Revision history:
 41127                                  ;
 41128                                  ;		Created: 5/14/90
 41129                                  ;----------------------------------------------------------------------------
 41130                                  
 41131                                  ;----------------------------------------------------------------------------
 41132                                  ;
 41133                                  ; M020 : Fix for rational bug - for details see routine header
 41134                                  ; M028 : 4b04 implementation
 41135                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 41136                                  ; M032 : set turnoff bit only if DOS in HMA.
 41137                                  ; M033 : if IP < 2 then not exepacked.
 41138                                  ; M046 : support for a 4th version of exepacked files.
 41139                                  ; M068 : support for copy protected apps.
 41140                                  ; M071 : use A20OFF_COUNT of 10.
 41141                                  ;
 41142                                  ;----------------------------------------------------------------------------
 41143                                  
 41144                                  PATCH1_COM_OFFSET	EQU	06CH
 41145                                  PATCH1_OFFSET		EQU	028H
 41146                                  PATCH1_CHKSUM		EQU	0EF4EH
 41147                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 41148                                  
 41149                                  PATCH2_COM_OFFSET	EQU	076H
 41150                                  PATCH2_OFFSET		EQU	032H
 41151                                  
 41152                                  	; The strings that start at offset 076h have two possible 
 41153                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 41154                                  
 41155                                  PATCH2_CHKSUM		EQU	78B2H
 41156                                  CHKSUM2_LEN		EQU	119H/2
 41157                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 41158                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 41159                                  
 41160                                  PATCH3_COM_OFFSET	EQU	074H
 41161                                  PATCH3_OFFSET		EQU	032H
 41162                                  PATCH3_CHKSUM		EQU	4EDEH
 41163                                  CHKSUM3_LEN		EQU	117H/2
 41164                                  
 41165                                  ;**	Data structure passed for ExecReady call
 41166                                  ;
 41167                                  ;struc ERStruc
 41168                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 41169                                  ; .ER_Flags:	resw	1
 41170                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 41171                                  ; .ER_PSP:	resw	1	; PSP of the program
 41172                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 41173                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 41174                                  ; .size:
 41175                                  ;endstruc
 41176                                  
 41177                                  ;DOSCODE SEGMENT
 41178                                  
 41179                                  	; 22/05/2019 - Retro DOS v4.0
 41180                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 41181                                  
 41182                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41183                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 41184                                  
 41185                                  ; M028 - BEGIN
 41186                                  
 41187                                  ;--------------------------------------------------------------------------
 41188                                  ;
 41189                                  ;	Procedure Name		: ExecReady
 41190                                  ;
 41191                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 41192                                  ;
 41193                                  ;--------------------------------------------------------------------------
 41194                                  
 41195                                  ExecReady:
 41196 0000721C 89D6                    	mov	si,dx			; move the pointer into a friendly one
 41197                                  	;;test	word [si+2],1
 41198                                  	; 17/12/2022
 41199 0000721E F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 41200                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 41201 00007222 7413                    	jz	short er_setver		; only setver for .COM files
 41202                                  
 41203                                  	;mov	ax,[si+8]
 41204 00007224 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 41205 00007227 83C010                  	add	ax,10h
 41206 0000722A 8EC0                    	mov	es,ax
 41207                                  
 41208                                  	;mov	cx,[si+10]
 41209 0000722C 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 41210                                  	;mov	ax,[si+12]	; 11/04/2024
 41211 0000722F 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 41212                                  
 41213                                  	;call	[ss:FixExePatch]
 41214 00007232 36FF16[1212]            	call	word [ss:FixExePatch] ; 28/12/2022
 41215                                  	
 41216                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41217                                  	;call	[ss:Rational386PatchPtr]
 41218                                  
 41219                                  er_setver:
 41220                                  	;;test	word [si+2],2		; Q: is this an overlay
 41221                                  	; 17/12/2022
 41222 00007237 F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 41223                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 41224 0000723B 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 41225                                  					; N: set up lie version first
 41226 0000723D 1E                      	push	ds
 41227 0000723E 56                      	push	si
 41228                                  	;lds	si,[si+4]
 41229 0000723F C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 41230 00007242 E8C1ED                  	call	Scan_Execname1
 41231 00007245 E8D2ED                  	call	Scan_Special_Entries
 41232 00007248 5E                      	pop	si
 41233 00007249 1F                      	pop	ds
 41234                                  	;mov	es,[si+8]
 41235 0000724A 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 41236 0000724D 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 41237 00007251 26A34000                	mov	[es:PDB.Version],ax
 41238                                  
 41239                                  er_chkdoshi:
 41240 00007255 36803E[1112]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 41241 0000725B 741F                    	je	short er_done		; M032: N: done
 41242                                  
 41243                                  					; M068 - Start
 41244                                  	;mov	ax,[si+8]
 41245 0000725D 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 41246                                  
 41247                                  	;or	byte [ss:DOS_FLAG],4
 41248 00007260 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 41249                                  					; ah = 25 & ah= 49. See dossym.inc 
 41250                                  					; under TAG M003 & M009 for 
 41251                                  					; explanation
 41252                                  	;;test	word [si+2],1
 41253                                  	; 17/12/2022
 41254 00007266 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 41255                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 41256 0000726A 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 41257                                  					;    a20off_psp and ret
 41258 0000726C 1E                         	push	ds
 41259 0000726D 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 41260 0000726F E87E02                  	call	IsCopyProt		; check if copy protected
 41261 00007272 1F                      	pop	ds
 41262                                  
 41263                                  er_setA20:
 41264                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 41265                                  	; is non-zero at this point it indicates that the A20 is to be 
 41266                                  	; turned off for that many int 21 calls made by the app. In 
 41267                                  	; addition the A20 has to be turned off when we exit from this 
 41268                                  	; call. Hence the inc.
 41269                                  
 41270 00007273 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 41271 00007278 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 41272                                  					; turned OFF.
 41273                                  er_done:				; M068 - End
 41274 0000727C 31C0                    	xor	ax,ax
 41275 0000727E C3                      	retn
 41276                                  
 41277                                  ; M028 - END
 41278                                  
 41279                                  ; 23/03/2024
 41280                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41281                                  %if 0
 41282                                  
 41283                                  ;----------------------------------------------------------------------------
 41284                                  ;
 41285                                  ; procedure : Rational386Patch
 41286                                  ;
 41287                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 41288                                  ; 386 registers (usually just the high word of 32 bit registers) during
 41289                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 41290                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 41291                                  ;
 41292                                  ; This routine applies patches to the Rational DOS Extender to work around
 41293                                  ; most of the register trashing bugs.
 41294                                  ;
 41295                                  ; Note that there are additional register trashing bugs not fixed by these
 41296                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 41297                                  ; may be modified on interrupts.
 41298                                  ;
 41299                                  ; There are two different Rational DOS Extender patchs in this module.
 41300                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 41301                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 41302                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 41303                                  ; or not.
 41304                                  ;
 41305                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 41306                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 41307                                  ; running in the HMA.
 41308                                  ;
 41309                                  ; This patch detection and replacement is based on an example supplied by
 41310                                  ; Ben Williams at Rational.
 41311                                  ;
 41312                                  ;----------------------------------------------------------------------------
 41313                                  
 41314                                  ; 22/05/2019 - Retro DOS v4.0
 41315                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 41316                                  
 41317                                  ;----------------------------------------------------------------------------
 41318                                  ;
 41319                                  ; INPUT : ES = segment where program got loaded
 41320                                  ;
 41321                                  ;----------------------------------------------------------------------------
 41322                                  
 41323                                  rpFind1:
 41324                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 41325                                  
 41326                                  rpFind1Len equ	$ - rpFind1
 41327                                  
 41328                                  ;	cli
 41329                                  ;	in	al, 21h
 41330                                  ;	pusha
 41331                                  ;	xor	ax, ax
 41332                                  ;	out	43h, al
 41333                                  ;	mov	dx, ...
 41334                                  
 41335                                  rpFind1a:
 41336                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 41337                                  
 41338                                  rpFind1aLen equ	$ - rpFind1a
 41339                                  
 41340                                  ;	mov	al, 0Eh
 41341                                  ;	out	37h, al
 41342                                  ;	xor	ax, ax
 41343                                  ;	out	0F2h, al
 41344                                  
 41345                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 41346                                  
 41347                                  rpFind2:
 41348                                  	db	0Fh, 20h, 0C0h
 41349                                  
 41350                                  rpFind2Len equ	$ - rpFind2
 41351                                  
 41352                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 41353                                  
 41354                                  rpFind3:
 41355                                  	db	0Fh, 22h, 0C0h, 0EAh
 41356                                  
 41357                                  rpFind3Len equ	$ - rpFind3
 41358                                  
 41359                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 41360                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 41361                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 41362                                  
 41363                                  ; note, there is no rpRepl1 string
 41364                                  
 41365                                  rpRepl2:
 41366                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 41367                                  
 41368                                  rpRepl2Len equ	$ - rpRepl2
 41369                                  
 41370                                  ;	push	eax
 41371                                  ;	push	cx
 41372                                  ;	mov	eax, cr0
 41373                                  
 41374                                  rpRepl3:
 41375                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 41376                                  
 41377                                  rpRepl3Len equ	$ - rpRepl3
 41378                                  
 41379                                  ;	mov	ss, bx
 41380                                  ;	pop	cx
 41381                                  ;	pop	eax
 41382                                  
 41383                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 41384                                  
 41385                                  rpFind4:
 41386                                  	db	93h, 58h, 8Bh, 0CCh
 41387                                  
 41388                                  rpFind4Len equ	$ - rpFind4
 41389                                  
 41390                                  ;	xchg	bx, ax
 41391                                  ;	pop	ax
 41392                                  ;	mov	cx, sp
 41393                                  
 41394                                  rpFind5:
 41395                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 41396                                  
 41397                                  rpFind5Len equ	$ - rpFind5
 41398                                  
 41399                                  ;	mov	ax, DE0Ch
 41400                                  ;	int	67h
 41401                                  ;	mov	sp, cx
 41402                                  ;	jmp	bx
 41403                                  
 41404                                  rpRepl4:
 41405                                  	db	93h, 58h, 8Bh, 0CCh
 41406                                  	db	02Eh, 066h, 0A3h
 41407                                  
 41408                                  rpRepl4o1Len equ $ - rpRepl4
 41409                                  
 41410                                  	db	00h, 00h
 41411                                  	db	02Eh, 066h, 89h, 36h
 41412                                  
 41413                                  rpRepl4o2Len equ $ - rpRepl4
 41414                                  
 41415                                  	db	00h, 00h
 41416                                  
 41417                                  rpRepl4Len equ	$ - rpRepl4
 41418                                  
 41419                                  ;	xchg	bx, ax
 41420                                  ;	pop	ax
 41421                                  ;	mov	cx, sp
 41422                                  ;	mov	dword ptr cs:[xxxx], eax
 41423                                  ;	mov	dword ptr cs:[xxxx], esi
 41424                                  
 41425                                  rpRepl5:
 41426                                  	db	8Bh, 0E1h
 41427                                  	db	2Eh, 66h, 0A1h
 41428                                  
 41429                                  rpRepl5o1Len equ $ - rpRepl5
 41430                                  
 41431                                  	db	00h, 00h
 41432                                  	db	2Eh, 66h, 8Bh, 36h
 41433                                  
 41434                                  rpRepl5o2Len equ $ - rpRepl5
 41435                                  
 41436                                  	db	00h, 00h
 41437                                  	db	0FFh, 0E3h
 41438                                  
 41439                                  rpRepl5Len equ	$ - rpRepl5
 41440                                  
 41441                                  ;	mov	sp, cx
 41442                                  ;	mov	eax, dword ptr cs:[xxxx]
 41443                                  ;	mov	esi, dword ptr cs:[xxxx]
 41444                                  ;	jmp	bx
 41445                                  
 41446                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 41447                                  
 41448                                  rpFind6:
 41449                                  	db	0FAh, 52h, 51h
 41450                                  
 41451                                  rpFind6Len equ	$ - rpFind6
 41452                                  
 41453                                  ;	cli
 41454                                  ;	push	dx
 41455                                  ;	push	cx
 41456                                  
 41457                                  rpFind7a:
 41458                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 41459                                  
 41460                                  rpFind7aLen equ	$ - rpFind7a
 41461                                  
 41462                                  ;	mov	ax, 0DE0Ch
 41463                                  ;	call	fword ptr es:[xxxx]
 41464                                  
 41465                                  rpFind7b:
 41466                                  	db	59h, 5Ah, 5Bh
 41467                                  
 41468                                  rpFind7bLen equ	$ - rpFind7b
 41469                                  
 41470                                  ;	pop	cx
 41471                                  ;	pop	dx
 41472                                  ;	pop	bx
 41473                                  
 41474                                  rpRepl6:
 41475                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 41476                                  
 41477                                  rpRepl6Len equ	$ - rpRepl6
 41478                                  
 41479                                  ;	cli
 41480                                  ;	push	eax
 41481                                  ;	push	ebx
 41482                                  ;	push	ecx
 41483                                  ;	push	edx
 41484                                  
 41485                                  rpRepl7:
 41486                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 41487                                  
 41488                                  rpRepl7Len equ	$ - rpRepl7
 41489                                  
 41490                                  ;	pop	edx
 41491                                  ;	pop	ecx
 41492                                  ;	pop	ebx
 41493                                  ;	pop	eax
 41494                                  ;	pop	bx
 41495                                  
 41496                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 41497                                  
 41498                                  rpFind8:
 41499                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 41500                                  
 41501                                  rpFind8Len equ	$ - rpFind8
 41502                                  
 41503                                  ;	pusha
 41504                                  ;	push	es
 41505                                  ;	push	ds
 41506                                  ;	mov	ax, dgroup	;jump back to here from replace8
 41507                                  ;	mov	ds, ax
 41508                                  
 41509                                  rpFind9 :
 41510                                  	db	1Fh, 07h, 61h
 41511                                  
 41512                                  rpFind9Len equ	$ - rpFind9
 41513                                  
 41514                                  ;	pop	ds
 41515                                  ;	pop	es
 41516                                  ;	popa
 41517                                  
 41518                                  rpRepl8:
 41519                                   	db	66h, 60h, 06h, 1Eh
 41520                                  
 41521                                  rpRepl8Len equ	$ - rpRepl8
 41522                                  
 41523                                  ;	pushad
 41524                                  ;	push	es
 41525                                  ;	push	ds
 41526                                  
 41527                                  rpRepl9:
 41528                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 41529                                  
 41530                                  rpRepl9Len equ	$ - rpRepl9
 41531                                  
 41532                                  ;	pop	ds
 41533                                  ;	pop	es
 41534                                  ;	popad
 41535                                  ;	retn			;no need to jmp back to main-line
 41536                                  
 41537                                  ;----------------------------------------------------------------------------
 41538                                  
 41539                                  struc SearchPair
 41540                                   .sp_off1: resw 1	; offset of 1st search string
 41541                                   .sp_len1: resw 1	; length of 1st search string
 41542                                   .sp_off2: resw 1	; 2nd string
 41543                                   .sp_len2: resw 1	; 2nd string
 41544                                   .sp_diff: resw 1	; max difference between offsets
 41545                                   .size:
 41546                                  endstruc
 41547                                  
 41548                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 41549                                  
 41550                                  rpBug1Strs:
 41551                                  	dw	rpFind2
 41552                                  	dw	rpFind2Len ; 3
 41553                                  	dw	rpFind3
 41554                                  	dw	rpFind3Len ; 4
 41555                                  	dw	20h
 41556                                  
 41557                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 41558                                  
 41559                                  rpBug2Strs:
 41560                                  	dw	rpFind4
 41561                                  	dw	rpFind4Len ; 4
 41562                                  	dw	rpFind5
 41563                                  	dw	rpFind5Len ; 9
 41564                                  	dw	80h
 41565                                  
 41566                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 41567                                  
 41568                                  rpBug3Strs:
 41569                                  	dw	rpFind6
 41570                                  	dw	rpFind6Len ; 3
 41571                                  	dw	rpFind7a
 41572                                  	dw	rpFind7aLen ; 7
 41573                                  	dw	80h
 41574                                  
 41575                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 41576                                  
 41577                                  rpBug4Strs:
 41578                                  	dw	rpFind8
 41579                                  	dw	4
 41580                                  	dw	rpFind9
 41581                                  	dw	rpFind9Len ; 3
 41582                                  	dw	80h
 41583                                  
 41584                                  ;----------------------------------------------------------------------------
 41585                                  
 41586                                  struc StackVars
 41587                                   .sv_wVersion:	resw 1		; Rational extender version #
 41588                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 41589                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 41590                                   .size:
 41591                                  endstruc
 41592                                  
 41593                                  ;----------------------------------------------------------------------------
 41594                                  
 41595                                  ; 22/05/2019 - Retro DOS v4.0
 41596                                  
 41597                                  Rational386Patch:
 41598                                  	; Do a few quick checks to see if this looks like a Rational
 41599                                  	; Extended application. Hopefully this will quickly weed out
 41600                                  	; most non Rational apps.
 41601                                  
 41602                                  	cmp	word [es:0],395		; version number goes here - versions
 41603                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 41604                                  
 41605                                  	cmp	word [es:0Ch],20h	; always has this value here
 41606                                  	jne	short rp3QuickOut
 41607                                  
 41608                                  	push	ax
 41609                                  
 41610                                  	mov	ax,18h 			; extender has 18h at
 41611                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 41612                                  	jne	short rp3QO_ax
 41613                                  	cmp	[es:28],ax
 41614                                  	jne	short rp3QO_ax
 41615                                  	cmp	[es:36],ax
 41616                                  	je	short rp3Maybe
 41617                                  rp3QO_ax:
 41618                                  	pop	ax
 41619                                  rp3QuickOut:
 41620                                  	retn
 41621                                  
 41622                                  ; It might be the rational extender, do more extensive checking
 41623                                  
 41624                                  rp3Maybe:
 41625                                  	cld
 41626                                  	push	bx			; note ax pushed above
 41627                                  	push	cx
 41628                                  	push	dx
 41629                                  	push	si
 41630                                  	push	di
 41631                                  	push	es
 41632                                  	push	ds			; we use all of them
 41633                                  	push	bp
 41634                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 41635                                  	mov	bp,sp
 41636                                  
 41637                                  	push	cs
 41638                                  	pop	ds
 41639                                  
 41640                                  	mov	ax,[es:0]		; save version #
 41641                                  	;mov	[bp+StackVars.sv_wVersion],ax
 41642                                  	mov	[bp],ax	
 41643                                  					; check that binary version # matches
 41644                                  	call	VerifyVersion		;   ascii string
 41645                                  	jne	short rp3Exit_j
 41646                                  
 41647                                  ; Looks like this is it, find where to put the patch code.  The
 41648                                  ; patch will be located on top of Rational code specific to 80286
 41649                                  ; processors, so these patchs MUST NOT be applied if running on
 41650                                  ; an 80286 system.
 41651                                  
 41652                                  	; Rational says the code to patch will never be beyond offset 46xxh
 41653                                  
 41654                                  	mov	cx,4500h		; force search len to 4700h (searches
 41655                                  	;mov	[bp+2],cx
 41656                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 41657                                  
 41658                                  	mov	es,[es:20h]		; es=code segment
 41659                                  
 41660                                  	mov	si,rpFind1		; string to find
 41661                                  	mov	dx,rpFind1Len ; 10	; length to match
 41662                                  	call	ScanCodeSeq		; look for code seq
 41663                                  	jz	short rpGotPatch
 41664                                  
 41665                                  ; According to Rational, some very old versions of the extender may not
 41666                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 41667                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 41668                                  
 41669                                  	mov	si,rpFind1a
 41670                                  	mov	dx,rpFind1aLen  ;8
 41671                                  	call	ScanCodeSeq
 41672                                  	jz	short rpGotPatch
 41673                                  
 41674                                  rp3Exit_j:
 41675                                  	jmp	rp3Exit
 41676                                  
 41677                                  ; Found the location to write patch code! DI = offset in code seg.
 41678                                  
 41679                                  rpGotPatch:
 41680                                  	;mov	[bp+4],di
 41681                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 41682                                  
 41683                                  ;----------------------------------------------------------------------------
 41684                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 41685                                  
 41686                                  	;cmp	word [bp+0],381
 41687                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 41688                                  	cmp	word [bp],381
 41689                                  	jae	short rpBug2			;   < 3.81
 41690                                  
 41691                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 41692                                  	call	FindBadCode
 41693                                  	jc	short rpBug2
 41694                                  
 41695                                  ; si = rpFind2 offset, di = rpFind3 offset
 41696                                  
 41697                                  	push	di
 41698                                  	mov	di,si				; rpFind2 offset
 41699                                  	mov	dx,rpFind2Len ; 3
 41700                                  
 41701                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 41702                                  	jne	short rp_no_cx
 41703                                  
 41704                                  	dec	di				;   yes, gobble up push cx too
 41705                                  	inc	dx
 41706                                  rp_no_cx:
 41707                                  	mov	si,rpRepl2			; patch out find2 sequence
 41708                                  	mov	cx,rpRepl2Len  ; 6
 41709                                  	call	GenPatch
 41710                                  
 41711                                  	pop	di				; rpFind3 offset
 41712                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 41713                                  	jne	short rp_no_cx2
 41714                                  
 41715                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 41716                                  rp_no_cx2:
 41717                                  	;mov	ax,[bp+4]
 41718                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 41719                                  	;mov	[es:di+4],ax
 41720                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 41721                                  
 41722                                  	push	di				; save find3 offset
 41723                                  	mov	si,rpRepl3			; copy repl3 to patch area
 41724                                  	mov	cx,rpRepl3Len ; 5
 41725                                  	call	CopyPatch
 41726                                  
 41727                                  	pop	bx				; find3 offset
 41728                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 41729                                  	call	GenJump 			; jmp back from patch area
 41730                                  	;mov	[bp+4],di
 41731                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 41732                                  						;   area pointer
 41733                                  
 41734                                  ;----------------------------------------------------------------------------
 41735                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 41736                                  
 41737                                  rpBug2:
 41738                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 41739                                  	call	FindBadCode
 41740                                  	jc	short rpBug3
 41741                                  
 41742                                  ; si = rpFind4 offset, di = rpFind5 offset
 41743                                  
 41744                                  	;push	word [bp+4]
 41745                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 41746                                  						;   (where repl4 goes)
 41747                                  	push	di				; save find5 offset
 41748                                  
 41749                                  	mov	di,si
 41750                                  	mov	dx,rpFind4Len ; 4
 41751                                  	mov	si,rpRepl4
 41752                                  	mov	cx,rpRepl4Len ; 15
 41753                                  	call	GenPatch			; patch out find4 code
 41754                                  
 41755                                  	pop	di				; find5 offset
 41756                                  	add	di,5				; keep 5 bytes of find5 code
 41757                                  	;mov	bx,[bp+4]
 41758                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 41759                                  	push	bx				; save repl5 location
 41760                                  	call	GenJump
 41761                                  
 41762                                  	mov	si,rpRepl5			; copy repl5 code to patch
 41763                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 41764                                  	call	CopyPatch			;   so no need to jmp back to
 41765                                  						;   main-line code
 41766                                  
 41767                                  ; patches have been made, now update the patch code to store/load dwords just
 41768                                  ; after the code in the patch area
 41769                                  
 41770                                  	pop	di				; repl5 location
 41771                                  	pop	si				; repl4 location
 41772                                  
 41773                                  	;mov	ax,[bp+4]
 41774                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 41775                                  
 41776                                  	;mov	[es:si+7],ax
 41777                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 41778                                  	;mov	[es:di+5],ax
 41779                                  	mov	[es:di+rpRepl5o1Len],ax
 41780                                  	add	ax,4
 41781                                  	;mov	[es:si+0Dh],ax
 41782                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 41783                                  	;mov	[es:di+0Bh],ax
 41784                                  	mov	[es:di+rpRepl5o2Len],ax
 41785                                  
 41786                                  	;add	word [bp+4],8
 41787                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 41788                                  						; patch area
 41789                                  
 41790                                  ;----------------------------------------------------------------------------
 41791                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 41792                                  
 41793                                  rpBug3:
 41794                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 41795                                  	call	FindBadCode
 41796                                  	jc	short rpBug4
 41797                                  
 41798                                  	;add	di,9
 41799                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 41800                                  	push	si				;   code and locate find7b
 41801                                  	mov	si,rpFind7b			;   sequence
 41802                                  	mov	dx,rpFind7bLen ; 3
 41803                                  	call	ScanCodeSeq_di
 41804                                  	pop	si
 41805                                  	jnz	short rpBug4
 41806                                  
 41807                                  	push	di				; save find7b code offset
 41808                                  
 41809                                  	mov	di,si
 41810                                  	mov	dx,rpFind6Len ; 3
 41811                                  	mov	si,rpRepl6
 41812                                  	mov	cx,rpRepl6Len ; 9
 41813                                  	call	GenPatch			; patch out find6 code
 41814                                  
 41815                                  	pop	di
 41816                                  	mov	dx,rpFind7bLen ; 3
 41817                                  	mov	si,rpRepl7
 41818                                  	mov	cx,rpRepl7Len ; 9
 41819                                  	call	GenPatch			; patch out find7b code
 41820                                  
 41821                                  ;----------------------------------------------------------------------------
 41822                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 41823                                  
 41824                                  rpBug4:
 41825                                  	;cmp	word [bp+0],360
 41826                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 41827                                  	cmp	word [bp],360
 41828                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 41829                                  
 41830                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 41831                                  	call	FindBadCode
 41832                                  	jc	short rp3Exit
 41833                                  
 41834                                  	push	di				; save find9 code offset
 41835                                  
 41836                                  	mov	di,si
 41837                                  	mov	dx,3
 41838                                  	mov	si,rpRepl8
 41839                                  	mov	cx,rpRepl8Len ; 4
 41840                                  	call	GenPatch			; patch out find8 code
 41841                                  
 41842                                  	pop	di				; find9 offset
 41843                                  	;mov	bx,[bp+4]
 41844                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 41845                                  	call	GenJump 			;   patch area
 41846                                  
 41847                                  	mov	si,rpRepl9			; copy replacement code to
 41848                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 41849                                  	call	CopyPatch			;   so no jmp back to main-line
 41850                                  
 41851                                  rp3Exit:
 41852                                  	add	sp,StackVars.size
 41853                                  	pop	bp
 41854                                  	pop	ds
 41855                                  	pop	es
 41856                                  	pop	di
 41857                                  	pop	si
 41858                                  	pop	dx
 41859                                  	pop	cx
 41860                                  	pop	bx
 41861                                  	pop	ax
 41862                                  	retn
 41863                                  
 41864                                  ;----------------------------------------------------------------------------
 41865                                  ;
 41866                                  ; FindBadCode
 41867                                  ;
 41868                                  ; Searches Rational code segment looking for a pair of find strings (all
 41869                                  ; patches have at least two find strings).
 41870                                  ;
 41871                                  ; Entry:
 41872                                  ;	ES    = code segment to search
 41873                                  ;	DS:BX = search pair structure for this search
 41874                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 41875                                  ;
 41876                                  ; Exit:
 41877                                  ;	CY flag clear if both strings found, and
 41878                                  ;	SI    = offset in ES of 1st string
 41879                                  ;	DI    = offset in ES of 2nd string
 41880                                  ;	CY set if either string not found, or strings too far apart
 41881                                  ;
 41882                                  ; Used:
 41883                                  ;	CX
 41884                                  ;
 41885                                  ;----------------------------------------------------------------------------
 41886                                  
 41887                                  ;struc SearchPair
 41888                                  ; .sp_off1: resw 1	; offset of 1st search string
 41889                                  ; .sp_len1: resw 1	; length of 1st search string
 41890                                  ; .sp_off2: resw 1	; 2nd string
 41891                                  ; .sp_len2: resw 1	; 2nd string
 41892                                  ; .sp_diff: resw 1	; max difference between offsets
 41893                                  ; .size:
 41894                                  ;endstruc
 41895                                  
 41896                                  FindBadCode:
 41897                                  	;mov	cx,[bp+2]
 41898                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 41899                                  
 41900                                  	mov	si,[bx]	; mov si,[bx+0]
 41901                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 41902                                  	
 41903                                  	;mov	dx,[bx+2]
 41904                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 41905                                  	call	ScanCodeSeq
 41906                                  	jnz	short fbc_error		; done if 1st not found
 41907                                  
 41908                                  	push	di			; save 1st string offset
 41909                                  
 41910                                  	;mov	si,[bx+4]
 41911                                  	mov	si,[bx+SearchPair.sp_off2]
 41912                                  	;mov	dx,[bx+6]
 41913                                  	mov	dx,[bx+SearchPair.sp_len2]
 41914                                  	call	ScanCodeSeq_di		; don't change flags after this!
 41915                                  
 41916                                  	pop	si			; restore 1st string offset
 41917                                  	jnz	short fbc_error
 41918                                  
 41919                                  	mov	ax,di			; sanity check that
 41920                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 41921                                  	jc	short fbc_error
 41922                                  	;cmp	ax,[bx+8]
 41923                                  	cmp	ax,[bx+SearchPair.sp_diff]
 41924                                  	ja	short fbc_error
 41925                                  
 41926                                  	clc
 41927                                  	retn
 41928                                  
 41929                                  fbc_error:
 41930                                  	stc
 41931                                  	retn
 41932                                  
 41933                                  ;----------------------------------------------------------------------------
 41934                                  ;
 41935                                  ; GenPatch
 41936                                  ;
 41937                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 41938                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 41939                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 41940                                  ; code.
 41941                                  ;
 41942                                  ; Entry:
 41943                                  ;	ES:DI = start of buggy code to be patched
 41944                                  ;	DX    = length of buggy code to be patched
 41945                                  ;	DS:SI = replacement patch code
 41946                                  ;	CX    = length of replacement patch code
 41947                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41948                                  ;
 41949                                  ; Exit:
 41950                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 41951                                  ;
 41952                                  ; Used:
 41953                                  ;	AX, BX, SI, Flags
 41954                                  ;
 41955                                  ;----------------------------------------------------------------------------
 41956                                  
 41957                                  GenPatch:
 41958                                  	push	di			;save offset of buggy code
 41959                                  
 41960                                  	;mov	bx,[bp+4]
 41961                                  	mov	bx,[bp+StackVars.sv_pPatch]
 41962                                  					;jump from buggy code to patch area
 41963                                  	call	GenJump
 41964                                  
 41965                                  	call	CopyPatch		;copy replacement code to patch area
 41966                                  
 41967                                  	pop	bx			;offset of buggy code + buggy code
 41968                                  	add	bx,dx			;  length = return from patch offset
 41969                                  
 41970                                  	call	GenJump 		;jump from patch area back to main-
 41971                                  	;mov	[bp+4],di
 41972                                  	mov	[bp+StackVars.sv_pPatch],di
 41973                                  					;  line code, update patch pointer
 41974                                  	retn
 41975                                  
 41976                                  ;----------------------------------------------------------------------------
 41977                                  ;
 41978                                  ; CopyPatch
 41979                                  ;
 41980                                  ; Copies patch code to patch location.
 41981                                  ;
 41982                                  ; Entry:
 41983                                  ;	DS:SI = patch code to be copied
 41984                                  ;	ES    = segment of code to patch
 41985                                  ;	CX    = length of code to copy
 41986                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 41987                                  ;
 41988                                  ; Exit:
 41989                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 41990                                  ;
 41991                                  ; Used:
 41992                                  ;	SI, Flags
 41993                                  ;
 41994                                  ;----------------------------------------------------------------------------
 41995                                  
 41996                                  CopyPatch:
 41997                                  	push	cx
 41998                                  	;mov	di,[bp+4]
 41999                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 42000                                  	cld
 42001                                  	rep movsb
 42002                                  	pop	cx
 42003                                  	;mov	[bp+4],di
 42004                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 42005                                  	retn
 42006                                  
 42007                                  ;----------------------------------------------------------------------------
 42008                                  ;
 42009                                  ; GenJump
 42010                                  ;
 42011                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 42012                                  ;
 42013                                  ; Entry:
 42014                                  ;	ES:DI = from location (where to put jmp instruction)
 42015                                  ;	BX    = to location (where to jump to)
 42016                                  ;
 42017                                  ; Exit:
 42018                                  ;	DI = byte after generated jump
 42019                                  ;
 42020                                  ; Used:
 42021                                  ;	AX
 42022                                  ;
 42023                                  ;----------------------------------------------------------------------------
 42024                                  
 42025                                  GenJump:
 42026                                  	mov	al,0E9h		; jmp rel16 opcode
 42027                                  	stosb
 42028                                  
 42029                                  	mov	ax,bx		; calc offset to 'to' location
 42030                                  	sub	ax,di
 42031                                  	sub	ax,2
 42032                                  
 42033                                  	stosw			; output offset
 42034                                  
 42035                                  	retn
 42036                                  
 42037                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42038                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42039                                  
 42040                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 42041                                  ; 21/03/2024 - Retro DOS v4.2
 42042                                  ; DOSCODE:B6BEh (MSDOS 6.22, MSDOS.SYS)
 42043                                  
 42044                                  ;----------------------------------------------------------------------------
 42045                                  ;
 42046                                  ; ScanCodeSeq
 42047                                  ;
 42048                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 42049                                  ;
 42050                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 42051                                  ;
 42052                                  ;----------------------------------------------------------------------------
 42053                                  
 42054                                  ScanCodeSeq:
 42055                                  	mov	di,200h
 42056                                  ScanCodeSeq_di:
 42057                                  	push	cx
 42058                                  	sub	cx,dx
 42059                                  	inc	cx
 42060                                  scsagain:
 42061                                  	push	si
 42062                                  	push	di
 42063                                  	push	cx
 42064                                  	mov	cx,dx
 42065                                  	rep	cmpsb
 42066                                  	pop	cx
 42067                                  	pop	di
 42068                                  	pop	si
 42069                                  	je	short scsfound
 42070                                  	inc	di
 42071                                  	loop	scsagain
 42072                                  scsfound:
 42073                                  	pop	cx
 42074                                  vvexit:		; 18/12/2022
 42075                                  	retn
 42076                                  
 42077                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42078                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42079                                  
 42080                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 42081                                  ; 21/03/2024 - Retro DOS v4.2
 42082                                  ; DOSCODE:B6D6h (MSDOS 6.22, MSDOS.SYS)
 42083                                  	
 42084                                  ;----------------------------------------------------------------------------
 42085                                  ;
 42086                                  ; VerifyVersion
 42087                                  ;
 42088                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 42089                                  ; from ES:2A.
 42090                                  ;
 42091                                  ;       Entry: AX = binary version number 
 42092                                  ;       Exit : Z flag set if version numbers match
 42093                                  ;
 42094                                  ;----------------------------------------------------------------------------
 42095                                  
 42096                                  VerifyVersion:
 42097                                  	mov	si,[es:2Ah]		; offset of version number
 42098                                  					;  in ascii
 42099                                  	mov	bl,10
 42100                                  	add	si,3			; point to last digit
 42101                                  
 42102                                  	call	VVDigit
 42103                                  	jne	short vvexit
 42104                                  	call	VVDigit
 42105                                  	jne	short vvexit
 42106                                  	cmp	byte [es:si],'.'
 42107                                  	jne	short vvexit
 42108                                  	dec	si
 42109                                  	;call	VVDigit
 42110                                  	; 18/12/2022
 42111                                  	;jmp	short VVDigit
 42112                                  ;vvexit:
 42113                                  	;retn
 42114                                  VVDigit:
 42115                                  	div	bl
 42116                                  	add	ah,'0'
 42117                                  	dec	si
 42118                                  	cmp	[es:si+1],ah
 42119                                  	mov	ah,0			; do not xor or sub we need Z
 42120                                  	retn
 42121                                  
 42122                                  %endif
 42123                                  
 42124                                  ;-----------------------------------------------------------------------
 42125                                  
 42126                                  ; 23/05/2019 - Retro DOS v4.0
 42127                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 42128                                  
 42129                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42130                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 42131                                  
 42132                                  exepatch_start:	 ; label byte
 42133                                  
 42134                                  	; The following is the code that'll be layed over the buggy unpack
 42135                                  	; code.
 42136                                  str1:
 42137 0000727F 06                      	db  06h	  		;push	es
 42138 00007280 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42139                                  
 42140                                  first_stop equ	$-str1
 42141                                  			
 42142 00007282 2BC2                    	db  2Bh, 0C2h		;sub	ax,dx
 42143                                  
 42144                                  first:  ; label	byte
 42145                                  
 42146 00007284 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42147 00007286 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42148 00007288 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42149 0000728B 57                      	db  57h	    		;push	di
 42150 0000728C B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42151 0000728F B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH
 42152 00007291 F3AE                    	db  0F3h,0AEh 		;repz	scasb
 42153 00007293 47                      	db  47h	    		;inc	di
 42154 00007294 8BF7                    	db  8Bh,0F7h  		;mov	si,di
 42155 00007296 5F                      	db  5Fh	    		;pop	di
 42156 00007297 58                      	db  58h	    		;pop	ax
 42157                                  
 42158                                  second_stop equ	$-first
 42159                                  
 42160 00007298 2BC2                    	db  2Bh,0C2h  		;sub	ax,dx
 42161                                  
 42162                                  second: ; label	byte
 42163                                  
 42164 0000729A 8EC0                    	db  8Eh,0C0h  		;mov	es,ax
 42165                                  		    		;NextRec:
 42166 0000729C B90402                  	db  0B9h,04h,02h	;mov	cx,0204h
 42167                                  		    		;norm_agn:
 42168 0000729F 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42169 000072A1 F7D0                    	db  0F7h,0D0h		;not	ax
 42170 000072A3 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42171 000072A5 7413                    	db  74h,13h		;jz	short SI_ok
 42172 000072A7 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42173 000072A9 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 42174 000072AC 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42175 000072AE 7308                    	db  73h,08h		;jnc	short SItoDS
 42176 000072B0 F7DA                    	db  0F7h,0DAh		;neg	dx
 42177 000072B2 D3E2                    	db  0D3h,0E2h		;shl	dx,cl
 42178 000072B4 2BF2                    	db  2Bh,0F2h		;sub	si,dx
 42179 000072B6 33D2                    	db  33h,0D2h		;xor	dx,dx
 42180                                  				;SItoDS:
 42181 000072B8 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42182                                  				;SI_ok:
 42183 000072BA 87F7                    	db  87h,0F7h		;xchg	si,di
 42184 000072BC 1E                      	db  1Eh			;push	ds
 42185 000072BD 06                      	db  06h			;push	es
 42186 000072BE 1F                      	db  1Fh			;pop	ds
 42187 000072BF 07                      	db  07h			;pop	es
 42188 000072C0 FECD                    	db  0FEh,0CDh		;dec	ch
 42189 000072C2 75DB                    	db  75h,0DBh		;jnz	short norm_agn
 42190 000072C4 AC                      	db  0ACh		;lodsb
 42191 000072C5 92                      	db  92h			;xchg	dx,ax
 42192 000072C6 4E                      	db  4Eh			;dec	si
 42193 000072C7 AD                      	db  0ADh		;lodsw
 42194 000072C8 8BC8                    	db  8Bh,0C8h		;mov	cx,ax
 42195 000072CA 46                      	db  46h			;inc	si
 42196 000072CB 8AC2                    	db  8Ah,0C2h		;mov	al,dl
 42197 000072CD 24FE                    	db  24h,0FEh		;and	al,0FEH
 42198 000072CF 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 42199 000072D1 7505                    	db  75h,05h		;jne	short TryEnum
 42200 000072D3 AC                      	db  0ACh		;lodsb
 42201 000072D4 F3AA                    	db  0F3h,0AAh		;rep stosb
 42202                                  
 42203                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 42204 000072D6 EB06                    	db  0EBh,06h		;jmp	short TryNext
 42205                                  
 42206                                  				;TryEnum:
 42207 000072D8 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 42208 000072DA 756C                    	db  75h,6Ch		;jne	short CorruptExe
 42209 000072DC F3A4                    	db  0F3h,0A4h		;rep movsb
 42210                                  				;TryNext:
 42211                                  
 42212 000072DE 92                      	db  92h			;xchg	dx,ax
 42213                                  ;	db  8Ah,0C2h		;mov	al,dl
 42214                                  
 42215 000072DF A801                    	db  0A8h,01h		;test	al,1
 42216 000072E1 74B9                    	db  74h,0B9h		;jz	short NextRec
 42217 000072E3 9090                    	db  90h,90h		;nop,nop
 42218                                  	
 42219                                  last_stop equ $-second
 42220                                  size_str1 equ $-str1
 42221                                  
 42222                                  	; The following is the code that we need to look for in the exe
 42223                                  	; file.
 42224                                  
 42225                                  scan_patch1: ; label byte
 42226                                  
 42227 000072E5 8CC3                    	db  8Ch,0C3h		;mov	bx,es
 42228 000072E7 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42229 000072E9 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 42230 000072EB 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42231 000072ED 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42232 000072EF BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42233 000072F2 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42234 000072F5 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 42235 000072F7 F3AE                    	db  0F3h,0AEh		;repz	scasb
 42236 000072F9 47                      	db  47h			;inc	di
 42237 000072FA 8BF7                    	db  8Bh,0F7h		;mov	si,di
 42238 000072FC 8BC3                    	db  8Bh,0C3h		;mov	ax,bx
 42239 000072FE 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 42240 00007300 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42241 00007302 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42242                                  				;NextRec:
 42243 00007305 B104                    	db  0B1h,04h		;mov	cl,4
 42244 00007307 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42245 00007309 F7D0                    	db  0F7h,0D0h		;not	ax
 42246 0000730B D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42247 0000730D 7409                    	db  74h,09h		;jz	short SI_ok
 42248 0000730F 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42249 00007311 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42250 00007313 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42251 00007315 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 42252                                  	       			;SI_ok:
 42253 00007318 8BC7                    	db  8Bh,0C7h		;mov	ax,di
 42254 0000731A F7D0                    	db  0F7h,0D0h		;not	ax
 42255 0000731C D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42256 0000731E 7409                    	db  74h,09h		;jz	short DI_ok
 42257 00007320 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 42258 00007322 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42259 00007324 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 42260 00007326 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 42261                                  				;DI_ok:
 42262                                  
 42263                                  size_scan_patch1 equ $-scan_patch1
 42264                                  
 42265                                  scan_patch2: ; label byte
 42266                                  			
 42267 00007329 8CC3                    	db  8Ch,0C3h		;mov	bx,es
 42268 0000732B 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42269 0000732D 48                      	db  48h			;dec	ax
 42270 0000732E 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42271 00007330 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42272 00007332 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42273 00007335 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42274 00007338 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 42275 0000733A F3AE                    	db  0F3h,0AEh		;repz	scasb
 42276 0000733C 47                      	db  47h			;inc	di
 42277 0000733D 8BF7                    	db  8Bh,0F7h		;mov	si,di
 42278 0000733F 8BC3                    	db  8Bh,0C3h		;mov	ax,bx
 42279 00007341 48                      	db  48h			;dec	ax
 42280 00007342 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42281 00007344 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42282                                  				;NextRec:
 42283 00007347 B104                    	db  0B1h,04h		;mov	cl,4
 42284 00007349 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42285 0000734B F7D0                    	db  0F7h,0D0h		;not	ax
 42286 0000734D D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42287 0000734F 740A                    	db  74h,0Ah		;jz	short SI_ok
 42288 00007351 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42289 00007353 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42290 00007355 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42291 00007357 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 42292                                  				;or	si,0FFF0H
 42293                                  				;SI_ok:
 42294 0000735B 8BC7                    	db  8Bh,0C7h		;mov	ax,di
 42295 0000735D F7D0                    	db  0F7h,0D0h		;not	ax
 42296 0000735F D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42297 00007361 740A                    	db  74h,0Ah		;jz	short DI_ok
 42298 00007363 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 42299 00007365 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42300 00007367 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 42301 00007369 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 42302                                  				;or	di,0FFF0H
 42303                                  				;DI_ok:
 42304                                  
 42305                                  size_scan_patch2 equ $-scan_patch2
 42306                                  
 42307                                  scan_patch3: ; label byte
 42308                                  
 42309 0000736D 8CC3                    	db  8Ch,0C3h		;mov	bx,es
 42310 0000736F 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42311 00007371 48                      	db  48h			;dec	ax
 42312 00007372 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42313 00007374 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42314 00007376 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42315 00007379 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42316 0000737C B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 42317 0000737E F3AE                    	db  0F3h,0AEh		;repz	scasb
 42318 00007380 47                      	db  47h			;inc	di
 42319 00007381 8BF7                    	db  8Bh,0F7h		;mov	si,di
 42320 00007383 8BC3                    	db  8Bh,0C3h		;mov	ax,bx
 42321 00007385 48                      	db  48h			;dec	ax
 42322 00007386 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42323 00007388 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42324                                  				;NextRec:
 42325 0000738B B104                    	db  0B1h,04h		;mov	cl,4
 42326 0000738D 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42327 0000738F F7D0                    	db  0F7h,0D0h		;not	ax
 42328 00007391 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42329 00007393 7409                    	db  74h,09h		;jz	short SI_ok
 42330 00007395 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42331 00007397 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42332 00007399 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42333 0000739B 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 42334                                  				;SI_ok:
 42335 0000739E 8BC7                    	db  8Bh,0C7h		;mov	ax,di
 42336 000073A0 F7D0                    	db  0F7h,0D0h		;not	ax
 42337 000073A2 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42338 000073A4 7409                    	db  74h,09h		;jz	short DI_ok
 42339 000073A6 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 42340 000073A8 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42341 000073AA 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 42342 000073AC 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 42343                                  				;DI_ok:
 42344                                  
 42345                                  size_scan_patch3 equ $-scan_patch3
 42346                                  
 42347                                  scan_com: ; label byte
 42348                                  
 42349 000073AF AC                      	db  0ACh		;lodsb
 42350 000073B0 8AD0                    	db  8Ah,0D0h		;mov	dl,al
 42351 000073B2 4E                      	db  4Eh			;dec	si
 42352 000073B3 AD                      	db  0ADh		;lodsw
 42353 000073B4 8BC8                    	db  8Bh,0C8h		;mov	cx,ax
 42354 000073B6 46                      	db  46h			;inc	si
 42355 000073B7 8AC2                    	db  8Ah,0C2h		;mov	al,dl
 42356 000073B9 24FE                    	db  24h,0FEh		;and	al,0FEH
 42357 000073BB 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 42358 000073BD 7506                    	db  75h,06h		;jne	short TryEnum
 42359 000073BF AC                      	db  0ACh		;lodsb
 42360 000073C0 F3AA                    	db  0F3h,0AAh		;rep stosb
 42361 000073C2 EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 42362                                  				;TryEnum:
 42363 000073C5 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 42364 000073C7 756B                    	db  75h,6Bh		;jne	short CorruptExe
 42365 000073C9 F3A4                    	db  0F3h,0A4h		;rep movsb
 42366                                  				;TryNext:
 42367 000073CB 8AC2                    	db  8Ah,0C2h		;mov	al,dl
 42368 000073CD A801                    	db  0A8h,01h		;test	al,1
 42369                                  ;	db  74h,0BAh		;jz	short NextRec
 42370                                  
 42371                                  size_scan_com	equ	$-scan_com
 42372                                  
 42373                                  ;-----------------------------------------------------------------------
 42374                                  
 42375                                  ; 23/05/2019 - Retro DOS v4.0
 42376                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 42377                                  
 42378                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42379                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 42380                                  
 42381                                  ExePatch:
 42382                                  	; 28/12/2022 - Retro DOS v4.1
 42383                                  	;call	ExePackPatch
 42384                                  	;;call	word [ss:RationalPatchPtr]
 42385                                  	;retn
 42386                                  	; 28/12/2022
 42387                                  	;jmp	short ExePackPatch
 42388                                  
 42389                                  ;-----------------------------------------------------------------------
 42390                                  ;
 42391                                  ; Procedure Name 	: ExePackPatch
 42392                                  ;
 42393                                  ; Inputs	 	: DS 			-> DOSDATA
 42394                                  ;			  ES:0 			-> read in image
 42395                                  ;			  ax:cx = start cs:ip of program
 42396                                  ; Output		:		
 42397                                  ;
 42398                                  ;	1. If ES <= 0fffh
 42399                                  ;	   2. if exepack signature ('RB') found
 42400                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 42401                                  ;	       	 4. if rest of the code & checksum compares
 42402                                  ;	  	    5. overlay buggy code with code in 
 42403                                  ;		       doscode:str1.
 42404                                  ;		 6. endif
 42405                                  ;	      7. endif
 42406                                  ;	   8. endif
 42407                                  ;	9. endif
 42408                                  ;
 42409                                  ;
 42410                                  ; Uses			: NONE
 42411                                  ;
 42412                                  ;-----------------------------------------------------------------------
 42413                                  
 42414                                  	; 21/03/2024 - Retro DOS v4.2 (Modified MSDOS 6.22 MSDOS.SYS)
 42415                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42416                                  	; 23/05/2019 - Retro DOS v4.0	
 42417                                  ExePackPatch:
 42418 000073CF 53                      	push	bx
 42419 000073D0 8CC3                    	mov	bx,es			; bx has load segment
 42420 000073D2 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 42421 000073D6 7602                    	jbe	short ep_cont		; N: 
 42422 000073D8 5B                      	pop	bx			; Y: no need to patch
 42423 000073D9 C3                      	retn
 42424                                  ep_cont:
 42425 000073DA 1E                      	push	ds
 42426 000073DB 06                      	push	es
 42427 000073DC 50                      	push	ax
 42428 000073DD 51                      	push	cx
 42429 000073DE 56                      	push	si
 42430 000073DF 57                      	push	di
 42431                                  	
 42432                                  		; M033 - start
 42433                                  		; exepacked programs have an IP of 12h (>=2)
 42434                                  
 42435 000073E0 83E902                  	sub	cx,2			; Q: is IP >=2
 42436 000073E3 7303                    	jnb	short epp_1		; N: exit
 42437 000073E5 E9B500                  	jmp	ep_notpacked
 42438                                  					; ax:cx now points to location of
 42439                                  					; 'RB' if this is an exepacked file.
 42440                                  		; M033 - end
 42441                                  epp_1:
 42442 000073E8 89CF                    	mov	di,cx
 42443 000073EA 8EC0                    	mov	es,ax
 42444 000073EC 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in
 42445                                  					; unpack_offset
 42446                                  
 42447 000073F1 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 42448                                  	;ljne	ep_notpacked
 42449 000073F6 7403                    	je	short epp_2
 42450 000073F8 E9A200                  	jmp	ep_notpacked
 42451                                  epp_2:
 42452 000073FB 0E                      	push	cs
 42453 000073FC 1F                      	pop	ds			; set ds to cs
 42454                                  
 42455                                  	;add	di,6Ch
 42456 000073FD 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed
 42457                                  					;          file where we hope to find
 42458                                  					;	   scan string. 
 42459                                  
 42460 00007400 E8A200                  	call	chk_common_str		; check for match
 42461                                  
 42462 00007403 7521                    	jnz	short ep_chkpatch2	; Q: does the patch match
 42463                                  					; N: check at patch2_offset
 42464                                  					; Y: check for rest of patch string
 42465 00007405 BE[E572]                	mov	si,scan_patch1
 42466                                  					; ds:si -> scan string 
 42467 00007408 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 42468                                  
 42469                                  	;add	di,28h
 42470                                  	; 07/12/2022
 42471 0000740D 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed
 42472                                  					;          file where we hope to find
 42473                                  					;	   scan string. 
 42474                                  	;;mov	cx,68
 42475                                  	;mov	cx,size_scan_patch1
 42476                                  	; 21/03/2024
 42477 00007410 B144                    	mov	cl,size_scan_patch1 ; 68
 42478                                  
 42479                                  	;mov	bx,142
 42480 00007412 BB8E00                  	mov	bx,CHKSUM1_LEN
 42481                                  	;mov	ax,0EF4Eh
 42482 00007415 B84EEF                  	mov	ax,PATCH1_CHKSUM
 42483 00007418 E89E00                  	call	chk_patchsum		; check if patch and chk sum compare
 42484 0000741B 7207                    	jc	short ep_done1		; Q: did we pass the test
 42485                                  					; N: exit
 42486                                  					; Y: overlay code with new 
 42487 0000741D BE[7F72]                	mov	si,str1
 42488                                  	;;mov	cx,102
 42489                                  	;mov	cx,size_str1
 42490                                  	; 21/03/2024
 42491 00007420 B166                    	mov	cl,size_str1 ; 102
 42492                                  
 42493 00007422 F3A4                    	rep	movsb
 42494                                  ep_done1:
 42495 00007424 EB77                    	jmp	short ep_done ; 21/03/2024
 42496                                  
 42497                                  ep_chkpatch2:
 42498                                  	;mov	di,76h
 42499 00007426 BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 42500                                  					; in another version of unpack
 42501 00007429 E87900                  	call	chk_common_str		; check for match
 42502                                  
 42503 0000742C 753D                    	jnz	short ep_chkpatch3	; Q: does the patch match
 42504                                  					; N: check for patch3_offset
 42505                                  					; Y: check for rest of patch string
 42506                                  
 42507 0000742E BE[2973]                	mov	si,scan_patch2
 42508                                  					; ds:si -> scan string
 42509                                  	;mov	di,32h
 42510 00007431 BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed
 42511                                  					;          file where we hope to find
 42512                                  	;;mov	cx,68			;	   scan string.
 42513                                  	;mov	cx,size_scan_patch2
 42514                                  	; 21/03/2024
 42515 00007434 B144                    	mov	cl,size_scan_patch2 ; 68
 42516                                  	;mov	bx,140
 42517 00007436 BB8C00                  	mov	bx,CHKSUM2_LEN
 42518                                  	;mov	ax,78B2h
 42519 00007439 B8B278                  	mov	ax,PATCH2_CHKSUM
 42520 0000743C E87A00                  	call	chk_patchsum		; check if patch and chk sum compare
 42521                                  
 42522                                  					; M046 - Start
 42523                                  					; Q: did we pass the test
 42524 0000743F 7310                    	jnc	short ep_patchcode2	; Y: overlay code with new
 42525                                  					; N: try with a different chksum
 42526                                  
 42527 00007441 BE[2973]                	mov	si,scan_patch2
 42528                                  					; ds:si -> scan string
 42529                                  	;;mov	cx,68
 42530                                  	;mov	cx,size_scan_patch2
 42531                                  	; 21/03/2024
 42532 00007444 B144                    	mov	cl,size_scan_patch2 ; 68
 42533                                  	;mov	bx,129
 42534 00007446 BB8100                  	mov	bx,CHKSUM2A_LEN
 42535                                  	;mov	ax,1C47h
 42536 00007449 B8471C                  	mov	ax,PATCH2A_CHKSUM
 42537 0000744C E86A00                  	call	chk_patchsum		; check if patch and chk sum compare
 42538                                  					; Q: did we pass the test
 42539 0000744F 724C                    	jc	short ep_notpacked	; N: try with a different chksum
 42540                                  					; Y: overlay code with new
 42541                                  						
 42542                                  ep_patchcode2:			       	; M046 - End
 42543 00007451 BE[7F72]                	mov	si,str1
 42544                                  	;;mov	cx,3
 42545                                  	;mov	cx,first_stop
 42546                                  	; 21/03/2024
 42547 00007454 B103                    	mov	cl,first_stop ; 3
 42548 00007456 F3A4                    	rep	movsb
 42549 00007458 B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 42550 0000745B AB                      	stosw
 42551                                  	;add	si,2
 42552                                  	; 21/03/2024
 42553 0000745C 46                      	inc	si
 42554 0000745D 46                      	inc	si	
 42555                                  	;;mov	cx,20
 42556                                  	;mov	cx,second_stop
 42557                                  	; 21/03/2024
 42558 0000745E B114                    	mov	cl,second_stop ; 20
 42559 00007460 F3A4                    	rep	movsb
 42560 00007462 AB                      	stosw				; put in dec ax and nop
 42561                                  	;add	si,2
 42562                                  	; 21/03/2024
 42563 00007463 46                      	inc	si
 42564 00007464 46                      	inc	si
 42565                                  	;;mov	cx,75
 42566                                  	;mov	cx,last_stop
 42567                                  	; 21/03/2024
 42568 00007465 B14B                    	mov	cl,last_stop ; 75
 42569 00007467 F3A4                    	rep	movsb
 42570 00007469 EB32                    	jmp	short ep_done
 42571                                  
 42572                                  ep_chkpatch3:
 42573                                  	;mov	di,74h
 42574 0000746B BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 42575                                  					; in another version of unpack
 42576 0000746E E83400                  	call	chk_common_str		; check for match
 42577                                  
 42578 00007471 752A                    	jnz	short ep_notpacked	; Q: does the patch match
 42579                                  					; N: exit
 42580                                  					; Y: check for rest of patch string
 42581 00007473 BE[6D73]                	mov	si,scan_patch3
 42582                                  					; ds:si -> scan string
 42583                                  	;mov	di,32h
 42584 00007476 BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed
 42585                                  					;          file where we hope to find
 42586                                  					;	   scan string. 
 42587                                  	;;mov	cx,66
 42588                                  	;mov	cx,size_scan_patch3
 42589                                  	; 21/03/2024
 42590 00007479 B142                    	mov	cl,size_scan_patch3 ; 66
 42591                                  	;mov	bx,139
 42592 0000747B BB8B00                  	mov	bx,CHKSUM3_LEN
 42593                                  	;mov	ax,4EDEh
 42594 0000747E B8DE4E                  	mov	ax,PATCH3_CHKSUM
 42595 00007481 E83500                  	call	chk_patchsum		; check if patch and chk sum compare
 42596 00007484 7217                    	jc	short ep_notpacked	; Q: did we pass the test
 42597                                  					; N: exit
 42598                                  					; Y: overlay code with new
 42599 00007486 BE[7F72]                	mov	si,str1
 42600                                  	;;mov	cx,3
 42601                                  	;mov	cx,first_stop
 42602                                  	; 21/03/2024
 42603 00007489 B103                    	mov	cl,first_stop ; 3
 42604 0000748B F3A4                    	rep	movsb
 42605 0000748D B048                    	mov	al,48h			; al = opcode for dec ax
 42606 0000748F AA                      	stosb
 42607                                  	;add	si,2
 42608                                  	; 21/03/2024
 42609 00007490 46                      	inc	si
 42610 00007491 46                      	inc	si
 42611                                  	;;mov	cx,20
 42612                                  	;mov	cx,second_stop
 42613                                  	; 21/03/2024
 42614 00007492 B114                    	mov	cl,second_stop ; 20
 42615 00007494 F3A4                    	rep	movsb
 42616 00007496 AA                      	stosb				; put in dec ax
 42617                                  	;add	si,2
 42618                                  	; 21/03/2024
 42619 00007497 46                      	inc	si
 42620 00007498 46                      	inc	si
 42621                                  	;;mov	cx,75
 42622                                  	;mov	cx,last_stop
 42623                                  	; 21/03/2024
 42624 00007499 B14B                    	mov	cl,last_stop ; 75
 42625 0000749B F3A4                    	rep	movsb
 42626                                  
 42627                                  ep_notpacked:
 42628                                  	;stc
 42629                                  ep_done:
 42630 0000749D 5F                      	pop	di
 42631 0000749E 5E                      	pop	si
 42632 0000749F 59                      	pop	cx
 42633 000074A0 58                      	pop	ax
 42634 000074A1 07                      	pop	es
 42635 000074A2 1F                      	pop	ds
 42636 000074A3 5B                      	pop	bx
 42637 000074A4 C3                      	retn
 42638                                  
 42639                                  ;-------------------------------------------------------------------------
 42640                                  ;
 42641                                  ; 	Procedure Name	: chk_common_str
 42642                                  ;
 42643                                  ;	Input		: DS = DOSCODE
 42644                                  ;			; ES:DI points to string in packed file
 42645                                  ;
 42646                                  ;	Output		; Z if match else NZ
 42647                                  ;
 42648                                  ;-------------------------------------------------------------------------
 42649                                  
 42650                                  	; 23/05/2019 - Retro DOS v4.0
 42651                                  chk_common_str:
 42652 000074A5 BE[AF73]                	mov	si,scan_com
 42653                                  					; ds:si -> scan string
 42654                                  	;mov	cx,32
 42655 000074A8 B92000                  	mov	cx,size_scan_com
 42656                                  
 42657 000074AB F3A6                    	repe	cmpsb
 42658                                  
 42659                                  					; M046 - start
 42660                                  	; a fourth possible version of these exepacked programs have a
 42661                                  	; 056h instead of 06Bh. See scan_com above
 42662                                  	;
 42663                                  	; 	db  75h, 6Bh		;jne CorruptExe
 42664                                  	;
 42665                                  	; If the mismatch at this point is due to a 56h instead of 6Bh
 42666                                  	; we shall try to match the rest of the string
 42667                                  	;
 42668                                  
 42669 000074AD 7409                    	jz	short ccs_done
 42670 000074AF 26807DFF56              	cmp	byte [es:di-1],56h
 42671 000074B4 7502                    	jnz	short ccs_done
 42672                                  
 42673 000074B6 F3A6                    	repe	cmpsb
 42674                                  ccs_done:				; M046 - end
 42675 000074B8 C3                      	retn
 42676                                  
 42677                                  ;-------------------------------------------------------------------------
 42678                                  ;
 42679                                  ;	Procedure Name	: chk_patchsum
 42680                                  ;
 42681                                  ;	Input		: DS:SI -> string we're looking for
 42682                                  ;			: ES:DI -> offset in packed file
 42683                                  ;			: CX 	= scan length
 42684                                  ;			: BX	= length of check sum
 42685                                  ;			: AX 	= value of check sum
 42686                                  ;
 42687                                  ;	Output		: if patch & check sum compare
 42688                                  ;				NC
 42689                                  ;			  else
 42690                                  ;				CY
 42691                                  ;
 42692                                  ;	Uses		: AX, BX, CX, SI
 42693                                  ;
 42694                                  ;-------------------------------------------------------------------------
 42695                                  
 42696                                  	; 23/05/2019 - Retro DOS v4.0
 42697                                  chk_patchsum:
 42698 000074B9 57                      	push	di
 42699                                  
 42700 000074BA F3A6                    	repe	cmpsb
 42701                                  
 42702 000074BC 7518                    	jnz	short cp_fail		; Q: does the patch match
 42703                                  					; N: exit
 42704                                  					; Y:
 42705                                  
 42706                                  		; we do a check sum starting from the location of the
 42707                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 42708                                  		; unpacking code.
 42709                                  
 42710 000074BE 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 42711 000074C3 89D9                    	mov	cx,bx			; cx = length of check sum
 42712                                  
 42713 000074C5 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 42714 000074C7 31C0                    	xor	ax,ax
 42715                                  ep_chksum:
 42716 000074C9 260305                  	add	ax,[es:di]
 42717 000074CC 83C702                  	add	di,2
 42718 000074CF E2F8                    	loop	ep_chksum
 42719                                  
 42720 000074D1 5F                      	pop	di			; restore di
 42721                                  
 42722 000074D2 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 42723                                  	;jne	short cp_fail		; N: exit
 42724                                  					; Y:
 42725                                  	; 25/09/2023
 42726                                  	;clc
 42727                                  	;retn
 42728 000074D4 74E2                    	je	short ccs_done ; cf=0
 42729                                  	
 42730                                  cp_fail:
 42731 000074D6 F9                      	stc
 42732 000074D7 C3                      	retn
 42733                                  
 42734                                  ; 28/12/2022 - Retro DOS v4.1
 42735                                  %if 0
 42736                                  ;--------------------------------------------------------------------------- 
 42737                                  
 42738                                  
 42739                                  ; M020 : BEGIN
 42740                                  ;
 42741                                  ;---------------------------------------------------------------------------
 42742                                  ;
 42743                                  ; procedure : RationalPatch
 42744                                  ;
 42745                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 42746                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 42747                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 42748                                  ;
 42749                                  ; THE BUG is in the following code sequence:
 42750                                  ;
 42751                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 42752                                  ;90		even				; word align
 42753                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 42754                                  ;e8 xx xx	call	set_A20			; enable A20
 42755                                  ;
 42756                                  ; This patch routine replaces the mov & the loop with a far call into a
 42757                                  ; routine in DOS data segment which is in low memory (because A20 line
 42758                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 42759                                  ; a mov & loop.
 42760                                  ;
 42761                                  ; Identification of Buggy Rational EXE
 42762                                  ; ====================================
 42763                                  ;
 42764                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 42765                                  ;
 42766                                  ; OFFSET				Contains
 42767                                  ; ------				--------
 42768                                  ; 0000h			100 times Version number in binary
 42769                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 42770                                  ;
 42771                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 42772                                  ;
 42773                                  ; 002ah			offset where version number is stored in ASCII
 42774                                  ;				e.g. '3.48A'
 42775                                  ;
 42776                                  ; 0030h			offset of copyright string. Copyright strings either
 42777                                  ;			start with "DOS/16M Copyright...." or
 42778                                  ;			"Copyright.....". The string contains
 42779                                  ;			"Rational Systems, Inc."
 42780                                  ;
 42781                                  ; 0020h			word : Paragraph offset of the buggy code segment
 42782                                  ;				from the program image
 42783                                  ; 0016h			word : size of buggy code segment
 42784                                  ;
 42785                                  ;	Buggy code is definite to start after offset 200h in its segment
 42786                                  ;
 42787                                  ;----------------------------------------------------------------------------
 42788                                  
 42789                                  ; 23/05/2019 - Retro DOS v4.0
 42790                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 42791                                  
 42792                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42793                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 42794                                  
 42795                                  RScanPattern1:
 42796                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 42797                                  
 42798                                  RLen1 equ $ - RScanPattern1
 42799                                  
 42800                                  RScanPattern2:
 42801                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 42802                                  
 42803                                  RLen2 equ $ - RScanPattern2
 42804                                  
 42805                                  RScanPattern3:
 42806                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 42807                                  
 42808                                  RLen3 equ $ - RScanPattern2
 42809                                  
 42810                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 42811                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 42812                                  
 42813                                  ;----------------------------------------------------------------------------
 42814                                  ;
 42815                                  ; INPUT : ES = segment where program got loaded
 42816                                  ;
 42817                                  ;----------------------------------------------------------------------------
 42818                                  
 42819                                  RationalPatch:
 42820                                  	cld
 42821                                  
 42822                                  ; 21/03/2024
 42823                                  %if 0
 42824                                  	push	ax
 42825                                  	push	bx
 42826                                  	push	cx
 42827                                  	push	dx
 42828                                  	push	si
 42829                                  	push	di
 42830                                  %else
 42831                                  	; 21/03/2024 (PCDOS 7.1 IBMDOS.COM)
 42832                                  	;;;
 42833                                  	pusha
 42834                                  	;;;
 42835                                  %endif
 42836                                  	push	es
 42837                                  	push	ds			; we use all of them
 42838                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 42839                                  	push	cs
 42840                                  	pop	ds
 42841                                  	
 42842                                  	mov	si,RScanPattern1
 42843                                  	;mov	cx,10
 42844                                  	mov	cx,RLen1
 42845                                  	rep	cmpsb			; do we have the pattern ?
 42846                                  	jne	short rpexit
 42847                                  	mov	ax,[es:0]
 42848                                  	cmp	ax,348			; is it a buggy version ?
 42849                                  	jb	short rpexit
 42850                                  	cmp	ax,383			; is it a buggy version ?
 42851                                  	ja	short rpexit
 42852                                  
 42853                                  	call	VerifyVersion
 42854                                  	jne	short rpexit
 42855                                  
 42856                                  	mov	cx,[es:16h]		; Length of buggy code seg
 42857                                  	sub	cx,200h			; Length we search (we start
 42858                                  					;  at offset 200h)
 42859                                  	mov	es,[es:20h]		; es=buggy code segment
 42860                                  	mov	si,RScanPattern2
 42861                                  	;mov	dx,8	
 42862                                  	mov	dx,RLen2
 42863                                  	call	ScanCodeSeq		; look for code seq with nop
 42864                                  	jz	short rpfound
 42865                                  
 42866                                  	mov	si,RScanPattern3
 42867                                  	;mov	dx,15
 42868                                  	mov	dx,RLen3
 42869                                  	call	ScanCodeSeq		; look for code seq w/o nop
 42870                                  	jnz	short rpexit
 42871                                  
 42872                                  rpfound:
 42873                                  	
 42874                                  ;	we set up a far call into DOS data
 42875                                  ;	dx has the length of the code seq we were searching for
 42876                                  
 42877                                  	mov	al,9Ah			; far call opcode
 42878                                  	stosb
 42879                                  	mov	ax,RatBugCode
 42880                                  	stosw
 42881                                  	mov	ax,ss
 42882                                  	stosw
 42883                                  	mov	cx,dx
 42884                                  	sub	cx,6			; filler (with NOPs)
 42885                                  	mov	al,90h
 42886                                  	rep	stosb
 42887                                  rpexit:
 42888                                  	pop	ds
 42889                                  	pop	es
 42890                                  
 42891                                  ; 21/03/2024
 42892                                  %if 0
 42893                                  	pop	di
 42894                                  	pop	si
 42895                                  	pop	dx
 42896                                  	pop	cx
 42897                                  	pop	bx
 42898                                  	pop	ax
 42899                                  %else
 42900                                  	; 21/03/2024 (PCDOS 7.1 IBMDOS.COM)
 42901                                  	;;;
 42902                                  	popa
 42903                                  	;;;
 42904                                  %endif
 42905                                  	retn
 42906                                  
 42907                                  ; M020 END
 42908                                  
 42909                                  ;--------------------------------------------------------------------------- 
 42910                                  %endif	; 28/12/2022
 42911                                  
 42912                                  ;---------------------------------------------------------------------------
 42913                                  ;
 42914                                  ;	M068
 42915                                  ;
 42916                                  ; 	Procedure Name	: IsCopyProt
 42917                                  ;
 42918                                  ;	Inputs		: DS:100 -> start of com file just read in
 42919                                  ;
 42920                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 42921                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 42922                                  ;			  copy protect scheme that relies on the A20 line
 42923                                  ;			  being turned off for it's scheme to work.
 42924                                  ;
 42925                                  ;			  Note: The int 21 function dispatcher will turn 
 42926                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 42927                                  ;				and dec the A20OFF_COUNT before	iretting 
 42928                                  ;				to the user. 
 42929                                  ;
 42930                                  ;	Uses		: ES, DI, SI, CX
 42931                                  ;
 42932                                  ;---------------------------------------------------------------------------
 42933                                  
 42934                                  ; 23/05/2019 - Retro DOS v4.0
 42935                                  
 42936                                  CPStartOffset	EQU	0175h
 42937                                  CPID1Offset	EQU	011Bh
 42938                                  CPID2Offset	EQU	0173h
 42939                                  CPID3Offset	EQU	0146h
 42940                                  CPID4Offset	EQU	0124h
 42941                                  ID1		EQU	05343h
 42942                                  ID2		EQU	05044h
 42943                                  ID3		EQU	0F413h
 42944                                  ID4		EQU	08000h
 42945                                  
 42946                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 42947                                  
 42948                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42949                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 42950                                  
 42951                                  CPScanPattern:
 42952 000074D8 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 42953 000074DC 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 42954 000074E0 C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 42955 000074E6 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 42956 000074EA B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 42957 000074ED BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 42958                                  
 42959                                  CPSPlen	EQU $ - CPScanPattern
 42960                                  
 42961                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 42962                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 42963                                  
 42964                                  IsCopyProt:
 42965 000074F0 813E1B014353            	cmp	word [CPID1Offset],ID1
 42966 000074F6 752D                    	jne	short CP_done
 42967                                  
 42968 000074F8 813E73014450            	cmp	word [CPID2Offset],ID2
 42969 000074FE 7525                    	jne	short CP_done
 42970                                  
 42971 00007500 813E460113F4            	cmp	word [CPID3Offset],ID3
 42972 00007506 751D                    	jne	short CP_done
 42973                                  
 42974 00007508 813E24010080            	cmp	word [CPID4Offset],ID4
 42975 0000750E 7515                    	jne	short CP_done
 42976                                  
 42977 00007510 0E                      	push	cs
 42978 00007511 07                      	pop	es
 42979 00007512 BF[D874]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 42980                                  
 42981 00007515 BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 42982                                  					; of pattern
 42983                                  
 42984 00007518 B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 42985 0000751B F3A6                    	repe	cmpsb
 42986 0000751D 7506                    	jnz	short CP_done
 42987                                  
 42988 0000751F 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 42989                                  CP_done:
 42990 00007525 C3                      	retn
 42991                                  	
 42992                                  ;DOSCODE ENDS
 42993                                  
 42994                                  	;END
 42995                                  
 42996                                  ;----------------------------------------------------------------------------
 42997                                  
 42998                                  ;align 2 ; 05/09/2018 (Error!)
 42999                                  
 43000                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43001                                  ;align 16 ; 08/09/2018 (OK.)
 43002                                  align 2
 43003                                  
 43004                                  ; 06/08/2018 - Retro DOS v3.0
 43005                                  ;============================================================================
 43006                                  ; MSINIT.ASM
 43007                                  ;============================================================================
 43008                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 43009                                  ;
 43010                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 43011                                  ;
 43012                                  	; 15/07/2018 - Retro DOS v3.0
 43013                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 43014                                  
 43015                                  ; temp iret instruction
 43016                                  
 43017                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43018                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 43019                                  
 43020                                  initiret: ; MSDOS 6.0
 43021                                  SYSBUF:
 43022                                  ;IRETT: ; 06/05/2019
 43023 00007526 CF                      	iret
 43024                                  
 43025                                  ; 22/04/2019 - Retro DOS v4.0
 43026                                  
 43027                                  ; pointer to the BIOS data segment that will be available just to the
 43028                                  ; initialization code
 43029                                  
 43030 00007527 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 43031                                  
 43032                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43033                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 43034                                  
 43035                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 43036                                  
 43037                                  ParaRound:
 43038 00007529 83C00F                  	add	ax, 15
 43039 0000752C D1D8                    	rcr	ax, 1
 43040 0000752E D1E8                    	shr	ax, 1
 43041 00007530 D1E8                    	shr	ax, 1
 43042 00007532 D1E8                    	shr	ax, 1
 43043 00007534 C3                      	retn
 43044                                  
 43045                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 43046                                  
 43047                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43048                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 43049                                  	
 43050                                  	; 30/05/2019
 43051                                  	; 22/04/2019 - Retro DOS v4.0
 43052                                  	; 07/07/2018 - Retro DOS v3.0
 43053                                  	; Retro DOS v2.0 - 03/03/2018
 43054                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43055                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 43056                                  DOSINIT:
 43057                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 43058                                  	;
 43059                                  	; Far call from SYSINIT
 43060                                  	; DX = Memory size in paragraphs
 43061                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 43062                                  	;	  (Retro DOS v2.0, 16/03/2018)
 43063                                  	;
 43064                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 43065                                  	;	  (Retro DOS v4.0, 20/04/2019)
 43066                                  
 43067 00007535 FA                              CLI
 43068 00007536 FC                              CLD
 43069                                  
 43070                                  	; 03/11/2022
 43071                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 43072                                  	
 43073                                  	; 17/12/2022
 43074                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43075                                  	;push	dx ; =*=		; save parameters from BIOS
 43076                                  	
 43077 00007537 56                      	push	si
 43078 00007538 1E                      	push	ds
 43079 00007539 57                      	push	di			;save di (ptr to BiosComBlock)
 43080                                  
 43081 0000753A 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 43082                                  
 43083                                  ; First, move the DOS data segment to its final location in low memory
 43084                                  
 43085                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 43086                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h
 43087 0000753C B8[AD79]                	mov	ax,MEMSTRT		; get offset of end of init code
 43088                                  
 43089                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 43090                                  	;and	ax,~15	; 0FFF0h	; boundary
 43091                                  
 43092                                  	;mov	si,ax			; si = offset of DOSDATA in current
 43093                                  					; code segment
 43094                                  
 43095                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43096 0000753F 83C00F                  	add	ax,15			; round to nearest paragraph
 43097                                  	;and	ax,~15			; boundary
 43098                                  	; 12/04/2024
 43099 00007542 24F0                    	and	al,0F0h
 43100                                  
 43101 00007544 89C6                    	mov	si,ax			; si = offset of DOSDATA in current
 43102                                  					; code segment
 43103                                  	; 05/12/2022
 43104                                  	; 30/04/2019 - Retro DOS v4.0
 43105                                  	;xor	si,si
 43106                                  	
 43107                                  	;mov	ax,cs
 43108                                  	;mov	ds,ax			; ds = current code segment
 43109                                  					; DS:SI now points to dosdata
 43110                                  	; 22/03/2024
 43111 00007546 0E                      	push	cs
 43112 00007547 1F                      	pop	ds
 43113                                  
 43114                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 43115                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 43116                                  					;  BData segment. Cannot use
 43117                                  					;  getdseg macro here!!!
 43118                                  	; 17/12/2022
 43119 00007548 8E06[2775]              	mov	es,[InitBioDataSeg]
 43120                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43121                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 43122                                  
 43123                                  	;mov	es,[es:3]
 43124 0000754C 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 43125                                  
 43126 00007551 31FF                    	xor	di,di			; ES:DI now points to RAM data
 43127                                  
 43128                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 43129                                  	;mov	cx,4976  ; 25/05/2019
 43130                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43131                                  	;mov	cx,4962
 43132                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 43133 00007553 B9CF12                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 43134 00007556 F3A4                    	rep	movsb			; move data to final location
 43135                                  	
 43136 00007558 5F                      	pop	di			; restore ptr to BiosComBlock
 43137 00007559 1F                      	pop	ds			; restore parms from BIOS
 43138 0000755A 5E                      	pop	si
 43139                                  	; 17/12/2022
 43140                                  	;pop	dx ; 30/05/2019
 43141                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43142                                  	;pop	dx ; =*=
 43143                                  
 43144 0000755B 06                      	push	es
 43145 0000755C 1E                      	push	ds
 43146 0000755D 07                      	pop	es			; es:si -> device chain
 43147 0000755E 1F                      	pop	ds			; ds points to dosdata
 43148                                  
 43149                                  ;SR;
 43150                                  ;We get a ptr to the BIOS exchange data block. This has been setup right
 43151                                  ;now so that the EXEC call knows when SysInit is present to do the special
 43152                                  ;lie table handling for device drivers. This can be expanded later on to
 43153                                  ;establish a communication block from the BIOS to the DOS.
 43154                                  
 43155                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 43156                                  	;mov	[1042h],bx
 43157 0000755F 893E[4010]              	mov	[BiosDataPtr],di
 43158 00007563 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 43159                                  
 43160 00007567 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 43161                                  
 43162                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 43163                                  
 43164 0000756C 2E8C1E[954F]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 43165 00007571 2E8C1E[994F]            	mov	[cs:LowInt24Addr+2],ds
 43166 00007576 2E8C1E[9D4F]            	mov	[cs:LowInt28Addr+2],ds
 43167                                  
 43168                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 43169                                  	;mov	[584h],sp
 43170                                  	;mov	[586h],ss
 43171 0000757B 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 43172 0000757F 8926[8405]              	mov	[USER_SP],sp
 43173 00007583 8C16[8605]              	mov	[USER_SS],ss
 43174                                  
 43175 00007587 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 43176 00007589 8ED0                    	mov	ss,ax
 43177                                  
 43178                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 43179                                  	;mov	sp,offset dosdata:dskstack
 43180 0000758B BC[2009]                	mov	sp,DSKSTACK
 43181                                  
 43182                                  ;M023
 43183                                  ; Init patch ptrs to default values
 43184                                  
 43185                                  ; 22/03/2024
 43186                                  %if 0
 43187                                  	;mov	word [1212h],RetExePatch
 43188                                  	;mov	word [1214h],RetExePatch
 43189                                  	;mov	word [61h],RetExePatch
 43190                                  	mov	word [FixExePatch],RetExePatch	; M023
 43191                                  	; 28/12/2022 - Retro DOS v4.1
 43192                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 43193                                  	mov	word [ChkCopyProt],RetExePatch	; M068
 43194                                  %else
 43195                                  	; 22/03/2024 (PCDOS 7.1 IBMDOS.COM)
 43196                                  	;;;	
 43197 0000758E B8[EC60]                	mov	ax,RetExePatch
 43198 00007591 A3[1212]                	mov	[FixExePatch],ax
 43199                                  	;mov	[RationalPatchPtr],ax
 43200 00007594 A3[6100]                	mov	[ChkCopyProt],ax
 43201                                  	;;;
 43202                                  %endif
 43203                                  
 43204                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43205                                  %if 0	; 19/09/2023
 43206                                  
 43207                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 43208                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 43209                                  ; running in the HMA.
 43210                                  
 43211                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 43212                                  	cmp	al,2		;   386 or later?
 43213                                  	mov	ax,Rational386Patch
 43214                                  	jae	short di_set_patch
 43215                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 43216                                  di_set_patch:
 43217                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 43218                                  
 43219                                  %endif
 43220                                  	; Set up the variable temp_dosloc to point to the dos code segment
 43221                                  
 43222 00007597 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 43223                                  
 43224                                  	; ax now holds segment of DOS code
 43225 00007599 A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 43226                                  
 43227 0000759C 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 43228 000075A0 8936[4800]              	mov	word [NULDEV],si
 43229                                  ;SR;
 43230                                  ; There are some locations in the Win386 instance data structures
 43231                                  ; which need to be set up with the DOS data segment. First, initialize
 43232                                  ; the segment part of the instance table pointer in the SIS.
 43233                                  
 43234                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]
 43235 000075A4 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 43236                                  
 43237                                  ; Now initialize the segment part of the pointer to the data in each
 43238                                  ; instance table entry.
 43239                                  
 43240 000075A8 56                      	push	si		; preserve pointer to device chain
 43241                                  	; 18/12/2022
 43242                                  	; cx = 0
 43243 000075A9 B107                    	mov	cl,7
 43244                                  	;mov	cx,7		; There are 7 entries in the instance table
 43245                                  				; M019
 43246                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 43247 000075AB BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 43248                                  Instance_init_loop:
 43249 000075AE 8C1C                    	mov	[si],ds		; set offset in instance entry
 43250                                  	;add	si,6
 43251 000075B0 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 43252 000075B3 E2F9                    	loop	Instance_init_loop
 43253                                  
 43254                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 43255                                  
 43256                                  	; 18/12/2022
 43257 000075B5 B105                    	mov	cl,5
 43258                                  	;mov	cx,5		; There are five entries in the instance table
 43259                                  
 43260                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 43261                                  	;mov	si,11EDh	; point si to segment field
 43262 000075B7 BE[ED11]                	mov	si,OldInstanceJunk+6
 43263                                  OldInstance_init_loop:
 43264 000075BA 8C1C                    	mov	[si],ds		; set offset in instance entry
 43265 000075BC 83C606                  	add	si,6		; move on to next entry
 43266 000075BF E2F9                    	loop	OldInstance_init_loop
 43267 000075C1 5E                      	pop	si		; restore pointer to device chain
 43268                                  
 43269                                  ; End of WIN386 2.xx compatibility bullshit
 43270                                  
 43271                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43272                                  %if 0	
 43273                                     	; 30/04/2019
 43274                                  	;push	es
 43275                                  	;pop	ds
 43276                                  			; ds:si points to console device
 43277                                  
 43278                                  	; 24/04/2019 - Retro DOS v4.0
 43279                                  
 43280                                  	; 15/07/2018
 43281                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 43282                                  	; (Set INT 2Ah handler address to an 'IRET')
 43283                                  
 43284                                  	; need crit vector inited to use deviocall
 43285                                  	;push	ds			; preserve segment of device chain
 43286                                  	push	es ; 30/04/2019
 43287                                  
 43288                                  %endif
 43289                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43290 000075C2 06                      	push	es
 43291                                  	; 17/12/2022
 43292                                  	;pop	ds
 43293                                  	;push	ds
 43294                                  
 43295 000075C3 31C0                    	xor	ax,ax
 43296 000075C5 8ED8                    	mov	ds,ax			; point DS to int vector table
 43297 000075C7 B8[2675]                	mov	ax,initiret
 43298                                  	;mov	[0A8h],ax  ; [2Ah*4]
 43299 000075CA A3A800                  	mov	[addr_int_ibm],ax
 43300 000075CD 8CC8                    	mov	ax,cs
 43301                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2]
 43302 000075CF A3AA00                  	mov	[addr_int_ibm+2],ax
 43303 000075D2 1F                      	pop	ds			; restore segment of device chain
 43304                                  
 43305 000075D3 E81A02                  	call	CHARINIT  		; initialize console driver
 43306 000075D6 56                      	push	si			; save pointer to header
 43307                                  
 43308 000075D7 16                      	push	ss			; move pointer to dos data...
 43309 000075D8 07                      	pop	es			; ...into ES
 43310                                  
 43311                                  	;initialize sft for file 0 (CON)
 43312                                  
 43313                                          ; 07/07/2018 - Retro DOS v3.0
 43314                                  	; 24/04/2019 - Retro DOS v4.0
 43315                                  	;mov	di,SFTABL+6 
 43316 000075D9 BF[D200]                	MOV	DI,SFTABL+SFT.SFTable	; Point to sft 0
 43317 000075DC B80300                  	MOV	AX,3
 43318 000075DF AB                      	STOSW           	; Refcount
 43319                                          ;DEC	AL
 43320                                  	; 22/03/2024
 43321 000075E0 48                      	dec	ax
 43322 000075E1 AB                      	STOSW			; Access rd/wr, compatibility
 43323 000075E2 30C0                    	XOR	AL,AL
 43324 000075E4 AA                      	STOSB           	; attribute
 43325                                  	;mov	al,0C3h
 43326 000075E5 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 43327 000075E7 AB                      	STOSW			; flags
 43328 000075E8 89F0                    	mov	ax,si
 43329 000075EA AB                      	stosw			; device pointer in devptr
 43330 000075EB 8CD8                    	mov	ax,ds
 43331 000075ED AB                      	stosw
 43332 000075EE 31C0                    	xor	ax,ax	; 0
 43333 000075F0 AB                      	stosw			; firclus
 43334 000075F1 AB                      	stosw			; time
 43335 000075F2 AB                      	stosw			; date
 43336 000075F3 48                      	dec	ax	; -1
 43337 000075F4 AB                      	stosw			; size
 43338 000075F5 AB                      	stosw
 43339 000075F6 40                      	inc	ax	; 0
 43340 000075F7 AB                      	stosw			; position
 43341 000075F8 AB                      	stosw
 43342                                  	;add	di,7
 43343 000075F9 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 43344                                  				; point at name
 43345                                  	;add	si,10
 43346 000075FC 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 43347                                  				; point to name
 43348 000075FF B90400                  	mov	cx,4
 43349 00007602 F3A5                    	rep	movsw		; name
 43350 00007604 B103                    	mov	cl,3
 43351 00007606 B020                    	mov	al," "
 43352 00007608 F3AA                    	rep	stosb		; extension
 43353                                  
 43354 0000760A 5E                      	pop	si		; get back pointer to header
 43355                                  
 43356                                  				; mark device as CON I/O
 43357                                  	; 15/07/2018
 43358                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 43359 0000760B 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 43360                                  	; 12/03/2018
 43361                                  	;mov	[ss:32h],si
 43362 0000760F 368936[3200]            	MOV     [SS:BCON],SI
 43363                                  	;mov	[ss:34h],ds
 43364 00007614 368C1E[3400]                    MOV     [SS:BCON+2],DS
 43365                                  
 43366                                  	; initialize each device until the clock device is found
 43367                                  
 43368                                  CHAR_INIT_LOOP:
 43369 00007619 C534                            LDS     SI,[SI]			; AUX device
 43370 0000761B E8D201                  	call	CHARINIT
 43371                                         	;15/07/2018
 43372                                  	;test	byte [SI+4],8
 43373 0000761E F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 43374 00007622 74F5                            JZ      SHORT CHAR_INIT_LOOP
 43375                                  	; 12/03/2018
 43376                                  	;mov	[ss:2Eh],si
 43377 00007624 368936[2E00]                    MOV     [SS:BCLOCK],SI
 43378                                  	;mov	[ss:30h],ds
 43379 00007629 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 43380                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 43381                                  
 43382                                  	;mov	bp,4970			; bp = pointer to free mem
 43383                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 43384                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 43385                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 43386 0000762E BDCF12                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 43387                                  
 43388 00007631 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 43389 00007636 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 43390                                  PERDRV:
 43391                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 43392 0000763B C534                            LDS	SI,[SI]			; Next device
 43393 0000763D 83FEFF                          CMP	SI,-1	; 0FFFFh
 43394 00007640 7479                    	JZ	SHORT CONTINIT
 43395                                  
 43396 00007642 E8AB01                          call	CHARINIT
 43397                                  
 43398                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 43399                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 43400                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 43401                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 43402                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 43403                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 43404                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 43405                                  
 43406                                          ; 15/07/2018
 43407                                  	;test	word [SI+4],8000h		; DEVTYP
 43408                                          ; 17/12/2022
 43409                                  	;test	byte [SI+5],80h
 43410 00007645 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 43411                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 43412 00007649 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 43413                                  
 43414 0000764B 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 43415 00007650 30ED                    	XOR     CH,CH
 43416                                          ; 07/07/2018
 43417                                  	;MOV	[SI+10],CL		; Number of units in name field
 43418 00007652 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname
 43419 00007655 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 43420 0000765A 30F6                    	XOR     DH,DH
 43421 0000765C 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 43422 00007661 1E                      	PUSH    DS
 43423 00007662 56                              PUSH    SI
 43424 00007663 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 43425                                  
 43426                                  PERUNIT:
 43427 00007668 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 43428 0000766A 43                              INC     BX
 43429 0000766B 43                              INC     BX                      ; On to next BPB
 43430                                  	; 15/12/2022
 43431                                  	; 07/07/2018
 43432                                          ;mov	[ES:BP+DPB.DRIVE],DL
 43433 0000766C 26885600                	MOV     [ES:BP],DL
 43434                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43435                                  	;;mov	[ES:BP+0],DL
 43436                                  	;mov	[ES:BP+DPB.DRIVE],DL
 43437                                  
 43438                                  	;MOV	[ES:BP+1],DH
 43439 00007670 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 43440 00007674 53                              PUSH    BX
 43441 00007675 51                              PUSH    CX
 43442 00007676 52                              PUSH    DX
 43443                                  
 43444                                          ;invoke	$SETDPB
 43445 00007677 E83699                          CALL	_$SETDPB		; build DPB!
 43446                                  
 43447                                  	; 07/07/2018
 43448                                  	;MOV	AX,[ES:BP+2]
 43449 0000767A 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 43450                                          ; 12/03/2018
 43451 0000767E 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 43452 00007683 7604                    	JBE     SHORT NOTMAX		; N:
 43453 00007685 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 43454                                  NOTMAX:					
 43455                                  	; set the next dpb field in the currently built bpb
 43456                                  	; and mark as never accessed
 43457                                          
 43458                                  	; 24/04/2019
 43459 00007689 89E8                    	mov	ax,bp			; get pointer to DPB
 43460                                  	;add	ax,33
 43461 0000768B 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 43462                                  					; set seg & offset of next DPB
 43463                                  	;mov	[es:bp+25],ax
 43464 0000768E 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 43465                                  	;mov	[es:bp+27],es
 43466 00007692 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 43467                                  					; mark as never accessed
 43468                                  	;mov	byte [es:bp+24],0FFh
 43469 00007696 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 43470                                  
 43471 0000769B 5A                      	POP     DX
 43472 0000769C 59                              POP     CX
 43473 0000769D 5B                              POP     BX
 43474 0000769E 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 43475 000076A0 5E                              POP     SI
 43476 000076A1 1F                              POP     DS
 43477                                  					; ds:si -> device header
 43478                                  					; store it in the corresponding dpb
 43479                                  	; 07/07/2018
 43480                                  	;MOV	[ES:BP+19],SI ; 24/04/2019
 43481 000076A2 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 43482                                  	;MOV	[ES:BP+21],DS ; 24/04/2019
 43483 000076A6 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 43484                                  
 43485 000076AA 1E                      	PUSH	DS			; save pointer to device header
 43486 000076AB 56                      	PUSH	SI
 43487 000076AC FEC6                    	INC	DH			; inc unit #
 43488 000076AE FEC2                    	INC	DL			; inc drive #
 43489 000076B0 8ED8                    	MOV	DS,AX			; restore segment of BPB array
 43490                                  	;add	bp,33 ; 24/04/2019
 43491 000076B2 83C521                  	ADD	BP,DPBSIZ		; advance pointer to next dpb
 43492 000076B5 E2B1                    	LOOP	PERUNIT			; process all units in each driver
 43493                                  
 43494 000076B7 5E                      	POP     SI			; restore pointer to device header
 43495 000076B8 1F                      	POP     DS
 43496 000076B9 EB80                    	JMP	PERDRV			; process all drivers in chain
 43497                                  
 43498                                  CONTINIT:
 43499                                  	; 24/04/2019
 43500                                  	;sub	bp,33			; set link in last DPB to -1
 43501 000076BB 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 43502                                  					; set last link offset & segment
 43503                                  ; 23/03/2024 - Retro DOS v4.2
 43504                                  %if 0
 43505                                  	;mov	word [bp+25],0FFFFh
 43506                                  	mov	word [bp+DPB.NEXT_DPB],-1
 43507                                  	;mov	word [bp+27],0FFFFh
 43508                                  	mov	word [bp+DPB.NEXT_DPB+2],-1
 43509                                  %else
 43510                                  	; 23/03/2024 (PCDOS 7.1 IBMDOS.COM)
 43511                                  	;;;
 43512 000076BE B8FFFF                  	mov	ax,0FFFFh ; -1
 43513                                  	;mov	word [bp+25],ax
 43514 000076C1 894619                  	mov	word [bp+DPB.NEXT_DPB],ax ; -1
 43515                                  	;mov	word [bp+27],ax
 43516 000076C4 89461B                  	mov	word [bp+DPB.NEXT_DPB+2],ax ; -1
 43517                                  	;;;
 43518                                  %endif
 43519                                  	;add	bp,33
 43520 000076C7 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 43521                                  					; the DPB chain is done.
 43522 000076CA 16                      	push	ss
 43523 000076CB 1F                      	pop	ds
 43524                                  
 43525 000076CC 89E8                    	mov	ax,bp
 43526 000076CE E858FE                  	call	ParaRound		; round up to segment
 43527                                  
 43528 000076D1 8CDA                    	mov	dx,ds			; dx = dosdata segment
 43529 000076D3 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 43530                                  
 43531 000076D5 BB0F00                  	mov	bx,0Fh
 43532                                  	
 43533                                  	; 24/05/2019
 43534                                  	;mov	cx,[ENDMEM]
 43535                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43536                                  	; 17/12/2022
 43537                                  	;mov	cx,[ENDMEM] 
 43538                                  					; set seg inpacketto dosdata
 43539 000076D8 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds
 43540                                  
 43541                                  ; Patch in the segments of the interrupt vectors with current code segment.
 43542                                  ; Also patch in the segment of the pointers in the dosdata area.
 43543                                  ;
 43544                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 43545                                  ; calls were done. The procedure patch_misc_segments is called multiple
 43546                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 43547                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 43548                                  
 43549 000076DC 52                      	push	dx			; preserve first free segment
 43550                                  
 43551 000076DD A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 43552 000076E0 8EC0                    	mov	es,ax			; es = segment of DOS
 43553 000076E2 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 43554                                  
 43555 000076E8 E8AF01                  	call	patch_vec_segments	; uses AX as doscode segment
 43556 000076EB E8E401                  	call	patch_misc_segments	; patch in segments for sharer and
 43557                                  					; other tables with seg in ES.
 43558                                  	; 17/12/2022
 43559                                  	; cx = 0
 43560 000076EE 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 43561                                  
 43562 000076F2 5A                      	pop	dx			; restore first free segment
 43563                                  
 43564                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 43565                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 43566                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 43567                                  ; low_mem_stub by seg_reinit.
 43568                                  
 43569                                  	;xor	ax,ax ; 0
 43570                                  	;mov	ds,ax
 43571                                  	;mov	es,ax
 43572                                  	; 17/12/2022
 43573                                  	; cx = 0
 43574                                  	;xor	cx,cx ; 0
 43575 000076F3 8ED9                    	mov	ds,cx
 43576 000076F5 8EC1                    	mov	es,cx
 43577                                  
 43578                                  	; set the segment of int 24 vector that was
 43579                                  	; left out by patch_vec_segments above.
 43580                                  
 43581                                  	; 17/12/2022
 43582                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43583                                  ;%if 0
 43584                                  	; 24/05/2019
 43585                                  	;;mov	di,90h
 43586                                  	;;mov	di,4*int_fatal_abort
 43587                                  	;mov	di,addr_int_fatal_abort
 43588 000076F7 BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 43589                                  
 43590 000076FA 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 43591                                  	;mov	[di+2],ax  ; int 24h segment
 43592 000076FE 8905                    	mov	[di],ax ; 24/05/2019
 43593                                  
 43594                                  	;;mov	di,82h
 43595                                  	;mov	di,INTBASE+2
 43596                                  
 43597                                  ;%endif
 43598                                  	; 17/12/2022
 43599                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43600                                  	;;mov	di,90h
 43601                                  	;;mov	di,4*int_fatal_abort
 43602                                  	;mov	di,addr_int_fatal_abort
 43603                                  	;mov	ax,[ss:TEMP_DOSLOC]
 43604                                  	;mov	[di+2],ax  ; int 24h segment
 43605                                  	;;mov	di,82h
 43606                                  	;mov	di,INTBASE+2
 43607                                  
 43608                                  	; set default divide trap offset
 43609                                  
 43610                                  	;mov	word ptr ds:[0],offset doscode:divov
 43611 00007700 C7060000[6C51]          	mov	word [0],DIVOV
 43612                                  
 43613                                  	; set vectors 20-28 and 2a-3f to point to iret.
 43614                                  
 43615                                  	;mov	di,80h
 43616 00007706 BF8000                  	mov	di,INTBASE
 43617                                  	;mov	ax,offset doscode:irett
 43618 00007709 B8[E202]                	mov	ax,IRETT
 43619                                  
 43620                                  	; 17/12/2022
 43621                                  	; cx = 0
 43622 0000770C B109                    	mov	cl,9
 43623                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 43624                                  					;   sets offsets for ints 20h-28h
 43625                                  iset1:
 43626 0000770E AB                      	stosw
 43627                                  	;add	di,2
 43628                                  	; 20/09/2023
 43629 0000770F 47                      	inc	di
 43630 00007710 47                      	inc	di
 43631 00007711 E2FB                    	loop	iset1
 43632                                  
 43633 00007713 83C704                  	add	di,4			; skip vector 29h
 43634                                  
 43635                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 43636                                  ;					;   sets offsets for ints 2ah-2fh
 43637                                  ;iset2:
 43638                                  ;	stosw
 43639                                  ;	add	di,2
 43640                                  ;	loop	iset2
 43641                                  
 43642                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43643                                  ; patch_vec_segments above. So skip it.
 43644                                  
 43645                                  ;	add	di,8			; skip vector 30h & 31h 
 43646                                  
 43647                                  	;;;
 43648                                  	; 06/05/2019 - Retro DOS v4.0
 43649                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 43650                                  	; 17/12/2022
 43651 00007716 B105                    	mov	cl,5 ; 28/06/2019
 43652                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43653                                  	;mov	cx,6
 43654                                  iset2:
 43655 00007718 AB                      	stosw
 43656                                  	;add	di,2
 43657                                  	; 20/09/2023
 43658 00007719 47                      	inc	di
 43659 0000771A 47                      	inc	di
 43660 0000771B E2FB                    	loop	iset2
 43661                                  
 43662                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43663                                  	; 17/12/2022
 43664 0000771D 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 43665                                  	;add	di,8
 43666                                  	;;;
 43667                                  
 43668                                  	; 17/12/2022
 43669 00007720 B10E                    	mov	cl,14
 43670                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 43671                                  					;   sets offsets for ints 32h-3fh
 43672                                  iset3:
 43673 00007722 AB                      	stosw
 43674                                  	;add	di,2
 43675                                  	; 20/09/2023
 43676 00007723 47                      	inc	di
 43677 00007724 47                      	inc	di
 43678 00007725 E2FB                    	loop	iset3
 43679                                  
 43680                                  ;if installed
 43681                                  	; set the offset of int2f handler
 43682                                  	;mov	word [0BCh],INT2F
 43683 00007727 C706BC00[FD06]          	mov	word [02Fh*4],INT2F
 43684                                  	; set segment to doscode as we have to do int 2f to check for XMS
 43685 0000772D 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 43686                                  	;mov	[0BEh],ax
 43687 00007731 A3BE00                  	mov	[(02Fh*4)+2],ax
 43688                                  ;endif
 43689                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 43690                                  	; long jump will be patched in by seg_reinit
 43691                                  
 43692                                  	;mov	byte [C0h],0EAh
 43693 00007734 C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 43694                                  	;mov	byte [C1h],CALL_ENTRY
 43695 00007739 C706C100[E302]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 43696                                  
 43697 0000773F C7068000[DC02]          	mov	word [addr_int_abort],QUIT	; INT 20h
 43698 00007745 C7068400[0803]          	mov	word [addr_int_command],COMMAND ; INT 21h
 43699 0000774B C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 43700 00007751 89168A00                	mov	word [addr_int_terminate+2],dx
 43701 00007755 C7069400[2D05]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 43702 0000775B C7069800[B405]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 43703 00007761 C7069C00[8F60]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 43704                                  
 43705 00007767 16                      	push	ss
 43706 00007768 1F                      	pop	ds
 43707                                  	
 43708                                  	; 24/05/2019
 43709                                  	;push	ss
 43710                                  	;pop	es
 43711                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43712                                  	; 17/12/2022
 43713                                  	;push	ss
 43714                                  	;pop	es
 43715                                  
 43716 00007769 52                      	push	dx			; remember address of arena
 43717                                  
 43718 0000776A 42                      	inc	dx			; leave room for arena header
 43719                                  	;mov	[330h],dx
 43720 0000776B 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 43721                                  
 43722 0000776F 31FF                    	xor	di,di			; point es:di at end of memory
 43723 00007771 8EC2                    	mov	es,dx			; ...where psp will be
 43724 00007773 31C0                    	xor	ax,ax
 43725                                  	;mov	cx,80h			; psp is 128 words
 43726                                  	; 17/12/2022
 43727 00007775 B180                    	mov	cl,128 ; 28/06/2019
 43728                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43729                                  	;mov	cx,128
 43730                                  
 43731 00007777 F3AB                    	rep	stosw			; zero out psp area
 43732 00007779 A1[4603]                        mov     ax,[ENDMEM]
 43733                                  	
 43734                                  	; 17/12/2022
 43735                                  	; cx = 0
 43736 0000777C E87F99                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 43737                                  
 43738                                  	; ds, es now point to PSP
 43739                                  
 43740 0000777F 16                      	push	ss
 43741 00007780 1F                      	pop	ds
 43742                                  
 43743                                  	;mov	di,24
 43744 00007781 BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 43745 00007784 31C0                    	xor	ax,ax
 43746 00007786 AB                      	stosw
 43747 00007787 AA                      	stosb				; 0,1 and 2 are con device
 43748 00007788 B0FF                    	mov	al,0FFh
 43749                                  	;mov	cx,FILPERPROC-3 ; 17
 43750                                  	; 17/12/2022
 43751                                  	; cx = 4
 43752 0000778A B111                    	mov	cl,FILPERPROC-3 ; 17
 43753 0000778C F3AA                    	rep	stosb			; rest are unused
 43754                                  
 43755 0000778E 16                      	push	ss
 43756 0000778F 07                      	pop	es
 43757                                  					; must be set to print messages
 43758 00007790 8C1E[2C00]              	mov	[SFT_ADDR+2],ds
 43759                                  
 43760                                  ; after this point the char device functions for con will work for
 43761                                  ; printing messages
 43762                                  
 43763                                  	; 24/04/2019 - Retro DOS v4.0
 43764                                  
 43765                                  ; 12/05/2019
 43766                                  ;
 43767                                  ;write_version_msg:
 43768                                  ;
 43769                                  ;	;if	(not ibm)
 43770                                  ;	;mov	si,offset doscode:header
 43771                                  ;	mov	si,HEADER
 43772                                  ;outmes:
 43773                                  ;	;lods	cs:byte ptr [si]
 43774                                  ;	cs
 43775                                  ;	lodsb
 43776                                  ;	cmp	al,"$"
 43777                                  ;	je	short outdone
 43778                                  ;	call	OUTT
 43779                                  ;	jmp	short outmes
 43780                                  ;outdone:
 43781                                  ;	push	ss			; out stomps on segments
 43782                                  ;	pop	ds
 43783                                  ;	push	ss
 43784                                  ;	pop	es
 43785                                  ;	;endif
 43786                                  
 43787                                  	; at this point es is dosdata
 43788                                  
 43789                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 43790                                  	; in sysinittable (ms_data.asm)
 43791                                  
 43792                                  	;mov	si,0D28h
 43793 00007794 BE[280D]                	mov	si,SysInitTable
 43794                                  
 43795                                  	; 17/12/2022
 43796                                  	; ds = es = ss
 43797                                  
 43798                                  	; 17/12/2022
 43799                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43800                                  ;%if 0
 43801                                  	;;mov	[es:si+6],es
 43802                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43803                                  	;;mov	[es:si+2],es
 43804                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43805                                  	
 43806 00007797 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 43807 0000779A 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 43808                                  
 43809                                  	; buffhead -> dosdata:hashinitvar
 43810                                  
 43811                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43812 0000779D 8C06[3A00]              	mov	[BUFFHEAD+2],es
 43813                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43814                                  	;mov	si,6Dh
 43815 000077A1 BE[6D00]                	mov	si,HASHINITVAR
 43816                                  	;mov	[es:BUFFHEAD],si
 43817 000077A4 8936[3800]              	mov	[BUFFHEAD],si
 43818                                  
 43819 000077A8 5A                              pop     dx                      ; restore address of arena
 43820                                  
 43821                                  	;mov	[032Ch+2],dx
 43822 000077A9 8916[2E03]                      mov     [DMAADD+2],dx
 43823                                  
 43824                                  	;mov	[es:arena_head],dx
 43825 000077AD 8916[2400]              	mov	[arena_head],dx
 43826                                  
 43827                                  ;%endif
 43828                                  
 43829                                  ; 17/12/2022
 43830                                  %if 0
 43831                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43832                                  	;;;
 43833                                  	;mov	[es:si+6],es
 43834                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43835                                  	;mov	[es:si+2],es
 43836                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43837                                  
 43838                                  	; buffhead -> dosdata:hashinitvar 
 43839                                  
 43840                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43841                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43842                                  	;mov	si,6Dh
 43843                                  	mov	si,HASHINITVAR
 43844                                  	mov	[es:BUFFHEAD],si
 43845                                  
 43846                                          pop     dx                      ; restore address of arena
 43847                                  
 43848                                  	;mov	[032Ch+2],dx
 43849                                          mov     [DMAADD+2],dx
 43850                                  
 43851                                  	mov	[es:arena_head],dx
 43852                                  	;;;
 43853                                  %endif
 43854                                  
 43855 000077B1 8EDA                            mov     ds,dx
 43856                                  
 43857                                  	;mov	byte [0],'Z'
 43858 000077B3 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 43859                                          ;mov	word [1],0
 43860 000077B8 C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 43861                                  
 43862 000077BE 36A1[4603]                      mov     ax,[ss:ENDMEM]
 43863 000077C2 29D0                    	sub	ax,dx
 43864 000077C4 48                              dec     ax
 43865 000077C5 A30300                          mov     [ARENA.SIZE],ax
 43866                                  
 43867                                  	; point to sft 0
 43868                                  
 43869                                  	;mov	di,offset dosdata:sftabl + sftable
 43870                                  	;mov	di,SFTABL+6
 43871 000077C8 BF[D200]                	mov	di,SFTABL+SFT.SFTable
 43872 000077CB B80300                          mov     ax,3
 43873 000077CE AB                              stosw           		; adjust refcount
 43874                                  
 43875                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 43876                                  
 43877                                  	;mov	di,offset dosdata:sysinittable
 43878                                  	;mov	di,0D28h
 43879 000077CF BF[280D]                	mov	di,SysInitTable	
 43880                                  
 43881 000077D2 42                      	inc	dx			; advance dx from arena to psp
 43882 000077D3 8EDA                    	mov	ds,dx			; point ds to psp
 43883                                  
 43884                                  					; pass the address os seg_reinit
 43885                                  					; in dx
 43886 000077D5 BA[4378]                	mov	dx,seg_reinit
 43887 000077D8 B9[7F72]                	mov	cx,exepatch_start
 43888 000077DB 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 43889                                  
 43890 000077DF B8[2675]                	mov	ax,SYSBUF
 43891 000077E2 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 43892                                  	
 43893 000077E5 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 43894 000077EA 368E16[8605]                    mov     ss,[ss:USER_SS]
 43895                                  
 43896 000077EF CB                              retf
 43897                                  
 43898                                  ;
 43899                                  ; END OF DOSINIT
 43900                                  ;
 43901                                  ;--------------------------------------------------------------------------
 43902                                  
 43903                                  CHARINIT:
 43904                                  	; 24/04/2019 - Retro DOS v4.0
 43905                                  	; 07/07/2018 - Retro DOS v3.0
 43906                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 43907 000077F0 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 43908                                  	;mov	byte [ss:035Bh],0
 43909 000077F6 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 43910                                  	;mov	byte [ss:035Ch],0
 43911 000077FC 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 43912                                  	;mov	word [ss:035BD],0
 43913 00007802 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 43914 00007809 06                              PUSH	ES
 43915 0000780A 53                              PUSH	BX
 43916 0000780B 50                              PUSH	AX
 43917 0000780C BB[5A03]                        MOV	BX,DEVCALL
 43918                                          ;PUSH	CS
 43919 0000780F 16                      	PUSH	SS ; 30/04/2019
 43920 00007810 07                              POP	ES
 43921 00007811 E850CD                          CALL	DEVIOCALL2
 43922 00007814 58                      	POP	AX
 43923 00007815 5B                              POP	BX
 43924 00007816 07                              POP	ES
 43925 00007817 C3                              RETN
 43926                                  
 43927                                  ; 25/04/2019 - Retro DOS v4.0
 43928                                  
 43929                                  ;-----------------------------------------------------------------------------
 43930                                  ;
 43931                                  ;	check_XMM: routine to check presence of XMM driver
 43932                                  ;
 43933                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 43934                                  ;
 43935                                  ;	USED:	none
 43936                                  ;
 43937                                  ;-----------------------------------------------------------------------------
 43938                                  
 43939                                  check_XMM: ; proc near
 43940                                  ;
 43941                                  ; determine whether or not an XMM driver is installed
 43942                                  ;
 43943 00007818 50                      	push	ax
 43944                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 43945 00007819 B80043                  	mov	ax,4300h
 43946 0000781C CD2F                    	int	2Fh
 43947                                  		; - Multiplex - XMS - INSTALLATION CHECK
 43948                                  		; Return: AL = 80h XMS driver installed
 43949                                  		; AL <> 80h no driver
 43950 0000781E 3C80                    	cmp	al,80h			; Q: installed
 43951 00007820 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 43952                                  ;
 43953                                  ; get the XMM control functions entry point, save it, we
 43954                                  ; need to call it later.
 43955                                  ;
 43956 00007822 53                      	push	bx
 43957 00007823 52                      	push	dx
 43958 00007824 1E                      	push	ds
 43959 00007825 06                      	push	es
 43960                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 43961 00007826 B81043                  	mov	ax,4310h
 43962 00007829 CD2F                    	int	2Fh
 43963                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 43964                                  		; Return: ES:BX -> driver entry point
 43965                                  
 43966 0000782B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 43967                                  
 43968 00007830 891E[6311]              	mov	[XMMcontrol],bx
 43969 00007834 8C06[6511]              	mov	[XMMcontrol+2],es
 43970                                  cXMMexit:
 43971 00007838 F8                      	clc
 43972 00007839 07                      	pop	es
 43973 0000783A 1F                      	pop	ds
 43974 0000783B 5A                      	pop	dx
 43975 0000783C 5B                      	pop	bx
 43976 0000783D 58                      	pop	ax
 43977 0000783E C3                      	retn				; done
 43978                                  ;
 43979                                  ; set carry if XMM driver not present
 43980                                  ;
 43981                                  cXMM_no_driver:
 43982 0000783F F9                      	stc
 43983 00007840 58                      	pop	ax
 43984 00007841 C3                      	retn
 43985                                  
 43986                                  ;-----------------------------------------------------------------------------
 43987                                  ;
 43988                                  ; Procedure Name : seg_reinit
 43989                                  ;
 43990                                  ; Inputs	 : ES has final dos code location
 43991                                  ;		   AX = 0 / 1
 43992                                  ;
 43993                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 43994                                  ;		   if AX =0
 43995                                  ;		      if first entry
 43996                                  ;			 patch segment & offset of vectors with stub
 43997                                  ;			 and stub with segment in ES
 43998                                  ;		      else
 43999                                  ;			 patch stub with segment in ES
 44000                                  ;
 44001                                  ;		   else if AX = 1
 44002                                  ;			patch segment of vectors with segment in ES	
 44003                                  ;
 44004                                  ; NOTE		 : This routine can be called at most twice!
 44005                                  ;
 44006                                  ; Regs Mod.	 : es, ax, di, cx, bx
 44007                                  ;-----------------------------------------------------------------------------
 44008                                  
 44009 00007842 00                      num_entry: db	0		; keeps track of the # of times this routine
 44010                                  				; has been called. (0 or 1)
 44011                                  
 44012                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 44013                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 44014                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 44015                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 44016                                  
 44017                                  seg_reinit:	; proc	far
 44018 00007843 1E                      	push	ds
 44019                                  
 44020 00007844 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 44021                                  
 44022 00007849 E88600                  	call	patch_misc_segments	; patch in segments for sharer and 
 44023                                  					; other tables with seg in ES.
 44024                                  	; 17/12/2022
 44025                                  	; cx = 0
 44026 0000784C 39C8                    	cmp	ax,cx ; 0
 44027                                  	;cmp	ax,0
 44028 0000784E 753D                    	jne	short patch_vec_seg	; patch vectors with segment in es
 44029                                  
 44030                                  	; 17/12/2022
 44031 00007850 2E380E[4278]            	cmp	[cs:num_entry],cl ; 0
 44032                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 44033 00007855 7508                    	jne	short second_entry	; N: just patch the stub with 
 44034                                  					;    segment in ES
 44035                                  					; Y: patch the vectors with stub 
 44036 00007857 8CD8                    	mov	ax,ds
 44037 00007859 E83E00                  	call	patch_vec_segments	; patch the segment of vectors
 44038 0000785C E8BD00                  	call	patch_offset		; patch the offsets of vectors 
 44039                                  					; with those in the stub.
 44040                                  	; 17/12/2022
 44041                                  	; cx = 0
 44042                                  second_entry:
 44043 0000785F 8CC0                    	mov	ax,es			; patch the stub with segment in es
 44044                                  
 44045                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 44046                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 44047 00007861 BF[6210]                	mov	di,DOSINTTABLE
 44048                                  	; 17/12/2022
 44049                                  	; cx = 0
 44050                                  	;mov	cx,9
 44051 00007864 B109                    	mov	cl,9
 44052 00007866 1E                      	push	ds			
 44053 00007867 07                      	pop	es			; es:di -> DOSINTTABLE
 44054                                  
 44055                                  dosinttabloop:
 44056                                  	;add	di,2
 44057                                  	; 19/06/2023
 44058 00007868 47                      	inc	di
 44059 00007869 47                      	inc	di
 44060 0000786A AB                      	stosw
 44061 0000786B E2FB                    	loop	dosinttabloop	
 44062                                  
 44063                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 44064                                  ; use the HMA, so we don't want to check CS
 44065                                  
 44066                                  ;ifndef ROMDOS
 44067 0000786D 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 44068 00007870 7220                    	jb	short sr_done		; N: done
 44069                                  ;endif
 44070 00007872 E8A3FF                  	call	check_XMM		; Y: set up the XMS entry point
 44071 00007875 721B                    	jc	short sr_done		; failed to set up XMS do not do
 44072                                  					; A20 toggling in the stub.
 44073                                  	; 17/12/2022
 44074                                  	; cx = 0
 44075 00007877 E81D01                  	call	patch_in_nops		; enable the stub to check A20 state
 44076                                  ; M021-
 44077                                  	;mov	byte [1211h],1
 44078 0000787A C606[1112]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 44079                                  				
 44080                                  					; set pointer to the routine that 
 44081                                  					; patches buggy exepacked code.
 44082                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 44083 0000787F C706[1212][CF73]        	mov	word [FixExePatch],ExePatch
 44084                                  					; M068: set pointer to the routine 
 44085                                  					; M068: that detects copy protected
 44086                                  					; M068: apps
 44087                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 44088 00007885 C706[6100][F074]        	mov	word [ChkCopyProt],IsCopyProt
 44089                                  
 44090                                  	; 19/09/2023
 44091 0000788B EB05                    	jmp	short sr_done
 44092                                  
 44093                                  ; 28/12/2022 - Retro DOS v4.1
 44094                                  %if 0
 44095                                  ;----------------------------------------------------------------------------
 44096                                  
 44097                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 44098                                  
 44099                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44100                                  ;
 44101                                  ;; M020 - begin
 44102                                  ;
 44103                                  ;	call	WhatCPUType
 44104                                  ;	cmp	al,1
 44105                                  ;	jne	short sr_done 		; we need Rational Patch only
 44106                                  ;					;  on 286 systems
 44107                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 44108                                  ;	mov	word [RationalPatchPtr],RationalPatch
 44109                                  ;
 44110                                  ;; M020 - end
 44111                                  ;
 44112                                  ;	jmp	short sr_done
 44113                                  ;
 44114                                  ;patch_vec_seg:				; patch vectors with segment in es
 44115                                  ;	mov	ax,es
 44116                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 44117                                  ;					; NOTE we don't have to patch the 
 44118                                  ;					; offsets as they have been already
 44119                                  ;					; set to the doscode offsets at
 44120                                  ;					; DOSINIT.
 44121                                  ;sr_done:
 44122                                  ;	mov	byte [cs:num_entry],1
 44123                                  ;	pop	ds
 44124                                  ;	retf	; ! far return !
 44125                                  
 44126                                  ;----------------------------------------------------------------------------
 44127                                  ;
 44128                                  ; Procedure Name : WhatCPUType
 44129                                  ;
 44130                                  ; Inputs	 : none
 44131                                  ;
 44132                                  ; Outputs	 : AL = 0 if CPU <  286
 44133                                  ;		      = 1 if CPU == 286
 44134                                  ;		      = 2 if CPU >= 386
 44135                                  ;
 44136                                  ; Regs. Mod.	 : AX
 44137                                  ;
 44138                                  ;----------------------------------------------------------------------------
 44139                                  
 44140                                  WhatCPUType:
 44141                                  	; 25/04/2019 - Retro DOS v4.0
 44142                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 44143                                  
 44144                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 44145                                  
 44146                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 44147                                  ; 	it is called from both CODE and SYSINITSEG.
 44148                                  ;
 44149                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 44150                                  ;  Returns: AX = 0 if 8086 or 8088
 44151                                  ;              = 1 if 80286
 44152                                  ;              = 2 if 80386
 44153                                  
 44154                                  	; 04/11/2022
 44155                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 44156                                  
 44157                                  Get_CPU_Type:	;macro
 44158                                  	pushf
 44159                                  	push	bx			; preserve bx
 44160                                  	xor	bx,bx			; init bx to zero
 44161                                  
 44162                                  	xor	ax,ax			; 0000 into AX
 44163                                  	push	ax			; put it on the stack...
 44164                                  	popf				; ...then shove it into the flags
 44165                                  	pushf				; get it back out of the flags...
 44166                                  	pop	ax			; ...and into ax
 44167                                  	and	ax,0F000h		; mask off high four bits
 44168                                  	cmp	ax,0F000h		; was it all 1's?
 44169                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 44170                                  
 44171                                  	mov	ax,0F000h		; now try to set the high four bits..
 44172                                  	push	ax
 44173                                  	popf
 44174                                  	pushf
 44175                                  	pop	ax			; ...and see what happens
 44176                                  	and	ax,0F000h		; any high bits set ?
 44177                                  	jz	short cpu_286		; nay; it's an 80286
 44178                                  
 44179                                  cpu_386:				; bx starts as zero
 44180                                  	inc	bx			; inc twice if 386
 44181                                  cpu_286:				; just inc once if 286
 44182                                  	inc	bx
 44183                                  cpu_8086:				; don't inc at all if 086
 44184                                  	mov	ax,bx			; put CPU type value in ax
 44185                                  	pop	bx			; restore original bx
 44186                                  	popf
 44187                                  	
 44188                                  	;endm
 44189                                  
 44190                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 44191                                  	retn	; 19/09/2023
 44192                                  
 44193                                  ; 19/09/2023
 44194                                  ;	; 04/11/2022
 44195                                  ;	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 44196                                  ;	cmp	al,1
 44197                                  ;	jne	short sr_done 		; we need Rational Patch only
 44198                                  ;					;  on 286 systems
 44199                                  ;	mov	word [RationalPatchPtr],RationalPatch
 44200                                  
 44201                                  ;----------------------------------------------------------------------------
 44202                                  %endif	; 28/12/2022
 44203                                  
 44204                                  	; 19/09/2023
 44205                                  	;jmp	short sr_done
 44206                                  
 44207                                  patch_vec_seg:				; patch vectors with segment in es
 44208 0000788D 8CC0                    	mov	ax,es
 44209 0000788F E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 44210                                  					; NOTE we don't have to patch the 
 44211                                  					; offsets as they have been already
 44212                                  					; set to the doscode offsets at
 44213                                  					; DOSINIT.
 44214                                  sr_done:
 44215 00007892 2EC606[4278]01          	mov	byte [cs:num_entry],1
 44216 00007898 1F                      	pop	ds
 44217 00007899 CB                      	retf	; ! far return !
 44218                                  
 44219                                  ;----------------------------------------------------------------------------
 44220                                  ;
 44221                                  ; Procedure Name : patch_vec_segments
 44222                                  ;
 44223                                  ; Inputs	 : ax -> has segment address to patch in
 44224                                  ;		   ds -> DOSDATA
 44225                                  ;
 44226                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 44227                                  ;			
 44228                                  ;			0,20-28,3a-3f
 44229                                  ;
 44230                                  ; Regs. Mod.	 : DI,CX,DX,AX
 44231                                  ;
 44232                                  ;----------------------------------------------------------------------------
 44233                                  
 44234                                  patch_vec_segments:
 44235                                  
 44236 0000789A 06                      	push	es
 44237                                  
 44238 0000789B 31C9                    	xor	cx,cx ; 0
 44239 0000789D 8EC1                    	mov	es,cx
 44240                                  
 44241                                  	;mov	di,82h
 44242 0000789F BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 44243                                  
 44244 000078A2 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 44245                                  
 44246                                  					; set vectors 20 & 21
 44247                                  	; 04/11/2022
 44248                                  	;mov	cx,2
 44249                                  	; 17/12/2022
 44250                                  	;mov	cl,2
 44251                                  ps_set1:
 44252 000078A6 AB                      	stosw	; int 20h segment
 44253                                  	;add	di,2
 44254                                  	; 17/12/2022
 44255 000078A7 47                      	inc	di
 44256 000078A8 47                      	inc	di
 44257                                  	;loop	ps_set1
 44258                                  
 44259                                  	; 17/12/2022
 44260 000078A9 AB                      	stosw	; int 21h segment
 44261                                  	;inc	di
 44262                                  	;inc	di
 44263                                  
 44264                                  	;add	di,4			; skip int 22h vector
 44265 000078AA 83C706                  	add	di,6 ; *
 44266                                  
 44267 000078AD AB                      	stosw				; set int 23h
 44268 000078AE 83C706                  	add	di,6			; skip int 24h
 44269                                  
 44270                                  					; set vectors 25-28 and 2a-3f
 44271                                  	; 04/11/2022
 44272                                  	;mov	cx,4			; set 4 segments
 44273                                  	; 17/12/2022
 44274 000078B1 B104                    	mov	cl,4
 44275                                  ps_set2:
 44276 000078B3 AB                      	stosw
 44277                                  	;add	di,2
 44278                                  	; 17/12/2022
 44279 000078B4 47                      	inc	di
 44280 000078B5 47                      	inc	di
 44281 000078B6 E2FB                    	loop	ps_set2
 44282                                  
 44283 000078B8 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 44284                                  					;   already be set.
 44285                                  	; 04/11/2022
 44286                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 44287                                  	; 17/12/2022
 44288 000078BB B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 44289                                  ps_set3:
 44290 000078BD AB                      	stosw
 44291                                  	;add	di,2
 44292                                  	; 17/12/2022
 44293 000078BE 47                      	inc	di
 44294 000078BF 47                      	inc	di
 44295 000078C0 E2FB                    	loop	ps_set3
 44296                                  
 44297                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 44298                                  ; below. So skip it.
 44299                                  
 44300 000078C2 83C708                  	add	di,8			; skip vector 30h & 31h 
 44301                                  	
 44302                                  	; 04/11/2022
 44303                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 44304                                  	; 17/12/2022
 44305 000078C5 B10E                    	mov	cl,14			;  sets segs for ints 32h-3fh
 44306                                  ps_set4:
 44307 000078C7 AB                      	stosw
 44308                                  	;add	di,2
 44309                                  	; 17/12/2022
 44310 000078C8 47                      	inc	di
 44311 000078C9 47                      	inc	di
 44312 000078CA E2FB                    	loop	ps_set4
 44313                                  
 44314                                  ; set offset of int2f
 44315                                  
 44316                                  ;if installed
 44317                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 44318                                  ;endif
 44319                                  	;mov	[es:0C3h],ax
 44320 000078CC 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 44321                                  	; 17/12/2022
 44322                                  	; cx = 0
 44323 000078D0 07                      	pop	es
 44324 000078D1 C3                      	retn
 44325                                  
 44326                                  ;---------------------------------------------------------------------------
 44327                                  ;
 44328                                  ; Procedure Name : patch_misc_segments
 44329                                  ;
 44330                                  ; Inputs	 : es = segment to patch in
 44331                                  ;		   ds = dosdata
 44332                                  ;
 44333                                  ; outputs	 : patches in the sharer and other tables in the dos
 44334                                  ;		   with right dos code segment in es
 44335                                  ;
 44336                                  ; Regs Mod	 : DI,SI,CX
 44337                                  ;
 44338                                  ;---------------------------------------------------------------------------
 44339                                  
 44340                                  patch_misc_segments:
 44341                                  
 44342 000078D2 53                      	push	bx
 44343 000078D3 06                      	push	es
 44344 000078D4 50                      	push	ax
 44345                                  
 44346 000078D5 8CC0                    	mov	ax,es			; ax - > DOS segment
 44347                                  	
 44348 000078D7 1E                      	push	ds
 44349 000078D8 07                      	pop	es			; es -> DOSDATA
 44350                                  	
 44351                                  ; initialize the jump table for the sharer...
 44352                                  
 44353                                  	;mov	di,offset dosdata:jshare
 44354                                  	;mov	di,90h
 44355 000078D9 BF[9000]                	mov	di,JShare
 44356                                  	;mov	bx,[0AAAh]
 44357 000078DC 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 44358                                  					; table was patched during the first
 44359                                  					; call to this routine
 44360 000078E0 B90F00                  	mov	cx,15
 44361                                  jumptabloop:
 44362                                  	;add	di,2			; skip offset
 44363                                  	; 17/12/2022
 44364 000078E3 47                      	inc	di
 44365 000078E4 47                      	inc	di
 44366 000078E5 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 44367 000078E8 7405                    	je	short share_patch	; Y: patch in sharer table
 44368                                  					; N: 
 44369 000078EA 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 44370 000078ED 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 44371                                  share_patch:
 44372 000078EF AB                      	stosw				; drop in segment
 44373                                  no_share_patch:
 44374 000078F0 E2F1                    	loop	jumptabloop
 44375                                  					; BUGBUG patching the country info 
 44376                                  					; with dosdata can be done inline
 44377                                  					; in dosinit.
 44378                                  					; for dos 3.3 country info
 44379                                  					; table address
 44380                                  
 44381                                  	;mov	si,offset dosdata:country_cdpg
 44382                                  	;mov	si,122Ah   
 44383 000078F2 BE[2A12]                	mov	si,COUNTRY_CDPG
 44384                                  					; initialize double word
 44385                                  					; pointers with dosdata in ds
 44386                                  	;mov	[si+4Fh],ds
 44387                                  	;mov	[si+54h],ds
 44388                                  	;mov	[si+59h],ds
 44389                                  	;mov	[si+5Eh],ds
 44390                                  	;mov	[si+80h],ds
 44391                                  	;mov	[si+63h],ds
 44392 000078F5 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 44393 000078F8 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 44394 000078FB 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 44395 000078FE 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 44396 00007901 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 44397 00007905 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 44398                                  
 44399                                  					; fastopen routines are in doscode
 44400                                  					; so patch with doscode seg in ax
 44401                                  
 44402                                  	;mov	si,offset dosdata:fastopentable
 44403                                  	;mov	si,0D30h
 44404 00007908 BE[300D]                	mov	si,FastOpenTable
 44405                                  
 44406                                  	; 17/12/2022
 44407                                  	; bx = [TEMP_DOSLOC]
 44408 0000790B 83FBFF                  	cmp	bx,-1
 44409                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 44410 0000790E 7405                    	je	short fast_patch	; Y: patch segment
 44411                                  	;mov	cx,[TEMP_DOSLOC]
 44412                                  					; Q: has fastopen patched in it's
 44413                                  					;    segment
 44414                                  	; 17/12/2022
 44415 00007910 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 44416                                  	;;cmp	cx,[si+4]
 44417                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 44418 00007913 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 44419                                  
 44420                                  fast_patch:
 44421                                  	;mov	[si+4],ax
 44422 00007915 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 44423                                  no_fast_patch:
 44424                                  	; 17/12/2022
 44425                                  	; cx = 0
 44426 00007918 58                      	pop	ax
 44427 00007919 07                      	pop	es
 44428 0000791A 5B                      	pop	bx
 44429                                  
 44430 0000791B C3                      	retn
 44431                                  
 44432                                  ;--------------------------------------------------------------------------
 44433                                  ;
 44434                                  ; Procedure Name : patch_offset
 44435                                  ; 
 44436                                  ; Inputs	 : NONE
 44437                                  ;
 44438                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 44439                                  ;		   0,20-28,3a-3f, and 30,31
 44440                                  ;
 44441                                  ;
 44442                                  ; Regs. Mod	 : AX,DI,CX
 44443                                  ;--------------------------------------------------------------------------
 44444                                  
 44445                                  patch_offset:
 44446 0000791C 06                      	push	es		; preserve es
 44447                                  
 44448 0000791D 31C0                    	xor	ax,ax
 44449 0000791F 8EC0                    	mov	es,ax
 44450                                  				; set default divide trap address
 44451                                  	;mov	word ptr es:[0],offset dosdata:ldivov
 44452                                  	;mov	word [es:0],108Ah
 44453 00007921 26C7060000[8A10]        	mov	word [es:0],ldivov
 44454                                  
 44455                                  	;mov	di,80h
 44456 00007928 BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 44457                                  	;mov	ax,offset dosdata:lirett
 44458                                  	;mov	ax,10DAh
 44459 0000792B B8[DA10]                	mov	ax,lirett
 44460                                  				; set vectors 20 & 21 to point to iret.
 44461                                  	; 17/12/2022
 44462                                  	; cx = 0
 44463                                  
 44464                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 44465                                  po_iset1:
 44466 0000792E AB                      	stosw	; int 20h offset
 44467                                  	;add	di,2 ; *
 44468                                  	;loop	po_iset1
 44469                                  	; 17/12/2022
 44470 0000792F 47                      	inc	di
 44471 00007930 47                      	inc	di
 44472 00007931 AB                      	stosw	; int 21h offset
 44473                                  
 44474                                  	;add	di,4		; skip vector 22h
 44475                                  	; 17/12/2022
 44476 00007932 83C706                  	add	di,6 ; *
 44477                                  
 44478 00007935 AB                      	stosw			; set offset of 23h
 44479                                  	;add	di,6		; skip 24h
 44480                                  	; 19/09/2023
 44481 00007936 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 44482                                  
 44483                                  				; set vectors 25-28 and 2a-3f to iret.
 44484                                  	; 04/11/2022
 44485                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 44486                                  	; 19/09/2023
 44487                                  	; 17/12/2022
 44488                                  	;mov	cl,4		; sets offsets for ints 25h-28h
 44489                                  po_iset2:
 44490 00007939 AB                      	stosw		; set offset for int 28h ; 19/09/2023
 44491                                  	;add	di,2
 44492                                  	; 19/09/2023
 44493                                  	; 17/12/2022
 44494                                  	;inc	di
 44495                                  	;inc	di
 44496                                  	; 19/09/2023
 44497                                  	;loop	po_iset2
 44498                                  
 44499                                  	;add	di,4		; skip vector 29h
 44500                                  	; 19/09/2023
 44501 0000793A 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 44502                                  
 44503                                  	; 04/11/2022
 44504                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 44505                                  	; 17/12/2022
 44506                                  	;mov	cl,6		; sets offsets for ints 2ah-2fh
 44507 0000793D B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 44508                                  po_iset3:
 44509 0000793F AB                      	stosw
 44510                                  	;add	di,2
 44511                                  	; 17/12/2022
 44512 00007940 47                      	inc	di
 44513 00007941 47                      	inc	di
 44514 00007942 E2FB                    	loop	po_iset3
 44515                                  
 44516                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 44517                                  ; below. So skip it.
 44518                                  
 44519                                  	;add	di,8		; skip vector 30h & 31h
 44520                                  	; 17/12/2022
 44521 00007944 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 44522                                  
 44523                                  	; 04/11/2022
 44524                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 44525                                  				;  sets offsets for ints 32h-3fh
 44526                                  	; 17/12/2022
 44527 00007947 B10E                    	mov	cl,14 ; 26/06/2019
 44528                                  po_iset4:
 44529 00007949 AB                      	stosw
 44530                                  	;add	di,2
 44531                                  	; 17/12/2022
 44532 0000794A 47                      	inc	di
 44533 0000794B 47                      	inc	di
 44534 0000794C E2FB                    	loop	po_iset4
 44535                                  
 44536                                  ;if installed
 44537                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 44538                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 44539 0000794E 26C706BC00[C610]        	mov	word [es:(2Fh*4)],lint2f
 44540                                  ;endif
 44541                                  
 44542                                  ; set up entry point call at vectors 30-31h
 44543                                  	;mov	byte [es:0C0h],0EAh
 44544 00007955 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 44545                                  	;mov	word [es:0C1h],10D0h
 44546                                  
 44547 0000795B 26C706C100[D010]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 44548                                  
 44549                                  							; 19/09/2023
 44550                                  	;mov	word [es:80h],1094h
 44551 00007962 26C7068000[9410]        	mov	word [es:addr_int_abort],lquit		; int 20h
 44552                                  	;mov	word [es:84h],109Eh
 44553 00007969 26C7068400[9E10]        	mov	word [es:addr_int_command],lcommand	; int 21h
 44554                                  	;mov	word [es:94h],10A8h
 44555 00007970 26C7069400[A810]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 44556                                  	;mov	word [es:98h],10B2h
 44557 00007977 26C7069800[B210]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 44558                                  	;mov	word [es:9Ch],10BCh
 44559 0000797E 26C7069C00[BC10]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 44560                                  
 44561                                  	; 17/12/2022
 44562                                  	; CX = 0
 44563 00007985 07                      	pop	es		; restore es
 44564 00007986 C3                      	retn
 44565                                  
 44566                                  ;--------------------------------------------------------------------------
 44567                                  ;
 44568                                  ; 	Procedure Name	:	patch_in_nops
 44569                                  ;
 44570                                  ; 	Entry		: 	ES -> DOSDATA
 44571                                  ;
 44572                                  ;	Regs Mod	: 	cx, di
 44573                                  ;
 44574                                  ;	Description:
 44575                                  ;		This routine patches in 2 nops at the offsets specified in 
 44576                                  ;	patch_table. This basically enables the low mem stub to start 
 44577                                  ;	making XMS calls.
 44578                                  ;
 44579                                  ;--------------------------------------------------------------------------
 44580                                  
 44581                                  	; 04/11/2022
 44582                                  	; (MSDOS 5.0 MSDOS.SYS)
 44583                                  	; DOSCODE:0BC50h
 44584                                  
 44585                                  patch_table:	; label	byte
 44586                                  	;dw	offset dosdata:i0patch
 44587                                  	;dw	offset dosdata:i20patch
 44588                                  	;dw	offset dosdata:i21patch
 44589                                  	;dw	offset dosdata:i25patch
 44590                                  	;dw	offset dosdata:i26patch
 44591                                  	;dw	offset dosdata:i27patch
 44592                                  	;dw	offset dosdata:i2fpatch
 44593                                  	;dw	offset dosdata:cpmpatch
 44594 00007987 [8A10]                  	dw	i0patch
 44595 00007989 [9410]                  	dw	i20patch
 44596 0000798B [9E10]                  	dw	i21patch
 44597 0000798D [A810]                  	dw	i25patch
 44598 0000798F [B210]                  	dw	i26patch
 44599 00007991 [BC10]                  	dw	i27patch
 44600 00007993 [C610]                  	dw	i2fpatch
 44601 00007995 [D010]                  	dw	cpmpatch
 44602                                  
 44603                                  patch_table_size equ ($-patch_table)/2
 44604                                  
 44605                                  patch_in_nops:
 44606 00007997 50                      	push	ax
 44607 00007998 56                      	push	si
 44608 00007999 BE[8779]                	mov	si,patch_table
 44609 0000799C B89090                  	mov	ax,9090h ; nop, nop
 44610                                  	; 17/12/2022
 44611                                  	; cx = 0
 44612                                  	;mov	cx,8
 44613                                  	;mov	cx,patch_table_size ; 8
 44614 0000799F B108                    	mov	cl,patch_table_size ; 8
 44615                                  pin_loop:
 44616 000079A1 2E8B3C                  	mov	di,[cs:si]
 44617 000079A4 AB                      	stosw
 44618                                  	;add	si,2
 44619                                  	; 17/12/2022
 44620 000079A5 46                      	inc	si
 44621 000079A6 46                      	inc	si
 44622 000079A7 E2F8                    	loop	pin_loop
 44623 000079A9 5E                      	pop	si
 44624 000079AA 58                      	pop	ax
 44625 000079AB C3                      	retn
 44626                                  
 44627                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 44628                                  ; ---------------------------------------------------------------------------
 44629                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 44630                                  ; ---------------------------------------------------------------------------
 44631                                  ; 23/03/2024 - Retro DOS v4.2
 44632                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:0BF69h
 44633                                  ; (PCDOS 7.1 IBMDOS.COM - DOSCODE:0D20Fh)
 44634                                  
 44635                                  	; 05/12/2022 - temporary ; (paragraph alinment)
 44636                                  DOSCODE_END:
 44637                                  	; 23/03/2024
 44638                                  	;times	7 db 0	; MSDOS 6.22 MSDOS.SYS
 44639                                  
 44640                                  	; 23/03/2024
 44641                                  	;times	9 db 0	; db 9 dup(0)
 44642                                  	; 18/12/2022
 44643                                  	;dw	0	; times 2 db 0
 44644                                  
 44645                                  	; 23/03/2024 - Retro DOS v4.2		
 44646                                  	; 23/03/2024 - Retro DOS v5.0
 44647 000079AC 00                      	db	0	; PCDOS 7.1 IBMDOS.COM
 44648                                  
 44649                                  ;align 16
 44650                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 44651                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 44652                                  
 44653                                  	; 23/03/2024 - Retro DOS v4.2
 44654                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:0BF70h
 44655                                  	; (PCDOS 7.1 IBMDOS.COM - DOSCODE:0D210h)
 44656                                  
 44657                                  ; ---------------------------------------------------------------------------
 44658                                  
 44659                                  ;memstrt label word
 44660                                  ; ---------------------------------------------------------------------------
 44661                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 44662                                  ; ---------------------------------------------------------------------------
 44663                                  
 44664                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 44665                                  
 44666                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 44667                                  ; the dos initialization segment
 44668                                  
 44669                                  ;ifndef ROMDOS
 44670                                  
 44671                                  ;doscode ends
 44672                                  
 44673                                  ;else
 44674                                  
 44675                                  ;;dosinitseg ends
 44676                                  
 44677                                  ;endif ; ROMDOS
 44678                                  
 44679                                  ;============================================================================
 44680                                  
 44681                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 44682                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 44683                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 44684                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 44685                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 44686                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 44687                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 44688                                  
 44689                                  ;; burasý doscode sonu
 44690                                  
 44691                                  ;============================================================================
 44692                                  ; DOSDATA
 44693                                  ;============================================================================
 44694                                  ; 29/04/2019 - Retro DOS 4.0
 44695                                  
 44696                                  ;[BITS 16]
 44697                                  
 44698                                  ;[ORG 0]
 44699                                  
 44700                                  ; 25/04/2019 - Retro DOS v4.0
 44701                                  
 44702                                  ;============================================================================
 44703                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 44704                                  ;============================================================================
 44705                                  
 44706                                  ;align 16
 44707                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 44708                                  	; (4970 bytes for MSDOS 6.21)
 44709                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 44710                                  
 44711                                  ;============================================================================
 44712                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 44713                                  ;============================================================================
 44714                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44715                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 44716                                  ; 16/07/2018 - Retro DOS 3.0	
 44717                                  
 44718                                  ;Break <Initialized data and data used at DOS initialization>
 44719                                  ;----------------------------------------------------------------------------
 44720                                  
 44721                                  ; We need to identify the parts of the data area that are relevant to tasks
 44722                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 44723                                  ; data will be gathered with the system code. The process data under 2.x will
 44724                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44725                                  ;
 44726                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44727                                  ; describing that data item.
 44728                                  
 44729                                  ;DOSDATA SEGMENT
 44730                                  
 44731                                  ; 04/11/2022
 44732                                  ;[ORG 0]
 44733                                  
 44734                                  ; ----------------------------------------------------------------------------
 44735                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44736                                  ; ----------------------------------------------------------------------------
 44737                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 44738                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 44739                                  ; ----------------------------------------------------------------------------
 44740                                  
 44741                                  ; 04/11/2022
 44742                                  
 44743                                  ;DOSDATA:0000h
 44744                                  
 44745 000079AD 90<rep 3h>              align 16
 44746                                  
 44747                                  ; ----------------------------------------------------------------------------
 44748                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44749                                  ; ----------------------------------------------------------------------------
 44750                                  
 44751                                  segment .data  vstart=0 ; 06/12/2022
 44752                                  								
 44753                                  ; ============================================================================
 44754                                  
 44755                                  ; 06/12/2022
 44756                                  ;DOSDATASTART equ $
 44757                                  DOSDATASTART:
 44758                                  
 44759                                  
 44760                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 44761                                  
 44762                                  	;; 03/11/2022
 44763                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 44764                                  
 44765                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44766                                  	;db	4 dup (?)	
 44767 00000000 00<rep 4h>              	times	4 db 0
 44768                                  
 44769                                  	; 29/04/2019 - Retro DOS v4.0 modification
 44770                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 44771                                  	;dw	0
 44772                                  
 44773                                  	;EVEN
 44774                                  
 44775                                  ;align 2
 44776                                  
 44777                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 44778                                  ; area compatability. This location must be incremented EACH TIME the data
 44779                                  ; area here gets mucked with.
 44780                                  ;
 44781                                  ; Also, do NOT change this position relative to DOSDATA:0.
 44782                                  
 44783                                  MSCT001S:	; LABEL BYTE
 44784                                  	
 44785                                  DataVersion:	
 44786 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 44787                                  
 44788                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 44789                                  ;hkn; been removed to DOSCODE above
 44790                                  
 44791                                  ;M044
 44792                                  ; First part of save area for saving last para of Window memory
 44793                                  
 44794                                  WinoldPatch1:	; db 8 dup (?)	;M044
 44795 00000006 00<rep 8h>              	times	8 db 0
 44796                                  
 44797                                  	; MSDOS 6.21 DOSDATA:000Eh
 44798                                  MYNUM:			; Offset 000Eh
 44799 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 44800                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 44801 00000010 0000                    	dw	0
 44802                                  OpenLRU:
 44803 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 44804                                  OEM_HANDLER: 		
 44805 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 44806                                  
 44807                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 44808                                  ;;			way that we leave DOS???? - jgl
 44809                                  
 44810                                  LeaveAddr:
 44811 00000018 [0404]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 44812                                  RetryCount:		
 44813 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 44814                                  RetryLoop:
 44815 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 44816                                  LastBuffer:
 44817 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 44818                                  CONTPOS:
 44819 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 44820                                  arena_head:
 44821 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 44822                                  
 44823                                  ;; 16/07/2018
 44824                                  ;;***************************************************************************
 44825                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 44826                                  ;;***************************************************************************
 44827                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 44828                                  ;;
 44829                                  ;;	AH = 52h
 44830                                  ;;
 44831                                  ;;	on return:
 44832                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 44833                                  ;;		Known "invars" fields follow (varies with DOS version):
 44834                                  ;;
 44835                                  ;;	Offset Size		 Description
 44836                                  ;;
 44837                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 44838                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 44839                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 44840                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 44841                                  ;;		      0 indicates no unread input (DOS 3.x)
 44842                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 44843                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 44844                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 44845                                  ;;	  08   dword  pointer to $CLOCK device driver
 44846                                  ;;	  0C   dword  pointer to CON device driver
 44847                                  ;;	  10   byte   number of logical drives in system
 44848                                  ;;	  11   word   maximum bytes/block of any block device
 44849                                  ;;	  13   dword  pointer to DOS cache buffer header
 44850                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 44851                                  ;;		      point to the next device in device chain
 44852                                  ;;
 44853                                  ;;***************************************************************************
 44854                                  
 44855                                  ; The following block of data is used by SYSINIT. 
 44856                                  ; Do not change the order or size of this block
 44857                                  
 44858                                  ;SYSINITVAR:
 44859                                  ;----------------------------------------------------------------------------
 44860                                  SYSINITVARS:
 44861                                  DPBHEAD:
 44862 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 44863                                  SFT_ADDR:
 44864 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 44865                                  BCLOCK:
 44866 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 44867                                  BCON:
 44868 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 44869                                  MAXSEC:
 44870 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 44871                                  BUFFHEAD:
 44872 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 44873                                  CDSADDR:
 44874 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 44875                                  SFTFCB:
 44876 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 44877                                  KEEPCOUNT:
 44878 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 44879                                  NUMIO:
 44880 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 44881                                  CDSCOUNT:
 44882 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 44883                                  
 44884                                  ; A fake header for the NUL device
 44885                                  NULDEV:
 44886 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 44887                                  	;dw	8004h
 44888 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 44889 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 44890 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 44891 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 44892                                  SPLICES:
 44893 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 44894                                  
 44895                                  Special_Entries:
 44896 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 44897                                  UU_IFS_DOS_CALL:
 44898 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 44899                                  ; 
 44900                                  ; UU_IFS_HEADER:
 44901                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 44902                                  
 44903                                  ChkCopyProt:
 44904 00000061 0000                    	dw	0	; M068
 44905                                  A20OFF_PSP:
 44906 00000063 0000                    	dw	0	; M068
 44907                                  BUFFERS_PARM1:
 44908 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 44909                                  BUFFERS_PARM2:
 44910 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 44911                                  BOOTDRIVE:
 44912 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 44913                                  DDMOVE:
 44914 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 44915                                  EXT_MEM_SIZE:
 44916 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 44917                                  
 44918                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 44919                                  ;
 44920                                  ; Replaced by next two declarations
 44921                                  ;
 44922                                  ;UU_BUF_HASH_PTR:
 44923                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 44924                                  ;UU_BUF_HASH_COUNT:
 44925                                  ;	dw	1	; [SYSTEM] number of Hash entries
 44926                                  
 44927                                  BufferQueue:
 44928 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 44929                                  DirtyBufferCount:
 44930 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 44931                                  			; BUGBUG ---- change to byte
 44932                                  SC_CACHE_PTR:
 44933 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 44934                                  SC_CACHE_COUNT:
 44935 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 44936                                  BuffInHMA:
 44937 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 44938                                  LoMemBuff:
 44939 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 44940                                  			;  in Low mem when buffs are in HMA
 44941                                  ;
 44942                                  ; All variables which have UU_ as prefix can be reused for other
 44943                                  ; purposes and can be renamed. All these variables were used for
 44944                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 44945                                  ; manager ---- MOHANS
 44946                                  ;
 44947                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 44948                                  UU_BUF_EMS_FIRST_PAGE:	
 44949 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 44950                                  
 44951                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 44952                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 44953                                  ;	dw	0			
 44954                                  
 44955                                  CL0FATENTRY:
 44956 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 44957                                  			; is used in pack/unpack rts.
 44958                                  			; in fat.asm if cluster 0 is specified.
 44959                                  			; SR;
 44960                                  IoStatFail:
 44961 00000083 00                      	db	0	; IoStatFail has been added to 
 44962                                  			; record a fail on an I24 
 44963                                  			; issued from IOFUNC on a status call. 
 44964                                  
 44965                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 44966                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 44967                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 44968                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 44969                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 44970                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 44971                                  ;
 44972                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 44973                                  						; state of the 	buffers page.
 44974                                  						; This one byte is retained to 
 44975                                  						; keep the size of this data 
 44976                                  						; block the same.;
 44977                                  ALLOCMSAVE:
 44978 00000084 00                      	db	0	; M063: temp var. used to 
 44979                                  			; M063: save alloc method in
 44980                                  			; M063: msproc.asm
 44981                                  A20OFF_COUNT:
 44982 00000085 00                      	db	0	; M068: indiactes the # of 
 44983                                  			; M068: int 21 calls for 
 44984                                  			; M068: which A20 is off
 44985                                  DOS_FLAG:
 44986 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 44987                                  			; definitions
 44988                                  UNPACK_OFFSET:
 44989 00000087 0000                    	dw	0	; saves pointer to the start
 44990                                  			; of unpack code in exepatch.
 44991                                  			; asm.
 44992                                  UMBFLAG:
 44993 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 44994                                  			; M003: link state of the UMBs
 44995                                  			; M003: whether linked or not 
 44996                                  			; M003: to the DOS arena chain
 44997                                  SAVE_AX:
 44998 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 44999                                  			; M000: in msproc.asm
 45000                                  UMB_HEAD:
 45001 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 45002                                  			; M000: the first umb arena by 
 45003                                  			; M000: BIOS sysinit.
 45004                                  START_ARENA:
 45005 0000008E 0100                    	dw	1	; M000: this is the first arena 
 45006                                  			; M000: from which DOS will 
 45007                                  			; M000: start its scan for alloc.
 45008                                  
 45009                                  ; End of SYSINITVar block
 45010                                  ;----------------------------------------------------------------------------
 45011                                  
 45012                                  ; 25/04/2019 - Retro DOS v4.0
 45013                                  
 45014                                  ; 16/07/2018
 45015                                  ; MSDOS 3.3 (& MDOS 6.0)
 45016                                  
 45017                                  ;
 45018                                  ; Sharer jump table
 45019                                  ;
 45020                                  
 45021                                  ;PUBLIC	JShare
 45022                                  	;EVEN
 45023                                  
 45024                                  ;JShare	LABEL	DWORD
 45025                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 45026                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 45027                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 45028                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 45029                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 45030                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 45031                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 45032                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 45033                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 45034                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 45035                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 45036                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 45037                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 45038                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 45039                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 45040                                  
 45041                                  align 2
 45042                                  
 45043                                  JShare:
 45044 00000090 [F706]0000              		DW	BadCall,0
 45045 00000094 [FB06]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 45046 00000098 [FB06]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 45047 0000009C [F706]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 45048 000000A0 [F706]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 45049 000000A4 [F706]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 45050 000000A8 [F706]0000              set_block:	DW	BadCall,0  ; 6   set_block
 45051 000000AC [F706]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 45052 000000B0 [FB06]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 45053 000000B4 [F706]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 45054 000000B8 [F706]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 45055 000000BC [F706]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 45056 000000C0 [FB06]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 45057 000000C4 [F706]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 45058 000000C8 [F706]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 45059                                  
 45060                                  
 45061                                  ;============================================================================
 45062                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 45063                                  ;============================================================================
 45064                                  ; 25/04/2019 - Retro DOS 4.0 
 45065                                  ; 16/07/2018 - Retro DOS 3.0	
 45066                                  
 45067                                  ;Break <Initialized data and data used at DOS initialization>
 45068                                  ;----------------------------------------------------------------------------
 45069                                  
 45070                                  ; We need to identify the parts of the data area that are relevant to tasks
 45071                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 45072                                  ; data will be gathered with the system code.  The process data under 2.x will
 45073                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 45074                                  ;
 45075                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 45076                                  ; describing that data item.
 45077                                  
 45078                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 45079                                  
 45080                                  ;
 45081                                  ; Table of routines for assignable devices
 45082                                  ;
 45083                                  ; MSDOS allows assignment if the following standard devices:
 45084                                  ;   stdin  (usually CON input)
 45085                                  ;   stdout (usually CON output)
 45086                                  ;   auxin  (usually AUX input)
 45087                                  ;   auxout (usually AUX output)
 45088                                  ;   stdlpt (usually PRN output)
 45089                                  ;
 45090                                  ; SPECIAL NOTE:
 45091                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 45092                                  ;   If we're not at end-of-file, then we always say that we have a character.
 45093                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 45094                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 45095                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 45096                                  ;   as EOF).
 45097                                  
 45098                                  ; Default SFTs for boot up
 45099                                  
 45100                                  		;PUBLIC	SFTABL
 45101                                  
 45102                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 45103 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 45104 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 45105 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 45106                                  		;times 295 db 0 ; MSDOS 6.0
 45107 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 45108                                  
 45109                                  ; the next two variables relate to the position of the logical stdout/stdin
 45110                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 45111                                  ; console.
 45112                                  		; DOSDATA:01F9h (MSDOS 6.21)
 45113 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 45114 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 45115                                  					;	   of buffered input call
 45116 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 45117 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 45118                                  		; DOSDATA:02FEh (MSDOS 6.21)
 45119 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 45120 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 45121 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 45122                                  switch_character:
 45123 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 45124 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 45125 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 45126 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 45127 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 45128                                  
 45129                                  ; The following table is a list of addresses that the sharer patches to be
 45130                                  ; PUSH AX to enable the critical sections
 45131                                  
 45132                                  		; DOSDATA:0315h (MSDOS 6.21)
 45133                                  
 45134                                  ;PUBLIC	CritPatch
 45135                                  
 45136                                  CritPatch:	; LABEL WORD
 45137                                  
 45138                                  ;IRP sect,<critDisk,critDevice>
 45139                                  
 45140                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 45141                                  ;
 45142                                  ;SR; Change code patch address to a variable in data segment
 45143                                  ;
 45144                                  ;       dw OFFSET DOSDATA: redir_patch
 45145                                  ;       dw OFFSET DOSDATA: redir_patch
 45146                                  ;
 45147                                  ;;hkn	Short_Addr  E&sect
 45148                                  ;;hkn	Short_Addr  L&sect
 45149                                  ;
 45150                                  ;ELSE
 45151                                  ;	DW	0
 45152                                  ;	DW	0
 45153                                  ;ENDIF
 45154                                  ;ENDM
 45155                                  ;	DW	0
 45156                                  
 45157                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 45158                                   
 45159 00000315 [0C0D]                  	dw 	redir_patch
 45160 00000317 [0C0D]                  	dw 	redir_patch			
 45161 00000319 [0C0D]                  	dw	redir_patch
 45162 0000031B [0C0D]                  	dw 	redir_patch
 45163                                  
 45164 0000031D 0000                    	dw	0
 45165                                  
 45166                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 45167                                  ; Also, IBM server 1.0 requires this also.
 45168                                  
 45169                                  	;EVEN			; Force swap area to start on word boundry
 45170 0000031F 90                      align 2
 45171                                  	;PUBLIC	SWAP_START
 45172                                  SWAP_START:	; LABEL BYTE
 45173 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 45174 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 45175 00000322 FF                      WPERR:		db -1		; Write protect error flag
 45176 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 45177 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 45178                                  
 45179                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 45180 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 45181 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 45182                                  ; end warning
 45183                                   
 45184 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 45185                                  
 45186 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 45187 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 45188 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 45189 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 45190 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 45191 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 45192                                  ;				; F.C. 2/17/86
 45193 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 45194 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 45195                                  ;align 2
 45196                                  SWAP_ALWAYS:	; 05/08/2018
 45197 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 45198                                  				;   extended error type stuff.
 45199                                  				;   NOTE: does not have Correct value on
 45200                                  				;   1-12, OEM, Get/Set CurrentPDB,
 45201                                  				;   GetExtendedError system calls)
 45202 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 45203 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 45204 00000340 0000                    FirstArena:	dw 0		; first free block found
 45205 00000342 0000                    BestArena:	dw 0		; best free block found
 45206 00000344 0000                    LastArena:	dw 0		; last free block found
 45207 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 45208 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 45209 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 45210 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 45211 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 45212 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 45213 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 45214                                  
 45215                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 45216                                  	;EVEN
 45217 0000034F 90                      align 2
 45218                                  		; DOSDATA:0350h (MSDOS 6.21)
 45219 00000350 00                      DAY:		db 0		; Day of month
 45220 00000351 00                      MONTH:		db 0		; Month of year
 45221 00000352 0000                    YEAR:		dw 0		; Year (with century)
 45222 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 45223 00000356 00                      WEEKDAY:	db 0		; Day of week
 45224                                  ; end warning
 45225                                  
 45226 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 45227 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 45228 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 45229                                  
 45230                                  ; Combination of all device call parameters
 45231                                  	;PUBLIC	DEVCALL 	;
 45232                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 45233                                  DEVCALL: ; 08/08/2018
 45234 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 45235 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 45236 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 45237 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 45238 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 45239                                  
 45240                                  	;PUBLIC	CALLUNIT
 45241                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 45242                                  CALLFLSH: ; LABEL   WORD	;
 45243 00000367 00                      CALLMED:	db 0		; media byte
 45244                                  CALLBR:	  ; LABEL   DWORD	;
 45245                                  	;PUBLIC	CALLXAD 	;
 45246                                  CALLXAD:  ; LABEL   DWORD	;
 45247 00000368 00                      CALLRBYT:	db 0		;
 45248                                  	;PUBLIC	CALLVIDM	;
 45249                                  CALLVIDM: ; LABEL   DWORD	;
 45250 00000369 00<rep 3h>              	times 3 db 0	;
 45251                                  	;PUBLIC CallBPB		;
 45252                                  CALLBPB:  ; LABEL   DWORD	;
 45253                                  CALLSCNT:			;
 45254 0000036C 0000                    		dw 0		;
 45255                                  	;PUBLIC	CALLSSEC	;
 45256                                  CALLSSEC: ; LABEL   WORD	;
 45257 0000036E 0000                    		dw 0		;
 45258 00000370 00000000                CALLVIDRW:	dd 0		;
 45259                                  ;MSDOS 6.0
 45260 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 45261 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 45262                                  
 45263                                  ; Same as above for I/O calls	;
 45264                                  				;
 45265                                  	;PUBLIC	IOCall		;
 45266                                  ;IOCALL	SRHEAD	<>		;
 45267                                  IOCALL:	; 07/08/2018
 45268 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 45269 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 45270 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 45271 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 45272 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 45273                                  IOFLSH:	  ; LABEL   WORD	;
 45274                                          ;PUBLIC  IORCHR		;
 45275                                  IORCHR:	  ; LABEL   BYTE	;
 45276 00000389 00                      IOMED:		db 0		;
 45277 0000038A 00000000                IOXAD:		dd 0		;
 45278 0000038E 0000                    IOSCNT:		dw 0		;	
 45279 00000390 0000                    IOSSEC:		dw 0		;
 45280                                  
 45281                                  ; Call struct for DSKSTATCHK	;
 45282 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 45283 00000393 00                      		db 0
 45284 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 45285 00000395 0000                    DSKSTST:	dw 0		;
 45286 00000397 00<rep 8h>              	times 8	db 0		;
 45287 0000039F 00                      DSKCHRET:	db 0		;
 45288                                  
 45289                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 45290                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 45291                                  ;hkn   short_addr  DEVIOBUF	;
 45292                                  	
 45293 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 45294 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 45295 000003A4 0100                    DSKSTCNT:	dw 1		;
 45296 000003A6 0000                    		dw 0		;
 45297                                  
 45298 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 45299                                  
 45300                                  ;MSDOS 6.0
 45301                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 45302 000003A9 00000000                		dd 0		;MS. position
 45303 000003AD 00000000                		dd 0		;MS. length
 45304                                  
 45305                                  ;hkn; the foll. was moved from dosmes.asm.
 45306                                  
 45307                                  	;EVEN
 45308 000003B1 90                      align 2				; needed to maintain offsets
 45309                                  
 45310                                  		; DOSDATA:03B2h (MSDOS 6.21)
 45311                                  USERNUM:
 45312 000003B2 0000                     		dw 0		; 24 bit user number
 45313 000003B4 00                      		db 0
 45314                                  ;IF IBM
 45315                                  ;IF IBMCOPYRIGHT
 45316                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 45317                                  ;ELSE
 45318                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 45319                                  ;ENDIF
 45320                                  ;ELSE
 45321 000003B5 FF                      OEMNUM:		DB 0FFh
 45322                                  ;ENDIF
 45323                                  
 45324                                  ;============================================================================
 45325                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 45326                                  ;============================================================================
 45327                                  ; 25/04/2019 - Retro DOS 4.0
 45328                                  
 45329                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 45330                                  ; ----------------------------------------------------------
 45331                                  ; This data section which was named as uninitialized data
 45332                                  ; (as overlayed by initialization code) but follows 
 45333                                  ; initialized data section from DOSDATA:03B6h address
 45334                                  ; (in otherwords, the method is different than MSDOS 3.3,
 45335                                  ; and there is not overlaying..)
 45336                                  ; **********************************************************
 45337                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 45338                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 45339                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 45340                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 45341                                  ; TIMEBUF is at offset 03B6h.
 45342                                  ; **********************************************************	
 45343                                  
 45344                                  ;Break <Uninitialized data overlayed by initialization code>
 45345                                  ;----------------------------------------------------------------------------
 45346                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 45347                                  ; Init code overlaps with data area below
 45348                                  
 45349                                  ; 	ORG     0
 45350                                  
 45351                                  MSDAT001S:	; label byte
 45352                                  
 45353                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 45354                                  TIMEBUF: ;	times 6 db 0
 45355 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 45356 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 45357                                  
 45358                                  ; The following areas are used as temp buffer in EXEC system call
 45359                                  
 45360                                  ; DOSDATA:03BEh
 45361                                  OPENBUF: ;times 64  dw	0
 45362 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 45363                                  RENBUF:	
 45364 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 45365                                  
 45366                                  ; Buffer for search calls
 45367                                  SEARCHBUF:	
 45368 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 45369                                  DUMMYCDS:  ;times 88 db 0
 45370 000004F3 00<rep 58h>             	times	curdirLen db 0
 45371                                  
 45372                                  ; End of contiguous buffer
 45373                                   
 45374                                  ; Temporary directory entry for use by many routines. Device directory
 45375                                  ; entries (bogus) are built here.
 45376                                  
 45377                                  ; DOSDATA:054Bh
 45378                                  
 45379                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 45380                                  
 45381                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 45382                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 45383                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 45384                                  
 45385                                  NAME1:	
 45386 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 45387                                  NAME2:
 45388 00000557 00<rep Dh>              	times	13 db	0 		;
 45389                                  DESTSTART:
 45390 00000564 0000                    	dw	0			;
 45391                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 45392                                  	;times	5  db	0
 45393 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 45394                                  
 45395                                  ; End Temporary directory entry.
 45396                                  
 45397 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 45398                                  EXTFCB:	
 45399 0000056C 00                      	db	0		; TRUE => extended FCB in use
 45400                                  SATTRIB:
 45401 0000056D 00                      	db	0		; Storage for search attributes
 45402                                  OPEN_ACCESS:
 45403 0000056E 00                      	db	0		; access of open system call
 45404                                  FOUNDDEL:
 45405 0000056F 00                      	db	0		; true => file was deleted
 45406                                  FOUND_DEV:
 45407 00000570 00                      	db	0		; true => search found a device
 45408                                  FSPLICE:
 45409 00000571 00                      	db	0		; true => do a splice in transpath
 45410                                  FSHARING:
 45411 00000572 00                      	db	0		; TRUE => no redirection
 45412                                  SECCLUSPOS:
 45413 00000573 00                      	db	0		; Position of first sector within cluster
 45414 00000574 00                      TRANS:	db	0		;
 45415 00000575 00                      READOP:	db	0		;
 45416                                  THISDRV:
 45417 00000576 00                      	db	0		;
 45418                                  CLUSFAC:
 45419 00000577 00                      	db	0		;
 45420                                  CLUSSPLIT:
 45421 00000578 00                      	db	0		;
 45422                                  INSMODE:
 45423 00000579 00                      	db	0		; true => insert mode in buffered read
 45424 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 45425 0000057B 00                      VOLID:	db	0		;
 45426                                  EXIT_TYPE:
 45427 0000057C 00                      	db	0		; type of exit...
 45428                                   
 45429                                  	;EVEN
 45430                                  
 45431 0000057D 90                      align 2
 45432                                  
 45433                                  ; DOSDATA:057Eh
 45434                                  
 45435                                  ; WARNING - the following two items are accessed as a word
 45436                                  
 45437                                  CREATING:
 45438 0000057E 00                      	db	0		; true => creating a file
 45439 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 45440                                  				; = DIRFREE iff BUGBUG
 45441                                  EXITHOLD:
 45442 00000580 00000000                	dd	0		; Temp location for proc terminate
 45443                                  USER_SP:
 45444 00000584 0000                    	dw	0		; User SP for system call
 45445                                  USER_SS:
 45446 00000586 0000                    	dw	0		; User SS for system call
 45447                                  CONTSTK:
 45448 00000588 0000                    	dw	0		;
 45449                                  THISDPB:
 45450 0000058A 00000000                	dd	0		;
 45451                                  CLUSSAVE:
 45452 0000058E 0000                    	dw	0		;
 45453                                  CLUSSEC:
 45454 00000590 00000000                	dd	0		;>32mb			AC0000
 45455                                  PREREAD:
 45456 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 45457 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 45458                                  FATBYTE:
 45459 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 45460                                  ; DOSDATA:059Ah
 45461 0000059A 00000000                DEVPT:	dd	0		;
 45462                                  THISSFT:
 45463 0000059E 00000000                	dd	0		; Address of user SFT
 45464                                  THISCDS:
 45465 000005A2 00000000                	dd	0		; Address of current CDS
 45466                                  THISFCB:
 45467 000005A6 00000000                	dd	0		; Address of user FCB
 45468 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 45469 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 45470 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 45471                                  WFP_START:
 45472 000005B2 0000                    	dw	0		;
 45473                                  REN_WFP:
 45474 000005B4 0000                    	dw	0		;
 45475                                  CURR_DIR_END:
 45476 000005B6 0000                    	dw	0		;
 45477                                  NEXTADD:
 45478 000005B8 0000                    	dw	0		;
 45479                                  LASTPOS:
 45480 000005BA 0000                    	dw	0		;
 45481                                  CLUSNUM:
 45482 000005BC 0000                    	dw	0		;
 45483 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 45484                                  DIRSTART:
 45485 000005C2 0000                    	dw	0		;
 45486 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 45487 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 45488                                                                  ; sectors
 45489                                  BYTSECPOS:
 45490 000005CC 0000                    	dw	0		; Position of first byte within sector
 45491                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 45492 000005CE 0000<rep 2h>                    times	2 dw 0
 45493                                  BYTCNT1:
 45494 000005D2 0000                    	dw	0		; No. of bytes in first sector
 45495                                  BYTCNT2:
 45496 000005D4 0000                    	dw	0		; No. of bytes in last sector
 45497 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 45498                                  ; DOSDATA:05D8h
 45499                                  ENTFREE:
 45500 000005D8 0000                    	dw	0		;
 45501                                  ENTLAST:
 45502 000005DA 0000                    	dw	0		;
 45503                                  NXTCLUSNUM:
 45504 000005DC 0000                    	dw	0		;
 45505                                  GROWCNT:
 45506 000005DE 00000000                	dd	0		;
 45507 000005E2 00000000                CURBUF:	dd	0		;
 45508 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 45509 000005EA 0000                    SAVEBX:	dw	0		;
 45510 000005EC 0000                    SAVEDS:	dw	0		;
 45511                                  RESTORE_TMP:
 45512 000005EE 0000                    	dw	0		; return address for restore world
 45513 000005F0 0000                    NSS:	dw	0
 45514 000005F2 0000                    NSP:	dw	0
 45515                                  ; DOSDATA:05F4h
 45516                                  EXTOPEN_FLAG:
 45517 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 45518                                  EXTOPEN_ON:
 45519 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 45520                                  EXTOPEN_IO_MODE:
 45521 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 45522                                  SAVE_DI:
 45523 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 45524                                  SAVE_ES:
 45525 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 45526                                  SAVE_DX:
 45527 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 45528                                  SAVE_CX:
 45529 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 45530                                  SAVE_BX:
 45531 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 45532                                  SAVE_SI:
 45533 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 45534                                  SAVE_DS:
 45535 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 45536                                  
 45537                                  ; DOSDATA:0607h
 45538                                  
 45539                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 45540                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 45541                                  ; the high 16, the low 16 are still in the register.
 45542                                  
 45543                                  HIGH_SECTOR:	
 45544 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 45545                                  	; 25/09/2023
 45546                                  OffsetMagicPatch:
 45547                                  	;dw	MagicPatch	;scottq 8/6/92
 45548                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45549 00000609 0000                    	dw	0
 45550                                  				;see dos\mpatch.asm
 45551                                  DISK_FULL:
 45552 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 45553                                  TEMP_VAR:
 45554 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 45555                                  TEMP_VAR2:
 45556 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 45557 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 45558                                  DOS34_FLAG:
 45559 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 45560                                  NO_FILTER_PATH:
 45561 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 45562                                  NO_FILTER_DPATH:
 45563 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 45564                                  ; M008
 45565                                  AbsRdWr_SS:
 45566 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 45567                                  AbsRdWr_SP:
 45568 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 45569                                  
 45570                                  	; I_am  UU_Callback_flag,BYTE,<0>  ; Unused
 45571                                  ; M008
 45572                                  	; 24/03/2024
 45573                                  	; MSDOS 6.22 MSDOS.SYS - DOSDATA:061Fh
 45574                                  	; MSDOS 5.0 MSDOS.SYS - DOSDATA:061Fh
 45575                                  	; PCDOS 7.1 IBMDOS.COM - DOSDATA:061Fh
 45576 0000061F 00                      	db 	0
 45577                                   
 45578                                  ; make those pushes fast!!!
 45579                                  ;EVEN
 45580                                  
 45581                                  align 2
 45582                                  
 45583                                  StackSize   equ 180h  ; 384	; gross but effective
 45584                                  
 45585                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 45586                                  ;				; made up their minds about
 45587                                   
 45588                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 45589                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 45590                                  
 45591                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 45592                                   
 45593 00000620 00<rep 180h>                    times	StackSize db	0	;
 45594                                  AUXSTACK:			; LABEL   BYTE
 45595                                   
 45596 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 45597                                  DSKSTACK:			; LABEL   BYTE
 45598                                   
 45599 00000920 00<rep 180h>                    times	StackSize db	0	;
 45600                                  IOSTACK:			; LABEL   BYTE
 45601                                  
 45602                                  ; DOSDATA:0AA0h 
 45603                                   
 45604                                  ; patch space for Boca folks.
 45605                                  ; Say What????!!! This does NOT go into the swappable area!
 45606                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 45607                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 45608                                   
 45609                                  IBMPATCH: ; label byte
 45610                                  PRINTER_FLAG:
 45611 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 45612                                  VOLCHNG_FLAG:
 45613 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 45614                                  VIRTUAL_OPEN:
 45615 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 45616                                   
 45617                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 45618                                  
 45619                                  FSeek_drive:
 45620 00000AA3 00                      	db	0		;AN000; fastseek drive #
 45621                                  FSeek_firclus:
 45622 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 45623                                  FSeek_logclus:
 45624 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 45625                                  FSeek_logsave:
 45626 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 45627                                  
 45628                                  ; DOSDATA:0AAAh
 45629                                  
 45630                                  TEMP_DOSLOC:
 45631 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 45632                                  				;at SYSINIT time.
 45633                                  SWAP_END:  ; LABEL   BYTE
 45634                                   
 45635                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 45636                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 45637                                  ; to include this byte.
 45638                                   
 45639 00000AAC 00                      	db	0
 45640                                  
 45641                                  ; DOSDATA:0AADh
 45642                                   
 45643                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 45644                                  
 45645                                  ;DOSDATA    ENDS
 45646                                  
 45647                                  ;============================================================================
 45648                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 45649                                  ;============================================================================
 45650                                  ; 27/04/2019 - Retro DOS 4.0
 45651                                  ; 16/07/2018 - Retro DOS 3.0
 45652                                  
 45653                                  ;DOSDATA Segment
 45654                                  
 45655                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 45656                                  
 45657                                  ;
 45658                                  ; upper case table
 45659                                  ; ---------------------------------------------------------------------------
 45660                                  UCASE_TAB:	; label   byte
 45661 00000AAD 8000                    	dw	128
 45662 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 45663 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45664 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45665 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45666 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45667 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45668 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45669 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45670 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45671 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45672 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45673 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45674 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45675 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45676 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45677 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45678                                  ;
 45679                                  ; file upper case table
 45680                                  ; ---------------------------------------------------------------------------
 45681                                  FILE_UCASE_TAB:	; label  byte
 45682 00000B2F 8000                    	dw	128
 45683 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 45684 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45685 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45686 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45687 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45688 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45689 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45690 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45691 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45692 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45693 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45694 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45695 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45696 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45697 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45698 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45699                                  ;
 45700                                  ; file char list
 45701                                  ; ---------------------------------------------------------------------------
 45702                                  FILE_CHAR_TAB:	; label  byte
 45703 00000BB1 1600                    	dw	22				; length
 45704 00000BB3 0100FF                  	db	1,0,255 			; include all
 45705 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 45706 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 45706 00000BC2 7C3C3E2B3D3B2C     
 45707                                  	;db	24 dup (?)			; reserved
 45708 00000BC9 00<rep 18h>             	times	24 db 0
 45709                                  
 45710                                  ;
 45711                                  ; collate table
 45712                                  ; ---------------------------------------------------------------------------
 45713                                  COLLATE_TAB:	; label   byte
 45714 00000BE1 0001                    	dw	256
 45715 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 45716 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 45717 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 45718 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 45719 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 45720 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 45721 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 45722 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 45723 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 45724 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45725 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45726 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 45727 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 45728 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45729 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45730 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 45731 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 45732 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 45733 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 45734 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 45735 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 45736 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 45737 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45738 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45739 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45740 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45741 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45742 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45743 00000CC3 E053                    	db	224,"S"
 45744 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 45745 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45746 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45747 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45748                                  
 45749                                  ; ------------------------------------------------<MSKK01>----------------------
 45750                                  
 45751                                  ; DOSDATA:0CE3h
 45752                                  
 45753                                  ; 29/04/2019
 45754                                  
 45755                                  ; dbcs is not supported in DOS 3.3
 45756                                  ;		   DBCS_TAB	    CC_DBCS <>
 45757                                  ;
 45758                                  ; DBCS for DOS 4.00			   2/12/KK
 45759                                  
 45760                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 45761                                  ; ------------------------------------------------<MSKK01>----------------------
 45762                                  ;ifdef	DBCS
 45763                                  ; ifdef	  JAPAN
 45764                                  ;		dw	6		; <MSKK01>
 45765                                  ;		db	081h,09fh	; <MSKK01>
 45766                                  ;		db	0e0h,0fch	; <MSKK01>
 45767                                  ;		db	0,0		; <MSKK01>
 45768                                  ;
 45769                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 45770                                  ; endif
 45771                                  ; ifdef	  TAIWAN
 45772                                  ;		dw	4		; <TAIWAN>
 45773                                  ;		db	081h,0FEh	; <TAIWAN>
 45774                                  ;		db	0,0		; <TAIWAN>
 45775                                  ;
 45776                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45777                                  ; endif
 45778                                  ; ifdef   KOREA                         ; Keyl
 45779                                  ;               dw      4               ; <KOREA>
 45780                                  ;               db      0A1h,0FEh       ; <KOREA>
 45781                                  ;               db      0,0             ; <KOREA>
 45782                                  ;
 45783                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45784                                  ;  endif
 45785                                  ;else
 45786 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 45787                                  		;db	16 dup(0)	;AN000;  2/12/KK
 45788 00000CE5 00<rep 10h>             		times	16 db 0
 45789                                  
 45790                                  ;		dw	6		;  2/12/KK
 45791                                  ;		db	081h,09Fh	;  2/12/KK
 45792                                  ;		db	0E0h,0FCh	;  2/12/KK
 45793                                  ;		db	0,0		;  2/12/KK
 45794                                  ;
 45795                                  ;endif
 45796                                  ; ------------------------------------------------<MSKK01>----------------------
 45797                                  
 45798                                  ; DOSDATA:0CF5h
 45799                                  
 45800                                  ; ---------------------------------------------------------------------------
 45801                                  ;
 45802                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 45803                                  ;     ENTRY: AL = Character to map
 45804                                  ;     EXIT:  AL = The converted character
 45805                                  ; Alters no registers except AL and flags.
 45806                                  ; The routine should do nothing to chars below 80H.
 45807                                  ; ---------------------------------------------------------------------------
 45808                                  ; Example:
 45809                                  
 45810                                  MAP_CASE:
 45811                                  ;Procedure MAP_CASE,FAR
 45812                                  
 45813 00000CF5 3C80                    	CMP	AL,80h
 45814 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 45815 00000CF9 CB                      	RETF
 45816                                  Map1:
 45817 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 45818 00000CFC 1E                      	PUSH	DS
 45819 00000CFD 53                      	PUSH	BX
 45820 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 45821                                  FINISH:
 45822 00000D01 0E                      	PUSH	CS		;Move to DS
 45823 00000D02 1F                      	POP	DS
 45824 00000D03 D7                      	XLAT			;Get upper case character
 45825 00000D04 5B                      	POP	BX
 45826 00000D05 1F                      	POP	DS
 45827                                  L_RET:	
 45828 00000D06 CB                      	RETF
 45829                                  
 45830                                  ;EndProc MAP_CASE
 45831                                  
 45832                                  ; ---------------------------------------------------------------------------
 45833                                  
 45834                                  ; The variables for ECS version are moved here for the same data alignments
 45835                                  ; as IBM-DOS and MS-DOS.
 45836                                  
 45837                                  InterChar:
 45838 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 45839                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 45840                                  DUMMY:	; LABEL   WORD
 45841                                  InterCon:  
 45842 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 45843                                  SaveCurFlg:
 45844 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 45845                                  
 45846                                  ; ---------------------------------------------------------------------------
 45847                                  
 45848 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 45849                                  redir_patch:
 45850 00000D0C 00                      	  db	0
 45851                                  
 45852                                  ; DOSDATA:0D0Dh
 45853                                  
 45854                                  Mark1:	; label byte
 45855                                  
 45856                                  ;IF2
 45857                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 45858                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45859                                  ;	ENDIF
 45860                                  ;ENDIF
 45861                                  
 45862 00000D0D 00<rep 5h>              	  times 5 db 0
 45863                                  
 45864                                  ;############################################################################
 45865                                  ;
 45866                                  ; ** HACK FOR DOS 4.0 REDIR **
 45867                                  ; 
 45868                                  ; The redir requires the following:
 45869                                  ;
 45870                                  ;	MSVERS	offset D12H
 45871                                  ;	YRTAB	offset D14H
 45872                                  ; 	MONTAB	offset D1CH
 45873                                  ;
 45874                                  ; WARNING! WARNING!
 45875                                  ; 
 45876                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 45877                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 45878                                  ;
 45879                                  ; CURRENTLY MARK1 = 0D0DH
 45880                                  ;
 45881                                  ;############################################################################
 45882                                  
 45883                                  	;ORG	0D12h
 45884                                  
 45885                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 45886                                  
 45887                                  	;db	6
 45888                                  	;db	20
 45889                                  
 45890                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 45891                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 45892 00000D12 06                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 45893 00000D13 16                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION
 45894                                  
 45895                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 45896                                  ;
 45897                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>
 45898                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31>
 45899                                  
 45900                                  ; Days in year
 45901                                  
 45902                                  YRTAB:   
 45903 00000D14 C8A6                    	DB	200,166			; Leap year
 45904 00000D16 C8A5                    	DB	200,165
 45905 00000D18 C8A5                    	DB	200,165
 45906 00000D1A C8A5                    	DB	200,165
 45907                                  
 45908                                  ; Days of each month
 45909                                  
 45910                                  MONTAB:        
 45911 00000D1C 1F                      	DB      31                      ; January
 45912                                  february:
 45913 00000D1D 1C                      	DB	28 			; February--reset each 
 45914                                  					; time year changes
 45915 00000D1E 1F                              DB      31                      ; March
 45916 00000D1F 1E                              DB      30                      ; April
 45917 00000D20 1F                              DB      31                      ; May
 45918 00000D21 1E                              DB      30                      ; June
 45919 00000D22 1F                              DB      31                      ; July
 45920 00000D23 1F                              DB      31                      ; August
 45921 00000D24 1E                              DB      30                      ; September
 45922 00000D25 1F                              DB      31                      ; October
 45923 00000D26 1E                              DB      30                      ; November
 45924 00000D27 1F                              DB      31                      ; December
 45925                                  
 45926                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 45927                                  
 45928                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 45929                                  
 45930                                  SysInitTable:
 45931                                  	;dw	SYSINITVAR
 45932 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 45933 00000D2A 0000                            dw      0		; segment
 45934 00000D2C [2A12]                          dw	COUNTRY_CDPG	; pointer to country tabl
 45935 00000D2E 0000                            dw      0		; segment of pointer
 45936                                  
 45937                                  ; DOS 3.3 F.C. 6/12/86
 45938                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 45939                                  
 45940                                  FastTable:				; a better name
 45941                                  FastOpenTable:
 45942 00000D30 0200                    	dw      2                       ; number of entries
 45943 00000D32 [8412]                  	dw      FastRet			; pointer to ret instr.
 45944 00000D34 0000                    	dw      0                       ; and will be modified by
 45945 00000D36 [8412]                  	dw      FastRet			; FASTxxx when loaded in
 45946 00000D38 0000                    	dw      0                       
 45947                                  
 45948                                  ; DOS 3.3 F.C. 6/12/86
 45949                                  
 45950                                  FastFlg:				; flags
 45951                                  FastOpenFlg:
 45952 00000D3A 00                      	db	0			; don't change the foll: order
 45953                                  
 45954                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 45955                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 45956                                  ; or filled by FastOPen when calling FastOpen Lookup
 45957                                  
 45958                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 45959                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 45960                                  	;times	11 db 0
 45961 00000D3B 00<rep Bh>              	times	FEI.size db 0
 45962                                  
 45963                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 45964                                  ; when calling FastOpen Lookup
 45965                                  
 45966                                  Dir_Info_Buff:	; label  byte
 45967                                  	;db   	SIZE dir_entry dup (0)
 45968                                  	;times	32 db 0
 45969 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 45970                                  
 45971                                  Next_Element_Start:
 45972 00000D66 0000                    	dw	0			; save next element start offset
 45973                                  Del_ExtCluster:
 45974 00000D68 0000                    	dw	0			; for dos_delete
 45975                                  
 45976                                  ; The following is a stack and its pointer for interrupt 2F which is used
 45977                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 45978                                  ; not to destroy the INT 21 stack saved for the user.
 45979                                  
 45980                                  USER_SP_2F:	; LABEL  WORD
 45981 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 45982                                  
 45983                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 45984                                  DOS_TEMP:	; label  word		; temporary word
 45985                                  FAKE_STACK_2F:  
 45986                                  	; dw  14 dup (0)		; 12 register temporary storage
 45987 00000D6C 0000<rep Eh>            	times 14 dw 0
 45988                                  
 45989                                  Hash_Temp: 	;label  word		; temporary word
 45990                                  	;dw	4 dup (0)		; temporary hash table during config.sys
 45991 00000D88 0000<rep 4h>            	times	4 dw 0
 45992                                  
 45993                                  SCAN_FLAG:
 45994 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 45995                                  DATE_FLAG:
 45996 00000D91 0000                    	dw     0                	; flag to update the date
 45997                                  
 45998                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 45999 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 46000                                  
 46001                                  MSG_EXTERROR:	; label  DWORD		; for system message addr
 46002 00000D95 00000000                	dd     0               		; for extended error
 46003 00000D99 00000000                	dd     0			; for parser
 46004 00000D9D 00000000                	dd     0			; for critical errror
 46005 00000DA1 00000000                	dd     0			; for IFS
 46006 00000DA5 00000000                	dd     0			; for code reduction
 46007                                  
 46008                                  SEQ_SECTOR:	; label  DWORD 		; last sector read
 46009 00000DA9 FFFFFFFF                	dd     -1   
 46010                                  SC_SECTOR_SIZE:
 46011 00000DAD 0000                    	dw	0			; sector size for SC
 46012                                  SC_DRIVE:
 46013 00000DAF 00                      	db	0			; drive # for secondary cache
 46014                                  CurSC_DRIVE:
 46015 00000DB0 FF                      	db	-1			; current SC drive
 46016                                  CurSC_SECTOR:
 46017 00000DB1 00000000                	dd	0			; current SC starting sector
 46018                                  SC_STATUS:
 46019 00000DB5 0000                    	dw	0			; SC status word
 46020                                  SC_FLAG:
 46021 00000DB7 00                      	db	0			; SC flag
 46022                                  AbsDskErr:
 46023 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 46024                                  
 46025                                  NO_NAME_ID:	; label byte
 46026 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id
 46026 00000DC3 2020               
 46027                                  
 46028                                  ;hkn; moved from TABLE segment in kstrin.asm
 46029                                  
 46030                                  KISTR001S:	; label	byte		; 2/17/KK
 46031 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 46032                                  KISTR001E:	; label	byte		; 2/17/KK
 46033                                  
 46034                                  ; the nul device driver used to be part of the code. However, since the
 46035                                  ; header is in the data, and the entry points are only given as an offset,
 46036                                  ; the strategy and interrupt entry points must also be in the data now.
 46037                                  
 46038                                  ; DOSDATA:0DC6h
 46039                                  
 46040                                  SNULDEV:
 46041                                  ;procedure snuldev,far
 46042                                  	;or	word [es:bx+3],100h
 46043                                  	; 17/12/2022
 46044                                  	;or	byte [es:bx+4],01h
 46045                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 46046                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 46047 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 46048                                  INULDEV:
 46049 00000DCC CB                      	retf				; must not be a return!
 46050                                  ;endproc snuldev
 46051                                  
 46052                                  ;M044
 46053                                  ; Second part of save area for saving last para of Windows memory
 46054                                  
 46055                                  WinoldPatch2:
 46056                                  	;db	8 dup (?)	; M044
 46057 00000DCD 00<rep 8h>              	times	8 db 0	
 46058                                  UmbSave2:
 46059                                  	;db	5 dup (?)	; M062
 46060 00000DD5 00<rep 5h>              	times	5 db 0
 46061                                  UmbSaveFlag:
 46062 00000DDA 00                      	db	0		; M062
 46063                                  
 46064                                  ; DOSDATA:0DDBh
 46065                                  
 46066                                  Mark2:	; label byte
 46067                                  
 46068                                  ;IF2
 46069                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 46070                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 46071                                  ;	ENDIF
 46072                                  ;ENDIF
 46073                                  
 46074                                  ;############################################################################
 46075                                  ;
 46076                                  ; ** HACK FOR DOS 4.0 REDIR **
 46077                                  ; 
 46078                                  ; The redir requires the following:
 46079                                  ;
 46080                                  ;	ERR_TABLE_21	offset DDBH
 46081                                  ;	ERR_TABLE_24	offset E5BH
 46082                                  ; 	ErrMap24	offset EABH
 46083                                  ;
 46084                                  ; WARNING! WARNING!
 46085                                  ;
 46086                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 46087                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 46088                                  ;
 46089                                  ; CURRENTLY MARK2 = 0DD0H
 46090                                  ;
 46091                                  ;############################################################################
 46092                                  
 46093                                  	;ORG	0DDBh
 46094                                  
 46095                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 46096                                  
 46097                                  ; ---------------------------------------------------------------------------
 46098                                  ;
 46099                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 46100                                  ; errors. Each entry is 4 bytes long:
 46101                                  ;
 46102                                  ;       Err#,Class,Action,Locus
 46103                                  ;
 46104                                  ; A value of 0FFh indicates a call specific value (ie. should already
 46105                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 46106                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 46107                                  ;
 46108                                  ; ---------------------------------------------------------------------------
 46109                                  
 46110                                  ;ErrTab  Macro   err,class,action,locus
 46111                                  ;ifidn <locus>,<0FFh>
 46112                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 46113                                  ;ELSE
 46114                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 46115                                  ;ENDIF
 46116                                  ;ENDM
 46117                                  
 46118                                  ERR_TABLE_21: ; LABEL   BYTE
 46119 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 46120 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46121 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46122 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 46123 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 46124 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 46125 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 46126 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 46127 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 46128 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 46129 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 46130 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 46131 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 46132 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46133 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 46134 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 46135 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46136 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 46137 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46138 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46139 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 46140 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 46141 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 46142 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 46143 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 46144 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 46145 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 46146 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 46147                                      ; MSDOS 6.0
 46148 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 46149 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 46150 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 46151 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 46152                                  
 46153                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 46154                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 46155                                  ;		db 2,8,3,2
 46156                                  ;		db 3,8,3,2
 46157                                  ;		db 4,1,4,1
 46158                                  ;		db 5,3,3,0FFh
 46159                                  ;		db 6,7,4,1
 46160                                  ;		db 7,7,5,5
 46161                                  ;		db 8,1,4,5
 46162                                  ;		db 9,7,4,5
 46163                                  ;		db 0Ah,7,4,5
 46164                                  ;		db 0Bh,9,3,1
 46165                                  ;		db 0Ch,7,4,1
 46166                                  ;		db 0Dh,9,4,1
 46167                                  ;		db 0Fh,8,3,2
 46168                                  ;		db 10h,3,3,2
 46169                                  ;		db 11h,0Dh,3,2
 46170                                  ;		db 12h,8,3,2
 46171                                  ;		db 50h,0Ch,3,2
 46172                                  ;		db 20h,0Ah,2,2
 46173                                  ;		db 21h,0Ah,2,2
 46174                                  ;		db 54h,1,4,0FFh
 46175                                  ;		db 56h,3,3,1
 46176                                  ;		db 52h,1,4,2
 46177                                  ;		db 32h,9,3,3
 46178                                  ;		db 55h,0Ch,3,3
 46179                                  ;		db 57h,9,3,1
 46180                                  ;		db 53h,0Dh,4,1
 46181                                  ;		db 24h,1,4,5
 46182                                  ; MSDOS 6.0 (MSDOS 6.21)
 46183                                  ;		db 26h,1,4,1
 46184                                  ;		db 27h,1,4,1
 46185                                  ;		db 5Ah,0Dh,4,2
 46186                                  ; MSDOS 6.0 & MSDOS 3.3
 46187                                  ;		db 0FFh,0FFh,0FFh,0FFh
 46188                                  
 46189                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 46190                                  
 46191                                  ; ---------------------------------------------------------------------------
 46192                                  ;
 46193                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 46194                                  ; errors. Each entry is 4 bytes long:
 46195                                  ;
 46196                                  ;       Err#,Class,Action,Locus
 46197                                  ;
 46198                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 46199                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 46200                                  ; THE END.
 46201                                  ;
 46202                                  ; ---------------------------------------------------------------------------
 46203                                  
 46204                                  ERR_TABLE_24: ; LABEL   BYTE
 46205 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 46206 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 46207 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 46208 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 46209 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 46210 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 46211 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 46212 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 46213 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 46214 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 46215 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 46216 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 46217 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 46218 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46219 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46220 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 46221 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 46222 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 46223 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 46224 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 46225                                  
 46226                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 46227                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 46228                                  ;		db 14h,4,5,1
 46229                                  ;		db 15h,5,7,0FFh
 46230                                  ;		db 16h,4,5,1
 46231                                  ;		db 17h,0Bh,4,2
 46232                                  ;		db 18h,4,5,1
 46233                                  ;		db 19h,5,1,2
 46234                                  ;		db 1Ah,0Bh,7,2
 46235                                  ;		db 1Bh,0Bh,4,2
 46236                                  ;		db 1Ch,2,7,4
 46237                                  ;		db 1Dh,5,4,0FFh
 46238                                  ;		db 1Eh,5,4,0FFh
 46239                                  ;		db 1Fh,0Dh,4,0FFh
 46240                                  ;		db 20h,0Ah,2,2
 46241                                  ;		db 21h,0Ah,2,2
 46242                                  ;		db 22h,0Bh,7,2
 46243                                  ;		db 32h,9,3,3
 46244                                  ;		db 23h,7,4,1
 46245                                  ;		db 24h,1,4,5
 46246                                  ;		db 0FFh,0Dh,5,0FFh
 46247                                  
 46248                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 46249                                  
 46250                                  ; ---------------------------------------------------------------------------
 46251                                  ;
 46252                                  ; We need to map old int 24 errors and device driver errors into the new set
 46253                                  ; of errors. The following table is indexed by the new errors
 46254                                  ;
 46255                                  ; ---------------------------------------------------------------------------
 46256                                  
 46257                                  ;Public  ErrMap24
 46258                                  ErrMap24: ; Label   BYTE
 46259 00000EAB 13                          DB  error_write_protect	; 0
 46260 00000EAC 14                          DB  error_bad_unit		; 1
 46261 00000EAD 15                          DB  error_not_ready		; 2
 46262 00000EAE 16                          DB  error_bad_command	; 3
 46263 00000EAF 17                          DB  error_CRC		; 4
 46264 00000EB0 18                          DB  error_bad_length	; 5
 46265 00000EB1 19                          DB  error_seek		; 6
 46266 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 46267 00000EB3 1B                          DB  error_sector_not_found	; 8
 46268 00000EB4 1C                          DB  error_out_of_paper	; 9
 46269 00000EB5 1D                          DB  error_write_fault	; A
 46270 00000EB6 1E                          DB  error_read_fault	; B
 46271 00000EB7 1F                          DB  error_gen_failure	; C
 46272 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 46273 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 46274 00000EBA 22                          DB  error_wrong_disk	; F
 46275                                  
 46276                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 46277                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 46278                                  	
 46279                                  ErrMap24End: ; LABEL   BYTE
 46280                                  
 46281                                  ; DOSDATA:0EBBh (MSDOS 6.21, MSDOS.SYS)
 46282                                  
 46283                                  ; ---------------------------------------------------------------------------
 46284                                  
 46285                                  ; 27/04/2019 - Retro DOS v4.0
 46286                                  
 46287                                  FIRST_BUFF_ADDR:
 46288 00000EBB 0000                    	dw	0			; first buffer address
 46289                                  SPECIAL_VERSION:
 46290 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 46291                                  FAKE_COUNT:
 46292 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 46293                                  OLD_FIRSTCLUS:
 46294 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 46295                                  
 46296                                  ; ---------------------------------------------------------------------------
 46297                                  
 46298                                  ;smr; moved from TABLE segment in exec.asm
 46299                                  
 46300 00000FC0 0000                    exec_init_SP: dw 0
 46301 00000FC2 0000                    exec_init_SS: dw 0
 46302 00000FC4 0000                    exec_init_IP: dw 0
 46303 00000FC6 0000                    exec_init_CS: dw 0
 46304                                  
 46305                                  exec_signature:
 46306 00000FC8 0000                    	dw	0	; must contain 4D5A (yay zibo!)
 46307                                  exec_len_mod_512:
 46308 00000FCA 0000                    	dw	0	; low 9 bits of length
 46309                                  exec_pages:
 46310 00000FCC 0000                    	dw	0	; number of 512b pages in file
 46311                                  exec_rle_count:
 46312 00000FCE 0000                    	dw	0	; count of reloc entries
 46313                                  exec_par_dir:
 46314 00000FD0 0000                    	dw	0	; number of paragraphs before image
 46315                                  exec_min_BSS:
 46316 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 46317                                  exec_max_BSS:
 46318 00000FD4 0000                    	dw	0	; max number of para of BSS
 46319                                  exec_SS:
 46320 00000FD6 0000                    	dw	0	; stack of image
 46321                                  exec_SP:
 46322 00000FD8 0000                    	dw	0	; SP of image
 46323                                  exec_chksum:
 46324 00000FDA 0000                    	dw	0	; checksum of file (ignored)
 46325                                  exec_IP:
 46326 00000FDC 0000                    	dw	0	; IP of entry
 46327                                  exec_CS:
 46328 00000FDE 0000                    	dw	0	; CS of entry
 46329                                  exec_rle_table:
 46330 00000FE0 0000                    	dw	0	; byte offset of reloc table
 46331                                  
 46332                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 46333                                  
 46334                                  ;smr; eom
 46335                                  
 46336                                  ; ---------------------------------------------------------------------------
 46337                                  
 46338                                  ;SR;
 46339                                  ; WIN386 instance table for DOS
 46340                                  
 46341                                  Win386_Info:
 46342 00000FE2 0300                    	db	3, 0
 46343 00000FE4 000000000000000000-     	dd	0, 0, 0
 46343 00000FED 000000             
 46344 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 46345                                  
 46346                                  Instance_Table:
 46347 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 46348 00000FFA [3200]00000400          	dw	BCON, 0, 4
 46349 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 46350 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 46351 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 46352 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 46353 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 46354 0000101E 00000000                	dw	0, 0
 46355                                  
 46356                                  ; M001; SR;
 46357                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of
 46358                                  ; M001; some DOS variables. Note that the only really important variable in
 46359                                  ; M001; this is User_Id. The other variables are needed only to patch stuff
 46360                                  ; M001; which does not need to be done in DOS 5.0. 
 46361                                  
 46362                                  ; 29/12/2022
 46363                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 46364                                  
 46365                                  Win386_DOSVars:
 46366 00001022 05                      	db	5	;Major version 5 ; M001
 46367 00001023 00                      	db	0	;Minor version 0 ; M001
 46368 00001024 [EC05]                  	dw	SAVEDS	; M001
 46369 00001026 [EA05]                  	dw	SAVEBX	; M001
 46370 00001028 [2103]                  	dw	INDOS	; M001
 46371 0000102A [3E03]                  	dw	USER_ID	; M001
 46372 0000102C [1503]                  	dw	CritPatch ; M001
 46373 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 46374                                  
 46375                                  ;SR;
 46376                                  ; Flag to indicate whether WIN386 is running or not
 46377                                  
 46378 00001030 00                      IsWin386: db	0
 46379                                  
 46380                                  ;M018
 46381                                  ; This variable contains the path to the VxD device needed for Win386
 46382                                  
 46383 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 46383 0000103A 2E33383600         
 46384                                  
 46385                                  ;End WIN386 support
 46386                                  
 46387                                  ; ---------------------------------------------------------------------------
 46388                                  
 46389                                  ;SR;
 46390                                  ; These variables have been added for the special lie support for device
 46391                                  ;drivers.
 46392                                  ;
 46393                                  
 46394                                  DriverLoad:	
 46395 0000103F 01                      	db	1	;initialized to do special handling
 46396                                  BiosDataPtr:
 46397 00001040 00000000                	dd	0
 46398                                  
 46399                                  ; 25/03/2024
 46400                                  %if 1
 46401                                  ; 29/12/2022 - Retro DOS v4.1
 46402                                  ;%if 0
 46403                                  
 46404                                  ; 27/04/2019 - Retro DOS v4.0
 46405                                  ; 04/11/2022
 46406                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 46407                                  
 46408                                  ;------------------------------------------------------------------------
 46409                                  ; Patch for Sidekick
 46410                                  ;
 46411                                  ; A documented method for finding the offset of the Errormode flag in the
 46412                                  ; dos swappable data area if for the app to scan in the dos segment (data)
 46413                                  ; for the following sequence of instructions.
 46414                                  ;
 46415                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 46416                                  ;
 46417                                  ; The Offset of Errormode flag is 0320h
 46418                                  ;
 46419                                  ;------------------------------------------------------------------------
 46420                                  
 46421 00001044 36F6062003FF            	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 46422 0000104A 750C                    	db	075h, 0Ch			 ; jnz  NearLabel
 46423 0000104C 36FF365803              	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 46424 00001051 CD28                    	db	0CDh, 028h			 ; int  28h
 46425                                  
 46426                                  ;--------------------------------------------------------------------------
 46427                                  ; Patch for PortOfEntry - M036
 46428                                  ;
 46429                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 46430                                  ; the offset of Errormode flag. The following patch is to support them in 
 46431                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 46432                                  ;
 46433                                  ;---------------------------------------------------------------------------
 46434                                  
 46435 00001053 803E200300              	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 46436 00001058 7537                    	db	075h, 037h			 ; jnz	NearLabel
 46437 0000105A BCA00A                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 46438                                  
 46439                                  %endif ; 29/12/2022
 46440                                  
 46441                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 46442                                  
 46443                                  ;--------------------------------------------------------------------------
 46444                                  
 46445                                  ;*** New FCB Implementation
 46446                                  ; This variable is used as a cache in the new FCB implementation to remember
 46447                                  ;the address of a local SFT that can be recycled for a regenerate operation
 46448                                  
 46449 0000105D 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 46450                                  
 46451                                  ;DOSDATA ENDS
 46452                                  
 46453                                  ;============================================================================
 46454                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 46455                                  ;============================================================================
 46456                                  ; 27/04/2019 - Retro DOS 4.0
 46457                                  
 46458                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 46459                                  
 46460                                  ;---------------------------------------------------------------------------
 46461                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 46462                                  ;----------------------------------------------------------------------------
 46463                                  	
 46464                                  	;db	90h
 46465                                  
 46466                                  	;EVEN
 46467 00001061 90                      align 2
 46468                                  
 46469                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 46470                                  
 46471                                  DOSINTTABLE:	; LABEL	DWORD
 46472                                  
 46473                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 46474                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 46475                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 46476                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 46477                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 46478                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 46479                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 46480                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 46481                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 46482                                  	
 46483 00001062 [6C51]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 46484 00001066 [DC02]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4
 46485 0000106A [0803]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 46486 0000106E [2D05]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 46487 00001072 [B405]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 46488 00001076 [8F60]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 46489 0000107A [FD06]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 46490 0000107E [E302]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 46491 00001082 [E202]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 46492                                  
 46493 00001086 0000                    SS_Save: dw	0		; save user's stack segment
 46494 00001088 0000                    SP_Save: dw	0		; save user's stack offset
 46495                                  
 46496                                  ;-------------------------------------------------------------------------
 46497                                  ;
 46498                                  ; LOW MEM STUB:
 46499                                  ;
 46500                                  ; The low mem stub contains the entry points into DOS for all interrupts
 46501                                  ; handled by DOS. This stub is installed if the user specifies that the
 46502                                  ; DOS load in HIMEM. Each entry point does this.
 46503                                  ;
 46504                                  ; 	1. if jmp to 8 has been patched out
 46505                                  ;	   2. if A20 OFF
 46506                                  ;	      3. Enable A20
 46507                                  ;	   4. else 
 46508                                  ;	      5. just go to dos entry
 46509                                  ;	   6. endif
 46510                                  ;	7. else
 46511                                  ;	   8. just go to dos entry
 46512                                  ;	9. endif
 46513                                  ;
 46514                                  ;--------------------------------------------------------------------------
 46515                                  
 46516                                  ; 27/04/2019 - Retro DOS v4.0
 46517                                  
 46518                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 46519                                  
 46520                                  ;--------------------------------------------------------------------------
 46521                                  ;
 46522                                  ; DIVIDE BY 0 handler
 46523                                  ;
 46524                                  ;--------------------------------------------------------------------------
 46525                                  
 46526                                  ldivov:
 46527                                  	; The following jump, skipping the XMS calls will be patched to
 46528                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46529                                  	; needed because the stub is installed even before the XMS driver
 46530                                  	; is loaded if the user specifies dos=high in the config.sys
 46531                                  i0patch:
 46532 0000108A EB03                    	jmp	short divov_cont
 46533                                  
 46534 0000108C E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46535                                  divov_cont:
 46536 0000108F 2EFF2E[6210]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 46537                                  
 46538                                  ;------------------------------------------------------------------------
 46539                                  ;
 46540                                  ; INT 20 Handler
 46541                                  ;
 46542                                  ; Here we do not have to set up the stack to return here as the abort call
 46543                                  ; will return to the address after the int 21 ah=4b call. This would be the
 46544                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 46545                                  ; will be restored then.
 46546                                  ;
 46547                                  ;-------------------------------------------------------------------------
 46548                                  
 46549                                  lquit:
 46550                                  	; The following jump, skipping the XMS calls will be patched to
 46551                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46552                                  	; needed because the stub is installed even before the XMS driver
 46553                                  	; is loaded if the user specifies dos=high in the config.sys
 46554                                  i20patch:
 46555 00001094 EB03                    	jmp	short quit_cont
 46556                                  
 46557 00001096 E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46558                                  quit_cont:
 46559 00001099 2EFF2E[6610]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 46560                                  
 46561                                  ;--------------------------------------------------------------------------
 46562                                  ;
 46563                                  ; INT 21 Handler
 46564                                  ;
 46565                                  ;--------------------------------------------------------------------------
 46566                                  
 46567                                  lcommand:
 46568                                  	; The following jump, skipping the XMS calls will be patched to
 46569                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46570                                  	; needed because the stub is installed even before the XMS driver
 46571                                  	; is loaded if the user specifies dos=high in the config.sys
 46572                                  i21patch:
 46573 0000109E EB03                    	jmp	short command_cont
 46574                                  
 46575 000010A0 E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46576                                  command_cont:
 46577 000010A3 2EFF2E[6A10]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 46578                                  
 46579                                  ;------------------------------------------------------------------------
 46580                                  ;
 46581                                  ; INT 25 
 46582                                  ;
 46583                                  ;----------------------------------------------------------------------------
 46584                                  
 46585                                  labsdrd:
 46586                                  	; The following jump, skipping the XMS calls will be patched to
 46587                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46588                                  	; needed because the stub is installed even before the XMS driver
 46589                                  	; is loaded if the user specifies dos=high in the config.sys
 46590                                  i25patch:
 46591 000010A8 EB03                    	jmp	short absdrd_cont
 46592                                  
 46593 000010AA E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46594                                  absdrd_cont:
 46595 000010AD 2EFF2E[6E10]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 46596                                  
 46597                                  ;-------------------------------------------------------------------------
 46598                                  ;
 46599                                  ; INT 26
 46600                                  ;
 46601                                  ;-----------------------------------------------------------------------
 46602                                  
 46603                                  labsdwrt:
 46604                                  	; The following jump, skipping the XMS calls will be patched to
 46605                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46606                                  	; needed because the stub is installed even before the XMS driver
 46607                                  	; is loaded if the user specifies dos=high in the config.sys
 46608                                  i26patch:
 46609 000010B2 EB03                    	jmp	short absdwrt_cont
 46610                                  
 46611 000010B4 E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46612                                  absdwrt_cont:
 46613 000010B7 2EFF2E[7210]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 46614                                  
 46615                                  ;------------------------------------------------------------------------
 46616                                  ;
 46617                                  ; INT 27
 46618                                  ;
 46619                                  ;-----------------------------------------------------------------------
 46620                                  
 46621                                  lstay_resident:
 46622                                  	; The following jump, skipping the XMS calls will be patched to
 46623                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46624                                  	; needed because the stub is installed even before the XMS driver
 46625                                  	; is loaded if the user specifies dos=high in the config.sys
 46626                                  i27patch:
 46627 000010BC EB03                    	jmp	short sr_cont
 46628                                  
 46629 000010BE E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46630                                  sr_cont:
 46631 000010C1 2EFF2E[7610]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 46632                                  
 46633                                  ;-----------------------------------------------------------------------------
 46634                                  ;
 46635                                  ; INT 2f
 46636                                  ;
 46637                                  ;-------------------------------------------------------------------------
 46638                                  
 46639                                  lint2f:
 46640                                  	; The following jump, skipping the XMS calls will be patched to
 46641                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46642                                  	; needed because the stub is installed even before the XMS driver
 46643                                  	; is loaded if the user specifies dos=high in the config.sys
 46644                                  i2fpatch:
 46645 000010C6 EB03                    	jmp	short int2f_cont
 46646                                  
 46647 000010C8 E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46648                                  int2f_cont:
 46649 000010CB 2EFF2E[7A10]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 46650                                  
 46651                                  ;-----------------------------------------------------------------------------
 46652                                  ;
 46653                                  ; CPM entry
 46654                                  ;
 46655                                  ;------------------------------------------------------------------------
 46656                                  
 46657                                  lcall_entry:
 46658                                  	; The following jump, skipping the XMS calls will be patched to
 46659                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46660                                  	; needed because the stub is installed even before the XMS driver
 46661                                  	; is loaded if the user specifies dos=high in the config.sys
 46662                                  cpmpatch:
 46663 000010D0 EB03                    	jmp	short callentry_cont
 46664                                  
 46665 000010D2 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46666                                  callentry_cont:
 46667 000010D5 2EFF2E[7E10]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 46668                                  
 46669                                  ;--------------------------------------------------------------------------
 46670                                  
 46671                                  lirett:
 46672 000010DA CF                      	iret
 46673                                  
 46674                                  ;---------------------------------------------------------------------------
 46675                                  ;
 46676                                  ; LowIntXX:
 46677                                  ;
 46678                                  ; Interrupts from DOS that pass control to a user program must be done from
 46679                                  ; low memory, as the user program may change the state of the A20 line or
 46680                                  ; they may require that the A20 line be OFF. The following piece of code is
 46681                                  ; far call'd from the following places in DOS:
 46682                                  ;
 46683                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 46684                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 46685                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 46686                                  ;
 46687                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 46688                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 46689                                  ; before doing the ints and then do a far junp back into DOS.
 46690                                  ;
 46691                                  ;---------------------------------------------------------------------------
 46692                                  
 46693 000010DB 00000000                DosRetAddr23:	dd	0
 46694 000010DF 00000000                DosRetAddr24:	dd	0
 46695 000010E3 00000000                DosRetAddr28:	dd	0
 46696                                  
 46697                                  	; Execute int 23h from low memory
 46698                                  LowInt23:
 46699                                  					; save the return address that is on
 46700                                  					; the stack
 46701 000010E7 2E8F06[DB10]            	pop	word [cs:DosRetAddr23]
 46702 000010EC 2E8F06[DD10]            	pop	word [cs:DosRetAddr23+2]
 46703                                  
 46704 000010F1 CD23                    	int	23h			; ctrl C
 46705                                  					; turn on A20 it has been turned OFF
 46706                                  					; by int 28/23/24 handler.
 46707                                  
 46708 000010F3 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF
 46709                                  
 46710 000010F6 2EFF2E[DB10]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 46711                                  
 46712                                  
 46713                                  	; Execute int 24h from low memory
 46714                                  LowInt24:
 46715                                  					; save the return address that is on
 46716                                  					; the stack
 46717 000010FB 2E8F06[DF10]            	pop	word [cs:DosRetAddr24]
 46718 00001100 2E8F06[E110]            	pop	word [cs:DosRetAddr24+2]
 46719                                  
 46720 00001105 CD24                    	int	24h			; crit error
 46721                                  					; turn on A20 it has been turned OFF
 46722                                  					; by int 28/23/24 handler.
 46723                                  
 46724 00001107 E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF
 46725                                  
 46726 0000110A 2EFF2E[DF10]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 46727                                  
 46728                                  
 46729                                   
 46730                                  	; Execute int 28h from low memory
 46731                                  LowInt28:
 46732 0000110F CD28                    	int	28h			; idle int
 46733                                  					; turn on A20 it has been turned OFF
 46734                                  					; by int 28/23/24 handler.
 46735                                  
 46736 00001111 E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF
 46737                                  
 46738 00001114 CB                      	retf
 46739                                  
 46740                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 46741                                  
 46742                                  ;-------------------------------------------------------------------------
 46743                                  ;
 46744                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 46745                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 46746                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 46747                                  ; This is so because exepac'd programs rely on address wrap.
 46748                                  ;
 46749                                  ;-------------------------------------------------------------------------
 46750                                  
 46751                                  disa20_xfer:
 46752 00001115 E83F00                  	call	XMMDisableA20		; disable A20
 46753                                  
 46754                                  	; Look at msproc.asm at label exec_go for understanding the following:
 46755                                  
 46756                                  	; DS:SI points to entry point
 46757                                  	; AX:DI points to initial stack
 46758                                  	; DX has PDB pointer
 46759                                  	; BX has initial AX value
 46760                                  
 46761 00001118 FA                      	cli
 46762 00001119 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 46763                                  
 46764 0000111F 8ED0                    	mov	SS,AX			; set up user's stack
 46765 00001121 89FC                    	mov	SP,DI			; and SP
 46766 00001123 FB                      	sti
 46767                                  
 46768 00001124 1E                      	push	DS			; fake long call to entry
 46769 00001125 56                      	push	SI
 46770 00001126 8EC2                    	mov	ES,DX			; set up proper seg registers
 46771 00001128 8EDA                    	mov	DS,DX
 46772 0000112A 89D8                    	mov	AX,BX			; set up proper AX
 46773 0000112C CB                      	retf
 46774                                  
 46775                                  ;-------------------------------------------------------------------------
 46776                                  ;
 46777                                  ; M003:
 46778                                  ;
 46779                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 46780                                  ; come here, turn A20 OFF restore user stack and registers before returning
 46781                                  ; to user. This is done in dos\msdisp.asm. This has been done to support
 46782                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for
 46783                                  ; more info.
 46784                                  ;
 46785                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that
 46786                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's
 46787                                  ; stack to avoid additional stack overhead for the user.
 46788                                  ;
 46789                                  ; -------------------------------------------------------------------------
 46790                                  
 46791                                  disa20_iret:
 46792 0000112D E82700                  	call	XMMDisableA20
 46793 00001130 FE0E[2103]              	dec	byte [INDOS]
 46794 00001134 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 46795 00001138 8B26[8405]              	mov	SP,[USER_SP]
 46796 0000113C 89E5                    	mov	BP,SP
 46797                                  	;mov	[BP+user_env.user_AX],AL
 46798 0000113E 884600                  	mov	[bp],al
 46799 00001141 A1[F205]                	mov	AX,[NSP]
 46800 00001144 A3[8405]                	mov	[USER_SP],AX
 46801 00001147 A1[F005]                	mov	AX,[NSS]
 46802 0000114A A3[8605]                	mov	[USER_SS],AX
 46803                                  
 46804 0000114D 58                      	pop	AX			; restore user regs
 46805 0000114E 5B                      	pop	BX
 46806 0000114F 59                      	pop	CX
 46807 00001150 5A                      	pop	DX
 46808 00001151 5E                      	pop	SI
 46809 00001152 5F                      	pop	DI
 46810 00001153 5D                      	pop	BP
 46811 00001154 1F                      	pop	DS
 46812 00001155 07                      	pop	ES
 46813 00001156 CF                      	iret
 46814                                  
 46815                                  ;**************************************************************************
 46816                                  ;***	XMMDisableA20 - switch 20th address line
 46817                                  ;
 46818                                  ;	This routine is used to disable the 20th address line in
 46819                                  ;	the system using XMM calls.
 46820                                  ;
 46821                                  ;	ENTRY	none		;ds = _DATA
 46822                                  ;	EXIT	A20 line disabled
 46823                                  ;	USES	NOTHING
 46824                                  ;
 46825                                  ;**************************************************************************
 46826                                  
 46827                                  XMMDisableA20:
 46828 00001157 53                      	push	bx
 46829 00001158 50                      	push	ax
 46830                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 46831 00001159 B406                    	mov	ah,6
 46832 0000115B 2EFF1E[6311]            	call	far [cs:XMMcontrol]
 46833 00001160 58                      	pop	ax
 46834 00001161 5B                      	pop	bx
 46835 00001162 C3                      	retn
 46836                                  
 46837                                  ; The entry point in the BIOS XMS driver is defined here.
 46838                                  
 46839                                  XMMcontrol:
 46840 00001163 00000000                	dd	0
 46841                                  
 46842                                  ;--------------------------------------------------------------------------
 46843                                  ;
 46844                                  ;***	EnsureA20ON - Ensures that A20 is ON
 46845                                  ;
 46846                                  ;	This routine is used to query the A20 state in
 46847                                  ;	the system using XMM calls.
 46848                                  ;
 46849                                  ;	ENTRY: none
 46850                                  ;
 46851                                  ;	EXIT : A20 will be ON
 46852                                  ;
 46853                                  ; 	USES : NONE
 46854                                  ;
 46855                                  ;--------------------------------------------------------------------------
 46856                                  
 46857                                  ; 25/03/2024
 46858                                  ;;19/09/2023
 46859                                  LowMemory:	; label dword		; Set equal to 0000:0080
 46860 00001167 8000                    	dw	00080h
 46861 00001169 0000                    	dw	00000h
 46862                                  
 46863                                  HighMemory:	; label dword
 46864 0000116B 9000                    	dw	00090h			; Set equal to FFFF:0090
 46865 0000116D FFFF                    	dw	0FFFFh
 46866                                  
 46867                                  	; 25/03/2024 - Retro DOS v5.0
 46868                                  	; MSDOS 5.0-6.22 MSDOS.SYS - DOSDATA:116Fh
 46869                                  	; (PCDOS 7.1 IBMDOS.COM - DOSDATA:1085h)
 46870                                  
 46871                                  EnsureA20ON:
 46872 0000116F 9C                      	pushf
 46873 00001170 1E                      	push    ds
 46874 00001171 06                      	push	es
 46875 00001172 51                      	push	cx
 46876 00001173 56                      	push	si
 46877 00001174 57                      	push	di
 46878                                  
 46879                                  	; 25/03/2024
 46880                                  	;;19/09/2023
 46881 00001175 2EC536[6711]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 46882 0000117A 2EC43E[6B11]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 46883                                  
 46884                                  	; 25/03/2024
 46885                                  	;xor	di,di
 46886                                  	;mov	es,di
 46887                                  	;dec	di
 46888                                  	;mov	si,90h	; 0FFFFh:0090h	; HighMemory
 46889                                  	;mov	ds,di
 46890                                  	;mov	di,80h	; 0000h:0080h	; LowMemory
 46891                                  	
 46892 0000117F B90400                  	mov	cx,4
 46893 00001182 FC                      	cld
 46894 00001183 F3A7                    	repe    cmpsw
 46895                                  
 46896 00001185 7407                    	jz	short EA20_OFF
 46897                                  EA20_RET:
 46898 00001187 5F                      	pop	di
 46899 00001188 5E                      	pop	si
 46900 00001189 59                      	pop	cx
 46901 0000118A 07                      	pop	es
 46902 0000118B 1F                      	pop	ds
 46903 0000118C 9D                      	popf
 46904 0000118D C3                      	retn
 46905                                  
 46906                                  EA20_OFF:
 46907                                  	; We are going to do the XMS call on the DOS's AuxStack.
 46908                                  	; NOTE: ints are disabled at this point.
 46909                                  
 46910 0000118E 53                      	push	bx
 46911 0000118F 50                      	push	ax
 46912                                  
 46913 00001190 8CD0                    	mov	ax,ss			; save user's stack pointer
 46914 00001192 2EA3[8610]              	mov	[cs:SS_Save],ax
 46915 00001196 2E8926[8810]            	mov	[cs:SP_Save],sp
 46916 0000119B 8CC8                    	mov	ax,cs
 46917 0000119D 8ED0                    	mov	ss,ax
 46918 0000119F BC[A007]                	mov	sp,AUXSTACK
 46919                                  					; ss:sp -> DOSDATA:AuxStack
 46920                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 46921 000011A2 B405                    	mov	ah,5
 46922 000011A4 2EFF1E[6311]            	call	far [cs:XMMcontrol]
 46923 000011A9 09C0                    	or	ax,ax
 46924 000011AB 740F                    	jz	short XMMerror		; AX = 0 fatal error
 46925                                  
 46926 000011AD 2EA1[8610]              	mov	ax,[cs:SS_Save]		; restore user stack
 46927 000011B1 8ED0                    	mov	ss,ax
 46928 000011B3 2E8B26[8810]            	mov	sp,[cs:SP_Save]
 46929                                  
 46930 000011B8 58                      	pop	ax
 46931 000011B9 5B                      	pop	bx
 46932                                  
 46933 000011BA EBCB                    	jmp	short EA20_RET
 46934                                  
 46935                                  XMMerror:				; M006 - Start
 46936 000011BC B40F                    	mov	ah,0Fh			; get video mode
 46937 000011BE CD10                    	int	10h
 46938 000011C0 3C07                    	cmp	al,7			; Q: are we an MDA
 46939 000011C2 7406                    	je	short XMMcont		; Y: do not change mode
 46940 000011C4 30E4                    	xor	ah,ah ; 0		; set video mode
 46941 000011C6 B002                    	mov	al,02h			; 80 X 25 text
 46942 000011C8 CD10                    	int	10h
 46943                                  XMMcont:
 46944 000011CA B405                    	mov	ah,05h			; set display page
 46945 000011CC 30C0                    	xor	al,al			; page 0
 46946 000011CE CD10                    	int	10h
 46947                                  	
 46948 000011D0 BE[B812]                	mov	si,XMMERRMSG
 46949 000011D3 0E                      	push	cs
 46950 000011D4 1F                      	pop	ds
 46951 000011D5 FC                      	cld				; clear direction flag
 46952                                  XMMprnt:
 46953 000011D6 AC                      	lodsb
 46954 000011D7 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 46955 000011D9 7409                    	jz	short XMMStall		; function 0Eh
 46956 000011DB B40E                    	mov	ah,0Eh
 46957 000011DD BB0700                  	mov	bx,7
 46958 000011E0 CD10                    	int	10h
 46959 000011E2 EBF2                    	jmp	short XMMprnt
 46960                                  
 46961                                  XMMStall:
 46962 000011E4 FB                      	sti				; allow the user to warm boot
 46963 000011E5 EBFD                    	jmp	short XMMStall		; M006 - End
 46964                                  
 46965                                  ;---------------------------------------------------------------------------
 46966                                  
 46967                                  ; 27/04/2019 - Retro DOS v4.0
 46968                                  
 46969                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 46970                                  ALTAH	equ 0Ch
 46971                                  
 46972                                  ;This has been put in for WIN386 2.XX support. The format of the instance
 46973                                  ;table was different for this. Segments will be patched in at init time.
 46974                                  
 46975                                  ; 25/03/2024
 46976                                  ; MSDOS 5.0-6.22 MSDOS.SYS - DOSDATA:11E7h
 46977                                  ; (PCDOS 7.1 IBMDOS.COM - DOSDATA:10FCh)
 46978                                  
 46979                                  OldInstanceJunk:
 46980 000011E7 7000                    	dw	70h	;segment of BIOS
 46981 000011E9 0000                    	dw	0	;indicate stacks in SYSINIT area
 46982 000011EB 0600                    	dw	6	;5 instance items
 46983                                  
 46984                                  	;dw	0,offset dosdata:contpos, 2
 46985                                  	;dw	0,offset dosdata:bcon, 4
 46986                                  	;dw	0,offset dosdata:carpos,106h
 46987                                  	;dw	0,offset dosdata:charco, 1
 46988                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 46989                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 46990                                  
 46991 000011ED 0000[2200]0200          	dw	0,CONTPOS,2
 46992 000011F3 0000[3200]0400          	dw	0,BCON,4
 46993 000011F9 0000[F901]0601          	dw	0,CARPOS,106h
 46994 000011FF 0000[0003]0100          	dw	0,CHARCO,1
 46995 00001205 0000[C00F]2200          	dw	0,exec_init_SP,34
 46996 0000120B 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 46997                                  
 46998                                  ;---------------------------------------------------------------------------
 46999                                  
 47000                                  ; M021-
 47001                                  ;
 47002                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 47003                                  ; 	takes control of the HMA. When running, this word is a reliable
 47004                                  ;	indicator that the DOS is actually using HMA. You can't just use
 47005                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 47006                                  
 47007                                  DosHasHMA:
 47008 00001211 00                      	db	0
 47009                                  FixExePatch:
 47010 00001212 0000                    	dw	0		; M012
 47011                                  
 47012                                  ; 25/03/2024
 47013                                  ;; 28/12/2022 - Retro DOS v4.1
 47014                                  RationalPatchPtr:
 47015 00001214 0000                    	dw	0		; M012
 47016                                  
 47017                                  ; End M021
 47018                                  
 47019                                  ;---------------------------------------------------------------------------
 47020                                  
 47021                                  ; 25/03/2024
 47022                                  %if 1
 47023                                  ;; 28/12/2022 - Retro DOS v4.1
 47024                                  ;%if 0
 47025                                  
 47026                                  ; M020 Begin
 47027                                  
 47028                                  RatBugCode:	; proc	far
 47029 00001216 51                      	push	cx
 47030 00001217 8B0E1000                	mov	cx,[10h]
 47031                                  rbc_loop:
 47032                                  	;loop	$
 47033 0000121B E2FE                    	loop	rbc_loop
 47034 0000121D 59                      	pop	cx
 47035 0000121E CB                      	retf
 47036                                  
 47037                                  ; M020 End
 47038                                  
 47039                                  %endif
 47040                                  
 47041                                  ;---------------------------------------------------------------------------
 47042                                  	
 47043                                  UmbSave1:
 47044                                  	;db	11 dup (?)	; M023
 47045 0000121F 00<rep Bh>              	times	11 db 0	
 47046                                  
 47047                                  ; DOSDATA:122Ah
 47048                                  
 47049                                  Mark3:	; label byte
 47050                                  
 47051                                  ;IF2
 47052                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 47053                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 47054                                  ;	ENDIF
 47055                                  ;ENDIF
 47056                                  
 47057                                  ;############################################################################
 47058                                  ;
 47059                                  ; ** HACK FOR DOS 4.0 REDIR **
 47060                                  ;
 47061                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 47062                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 47063                                  ; COUNTRY_CDPG if it can. 
 47064                                  ;
 47065                                  ; MARK3 SHOULD NOT BE > 122AH
 47066                                  ;
 47067                                  ; As of 9/6/90, this area is FULL!
 47068                                  ;
 47069                                  ;############################################################################
 47070                                   
 47071                                  	;ORG	0122Ah
 47072                                  
 47073                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 47074                                  
 47075                                  ; The following table is used for DOS 3.3
 47076                                  ;DOS country and code page information is defined here for DOS 3.3.
 47077                                  ;The initial value for ccDosCountry is 1 (USA).
 47078                                  ;The initial value for ccDosCodepage is 850.
 47079                                  
 47080                                  ; country and code page information
 47081                                  ; ---------------------------------------------------------------------------
 47082                                  COUNTRY_CDPG:	; label  byte
 47083 0000122A 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 47084 00001232 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 47084 0000123B 53595300           
 47085                                  	;db   51 dup (?)
 47086 0000123F 00<rep 33h>             	times 51 db 0
 47087                                  ; ------------------------------------------------<MSKK01>-------------------
 47088                                  ;ifdef	DBCS
 47089                                  ;  ifdef JAPAN
 47090                                  ;	dw   932			; system code page id (JAPAN)
 47091                                  ;  endif
 47092                                  ;  ifdef TAIWAN
 47093                                  ;	dw   938			; system code page id (TAIWAN)
 47094                                  ;  endif
 47095                                  ;  ifdef KOREA
 47096                                  ;	dw   934			; system code page id (KOREA IBM)
 47097                                  ;  endif
 47098                                  ;else
 47099 00001272 B501                    	dw   437			; system code page id
 47100                                  ;endif
 47101                                  ; ------------------------------------------------<MSKK01>-------------------
 47102 00001274 0600                    	dw   6				; number of entries
 47103 00001276 02                      	db   SetUcase  ; 2		; Ucase type
 47104 00001277 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 47105 00001279 0000                    	dw   0				; segment of poiter
 47106 0000127B 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 47107 0000127C [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 47108 0000127E 0000                    	dw   0				; segment of poiter
 47109 00001280 05                      	db   SetFileList ; 5		; valid file chars type
 47110 00001281 [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 47111 00001283 0000                    	dw   0				; segment of poiter
 47112 00001285 06                      	db   SetCollate	; 6		; collate type
 47113 00001286 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 47114 00001288 0000                    	dw   0				; segment of poiter
 47115 0000128A 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 47116 0000128B [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 47117 0000128D 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 47118 0000128F 01                      	db   SetCountryInfo  ; 1	; country info type
 47119 00001290 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 47120                                  ; ------------------------------------------------<MSKK01>-------------------
 47121                                  ;ifdef	DBCS
 47122                                  ;	...... 
 47123                                  ;else
 47124 00001292 0100                    	dw   1				; USA country id
 47125 00001294 B501                    	dw   437			; USA system code page id
 47126 00001296 0000                    	dw   0 				; date format
 47127 00001298 2400000000              	db   '$',0,0,0,0		; currency symbol
 47128 0000129D 2C00                    	db   ',',0			; thousand separator
 47129 0000129F 2E00                    	db   '.',0			; decimal separator
 47130 000012A1 2D00                    	db   '-',0			; date separator
 47131 000012A3 3A00                    	db   ':',0			; time separator
 47132 000012A5 00                      	db   0				; currency format flag
 47133 000012A6 02                      	db   2				; # of digits in currency
 47134 000012A7 00                      	db   0 				; time format
 47135 000012A8 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 47136 000012AA 0000                    	dw   0				; segment of entry point
 47137 000012AC 2C00                    	db   ',',0			; data list separator
 47138 000012AE 000000000000000000-     	dw   0,0,0,0,0			; reserved
 47138 000012B7 00                 
 47139                                  ;endif
 47140                                  ; ------------------------------------------------<MSKK01>-------------------
 47141                                  
 47142                                  ; 27/04/2019 - Retro DOS v4.0
 47143                                  
 47144                                  ;include msdos.cl2			; XMMERRMSG
 47145                                  
 47146                                  ; DOSDATA:12B8h (MSDOS 6.22, MSDOS.SYS) ; 17/01/2024
 47147                                  
 47148                                  XMMERRMSG:
 47149 000012B8 0D0A                    	db	0Dh,0Ah
 47150 000012BA 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 47150 000012C3 617265204572726F72-
 47150 000012CC 0D0A24             
 47151                                  
 47152                                  ; DOSDATA ends
 47153                                  
 47154                                  ; 05/11/2022
 47155                                  ;----------------------------------------------------------------------------
 47156                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 47157                                  ;----------------------------------------------------------------------------
 47158                                  
 47159                                  ; 28/12/2022 - Retro DOS v4.1
 47160                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 47161                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 47162                                  ;----------------------------------------------------------------------------
 47163                                  %if 0
 47164                                  
 47165                                  ;----------------------------------------------------------------------------
 47166                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47167                                  
 47168                                  ;============================================================================
 47169                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 47170                                  ;============================================================================
 47171                                  ; 27/04/2019 - Retro DOS 4.0
 47172                                  
 47173                                  ;DOSDATA Segment
 47174                                  
 47175                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 47176                                  
 47177                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47178                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 47179                                  
 47180                                  ; first and second DOS patches
 47181                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 47182                                  ;
 47183                                  ; Code in disk.asm, 2 locations, one for read, one for write
 47184                                  ;	DVRDLP:
 47185                                  ;	DVWRTLP:
 47186                                  ;
 47187                                  ;
 47188                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 47189                                  ;	lds	si,si+7 				  ; sf_devptr
 47190                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 47191                                  
 47192                                  DOSP1_ID:	db	036h,0C5h,036h
 47193                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 47194                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 47195                                  
 47196                                  		db	90h, 90h
 47197                                  
 47198                                  DOSP12_ID:	db	036h,0C5h,036h
 47199                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 47200                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 47201                                  
 47202                                  ; DOSDATA:12E3h
 47203                                  
 47204                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 47205                                  ;
 47206                                  ; Code in disk.asm, 1 location
 47207                                  ;	GETBUF:
 47208                                  ;
 47209                                  ; 051h	push	cx	<- begin special int28 mode
 47210                                  ;	push	es
 47211                                  ;	push	di
 47212                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 47213                                  ;	call	????	; $STD_CON_STRING_INPUT
 47214                                  ;	pop	di
 47215                                  ;	pop	es
 47216                                  ; 059h	pop	cx	<- end special int28 mode
 47217                                  
 47218                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 47219                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 47220                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 47221                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 47222                                  DOSP4_ID:	db	059h			; pop cx
 47223                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 47224                                  	
 47225                                  ; DOSDATA:12EFh
 47226                                  
 47227                                  ; Fifth DOS patch - System call 40h (Write) to console
 47228                                  ;
 47229                                  ; Code in disk.asm, 1 location
 47230                                  ;
 47231                                  ;		push	cx
 47232                                  ;      WRCONLP: lodsb
 47233                                  ;		cmp	al,1Ah
 47234                                  ;		jz	????
 47235                                  ;		call	????	<- "simulate" int28 event
 47236                                  ;		loop	WRCONLP
 47237                                  ;      CONEOF:	pop	ax
 47238                                  
 47239                                  DOSP5_ID:	db	051h			; push cx
 47240                                  		db	0ACh,03Ch,01Ah,074h,005h
 47241                                  		db	0E8h			; call
 47242                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 47243                                  
 47244                                  ; DOSDATA:12F6h
 47245                                  
 47246                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 47247                                  ;
 47248                                  ; Code in disp.asm, 1 location
 47249                                  ;
 47250                                  ;
 47251                                  ;	mov [SaveDS],ds
 47252                                  ;	mov [SaveBX],bx
 47253                                  ;	mov bx,cs
 47254                                  ;	mov ds,bx
 47255                                  ;	inc [indos]
 47256                                  ;	xor ax,ax
 47257                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 47258                                  
 47259                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 47260                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 47261                                  		db	02Eh,089h,01Eh
 47262                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 47263                                  		db	08Ch,0CBh		; mov bx,cs
 47264                                  		db	08Eh,0DBh		; mov ds,bx
 47265                                  		db	0FEh,006h
 47266                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 47267                                  		db	033h,0C0h		; xor ax,ax
 47268                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 47269                                  
 47270                                  ; DOSDATA:130Ah
 47271                                  
 47272                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 47273                                  ;
 47274                                  ; Code in handle.asm, 1 location in routine CheckOwner
 47275                                  ;
 47276                                  ;
 47277                                  ;
 47278                                  ;	push	ax
 47279                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 47280                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 47281                                  ;	pop	ax
 47282                                  ;	jz	????
 47283                                  
 47284                                  DOSP8_ID:	db	050h			; push ax
 47285                                  		db	036h,0A1h
 47286                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 47287                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 47288                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 47289                                  		db	02Fh,058h		; pop  ax
 47290                                  
 47291                                  ; DOSDATA:1314h
 47292                                  
 47293                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 47294                                  ;
 47295                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 47296                                  ;   a yeild when a character is not ready to be read.
 47297                                  ;
 47298                                  ; Code in disk.asm, 3 locations
 47299                                  ;
 47300                                  ;   DVRDRAW:
 47301                                  ;	    PUSH    ES
 47302                                  ;	    POP     DS
 47303                                  ;   ReadRawRetry:				<- Patch 10
 47304                                  ;	    MOV     BX,DI
 47305                                  ;	    XOR     AX,AX			<- Reenter #2
 47306                                  ;	    MOV     DX,AX
 47307                                  ;	    call    SETREAD
 47308                                  ;	    PUSH    DS				<- Reenter #1
 47309                                  ;	    LDS     SI,[THISSFT]
 47310                                  ;	    call    DEVIOCALL
 47311                                  ;	    MOV     DX,DI
 47312                                  ;	    MOV     AH,86H
 47313                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 47314                                  ;	    TEST    DI,STERR
 47315                                  ;	    JZ	    CRDROK
 47316                                  ;	    call    CHARHARD
 47317                                  ;	    MOV     DI,DX
 47318                                  ;	    OR	    AL,AL
 47319                                  ;	    JZ	    CRDROK
 47320                                  ;	    CMP     AL,3
 47321                                  ;	    JZ	    CRDFERR
 47322                                  ;	    POP     DS
 47323                                  ;	    JMP     ReadRawRetry
 47324                                  ;
 47325                                  ;   CRDFERR:
 47326                                  ;	    POP     DI				<- Patch 11
 47327                                  ;   DEVIOFERR:
 47328                                  ;	    LES     DI,[THISSFT]
 47329                                  ;	    jmp     SET_ACC_ERR_DS
 47330                                  ;
 47331                                  ;   CRDROK:
 47332                                  ;	    POP     DI				<- Patch 12
 47333                                  ;	    MOV     DI,DX
 47334                                  ;	    ADD     DI,[CALLSCNT]
 47335                                  ;	    JMP     SHORT ENDRDDEVJ3
 47336                                  
 47337                                  DOSP10_ID:		db	006H,01FH
 47338                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 47339                                  DOSP10_LOC:		db	08BH,0DFH
 47340                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 47341                                  			db	033H,0C0H,08BH,0D0H,0E8H
 47342                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 47343                                  			db	0DFH,00EH
 47344                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 47345                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 47346                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 47347                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 47348                                  			db	009H,003H
 47349                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 47350                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 47351                                  			db	01FH,0EBH,0CFH
 47352                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 47353                                  			db	05FH
 47354                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 47355                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 47356                                  
 47357                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 47358                                  			db	05FH,08BH,0FAH
 47359                                  ; DOSDATA:1353h
 47360                                  
 47361                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 47362                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 47363                                  ;
 47364                                  ;	    Sets focus to current VM so user can see fatal message.
 47365                                  ;
 47366                                  ;
 47367                                  ;	l0: lodsb		<- Setfocus here
 47368                                  ;	    cmp al, '$'
 47369                                  ;	    je l1
 47370                                  ;	    mov bl, 7
 47371                                  ;	    mov ah, 0Eh
 47372                                  ;	    int 10h
 47373                                  ;	    jmp l0
 47374                                  ;	l1: jmp $
 47375                                  
 47376                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 47377                                  		db	03Ch,024h		;     cmp al, '$'
 47378                                  		db	074h,008h		;     je l1
 47379                                  		db	0B3h,007h		;     mov bl, 7
 47380                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 47381                                  		db	0CDh,010h		;     int 10h
 47382                                  		db	0EBh,0F3h		;     jmp l0
 47383                                  		db	0EBh,0FEh		; l1: jmp $
 47384                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 47385                                  
 47386                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47387                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 47388                                  
 47389                                  ; 06/12/2022
 47390                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 47391                                  
 47392                                  ; DOSDATA ends
 47393                                  
 47394                                  ;============================================================================
 47395                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 47396                                  ;============================================================================
 47397                                  ; 27/04/2019 - Retro DOS 4.0
 47398                                  
 47399                                  ;mpatch.asm -- holds data patch location for callouts 
 47400                                  ; -- allocate cluster in rom.asm
 47401                                  ;
 47402                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 47403                                  ; Currently, this location is used only by magicdrv.sys's patch to
 47404                                  ; cluster allocation, however it can be expanded to be used by other
 47405                                  ; patches. This is important since we have an easy-access pointer to
 47406                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 47407                                  ; only patch out a far call/retf, so any space after that could be
 47408                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 47409                                  ; to call out here.
 47410                                  ;
 47411                                  ; Currently, we allocate only the minimum space required for the 6
 47412                                  ; byte magicdrv patch, so if you change the dos data, you may want
 47413                                  ; to reserve space here if your new data will be position dependent
 47414                                  ; and would prohibit growing of this table.
 47415                                  ;
 47416                                  ;history	-	created 8-7-92 by scottq
 47417                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 47418                                  ;
 47419                                  ;Exported Functions
 47420                                  ;==================
 47421                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 47422                                  
 47423                                  ; DosData Segment
 47424                                  
 47425                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 47426                                  
 47427                                  ; ---------------------------------------------------------------------------
 47428                                  
 47429                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 47430                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 47431                                  ; greater). Added to this file because it needed to be somewhere and is
 47432                                  ; 'patch' related.
 47433                                  
 47434                                  Rational386PatchPtr:
 47435                                  	dw	0	; points to patch routine or RET instr.
 47436                                  ; ---------------------------------------------------------------------------
 47437                                  
 47438                                  MagicPatch:
 47439                                  ;MagicPatch proc far
 47440                                          retf            ;default is to just return to allocate
 47441                                          nop             ;however, this code will be patched
 47442                                          nop             ;by magicdrv.sys to
 47443                                          nop             ; call far ?:?     
 47444                                          nop             ; retf or perhaps just jmp far
 47445                                          nop             ;retf/nop take one byte, so we need six instructions
 47446                                                          ;for 6 byte patch
 47447                                  ;MagicPatch endp
 47448                                  
 47449                                  ; ---------------------------------------------------------------------------
 47450                                  
 47451                                  ;DosData Ends
 47452                                  
 47453                                  ; DOSDATA:136Ah
 47454                                  
 47455                                  ;----------------------------------------------------------------------------
 47456                                  
 47457                                  ;DOSDATALAST SEGMENT
 47458                                  
 47459                                  ; 29/04/2019 - Retro DOS v4.0
 47460                                  
 47461                                  ;----------------------------------------------------------------------------
 47462                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 47463                                  
 47464                                  ;db 0,1,12,64,19,0 ; ! Magic numbers !
 47465                                  
 47466                                  ;align 16
 47467                                  
 47468                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 47469                                  
 47470                                  ;----------------------------------------------------------------------------
 47471                                  
 47472                                  %endif	; 05/11/2022
 47473                                  
 47474                                  ; 05/12/2022
 47475                                  ;MSDAT001E:	; label byte
 47476                                  
 47477                                  ; 22/03/2024 - Retro DOS v4.2
 47478                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47479                                  DOSDATAEND equ $
 47480                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 47481                                  MSDAT001E equ DOSDATAEND - DOSDATASTART	; = 4970 for MSDOS 6.22 MSDOS.SYS
 47482                                  					; (= 4934 for PCDOS 7.1 IBMDOS.COM)
 47483                                  					; ((= 4944 for Windows ME IO.SYS))
 47484                                  ;DOSDATALAST ENDS
 47485                                  
 47486                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 47487                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 47488                                  ;============================================================================
 47489                                  ;	END
 47490                                  ;============================================================================
 47491                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 47492                                  ; -----------------------------
 47493                                  ; MAY 2019, ISTANBUL - TURKIYE.
