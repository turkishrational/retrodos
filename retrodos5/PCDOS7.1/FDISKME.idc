//
// +-------------------------------------------------------------------------+
// |   This file has been generated by The Interactive Disassembler (IDA)    |
// |           Copyright (c) 2013 Hex-Rays, <support@hex-rays.com>           |
// |                      Licensed to: Freeware version                      |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
  // set 'loading idc file' mode
  SetCharPrm(INF_GENFLAGS, INFFL_LOADIDC|GetCharPrm(INF_GENFLAGS));
  GenInfo();            // various settings
  Segments();           // segmentation
  Enums();              // enumerations
  Structures();         // structure types
  Patches();            // manual patches
  SegRegs();            // segment register values
  Bytes();              // individual bytes (code,data)
  Functions();          // function definitions
  // clear 'loading idc file' mode
  SetCharPrm(INF_GENFLAGS, ~INFFL_LOADIDC&GetCharPrm(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        DeleteAll();    // purge database
	SetPrcsr("80386r");
	SetCharPrm(INF_COMPILER, 0);
	StringStp(0xA);
	Tabs(1);
	Comments(0);
	Voids(0);
	XrefShow(2);
	AutoShow(1);
	Indent(16);
	CmtIndent(40);
	TailDepth(0x10);
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	;
	SegCreate(0,0XA460,0,0,1,2);
	SegRename(0,"seg000");
	SegClass (0,"CODE");
	SegDefReg(0x0,"ds",0xA65);
	SetSegmentType(0,2);
	SegCreate(0XA460,0XA4E8,0XA46,0,1,2);
	SegRename(0XA460,"seg001");
	SegClass (0XA460,"CODE");
	SegDefReg(0xA460,"ds",0xA65);
	SetSegmentType(0XA460,2);
	SegCreate(0XA4E8,0XA650,0XA4E,0,1,2);
	SegRename(0XA4E8,"seg002");
	SegClass (0XA4E8,"CODE");
	SegDefReg(0xA4E8,"ds",0xA65);
	SetSegmentType(0XA4E8,2);
	SegCreate(0XA650,0X14FA0,0XA65,0,3,2);
	SegRename(0XA650,"dseg");
	SegClass (0XA650,"DATA");
	SegDefReg(0xA650,"ds",0xA65);
	SetSegmentType(0XA650,3);
	SegCreate(0X14FA0,0X157A0,0X14FA,0,1,5);
	SegRename(0X14FA0,"seg004");
	SegClass (0X14FA0,"STACK");
	SegDefReg(0x14FA0,"ds",0xA65);
	SetSegmentType(0X14FA0,9);
	LowVoids(0x20);
	HighVoids(0x157A0);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        BeginTypeUpdating(UTP_ENUM);
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        BeginTypeUpdating(UTP_STRUCT);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	ExtLinA		(0,	0,	"; File Name   : D:\\Documents and Settings\\Erdoðan Tan\\Desktop\\FDISKME.EXE");
	ExtLinA		(0,	1,	"; Format      : MS-DOS executable (EXE)");
	ExtLinA		(0,	2,	"; Base Address: 0h Range: 0h-157A0h Loaded length: 11620h");
	ExtLinA		(0,	3,	"; Entry Point : 0:81C0");
	MakeByte	(x=0);
	MakeArray	(x,	0X10);
	OpDecimal	(x,	0);
	MakeName	(0,	"_0_");
	MakeCode	(x=0X10);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X10,	"main");
	MakeCode	(x=0X1B);
	OpHex		(x,	1);
	MakeCode	(x=0X3B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X44);
	OpHex		(x,	1);
	MakeCode	(0X4E);
	MakeCode	(0X58);
	MakeCode	(0X7E);
	MakeCode	(0X8D);
	MakeCode	(x=0X90);
	OpDecimal	(x,	0);
	MakeCode	(x=0X92);
	OpDecimal	(x,	0);
	MakeCode	(x=0X9B);
	OpHex		(x,	1);
	MakeCode	(x=0X9E);
	OpStkvar	(x,	0);
	MakeCode	(x=0XA3);
	OpStkvar	(x,	1);
	MakeCode	(x=0XA6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XAB);
	OpStkvar	(x,	0);
	MakeCode	(x=0XAE);
	OpStkvar	(x,	0);
	MakeCode	(0XCF);
	MakeCode	(0XDF);
	MakeComm	(0XE4,	"\nreboot_system");
	MakeCode	(x=0XE6);
	OpDecimal	(x,	0);
	MakeCode	(x=0XE8);
	OpDecimal	(x,	0);
	MakeCode	(x=0XF1);
	OpHex		(x,	1);
	MakeCode	(x=0XF4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X114);
	MakeCode	(0X11A);
	MakeCode	(x=0X155);
	OpDecimal	(x,	0);
	MakeCode	(x=0X15B);
	OpDecimal	(x,	1);
	MakeCode	(0X161);
	MakeCode	(x=0X166);
	OpStkvar	(x,	0);
	MakeCode	(x=0X16B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X16E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X173);
	OpStkvar	(x,	0);
	MakeCode	(x=0X176);
	OpStkvar	(x,	0);
	MakeCode	(0X186);
	MakeCode	(0X1A2);
	MakeCode	(x=0X1BA);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1C0);
	OpDecimal	(x,	1);
	MakeCode	(0X1C5);
	MakeName	(0X1C5,	"_main_19");
	MakeCode	(x=0X1DD);
	OpDecimal	(x,	0);
	MakeCode	(0X1E2);
	MakeCode	(0X1E9);
	MakeCode	(x=0X1FA);
	OpDecimal	(x,	0);
	MakeCode	(0X1FF);
	MakeCode	(x=0X212);
	OpHex		(x,	1);
	MakeCode	(x=0X223);
	OpDecimal	(x,	0);
	MakeCode	(x=0X229);
	OpHex		(x,	1);
	MakeCode	(x=0X230);
	OpHex		(x,	1);
	MakeComm	(0X237,	"FDISK /XMBR flag\ncreate whole disk dos partition (automatic parameters)\n(sigle dos/windows partition, initialization)");
	MakeCode	(x=0X23E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X245);
	OpStkvar	(x,	0);
	MakeCode	(x=0X248);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X24F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X252);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X256);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X25C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X261);
	OpStkvar	(x,	1);
	MakeCode	(x=0X264);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X268);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X26C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26F);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X276);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X279,	"FDISK /XMBR");
	MakeCode	(x=0X286);
	OpHex		(x,	1);
	MakeCode	(0X290);
	MakeCode	(0X292);
	MakeCode	(0X2A5);
	MakeCode	(0X2B2);
	MakeCode	(x=0X2EA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2F4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2F8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X300);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X308);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X30E);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(0X314);
	MakeCode	(x=0X320);
	OpHex		(x,	1);
	MakeCode	(x=0X323);
	OpStkvar	(x,	0);
	MakeCode	(x=0X328);
	OpHex		(x,	0);
	MakeCode	(x=0X32B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X32F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X335);
	OpHex		(x,	1);
	MakeCode	(0X342);
	MakeCode	(x=0X395);
	OpStkvar	(x,	0);
	MakeCode	(x=0X39F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3A3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3AB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3B3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3B9);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeName	(0X3B9,	"_main_43");
	MakeCode	(0X3BF);
	MakeCode	(x=0X3CB);
	OpHex		(x,	1);
	MakeCode	(x=0X3CE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D5);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3D9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DF);
	OpHex		(x,	1);
	MakeName	(0X3E2,	"_main_47");
	MakeName	(0X3FD,	"_main_48");
	MakeCode	(x=0X400);
	OpStkvar	(x,	0);
	MakeCode	(x=0X407);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X413);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X41B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X421);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(0X427);
	MakeCode	(x=0X433);
	OpHex		(x,	1);
	MakeCode	(x=0X436);
	OpStkvar	(x,	0);
	MakeCode	(x=0X439);
	OpStkvar	(x,	1);
	MakeCode	(x=0X43D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X443);
	OpHex		(x,	1);
	MakeComm	(0X455,	"FAT12");
	MakeComm	(0X45F,	"FAT16 (<= 32MB)");
	MakeComm	(0X469,	"FAT16 LBA");
	MakeComm	(0X473,	"FAT32 LBA");
	MakeComm	(0X47D,	"FAT32 CHS");
	MakeComm	(0X487,	"FAT16 big (CHS)");
	MakeComm	(0X491,	"exit code = 1");
	MakeCode	(0X495);
	MakeComm	(0X4B5,	"exit code = 0");
	MakeCode	(0X4B5);
	MakeCode	(0X4BA);
	MakeComm	(0X4BC,	"Return to '_astart:', '_exit:' address.");
	MakeComm	(0X4BE,	"write/copy MBR error messages to MBRs\nfrom fdisk template messages");
	MakeCode	(x=0X4BE);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X4BE,	"set_mbr_err_msgs");
	MakeCode	(x=0X4C3);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X4C8);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4CF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4D2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4D5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4DA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4DD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4E0);
	OpStkvar	(x,	1);
	MakeComm	(0X4E3,	"* 512");
	MakeCode	(x=0X4E3);
	OpHex		(x,	1);
	MakeComm	(0X4E6,	"10Fh ; MBR position of the error messages");
	MakeCode	(x=0X4E6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4E9);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4F3);
	OpHex		(x,	1);
	MakeComm	(0X4F6,	"next (disk's) masterboot record");
	MakeCode	(x=0X4F6);
	OpStkvar	(x,	0);
	MakeComm	(0X4F9,	"max. 8 physical disks");
	MakeCode	(x=0X4F9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4FF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X502);
	OpStkvar	(x,	0);
	MakeCode	(x=0X50A);
	OpHex		(x,	1);
	MakeCode	(x=0X50E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X511);
	OpDecimal	(x,	0);
	MakeCode	(x=0X518);
	OpStkvar	(x,	0);
	MakeCode	(x=0X51B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X51E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X523);
	OpStkvar	(x,	0);
	MakeCode	(x=0X526);
	OpStkvar	(x,	0);
	MakeCode	(x=0X529);
	OpStkvar	(x,	1);
	MakeCode	(x=0X52C);
	OpHex		(x,	1);
	MakeCode	(x=0X531);
	OpStkvar	(x,	1);
	MakeCode	(x=0X534);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X540);
	OpHex		(x,	1);
	MakeCode	(x=0X543);
	OpStkvar	(x,	1);
	MakeComm	(0X546,	"0727h ; --> \"Error loading operating system\"\nFDISK will put 27h (2nd error msg offset) in MBR+0BDh\n(al=27h)");
	MakeCode	(x=0X546);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X54A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X54D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X553);
	OpStkvar	(x,	0);
	MakeCode	(x=0X556);
	OpStkvar	(x,	0);
	MakeCode	(x=0X55E);
	OpHex		(x,	1);
	MakeCode	(x=0X562);
	OpStkvar	(x,	0);
	MakeCode	(x=0X565);
	OpDecimal	(x,	0);
	MakeCode	(x=0X56C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X56F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X572);
	OpStkvar	(x,	0);
	MakeCode	(x=0X577);
	OpStkvar	(x,	0);
	MakeCode	(x=0X57A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X57D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X580);
	OpHex		(x,	1);
	MakeCode	(x=0X585);
	OpStkvar	(x,	1);
	MakeCode	(x=0X588);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X594);
	OpHex		(x,	1);
	MakeCode	(x=0X597);
	OpStkvar	(x,	1);
	MakeComm	(0X59A,	"0746h  ; -> \"Missing operating system\"\nFDISK will put 46h (3rd error msg offset) in MBR+0A9h\n(al=46h)");
	MakeCode	(x=0X59A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X59E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5A1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5A7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5AA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5B2);
	OpHex		(x,	1);
	MakeCode	(x=0X5B6);
	OpStkvar	(x,	0);
	MakeComm	(0X5B9,	"<= 116 bytes copied ?");
	MakeCode	(x=0X5B9);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeComm	(0X5BE,	"yes");
	MakeComm	(0X5C0,	"false\nmore than 116 bytes copied !");
	MakeComm	(0X5C5,	"true");
	MakeCode	(0X5C5);
	MakeComm	(0X5CC,	"create/restore whole disk dos/windows partition \n(new MBR, new partition table entry, automatic parameters)");
	MakeCode	(x=0X5CC);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeName	(0X5CC,	"make_whole_disk_dos_p");
	MakeComm	(0X5D2,	"get drive parameters");
	MakeCode	(x=0X5D2);
	OpStkvar	(x,	0);
	MakeComm	(0X5D6,	"1st hard disk");
	MakeCode	(x=0X5D6);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X5DA);
	OpStkvar	(x,	1);
	MakeComm	(0X5DD,	"&outregs");
	MakeComm	(0X5DE,	"inregs_ax");
	MakeComm	(0X5E1,	"&inregs");
	MakeComm	(0X5E2,	"interrupt");
	MakeCode	(x=0X5E7);
	OpHex		(x,	1);
	MakeCode	(x=0X5EA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5F3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5FA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5FD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X600);
	OpStkvar	(x,	1);
	MakeCode	(x=0X603);
	OpHex		(x,	1);
	MakeCode	(x=0X608);
	OpStkvar	(x,	0);
	MakeCode	(x=0X60B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X610);
	OpStkvar	(x,	1);
	MakeCode	(x=0X613);
	OpHex		(x,	1);
	MakeCode	(x=0X616);
	OpHex		(x,	1);
	MakeCode	(x=0X61B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X627);
	OpStkvar	(x,	0);
	MakeCode	(x=0X62A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X63B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X63E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X641);
	OpStkvar	(x,	1);
	MakeCode	(x=0X644);
	OpHex		(x,	1);
	MakeCode	(x=0X648);
	OpStkvar	(x,	0);
	MakeCode	(x=0X64B);
	OpHex		(x,	1);
	MakeComm	(0X650,	"head");
	MakeComm	(0X653,	"sector");
	MakeComm	(0X656,	"cylinder");
	MakeComm	(0X65A,	"FAT16 big CHS");
	MakeCode	(x=0X65E);
	OpStkvar	(x,	1);
	MakeComm	(0X664,	"sector = 1");
	MakeComm	(0X668,	"head = 1");
	MakeComm	(0X66C,	"cylinder = 0");
	MakeComm	(0X672,	"drive number (80h)");
	MakeCode	(x=0X672);
	OpStkvar	(x,	1);
	MakeComm	(0X675,	"80h+80h -> cf+00h");
	MakeCode	(x=0X675);
	OpHex		(x,	1);
	MakeComm	(0X678,	"drive number (0 based, 80h -> 0)");
	MakeComm	(0X679,	"1 sector");
	MakeComm	(0X67B,	"disk read");
	MakeCode	(x=0X682);
	OpDecimal	(x,	1);
	MakeComm	(0X689,	"16 bit FAT size > 0\n(boot sector offset 22)\n\n((Note: Extra checks would be better to specify\ncurrent volume/bs is FAT32 or FAT16 CHS or LBA etc.\nIf it would be found as invalid bs, FAT type would be\nspeficed by using partition size))\n(((bs signature, ext boot sign, bytes per sector field checks)))");
	MakeCode	(x=0X689);
	OpStkvar	(x,	0);
	MakeComm	(0X68D,	"yes, FAT16 partition");
	MakeComm	(0X68F,	"FAT32 CHS");
	MakeCode	(x=0X693);
	OpStkvar	(x,	1);
	MakeCode	(x=0X696);
	OpHex		(x,	1);
	MakeCode	(x=0X6A0);
	OpHex		(x,	1);
	MakeCode	(x=0X6A3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6AA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6AF);
	OpStkvar	(x,	1);
	MakeComm	(0X6B2,	"partition ID, FAT16 big CHS");
	MakeComm	(0X6B8,	"partition ID, FAT16 LBA");
	MakeCode	(x=0X6BC);
	OpStkvar	(x,	1);
	MakeComm	(0X6BF,	"partition ID, FAT32 CHS");
	MakeComm	(0X6C5,	"partition ID, FAT32 LBA");
	MakeCode	(x=0X6C9);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6CC);
	OpStkvar	(x,	1);
	MakeComm	(0X6CF,	"ending head (last head)");
	MakeCode	(x=0X6D2);
	OpStkvar	(x,	1);
	MakeComm	(0X6D5,	"ending sector (last sector and high 2 bits of last cylinder)");
	MakeCode	(x=0X6D8);
	OpStkvar	(x,	1);
	MakeComm	(0X6DB,	"ending cylinder (last cylinder, low 8 bits)");
	MakeCode	(x=0X6DE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6E1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6E4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6E7);
	OpStkvar	(x,	0);
	MakeComm	(0X6EA,	"beginning cylinder (= 0 !)");
	MakeComm	(0X6ED,	"NOTE: Beginning cylinder <= 255 here.. (not <= 1023) !\n(There is not a primary DOS partition starts beyond cylinder 256!?)");
	MakeComm	(0X6F2,	"b_cylinder*heads");
	MakeCode	(x=0X6F5);
	OpStkvar	(x,	1);
	MakeComm	(0X6FA,	"beginning head");
	MakeComm	(0X6FF,	"+ b_head (= 1)");
	MakeComm	(0X704,	"((b_cylinder*heads)+b_head)*spt");
	MakeCode	(x=0X707);
	OpStkvar	(x,	1);
	MakeComm	(0X70C,	"sector (1 based) (= 1)");
	MakeComm	(0X711,	"sector (0 based) (= 0)");
	MakeComm	(0X717,	"(((b_cylinder*heads)+b_head)*spt)+sector");
	MakeComm	(0X719,	"pte, start sector of the partition");
	MakeCode	(x=0X71C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X71F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X722);
	OpStkvar	(x,	1);
	MakeComm	(0X729,	"pte, number of sectors, partition size");
	MakeCode	(x=0X729);
	OpDecimal	(x,	0);
	MakeCode	(x=0X72C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X734);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeName	(0X734,	"check_format");
	MakeCode	(x=0X738);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73D);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeComm	(0X743,	"LOCK LOGICAL VOLUME\nBL = drive number, 1 = A, 2 = B, 3 = C\nBH = lock level (0 to 4)\nDX = drive permmissions\n    (bit 0 = allow writes, bit 1 = disable new file mapping\n     bit 2 = volume locked for formatting)");
	MakeCode	(x=0X743);
	OpStkvar	(x,	0);
	MakeCode	(x=0X748);
	OpStkvar	(x,	0);
	MakeComm	(0X74D,	"logical drive letter ('A' = 41h, 'C' = 43h)");
	MakeCode	(x=0X74D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X750);
	OpHex		(x,	1);
	MakeComm	(0X752,	"C: disk = 03h");
	MakeCode	(x=0X752);
	OpStkvar	(x,	0);
	MakeCode	(x=0X757);
	OpStkvar	(x,	1);
	MakeCode	(x=0X75A);
	OpStkvar	(x,	0);
	MakeComm	(0X75D,	"LOCK PHYSICAL VOLUME\nBH = logical drive number, 0 = default, 1 = A, 3 = C\nBL = lock level (0 to 3)\nDX = drive permmissions\n    (bit 0 = allow writes, bit 1 = disable new file mapping\n     bit 2 = volume locked for formatting)");
	MakeCode	(x=0X75D);
	OpStkvar	(x,	0);
	MakeComm	(0X762,	"allow writes (bit 0  = 1)");
	MakeCode	(x=0X762);
	OpStkvar	(x,	0);
	MakeComm	(0X767,	"(unlock if it is 0)");
	MakeCode	(x=0X767);
	OpStkvar	(x,	0);
	MakeComm	(0X76B,	"lock");
	MakeComm	(0X76D,	"UNLOCK (4Ah -> 6Ah, 4Bh -> 6Bh)");
	MakeCode	(x=0X76D);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X771);
	OpHex		(x,	1);
	MakeComm	(0X774,	"- Multiplex - MS WINDOWS - ENHANCED WINDOWS INSTALLATION CHECK\nReturn: AL = anything else\nAL = Windows major version number >= 3\nAH = Windows minor version number");
	MakeCode	(x=0X774);
	OpHex		(x,	0);
	MakeCode	(x=0X776);
	OpHex		(x,	1);
	MakeComm	(0X778,	"windows not installed (not running)");
	MakeCode	(x=0X77A);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeComm	(0X780,	"1st byte of 16 bit buffer content is always 0");
	MakeCode	(x=0X780);
	OpStkvar	(x,	0);
	MakeCode	(x=0X785);
	OpHex		(x,	1);
	MakeComm	(0X788,	"0 = default, 1 = A, 3 = C ..");
	MakeCode	(x=0X788);
	OpStkvar	(x,	1);
	MakeComm	(0X78B,	"CH = 08h -> block device FAT12/16, CL = 67h = Query Access Flag");
	MakeCode	(x=0X78B);
	OpHex		(x,	1);
	MakeComm	(0X78E,	"16 bit buffer address");
	MakeCode	(x=0X78E);
	OpStkvar	(x,	1);
	MakeComm	(0X793,	"DOS - 2+ - IOCTL - ");
	MakeCode	(x=0X793);
	OpHex		(x,	0);
	MakeComm	(0X798,	"Invalid drive specified ?");
	MakeCode	(x=0X79D);
	OpStkvar	(x,	0);
	MakeComm	(0X7A4,	"01h = drive is locked;\n      access is denied\n(00h = drive is NOT locked)");
	MakeCode	(x=0X7A4);
	OpStkvar	(x,	0);
	MakeComm	(0X7A8,	"[bp+formatted] = 1");
	MakeCode	(x=0X7A8);
	OpChr		(x,	0);
	MakeCode	(x=0X7AA);
	OpHex		(x,	1);
	MakeComm	(0X7AD,	"lock level");
	MakeCode	(x=0X7AD);
	OpStkvar	(x,	1);
	MakeComm	(0X7B2,	"0 = default, 1 = A ...");
	MakeCode	(x=0X7B2);
	OpStkvar	(x,	1);
	MakeComm	(0X7B5,	"unlock or lock");
	MakeCode	(x=0X7B5);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7B8);
	OpStkvar	(x,	1);
	MakeComm	(0X7BB,	"DOS - 2+ - IOCTL - ");
	MakeCode	(x=0X7BB);
	OpHex		(x,	0);
	MakeComm	(0X7BF,	"[bp+formatted] = 0");
	MakeCode	(x=0X7BF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7C4);
	OpStkvar	(x,	1);
	MakeComm	(0X7CA,	"Note: This subroutine is not used\n      in Windows ME (MSDOS 8) FDISK.EXE\n      Erdogan Tan - 26/07/2023");
	MakeCode	(x=0X7CA);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X7CA,	"enum_changed_partitions");
	MakeCode	(x=0X7CE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7D5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7D8);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeComm	(0X7DC,	"last logical drive (>23)");
	MakeComm	(0X7DE,	"ax = [bp+witd_j]*24");
	MakeCode	(x=0X7DE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7E2);
	OpStkvar	(x,	1);
	MakeComm	(0X7E5,	"bx = ax*48");
	MakeCode	(x=0X7E5);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7E8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7EF);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7F3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7F6);
	OpStkvar	(x,	0);
	MakeComm	(0X7FD,	"next physical disk");
	MakeCode	(x=0X7FD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X805);
	OpStkvar	(x,	1);
	MakeCode	(x=0X80A);
	OpStkvar	(x,	0);
	MakeComm	(0X80F,	"disk number (0 to 7)");
	MakeCode	(x=0X80F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X812);
	OpHex		(x,	1);
	MakeComm	(0X815,	"partition number (0 to 3)");
	MakeCode	(x=0X815);
	OpStkvar	(x,	1);
	MakeComm	(0X818,	"each partition data is 48 bytes");
	MakeCode	(x=0X818);
	OpDecimal	(x,	1);
	MakeCode	(x=0X81B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X822);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X826);
	OpStkvar	(x,	1);
	MakeComm	(0X829,	"next buffer byte for next changed partition");
	MakeCode	(x=0X829);
	OpStkvar	(x,	0);
	MakeComm	(0X82C,	"put drive number/letter to buffer position");
	MakeComm	(0X82E,	"next partition");
	MakeCode	(x=0X82E);
	OpStkvar	(x,	0);
	MakeComm	(0X831,	"last partition (4th pte on MBR) on disk ?");
	MakeCode	(x=0X831);
	OpStkvar	(x,	0);
	MakeComm	(0X835,	"no, check for next partition");
	MakeComm	(0X837,	"logical drive 0");
	MakeCode	(x=0X837);
	OpStkvar	(x,	0);
	MakeComm	(0X83C,	"next disk");
	MakeCode	(0X83E);
	MakeCode	(x=0X840);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeName	(0X840,	"do_main_menu");
	MakeCode	(x=0X846);
	OpStkvar	(x,	0);
	MakeCode	(x=0X84B);
	OpStkvar	(x,	0);
	MakeComm	(0X851,	"mov byte [cur_disk],0");
	MakeComm	(0X856,	"mov byte [cur_disk],1");
	MakeCode	(0X856);
	MakeComm	(0X86A,	"0 ?");
	MakeCode	(x=0X86A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X87E,	"0");
	MakeCode	(x=0X882);
	OpDecimal	(x,	0);
	MakeCode	(x=0X884);
	OpDecimal	(x,	0);
	MakeCode	(x=0X88D);
	OpHex		(x,	1);
	MakeCode	(x=0X890);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X897);
	OpStkvar	(x,	0);
	MakeCode	(x=0X89B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8A4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X8AB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X8B2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X8BC);
	OpChr		(x,	1);
	MakeCode	(x=0X8C1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X8CE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X8D5,	"display error 30 \nif this drive is not changed");
	MakeCode	(x=0X8D5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8D9);
	OpChr		(x,	1);
	MakeComm	(0X8DE,	"'Unable to access Drive <I>'");
	MakeCode	(x=0X8DE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X8E3);
	MakeCode	(x=0X8EA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8F1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8F4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8FA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8FE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X90A,	"found");
	MakeComm	(0X90C,	"not found");
	MakeCode	(x=0X90C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X918,	"menu select option 5 is shown\n if there is 2 or more phy disk drives");
	MakeComm	(0X91A,	"'Change current fixed disk drive'");
	MakeCode	(x=0X91A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X921);
	OpStkvar	(x,	0);
	MakeCode	(x=0X927);
	OpStkvar	(x,	0);
	MakeComm	(0X92B,	"minimum value is '1'");
	MakeCode	(x=0X935);
	OpStkvar	(x,	1);
	MakeComm	(0X939,	"default value is 1 ('1')");
	MakeCode	(x=0X93E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X941);
	OpStkvar	(x,	0);
	MakeComm	(0X944,	"disk access error, display error 30 again");
	MakeCode	(x=0X944);
	OpStkvar	(x,	0);
	MakeCode	(x=0X94E);
	OpChr		(x,	1);
	MakeCode	(x=0X952);
	OpDecimal	(x,	0);
	MakeCode	(x=0X954);
	OpDecimal	(x,	0);
	MakeCode	(x=0X95D);
	OpHex		(x,	1);
	MakeCode	(x=0X960);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X96A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X96E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X970);
	OpDecimal	(x,	0);
	MakeCode	(x=0X979);
	OpHex		(x,	1);
	MakeCode	(x=0X97F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X983);
	OpChr		(x,	1);
	MakeComm	(0X986,	"case '5'");
	MakeComm	(0X988,	"case default");
	MakeComm	(0X98A,	"ESC key");
	MakeComm	(0X991,	"1Bh+16h = 31h = '1'");
	MakeCode	(0X991);
	MakeComm	(0X993,	"case '1'");
	MakeComm	(0X997,	"case '2'");
	MakeComm	(0X99B,	"case '3'");
	MakeComm	(0X99F,	"case '4'");
	MakeComm	(0X9A7,	"case '1'");
	MakeCode	(0X9A7);
	MakeComm	(0X9AD,	"case '2'");
	MakeCode	(0X9AD);
	MakeComm	(0X9B3,	"case '3'");
	MakeCode	(0X9B3);
	MakeCode	(x=0X9BD);
	OpStkvar	(x,	0);
	MakeComm	(0X9C5,	"case '4'");
	MakeCode	(0X9C5);
	MakeComm	(0X9CB,	"case '5'");
	MakeCode	(0X9CB);
	MakeCode	(x=0X9CE);
	OpStkvar	(x,	0);
	MakeComm	(0X9D5,	"error (> 0) status");
	MakeCode	(x=0X9D5);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9DA);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeName	(0X9DA,	"delete_partition");
	MakeCode	(x=0X9DE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X9E3);
	OpDecimal	(x,	0);
	MakeCode	(x=0X9E5);
	OpDecimal	(x,	0);
	MakeCode	(x=0X9EE);
	OpHex		(x,	1);
	MakeCode	(x=0X9F1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X9FB);
	OpChr		(x,	1);
	MakeCode	(x=0XA00);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XA09);
	OpStkvar	(x,	0);
	MakeCode	(x=0XA0C);
	OpStkvar	(x,	0);
	MakeCode	(x=0XA15);
	OpHex		(x,	1);
	MakeCode	(x=0XA18);
	OpStkvar	(x,	1);
	MakeComm	(0XA1B,	"bx = ax*48\nSee if any non-zero system id bytes");
	MakeCode	(x=0XA1B);
	OpDecimal	(x,	1);
	MakeCode	(x=0XA1E);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0XA22);
	OpStkvar	(x,	0);
	MakeCode	(x=0XA25);
	OpStkvar	(x,	0);
	MakeCode	(x=0XA28);
	OpStkvar	(x,	0);
	MakeComm	(0XA2E,	"Any entry that isn't zero means");
	MakeCode	(x=0XA2E);
	OpStkvar	(x,	0);
	MakeComm	(0XA34,	"empty partition table");
	MakeComm	(0XA37,	"/* Display enter prompts */\n/* display dos delete menu without input prompt */");
	MakeCode	(x=0XA37);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XA3E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XA45);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XA4C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XA53);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XA5A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XA61);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XA7A);
	OpDecimal	(x,	1);
	MakeCode	(x=0XA7E);
	OpChr		(x,	1);
	MakeCode	(0XA86);
	MakeCode	(0XA8F);
	MakeCode	(0XA9E);
	MakeComm	(0XAA4,	"FAT12 (CHS or LBA)");
	MakeCode	(0XAA4);
	MakeComm	(0XAAE,	"FAT16 (LBA)");
	MakeComm	(0XAB8,	"FAT32 (LBA)");
	MakeComm	(0XAC2,	"FAT32 (CHS)");
	MakeComm	(0XACC,	"FAT16 (CHS)");
	MakeComm	(0XAD6,	"FAT16 big (CHS)");
	MakeCode	(x=0XAE5);
	OpDecimal	(x,	0);
	MakeCode	(x=0XAE7);
	OpDecimal	(x,	0);
	MakeCode	(x=0XAEB);
	OpDecimal	(x,	0);
	MakeCode	(x=0XAF0);
	OpHex		(x,	1);
	MakeCode	(x=0XAF3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0XAF9,	"extended dos, chs");
	MakeCode	(0XAF9);
	MakeComm	(0XB01,	"found");
	MakeComm	(0XB03,	"extended dos, lba");
	MakeComm	(0XB0B,	"not found");
	MakeComm	(0XB0D,	"delete extended dos partition");
	MakeCode	(x=0XB12);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB14);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB18);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB1D);
	OpHex		(x,	1);
	MakeComm	(0XB20,	"'No Extended DOS Partition to delete.'");
	MakeCode	(x=0XB20);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0XB25,	"extended partition CHS");
	MakeCode	(0XB25);
	MakeComm	(0XB2D,	"found");
	MakeComm	(0XB2F,	"extended partition LBA");
	MakeComm	(0XB37,	"not found");
	MakeComm	(0XB3E,	"not found");
	MakeComm	(0XB40,	"delete logical dos drive in extended partition");
	MakeCode	(x=0XB45);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB47);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB4B);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB50);
	OpHex		(x,	1);
	MakeComm	(0XB53,	"'No Logical DOS Drive(s) to delete.'");
	MakeCode	(x=0XB53);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0XB58);
	MakeComm	(0XB5D,	"not found");
	MakeComm	(0XB5F,	"delete non-dos partition");
	MakeComm	(0XB62,	"1 = deleted, 0 = error");
	MakeCode	(x=0XB62);
	OpStkvar	(x,	0);
	MakeComm	(0XB67,	"Clear row 17");
	MakeCode	(x=0XB67);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB69);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB6D);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB72);
	OpHex		(x,	1);
	MakeComm	(0XB75,	"'No Non-DOS Partition to delete.'");
	MakeCode	(x=0XB75);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0XB7A,	"'No partitions to delete.'");
	MakeCode	(x=0XB7A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XB84);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB86);
	OpDecimal	(x,	0);
	MakeCode	(x=0XB8F);
	OpStkvar	(x,	1);
	MakeByte	(0XB94);
	MakeArray	(0XB94,	0X2);
	MakeCode	(x=0XB96);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeName	(0XB96,	"dos_delete");
	MakeComm	(0XB9A,	"reset status to failed (FALSE)");
	MakeCode	(x=0XB9A);
	OpStkvar	(x,	0);
	MakeCode	(x=0XB9F);
	OpStkvar	(x,	0);
	MakeCode	(x=0XBA3);
	OpDecimal	(x,	0);
	MakeCode	(x=0XBA5);
	OpDecimal	(x,	0);
	MakeCode	(x=0XBAE);
	OpHex		(x,	1);
	MakeCode	(x=0XBB1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XBBB);
	OpChr		(x,	1);
	MakeCode	(x=0XBC0);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XBC7);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0XBD8);
	MakeCode	(x=0XBDE);
	OpHex		(x,	1);
	MakeCode	(x=0XBE1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XBE5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XBE9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XBEC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XBF2);
	OpHex		(x,	1);
	MakeCode	(x=0XBF5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XBFE);
	OpStkvar	(x,	0);
	MakeCode	(x=0XC01);
	OpStkvar	(x,	0);
	MakeCode	(x=0XC04);
	OpStkvar	(x,	0);
	MakeCode	(x=0XC07);
	OpStkvar	(x,	0);
	MakeCode	(0XC0C);
	MakeCode	(x=0XC10);
	OpHex		(x,	1);
	MakeCode	(x=0XC13);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC19);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0XC1E,	"NOTE: 0Fh (extended DOS lba partition) \n      would be added here\nErdogan Tan - 26/07/2023");
	MakeCode	(x=0XC20);
	OpStkvar	(x,	0);
	MakeCode	(x=0XC25);
	OpStkvar	(x,	0);
	MakeCode	(x=0XC28);
	OpStkvar	(x,	0);
	MakeCode	(x=0XC32);
	OpHex		(x,	1);
	MakeCode	(x=0XC35);
	OpStkvar	(x,	1);
	MakeCode	(x=0XC3B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XC42);
	OpStkvar	(x,	0);
	MakeCode	(x=0XC45);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XC4C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XC53);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XC5A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XC61);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XC68);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XC6F);
	OpStkvar	(x,	0);
	MakeCode	(x=0XC74);
	OpStkvar	(x,	0);
	MakeCode	(x=0XC83);
	OpStkvar	(x,	0);
	MakeCode	(0XC8C);
	MakeCode	(x=0XC93);
	OpStkvar	(x,	0);
	MakeCode	(x=0XC9C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XCAD);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCB6);
	OpDecimal	(x,	1);
	MakeCode	(x=0XCB9);
	OpStkvar	(x,	0);
	MakeCode	(0XCC3);
	MakeCode	(x=0XCC4);
	OpChr		(x,	1);
	MakeCode	(x=0XCC7);
	OpStkvar	(x,	0);
	MakeCode	(x=0XCCA);
	OpStkvar	(x,	0);
	MakeCode	(x=0XCCF);
	OpStkvar	(x,	0);
	MakeCode	(x=0XCD6);
	OpStkvar	(x,	0);
	MakeCode	(x=0XCD9);
	OpStkvar	(x,	0);
	MakeCode	(x=0XCE3);
	OpHex		(x,	1);
	MakeCode	(x=0XCE6);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCEB);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0XCF2);
	OpDecimal	(x,	1);
	MakeCode	(x=0XCF5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XCFC);
	OpStkvar	(x,	1);
	MakeCode	(x=0XCFF);
	OpStkvar	(x,	0);
	MakeCode	(x=0XD02);
	OpStkvar	(x,	0);
	MakeCode	(x=0XD0B);
	OpHex		(x,	1);
	MakeCode	(x=0XD0E);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD13);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0XD18);
	OpStkvar	(x,	0);
	MakeCode	(x=0XD1D);
	OpDecimal	(x,	1);
	MakeCode	(x=0XD20);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XD27);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XD2E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XD35);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XD3C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XD43);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0XD4D);
	MakeCode	(x=0XD55);
	OpHex		(x,	1);
	MakeCode	(x=0XD58);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD5B);
	OpDecimal	(x,	1);
	MakeCode	(x=0XD5E);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0XD66);
	OpHex		(x,	1);
	MakeCode	(0XD70);
	MakeCode	(x=0XD78);
	OpHex		(x,	1);
	MakeCode	(x=0XD7B);
	OpStkvar	(x,	1);
	MakeCode	(x=0XD7E);
	OpDecimal	(x,	1);
	MakeCode	(x=0XD81);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0XD89);
	OpHex		(x,	1);
	MakeCode	(x=0XD8C);
	OpStkvar	(x,	0);
	MakeCode	(x=0XD90);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XD97);
	OpStkvar	(x,	1);
	MakeCode	(x=0XDA7);
	OpHex		(x,	1);
	MakeCode	(x=0XDAA);
	OpStkvar	(x,	0);
	MakeCode	(x=0XDB3);
	OpStkvar	(x,	1);
	MakeCode	(x=0XDBB);
	OpHex		(x,	1);
	MakeCode	(x=0XDBE);
	OpStkvar	(x,	1);
	MakeCode	(x=0XDC1);
	OpDecimal	(x,	1);
	MakeCode	(x=0XDC4);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0XDCB);
	OpHex		(x,	1);
	MakeCode	(x=0XDD2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XDE8);
	OpHex		(x,	1);
	MakeCode	(x=0XDEB);
	OpStkvar	(x,	0);
	MakeCode	(x=0XDFE);
	OpStkvar	(x,	0);
	MakeCode	(x=0XE08);
	OpHex		(x,	1);
	MakeCode	(x=0XE0E);
	OpDecimal	(x,	0);
	MakeCode	(x=0XE10);
	OpDecimal	(x,	0);
	MakeCode	(x=0XE14);
	OpDecimal	(x,	0);
	MakeCode	(x=0XE19);
	OpHex		(x,	1);
	MakeComm	(0XE1C,	"/* Set the reboot flag */");
	MakeComm	(0XE21,	"TRUE, deleted (successed)");
	MakeCode	(x=0XE21);
	OpStkvar	(x,	0);
	MakeCode	(x=0XE26);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XE2B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XE37);
	OpDecimal	(x,	0);
	MakeCode	(x=0XE39);
	OpDecimal	(x,	0);
	MakeCode	(x=0XE42);
	OpHex		(x,	1);
	MakeCode	(x=0XE45);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XE4A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XE4F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0XE54);
	MakeCode	(x=0XE57);
	OpDecimal	(x,	0);
	MakeCode	(x=0XE59);
	OpDecimal	(x,	0);
	MakeCode	(x=0XE62);
	OpStkvar	(x,	1);
	MakeCode	(x=0XE68);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0XE68,	"ext_delete");
	MakeCode	(x=0XE6C);
	OpStkvar	(x,	0);
	MakeCode	(x=0XE7C);
	OpHex		(x,	1);
	MakeCode	(x=0XEA5);
	OpHex		(x,	1);
	MakeCode	(x=0XEB0);
	OpChr		(x,	0);
	MakeCode	(x=0XEB3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XEB9);
	OpHex		(x,	1);
	MakeCode	(x=0XEBC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0XECD);
	MakeCode	(x=0XEE3);
	OpHex		(x,	1);
	MakeCode	(x=0XEFB);
	OpStkvar	(x,	0);
	MakeCode	(x=0XF04);
	OpHex		(x,	1);
	MakeCode	(x=0XF07);
	OpStkvar	(x,	1);
	MakeCode	(x=0XF0D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XF14);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XF1B);
	OpStkvar	(x,	0);
	MakeCode	(x=0XF25);
	OpHex		(x,	1);
	MakeCode	(x=0XF2B);
	OpDecimal	(x,	0);
	MakeCode	(x=0XF2D);
	OpDecimal	(x,	0);
	MakeCode	(x=0XF31);
	OpDecimal	(x,	0);
	MakeCode	(x=0XF36);
	OpHex		(x,	1);
	MakeCode	(x=0XF39);
	OpStkvar	(x,	0);
	MakeCode	(x=0XF3E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XF4A);
	OpStkvar	(x,	0);
	MakeCode	(x=0XF4D);
	OpStkvar	(x,	0);
	MakeCode	(x=0XF55);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XF5F);
	OpDecimal	(x,	0);
	MakeCode	(x=0XF61);
	OpDecimal	(x,	0);
	MakeCode	(x=0XF6A);
	OpStkvar	(x,	1);
	MakeCode	(x=0XF70);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0XF70,	"volume_delete");
	MakeCode	(x=0XF75);
	OpStkvar	(x,	0);
	MakeCode	(x=0XF7A);
	OpStkvar	(x,	0);
	MakeCode	(x=0XF7E);
	OpStkvar	(x,	0);
	MakeCode	(x=0XF82);
	OpDecimal	(x,	0);
	MakeCode	(x=0XF84);
	OpDecimal	(x,	0);
	MakeCode	(x=0XF8D);
	OpHex		(x,	1);
	MakeCode	(x=0XF90);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XF97);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0XFA1);
	OpStkvar	(x,	0);
	MakeCode	(x=0XFA7);
	OpStkvar	(x,	1);
	MakeCode	(x=0XFAE);
	OpStkvar	(x,	0);
	MakeCode	(x=0XFB8);
	OpStkvar	(x,	0);
	MakeCode	(x=0XFBE);
	OpStkvar	(x,	0);
	MakeCode	(x=0XFC2);
	OpStkvar	(x,	1);
	MakeCode	(x=0XFC5);
	OpStkvar	(x,	0);
	MakeCode	(x=0XFC8);
	OpStkvar	(x,	0);
	MakeCode	(x=0XFCF);
	OpStkvar	(x,	1);
	MakeCode	(x=0XFD4);
	OpStkvar	(x,	0);
	MakeCode	(x=0XFD8);
	OpStkvar	(x,	0);
	MakeCode	(x=0XFDC);
	OpStkvar	(x,	0);
	MakeCode	(x=0XFDF);
	OpStkvar	(x,	0);
	MakeCode	(x=0XFE2);
	OpStkvar	(x,	0);
	MakeCode	(x=0XFE8);
	OpStkvar	(x,	1);
	MakeCode	(x=0XFEB);
	OpStkvar	(x,	0);
	MakeCode	(x=0XFF0);
	OpStkvar	(x,	1);
	MakeCode	(x=0XFF3);
	OpStkvar	(x,	1);
	MakeCode	(x=0XFF8);
	OpStkvar	(x,	0);
	MakeCode	(0XFFD);
	MakeCode	(x=0X1002);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1005);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X100B);
	OpHex		(x,	1);
	MakeCode	(x=0X100E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1015);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1019);
	OpStkvar	(x,	0);
	MakeCode	(0X1022);
	MakeCode	(x=0X1024);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1027);
	OpStkvar	(x,	0);
	MakeCode	(x=0X102A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X102D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1032);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1037);
	OpStkvar	(x,	1);
	MakeCode	(x=0X103A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1041);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1047);
	OpStkvar	(x,	0);
	MakeCode	(x=0X104B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X104E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1054);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1057);
	OpStkvar	(x,	0);
	MakeCode	(x=0X105A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1060);
	OpStkvar	(x,	0);
	MakeCode	(0X1069);
	MakeCode	(x=0X106E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1077);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X107E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1080);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1084);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1089);
	OpHex		(x,	1);
	MakeCode	(x=0X108C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1090);
	OpStkvar	(x,	1);
	MakeCode	(x=0X109C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10A0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10A7);
	OpHex		(x,	1);
	MakeCode	(x=0X10AA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X10AD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X10B0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X10B4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X10B9);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10C1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X10C6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X10CC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X10D0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10D3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X10DC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10E2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10E5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X10EB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X10EE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X10F1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X10F4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1104);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1108);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1111);
	OpStkvar	(x,	0);
	MakeCode	(0X111A);
	MakeCode	(x=0X111E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1125);
	OpHex		(x,	1);
	MakeCode	(x=0X1130);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1137);
	OpHex		(x,	1);
	MakeCode	(x=0X113A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X113E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1140);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1144);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1149);
	OpHex		(x,	1);
	MakeCode	(x=0X114C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1153);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1163);
	OpHex		(x,	1);
	MakeCode	(x=0X1166);
	OpStkvar	(x,	0);
	MakeCode	(x=0X116C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1170);
	OpStkvar	(x,	1);
	MakeCode	(x=0X117A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1187);
	OpHex		(x,	1);
	MakeCode	(x=0X118E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1194);
	OpStkvar	(x,	0);
	MakeCode	(0X119F);
	MakeCode	(x=0X11AA);
	OpHex		(x,	1);
	MakeCode	(x=0X11B7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X11C0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X11C8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X11E3);
	OpHex		(x,	1);
	MakeCode	(x=0X11ED);
	OpStkvar	(x,	0);
	MakeCode	(x=0X11F6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X11FC);
	OpStkvar	(x,	0);
	MakeCode	(0X1205);
	MakeCode	(x=0X120A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X120D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1215);
	OpStkvar	(x,	0);
	MakeCode	(x=0X122E);
	OpHex		(x,	1);
	MakeCode	(x=0X1231);
	OpStkvar	(x,	0);
	MakeCode	(x=0X123F);
	OpHex		(x,	1);
	MakeCode	(x=0X1242);
	OpStkvar	(x,	1);
	MakeCode	(0X124E);
	MakeCode	(x=0X125E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1263);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1267);
	OpStkvar	(x,	0);
	MakeCode	(x=0X126B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1272);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1277);
	OpStkvar	(x,	1);
	MakeCode	(x=0X127D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1289);
	OpHex		(x,	1);
	MakeCode	(x=0X128C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X128F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1298);
	OpHex		(x,	1);
	MakeCode	(x=0X129B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X129E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X12A4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X12A9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X12AF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X12B5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X12BA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X12C0);
	OpStkvar	(x,	0);
	MakeCode	(0X12CA);
	MakeCode	(x=0X12DA);
	OpHex		(x,	1);
	MakeCode	(0X12E0);
	MakeCode	(x=0X12EB);
	OpHex		(x,	1);
	MakeCode	(x=0X12F8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X12FE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1301);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1307);
	OpStkvar	(x,	1);
	MakeCode	(x=0X130C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1312);
	OpStkvar	(x,	0);
	MakeCode	(x=0X131D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1328);
	OpStkvar	(x,	1);
	MakeCode	(x=0X132D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1336);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1340);
	OpHex		(x,	1);
	MakeCode	(x=0X1343);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1348);
	OpStkvar	(x,	0);
	MakeCode	(x=0X134B);
	OpStkvar	(x,	0);
	MakeCode	(0X1353);
	MakeCode	(x=0X1361);
	OpHex		(x,	1);
	MakeCode	(0X1369);
	MakeCode	(x=0X1374);
	OpHex		(x,	1);
	MakeCode	(x=0X138C);
	OpHex		(x,	1);
	MakeCode	(x=0X138F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1396);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X1396,	"non_dos_delete");
	MakeCode	(x=0X139A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X139F);
	OpDecimal	(x,	0);
	MakeCode	(x=0X13A1);
	OpDecimal	(x,	0);
	MakeCode	(x=0X13AA);
	OpHex		(x,	1);
	MakeCode	(x=0X13AD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X13B7);
	OpChr		(x,	1);
	MakeCode	(x=0X13BC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X13C3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X13D4);
	MakeCode	(x=0X13DA);
	OpHex		(x,	1);
	MakeCode	(x=0X13DD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X13E1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X13E5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X13E8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X13EE);
	OpHex		(x,	1);
	MakeCode	(x=0X13F1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X13F8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X13FD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1406);
	OpHex		(x,	1);
	MakeCode	(x=0X1409);
	OpStkvar	(x,	1);
	MakeCode	(x=0X140C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X140F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1416);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1419);
	OpStkvar	(x,	0);
	MakeCode	(x=0X141C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1422);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1433);
	OpStkvar	(x,	1);
	MakeCode	(x=0X143C);
	OpDecimal	(x,	1);
	MakeCode	(0X1446);
	MakeCode	(x=0X1447);
	OpChr		(x,	1);
	MakeCode	(x=0X144A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X144D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1452);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1459);
	OpStkvar	(x,	0);
	MakeCode	(x=0X145C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1466);
	OpHex		(x,	1);
	MakeCode	(x=0X1469);
	OpStkvar	(x,	1);
	MakeCode	(x=0X146E);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X1475);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1478);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X147F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1482);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1485);
	OpStkvar	(x,	0);
	MakeCode	(x=0X148E);
	OpHex		(x,	1);
	MakeCode	(x=0X1491);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1496);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X149B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X14A0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X14A3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X14AD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X14B7);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X14C1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X14C8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X14CF);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X14D6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X14DD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X14E4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X14FA);
	OpHex		(x,	1);
	MakeCode	(x=0X150D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1517);
	OpHex		(x,	1);
	MakeCode	(x=0X151D);
	OpDecimal	(x,	0);
	MakeCode	(x=0X151F);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1523);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1528);
	OpHex		(x,	1);
	MakeCode	(x=0X1530);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1535);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1541);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X1546);
	MakeCode	(x=0X1549);
	OpDecimal	(x,	0);
	MakeCode	(x=0X154B);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1554);
	OpStkvar	(x,	1);
	MakeCode	(x=0X155A);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X155A,	"create_partition");
	MakeCode	(x=0X155E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1560);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1569);
	OpHex		(x,	1);
	MakeCode	(x=0X156C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1573);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X157D);
	OpChr		(x,	1);
	MakeCode	(x=0X1582);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1589);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1590);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1597);
	OpChr		(x,	1);
	MakeCode	(x=0X159C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X15A3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X15BD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X15C0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X15C3);
	OpChr		(x,	1);
	MakeCode	(x=0X15E1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X15E6);
	MakeCode	(x=0X15F0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X15F4);
	OpChr		(x,	1);
	MakeCode	(0X1608);
	MakeCode	(0X160D);
	MakeCode	(0X1655);
	MakeCode	(x=0X1658);
	OpChr		(x,	1);
	MakeCode	(x=0X165D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1664);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1666);
	OpDecimal	(x,	0);
	MakeCode	(x=0X166A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X166F);
	OpHex		(x,	1);
	MakeCode	(x=0X1674);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X167E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1680);
	OpDecimal	(x,	0);
	MakeByte	(0X168B);
	MakeArray	(0X168B,	0X3);
	MakeCode	(x=0X168E);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X168E,	"dos_create_partition");
	MakeCode	(x=0X1695);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1698);
	OpDecimal	(x,	0);
	MakeCode	(x=0X169A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X16A3);
	OpHex		(x,	1);
	MakeCode	(x=0X16A6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X16B0);
	OpChr		(x,	1);
	MakeCode	(x=0X16B5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X16BC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X1702);
	MakeCode	(x=0X1708);
	OpStkvar	(x,	0);
	MakeCode	(x=0X170F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X1715);
	MakeCode	(x=0X171D);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X1724);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1728);
	OpDecimal	(x,	1);
	MakeCode	(x=0X172B);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X1731);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X173E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1743);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1749);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1750);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1753);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1759);
	OpStkvar	(x,	1);
	MakeCode	(x=0X179B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17B5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17B8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17BE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17C3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X17C9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X17DA);
	OpHex		(x,	1);
	MakeCode	(0X17E3);
	MakeCode	(x=0X17F6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1810);
	OpHex		(x,	1);
	MakeCode	(0X181C);
	MakeCode	(0X1825);
	MakeCode	(x=0X182F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X183B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1845);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1847);
	OpDecimal	(x,	0);
	MakeCode	(x=0X184B);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1850);
	OpHex		(x,	1);
	MakeCode	(x=0X1855);
	OpHex		(x,	0);
	MakeCode	(x=0X1858);
	OpStkvar	(x,	1);
	MakeCode	(x=0X185D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1860);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1867);
	OpHex		(x,	1);
	MakeCode	(x=0X1879);
	OpDecimal	(x,	0);
	MakeCode	(x=0X187B);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1884);
	OpHex		(x,	1);
	MakeCode	(x=0X1887);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X189F);
	MakeCode	(x=0X18A5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X18AF);
	OpDecimal	(x,	0);
	MakeCode	(x=0X18B1);
	OpDecimal	(x,	0);
	MakeCode	(x=0X18B5);
	OpDecimal	(x,	0);
	MakeCode	(x=0X18BA);
	OpHex		(x,	1);
	MakeCode	(x=0X18C1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X18C6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X18C9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X18D0);
	OpHex		(x,	1);
	MakeCode	(x=0X18D8);
	OpDecimal	(x,	0);
	MakeCode	(x=0X18DA);
	OpDecimal	(x,	0);
	MakeCode	(x=0X18DE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X18E3);
	OpHex		(x,	1);
	MakeCode	(x=0X18E6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X18ED);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X18F2);
	MakeCode	(0X18F8);
	MakeCode	(x=0X18FB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeByte	(0X1908);
	MakeArray	(0X1908,	0X2);
	MakeCode	(x=0X190A);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X190A,	"input_dos_create");
	MakeCode	(x=0X1911);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1914);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1920);
	OpHex		(x,	1);
	MakeCode	(x=0X1949);
	OpHex		(x,	1);
	MakeCode	(x=0X1957);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X195D);
	OpHex		(x,	1);
	MakeCode	(x=0X1960);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X196D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1974);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1980);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1983);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1989);
	OpStkvar	(x,	1);
	MakeCode	(x=0X198D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1990);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X1994);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(0X199D);
	MakeCode	(x=0X19A3);
	OpHex		(x,	1);
	MakeCode	(x=0X19A6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X19AA);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X19B1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X19B9);
	OpHex		(x,	1);
	MakeCode	(x=0X19BC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X19C3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X19C7);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X19CB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X19D2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X19D8);
	OpHex		(x,	1);
	MakeCode	(x=0X19DB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X19E2);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X19E6);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X19EA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X19ED);
	OpStkvar	(x,	0);
	MakeCode	(x=0X19F5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X19FE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1A01);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1A0D);
	OpHex		(x,	1);
	MakeCode	(x=0X1A1F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1A26);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1A2A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1A2E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1A32);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1A35);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1A3B);
	OpHex		(x,	1);
	MakeCode	(x=0X1A3E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1A41);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1A44);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1A47);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1A55);
	OpHex		(x,	1);
	MakeCode	(x=0X1A5F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1A65);
	OpStkvar	(x,	0);
	MakeCode	(0X1A6E);
	MakeCode	(x=0X1A75);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1A7C);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X1A82);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1A87);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1A8C);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X1A90);
	OpStkvar	(x,	0);
	MakeCode	(0X1A95);
	MakeCode	(x=0X1A9D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1AA1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1AA7);
	OpHex		(x,	1);
	MakeCode	(x=0X1AAC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1AB3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1AB6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1AB9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1ABF);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1AC5);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(0X1ACB);
	MakeCode	(x=0X1AD0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1AD6);
	OpHex		(x,	1);
	MakeCode	(x=0X1AD9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1ADC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1AE6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1AE9);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1AEE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1AF3);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1AF5);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1AF9);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1AFE);
	OpHex		(x,	1);
	MakeCode	(x=0X1B05);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1B09);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1B0F);
	OpHex		(x,	1);
	MakeCode	(x=0X1B12);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1B14);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1B18);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1B1D);
	OpHex		(x,	1);
	MakeCode	(x=0X1B20);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1B36);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1B38);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1B3C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1B41);
	OpHex		(x,	1);
	MakeCode	(x=0X1B44);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1B56);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1B64);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeName	(0X1B64,	"ext_create_partition");
	MakeCode	(x=0X1B6B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1B6E);
	OpStkvar	(x,	0);
	MakeComm	(0X1B71,	"/* clear off screen */");
	MakeCode	(x=0X1B71);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1B73);
	OpDecimal	(x,	0);
	MakeComm	(0X1B76,	"clear from row 0, column 0\n       to row 24, column 79");
	MakeComm	(0X1B7A,	"/* Put up heading */");
	MakeCode	(x=0X1B7A);
	OpHex		(x,	1);
	MakeCode	(x=0X1B7D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1B87);
	OpChr		(x,	1);
	MakeCode	(x=0X1B8C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X1B93,	"/* print ESC prompt */");
	MakeCode	(x=0X1B93);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X1B9A,	"/* Display partition table,\n   it will return if no partitions there */");
	MakeComm	(0X1B9D,	"/* Go see if primary already exists \n   and ext doesn't */");
	MakeComm	(0X1BA4,	"FAT12 (CHS or LBA)");
	MakeComm	(0X1BAE,	"FAT16 (LBA)");
	MakeComm	(0X1BB8,	"FAT32 (LBA)");
	MakeComm	(0X1BC2,	"FAT32 (CHS)");
	MakeComm	(0X1BCC,	"FAT16 (CHS)");
	MakeComm	(0X1BD4,	"found");
	MakeComm	(0X1BD6,	"FAT16 big (CHS)");
	MakeComm	(0X1BDE,	"\n/* don't have a primary partition yet, \n   can't create an ext */");
	MakeComm	(0X1BE3,	"extended dos partition, chs");
	MakeCode	(0X1BE3);
	MakeComm	(0X1BEB,	"found");
	MakeComm	(0X1BED,	"extended dos partition, lba");
	MakeComm	(0X1BF5,	"not found\n/* We can go create one now */");
	MakeComm	(0X1BF7,	"error, Already have ext partition");
	MakeComm	(0X1BFA,	"/* Get the free space */");
	MakeCode	(0X1BFA);
	MakeComm	(0X1C00,	"temp = find_part_free_space(c(EXTENDED));");
	MakeCode	(x=0X1C00);
	OpStkvar	(x,	0);
	MakeComm	(0X1C05,	"0FFh -> 0 ; error");
	MakeCode	(x=0X1C07);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X1C11,	"al = 1Bh (ESC), ah = 0");
	MakeComm	(0X1C12,	"dx = 0");
	MakeComm	(0X1C13,	"(not needed)");
	MakeCode	(x=0X1C13);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1C16);
	OpStkvar	(x,	0);
	MakeComm	(0X1C1C,	"/* Is there any ?*/");
	MakeCode	(x=0X1C1C);
	OpStkvar	(x,	1);
	MakeComm	(0X1C20,	"bx = ax*24\nInstead of checking only the percentage\nwhich could be off because of rounding errors,\nwe also check the mbytes available */");
	MakeCode	(x=0X1C20);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1C23);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1C2D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1C34);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X1C38);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X1C41,	";/* Display disk space */\nsprintf(insert,\"%5.0lu\",total_mbytes[cur_disk]);\n        display(menu_15);");
	MakeCode	(0X1C41);
	MakeCode	(x=0X1C47);
	OpHex		(x,	1);
	MakeCode	(x=0X1C4A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1C4E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1C52);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1C55);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1C5B);
	OpHex		(x,	1);
	MakeCode	(x=0X1C5E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X1C64,	"/* Setup and print max partition size */\nsprintf(insert,\"%5.0lu%3.0d%%\",\n        free_space[temp].mbytes_unused,\n        free_space[temp].percent_unused);\ndisplay(menu_16);");
	MakeCode	(x=0X1C65);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1C69);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1C6C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1C70);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1C74);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1C78);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1C7B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1C83);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1C86);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X1C8C,	"/* Force repeats on the input until \n   something valid (Non-Zero return) */\n/* Display MBytes unless MBytes == 0,\n   then display percent */");
	MakeCode	(x=0X1C8D);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X1C91);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X1C97);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X1C9B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1C9E);
	OpStkvar	(x,	0);
	MakeComm	(0X1CA3,	"PercentFlag = (FLAG)TRUE;");
	MakeCode	(x=0X1CAA);
	OpStkvar	(x,	1);
	MakeComm	(0X1CAE,	"bx = ax*24");
	MakeCode	(x=0X1CAE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1CB1);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X1CB5);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X1CB9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1CBC);
	OpStkvar	(x,	0);
	MakeComm	(0X1CBF,	"PercentFlag = (FLAG)FALSE;");
	MakeComm	(0X1CC4,	"valid_input = (FLAG)FALSE;");
	MakeCode	(x=0X1CC9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X1CD2);
	MakeComm	(0X1CD7,	"/* Display prompt */\nif (!PercentFlag)\n    sprintf(insert,\"%5.0lu\",default_entry);\nelse\n    sprintf(insert,\"%3.0ld%%\",default_entry);\ndisplay(menu_42);");
	MakeCode	(x=0X1CD9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1CDC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1CDF);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1CE4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1CE7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1CEA);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1CED);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1CF3);
	OpHex		(x,	1);
	MakeCode	(x=0X1CF6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X1CFC,	"\ninput = get_large_num_input(default_entry,\n        free_space[temp].mbytes_unused,\n        free_space[temp].percent_unused,\n        menu_42,u(0),error_13);");
	MakeCode	(x=0X1CFD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1D02);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1D05);
	OpStkvar	(x,	1);
	MakeComm	(0X1D09,	"bx = ax*24");
	MakeCode	(x=0X1D09);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1D0C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1D10);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1D14);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1D18);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1D1B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1D21);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1D24);
	OpStkvar	(x,	0);
	MakeComm	(0X1D27,	"\n/* Update default in case of error,\n   so it gets displayed and used\n   if user presses CR only */");
	MakeCode	(x=0X1D27);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1D2A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1D2D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1D30);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1D32);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1D36);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1D3B);
	OpHex		(x,	1);
	MakeComm	(0X1D3E,	"while (!valid_input)");
	MakeComm	(0X1D45,	"ESC_FLAG");
	MakeCode	(x=0X1D45);
	OpStkvar	(x,	0);
	MakeComm	(0X1D49,	"if (input != ((unsigned)(ESC_FLAG)))");
	MakeCode	(x=0X1D4B);
	OpStkvar	(x,	0);
	MakeComm	(0X1D4F,	"/* Change input to cylinders */");
	MakeComm	(0X1D54,	"if (PercentFlag)");
	MakeCode	(0X1D54);
	MakeComm	(0X1D59,	"else");
	MakeCode	(x=0X1D5B);
	OpStkvar	(x,	1);
	MakeComm	(0X1D5F,	"if (input == free_space[temp].percent_unused)");
	MakeCode	(x=0X1D5F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1D62);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X1D68);
	OpStkvar	(x,	1);
	MakeComm	(0X1D6B,	"else");
	MakeCode	(x=0X1D6D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1D72);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X1D76,	"input = free_space[temp].space;");
	MakeCode	(x=0X1D76);
	OpStkvar	(x,	0);
	MakeComm	(0X1D7B,	"input = percent_to_cylinders(input,total_disk[cur_disk]);");
	MakeCode	(0X1D7B);
	MakeComm	(0X1D83,	"total cylinders");
	MakeCode	(x=0X1D83);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X1D87,	"percent in (word, <= 100)");
	MakeCode	(x=0X1D87);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1D8D);
	OpHex		(x,	1);
	MakeCode	(x=0X1D92);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1D96);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1D99);
	OpStkvar	(x,	1);
	MakeComm	(0X1D9C,	"\nif (input == free_space[temp].mbytes_unused)\n    input = free_space[temp].space;");
	MakeCode	(x=0X1D9C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1D9F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1DA5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1DAB);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X1DB1,	"input = (unsigned)mbytes_to_cylinders(input,cur_disk);");
	MakeCode	(0X1DB1);
	MakeComm	(0X1DB5,	"hw");
	MakeComm	(0X1DB6,	"lw");
	MakeCode	(x=0X1DB6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1DBC);
	OpHex		(x,	1);
	MakeCode	(x=0X1DBF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1DC2);
	OpStkvar	(x,	0);
	MakeComm	(0X1DC7,	"/* Initialize PecentFlag back to FALSE */");
	MakeCode	(x=0X1DCC);
	OpStkvar	(x,	1);
	MakeComm	(0X1DCF,	"\n/* Display error message if input value = 0 */");
	MakeCode	(x=0X1DCF);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1DD4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X1DD9,	"/* Go create the partition */");
	MakeCode	(x=0X1DD9);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1DDB);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1DDF);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1DE4);
	OpHex		(x,	1);
	MakeComm	(0X1DE7,	"mp_type (byte) - EXTENDED -");
	MakeComm	(0X1DE9,	"mp_bootable (byte) - not bootable -");
	MakeCode	(x=0X1DEB);
	OpStkvar	(x,	1);
	MakeComm	(0X1DEE,	"mp_free_ptr (byte)");
	MakeComm	(0X1DEF,	"mp_size (word)");
	MakeCode	(x=0X1DEF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1DF5);
	OpHex		(x,	1);
	MakeComm	(0X1DF8,	"/* clear off the old prompt */");
	MakeCode	(x=0X1DF8);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1DFA);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1DFE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1E03);
	OpHex		(x,	1);
	MakeComm	(0X1E06,	"/* Display the updated partition information */");
	MakeComm	(0X1E09,	"'<R>Press <H>Esc<R> to return to FDISK Options'");
	MakeCode	(x=0X1E09);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X1E10,	"'<CH>Extended DOS Partition created'");
	MakeCode	(x=0X1E10);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X1E1A,	"reboot_flag = (FLAG)TRUE;\n/* Go allow him to create disk volumes */");
	MakeComm	(0X1E25,	"/* No room */");
	MakeCode	(x=0X1E25);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X1E28,	"display(error_10);");
	MakeComm	(0X1E2A,	"/* Already have ext partition,\n   tell user and bow out */");
	MakeCode	(x=0X1E2A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X1E2D,	"display(error_9);");
	MakeComm	(0X1E2F,	"/* don't have a primary partition yet,\n   can't create an ext */");
	MakeCode	(0X1E2F);
	MakeCode	(x=0X1E32);
	OpChr		(x,	1);
	MakeComm	(0X1E37,	"display(error_19);");
	MakeCode	(x=0X1E37);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X1E3E,	"wait_for_ESC();");
	MakeByte	(0X1E44);
	MakeArray	(0X1E44,	0X2);
	MakeCode	(x=0X1E46);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X1E46,	"volume_create");
	MakeCode	(x=0X1E4D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1E50);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1E5C);
	OpHex		(x,	1);
	MakeCode	(x=0X1E70);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1E76);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1E7F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1E86);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1E89);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1E8F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1ED1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1EE1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1EE4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1EEA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1EEF);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1EF5);
	OpStkvar	(x,	0);
	MakeCode	(0X1F05);
	MakeCode	(x=0X1F08);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1F0F);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1F11);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1F15);
	OpDecimal	(x,	0);
	MakeCode	(x=0X1F1A);
	OpHex		(x,	1);
	MakeCode	(x=0X1F1D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1F27);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1F2C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1F35);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1F3C);
	OpHex		(x,	1);
	MakeCode	(x=0X1F3F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1F45);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X1F49);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X1F4F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1F56);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1F5F);
	OpHex		(x,	1);
	MakeCode	(x=0X1F62);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1F65);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1F6F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1F76);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X1F7A);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(0X1F83);
	MakeCode	(x=0X1F88);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1F8B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1F91);
	OpHex		(x,	1);
	MakeCode	(x=0X1F94);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1F9B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1F9E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1FA5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1FA9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1FAD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1FB0);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1FB8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X1FBB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X1FCC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1FCF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1FD2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1FDE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X1FED);
	OpStkvar	(x,	0);
	MakeCode	(x=0X1FF0);
	OpStkvar	(x,	0);
	MakeCode	(0X2006);
	MakeCode	(x=0X200D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2010);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2018);
	OpStkvar	(x,	0);
	MakeCode	(x=0X201B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2027);
	OpHex		(x,	1);
	MakeCode	(x=0X2039);
	OpStkvar	(x,	0);
	MakeCode	(x=0X203C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X204B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X204E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2054);
	OpHex		(x,	1);
	MakeCode	(x=0X2057);
	OpStkvar	(x,	0);
	MakeCode	(x=0X205A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X205D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2060);
	OpStkvar	(x,	0);
	MakeCode	(x=0X206E);
	OpHex		(x,	1);
	MakeCode	(x=0X2078);
	OpStkvar	(x,	0);
	MakeCode	(x=0X207E);
	OpStkvar	(x,	0);
	MakeCode	(0X2087);
	MakeCode	(x=0X208E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2093);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2098);
	OpStkvar	(x,	1);
	MakeCode	(x=0X209D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X20A8);
	OpStkvar	(x,	0);
	MakeCode	(0X20AD);
	MakeCode	(x=0X20B1);
	OpHex		(x,	1);
	MakeCode	(x=0X20B4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X20C4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X20CA);
	OpHex		(x,	1);
	MakeCode	(x=0X20CF);
	OpStkvar	(x,	1);
	MakeCode	(x=0X20D6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X20D9);
	OpStkvar	(x,	1);
	MakeCode	(0X20EE);
	MakeCode	(x=0X20F3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X20F9);
	OpHex		(x,	1);
	MakeCode	(x=0X20FC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X20FF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2109);
	OpStkvar	(x,	1);
	MakeCode	(x=0X210C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X211E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2120);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2124);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2129);
	OpHex		(x,	1);
	MakeCode	(x=0X212C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2130);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2136);
	OpHex		(x,	1);
	MakeCode	(x=0X2139);
	OpDecimal	(x,	0);
	MakeCode	(x=0X213B);
	OpDecimal	(x,	0);
	MakeCode	(x=0X213F);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2144);
	OpHex		(x,	1);
	MakeCode	(x=0X214F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2156);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2160);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2162);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2166);
	OpDecimal	(x,	0);
	MakeCode	(x=0X216B);
	OpHex		(x,	1);
	MakeCode	(x=0X216E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X217B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2180);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2188);
	OpDecimal	(x,	0);
	MakeCode	(x=0X218A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X218E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2193);
	OpHex		(x,	1);
	MakeCode	(x=0X2196);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X219F);
	OpDecimal	(x,	0);
	MakeCode	(x=0X21A1);
	OpDecimal	(x,	0);
	MakeCode	(x=0X21AA);
	OpHex		(x,	1);
	MakeByte	(0X21B0);
	MakeArray	(0X21B0,	0X2);
	MakeCode	(x=0X21B2);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X21B2,	"change_active_partition");
	MakeCode	(x=0X21B6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X21C5);
	OpHex		(x,	1);
	MakeCode	(0X21EF);
	MakeCode	(x=0X21F9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2202);
	OpHex		(x,	1);
	MakeCode	(x=0X2205);
	OpStkvar	(x,	1);
	MakeCode	(x=0X222E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2231);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2239);
	OpStkvar	(x,	0);
	MakeCode	(x=0X223C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X223F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2248);
	OpHex		(x,	1);
	MakeCode	(x=0X224B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2258);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2269);
	OpStkvar	(x,	0);
	MakeCode	(x=0X226C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X226F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2275);
	OpStkvar	(x,	0);
	MakeCode	(x=0X227B);
	OpStkvar	(x,	0);
	MakeCode	(0X2282);
	MakeCode	(x=0X22A2);
	OpHex		(x,	1);
	MakeCode	(x=0X22A5);
	OpStkvar	(x,	1);
	MakeCode	(x=0X22C2);
	OpHex		(x,	1);
	MakeCode	(x=0X22C7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X22CA);
	OpStkvar	(x,	0);
	MakeCode	(0X22D2);
	MakeCode	(x=0X22D6);
	OpHex		(x,	1);
	MakeCode	(x=0X22D9);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2327);
	OpHex		(x,	1);
	MakeCode	(x=0X232A);
	OpStkvar	(x,	0);
	MakeCode	(0X233C);
	MakeCode	(0X2343);
	MakeCode	(x=0X2349);
	OpStkvar	(x,	0);
	MakeCode	(0X2355);
	MakeCode	(x=0X235D);
	OpHex		(x,	1);
	MakeCode	(x=0X236B);
	OpHex		(x,	1);
	MakeCode	(x=0X2391);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2394);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2399);
	OpStkvar	(x,	0);
	MakeCode	(x=0X239C);
	OpStkvar	(x,	0);
	MakeCode	(0X23A2);
	MakeCode	(0X23AD);
	MakeCode	(x=0X23B7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X23BB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X23C2);
	OpHex		(x,	1);
	MakeCode	(x=0X23C5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23CA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23D8);
	OpHex		(x,	1);
	MakeCode	(x=0X23DB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23E4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23EE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23FB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X23FF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2408);
	OpHex		(x,	1);
	MakeCode	(x=0X240B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2422);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2425);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2439);
	OpHex		(x,	1);
	MakeCode	(x=0X2446);
	OpStkvar	(x,	0);
	MakeCode	(x=0X244D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2458);
	OpStkvar	(x,	0);
	MakeCode	(x=0X245B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X245E);
	OpStkvar	(x,	0);
	MakeCode	(0X2467);
	MakeCode	(x=0X246B);
	OpHex		(x,	1);
	MakeCode	(x=0X246E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2484);
	OpStkvar	(x,	1);
	MakeCode	(x=0X248A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24A3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24A7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24B0);
	OpHex		(x,	1);
	MakeCode	(x=0X24B3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X24CA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24CD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X24D7);
	OpHex		(x,	1);
	MakeCode	(x=0X24DA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X250D);
	OpHex		(x,	1);
	MakeCode	(x=0X2510);
	OpStkvar	(x,	1);
	MakeCode	(x=0X251C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2520);
	OpStkvar	(x,	0);
	MakeCode	(0X2529);
	MakeCode	(0X252B);
	MakeCode	(0X2530);
	MakeCode	(x=0X2537);
	OpStkvar	(x,	0);
	MakeCode	(x=0X254E);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X254E,	"display_partition_information");
	MakeCode	(x=0X255D);
	OpHex		(x,	1);
	MakeCode	(x=0X2585);
	OpHex		(x,	1);
	MakeCode	(x=0X2593);
	OpHex		(x,	1);
	MakeCode	(x=0X25D5);
	OpHex		(x,	1);
	MakeCode	(0X25ED);
	MakeCode	(0X25F2);
	MakeArray	(0X2602,	0X2);
	MakeCode	(0X2604);
	MakeCode	(x=0X260F);
	OpHex		(x,	1);
	MakeCode	(x=0X262A);
	OpHex		(x,	1);
	MakeComm	(0X263E,	"NETWORK - INSTALLATION CHECK");
	MakeCode	(0X263E);
	MakeName	(0X263E,	"check_valid_environment");
	MakeCode	(x=0X2644);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2647);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X264A);
	OpHex		(x,	0);
	MakeCode	(x=0X264F);
	OpHex		(x,	1);
	MakeComm	(0X2657,	"not installed");
	MakeComm	(0X2659,	"server bit");
	MakeCode	(x=0X2659);
	OpHex		(x,	1);
	MakeComm	(0X265E,	"\nfdisk not allowed\nwhen computer/windows is running on a network");
	MakeComm	(0X2660,	"UTILITY CLASS");
	MakeComm	(0X2667,	"msg input");
	MakeComm	(0X2668,	"msg subst");
	MakeComm	(0X266A,	"msg parms");
	MakeComm	(0X266C,	"STDERR");
	MakeComm	(0X266E,	"error msg number (error_40)\n'Cannot FDISK with network loaded'");
	MakeCode	(x=0X2674);
	OpDecimal	(x,	1);
	MakeCode	(0X267A);
	MakeCode	(x=0X267E);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X267E,	"init_partition_tables");
	MakeCode	(x=0X2683);
	OpChr		(x,	1);
	MakeCode	(x=0X2688);
	OpStkvar	(x,	0);
	MakeCode	(x=0X268F);
	OpStkvar	(x,	0);
	MakeCode	(0X2696);
	MakeCode	(x=0X269A);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X269E);
	OpHex		(x,	1);
	MakeCode	(x=0X26A1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X26A5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26A8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26AB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26B4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X26BA);
	OpHex		(x,	1);
	MakeCode	(x=0X26C3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26C8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26CC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26D2);
	OpHex		(x,	1);
	MakeCode	(x=0X26D5);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26D9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26DF);
	OpHex		(x,	1);
	MakeCode	(x=0X26E2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26E7);
	OpHex		(x,	1);
	MakeCode	(x=0X26EA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X26F0);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X26F5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26F8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X26FE);
	OpHex		(x,	1);
	MakeCode	(x=0X2705);
	OpStkvar	(x,	1);
	MakeCode	(x=0X270D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2712);
	OpHex		(x,	1);
	MakeCode	(x=0X271D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2720);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X272A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2731);
	OpHex		(x,	1);
	MakeCode	(x=0X2736);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2739);
	OpHex		(x,	1);
	MakeCode	(x=0X273D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2741);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2747);
	OpStkvar	(x,	0);
	MakeCode	(x=0X274C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2753);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2756);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2760);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2770);
	OpHex		(x,	1);
	MakeCode	(x=0X2777);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2785);
	OpStkvar	(x,	1);
	MakeCode	(x=0X278E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2794);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27A4);
	OpHex		(x,	1);
	MakeCode	(x=0X27BF);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27C7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27CD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27D2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27D9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27DE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X27E6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X27F3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X27F8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2803);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2809);
	OpStkvar	(x,	0);
	MakeCode	(x=0X280E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2814);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2819);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X281F);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X282B);
	OpHex		(x,	1);
	MakeCode	(x=0X2830);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2845);
	OpHex		(x,	1);
	MakeCode	(x=0X284C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2852);
	OpStkvar	(x,	0);
	MakeCode	(x=0X285A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2861);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2866);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X286E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2879);
	OpStkvar	(x,	0);
	MakeCode	(0X2880);
	MakeCode	(x=0X2884);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2888);
	OpHex		(x,	1);
	MakeCode	(x=0X288B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X288F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2892);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2895);
	OpStkvar	(x,	1);
	MakeCode	(x=0X289E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X28A4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X28A9);
	OpStkvar	(x,	1);
	MakeCode	(x=0X28AD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X28B3);
	OpHex		(x,	1);
	MakeCode	(x=0X28B6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X28BA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X28C0);
	OpHex		(x,	1);
	MakeCode	(x=0X28C3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X28C8);
	OpHex		(x,	1);
	MakeCode	(x=0X28CB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X28CE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X28D1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X28D6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X28D9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X28DF);
	OpHex		(x,	1);
	MakeCode	(x=0X28E6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X28EE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X28F3);
	OpHex		(x,	1);
	MakeCode	(x=0X28FE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2901);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X290B,	"disk number (0 to 7)");
	MakeCode	(x=0X290B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2912);
	OpHex		(x,	1);
	MakeComm	(0X2915,	"sector");
	MakeComm	(0X2917,	"head");
	MakeComm	(0X2919,	"hard disk number (0 to 7)");
	MakeCode	(x=0X2919);
	OpStkvar	(x,	1);
	MakeComm	(0X291D,	"cylinder = 0");
	MakeComm	(0X291F,	"read masterboot record/sector");
	MakeCode	(x=0X2922);
	OpHex		(x,	1);
	MakeComm	(0X2927,	"failed");
	MakeComm	(0X2929,	"extended dos, chs");
	MakeComm	(0X2931,	"found");
	MakeComm	(0X2933,	"extended dos, lba");
	MakeComm	(0X293B,	"extended dos partition (05h & 0Fh) not found");
	MakeComm	(0X293D,	"disk number\nwhich contains extended dos partition");
	MakeCode	(x=0X293D);
	OpStkvar	(x,	1);
	MakeComm	(0X2945,	"disk number (0 to 7)");
	MakeCode	(x=0X2945);
	OpStkvar	(x,	1);
	MakeCode	(0X2950);
	MakeCode	(0X2954);
	MakeName	(0X2954,	"check_dos_partitions");
	MakeCode	(x=0X2957);
	OpStkvar	(x,	1);
	MakeCode	(0X295C);
	MakeName	(0X295C,	"dos_partition_id");
	MakeCode	(0X2961);
	MakeName	(0X2961,	"non_dos_partition_id");
	MakeCode	(0X2965);
	MakeCode	(x=0X296D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2972);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeName	(0X2972,	"dos_partitions");
	MakeWord	(x=0X2974);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2976);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2978);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X297A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X297C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X297E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2980);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2982);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2984);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2986);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2988);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X298A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X298C);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X298E);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X2990);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X2992);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X2992,	"init_primary_partition_tables");
	MakeCode	(x=0X299B);
	OpHex		(x,	1);
	MakeCode	(x=0X29A5);
	OpHex		(x,	1);
	MakeCode	(x=0X29AA);
	OpHex		(x,	1);
	MakeCode	(x=0X29B5);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X29B9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X29BD);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X29C1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X29C5);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X29CB);
	OpHex		(x,	1);
	MakeCode	(x=0X29CD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X29D1);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X29D7);
	OpHex		(x,	1);
	MakeCode	(x=0X29DB);
	OpHex		(x,	1);
	MakeCode	(x=0X29E0);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X29E4);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X29E8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X29EC);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X29F0);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X29F4);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X29FA);
	OpHex		(x,	1);
	MakeCode	(x=0X29FC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2A00);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2A04);
	OpHex		(x,	1);
	MakeCode	(x=0X2A08);
	OpHex		(x,	1);
	MakeCode	(x=0X2A0D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2A11);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2A1D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2A21);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2A25);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2A35);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2A39);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2A3D);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2A46);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2A49);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2A53);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2A56);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2A59);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2A5D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2A61);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2A6C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2A70);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2A74);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2A80);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2A84);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2A88);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2A8E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2A95);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2A9A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2A9E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2AA2);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2AA8);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2AAB);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2AB3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2AB6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2AB9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2ABD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2AC1);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2ACC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2AD0);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2AD8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2ADF);
	OpHex		(x,	1);
	MakeCode	(x=0X2AE2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2AE6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2AF0);
	OpHex		(x,	1);
	MakeCode	(x=0X2AF3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2AF7);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2AFC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2B03);
	OpHex		(x,	1);
	MakeCode	(x=0X2B06);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2B0A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X2B1A);
	MakeCode	(x=0X2B4B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2B61);
	OpHex		(x,	1);
	MakeCode	(0X2B75);
	MakeCode	(x=0X2B7A);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2B7C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X2B85);
	OpHex		(x,	1);
	MakeCode	(x=0X2B8D);
	OpHex		(x,	1);
	MakeCode	(x=0X2B93);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2B96);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2B9D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2BA4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2BAB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2BC2);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2BC6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2BCC);
	OpHex		(x,	1);
	MakeCode	(x=0X2BD2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2BD5);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2BEA);
	OpHex		(x,	1);
	MakeCode	(x=0X2BF0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2BF3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2BF7);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2C00);
	OpHex		(x,	1);
	MakeCode	(x=0X2C03);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2C0B);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2C0F);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2C13);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2C17);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2C26);
	OpHex		(x,	1);
	MakeCode	(x=0X2C29);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X2C31);
	MakeName	(0X2C32,	"get_partition_letter");
	MakeCode	(x=0X2C37);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2C3A);
	OpHex		(x,	1);
	MakeCode	(x=0X2C3D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2C40);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2C43);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2C4A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2C51);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2C58);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2C5F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2C66);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2C6D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2C72);
	OpHex		(x,	1);
	MakeCode	(x=0X2C75);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2C78);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2C7B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X2C87);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X2C95);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2C9B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2CA0);
	OpHex		(x,	1);
	MakeCode	(x=0X2CA3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2CA6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2CA9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X2CBA);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X2CBA,	"init_extended_partition_tables");
	MakeCode	(x=0X2CC0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2CC5);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2CC7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2CCA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2CCD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2CD2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2CD6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2CDA);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2CDE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2CE4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2CE8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2CEC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2CF0);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2CF8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2CFC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2D00);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2D04);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2D08);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2D0C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2D10);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2D14);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2D18);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2D1C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2D22);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2D25);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2D2A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2D2E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2D32);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2D35);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2D3E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2D42);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2D47);
	OpHex		(x,	1);
	MakeCode	(x=0X2D4C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2D4F);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2D53);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2D56);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2D59);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2D5D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2D60);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2D64);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2D6C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2D70);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2D76);
	OpHex		(x,	1);
	MakeCode	(x=0X2D80);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2D84);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2D87);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2D8B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2D92);
	OpHex		(x,	1);
	MakeCode	(x=0X2D95);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2D9C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2D9F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2DA8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2DAB);
	OpHex		(x,	1);
	MakeCode	(x=0X2DAE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2DB1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2DB8);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2DBC);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2DC0);
	OpHex		(x,	1);
	MakeCode	(x=0X2DC4);
	OpHex		(x,	1);
	MakeCode	(x=0X2DCB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2DCE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2DD6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2DDB);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2DE8);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2DF9);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2E09);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2E19);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2E29);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2E2C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2E33);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2E37);
	OpStkvar	(x,	1);
	MakeComm	(0X2E3A,	"pointer (dword) to dividend dx:ax");
	MakeCode	(x=0X2E3E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2E41);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2E44);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2E48);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2E50);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2E55);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2E58);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2E5F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2E62);
	OpStkvar	(x,	0);
	MakeCode	(0X2E6B);
	MakeCode	(x=0X2E70);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X2E70,	"set_drive_letter");
	MakeCode	(x=0X2E75);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2E7A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2E7F);
	OpHex		(x,	1);
	MakeCode	(x=0X2E82);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2E85);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2E88);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2E8F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2E96);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2E9D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2EA4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2EAB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2EB2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2EB7);
	OpHex		(x,	1);
	MakeCode	(x=0X2EBA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2EBD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2EC0);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X2EC7);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X2ECE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2ED8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2EDC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2EDF);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2EE6);
	OpHex		(x,	1);
	MakeCode	(x=0X2EE9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2EEC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2EF2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2EF7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2EFC);
	OpHex		(x,	1);
	MakeCode	(x=0X2EFF);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2F02);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2F05);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2F0C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2F13);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2F1A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2F21);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2F28);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2F2F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2F34);
	OpHex		(x,	1);
	MakeCode	(x=0X2F37);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2F3A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2F3D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X2F44);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X2F4B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2F55);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2F59);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2F5C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2F63);
	OpHex		(x,	1);
	MakeCode	(x=0X2F66);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2F69);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2F72);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X2F72,	"get_volume");
	MakeCode	(x=0X2F77);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2F7C);
	OpHex		(x,	1);
	MakeCode	(x=0X2F7F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2F82);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2F85);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2F95);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2F9A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2F9F);
	OpHex		(x,	1);
	MakeCode	(x=0X2FA2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2FA5);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2FA8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2FAB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2FB0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2FB3);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2FB9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2FBE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2FC3);
	OpHex		(x,	1);
	MakeCode	(x=0X2FC6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2FC9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2FCC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2FCF);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X2FD4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2FD7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X2FDD);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2FE1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2FE6);
	OpHex		(x,	1);
	MakeCode	(x=0X2FE9);
	OpStkvar	(x,	1);
	MakeCode	(x=0X2FEC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X2FEF);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X2FF7);
	OpHex		(x,	1);
	MakeCode	(x=0X2FFA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3001);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3004);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3007);
	OpStkvar	(x,	1);
	MakeCode	(x=0X300C);
	OpHex		(x,	1);
	MakeCode	(x=0X300F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3012);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3015);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3019);
	OpStkvar	(x,	0);
	MakeCode	(x=0X301C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3024);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3029);
	OpStkvar	(x,	1);
	MakeCode	(x=0X302E);
	OpHex		(x,	1);
	MakeCode	(x=0X3031);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3034);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3037);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X3044);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3049);
	OpStkvar	(x,	1);
	MakeCode	(x=0X304C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X3056);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3059);
	OpStkvar	(x,	0);
	MakeCode	(x=0X305C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3062);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3065);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3068);
	OpStkvar	(x,	1);
	MakeCode	(x=0X306D);
	OpHex		(x,	1);
	MakeCode	(x=0X3070);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3073);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3076);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X307D);
	OpHex		(x,	1);
	MakeCode	(x=0X3083);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3088);
	OpHex		(x,	1);
	MakeCode	(x=0X308B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X308E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3091);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3098);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpDecimal	(x,	1);
	MakeCode	(x=0X30A0);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X30A7);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X30AE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X30B3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X30B8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X30BB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X30C0);
	OpHex		(x,	1);
	MakeCode	(x=0X30C3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X30C6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X30C9);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X30CF);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X30D2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X30D7);
	OpHex		(x,	1);
	MakeCode	(x=0X30DA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X30DD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X30E2);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X30EB);
	OpHex		(x,	1);
	MakeCode	(x=0X30EE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X30F1);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X30F9);
	OpHex		(x,	1);
	MakeCode	(x=0X3100);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X3100,	"init_logical_drives");
	MakeCode	(x=0X3106);
	OpHex		(x,	1);
	MakeCode	(x=0X310D);
	OpHex		(x,	1);
	MakeCode	(x=0X3117);
	OpStkvar	(x,	0);
	MakeCode	(x=0X311F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3125);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3127);
	OpStkvar	(x,	1);
	MakeCode	(x=0X312C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X312F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X3134);
	OpStkvar	(x,	1);
	MakeCode	(x=0X313A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X313C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3141);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3144);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X3149);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X314E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3152);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3159);
	OpHex		(x,	1);
	MakeCode	(x=0X315C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3162);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3164);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3169);
	OpDecimal	(x,	1);
	MakeCode	(x=0X316C);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X317C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3181);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3187);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3189);
	OpStkvar	(x,	1);
	MakeCode	(x=0X318E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3191);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3194);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3199);
	OpStkvar	(x,	0);
	MakeCode	(x=0X319C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X31A2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X31A7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X31AD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X31AF);
	OpStkvar	(x,	1);
	MakeCode	(x=0X31B4);
	OpDecimal	(x,	1);
	MakeCode	(x=0X31B7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X31BA);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X31BF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X31C2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X31C8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X31CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X31D2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X31D4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X31D9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X31DC);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X31E4);
	OpHex		(x,	1);
	MakeCode	(x=0X31E7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X31EE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X31F1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X31F6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X31FC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X31FE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3203);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3206);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X320A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X320D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3215);
	OpStkvar	(x,	1);
	MakeCode	(x=0X321A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3220);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3222);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3227);
	OpDecimal	(x,	1);
	MakeCode	(x=0X322A);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X3237);
	OpStkvar	(x,	0);
	MakeCode	(x=0X323C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X323F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X3249);
	OpStkvar	(x,	0);
	MakeCode	(x=0X324C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X324F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3255);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3258);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X325B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3263);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3268);
	OpDecimal	(x,	1);
	MakeCode	(x=0X326B);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X3272);
	OpHex		(x,	1);
	MakeCode	(x=0X3277);
	OpStkvar	(x,	1);
	MakeCode	(x=0X327D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X327F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3284);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3287);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X328E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X3296);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X329D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X32A4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X32A9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X32AE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X32B1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X32B7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X32B9);
	OpStkvar	(x,	1);
	MakeCode	(x=0X32BE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X32C1);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X32C7);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X32CA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X32D0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X32D2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X32D7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X32DC);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X32E5);
	OpHex		(x,	1);
	MakeCode	(x=0X32E8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X32EB);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X32F3);
	OpHex		(x,	1);
	MakeCode	(x=0X32FC);
	OpHex		(x,	1);
	MakeCode	(x=0X3302);
	OpStkvar	(x,	1);
	MakeCode	(x=0X330A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X330F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3312);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X3316);
	OpHex		(x,	1);
	MakeCode	(x=0X331B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X331E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3326);
	OpHex		(x,	1);
	MakeCode	(x=0X3329);
	OpHex		(x,	1);
	MakeCode	(x=0X3334);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X333C);
	OpHex		(x,	1);
	MakeCode	(x=0X3343);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3347);
	OpStkvar	(x,	1);
	MakeCode	(x=0X334F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3354);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3357);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X335E);
	OpHex		(x,	1);
	MakeCode	(x=0X3361);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3364);
	OpStkvar	(x,	0);
	MakeCode	(x=0X336D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3370);
	OpHex		(x,	1);
	MakeCode	(x=0X3373);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3378);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X337F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3386);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X338A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3390);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3392);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3397);
	OpDecimal	(x,	1);
	MakeCode	(x=0X339A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X339E);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X33A2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X33A6);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X33AC);
	OpHex		(x,	1);
	MakeCode	(x=0X33AE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X33B2);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X33B8);
	OpHex		(x,	1);
	MakeCode	(x=0X33BC);
	OpHex		(x,	1);
	MakeCode	(x=0X33C1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X33C5);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X33C9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X33CD);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X33D1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X33D5);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X33DB);
	OpHex		(x,	1);
	MakeCode	(x=0X33DD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X33E1);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X33E5);
	OpHex		(x,	1);
	MakeCode	(x=0X33E9);
	OpHex		(x,	1);
	MakeCode	(x=0X33EE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X33F2);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X33FE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3402);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3406);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X340C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X340F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3416);
	OpStkvar	(x,	1);
	MakeCode	(x=0X341B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X341F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3423);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X3429);
	OpStkvar	(x,	0);
	MakeCode	(x=0X342C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3436);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3439);
	OpStkvar	(x,	1);
	MakeCode	(x=0X343C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3440);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3444);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X344F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3453);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3457);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X3463);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3467);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X346B);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X3471);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3474);
	OpStkvar	(x,	0);
	MakeCode	(x=0X347B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3480);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3484);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3488);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X348E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3491);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3499);
	OpStkvar	(x,	1);
	MakeCode	(x=0X349C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X349F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X34A3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X34A7);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X34B2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X34B6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X34BA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X34C0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X34C4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X34C8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X34CF);
	OpHex		(x,	1);
	MakeCode	(x=0X34D2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X34D5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X34D9);
	OpStkvar	(x,	1);
	MakeCode	(x=0X34DD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X34E1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X34E8);
	OpHex		(x,	1);
	MakeCode	(x=0X34EB);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X34EF);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X34F7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X34FB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3500);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3505);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3508);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X350C);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X3519);
	OpHex		(x,	1);
	MakeCode	(x=0X351C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3520);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3528);
	OpStkvar	(x,	0);
	MakeCode	(x=0X352B);
	OpHex		(x,	1);
	MakeCode	(x=0X3530);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3533);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X3537);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X353D);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X3541);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X354A);
	OpHex		(x,	1);
	MakeCode	(x=0X354D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3551);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3558);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X355F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3566);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X356D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3574);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X357E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3588);
	OpStkvar	(x,	1);
	MakeCode	(x=0X358E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3590);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3595);
	OpDecimal	(x,	1);
	MakeCode	(x=0X3598);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X359F);
	MakeCode	(x=0X35A4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeName	(0X35A4,	"internal_program_error");
	MakeCode	(x=0X35B6);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X35B6,	"bs_validation");
	MakeCode	(x=0X35BA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X35BD);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X35C4);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(0X35CF);
	MakeCode	(x=0X35D1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X35D4);
	OpHex		(x,	1);
	MakeCode	(x=0X35D9);
	OpHex		(x,	1);
	MakeCode	(x=0X35DE);
	OpHex		(x,	1);
	MakeCode	(x=0X35E4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X35EF);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X35F7);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X3602);
	OpHex		(x,	1);
	MakeCode	(x=0X3607);
	OpHex		(x,	1);
	MakeCode	(x=0X360D);
	OpHex		(x,	1);
	MakeComm	(0X3610,	"DOS - 2+ - GET INTERRUPT VECTOR\nAL = interrupt number\nReturn: ES:BX = value of interrupt vector");
	MakeCode	(x=0X3610);
	OpHex		(x,	0);
	MakeCode	(x=0X3618);
	OpHex		(x,	1);
	MakeCode	(x=0X361D);
	MakeCode	(x=0X3622);
	OpHex		(x,	1);
	MakeComm	(0X3625,	"OS HOOK - KEYBOARD INTERCEPT (AT model 3x9,XT2,XT286,CONV,PS)\nAL = scan code, CF set\nReturn: CF set - AL = scan code\nCF clear - scan code should be ignored");
	MakeCode	(x=0X3625);
	OpHex		(x,	0);
	MakeCode	(x=0X362C);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X3633);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3636);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3639);
	OpStkvar	(x,	0);
	MakeCode	(x=0X363C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3648);
	OpStkvar	(x,	0);
	MakeCode	(x=0X364B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X364E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3657);
	OpChr		(x,	1);
	MakeCode	(x=0X365D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3663);
	OpChr		(x,	1);
	MakeCode	(x=0X366D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3673);
	OpChr		(x,	1);
	MakeCode	(x=0X367E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3681);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3686);
	OpStkvar	(x,	1);
	MakeCode	(x=0X368C);
	OpChr		(x,	1);
	MakeCode	(x=0X3692);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3696);
	OpStkvar	(x,	1);
	MakeCode	(x=0X369A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X36A3);
	OpHex		(x,	1);
	MakeCode	(x=0X36AA);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeName	(0X36AA,	"display");
	MakeComm	(0X36AF,	"0");
	MakeCode	(x=0X36B1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X36B4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X36B7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X36BA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X36BF);
	OpStkvar	(x,	1);
	MakeCode	(x=0X36C3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X36C7);
	OpStkvar	(x,	1);
	MakeComm	(0X36CB,	"message number");
	MakeCode	(x=0X36D1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X36D4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X36DC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X36DF);
	OpStkvar	(x,	0);
	MakeComm	(0X36E2,	"message index (next message for same menu)");
	MakeCode	(x=0X36E2);
	OpStkvar	(x,	1);
	MakeComm	(0X36E7,	"start message number (1st msg of menu)");
	MakeCode	(x=0X36E7);
	OpStkvar	(x,	1);
	MakeComm	(0X36EA,	"end of messages (for menu)");
	MakeCode	(x=0X36F2);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeName	(0X36F2,	"_display");
	MakeCode	(x=0X36F7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X36FA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X36FD);
	OpStkvar	(x,	0);
	MakeComm	(0X3700,	"message address (ptr)");
	MakeCode	(x=0X3700);
	OpStkvar	(x,	1);
	MakeComm	(0X3703,	"/* check for a request to display a null string */\nif (*s == c('\\0'))");
	MakeComm	(0X3709,	"/* Message string error */");
	MakeCode	(x=0X3709);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X370E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X3718,	"if (status_flag == TRUE )\nattribute = video_attribute;");
	MakeCode	(x=0X3718);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X371F);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X3722);
	OpStkvar	(x,	0);
	MakeComm	(0X3727,	"else\nattribute = c(0x00);");
	MakeCode	(x=0X3727);
	OpStkvar	(x,	0);
	MakeComm	(0X372B,	"/* Go until end of string */\nwhile (*s != c('\\0'))");
	MakeCode	(x=0X372B);
	OpStkvar	(x,	1);
	MakeComm	(0X3737,	"/* Check for any imbedded control strings */\n        \nswitch (*s)\n/* Check for control characters */");
	MakeCode	(0X3737);
	MakeComm	(0X373B,	"Check for char 06h (ACK)");
	MakeComm	(0X3740,	"case '\x06':");
	MakeComm	(0X3743,	"'<' (3Ch)");
	MakeCode	(x=0X3743);
	OpHex		(x,	1);
	MakeComm	(0X3746,	"case '<':");
	MakeCode	(x=0X3748);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X374F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3755);
	OpStkvar	(x,	0);
	MakeComm	(0X3759,	"/* Handle anything else */\ndefault:");
	MakeCode	(x=0X3759);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X375E,	"/* See if attribute set to anything */");
	MakeCode	(x=0X3760);
	OpStkvar	(x,	0);
	MakeComm	(0X3766,	"GRAY_ON_BLACK");
	MakeCode	(x=0X3766);
	OpStkvar	(x,	0);
	MakeComm	(0X376A,	"VIOWRTCHARSTRATT(s++,u(1),row,col++,attribute_ptr,u(0))");
	MakeCode	(x=0X376A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3771);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3774);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3777);
	OpStkvar	(x,	0);
	MakeComm	(0X377A,	"message (string)");
	MakeCode	(x=0X377A);
	OpStkvar	(x,	0);
	MakeComm	(0X377D,	"count");
	MakeCode	(x=0X377F);
	OpStkvar	(x,	1);
	MakeComm	(0X3782,	"row");
	MakeComm	(0X3784,	"column");
	MakeCode	(x=0X3785);
	OpStkvar	(x,	0);
	MakeComm	(0X3788,	"attribute");
	MakeCode	(x=0X3788);
	OpStkvar	(x,	0);
	MakeComm	(0X3794,	"case '<':\ns++;");
	MakeCode	(x=0X3794);
	OpStkvar	(x,	0);
	MakeComm	(0X3797,	"while ( (*s != c('>')) && (*s != c('\\0')) )");
	MakeCode	(x=0X3797);
	OpStkvar	(x,	1);
	MakeCode	(x=0X379A);
	OpChr		(x,	1);
	MakeCode	(0X37A3);
	MakeComm	(0X37A7,	"&&");
	MakeCode	(x=0X37AC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X37AF);
	OpStkvar	(x,	0);
	MakeComm	(0X37B2,	"switch (*s++)");
	MakeCode	(x=0X37B2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X37B9);
	OpChr		(x,	1);
	MakeComm	(0X37BE,	"case 'Y'");
	MakeCode	(0X37C1);
	MakeComm	(0X37C7,	"case '\\0'");
	MakeCode	(x=0X37CA);
	OpChr		(x,	1);
	MakeComm	(0X37CC,	"case 'B'");
	MakeComm	(0X37D2,	"case 'C'");
	MakeCode	(0X37D5);
	MakeComm	(0X37D7,	"case 'H'");
	MakeComm	(0X37DB,	"case 'I'");
	MakeComm	(0X37E1,	"case 'N'");
	MakeCode	(0X37E4);
	MakeComm	(0X37E6,	"case 'O'");
	MakeComm	(0X37EA,	"case 'R'");
	MakeComm	(0X37F0,	"case 'S'");
	MakeCode	(0X37F3);
	MakeComm	(0X37F5,	"case 'W'");
	MakeComm	(0X37F7,	"/* Message string error\n - no valid control char found */");
	MakeCode	(x=0X37F7);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X37FC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X3805,	"if (status_flag == FALSE)");
	MakeCode	(x=0X3805);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X380C,	"\nattribute = (attribute & 0x80) | HIWHITE_ON_BLACK;");
	MakeCode	(x=0X380C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X380F);
	OpHex		(x,	1);
	MakeComm	(0X3811,	"HIWHITE_ON_BLACK");
	MakeCode	(x=0X3811);
	OpHex		(x,	1);
	MakeCode	(x=0X3813);
	OpStkvar	(x,	0);
	MakeComm	(0X3819,	"(status_flag == TRUE)\nattribute = (attribute & 0x80) | video_attribute;");
	MakeCode	(x=0X3819);
	OpStkvar	(x,	1);
	MakeCode	(x=0X381C);
	OpHex		(x,	1);
	MakeCode	(x=0X381E);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X3824,	"case 'R'\nif (status_flag == FALSE)");
	MakeCode	(x=0X3824);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X382B);
	OpStkvar	(x,	1);
	MakeComm	(0X382E,	"attribute = (attribute & 0x80) | GRAY_ON_BLACK");
	MakeCode	(x=0X382E);
	OpHex		(x,	1);
	MakeCode	(x=0X3830);
	OpHex		(x,	1);
	MakeComm	(0X3834,	"case 'B'");
	MakeCode	(x=0X3834);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeComm	(0X383B,	"case 'O'");
	MakeCode	(x=0X383B);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeComm	(0X3842,	"DOSBEEP(u(900),u(400))");
	MakeCode	(x=0X3842);
	OpDecimal	(x,	0);
	MakeCode	(x=0X3845);
	OpDecimal	(x,	0);
	MakeComm	(0X3850,	"case 'I'\nif (status_flag == TRUE)");
	MakeCode	(x=0X3850);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X3857,	"attribute = video_attribute;");
	MakeCode	(x=0X3857);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X385A);
	OpStkvar	(x,	0);
	MakeComm	(0X385F,	"(status_flag == FALSE)\n/* display next element in the array */\nif ((mono_flag == TRUE) &&");
	MakeCode	(x=0X385F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X3866,	"(attribute == c(0x00)))");
	MakeCode	(x=0X3866);
	OpStkvar	(x,	0);
	MakeComm	(0X386C,	"attribute = c(GRAY_ON_BLACK);");
	MakeCode	(x=0X386C);
	OpStkvar	(x,	0);
	MakeComm	(0X3870,	"if ((mono_flag == FALSE) &&");
	MakeCode	(x=0X3870);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X3877,	"(attribute == c(0x00)))");
	MakeCode	(x=0X3877);
	OpStkvar	(x,	0);
	MakeComm	(0X387D,	"attribute = c(GRAY_ON_BLACK);");
	MakeCode	(x=0X387D);
	OpStkvar	(x,	0);
	MakeComm	(0X3881,	"VIOWRTCHARSTRATT(pinsert+insert_count++,u(1),row,col++,\n attribute_ptr,u(0));");
	MakeCode	(x=0X3881);
	OpStkvar	(x,	1);
	MakeComm	(0X3884,	"pinsert+insert_count++");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_1(void) {
        auto x;
#define id x

	MakeCode	(x=0X3888);
	OpStkvar	(x,	0);
	MakeCode	(x=0X388B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3892);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3895);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X3898);
	OpStkvar	(x,	1);
	MakeComm	(0X389F,	"/* display YES character in next location */");
	MakeCode	(x=0X389F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X38A6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X38AC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X38B0);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X38B7,	"if ((mono_flag == TRUE) && (attribute == c(0x00)))");
	MakeCode	(x=0X38B7);
	OpStkvar	(x,	0);
	MakeComm	(0X38BD,	"attribute = c(GRAY_ON_BLACK);");
	MakeCode	(x=0X38BD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X38C1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X38C8);
	OpStkvar	(x,	0);
	MakeComm	(0X38CC,	"VIOWRTCHARSTRATT(&Yes,u(1),row,col++,attribute_ptr,u(0));");
	MakeCode	(x=0X38CC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X38D1,	"/* display NO character in next location */\nTRUE");
	MakeCode	(x=0X38D1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X38D8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X38DE);
	OpStkvar	(x,	0);
	MakeComm	(0X38E2,	"if ((mono_flag == FALSE) && (attribute == c(0x00)))");
	MakeCode	(x=0X38E2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X38E9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X38EF);
	OpStkvar	(x,	0);
	MakeComm	(0X38F3,	"current (previous) column position");
	MakeCode	(x=0X38F3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X38FA);
	OpStkvar	(x,	0);
	MakeComm	(0X38FE,	"VIOWRTCHARSTRATT(&No,u(1),row,col++,attribute_ptr,u(0));");
	MakeCode	(x=0X38FE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X3901,	"Length of string");
	MakeComm	(0X3903,	"Starting row position for output");
	MakeCode	(x=0X3903);
	OpStkvar	(x,	1);
	MakeComm	(0X3908,	"Starting column position for output");
	MakeCode	(x=0X3908);
	OpStkvar	(x,	0);
	MakeComm	(0X390B,	"segment");
	MakeCode	(x=0X390B);
	OpStkvar	(x,	0);
	MakeComm	(0X390E,	"offset");
	MakeCode	(x=0X390E);
	OpStkvar	(x,	0);
	MakeComm	(0X3911,	"Video handle (!is not used!)");
	MakeComm	(0X391B,	"case 'S'");
	MakeCode	(x=0X391B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3920);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3923);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3928);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X392E,	"/* Clear from current position to end of line */\nclear_screen(row,col,row,u(79));");
	MakeCode	(x=0X392E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X3930);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3935);
	OpStkvar	(x,	1);
	MakeCode	(x=0X393F);
	OpHex		(x,	1);
	MakeComm	(0X3945,	"/* Message string error - \nstring ended in the middle of control string */");
	MakeCode	(x=0X3945);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeComm	(0X394D,	"/* Get the pointer past the '>' */");
	MakeCode	(x=0X394D);
	OpStkvar	(x,	0);
	MakeComm	(0X3950,	"END /* control characters */");
	MakeComm	(0X3953,	"s++;");
	MakeCode	(x=0X3953);
	OpStkvar	(x,	0);
	MakeComm	(0X3956,	"if ( !isdigit(*s) )");
	MakeCode	(x=0X3956);
	OpStkvar	(x,	1);
	MakeComm	(0X395F,	"numeric char ?");
	MakeCode	(x=0X395F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeComm	(0X3964,	"no");
	MakeCode	(x=0X3966);
	OpDecimal	(x,	1);
	MakeComm	(0X3968,	"row = row+((unsigned)(((*s++ - '0')*10)));");
	MakeCode	(x=0X3968);
	OpStkvar	(x,	1);
	MakeCode	(x=0X396B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3971);
	OpStkvar	(x,	1);
	MakeComm	(0X3974,	"(10*ASC('0'))");
	MakeCode	(x=0X3974);
	OpDecimal	(x,	1);
	MakeComm	(0X3979,	"if ( !isdigit(*s) )");
	MakeCode	(x=0X3979);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3982);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeComm	(0X3989,	"/* Message string error */");
	MakeCode	(x=0X3989);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeComm	(0X3990,	"row = row+((unsigned)(*s++ - '0'));");
	MakeCode	(x=0X3990);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3993);
	OpStkvar	(x,	0);
	MakeCode	(x=0X399A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X399D);
	OpChr		(x,	1);
	MakeComm	(0X39A0,	"/* determine the col to put the message on */");
	MakeComm	(0X39A2,	"if ( !isdigit(*s) )");
	MakeCode	(x=0X39A2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X39AB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeComm	(0X39B2,	"col = ((uns/igned)(*s++ - '0'));");
	MakeCode	(x=0X39B2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X39B5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X39BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X39BF);
	OpChr		(x,	1);
	MakeComm	(0X39C4,	"if ( !isdigit(*s) )");
	MakeCode	(x=0X39C4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X39CD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeComm	(0X39D4,	"/* Message string error */");
	MakeCode	(x=0X39D4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X39D9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X39E3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X39E6);
	OpStkvar	(x,	0);
	MakeComm	(0X39ED,	"col = ((unsigned)((col* 10) + (*s++ - '0')));");
	MakeCode	(x=0X39ED);
	OpStkvar	(x,	1);
	MakeCode	(x=0X39F0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X39F5);
	OpChr		(x,	1);
	MakeComm	(0X39FA,	"if (*s++ != c('\x06'))");
	MakeCode	(x=0X39FA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X39FD);
	OpStkvar	(x,	0);
	MakeComm	(0X3A09,	"/* Message string error */");
	MakeCode	(x=0X3A09);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(0X3A10);
	MakeCode	(x=0X3A14);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeName	(0X3A14,	"number_in_msg");
	MakeCode	(x=0X3A18);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3A1B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3A1E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3A21);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3A28);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3A2B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3A2E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3A32);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3A35);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3A39);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3A3C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3A40);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3A43);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3A47);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3A4A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3A50);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X3A57);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3A67);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3A6E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3A75);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3A7C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3A82);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X3A92);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3AA9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3AB1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3AB9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3AC1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3AC9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3AD1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3AD9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3AE1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3AE8);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X3AF8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3B0F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3B17);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3B1F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3B27);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3B2F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3B37);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3B3F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3B47);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3B4F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3B57);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3B5F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3B66);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X3B66,	"get_num_input");
	MakeCode	(x=0X3B6A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3B6E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3B71);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3B74);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3B77);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3B7A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3B7D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3B80);
	OpStkvar	(x,	0);
	MakeComm	(0X3B86,	"-1");
	MakeCode	(x=0X3B86);
	OpStkvar	(x,	0);
	MakeComm	(0X3B8C,	"minimum - 1");
	MakeCode	(x=0X3B8C);
	OpStkvar	(x,	0);
	OpChr		(x,	1);
	MakeCode	(x=0X3B90);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3B94);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3B9A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3B9E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3BA1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3BAB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3BB0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3BB3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3BB6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3BBB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3BBE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3BC1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3BC4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3BCE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3BD3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3BDD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3BE0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3BED);
	OpStkvar	(x,	0);
	MakeComm	(0X3BF1,	"uppercase");
	MakeCode	(x=0X3BF5);
	OpStkvar	(x,	0);
	MakeComm	(0X3BF9,	"CR ?");
	MakeComm	(0X3BFC,	"yes");
	MakeComm	(0X3BFE,	"0Dh+0Eh = 1Bh ; ESC ?");
	MakeComm	(0X3C01,	"yes");
	MakeCode	(x=0X3C03);
	OpStkvar	(x,	1);
	MakeComm	(0X3C09,	"decimal digit (numeric char)");
	MakeCode	(x=0X3C09);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X3C13);
	OpStkvar	(x,	1);
	MakeComm	(0X3C1C,	"gni_not_digit");
	MakeComm	(0X3C1E,	"minimum input - 1");
	MakeCode	(x=0X3C1E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3C26);
	OpDecimal	(x,	0);
	MakeCode	(x=0X3C28);
	OpDecimal	(x,	0);
	MakeCode	(x=0X3C2C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X3C31);
	OpHex		(x,	1);
	MakeCode	(x=0X3C37);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3C3E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3C44);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3C4A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3C4F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3C54);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3C58);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3C5E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X3C65);
	OpStkvar	(x,	1);
	MakeComm	(0X3C6E,	"not valid digit (> specified maximum)");
	MakeComm	(0X3C70,	"(not needed)");
	MakeComm	(0X3C72,	"underminimum is -1 (0FFh) for minimum = '0'\n             is '0' for minimum = '1'");
	MakeCode	(x=0X3C72);
	OpStkvar	(x,	0);
	MakeComm	(0X3C75,	"if underminimum = '0', minimum = '1' and input = '0'\nif underminimum = 0FFh (-1), bl <> underminimum");
	MakeCode	(x=0X3C77);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3C7C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3C82);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3C88);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X3C8F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3C92);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X3C97);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3C9D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X3CA2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X3CA7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3CAC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3CAF);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3CB4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X3CB9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3CBF);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X3CC4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X3CC9);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3CCE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3CD1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3CDB);
	OpStkvar	(x,	1);
	MakeComm	(0X3CE1,	"numeric char (decimal digit)");
	MakeCode	(x=0X3CE1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X3CE8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3CEB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X3CF0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3CF6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X3CFB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X3D00);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3D05);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3D08);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3D0D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X3D12);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D18);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X3D1D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X3D22);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3D27);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3D2A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3D31);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D35);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D38);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D3D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D40);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D43);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D46);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D50);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D54);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3D57);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D5D);
	OpStkvar	(x,	1);
	MakeArray	(0X3D62,	0X2);
	MakeCode	(x=0X3D64);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X3D64,	"get_yn_input");
	MakeCode	(x=0X3D68);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3D6B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D6E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D71);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3D74);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D77);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D7A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D7E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D84);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D88);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D8B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D95);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3D98);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D9B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3D9E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DA3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DA6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DA9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DAC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DC5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DC8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DD5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DDD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3DEB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3DF7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3E0E);
	OpHex		(x,	1);
	MakeCode	(x=0X3E13);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3E19);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3E1F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3E22);
	OpStkvar	(x,	0);
	MakeCode	(0X3E27);
	MakeCode	(x=0X3E2A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3E32);
	OpStkvar	(x,	0);
	MakeCode	(0X3E45);
	MakeCode	(0X3E60);
	MakeCode	(x=0X3E78);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3E7C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3E7F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3E84);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3E87);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3E8A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3E8D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3E97);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3E9B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3E9E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3EA4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3EAA);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X3EAA,	"wait_for_ESC");
	MakeCode	(x=0X3EAE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3EB2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X3EB4);
	OpDecimal	(x,	0);
	MakeCode	(x=0X3EB8);
	OpDecimal	(x,	0);
	MakeCode	(x=0X3EBD);
	OpHex		(x,	1);
	MakeCode	(x=0X3EC0);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3EC9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3ECD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3EDB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3EDE);
	OpStkvar	(x,	0);
	MakeComm	(0X3EE4,	"ESC");
	MakeCode	(x=0X3EE8);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X3EE8,	"_wait_for_ESC_");
	MakeCode	(x=0X3EEC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3EF0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X3EF2);
	OpDecimal	(x,	0);
	MakeCode	(x=0X3EF6);
	OpDecimal	(x,	0);
	MakeCode	(x=0X3EFB);
	OpHex		(x,	1);
	MakeCode	(x=0X3EFE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3F07);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3F0B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X3F19);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3F1C);
	OpStkvar	(x,	0);
	MakeComm	(0X3F22,	"ESC");
	MakeCode	(x=0X3F26);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X3F26,	"get_large_num_input");
	MakeCode	(x=0X3F2A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3F33);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3F38);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3F3B);
	OpStkvar	(x,	0);
	MakeCode	(0X3F48);
	MakeCode	(x=0X3F5A);
	OpStkvar	(x,	0);
	MakeCode	(0X3F66);
	MakeCode	(0X3F78);
	MakeCode	(0X3F87);
	MakeCode	(x=0X3F8E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3F94);
	OpStkvar	(x,	0);
	MakeCode	(0X3F9E);
	MakeCode	(0X3FB3);
	MakeCode	(x=0X3FB8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3FBD);
	OpStkvar	(x,	0);
	MakeCode	(0X3FC5);
	MakeCode	(x=0X3FCC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3FCF);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3FD4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3FDA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3FDD);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3FE0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3FE3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X3FE6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3FEB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3FF2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3FF7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X3FFA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4006);
	OpStkvar	(x,	0);
	MakeCode	(x=0X400D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4014);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4017);
	OpStkvar	(x,	1);
	MakeCode	(x=0X401C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4022);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4025);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4028);
	OpStkvar	(x,	0);
	MakeCode	(x=0X402B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X402E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4031);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4034);
	OpStkvar	(x,	0);
	MakeCode	(x=0X403B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4040);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4043);
	OpStkvar	(x,	1);
	MakeCode	(0X404D);
	MakeCode	(0X405B);
	MakeCode	(x=0X405F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4066);
	OpStkvar	(x,	0);
	MakeCode	(x=0X406A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X406D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4073);
	OpStkvar	(x,	1);
	MakeCode	(x=0X407D);
	OpHex		(x,	1);
	MakeCode	(0X4082);
	MakeCode	(0X408C);
	MakeCode	(x=0X4091);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4097);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40A3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40AA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40AD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40B3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X40BD);
	OpHex		(x,	1);
	MakeCode	(x=0X40C0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40C4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40C9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40D1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40D4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40D7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40DD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40E7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40ED);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40F4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40FB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X40FE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4106);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4115);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4118);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4120);
	OpHex		(x,	1);
	MakeCode	(x=0X4123);
	OpStkvar	(x,	0);
	MakeCode	(x=0X412C);
	OpStkvar	(x,	0);
	MakeCode	(0X4135);
	MakeCode	(x=0X413F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4142);
	OpStkvar	(x,	1);
	MakeByte	(0X4147);
	MakeArray	(0X4147,	0X3);
	MakeCode	(x=0X414A);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X414E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4151);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4154);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4157);
	OpStkvar	(x,	1);
	MakeCode	(x=0X415A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X415D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4160);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4169);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4176);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4179);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4186);
	OpStkvar	(x,	0);
	MakeCode	(x=0X418E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X419C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X41A2);
	OpHex		(x,	1);
	MakeCode	(0X41AC);
	MakeCode	(x=0X41B1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X41B6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X41BE);
	OpStkvar	(x,	1);
	MakeCode	(0X41C6);
	MakeCode	(x=0X41D1);
	OpHex		(x,	1);
	MakeCode	(0X41D7);
	MakeCode	(x=0X41DE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X41E6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X41EC);
	OpHex		(x,	1);
	MakeCode	(x=0X41F3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X41FA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4201);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4207);
	OpHex		(x,	1);
	MakeCode	(x=0X420E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4214);
	OpHex		(x,	1);
	MakeCode	(x=0X421B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4221);
	OpStkvar	(x,	1);
	MakeCode	(x=0X422C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4237);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4242);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4252);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4258);
	OpHex		(x,	1);
	MakeCode	(x=0X4262);
	OpStkvar	(x,	1);
	MakeCode	(x=0X426D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4278);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4283);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4290);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4294);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4297);
	OpStkvar	(x,	0);
	MakeCode	(x=0X429C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X429F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42A2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42A5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42AF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42B3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X42B9);
	OpStkvar	(x,	1);
	MakeArray	(0X42BE,	0X2);
	MakeComm	(0X42C0,	"Flush STDIN (keyboard) buffer \nand then, read character from STDIN (without ECHO)");
	MakeCode	(x=0X42C0);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeName	(0X42C0,	"get_char_input");
	MakeCode	(x=0X42C5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X42CA);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X42CD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X42D0,	"int 21h, ax=0C07h");
	MakeCode	(x=0X42D3);
	OpHex		(x,	1);
	MakeCode	(x=0X42D6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X42DB,	"\nif AL = 0, beep");
	MakeCode	(x=0X42DD);
	OpDecimal	(x,	0);
	MakeCode	(x=0X42E0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X42E8);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X42EC);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X42EC,	"get_string_input");
	MakeCode	(x=0X42F0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X42F3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42F6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42F9);
	OpStkvar	(x,	1);
	MakeCode	(x=0X42FC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X42FF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4302);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4306);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4309);
	OpStkvar	(x,	1);
	MakeCode	(x=0X430C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X430F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4312);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4315);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4319);
	OpStkvar	(x,	1);
	MakeCode	(x=0X431C);
	OpStkvar	(x,	0);
	MakeCode	(0X4322);
	MakeCode	(x=0X4326);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4329);
	OpStkvar	(x,	0);
	MakeCode	(x=0X432C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X432F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4339);
	OpStkvar	(x,	0);
	MakeCode	(x=0X433C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X433F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4342);
	OpStkvar	(x,	0);
	MakeCode	(x=0X434C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4368);
	OpHex		(x,	1);
	MakeCode	(x=0X436E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4371);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4375);
	OpStkvar	(x,	0);
	MakeCode	(x=0X437E);
	OpStkvar	(x,	1);
	MakeCode	(0X438D);
	MakeCode	(0X4394);
	MakeCode	(x=0X439F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X43A3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X43A6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X43AD);
	OpStkvar	(x,	1);
	MakeCode	(x=0X43B0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X43BA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X43C1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X43C4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X43CC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X43CF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X43D2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X43DD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X43E1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X43E4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X43E9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X43EC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X43EF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X43F2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X43FC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X43FF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4409);
	OpStkvar	(x,	0);
	MakeCode	(x=0X440C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X440F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4412);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4415);
	OpStkvar	(x,	0);
	MakeCode	(0X441A);
	MakeCode	(x=0X4425);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4428);
	OpStkvar	(x,	0);
	MakeCode	(x=0X442B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X442E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4438);
	OpStkvar	(x,	1);
	MakeCode	(x=0X443C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X443F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X444D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4451);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4454);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4459);
	OpStkvar	(x,	0);
	MakeCode	(x=0X445C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4461);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4464);
	OpStkvar	(x,	0);
	MakeCode	(0X4471);
	MakeCode	(x=0X447F);
	OpHex		(x,	1);
	MakeCode	(x=0X4485);
	OpStkvar	(x,	0);
	MakeCode	(0X4494);
	MakeCode	(x=0X44A3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X44A6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X44A9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X44AC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X44AF);
	OpStkvar	(x,	1);
	MakeCode	(x=0X44B2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X44B6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X44B9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X44C7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X44D3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X44D6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X44D9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X44DC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X44E8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X44EB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X44F3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X44F6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X44F9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X44FE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X450A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X450D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4510);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4513);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4518);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4520);
	OpStkvar	(x,	0);
	MakeCode	(x=0X452C);
	OpHex		(x,	1);
	MakeCode	(x=0X4533);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4539);
	OpStkvar	(x,	1);
	MakeCode	(x=0X453E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X454F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4553);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4556);
	OpStkvar	(x,	0);
	MakeCode	(x=0X455B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X455E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4561);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4564);
	OpStkvar	(x,	0);
	MakeCode	(x=0X456E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4571);
	OpStkvar	(x,	1);
	MakeCode	(x=0X457C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4582);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4587);
	OpStkvar	(x,	0);
	MakeCode	(x=0X458D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4590);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4593);
	OpStkvar	(x,	0);
	MakeCode	(0X4599);
	MakeCode	(x=0X45A4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45B8);
	OpHex		(x,	1);
	MakeCode	(x=0X45BE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45C1);
	OpStkvar	(x,	0);
	MakeCode	(0X45CA);
	MakeCode	(x=0X45CC);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X45CC,	"table_display");
	MakeCode	(x=0X45DC);
	OpHex		(x,	1);
	MakeCode	(x=0X45EA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45ED);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45F2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X45F5);
	OpStkvar	(x,	0);
	MakeCode	(0X45FB);
	MakeCode	(x=0X45FE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4605);
	OpHex		(x,	1);
	MakeCode	(x=0X4608);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4617);
	OpStkvar	(x,	0);
	MakeCode	(0X4626);
	MakeCode	(x=0X4633);
	OpStkvar	(x,	1);
	MakeCode	(x=0X463A);
	OpHex		(x,	1);
	MakeCode	(x=0X4641);
	OpHex		(x,	1);
	MakeCode	(x=0X4644);
	OpStkvar	(x,	1);
	MakeCode	(x=0X466C);
	OpStkvar	(x,	0);
	MakeCode	(0X467B);
	MakeCode	(x=0X467E);
	OpStkvar	(x,	0);
	MakeCode	(0X4683);
	MakeCode	(0X4688);
	MakeCode	(0X468D);
	MakeCode	(0X4692);
	MakeCode	(0X4697);
	MakeCode	(0X469C);
	MakeCode	(0X46A1);
	MakeCode	(x=0X46A5);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46AD);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46B4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46BE);
	OpHex		(x,	1);
	MakeCode	(x=0X46C1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46C4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46C7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46CA);
	OpStkvar	(x,	0);
	MakeCode	(0X46D3);
	MakeCode	(x=0X46D7);
	OpHex		(x,	1);
	MakeCode	(x=0X46DA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46F0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X46F7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X46FE);
	OpHex		(x,	1);
	MakeCode	(x=0X4705);
	OpHex		(x,	1);
	MakeCode	(x=0X4708);
	OpStkvar	(x,	1);
	MakeCode	(0X4723);
	MakeCode	(0X4729);
	MakeCode	(0X472F);
	MakeCode	(0X4735);
	MakeCode	(0X473B);
	MakeCode	(0X4741);
	MakeCode	(0X4747);
	MakeCode	(0X4754);
	MakeCode	(0X475B);
	MakeCode	(0X4761);
	MakeCode	(0X4769);
	MakeCode	(0X4771);
	MakeCode	(0X4779);
	MakeCode	(0X4781);
	MakeCode	(0X4787);
	MakeCode	(x=0X4792);
	OpHex		(x,	1);
	MakeCode	(x=0X4795);
	OpStkvar	(x,	0);
	MakeCode	(0X47A0);
	MakeCode	(x=0X47A7);
	OpStkvar	(x,	0);
	MakeCode	(0X47B2);
	MakeCode	(x=0X47B8);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X47B8,	"get_letters");
	MakeComm	(0X47BC,	"43h");
	MakeCode	(x=0X47BC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X47C1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X47C7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X47CB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X47D4);
	OpHex		(x,	1);
	MakeCode	(x=0X47D7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X47DA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X47EE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X47F6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X47FB);
	OpHex		(x,	1);
	MakeCode	(x=0X480D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4813);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4818);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4831);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4836);
	OpStkvar	(x,	0);
	MakeCode	(0X483C);
	MakeCode	(x=0X483E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4841);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4850);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4853);
	OpStkvar	(x,	0);
	MakeCode	(x=0X485B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X485E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4899);
	OpStkvar	(x,	1);
	MakeCode	(x=0X48A5);
	OpStkvar	(x,	1);
	MakeCode	(x=0X48A8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X48B8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X48BE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X48C3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X48CE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X48D4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X48DA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X48EC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X48F2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X48F7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X48FE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4902);
	OpStkvar	(x,	1);
	MakeCode	(x=0X490B);
	OpHex		(x,	1);
	MakeCode	(x=0X490E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4911);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4925);
	OpStkvar	(x,	1);
	MakeCode	(x=0X492D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4932);
	OpHex		(x,	1);
	MakeCode	(x=0X4944);
	OpStkvar	(x,	0);
	MakeCode	(0X494A);
	MakeCode	(x=0X494C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X494F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X495E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4961);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4969);
	OpStkvar	(x,	1);
	MakeCode	(x=0X496C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X49A7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X49B3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X49B6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X49C6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X49CE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X49D4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X49D9);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4A00);
	OpStkvar	(x,	0);
	MakeCode	(0X4A06);
	MakeCode	(0X4A08);
	MakeCode	(x=0X4A0A);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X4A0A,	"get_next_letter");
	MakeCode	(x=0X4A0E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4A13);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4A19);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4A1C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4A22);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4A28);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4A2F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4A33);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X4A3A);
	OpChr		(x,	1);
	MakeCode	(x=0X4A3E);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeName	(0X4A3E,	"volume_display");
	MakeCode	(x=0X4A46);
	OpDecimal	(x,	0);
	MakeComm	(0X4A4C,	"count, 24*30");
	MakeCode	(x=0X4A4C);
	OpDecimal	(x,	0);
	MakeComm	(0X4A4F,	"value");
	MakeComm	(0X4A51,	"ptr");
	MakeCode	(x=0X4A51);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4A57);
	OpHex		(x,	1);
	MakeCode	(x=0X4A5C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4A5F);
	OpStkvar	(x,	0);
	MakeComm	(0X4A62,	"TRUE");
	MakeCode	(x=0X4A62);
	OpStkvar	(x,	0);
	MakeComm	(0X4A66,	"0");
	MakeCode	(x=0X4A68);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4A6B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4A70);
	OpChr		(x,	1);
	MakeCode	(x=0X4A76);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4A7C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4A7F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4A82);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4A89);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4A8C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4A8F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4A91);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4A95);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4A9A);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4AA1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4AA4);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4AA8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AAB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AAE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AB1);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4ABA);
	OpDecimal	(x,	1);
	MakeComm	(0X4ABC,	"ax = 24 * current drive number (0 to 7)");
	MakeCode	(x=0X4ABC);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4AC0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4AC5);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X4ACC,	"bx = cx*48");
	MakeCode	(x=0X4ACC);
	OpDecimal	(x,	1);
	MakeComm	(0X4ACF,	"fat12");
	MakeCode	(x=0X4ACF);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X4AD6,	"fat16 lba");
	MakeCode	(x=0X4AD6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X4ADD,	"fat32 lba");
	MakeCode	(x=0X4ADD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X4AE4,	"fat32 chs");
	MakeCode	(x=0X4AE4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X4AEB,	"fat16");
	MakeCode	(x=0X4AEB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X4AF2,	"fat16 big");
	MakeCode	(x=0X4AF2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4AF9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4AFD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4AFF);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4B03);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4B08);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X4B0F,	"si = cx*48");
	MakeCode	(x=0X4B0F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4B12);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4B18);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4B1F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4B23);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4B27);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4B2B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X4B35);
	MakeCode	(x=0X4B3B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4B41);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4B43);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4B4C);
	OpHex		(x,	1);
	MakeCode	(x=0X4B4F);
	OpStkvar	(x,	0);
	MakeComm	(0X4B55,	"insert+0");
	MakeCode	(x=0X4B55);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4B5B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4B62);
	OpStkvar	(x,	0);
	MakeComm	(0X4B68,	"insert+180");
	MakeCode	(x=0X4B68);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4B6E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4B75);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeComm	(0X4B7B,	"insert+360");
	MakeCode	(x=0X4B7B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4B81);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4B88);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeComm	(0X4B8E,	"insert+540");
	MakeCode	(x=0X4B8E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4B94);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4B9B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4BA3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4BA9);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4BAB);
	OpDecimal	(x,	0);
	MakeCode	(x=0X4BB4);
	OpHex		(x,	1);
	MakeCode	(x=0X4BB7);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4BBE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4BC4);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeName	(0X4BC4,	"change_current_drive");
	MakeCode	(x=0X4BCA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4BD7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4BDF);
	OpHex		(x,	1);
	MakeCode	(x=0X4BED);
	OpHex		(x,	1);
	MakeCode	(x=0X4BF3);
	OpStkvar	(x,	0);
	MakeCode	(0X4C02);
	MakeCode	(x=0X4C09);
	OpStkvar	(x,	0);
	MakeCode	(0X4C11);
	MakeCode	(x=0X4C20);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4C2A);
	OpHex		(x,	1);
	MakeCode	(x=0X4C2D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4C30);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4C33);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4C36);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4C40);
	OpHex		(x,	1);
	MakeCode	(x=0X4C43);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4C82);
	OpHex		(x,	1);
	MakeCode	(x=0X4C85);
	OpStkvar	(x,	1);
	MakeCode	(0X4CA6);
	MakeCode	(0X4CAC);
	MakeCode	(x=0X4CB2);
	OpStkvar	(x,	0);
	MakeCode	(0X4CB9);
	MakeCode	(x=0X4CC8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4CD2);
	OpHex		(x,	1);
	MakeCode	(x=0X4CD5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4CD8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4CDB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4CDE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4CEA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4D12);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4D35);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4D3D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4D45);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4D72);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4D75);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4D7A);
	OpHex		(x,	1);
	MakeCode	(x=0X4D97);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4D9A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4DB7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4DC1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4DC4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4DC7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4DCA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4DD3);
	OpHex		(x,	1);
	MakeCode	(x=0X4DE7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4DF1);
	OpHex		(x,	1);
	MakeCode	(x=0X4DF4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4DF7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4E00);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4E08);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4E1B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4E2E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4E41);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4E61);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4E80);
	OpHex		(x,	1);
	MakeCode	(x=0X4E94);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4EA6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4EB3);
	OpHex		(x,	1);
	MakeCode	(x=0X4EB7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4EC5);
	OpHex		(x,	1);
	MakeCode	(x=0X4EC8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4ECE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4EE8);
	OpHex		(x,	1);
	MakeCode	(x=0X4EF0);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X4EF0,	"find_part_free_space");
	MakeCode	(x=0X4EFC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4F00);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4F04);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4F09);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4F0D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4F11);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4F17);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4F1B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4F1F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4F23);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4F26);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4F2C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4F2F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4F32);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4F37);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4F3A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4F43);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4F47);
	OpHex		(x,	1);
	MakeCode	(x=0X4F4C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4F52);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4F59);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4F5C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4F63);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4F69);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4F6F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4F75);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4F79);
	OpHex		(x,	1);
	MakeCode	(x=0X4F7E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4F84);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4F8B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X4F8E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4F95);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4F9C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4F9F);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4FA3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4FA7);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4FAB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4FB2);
	OpHex		(x,	1);
	MakeCode	(x=0X4FB5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4FB8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4FBC);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4FC4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4FC8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4FCF);
	OpHex		(x,	1);
	MakeCode	(x=0X4FD2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X4FD5);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4FD8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4FDE);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X4FE2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4FE5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4FE9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4FF2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X4FF6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X4FFB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5001);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5005);
	OpHex		(x,	1);
	MakeCode	(x=0X500A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5010);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5019);
	OpDecimal	(x,	1);
	MakeCode	(x=0X501C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5026);
	OpStkvar	(x,	1);
	MakeCode	(x=0X502C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X502F);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5033);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5039);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5044);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5048);
	OpDecimal	(x,	1);
	MakeCode	(x=0X504B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X504F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5056);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X505A);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X505E);
	OpHex		(x,	1);
	MakeCode	(x=0X5063);
	OpStkvar	(x,	1);
	MakeCode	(x=0X506B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X506E);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5075);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5079);
	OpDecimal	(x,	1);
	MakeCode	(x=0X507C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5080);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5086);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X508D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X5090);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5095);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5099);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X509D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X50A6);
	OpHex		(x,	1);
	MakeCode	(x=0X50A9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X50AD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X50B1);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X50B9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X50BD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X50C4);
	OpHex		(x,	1);
	MakeCode	(x=0X50C7);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X50CB);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X50CF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X50D2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X50D5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X50D8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X50E1);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X50E7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X50ED);
	OpHex		(x,	1);
	MakeCode	(x=0X50F2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X50F9);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X50FD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X5106);
	MakeCode	(x=0X5108);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X510F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5113);
	OpDecimal	(x,	1);
	MakeCode	(x=0X5116);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X511A);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X511F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5124);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5128);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X512C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5133);
	OpHex		(x,	1);
	MakeCode	(x=0X5136);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X513A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X513E);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5146);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X514A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5151);
	OpHex		(x,	1);
	MakeCode	(x=0X5154);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X515A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5160);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5166);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X516C);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5174);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5179);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X517C);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5181);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5184);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5188);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X518F);
	OpHex		(x,	1);
	MakeCode	(x=0X5192);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5195);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5199);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X51A1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X51A5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X51AC);
	OpHex		(x,	1);
	MakeCode	(x=0X51AF);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X51B2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X51B7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X51BB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X51BF);
	OpDecimal	(x,	1);
	MakeCode	(x=0X51C2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X51C5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X51CB);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X51CF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X51D2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X51D5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X51D8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X51DB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X51E1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X51E6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X51EA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X51ED);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X51F4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X51FA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5201);
	OpHex		(x,	1);
	MakeCode	(x=0X5204);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5207);
	OpStkvar	(x,	0);
	MakeCode	(x=0X520D);
	OpHex		(x,	1);
	MakeCode	(x=0X5212);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5216);
	OpDecimal	(x,	1);
	MakeCode	(x=0X5219);
	OpStkvar	(x,	1);
	MakeCode	(x=0X521C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5220);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5225);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5229);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5232);
	OpHex		(x,	1);
	MakeCode	(x=0X5235);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5239);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X523D);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5245);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5249);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5250);
	OpHex		(x,	1);
	MakeCode	(x=0X5253);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5257);
	OpStkvar	(x,	0);
	MakeCode	(x=0X525D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5261);
	OpDecimal	(x,	1);
	MakeCode	(x=0X5264);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X526E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5274);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X527B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X527F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X5282);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5289);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpDecimal	(x,	1);
	MakeCode	(x=0X5291);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5297);
	OpDecimal	(x,	0);
	MakeCode	(x=0X529F);
	OpHex		(x,	1);
	MakeCode	(x=0X52A3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X52A7);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X52AC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X52B0);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X52B4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X52BB);
	OpHex		(x,	1);
	MakeCode	(x=0X52BE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X52C2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X52C6);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X52CE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X52D2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X52D9);
	OpHex		(x,	1);
	MakeCode	(x=0X52DC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X52E0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X52E8);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X52E8,	"sort_part_table");
	MakeCode	(x=0X52ED);
	OpStkvar	(x,	0);
	MakeCode	(x=0X52F3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X52F9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X52FD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5300);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5303);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5308);
	OpStkvar	(x,	0);
	MakeCode	(x=0X530C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5312);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5316);
	OpStkvar	(x,	0);
	MakeCode	(x=0X531C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X531F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5322);
	OpStkvar	(x,	0);
	MakeCode	(x=0X532B);
	OpHex		(x,	1);
	MakeCode	(x=0X5330);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5336);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X533F);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5346);
	OpDecimal	(x,	1);
	MakeCode	(x=0X5349);
	OpDecimal	(x,	1);
	MakeCode	(x=0X534C);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5350);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5356);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X535A);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5360);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5364);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X536A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5370);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5374);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5377);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X537B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X537F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5382);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5386);
	OpStkvar	(x,	0);
	MakeCode	(0X538C);
	MakeCode	(x=0X5390);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X5390,	"find_ext_free_space");
	MakeCode	(x=0X539C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X53A0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X53C3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X53C6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X53CF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X53D4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X53D7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X53DA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X53DF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X53E2);
	OpStkvar	(x,	0);
	MakeCode	(0X53EB);
	MakeCode	(x=0X53F4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X540B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X540F);
	OpHex		(x,	1);
	MakeCode	(x=0X543D);
	OpHex		(x,	1);
	MakeCode	(x=0X545A);
	OpHex		(x,	1);
	MakeCode	(x=0X5460);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5463);
	OpStkvar	(x,	0);
	MakeCode	(x=0X546A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X546D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5471);
	OpStkvar	(x,	0);
	MakeCode	(x=0X547A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X547E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5483);
	OpStkvar	(x,	0);
	MakeCode	(0X5489);
	MakeCode	(x=0X5491);
	OpStkvar	(x,	1);
	MakeCode	(x=0X54AA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X54BE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X54C3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X54E9);
	OpHex		(x,	1);
	MakeCode	(x=0X5507);
	OpHex		(x,	1);
	MakeCode	(x=0X5512);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5515);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5518);
	OpStkvar	(x,	0);
	MakeCode	(x=0X551B);
	OpStkvar	(x,	0);
	MakeCode	(0X5524);
	MakeCode	(x=0X552D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5536);
	OpStkvar	(x,	1);
	MakeCode	(x=0X553A);
	OpHex		(x,	1);
	MakeCode	(x=0X554C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5551);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5574);
	OpHex		(x,	1);
	MakeCode	(x=0X5592);
	OpHex		(x,	1);
	MakeCode	(0X559B);
	MakeCode	(x=0X559F);
	OpHex		(x,	1);
	MakeCode	(x=0X55A4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X55D1);
	OpHex		(x,	1);
	MakeCode	(x=0X55EE);
	OpHex		(x,	1);
	MakeCode	(x=0X55F4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X55F9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X55FE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5602);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5609);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5616);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5619);
	OpStkvar	(x,	1);
	MakeCode	(x=0X561C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X561F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5622);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5628);
	OpStkvar	(x,	0);
	MakeCode	(x=0X562D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X563B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5641);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5648);
	OpHex		(x,	1);
	MakeCode	(x=0X564B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X564E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5659);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5660);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5679);
	OpHex		(x,	1);
	MakeCode	(x=0X5697);
	OpHex		(x,	1);
	MakeCode	(x=0X569E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X56A4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X56B5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X56BC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X56E0);
	OpHex		(x,	1);
	MakeCode	(x=0X56FC);
	OpHex		(x,	1);
	MakeCode	(x=0X571A);
	OpHex		(x,	1);
	MakeCode	(x=0X5721);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5728);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X5728,	"sort_ext_table");
	MakeCode	(x=0X572E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5734);
	OpStkvar	(x,	1);
	MakeCode	(x=0X573A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X573E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5741);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5744);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5749);
	OpStkvar	(x,	0);
	MakeCode	(x=0X574D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5753);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5757);
	OpStkvar	(x,	0);
	MakeCode	(x=0X575D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5760);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5763);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5768);
	OpDecimal	(x,	1);
	MakeCode	(x=0X576A);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5770);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5776);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5781);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5785);
	OpStkvar	(x,	0);
	MakeCode	(x=0X578B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X578E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X5791);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5795);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X579B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X579E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X57A1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X57A5);
	OpStkvar	(x,	1);
	MakeCode	(x=0X57A8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X57AC);
	OpStkvar	(x,	0);
	MakeCode	(0X57B2);
	MakeCode	(x=0X57B6);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X57B6,	"find_free_partition");
	MakeCode	(x=0X57BA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X57C0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X57C3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X57C9);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X57CD);
	OpHex		(x,	1);
	MakeCode	(x=0X57D2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X57D8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X57DB);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X57DF);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X57E5);
	OpStkvar	(x,	1);
	MakeCode	(x=0X57EA);
	OpSign		(x,	1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X57EE);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X57EE,	"find_partition_type");
	MakeCode	(x=0X57F2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X57F8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X57FB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5801);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5805);
	OpHex		(x,	1);
	MakeCode	(x=0X580A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5810);
	OpDecimal	(x,	1);
	MakeCode	(x=0X5813);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5816);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X5820);
	MakeCode	(x=0X5824);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X5824,	"find_non_dos_partition");
	MakeComm	(0X5828,	"pte 0");
	MakeCode	(x=0X5828);
	OpStkvar	(x,	0);
	MakeComm	(0X582E,	"next pte");
	MakeCode	(x=0X582E);
	OpStkvar	(x,	0);
	MakeComm	(0X5831,	"last partition (table entry) on MBR ?");
	MakeCode	(x=0X5831);
	OpStkvar	(x,	0);
	MakeComm	(0X5837,	"current disk number (0 to 7)");
	MakeCode	(x=0X5837);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X583B,	"*4 -> 4 partitions per disk");
	MakeCode	(x=0X583B);
	OpHex		(x,	1);
	MakeComm	(0X5840,	"partition number (index, 0 to 3)");
	MakeCode	(x=0X5840);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5846);
	OpDecimal	(x,	1);
	MakeComm	(0X5849,	"empty");
	MakeCode	(x=0X5849);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X5850,	"fat12 (chs or lba)");
	MakeCode	(x=0X5850);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X5857,	"fat16 (lba)");
	MakeCode	(x=0X5857);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X585E,	"fat32 (lba)");
	MakeCode	(x=0X585E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X5865,	"fat32 (chs)");
	MakeCode	(x=0X5865);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X586C,	"fat16 (chs)");
	MakeCode	(x=0X586C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X5873,	"fat16 big (chs)");
	MakeCode	(x=0X5873);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X587A,	"extended dos (chs)\nNOT: 0Fh (extended dos -lba- partition) \n     would be added here\nErdogan Tan - 26/07/2023");
	MakeCode	(x=0X587A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X5881,	"found");
	MakeComm	(0X5885,	"not found");
	MakeCode	(0X5885);
	MakeCode	(x=0X588A);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X588E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5895);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5898);
	OpStkvar	(x,	0);
	MakeCode	(x=0X58A2);
	OpHex		(x,	1);
	MakeCode	(x=0X58A5);
	OpStkvar	(x,	1);
	MakeCode	(x=0X58BD);
	OpHex		(x,	1);
	MakeCode	(x=0X58C0);
	OpStkvar	(x,	1);
	MakeCode	(0X58D0);
	MakeCode	(x=0X58D6);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X58D6,	"find_active_partition");
	MakeCode	(x=0X58DA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X58E0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X58E3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X58E9);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X58ED);
	OpHex		(x,	1);
	MakeCode	(x=0X58F0);
	OpStkvar	(x,	1);
	MakeComm	(0X58F7,	"bx = ax*48");
	MakeCode	(x=0X58F7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X58FA);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeComm	(0X5901,	"active partition found");
	MakeComm	(0X5905,	"0, no active partition");
	MakeCode	(0X5905);
	MakeCode	(x=0X590A);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X590A,	"find_ext_part_location");
	MakeComm	(0X590E,	"partition table entry number = 0");
	MakeCode	(x=0X590E);
	OpStkvar	(x,	0);
	MakeComm	(0X5914,	"next pte");
	MakeCode	(x=0X5914);
	OpStkvar	(x,	0);
	MakeComm	(0X5917,	"last pte ?");
	MakeCode	(x=0X5917);
	OpStkvar	(x,	0);
	MakeCode	(x=0X591D);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5921);
	OpHex		(x,	1);
	MakeComm	(0X5926,	"partition table entry number is 0 to 3 \n(= partition number)");
	MakeCode	(x=0X5926);
	OpStkvar	(x,	1);
	MakeCode	(x=0X592C);
	OpDecimal	(x,	1);
	MakeComm	(0X592F,	"extended dos partition (chs)");
	MakeCode	(x=0X592F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X5936,	"extended dos partition (lba)");
	MakeCode	(x=0X5936);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X593D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5942);
	OpHex		(x,	1);
	MakeCode	(x=0X5946);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X594A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5950);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5953);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5959);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5971);
	OpStkvar	(x,	1);
	MakeCode	(0X5976);
	MakeCode	(x=0X597A);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X597A,	"find_logical_drive");
	MakeComm	(0X597E,	"logical drive 0");
	MakeCode	(x=0X597E);
	OpStkvar	(x,	0);
	MakeComm	(0X5984,	"next logical drive");
	MakeCode	(x=0X5984);
	OpStkvar	(x,	0);
	MakeComm	(0X5987,	"logical drive 23 ? (the last)");
	MakeCode	(x=0X5987);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X598D);
	OpDecimal	(x,	1);
	MakeComm	(0X598F,	"ax = logical drive number * 24");
	MakeCode	(x=0X598F);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5993);
	OpStkvar	(x,	1);
	MakeComm	(0X599A,	"bx = ax*48 = logical drive's offset\n             in 8*48*24 bytes table");
	MakeCode	(x=0X599A);
	OpDecimal	(x,	1);
	MakeComm	(0X599D,	"0 ?");
	MakeCode	(x=0X599D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X59A3,	"found (partition ID > 0)");
	MakeComm	(0X59A7,	"not found");
	MakeCode	(0X59A7);
	MakeCode	(x=0X59AC);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X59B2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59B5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59BA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X59F5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59F8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X59FB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5A01);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5A06);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X5A0C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5A0F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5A14);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5A17);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5A1A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5A20);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5A5B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5A5E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5A63);
	OpStkvar	(x,	1);
	MakeCode	(0X5A68);
	MakeCode	(x=0X5A70);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(0X5A81);
	MakeCode	(0X5AB8);
	MakeCode	(x=0X5AC0);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X5AC0,	"clear_screen");
	MakeCode	(x=0X5AC4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5AC7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5ACA);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5AD1);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5AD5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5ADA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5ADE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5AE1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5AE4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5AE7);
	OpStkvar	(x,	0);
	MakeComm	(0X5AEA,	"lines");
	MakeComm	(0X5AEC,	"segment:offset attrib ptr");
	MakeCode	(x=0X5AED);
	OpStkvar	(x,	0);
	MakeComm	(0X5AF0,	"viode handle (not used here)");
	MakeComm	(0X5AFA,	"not monochrome");
	MakeCode	(x=0X5AFA);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeName	(0X5AFA,	"init_video_information");
	MakeComm	(0X5AFF,	"get current video mode\nmov ah,0Fh\nint 10h");
	MakeCode	(x=0X5AFF);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5B04);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5B07);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5B0F);
	OpHex		(x,	1);
	MakeCode	(x=0X5B12);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X5B15,	"mov [video_mode],al");
	MakeCode	(x=0X5B15);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5B18);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X5B1B,	"mov [display_page],bh");
	MakeCode	(x=0X5B1B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5B24);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X5B2B,	"/* assume color mode */");
	MakeCode	(x=0X5B2B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5B30);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5B37);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X5B3E,	"Text 80x25 chars Greyscale");
	MakeCode	(x=0X5B3E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5B43);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X5B48,	"set video mode\n(clear screen)");
	MakeCode	(x=0X5B48);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5B4D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5B50);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5B58);
	OpHex		(x,	1);
	MakeComm	(0X5B5B,	"/* Set the display page */");
	MakeCode	(x=0X5B5B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X5B60,	"video page 0");
	MakeCode	(x=0X5B60);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X5B67);
	MakeCode	(x=0X5B6B);
	OpDecimal	(x,	0);
	MakeCode	(x=0X5B6D);
	OpDecimal	(x,	0);
	MakeCode	(x=0X5B72);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X5B7C,	"extended text mode (43 or 50 rows),\nvertical resolution\n(0 = 200, 1 = 350, 2 = 400 scan lines)");
	MakeCode	(x=0X5B7C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X5B81,	"80x25 text mode");
	MakeComm	(0X5B83,	"select vertical resolution");
	MakeCode	(x=0X5B83);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5B88);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X5B8D);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5B90);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5B93);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5B96);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5B9E);
	OpHex		(x,	1);
	MakeCode	(x=0X5BA9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5BAC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5BAF);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5BB7);
	OpHex		(x,	1);
	MakeCode	(x=0X5BBA);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5BC1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5BC7);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5BCD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5BD0);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5BD8);
	OpHex		(x,	1);
	MakeCode	(x=0X5BDB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5BE3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5BE6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5BE9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5BF1);
	OpHex		(x,	1);
	MakeCode	(x=0X5BF6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeName	(0X5BF6,	"reset_video_information");
	MakeCode	(0X5C00);
	MakeCode	(x=0X5C04);
	OpDecimal	(x,	0);
	MakeCode	(x=0X5C06);
	OpDecimal	(x,	0);
	MakeCode	(x=0X5C0B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5C15);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5C1C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5C21);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X5C26);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5C29);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5C2C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5C2F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5C37);
	OpHex		(x,	1);
	MakeComm	(0X5C3A,	"/* Reset the video mode */\nset mode");
	MakeCode	(x=0X5C3A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5C3F);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5C42);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5C45);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5C48);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5C50);
	OpHex		(x,	1);
	MakeComm	(0X5C53,	"extended text mode ?\nvertical resolution");
	MakeCode	(x=0X5C53);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X5C5A,	"TEXT-MODE CHARGEN\nLOAD ROM 8x8 DBL-DOT PATTERNS");
	MakeCode	(x=0X5C5A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X5C60);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5C66);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5C69);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5C71);
	OpHex		(x,	1);
	MakeComm	(0X5C74,	"/* Set the page */");
	MakeCode	(x=0X5C74);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5C79);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5C7C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5C7F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5C82);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5C8A);
	OpHex		(x,	1);
	MakeComm	(0X5C8E,	"CURRENT_VIDEO_ATTRIBUTE");
	MakeCode	(x=0X5C8E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeName	(0X5C8E,	"get_video_attribute");
	MakeCode	(x=0X5C93);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5C96);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5C99);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X5C9C,	"mov ah,8 ; CURRENT_VIDEO_ATTRIBUTE\nmov bh,[display_page]\nint 10h\nmov [video_attribute],ah\nretn");
	MakeCode	(x=0X5C9C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5CA4);
	OpHex		(x,	1);
	MakeCode	(x=0X5CA7);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5CAA);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5CAE);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeName	(0X5CAE,	"get_video_stat_info");
	MakeCode	(x=0X5CB2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5CB7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5CBA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5CBD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5CC0);
	OpStkvar	(x,	0);
	MakeComm	(0X5CC3,	"\nmov ah,1Bh\nint 10h");
	MakeCode	(x=0X5CC3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5CC9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5CCF);
	OpStkvar	(x,	0);
	MakeComm	(0X5CD2,	"es:di = state buffer address (64 bytes)");
	MakeCode	(x=0X5CD2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5CD5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5CD9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5CDC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5CDF);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5CE7);
	OpHex		(x,	1);
	MakeCode	(x=0X5CEA);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeComm	(0X5CF1,	"number of rows");
	MakeCode	(x=0X5CF1);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeComm	(0X5CF7,	"80x50 (400 scan lines)");
	MakeComm	(0X5CFB,	"number of rows");
	MakeCode	(x=0X5CFB);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeComm	(0X5D01,	"132x43 (350 scan lines)");
	MakeComm	(0X5D05,	"80x25 (200 scan lines)");
	MakeCode	(0X5D05);
	MakeComm	(0X5D07,	"vertical resolution");
	MakeCode	(x=0X5D07);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5D0C);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X5D0C,	"make_partition");
	MakeCode	(x=0X5D15);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5D1F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5D25);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5D2E);
	OpHex		(x,	1);
	MakeCode	(x=0X5D31);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5D48);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5D4B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5D55);
	OpHex		(x,	1);
	MakeCode	(x=0X5D5A);
	OpStkvar	(x,	1);
	MakeCode	(0X5D6A);
	MakeCode	(x=0X5D6E);
	OpHex		(x,	1);
	MakeCode	(x=0X5D73);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5D7C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5D81);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5D85);
	OpDecimal	(x,	1);
	MakeCode	(x=0X5D88);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5D8E);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5D94);
	OpHex		(x,	1);
	MakeCode	(x=0X5D99);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5D9F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X5DA2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5DA6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5DAA);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5DB0);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5DB5);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5DBB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5DBF);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5DC5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5DC9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5DCD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5DD4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5DDE);
	OpHex		(x,	1);
	MakeCode	(x=0X5DE3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5DEC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5E06);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E09);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E1F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E22);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E28);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5E30);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E33);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E36);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E39);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E3F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5E42);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5E57);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E5A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E60);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E63);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E6F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E72);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E78);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5E7B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5E7E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E81);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E8C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5E9C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5EA3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5EAA);
	OpStkvar	(x,	0);
	MakeCode	(0X5EB3);
	MakeCode	(x=0X5EB7);
	OpHex		(x,	1);
	MakeCode	(x=0X5EBC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5ECD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5ED0);
	OpStkvar	(x,	0);
	MakeCode	(0X5EDD);
	MakeCode	(x=0X5EE2);
	OpStkvar	(x,	0);
	MakeCode	(0X5EE9);
	MakeCode	(x=0X5EED);
	OpHex		(x,	1);
	MakeCode	(x=0X5EF2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5F02);
	OpStkvar	(x,	0);
	MakeCode	(0X5F09);
	MakeCode	(x=0X5F0D);
	OpHex		(x,	1);
	MakeCode	(x=0X5F12);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5F2C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5F33);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5F38);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5F3F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5F46);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5F50);
	OpStkvar	(x,	0);
	MakeCode	(0X5F56);
	MakeCode	(x=0X5F65);
	OpHex		(x,	1);
	MakeCode	(x=0X5F68);
	OpStkvar	(x,	0);
	MakeCode	(x=0X5F76);
	OpHex		(x,	1);
	MakeCode	(x=0X5F79);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5F8F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X5F96);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X5F9A);
	OpHex		(x,	1);
	MakeCode	(x=0X5F9F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5FB5);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5FBB);
	OpHex		(x,	1);
	MakeCode	(x=0X5FD1);
	OpStkvar	(x,	0);
	MakeCode	(0X5FD8);
	MakeCode	(x=0X5FDC);
	OpHex		(x,	1);
	MakeCode	(x=0X5FE1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5FF7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X5FFD);
	OpHex		(x,	1);
	MakeCode	(x=0X6009);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X600D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6013);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6019);
	OpStkvar	(x,	0);
	MakeCode	(x=0X601F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6025);
	OpStkvar	(x,	0);
	MakeCode	(x=0X602B);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X602F);
	OpHex		(x,	1);
	MakeCode	(x=0X6034);
	OpStkvar	(x,	1);
	MakeCode	(x=0X603A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X603D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6044);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X604C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6052);
	OpStkvar	(x,	0);
	MakeCode	(0X6058);
	MakeCode	(x=0X605B);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X605F);
	OpHex		(x,	1);
	MakeCode	(x=0X6064);
	OpStkvar	(x,	1);
	MakeCode	(x=0X606A);
	OpDecimal	(x,	1);
	MakeCode	(x=0X606D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6070);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6074);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6079);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6082);
	OpHex		(x,	1);
	MakeCode	(x=0X6089);
	OpDecimal	(x,	1);
	MakeCode	(x=0X608D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6095);
	OpHex		(x,	1);
	MakeCode	(x=0X6098);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X609C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X60A0);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X60A6);
	OpHex		(x,	1);
	MakeCode	(x=0X60AB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X60B2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X60B6);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X60BA);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X60C5);
	OpHex		(x,	1);
	MakeCode	(x=0X60C8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X60CC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X60CF);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X60D3);
	OpHex		(x,	1);
	MakeCode	(x=0X60DA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X60DD);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X60E6);
	OpHex		(x,	1);
	MakeCode	(x=0X60E9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X60EC);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X60F0);
	OpHex		(x,	1);
	MakeCode	(x=0X60F8);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X60FF);
	OpHex		(x,	1);
	MakeCode	(0X6104);
	MakeCode	(x=0X610C);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X610C,	"make_volume");
	MakeCode	(x=0X6115);
	OpStkvar	(x,	0);
	MakeCode	(0X611F);
	MakeCode	(x=0X6128);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6136);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6145);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6190);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6193);
	OpStkvar	(x,	0);
	MakeCode	(0X61B2);
	MakeCode	(x=0X61B7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61BE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61C4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61CB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61D3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61DA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61E1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61E6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61ED);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61F4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X61FE);
	OpStkvar	(x,	0);
	MakeCode	(0X6204);
	MakeCode	(x=0X6213);
	OpHex		(x,	1);
	MakeCode	(x=0X6216);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6224);
	OpHex		(x,	1);
	MakeCode	(x=0X6227);
	OpStkvar	(x,	1);
	MakeCode	(x=0X623D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6244);
	OpStkvar	(x,	1);
	MakeCode	(x=0X625C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6262);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6268);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6289);
	OpStkvar	(x,	0);
	MakeCode	(x=0X628F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X62AF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X62B5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X62B9);
	OpStkvar	(x,	1);
	MakeCode	(x=0X62CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X62E8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X62F2);
	OpHex		(x,	1);
	MakeCode	(x=0X6301);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6310);
	OpHex		(x,	1);
	MakeCode	(x=0X6313);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6332);
	OpHex		(x,	1);
	MakeCode	(x=0X6352);
	OpHex		(x,	1);
	MakeCode	(x=0X636A);
	OpHex		(x,	1);
	MakeCode	(0X636F);
	MakeCode	(x=0X6372);
	OpStkvar	(x,	1);
	MakeCode	(0X637A);
	MakeName	(0X637A,	"remove_partition");
	MakeCode	(x=0X637E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6382);
	OpHex		(x,	1);
	MakeCode	(x=0X6385);
	OpStkvar	(x,	1);
	MakeCode	(x=0X63E1);
	OpHex		(x,	1);
	MakeCode	(x=0X63EE);
	OpHex		(x,	1);
	MakeCode	(0X63F4);
	MakeCode	(x=0X63FA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X63FD);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6459);
	OpHex		(x,	1);
	MakeCode	(x=0X6466);
	OpHex		(x,	1);
	MakeCode	(x=0X646C);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X646C,	"get_disk_info");
	MakeCode	(x=0X6474);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6477);
	OpStkvar	(x,	0);
	MakeCode	(x=0X647D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6482);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6489);
	OpHex		(x,	1);
	MakeCode	(x=0X64B0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X64B3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X64B9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X64BD);
	OpStkvar	(x,	1);
	MakeCode	(x=0X64C6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X64C9);
	OpStkvar	(x,	0);
	MakeComm	(0X64DB,	"- Multiplex - MS WINDOWS - GET DEVICE API ENTRY POINT\nBX = virtual device (VxD) ID, ES:DI = 0000h:0000h\nReturn: ES:DI -> VxD API entry point, or 0:0 if the VxD does not support an API");
	MakeCode	(x=0X64DB);
	OpHex		(x,	0);
	MakeCode	(x=0X64DD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X64E0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X64E5);
	OpStkvar	(x,	1);
	MakeCode	(x=0X64E8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X64FE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6505);
	OpStkvar	(x,	1);
	MakeCode	(x=0X651A);
	OpHex		(x,	1);
	MakeCode	(x=0X651D);
	OpHex		(x,	1);
	MakeCode	(x=0X6537);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6541);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6548);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X654F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6556);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X655D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6564);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X656B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6572);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6579);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6580);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X6587);
	MakeCode	(x=0X659D);
	OpHex		(x,	1);
	MakeCode	(x=0X65A0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X65B3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X65BA);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X65C1);
	MakeCode	(x=0X65CF);
	OpHex		(x,	1);
	MakeCode	(x=0X65D2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X65D5);
	OpStkvar	(x,	1);
	MakeCode	(x=0X65DF);
	OpStkvar	(x,	1);
	MakeCode	(x=0X65E2);
	OpHex		(x,	1);
	MakeCode	(x=0X65E7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X65EC);
	OpHex		(x,	1);
	MakeCode	(x=0X65F1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X65F8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X65FE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6603);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6614);
	OpHex		(x,	1);
	MakeCode	(x=0X6616);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6632);
	OpHex		(x,	1);
	MakeCode	(x=0X6636);
	OpHex		(x,	1);
	MakeCode	(x=0X6650);
	OpStkvar	(x,	1);
	MakeCode	(0X6661);
	MakeCode	(0X6668);
	MakeCode	(x=0X666A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6675);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X667C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X6685);
	MakeCode	(x=0X6687);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X668E);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X668E,	"write_boot_record");
	MakeCode	(x=0X6692);
	OpStkvar	(x,	0);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6697);
	OpStkvar	(x,	0);
	MakeCode	(x=0X669E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X66A1);
	OpHex		(x,	1);
	MakeCode	(x=0X66A7);
	OpHex		(x,	1);
	MakeCode	(x=0X66AE);
	OpDecimal	(x,	0);
	MakeCode	(x=0X66B0);
	OpDecimal	(x,	0);
	MakeCode	(x=0X66B7);
	OpHex		(x,	1);
	MakeCode	(x=0X66BA);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X66C3);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X66C6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X66CB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X66CE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X66D5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X66D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X66E3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X66E6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X66F0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X66F3);
	OpHex		(x,	1);
	MakeCode	(x=0X66F9);
	OpHex		(x,	1);
	MakeCode	(0X6700);
	MakeCode	(x=0X6704);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6707);
	OpHex		(x,	1);
	MakeCode	(x=0X670D);
	OpHex		(x,	1);
	MakeCode	(x=0X6710);
	OpDecimal	(x,	0);
	MakeCode	(x=0X6712);
	OpDecimal	(x,	0);
	MakeCode	(x=0X671B);
	OpHex		(x,	1);
	MakeCode	(x=0X671E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6724);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6729);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X672E);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X672E,	"verify_tracks");
	MakeCode	(x=0X6734);
	OpStkvar	(x,	0);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6739);
	OpStkvar	(x,	0);
	MakeCode	(x=0X673C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6743);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X674A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6751);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6758);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X675F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6766);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X676D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6773);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6777);
	OpStkvar	(x,	0);
	MakeCode	(0X677E);
	MakeCode	(x=0X6780);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X6785);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6788);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6790);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6793);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6799);
	OpStkvar	(x,	1);
	MakeCode	(x=0X679D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X67A0);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X67A6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X67A9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X67AC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X67B0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X67BA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X67C0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X67C4);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X67CC);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X67D6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X67DC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X67DF);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X67E5);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X67F0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X67F3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X67F6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6800);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6803);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6806);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X680D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6819);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X681E);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6826);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X682B);
	OpHex		(x,	1);
	MakeCode	(x=0X682E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6835);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6838);
	OpStkvar	(x,	1);
	MakeCode	(x=0X683B);
	OpDecimal	(x,	1);
	MakeCode	(0X6840);
	MakeCode	(x=0X6844);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6849);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X684E);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6856);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X685F);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6864);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X686C);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6870);
	OpHex		(x,	1);
	MakeCode	(x=0X687E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6885);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6888);
	OpStkvar	(x,	1);
	MakeCode	(x=0X688B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6895);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6898);
	OpStkvar	(x,	0);
	MakeCode	(x=0X689F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68A4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X68A7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X68AA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X68B0);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X68B7);
	OpDecimal	(x,	1);
	MakeCode	(x=0X68BC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X68BF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X68C2);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X68CA);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X68D2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X68D5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X68E3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X68E6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X68E9);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X68F1);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X68F7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X68FE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6904);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6908);
	OpStkvar	(x,	0);
	MakeCode	(x=0X690B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6911);
	OpDecimal	(x,	0);
	MakeCode	(x=0X6913);
	OpDecimal	(x,	0);
	MakeCode	(x=0X6916);
	OpDecimal	(x,	0);
	MakeCode	(x=0X691B);
	OpHex		(x,	1);
	MakeCode	(x=0X691E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6922);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6928);
	OpStkvar	(x,	0);
	MakeCode	(x=0X692B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6931);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6934);
	OpDecimal	(x,	1);
	MakeCode	(x=0X693A);
	OpChr		(x,	1);
	MakeCode	(x=0X693C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X693F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6941);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6948);
	OpStkvar	(x,	0);
	MakeCode	(x=0X694D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6957);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X695E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6961);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6967);
	OpChr		(x,	1);
	MakeCode	(x=0X6969);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X696C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X696E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6975);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6978);
	OpChr		(x,	1);
	MakeCode	(x=0X697B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X697F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6986);
	OpStkvar	(x,	0);
	MakeCode	(x=0X698A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6993);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6997);
	OpStkvar	(x,	0);
	MakeCode	(x=0X699A);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X69A1);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X69AB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X69AE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X69B5);
	OpStkvar	(x,	0);
	MakeCode	(0X69BA);
	MakeCode	(x=0X69BF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X69C5);
	OpDecimal	(x,	0);
	MakeCode	(x=0X69C7);
	OpDecimal	(x,	0);
	MakeCode	(x=0X69D0);
	OpHex		(x,	1);
	MakeCode	(x=0X69D3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X69DF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X69E4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X69EA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X69F0);
	OpStkvar	(x,	0);
	MakeCode	(0X69F9);
	MakeCode	(x=0X69FD);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6A00);
	OpHex		(x,	1);
	MakeCode	(x=0X6A06);
	OpHex		(x,	1);
	MakeCode	(x=0X6A10);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6A13);
	OpHex		(x,	1);
	MakeCode	(x=0X6A19);
	OpHex		(x,	1);
	MakeCode	(x=0X6A1C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X6A1E);
	OpDecimal	(x,	0);
	MakeCode	(x=0X6A27);
	OpHex		(x,	1);
	MakeCode	(x=0X6A2A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6A31);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6A3A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6A3E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6A41);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6A44);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6A49);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6A4D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6A50);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6A5B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6A5E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6A65);
	OpStkvar	(x,	0);
	MakeCode	(0X6A6A);
	MakeCode	(x=0X6A6F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6A78);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6A7D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6A83);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6A89);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6A90);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6A97);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6A9E);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6AA4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6AA7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6AAC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6AB0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6AB3);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6ABE);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6AC1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6AC8);
	OpStkvar	(x,	0);
	MakeCode	(0X6ACD);
	MakeCode	(x=0X6AD2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6ADB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6AE0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6AE6);
	OpStkvar	(x,	0);
	MakeCode	(0X6AEF);
	MakeCode	(x=0X6AF3);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6AF6);
	OpHex		(x,	1);
	MakeCode	(x=0X6AFC);
	OpHex		(x,	1);
	MakeCode	(x=0X6AFF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B08);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B0C);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6B14);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B17);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B1A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6B20);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B24);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B28);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6B2B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B2E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B31);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6B37);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6B3E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B42);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B46);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B49);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B4C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B53);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B5C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X6B5E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B61);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B6C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B6F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B78);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B7B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6B88);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X6B90);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B94);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6B98);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6B9B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6B9E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6BA1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6BA7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6BAB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6BAE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6BB1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6BB6);
	OpDecimal	(x,	0);
	MakeCode	(x=0X6BB8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6BBB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6BC6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6BC9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6BCF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6BD2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6BDC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X6BE3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6BE6);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6BEC);
	OpChr		(x,	1);
	MakeCode	(x=0X6BEE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6BF1);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6BF3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6BFA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6BFF);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6C09);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpChr		(x,	1);
	MakeCode	(x=0X6C10);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6C13);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6C19);
	OpChr		(x,	1);
	MakeCode	(x=0X6C1B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6C1E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6C20);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6C27);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6C2A);
	OpChr		(x,	1);
	MakeCode	(x=0X6C2D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6C31);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6C38);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6C41);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6C47);
	OpDecimal	(x,	0);
	MakeCode	(x=0X6C49);
	OpDecimal	(x,	0);
	MakeCode	(x=0X6C4D);
	OpDecimal	(x,	0);
	MakeCode	(x=0X6C52);
	OpHex		(x,	1);
	MakeCode	(x=0X6C55);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6C59);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6C5C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6C5F);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(0X6C68);
	MakeName	(0X6C68,	"get_drive_parameters");
	MakeCode	(x=0X6C6B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6C70);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6C73);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6C76);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6C79);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6C7C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6C84);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6C8B);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6C8E);
	OpHex		(x,	1);
	MakeCode	(x=0X6C94);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6C9F);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6CA2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6CA9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6CB2);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X6CB2,	"read_boot_record");
	MakeCode	(x=0X6CB6);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X6CB9,	"buffer segment");
	MakeComm	(0X6CBA,	"buffer offset");
	MakeComm	(0X6CBB,	"sector");
	MakeCode	(x=0X6CBB);
	OpStkvar	(x,	1);
	MakeComm	(0X6CBF,	"head");
	MakeCode	(x=0X6CBF);
	OpStkvar	(x,	1);
	MakeComm	(0X6CC3,	"cylinder");
	MakeCode	(x=0X6CC3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6CC6);
	OpStkvar	(x,	1);
	MakeComm	(0X6CC9,	"drive number");
	MakeComm	(0X6CCA,	"1 sector");
	MakeComm	(0X6CCC,	"disk read");
	MakeCode	(x=0X6CD1);
	OpDecimal	(x,	1);
	MakeComm	(0X6CD6,	"error");
	MakeComm	(0X6CD8,	"success");
	MakeCode	(x=0X6CDC);
	OpStkvar	(x,	1);
	MakeComm	(0X6CE1,	"0");
	MakeCode	(x=0X6CE1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X6CE7,	"0");
	MakeCode	(x=0X6CE7);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6CEB);
	OpDecimal	(x,	0);
	MakeCode	(x=0X6CED);
	OpDecimal	(x,	0);
	MakeCode	(x=0X6CF6);
	OpHex		(x,	1);
	MakeComm	(0X6CF9,	"fail");
	MakeCode	(x=0X6CFE);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeName	(0X6CFE,	"check_lba_disk_size");
	MakeCode	(x=0X6D02);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6D08);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6D0E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6D1A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X6D1F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6D22);
	OpHex		(x,	1);
	MakeCode	(x=0X6D24);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6D27);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X6D2D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6D30);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6D33);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6D39);
	OpHex		(x,	1);
	MakeCode	(x=0X6D3C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X6D43);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6D4B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X6D52);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X6D57);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6D5A);
	OpHex		(x,	1);
	MakeCode	(x=0X6D5C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6D5F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6D62);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6D65);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6D6A);
	OpHex		(x,	1);
	MakeCode	(x=0X6D6D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6D70);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6D73);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6D77);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X6D7B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6D7E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6D82);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X6D87);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6D95);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6D9C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6D9F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6DA2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6DA5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6DA8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6DAB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6DAE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6DB4);
	OpHex		(x,	1);
	MakeCode	(x=0X6DB7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6DBD);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6DC0);
	OpHex		(x,	1);
	MakeCode	(x=0X6DC6);
	OpHex		(x,	1);
	MakeCode	(x=0X6DCD);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6DD3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X6DDD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6DE3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6DE6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6DEB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6DEE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6DF3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6DF8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6DFD);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6E00);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6E06);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X6E14);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6E17);
	OpStkvar	(x,	1);
	MakeComm	(0X6E1A,	"DISK - READ SECTORS INTO MEMORY\nAL = number of sectors to read, CH = track, CL = sector\nDH = head, DL = drive, ES:BX -> buffer to fill\nReturn: CF set on error, AH = status, AL = number of sectors read");
	MakeCode	(x=0X6E1A);
	OpHex		(x,	0);
	MakeCode	(x=0X6E1E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6E21);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6E27);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6E2D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6E35);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6E3A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6E40);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6E44);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6E48);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6E4D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6E50);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6E53);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6E56);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6E5B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6E5E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6E61);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6E64);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6E72);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6E75);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6E78);
	OpStkvar	(x,	1);
	MakeComm	(0X6E7D,	"DISK - ");
	MakeCode	(x=0X6E7D);
	OpHex		(x,	0);
	MakeCode	(x=0X6E83);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6E86);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6E8C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6E8F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6E97);
	OpStkvar	(x,	1);
	MakeCode	(0X6EA7);
	MakeByte	(0X6EAC);
	MakeArray	(0X6EAC,	0X2);
	MakeCode	(x=0X6EAE);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X6EB2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6EB6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6EBA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6EC1);
	OpHex		(x,	1);
	MakeCode	(x=0X6EC4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6EC7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6ED1);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X6EDB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6EDE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6EE5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X6EF0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6EF3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6EFA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6EFE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F01);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F07);
	OpHex		(x,	1);
	MakeCode	(x=0X6F0A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F0D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F11);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F14);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F17);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F1A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F1D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F23);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F29);
	OpHex		(x,	1);
	MakeCode	(x=0X6F2C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F2F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F32);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F38);
	OpHex		(x,	1);
	MakeCode	(x=0X6F3B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F41);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F47);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F4A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F57);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F5A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F61);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X6F6C);
	MakeCode	(0X6F70);
	MakeName	(0X6F70,	"sectors_to_cylinders");
	MakeCode	(x=0X6F74);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6F7D);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6F83);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X6F8B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F8E);
	OpStkvar	(x,	0);
	MakeCode	(0X6F98);
	MakeName	(0X6F98,	"DiskIo");
	MakeCode	(x=0X6F9B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6F9E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FA1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FAC);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X6FB0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FB7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FBA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FC0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FC5);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6FC8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6FCB);
	OpHex		(x,	1);
	MakeCode	(x=0X6FD2);
	OpHex		(x,	1);
	MakeComm	(0X6FD5,	"DOS - 2+ - IOCTL - ");
	MakeCode	(x=0X6FD5);
	OpHex		(x,	0);
	MakeCode	(x=0X6FDA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FDE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FE4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X6FE7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X6FFC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7007);
	OpStkvar	(x,	1);
	MakeCode	(0X7011);
	MakeByte	(0X7014);
	MakeArray	(0X7014,	0X2);
	MakeName	(0X7014,	"disk_addr_packet");
	MakeWord	(0X7016);
	MakeName	(0X7016,	"dap_num_blocks");
	MakeWord	(0X7018);
	MakeName	(0X7018,	"dap_buffer_off");
	MakeWord	(0X701A);
	MakeName	(0X701A,	"dap_buffer_seg");
	MakeWord	(0X701C);
	MakeName	(0X701C,	"dap_lba_lw");
	MakeWord	(0X701E);
	MakeName	(0X701E,	"dap_lba_hw");
	MakeByte	(0X7020);
	MakeArray	(0X7020,	0X4);
	MakeCode	(0X7024);
	MakeName	(0X7024,	"disk_rw");
	MakeCode	(x=0X7029);
	OpStkvar	(x,	1);
	MakeComm	(0X702C,	"0 = hd0, 1 = hd1 ..");
	MakeCode	(x=0X702C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7033);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7039);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X703D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7046);
	OpHex		(x,	1);
	MakeCode	(x=0X7048);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X705E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7071);
	OpStkvar	(x,	1);
	MakeCode	(x=0X707F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7088);
	OpStkvar	(x,	1);
	MakeCode	(x=0X708B);
	OpHex		(x,	1);
	MakeCode	(x=0X708E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7091);
	OpHex		(x,	1);
	MakeCode	(x=0X709B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X709E,	"DISK - ");
	MakeCode	(x=0X709E);
	OpHex		(x,	0);
	MakeCode	(0X70A5);
	MakeCode	(x=0X70A6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70A9);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70AC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70B1);
	OpHex		(x,	1);
	MakeCode	(x=0X70B3);
	OpHex		(x,	1);
	MakeCode	(x=0X70B5);
	OpHex		(x,	1);
	MakeCode	(x=0X70BA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70BD);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70C0);
	OpHex		(x,	1);
	MakeCode	(x=0X70C3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70C6);
	OpStkvar	(x,	1);
	MakeComm	(0X70CA,	"DISK - ");
	MakeCode	(x=0X70CA);
	OpHex		(x,	0);
	MakeComm	(0X70D0,	"no error (successed)");
	MakeComm	(0X70D4,	"error code");
	MakeCode	(0X70D4);
	MakeComm	(0X70DC,	"0 -> 1");
	MakeCode	(0X70E4);
	MakeName	(0X70E4,	"mul32_64");
	MakeCode	(x=0X70E7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70EB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70F2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X70FC);
	OpDecimal	(x,	1);
	MakeCode	(0X7104);
	MakeName	(0X7104,	"div64_32");
	MakeCode	(x=0X7107);
	OpStkvar	(x,	1);
	MakeCode	(x=0X710B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X710F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7116);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7120);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7128);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X7128,	"write_info_to_disk");
	MakeCode	(x=0X712D);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X7134);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7137);
	OpStkvar	(x,	0);
	MakeCode	(x=0X713E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7141);
	OpStkvar	(x,	0);
	MakeComm	(0X7147,	"Partition number");
	MakeCode	(x=0X7147);
	OpStkvar	(x,	1);
	MakeComm	(0X714B,	"Disk number");
	MakeCode	(x=0X714B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7150);
	OpHex		(x,	1);
	MakeComm	(0X7155,	"bx = cx*48");
	MakeCode	(x=0X7155);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7158);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X715F);
	OpStkvar	(x,	1);
	MakeComm	(0X7166,	"\nSee if the extended partition exists\n- if not, don't fool with the logical drives");
	MakeComm	(0X7167,	"extended dos partition (CHS)");
	MakeComm	(0X716F,	"found");
	MakeComm	(0X7171,	"extended dos partition (LBA)");
	MakeComm	(0X7179,	"found");
	MakeComm	(0X717E,	"0\nSee if any extended partitions need to be updated");
	MakeCode	(0X717E);
	MakeComm	(0X7180,	"FALSE, reset changed flag");
	MakeCode	(x=0X7180);
	OpStkvar	(x,	0);
	MakeComm	(0X7183,	"0");
	MakeCode	(x=0X7183);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7188);
	OpStkvar	(x,	0);
	MakeCode	(x=0X718B);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7191);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7197);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7199);
	OpStkvar	(x,	1);
	MakeComm	(0X719E,	"bx = cx*48");
	MakeCode	(x=0X719E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X71A1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X71A8,	"TRUE");
	MakeCode	(x=0X71A8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X71AC);
	OpStkvar	(x,	0);
	MakeComm	(0X71B5,	"First,get them in order - \ndrive letters are assigned in the order\nthat they exist on the disk");
	MakeCode	(x=0X71B5);
	OpDecimal	(x,	0);
	MakeCode	(x=0X71BB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X71BF);
	OpDecimal	(x,	1);
	MakeComm	(0X71C1,	"Disk (0 to 7)");
	MakeCode	(x=0X71C1);
	OpStkvar	(x,	1);
	MakeComm	(0X71C6,	"Logical drive (0 to 22)");
	MakeCode	(x=0X71C6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71CC);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X71D3,	"bx = cx*48");
	MakeCode	(x=0X71D3);
	OpDecimal	(x,	1);
	MakeCode	(x=0X71D6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X71DB,	"Empty partition");
	MakeCode	(x=0X71DD);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71E1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X71E8);
	OpHex		(x,	1);
	MakeCode	(x=0X71EB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X71EE);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeComm	(0X71F2,	"\nFind start of extended partition");
	MakeCode	(x=0X71F7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X71FB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7200);
	OpHex		(x,	1);
	MakeCode	(x=0X7205);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7208);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X720C,	"\nSee if the first entry in EXTENDED DOS partition\nwill be written out.\nNeed to find the first drive in the sorted list");
	MakeCode	(x=0X720C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X720F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7215);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7218);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X721E);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7220);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7225);
	OpStkvar	(x,	1);
	MakeCode	(x=0X722B);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7234);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7237);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X723E,	"\nSee if drive written out\nCheck for the special case when the volume\nis deleted and write out only a pointer for it");
	MakeCode	(x=0X723E);
	OpStkvar	(x,	0);
	MakeComm	(0X7241,	"255\nif ((temp == c(0xff)) ||\n(extended_location != ext_table[j][temp].start_cyl))");
	MakeCode	(x=0X7241);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X7247);
	OpStkvar	(x,	1);
	MakeCode	(x=0X724D);
	OpDecimal	(x,	1);
	MakeCode	(x=0X724F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7254);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7257);
	OpStkvar	(x,	1);
	MakeCode	(x=0X725A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X7260,	"If not, make a special case and go do it.\nUse the 24 entry in the array to set up a dummy entry.\nThis one isn't used for anything else indicate\nthis is special by passing along a deleted entry - \nthe subroutine will catch it and handle correctly.");
	MakeCode	(x=0X7260);
	OpStkvar	(x,	1);
	MakeComm	(0X7265,	"bx = ax*(48*28)");
	MakeCode	(x=0X7265);
	OpDecimal	(x,	1);
	MakeComm	(0X7269,	"ah = 0");
	MakeCode	(x=0X7269);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X726D);
	OpHex		(x,	1);
	MakeCode	(x=0X7272);
	OpStkvar	(x,	1);
	MakeComm	(0X7278,	"si = cx*48");
	MakeCode	(x=0X7278);
	OpDecimal	(x,	1);
	MakeCode	(x=0X727B);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X727F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7283);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X7288,	"\nWrite out our modified first location -\nonly pointer info will be sent to the disk");
	MakeCode	(x=0X7288);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X728D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7291);
	OpDecimal	(x,	0);
	MakeCode	(x=0X7296);
	OpHex		(x,	1);
	MakeComm	(0X7299,	"next disk");
	MakeCode	(x=0X7299);
	OpStkvar	(x,	0);
	MakeComm	(0X729C,	"See if need to update the master boot record");
	MakeCode	(x=0X729F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X72A4);
	OpStkvar	(x,	1);
	MakeComm	(0X72AC,	"0\nSee if there were any errors on that drive");
	MakeCode	(x=0X72AE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X72B4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X72BA);
	OpStkvar	(x,	1);
	MakeName	(0X72BA,	"witd_17");
	MakeCode	(x=0X72C4);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X72C4,	"write_master_boot_to_disk");
	MakeCode	(x=0X72CA);
	OpStkvar	(x,	0);
	MakeCode	(0X72D1);
	MakeCode	(x=0X72D5);
	OpHex		(x,	1);
	MakeCode	(x=0X72D8);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X72DC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X72E0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X72E3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X72E6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X72EF);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X72F5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X72F8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X72FF);
	OpHex		(x,	1);
	MakeCode	(x=0X7302);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7307);
	OpHex		(x,	1);
	MakeCode	(x=0X730C);
	OpDecimal	(x,	1);
	MakeCode	(x=0X730F);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X7318);
	MakeCode	(x=0X731A);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X731E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7322);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7326);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X732A);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7330);
	OpHex		(x,	1);
	MakeCode	(x=0X7335);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7339);
	OpHex		(x,	1);
	MakeCode	(x=0X733E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7342);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7346);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X734A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X734E);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7352);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7356);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X735C);
	OpHex		(x,	1);
	MakeCode	(x=0X7361);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7365);
	OpHex		(x,	1);
	MakeCode	(x=0X7369);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X736D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7371);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7375);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7381);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7385);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7388);
	OpStkvar	(x,	0);
	MakeCode	(x=0X738D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7391);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7394);
	OpStkvar	(x,	1);
	MakeCode	(x=0X739E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X73A2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73A5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X73A9);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X73AD);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X73B9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X73BD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X73C1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73CB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X73CF);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73D2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X73D6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73D9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73E2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73E6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X73EB);
	OpHex		(x,	1);
	MakeCode	(x=0X73EE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73F1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X73F7);
	OpHex		(x,	1);
	MakeCode	(x=0X73FC);
	OpHex		(x,	1);
	MakeCode	(x=0X7401);
	OpStkvar	(x,	1);
	MakeCode	(x=0X740A);
	OpHex		(x,	1);
	MakeCode	(x=0X7412);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X7412,	"write_ext_boot_to_disk");
	MakeCode	(x=0X7418);
	OpStkvar	(x,	0);
	MakeCode	(0X741F);
	MakeCode	(x=0X7421);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7426);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7429);
	OpStkvar	(x,	1);
	MakeCode	(x=0X742C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7433);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7439);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7442);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7444);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7449);
	OpStkvar	(x,	1);
	MakeCode	(x=0X744F);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7456);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7459);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7463);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X746A);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7471);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7477);
	OpHex		(x,	1);
	MakeCode	(x=0X747C);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7480);
	OpHex		(x,	1);
	MakeCode	(x=0X748C);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7493);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X749A);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X74A0);
	OpHex		(x,	1);
	MakeCode	(x=0X74A5);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X74A9);
	OpHex		(x,	1);
	MakeCode	(x=0X74B5);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X74B9);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X74D0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X74D3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X74E4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X74EA);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X74EE);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X74F2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X74F5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7508);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7515);
	OpStkvar	(x,	1);
	MakeCode	(x=0X751B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7524);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7529);
	OpStkvar	(x,	0);
	MakeCode	(x=0X752C);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7532);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7536);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7539);
	OpStkvar	(x,	0);
	MakeCode	(x=0X753E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7541);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7547);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X754B);
	OpDecimal	(x,	1);
	MakeCode	(x=0X754D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7552);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7558);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7564);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X756B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X756E);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(0X7577);
	MakeCode	(x=0X757F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7583);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7590);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7596);
	OpHex		(x,	1);
	MakeCode	(x=0X7599);
	OpHex		(x,	1);
	MakeCode	(x=0X759B);
	OpHex		(x,	1);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_2(void) {
        auto x;
#define id x

	MakeCode	(x=0X75A9);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X75B2);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X75B8);
	OpHex		(x,	1);
	MakeCode	(x=0X75BB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X75C2);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X75C6);
	OpHex		(x,	1);
	MakeCode	(x=0X75DC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X75DF);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X75E9);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X75F3);
	OpStkvar	(x,	1);
	MakeCode	(x=0X75F7);
	OpHex		(x,	1);
	MakeCode	(x=0X75FC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7601);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7604);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7607);
	OpStkvar	(x,	0);
	MakeCode	(x=0X760A);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7610);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7618);
	OpStkvar	(x,	0);
	MakeCode	(x=0X761B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7636);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7643);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7649);
	OpStkvar	(x,	0);
	MakeCode	(x=0X764C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X764F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7652);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7655);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7658);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X766A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X766D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7678);
	OpStkvar	(x,	1);
	MakeCode	(x=0X767E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7681);
	OpStkvar	(x,	1);
	MakeCode	(x=0X768C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7692);
	OpHex		(x,	1);
	MakeCode	(x=0X7697);
	OpHex		(x,	1);
	MakeCode	(x=0X769C);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X76A2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X76AC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X76B2);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X76B9);
	OpDecimal	(x,	1);
	MakeCode	(x=0X76BC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X76C2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X76C8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X76CC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X76D3);
	OpHex		(x,	1);
	MakeCode	(x=0X76DA);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X76DA,	"preload_messages");
	MakeComm	(0X76DE,	"message_flag = c(TRUE);");
	MakeCode	(x=0X76DE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X76E2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X76E5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X76E8,	"sysloadmsg(&regs,&regs);");
	MakeCode	(x=0X76EB);
	OpHex		(x,	1);
	MakeComm	(0X76EE,	"if ((regs.x.cflag & CARRY_FLAG) == CARRY_FLAG)");
	MakeCode	(x=0X76F1);
	OpHex		(x,	1);
	MakeComm	(0X76F7,	"msgclass");
	MakeComm	(0X76F9,	"0=no input, else input func");
	MakeComm	(0X76FB,	"offset of sublist");
	MakeComm	(0X76FD,	"number of substitution parms");
	MakeComm	(0X76FF,	"output device");
	MakeComm	(0X7701,	"message number");
	MakeCode	(x=0X7701);
	OpDecimal	(x,	0);
	MakeComm	(0X7704,	"sysdispmsg(&regs,&regs);");
	MakeComm	(0X7707,	"message_flag = FALSE;");
	MakeCode	(x=0X7707);
	OpStkvar	(x,	0);
	MakeComm	(0X770B,	"return(message_flag);");
	MakeCode	(x=0X770B);
	OpStkvar	(x,	1);
	MakeComm	(0X7710,	"display_msg(msgnum,msghan,msgparms,msgsub,msginput,msgclass)");
	MakeCode	(0X7710);
	MakeName	(0X7710,	"display_msg");
	MakeCode	(x=0X7713);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7719);
	OpStkvar	(x,	1);
	MakeCode	(x=0X771F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7725);
	OpStkvar	(x,	1);
	MakeCode	(x=0X772B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7731);
	OpStkvar	(x,	1);
	MakeComm	(0X7737,	"&regs (input)");
	MakeCode	(x=0X7737);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X773A,	"&regs (output)");
	MakeCode	(x=0X773A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X7742,	"char get_yes_no_values()  \n\nchar message_flag\nchar far *msg_buff");
	MakeCode	(x=0X7742);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X7742,	"get_yes_no_values");
	MakeComm	(0X7746,	"message_flag = c(TRUE);");
	MakeCode	(x=0X7746);
	OpStkvar	(x,	0);
	MakeComm	(0X774A,	"msg number of 'YesMsg;'");
	MakeCode	(x=0X774A);
	OpHex		(x,	1);
	MakeComm	(0X7750,	"regs.h.dh = uc(utility_msg_class);");
	MakeCode	(x=0X7755);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7758);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X775B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X775E,	"sysgetmsg(&regs,&segregs,&regs);");
	MakeCode	(x=0X7761);
	OpHex		(x,	1);
	MakeCode	(x=0X7767);
	OpStkvar	(x,	0);
	MakeCode	(x=0X776D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7770);
	OpStkvar	(x,	1);
	MakeCode	(x=0X777C);
	OpHex		(x,	1);
	MakeCode	(x=0X7782);
	OpHex		(x,	1);
	MakeCode	(x=0X778D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7790);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7793);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7799);
	OpHex		(x,	1);
	MakeCode	(x=0X779F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77A5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77A8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77B4);
	OpHex		(x,	1);
	MakeCode	(x=0X77BA);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X77BD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X77C3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X77C7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X77CC);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X77CC,	"get_msg_addr");
	MakeCode	(x=0X77D0);
	OpStkvar	(x,	1);
	MakeComm	(0X77D6,	"UTILITY_CLASS");
	MakeCode	(x=0X77DB);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X77DE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X77E1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X77E7);
	OpHex		(x,	1);
	MakeCode	(x=0X77ED);
	OpHex		(x,	1);
	MakeComm	(0X77F6,	"message offset");
	MakeCode	(x=0X77F6);
	OpStkvar	(x,	0);
	MakeComm	(0X77FC,	"message segmnet");
	MakeCode	(x=0X77FC);
	OpStkvar	(x,	0);
	MakeCode	(0X7801);
	MakeCode	(x=0X7803);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7806);
	OpStkvar	(x,	0);
	MakeComm	(0X7809,	"message offset");
	MakeCode	(x=0X7809);
	OpStkvar	(x,	1);
	MakeComm	(0X780C,	"message segment");
	MakeCode	(x=0X780C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7812);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeName	(0X7812,	"parse_command_line");
	MakeComm	(0X781A,	"TRUE");
	MakeCode	(x=0X781A);
	OpStkvar	(x,	0);
	MakeComm	(0X781F,	"Get PSP address");
	MakeCode	(x=0X781F);
	OpHex		(x,	1);
	MakeCode	(x=0X7824);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7827);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X782A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7830);
	OpHex		(x,	1);
	MakeComm	(0X7833,	"command tail offset");
	MakeCode	(x=0X7833);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeComm	(0X7839,	"segment address of current process");
	MakeCode	(x=0X783C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7840);
	OpStkvar	(x,	0);
	MakeCode	(0X7848);
	MakeCode	(x=0X784B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X784F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7852);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7856);
	OpStkvar	(x,	0);
	MakeCode	(x=0X785A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7864);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7868);
	OpStkvar	(x,	0);
	MakeCode	(x=0X786C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7870);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7874);
	OpStkvar	(x,	0);
	MakeCode	(x=0X787B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X787F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X788F);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7898);
	OpStkvar	(x,	0);
	MakeCode	(x=0X78A2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X78A5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X78AB);
	OpHex		(x,	1);
	MakeComm	(0X78B3,	"AX = Error Code (0 = No error)");
	MakeCode	(x=0X78B5);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X78C0);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X78CD);
	OpHex		(x,	1);
	MakeComm	(0X78D2,	"Empty command tail (CR after file name).");
	MakeComm	(0X78D4,	"Message_Type ; PARSE_ERR_CLASS = 2");
	MakeComm	(0X78D6,	"Handle ; STDERR = 2");
	MakeComm	(0X78D8,	"Msg_Num  ; Error Number = [_$P_RC]");
	MakeCode	(x=0X78DF);
	OpHex		(x,	1);
	MakeComm	(0X78E2,	"FALSE");
	MakeCode	(x=0X78E2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X78E7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X78EC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X78F3);
	OpStkvar	(x,	1);
	MakeCode	(0X78FA);
	MakeName	(0X78FA,	"parse_init");
	MakeCode	(x=0X7923);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7929);
	OpChr		(x,	1);
	MakeCode	(x=0X7939);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X793F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7944);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X794A);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7950);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7956);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X795C);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7962);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7968);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X796E);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7974);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X797A);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X798E);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7994);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X79B4);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X79BA);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X79C5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X79C8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X79CE);
	OpHex		(x,	1);
	MakeCode	(x=0X79D1);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X79D4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X79DA);
	OpHex		(x,	1);
	MakeCode	(x=0X79DD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X79E0);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X79E6);
	OpHex		(x,	1);
	MakeCode	(x=0X79E9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X79EC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X79F2);
	OpHex		(x,	1);
	MakeCode	(x=0X79F5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X79F8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X79FE);
	OpHex		(x,	1);
	MakeCode	(x=0X7A0D);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7A1E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7A21);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7A27);
	OpHex		(x,	1);
	MakeCode	(x=0X7A36);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7A47);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7A4A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7A50);
	OpHex		(x,	1);
	MakeCode	(x=0X7A5B);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7A6E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7A71);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7A77);
	OpHex		(x,	1);
	MakeCode	(x=0X7A86);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7A97);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7A9A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7AA0);
	OpHex		(x,	1);
	MakeCode	(x=0X7AAF);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7AC0);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7AC3);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7AC9);
	OpHex		(x,	1);
	MakeCode	(x=0X7AD8);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7AE9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7AEC);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7AF2);
	OpHex		(x,	1);
	MakeCode	(x=0X7B01);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7B12);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7B15);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7B1B);
	OpHex		(x,	1);
	MakeCode	(x=0X7B2A);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7B3B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7B3E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7B44);
	OpHex		(x,	1);
	MakeCode	(x=0X7B53);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7B64);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7B67);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7B6D);
	OpHex		(x,	1);
	MakeCode	(0X7BB0);
	MakeName	(0X7BB0,	"check_disk_validity");
	MakeCode	(x=0X7BBE);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeName	(0X7BBE,	"process_switch");
	MakeCode	(x=0X7BD1);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7BE7);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7BFA);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7C0D);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7C23);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7C30);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7C3D);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7C48);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7C55);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7C62);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7C6F);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7C7C);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7C89);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X7C98,	"Parse_msg(Msg_Num,Handle,Message_Type)");
	MakeCode	(x=0X7C98);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X7C98,	"Parse_msg");
	MakeCode	(x=0X7C9C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X7C9F,	"segread(&segregs);");
	MakeComm	(0X7CA2,	"FP_SEG(Cmd_Ptr) = segregs.ds;");
	MakeComm	(0X7CA3,	"FP_OFF(Cmd_Ptr) = regs.x.si;");
	MakeCode	(x=0X7CA6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7CAC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7CAF);
	OpStkvar	(x,	1);
	MakeComm	(0X7CB9,	"FP_SEG(sublistp[0].value) = segregs.ds;");
	MakeComm	(0X7CBC,	"FP_OFF(sublistp[0].value) = Parse_Ptr;");
	MakeComm	(0X7CC2,	"sublistp[0].size");
	MakeCode	(x=0X7CC2);
	OpDecimal	(x,	1);
	MakeComm	(0X7CC7,	"sublistp[0].flags\n  = Char_Field_ASCIIZ+Left_Align;");
	MakeComm	(0X7CCC,	"sublistp[0].max_width");
	MakeCode	(x=0X7CCC);
	OpDecimal	(x,	1);
	MakeComm	(0X7CD1,	"sublistp[0].min_width");
	MakeComm	(0X7CD6,	"sublistp[0].pad_char = Blank;");
	MakeCode	(x=0X7CDB);
	OpStkvar	(x,	1);
	MakeComm	(0X7CDE,	"regs.x.ax = Msg_Num");
	MakeCode	(x=0X7CE1);
	OpStkvar	(x,	1);
	MakeComm	(0X7CE4,	"regs.x.bx = Handle;");
	MakeComm	(0X7CE7,	"regs.x.cx = SubCnt1;");
	MakeComm	(0X7CED,	"0");
	MakeComm	(0X7CF5,	"regs.h.dl = No_Input;");
	MakeCode	(x=0X7CF8);
	OpStkvar	(x,	1);
	MakeComm	(0X7CFB,	"regs.h.dh = Message_Type;");
	MakeComm	(0X7CFE,	"regs.x.si\n     = (unsigned int)&sublistp[0];");
	MakeCode	(x=0X7CFE);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7D04);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7D07);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X7D0A,	"sysdispmsg(&regs,&regs);");
	MakeComm	(0X7D10,	"Displays the options help message \nlines onto standard output, and then\nexits the program so the user can\nretry the command.");
	MakeCode	(x=0X7D10);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X7D10,	"DisplayOptionsExit");
	MakeComm	(0X7D14,	"MSG_OPTIONS_FIRST");
	MakeCode	(x=0X7D14);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7D19);
	OpStkvar	(x,	1);
	MakeComm	(0X7D1C,	"/* message # */");
	MakeComm	(0X7D1F,	"STDOUT ; /* output handle */");
	MakeComm	(0X7D25,	"SUBCNT0 ; /* # of subs */");
	MakeComm	(0X7D2B,	"No_Input ; /* input flag */");
	MakeComm	(0X7D30,	"UTILITY_MSG_CLASS\n/* message class */");
	MakeComm	(0X7D3B,	"&outregs");
	MakeCode	(x=0X7D3B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X7D3E,	"&inregs");
	MakeCode	(x=0X7D3E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7D44);
	OpHex		(x,	1);
	MakeCode	(x=0X7D47);
	OpStkvar	(x,	0);
	MakeComm	(0X7D4A,	"MSG_OPTIONS_LAST");
	MakeCode	(x=0X7D4A);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(0X7D56);
	MakeComm	(0X7D5A,	"mbytes_to_cylinders(mbytes_in,which_disk)\n\nThis routine will take input of MBtes and\nconvert it to cylinders rounding up to the next largest\ncylinder boundry. Rounding up is done to make sure the\nrequester is getting at least what he asked for to the\nnext cylinder boundry.");
	MakeCode	(x=0X7D5A);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeName	(0X7D5A,	"mbytes_to_cylinders");
	MakeCode	(x=0X7D5F);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7D65);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7D6B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7D70);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7D75);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7D7F);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7D85);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7D8B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7D8E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7D95);
	OpHex		(x,	0);
	MakeCode	(x=0X7D9A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7DA0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7DA5);
	OpDecimal	(x,	0);
	MakeCode	(x=0X7DA9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7DAC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7DB2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7DB5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7DB8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7DBB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7DC0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7DCA);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7DCE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7DD1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7DD4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7DD7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7DDD);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7DE0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7DE3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7DE6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7DE9);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7DEE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7DF2);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7DF6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7DFE);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7E05);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7E08);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7E10);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7E13);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7E18);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7E2B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7E2E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7E31);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7E3B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7E3F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7E48);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7E4D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7E52);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7E5B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7E5E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7E64);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X7E64,	"cylinders_to_mbytes");
	MakeCode	(x=0X7E68);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7E72);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7E76);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7E7E);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7E92);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X7E92,	"numsecs_to_mbytes");
	MakeCode	(x=0X7E96);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7E9D);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X7EA3);
	OpDecimal	(x,	0);
	MakeCode	(x=0X7EAB);
	OpHex		(x,	1);
	MakeCode	(x=0X7EAD);
	OpHex		(x,	1);
	MakeCode	(x=0X7EAF);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7EB2);
	OpStkvar	(x,	1);
	MakeComm	(0X7EBC,	"cylinders_to_percent(cylinders_in,total_cylinders)\n\n/* This is the same as (cyl_in / tot_cyl) * 100\n   to get the percentage */\n/* because * 100 is really 100/1 which is \n   (cyl_in*100)/(tot_cyl*1). */");
	MakeCode	(x=0X7EBC);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X7EBC,	"cylinders_to_percent");
	MakeCode	(x=0X7EC0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7EC6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7ECD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7ED5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7ED8);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7EDB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7EE3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7EE8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7EEB);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7EEE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7EF6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7EF9);
	OpHex		(x,	1);
	MakeCode	(x=0X7EFF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7F02);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7F08);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7F0D);
	OpStkvar	(x,	1);
	MakeComm	(0X7F12,	"mbytes_to_percent(mbytes_used, total_cap)\n\nif (mbytes_used) {\n    large_number = ( mbytes_used * 100L ) +total_cap/2;\n    percentage_out = (unsigned) (large_number/total_cap);\n    if (percentage_out > u(100)) percentage_out = u(100);\n}\nelse percentage_out = 0;\nreturn(percentage_out);");
	MakeCode	(x=0X7F12);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X7F12,	"mbytes_to_percent");
	MakeCode	(x=0X7F16);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7F19);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7F20);
	OpDecimal	(x,	0);
	MakeCode	(x=0X7F22);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7F25);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7F2B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7F2E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7F31);
	OpHex		(x,	1);
	MakeCode	(x=0X7F33);
	OpHex		(x,	1);
	MakeCode	(x=0X7F39);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7F3C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7F44);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7F47);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7F4C);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X7F53);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7F58);
	OpStkvar	(x,	1);
	MakeComm	(0X7F5E,	"percent_to_cylinders(percent_in,total_cylinders)\n\nThis routine will take input of percentage and\nconvert it to cylinders rounding up to the next largest\ncylinder boundry. Rounding up is done to make sure the\nrequester is getting at least what he asked for to the\nnext cylinder boundry.");
	MakeCode	(x=0X7F5E);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X7F5E,	"percent_to_cylinders");
	MakeCode	(x=0X7F66);
	OpDecimal	(x,	0);
	MakeCode	(x=0X7F68);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7F6B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7F77);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7F7C);
	OpDecimal	(x,	0);
	MakeCode	(x=0X7F8C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7F8F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7F96);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X7F96,	"dos_upper");
	MakeCode	(x=0X7FA0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7FA6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7FA9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7FAC);
	OpHex		(x,	0);
	MakeCode	(x=0X7FB6);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X7FB6,	"check_yn_input");
	MakeCode	(x=0X7FC0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7FC6);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7FC9);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X7FCC);
	OpHex		(x,	0);
	MakeCode	(x=0X7FD1);
	OpHex		(x,	1);
	MakeCode	(x=0X7FD7);
	OpHex		(x,	1);
	MakeCode	(x=0X7FDD);
	OpStkvar	(x,	0);
	MakeCode	(0X7FE3);
	MakeCode	(x=0X7FE6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X7FE9);
	OpStkvar	(x,	1);
	MakeCode	(x=0X7FEE);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X7FEE,	"get_fs_and_vol");
	MakeCode	(x=0X7FF2);
	OpHex		(x,	1);
	MakeCode	(x=0X7FFD);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8000);
	OpHex		(x,	1);
	MakeCode	(x=0X8005);
	OpHex		(x,	1);
	MakeCode	(x=0X800B);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X8011);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X8018);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X801B);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X801E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X8024);
	OpHex		(x,	1);
	MakeCode	(x=0X802A);
	OpHex		(x,	1);
	MakeCode	(x=0X8030);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8036);
	OpStkvar	(x,	0);
	MakeCode	(x=0X803A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8040);
	OpDecimal	(x,	0);
	OpHex		(x,	1);
	MakeName	(0X8040,	"get_volume_string");
	MakeCode	(x=0X8045);
	OpStkvar	(x,	0);
	MakeCode	(x=0X804A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X804D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8053);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8056);
	OpStkvar	(x,	0);
	OpDecimal	(x,	1);
	MakeCode	(x=0X8061);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8067);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X806E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X8071);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X8074);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X807A);
	OpHex		(x,	1);
	MakeCode	(x=0X807D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8080);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8083);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8087);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X808A);
	OpStkvar	(x,	1);
	MakeComm	(0X808E,	"strcat(first_string,FILE_NAME);");
	MakeCode	(x=0X8091);
	OpHex		(x,	1);
	MakeCode	(x=0X8094);
	OpHex		(x,	1);
	MakeCode	(x=0X809F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X80A5);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X80A8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X80AE);
	OpHex		(x,	1);
	MakeCode	(x=0X80B4);
	OpHex		(x,	1);
	MakeCode	(x=0X80BC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X80BF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X80C4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X80C9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X80CC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X80D4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X80D9);
	OpStkvar	(x,	1);
	MakeCode	(x=0X80DC);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X80E2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X80E7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X80EA);
	OpStkvar	(x,	1);
	MakeCode	(0X80F1);
	MakeComm	(0X80F4,	"check_format(input_drive)");
	MakeCode	(x=0X80F4);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X80F4,	"_check_format_");
	MakeCode	(x=0X80F8);
	OpStkvar	(x,	0);
	OpChr		(x,	1);
	MakeCode	(x=0X80FE);
	OpStkvar	(x,	0);
	OpChr		(x,	1);
	MakeCode	(x=0X8104);
	OpHex		(x,	1);
	MakeCode	(x=0X810F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8112);
	OpHex		(x,	1);
	MakeCode	(x=0X8117);
	OpHex		(x,	1);
	MakeCode	(x=0X811D);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X8123);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X812A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X812D);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X8130);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X8136);
	OpHex		(x,	1);
	MakeCode	(x=0X8140);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8146);
	OpStkvar	(x,	0);
	MakeCode	(x=0X814A);
	OpStkvar	(x,	1);
	MakeComm	(0X8150,	"parse(&inregs,&outregs);");
	MakeCode	(0X8150);
	MakeName	(0X8150,	"parse");
	MakeComm	(0X8155,	"fix di (arg 0)");
	MakeCode	(x=0X8155);
	OpStkvar	(x,	1);
	MakeComm	(0X8158,	"load di");
	MakeComm	(0X815C,	"get inregs.x.ax");
	MakeComm	(0X8167,	"get inregs.x.si");
	MakeComm	(0X816A,	"get inregs.x.di from stack");
	MakeComm	(0X8173,	"fix di (arg 1)");
	MakeCode	(x=0X8173);
	OpStkvar	(x,	1);
	MakeComm	(0X8176,	"load outregs.x.ax");
	MakeComm	(0X8181,	"load outregs.x.si");
	MakeComm	(0X8186,	"get flags into ax");
	MakeComm	(0X8187,	"load outregs.x.cflag");
	MakeComm	(0X818A,	"get di from stack");
	MakeComm	(0X818B,	"load outregs.x.di");
	MakeCode	(0X8194);
	MakeName	(0X8194,	"int_24h");
	MakeCode	(0X8197);
	MakeName	(0X8197,	"set_err_handler_int");
	MakeCode	(x=0X819F);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X81A2);
	OpHex		(x,	1);
	MakeComm	(0X81A5,	"DOS - SET INTERRUPT VECTOR\nAL = interrupt number\nDS:DX = new vector to be used for specified interrupt");
	MakeCode	(x=0X81A5);
	OpHex		(x,	0);
	MakeCode	(0X81AE);
	MakeName	(0X81AE,	"sysdispmsg");
	MakeCode	(0X81B4);
	MakeName	(0X81B4,	"sysloadmsg");
	MakeComm	(0X81BA,	"sysgetmsg(&regs,&segregs,&regs);");
	MakeCode	(0X81BA);
	MakeName	(0X81BA,	"sysgetmsg");
	MakeCode	(x=0X81C0);
	OpHex		(x,	1);
	MakeName	(0X81C0,	"start");
	MakeComm	(0X81C2,	"DOS - GET DOS VERSION\nReturn: AL = major version number (00h for DOS 1.x)");
	MakeCode	(x=0X81C2);
	OpHex		(x,	0);
	MakeCode	(x=0X81CD);
	OpSeg		(x,	1);
	MakeName	(0X81CD,	"setup");
	MakeCode	(x=0X81D6);
	OpHex		(x,	1);
	MakeCode	(x=0X81DC);
	OpHex		(x,	1);
	MakeName	(0X81DF,	"setSP");
	MakeCode	(x=0X81E2);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X81F4);
	OpHex		(x,	1);
	MakeComm	(0X81F7,	"DOS - 2+ - QUIT WITH EXIT CODE (EXIT)\nAL = exit code");
	MakeCode	(x=0X81F7);
	OpHex		(x,	0);
	MakeCode	(0X81F9);
	MakeName	(0X81F9,	"SPok");
	MakeCode	(x=0X820E);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X8214);
	OpHex		(x,	1);
	MakeCode	(x=0X823F);
	OpHex		(x,	1);
	MakeComm	(0X8241,	"DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)\nES = segment address of block to change\nBX = new size in paragraphs");
	MakeCode	(x=0X8241);
	OpHex		(x,	0);
	MakeCode	(x=0X824B);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X824E,	"end_of_fdisk  ; BSS start\nclear data area from _strbuf_ptr \nto end of (initialized) data");
	MakeComm	(0X8251,	"end-start = byte count");
	MakeCode	(x=0X8259);
	OpOff		(x,	1,	0XA4E0);
	OpOff		(x,	129,	0XA4E0);
	MakeName	(0X8261,	"stp_1");
	MakeCode	(0X8281);
	MakeName	(0X8281,	"stp_2");
	MakeCode	(0X8282);
	MakeCode	(x=0X828B);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeWord	(x=0X82BA);
	OpSeg		(x,	0);
	MakeCode	(x=0X82BC);
	OpHex		(x,	1);
	MakeName	(0X82BC,	"_cinit");
	MakeComm	(0X82BF,	"DOS - 2+ - GET INTERRUPT VECTOR\nAL = interrupt number\nReturn: ES:BX = value of interrupt vector");
	MakeCode	(x=0X82BF);
	OpHex		(x,	0);
	MakeCode	(x=0X82CB);
	OpHex		(x,	1);
	MakeCode	(x=0X82CE);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeComm	(0X82D1,	"DOS - SET INTERRUPT VECTOR\nAL = interrupt number\nDS:DX = new vector to be used for specified interrupt");
	MakeCode	(x=0X82D1);
	OpHex		(x,	0);
	MakeCode	(0X82FF);
	MakeCode	(0X8337);
	MakeCode	(0X8354);
	MakeCode	(x=0X8359);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X835E);
	OpHex		(x,	1);
	MakeComm	(0X8361,	"DOS - 2+ - IOCTL - GET DEVICE INFORMATION\nBX = file or device handle");
	MakeCode	(x=0X8361);
	OpHex		(x,	0);
	MakeCode	(x=0X8365);
	OpHex		(x,	1);
	MakeCode	(x=0X836A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	OpHex		(x,	1);
	MakeCode	(x=0X8372);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X8375);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X837B);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X837E);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X8384);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X8387);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(0X838E);
	MakeName	(0X838E,	"_exit");
	MakeCode	(0X8395);
	MakeName	(0X8395,	"_exit_");
	MakeCode	(0X839D);
	MakeCode	(0X83A7);
	MakeCode	(x=0X83AC);
	OpHex		(x,	1);
	MakeCode	(x=0X83B8);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X83BB);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X83C1);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X83C4);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X83CA);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X83CD);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X83DF);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X83E2);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X83E8);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X83EB);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X83FE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8404);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8411);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8414);
	OpHex		(x,	1);
	MakeComm	(0X8416,	"DOS - 2+ - QUIT WITH EXIT CODE (EXIT)\nAL = exit code");
	MakeCode	(x=0X8416);
	OpHex		(x,	0);
	MakeCode	(0X8418);
	MakeCode	(0X841C);
	MakeName	(0X841C,	"_ctermsub");
	MakeCode	(x=0X842E);
	OpHex		(x,	1);
	MakeComm	(0X8431,	"DOS - SET INTERRUPT VECTOR\nAL = interrupt number\nDS:DX = new vector to be used for specified interrupt");
	MakeCode	(x=0X8431);
	OpHex		(x,	0);
	MakeCode	(0X8435);
	MakeName	(0X8435,	"initterm");
	MakeCode	(0X8443);
	MakeCode	(0X8444);
	MakeName	(0X8444,	"farinitterm");
	MakeCode	(0X8456);
	MakeCode	(0X8458);
	MakeName	(0X8458,	"_FF_MSGBANNER");
	MakeCode	(0X8478);
	MakeCode	(0X847E);
	MakeCode	(0X848F);
	MakeCode	(0X8496);
	MakeCode	(x=0X84A4);
	OpHex		(x,	1);
	MakeCode	(0X84B8);
	MakeName	(0X84B8,	"_setargv");
	MakeCode	(0X8528);
	MakeCode	(0X8538);
	MakeCode	(x=0X853A);
	OpHex		(x,	1);
	MakeCode	(x=0X853E);
	OpHex		(x,	1);
	MakeCode	(0X8544);
	MakeCode	(0X8559);
	MakeCode	(0X8569);
	MakeCode	(x=0X856B);
	OpHex		(x,	1);
	MakeCode	(x=0X856F);
	OpHex		(x,	1);
	MakeCode	(0X8575);
	MakeCode	(x=0X857E);
	OpHex		(x,	1);
	MakeCode	(x=0X8583);
	OpHex		(x,	1);
	MakeCode	(0X85AC);
	MakeCode	(0X85E2);
	MakeCode	(0X85F4);
	MakeCode	(x=0X85F6);
	OpHex		(x,	1);
	MakeCode	(0X8601);
	MakeCode	(0X8616);
	MakeCode	(0X8628);
	MakeCode	(x=0X862A);
	OpHex		(x,	1);
	MakeCode	(0X8635);
	MakeCode	(0X8642);
	MakeName	(0X8642,	"_setenvp");
	MakeCode	(x=0X866F);
	OpHex		(x,	1);
	MakeCode	(x=0X8674);
	OpHex		(x,	1);
	MakeCode	(x=0X869F);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(0X86C0);
	MakeCode	(x=0X86C7);
	OpStkvar	(x,	1);
	MakeCode	(x=0X86CA);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(0X86E2);
	MakeCode	(0X86EB);
	MakeName	(0X86EB,	"_NMSG_WRITE");
	MakeCode	(x=0X86EF);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8715);
	OpHex		(x,	1);
	MakeComm	(0X8717,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X8717);
	OpHex		(x,	0);
	MakeCode	(0X8720);
	MakeCode	(0X873E);
	MakeCode	(0X8744);
	MakeCode	(0X874C);
	MakeCode	(0X8759);
	MakeCode	(0X8766);
	MakeName	(0X8766,	"_map_error");
	MakeCode	(0X876C);
	MakeCode	(0X8786);
	MakeCode	(0X8795);
	MakeCode	(0X879A);
	MakeCode	(x=0X879C);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X87A5);
	OpStkvar	(x,	1);
	MakeCode	(x=0X87AC);
	OpHex		(x,	1);
	MakeCode	(x=0X87BA);
	OpHex		(x,	1);
	MakeCode	(x=0X87C4);
	OpHex		(x,	1);
	MakeCode	(x=0X87D3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X87DA);
	OpHex		(x,	1);
	MakeCode	(x=0X87E6);
	OpHex		(x,	1);
	MakeCode	(x=0X87ED);
	OpStkvar	(x,	0);
	MakeCode	(x=0X87F6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X87FD);
	OpHex		(x,	1);
	MakeCode	(x=0X8800);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8803);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8806);
	OpStkvar	(x,	0);
	MakeCode	(x=0X880F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8816);
	OpHex		(x,	1);
	MakeCode	(x=0X881C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8821);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8824);
	OpStkvar	(x,	0);
	MakeCode	(x=0X882A);
	OpHex		(x,	1);
	MakeCode	(x=0X882D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8834);
	OpHex		(x,	1);
	MakeCode	(0X8848);
	MakeCode	(0X885A);
	MakeCode	(x=0X885F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8865);
	OpHex		(x,	1);
	MakeCode	(x=0X8869);
	OpHex		(x,	1);
	MakeCode	(x=0X8872);
	OpHex		(x,	1);
	MakeCode	(x=0X8876);
	OpHex		(x,	1);
	MakeCode	(x=0X887F);
	OpHex		(x,	1);
	MakeCode	(x=0X8881);
	OpHex		(x,	1);
	MakeCode	(x=0X8883);
	OpHex		(x,	1);
	MakeCode	(x=0X8897);
	OpHex		(x,	1);
	MakeCode	(x=0X889B);
	OpHex		(x,	1);
	MakeCode	(x=0X889F);
	OpHex		(x,	1);
	MakeCode	(x=0X88B6);
	OpHex		(x,	1);
	MakeCode	(x=0X88C0);
	OpStkvar	(x,	1);
	MakeCode	(x=0X88C9);
	OpHex		(x,	1);
	MakeCode	(0X88D1);
	MakeCode	(x=0X88D4);
	OpHex		(x,	1);
	MakeCode	(0X88DA);
	MakeCode	(x=0X88E1);
	OpHex		(x,	1);
	MakeCode	(x=0X8903);
	OpHex		(x,	1);
	MakeCode	(x=0X890A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8915);
	OpStkvar	(x,	1);
	MakeCode	(0X891A);
	MakeCode	(x=0X891C);
	OpHex		(x,	1);
	MakeCode	(x=0X892D);
	OpHex		(x,	1);
	MakeCode	(0X8936);
	MakeCode	(0X893A);
	MakeCode	(x=0X893E);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8944);
	OpHex		(x,	1);
	MakeCode	(x=0X8948);
	OpHex		(x,	1);
	MakeCode	(x=0X8953);
	OpHex		(x,	1);
	MakeCode	(0X8964);
	MakeCode	(x=0X8968);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8981);
	OpHex		(x,	1);
	MakeCode	(x=0X898C);
	OpHex		(x,	1);
	MakeCode	(0X89A6);
	MakeCode	(x=0X89AA);
	OpStkvar	(x,	0);
	MakeCode	(x=0X89B8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X89BE);
	OpHex		(x,	1);
	MakeCode	(x=0X89CA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X89D5);
	OpHex		(x,	1);
	MakeCode	(x=0X89DA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X89E6);
	OpHex		(x,	1);
	MakeCode	(x=0X89F2);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X89FA);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8A06);
	OpHex		(x,	1);
	MakeCode	(x=0X8A0E);
	OpHex		(x,	1);
	MakeCode	(x=0X8A17);
	OpHex		(x,	1);
	MakeCode	(x=0X8A23);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8A37);
	OpHex		(x,	1);
	MakeCode	(x=0X8A3A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8A3F);
	OpHex		(x,	1);
	MakeCode	(x=0X8A45);
	OpHex		(x,	1);
	MakeCode	(x=0X8A4C);
	OpHex		(x,	1);
	MakeCode	(0X8A64);
	MakeCode	(x=0X8A6A);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8A75);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8A7A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8A80);
	OpHex		(x,	1);
	MakeCode	(x=0X8A8A);
	OpHex		(x,	1);
	MakeCode	(x=0X8A90);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8A9E);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8AA4);
	OpHex		(x,	1);
	MakeCode	(x=0X8AAE);
	OpHex		(x,	1);
	MakeCode	(x=0X8AB8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8AC2);
	OpStkvar	(x,	1);
	MakeWord	(x=0X8ACC);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X8ACE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X8AD0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X8AD2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X8AD4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X8AD6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X8AD8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X8ADA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(0X8ADC);
	MakeCode	(x=0X8AE9);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8AEC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8AEF);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8AF3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8AF6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8AFD);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8B03);
	OpStkvar	(x,	1);
	MakeCode	(0X8B09);
	MakeCode	(x=0X8B13);
	OpHex		(x,	1);
	MakeCode	(0X8B17);
	MakeCode	(x=0X8B1D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8B25);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8B2B);
	OpHex		(x,	1);
	MakeCode	(x=0X8B2D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeCode	(x=0X8B32);
	OpStkvar	(x,	1);
	MakeCode	(0X8B3D);
	MakeCode	(x=0X8B3F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8B42);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8B45);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8B48);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8B4C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8B51);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8B58);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(0X8B5E);
	MakeCode	(x=0X8B62);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(0X8B68);
	MakeCode	(x=0X8B6C);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(0X8B73);
	MakeCode	(x=0X8B77);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8B7E);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8B85);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8B96);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(0X8B9C);
	MakeCode	(x=0X8BA1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8BAB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8BB1);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8BB9);
	OpStkvar	(x,	1);
	MakeCode	(0X8BCD);
	MakeCode	(x=0X8BD2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8BDC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8BE2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8BE9);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(0X8BEF);
	MakeCode	(x=0X8BF3);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(0X8BF9);
	MakeCode	(x=0X8BFD);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(0X8C03);
	MakeCode	(x=0X8C07);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8C0D);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8C14);
	OpStkvar	(x,	1);
	MakeCode	(0X8C1E);
	MakeCode	(0X8C25);
	MakeCode	(0X8C2C);
	MakeCode	(0X8C33);
	MakeCode	(0X8C3A);
	MakeCode	(0X8C41);
	MakeCode	(0X8C5C);
	MakeCode	(0X8C5F);
	MakeCode	(x=0X8C62);
	OpStkvar	(x,	1);
	MakeCode	(0X8C70);
	MakeCode	(0X8C89);
	MakeCode	(x=0X8C8A);
	OpStkvar	(x,	1);
	MakeCode	(0X8C9E);
	MakeCode	(x=0X8CA1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8CA5);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8CB1);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(0X8CBC);
	MakeCode	(x=0X8CBF);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8CC5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8CD1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8CDE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8CEB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8CF5);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8D00);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8D0D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8D14);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8D17);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8D1B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8D1E);
	OpHex		(x,	1);
	MakeCode	(x=0X8D23);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8D2B);
	OpStkvar	(x,	0);
	MakeCode	(0X8D32);
	MakeCode	(x=0X8D37);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8D3C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8D40);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8D43);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8D48);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8D4B);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8D55);
	OpStkvar	(x,	0);
	MakeCode	(0X8D5B);
	MakeCode	(x=0X8D5F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8D63);
	OpHex		(x,	1);
	MakeCode	(x=0X8D66);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8D6C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8D77);
	OpHex		(x,	1);
	MakeCode	(x=0X8D7F);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8D8B);
	OpHex		(x,	1);
	MakeCode	(x=0X8D97);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8DAC);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8DB0);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8DB6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8DBC);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8DC0);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8DC6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8DCB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8DD1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8DD4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8DD7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8DDD);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8DE3);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8DE7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8DEB);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(0X8DF6);
	MakeCode	(x=0X8DF9);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(0X8E02);
	MakeCode	(x=0X8E04);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8E0E);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8E19);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8E1F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8E26);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8E30);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8E35);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8E3A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8E3F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8E45);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8E5B);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8E61);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8E67);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8E6B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8E72);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8E78);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8E7C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8E83);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8E89);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8E8D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8E92);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8E97);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8EA1);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8EB1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8EB4);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8EBB);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8EC1);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8ED6);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(0X8EE6);
	MakeCode	(0X8EEE);
	MakeCode	(x=0X8EFA);
	OpHex		(x,	1);
	MakeCode	(0X8F08);
	MakeCode	(0X8F14);
	MakeCode	(0X8F17);
	MakeCode	(0X8F2B);
	MakeCode	(x=0X8F33);
	OpHex		(x,	1);
	MakeCode	(0X8F40);
	MakeCode	(0X8F5E);
	MakeCode	(0X8F7A);
	MakeCode	(0X8F8B);
	MakeCode	(0X8FA5);
	MakeCode	(0X8FAB);
	MakeCode	(0X8FB2);
	MakeCode	(x=0X8FB5);
	OpStkvar	(x,	1);
	MakeCode	(x=0X8FC4);
	OpHex		(x,	1);
	MakeComm	(0X8FC6,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X8FC6);
	OpHex		(x,	0);
	MakeCode	(0X8FD2);
	MakeCode	(x=0X8FD5);
	OpHex		(x,	1);
	MakeCode	(x=0X8FD8);
	OpStkvar	(x,	1);
	MakeCode	(0X8FE6);
	MakeCode	(x=0X8FED);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X8FF4);
	OpStkvar	(x,	0);
	MakeCode	(x=0X8FFE);
	OpHex		(x,	1);
	MakeComm	(0X9001,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from present location");
	MakeCode	(x=0X9001);
	OpHex		(x,	0);
	MakeCode	(x=0X9005);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X900C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X900F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X901A);
	OpStkvar	(x,	0);
	MakeCode	(x=0X901D);
	OpStkvar	(x,	0);
	MakeCode	(x=0X9022);
	OpHex		(x,	1);
	MakeComm	(0X9025,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from end of file");
	MakeCode	(x=0X9025);
	OpHex		(x,	0);
	MakeCode	(x=0X9027);
	OpStkvar	(x,	1);
	MakeCode	(x=0X902A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X902F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9032);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9035);
	OpHex		(x,	1);
	MakeComm	(0X9038,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file");
	MakeCode	(x=0X9038);
	OpHex		(x,	0);
	MakeCode	(x=0X903C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X903F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9042);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9045);
	OpHex		(x,	1);
	MakeComm	(0X9047,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: \n0-from beginnig,1-from current,2-from end");
	MakeCode	(x=0X9047);
	OpHex		(x,	0);
	MakeCode	(x=0X904B);
	OpHex		(x,	1);
	MakeCode	(0X9054);
	MakeCode	(x=0X9057);
	OpHex		(x,	1);
	MakeCode	(x=0X905A);
	OpStkvar	(x,	1);
	MakeCode	(0X906A);
	MakeCode	(x=0X9076);
	OpHex		(x,	1);
	MakeComm	(0X9084,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from end of file");
	MakeCode	(x=0X9084);
	OpHex		(x,	0);
	MakeCode	(x=0X9088);
	OpHex		(x,	1);
	MakeCode	(x=0X908F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9096);
	OpStkvar	(x,	0);
	MakeCode	(x=0X9099);
	OpStkvar	(x,	0);
	MakeCode	(x=0X90A3);
	OpStkvar	(x,	0);
	MakeCode	(x=0X90A6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X90B9);
	OpHex		(x,	1);
	MakeCode	(x=0X90D1);
	OpStkvar	(x,	1);
	MakeCode	(0X90E5);
	MakeCode	(x=0X90F1);
	OpStkvar	(x,	0);
	MakeCode	(0X90F6);
	MakeCode	(0X90FB);
	MakeCode	(0X90FF);
	MakeCode	(x=0X9112);
	OpHex		(x,	1);
	MakeComm	(0X9114,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X9114);
	OpHex		(x,	0);
	MakeCode	(0X9126);
	MakeCode	(x=0X9127);
	OpHex		(x,	1);
	MakeCode	(x=0X9137);
	OpHex		(x,	1);
	MakeCode	(0X9149);
	MakeCode	(0X914F);
	MakeCode	(x=0X915D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9169);
	OpStkvar	(x,	1);
	MakeCode	(x=0X916C);
	OpHex		(x,	1);
	MakeComm	(0X916E,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X916E);
	OpHex		(x,	0);
	MakeCode	(0X9176);
	MakeCode	(x=0X917A);
	OpHex		(x,	1);
	MakeCode	(0X918B);
	MakeCode	(0X9192);
	MakeCode	(0X91A0);
	MakeCode	(0X91A4);
	MakeCode	(x=0X91A8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X91AF);
	OpHex		(x,	1);
	MakeCode	(0X91B7);
	MakeCode	(x=0X91BC);
	OpStkvar	(x,	1);
	MakeCode	(0X920B);
	MakeCode	(0X9214);
	MakeCode	(0X922C);
	MakeCode	(x=0X9236);
	OpStkvar	(x,	0);
	MakeCode	(x=0X923D);
	OpHex		(x,	1);
	MakeCode	(0X9248);
	MakeCode	(0X924C);
	MakeCode	(0X9280);
	MakeCode	(0X9291);
	MakeCode	(0X92B6);
	MakeCode	(x=0X92B7);
	OpHex		(x,	1);
	MakeCode	(0X92C6);
	MakeCode	(x=0X92C9);
	OpHex		(x,	1);
	MakeCode	(0X92DE);
	MakeCode	(x=0X92EA);
	OpHex		(x,	1);
	MakeCode	(x=0X92FC);
	OpHex		(x,	1);
	MakeCode	(0X930C);
	MakeCode	(0X9318);
	MakeCode	(0X9332);
	MakeCode	(x=0X9334);
	OpHex		(x,	1);
	MakeCode	(x=0X9341);
	OpHex		(x,	1);
	MakeCode	(0X935E);
	MakeCode	(x=0X9370);
	OpHex		(x,	1);
	MakeCode	(0X9376);
	MakeCode	(x=0X937B);
	OpHex		(x,	1);
	MakeCode	(0X939D);
	MakeCode	(0X93A0);
	MakeCode	(0X93BE);
	MakeCode	(x=0X93C0);
	OpHex		(x,	1);
	MakeCode	(x=0X93E4);
	OpHex		(x,	1);
	MakeCode	(x=0X93F6);
	OpHex		(x,	1);
	MakeComm	(0X93F8,	"DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)\nES = segment address of block to change\nBX = new size in paragraphs");
	MakeCode	(x=0X93F8);
	OpHex		(x,	0);
	MakeCode	(x=0X9400);
	OpHex		(x,	1);
	MakeCode	(0X940D);
	MakeCode	(0X940F);
	MakeCode	(x=0X9423);
	OpHex		(x,	1);
	MakeCode	(0X9429);
	MakeCode	(0X9430);
	MakeCode	(x=0X9435);
	OpHex		(x,	1);
	MakeCode	(x=0X943F);
	OpHex		(x,	1);
	MakeCode	(x=0X9441);
	OpHex		(x,	1);
	MakeCode	(x=0X9443);
	OpHex		(x,	1);
	MakeCode	(x=0X9445);
	OpHex		(x,	1);
	MakeCode	(x=0X9447);
	OpHex		(x,	1);
	MakeComm	(0X9449,	"DOS - 2+ - ALLOCATE MEMORY\nBX = number of 16-byte paragraphs desired");
	MakeCode	(x=0X9449);
	OpHex		(x,	0);
	MakeCode	(0X9472);
	MakeComm	(0X9474,	"strcat(first_string,FILE_NAME);");
	MakeCode	(0X9474);
	MakeName	(0X9474,	"strcat");
	MakeCode	(x=0X947F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9484);
	OpDecimal	(x,	1);
	MakeCode	(x=0X948C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X948F);
	OpDecimal	(x,	1);
	MakeCode	(x=0X949A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X949D);
	OpHex		(x,	1);
	MakeCode	(x=0X94A5);
	OpHex		(x,	1);
	MakeCode	(0X94B4);
	MakeName	(0X94B4,	"strcpy");
	MakeCode	(x=0X94BB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X94CD);
	OpStkvar	(x,	1);
	MakeCode	(x=0X94D2);
	OpHex		(x,	1);
	MakeCode	(x=0X94D8);
	OpHex		(x,	1);
	MakeCode	(0X94E6);
	MakeName	(0X94E6,	"strcmp");
	MakeCode	(x=0X94F1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X94F4);
	OpStkvar	(x,	1);
	MakeCode	(0X9512);
	MakeName	(0X9512,	"strlen");
	MakeCode	(x=0X951B);
	OpStkvar	(x,	1);
	MakeCode	(0X952E);
	MakeName	(0X952E,	"strncpy");
	MakeCode	(x=0X9535);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9538);
	OpStkvar	(x,	1);
	MakeCode	(x=0X953D);
	OpStkvar	(x,	1);
	MakeCode	(0X9556);
	MakeCode	(x=0X955D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9560);
	OpStkvar	(x,	1);
	MakeCode	(x=0X956B);
	OpStkvar	(x,	1);
	MakeCode	(0X9572);
	MakeCode	(0X957C);
	MakeCode	(x=0X9580);
	OpHex		(x,	1);
	MakeCode	(x=0X9596);
	OpHex		(x,	0);
	OpHex		(x,	1);
	MakeName	(0X9596,	"sprintf");
	MakeCode	(x=0X95A1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X95A7);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X95B2);
	OpStkvar	(x,	1);
	MakeCode	(x=0X95B6);
	OpStkvar	(x,	0);
	MakeCode	(x=0X95BD);
	OpHex		(x,	1);
	MakeCode	(0X95D6);
	MakeCode	(x=0X95DC);
	OpHex		(x,	1);
	MakeCode	(0X95E6);
	MakeCode	(x=0X95EB);
	OpStkvar	(x,	1);
	MakeCode	(0X9604);
	MakeComm	(0X960B,	"3.30");
	MakeCode	(x=0X9614);
	OpHex		(x,	1);
	MakeCode	(x=0X961F);
	OpHex		(x,	1);
	MakeCode	(0X963C);
	MakeCode	(x=0X9640);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9650);
	OpStkvar	(x,	1);
	MakeCode	(0X965D);
	MakeComm	(0X9666,	"Fill block of memory\nSets the first num bytes of the block\nof memory pointed by ptr to the specified value \n(interpreted as an unsigned char).");
	MakeCode	(0X9666);
	MakeName	(0X9666,	"memset");
	MakeComm	(0X966F,	"ptr: Pointer to the block of memory to fill.");
	MakeCode	(x=0X966F);
	OpStkvar	(x,	1);
	MakeComm	(0X9674,	"num: Number of bytes to be set to the value.");
	MakeCode	(x=0X9674);
	OpStkvar	(x,	1);
	MakeComm	(0X9679,	"value: Value to be set.");
	MakeCode	(x=0X9679);
	OpStkvar	(x,	1);
	MakeCode	(x=0X967E);
	OpHex		(x,	1);
	MakeCode	(x=0X9686);
	OpHex		(x,	1);
	MakeComm	(0X968A,	"jnc short memset_2\nstosb");
	MakeComm	(0X9690,	"ptr is returned.");
	MakeCode	(0X9694);
	MakeByte	(0X96F4);
	MakeArray	(0X96F4,	0X6);
	MakeCode	(0X96FA);
	MakeName	(0X96FA,	"set_ctrl_brk_int");
	MakeCode	(x=0X96FD);
	OpHex		(x,	1);
	MakeCode	(x=0X9700);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9712);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(0X9719);
	MakeCode	(x=0X9720);
	OpStkvar	(x,	0);
	MakeCode	(x=0X9726);
	OpStkvar	(x,	0);
	MakeCode	(x=0X9729);
	OpStkvar	(x,	1);
	MakeCode	(x=0X973D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9751);
	OpHex		(x,	1);
	MakeCode	(x=0X9753);
	OpHex		(x,	1);
	MakeComm	(0X9755,	"DOS - 2+ - GET INTERRUPT VECTOR\nAL = interrupt number\nReturn: ES:BX = value of interrupt vector");
	MakeCode	(x=0X9755);
	OpHex		(x,	0);
	MakeCode	(x=0X9760);
	OpOff		(x,	1,	0);
	OpOff		(x,	129,	0);
	MakeCode	(x=0X9766);
	OpHex		(x,	1);
	MakeCode	(x=0X9768);
	OpHex		(x,	1);
	MakeComm	(0X976A,	"DOS - SET INTERRUPT VECTOR\nAL = interrupt number\nDS:DX = new vector to be used for specified interrupt");
	MakeCode	(x=0X976A);
	OpHex		(x,	0);
	MakeCode	(x=0X9772);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X977C);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X9781);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X978D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9790);
	OpStkvar	(x,	1);
	MakeCode	(0X9797);
	MakeCode	(x=0X979A);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(0X97AC);
	MakeCode	(x=0X97AF);
	OpHex		(x,	1);
	MakeCode	(x=0X97B1);
	OpHex		(x,	1);
	MakeCode	(x=0X97B3);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(0X97BE);
	MakeName	(0X97BE,	"int23h");
	MakeCode	(x=0X97E0);
	OpHex		(x,	1);
	MakeCode	(0X980D);
	MakeCode	(0X9839);
	MakeCode	(0X983A);
	MakeCode	(0X983F);
	MakeCode	(x=0X9851);
	OpHex		(x,	1);
	MakeCode	(0X985A);
	MakeCode	(x=0X985D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9860);
	OpHex		(x,	1);
	MakeComm	(0X9862,	"DOS - 2+ - DELETE A FILE (UNLINK)\nDS:DX -> ASCIZ pathname of file to delete (no wildcards allowed)");
	MakeCode	(x=0X9862);
	OpHex		(x,	0);
	MakeCode	(0X9868);
	MakeCode	(x=0X986B);
	OpStkvar	(x,	1);
	MakeCode	(x=0X986E);
	OpHex		(x,	1);
	MakeComm	(0X9870,	"DOS - 3.3+ - COMMIT FILE, WRITE ALL BUFFERED DATA TO DISK\nBX = file handle");
	MakeCode	(x=0X9870);
	OpHex		(x,	0);
	MakeCode	(0X9876);
	MakeName	(0X9876,	"mul32");
	MakeComm	(0X9879,	"xh");
	MakeCode	(x=0X9879);
	OpStkvar	(x,	1);
	MakeComm	(0X987C,	"yh");
	MakeCode	(x=0X987C);
	OpStkvar	(x,	1);
	MakeComm	(0X9881,	"yl");
	MakeCode	(x=0X9881);
	OpStkvar	(x,	1);
	MakeComm	(0X9886,	"xl");
	MakeCode	(x=0X9886);
	OpStkvar	(x,	1);
	MakeCode	(0X988F);
	MakeComm	(0X9894,	"xl");
	MakeCode	(x=0X9894);
	OpStkvar	(x,	1);
	MakeComm	(0X9897,	"yh");
	MakeCode	(x=0X9897);
	OpStkvar	(x,	1);
	MakeComm	(0X989C,	"xl");
	MakeCode	(x=0X989C);
	OpStkvar	(x,	1);
	MakeComm	(0X98A1,	"(H(xl*yl)+(xh*yl)+(xl*yh))\nax = L(xl*yl)");
	MakeCode	(0X98A8);
	MakeName	(0X98A8,	"shr32");
	MakeCode	(x=0X98AC);
	OpHex		(x,	1);
	MakeCode	(x=0X98AE);
	OpHex		(x,	1);
	MakeCode	(0X98B4);
	MakeName	(0X98B4,	"_div32");
	MakeCode	(x=0X98B8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X98BB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X98BE);
	OpStkvar	(x,	0);
	MakeCode	(0X98D4);
	MakeCode	(x=0X98D8);
	OpStkvar	(x,	1);
	MakeCode	(x=0X98DB);
	OpStkvar	(x,	0);
	MakeCode	(x=0X98DE);
	OpStkvar	(x,	0);
	MakeCode	(0X98F4);
	MakeName	(0X98F4,	"div32");
	MakeCode	(x=0X98F9);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9900);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9903);
	OpStkvar	(x,	1);
	MakeCode	(x=0X990C);
	OpStkvar	(x,	1);
	MakeCode	(0X9915);
	MakeCode	(x=0X9917);
	OpStkvar	(x,	1);
	MakeCode	(x=0X991A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X991D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9920);
	OpHex		(x,	1);
	MakeCode	(x=0X9922);
	OpHex		(x,	1);
	MakeCode	(x=0X9924);
	OpHex		(x,	1);
	MakeCode	(x=0X9926);
	OpHex		(x,	1);
	MakeCode	(x=0X9930);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9934);
	OpStkvar	(x,	1);
	MakeCode	(x=0X993D);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9944);
	OpStkvar	(x,	1);
	MakeCode	(0X9954);
	MakeName	(0X9954,	"_mod32");
	MakeCode	(x=0X9958);
	OpStkvar	(x,	1);
	MakeCode	(x=0X995F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9962);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9969);
	OpStkvar	(x,	1);
	MakeCode	(0X9974);
	MakeCode	(x=0X9976);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9979);
	OpStkvar	(x,	1);
	MakeCode	(x=0X997C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X997F);
	OpHex		(x,	1);
	MakeCode	(x=0X9981);
	OpHex		(x,	1);
	MakeCode	(x=0X9983);
	OpHex		(x,	1);
	MakeCode	(x=0X9985);
	OpHex		(x,	1);
	MakeCode	(x=0X998F);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9993);
	OpStkvar	(x,	1);
	MakeCode	(x=0X999A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X99A1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X99A6);
	OpStkvar	(x,	1);
	MakeCode	(x=0X99A9);
	OpStkvar	(x,	1);
	MakeCode	(x=0X99AC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X99AF);
	OpStkvar	(x,	1);
	MakeCode	(0X99BE);
	MakeName	(0X99BE,	"_shr32_");
	MakeCode	(x=0X99C2);
	OpHex		(x,	1);
	MakeCode	(x=0X99C4);
	OpHex		(x,	1);
	MakeCode	(0X99CA);
	MakeName	(0X99CA,	"calc_msg_length");
	MakeCode	(x=0X99CF);
	OpStkvar	(x,	1);
	MakeCode	(0X99E4);
	MakeName	(0X99E4,	"move_error_msg");
	MakeCode	(x=0X99EC);
	OpStkvar	(x,	1);
	MakeCode	(x=0X99FE);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9A09);
	OpHex		(x,	1);
	MakeComm	(0X9A0B,	"even count");
	MakeCode	(x=0X9A0F);
	OpHex		(x,	1);
	MakeCode	(0X9A20);
	MakeCode	(x=0X9A24);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9A31);
	OpHex		(x,	1);
	MakeCode	(0X9A41);
	MakeCode	(x=0X9A46);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9A68);
	OpStkvar	(x,	0);
	MakeCode	(x=0X9A6F);
	OpHex		(x,	1);
	MakeCode	(0X9A7C);
	MakeName	(0X9A7C,	"int86");
	MakeCode	(x=0X9A81);
	OpDecimal	(x,	1);
	MakeCode	(x=0X9A84);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X9A88);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9A8B);
	OpStkvar	(x,	0);
	MakeCode	(x=0X9A8E);
	OpHex		(x,	1);
	MakeCode	(x=0X9A92);
	OpHex		(x,	1);
	MakeCode	(x=0X9A96);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X9A9C);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X9AA0);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X9AA4);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X9AA8);
	OpStkvar	(x,	0);
	MakeCode	(x=0X9AAB);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9AAE);
	OpStkvar	(x,	0);
	MakeCode	(x=0X9AB1);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9AC2);
	OpDecimal	(x,	1);
	MakeCode	(x=0X9AC7);
	OpStkvar	(x,	0);
	MakeCode	(x=0X9ACD);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9ADE);
	OpDecimal	(x,	0);
	MakeCode	(0X9AE7);
	MakeCode	(x=0X9AEF);
	OpDecimal	(x,	0);
	MakeCode	(x=0X9AF2);
	OpDecimal	(x,	1);
	MakeCode	(0X9AFC);
	MakeName	(0X9AFC,	"int86x");
	MakeCode	(x=0X9B02);
	OpDecimal	(x,	1);
	MakeCode	(x=0X9B05);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X9B09);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9B0C);
	OpStkvar	(x,	0);
	MakeCode	(x=0X9B0F);
	OpHex		(x,	1);
	MakeCode	(x=0X9B13);
	OpHex		(x,	1);
	MakeCode	(x=0X9B17);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X9B1D);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X9B21);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X9B25);
	OpStkvar	(x,	0);
	OpHex		(x,	1);
	MakeCode	(x=0X9B29);
	OpStkvar	(x,	0);
	MakeCode	(x=0X9B2C);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9B2F);
	OpStkvar	(x,	0);
	MakeCode	(x=0X9B32);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9B43);
	OpDecimal	(x,	0);
	MakeCode	(x=0X9B46);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9B51);
	OpDecimal	(x,	0);
	MakeCode	(x=0X9B5A);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9B62);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9B73);
	OpDecimal	(x,	0);
	MakeCode	(0X9B7C);
	MakeCode	(x=0X9B84);
	OpDecimal	(x,	0);
	MakeCode	(x=0X9B87);
	OpDecimal	(x,	1);
	MakeCode	(0X9B92);
	MakeName	(0X9B92,	"intdos");
	MakeCode	(x=0X9B97);
	OpStkvar	(x,	1);
	MakeComm	(0X9BAB,	"DOS - ");
	MakeCode	(x=0X9BAB);
	OpHex		(x,	0);
	MakeCode	(x=0X9BAE);
	OpStkvar	(x,	1);
	MakeCode	(0X9BC8);
	MakeCode	(0X9BDA);
	MakeName	(0X9BDA,	"intdosx");
	MakeCode	(x=0X9BDF);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9BF3);
	OpStkvar	(x,	1);
	MakeComm	(0X9BFC,	"DOS - ");
	MakeCode	(x=0X9BFC);
	OpHex		(x,	0);
	MakeCode	(x=0X9C04);
	OpStkvar	(x,	1);
	MakeCode	(x=0X9C0C);
	OpStkvar	(x,	1);
	MakeCode	(0X9C26);
	MakeCode	(0X9C38);
	MakeName	(0X9C38,	"segread");
	MakeCode	(x=0X9C3B);
	OpStkvar	(x,	1);
	MakeArray	(0X9C4D,	0X3);
	MakeWord	(x=0X9C50);
	OpSeg		(x,	0);
	MakeByte	(0X9C52);
	MakeArray	(0X9C52,	0X4E8);
	MakeByte	(0XA13A);
	MakeByte	(0XA13B);
	MakeArray	(0XA13B,	0X3);
	MakeByte	(0XA13E);
	MakeByte	(x=0XA13F);
	MakeArray	(x,	0X2A);
	OpDecimal	(x,	0);
	MakeByte	(0XA169);
	MakeByte	(0XA16A);
	MakeArray	(0XA16A,	0XA0);
	MakeByte	(0XA20A);
	MakeByte	(0XA20C);
	MakeByte	(0XA20D);
	MakeByte	(0XA20E);
	MakeByte	(0XA20F);
	MakeByte	(0XA260);
	MakeArray	(0XA260,	0X200);
	MakeCode	(0XA460);
	MakeName	(0XA460,	"dosbeep");
	MakeComm	(0XA46E,	"Timer 8253-5 (AT: 8254.2).");
	MakeCode	(x=0XA46E);
	OpHex		(x,	0);
	MakeCode	(x=0XA476);
	OpStkvar	(x,	1);
	MakeComm	(0XA489,	"Timer 8253-5 (AT: 8254.2).");
	MakeCode	(x=0XA489);
	OpHex		(x,	0);
	MakeComm	(0XA48D,	"Timer 8253-5 (AT: 8254.2).");
	MakeCode	(x=0XA48D);
	OpHex		(x,	0);
	MakeComm	(0XA48F,	"PC/XT PPI port B bits:\n0: Tmr 2 gate ÍËÍ\x10 OR 03H=spkr ON\n1: Tmr 2 data Í¼  AND 0fcH=spkr OFF\n3: 1=read high switches\n4: 0=enable RAM parity checking\n5: 0=enable I/O channel check\n6: 0=hold keyboard clock low\n7: 0=enable kbrd");
	MakeCode	(x=0XA48F);
	OpHex		(x,	1);
	MakeCode	(x=0XA493);
	OpHex		(x,	1);
	MakeComm	(0XA495,	"PC/XT PPI port B bits:\n0: Tmr 2 gate ÍËÍ\x10 OR 03H=spkr ON\n1: Tmr 2 data Í¼  AND 0fcH=spkr OFF\n3: 1=read high switches\n4: 0=enable RAM parity checking\n5: 0=enable I/O channel check\n6: 0=hold keyboard clock low\n7: 0=enable kbrd");
	MakeCode	(x=0XA495);
	OpHex		(x,	0);
	MakeCode	(x=0XA497);
	OpStkvar	(x,	1);
	MakeComm	(0XA4A4,	"PC/XT PPI port B bits:\n0: Tmr 2 gate ÍËÍ\x10 OR 03H=spkr ON\n1: Tmr 2 data Í¼  AND 0fcH=spkr OFF\n3: 1=read high switches\n4: 0=enable RAM parity checking\n5: 0=enable I/O channel check\n6: 0=hold keyboard clock low\n7: 0=enable kbrd");
	MakeCode	(x=0XA4A4);
	OpHex		(x,	0);
	MakeCode	(0XA4AA);
	MakeCode	(0XA4BC);
	MakeName	(0XA4BC,	"DOSEXIT");
	MakeCode	(x=0XA4C8);
	OpStkvar	(x,	1);
	MakeCode	(x=0XA4D0);
	OpStkvar	(x,	1);
	MakeCode	(x=0XA4D3);
	OpHex		(x,	1);
	MakeComm	(0XA4D5,	"DOS - 2+ - QUIT WITH EXIT CODE (EXIT)\nAL = exit code");
	MakeCode	(x=0XA4D5);
	OpHex		(x,	0);
	MakeCode	(0XA4D7);
	MakeComm	(0XA4E8,	"VIOSETCURPOS(row,col,u(0));");
	MakeCode	(0XA4E8);
	MakeName	(0XA4E8,	"VIOSETCURPOS");
	MakeCode	(x=0XA4F6);
	OpStkvar	(x,	1);
	MakeCode	(x=0XA4F9);
	OpDecimal	(x,	1);
	MakeCode	(x=0XA4FF);
	OpStkvar	(x,	1);
	MakeCode	(x=0XA502);
	OpDecimal	(x,	1);
	MakeComm	(0XA513,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ");
	MakeCode	(x=0XA513);
	OpHex		(x,	0);
	MakeComm	(0XA522,	"error");
	MakeCode	(0XA522);
	MakeComm	(0XA534,	"VideoScrollUp( int StartRow, int StartCol, int EndRow,\n               int EndCol, int Lines, int Attrib )");
	MakeCode	(0XA534);
	MakeName	(0XA534,	"VIOSCROLLUP");
	MakeCode	(x=0XA540);
	OpStkvar	(x,	1);
	MakeCode	(0XA54C);
	MakeCode	(x=0XA550);
	OpStkvar	(x,	1);
	MakeCode	(x=0XA553);
	OpDecimal	(x,	1);
	MakeCode	(x=0XA55A);
	OpStkvar	(x,	1);
	MakeCode	(x=0XA55D);
	OpDecimal	(x,	1);
	MakeCode	(x=0XA564);
	OpStkvar	(x,	1);
	MakeCode	(x=0XA569);
	OpStkvar	(x,	1);
	MakeCode	(x=0XA56E);
	OpStkvar	(x,	1);
	MakeComm	(0XA57E,	"- VIDEO - SCROLL PAGE UP\nAL = number of lines to scroll window (0 = blank whole window)\nBH = attributes to be used on blanked lines\nCH,CL = row,column of upper left corner of window to scroll\nDH,DL = row,column of lower right corner of window");
	MakeCode	(x=0XA57E);
	OpHex		(x,	0);
	MakeComm	(0XA58D,	"error");
	MakeCode	(0XA58D);
	MakeCode	(x=0XA59C);
	OpDecimal	(x,	0);
	MakeComm	(0XA59F,	"Write Character String With Attribute\n\n;extern unsigned far pascal VIOWRTCHARSTRATT (\n;char far *,  /* String to be written */\n;unsigned,    /* Length of string */\n;unsigned,    /* Starting position for output (row) */\n;unsigned,    /* Starting position for output (col) */\n;char far *,  /* Attribute to be replicated */\n;unsigned );  /* Vio Handle */");
	MakeCode	(0XA59F);
	MakeName	(0XA59F,	"VIOWRTCHARSTRATT");
	MakeComm	(0XA5AB,	"Video page 0");
	MakeComm	(0XA5AF,	"Put screen column in DL");
	MakeCode	(x=0XA5AF);
	OpStkvar	(x,	1);
	MakeComm	(0XA5B2,	"Column limit check");
	MakeCode	(x=0XA5B2);
	OpDecimal	(x,	1);
	MakeCode	(x=0XA5B7);
	OpStkvar	(x,	1);
	MakeComm	(0XA5BA,	"Row limit check");
	MakeCode	(x=0XA5BA);
	OpDecimal	(x,	1);
	MakeComm	(0XA5BE,	"Put screen row in DH");
	MakeComm	(0XA5C0,	"BIOS set cursor function");
	MakeComm	(0XA5CB,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ");
	MakeCode	(x=0XA5CB);
	OpHex		(x,	0);
	MakeComm	(0XA5D6,	"Attribute or color of character");
	MakeCode	(x=0XA5D6);
	OpStkvar	(x,	1);
	MakeComm	(0XA5DB,	"String length (count of string characters)");
	MakeCode	(x=0XA5DB);
	OpStkvar	(x,	1);
	MakeCode	(x=0XA5DE);
	OpStkvar	(x,	1);
	MakeComm	(0XA5E1,	"ASCII code of character to be written");
	MakeComm	(0XA5F1,	"- VIDEO - WRITE ATTRIBUTES/CHARACTERS AT CURSOR POSITION\nAL = character, BH = display page\nBL = attributes of character (alpha modes) or color (graphics modes)\nCX = number of times to write character");
	MakeCode	(x=0XA5F1);
	OpHex		(x,	0);
	MakeComm	(0XA5FC,	"next char (ptr)");
	MakeComm	(0XA5FD,	"decrease count");
	MakeComm	(0XA5FE,	"next column");
	MakeComm	(0XA600,	"column limit check");
	MakeCode	(x=0XA600);
	OpDecimal	(x,	1);
	MakeComm	(0XA605,	"next row (and)");
	MakeComm	(0XA607,	"column 0");
	MakeComm	(0XA609,	"row limit check");
	MakeCode	(x=0XA609);
	OpDecimal	(x,	1);
	MakeComm	(0XA60E,	"Error 1 (string could not be written completely)");
	MakeCode	(0XA613);
	MakeComm	(0XA61E,	"- VIDEO - SET CURSOR POSITION\nDH,DL = row, column (0,0 = upper left)\nBH = page number ");
	MakeCode	(x=0XA61E);
	OpHex		(x,	0);
	MakeComm	(0XA629,	"is countdown completed?");
	MakeComm	(0XA62E,	"yes");
	MakeComm	(0XA630,	"Error 2 (invalid column or row value)");
	MakeComm	(0XA63F,	"(with video handle)");
	MakeCode	(x=0XA63F);
	OpDecimal	(x,	0);
	MakeArray	(0XA644,	0XC);
	MakeWord	(0XA652);
	MakeArray	(0XA654,	0X4);
	MakeStr		(0XA658,	0XA690);
	MakeName	(0XA658,	"aMsRunTimeLibra");
	MakeStr		(0XA692,	0XA699);
	MakeName	(0XA692,	"disk_size_format");
	MakeStr		(0XA699,	0XA6A0);
	MakeName	(0XA699,	"a5_0lu_4");
	MakeStr		(0XA6A0,	0XA6A7);
	MakeName	(0XA6A0,	"a5_0lu_5");
	MakeStr		(0XA6A7,	0XA6AE);
	MakeName	(0XA6A7,	"a5_0lu_6");
	MakeStr		(0XA6AE,	0XA6B5);
	MakeName	(0XA6AE,	"a5_0lu_7");
	MakeStr		(0XA6B5,	0XA6BC);
	MakeName	(0XA6B5,	"a5_0lu_8");
	MakeStr		(0XA6BC,	0XA6CA);
	MakeName	(0XA6BC,	"a5_0lu3_0d");
	MakeStr		(0XA6CA,	0XA6D1);
	MakeName	(0XA6CA,	"a5_0lu_9");
	MakeStr		(0XA6D1,	0XA6D8);
	MakeName	(0XA6D1,	"ecp_size_format");
	MakeStr		(0XA6D8,	0XA6E6);
	MakeName	(0XA6D8,	"ecp_mb_pcent_format");
	MakeStr		(0XA6E6,	0XA6ED);
	MakeName	(0XA6E6,	"a5_0lu_11");
	MakeStr		(0XA6ED,	0XA6F7);
	MakeName	(0XA6ED,	"ecp_pcent_format");
	MakeStr		(0XA6F7,	0XA6FE);
	MakeName	(0XA6F7,	"a5_0lu_12");
	MakeStr		(0XA6FE,	0XA70C);
	MakeName	(0XA6FE,	"a5_0lu3_0d_1");
	MakeStr		(0XA70C,	0XA713);
	MakeName	(0XA70C,	"a5_0lu_2");
	MakeStr		(0XA713,	0XA71D);
	MakeName	(0XA713,	"a3_0ld_0");
	MakeStr		(0XA71E,	0XA725);
	MakeName	(0XA71E,	"a5_0lu_1");
	MakeStr		(0XA725,	0XA72E);
	MakeName	(0XA725,	"FAT32");
	MakeStr		(0XA72E,	0XA737);
	MakeName	(0XA72E,	"FAT16");
	MakeStr		(0XA737,	0XA740);
	MakeName	(0XA737,	"FAT12");
	MakeByte	(0XA740);
	MakeName	(0XA740,	"NOVOLUME");
	MakeStr		(0XA741,	0XA74A);
	MakeName	(0XA741,	"UNKNOWN");
	MakeStr		(0XA74A,	0XA753);
	MakeName	(0XA74A,	"extFat32");
	MakeStr		(0XA753,	0XA75C);
	MakeName	(0XA753,	"extFat16");
	MakeStr		(0XA75C,	0XA765);
	MakeName	(0XA75C,	"extFat12");
	MakeByte	(0XA765);
	MakeName	(0XA765,	"extNoName");
	MakeStr		(0XA766,	0XA76F);
	MakeName	(0XA766,	"extUnknown");
	MakeByte	(0XA76F);
	MakeByte	(0XA770);
	MakeArray	(0XA770,	0X200);
	MakeName	(0XA770,	"master_boot_record");
	MakeByte	(0XA970);
	MakeArray	(0XA970,	0X200);
	MakeName	(0XA970,	"mbr_hd1");
	MakeByte	(0XAB70);
	MakeArray	(0XAB70,	0X200);
	MakeName	(0XAB70,	"mbr_hd3");
	MakeByte	(0XAD70);
	MakeArray	(0XAD70,	0X200);
	MakeName	(0XAD70,	"mbr_hd4");
	MakeByte	(x=0XAF70);
	MakeArray	(x,	0X200);
	OpHex		(x,	0);
	MakeName	(0XAF70,	"mbr_hd5");
	MakeByte	(0XB170);
	MakeArray	(0XB170,	0X200);
	MakeName	(0XB170,	"mbr_hd6");
	MakeByte	(0XB370);
	MakeArray	(0XB370,	0X200);
	MakeByte	(0XB570);
	MakeArray	(0XB570,	0X200);
	MakeName	(0XB570,	"mbr_hd7");
	MakeStr		(0XB770,	0XB777);
	MakeName	(0XB770,	"numinmsg_format");
	MakeStr		(0XB777,	0XB77F);
	MakeName	(0XB777,	"a3_0d");
	MakeStr		(0XB780,	0XB787);
	MakeName	(0XB780,	"a5_0lu_0");
	MakeStr		(0XB787,	0XB791);
	MakeName	(0XB787,	"a3_0ld");
	MakeStr		(0XB791,	0XB7A0);
	MakeName	(0XB791,	"a_");
	MakeStr		(0XB7A3,	0XB7A8);
	MakeName	(0XB7A3,	"aCC");
	MakeStr		(0XB7A8,	0XB7D4);
	MakeName	(0XB7A8,	"a2_2sCC7_7s11_1");
	MakeStr		(0XB7D4,	0XB7F4);
	MakeName	(0XB7D4,	"eptbl_row_format");
	MakeStr		(0XB7F4,	0XB811);
	MakeName	(0XB7F4,	"a1_0dCC5_0lu5_0");
	MakeStr		(0XB811,	0XB821);
	MakeName	(0XB811,	"aCCC5_0lu9c");
	MakeStr		(0XB821,	0XB831);
	MakeName	(0XB821,	"aCCC5_0lu9c_0");
	MakeStr		(0XB831,	0XB83C);
	MakeName	(0XB831,	"a1_0d1_0d");
	MakeStr		(0XB83C,	0XB845);
	MakeName	(0XB83C,	"aUnknown_1");
	MakeStr		(0XB846,	0XB84F);
	MakeName	(0XB846,	"aUnknown_2");
	MakeStr		(0XB850,	0XB855);
	MakeName	(0XB850,	"flgPRI");
	MakeStr		(0XB855,	0XB85A);
	MakeName	(0XB855,	"flgEXT");
	MakeStr		(0XB85A,	0XB85F);
	MakeName	(0XB85A,	"flgLOG");
	MakeStr		(0XB85F,	0XB865);
	MakeName	(0XB85F,	"flgPRIO");
	MakeStr		(0XB865,	0XB86B);
	MakeName	(0XB865,	"flgLOGO");
	MakeStr		(0XB86B,	0XB86E);
	MakeName	(0XB86B,	"fglQ");
	MakeStr		(0XB86E,	0XB876);
	MakeName	(0XB86E,	"flgSTATUS");
	MakeStr		(0XB876,	0XB879);
	MakeName	(0XB876,	"flg?");
	MakeStr		(0XB879,	0XB87E);
	MakeName	(0XB879,	"flgMBR");
	MakeStr		(0XB87E,	0XB881);
	MakeName	(0XB87E,	"flgX");
	MakeStr		(0XB881,	0XB888);
	MakeName	(0XB881,	"flgACTOK");
	MakeStr		(0XB888,	0XB88E);
	MakeName	(0XB888,	"flgCMBR");
	MakeStr		(0XB88E,	0XB895);
	MakeName	(0XB88E,	"flgFPRMT");
	MakeStr		(0XB895,	0XB89B);
	MakeName	(0XB895,	"flgXMBR");
	MakeStr		(0XB89C,	0XB8AB);
	MakeName	(0XB89C,	"FILE_NAME");
	MakeByte	(0XB8AC);
	MakeName	(0XB8AC,	"lba_partition_id");
	MakeWord	(x=0XB8AE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeName	(0XB8AE,	"pinsert");
	MakeWord	(0XB8B0);
	MakeName	(0XB8B0,	"NOVAL");
	MakeArray	(0XB8B2,	0X2);
	MakeWord	(0XB8B4);
	MakeWord	(0XB8B6);
	MakeWord	(0XB8B8);
	MakeWord	(0XB8BA);
	MakeByte	(0XB8BC);
	MakeWord	(0XB8BD);
	MakeWord	(0XB8BF);
	MakeWord	(0XB8C1);
	MakeWord	(0XB8C3);
	MakeWord	(0XB8C5);
	MakeWord	(0XB8C7);
	MakeWord	(0XB8C9);
	MakeByte	(0XB8CC);
	MakeArray	(0XB8CC,	0X103);
	MakeByte	(0XB9CF);
	MakeWord	(0XB9D0);
	MakeByte	(0XB9D2);
	MakeArray	(0XB9D2,	0X20);
	MakeWord	(0XB9F2);
	MakeWord	(0XB9F4);
	MakeWord	(0XB9F6);
	MakeCode	(0XB9FF);
	MakeCode	(0XBA06);
	MakeCode	(0XBA3A);
	MakeCode	(x=0XBA42);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0XBA46);
	OpHex		(x,	1);
	MakeCode	(x=0XBA5E);
	OpHex		(x,	1);
	MakeCode	(x=0XBA6B);
	OpHex		(x,	1);
	MakeCode	(0XBA76);
	MakeCode	(x=0XBA7D);
	OpHex		(x,	1);
	MakeCode	(0XBA90);
	MakeCode	(x=0XBAA2);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0XBAB2);
	OpHex		(x,	1);
	MakeCode	(x=0XBACB);
	OpHex		(x,	1);
	MakeCode	(0XBAD9);
	MakeCode	(0XBAE2);
	MakeCode	(x=0XBAE9);
	OpHex		(x,	1);
	MakeCode	(0XBB0E);
	MakeCode	(x=0XBB15);
	OpHex		(x,	1);
	MakeCode	(x=0XBB1E);
	OpHex		(x,	1);
	MakeCode	(0XBB5F);
	MakeCode	(x=0XBB63);
	OpHex		(x,	1);
	MakeCode	(x=0XBB73);
	OpHex		(x,	1);
	MakeCode	(0XBB81);
	MakeCode	(0XBB8C);
	MakeCode	(0XBB91);
	MakeCode	(0XBB93);
	MakeCode	(0XBBAF);
	MakeCode	(0XBBB8);
	MakeCode	(0XBBC2);
	MakeCode	(x=0XBBC4);
	OpHex		(x,	1);
	MakeCode	(x=0XBBCF);
	OpHex		(x,	1);
	MakeCode	(0XBBFD);
	MakeCode	(x=0XBC03);
	OpHex		(x,	1);
	MakeCode	(0XBC13);
	MakeCode	(0XBC19);
	MakeCode	(0XBC1C);
	MakeCode	(0XBC27);
	MakeCode	(0XBC50);
	MakeCode	(0XBC5A);
	MakeCode	(0XBC6C);
	MakeCode	(0XBC7F);
	MakeCode	(x=0XBC88);
	OpHex		(x,	1);
	MakeCode	(x=0XBC93);
	OpHex		(x,	1);
	MakeCode	(x=0XBCA0);
	OpHex		(x,	1);
	MakeCode	(0XBCAC);
	MakeCode	(x=0XBCD2);
	OpHex		(x,	1);
	MakeCode	(0XBCEB);
	MakeCode	(x=0XBCED);
	OpHex		(x,	1);
	MakeCode	(x=0XBD04);
	OpHex		(x,	1);
	MakeCode	(x=0XBD1B);
	OpHex		(x,	1);
	MakeCode	(0XBD43);
	MakeCode	(0XBD5D);
	MakeCode	(0XBD66);
	MakeCode	(0XBD69);
	MakeCode	(0XBD81);
	MakeCode	(0XBD85);
	MakeCode	(0XBD88);
	MakeCode	(x=0XBD94);
	OpHex		(x,	1);
	MakeCode	(0XBD98);
	MakeCode	(x=0XBD9B);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0XBDB6,	"DOS - 4.x internal - COUNTRY-DEPENDENT FILENAME CAPITALIZATION\nAL = function - ");
	MakeCode	(x=0XBDB6);
	OpHex		(x,	0);
	MakeCode	(0XBDCD);
	MakeCode	(x=0XBDCE);
	OpHex		(x,	1);
	MakeCode	(x=0XBDD4);
	OpHex		(x,	1);
	MakeCode	(x=0XBDE5);
	OpHex		(x,	1);
	MakeCode	(0XBDF1);
	MakeCode	(x=0XBE0A);
	OpHex		(x,	1);
	MakeCode	(x=0XBE0C);
	OpHex		(x,	1);
	MakeCode	(x=0XBE17);
	OpHex		(x,	1);
	MakeCode	(x=0XBE19);
	OpHex		(x,	1);
	MakeCode	(x=0XBE20);
	OpHex		(x,	1);
	MakeCode	(x=0XBE22);
	OpHex		(x,	1);
	MakeCode	(0XBE3F);
	MakeCode	(0XBE43);
	MakeCode	(x=0XBE44);
	OpHex		(x,	1);
	MakeCode	(0XBE68);
	MakeCode	(x=0XBE71);
	OpHex		(x,	1);
	MakeCode	(0XBE97);
	MakeCode	(0XBEB5);
	MakeCode	(0XBEC9);
	MakeCode	(0XBED0);
	MakeCode	(0XBEFB);
	MakeCode	(0XBF0E);
	MakeCode	(x=0XBF0F);
	OpHex		(x,	1);
	MakeCode	(0XBF19);
	MakeCode	(0XBF1E);
	MakeCode	(0XBF20);
	MakeCode	(0XBF2C);
	MakeCode	(0XBF2E);
	MakeCode	(0XBF41);
	MakeCode	(0XBF54);
	MakeCode	(x=0XBF65);
	OpHex		(x,	1);
	MakeCode	(x=0XBF7A);
	OpHex		(x,	1);
	MakeCode	(0XBF90);
	MakeCode	(0XBF9E);
	MakeCode	(x=0XBFB3);
	OpHex		(x,	1);
	MakeCode	(x=0XBFBB);
	OpHex		(x,	1);
	MakeCode	(x=0XBFCA);
	OpHex		(x,	1);
	MakeCode	(0XBFDE);
	MakeCode	(0XBFEC);
	MakeCode	(0XBFF7);
	MakeCode	(0XC069);
	MakeCode	(0XC09F);
	MakeCode	(x=0XC0B3);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(0XC0BF);
	MakeComm	(0XC0C9,	"DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION\nget current-country info\nDS:DX -> buffer for returned info");
	MakeCode	(x=0XC0C9);
	OpHex		(x,	0);
	MakeCode	(0XC0CF);
	MakeCode	(0XC0F1);
	MakeCode	(0XC116);
	MakeCode	(0XC11B);
	MakeCode	(0XC11F);
	MakeCode	(0XC125);
	MakeCode	(x=0XC130);
	OpHex		(x,	1);
	MakeCode	(x=0XC138);
	OpHex		(x,	1);
	MakeCode	(0XC143);
	MakeCode	(0XC146);
	MakeCode	(0XC149);
	MakeCode	(0XC14B);
	MakeCode	(0XC181);
	MakeCode	(x=0XC189);
	OpHex		(x,	1);
	MakeCode	(0XC1AB);
	MakeCode	(0XC1CC);
	MakeCode	(x=0XC1D0);
	OpHex		(x,	1);
	MakeCode	(x=0XC1D8);
	OpHex		(x,	1);
	MakeCode	(x=0XC1E2);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(0XC201);
	MakeCode	(0XC204);
	MakeCode	(x=0XC208);
	OpHex		(x,	1);
	MakeCode	(0XC210);
	MakeCode	(x=0XC226);
	OpHex		(x,	1);
	MakeComm	(0XC229,	"DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE");
	MakeCode	(x=0XC229);
	OpHex		(x,	0);
	MakeCode	(0XC25D);
	MakeCode	(0XC261);
	MakeCode	(0XC266);
	MakeName	(0XC266,	"CallParser");
	MakeCode	(x=0XC26D);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeComm	(0XC274,	"$M_RT_$M_EXT_ERR_ADDRS");
	MakeWord	(0XC274);
	MakeArray	(0XC274,	0X2);
	MakeName	(0XC274,	"$M_RT");
	MakeWord	(0XC278);
	MakeArray	(0XC278,	0X2);
	MakeName	(0XC278,	"$M_RT_$M_EXT_FILE");
	MakeWord	(0XC27C);
	MakeArray	(0XC27C,	0X2);
	MakeName	(0XC27C,	"$M_RT_$M_EXT_COMMAND");
	MakeDword	(0XC280);
	MakeName	(0XC280,	"$M_RT_$M_EXT_TERM");
	MakeWord	(0XC284);
	MakeArray	(0XC284,	0X2);
	MakeName	(0XC284,	"$M_RT_$M_PARSE_COMMAND");
	MakeWord	(0XC288);
	MakeArray	(0XC288,	0X2);
	MakeName	(0XC288,	"$M_ST_$M_PARSE_ADDRS");
	MakeDword	(0XC28C);
	MakeName	(0XC28C,	"$M_RT_$M_PARSE_TERM");
	MakeWord	(0XC290);
	MakeArray	(0XC290,	0X2);
	MakeName	(0XC290,	"$M_RT_$M_CRIT_ADDRS");
	MakeWord	(0XC294);
	MakeArray	(0XC294,	0X2);
	MakeName	(0XC294,	"$M_RT_$M_CRIT_COMMAND");
	MakeDword	(0XC298);
	MakeName	(0XC298,	"$M_RT_$M_CRIT_TERM");
	MakeDword	(0XC29C);
	MakeArray	(0XC29C,	0X2);
	MakeName	(0XC29C,	"$M_RT_$M_CLASS_ADDRS");
	MakeDword	(0XC2A4);
	MakeName	(0XC2A4,	"$M_RT_$M_CLS_TERM");
	MakeDword	(0XC2A8);
	MakeName	(0XC2A8,	"$M_RT_$M_DISK_PROC_ADDR");
	MakeDword	(0XC2AC);
	MakeName	(0XC2AC,	"$M_RT_$M_DBCS_VEC");
	MakeWord	(0XC2B0);
	MakeName	(0XC2B0,	"$M_RT_$M_HANDLE");
	MakeByte	(0XC2B2);
	MakeName	(0XC2B2,	"$M_RT_$M_SIZE");
	MakeByte	(0XC2B3);
	MakeArray	(0XC2B3,	0X2);
	MakeName	(0XC2B3,	"$M_RT_$M_CRLF");
	MakeWord	(0XC2B5);
	MakeName	(0XC2B5,	"$M_RT_$M_CLASS");
	MakeComm	(0XC2B7,	"completion_state");
	MakeWord	(0XC2B7);
	MakeName	(0XC2B7,	"$M_RT_$M_MSG_NUM");
	MakeComm	(0XC2B9,	"count of replacables");
	MakeWord	(0XC2B9);
	MakeName	(0XC2B9,	"$M_RT_$M_REPL_CNT");
	MakeWord	(x=0XC2BB);
	OpDecimal	(x,	0);
	MakeName	(0XC2BB,	"$M_RT_$M_DIVISOR");
	MakeWord	(0XC2BD);
	MakeName	(0XC2BD,	"$M_RT_W0");
	MakeWord	(x=0XC2BF);
	OpChr		(x,	0);
	MakeName	(0XC2BF,	"$M_RT_COMMA");
	MakeWord	(x=0XC2C1);
	OpChr		(x,	0);
	MakeName	(0XC2C1,	"$M_RT_DOT");
	MakeWord	(x=0XC2C3);
	OpChr		(x,	0);
	MakeName	(0XC2C3,	"$M_RT_DASH");
	MakeWord	(x=0XC2C5);
	OpChr		(x,	0);
	MakeName	(0XC2C5,	"$M_RT_COLON");
	MakeByte	(0XC2C7);
	MakeName	(0XC2C7,	"$M_RT_B1");
	MakeByte	(x=0XC2C8);
	MakeArray	(x,	0X40);
	OpChr		(x,	0);
	MakeName	(0XC2C8,	"$M_RT_$M_TEMP_BUF");
	MakeByte	(x=0XC308);
	OpChr		(x,	0);
	MakeName	(0XC308,	"$M_RT_$M_BUF_TERM");
	MakeWord	(0XC309);
	MakeComm	(0XC30B,	"multilanguage message file handle");
	MakeWord	(0XC30B);
	MakeName	(0XC30B,	"ml_msg_f_handle");
	MakeStr		(0XC30D,	0XC310);
	MakeName	(0XC30D,	"ENU");
	MakeWord	(0XC310);
	MakeName	(0XC310,	"ENU_off");
	MakeWord	(0XC312);
	MakeWord	(0XC314);
	MakeName	(0XC314,	"ENU_seg");
	MakeWord	(0XC316);
	MakeStr		(0XC318,	0XC31D);
	MakeName	(0XC318,	"LangVar");
	MakeStr		(0XC31D,	0XC326);
	MakeName	(0XC31D,	"LangSpecVar");
	MakeWord	(0XC326);
	MakeName	(0XC326,	"LangMsgFile_Buf");
	MakeByte	(0XC328);
	MakeByte	(0XC329);
	MakeByte	(0XC32A);
	MakeByte	(0XC32B);
	MakeWord	(0XC32C);
	MakeWord	(0XC331);
	MakeWord	(0XC33E);
	MakeByte	(0XC340);
	MakeArray	(0XC340,	0X3CB4);
	MakeByte	(0XFFFE);
	MakeArray	(0XFFFE,	0X542);
	MakeStr		(0X10540,	0X105B5);
	MakeName	(0X10540,	"aMsDosVersion8CCopyright");
	MakeCode	(0X105B5);
	MakeName	(0X105B5,	"SYSLOADMSG");
	MakeCode	(x=0X105BA);
	OpHex		(x,	1);
	MakeComm	(0X105BD,	"DOS - 2+ internal - GET PSP SEGMENT\nReturn: BX = current PSP segment");
	MakeCode	(x=0X105BD);
	OpHex		(x,	0);
	MakeComm	(0X105CA,	"Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES\nDL = subfunction - get standard DOS error table (errors 00h-12h,50h-5Bh)\nReturn: ES:DI -> error table");
	MakeCode	(x=0X105CA);
	OpHex		(x,	0);
	MakeComm	(0X105D6,	"Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES\nDL = subfunction - get ??? error table\nES:DI -> error table");
	MakeCode	(x=0X105D6);
	OpHex		(x,	0);
	MakeComm	(0X105E5,	"Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES\nDL = subfunction - get parameter error table (errors 00h-0Ah)\nES:DI -> error table");
	MakeCode	(x=0X105E5);
	OpHex		(x,	0);
	MakeComm	(0X105F4,	"Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES\nDL = subfunction - get critical/SHARE error table (errors 13h-2Bh)\nES:DI -> error table");
	MakeCode	(x=0X105F4);
	OpHex		(x,	0);
	MakeComm	(0X105FE,	"current PSP segment");
	MakeComm	(0X10600,	"environment segment");
	MakeComm	(0X10608,	"\nes:di+3 = LangSpec filename\n(langspec=???filename es:di points to filename-3)");
	MakeComm	(0X10610,	"ds:dx = langspec (multilanguage message) file name address");
	MakeCode	(x=0X10613);
	OpHex		(x,	1);
	MakeComm	(0X10616,	"DOS - 2+ - OPEN DISK FILE WITH HANDLE\nDS:DX -> ASCIZ filename\nAL = access mode\n0 - read");
	MakeCode	(x=0X10616);
	OpHex		(x,	0);
	MakeComm	(0X1061B,	"file handle");
	MakeComm	(0X1062C,	"DOS - 2+ - CLOSE A FILE WITH HANDLE\nBX = file handle");
	MakeCode	(x=0X1062C);
	OpHex		(x,	0);
	MakeComm	(0X10634,	"get error message retriever");
	MakeComm	(0X10636,	"Multiplex - DOS 3+ internal - GET OR SET ERROR TABLE ADDRESSES\nDL = subfunction - get ??? error table\nReturn: ES:DI -> error table");
	MakeCode	(x=0X10636);
	OpHex		(x,	0);
	MakeComm	(0X10638,	"ES:DI -> FAR procedure to fetch error message");
	MakeCode	(x=0X10646);
	OpChr		(x,	1);
	MakeCode	(x=0X10651);
	OpDecimal	(x,	1);
	MakeComm	(0X1065D,	"skip cx in stack (use cx returned by int 21h ah=30h)");
	MakeCode	(x=0X1065D);
	OpHex		(x,	1);
	MakeCode	(0X10662);
	MakeName	(0X10662,	"slm_1");
	MakeName	(0X10663,	"slm_2");
	MakeName	(0X10668,	"slm_3");
	MakeCode	(x=0X10669);
	OpDecimal	(x,	1);
	MakeName	(0X10669,	"slm_4");
	MakeCode	(0X1066F);
	MakeName	(0X1066F,	"set_messages");
	MakeCode	(x=0X1067A);
	OpHex		(x,	1);
	MakeComm	(0X1067D,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from end of file");
	MakeCode	(x=0X1067D);
	OpHex		(x,	0);
	MakeCode	(x=0X10691);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X10695,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer");
	MakeCode	(x=0X10695);
	OpHex		(x,	0);
	MakeComm	(0X10699,	"'SN'");
	MakeCode	(0X106B3);
	MakeCode	(x=0X106B7);
	OpHex		(x,	1);
	MakeComm	(0X106BA,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file");
	MakeCode	(x=0X106BA);
	OpHex		(x,	0);
	MakeCode	(x=0X106BC);
	OpDecimal	(x,	1);
	MakeCode	(x=0X106C2);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X106C6,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer");
	MakeCode	(x=0X106C6);
	OpHex		(x,	0);
	MakeCode	(x=0X106D5);
	OpHex		(x,	1);
	MakeCode	(x=0X106D7);
	OpHex		(x,	1);
	MakeCode	(0X106F2);
	MakeCode	(x=0X106F4);
	OpDecimal	(x,	1);
	MakeCode	(0X1071B);
	MakeCode	(x=0X1071D);
	OpHex		(x,	1);
	MakeComm	(0X10720,	"DOS - 2+ - MOVE FILE READ/WRITE POINTER (LSEEK)\nAL = method: offset from beginning of file");
	MakeCode	(x=0X10720);
	OpHex		(x,	0);
	MakeCode	(x=0X10727);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X1072B,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer");
	MakeCode	(x=0X1072B);
	OpHex		(x,	0);
	MakeCode	(x=0X1073F);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X10746);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X10761);
	OpHex		(x,	1);
	MakeCode	(0X10766);
	MakeCode	(0X1076B);
	MakeCode	(x=0X10789);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X1078D);
	OpHex		(x,	1);
	MakeComm	(0X1078F,	"DOS - 2+ - READ FROM FILE WITH HANDLE\nBX = file handle, CX = number of bytes to read\nDS:DX -> buffer");
	MakeCode	(x=0X1078F);
	OpHex		(x,	0);
	MakeCode	(0X10795);
	MakeCode	(0X10798);
	MakeCode	(x=0X107CE);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(x=0X107D2);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X107DE);
	MakeName	(0X107DE,	"multilang_msg_filename");
	MakeCode	(x=0X107E0);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X107E7,	"(*)");
	MakeComm	(0X107F9,	"also end of Environment segment (double zero) (*)");
	MakeCode	(x=0X107FD);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X10804,	"1st 2 chars of the language word (3 bytes)");
	MakeComm	(0X1080D,	"last char of the language word (3 bytes)");
	MakeCode	(0X10813);
	MakeCode	(x=0X10814);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X10831,	"language setting word offset (in environment seg)");
	MakeCode	(x=0X10831);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X10837,	"save environment segment for language setting");
	MakeCode	(0X10842);
	MakeCode	(x=0X10844);
	OpHex		(x,	1);
	MakeName	(0X10844,	"get_dos_version");
	MakeComm	(0X10846,	"DOS - GET DOS VERSION\nReturn: AL = major version number (00h for DOS 1.x)");
	MakeCode	(x=0X10846);
	OpHex		(x,	0);
	MakeComm	(0X1084A,	"8.0 (Windows ME)");
	MakeComm	(0X1084D,	"IBM ? OS/2 ?");
	MakeComm	(0X1084F,	"7.10");
	MakeComm	(0X10854,	"bx:cx= 0FFFF0000h");
	MakeComm	(0X10857,	"OS/2 (dos ver 20.??)");
	MakeComm	(0X1085C,	"bx:cx=20000h");
	MakeCode	(0X1086B);
	MakeName	(0X1086B,	"SYSGETMSG");
	MakeCode	(x=0X10874);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X1087B,	"ds:si = error msg address");
	MakeStr		(0X10882,	0X108C7);
	MakeName	(0X10882,	"msg_err_msg_nf");
	MakeCode	(0X108C7);
	MakeName	(0X108C7,	"SYSDISPMSG");
	MakeComm	(0X108D9,	"Test if replacable parameters were specified");
	MakeComm	(0X108DB,	"yes\nno");
	MakeComm	(0X108DD,	"Display string without replacable parms");
	MakeComm	(0X108E2,	"Display message with replacable parms");
	MakeCode	(0X108E2);
	MakeCode	(0X108F0);
	MakeComm	(0X108FC,	"Eliminate from stack");
	MakeCode	(x=0X108FC);
	OpHex		(x,	1);
	MakeComm	(0X10900,	"-1 ; error code");
	MakeCode	(0X10904);
	MakeName	(0X10904,	"_$M_DISPLAY_STRING");
	MakeComm	(0X1090B,	"$M_NO_HANDLE\nWas there a handle specified?");
	MakeComm	(0X10910,	"No, display $ terminated string");
	MakeComm	(0X10915,	"Yes, display string to handle");
	MakeCode	(0X10915);
	MakeComm	(0X1091A,	"DOS_GET_EXT_ERROR");
	MakeCode	(x=0X1091A);
	OpHex		(x,	1);
	MakeComm	(0X1091C,	"DOS_GET_EXT_ERROR_BX = 0");
	MakeComm	(0X1091F,	"DOS - 3+ - GET EXTENDED ERROR CODE\nBX = version code (0000h for DOS 3.x)");
	MakeCode	(x=0X1091F);
	OpHex		(x,	0);
	MakeComm	(0X10925,	"$M_NO_HANDLE");
	MakeCode	(0X10925);
	MakeComm	(0X1092A,	"Was it ALL written?");
	MakeComm	(0X1092E,	"_$M_GET_EXT_ERR_39\nEXT_ERR_39");
	MakeCode	(x=0X1092E);
	OpDecimal	(x,	1);
	MakeComm	(0X10931,	"(ERROR_CLASS_39 SHR 8) + ACTION_39");
	MakeComm	(0X10934,	"LOCUS_39");
	MakeComm	(0X10936,	"Clean up stack");
	MakeCode	(x=0X10936);
	OpHex		(x,	1);
	MakeComm	(0X10939,	"Flag that there was an error");
	MakeCode	(0X1093C);
	MakeCode	(0X10940);
	MakeName	(0X10940,	"_$M_DISPLAY_H_STRING");
	MakeComm	(0X10947,	"DOS_WRITE_HANDLE");
	MakeCode	(x=0X10947);
	OpHex		(x,	1);
	MakeComm	(0X1094B,	"$M_SINGLE_CHAR");
	MakeComm	(0X10950,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X10950);
	OpHex		(x,	0);
	MakeComm	(0X10954,	"DOS - 2+ - WRITE TO FILE WITH HANDLE\nBX = file handle, CX = number of bytes to write, DS:DX -> buffer");
	MakeCode	(x=0X10954);
	OpHex		(x,	0);
	MakeComm	(0X1095F,	"is char a Ctrl-Z?");
	MakeComm	(0X10965,	"no, continue");
	MakeCode	(0X1096B);
	MakeName	(0X1096B,	"_$M_DISPLAY_$_STRING");
	MakeComm	(0X1096E,	"$M_SINGLE_CHAR");
	MakeComm	(0X10973,	"DOS_DISP_CHAR");
	MakeComm	(0X10978,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output");
	MakeCode	(x=0X10978);
	OpHex		(x,	0);
	MakeComm	(0X1097C,	"DOS_DISP_CHAR");
	MakeCode	(0X1097C);
	MakeComm	(0X10983,	"DOS - DISPLAY OUTPUT\nDL = character to send to standard output");
	MakeCode	(x=0X10983);
	OpHex		(x,	0);
	MakeComm	(0X1098B,	"UTILITY_MSG_CLASS ; Is it a utility message?");
	MakeCode	(0X1098B);
	MakeName	(0X1098B,	"_$M_ADD_CRLF");
	MakeComm	(0X10990,	"$M_NO_CRLF_MASK ; Are we to supress the CR LF?");
	MakeCode	(x=0X10990);
	OpHex		(x,	1);
	MakeComm	(0X10997,	"$M_RT.$M_CRLF");
	MakeCode	(x=0X10997);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X1099B,	"$M_CRLF_SIZE");
	MakeCode	(0X109A2);
	MakeName	(0X109A2,	"_$M_CONVERT2ASC");
	MakeCode	(0X109BD);
	MakeCode	(x=0X109D3);
	OpHex		(x,	1);
	MakeCode	(0X109E1);
	MakeCode	(0X109F0);
	MakeComm	(0X109F9,	"BP contains the count of replacables\n\nES:DI points to beginning of message\nDS:SI points to first sublist structure in chain\nBX contains the handle to write to (if applicable)\nCX contains the length of string to write (before substitutions)");
	MakeCode	(0X109F9);
	MakeName	(0X109F9,	"_$M_DISPLAY_MESSAGE");
	MakeCode	(0X10A04);
	MakeComm	(0X10A09,	"Prepare to scan for %");
	MakeComm	(0X10A0F,	"Next character in string");
	MakeCode	(0X10A0F);
	MakeComm	(0X10A10,	"Size = Size + 1");
	MakeComm	(0X10A11,	"Decrement total size");
	MakeComm	(0X10A12,	"Next character in string");
	MakeComm	(0X10A13,	"Size = Size + 1");
	MakeComm	(0X10A16,	"Get size of message to display (tot sz in DX)");
	MakeComm	(0X10A18,	"cx = position/offset (from beginning) in the msg");
	MakeComm	(0X10A1B,	"es:di points to start of the message");
	MakeCode	(0X10A26);
	MakeComm	(0X10A2A,	"char after '%'");
	MakeCode	(0X10A2A);
	MakeComm	(0X10A2E,	"is this 2nd '%' ('%%')");
	MakeComm	(0X10A30,	"yes, ignore (not replacable)");
	MakeComm	(0X10A32,	"convert numeric char to number");
	MakeCode	(x=0X10A32);
	OpChr		(x,	1);
	MakeComm	(0X10A36,	"if AL > count of replacables");
	MakeComm	(0X10A3A,	"ignore it");
	MakeComm	(0X10A3C,	"replacement byte count");
	MakeComm	(0X10A40,	"Do we have any replacables to do?");
	MakeCode	(0X10A4C);
	MakeCode	(x=0X10A59);
	OpHex		(x,	1);
	MakeCode	(x=0X10A67);
	OpHex		(x,	1);
	MakeCode	(x=0X10A6D);
	OpHex		(x,	1);
	MakeCode	(x=0X10A73);
	OpHex		(x,	1);
	MakeCode	(0X10A86);
	MakeComm	(0X10A8E,	"$M_NULL ; Is this an Extended/Parse case");
	MakeCode	(0X10A9D);
	MakeCode	(0X10AAE);
	MakeCode	(0X10AB5);
	MakeName	(0X10AB5,	"_$M_EXT_PAR_REPLACE");
	MakeCode	(x=0X10ABA);
	OpDecimal	(x,	1);
	MakeCode	(x=0X10AC4);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X10AC9,	"$M_TEMP_BUF_SZ");
	MakeCode	(x=0X10AC9);
	OpDecimal	(x,	1);
	MakeComm	(0X10AD5,	"$M_CR_LF");
	MakeCode	(x=0X10AD8);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeCode	(0X10AE2);
	MakeCode	(x=0X10B0F);
	OpHex		(x,	1);
	MakeCode	(x=0X10B3E);
	OpHex		(x,	1);
	MakeCode	(x=0X10B44);
	OpHex		(x,	1);
	MakeCode	(0X10B50);
	MakeCode	(x=0X10B62);
	OpHex		(x,	1);
	MakeCode	(x=0X10B80);
	OpHex		(x,	1);
	MakeCode	(x=0X10B86);
	OpHex		(x,	1);
	MakeCode	(0X10B9D);
	MakeName	(0X10B9D,	"_$M_FLUSH_BUF");
	MakeCode	(x=0X10BA6);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeCode	(x=0X10BB4);
	OpHex		(x,	1);
	MakeCode	(0X10BB9);
	MakeCode	(x=0X10BBA);
	OpHex		(x,	1);
	MakeCode	(0X10BC7);
	MakeCode	(0X10BD2);
	MakeCode	(0X10BD6);
	MakeCode	(x=0X10BE3);
	OpHex		(x,	1);
	MakeCode	(x=0X10BEC);
	OpHex		(x,	1);
	MakeCode	(x=0X10BF2);
	OpHex		(x,	1);
	MakeCode	(x=0X10BF7);
	OpHex		(x,	1);
	MakeCode	(x=0X10C01);
	OpHex		(x,	1);
	MakeCode	(x=0X10C0A);
	OpHex		(x,	1);
	MakeCode	(x=0X10C10);
	OpHex		(x,	1);
	MakeCode	(x=0X10C16);
	OpHex		(x,	1);
	MakeCode	(0X10C21);
	MakeCode	(x=0X10C28);
	OpHex		(x,	1);
	MakeCode	(x=0X10C2E);
	OpHex		(x,	1);
	MakeCode	(x=0X10C34);
	OpHex		(x,	1);
	MakeCode	(x=0X10C3D);
	OpHex		(x,	1);
	MakeCode	(0X10C57);
	MakeCode	(x=0X10C5B);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X10C5F,	"DOS - 2+ - GET COUNTRY-DEPENDENT INFORMATION\nget current-country info\nDS:DX -> buffer for returned info");
	MakeCode	(x=0X10C5F);
	OpHex		(x,	0);
	MakeComm	(0X10C84,	"FUNCTION:\n     To scan thru classes to return pointer to the message header\n INPUTS:\n     Access to $M_RES_ADDRESSES\n OUTPUTS:\n     IF CX = 0 THEN Message was not found\n     IF CX > 1 THEN ES:DI points to the specified message");
	MakeCode	(0X10C84);
	MakeName	(0X10C84,	"_$M_GET_MSG_ADDRESS");
	MakeComm	(0X10C86,	"Use SI as an index");
	MakeComm	(0X10C88,	"Use CX as an size");
	MakeComm	(0X10C8A,	"reset msg completion state");
	MakeComm	(0X10C90,	"MSG_SER_CLASS");
	MakeCode	(0X10C97);
	MakeComm	(0X10C98,	"((UTILITY message CLASS in Windows ME FDISK))");
	MakeComm	(0X10C9D,	"$M_RT+$M_RES_ADDRS.$M_CLASS_ADDRS\n(note: it is $M_RES_ADDRS.$M_DISK_PROC_ADDR in MSDOS 6\n      MSGSERV.ASM but this may be changed)");
	MakeCode	(x=0X10C9D);
	OpDecimal	(x,	1);
	MakeComm	(0X10CA2,	"PARSE_ERR_CLASS");
	MakeCode	(x=0X10CA2);
	OpHex		(x,	1);
	MakeComm	(0X10CA7,	"$M_RES_ADDRS.$M_PARSE_COMMAND");
	MakeCode	(x=0X10CA7);
	OpDecimal	(x,	1);
	MakeComm	(0X10CAA,	"$M_CRIT_LO");
	MakeCode	(x=0X10CAA);
	OpDecimal	(x,	1);
	MakeComm	(0X10CAF,	"$M_CRIT_HI");
	MakeCode	(x=0X10CAF);
	OpDecimal	(x,	1);
	MakeComm	(0X10CB4,	"$M_RES_ADDRS.$M_CRIT_ADDRS");
	MakeCode	(x=0X10CB4);
	OpDecimal	(x,	1);
	MakeComm	(0X10CB7,	"$M_RT = base addr for $M_RES_ADDRS struct/table\nRef: MSGSERV.ASM (MSDOS 6.0 source code)");
	MakeCode	(x=0X10CB7);
	OpOff		(x,	1,	0XA650);
	OpOff		(x,	129,	0XA650);
	MakeComm	(0X10CBB,	"offset $M_RT+$M_RES_ADDRS.??????");
	MakeComm	(0X10CBD,	"Get address of class");
	MakeComm	(0X10CC1,	"$M_TERMINATING_FLAG\nAre we finished all classes?");
	MakeComm	(0X10CC6,	"DISK_ERR_CLASS");
	MakeComm	(0X10CCE,	"$M_SPECIAL_MSG_NUM");
	MakeCode	(0X10CCE);
	MakeComm	(0X10CD3,	"EXT_ERR_CLASS");
	MakeComm	(0X10CDD,	"error text/msg length > 0");
	MakeComm	(0X10CE4,	"(already > 0) ; done");
	MakeComm	(0X10CE6,	"1 or 0");
	MakeComm	(0X10CE9,	"change msg number to -1");
	MakeComm	(0X10CEC,	"special msg");
	MakeComm	(0X10CEF,	"reset msg index");
	MakeComm	(0X10CF4,	"$M_CLASS_NOT_EXIST\nDoes this class exist?");
	MakeCode	(0X10CF4);
	MakeComm	(0X10CF7,	"no");
	MakeComm	(0X10CFC,	"$M_ADDR_SZ_FAR");
	MakeComm	(0X10D01,	"EXT_ERR_CLASS");
	MakeComm	(0X10D07,	"IF CX = 0 THEN\n   Message was not found\nIF CX > 1 THEN \n   ES:DI points to the specified message");
	MakeCode	(0X10D0A);
	MakeName	(0X10D0A,	"_$IFS_GET_ERR_MSG");
	MakeComm	(0X10D10,	"IFSFUNC_INSTALL_CHECK ; Check if IFSFUNC is installed");
	MakeComm	(0X10D13,	"Multiplex - DOS 3+ CRITICAL ERROR HANDLER - INSTALLATION CHECK\nReturn: AL = 00h not installed, OK to install\n01h not installed, can't install\nFFh installed");
	MakeCode	(x=0X10D13);
	OpHex		(x,	0);
	MakeComm	(0X10D15,	"IFSFUNC_INSTALLED ; Is it installed?");
	MakeComm	(0X10D17,	"Restore msg number");
	MakeComm	(0X10D18,	"no\nyes");
	MakeComm	(0X10D1A,	"BX is the extended error number");
	MakeComm	(0X10D1C,	"IFS_GET_ERR_TEXT");
	MakeComm	(0X10D1F,	"Multiplex - DOS 3+ CRITICAL ERROR HANDLER - ");
	MakeCode	(x=0X10D1F);
	OpHex		(x,	0);
	MakeComm	(0X10D23,	"ES:DI -> ASCIIZ error message");
	MakeComm	(0X10D24,	"completion state \n0 = msg is complete 1 = device name, drive is required");
	MakeComm	(0X10D25,	"Get the length of the ASCIIZ string\n-1");
	MakeName	(0X10D25,	"_$M_SET_LEN_IN_CX");
	MakeComm	(0X10D31,	"Throw away old pointer");
	MakeCode	(x=0X10D31);
	OpHex		(x,	1);
	MakeCode	(0X10D36);
	MakeComm	(0X10D3C,	"FUNCTION:\n      To scan thru message headers until message is found\n INPUTS:\n      ES:DI points to beginning of msg headers\n      CX contains the number of messages in class\n      DH contains the message class\n OUTPUTS:\n      IF CX = 0 THEN Message was not found\n      IF CX > 1 THEN ES:DI points to header of specified message");
	MakeCode	(0X10D3C);
	MakeName	(0X10D3C,	"_$M_FIND_SPECIFIED_MSG");
	MakeComm	(0X10D41,	"[$M_RT.$M_DISK_PROC_ADDR],-1");
	MakeCode	(0X10D58);
	MakeCode	(0X10D7E);
	MakeCode	(0X10D8E);
	MakeComm	(0X10D91,	"sysloadmsg(&inregs,&outregs);");
	MakeCode	(0X10D91);
	MakeName	(0X10D91,	"_sysloadmsg");
	MakeComm	(0X10D96,	"fix di (arg 0)");
	MakeCode	(x=0X10D96);
	OpStkvar	(x,	1);
	MakeComm	(0X10D99,	"load di");
	MakeComm	(0X10D9D,	"get inregs.x.ax");
	MakeComm	(0X10DA8,	"get inregs.x.si");
	MakeCode	(x=0X10DAD);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeComm	(0X10DB3,	"the di value from call is now on stack");
	MakeComm	(0X10DB4,	"fix di (arg 1)");
	MakeCode	(x=0X10DB4);
	OpStkvar	(x,	1);
	MakeComm	(0X10DB7,	"load outregs.x.ax");
	MakeComm	(0X10DC2,	"load outregs.x.si");
	MakeComm	(0X10DC5,	"get flags into ax");
	MakeComm	(0X10DC6,	"move into low byte");
	MakeComm	(0X10DC8,	"load outregs.x.cflag");
	MakeComm	(0X10DCB,	"get di from stack");
	MakeComm	(0X10DCC,	"load outregs.x.di");
	MakeComm	(0X10DD5,	"sysdispmsg(&regs,&regs);\n\nsave user's base pointer");
	MakeCode	(0X10DD5);
	MakeName	(0X10DD5,	"_sysdispmsg");
	MakeComm	(0X10DD8,	"save some registers");
	MakeComm	(0X10DDA,	"fix di (arg 0)");
	MakeCode	(x=0X10DDA);
	OpStkvar	(x,	1);
	MakeComm	(0X10DDD,	"load di");
	MakeCode	(x=0X10DDD);
	OpDecimal	(x,	1);
	MakeComm	(0X10DE0,	"the di value from inregs is now on stack");
	MakeComm	(0X10DE1,	"get inregs.x.ax");
	MakeComm	(0X10DEC,	"get inregs.x.si");
	MakeComm	(0X10DEF,	"get inregs.x.di from stack");
	MakeComm	(0X10DF7,	"the di value from call is now on stack");
	MakeComm	(0X10DF8,	"fix di (arg 1)");
	MakeCode	(x=0X10DF8);
	OpStkvar	(x,	1);
	MakeComm	(0X10DFB,	"load outregs.x.ax");
	MakeComm	(0X10DFD,	"load outregs.x.bx");
	MakeComm	(0X10E00,	"load outregs.x.cx");
	MakeComm	(0X10E03,	"load outregs.x.dx");
	MakeComm	(0X10E06,	"load outregs.x.si");
	MakeComm	(0X10E09,	"get flags into ax");
	MakeComm	(0X10E0A,	"move into low byte");
	MakeComm	(0X10E0C,	"load outregs.x.cflag");
	MakeCode	(x=0X10E0C);
	OpDecimal	(x,	0);
	MakeComm	(0X10E0F,	"get di from stack");
	MakeComm	(0X10E10,	"load outregs.x.di");
	MakeCode	(x=0X10E10);
	OpDecimal	(x,	0);
	MakeComm	(0X10E19,	"sysgetmsg(&regs,&segregs,&regs);   \n\nsave user's base pointer");
	MakeCode	(0X10E19);
	MakeName	(0X10E19,	"_sysgetmsg");
	MakeComm	(0X10E1A,	"set bp to current sp");
	MakeComm	(0X10E1C,	"save some registers");
	MakeComm	(0X10E1E,	"fix di (arg 0)");
	MakeCode	(x=0X10E1E);
	OpStkvar	(x,	1);
	MakeComm	(0X10E21,	"load di");
	MakeCode	(x=0X10E21);
	OpDecimal	(x,	1);
	MakeComm	(0X10E24,	"the di value from inregs is now on stack");
	MakeComm	(0X10E25,	"get inregs.x.ax");
	MakeComm	(0X10E27,	"get inregs.x.bx");
	MakeComm	(0X10E2A,	"get inregs.x.cx");
	MakeComm	(0X10E2D,	"get inregs.x.dx");
	MakeComm	(0X10E30,	"get inregs.x.si");
	MakeComm	(0X10E33,	"get inregs.x.di from stack");
	MakeComm	(0X10E34,	"save base pointer");
	MakeComm	(0X10E35,	"call the message retriever\nds:si = msg (text) address");
	MakeComm	(0X10E3A,	"restore base pointer");
	MakeComm	(0X10E3B,	"the di value from call is now on stack");
	MakeComm	(0X10E3C,	"fix di (arg 1)");
	MakeCode	(x=0X10E3C);
	OpStkvar	(x,	1);
	MakeComm	(0X10E40,	"load segregs.es");
	MakeComm	(0X10E42,	"load outregs.ds");
	MakeComm	(0X10E46,	"restore di");
	MakeComm	(0X10E47,	"save it");
	MakeComm	(0X10E48,	"fix di (arg 2)");
	MakeCode	(x=0X10E48);
	OpStkvar	(x,	1);
	MakeComm	(0X10E4B,	"load outregs.x.ax");
	MakeComm	(0X10E4D,	"load outregs.x.bx");
	MakeComm	(0X10E50,	"load outregs.x.cx");
	MakeComm	(0X10E53,	"load outregs.x.dx");
	MakeComm	(0X10E56,	"load outregs.x.si");
	MakeComm	(0X10E59,	"get flags into ax");
	MakeComm	(0X10E5A,	"move into low byte");
	MakeComm	(0X10E5C,	"load outregs.x.cflag");
	MakeCode	(x=0X10E5C);
	OpDecimal	(x,	0);
	MakeComm	(0X10E5F,	"get di from stack");
	MakeComm	(0X10E60,	"load outregs.x.di");
	MakeCode	(x=0X10E60);
	OpDecimal	(x,	0);
	MakeComm	(0X10E63,	"restore registers");
	MakeComm	(0X10E65,	"restore sp");
	MakeComm	(0X10E67,	"restore user's bp");
	MakeWord	(0X10E6A);
	MakeName	(0X10E6A,	"menu_1");
	MakeWord	(0X10E6C);
	MakeComm	(0X10E6E,	"menu 1, message number = 3");
	MakeWord	(0X10E6E);
	MakeWord	(0X10E70);
	MakeWord	(0X10E72);
	MakeName	(0X10E72,	"menu_2");
	MakeWord	(0X10E74);
	MakeWord	(0X10E76);
	MakeComm	(0X10E78,	"menu 2, message number = 7");
	MakeWord	(0X10E78);
	MakeWord	(0X10E7A);
	MakeWord	(0X10E7C);
	MakeWord	(0X10E7E);
	MakeWord	(x=0X10E80);
	OpDecimal	(x,	0);
	MakeName	(0X10E80,	"menu_3");
	MakeWord	(0X10E82);
	MakeWord	(x=0X10E84);
	OpDecimal	(x,	0);
	MakeName	(0X10E84,	"menu_4");
	MakeWord	(0X10E86);
	MakeWord	(x=0X10E88);
	OpDecimal	(x,	0);
	MakeName	(0X10E88,	"menu_5");
	MakeWord	(0X10E8A);
	MakeWord	(x=0X10E8C);
	OpDecimal	(x,	0);
	MakeName	(0X10E8C,	"menu_6");
	MakeWord	(x=0X10E8E);
	OpDecimal	(x,	0);
	MakeWord	(0X10E90);
	MakeWord	(x=0X10E92);
	OpDecimal	(x,	0);
	MakeName	(0X10E92,	"menu_7");
	MakeWord	(0X10E94);
	MakeWord	(x=0X10E96);
	OpDecimal	(x,	0);
	MakeName	(0X10E96,	"menu_8");
	MakeWord	(0X10E98);
	MakeWord	(x=0X10E9A);
	OpDecimal	(x,	0);
	MakeName	(0X10E9A,	"menu_9");
	MakeWord	(x=0X10E9C);
	OpDecimal	(x,	0);
	MakeWord	(0X10E9E);
	MakeWord	(x=0X10EA0);
	OpDecimal	(x,	0);
	MakeName	(0X10EA0,	"menu_10");
	MakeWord	(0X10EA2);
	MakeWord	(x=0X10EA4);
	OpDecimal	(x,	0);
	MakeName	(0X10EA4,	"menu_11");
	MakeWord	(0X10EA6);
	MakeWord	(x=0X10EA8);
	OpDecimal	(x,	0);
	MakeName	(0X10EA8,	"menu_12");
	MakeWord	(0X10EAA);
	MakeWord	(x=0X10EAC);
	OpDecimal	(x,	0);
	MakeName	(0X10EAC,	"menu_13");
	MakeWord	(x=0X10EAE);
	OpDecimal	(x,	0);
	MakeWord	(0X10EB0);
	MakeComm	(0X10EB2,	"5 messages (24-28) on menu page");
	MakeWord	(x=0X10EB2);
	OpDecimal	(x,	0);
	MakeName	(0X10EB2,	"menu_14");
	MakeWord	(x=0X10EB4);
	OpDecimal	(x,	0);
	MakeComm	(0X10EB6,	"menu 14, message number = 26");
	MakeWord	(x=0X10EB6);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EB8);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EBA);
	OpDecimal	(x,	0);
	MakeWord	(0X10EBC);
	MakeWord	(x=0X10EBE);
	OpDecimal	(x,	0);
	MakeName	(0X10EBE,	"menu_15");
	MakeWord	(0X10EC0);
	MakeWord	(x=0X10EC2);
	OpDecimal	(x,	0);
	MakeName	(0X10EC2,	"menu_16");
	MakeWord	(0X10EC4);
	MakeWord	(x=0X10EC6);
	OpDecimal	(x,	0);
	MakeName	(0X10EC6,	"menu_17");
	MakeWord	(0X10EC8);
	MakeWord	(x=0X10ECA);
	OpDecimal	(x,	0);
	MakeName	(0X10ECA,	"menu_18");
	MakeWord	(x=0X10ECC);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10ECE);
	OpDecimal	(x,	0);
	MakeName	(0X10ECE,	"menu_19");
	MakeWord	(x=0X10ED0);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10ED2);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10ED4);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10ED6);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10ED8);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EDA);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EDC);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EDE);
	OpDecimal	(x,	0);
	MakeName	(0X10EDE,	"menu_20");
	MakeWord	(x=0X10EE0);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EE2);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EE4);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EE6);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EE8);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EEA);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EEC);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EEE);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EF0);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EF2);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EF4);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EF6);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EF8);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EFA);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EFC);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10EFE);
	OpDecimal	(x,	0);
	MakeName	(0X10EFE,	"menu_25");
	MakeWord	(x=0X10F00);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F02);
	OpDecimal	(x,	0);
	MakeName	(0X10F02,	"menu_26");
	MakeWord	(x=0X10F04);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F06);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F08);
	OpDecimal	(x,	0);
	MakeName	(0X10F08,	"menu_27");
	MakeWord	(x=0X10F0A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F0C);
	OpDecimal	(x,	0);
	MakeName	(0X10F0C,	"menu_28");
	MakeWord	(x=0X10F0E);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F10);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F12);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F14);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F16);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F18);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F1A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F1C);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F1E);
	OpDecimal	(x,	0);
	MakeName	(0X10F1E,	"menu_32");
	MakeWord	(x=0X10F20);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F22);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F24);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F26);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F28);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F2A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F2C);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F2E);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F30);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F32);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F34);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F36);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F38);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F3A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F3C);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F3E);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F40);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F42);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F44);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F46);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F48);
	OpDecimal	(x,	0);
	MakeName	(0X10F48,	"menu_42");
	MakeWord	(x=0X10F4A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F4C);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F4E);
	OpDecimal	(x,	0);
	MakeName	(0X10F4E,	"menu_43");
	MakeWord	(x=0X10F50);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F52);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F54);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F56);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F58);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F5A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F5C);
	OpDecimal	(x,	0);
	MakeName	(0X10F5C,	"menu_44");
	MakeWord	(x=0X10F5E);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F60);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F62);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F64);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F66);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F68);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F6A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F6C);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F6E);
	OpDecimal	(x,	0);
	MakeName	(0X10F6E,	"menu_46");
	MakeWord	(x=0X10F70);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F72);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F74);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F76);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F78);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F7A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F7C);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F7E);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F80);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F82);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F84);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F86);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F88);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F8A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F8C);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F8E);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F90);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F92);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F94);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F96);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F98);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F9A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F9C);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10F9E);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FA0);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FA2);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FA4);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FA6);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FA8);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FAA);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FAC);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FAE);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FB0);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FB2);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FB4);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FB6);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FB8);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FBA);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FBC);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FBE);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FC0);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FC2);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FC4);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FC6);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FC8);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FCA);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FCC);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FCE);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FD0);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FD2);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FD4);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FD6);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FD8);
	OpDecimal	(x,	0);
	MakeName	(0X10FD8,	"menu_57");
	MakeWord	(x=0X10FDA);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FDC);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FDE);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FE0);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FE2);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FE4);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FE6);
	OpDecimal	(x,	0);
	MakeName	(0X10FE6,	"menu_38");
	MakeWord	(x=0X10FE8);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FEA);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FEC);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FEE);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FF0);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FF2);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FF4);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FF6);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FF8);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FFA);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FFC);
	OpDecimal	(x,	0);
	MakeWord	(x=0X10FFE);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11000);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11002);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11004);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11006);
	OpDecimal	(x,	0);
	MakeName	(0X11006,	"menu_61");
	MakeWord	(x=0X11008);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1100A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1100C);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1100E);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11010);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11012);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11014);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11016);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11018);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1101A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1101C);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1101E);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11020);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11022);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11024);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11026);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11028);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1102A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1102C);
	OpDecimal	(x,	0);
	MakeName	(0X1102C,	"status_1");
	MakeWord	(x=0X1102E);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11030);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11032);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11034);
	OpDecimal	(x,	0);
	MakeWord	(0X11036);
	MakeWord	(x=0X11038);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1103A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1103C);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1103E);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11040);
	OpDecimal	(x,	0);
	MakeName	(0X11040,	"status_6");
	MakeWord	(x=0X11042);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11044);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11046);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11048);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1104A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1104C);
	OpDecimal	(x,	0);
	MakeName	(0X1104C,	"status_9");
	MakeWord	(x=0X1104E);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11050);
	OpDecimal	(x,	0);
	MakeName	(0X11050,	"status_10");
	MakeWord	(x=0X11052);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11054);
	OpDecimal	(x,	0);
	MakeName	(0X11054,	"status_11");
	MakeWord	(x=0X11056);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11058);
	OpDecimal	(x,	0);
	MakeName	(0X11058,	"status_12");
	MakeWord	(x=0X1105A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1105C);
	OpDecimal	(x,	0);
	MakeName	(0X1105C,	"status_13");
	MakeWord	(x=0X1105E);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11060);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11062);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11064);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11066);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11068);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1106A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1106C);
	OpDecimal	(x,	0);
	MakeName	(0X1106C,	"error_1");
	MakeWord	(x=0X1106E);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11070);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11072);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11074);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11076);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11078);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1107A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1107C);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1107E);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11080);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11082);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11084);
	OpDecimal	(x,	0);
	MakeName	(0X11084,	"error_6");
	MakeWord	(x=0X11086);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11088);
	OpDecimal	(x,	0);
	MakeName	(0X11088,	"error_7");
	MakeWord	(x=0X1108A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1108C);
	OpDecimal	(x,	0);
	MakeName	(0X1108C,	"error_8");
	MakeWord	(x=0X1108E);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11090);
	OpDecimal	(x,	0);
	MakeName	(0X11090,	"error_9");
	MakeWord	(x=0X11092);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11094);
	OpDecimal	(x,	0);
	MakeName	(0X11094,	"error_10");
	MakeWord	(x=0X11096);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11098);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1109A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1109C);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1109E);
	OpDecimal	(x,	0);
	MakeName	(0X1109E,	"error_13");
	MakeWord	(x=0X110A0);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110A2);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110A4);
	OpDecimal	(x,	0);
	MakeName	(0X110A4,	"error_14");
	MakeWord	(x=0X110A6);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110A8);
	OpDecimal	(x,	0);
	MakeName	(0X110A8,	"error_15");
	MakeWord	(x=0X110AA);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110AC);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110AE);
	OpDecimal	(x,	0);
	MakeName	(0X110AE,	"error_16");
	MakeWord	(x=0X110B0);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110B2);
	OpDecimal	(x,	0);
	MakeName	(0X110B2,	"error_17");
	MakeWord	(x=0X110B4);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110B6);
	OpDecimal	(x,	0);
	MakeName	(0X110B6,	"error_19");
	MakeWord	(x=0X110B8);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110BA);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110BC);
	OpDecimal	(x,	0);
	MakeName	(0X110BC,	"error_20");
	MakeWord	(x=0X110BE);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110C0);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110C2);
	OpDecimal	(x,	0);
	MakeName	(0X110C2,	"error_21");
	MakeWord	(x=0X110C4);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110C6);
	OpDecimal	(x,	0);
	MakeName	(0X110C6,	"error_22");
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_3(void) {
        auto x;
#define id x

	MakeWord	(x=0X110C8);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110CA);
	OpDecimal	(x,	0);
	MakeName	(0X110CA,	"error_23");
	MakeWord	(x=0X110CC);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110CE);
	OpDecimal	(x,	0);
	MakeName	(0X110CE,	"error_24");
	MakeWord	(x=0X110D0);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110D2);
	OpDecimal	(x,	0);
	MakeName	(0X110D2,	"error_25");
	MakeWord	(x=0X110D4);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110D6);
	OpDecimal	(x,	0);
	MakeName	(0X110D6,	"error_26");
	MakeWord	(x=0X110D8);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110DA);
	OpDecimal	(x,	0);
	MakeName	(0X110DA,	"error_27");
	MakeWord	(x=0X110DC);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110DE);
	OpDecimal	(x,	0);
	MakeName	(0X110DE,	"error_28");
	MakeWord	(x=0X110E0);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110E2);
	OpDecimal	(x,	0);
	MakeName	(0X110E2,	"error_29");
	MakeWord	(x=0X110E4);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110E6);
	OpDecimal	(x,	0);
	MakeName	(0X110E6,	"error_30");
	MakeWord	(x=0X110E8);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110EA);
	OpDecimal	(x,	0);
	MakeName	(0X110EA,	"error_31");
	MakeWord	(x=0X110EC);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110EE);
	OpDecimal	(x,	0);
	MakeName	(0X110EE,	"error_32");
	MakeWord	(x=0X110F0);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110F2);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110F4);
	OpDecimal	(x,	0);
	MakeName	(0X110F4,	"error_33");
	MakeWord	(x=0X110F6);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110F8);
	OpDecimal	(x,	0);
	MakeName	(0X110F8,	"error_34");
	MakeWord	(x=0X110FA);
	OpDecimal	(x,	0);
	MakeWord	(x=0X110FC);
	OpDecimal	(x,	0);
	MakeName	(0X110FC,	"error_35");
	MakeWord	(x=0X110FE);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11100);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11102);
	OpDecimal	(x,	0);
	MakeName	(0X11102,	"error_36");
	MakeWord	(x=0X11104);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11106);
	OpDecimal	(x,	0);
	MakeName	(0X11106,	"error_37");
	MakeWord	(x=0X11108);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1110A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1110C);
	OpDecimal	(x,	0);
	MakeName	(0X1110C,	"error_38");
	MakeWord	(x=0X1110E);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11110);
	OpDecimal	(x,	0);
	MakeName	(0X11110,	"error_39");
	MakeWord	(x=0X11112);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11114);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11116);
	OpDecimal	(x,	0);
	MakeName	(0X11116,	"error_2");
	MakeWord	(x=0X11118);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1111A);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1111C);
	OpDecimal	(x,	0);
	MakeWord	(x=0X1111E);
	OpDecimal	(x,	0);
	MakeName	(0X1111E,	"debug_msg");
	MakeWord	(x=0X11120);
	OpDecimal	(x,	0);
	MakeWord	(x=0X11122);
	OpDecimal	(x,	0);
	MakeName	(0X11122,	"inter_err");
	MakeWord	(x=0X11124);
	OpDecimal	(x,	0);
	MakeStr		(0X11126,	0X11132);
	MakeName	(0X11126,	"aRemote");
	MakeWord	(x=0X11132);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeStr		(0X11134,	0X1113C);
	MakeName	(0X11134,	"aPriDos");
	MakeWord	(x=0X1113C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeStr		(0X1113E,	0X11146);
	MakeName	(0X1113E,	"aXenix");
	MakeWord	(x=0X11146);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeStr		(0X11148,	0X11150);
	MakeName	(0X11148,	"aExtDos");
	MakeWord	(x=0X11150);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeStr		(0X11152,	0X1115A);
	MakeName	(0X11152,	"aTable");
	MakeWord	(x=0X1115A);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeStr		(0X1115C,	0X11164);
	MakeName	(0X1115C,	"aPcIx");
	MakeWord	(x=0X11164);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeStr		(0X11166,	0X1116E);
	MakeName	(0X11166,	"aNtfs");
	MakeWord	(x=0X1116E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeStr		(0X11170,	0X11178);
	MakeName	(0X11170,	"aNovell");
	MakeWord	(x=0X11178);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeStr		(0X1117A,	0X11182);
	MakeName	(0X1117A,	"aCpM");
	MakeWord	(x=0X11182);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeStr		(0X11184,	0X1118C);
	MakeName	(0X11184,	"aNonDos");
	MakeWord	(x=0X1118C);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeWord	(0X1118E);
	MakeName	(0X1118E,	"_atopsp");
	MakeWord	(x=0X11190);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X11192);
	MakeName	(0X11192,	"_asizds");
	MakeWord	(0X11194);
	MakeName	(0X11194,	"_nheap_desc");
	MakeByte	(0X11196);
	MakeByte	(x=0X11197);
	MakeArray	(x,	0X11);
	OpDecimal	(x,	0);
	MakeWord	(0X111A8);
	MakeWord	(0X111AA);
	MakeWord	(0X111AC);
	MakeStr		(0X111AE,	0X111BC);
	MakeName	(0X111AE,	"a_c_file_info");
	MakeDword	(0X111BC);
	MakeWord	(0X111CA);
	MakeArray	(0X111CC,	0X4);
	MakeWord	(0X111D0);
	MakeName	(0X111D0,	"_psp");
	MakeWord	(0X111D2);
	MakeName	(0X111D2,	"dosversion");
	MakeWord	(0X111D4);
	MakeName	(0X111D4,	"dosversion_x");
	MakeArray	(0X111D6,	0X2);
	MakeWord	(0X111D8);
	MakeWord	(0X111DA);
	MakeByte	(0X111DC);
	MakeName	(0X111DC,	"_osfile");
	MakeWord	(0X111F0);
	MakeName	(0X111F0,	"_argc");
	MakeWord	(0X111F2);
	MakeName	(0X111F2,	"_argv");
	MakeWord	(0X111F4);
	MakeName	(0X111F4,	"environ");
	MakeWord	(0X111F6);
	MakeWord	(x=0X111F8);
	OpSeg		(x,	0);
	MakeWord	(0X111FB);
	MakeByte	(0X11203);
	MakeWord	(0X11204);
	MakeWord	(0X11208);
	MakeWord	(0X1120A);
	MakeByte	(0X11223);
	MakeArray	(0X11223,	0X143);
	MakeWord	(0X11366);
	MakeByte	(x=0X11368);
	MakeArray	(x,	0X59);
	OpHex		(x,	0);
	MakeName	(0X11368,	"lookuptable");
	MakeStr		(0X113C1,	0X113C7);
	MakeName	(0X113C1,	"nullstring");
	MakeWord	(0X113C7);
	MakeName	(0X113C7,	"nullstrlen");
	MakeWord	(0X113CA);
	MakeWord	(0X113CC);
	MakeWord	(0X113D0);
	MakeDword	(0X113D2);
	MakeArray	(0X113D6,	0X2);
	MakeWord	(0X113D8);
	MakeWord	(0X113DC);
	MakeWord	(x=0X113DE);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X113E0);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X113E2);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X113E4);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X113E6);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X113E8);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X113EA);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X113EC);
	MakeName	(0X113EC,	"int23_orig_seg");
	MakeWord	(0X113EE);
	MakeName	(0X113EE,	"int23_orig_off");
	MakeByte	(x=0X113F3);
	MakeArray	(x,	0X100);
	OpHex		(x,	0);
	MakeName	(0X113F3,	"isdigit");
	MakeWord	(0X114F4);
	MakeWord	(0X114F6);
	MakeWord	(0X1150C);
	MakeWord	(0X1150E);
	MakeWord	(0X11510);
	MakeWord	(0X11512);
	MakeName	(0X11512,	"_qczrinit");
	MakeWord	(0X11514);
	MakeWord	(x=0X11516);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X11518);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(x=0X1151A);
	OpOff		(x,	0,	0);
	OpOff		(x,	128,	0);
	MakeWord	(0X11522);
	MakeWord	(0X11524);
	MakeWord	(0X11526);
	MakeWord	(0X11528);
	MakeDword	(0X1152A);
	MakeWord	(x=0X1152E);
	OpOff		(x,	0,	0XA650);
	OpOff		(x,	128,	0XA650);
	MakeStr		(0X11530,	0X11539);
	MakeName	(0X11530,	"aNmsg");
	MakeStr		(0X1153A,	0X11554);
	MakeName	(0X1153A,	"aR6000StackOver");
	MakeStr		(0X11556,	0X11575);
	MakeName	(0X11556,	"aR6003IntegerDi");
	MakeStr		(0X11577,	0X115A3);
	MakeName	(0X11577,	"aR6009NotEnough");
	MakeStr		(0X115AA,	0X115BA);
	MakeName	(0X115AA,	"aRunTimeError");
	MakeStr		(0X115BC,	0X115E9);
	MakeName	(0X115BC,	"aR6002FloatingP");
	MakeStr		(0X115EB,	0X1160E);
	MakeName	(0X115EB,	"aR6001NullPoint");
	MakeWord	(0X11612);
	MakeName	(0X11612,	"_strbuf_ptr");
	MakeWord	(0X11614);
	MakeWord	(0X11616);
	MakeByte	(0X11618);
	MakeWord	(0X11620);
	MakeName	(0X11620,	"p_p_p_parmxs_ptr");
	MakeByte	(0X11622);
	MakeName	(0X11622,	"p_p_p_num_extra");
	MakeByte	(0X11623);
	MakeName	(0X11623,	"p_p_p_len_extra_delim");
	MakeByte	(0X11624);
	MakeName	(0X11624,	"p_p_p_extra_delim");
	MakeByte	(0X11625);
	MakeByte	(0X11626);
	MakeName	(0X11626,	"disk_access");
	MakeByte	(0X11627);
	MakeName	(0X11627,	"dac_access_flag");
	MakeByte	(0X11628);
	MakeName	(0X11628,	"sp_val");
	MakeByte	(0X11629);
	MakeName	(0X11629,	"sp_val_p_range");
	MakeByte	(0X1162A);
	MakeName	(0X1162A,	"sp_val_p_range_one");
	MakeWord	(0X1162B);
	MakeName	(0X1162B,	"sp_val_p_low_range");
	MakeWord	(0X1162D);
	MakeName	(0X1162D,	"sp_val_p_low_range_2");
	MakeWord	(0X1162F);
	MakeName	(0X1162F,	"sp_val_p_high_range");
	MakeWord	(0X11631);
	MakeName	(0X11631,	"sp_val_p_high_range_2");
	MakeWord	(0X11634);
	MakeName	(0X11634,	"extended_buff");
	MakeByte	(0X11636);
	MakeName	(0X11636,	"PercentFlag");
	MakeByte	(0X11637);
	MakeName	(0X11637,	"display_page");
	MakeWord	(0X11638);
	MakeName	(0X11638,	"free_space_mbytes_unused_lw");
	MakeWord	(0X1163A);
	MakeName	(0X1163A,	"free_space_mbytes_unused_hw");
	MakeWord	(0X1163C);
	MakeName	(0X1163C,	"free_space.space");
	MakeWord	(0X1163E);
	MakeName	(0X1163E,	"free_space_start");
	MakeWord	(0X11640);
	MakeName	(0X11640,	"free_space_end");
	MakeWord	(0X11642);
	MakeName	(0X11642,	"free_space_percent_unused");
	MakeByte	(0X11878);
	MakeName	(0X11878,	"extended_flag");
	MakeByte	(0X1187A);
	MakeName	(0X1187A,	"p_px");
	MakeByte	(0X1187B);
	MakeName	(0X1187B,	"p_px_p_maxp");
	MakeWord	(0X1187C);
	MakeName	(0X1187C,	"p_px_p_con1_ptr");
	MakeByte	(0X1187E);
	MakeName	(0X1187E,	"p_px_p_maxs");
	MakeWord	(0X1187F);
	MakeName	(0X1187F,	"p_px_p_swi1_ptr");
	MakeWord	(0X11881);
	MakeName	(0X11881,	"p_px_p_swi2_ptr");
	MakeWord	(0X11883);
	MakeName	(0X11883,	"p_px_p_swi3_ptr");
	MakeWord	(0X11885);
	MakeName	(0X11885,	"p_px_p_swi4_ptr");
	MakeWord	(0X11887);
	MakeName	(0X11887,	"p_px_p_swi5_ptr");
	MakeWord	(0X11889);
	MakeName	(0X11889,	"p_px_p_swi6_ptr");
	MakeWord	(0X1188B);
	MakeName	(0X1188B,	"p_px_p_swi7_ptr");
	MakeWord	(0X1188D);
	MakeName	(0X1188D,	"p_px_p_swi8_ptr");
	MakeWord	(0X1188F);
	MakeName	(0X1188F,	"p_px_p_swi9_ptr");
	MakeWord	(0X11891);
	MakeName	(0X11891,	"p_px_p_swi10_ptr");
	MakeByte	(0X11893);
	MakeName	(0X11893,	"p_px_p_maxk");
	MakeByte	(0X11894);
	MakeName	(0X11894,	"sectors");
	MakeByte	(0X11895);
	MakeArray	(0X11895,	0X7);
	MakeName	(0X11895,	"_43h_prior_drv_letters");
	MakeByte	(0X1189C);
	MakeArray	(0X1189C,	0X8);
	MakeName	(0X1189C,	"good_disk");
	MakeWord	(0X118A4);
	MakeName	(0X118A4,	"logical_buff");
	MakeWord	(0X118A6);
	MakeName	(0X118A6,	"p_swi10");
	MakeWord	(0X118A8);
	MakeName	(0X118A8,	"p_swi10_sp_function_flag");
	MakeWord	(0X118AA);
	MakeName	(0X118AA,	"p_swi10_sp_buff1_ptr");
	MakeWord	(0X118AC);
	MakeName	(0X118AC,	"p_swi10_sp_val1_ptr");
	MakeByte	(0X118AE);
	MakeName	(0X118AE,	"p_swi10_sp_nid");
	MakeByte	(0X118AF);
	MakeArray	(0X118AF,	0X6);
	MakeName	(0X118AF,	"p_swi10_sp_switch14");
	MakeByte	(0X118B5);
	MakeName	(0X118B5,	"No");
	MakeByte	(0X118B6);
	MakeName	(0X118B6,	"Yes");
	MakeByte	(0X118B7);
	MakeName	(0X118B7,	"valid_input");
	MakeByte	(0X118B8);
	MakeName	(0X118B8,	"sublistp_size");
	MakeByte	(0X118B9);
	MakeName	(0X118B9,	"sublistp_res");
	MakeWord	(0X118BA);
	MakeName	(0X118BA,	"sublistp_value");
	MakeWord	(0X118BC);
	MakeName	(0X118BC,	"sublistp_value_seg");
	MakeByte	(0X118BE);
	MakeName	(0X118BE,	"sublistp_id");
	MakeByte	(0X118BF);
	MakeName	(0X118BF,	"sublistp_flags");
	MakeByte	(0X118C0);
	MakeName	(0X118C0,	"sublistp_max_width");
	MakeByte	(0X118C1);
	MakeName	(0X118C1,	"sublistp_min_width");
	MakeByte	(0X118C2);
	MakeName	(0X118C2,	"sublistp_pad_char");
	MakeWord	(0X118C4);
	MakeName	(0X118C4,	"primary_buff");
	MakeWord	(0X118C6);
	MakeArray	(0X118C6,	0X8);
	MakeName	(0X118C6,	"total_disk_cyls");
	MakeByte	(0X118D6);
	MakeName	(0X118D6,	"mono_flag");
	MakeByte	(0X118D7);
	MakeName	(0X118D7,	"reboot_flag");
	MakeByte	(x=0X118D8);
	MakeArray	(x,	0X18);
	OpDecimal	(x,	0);
	MakeName	(0X118D8,	"drv_letters");
	MakeByte	(0X118F0);
	MakeName	(0X118F0,	"number_of_drives");
	MakeByte	(0X118F1);
	MakeName	(0X118F1,	"quiet_flag");
	MakeByte	(x=0X118F2);
	MakeArray	(x,	0X18);
	OpDecimal	(x,	0);
	MakeName	(0X118F2,	"sort");
	MakeWord	(0X1190A);
	MakeName	(0X1190A,	"regs_x_ax");
	MakeWord	(0X1190C);
	MakeName	(0X1190C,	"regs_x_bx");
	MakeWord	(0X1190E);
	MakeName	(0X1190E,	"regs_x_cx");
	MakeWord	(0X11910);
	MakeName	(0X11910,	"regs_x_dx");
	MakeWord	(0X11912);
	MakeName	(0X11912,	"regs_x_si");
	MakeWord	(0X11914);
	MakeName	(0X11914,	"regs_x_di");
	MakeByte	(0X11916);
	MakeName	(0X11916,	"regs_x_cflag");
	MakeByte	(0X11918);
	MakeArray	(0X11918,	0X8);
	MakeByte	(0X11920);
	MakeName	(0X11920,	"active_primary_count");
	MakeByte	(0X11922);
	MakeArray	(0X11922,	0X8);
	MakeName	(0X11922,	"primary_count");
	MakeByte	(0X1192A);
	MakeName	(0X1192A,	"lba_ignore_flag");
	MakeByte	(0X1192B);
	MakeName	(0X1192B,	"video_mode");
	MakeWord	(0X1192C);
	MakeName	(0X1192C,	"sp_buff");
	MakeWord	(0X1192E);
	MakeName	(0X1192E,	"sp_buff_p_synonym");
	MakeWord	(0X11930);
	MakeName	(0X11930,	"sp_buff_p_value");
	MakeArray	(0X11932,	0X2);
	MakeWord	(0X11934);
	MakeName	(0X11934,	"input_col");
	MakeWord	(0X11936);
	MakeName	(0X11936,	"input_row");
	MakeWord	(0X1193A);
	MakeName	(0X1193A,	"total_mbytes_lw");
	MakeWord	(0X1193C);
	MakeName	(0X1193C,	"total_mbytes_hw");
	MakeWord	(0X1195A);
	MakeName	(0X1195A,	"segregs_es");
	MakeArray	(0X1195C,	0X4);
	MakeWord	(0X11960);
	MakeName	(0X11960,	"segregs_ds");
	MakeWord	(0X11962);
	MakeName	(0X11962,	"heads");
	MakeByte	(0X11972);
	MakeName	(0X11972,	"status_flag");
	MakeByte	(0X11974);
	MakeName	(0X11974,	"primary_partition_count");
	MakeByte	(0X11975);
	MakeName	(0X11975,	"fprmt_flag");
	MakeByte	(0X11976);
	MakeName	(0X11976,	"p_val");
	MakeByte	(0X11977);
	MakeName	(0X11977,	"p_val_p_range");
	MakeByte	(0X11978);
	MakeName	(0X11978,	"p_val_p_range_one");
	MakeWord	(0X11979);
	MakeName	(0X11979,	"p_val_p_low_range");
	MakeWord	(0X1197B);
	MakeName	(0X1197B,	"p_val_p_low_range_2");
	MakeWord	(0X1197D);
	MakeName	(0X1197D,	"p_val_p_high_range");
	MakeWord	(0X1197F);
	MakeName	(0X1197F,	"p_val_p_high_range_2");
	MakeWord	(0X11981);
	MakeName	(0X11981,	"p_con");
	MakeWord	(0X11983);
	MakeName	(0X11983,	"p_con_p_function_flag");
	MakeWord	(0X11985);
	MakeName	(0X11985,	"p_con_p_buff1_ptr");
	MakeWord	(0X11987);
	MakeName	(0X11987,	"p_con_p_val1_ptr");
	MakeByte	(0X11989);
	MakeName	(0X11989,	"p_con_nid");
	MakeByte	(0X1198A);
	MakeName	(0X1198A,	"part_table_boot_ind");
	MakeByte	(0X1198B);
	MakeName	(0X1198B,	"part_table_start_head");
	MakeByte	(0X1198C);
	MakeName	(0X1198C,	"part_table_start_sector");
	MakeWord	(0X1198D);
	MakeName	(0X1198D,	"part_table_start_cyl");
	MakeByte	(0X1198F);
	MakeName	(0X1198F,	"part_table_sys_id");
	MakeByte	(0X11990);
	MakeName	(0X11990,	"part_table_end_head");
	MakeByte	(0X11991);
	MakeName	(0X11991,	"part_table_end_sector");
	MakeWord	(0X11992);
	MakeName	(0X11992,	"part_table_end_cyl");
	MakeWord	(0X11994);
	MakeName	(0X11994,	"part_table_rel_sec_lw");
	MakeWord	(0X11996);
	MakeName	(0X11996,	"part_table_rel_sec_hw");
	MakeWord	(0X11998);
	MakeName	(0X11998,	"part_table_num_sec_lw");
	MakeWord	(0X1199A);
	MakeName	(0X1199A,	"part_table_num_sec_hw");
	MakeWord	(0X1199C);
	MakeName	(0X1199C,	"part_table_mbytes_used_lw");
	MakeWord	(0X1199E);
	MakeName	(0X1199E,	"part_table_mbytes_used_hw");
	MakeByte	(0X119A0);
	MakeByte	(0X119A1);
	MakeName	(0X119A1,	"part_table_changed");
	MakeWord	(0X119A2);
	MakeName	(0X119A2,	"part_table_percent_used");
	MakeByte	(x=0X119A4);
	MakeArray	(x,	0XC);
	OpDecimal	(x,	0);
	MakeName	(0X119A4,	"part_table_vol_label");
	MakeByte	(0X119B0);
	MakeArray	(0X119B0,	0X9);
	MakeName	(0X119B0,	"part_table_system");
	MakeByte	(0X119B9);
	MakeName	(0X119B9,	"part_table_drive_letter");
	MakeComm	(0X119BA,	"total 1152 bytes (24*48) primary partition data");
	MakeByte	(x=0X119BA);
	MakeArray	(x,	0X450);
	OpDecimal	(x,	0);
	MakeByte	(x=0X11E0A);
	MakeArray	(x,	0X180);
	OpDecimal	(x,	0);
	MakeByte	(0X11F8A);
	MakeName	(0X11F8A,	"ext_table_boot_ind");
	MakeByte	(0X11F8B);
	MakeName	(0X11F8B,	"ext_table_start_head");
	MakeByte	(0X11F8C);
	MakeName	(0X11F8C,	"ext_table_start_sector");
	MakeWord	(0X11F8D);
	MakeName	(0X11F8D,	"ext_table_start_cyl");
	MakeByte	(0X11F8F);
	MakeName	(0X11F8F,	"ext_table_sys_id");
	MakeByte	(0X11F90);
	MakeName	(0X11F90,	"ext_table_end_head");
	MakeByte	(0X11F91);
	MakeName	(0X11F91,	"ext_table_end_sector");
	MakeWord	(0X11F92);
	MakeName	(0X11F92,	"ext_table_end_cyl");
	MakeWord	(0X11F94);
	MakeName	(0X11F94,	"ext_table_rel_sec_lw");
	MakeWord	(0X11F96);
	MakeName	(0X11F96,	"ext_table_rel_sec_hw");
	MakeWord	(0X11F98);
	MakeName	(0X11F98,	"ext_table_num_sec_lw");
	MakeWord	(0X11F9A);
	MakeName	(0X11F9A,	"ext_table_num_sec_hw");
	MakeWord	(0X11F9C);
	MakeName	(0X11F9C,	"ext_table_mbytes_used_lw");
	MakeWord	(0X11F9E);
	MakeName	(0X11F9E,	"ext_table_mbytes_used_hw");
	MakeByte	(0X11FA0);
	MakeByte	(0X11FA1);
	MakeName	(0X11FA1,	"ext_table_changed");
	MakeWord	(0X11FA2);
	MakeName	(0X11FA2,	"ext_table_percent_used");
	MakeByte	(x=0X11FA4);
	MakeArray	(x,	0XC);
	OpDecimal	(x,	0);
	MakeName	(0X11FA4,	"ext_table_vol_label");
	MakeByte	(0X11FB0);
	MakeArray	(0X11FB0,	0X9);
	MakeName	(0X11FB0,	"ext_table_system");
	MakeByte	(0X11FB9);
	MakeName	(0X11FB9,	"ext_table_drive_letter");
	MakeComm	(0X11FBA,	"48*22 bytes\ntotal 1152 bytes (24*48) extended partition data");
	MakeByte	(x=0X11FBA);
	MakeArray	(x,	0X420);
	OpDecimal	(x,	0);
	MakeByte	(0X123DA);
	MakeName	(0X123DA,	"ep0_lp23_boot_ind");
	MakeByte	(0X123DB);
	MakeName	(0X123DB,	"ep0_lp23_start_head");
	MakeByte	(0X123DC);
	MakeName	(0X123DC,	"ep0_lp23_start_sector");
	MakeWord	(0X123DD);
	MakeName	(0X123DD,	"ep0_lp23_start_cyl");
	MakeByte	(0X123DF);
	MakeName	(0X123DF,	"ep0_lp23_sys_id");
	MakeByte	(0X123E0);
	MakeName	(0X123E0,	"ep0_lp23_end_head");
	MakeByte	(0X123E1);
	MakeName	(0X123E1,	"ep0_lp23_end_sector");
	MakeWord	(0X123E2);
	MakeName	(0X123E2,	"ep0_lp23_end_cyl");
	MakeWord	(0X123E4);
	MakeName	(0X123E4,	"ep0_lp23_rel_sec_lw");
	MakeWord	(0X123E6);
	MakeName	(0X123E6,	"ep0_lp23_rel_sec_hw");
	MakeWord	(0X123E8);
	MakeName	(0X123E8,	"ep0_lp23_num_sec_lw");
	MakeWord	(0X123EA);
	MakeName	(0X123EA,	"ep0_lp23_num_sec_hw");
	MakeWord	(0X123EC);
	MakeName	(0X123EC,	"ep0_lp23_mbytes_used_lw");
	MakeWord	(0X123EE);
	MakeName	(0X123EE,	"ep0_lp23_mbytes_used_hw");
	MakeByte	(0X123F0);
	MakeByte	(0X123F1);
	MakeName	(0X123F1,	"ep0_lp23_changed");
	MakeWord	(0X123F2);
	MakeName	(0X123F2,	"ep0_lp23_percent_used");
	MakeByte	(x=0X123F4);
	MakeArray	(x,	0XC);
	OpDecimal	(x,	0);
	MakeName	(0X123F4,	"ep0_lp23_vol_label");
	MakeByte	(0X12400);
	MakeArray	(0X12400,	0X9);
	MakeName	(0X12400,	"ep0_lp23_system");
	MakeByte	(0X12409);
	MakeName	(0X12409,	"ep0_lp23_drive_number");
	MakeComm	(0X1240A,	"7*48*24 = 8064, total 9216 bytes logical drive data");
	MakeByte	(x=0X1240A);
	MakeArray	(x,	0X1F80);
	OpDecimal	(x,	0);
	MakeName	(0X1240A,	"ep1_lp0_boot_ind");
	MakeByte	(0X1438A);
	MakeWord	(0X1438C);
	MakeName	(0X1438C,	"Parse_Ptr");
	MakeByte	(0X1438E);
	MakeName	(0X1438E,	"cur_disk");
	MakeByte	(0X1438F);
	MakeWord	(0X14390);
	MakeArray	(0X14390,	0X8);
	MakeName	(0X14390,	"cylinders");
	MakeByte	(0X143A0);
	MakeName	(0X143A0,	"dx_buff");
	MakeByte	(0X143A1);
	MakeArray	(0X143A1,	0X10);
	MakeByte	(0X143B1);
	MakeName	(0X143B1,	"dx_buff_file_system");
	MakeByte	(0X143B2);
	MakeArray	(0X143B2,	0X7);
	MakeByte	(0X143B9);
	MakeName	(0X143B9,	"fat16only_flag");
	MakeWord	(0X143BA);
	MakeName	(0X143BA,	"p_swi7");
	MakeWord	(0X143BC);
	MakeName	(0X143BC,	"p_swi7_sp_function_flag");
	MakeWord	(0X143BE);
	MakeName	(0X143BE,	"p_swi7_sp_buff1_ptr");
	MakeWord	(0X143C0);
	MakeName	(0X143C0,	"p_swi7_sp_val1_ptr");
	MakeByte	(0X143C2);
	MakeName	(0X143C2,	"p_swi7_sp_nid");
	MakeByte	(0X143C3);
	MakeArray	(0X143C3,	0X7);
	MakeName	(0X143C3,	"p_swi7_sp_switch11");
	MakeWord	(0X143CA);
	MakeName	(0X143CA,	"p_swi6");
	MakeWord	(0X143CC);
	MakeName	(0X143CC,	"p_swi6_sp_function_flag");
	MakeWord	(0X143CE);
	MakeName	(0X143CE,	"p_swi6_sp_buff1_ptr");
	MakeWord	(0X143D0);
	MakeName	(0X143D0,	"p_swi6_sp_val1_ptr");
	MakeByte	(0X143D2);
	MakeName	(0X143D2,	"p_swi6_sp_nid");
	MakeByte	(0X143D3);
	MakeArray	(0X143D3,	0X3);
	MakeName	(0X143D3,	"p_swi6_sp_switch10");
	MakeWord	(0X143D6);
	MakeName	(0X143D6,	"p_swi5");
	MakeWord	(0X143D8);
	MakeName	(0X143D8,	"p_swi5_sp_function_flag");
	MakeWord	(0X143DA);
	MakeName	(0X143DA,	"p_swi5_sp_buff1_ptr");
	MakeWord	(0X143DC);
	MakeName	(0X143DC,	"p_swi5_sp_val1_ptr");
	MakeByte	(0X143DE);
	MakeName	(0X143DE,	"p_swi5_sp_nid");
	MakeByte	(0X143DF);
	MakeArray	(0X143DF,	0X5);
	MakeName	(0X143DF,	"p_swi5_sp_switch9");
	MakeWord	(0X143E4);
	MakeName	(0X143E4,	"p_swi4");
	MakeWord	(0X143E6);
	MakeName	(0X143E6,	"p_swi4_sp_function_flag");
	MakeWord	(0X143E8);
	MakeName	(0X143E8,	"p_swi4_sp_buff1_ptr");
	MakeWord	(0X143EA);
	MakeName	(0X143EA,	"p_swi4_sp_val1_ptr");
	MakeByte	(0X143EC);
	MakeName	(0X143EC,	"p_swi4_sp_nid");
	MakeByte	(0X143ED);
	MakeArray	(0X143ED,	0X3);
	MakeName	(0X143ED,	"p_swi4_sp_switch8");
	MakeWord	(0X143F0);
	MakeName	(0X143F0,	"p_swi3");
	MakeWord	(0X143F2);
	MakeName	(0X143F2,	"p_swi3_sp_function_flag");
	MakeWord	(0X143F4);
	MakeName	(0X143F4,	"p_swi3_sp_buff1_ptr");
	MakeWord	(0X143F6);
	MakeName	(0X143F6,	"p_swi3_sp_val1_ptr");
	MakeByte	(0X143F8);
	MakeName	(0X143F8,	"p_swi3_sp_nid");
	MakeByte	(0X143F9);
	MakeArray	(0X143F9,	0X9);
	MakeName	(0X143F9,	"p_swi3_sp_switch7");
	MakeWord	(0X14402);
	MakeName	(0X14402,	"p_swi2");
	MakeWord	(0X14404);
	MakeName	(0X14404,	"p_swi2_sp_function_flag");
	MakeWord	(0X14406);
	MakeName	(0X14406,	"p_swi2_sp_buff1_ptr");
	MakeWord	(0X14408);
	MakeName	(0X14408,	"p_swi2_sp_val1_ptr");
	MakeByte	(0X1440A);
	MakeName	(0X1440A,	"p_swi2_sp_nid");
	MakeByte	(0X1440B);
	MakeArray	(0X1440B,	0X3);
	MakeName	(0X1440B,	"p_swi2_sp_switch6");
	MakeWord	(0X1440E);
	MakeName	(0X1440E,	"p_swi1");
	MakeWord	(0X14410);
	MakeName	(0X14410,	"p_swi1_sp_function_flag");
	MakeWord	(0X14412);
	MakeName	(0X14412,	"p_swi1_sp_buff1_ptr");
	MakeWord	(0X14414);
	MakeName	(0X14414,	"p_swi1_sp_val1_ptr");
	MakeByte	(0X14416);
	MakeName	(0X14416,	"p_swi1_sp_nid");
	MakeByte	(0X14417);
	MakeArray	(0X14417,	0X5);
	MakeName	(0X14417,	"p_swi1_sp_switch1");
	MakeByte	(0X1441C);
	MakeArray	(0X1441C,	0X5);
	MakeName	(0X1441C,	"p_swi1_sp_switch2");
	MakeByte	(0X14421);
	MakeArray	(0X14421,	0X5);
	MakeName	(0X14421,	"p_swi1_sp_switch3");
	MakeByte	(0X14426);
	MakeArray	(0X14426,	0X6);
	MakeName	(0X14426,	"p_swi1_sp_switch4");
	MakeByte	(0X1442C);
	MakeArray	(0X1442C,	0X6);
	MakeName	(0X1442C,	"p_swi1_sp_switch5");
	MakeWord	(0X14432);
	MakeName	(0X14432,	"p_swi9");
	MakeWord	(0X14434);
	MakeName	(0X14434,	"p_swi9_sp_function_flag");
	MakeWord	(0X14436);
	MakeName	(0X14436,	"p_swi9_sp_buff1_ptr");
	MakeWord	(0X14438);
	MakeName	(0X14438,	"p_swi9_sp_val1_ptr");
	MakeByte	(0X1443A);
	MakeName	(0X1443A,	"p_swi9_sp_nid");
	MakeByte	(0X1443B);
	MakeArray	(0X1443B,	0X7);
	MakeName	(0X1443B,	"p_swi9_sp_switch13");
	MakeWord	(0X14442);
	MakeName	(0X14442,	"p_swi8");
	MakeWord	(0X14444);
	MakeName	(0X14444,	"p_swi8_sp_function_flag");
	MakeWord	(0X14446);
	MakeName	(0X14446,	"p_swi8_sp_buff1_ptr");
	MakeWord	(0X14448);
	MakeName	(0X14448,	"p_swi8_sp_val1_ptr");
	MakeByte	(0X1444A);
	MakeName	(0X1444A,	"p_swi8_sp_nid");
	MakeByte	(0X1444B);
	MakeArray	(0X1444B,	0X7);
	MakeName	(0X1444B,	"p_swi8_sp_switch12");
	MakeByte	(0X14452);
	MakeArray	(0X14452,	0X4);
	MakeName	(0X14452,	"p_buff");
	MakeByte	(0X14456);
	MakeArray	(0X14456,	0X4);
	MakeName	(0X14456,	"p_buff_p_value");
	MakeByte	(0X1445A);
	MakeName	(0X1445A,	"cmbr_flag");
	MakeByte	(0X1445B);
	MakeName	(0X1445B,	"xmbr_flag");
	MakeByte	(x=0X1445C);
	MakeArray	(x,	0X320);
	OpDecimal	(x,	0);
	MakeName	(0X1445C,	"insert");
	MakeWord	(0X1477C);
	MakeName	(0X1477C,	"sector_size");
	MakeWord	(0X1477E);
	MakeWord	(0X14780);
	MakeWord	(0X14782);
	MakeWord	(0X14784);
	MakeWord	(0X14786);
	MakeWord	(0X14788);
	MakeWord	(0X1478A);
	MakeByte	(0X1478C);
	MakeName	(0X1478C,	"large_disk_partitions");
	MakeByte	(0X1478D);
	MakeName	(0X1478D,	"actok_flag");
	MakeByte	(0X1478E);
	MakeName	(0X1478E,	"logical_flag");
	MakeByte	(0X1478F);
	MakeName	(0X1478F,	"no_fatal_error");
	MakeByte	(0X14790);
	MakeName	(0X14790,	"vertical_res");
	MakeByte	(0X14791);
	MakeName	(0X14791,	"video_attribute");
	MakeByte	(x=0X14792);
	MakeArray	(x,	0X200);
	OpDecimal	(x,	0);
	MakeName	(0X14792,	"boot_record");
	MakeByte	(x=0X14992);
	MakeArray	(x,	0X410);
	OpDecimal	(x,	0);
	MakeByte	(0X14F92);
	MakeName	(0X14F92,	"mbr_flag");
	MakeByte	(0X14F93);
	MakeName	(0X14F93,	"partition_number");
	MakeByte	(0X14F94);
	MakeName	(0X14F94,	"next_letter");
	MakeByte	(0X14F95);
	MakeName	(0X14F95,	"cur_disk_buff");
	MakeByte	(0X14F96);
	MakeName	(0X14F96,	"primary_flag");
	MakeWord	(0X14F9E);
	MakeName	(0X14F9E,	"dataoffset_end_2");
	MakeByte	(0X14FA0);
	MakeArray	(0X14FA0,	0X800);
}

static Functions_0(void) {

	MakeFunction    (0X10,0X4BD);
	SetFunctionFlags(0X10,0x10);
	MakeFrame(0X10, 0X6, 2, 0);
	MakeLocal(0X10, 0X4BD, "[bp-0X6]", "_input");
	MakeLocal(0X10, 0X4BD, "[bp-0X4]", "_temp");
	MakeLocal(0X10, 0X4BD, "[bp-0X2]", "_i");
	MakeLocal(0X10, 0X4BD, "[bp+0X4]", "argc");
	MakeLocal(0X10, 0X4BD, "[bp+0X6]", "argv");
	MakeNameEx(0X4B, "_main_01", SN_LOCAL);
	MakeNameEx(0X4E, "_main_01_1", SN_LOCAL);
	MakeNameEx(0X58, "_main_01_2", SN_LOCAL);
	MakeNameEx(0X7B, "_main_01_3", SN_LOCAL);
	MakeNameEx(0X7E, "_main_01_4", SN_LOCAL);
	MakeNameEx(0X8D, "_main_02", SN_LOCAL);
	MakeNameEx(0XA3, "_main_03", SN_LOCAL);
	MakeNameEx(0XCF, "_main_04", SN_LOCAL);
	MakeNameEx(0XD5, "_main_05", SN_LOCAL);
	MakeNameEx(0XDF, "_main_06", SN_LOCAL);
	MakeNameEx(0X10A, "_main_07", SN_LOCAL);
	MakeNameEx(0X114, "_main_08", SN_LOCAL);
	MakeNameEx(0X11A, "_main_09", SN_LOCAL);
	MakeNameEx(0X136, "_main_10", SN_LOCAL);
	MakeNameEx(0X13D, "_main_11", SN_LOCAL);
	MakeNameEx(0X14B, "_main_12", SN_LOCAL);
	MakeNameEx(0X158, "_main_13", SN_LOCAL);
	MakeNameEx(0X161, "_main_14", SN_LOCAL);
	MakeNameEx(0X16B, "_main_15", SN_LOCAL);
	MakeNameEx(0X186, "_main_16", SN_LOCAL);
	MakeNameEx(0X1A2, "_main_17", SN_LOCAL);
	MakeNameEx(0X1BD, "_main_18", SN_LOCAL);
	MakeNameEx(0X1E2, "_main_20", SN_LOCAL);
	MakeNameEx(0X1E9, "_main_21", SN_LOCAL);
	MakeNameEx(0X1FF, "_main_22", SN_LOCAL);
	MakeNameEx(0X205, "_main_23", SN_LOCAL);
	MakeNameEx(0X219, "_main_24", SN_LOCAL);
	MakeNameEx(0X229, "_main_25", SN_LOCAL);
	MakeNameEx(0X245, "_main_26", SN_LOCAL);
	MakeNameEx(0X248, "_main_27", SN_LOCAL);
	MakeNameEx(0X25C, "_main_28", SN_LOCAL);
	MakeNameEx(0X261, "_main_29", SN_LOCAL);
	MakeNameEx(0X27D, "_main_30", SN_LOCAL);
	MakeNameEx(0X290, "_main_31", SN_LOCAL);
	MakeNameEx(0X292, "_main_32", SN_LOCAL);
	MakeNameEx(0X2A5, "_main_33", SN_LOCAL);
	MakeNameEx(0X2B2, "_main_34", SN_LOCAL);
	MakeNameEx(0X2F4, "_main_35", SN_LOCAL);
	MakeNameEx(0X30E, "_main_36", SN_LOCAL);
	MakeNameEx(0X314, "_main_37", SN_LOCAL);
	MakeNameEx(0X323, "_main_38", SN_LOCAL);
	MakeNameEx(0X338, "_main_39", SN_LOCAL);
	MakeNameEx(0X342, "_main_40", SN_LOCAL);
	MakeNameEx(0X385, "_main_41", SN_LOCAL);
	MakeNameEx(0X39F, "_main_42", SN_LOCAL);
	MakeNameEx(0X3BF, "_main_44", SN_LOCAL);
	MakeNameEx(0X3CE, "_main_45", SN_LOCAL);
	MakeNameEx(0X3DF, "_main_46", SN_LOCAL);
	MakeNameEx(0X421, "_main_49", SN_LOCAL);
	MakeNameEx(0X427, "_main_50", SN_LOCAL);
	MakeNameEx(0X436, "_main_51", SN_LOCAL);
	MakeNameEx(0X446, "_main_52", SN_LOCAL);
	MakeNameEx(0X449, "_main_53", SN_LOCAL);
	MakeNameEx(0X495, "_main_54", SN_LOCAL);
	MakeNameEx(0X4B5, "_main_55", SN_LOCAL);
	MakeNameEx(0X4B7, "_main_56", SN_LOCAL);
	MakeFunction    (0X4BE,0X5CB);
	SetFunctionFlags(0X4BE,0x10);
	MakeFrame(0X4BE, 0X8, 2, 0);
	MakeLocal(0X4BE, 0X5CB, "[bp-0X8]", "disk_index");
	MakeLocal(0X4BE, 0X5CB, "[bp-0X6]", "mbr_msg_offset");
	MakeLocal(0X4BE, 0X5CB, "[bp-0X4]", "err_msg_addr_off");
	MakeLocal(0X4BE, 0X5CB, "[bp-0X2]", "err_msg_addr_seg");
	MakeNameEx(0X4DA, "mbrem_1", SN_LOCAL);
	MakeNameEx(0X523, "mbrem_2", SN_LOCAL);
	MakeNameEx(0X577, "mbrem_3", SN_LOCAL);
	MakeNameEx(0X5C5, "mbrem_4", SN_LOCAL);
	MakeFunction    (0X5CC,0X733);
	SetFunctionFlags(0X5CC,0x10);
	MakeFrame(0X5CC, 0X22E, 2, 0);
	MakeLocal(0X5CC, 0X733, "[bp-0X22E]", "dr_bs_buffer");
	MakeLocal(0X5CC, 0X733, "[bp-0X218]", "dr_bs_FATsz16");
	MakeLocal(0X5CC, 0X733, "[bp-0X2E]", "outregs_ax");
	MakeLocal(0X5CC, 0X733, "[bp-0X2A]", "outregs_cl");
	MakeLocal(0X5CC, 0X733, "[bp-0X29]", "outregs_ch");
	MakeLocal(0X5CC, 0X733, "[bp-0X27]", "outregs_dh");
	MakeLocal(0X5CC, 0X733, "[bp-0X22]", "outregs_cf");
	MakeLocal(0X5CC, 0X733, "[bp-0X1F]", "inregs_ah");
	MakeLocal(0X5CC, 0X733, "[bp-0X1A]", "inregs_dl");
	MakeLocal(0X5CC, 0X733, "[bp-0X12]", "dr_pte_offset");
	MakeLocal(0X5CC, 0X733, "[bp-0X10]", "dr_total_sectors_lw");
	MakeLocal(0X5CC, 0X733, "[bp-0XE]", "dr_total_sectors_hw");
	MakeLocal(0X5CC, 0X733, "[bp-0XC]", "dr_sectors_lw");
	MakeLocal(0X5CC, 0X733, "[bp-0XA]", "dr_sectors_hw");
	MakeLocal(0X5CC, 0X733, "[bp-0X8]", "dr_cylinders_lw");
	MakeLocal(0X5CC, 0X733, "[bp-0X6]", "dr_cylinders_hw");
	MakeLocal(0X5CC, 0X733, "[bp-0X4]", "dr_heads_lw");
	MakeLocal(0X5CC, 0X733, "[bp-0X2]", "dr_heads_hw");
	MakeLocal(0X5CC, 0X733, "[bp+0X4]", "dr_mbr_buffer");
	MakeNameEx(0X5F3, "mwddp_1", SN_LOCAL);
	MakeNameEx(0X693, "mwddp_2", SN_LOCAL);
	MakeNameEx(0X6AF, "mwddp_3", SN_LOCAL);
	MakeNameEx(0X6BC, "mwddp_4", SN_LOCAL);
	MakeNameEx(0X6C9, "mwddp_5", SN_LOCAL);
	MakeNameEx(0X72F, "mwddp_6", SN_LOCAL);
	MakeFunction    (0X734,0X7C9);
	SetFunctionFlags(0X734,0x10);
	MakeFrame(0X734, 0XA, 2, 0);
	MakeLocal(0X734, 0X7C9, "[bp-0XA]", "parm_block");
	MakeLocal(0X734, 0X7C9, "[bp-0X8]", "category_code");
	MakeLocal(0X734, 0X7C9, "[bp-0X6]", "drive_number");
	MakeLocal(0X734, 0X7C9, "[bp-0X4]", "_buffer_");
	MakeLocal(0X734, 0X7C9, "[bp-0X2]", "formatted");
	MakeLocal(0X734, 0X7C9, "[bp+0X4]", "phy_drv_num");
	MakeLocal(0X734, 0X7C9, "[bp+0X6]", "lock");
	MakeLocal(0X734, 0X7C9, "[bp+0X8]", "_bh_");
	MakeNameEx(0X757, "chkf_1", SN_LOCAL);
	MakeNameEx(0X767, "chkf_2", SN_LOCAL);
	MakeNameEx(0X771, "chkf_3", SN_LOCAL);
	MakeNameEx(0X784, "chkf_4", SN_LOCAL);
	MakeNameEx(0X7A4, "chkf_5", SN_LOCAL);
	MakeNameEx(0X7AA, "chkf_6", SN_LOCAL);
	MakeNameEx(0X7C4, "chkf_7", SN_LOCAL);
	MakeFunction    (0X7CA,0X840);
	SetFunctionFlags(0X7CA,0x4010);
	MakeFrame(0X7CA, 0X4, 2, 0);
	MakeLocal(0X7CA, 0X840, "[bp-0X4]", "_witd_i");
	MakeLocal(0X7CA, 0X840, "[bp-0X2]", "_witd_j");
	MakeLocal(0X7CA, 0X840, "[bp+0X4]", "_buf_");
	MakeNameEx(0X7D5, "_witd_1", SN_LOCAL);
	MakeNameEx(0X7D8, "_witd_2", SN_LOCAL);
	MakeNameEx(0X7FD, "_witd_3", SN_LOCAL);
	MakeNameEx(0X800, "_witd_4", SN_LOCAL);
	MakeNameEx(0X80F, "_witd_5", SN_LOCAL);
	MakeNameEx(0X82E, "_witd_6", SN_LOCAL);
	MakeNameEx(0X83E, "_witd_7", SN_LOCAL);
	MakeFunction    (0X840,0X9DA);
	SetFunctionFlags(0X840,0x10);
	MakeFrame(0X840, 0XA, 2, 0);
	MakeLocal(0X840, 0X9DA, "[bp-0XA]", "mm_err_switch");
	MakeLocal(0X840, 0X9DA, "[bp-0X8]", "mm_i");
	MakeLocal(0X840, 0X9DA, "[bp-0X6]", "mm_bad_drv");
	MakeLocal(0X840, 0X9DA, "[bp-0X4]", "mm_max_input");
	MakeLocal(0X840, 0X9DA, "[bp-0X2]", "mm_input");
	MakeNameEx(0X856, "mainmenu_00", SN_LOCAL);
	MakeNameEx(0X85A, "mainmenu_01", SN_LOCAL);
	MakeNameEx(0X870, "mainmenu_02", SN_LOCAL);
	MakeNameEx(0X882, "mainmenu_03", SN_LOCAL);
	MakeNameEx(0X89B, "mainmenu_04", SN_LOCAL);
	MakeNameEx(0X8A4, "mainmenu_05", SN_LOCAL);
	MakeNameEx(0X8E3, "mainmenu_06", SN_LOCAL);
	MakeNameEx(0X8F1, "mainmenu_07", SN_LOCAL);
	MakeNameEx(0X8F4, "mainmenu_08", SN_LOCAL);
	MakeNameEx(0X90F, "mainmenu_09", SN_LOCAL);
	MakeNameEx(0X913, "mainmenu_10", SN_LOCAL);
	MakeNameEx(0X927, "mainmenu_11", SN_LOCAL);
	MakeNameEx(0X92B, "mainmenu_12", SN_LOCAL);
	MakeNameEx(0X97F, "mainmenu_13", SN_LOCAL);
	MakeNameEx(0X991, "mainmenu_14", SN_LOCAL);
	MakeNameEx(0X9A1, "mainmenu_15", SN_LOCAL);
	MakeNameEx(0X9A7, "mainmenu_16", SN_LOCAL);
	MakeNameEx(0X9AD, "mainmenu_17", SN_LOCAL);
	MakeNameEx(0X9B3, "mainmenu_18", SN_LOCAL);
	MakeNameEx(0X9BD, "mainmenu_19", SN_LOCAL);
	MakeNameEx(0X9C5, "mainmenu_20", SN_LOCAL);
	MakeNameEx(0X9CB, "mainmenu_21", SN_LOCAL);
	MakeNameEx(0X9D5, "mainmenu_22", SN_LOCAL);
	MakeFunction    (0X9DA,0XB94);
	SetFunctionFlags(0X9DA,0x10);
	MakeFrame(0X9DA, 0XA, 2, 0);
	MakeLocal(0X9DA, 0XB94, "[bp-0XA]", "_status_");
	MakeLocal(0X9DA, 0XB94, "[bp-0X6]", "dp_temp");
	MakeLocal(0X9DA, 0XB94, "[bp-0X2]", "dp_i");
	MakeNameEx(0XA11, "dp_1", SN_LOCAL);
	MakeNameEx(0XA37, "dp_2", SN_LOCAL);
	MakeNameEx(0XA86, "dp_3", SN_LOCAL);
	MakeNameEx(0XA8F, "dp_4", SN_LOCAL);
	MakeNameEx(0XA9E, "dp_5", SN_LOCAL);
	MakeNameEx(0XAA4, "dp_6", SN_LOCAL);
	MakeNameEx(0XAE0, "dp_7", SN_LOCAL);
	MakeNameEx(0XAE5, "dp_8", SN_LOCAL);
	MakeNameEx(0XAF9, "dp_9", SN_LOCAL);
	MakeNameEx(0XB0D, "dp_10", SN_LOCAL);
	MakeNameEx(0XB12, "dp_11", SN_LOCAL);
	MakeNameEx(0XB25, "dp_12", SN_LOCAL);
	MakeNameEx(0XB39, "dp_13", SN_LOCAL);
	MakeNameEx(0XB45, "dp_14", SN_LOCAL);
	MakeNameEx(0XB58, "dp_15", SN_LOCAL);
	MakeNameEx(0XB62, "dp_16", SN_LOCAL);
	MakeNameEx(0XB67, "dp_17", SN_LOCAL);
	MakeNameEx(0XB7A, "dp_18", SN_LOCAL);
	MakeNameEx(0XB7D, "dp_19", SN_LOCAL);
	MakeNameEx(0XB84, "dp_20", SN_LOCAL);
	MakeFunction    (0XB96,0XE67);
	SetFunctionFlags(0XB96,0x10);
	MakeFrame(0XB96, 0X1C, 2, 0);
	MakeLocal(0XB96, 0XE67, "[bp-0X1C]", "ddp_status");
	MakeLocal(0XB96, 0XE67, "[bp-0X1A]", "ddp_pnum");
	MakeLocal(0XB96, 0XE67, "[bp-0X18]", "ddp_cnt");
	MakeLocal(0XB96, 0XE67, "[bp-0X16]", "ddp_ext");
	MakeLocal(0XB96, 0XE67, "[bp-0X14]", "ddp_pri");
	MakeLocal(0XB96, 0XE67, "[bp-0X12]", "ddp_j");
	MakeLocal(0XB96, 0XE67, "[bp-0X10]", "ddp_str_input");
	MakeLocal(0XB96, 0XE67, "[bp-0X4]", "ddp_i");
	MakeLocal(0XB96, 0XE67, "[bp-0X2]", "ddp_input");
	MakeNameEx(0XBD8, "ddp_1", SN_LOCAL);
	MakeFunction    (0XE68,0XF6F);
	SetFunctionFlags(0XE68,0x10);
	MakeFrame(0XE68, 0X6, 2, 0);
	MakeFunction    (0XF70,0X1395);
	SetFunctionFlags(0XF70,0x10);
	MakeFrame(0XF70, 0X60, 2, 0);
	MakeFunction    (0X1396,0X1559);
	SetFunctionFlags(0X1396,0x10);
	MakeFrame(0X1396, 0XC, 2, 0);
	MakeLocal(0X1396, 0X1559, "[bp-0XC]", "ndd_status");
	MakeLocal(0X1396, 0X1559, "[bp-0XA]", "ndd_pnum");
	MakeLocal(0X1396, 0X1559, "[bp-0X8]", "ndd_cnt");
	MakeLocal(0X1396, 0X1559, "[bp-0X6]", "ndd_j");
	MakeLocal(0X1396, 0X1559, "[bp-0X4]", "ndd_i");
	MakeFunction    (0X155A,0X168B);
	SetFunctionFlags(0X155A,0x10);
	MakeFrame(0X155A, 0X6, 2, 0);
	MakeLocal(0X155A, 0X168B, "[bp-0X2]", "cp_input");
	MakeNameEx(0X15DB, "cp_0", SN_LOCAL);
	MakeNameEx(0X15E1, "cp_1", SN_LOCAL);
	MakeNameEx(0X15E6, "cp_2", SN_LOCAL);
	MakeNameEx(0X15F0, "switch_input7", SN_LOCAL);
	MakeNameEx(0X1603, "case_crea_part_DEF", SN_LOCAL);
	MakeNameEx(0X1608, "case_crea_part_1", SN_LOCAL);
	MakeNameEx(0X160D, "case_crea_part_2", SN_LOCAL);
	MakeNameEx(0X1650, "cp_7", SN_LOCAL);
	MakeNameEx(0X1655, "cp_8", SN_LOCAL);
	MakeNameEx(0X1660, "cp_9", SN_LOCAL);
	MakeNameEx(0X1674, "cp_10", SN_LOCAL);
	MakeNameEx(0X167B, "cp_11", SN_LOCAL);
	MakeNameEx(0X167E, "case_crea_part_break", SN_LOCAL);
	MakeFunction    (0X168E,0X1908);
	SetFunctionFlags(0X168E,0x10);
	MakeFrame(0X168E, 0X10, 2, 0);
	MakeLocal(0X168E, 0X1908, "[bp-0X6]", "second_disk_flag");
	MakeLocal(0X168E, 0X1908, "[bp-0X4]", "cdp_temp");
	MakeNameEx(0X16FF, "cdp_1", SN_LOCAL);
	MakeNameEx(0X1702, "cdp_2", SN_LOCAL);
	MakeNameEx(0X170F, "cdp_21", SN_LOCAL);
	MakeNameEx(0X1715, "cdp_22", SN_LOCAL);
	MakeNameEx(0X1749, "cdp_3", SN_LOCAL);
	MakeNameEx(0X189F, "cdp_17", SN_LOCAL);
	MakeNameEx(0X18AF, "cdp_23", SN_LOCAL);
	MakeNameEx(0X18D8, "cdp_18", SN_LOCAL);
	MakeNameEx(0X18F2, "case_dos_create_0", SN_LOCAL);
	MakeNameEx(0X18F8, "cdp_19", SN_LOCAL);
	MakeNameEx(0X18FE, "cdp_20", SN_LOCAL);
	MakeNameEx(0X1905, "case_dos_create_break", SN_LOCAL);
	MakeFunction    (0X190A,0X1B63);
	SetFunctionFlags(0X190A,0x10);
	MakeFrame(0X190A, 0XA, 2, 0);
	MakeFunction    (0X1B64,0X1E44);
	SetFunctionFlags(0X1B64,0x10);
	MakeFrame(0X1B64, 0XA, 2, 0);
	MakeLocal(0X1B64, 0X1E44, "[bp-0XA]", "ecp_temp");
	MakeLocal(0X1B64, 0X1E44, "[bp-0X8]", "ecp_default_entry");
	MakeLocal(0X1B64, 0X1E44, "[bp-0X6]", "ecp_default_entry_2");
	MakeLocal(0X1B64, 0X1E44, "[bp-0X4]", "ecp_input");
	MakeLocal(0X1B64, 0X1E44, "[bp-0X2]", "ecp_input_2");
	MakeNameEx(0X1BE3, "ecp_1", SN_LOCAL);
	MakeNameEx(0X1BF7, "ecp_2", SN_LOCAL);
	MakeNameEx(0X1BFA, "ecp_3", SN_LOCAL);
	MakeNameEx(0X1C1C, "ecp_4", SN_LOCAL);
	MakeNameEx(0X1C2D, "ecp_5", SN_LOCAL);
	MakeNameEx(0X1C41, "ecp_6", SN_LOCAL);
	MakeNameEx(0X1CAA, "ecp_7", SN_LOCAL);
	MakeNameEx(0X1CC4, "ecp_8", SN_LOCAL);
	MakeNameEx(0X1CD2, "ecp_9", SN_LOCAL);
	MakeNameEx(0X1CE4, "ecp_10", SN_LOCAL);
	MakeNameEx(0X1CED, "ecp_11", SN_LOCAL);
	MakeNameEx(0X1D3E, "ecp_12", SN_LOCAL);
	MakeNameEx(0X1D54, "ecp_13", SN_LOCAL);
	MakeNameEx(0X1D7B, "ecp_14", SN_LOCAL);
	MakeNameEx(0X1D92, "ecp_15", SN_LOCAL);
	MakeNameEx(0X1DB1, "ecp_16", SN_LOCAL);
	MakeNameEx(0X1DBF, "ecp_17", SN_LOCAL);
	MakeNameEx(0X1DC7, "ecp_18", SN_LOCAL);
	MakeNameEx(0X1DD9, "ecp_19", SN_LOCAL);
	MakeNameEx(0X1E25, "ecp_20", SN_LOCAL);
	MakeNameEx(0X1E2A, "ecp_21", SN_LOCAL);
	MakeNameEx(0X1E2F, "ecp_22", SN_LOCAL);
	MakeNameEx(0X1E3A, "ecp_23", SN_LOCAL);
	MakeNameEx(0X1E41, "ecp_24", SN_LOCAL);
	MakeFunction    (0X1E46,0X21B0);
	SetFunctionFlags(0X1E46,0x10);
	MakeFrame(0X1E46, 0X18, 2, 0);
	MakeFunction    (0X21B2,0X254D);
	SetFunctionFlags(0X21B2,0x10);
	MakeFrame(0X21B2, 0X10, 2, 0);
	MakeFunction    (0X254E,0X2602);
	SetFunctionFlags(0X254E,0x10);
	MakeFrame(0X254E, 0X2, 2, 0);
	MakeFunction    (0X2604,0X263E);
	SetFunctionFlags(0X2604,0);
	MakeFunction    (0X263E,0X267D);
	SetFunctionFlags(0X263E,0);
	MakeNameEx(0X267A, "cve_1", SN_LOCAL);
	MakeFunction    (0X267E,0X2953);
	SetFunctionFlags(0X267E,0x10);
	MakeFrame(0X267E, 0XC, 2, 0);
	MakeLocal(0X267E, 0X2953, "[bp-0XC]", "a_primary_count");
	MakeLocal(0X267E, 0X2953, "[bp-0X4]", "char_j");
	MakeFunction    (0X2954,0X2972);
	SetFunctionFlags(0X2954,0x10);
	MakeFrame(0X2954, 0, 2, 0);
	MakeLocal(0X2954, 0X2972, "[bp+0X4]", "chk_partition_id");
	MakeNameEx(0X2965, "chk_partid_1", SN_LOCAL);
	MakeFunction    (0X2C32,0X2CBA);
	SetFunctionFlags(0X2C32,0x10);
	MakeFrame(0X2C32, 0, 2, 0);
	MakeLocal(0X2C32, 0X2CBA, "[bp+0X4]", "gdl_partition");
	MakeLocal(0X2C32, 0X2CBA, "[bp+0X6]", "gdl_disk");
	MakeFunction    (0X2CBA,0X2E6F);
	SetFunctionFlags(0X2CBA,0x10);
	MakeFrame(0X2CBA, 0X14, 2, 0);
	MakeFunction    (0X2E70,0X2F72);
	SetFunctionFlags(0X2E70,0x10);
	MakeFrame(0X2E70, 0X2, 2, 0);
	MakeLocal(0X2E70, 0X2F72, "[bp-0X2]", "sdl_partition");
	MakeLocal(0X2E70, 0X2F72, "[bp+0X4]", "sdl_disk");
	MakeFunction    (0X2F72,0X30FF);
	SetFunctionFlags(0X2F72,0x10);
	MakeFrame(0X2F72, 0X12, 2, 0);
	MakeLocal(0X2F72, 0X30FF, "[bp-0X12]", "_length_");
	MakeLocal(0X2F72, 0X30FF, "[bp-0X10]", "_k_");
	MakeLocal(0X2F72, 0X30FF, "[bp-0XE]", "vol_label");
	MakeLocal(0X2F72, 0X30FF, "[bp+0X4]", "j_disk");
	MakeLocal(0X2F72, 0X30FF, "[bp+0X6]", "i_partition");
	MakeFunction    (0X3100,0X35A3);
	SetFunctionFlags(0X3100,0x10);
	MakeFrame(0X3100, 0X28, 2, 0);
	MakeFunction    (0X35A4,0X35B5);
	SetFunctionFlags(0X35A4,0);
	MakeFunction    (0X35B6,0X3602);
	SetFunctionFlags(0X35B6,0x10);
	MakeFrame(0X35B6, 0X4, 2, 0);
	MakeLocal(0X35B6, 0X3602, "[bp-0X2]", "bsv_temp");
	MakeLocal(0X35B6, 0X3602, "[bp+0X4]", "bsv_buffer");
	MakeFunction    (0X362C,0X36A9);
	SetFunctionFlags(0X362C,0x10);
	MakeFrame(0X362C, 0XE, 2, 0);
	MakeFunction    (0X36AA,0X36F2);
	SetFunctionFlags(0X36AA,0x10);
	MakeFrame(0X36AA, 0XC, 2, 0);
	MakeLocal(0X36AA, 0X36F2, "[bp-0XC]", "msg_offset");
	MakeLocal(0X36AA, 0X36F2, "[bp-0XA]", "msg_segment");
	MakeLocal(0X36AA, 0X36F2, "[bp-0X8]", "msg_index");
	MakeLocal(0X36AA, 0X36F2, "[bp-0X6]", "cnt");
	MakeLocal(0X36AA, 0X36F2, "[bp-0X4]", "col");
	MakeLocal(0X36AA, 0X36F2, "[bp-0X2]", "row");
	MakeLocal(0X36AA, 0X36F2, "[bp+0X4]", "menu_msg_ptr");
	MakeNameEx(0X36BF, "display_1", SN_LOCAL);
	MakeNameEx(0X36E2, "display_2", SN_LOCAL);
	MakeFunction    (0X36F2,0X3A13);
	SetFunctionFlags(0X36F2,0x10);
	MakeFrame(0X36F2, 0XC, 2, 0);
	MakeLocal(0X36F2, 0X3A13, "[bp-0XC]", "column");
	MakeLocal(0X36F2, 0X3A13, "[bp-0XA]", "insert_count");
	MakeLocal(0X36F2, 0X3A13, "[bp-0X8]", "insert_segment");
	MakeLocal(0X36F2, 0X3A13, "[bp-0X6]", "attribute_ptr");
	MakeLocal(0X36F2, 0X3A13, "[bp-0X4]", "attribute_ptr_2");
	MakeLocal(0X36F2, 0X3A13, "[bp-0X2]", "attribute");
	MakeLocal(0X36F2, 0X3A13, "[bp+0X4]", "_s_");
	MakeLocal(0X36F2, 0X3A13, "[bp+0X8]", "row");
	MakeLocal(0X36F2, 0X3A13, "[bp+0XA]", "col");
	MakeLocal(0X36F2, 0X3A13, "[bp+0XC]", "cnt");
	MakeNameEx(0X3718, "display_1", SN_LOCAL);
	MakeNameEx(0X3727, "display_2", SN_LOCAL);
	MakeNameEx(0X372B, "display_3", SN_LOCAL);
	MakeNameEx(0X3737, "display_4", SN_LOCAL);
	MakeNameEx(0X3743, "display_5", SN_LOCAL);
	MakeNameEx(0X3759, "display_6", SN_LOCAL);
	MakeNameEx(0X376A, "display_7", SN_LOCAL);
	MakeNameEx(0X3794, "display_8", SN_LOCAL);
	MakeNameEx(0X3797, "display_9", SN_LOCAL);
	MakeNameEx(0X37A3, "display_10", SN_LOCAL);
	MakeNameEx(0X37AC, "display_11", SN_LOCAL);
	MakeNameEx(0X37C1, "display_12", SN_LOCAL);
	MakeNameEx(0X37CA, "display_13", SN_LOCAL);
	MakeNameEx(0X37D5, "display_14", SN_LOCAL);
	MakeNameEx(0X37E4, "display_15", SN_LOCAL);
	MakeNameEx(0X37F3, "display_16", SN_LOCAL);
	MakeNameEx(0X37F7, "display_17", SN_LOCAL);
	MakeNameEx(0X37FC, "display_18", SN_LOCAL);
	MakeNameEx(0X3805, "display_19", SN_LOCAL);
	MakeNameEx(0X3813, "display_20", SN_LOCAL);
	MakeNameEx(0X3819, "display_21", SN_LOCAL);
	MakeNameEx(0X3824, "display_22", SN_LOCAL);
	MakeNameEx(0X3834, "display_23", SN_LOCAL);
	MakeNameEx(0X383B, "display_24", SN_LOCAL);
	MakeNameEx(0X3842, "display_25", SN_LOCAL);
	MakeNameEx(0X3850, "display_26", SN_LOCAL);
	MakeNameEx(0X385F, "display_27", SN_LOCAL);
	MakeNameEx(0X3870, "display_28", SN_LOCAL);
	MakeNameEx(0X3881, "display_29", SN_LOCAL);
	MakeNameEx(0X389F, "display_30", SN_LOCAL);
	MakeNameEx(0X38B0, "display_31", SN_LOCAL);
	MakeNameEx(0X38C1, "display_32", SN_LOCAL);
	MakeNameEx(0X38D1, "display_33", SN_LOCAL);
	MakeNameEx(0X38E2, "display_34", SN_LOCAL);
	MakeNameEx(0X38F3, "display_35", SN_LOCAL);
	MakeNameEx(0X3901, "display_36", SN_LOCAL);
	MakeNameEx(0X391B, "display_37", SN_LOCAL);
	MakeNameEx(0X392E, "display_38", SN_LOCAL);
	MakeNameEx(0X3945, "display_39", SN_LOCAL);
	MakeNameEx(0X394D, "display_40", SN_LOCAL);
	MakeNameEx(0X3953, "display_41", SN_LOCAL);
	MakeNameEx(0X3989, "display_42", SN_LOCAL);
	MakeNameEx(0X3990, "display_43", SN_LOCAL);
	MakeNameEx(0X39D4, "display_44", SN_LOCAL);
	MakeNameEx(0X39D9, "display_45", SN_LOCAL);
	MakeNameEx(0X39E3, "display_46", SN_LOCAL);
	MakeNameEx(0X3A09, "display_47", SN_LOCAL);
	MakeNameEx(0X3A10, "display_48", SN_LOCAL);
	MakeFunction    (0X3A14,0X3A50);
	SetFunctionFlags(0X3A14,0x10);
	MakeFrame(0X3A14, 0X20, 2, 0);
	MakeLocal(0X3A14, 0X3A50, "[bp-0X20]", "numinmsg_mb");
	MakeLocal(0X3A14, 0X3A50, "[bp-0X1E]", "numinmsg_mb_2");
	MakeLocal(0X3A14, 0X3A50, "[bp-0X1D]", "numinmsg_mb_3");
	MakeLocal(0X3A14, 0X3A50, "[bp-0X1C]", "numinmsg_mb_4");
	MakeLocal(0X3A14, 0X3A50, "[bp+0X4]", "numinmsg_num_lw");
	MakeLocal(0X3A14, 0X3A50, "[bp+0X6]", "numinmsg_num_hw");
	MakeLocal(0X3A14, 0X3A50, "[bp+0X8]", "numinmsg_start");
	MakeFunction    (0X3B66,0X3D62);
	SetFunctionFlags(0X3B66,0x10);
	MakeFrame(0X3B66, 0X12, 2, 0);
	MakeLocal(0X3B66, 0X3D62, "[bp-0X12]", "gni_input_ptr");
	MakeLocal(0X3B66, 0X3D62, "[bp-0X10]", "gni_input_ptr_2");
	MakeLocal(0X3B66, 0X3D62, "[bp-0XE]", "gni_attr_ptr");
	MakeLocal(0X3B66, 0X3D62, "[bp-0XC]", "gni_attr_ptr_2");
	MakeLocal(0X3B66, 0X3D62, "[bp-0XA]", "gni_attribute");
	MakeLocal(0X3B66, 0X3D62, "[bp-0X8]", "underminimum");
	MakeLocal(0X3B66, 0X3D62, "[bp-0X6]", "input_value");
	MakeLocal(0X3B66, 0X3D62, "[bp-0X4]", "default_used");
	MakeLocal(0X3B66, 0X3D62, "[bp-0X2]", "gni_input");
	MakeLocal(0X3B66, 0X3D62, "[bp+0X4]", "input_default");
	MakeLocal(0X3B66, 0X3D62, "[bp+0X6]", "gni_max_num");
	MakeLocal(0X3B66, 0X3D62, "[bp+0X8]", "gni_row");
	MakeLocal(0X3B66, 0X3D62, "[bp+0XA]", "gni_column");
	MakeLocal(0X3B66, 0X3D62, "[bp+0XC]", "minimum_zero");
	MakeNameEx(0X3B8C, "gni_1", SN_LOCAL);
	MakeNameEx(0X3B90, "gni_2", SN_LOCAL);
	MakeNameEx(0X3BCE, "gni_3", SN_LOCAL);
	MakeNameEx(0X3BD3, "gni_4", SN_LOCAL);
	MakeNameEx(0X3BDD, "gni_5", SN_LOCAL);
	MakeNameEx(0X3C13, "gni_6", SN_LOCAL);
	MakeNameEx(0X3C23, "gni_7", SN_LOCAL);
	MakeNameEx(0X3C26, "gni_8", SN_LOCAL);
	MakeNameEx(0X3C37, "gni_9", SN_LOCAL);
	MakeNameEx(0X3C3E, "gni_10", SN_LOCAL);
	MakeNameEx(0X3C54, "gni_11", SN_LOCAL);
	MakeNameEx(0X3C58, "gni_12", SN_LOCAL);
	MakeNameEx(0X3C82, "gni_13", SN_LOCAL);
	MakeNameEx(0X3CA2, "gni_14", SN_LOCAL);
	MakeNameEx(0X3CB4, "gni_15", SN_LOCAL);
	MakeNameEx(0X3CC4, "gni_16", SN_LOCAL);
	MakeNameEx(0X3CD4, "gni_17", SN_LOCAL);
	MakeNameEx(0X3CDB, "gni_18", SN_LOCAL);
	MakeNameEx(0X3CFB, "gni_19", SN_LOCAL);
	MakeNameEx(0X3D0D, "gni_20", SN_LOCAL);
	MakeNameEx(0X3D1D, "gni_21", SN_LOCAL);
	MakeNameEx(0X3D2D, "gni_22", SN_LOCAL);
	MakeNameEx(0X3D35, "gni_23", SN_LOCAL);
	MakeNameEx(0X3D5D, "gni_24", SN_LOCAL);
	MakeFunction    (0X3D64,0X3EA9);
	SetFunctionFlags(0X3D64,0x10);
	MakeFrame(0X3D64, 0X10, 2, 0);
	MakeFunction    (0X3EAA,0X3EE8);
	SetFunctionFlags(0X3EAA,0x10);
	MakeFrame(0X3EAA, 0X2, 2, 0);
	MakeLocal(0X3EAA, 0X3EE8, "[bp-0X2]", "wfesc_input");
	MakeNameEx(0X3EC9, "wfesc_1", SN_LOCAL);
	MakeNameEx(0X3EDE, "wfesc_2", SN_LOCAL);
	MakeFunction    (0X3EE8,0X3F26);
	SetFunctionFlags(0X3EE8,0x10);
	MakeFrame(0X3EE8, 0X2, 2, 0);
	MakeLocal(0X3EE8, 0X3F26, "[bp-0X2]", "wfesc2_input");
	MakeNameEx(0X3F07, "wfesc2_1", SN_LOCAL);
	MakeNameEx(0X3F1C, "wfesc2_2", SN_LOCAL);
	MakeFunction    (0X3F26,0X4147);
	SetFunctionFlags(0X3F26,0x10);
	MakeFrame(0X3F26, 0XA, 2, 0);
	MakeFunction    (0X414A,0X42BE);
	SetFunctionFlags(0X414A,0x10);
	MakeFrame(0X414A, 0X10, 2, 0);
	MakeFunction    (0X42C0,0X42EC);
	SetFunctionFlags(0X42C0,0);
	MakeNameEx(0X42E8, "gci_1", SN_LOCAL);
	MakeFunction    (0X42EC,0X45CC);
	SetFunctionFlags(0X42EC,0x10);
	MakeFrame(0X42EC, 0X1A, 2, 0);
	MakeFunction    (0X45CC,0X47B7);
	SetFunctionFlags(0X45CC,0x10);
	MakeFrame(0X45CC, 0X10, 2, 0);
	MakeFunction    (0X47B8,0X4A08);
	SetFunctionFlags(0X47B8,0x10);
	MakeFrame(0X47B8, 0X4, 2, 0);
	MakeFunction    (0X4A0A,0X4A3E);
	SetFunctionFlags(0X4A0A,0x10);
	MakeFrame(0X4A0A, 0X2, 2, 0);
	MakeLocal(0X4A0A, 0X4A3E, "[bp+0X4]", "gnl_j");
	MakeFunction    (0X4A3E,0X4BC4);
	SetFunctionFlags(0X4A3E,0x10);
	MakeFrame(0X4A3E, 0X14, 2, 0);
	MakeLocal(0X4A3E, 0X4BC4, "[bp-0X12]", "vd_insert_offset");
	MakeLocal(0X4A3E, 0X4BC4, "[bp-0XA]", "vd_first_display");
	MakeLocal(0X4A3E, 0X4BC4, "[bp-0X8]", "vd_drive_num");
	MakeLocal(0X4A3E, 0X4BC4, "[bp-0X6]", "vd_drive_letter");
	MakeLocal(0X4A3E, 0X4BC4, "[bp-0X4]", "vd_drive_found");
	MakeLocal(0X4A3E, 0X4BC4, "[bp-0X2]", "vd_i");
	MakeNameEx(0X4A70, "vd_01", SN_LOCAL);
	MakeNameEx(0X4A73, "vd_02", SN_LOCAL);
	MakeNameEx(0X4AAE, "vd_03", SN_LOCAL);
	MakeNameEx(0X4AB1, "vd_04", SN_LOCAL);
	MakeNameEx(0X4ABA, "vd_05", SN_LOCAL);
	MakeNameEx(0X4AF9, "vd_06", SN_LOCAL);
	MakeNameEx(0X4B35, "vd_07", SN_LOCAL);
	MakeNameEx(0X4B3B, "vd_08", SN_LOCAL);
	MakeNameEx(0X4B62, "vd_09", SN_LOCAL);
	MakeNameEx(0X4B75, "vd_10", SN_LOCAL);
	MakeNameEx(0X4B88, "vd_11", SN_LOCAL);
	MakeNameEx(0X4B9B, "vd_12", SN_LOCAL);
	MakeNameEx(0X4BA3, "vd_13", SN_LOCAL);
	MakeNameEx(0X4BBE, "vd_14", SN_LOCAL);
	MakeFunction    (0X4BC4,0X4EEF);
	SetFunctionFlags(0X4BC4,0x10);
	MakeFrame(0X4BC4, 0X1A, 2, 0);
	MakeFunction    (0X4EF0,0X52E7);
	SetFunctionFlags(0X4EF0,0x10);
	MakeFrame(0X4EF0, 0X10, 2, 0);
	MakeLocal(0X4EF0, 0X52E7, "[bp-0X10]", "fpfs_format_status");
	MakeLocal(0X4EF0, 0X52E7, "[bp-0XE]", "fpfs_cylinders");
	MakeLocal(0X4EF0, 0X52E7, "[bp-0XC]", "fpfs_anypartition");
	MakeLocal(0X4EF0, 0X52E7, "[bp-0XA]", "freespace_count");
	MakeLocal(0X4EF0, 0X52E7, "[bp-0X8]", "fpfs_temp");
	MakeLocal(0X4EF0, 0X52E7, "[bp-0X6]", "last_found_partition");
	MakeLocal(0X4EF0, 0X52E7, "[bp-0X4]", "fpfs_partition_count");
	MakeLocal(0X4EF0, 0X52E7, "[bp-0X2]", "fpfs_i");
	MakeLocal(0X4EF0, 0X52E7, "[bp+0X4]", "fpfs_type");
	MakeFunction    (0X52E8,0X538F);
	SetFunctionFlags(0X52E8,0x10);
	MakeFrame(0X52E8, 0X6, 2, 0);
	MakeFunction    (0X5390,0X5728);
	SetFunctionFlags(0X5390,0x10);
	MakeFrame(0X5390, 0X10, 2, 0);
	MakeFunction    (0X5728,0X57B6);
	SetFunctionFlags(0X5728,0x10);
	MakeFrame(0X5728, 0X8, 2, 0);
	MakeFunction    (0X57B6,0X57EE);
	SetFunctionFlags(0X57B6,0x10);
	MakeFrame(0X57B6, 0X2, 2, 0);
	MakeLocal(0X57B6, 0X57EE, "[bp-0X2]", "ffp_i");
	MakeNameEx(0X57C0, "ffp_1", SN_LOCAL);
	MakeNameEx(0X57C3, "ffp_2", SN_LOCAL);
	MakeNameEx(0X57EA, "ffp_3", SN_LOCAL);
	MakeFunction    (0X57EE,0X5824);
	SetFunctionFlags(0X57EE,0x10);
	MakeFrame(0X57EE, 0X2, 2, 0);
	MakeLocal(0X57EE, 0X5824, "[bp-0X2]", "pte_number");
	MakeLocal(0X57EE, 0X5824, "[bp+0X4]", "partition_ID");
	MakeNameEx(0X57F8, "fpt_1", SN_LOCAL);
	MakeNameEx(0X57FB, "fpt_2", SN_LOCAL);
	MakeNameEx(0X5820, "fpt_3", SN_LOCAL);
	MakeFunction    (0X5824,0X5889);
	SetFunctionFlags(0X5824,0x10);
	MakeFrame(0X5824, 0X2, 2, 0);
	MakeLocal(0X5824, 0X5889, "[bp-0X2]", "fndp_i");
	MakeNameEx(0X582E, "fndp_1", SN_LOCAL);
	MakeNameEx(0X5831, "fndp_2", SN_LOCAL);
	MakeNameEx(0X5885, "fndp_3", SN_LOCAL);
	MakeFunction    (0X588A,0X58D5);
	SetFunctionFlags(0X588A,0x10);
	MakeFrame(0X588A, 0X2, 2, 0);
	MakeFunction    (0X58D6,0X5909);
	SetFunctionFlags(0X58D6,0x10);
	MakeFrame(0X58D6, 0X2, 2, 0);
	MakeLocal(0X58D6, 0X5909, "[bp-0X2]", "fap_i");
	MakeNameEx(0X58E0, "fap_1", SN_LOCAL);
	MakeNameEx(0X58E3, "fap_2", SN_LOCAL);
	MakeNameEx(0X5905, "fap_3", SN_LOCAL);
	MakeFunction    (0X590A,0X5946);
	SetFunctionFlags(0X590A,0x10);
	MakeFrame(0X590A, 0X2, 2, 0);
	MakeLocal(0X590A, 0X5946, "[bp-0X2]", "_p_number_");
	MakeFunction    (0X5946,0X597A);
	SetFunctionFlags(0X5946,0x10);
	MakeFrame(0X5946, 0X2, 2, 0);
	MakeFunction    (0X597A,0X59AB);
	SetFunctionFlags(0X597A,0x10);
	MakeFrame(0X597A, 0X2, 2, 0);
	MakeLocal(0X597A, 0X59AB, "[bp-0X2]", "findlogdrv_i");
	MakeNameEx(0X5984, "findlogdrv_1", SN_LOCAL);
	MakeNameEx(0X5987, "findlogdrv_2", SN_LOCAL);
	MakeNameEx(0X59A7, "findlogdrv_3", SN_LOCAL);
	MakeFunction    (0X59AC,0X5A06);
	SetFunctionFlags(0X59AC,0x10);
	MakeFrame(0X59AC, 0X4, 2, 0);
	MakeFunction    (0X5A06,0X5A6F);
	SetFunctionFlags(0X5A06,0x10);
	MakeFrame(0X5A06, 0X4, 2, 0);
	MakeFunction    (0X5AC0,0X5AF9);
	SetFunctionFlags(0X5AC0,0x10);
	MakeFrame(0X5AC0, 0X4, 2, 0);
	MakeLocal(0X5AC0, 0X5AF9, "[bp-0X4]", "attrib_ptr");
	MakeLocal(0X5AC0, 0X5AF9, "[bp-0X2]", "attrib");
	MakeLocal(0X5AC0, 0X5AF9, "[bp+0X4]", "TopRow");
	MakeLocal(0X5AC0, 0X5AF9, "[bp+0X6]", "LeftCol");
	MakeLocal(0X5AC0, 0X5AF9, "[bp+0X8]", "BotRow");
	MakeLocal(0X5AC0, 0X5AF9, "[bp+0XA]", "RightCol");
	MakeFunction    (0X5AFA,0X5BF5);
	SetFunctionFlags(0X5AFA,0);
	MakeNameEx(0X5B3E, "ivi_1", SN_LOCAL);
	MakeNameEx(0X5B48, "ivi_2", SN_LOCAL);
	MakeNameEx(0X5B67, "ivi_3", SN_LOCAL);
	MakeNameEx(0X5BA1, "ivi_4", SN_LOCAL);
	MakeNameEx(0X5BDB, "ivi_5", SN_LOCAL);
	MakeNameEx(0X5BE6, "ivi_6", SN_LOCAL);
	MakeFunction    (0X5BF6,0X5C8E);
	SetFunctionFlags(0X5BF6,0);
	MakeNameEx(0X5C00, "rvi_1", SN_LOCAL);
	MakeNameEx(0X5C3A, "rvi_2", SN_LOCAL);
	MakeNameEx(0X5C74, "rvi_3", SN_LOCAL);
	MakeNameEx(0X5C8D, "rvi_ret", SN_LOCAL);
	MakeFunction    (0X5C8E,0X5CAE);
	SetFunctionFlags(0X5C8E,0);
	MakeFunction    (0X5CAE,0X5D0C);
	SetFunctionFlags(0X5CAE,0x10);
	MakeFrame(0X5CAE, 0X48, 2, 0);
	MakeLocal(0X5CAE, 0X5D0C, "[bp-0X48]", "stat_b_ptr1_off");
	MakeLocal(0X5CAE, 0X5D0C, "[bp-0X46]", "stat_b_ptr1_seg");
	MakeLocal(0X5CAE, 0X5D0C, "[bp-0X44]", "stat_b_ptr2_off");
	MakeLocal(0X5CAE, 0X5D0C, "[bp-0X42]", "stat_b_ptr2_seg");
	MakeLocal(0X5CAE, 0X5D0C, "[bp-0X40]", "state_info_buf");
	MakeLocal(0X5CAE, 0X5D0C, "[bp-0X1E]", "numrows");
	MakeNameEx(0X5CF9, "gvsi_1", SN_LOCAL);
	MakeNameEx(0X5CFB, "gvsi_2", SN_LOCAL);
	MakeNameEx(0X5CFF, "gvsi_3", SN_LOCAL);
	MakeNameEx(0X5D05, "gvsi_4", SN_LOCAL);
	MakeNameEx(0X5D07, "gvsi_5", SN_LOCAL);
	MakeNameEx(0X5D0A, "no_int10h_1Bh_support", SN_LOCAL);
	MakeFunction    (0X5D0C,0X610B);
	SetFunctionFlags(0X5D0C,0x10);
	MakeFrame(0X5D0C, 0X1E, 2, 0);
	MakeFunction    (0X610C,0X6379);
	SetFunctionFlags(0X610C,0x10);
	MakeFrame(0X610C, 0XE, 2, 0);
	MakeFunction    (0X637A,0X63F4);
	SetFunctionFlags(0X637A,0x10);
	MakeFrame(0X637A, 0, 2, 0);
	MakeFunction    (0X63F4,0X646C);
	SetFunctionFlags(0X63F4,0x10);
	MakeFrame(0X63F4, 0, 2, 0);
	MakeFunction    (0X646C,0X668E);
	SetFunctionFlags(0X646C,0x10);
	MakeFrame(0X646C, 0X8, 2, 0);
	MakeFunction    (0X668E,0X672E);
	SetFunctionFlags(0X668E,0x10);
	MakeFrame(0X668E, 0X6, 2, 0);
	MakeLocal(0X668E, 0X672E, "[bp-0X6]", "w_buf_pointer");
	MakeLocal(0X668E, 0X672E, "[bp-0X4]", "w_buf_pointer2");
	MakeLocal(0X668E, 0X672E, "[bp-0X2]", "w_error");
	MakeLocal(0X668E, 0X672E, "[bp+0X4]", "w_cylinder");
	MakeLocal(0X668E, 0X672E, "[bp+0X6]", "w_which_disk");
	MakeFunction    (0X672E,0X6C67);
	SetFunctionFlags(0X672E,0x10);
	MakeFrame(0X672E, 0X2E, 2, 0);
	MakeLocal(0X672E, 0X6C67, "[bp-0X2E]", "buffer_pointer_off");
	MakeLocal(0X672E, 0X6C67, "[bp-0X2C]", "buffer_pointer_seg");
	MakeLocal(0X672E, 0X6C67, "[bp-0X2A]", "cur_head");
	MakeLocal(0X672E, 0X6C67, "[bp-0X24]", "golden_tracks");
	MakeLocal(0X672E, 0X6C67, "[bp-0X1E]", "vt_temp_33");
	MakeLocal(0X672E, 0X6C67, "[bp-0X18]", "vt_total_secs_lw");
	MakeLocal(0X672E, 0X6C67, "[bp-0X16]", "vt_total_secs_hw");
	MakeLocal(0X672E, 0X6C67, "[bp-0X12]", "num_tracks_lw");
	MakeLocal(0X672E, 0X6C67, "[bp-0X10]", "num_tracks_hw");
	MakeLocal(0X672E, 0X6C67, "[bp-0XE]", "verify_cyl");
	MakeLocal(0X672E, 0X6C67, "[bp-0X4]", "vt_j");
	MakeLocal(0X672E, 0X6C67, "[bp+0X4]", "vt_pointer");
	MakeLocal(0X672E, 0X6C67, "[bp+0X6]", "vt_type");
	MakeLocal(0X672E, 0X6C67, "[bp+0X8]", "vt_format_status");
	MakeFunction    (0X6C68,0X6CB2);
	SetFunctionFlags(0X6C68,0x10);
	MakeFrame(0X6C68, 0, 2, 0);
	MakeNameEx(0X6C94, "gdprm_1", SN_LOCAL);
	MakeNameEx(0X6C9F, "gdprm_2", SN_LOCAL);
	MakeNameEx(0X6CAE, "gdprm_3", SN_LOCAL);
	MakeFunction    (0X6CB2,0X6CFD);
	SetFunctionFlags(0X6CB2,0x10);
	MakeFrame(0X6CB2, 0X4, 2, 0);
	MakeLocal(0X6CB2, 0X6CFD, "[bp+0X4]", "rbs_cylinder");
	MakeLocal(0X6CB2, 0X6CFD, "[bp+0X6]", "rbs_disk");
	MakeLocal(0X6CB2, 0X6CFD, "[bp+0X8]", "rbs_head");
	MakeLocal(0X6CB2, 0X6CFD, "[bp+0XA]", "rbs_sector");
	MakeNameEx(0X6CDC, "read_bs_1", SN_LOCAL);
	MakeNameEx(0X6CF9, "read_bs_2", SN_LOCAL);
	MakeFunction    (0X6CFE,0X6E05);
	SetFunctionFlags(0X6CFE,0x10);
	MakeFrame(0X6CFE, 0X7C, 2, 0);
	MakeLocal(0X6CFE, 0X6E05, "[bp+0X8]", "chkl_drv");
	MakeNameEx(0X6D15, "lba_mode_err", SN_LOCAL);
	MakeFunction    (0X6E06,0X6EAC);
	SetFunctionFlags(0X6E06,0x10);
	MakeFrame(0X6E06, 0X14, 2, 0);
	MakeFunction    (0X6EAE,0X6F70);
	SetFunctionFlags(0X6EAE,0x10);
	MakeFrame(0X6EAE, 0X14, 2, 0);
	MakeFunction    (0X6F70,0X6F97);
	SetFunctionFlags(0X6F70,0x10);
	MakeFrame(0X6F70, 0, 2, 0);
	MakeLocal(0X6F70, 0X6F97, "[bp+0X4]", "stcyl_lba_lw");
	MakeLocal(0X6F70, 0X6F97, "[bp+0X6]", "stcyl_lba_hw");
	MakeLocal(0X6F70, 0X6F97, "[bp+0X8]", "stcyl_drv");
	MakeFunction    (0X6F98,0X6FAB);
	SetFunctionFlags(0X6F98,0x10);
	MakeFrame(0X6F98, 0, 2, 0);
	MakeLocal(0X6F98, 0X6FAB, "[bp+0X4]", "_InRegs_");
	MakeLocal(0X6F98, 0X6FAB, "[bp+0X6]", "_OutRegs_");
	MakeLocal(0X6F98, 0X6FAB, "[bp+0X8]", "_SegRegs_");
	MakeFunction    (0X6FAC,0X7013);
	SetFunctionFlags(0X6FAC,0x10);
	MakeFrame(0X6FAC, 0X14, 2, 0);
	MakeFunction    (0X7024,0X70E4);
	SetFunctionFlags(0X7024,0x10);
	MakeFrame(0X7024, 0, 2, 0);
	MakeLocal(0X7024, 0X70E4, "[bp+0X4]", "disk_function");
	MakeLocal(0X7024, 0X70E4, "[bp+0X6]", "disk_sector_cnt");
	MakeLocal(0X7024, 0X70E4, "[bp+0X8]", "disk_drv_num");
	MakeLocal(0X7024, 0X70E4, "[bp+0XA]", "disk_cylinder");
	MakeLocal(0X7024, 0X70E4, "[bp+0XC]", "disk_head");
	MakeLocal(0X7024, 0X70E4, "[bp+0XE]", "disk_sector");
	MakeLocal(0X7024, 0X70E4, "[bp+0X10]", "disk_buffer_ptr");
	MakeNameEx(0X70A5, "diskio_chs", SN_LOCAL);
	MakeNameEx(0X70CE, "diskio_1", SN_LOCAL);
	MakeNameEx(0X70D4, "diskio_2", SN_LOCAL);
	MakeNameEx(0X70DE, "diskio_3", SN_LOCAL);
	MakeFunction    (0X70E4,0X7104);
	SetFunctionFlags(0X70E4,0x10);
	MakeFrame(0X70E4, 0, 2, 0);
	MakeLocal(0X70E4, 0X7104, "[bp+0X4]", "mul32_64_multiplicand");
	MakeLocal(0X70E4, 0X7104, "[bp+0X8]", "mul_32_64_multiplier");
	MakeLocal(0X70E4, 0X7104, "[bp+0XC]", "mul32_64_result_addr");
	MakeFunction    (0X7104,0X7128);
	SetFunctionFlags(0X7104,0x10);
	MakeFrame(0X7104, 0, 2, 0);
	MakeLocal(0X7104, 0X7128, "[bp+0X4]", "div64_32_dividend_l32");
	MakeLocal(0X7104, 0X7128, "[bp+0X8]", "div64_32_dividend_h32");
	MakeLocal(0X7104, 0X7128, "[bp+0XC]", "div64_32_divisor");
	MakeLocal(0X7104, 0X7128, "[bp+0X10]", "div64_32_result_addr");
	MakeFunction    (0X7128,0X72C3);
	SetFunctionFlags(0X7128,0x10);
	MakeFrame(0X7128, 0XE, 2, 0);
	MakeLocal(0X7128, 0X72C3, "[bp-0XE]", "witd_temp_disk");
	MakeLocal(0X7128, 0X72C3, "[bp-0XC]", "witd_changed_flag");
	MakeLocal(0X7128, 0X72C3, "[bp-0XA]", "witd_temp");
	MakeLocal(0X7128, 0X72C3, "[bp-0X8]", "witd_extd_index");
	MakeLocal(0X7128, 0X72C3, "[bp-0X6]", "witd_extd_location");
	MakeLocal(0X7128, 0X72C3, "[bp-0X4]", "witd_j");
	MakeLocal(0X7128, 0X72C3, "[bp-0X2]", "witd_i");
	MakeNameEx(0X713E, "witd_1", SN_LOCAL);
	MakeNameEx(0X7141, "witd_2", SN_LOCAL);
	MakeNameEx(0X7167, "witd_3", SN_LOCAL);
	MakeNameEx(0X717E, "witd_4", SN_LOCAL);
	MakeNameEx(0X7188, "witd_5", SN_LOCAL);
	MakeNameEx(0X718B, "witd_6", SN_LOCAL);
	MakeNameEx(0X71AC, "witd_7", SN_LOCAL);
	MakeNameEx(0X71B5, "witd_8", SN_LOCAL);
	MakeNameEx(0X71BF, "witd_9", SN_LOCAL);
	MakeNameEx(0X71EB, "witd_10", SN_LOCAL);
	MakeNameEx(0X7215, "witd_11", SN_LOCAL);
	MakeNameEx(0X7218, "witd_12", SN_LOCAL);
	MakeNameEx(0X7241, "witd_13", SN_LOCAL);
	MakeNameEx(0X7260, "witd_14", SN_LOCAL);
	MakeNameEx(0X7299, "witd_15", SN_LOCAL);
	MakeNameEx(0X729C, "witd_16", SN_LOCAL);
	MakeFunction    (0X72C4,0X7411);
	SetFunctionFlags(0X72C4,0x10);
	MakeFrame(0X72C4, 0X12, 2, 0);
	MakeLocal(0X72C4, 0X7411, "[bp-0X12]", "wmbr_temp");
	MakeLocal(0X72C4, 0X7411, "[bp-0XE]", "wmbr_long_temp");
	MakeLocal(0X72C4, 0X7411, "[bp-0XC]", "wmbr_long_temp_2");
	MakeLocal(0X72C4, 0X7411, "[bp-0X4]", "wmbr_j");
	MakeLocal(0X72C4, 0X7411, "[bp-0X2]", "wmbr_i");
	MakeLocal(0X72C4, 0X7411, "[bp+0X4]", "wmbr_disk");
	MakeFunction    (0X7412,0X76DA);
	SetFunctionFlags(0X7412,0x10);
	MakeFrame(0X7412, 0X20, 2, 0);
	MakeLocal(0X7412, 0X76DA, "[bp-0X20]", "webr_temp3");
	MakeLocal(0X7412, 0X76DA, "[bp-0X1C]", "webr_multiplier_lw");
	MakeLocal(0X7412, 0X76DA, "[bp-0X1A]", "webr_multiplier_hw");
	MakeLocal(0X7412, 0X76DA, "[bp-0X18]", "webr_temp1");
	MakeLocal(0X7412, 0X76DA, "[bp-0X14]", "webr_multiplicand_lw");
	MakeLocal(0X7412, 0X76DA, "[bp-0X12]", "webr_multiplicand_hw");
	MakeLocal(0X7412, 0X76DA, "[bp-0XE]", "webr_pointer");
	MakeLocal(0X7412, 0X76DA, "[bp-0XC]", "webr_next_drive");
	MakeLocal(0X7412, 0X76DA, "[bp-0XA]", "webr_location");
	MakeLocal(0X7412, 0X76DA, "[bp-0X8]", "webr_longtemp");
	MakeLocal(0X7412, 0X76DA, "[bp-0X6]", "webr_longtemp_2");
	MakeLocal(0X7412, 0X76DA, "[bp-0X4]", "webr_j");
	MakeLocal(0X7412, 0X76DA, "[bp-0X2]", "webr_i");
	MakeLocal(0X7412, 0X76DA, "[bp+0X4]", "webr_entry");
	MakeLocal(0X7412, 0X76DA, "[bp+0X6]", "webr_disk");
	MakeFunction    (0X76DA,0X7710);
	SetFunctionFlags(0X76DA,0x10);
	MakeFrame(0X76DA, 0X2, 2, 0);
	MakeLocal(0X76DA, 0X7710, "[bp-0X2]", "message_flag");
	MakeNameEx(0X770B, "preloadmsg_1", SN_LOCAL);
	MakeFunction    (0X7710,0X7742);
	SetFunctionFlags(0X7710,0x10);
	MakeFrame(0X7710, 0, 2, 0);
	MakeLocal(0X7710, 0X7742, "[bp+0X4]", "msgnum");
	MakeLocal(0X7710, 0X7742, "[bp+0X6]", "msghan");
	MakeLocal(0X7710, 0X7742, "[bp+0X8]", "msgparms");
	MakeLocal(0X7710, 0X7742, "[bp+0XA]", "msgsub");
	MakeLocal(0X7710, 0X7742, "[bp+0XC]", "msginput");
	MakeLocal(0X7710, 0X7742, "[bp+0XE]", "msgclass");
	MakeFunction    (0X7742,0X77CC);
	SetFunctionFlags(0X7742,0x10);
	MakeFrame(0X7742, 0X6, 2, 0);
	MakeLocal(0X7742, 0X77CC, "[bp-0X6]", "_msg_buf");
	MakeLocal(0X7742, 0X77CC, "[bp-0X2]", "message_flag");
	MakeFunction    (0X77CC,0X7811);
	SetFunctionFlags(0X77CC,0x10);
	MakeFrame(0X77CC, 0X4, 2, 0);
	MakeLocal(0X77CC, 0X7811, "[bp-0X4]", "_msg_o_");
	MakeLocal(0X77CC, 0X7811, "[bp-0X2]", "_msg_s_");
	MakeLocal(0X77CC, 0X7811, "[bp+0X4]", "msg_num");
	MakeNameEx(0X7801, "findmsg_1", SN_LOCAL);
	MakeNameEx(0X7809, "findmsg_2", SN_LOCAL);
	MakeFunction    (0X7812,0X78FA);
	SetFunctionFlags(0X7812,0x10);
	MakeFrame(0X7812, 0X8A, 2, 0);
	MakeLocal(0X7812, 0X78FA, "[bp-0X8A]", "cmd_line_ptr");
	MakeLocal(0X7812, 0X78FA, "[bp-0X86]", "parse_good");
	MakeLocal(0X7812, 0X78FA, "[bp-0X84]", "_i_");
	MakeLocal(0X7812, 0X78FA, "[bp-0X82]", "finished");
	MakeLocal(0X7812, 0X78FA, "[bp-0X80]", "cmd_line");
	MakeNameEx(0X7848, "pcmdl_1", SN_LOCAL);
	MakeNameEx(0X785A, "pcmdl_2", SN_LOCAL);
	MakeNameEx(0X789C, "pcmdl_3", SN_LOCAL);
	MakeNameEx(0X78C0, "pcmdl_4", SN_LOCAL);
	MakeNameEx(0X78CD, "pcmdl_5", SN_LOCAL);
	MakeNameEx(0X78E7, "pcmdl_6", SN_LOCAL);
	MakeNameEx(0X78EC, "pcmdl_7", SN_LOCAL);
	MakeFunction    (0X78FA,0X7BAF);
	SetFunctionFlags(0X78FA,0);
	MakeFunction    (0X7BB0,0X7BBE);
	SetFunctionFlags(0X7BB0,0);
	MakeFunction    (0X7BBE,0X7C97);
	SetFunctionFlags(0X7BBE,0);
	MakeNameEx(0X7BD1, "psw1", SN_LOCAL);
	MakeNameEx(0X7BE7, "psw2", SN_LOCAL);
	MakeNameEx(0X7BFA, "psw3", SN_LOCAL);
	MakeNameEx(0X7C0D, "psw4", SN_LOCAL);
	MakeNameEx(0X7C23, "psw5", SN_LOCAL);
	MakeNameEx(0X7C30, "psw6", SN_LOCAL);
	MakeNameEx(0X7C3D, "psw7", SN_LOCAL);
	MakeNameEx(0X7C48, "psw8", SN_LOCAL);
	MakeNameEx(0X7C55, "psw9", SN_LOCAL);
	MakeNameEx(0X7C62, "psw10", SN_LOCAL);
	MakeNameEx(0X7C6F, "psw11", SN_LOCAL);
	MakeNameEx(0X7C7C, "psw12", SN_LOCAL);
	MakeNameEx(0X7C89, "psw13", SN_LOCAL);
	MakeNameEx(0X7C96, "psw14", SN_LOCAL);
	MakeFunction    (0X7C98,0X7D0F);
	SetFunctionFlags(0X7C98,0x10);
	MakeFrame(0X7C98, 0X4, 2, 0);
	MakeLocal(0X7C98, 0X7D0F, "[bp-0X4]", "_Cmd_Ptr");
	MakeLocal(0X7C98, 0X7D0F, "[bp+0X4]", "Msg_Num");
	MakeLocal(0X7C98, 0X7D0F, "[bp+0X6]", "Handle");
	MakeLocal(0X7C98, 0X7D0F, "[bp+0X8]", "Message_Type");
	MakeFunction    (0X7D10,0X7D59);
	SetFunctionFlags(0X7D10,0x10);
	MakeFrame(0X7D10, 0X2, 2, 0);
	MakeLocal(0X7D10, 0X7D59, "[bp-0X2]", "iMsgNbr");
	MakeNameEx(0X7D19, "displaynextopsrow", SN_LOCAL);
	MakeFunction    (0X7D5A,0X7E64);
	SetFunctionFlags(0X7D5A,0x10);
	MakeFrame(0X7D5A, 0X1A, 2, 0);
	MakeLocal(0X7D5A, 0X7E64, "[bp-0X1A]", "mtc_bytes_w3");
	MakeLocal(0X7D5A, 0X7E64, "[bp-0X18]", "mtc_bytes_w4");
	MakeLocal(0X7D5A, 0X7E64, "[bp-0X16]", "mt_bytes_w1");
	MakeLocal(0X7D5A, 0X7E64, "[bp-0X14]", "mt_bytes_w2");
	MakeLocal(0X7D5A, 0X7E64, "[bp-0X12]", "mtc_secsheads_lw");
	MakeLocal(0X7D5A, 0X7E64, "[bp-0X10]", "mtc_secsheads_hw");
	MakeLocal(0X7D5A, 0X7E64, "[bp-0XE]", "mtc_num_tracks_lw");
	MakeLocal(0X7D5A, 0X7E64, "[bp-0XC]", "mtc_num_tracks_hw");
	MakeLocal(0X7D5A, 0X7E64, "[bp-0XA]", "mtc_num_sectors_lw");
	MakeLocal(0X7D5A, 0X7E64, "[bp-0X8]", "mtc_num_sectors_hw");
	MakeLocal(0X7D5A, 0X7E64, "[bp-0X6]", "mtc_sectors_lw");
	MakeLocal(0X7D5A, 0X7E64, "[bp-0X4]", "mtc_sectors_hw");
	MakeLocal(0X7D5A, 0X7E64, "[bp-0X2]", "mtc_cylinders_out");
	MakeLocal(0X7D5A, 0X7E64, "[bp+0X4]", "mtc_mbytes_in_lw");
	MakeLocal(0X7D5A, 0X7E64, "[bp+0X6]", "mtc_mbytes_in_hw");
	MakeLocal(0X7D5A, 0X7E64, "[bp+0X8]", "mtc_which_disk");
	MakeNameEx(0X7DA0, "mbtocyl_1", SN_LOCAL);
	MakeNameEx(0X7DF6, "mbtocyl_2", SN_LOCAL);
	MakeNameEx(0X7E31, "mbtocyl_3", SN_LOCAL);
	MakeNameEx(0X7E5E, "mbtocyl_4", SN_LOCAL);
	MakeFunction    (0X7E64,0X7E91);
	SetFunctionFlags(0X7E64,0x10);
	MakeFrame(0X7E64, 0XC, 2, 0);
	MakeLocal(0X7E64, 0X7E91, "[bp+0X4]", "cyltmb_cylinders");
	MakeLocal(0X7E64, 0X7E91, "[bp+0X6]", "cyltmb_drv");
	MakeFunction    (0X7E92,0X7EBC);
	SetFunctionFlags(0X7E92,0x10);
	MakeFrame(0X7E92, 0X8, 2, 0);
	MakeLocal(0X7E92, 0X7EBC, "[bp+0X4]", "stmb_secs_lw");
	MakeLocal(0X7E92, 0X7EBC, "[bp+0X6]", "stmb_secs_hw");
	MakeLocal(0X7E92, 0X7EBC, "[bp+0X8]", "stmb_drive");
	MakeFunction    (0X7EBC,0X7F12);
	SetFunctionFlags(0X7EBC,0x10);
	MakeFrame(0X7EBC, 0X6, 2, 0);
	MakeLocal(0X7EBC, 0X7F12, "[bp-0X2]", "percentage_out");
	MakeLocal(0X7EBC, 0X7F12, "[bp+0X4]", "cylinders_in");
	MakeLocal(0X7EBC, 0X7F12, "[bp+0X6]", "total_cylinders");
	MakeNameEx(0X7EC6, "ctpc_1", SN_LOCAL);
	MakeNameEx(0X7ECD, "ctpc_2", SN_LOCAL);
	MakeNameEx(0X7EE6, "ctpc_3", SN_LOCAL);
	MakeNameEx(0X7F02, "ctpc_4", SN_LOCAL);
	MakeNameEx(0X7F0D, "ctpc_5", SN_LOCAL);
	MakeFunction    (0X7F12,0X7F5D);
	SetFunctionFlags(0X7F12,0x10);
	MakeFrame(0X7F12, 0X6, 2, 0);
	MakeLocal(0X7F12, 0X7F5D, "[bp-0X2]", "percent");
	MakeLocal(0X7F12, 0X7F5D, "[bp+0X4]", "partmbytes_lw");
	MakeLocal(0X7F12, 0X7F5D, "[bp+0X6]", "partmbytes_hw");
	MakeLocal(0X7F12, 0X7F5D, "[bp+0X8]", "totalmbytes_lw");
	MakeLocal(0X7F12, 0X7F5D, "[bp+0XA]", "totalmbytes_hw");
	MakeNameEx(0X7F53, "mtp_0", SN_LOCAL);
	MakeNameEx(0X7F58, "mtp_1", SN_LOCAL);
	MakeFunction    (0X7F5E,0X7F96);
	SetFunctionFlags(0X7F5E,0x10);
	MakeFrame(0X7F5E, 0X2, 2, 0);
	MakeLocal(0X7F5E, 0X7F96, "[bp-0X2]", "ptc_cylinders_out");
	MakeLocal(0X7F5E, 0X7F96, "[bp+0X4]", "ptc_percent_in");
	MakeLocal(0X7F5E, 0X7F96, "[bp+0X6]", "ptc_total_cylinders");
	MakeNameEx(0X7F8F, "pctocyl_1", SN_LOCAL);
	MakeFunction    (0X7F96,0X7FB6);
	SetFunctionFlags(0X7F96,0x10);
	MakeFrame(0X7F96, 0X2, 2, 0);
	MakeLocal(0X7F96, 0X7FB6, "[bp+0X4]", "upcase_input");
	MakeFunction    (0X7FB6,0X7FEE);
	SetFunctionFlags(0X7FB6,0x10);
	MakeFrame(0X7FB6, 0X2, 2, 0);
	MakeLocal(0X7FB6, 0X7FEE, "[bp-0X2]", "yn_input");
	MakeLocal(0X7FB6, 0X7FEE, "[bp+0X4]", "yn_input_value");
	MakeNameEx(0X7FE3, "cyni_1", SN_LOCAL);
	MakeNameEx(0X7FE9, "cyni_2", SN_LOCAL);
	MakeFunction    (0X7FEE,0X803F);
	SetFunctionFlags(0X7FEE,0x10);
	MakeFrame(0X7FEE, 0X2, 2, 0);
	MakeLocal(0X7FEE, 0X803F, "[bp-0X2]", "_output_");
	MakeLocal(0X7FEE, 0X803F, "[bp+0X4]", "_inputdrive_");
	MakeNameEx(0X8036, "gfsv_1", SN_LOCAL);
	MakeNameEx(0X803A, "gvsv_2", SN_LOCAL);
	MakeFunction    (0X8040,0X80F4);
	SetFunctionFlags(0X8040,0x10);
	MakeFrame(0X8040, 0X46, 2, 0);
	MakeLocal(0X8040, 0X80F4, "[bp-0X46]", "_jj_");
	MakeLocal(0X8040, 0X80F4, "[bp-0X44]", "_ii_");
	MakeLocal(0X8040, 0X80F4, "[bp-0X42]", "find_first_buffer");
	MakeLocal(0X8040, 0X80F4, "[bp-0X24]", "ffb_30");
	MakeLocal(0X8040, 0X80F4, "[bp-0X10]", "first_string");
	MakeLocal(0X8040, 0X80F4, "[bp+0X4]", "_input_drive_");
	MakeLocal(0X8040, 0X80F4, "[bp+0X6]", "vol_label_addr");
	MakeNameEx(0X804A, "gvs_1", SN_LOCAL);
	MakeNameEx(0X80C4, "gvs_2", SN_LOCAL);
	MakeNameEx(0X80C9, "gvs_3", SN_LOCAL);
	MakeNameEx(0X80CC, "gvs_4", SN_LOCAL);
	MakeNameEx(0X80F1, "gvs_5", SN_LOCAL);
	MakeFunction    (0X80F4,0X814F);
	SetFunctionFlags(0X80F4,0x10);
	MakeFrame(0X80F4, 0X2, 2, 0);
	MakeLocal(0X80F4, 0X814F, "[bp-0X2]", "formatted");
	MakeLocal(0X80F4, 0X814F, "[bp+0X4]", "input_drive");
	MakeNameEx(0X8146, "chkf_1", SN_LOCAL);
	MakeNameEx(0X814A, "chkf_2", SN_LOCAL);
	MakeFunction    (0X8150,0X8194);
	SetFunctionFlags(0X8150,0x10);
	MakeFrame(0X8150, 0, 2, 0);
	MakeLocal(0X8150, 0X8194, "[bp+0X4]", "&inregs");
	MakeLocal(0X8150, 0X8194, "[bp+0X6]", "&outregs");
	MakeFunction    (0X8197,0X81AE);
	SetFunctionFlags(0X8197,0x10);
	MakeFrame(0X8197, 0, 2, 0);
	MakeFunction    (0X81AE,0X81B4);
	SetFunctionFlags(0X81AE,0);
	MakeFunction    (0X81B4,0X81BA);
	SetFunctionFlags(0X81B4,0);
	MakeFunction    (0X81BA,0X81C0);
	SetFunctionFlags(0X81BA,0);
	MakeFunction    (0X82BC,0X838E);
	SetFunctionFlags(0X82BC,0);
	MakeFunction    (0X838E,0X8395);
	SetFunctionFlags(0X838E,0x11);
	MakeFrame(0X838E, 0, 2, 0);
	MakeFunction    (0X8395,0X841C);
	SetFunctionFlags(0X8395,0x11);
	MakeFrame(0X8395, 0, 2, 0);
	MakeFunction    (0X841C,0X8435);
	SetFunctionFlags(0X841C,0);
	MakeFunction    (0X8435,0X8444);
	SetFunctionFlags(0X8435,0);
	MakeFunction    (0X8444,0X8457);
	SetFunctionFlags(0X8444,0);
	MakeFunction    (0X8458,0X8478);
	SetFunctionFlags(0X8458,0x10);
	MakeFrame(0X8458, 0, 2, 0);
	MakeFunction    (0X8478,0X847E);
	SetFunctionFlags(0X8478,0);
	MakeFunction    (0X847E,0X8495);
	SetFunctionFlags(0X847E,0);
	MakeFunction    (0X8496,0X84B8);
	SetFunctionFlags(0X8496,0);
	MakeFrame(0X8496, 0, 2, 0);
	MakeFunction    (0X84B8,0X8642);
	SetFunctionFlags(0X84B8,0);
	MakeFunction    (0X8642,0X86BF);
	SetFunctionFlags(0X8642,0x10);
	MakeFrame(0X8642, 0, 2, 0);
	MakeFunction    (0X86C0,0X86EB);
	SetFunctionFlags(0X86C0,0x10);
	MakeFrame(0X86C0, 0, 2, 0X2);
	MakeFunction    (0X86EB,0X8720);
	SetFunctionFlags(0X86EB,0x10);
	MakeFrame(0X86EB, 0, 2, 0X2);
	MakeFunction    (0X8720,0X8743);
	SetFunctionFlags(0X8720,0);
	MakeFrame(0X8720, 0, 6, 0);
	MakeFunction    (0X8766,0X876C);
	SetFunctionFlags(0X8766,0);
	MakeFunction    (0X876C,0X8799);
	SetFunctionFlags(0X876C,0);
	MakeFunction    (0X879C,0X8848);
	SetFunctionFlags(0X879C,0x10);
	MakeFrame(0X879C, 0XE, 2, 0);
	MakeFunction    (0X885A,0X893A);
	SetFunctionFlags(0X885A,0x10);
	MakeFrame(0X885A, 0, 2, 0);
	MakeFunction    (0X893A,0X8964);
	SetFunctionFlags(0X893A,0x10);
	MakeFrame(0X893A, 0, 2, 0);
	MakeFunction    (0X8964,0X89A5);
	SetFunctionFlags(0X8964,0x10);
	MakeFrame(0X8964, 0, 2, 0);
	MakeFunction    (0X89A6,0X89F2);
	SetFunctionFlags(0X89A6,0x10);
	MakeFrame(0X89A6, 0, 2, 0);
	MakeFunction    (0X89F2,0X8A63);
	SetFunctionFlags(0X89F2,0x10);
	MakeFrame(0X89F2, 0X2, 2, 0);
	MakeFunction    (0X8A64,0X8A6A);
	SetFunctionFlags(0X8A64,0);
	MakeFunction    (0X8A6A,0X8ACB);
	SetFunctionFlags(0X8A6A,0x10);
	MakeFrame(0X8A6A, 0X2, 2, 0X2);
	MakeFunction    (0X8ADC,0X8EE6);
	SetFunctionFlags(0X8ADC,0x10);
	MakeFrame(0X8ADC, 0X214, 2, 0);
	MakeFunction    (0X8EE6,0X8EEE);
	SetFunctionFlags(0X8EE6,0);
	MakeFunction    (0X8EEE,0X8EFA);
	SetFunctionFlags(0X8EEE,0);
	MakeFunction    (0X8EFA,0X8F17);
	SetFunctionFlags(0X8EFA,0);
	MakeFunction    (0X8F17,0X8F40);
	SetFunctionFlags(0X8F17,0);
	MakeFunction    (0X8F40,0X8F5E);
	SetFunctionFlags(0X8F40,0);
	MakeFunction    (0X8F5E,0X8F7A);
	SetFunctionFlags(0X8F5E,0);
	MakeFunction    (0X8F7A,0X8FAB);
	SetFunctionFlags(0X8F7A,0);
	MakeFunction    (0X8FB2,0X8FD2);
	SetFunctionFlags(0X8FB2,0x10);
	MakeFrame(0X8FB2, 0, 2, 0);
	MakeFunction    (0X8FD2,0X9053);
	SetFunctionFlags(0X8FD2,0x10);
	MakeFrame(0X8FD2, 0X4, 2, 0);
	MakeFunction    (0X9054,0X9105);
	SetFunctionFlags(0X9054,0x10);
	MakeFrame(0X9054, 0X8, 2, 0);
	MakeFunction    (0X9105,0X915D);
	SetFunctionFlags(0X9105,0);
	MakeFrame(0X9105, 0, 6, 0);
	MakeFunction    (0X9192,0X91A4);
	SetFunctionFlags(0X9192,0);
	MakeFunction    (0X91A4,0X91B7);
	SetFunctionFlags(0X91A4,0x10);
	MakeFrame(0X91A4, 0, 2, 0);
	MakeFunction    (0X91B7,0X924C);
	SetFunctionFlags(0X91B7,0x10);
	MakeFrame(0X91B7, 0, 2, 0);
	MakeFunction    (0X924C,0X9280);
	SetFunctionFlags(0X924C,0);
	MakeFrame(0X924C, 0, 4, 0);
	MakeFunction    (0X9280,0X92B6);
	SetFunctionFlags(0X9280,0);
	MakeFunction    (0X92B6,0X9332);
	SetFunctionFlags(0X92B6,0);
	MakeFunction    (0X9332,0X93BE);
	SetFunctionFlags(0X9332,0);
	MakeFrame(0X9332, 0, 4, 0);
	MakeFunction    (0X93BE,0X940F);
	SetFunctionFlags(0X93BE,0);
	MakeFunction    (0X940F,0X942F);
	SetFunctionFlags(0X940F,0);
	MakeFrame(0X940F, 0, 2, 0);
	MakeFunction    (0X9430,0X9474);
	SetFunctionFlags(0X9430,0);
	MakeFunction    (0X9474,0X94B3);
	SetFunctionFlags(0X9474,0x10);
	MakeFrame(0X9474, 0, 2, 0);
	MakeLocal(0X9474, 0X94B3, "[bp+0X4]", "first_str");
	MakeLocal(0X9474, 0X94B3, "[bp+0X6]", "second_str");
	MakeNameEx(0X94A5, "strcat_0", SN_LOCAL);
	MakeFunction    (0X94B4,0X94E6);
	SetFunctionFlags(0X94B4,0x10);
	MakeFrame(0X94B4, 0, 2, 0);
	MakeLocal(0X94B4, 0X94E6, "[bp+0X4]", "destination");
	MakeLocal(0X94B4, 0X94E6, "[bp+0X6]", "source");
	MakeNameEx(0X94D8, "strcpy_0", SN_LOCAL);
	MakeFunction    (0X94E6,0X9511);
	SetFunctionFlags(0X94E6,0x10);
	MakeFrame(0X94E6, 0, 2, 0);
	MakeFunction    (0X9512,0X952D);
	SetFunctionFlags(0X9512,0x10);
	MakeFrame(0X9512, 0, 2, 0);
	MakeFunction    (0X952E,0X9556);
	SetFunctionFlags(0X952E,0x10);
	MakeFrame(0X952E, 0, 2, 0);
	MakeFunction    (0X9556,0X9571);
	SetFunctionFlags(0X9556,0x10);
	MakeFrame(0X9556, 0, 2, 0);
	MakeFunction    (0X9572,0X9595);
	SetFunctionFlags(0X9572,0);
	MakeFrame(0X9572, 0, 4, 0);
	MakeFunction    (0X9596,0X95E5);
	SetFunctionFlags(0X9596,0x10);
	MakeFrame(0X9596, 0X2, 2, 0);
	MakeFunction    (0X95E6,0X963B);
	SetFunctionFlags(0X95E6,0x10);
	MakeFrame(0X95E6, 0, 2, 0);
	MakeFunction    (0X963C,0X9665);
	SetFunctionFlags(0X963C,0x10);
	MakeFrame(0X963C, 0, 2, 0);
	MakeFunction    (0X9666,0X9693);
	SetFunctionFlags(0X9666,0x10);
	MakeFrame(0X9666, 0, 2, 0);
	MakeLocal(0X9666, 0X9693, "[bp+0X4]", "_ptr");
	MakeLocal(0X9666, 0X9693, "[bp+0X6]", "_value");
	MakeLocal(0X9666, 0X9693, "[bp+0X8]", "_num");
	MakeNameEx(0X9686, "memset_1", SN_LOCAL);
	MakeNameEx(0X968E, "memset_2", SN_LOCAL);
	MakeFunction    (0X96FA,0X9797);
	SetFunctionFlags(0X96FA,0x10);
	MakeFrame(0X96FA, 0X4, 2, 0);
	MakeFunction    (0X9797,0X97BE);
	SetFunctionFlags(0X9797,0x10);
	MakeFrame(0X9797, 0, 2, 0);
	MakeFunction    (0X985A,0X9867);
	SetFunctionFlags(0X985A,0x10);
	MakeFrame(0X985A, 0, 2, 0);
	MakeFunction    (0X9868,0X9875);
	SetFunctionFlags(0X9868,0x10);
	MakeFrame(0X9868, 0, 2, 0);
	MakeFunction    (0X9876,0X98A8);
	SetFunctionFlags(0X9876,0x10);
	MakeFrame(0X9876, 0, 2, 0X8);
	MakeLocal(0X9876, 0X98A8, "[bp+0X4]", "MULTIPLICAND_L");
	MakeLocal(0X9876, 0X98A8, "[bp+0X6]", "MULTIPLICAND_H");
	MakeLocal(0X9876, 0X98A8, "[bp+0X8]", "MULTIPLIER_L");
	MakeLocal(0X9876, 0X98A8, "[bp+0XA]", "MULTIPLIER_H");
	MakeNameEx(0X988F, "mul32_1", SN_LOCAL);
	MakeFunction    (0X98A8,0X98B3);
	SetFunctionFlags(0X98A8,0);
	MakeNameEx(0X98AC, "shr32_0", SN_LOCAL);
	MakeNameEx(0X98B2, "shr32_1", SN_LOCAL);
	MakeFunction    (0X98B4,0X98D3);
	SetFunctionFlags(0X98B4,0x10);
	MakeFrame(0X98B4, 0, 2, 0X6);
	MakeLocal(0X98B4, 0X98D3, "[bp+0X4]", "_div32_dividend_ptr");
	MakeLocal(0X98B4, 0X98D3, "[bp+0X6]", "_div32_divisor_lw");
	MakeLocal(0X98B4, 0X98D3, "[bp+0X8]", "_div32_divisor_hw");
	MakeFunction    (0X98D4,0X98F3);
	SetFunctionFlags(0X98D4,0x10);
	MakeFrame(0X98D4, 0, 2, 0X6);
	MakeFunction    (0X98F4,0X9953);
	SetFunctionFlags(0X98F4,0x10);
	MakeFrame(0X98F4, 0, 2, 0X8);
	MakeLocal(0X98F4, 0X9953, "[bp+0X4]", "dividend_lw");
	MakeLocal(0X98F4, 0X9953, "[bp+0X6]", "dividend_hw");
	MakeLocal(0X98F4, 0X9953, "[bp+0X8]", "divisor_lw");
	MakeLocal(0X98F4, 0X9953, "[bp+0XA]", "divisor_hw");
	MakeNameEx(0X9915, "div32_1", SN_LOCAL);
	MakeNameEx(0X9920, "div32_2", SN_LOCAL);
	MakeNameEx(0X9949, "div32_3", SN_LOCAL);
	MakeNameEx(0X994A, "div32_4", SN_LOCAL);
	MakeNameEx(0X994D, "div32_5", SN_LOCAL);
	MakeFunction    (0X9954,0X99BE);
	SetFunctionFlags(0X9954,0x10);
	MakeFrame(0X9954, 0, 2, 0X8);
	MakeLocal(0X9954, 0X99BE, "[bp+0X4]", "_dividend_lw_");
	MakeLocal(0X9954, 0X99BE, "[bp+0X6]", "_dividend_hw_");
	MakeLocal(0X9954, 0X99BE, "[bp+0X8]", "_divisor_lw_");
	MakeLocal(0X9954, 0X99BE, "[bp+0XA]", "_divisor_hw_");
	MakeNameEx(0X9974, "_mod32_0", SN_LOCAL);
	MakeNameEx(0X997F, "_mod32_1", SN_LOCAL);
	MakeNameEx(0X99A6, "_mod32_2", SN_LOCAL);
	MakeNameEx(0X99AC, "_mod32_3", SN_LOCAL);
	MakeNameEx(0X99B9, "_mod32_4", SN_LOCAL);
	MakeFunction    (0X99BE,0X99C9);
	SetFunctionFlags(0X99BE,0);
	MakeNameEx(0X99C2, "_shr32_0", SN_LOCAL);
	MakeNameEx(0X99C8, "_shr32_1", SN_LOCAL);
	MakeFunction    (0X99CA,0X99E3);
	SetFunctionFlags(0X99CA,0x12);
	MakeFrame(0X99CA, 0, 2, 0);
	MakeLocal(0X99CA, 0X99E3, "[bp+0X6]", "_err_msg_addr_");
	MakeNameEx(0X99DE, "cml_1", SN_LOCAL);
	MakeFunction    (0X99E4,0X9A20);
	SetFunctionFlags(0X99E4,0x12);
	MakeFrame(0X99E4, 0, 2, 0);
	MakeFunction    (0X9A20,0X9A41);
	SetFunctionFlags(0X9A20,0x10);
	MakeFrame(0X9A20, 0, 2, 0);
	MakeFunction    (0X9A41,0X9A7B);
	SetFunctionFlags(0X9A41,0x10);
	MakeFrame(0X9A41, 0, 2, 0);
	MakeFunction    (0X9A7C,0X9AFB);
	SetFunctionFlags(0X9A7C,0x10);
	MakeFrame(0X9A7C, 0X12, 2, 0);
	MakeLocal(0X9A7C, 0X9AFB, "[bp-0XE]", "call_int");
	MakeLocal(0X9A7C, 0X9AFB, "[bp-0XA]", "int_opcode");
	MakeLocal(0X9A7C, 0X9AFB, "[bp+0X4]", "int86_int");
	MakeLocal(0X9A7C, 0X9AFB, "[bp+0X6]", "_in_regs_");
	MakeLocal(0X9A7C, 0X9AFB, "[bp+0X8]", "_out_regs_");
	MakeFunction    (0X9AFC,0X9B91);
	SetFunctionFlags(0X9AFC,0x10);
	MakeFrame(0X9AFC, 0X16, 2, 0);
	MakeFunction    (0X9B92,0X9BD9);
	SetFunctionFlags(0X9B92,0x10);
	MakeFrame(0X9B92, 0, 2, 0);
	MakeFunction    (0X9BDA,0X9C37);
	SetFunctionFlags(0X9BDA,0x10);
	MakeFrame(0X9BDA, 0, 2, 0);
	MakeFunction    (0X9C38,0X9C4D);
	SetFunctionFlags(0X9C38,0x10);
	MakeFrame(0X9C38, 0, 2, 0);
	MakeFunction    (0XA460,0XA4BC);
	SetFunctionFlags(0XA460,0x12);
	MakeFrame(0XA460, 0, 2, 0X4);
	MakeFunction    (0XA4BC,0XA4E8);
	SetFunctionFlags(0XA4BC,0x12);
	MakeFrame(0XA4BC, 0, 2, 0X4);
	MakeLocal(0XA4BC, 0XA4E8, "[bp+0X6]", "exit_code");
	MakeLocal(0XA4BC, 0XA4E8, "[bp+0X8]", "exit_opt");
	MakeNameEx(0XA4D9, "dosexit_1", SN_LOCAL);
	MakeFunction    (0XA4E8,0XA534);
	SetFunctionFlags(0XA4E8,0x12);
	MakeFrame(0XA4E8, 0, 2, 0X6);
	MakeLocal(0XA4E8, 0XA534, "[bp+0X8]", "cpos_column");
	MakeLocal(0XA4E8, 0XA534, "[bp+0XA]", "cpos_row");
	MakeNameEx(0XA522, "viosetcpos_0", SN_LOCAL);
	MakeNameEx(0XA525, "viosetcpos_1", SN_LOCAL);
	MakeFunction    (0XA534,0XA59F);
	SetFunctionFlags(0XA534,0x12);
	MakeFrame(0XA534, 0, 2, 0X10);
	MakeLocal(0XA534, 0XA59F, "[bp+0X8]", "Attrib");
	MakeLocal(0XA534, 0XA59F, "[bp+0XC]", "Lines");
	MakeLocal(0XA534, 0XA59F, "[bp+0XE]", "EndCol");
	MakeLocal(0XA534, 0XA59F, "[bp+0X10]", "EndRow");
	MakeLocal(0XA534, 0XA59F, "[bp+0X12]", "StartCol");
	MakeLocal(0XA534, 0XA59F, "[bp+0X14]", "StartRow");
	MakeNameEx(0XA54E, "vioscrollup_0", SN_LOCAL);
	MakeNameEx(0XA58D, "vioscrollup_1", SN_LOCAL);
	MakeNameEx(0XA590, "vioscrollup_2", SN_LOCAL);
	MakeFunction    (0XA59F,0XA642);
	SetFunctionFlags(0XA59F,0x4012);
	MakeFrame(0XA59F, 0X2, 2, 0X10);
	MakeLocal(0XA59F, 0XA642, "[bp+0X8]", "_atr_");
	MakeLocal(0XA59F, 0XA642, "[bp+0XC]", "_col_");
	MakeLocal(0XA59F, 0XA642, "[bp+0XE]", "_row_");
	MakeLocal(0XA59F, 0XA642, "[bp+0X10]", "_cnt_");
	MakeLocal(0XA59F, 0XA642, "[bp+0X12]", "_str_");
	MakeNameEx(0XA5E1, "viowchratt_0", SN_LOCAL);
	MakeNameEx(0XA613, "viowchratt_1", SN_LOCAL);
	MakeNameEx(0XA630, "viowchratt_2", SN_LOCAL);
	MakeNameEx(0XA633, "viowchratt_3", SN_LOCAL);
	MakeFunction    (0XBB5F,0XBB91);
	SetFunctionFlags(0XBB5F,0);
	MakeFrame(0XBB5F, 0, 2, 0);
	MakeFunction    (0XBB91,0XBB93);
	SetFunctionFlags(0XBB91,0);
	MakeFunction    (0XBB93,0XBBB8);
	SetFunctionFlags(0XBB93,0);
	MakeFrame(0XBB93, 0, 4, 0);
	MakeFunction    (0XBBB8,0XBBC4);
	SetFunctionFlags(0XBBB8,0);
	MakeFunction    (0XBBC4,0XBC27);
	SetFunctionFlags(0XBBC4,0);
	MakeFunction    (0XBC27,0XBCAC);
	SetFunctionFlags(0XBC27,0);
	MakeFrame(0XBC27, 0, 2, 0);
	MakeFunction    (0XBCAC,0XBD43);
	SetFunctionFlags(0XBCAC,0);
	MakeFunction    (0XBD43,0XBD69);
	SetFunctionFlags(0XBD43,0);
	MakeFrame(0XBD43, 0, 4, 0);
	MakeFunction    (0XBD69,0XBD88);
	SetFunctionFlags(0XBD69,0);
	MakeFrame(0XBD69, 0, 4, 0);
	MakeFunction    (0XBD88,0XBDCD);
	SetFunctionFlags(0XBD88,0);
	MakeFunction    (0XBDCD,0XBDF1);
	SetFunctionFlags(0XBDCD,0);
	MakeFrame(0XBDCD, 0, 2, 0);
	MakeFunction    (0XBDF1,0XBF0E);
	SetFunctionFlags(0XBDF1,0);
	MakeFrame(0XBDF1, 0, 8, 0);
	MakeFunction    (0XBF0E,0XBF20);
	SetFunctionFlags(0XBF0E,0);
	MakeFunction    (0XBF20,0XBF2E);
	SetFunctionFlags(0XBF20,0);
	MakeFunction    (0XBF2E,0XBF54);
	SetFunctionFlags(0XBF2E,0);
	MakeFrame(0XBF2E, 0, 8, 0);
	MakeFunction    (0XBF54,0XBFF7);
	SetFunctionFlags(0XBF54,0);
	MakeFrame(0XBF54, 0, 8, 0);
	MakeFunction    (0XBFF7,0XC0B3);
	SetFunctionFlags(0XBFF7,0);
	MakeFrame(0XBFF7, 0, 12, 0);
	MakeFunction    (0XC0B3,0XC0CF);
	SetFunctionFlags(0XC0B3,0);
	MakeFunction    (0XC0CF,0XC125);
	SetFunctionFlags(0XC0CF,0);
	MakeFrame(0XC0CF, 0, 4, 0);
	MakeFunction    (0XC125,0XC14B);
	SetFunctionFlags(0XC125,0);
	MakeFunction    (0XC14B,0XC181);
	SetFunctionFlags(0XC14B,0);
	MakeFrame(0XC14B, 0, 4, 0);
	MakeFunction    (0XC181,0XC1E2);
	SetFunctionFlags(0XC181,0);
	MakeFrame(0XC181, 0, 4, 0);
	MakeFunction    (0XC1E2,0XC210);
	SetFunctionFlags(0XC1E2,0);
	MakeFunction    (0XC210,0XC266);
	SetFunctionFlags(0XC210,0);
	MakeFrame(0XC210, 0, 6, 0);
	MakeFunction    (0XC266,0XC273);
	SetFunctionFlags(0XC266,0x2);
	MakeFrame(0XC266, 0, 6, 0);
	MakeFunction    (0X1066F,0X1071B);
	SetFunctionFlags(0X1066F,0);
	MakeFrame(0X1066F, 0, 2, 0);
	MakeNameEx(0X10691, "setmsg_1", SN_LOCAL);
	MakeNameEx(0X106B3, "setmsg_2", SN_LOCAL);
	MakeNameEx(0X106F2, "setmsg_3", SN_LOCAL);
	MakeNameEx(0X106F7, "setmsg_4", SN_LOCAL);
	MakeNameEx(0X106FF, "setmsg_5", SN_LOCAL);
	MakeNameEx(0X10711, "setmsg_6", SN_LOCAL);
	MakeNameEx(0X10716, "setmsg_7", SN_LOCAL);
	MakeNameEx(0X10719, "setmsg_8", SN_LOCAL);
	MakeFunction    (0X1071B,0X10798);
	SetFunctionFlags(0X1071B,0);
	MakeFrame(0X1071B, 0, 4, 0);
	MakeFunction    (0X10798,0X107DE);
	SetFunctionFlags(0X10798,0);
	MakeFunction    (0X107DE,0X10844);
	SetFunctionFlags(0X107DE,0);
	MakeFrame(0X107DE, 0, 4, 0);
	MakeNameEx(0X107E9, "NextVar", SN_LOCAL);
	MakeNameEx(0X107F1, "get_end_of_langword", SN_LOCAL);
	MakeNameEx(0X107FD, "LangVarFound", SN_LOCAL);
	MakeNameEx(0X10813, "EndOfWord", SN_LOCAL);
	MakeNameEx(0X1081D, "NaxtVar2", SN_LOCAL);
	MakeNameEx(0X10825, "get_end_of_langword2", SN_LOCAL);
	MakeNameEx(0X10831, "LangSpecVarFound", SN_LOCAL);
	MakeNameEx(0X10842, "cnklangset_ok", SN_LOCAL);
	MakeFunction    (0X10844,0X1086B);
	SetFunctionFlags(0X10844,0);
	MakeNameEx(0X10854, "gdv_1", SN_LOCAL);
	MakeNameEx(0X1085F, "gdv_2", SN_LOCAL);
	MakeNameEx(0X1086A, "gdv_ok", SN_LOCAL);
	MakeFunction    (0X1086B,0X10882);
	SetFunctionFlags(0X1086B,0x2);
	MakeFrame(0X1086B, 0, 8, 0);
	MakeNameEx(0X1087D, "_$MIF31", SN_LOCAL);
	MakeFunction    (0X108C7,0X10904);
	SetFunctionFlags(0X108C7,0x2);
	MakeFrame(0X108C7, 0, 14, 0);
	MakeNameEx(0X108E2, "_$MIF94", SN_LOCAL);
	MakeNameEx(0X108E5, "_$MEN94", SN_LOCAL);
	MakeNameEx(0X108EE, "_$MIF98", SN_LOCAL);
	MakeNameEx(0X108F0, "_$MIF93", SN_LOCAL);
	MakeNameEx(0X108F5, "_$MEN93", SN_LOCAL);
	MakeNameEx(0X108FC, "_$MIF104", SN_LOCAL);
	MakeNameEx(0X10903, "_$MEN104", SN_LOCAL);
	MakeFunction    (0X10904,0X10940);
	SetFunctionFlags(0X10904,0);
	MakeFrame(0X10904, 0, 6, 0);
	MakeNameEx(0X10915, "_$MIF107", SN_LOCAL);
	MakeNameEx(0X10918, "_$MEN107", SN_LOCAL);
	MakeNameEx(0X10925, "_$MIF110", SN_LOCAL);
	MakeNameEx(0X10936, "_$MIF113", SN_LOCAL);
	MakeNameEx(0X1093C, "_$MEN110", SN_LOCAL);
	MakeNameEx(0X1093F, "_$MIF117", SN_LOCAL);
	MakeFunction    (0X10940,0X1096B);
	SetFunctionFlags(0X10940,0);
	MakeNameEx(0X10954, "_$MIF128", SN_LOCAL);
	MakeNameEx(0X10956, "_$MIF129", SN_LOCAL);
	MakeNameEx(0X10969, "_$MEN128", SN_LOCAL);
	MakeNameEx(0X1096A, "_$MIF127", SN_LOCAL);
	MakeFunction    (0X1096B,0X1098B);
	SetFunctionFlags(0X1096B,0);
	MakeFrame(0X1096B, 0, 4, 0);
	MakeNameEx(0X1097C, "_$MIF119", SN_LOCAL);
	MakeNameEx(0X10980, "_$MDO123", SN_LOCAL);
	MakeNameEx(0X10988, "_$MEN123", SN_LOCAL);
	MakeFunction    (0X1098B,0X109A2);
	SetFunctionFlags(0X1098B,0);
	MakeNameEx(0X109A1, "_$MIF134", SN_LOCAL);
	MakeFunction    (0X109A2,0X109F9);
	SetFunctionFlags(0X109A2,0);
	MakeFunction    (0X109F9,0X10AB5);
	SetFunctionFlags(0X109F9,0);
	MakeNameEx(0X109FD, "_$MDO165", SN_LOCAL);
	MakeNameEx(0X10A04, "_$MDO166", SN_LOCAL);
	MakeNameEx(0X10A06, "_$MDO167", SN_LOCAL);
	MakeNameEx(0X10A0F, "_$MDO168", SN_LOCAL);
	MakeNameEx(0X10A12, "_$MIF169", SN_LOCAL);
	MakeNameEx(0X10A16, "_$MEN167", SN_LOCAL);
	MakeNameEx(0X10A26, "_$MXL3", SN_LOCAL);
	MakeNameEx(0X10A2A, "_$MIF170", SN_LOCAL);
	MakeNameEx(0X10A9D, "_$MLL214", SN_LOCAL);
	MakeNameEx(0X10AAE, "_$MEN165", SN_LOCAL);
	MakeFunction    (0X10AB5,0X10AE2);
	SetFunctionFlags(0X10AB5,0);
	MakeNameEx(0X10AC3, "_$MDO215", SN_LOCAL);
	MakeNameEx(0X10AD1, "_$MIF216", SN_LOCAL);
	MakeFunction    (0X10AE2,0X10B9D);
	SetFunctionFlags(0X10AE2,0);
	MakeFunction    (0X10B9D,0X10BB9);
	SetFunctionFlags(0X10B9D,0);
	MakeFrame(0X10B9D, 0, 8, 0);
	MakeFunction    (0X10BB9,0X10BD6);
	SetFunctionFlags(0X10BB9,0);
	MakeFunction    (0X10BD6,0X10C57);
	SetFunctionFlags(0X10BD6,0);
	MakeFunction    (0X10C84,0X10D0A);
	SetFunctionFlags(0X10C84,0);
	MakeFrame(0X10C84, 0, 4, 0);
	MakeNameEx(0X10C98, "_$MDO36", SN_LOCAL);
	MakeNameEx(0X10CA2, "_$MIF37", SN_LOCAL);
	MakeNameEx(0X10CAA, "_$MIF39", SN_LOCAL);
	MakeNameEx(0X10CB7, "_$MIF41", SN_LOCAL);
	MakeNameEx(0X10CBD, "_$MIF40", SN_LOCAL);
	MakeNameEx(0X10CCE, "_$MEN37", SN_LOCAL);
	MakeNameEx(0X10CD3, "_$MEN36", SN_LOCAL);
	MakeNameEx(0X10CDF, "_$MIF57", SN_LOCAL);
	MakeNameEx(0X10CF4, "_$MIF46", SN_LOCAL);
	MakeNameEx(0X10CFC, "_$MIF51", SN_LOCAL);
	MakeNameEx(0X10D06, "_$MEN57", SN_LOCAL);
	MakeNameEx(0X10D07, "_$MIF56", SN_LOCAL);
	MakeFunction    (0X10D0A,0X10D3C);
	SetFunctionFlags(0X10D0A,0);
	MakeFrame(0X10D0A, 0, 12, 0);
	MakeNameEx(0X10D36, "_$MEN57", SN_LOCAL);
	MakeNameEx(0X10D39, "_$MEN60", SN_LOCAL);
	MakeFunction    (0X10D3C,0X10D91);
	SetFunctionFlags(0X10D3C,0);
	MakeNameEx(0X10D51, "_$MIF65", SN_LOCAL);
	MakeNameEx(0X10D58, "_$MIF64", SN_LOCAL);
	MakeNameEx(0X10D64, "_$MIF69", SN_LOCAL);
	MakeNameEx(0X10D68, "_$MEN69", SN_LOCAL);
	MakeNameEx(0X10D6C, "_$MEN64", SN_LOCAL);
	MakeNameEx(0X10D6F, "_$MDO76", SN_LOCAL);
	MakeNameEx(0X10D7E, "_$MIF87", SN_LOCAL);
	MakeNameEx(0X10D82, "_$MIF86", SN_LOCAL);
	MakeNameEx(0X10D88, "_$MIF91", SN_LOCAL);
	MakeNameEx(0X10D8E, "_$MEN76", SN_LOCAL);
	MakeFunction    (0X10D91,0X10DD5);
	SetFunctionFlags(0X10D91,0x12);
	MakeFrame(0X10D91, 0, 2, 0);
	MakeFunction    (0X10DD5,0X10E19);
	SetFunctionFlags(0X10DD5,0x12);
	MakeFrame(0X10DD5, 0, 2, 0);
	MakeFunction    (0X10E19,0X10E69);
	SetFunctionFlags(0X10E19,0x12);
	MakeFrame(0X10E19, 0, 2, 0);
	MakeLocal(0X10E19, 0X10E69, "[bp+0X8]", "_&inregs");
	MakeLocal(0X10E19, 0X10E69, "[bp+0XA]", "_&segregs");
	MakeLocal(0X10E19, 0X10E69, "[bp+0XC]", "_&outregs");
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	SetRegEx(0,"es",0XFFFFFFFF,3);
	SetRegEx(0,"ss",0XFFFFFFFF,3);
	SetRegEx(0,"ds",0XA65,3);
	SetRegEx(0,"fs",0XFFFFFFFF,3);
	SetRegEx(0,"gs",0XFFFFFFFF,3);
	SetRegEx(0X793,"ds",0XA65,3);
	SetRegEx(0X796,"ds",0XA65,3);
	SetRegEx(0X3607,"ds",0X40,3);
	SetRegEx(0X361D,"ds",0X40,3);
	SetRegEx(0X3646,"es",0XFFFFFFFF,3);
	SetRegEx(0X3703,"es",0XFFFFFFFF,3);
	SetRegEx(0X372E,"es",0XFFFFFFFF,3);
	SetRegEx(0X379A,"es",0XFFFFFFFF,3);
	SetRegEx(0X397C,"es",0XFFFFFFFF,3);
	SetRegEx(0X39A5,"es",0XFFFFFFFF,3);
	SetRegEx(0X39C7,"es",0XFFFFFFFF,3);
	SetRegEx(0X39FD,"es",0XFFFFFFFF,3);
	SetRegEx(0X3AA3,"es",0XFFFFFFFF,3);
	SetRegEx(0X3B09,"es",0XFFFFFFFF,3);
	SetRegEx(0X434F,"es",0XFFFFFFFF,3);
	SetRegEx(0X43A6,"es",0XFFFFFFFF,3);
	SetRegEx(0X43B0,"es",0XFFFFFFFF,3);
	SetRegEx(0X4442,"es",0XFFFFFFFF,3);
	SetRegEx(0X44CA,"es",0XFFFFFFFF,3);
	SetRegEx(0X4501,"es",0XFFFFFFFF,3);
	SetRegEx(0X4574,"es",0XFFFFFFFF,3);
	SetRegEx(0X64D5,"es",0,3);
	SetRegEx(0X64E5,"es",0XFFFFFFFF,3);
	SetRegEx(0X6D8A,"es",0XFFFFFFFF,3);
	SetRegEx(0X6DC0,"es",0XFFFFFFFF,3);
	SetRegEx(0X6E1A,"es",0XFFFFFFFF,3);
	SetRegEx(0X6E2A,"es",0XFFFFFFFF,3);
	SetRegEx(0X6E3D,"es",0XFFFFFFFF,3);
	SetRegEx(0X6E78,"es",0XFFFFFFFF,3);
	SetRegEx(0X6E7D,"ds",0XA65,3);
	SetRegEx(0X6E81,"ds",0XA65,3);
	SetRegEx(0X6E92,"es",0XFFFFFFFF,3);
	SetRegEx(0X6E9A,"es",0XFFFFFFFF,3);
	SetRegEx(0X6FD2,"ds",0XA65,3);
	SetRegEx(0X6FD8,"ds",0XA65,3);
	SetRegEx(0X7074,"es",0XFFFFFFFF,3);
	SetRegEx(0X707F,"es",0XFFFFFFFF,3);
	SetRegEx(0X709B,"ds",0,3);
	SetRegEx(0X70A2,"ds",0XA65,3);
	SetRegEx(0X70A9,"es",0XFFFFFFFF,3);
	SetRegEx(0X70CE,"es",0XFFFFFFFF,3);
	SetRegEx(0X70F5,"es",0XFFFFFFFF,3);
	SetRegEx(0X7119,"es",0XFFFFFFFF,3);
	SetRegEx(0X7773,"es",0XFFFFFFFF,3);
	SetRegEx(0X77AB,"es",0XFFFFFFFF,3);
	SetRegEx(0X785E,"es",0XFFFFFFFF,3);
	SetRegEx(0X7CB2,"es",0XFFFFFFFF,3);
	SetRegEx(0X819F,"ds",0,3);
	SetRegEx(0X81A8,"ds",0XA65,3);
	SetRegEx(0X81C0,"ss",0X14FA,3);
	SetRegEx(0X81C0,"ds",0XFFFFFFF0,3);
	SetRegEx(0X81E2,"ss",0XA65,3);
	SetRegEx(0X81EB,"ds",0XA65,3);
	SetRegEx(0X824A,"es",0XA65,3);
	SetRegEx(0X8259,"ds",0XA65,3);
	SetRegEx(0X826E,"ds",0XA65,3);
	SetRegEx(0X8288,"ds",0XA65,3);
	SetRegEx(0X8299,"ds",0XA65,3);
	SetRegEx(0X82CB,"ds",0,3);
	SetRegEx(0X82D5,"ds",0XA65,3);
	SetRegEx(0X82E8,"es",0XFFFFFFFF,3);
	SetRegEx(0X8311,"es",0XFFFFFFFF,3);
	SetRegEx(0X831A,"es",0XFFFFFFFF,3);
	SetRegEx(0X833A,"es",0XA65,3);
	SetRegEx(0X833B,"ds",0XA65,3);
	SetRegEx(0X8356,"ds",0XA65,3);
	SetRegEx(0X842E,"ds",0XA65,3);
	SetRegEx(0X8434,"ds",0XA65,3);
	SetRegEx(0X84CA,"es",0XFFFFFFFF,3);
	SetRegEx(0X84CF,"es",0XFFFFFFFF,3);
	SetRegEx(0X84F9,"ds",0XA65,3);
	SetRegEx(0X8577,"ds",0XA65,3);
	SetRegEx(0X8593,"es",0XA65,3);
	SetRegEx(0X859C,"ds",0XA65,3);
	SetRegEx(0X85A7,"ds",0XA65,3);
	SetRegEx(0X863A,"ds",0XA65,3);
	SetRegEx(0X864A,"es",0XFFFFFFFF,3);
	SetRegEx(0X8651,"es",0XFFFFFFFF,3);
	SetRegEx(0X8688,"es",0XA65,3);
	SetRegEx(0X8689,"ds",0XA65,3);
	SetRegEx(0X86BD,"ds",0XA65,3);
	SetRegEx(0X86C7,"es",0XA65,3);
	SetRegEx(0X873C,"es",0XFFFFFFFF,3);
	SetRegEx(0X8C68,"es",0XA65,3);
	SetRegEx(0X8C7F,"es",0XA65,3);
	SetRegEx(0X8CCE,"es",0XA65,3);
	SetRegEx(0X8CFE,"es",0XA65,3);
	SetRegEx(0X8D90,"es",0XA65,3);
	SetRegEx(0X8E3A,"es",0XA65,3);
	SetRegEx(0X8EB1,"es",0XA65,3);
	SetRegEx(0X8ED1,"es",0XFFFFFFFF,3);
	SetRegEx(0X8F05,"es",0XFFFFFFFF,3);
	SetRegEx(0X8F13,"es",0XFFFFFFFF,3);
	SetRegEx(0X8F16,"es",0XA65,3);
	SetRegEx(0X8F39,"es",0XFFFFFFFF,3);
	SetRegEx(0X9094,"es",0XA65,3);
	SetRegEx(0X90D1,"es",0XA65,3);
	SetRegEx(0X91AB,"es",0XFFFFFFFF,3);
	SetRegEx(0X91D7,"ds",0XA65,3);
	SetRegEx(0X91E5,"ds",0XA65,3);
	SetRegEx(0X91EB,"ds",0XA65,3);
	SetRegEx(0X91F0,"es",0XFFFFFFFF,3);
	SetRegEx(0X91F8,"ds",0XA65,3);
	SetRegEx(0X91FF,"ds",0XA65,3);
	SetRegEx(0X9215,"es",0XFFFFFFFF,3);
	SetRegEx(0X9222,"ds",0XA65,3);
	SetRegEx(0X922D,"ds",0XA65,3);
	SetRegEx(0X926F,"es",0XA65,3);
	SetRegEx(0X927F,"es",0XFFFFFFFF,3);
	SetRegEx(0X9296,"es",0XFFFFFFFF,3);
	SetRegEx(0X92A5,"es",0XFFFFFFFF,3);
	SetRegEx(0X9360,"es",0XA65,3);
	SetRegEx(0X93DB,"es",0XA65,3);
	SetRegEx(0X93F4,"es",0XFFFFFFFF,3);
	SetRegEx(0X945E,"ds",0XA65,3);
	SetRegEx(0X947F,"es",0XA65,3);
	SetRegEx(0X94C4,"es",0XA65,3);
	SetRegEx(0X94F1,"es",0XA65,3);
	SetRegEx(0X951B,"es",0XA65,3);
	SetRegEx(0X9535,"es",0XA65,3);
	SetRegEx(0X9645,"es",0XA65,3);
	SetRegEx(0X966F,"es",0XA65,3);
	SetRegEx(0X96A3,"es",0XA65,3);
	SetRegEx(0X9766,"ds",0,3);
	SetRegEx(0X976D,"ds",0XA65,3);
	SetRegEx(0X97C9,"ds",0XA65,3);
	SetRegEx(0X9808,"ds",0XA65,3);
	SetRegEx(0X9832,"es",0XFFFFFFFF,3);
	SetRegEx(0X9834,"ds",0XA65,3);
	SetRegEx(0X9845,"ds",0XA65,3);
	SetRegEx(0X9855,"es",0XFFFFFFFF,3);
	SetRegEx(0X99D2,"es",0XFFFFFFFF,3);
	SetRegEx(0X99EF,"ds",0XA65,3);
	SetRegEx(0X99F5,"es",0XA65,3);
	SetRegEx(0X9A01,"es",0XFFFFFFFF,3);
	SetRegEx(0X9A1C,"ds",0XA65,3);
	SetRegEx(0X9B4B,"es",0XFFFFFFFF,3);
	SetRegEx(0X9B4E,"ds",0XA65,3);
	SetRegEx(0X9B5A,"ds",0XA65,3);
	SetRegEx(0X9B8B,"ds",0XA65,3);
	SetRegEx(0X9BF8,"es",0XFFFFFFFF,3);
	SetRegEx(0X9BFB,"ds",0XA65,3);
	SetRegEx(0X9C04,"ds",0XA65,3);
	SetRegEx(0XA460,"es",0XFFFFFFFF,3);
	SetRegEx(0XA460,"ss",0XFFFFFFFF,3);
	SetRegEx(0XA460,"ds",0XA65,3);
	SetRegEx(0XA460,"fs",0XFFFFFFFF,3);
	SetRegEx(0XA460,"gs",0XFFFFFFFF,3);
	SetRegEx(0XA4AF,"ss",0XFFFFFFFF,3);
	SetRegEx(0XA4B0,"es",0XFFFFFFFF,3);
	SetRegEx(0XA4B1,"ds",0XA65,3);
	SetRegEx(0XA4DB,"ss",0XFFFFFFFF,3);
	SetRegEx(0XA4DC,"es",0XFFFFFFFF,3);
	SetRegEx(0XA4DD,"ds",0XA65,3);
	SetRegEx(0XA4E8,"es",0XFFFFFFFF,3);
	SetRegEx(0XA4E8,"ss",0XFFFFFFFF,3);
	SetRegEx(0XA4E8,"ds",0XA65,3);
	SetRegEx(0XA4E8,"fs",0XFFFFFFFF,3);
	SetRegEx(0XA4E8,"gs",0XFFFFFFFF,3);
	SetRegEx(0XA517,"ss",0XFFFFFFFF,3);
	SetRegEx(0XA518,"es",0XFFFFFFFF,3);
	SetRegEx(0XA519,"ds",0XA65,3);
	SetRegEx(0XA527,"ss",0XFFFFFFFF,3);
	SetRegEx(0XA528,"es",0XFFFFFFFF,3);
	SetRegEx(0XA529,"ds",0XA65,3);
	SetRegEx(0XA571,"ds",0XA65,3);
	SetRegEx(0XA582,"ss",0XFFFFFFFF,3);
	SetRegEx(0XA583,"es",0XFFFFFFFF,3);
	SetRegEx(0XA584,"ds",0XA65,3);
	SetRegEx(0XA592,"ss",0XFFFFFFFF,3);
	SetRegEx(0XA593,"es",0XFFFFFFFF,3);
	SetRegEx(0XA594,"ds",0XA65,3);
	SetRegEx(0XA5CF,"ss",0XFFFFFFFF,3);
	SetRegEx(0XA5D0,"es",0XFFFFFFFF,3);
	SetRegEx(0XA5D1,"ds",0XA65,3);
	SetRegEx(0XA5D9,"ds",0XA65,3);
	SetRegEx(0XA5DE,"ds",0XA65,3);
	SetRegEx(0XA5F5,"ss",0XFFFFFFFF,3);
	SetRegEx(0XA5F6,"es",0XFFFFFFFF,3);
	SetRegEx(0XA5F7,"ds",0XA65,3);
	SetRegEx(0XA622,"ss",0XFFFFFFFF,3);
	SetRegEx(0XA623,"es",0XFFFFFFFF,3);
	SetRegEx(0XA624,"ds",0XA65,3);
	SetRegEx(0XA635,"ss",0XFFFFFFFF,3);
	SetRegEx(0XA636,"es",0XFFFFFFFF,3);
	SetRegEx(0XA637,"ds",0XA65,3);
	SetRegEx(0XA650,"es",0XFFFFFFFF,3);
	SetRegEx(0XA650,"ss",0XFFFFFFFF,3);
	SetRegEx(0XA650,"ds",0XA65,3);
	SetRegEx(0XA650,"fs",0XFFFFFFFF,3);
	SetRegEx(0XA650,"gs",0XFFFFFFFF,3);
	SetRegEx(0XBDA9,"es",0XA65,3);
	SetRegEx(0XBDC3,"es",0XFFFFFFFF,3);
	SetRegEx(0XBDCB,"es",0XFFFFFFFF,3);
	SetRegEx(0XC0C4,"ds",0XA65,3);
	SetRegEx(0XC0CE,"ds",0XA65,3);
	SetRegEx(0XC226,"ds",0,3);
	SetRegEx(0XC230,"es",0XFFFFFFFF,3);
	SetRegEx(0XC235,"ds",0XA65,3);
	SetRegEx(0XC24C,"ds",0XA65,3);
	SetRegEx(0XC265,"ds",0XA65,3);
	SetRegEx(0XC26A,"ds",0XA65,3);
	SetRegEx(0XC26C,"es",0XA65,3);
	SetRegEx(0XC271,"es",0XFFFFFFFF,3);
	SetRegEx(0XC272,"ds",0XA65,3);
	SetRegEx(0X105C3,"es",0,3);
	SetRegEx(0X10600,"es",0XFFFFFFFF,3);
	SetRegEx(0X10605,"es",0XFFFFFFFF,3);
	SetRegEx(0X1060E,"ds",0XA65,3);
	SetRegEx(0X10619,"ds",0XA65,3);
	SetRegEx(0X10665,"es",0XFFFFFFFF,3);
	SetRegEx(0X1071A,"es",0XFFFFFFFF,3);
	SetRegEx(0X10746,"es",0XA65,3);
	SetRegEx(0X10750,"es",0XFFFFFFFF,3);
	SetRegEx(0X10789,"es",0XA65,3);
	SetRegEx(0X10792,"ds",0XA65,3);
	SetRegEx(0X10874,"ds",0XA65,3);
	SetRegEx(0X1087B,"ds",0XA65,3);
	SetRegEx(0X10880,"es",0XFFFFFFFF,3);
	SetRegEx(0X108EC,"es",0XFFFFFFFF,3);
	SetRegEx(0X108F2,"es",0XFFFFFFFF,3);
	SetRegEx(0X10947,"ds",0XA65,3);
	SetRegEx(0X1096A,"ds",0XA65,3);
	SetRegEx(0X1096E,"ds",0XA65,3);
	SetRegEx(0X1098A,"ds",0XA65,3);
	SetRegEx(0X10997,"es",0XA65,3);
	SetRegEx(0X10A62,"es",0XFFFFFFFF,3);
	SetRegEx(0X10A7C,"es",0XFFFFFFFF,3);
	SetRegEx(0X10A8B,"es",0XFFFFFFFF,3);
	SetRegEx(0X10BA2,"es",0XA65,3);
	SetRegEx(0X10BB1,"es",0XFFFFFFFF,3);
	SetRegEx(0X10CBF,"es",0XFFFFFFFF,3);
	SetRegEx(0X10D38,"es",0XFFFFFFFF,3);
	SetRegEx(0X14FA0,"es",0XFFFFFFFF,3);
	SetRegEx(0X14FA0,"ss",0XFFFFFFFF,3);
	SetRegEx(0X14FA0,"ds",0XA65,3);
	SetRegEx(0X14FA0,"fs",0XFFFFFFFF,3);
	SetRegEx(0X14FA0,"gs",0XFFFFFFFF,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
	Bytes_1();
	Bytes_2();
	Bytes_3();
        EndTypeUpdating(UTP_STRUCT);
}

// End of file.
