     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (PCDOS 7.1 Kernel) - RETRO DOS v5.0 by ERDOGAN TAN - 12/09/2023
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 07/05/2024 - Retro DOS v5.0 (Modified PCDOS 7.1)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 26/12/2018 (Retro DOS 4.0), 01/10/2022 (Retro DOS 4.2)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos5.s -l retrodos5.txt -o PCDOS.SYS -Z error.txt))
    11                                  ; ---------------------------------------------------------------------------- 
    12                                  ; Included binary file: IBMDOS7.BIN (Retro DOS 5.0 - PCDOS 7.1 IBMDOS.COM) 
    13                                  ; ****************************************************************************
    14                                  
    15                                  ; 12/09/2023 - Retro DOS v5.0 Kernel -dosbios- ('ibmbio7.s')
    16                                  ; Modified from 'iosys6.s' (11/09/2023, Retro DOS v4.2 Kernel's IO.SYS) file
    17                                  ; as below:
    18                                  ;
    19                                  ;    1) Retro DOS v4.2 IO.SYS is based on disassembled source code
    20                                  ;	of MSDOS 6.21 IO.SYS, derived using MSDOS 6.0 source code.
    21                                  ;
    22                                  ;    2) Labels, names, comments, explanations and structure definitions
    23                                  ;	about procedures and code details are almost entirely taken from
    24                                  ;	the original MSDOS 6.0 source code, except for the details that
    25                                  ;	Erdogan Tan personally experienced. Some of them are incompatible
    26                                  ;	with PCDOS 7.1 code. But they have not been deleted to preserve
    27                                  ;	the originality of the descriptions.)
    28                                  ;
    29                                  ;    3)'ibmbio7.s' contains the BIOSLOADER (MSLOADER) section located in
    30                                  ;	the 1st 4 sectors of the IBMBIO.COM file on disk. This is a method
    31                                  ;	from older DOS versions (3 sectors for MSDOS 6.22).
    32                                  ;	The MSDOS/PCDOS boot sector code only reads these MSLOADER/BIOSLOADER
    33                                  ;	sectors and transfers control to the MSLOADER/BIOSLOADER code.
    34                                  ;	BUT!!! The Retro DOS v3 (& v5) boot sector code loads the entire
    35                                  ;	MSDOS.SYS/PCDOS.SYS -combined- kernel file into memory at once.
    36                                  ;	So, hence the Retro DOS boot sector code, 'retrodos5.s' file
    37                                  ;       contains slightly different IO.SYS/IBMBIO.COM INITialization code
    38                                  ;	than the original PCDOS/MSDOS. It does not include 
    39                                  ;	the MSLOADER/BIOSLOADER section. The 'retrodos5.s' and 'ibmbio7.s'
    40                                  ;	files are almost identical except their INIT codes.)
    41                                  ;
    42                                  ; ('iosys6.s' has been converted to 'ibmbio7.s' and 'retrodos42.s' has been
    43                                  ; converted to 'retrodos5.s'. 'ibmbio7.s' is IBMBIO.COM source code file
    44                                  ; while 'retrodos5.s' is source code of Retro DOS v5 kernel file 'PCDOS.SYS'.
    45                                  ; 'retrodos5.s' includes 'ibmdos7.bin' or IBMDOS.COM as binary file.)
    46                                  		
    47                                  ; ----------------------------------------------------------------------------
    48                                  
    49                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    50                                  ;
    51                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    52                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    53                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    54                                  ;
    55                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    56                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    57                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))
    58                                  ; 		
    59                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    60                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    61                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    62                                  
    63                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    64                                  ;     (as included binary, 'IOSYS5.BIN') 
    65                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    66                                  ;						        (except MSLOAD code)
    67                                        
    68                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    69                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    70                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    71                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    72                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    73                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    74                                  
    75                                  ; ----------------------------------------------------------------------------
    76                                  
    77                                  ;=============================================================================
    78                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    79                                  ; by Erdogan Tan, 10/09/2018
    80                                  ;=============================================================================
    81                                  
    82                                  ; MSBIO (IO.SYS 6.0) source files:
    83                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    84                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    85                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    86                                  
    87                                  ;=============================================================================
    88                                  ; MSBIO
    89                                  ;=============================================================================
    90                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    91                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    92                                  ;msend,msbio,msbio;
    93                                  
    94                                  ;=============================================================================
    95                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    96                                  ;=============================================================================
    97                                  
    98                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    99                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
   100                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
   101                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
   102                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
   103                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
   104                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
   105                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
   106                                  
   107                                  ;(*) unfinished, draft, canceled (failed in 2019)
   108                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
   109                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
   110                                  
   111                                  ;Disassembly: (reverse engineering via IDA Pro Free)
   112                                  
   113                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
   114                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
   115                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
   116                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
   117                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
   118                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
   119                                  
   120                                  ;-----------------------------------------------------------------------------
   121                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
   122                                  ;-----------------------------------------------------------------------------
   123                                  
   124                                  SECTOR_SIZE     equ     0200h		; size of a sector
   125                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
   126                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
   127                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
   128                                  KEYBUF          equ     041Eh		; keyboard buffer data
   129                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
   130                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
   131                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
   132                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
   133                                  
   134                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
   135                                  ; The following structure defines the disk parameter table
   136                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   137                                  
   138                                  struc	DISK_PARMS
   139 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   140 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   141 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   142 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   143 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   144 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   145 00000006 ??                      .DISK_DTL:	  resb	1
   146 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   147 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   148 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   149 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   150                                  .size:
   151                                  endstruc
   152                                  
   153                                  ; 09/03/2019 - Retro DOS v4.0
   154                                  ; -------------------------------------------------------------------------
   155                                  ; MSEQU.INC, MSDOS 6.0, 1991
   156                                  
   157                                  ftoobig 	equ	80h
   158                                  fbig		equ	40h
   159                                  ; 12/09/2023
   160                                  fbigbig		equ	20h  ; Retro DOS 5.0 ; PCDOS 7.1 ; FAT32 FS flag
   161                                  romstatus	equ	1
   162                                  romread 	equ	2
   163                                  romwrite	equ	3
   164                                  romverify	equ	4
   165                                  romformat	equ	5
   166                                  
   167                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   168                                  ; -------------------------------------------------------------------------
   169                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   170                                  ;
   171                                  ;  BDS is the Bios Data Structure.
   172                                  ;
   173                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   174                                  ;  are linked together in a list with the pointer to the first BDS being
   175                                  ;  found in START_BDS. The BDS hold various values important to the disk
   176                                  ;  drive. For example there is a field for last time accesses. As actions
   177                                  ;  take place in the system the BDS are update to reflect the actions.
   178                                  ;  For example is there is a read to a disk the last access field for the
   179                                  ;  BDS for that drive is update to the current time.
   180                                  ;
   181                                  ; Values for various flags in BDS.flags.
   182                                  ;
   183                                  
   184                                  fnon_removable	    equ     01h 	;For non-removable media
   185                                  fchangeline	    equ     02h 	;If changeline supported on drive
   186                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   187                                  					; just return the fake one
   188                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   189                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   190                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   191                                  fchanged	    equ     40h 	;Indicates media changed
   192                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   193                                  fchanged_by_format  equ    100h		;Media changed by format
   194                                  ; MSDOS 6.0
   195                                  unformatted_media   equ    200h 	;Fixed disk only
   196                                  
   197                                  ;
   198                                  ; Various form factors to describe media
   199                                  ;
   200                                  
   201                                  ff48tpi 	    equ     0
   202                                  ff96tpi 	    equ     1
   203                                  ffSmall 	    equ     2
   204                                  ffHardFile	    equ     5
   205                                  ffOther 	    equ     7
   206                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   207                                  ff288		    equ     9	; 2.88 MB drive
   208                                  ; Retro DOS v4.0 feature only !
   209                                  ;ff144		    equ	   10	; 1.44 MB drive
   210                                  
   211                                  ; 12/09/2023
   212                                  ; Retro DOS v4 (MDOS 5.0-6.22) BDS structure
   213                                  ; -------------------------------------------------------------------------
   214                                  ; 100 bytes
   215                                   
   216                                  %if 0
   217                                  
   218                                  ; 26/05/2019
   219                                  
   220                                  struc	BDS	; BDS_Type
   221                                  .link:		resd 1		; Link to next BDS
   222                                  .drivenum:	resb 1		; Physical drive number
   223                                  .drivelet:	resb 1		; DOS drive number
   224                                  
   225                                  	;We want to embed a BPB declaration here, but we can't initialize
   226                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   227                                  	;of the BPB declaration.
   228                                  .BPB:	
   229                                  .bytespersec:	resw 1		; bytes per sectors ; def = 512
   230                                  .secperclus:	resb 1		; sectors per cluster
   231                                  .resectors:	resw 1		; reserved sectors
   232                                  .fats:		resb 1		; number of fats
   233                                  .direntries:	resw 1		; number of root directory entries
   234                                  .totalsecs16:	resw 1		; total sectors on medium
   235                                  .media:		resb 1		; media descriptor byte ; def = 0F8h
   236                                  .fatsecs: 	resw 1		; number of fat sectors
   237                                  .secpertrack:	resw 1		; sectors per track
   238                                  .heads:		resw 1		; number of heads
   239                                  ;.hiddensecs:	resw 1		; hidden sectors
   240                                  ; MSDOS 6.0
   241                                  .hiddensecs:	resd 1		; hidden sectors
   242                                  .totalsecs32:	resd 1		; big total sectors
   243                                  ;
   244                                  .fatsiz:	resb 1		; flags...
   245                                  .opcnt:		resw 1		; open ref. count
   246                                  ;.volid:	resb 12		; volume ID of medium
   247                                  .formfactor:	resb 1		; form factor index
   248                                  .flags:		resw 1		; various flags ; def: 0020h
   249                                  .cylinders:	resw 1		; number of cylinders
   250                                  ;
   251                                  .R_BPB:  			; recommended BPB
   252                                  .rbytespersec:	resw 1
   253                                  .rsecperclus:	resb 1
   254                                  .rresectors: 	resw 1
   255                                  .rfats:		resb 1
   256                                  .rdirentries:	resw 1
   257                                  .rtotalsecs16:	resw 1
   258                                  .rmedia: 	resb 1
   259                                  .rfatsecs:	resw 1
   260                                  .rsecpertrack: 	resw 1
   261                                  .rheads:	resw 1
   262                                  .rhidsecs: 	resd 1
   263                                  .rtotalsecs32: 	resd 1
   264                                  .rreserved:	resb 6		; not used (reserved)
   265                                  ;
   266                                  .track:		resb 1		; last track accessed on drive
   267                                  .bdsm_ismini:
   268                                  .tim_lo:	resw 1		; time of last access. keep
   269                                  .bdsm_hidden_trks:
   270                                  .tim_hi:	resw 1		; these contiguous.
   271                                  .volid:		resb 12		; volume id of medium
   272                                  	       ;db "NO NAME    ",0
   273                                  .vol_serial:	resd 1	; current volume serial number from boot record
   274                                  .filesys_id:	resb 9	; current file system id from boot record
   275                                  	       ;db "FAT12   ",0
   276                                  .size:	
   277                                  endstruc
   278                                  
   279                                  %endif
   280                                  
   281                                  ; 12/09/2023 - Retro DOS 5.0 - PCDOS 7.1 (FAT32 compatible) BDS structure
   282                                  ; -------------------------------------------------------------------------
   283                                  ; 150 bytes
   284                                  
   285                                  %if 1
   286                                  
   287                                  struc	BDS	; BDS_Type
   288 00000000 ????????                .link:		resd 1		; Link to next BDS
   289 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   290 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   291                                  
   292                                  	;We want to embed a BPB declaration here, but we can't initialize
   293                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   294                                  	;of the BPB declaration.
   295                                  .BPB:	
   296 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   297 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   298 00000009 ????                    .resectors:	resw 1		; reserved sectors
   299 0000000B ??                      .fats:		resb 1		; number of fats
   300 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   301 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   302 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   303 00000011 ????                    .fatsecs16: 	resw 1		; number of fat sectors
   304 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   305 00000015 ????                    .heads:		resw 1		; number of heads
   306 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors
   307 0000001B ????????                .totalsecs32:	resd 1		; big total sectors
   308                                  ; ----------- FAT32 extensions to BDS ----------- Retro DOS 5.0 -----------
   309 0000001F ????????                .fatsecs32:	resd 1		; BPB_FATSz32   ; FAT32 FAT size in sectors
   310 00000023 ????                    .extflags:	resw 1		; BPB_ExtFlags  ; FAT32 Extended Flags
   311 00000025 ????                    .fsver:		resw 1		; BPB_FSVer	; FAT32 volume version number
   312 00000027 ????????                .rootdirclust:	resd 1		; BPB_RootClus  ; FAT32 root dir's 1st clust num
   313 0000002B ????                    .fsinfo:	resw 1		; BPB_FSInfo	; FAT32 FSINFO sector number
   314 0000002D ????                    .bkbootsec:	resw 1		; BPB_BkBootSec ; FAT32 backup boot sector number
   315 0000002F <res Ch>                .reserved:	resb 12		; BPB_Reserved	; FAT32 reserved field = 0, 12 bytes
   316                                  ; -----------------------------------------------
   317 0000003B ??                      .fatsiz:	resb 1		; flags...
   318 0000003C ????                    .opcnt:		resw 1		; open ref. count
   319 0000003E ??                      .formfactor:	resb 1		; form factor index
   320 0000003F ????                    .flags:		resw 1		; various flags ; def: 0020h
   321 00000041 ????                    .cylinders:	resw 1		; number of cylinders
   322                                  ;
   323                                  .R_BPB:  			; recommended BPB
   324 00000043 ????                    .rbytespersec:	resw 1		
   325 00000045 ??                      .rsecperclus:	resb 1
   326 00000046 ????                    .rresectors: 	resw 1
   327 00000048 ??                      .rfats:		resb 1
   328 00000049 ????                    .rdirentries:	resw 1
   329 0000004B ????                    .rtotalsecs16:	resw 1
   330 0000004D ??                      .rmedia: 	resb 1
   331 0000004E ????                    .rfatsecs:	resw 1
   332 00000050 ????                    .rsecpertrack: 	resw 1
   333 00000052 ????                    .rheads:	resw 1
   334 00000054 ????????                .rhidsecs: 	resd 1
   335 00000058 ????????                .rtotalsecs32: 	resd 1
   336                                  ; ----------- FAT32 extensions to BDS ----------- Retro DOS 5.0
   337 0000005C ????????                .rfatsecs32:	resd 1		; 
   338 00000060 ????                    .rextflags:	resw 1		; 
   339 00000062 ????                    .rfsver:	resw 1		; 
   340 00000064 ????????                .rrootdirclust:	resd 1		; 
   341 00000068 ????                    .rfsinfo:	resw 1		; default/initial value = -1
   342 0000006A ????                    .rbkbootsec:	resw 1		; default/initial value = -1
   343 0000006C <res Ch>                .rreserved:	resb 12		; default value = 0
   344                                  ; -----------------------------------------------
   345                                  ;
   346 00000078 ??                      .track:		resb 1		; last track accessed on drive (def=-1)
   347                                  .bdsm_ismini:
   348 00000079 ????                    .tim_lo:	resw 1		; time of last access. keep
   349                                  .bdsm_hidden_trks:
   350 0000007B ????                    .tim_hi:	resw 1		; these contiguous.
   351 0000007D <res Ch>                .volid:		resb 12		; volume id of medium
   352                                  	       ;db "NO NAME    ",0
   353 00000089 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   354 0000008D <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   355                                  	       ;db "FAT12   ",0
   356                                  .size:
   357                                  endstruc
   358                                  
   359                                  %endif
   360                                  ; -------------------------------------------------------------------------
   361                                  
   362                                  ;The assembler will generate bad data for "size bds_volid",
   363                                  ;so we'll define an equate here.
   364                                  
   365                                  VOLID_SIZ	equ	12
   366                                  
   367                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   368                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   369                                  
   370                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   371                                  
   372                                  ; 29/12/2018
   373                                  ; Retro DOS v4.0
   374                                  ;
   375                                  ; MSDOS 6.0 - BOOTFORM.INC
   376                                  
   377                                  BOOT_SIZE	    EQU	 512
   378                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   379                                  
   380                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   381                                  
   382                                  struc EBPB ; EXT_BPB_INFO
   383 00000000 ????                    .BYTESPERSECTOR:    resw 1
   384 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   385 00000003 ????                    .RESERVEDSECTORS:   resw 1
   386 00000005 ??                      .NUMBEROFFATS:	    resb 1
   387 00000006 ????                    .ROOTENTRIES:	    resw 1
   388 00000008 ????                    .TOTALSECTORS:	    resw 1
   389 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   390 0000000B ????                    .SECTORSPERFAT:	    resw 1
   391 0000000D ????                    .SECTORSPERTRACK:   resw 1
   392 0000000F ????                    .HEADS:		    resw 1
   393 00000011 ????????                .HIDDENSECTORS:	    resd 1
   394 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   395                                  .size:
   396                                  endstruc
   397                                  
   398                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   399                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   400 00000000 ??????                  .JUMP:		resb 3
   401 00000003 ????????????????        .OEM:		resb 8
   402 0000000B <res 19h>               .BPB:		resb EBPB.size ; 25 bytes
   403 00000024 ??                      .PHYDRV:	resb 1
   404 00000025 ??                      .CURHD:		resb 1
   405 00000026 ??                      .SIG:		resb 1
   406 00000027 ????????                .SERIAL:	resd 1
   407 0000002B <res Bh>                .VOL_LABEL:	resb 11
   408 00000036 ????????????????        .SYSTEM_ID:	resb 8
   409                                  .size:
   410                                  endstruc
   411                                  
   412                                  ; 12/09/2023
   413                                  ; ----------------------------
   414                                  ; Retro DOS v5.0 (PCDOS 7.1) - FAT32 Boot Sector Parameters
   415                                  
   416                                  struc XBPB ; FAT32_BPB_INFO ; 12/09/2023
   417 00000000 ????                    .BYTESPERSECTOR:    resw 1
   418 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   419 00000003 ????                    .RESERVEDSECTORS:   resw 1
   420 00000005 ??                      .NUMBEROFFATS:	    resb 1
   421 00000006 ????                    .ROOTENTRIES:	    resw 1
   422 00000008 ????                    .TOTALSECTORS:	    resw 1
   423 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   424 0000000B ????                    .SECTORSPERFAT:	    resw 1
   425 0000000D ????                    .SECTORSPERTRACK:   resw 1
   426 0000000F ????                    .HEADS:		    resw 1
   427 00000011 ????????                .HIDDENSECTORS:	    resd 1
   428 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   429                                  ;............ FAT32 ......  + 28
   430 00000019 ????????                .FATSIZE32:	    resd 1
   431 0000001D ????                    .EXTFLAGS:	    resw 1
   432 0000001F ????                    .FSVER:		    resw 1
   433 00000021 ????????                .ROOTDIRCLUSTER:    resd 1
   434 00000025 ????                    .FSINFOSECTOR:	    resw 1  ; (offset from FAT32 bs)
   435 00000027 ????                    .BACKUPBOOTSECTOR:  resw 1  ; (offset from FAT32 bs)
   436 00000029 <res Ch>                .RESERVEDBYTES:	    resb 12 ; (zero bytes)
   437                                  .size:
   438                                  endstruc
   439                                  
   440                                  struc FAT32_EXT_BOOT ; FAT32_IBMBOOT_HEADER ; 12/09/2023
   441 00000000 ??????                  .JUMP:		resb 3
   442 00000003 ????????????????        .OEM:		resb 8
   443 0000000B <res 35h>               .BPB:		resb XBPB.size ; 53 bytes (25+28)
   444 00000040 ??                      .PHYDRV:	resb 1
   445 00000041 ??                      .CURHD:		resb 1
   446 00000042 ??                      .SIG:		resb 1
   447 00000043 ????????                .SERIAL:	resd 1
   448 00000047 <res Bh>                .VOL_LABEL:	resb 11
   449 00000052 ????????????????        .SYSTEM_ID:	resb 8
   450                                  .size:
   451                                  endstruc
   452                                  
   453                                  ; ----------------------------
   454                                  
   455                                  ; 23/03/2018
   456                                  
   457                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   458                                  STRUC SRHEAD
   459 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   460 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   461 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   462 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   463 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   464                                  .size:
   465                                  endstruc
   466                                  
   467                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   468                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   469                                  ;
   470                                  struc IOCTL_REQ
   471 00000000 <res Dh>                		resb SRHEAD.size	
   472                                  			    	;GENERIC IOCTL ADDITION.
   473 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   474 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   475 0000000F ????                    .REG_SI:	resw 1
   476 00000011 ????                    .REG_DI:	resw 1
   477 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   478                                  endstruc
   479                                  
   480                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   481                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   482                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   483                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   484                                  IOC_SC		EQU	3	; SCREEN CONTROL
   485                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   486                                  IOC_PC		EQU	5	; PRINTER CONTROL
   487                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   488                                  
   489                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   490                                  GEN_IOCTL_WRT_TRK   EQU   40H
   491                                  GEN_IOCTL_RD_TRK    EQU   60H
   492                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   493                                  
   494                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   495                                  ;.RC_COUNT:	resw 	1
   496                                  ;endstruc
   497                                  
   498                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   499                                  
   500                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   501                                  
   502                                  ;struc SYSDEV
   503                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   504                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   505                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   506                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   507                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   508                                  ; .size:
   509                                  ;endstruc
   510                                  
   511                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   512                                  
   513                                  ;
   514                                  ; ATTRIBUTE BIT MASKS
   515                                  ;
   516                                  ; CHARACTER DEVICES:
   517                                  ;
   518                                  ; BIT 15 -> MUST BE 1
   519                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   520                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   521                                  ;     12 -> UNUSED
   522                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   523                                  ;     10 -> MUST BE 0
   524                                  ;      9 -> MUST BE 0
   525                                  ;      8 -> UNUSED
   526                                  ;      7 -> UNUSED
   527                                  ;      6 -> UNUSED
   528                                  ;      5 -> UNUSED
   529                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   530                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   531                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   532                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   533                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   534                                  ;
   535                                  ; BLOCK DEVICES:
   536                                  ;
   537                                  ; BIT 15 -> MUST BE 0
   538                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   539                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   540                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   541                                  ;	    THE SAME PLACE.
   542                                  ;     12 -> UNUSED
   543                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   544                                  ;     10 -> MUST BE 0
   545                                  ;      9 -> MUST BE 0
   546                                  ;      8 -> UNUSED
   547                                  ;      7 -> UNUSED
   548                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   549                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   550                                  ;      5 -> UNUSED
   551                                  ;      4 -> UNUSED
   552                                  ;      3 -> UNUSED
   553                                  ;      2 -> UNUSED
   554                                  ;      1 -> UNUSED
   555                                  ;      0 -> UNUSED
   556                                  ;
   557                                  
   558                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   559                                  CHARDEV        EQU   8000H
   560                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   561                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   562                                  				    ;  COMP MEDIA.
   563                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   564                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   565                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   566                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   567                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   568                                  				    ;  ENTRY POINTS, 0 IF NOT
   569                                  
   570                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   571                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   572                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   573                                  				    ;  ITS CURRENT FORM.
   574                                  
   575                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   576                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   577                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   578                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   579                                  
   580                                  ; 18/03/2019 - Retro DOS v4.0
   581                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   582                                  
   583                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   584                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   585                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   586                                  				    ;GENERIC IOCTL CALLS.
   587                                  				    ;FOR CHARACTER DEVICES, THIS
   588                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   589                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   590                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   591                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   592                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   593                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   594                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   595                                  ; 23/07/2019 - Retro DOS v4.0
   596                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   597                                  
   598                                  ; 27/05/2018 - Retro DOS v3.0 
   599                                  ; [MSDOS 3.3, MSDISK.ASM]
   600                                  
   601                                  struc INT13FRAME
   602 00000000 ????                    .oldbp:	resw 1
   603 00000002 ????                    .oldax:	resw 1
   604 00000004 ????                    .oldbx:	resw 1
   605 00000006 ????                    .oldcx:	resw 1
   606 00000008 ????                    .olddx:	resw 1
   607 0000000A ????????                .olddd:	resd 1
   608 0000000E ????                    .oldf:	resw 1
   609                                  .size:
   610                                  endstruc
   611                                  
   612                                  ; 02/06/2018 - Retro DOS v3.0
   613                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   614                                  
   615                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   616 00000000 ????                    .bios_sd_leng:		resw 1				  
   617 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   618                                  .bios_sd_scnd_modelbyte: 
   619 00000003 ??                      			resb 1					  
   620 00000004 ??                      			resb 1					  
   621 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   622 00000006 ????????                			resb 4					  
   623                                  endstruc
   624                                  
   625                                  ;-----------------------------------------------------------------------------
   626                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   627                                  ;-----------------------------------------------------------------------------
   628                                  ; 11/03/2019 - Retro DOS v4.0
   629                                  
   630                                  ; 18/03/2019
   631                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   632                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   633                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   634                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   635                                  					  ; or system turns
   636                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   637                                  ; ............................................................................
   638                                  
   639                                  ;*** J.K.
   640                                  ;General Guide -
   641                                  ;Category Code:
   642                                  ; 0... .... DOS Defined
   643                                  ; 1... .... User defined
   644                                  ; .xxx xxxx Code
   645                                  
   646                                  ;Function Code:
   647                                  ; 0... .... Return error if unsupported
   648                                  ; 1... .... Ignore if unsupported
   649                                  ; .0.. .... Intercepted by DOS
   650                                  ; .1.. .... Passed to driver
   651                                  ; ..0. .... Sends data/commands to device
   652                                  ; ..1. .... Quries data/info from device
   653                                  ; ...x .... Subfunction
   654                                  ;
   655                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   656                                  ; function set.  It plays no critical role; some functions may contain both
   657                                  ; command and query elements. The convention is that such commands are
   658                                  ; defined as "sends data".
   659                                  
   660                                  ;*****************************;*
   661                                  ; BLOCK DRIVERS 	      ;*
   662                                  ;*****************************;*
   663                                  
   664                                  ; IOCTL SUB-FUNCTIONS
   665                                  IOCTL_GET_DEVICE_INFO	EQU	0
   666                                  IOCTL_SET_DEVICE_INFO	EQU	1
   667                                  IOCTL_READ_HANDLE	EQU	2
   668                                  IOCTL_WRITE_HANDLE	EQU	3
   669                                  IOCTL_READ_DRIVE	EQU	4
   670                                  IOCTL_WRITE_DRIVE	EQU	5
   671                                  IOCTL_GET_INPUT_STATUS	EQU	6
   672                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   673                                  IOCTL_CHANGEABLE?	EQU	8
   674                                  IOCTL_DeviceLocOrRem?	EQU	9
   675                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   676                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   677                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   678                                  GENERIC_IOCTL		EQU	0Dh   ;13
   679                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   680                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   681                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   682                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   683                                  
   684                                  ; GENERIC IOCTL SUB-FUNCTIONS
   685                                  RAWIO			EQU	8
   686                                  
   687                                  ; RAWIO SUB-FUNCTIONS
   688                                  GET_DEVICE_PARAMETERS	EQU	60H
   689                                  SET_DEVICE_PARAMETERS	EQU	40H
   690                                  READ_TRACK		EQU	61H
   691                                  WRITE_TRACK		EQU	41H
   692                                  VERIFY_TRACK		EQU	62H
   693                                  FORMAT_TRACK		EQU	42H
   694                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   695                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   696                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   697                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   698                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   699                                  
   700                                  
   701                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   702                                  BUILD_DEVICE_BPB	EQU	000000001B
   703                                  
   704                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   705                                  INSTALL_FAKE_BPB	EQU	000000001B
   706                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   707                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   708                                  
   709                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   710                                  STATUS_FOR_FORMAT	EQU	000000001B
   711                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   712                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   713                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   714                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   715                                  
   716                                  ; DEVICETYPE VALUES
   717                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   718                                  DEV_5INCH		EQU	0
   719                                  DEV_5INCH96TPI		EQU	1
   720                                  DEV_3INCH720KB		EQU	2
   721                                  DEV_8INCHSS		EQU	3
   722                                  DEV_8INCHDS		EQU	4
   723                                  DEV_HARDDISK		EQU	5
   724                                  DEV_OTHER		EQU	7
   725                                  ;DEV_3INCH1440KB	EQU	7
   726                                  DEV_3INCH2880KB		EQU	9
   727                                  ; Retro DOS v2.0 - 26/03/2018
   728                                  ;;DEV_TAPE		EQU	6
   729                                  ;;DEV_ERIMO		EQU	8
   730                                  ;DEV_3INCH2880KB	EQU	9
   731                                  DEV_3INCH1440KB		EQU	10
   732                                  
   733                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   734                                  					; CURRENTLY SUPPORT.
   735                                  MAX_DEV_TYPE		EQU	10
   736                                  
   737                                  struc A_SECTORTABLE
   738 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   739 00000002 ????                    .ST_SECTORSIZE:		resw	1
   740                                  .size:
   741                                  endstruc
   742                                  
   743                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
   744                                  
   745                                  ; MSDOS 6.0 - BPB.INC - 1991
   746                                  ; ####
   747                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   748                                  ;
   749                                  ;	The BPB contains information about the disk structure.  It dates
   750                                  ;	back to the earliest FAT systems and so FAT information is
   751                                  ;	intermingled with physical driver information.
   752                                  ;
   753                                  ;	A boot sector contains a BPB for its device; for other disks
   754                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
   755                                  ;	information in the DPB.
   756                                  ;
   757                                  ;	The BDS structure contains a BPB within it.
   758                                  
   759                                  ; 01/01/2024
   760                                  %if 0
   761                                  
   762                                  struc A_BPB
   763                                  .BPB_BYTESPERSECTOR:	resw	1
   764                                  .BPB_SECTORSPERCLUSTER:	resb	1
   765                                  .BPB_RESERVEDSECTORS:	resw	1
   766                                  .BPB_NUMBEROFFATS:	resb	1
   767                                  .BPB_ROOTENTRIES: 	resw	1
   768                                  .BPB_TOTALSECTORS:	resw	1
   769                                  .BPB_MEDIADESCRIPTOR:	resb	1
   770                                  .BPB_SECTORSPERFAT:	resw	1
   771                                  .BPB_SECTORSPERTRACK:	resw	1
   772                                  .BPB_HEADS:		resw	1
   773                                  .BPB_HIDDENSECTORS:	resw	1
   774                                  			resw	1
   775                                  .BPB_BIGTOTALSECTORS:	resw	1
   776                                  			resw	1
   777                                  			resb	6	; NOTE:  many times these
   778                                  ;					; 	 6 bytes are omitted
   779                                  ;					;	 when BPB manipulations
   780                                  ;					;	 are performed!
   781                                  .size:
   782                                  endstruc
   783                                  
   784                                  %else
   785                                  
   786                                  ; 14/04/2024
   787                                  ; 01/01/2024 - Retro DOS v5.0
   788                                  
   789                                  struc A_BPB
   790 00000000 ????                    .BYTESPERSECTOR:    resw 1
   791 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   792 00000003 ????                    .RESERVEDSECTORS:   resw 1
   793 00000005 ??                      .NUMBEROFFATS:	    resb 1
   794 00000006 ????                    .ROOTENTRIES:	    resw 1
   795 00000008 ????                    .TOTALSECTORS:	    resw 1
   796 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   797 0000000B ????                    .SECTORSPERFAT:	    resw 1
   798 0000000D ????                    .SECTORSPERTRACK:   resw 1
   799 0000000F ????                    .HEADS:		    resw 1
   800 00000011 ????????                .HIDDENSECTORS:	    resd 1
   801 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   802                                  ;............ FAT32 ......  + 28
   803 00000019 ????????                .FATSIZE32:	    resd 1
   804 0000001D ????                    .EXTFLAGS:	    resw 1
   805 0000001F ????                    .FSVER:		    resw 1
   806 00000021 ????????                .ROOTDIRCLUSTER:    resd 1
   807 00000025 ????                    .FSINFOSECTOR:	    resw 1  ; (offset from FAT32 bs)
   808 00000027 ????                    .BACKUPBOOTSECTOR:  resw 1  ; (offset from FAT32 bs)
   809 00000029 <res Ch>                .RESERVEDBYTES:	    resb 12 ; (zero bytes)
   810                                  		; 14/04/2024
   811 00000035 ????????????            		    resb 6  ; A_BPB.size must be 59
   812                                  .size:
   813                                  endstruc
   814                                  
   815                                  %endif
   816                                  
   817                                  struc A_DEVICEPARAMETERS
   818 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   819 00000001 ??                      .DP_DEVICETYPE:		resb	1
   820 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   821 00000004 ????                    .DP_CYLINDERS:		resw	1
   822 00000006 ??                      .DP_MEDIATYPE:		resb	1
   823 00000007 <res 3Bh>               .DP_BPB:		resb	A_BPB.size
   824 00000042 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   825 00000044 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   826                                  endstruc
   827                                  
   828                                  struc A_TRACKREADWRITEPACKET
   829 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   830 00000001 ????                    .TRWP_HEAD:		resw	1
   831 00000003 ????                    .TRWP_CYLINDER:		resw	1
   832 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   833 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   834 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   835                                  endstruc
   836                                  
   837                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   838                                  struc A_FORMATPACKET
   839 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   840 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   841 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   842 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   843                                  endstruc
   844                                  
   845                                  struc A_VERIFYPACKET
   846 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   847 00000001 ????                    .VP_HEAD: 		resw	1
   848 00000003 ????                    .VP_CYLINDER:		resw	1
   849                                  endstruc
   850                                  
   851                                  struc A_MEDIA_ID_INFO
   852 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   853 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   854 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   855 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   856                                  endstruc
   857                                  
   858                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   859 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   860 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   861                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   862                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   863                                  
   864                                  
   865                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   866 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   867 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   868 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   869 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   870                                  endstruc
   871                                  
   872                                  ;********************************;*
   873                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   874                                  ;********************************;*
   875                                  
   876                                  ;RAWIO SUB-FUNCTIONS
   877                                  GET_RETRY_COUNT 	EQU	65H
   878                                  SET_RETRY_COUNT 	EQU	45H
   879                                  
   880                                  struc A_RETRYCOUNT
   881 00000000 ????                    .RC_COUNT:		resw 1
   882                                  endstruc
   883                                  
   884                                  ;********************************;*		;J.K. 4/29/86
   885                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   886                                  ;********************************;*		;J.K. 4/29/86
   887                                  ;
   888                                  ;SC_MODE_INFO	 struc
   889                                  ;SC_INFO_LENGTH 	 DW	 9
   890                                  ;SC_MODE		 DB	 0
   891                                  ;SC_COLORS		 DW	 0
   892                                  ;SC_WIDTH		 DW	 0
   893                                  ;SC_LENGTH		 DW	 0
   894                                  ;SC_MODE_INFO	 ends
   895                                  ;
   896                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   897                                  
   898                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   899                                  ;GET_SC_MODE		 EQU	 60h
   900                                  ;SET_SC_MODE		 EQU	 40h
   901                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   902                                  ;console devices. - J.K. 4/29/86
   903                                  ;Get_active_codepage	 equ	 6Ah
   904                                  ;Invoke_active_codepage  equ	 4Ah
   905                                  ;Start_designate_codepage equ	 4Ch
   906                                  ;End_designate_codepage  equ	 4Dh
   907                                  ;Get_list_of_designated_codepage equ 6Bh
   908                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   909                                  
   910                                  ;-----------------------------------------------------------------------------
   911                                  ; MULT.INC - MSDOS 6.0 - 1991
   912                                  ;-----------------------------------------------------------------------------
   913                                  ; 18/03/2019
   914                                  
   915                                  ; The current set of defined multiplex channels is (* means documented):
   916                                  ;
   917                                  ;   Channel(h)  Issuer          Receiver    Function
   918                                  ;      00       server          PSPRINT     print job control
   919                                  ;     *01       print/apps      PRINT       Queueing of files
   920                                  ;      02       BIOS            REDIR       signal open/close of printers
   921                                  ;
   922                                  ;      05       command         REDIR       obtain text of net int 24 message
   923                                  ;     *06       server/assign   ASSIGN      Install check
   924                                  ;
   925                                  ;      08       external driver IBMBIO      interface to internal routines
   926                                  ;
   927                                  ;      10       sharer/server   Sharer      install check
   928                                  ;      11       DOS/server      Redir       install check/redirection funcs
   929                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   930                                  ;      13       MSNET           MSNET       movement of NCBs
   931                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   932                                  ;                                           of alternative INT_13 drivers after
   933                                  ;                                           boot_up
   934                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   935                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   936                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   937                                  ;      16       WIN386          WIN386      Windows communications
   938                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   939                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   940                                  ;      19       Shell
   941                                  ;      1A       Ansi.sys
   942                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   943                                  ;
   944                                  ;      40h      OS/2
   945                                  ;      41h      Lanman
   946                                  ;      42h      Lanman
   947                                  ;      43h      Himem
   948                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   949                                  ;                               AL = 30h    reserved for Himem external A20 code
   950                                  ;      44h      Dosextender
   951                                  ;      45H      Windows profiler
   952                                  ;      46h      Windows/286 DOS extender
   953                                  ;      47h      Basic Compiler Vn. 7.0
   954                                  ;      48h      Doskey
   955                                  ;      49h      DOS 5.x install 
   956                                  ;      4Ah      Multi Purpose
   957                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   958                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   959                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   960                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   961                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   962                                  ;
   963                                  ;                multSmartdrv           10h
   964                                  ;                multMagicdrv           11h
   965                                  ;      4Bh      Task Switcher API
   966                                  ;
   967                                  ;      4Ch      APPS            APM             Advanced power management
   968                                  ;      4Dh      Kana Kanji Converter, MSKK
   969                                  ;
   970                                  ;      51h      ODI real mode support driver (for Chicago)
   971                                  ;
   972                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   973                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   974                                  ;
   975                                  ;      55h      COMMAND.COM
   976                                  ;                multCOMFIRST           0 - API to determine whether 1st
   977                                  ;                                           instance of command.com
   978                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   979                                  ;                                           instance of ROM COMMAND
   980                                  ;      56h      Sewell Development
   981                                  ;               INTERLNK
   982                                  ;
   983                                  ;      57h      Iomega Corp.
   984                                  ;
   985                                  ;      AB       Unspecified IBM use
   986                                  ;      AC       Graphics
   987                                  ;      AD       NLS (toronto)
   988                                  ;      AE
   989                                  ;      AF       Mode
   990                                  ;      B0       GRAFTABL        GRAFTABL
   991                                  ;
   992                                  ;      D7       Banyan VINES
   993                                  
   994                                  multMULT	  equ	4Ah
   995                                  
   996                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   997                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   998                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   999                                  multMULTTASKSHELL equ	5	; Shell/switcher API
  1000                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
  1001                                  
  1002                                  ;-----------------------------------------------------------------------------
  1003                                  ; WIN386.INC - MSDOS 6.0 - 1991
  1004                                  ;-----------------------------------------------------------------------------
  1005                                  ; 18/03/2019
  1006                                  
  1007                                  ; WIN386.INC
  1008                                  ;
  1009                                  ;  Symbols and structures relating to WIN386 support.
  1010                                  ;
  1011                                  ;  Used by files in both the DOS and the BIOS.
  1012                                  ;
  1013                                  ;  Created: 7-13-89 by MRW
  1014                                  ;
  1015                                  
  1016                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  1017                                  
  1018                                  MultWin386		equ     16h	; Int 2f multiplex number
  1019                                  
  1020                                  Win386_Init		equ	05h	; Win386 initialization
  1021                                  Win386_Exit		equ	06h	; Win386 exit
  1022                                  Win386_Devcall		equ	07h	; Win386 device call out
  1023                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  1024                                  
  1025                                  ; ============================================================================
  1026                                  
  1027                                  ;-----------------------------------------------------------------------------
  1028                                  ;
  1029                                  ; +-------------------------------------------------------------------------+
  1030                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
  1031                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
  1032                                  ; |			 Licensed to: Freeware version			    |
  1033                                  ; +-------------------------------------------------------------------------+
  1034                                  ;
  1035                                  ;-----------------------------------------------------------------------------
  1036                                  
  1037                                  ;		.386
  1038                                  ;		.model flat
  1039                                  
  1040                                  ; ============================================================================
  1041                                  
  1042                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  1043                                  ; 10/12/2022
  1044                                  ; 09/12/2022
  1045                                  ; 21/10/2022
  1046                                  ; 19/10/2022
  1047                                  ; 17/10/2022, 18/10/2022
  1048                                  ; 15/10/2022, 16/10/2022
  1049                                  ; 03/10/2022
  1050                                  ; 02/10/2022
  1051                                  ; 01/10/2022 - Erdogan Tan
  1052                                  
  1053                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
  1054                                  
  1055                                  ;-----------------------------------------------------------------------------
  1056                                  ; Start of PC-DOS 7.1 IBMBIO.COM  (IO.SYS)
  1057                                  ;-----------------------------------------------------------------------------
  1058                                  
  1059                                  		; [ORG 0]		; segment 0x0070h
  1060                                  
  1061                                  ;=============================================================================
  1062                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
  1063                                  ;=============================================================================
  1064                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  1065                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
  1066                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  1067                                  
  1068                                  section .BIOSDATA vstart=0
  1069                                  
  1070                                  ;--- DOSBIOS data segment ----------------------------------------------------
  1071                                  ;-----------------------------------------------------------------------------
  1072                                  
  1073                                  ;Bios_Data segment
  1074                                  
  1075                                  BData_start:
  1076 00000000 E9931B                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
  1077                                  ; ----------------------------------------------------------------------------
  1078                                  
  1079 00000003 0000                    DosDataSg:	dw 0
  1080                                  
  1081                                  ; DOS's int 2f handler will exit via a jump through here.
  1082                                  ; This is how the BIOS hooks int2f
  1083                                  
  1084                                  ;BIOSDATA:0005h: ; 10/05/2023 (Note the 'bios_i2f equ 5' in 'msdos6.s')
  1085                                  			
  1086 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
  1087                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1088                                  		; PCDOS 7.1 IBMBIO.COM - BIODATA:0006h
  1089                                  		;dw int_2f
  1090                                  		;dw 70h			; BIOSDATA segment (KERNEL_SEGMENT)
  1091 00000006 [2B16]                  		dw i2f_handler
  1092                                  bios_i2f_seg:	; 10/08/2023
  1093 00000008 0203                    		dw DOSBIOCODESEG	; 02CCh for MSDOS 6.21 IO.SYS (25Ch+070h)
  1094                                  					; 0364h PCDOS 7.1 IBMBIO.COM  (2F4h+070h)
  1095                                  
  1096 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
  1097                                  					; This is to maintain binary compatibility
  1098                                  					; with DISK based DOS 5.0
  1099                                  
  1100                                  ; This is a byte used for special key handling in the resident
  1101                                  ; console device driver. It must be here so that it can be included
  1102                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
  1103                                  
  1104 0000000C 00                      altah:		db 0			; special key handling
  1105                                  			
  1106 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
  1107 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
  1108                                  
  1109                                  ; PTRSAV - pointer save
  1110                                  ;
  1111                                  ; This variable holds the pointer to the Request Header passed by a program
  1112                                  ; wishing to use a device driver. When the strategy routine is called it 
  1113                                  ; puts the address of the Request header in this variable and returns.
  1114                                  		
  1115 00000012 00000000                ptrsav:		dd 0			
  1116                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
  1117 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
  1118 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero
  1119 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through
  1120 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).
  1121 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
  1122 00000021 0000                    auxnum:		dw 0			; which aux device was requested
  1123                                  
  1124                                  ;-----------------------------------------------------------------------------
  1125                                  
  1126                                  res_dev_list:
  1127                                  
  1128                                  ; Device Header for the CON Device Driver
  1129                                  
  1130                                  CONHeader:				; HEADER FOR DEVICE "CON"
  1131 00000023 [3500]                  		dw auxdev2
  1132 00000025 7000                    		dw 70h	
  1133 00000027 1380                    word_727:	dw 8013h
  1134 00000029 [1506]                  		dw strategy
  1135 0000002B [2006]                  		dw con_entry
  1136 0000002D 434F4E2020202020        aCon:		db 'CON     '
  1137 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"
  1138 00000037 7000                    		dw 70h
  1139 00000039 0080                    		dw 8000h
  1140 0000003B [1506]                  		dw strategy
  1141 0000003D [4106]                  		dw aux0_entry
  1142 0000003F 4155582020202020        aAux:		db 'AUX     '
  1143 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
  1144 00000049 7000                    		dw 70h
  1145 0000004B C0A0                    word_74B:	dw 0A0C0h
  1146 0000004D [1506]                  		dw strategy
  1147 0000004F [2506]                  		dw prn0_entry
  1148 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
  1149 00000059 [6B00]                  timdev:		dw dskdev
  1150 0000005B 7000                    		dw 70h
  1151 0000005D 0880                    		dw 8008h
  1152 0000005F [1506]                  		dw strategy
  1153 00000061 [5906]                  		dw tim_entry
  1154 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
  1155 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
  1156 0000006D 7000                    		dw 70h
  1157                                  		;dw 8C2h
  1158                                  		; 02/10/2023 - Retro DOS v5.0
  1159 0000006F C248                    		dw 48C2h		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:006Fh
  1160                                  		;dw offset strategy
  1161                                  		;dw offset dsk_entry
  1162                                  		; 19/10/2022
  1163 00000071 [1506]                  		dw strategy
  1164 00000073 [5E06]                  		dw dsk_entry
  1165                                  
  1166                                  ; maximum number of drives
  1167                                  
  1168 00000075 04                      drvmax:		db 4
  1169 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed
  1170 00000077 00                      fhave96:	db 0			; flag to indicate presence of
  1171                                  					; 96tpi support		
  1172 00000078 00                      single:		db 0			; used to detect single drive systems
  1173 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
  1174                                  					; used by console driver.
  1175 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
  1176                                  					; drive. (examined by checksingle).
  1177                                  		
  1178 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"
  1179 0000007D 7000                    		dw 70h
  1180 0000007F 0080                    		dw 8000h
  1181 00000081 [1506]                  		dw strategy
  1182 00000083 [4106]                  		dw aux0_entry
  1183 00000085 434F4D3120202020        aCom1:		db 'COM1    '
  1184 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1
  1185 0000008F 7000                    		dw 70h
  1186 00000091 C0A0                    		dw 0A0C0h
  1187 00000093 [1506]                  		dw strategy
  1188 00000095 [2C06]                  		dw prn1_entry
  1189 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
  1190 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2
  1191 000000A1 7000                    		dw 70h
  1192 000000A3 C0A0                    		dw 0A0C0h
  1193 000000A5 [1506]                  		dw strategy
  1194 000000A7 [3306]                  		dw prn2_entry
  1195 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
  1195 000000B2 0000               
  1196                                  
  1197                                  ;M058; Start of changes
  1198                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1199                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1200                                  ;cannot change for them to work. Even ProComm does this.
  1201                                  
  1202 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h
  1203                                  
  1204 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1205 000000BA 7000                    		dw 70h
  1206 000000BC C0A0                    		dw 0A0C0h
  1207 000000BE [1506]                  		dw strategy
  1208 000000C0 [3A06]                  		dw prn3_entry
  1209 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1210 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1211 000000CC 7000                    		dw 70h
  1212 000000CE 0080                    		dw 8000h
  1213 000000D0 [1506]                  		dw strategy
  1214 000000D2 [4706]                  		dw aux1_entry
  1215                                  		; 19/10/2022
  1216 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1217                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1218 000000DC [EE00]                  		dw com4dev
  1219 000000DE 7000                    		dw 70h
  1220 000000E0 0080                    		dw 8000h
  1221                                  		;dw offset strategy
  1222                                  		;dw offset aux2_entry
  1223 000000E2 [1506]                  		dw strategy
  1224 000000E4 [4D06]                  		dw aux2_entry	
  1225 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1226 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"
  1227 000000F0 7000                    		dw 70h
  1228 000000F2 0080                    		dw 8000h
  1229 000000F4 [1506]                  		dw strategy
  1230 000000F6 [5306]                  		dw aux3_entry
  1231 000000F8 434F4D3420202020        		db 'COM4    '
  1232                                  
  1233                                  ;-----------------------------------------------------------------------------
  1234                                  
  1235 00000100 10                      RomVectors:	db 10h			
  1236 00000101 00000000                Old10:		dd 0
  1237 00000105 13                      		db 13h
  1238 00000106 00000000                Old13:		dd 0			
  1239 0000010A 15                      		db 15h
  1240 0000010B 00000000                Old15:		dd 0			
  1241 0000010F 19                      		db 19h
  1242 00000110 00000000                Old19:		dd 0
  1243 00000114 1B                      		db 1Bh
  1244 00000115 00000000                Old1B:		dd 0
  1245                                  
  1246                                  ;EndRomVectors	equ $
  1247                                  
  1248                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1249                                  
  1250                                  ;-----------------------------------------------------------------------------
  1251                                  
  1252 00000119 [5203]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1253 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1254                                  
  1255                                  ; (MSDOS 3.3) NOTE:
  1256                                  ; Some floppy drives do not have changeline support. The result is a
  1257                                  ; large amount of inefficiency in the code. A media-check always returns
  1258                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1259                                  ; always discard any cached data.
  1260                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1261                                  ; The following three items are used to do this. The logical door latch is
  1262                                  ; based on the premise that it is not physically possible to change floppy
  1263                                  ; disks in a drive in under two seconds (most people take about 10). The
  1264                                  ; logical door latch is implemented by saving the time of the last successful
  1265                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1266                                  ; current time is compared to the saved time. If less than two seconds have
  1267                                  ; passed then the value "No Change" is returned. If more than two seconds
  1268                                  ; have passed the value "Don't Know" is returned.
  1269                                  ;    There is one complecation to this algorithm. Some programs change the
  1270                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1271                                  ; This possibility is detected by counting the number of disk operations
  1272                                  ; which occur without any time passing. If this count exceeds the value of
  1273                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1274                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1275                                  ; of disk operation which occur without the time changing.
  1276                                  
  1277 0000011D 00                      accesscount:	db 0			
  1278 0000011E FF                      tim_drv:	db 0FFh			
  1279 0000011F 00                      medbyt:		db 0
  1280                                  wrtverify:	; 15/10/2022			
  1281 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1282 00000121 00                      verify:		db 0			; 1 if verify after write
  1283 00000122 0000                    seccnt:		dw 0			
  1284 00000124 00                      		db 0			; -- pad where hardnum was
  1285 00000125 01                      dsktnum:	db 1			; number of diskette drives
  1286                                  
  1287                                  ; (MSDOS 3.3) NOTE:
  1288                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1289                                  ; have to be made to read the diskette. Consequently a large head settle
  1290                                  ; time was always used in the I/O operations. To get around this problem
  1291                                  ; we need to continually adjust the head settle time. The following
  1292                                  ; algorithm is used:
  1293                                  ;
  1294                                  ;   Get the current head settle value.
  1295                                  ;   If it is 1, then
  1296                                  ;	set slow = 15
  1297                                  ;   else
  1298                                  ;	set slow = value
  1299                                  ;   ...
  1300                                  ;   if we are seeking and writing then
  1301                                  ;	use slow
  1302                                  ;   else
  1303                                  ;	use fast
  1304                                  ;   ...
  1305                                  ;   restore current head settle value
  1306                                  
  1307 00000126 00                      motorstartup:	db 0			; value from table
  1308 00000127 00                      settlecurrent:	db 0			; value from table
  1309 00000128 00                      settleslow:	db 0			; slow settle value
  1310 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1311 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1312 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1313 0000012C 09                      eot:		db 9			
  1314 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table
  1315 00000131 00                      cursec:		db 0			; current sector
  1316 00000132 00                      curhd:		db 0			; current head
  1317 00000133 0000                    curtrk:		dw 0			; current track
  1318 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1319 00000137 08                      formt_eot:	db 8			; eot used for format
  1320 00000138 00                      hdnum:		db 0			; head number
  1321 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1322 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1323                                  
  1324                                  ;-----------------------------------------------------------------------------
  1325                                  
  1326                                  ; disk errors returned from the IBM rom
  1327                                  
  1328 0000013C CC                      errin:		db 0CCh			; write fault (hard disk)
  1329 0000013D 80                      		db 80h			; write fault (hard disk)
  1330 0000013E 40                      		db 40h			; seek failed
  1331 0000013F 10                      		db 10h			; uncorrectable CRC or ECC error on read
  1332 00000140 08                      		db 8			; dma overrun
  1333 00000141 06                      		db 6			; disk changed (floppy)
  1334 00000142 04                      		db 4			; sector not found/read error
  1335 00000143 03                      		db 3			; disk write-protected
  1336                                  		; 02/10/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
  1337 00000144 01                      		db 1			; invalid function in AH or invalid parameter
  1338 00000145 B2                      		db 0B2h			; volume not removable	
  1339                                  		;
  1340 00000146 00                      lsterr:		db 0			; all other errors
  1341                                  
  1342                                  ; returned error codes corresponding to above
  1343                                  
  1344 00000147 0A                      errout:		db 10			; write	fault error
  1345 00000148 02                      		db 2			; no response (timeout)
  1346 00000149 06                      		db 6			; seek failure
  1347 0000014A 04                      		db 4			; bad crc
  1348 0000014B 04                      		db 4			; dma overrun
  1349 0000014C 0F                      		db 15			; invalid media	change
  1350 0000014D 08                      		db 8			; sector not found
  1351 0000014E 00                      		db 0			; write	attempt	to write-protect disk
  1352                                  		; 02/10/2023
  1353 0000014F 03                      		db 3			; unknown command error
  1354 00000150 03                      		db 3			; unknown command error
  1355                                  		;
  1356 00000151 0C                      		db 12			; general error
  1357                                  
  1358                                  ;-----------------------------------------------------------------------------
  1359                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0152h
  1360                                  
  1361                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  1362                                  %if 1
  1363                                  disksector:	;times 174 db 0
  1364                                  NUM174 equ 512-$
  1365 00000152 00<rep AEh>             		times NUM174 db 0
  1366                                  JB_sign	:	;dw 424Ah		; 'BJ' (nasm) ; 'JB' (masm)
  1367 00000200 4A                      		dec	dx
  1368 00000201 42                      		inc	dx	
  1369 00000202 E9FBFD                  		jmp	BData_start	; db 0E9h, 0FBh, 0FDh
  1370                                  
  1371 00000205 402349424D3A31322E-     IBMBIOCOM$:	db '@#IBM:12.01.2003.build_1.32#@ IBMBIO.COM(USA)',0
  1371 0000020E 30312E323030332E62-
  1371 00000217 75696C645F312E3332-
  1371 00000220 23402049424D42494F-
  1371 00000229 2E434F4D2855534129-
  1371 00000232 00                 
  1372                                  		
  1373                                  		;times 287 db 0
  1374 00000233 00<rep 11Fh>            		times (disksector+512-$) db 0  ; 287
  1375                                  %endif
  1376                                  
  1377                                  ;-----------------------------------------------------------------------------
  1378                                  
  1379                                  ; 30/12/2018 - Retro DOS v4.0
  1380                                  
  1381                                  ; read in boot sector here, read done in readboot.
  1382                                  ; also read sector for dma check for hard disk.
  1383                                  ;
  1384                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1385                                  ; in them which causes the byte after the buffer to be trashed
  1386                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1387                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1388                                  ; makes that system more-or-less work.
  1389                                  
  1390                                  ; 02/10/2023
  1391                                  %if 0
  1392                                  
  1393                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1394                                  		; 19/10/2022
  1395                                  		times 512 db 0
  1396                                  %endif
  1397                                  
  1398                                  ;-----------------------------------------------------------------------------
  1399                                  
  1400                                  ; 02/10/2023 - Retro DOS v5.0
  1401                                  ; 30/12/2018 - Retro DOS v4.0
  1402                                  ;-----------------------------------------------------------------------------
  1403                                  ; 25/05/2018 (04/04/2018)
  1404                                  ;*****************************************************************************
  1405                                  ;	"bds" contains information for each drive in the system.
  1406                                  ;	various values are patched whenever actions are performed.
  1407                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1408                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1409                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1410                                  ;	that the parameters have not been set.
  1411                                  
  1412                                  bds1:		;dw offset bds2
  1413 00000352 [E803]                  		dw bds2	; 19/10/2022
  1414 00000354 7000                    		dw 70h			; dword	link to	next structure
  1415 00000356 00                      		db 0			; int 13h drive	number
  1416 00000357 00                      		db 0			; logical drive	letter
  1417 00000358 0002                    fdrive1:	dw 512			
  1418                                  					; physical sector size in bytes
  1419 0000035A FF                      		db 0FFh			; sectors/allocation unit
  1420 0000035B 0100                    		dw 1			; reserved sectors for dos
  1421 0000035D 02                      		db 2			; no of	file allocation	tables
  1422 0000035E 4000                    		dw 64			; number of root directory entries
  1423 00000360 6801                    		dw 360			; number sectors (at 512 bytes each)
  1424 00000362 00                      		db 0			; media	descriptor, initially 0
  1425 00000363 0200                    		dw 2			; number of fat	sectors
  1426 00000365 0900                    		dw 9			; sector limit (sectors	per track)
  1427 00000367 0100                    		dw 1			; head limit (number of	heads -	1)
  1428                                  		;
  1429                                  		; 02/10/2023
  1430                                  		; MSDOS 5.0-6.22 (& PCDOS 7.0)
  1431                                  		;dw 0			; hidden sector	count (low word)
  1432                                  		;dw 0			; hidden sector	(high)
  1433                                  		;dw 0			; number sectors (low)
  1434                                  		;dw 0			; number sectors (high)
  1435                                  		;db 0			; true => large	fats
  1436                                  		; 02/10/2023
  1437                                  		; PCDOS 7.1 (FAT32 support)
  1438 00000369 00000000                		dd 0			; hidden sector count
  1439 0000036D 00000000                		dd 0			; number of sectors (32 bit)
  1440 00000371 00000000                		dd 0			; BPB_FATSz32 ; FAT32 FAT size in sectors ; 4 bytes
  1441                                  					;   BS_DrvNum ; FAT INT 13h drive number ; 1 byte
  1442                                  					;   BS_Reserved1 ; FAT reserved byte = 0 ; 1 byte
  1443                                  					;   BS_BootSig ; FAT Extended boot signature = 29h ; 1 byte
  1444                                  					;   BS_VolID ; FAT Volume serial number ; 4 bytes
  1445 00000375 0000                    		dw 0			; BPB_ExtFlags ; FAT32 Extended Flags
  1446 00000377 0000                    		dw 0			; BPB_FSVer ; FAT32 fs/volume version
  1447 00000379 00000000                		dd 0			; BPB_RootClus ; FAT32 root directory's first cluster number
  1448 0000037D FFFF                    		dw 0FFFFh		; BPB_FSInfo ; FAT32 FSINFO sector number = -1 (initial)
  1449 0000037F FFFF                    		dw 0FFFFh		; BPB_BkBootSec ; FAT32 backup boot sector number = -1 (initial)
  1450 00000381 00<rep Ch>              		times 12 db 0		; BPB_Reserved  ; FAT32 reserved field = 0, 12 bytes
  1451 0000038D 00                      		db 0			; true => large	fats
  1452                                  		;
  1453 0000038E 0000                    		dw 0			; open ref. count
  1454 00000390 03                      		db 3			; form factor
  1455 00000391 2000                    		dw 20h			; various flags
  1456 00000393 2800                    		dw 40			; number of cylinders
  1457 00000395 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1458 00000397 01                      		db 1
  1459 00000398 0100                    		dw 1
  1460 0000039A 02                      		db 2
  1461 0000039B E000                    		dw 224			; number of root directory entries
  1462 0000039D 6801                    		dw 360
  1463 0000039F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1464 000003A0 0200                    		dw 2
  1465 000003A2 0900                    		dw 9
  1466 000003A4 0200                    		dw 2
  1467                                  		;
  1468                                  		; 02/10/2023
  1469                                  		;dw 0
  1470                                  		;dw 0
  1471                                  		;dw 0
  1472                                  		;dw 0
  1473                                  		;;db 6 dup(0)
  1474                                  		;times 6 db 0		; 19/10/2022
  1475 000003A6 00000000                		dd 0
  1476 000003AA 00000000                		dd 0
  1477 000003AE 00000000                		dd 0
  1478 000003B2 0000                    		dw 0
  1479 000003B4 0000                    		dw 0
  1480 000003B6 00000000                		dd 0
  1481 000003BA FFFF                    		dw 0FFFFh
  1482 000003BC FFFF                    		dw 0FFFFh	
  1483                                  		;db 12 dup(0)
  1484 000003BE 00<rep Ch>              		times 12 db 0		; 02/10/2023
  1485                                  		;
  1486 000003CA FF                      		db 0FFh			; last track accessed on this drive
  1487 000003CB FFFF                    		dw 0FFFFh		; keep these two contiguous (?)
  1488 000003CD FFFF                    		dw 0FFFFh
  1489 000003CF 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1489 000003D8 202000             
  1490 000003DB 00000000                		dd 0			; current volume serial	from boot record
  1491 000003DF 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1492                                  ; ----
  1493                                  
  1494                                  ; 02/10/2023
  1495                                  ; PCDOS 7.1
  1496                                  %if 1
  1497                                  
  1498                                  bds2:		; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  1499 000003E8 FFFF                    		dw 0FFFFh ; -1
  1500 000003EA 7000                    		dw 70h
  1501 000003EC 00                      		db 0
  1502 000003ED 00                      		db 0
  1503 000003EE 0002                    fdrive2:	dw 512
  1504 000003F0 FF                      		db 0FFh
  1505 000003F1 0100                    		dw 1
  1506 000003F3 02                      		db 2
  1507 000003F4 4000                    		dw 64
  1508 000003F6 6801                    		dw 360
  1509 000003F8 00                      		db 0
  1510 000003F9 0200                    		dw 2
  1511 000003FB 0900                    		dw 9
  1512 000003FD 0100                    		dw 1
  1513 000003FF 00000000<rep 5h>        		times 5 dd 0
  1514 00000413 FFFFFFFF                		dd 0FFFFFFFFh
  1515 00000417 00000000<rep 3h>        		times 3 dd 0
  1516 00000423 00                      		db 0
  1517 00000424 0000                    		dw 0
  1518 00000426 03                      		db 3
  1519 00000427 2000                    		dw 20h
  1520 00000429 2800                    		dw 40
  1521                                  recbpb2:
  1522 0000042B 0002                    		dw 512
  1523 0000042D 01                                      db 1
  1524 0000042E 0100                                    dw 1
  1525 00000430 02                                      db 2
  1526 00000431 E000                                    dw 224
  1527 00000433 6801                                    dw 360
  1528 00000435 F0                                      db 0F0h
  1529 00000436 0200                                    dw 2
  1530 00000438 0900                                    dw 9
  1531 0000043A 0200                                    dw 2
  1532 0000043C 00000000<rep 5h>        		times 5 dd 0
  1533 00000450 FFFFFFFF                		dd 0FFFFFFFFh
  1534 00000454 00000000<rep 3h>                        times 3 dd 0
  1535 00000460 FF                                      db 0FFh
  1536 00000461 FFFFFFFF                                dd 0FFFFFFFFh
  1537 00000465 4E4F204E414D452020-                     db 'NO NAME    ',0
  1537 0000046E 202000             
  1538 00000471 00000000                                dd 0
  1539 00000475 464154313220202000                      db 'FAT12   ',0
  1540                                  %endif
  1541                                  
  1542                                  ; ----
  1543                                  
  1544                                  ; 02/10/2023
  1545                                  ; MSDOS 5.0 - 6.22 (& PCDOS 7.0)
  1546                                  %if 0
  1547                                  
  1548                                  bds2:		dw bds3
  1549                                  		dw 70h
  1550                                  		db 0
  1551                                  		db 0
  1552                                  fdrive2:	dw 512			
  1553                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1554                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1555                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1556                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1557                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1558                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1559                                  		db 31h,	32h, 20h, 20h, 20h, 0
  1560                                  
  1561                                  bds3:		dw bds4
  1562                                  		dw 70h
  1563                                  		db 0
  1564                                  		db 0
  1565                                  fdrive3:	dw 512			
  1566                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1567                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1568                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1569                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1570                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1571                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1572                                  		db 31h,	32h, 20h, 20h, 20h, 0
  1573                                  ; ----
  1574                                  
  1575                                  bds4:		dw 0FFFFh
  1576                                  		dw 70h
  1577                                  		db 0
  1578                                  		db 0
  1579                                  fdrive4:	dw 512			
  1580                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1581                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1582                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1583                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1584                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1585                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1586                                  		db 31h,	32h, 20h, 20h, 20h, 0
  1587                                  
  1588                                  ;-----------------------------------------------------------------------------
  1589                                  
  1590                                  sm92:		db 3			; .spf
  1591                                  		db 9			; .spt
  1592                                  		db 112	; 70h		; .cdire
  1593                                  		dw 1440	; 2*9*80	; .csec
  1594                                  		db 2			; .spau
  1595                                  		db 2			; .chead
  1596                                  
  1597                                  %endif
  1598                                  
  1599 0000047E 00                      keyrd_func:	db 0			
  1600 0000047F 01                      keysts_func:	db 1			
  1601 00000480 00                      printdev:	db 0			; printer device index
  1602                                  
  1603                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1604 00000481 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1605                                  
  1606 00000489 0000                    daycnt:		dw 0			
  1607 0000048B 00                      t_switch:	db 0			; flag for updating daycnt
  1608 0000048C 00                      havecmosclock:	db 0			
  1609 0000048D 13                      base_century:	db 19			
  1610 0000048E 50                      base_year:	db 80			
  1611                                  
  1612 0000048F 1F                      month_tab:	db 31
  1613 00000490 1C                      february:	db 28 ; 08/08/2023
  1614 00000491 1F1E1F1E1F1F1E1F1E-     		db 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
  1614 0000049A 1F                 
  1615                                  
  1616                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1617                                  %if 0  
  1618                                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1619                                  		dw 70h ; 17/10/2022	
  1620                                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1621                                  		dw 70h ; 17/10/2022
  1622                                  %endif
  1623                                  
  1624 0000049B 00                      set_id_flag:	db 0			; flag for getbp routine
  1625                                  
  1626                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1627                                  ;fat_12_id:	db 'FAT12   ',0         
  1628                                  ;fat_16_id:	db 'FAT16   ',0         
  1629                                  ;vol_no_name:	db 'NO NAME    ',0      
  1630                                  ;temp_h:	dw 0			; temporary for	32 bit calculation
  1631                                  
  1632 0000049C 0000                    start_sec_h:	dw 0			; starting sector number high word
  1633 0000049E 0000                    saved_word:	dw 0			; tempory saving place for a word
  1634 000004A0 0000                    multrk_flag:	dw 0			
  1635 000004A2 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1636 000004A3 0000                    vretry_cnt:	dw 0			
  1637 000004A5 0000                    soft_ecc_cnt:	dw 0			
  1638 000004A7 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1639 000004A8 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1640                                  
  1641                                  ; variables for msdioctl.asm module
  1642                                  
  1643                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1644                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1645                                  ;	n	bytes per sector
  1646                                  ;      ---	----------------
  1647                                  ;	0	      128
  1648                                  ;	1	      256
  1649                                  ;	2	      512
  1650                                  ;	3	     1024
  1651                                  
  1652                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1653                                  ;					; we support (was 40 in dos 3.2)
  1654                                  
  1655 000004AA 2400                    sectorspertrack: dw 36
  1656 000004AC 00000102                tracktable:	db 0, 0, 1, 2
  1657 000004B0 00000202                		db 0, 0, 2, 2
  1658 000004B4 00000302                		db 0, 0, 3, 2
  1659 000004B8 00000402                		db 0, 0, 4, 2
  1660 000004BC 00000502                		db 0, 0, 5, 2
  1661 000004C0 00000602                		db 0, 0, 6, 2
  1662 000004C4 00000702                		db 0, 0, 7, 2
  1663 000004C8 00000802                		db 0, 0, 8, 2
  1664 000004CC 00000902                		db 0, 0, 9, 2
  1665 000004D0 00000A02                		db 0, 0, 10, 2
  1666 000004D4 00000B02                		db 0, 0, 11, 2
  1667 000004D8 00000C02                		db 0, 0, 12, 2
  1668 000004DC 00000D02                		db 0, 0, 13, 2
  1669 000004E0 00000E02                		db 0, 0, 14, 2
  1670 000004E4 00000F02                		db 0, 0, 15, 2
  1671 000004E8 00001002                		db 0, 0, 16, 2
  1672 000004EC 00001102                		db 0, 0, 17, 2
  1673 000004F0 00001202                		db 0, 0, 18, 2
  1674 000004F4 00001302                		db 0, 0, 19, 2
  1675 000004F8 00001402                		db 0, 0, 20, 2
  1676 000004FC 00001502                		db 0, 0, 21, 2
  1677 00000500 00001602                		db 0, 0, 22, 2
  1678 00000504 00001702                		db 0, 0, 23, 2
  1679 00000508 00001802                		db 0, 0, 24, 2
  1680 0000050C 00001902                		db 0, 0, 25, 2
  1681 00000510 00001A02                		db 0, 0, 26, 2
  1682 00000514 00001B02                		db 0, 0, 27, 2
  1683 00000518 00001C02                		db 0, 0, 28, 2
  1684 0000051C 00001D02                		db 0, 0, 29, 2
  1685 00000520 00001E02                		db 0, 0, 30, 2
  1686 00000524 00001F02                		db 0, 0, 31, 2
  1687 00000528 00002002                		db 0, 0, 32, 2
  1688 0000052C 00002102                		db 0, 0, 33, 2
  1689 00000530 00002202                		db 0, 0, 34, 2
  1690 00000534 00002302                		db 0, 0, 35, 2
  1691 00000538 00002402                		db 0, 0, 36, 2
  1692                                  
  1693                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1694                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:053Ch
  1695                                  
  1696                                  		;times 108 db 0		; 19/10/2022
  1697                                  		;;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1698                                  					; times	((4*63)	- 144) db 0
  1699                                  dskdrvs:	
  1700 0000053C [5803]                  		dw fdrive1
  1701 0000053E [EE03]                  		dw fdrive2 
  1702                                  	
  1703                                  		;dw 52 dup(0)
  1704 00000540 00<rep 68h>             		times 104 db 0		; times (((4*63)-144)-4) db 0
  1705                                  					; 4*max_sectors_curr_sup-($-tracktable)-4 dup (0)			
  1706                                  
  1707                                  ;-----------------------------------------------------------------------------
  1708                                  
  1709                                  ; this is a real ugly place to put this
  1710                                  ; it should really go in the bds
  1711                                  
  1712 000005A8 00                      mediatype:	db 0
  1713 000005A9 00                      media_set_for_format: db 0		; 1 if we have done an int 13h set media
  1714                                  					; type for format call
  1715 000005AA 00                      had_format_error: db 0			; 1 if the previous format operation
  1716                                  					; failed.
  1717                                  
  1718                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1719                                  ; the one passed by "new roms" before we perform a format operation. the old
  1720                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1721                                  ; this table does not contain the previously saved dpt.
  1722                                  		
  1723 000005AB FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1724 000005AF FF                      model_byte:	db 0FFh			; model	byte set at init time
  1725 000005B0 00                      secondary_model_byte: db 0
  1726                                  		
  1727 000005B1 00                      int19sem:	db 0			; indicate that all int 19h
  1728                                  					; initialization is complete
  1729                                  		
  1730                                  ;; we assume the following remain contiguous and their order doesn't change
  1731                                  ;i19_lst:
  1732                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1733                                  ;	public	int19old&aa
  1734                                  ;		db	aa&h	; store the number as a byte
  1735                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1736                                  ;	endm
  1737                                  
  1738                                  ; 21/10/2022
  1739                                  
  1740 000005B2 02                      i19_lst:	db 2
  1741                                  					; Int19old&aa
  1742 000005B3 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1743 000005B7 08                      		db 8
  1744 000005B8 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1745 000005BC 09                      		db 9
  1746 000005BD FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1747 000005C1 0A                      		db 0Ah
  1748 000005C2 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1749 000005C6 0B                      		db 0Bh
  1750 000005C7 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1751 000005CB 0C                      		db 0Ch
  1752 000005CC FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1753 000005D0 0D                      		db 0Dh
  1754 000005D1 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1755 000005D5 0E                      		db 0Eh
  1756 000005D6 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1757 000005DA 70                      		db 70h
  1758 000005DB FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1759 000005DF 72                      		db 72h
  1760 000005E0 FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1761 000005E4 73                      		db 73h
  1762 000005E5 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1763 000005E9 74                      		db 74h
  1764 000005EA FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1765 000005EE 76                      		db 76h
  1766 000005EF FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1767 000005F3 77                      		db 77h
  1768 000005F4 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1769                                  
  1770                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1771                                  
  1772                                  ;-----------------------------------------------------------------------------
  1773                                  
  1774                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1775                                  ; 
  1776                                  ;dskdrvs:	dw fdrive1
  1777                                  ;		dw fdrive2
  1778                                  ;		dw fdrive3
  1779                                  ;		dw fdrive4
  1780                                  ;
  1781                                  ;;M011 -- made all hard drive stuff variable
  1782                                  ;		;dw 22 dup(0)		; up to	26 drives for mini disks
  1783                                  ;		times 22 dw 0	; 19/10/2022
  1784                                  
  1785                                  ;-----------------------------------------------------------------------------
  1786                                  
  1787                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1788                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1789                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1790                                  
  1791                                  ;variables for dynamic relocatable modules
  1792                                  ;these should be stay resident.
  1793                                  
  1794 000005F8 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1795                                  					; for p12 machine
  1796                                  
  1797                                  ; data structures for real-time date and time
  1798                                  			
  1799 000005FC 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1800                                  
  1801                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  1802                                  %if 0
  1803                                  month_table:	dw 0			; january
  1804                                  		dw 31			; february
  1805                                  		dw 59
  1806                                  		dw 90
  1807                                  		dw 120
  1808                                  		dw 151
  1809                                  		dw 181
  1810                                  		dw 212
  1811                                  		dw 243
  1812                                  		dw 273
  1813                                  		dw 304
  1814                                  		dw 334			; december
  1815                                  %endif
  1816                                  
  1817 00000600 0000                    daycnt2:	dw 0
  1818                                  ; 08/08/2023
  1819                                  ;feb29:		db 0			; february 29 in a leap	year flag
  1820                                  
  1821                                  ;-----------------------------------------------------------------------------
  1822                                  ;
  1823                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1824                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1825                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1826                                  
  1827                                  ; ----------------------------------------------------------------------------
  1828                                  
  1829                                  ;************************************************************************
  1830                                  ;*									*
  1831                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1832                                  ;*	  are plugged in by seg_reinit.					*
  1833                                  ;*									*
  1834                                  ;************************************************************************
  1835                                  
  1836                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1837                                  ; BIOSCODE_SEGMENT equ 2C7h
  1838                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1839                                  
  1840                                  ; 01/10/2022 - Erdogan Tan
  1841                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1842                                  ;  addresses, they will be changed to table labels later)
  1843                                  
  1844                                  ; 09/12/2022
  1845                                  %if 0
  1846                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1847                                  					; at 2C7h:43h =	70h:25B3h
  1848                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1849                                  					; at 2C7h:396h = 70h:2906h
  1850                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1851                                  					; at 2C7h:1302h	= 70h:3872h
  1852                                  i13x:		dw 154Bh, 2C7h		; i13z
  1853                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1854                                  %endif
  1855                                  
  1856                                  ; 30/12/2022
  1857                                  ; (IOSYSCODESEG is 2CCh for MSDOS 6.21 IO.SYS)
  1858                                  
  1859                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1860                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0602h
  1861                                  ; (IOSYSCODESEG is 364h for PCDOS 7.1 IBMBIO.COM)
  1862                                  
  1863                                  ; 09/12/2022
  1864 00000602 [4700]0203              cdev:		dw chardev_entry, IOSYSCODESEG
  1865 00000606 [A003]0203              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1866                                  ; 07/08/2023
  1867                                  ;bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1868 0000060A [5718]0203              i13x:		dw i13z, IOSYSCODESEG
  1869                                  
  1870                                  end_BC_entries:	; 15/10/2022
  1871                                  
  1872                                  ;************************************************************************
  1873                                  ;*									*
  1874                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1875                                  ;*									*
  1876                                  ;************************************************************************
  1877                                  
  1878                                  cbreak:					
  1879 0000060E 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1880                                  					; indicate break key set
  1881                                  intret:					
  1882 00000614 CF                      		iret
  1883                                  
  1884                                  ; =============== S U B	R O U T	I N E ========================================
  1885                                  
  1886                                  
  1887                                  ;************************************************************************
  1888                                  ;*									*
  1889                                  ;*	strategy - store es:bx (device driver request packet)		*
  1890                                  ;*		     away at [ptrsav] for next driver function call	*
  1891                                  ;*									*
  1892                                  ;************************************************************************
  1893                                  
  1894                                  strategy:	; proc far		
  1895 00000615 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1896                                  					; away at [ptrsav] for next driver function call
  1897 0000061A 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1898 0000061F CB                      		retf
  1899                                  
  1900                                  ; ----------------------------------------------------------------------------
  1901                                  
  1902                                  ;************************************************************************
  1903                                  ;*									*
  1904                                  ;*	device driver entry points. these are the initial		*
  1905                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1906                                  ;*	  in the case of our resident drivers, they'll just		*
  1907                                  ;*	  stick a fake return address on the stack which		*
  1908                                  ;*	  points to dispatch tables and possibly some unit		*
  1909                                  ;*	  numbers, and then call through a common entry point		*
  1910                                  ;*	  which can take care of a20 switching				*
  1911                                  ;*									*
  1912                                  ;************************************************************************
  1913                                  
  1914                                  ; 01/10/2022 - Erdogan Tan
  1915                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1916                                  ;  addresses, they will be changed to table labels later)
  1917                                  
  1918                                  ; 09/12/2022
  1919                                  
  1920                                  ; 02/10/2023 - Retro DOS v5.0
  1921                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:0620h, BIOSCODE = 0364h)
  1922                                  
  1923                                  con_entry:				
  1924 00000620 E84000                  		call	cdev_entry
  1925                                  ; ----------------------------------------------------------------------------
  1926                                  		;dw 0E4h		; con_table
  1927 00000623 [E400]                  		dw con_table		; 364h:0E4h (PCDOS 7.1)
  1928                                  					; 2C7h:0E4h = 70h:2654h
  1929                                  ; ----------------------------------------------------------------------------
  1930                                  
  1931                                  prn0_entry:				
  1932 00000625 E83B00                  		call	cdev_entry
  1933                                  ; ----------------------------------------------------------------------------
  1934                                  		;dw 0FBh		; prn_table
  1935 00000628 [FB00]                  		dw prn_table
  1936                                  					; 2C7h:0FBh = 70h:266Bh
  1937 0000062A 0000                    		db 0, 0
  1938                                  ; ----------------------------------------------------------------------------
  1939                                  
  1940                                  prn1_entry:				
  1941 0000062C E83400                  		call	cdev_entry
  1942                                  ; ----------------------------------------------------------------------------
  1943                                  		;dw 0FBh		; prn_table
  1944 0000062F [FB00]                  		dw prn_table
  1945                                  					; 2C7h:0FBh = 70h:266Bh
  1946 00000631 0001                    		db 0, 1
  1947                                  ; ----------------------------------------------------------------------------
  1948                                  
  1949                                  prn2_entry:				
  1950 00000633 E82D00                  		call	cdev_entry
  1951                                  ; ----------------------------------------------------------------------------
  1952                                  		;dw 0FBh		; prn_table
  1953 00000636 [FB00]                  		dw prn_table
  1954                                  					; 2C7h:0FBh = 70h:266Bh
  1955 00000638 0102                    		db 1, 2
  1956                                  ; ----------------------------------------------------------------------------
  1957                                  
  1958                                  prn3_entry:				
  1959 0000063A E82600                  		call	cdev_entry
  1960                                  ; ----------------------------------------------------------------------------
  1961                                  		;dw 0FBh		; prn_table
  1962 0000063D [FB00]                  		dw prn_table
  1963                                  					; 2C7h:0FBh = 70h:266Bh
  1964 0000063F 0203                    		db 2, 3
  1965                                  ; ----------------------------------------------------------------------------
  1966                                  
  1967                                  aux0_entry:				
  1968 00000641 E81F00                  		call	cdev_entry
  1969                                  ; ----------------------------------------------------------------------------
  1970                                  		;dw 130h		; aux_table
  1971 00000644 [3001]                  		dw aux_table
  1972                                  					; 2C7h:130h = 70h:26A0h
  1973 00000646 00                      		db 0
  1974                                  ; ----------------------------------------------------------------------------
  1975                                  
  1976                                  aux1_entry:				
  1977 00000647 E81900                  		call	cdev_entry
  1978                                  ; ----------------------------------------------------------------------------
  1979                                  		;dw 130h		; aux_table
  1980 0000064A [3001]                  		dw aux_table		; 364h:130h = 70h:3070h (PCDOS 7.1)
  1981                                  					; 2C7h:130h = 70h:26A0h
  1982 0000064C 01                      		db 1
  1983                                  ; ----------------------------------------------------------------------------
  1984                                  
  1985                                  aux2_entry:				
  1986 0000064D E81300                  		call	cdev_entry
  1987                                  ; ----------------------------------------------------------------------------
  1988                                  		;dw 130h		; aux_table
  1989 00000650 [3001]                  		dw aux_table
  1990                                  					; 2C7h:130h = 70h:26A0h
  1991 00000652 02                      		db 2
  1992                                  ; ----------------------------------------------------------------------------
  1993                                  
  1994                                  aux3_entry:				
  1995 00000653 E80D00                  		call	cdev_entry
  1996                                  ; ----------------------------------------------------------------------------
  1997                                  		;dw 130h		; aux_table
  1998 00000656 [3001]                  		dw aux_table
  1999                                  					; 2C7h:130h = 70h:26A0h
  2000 00000658 03                      		db 3
  2001                                  ; ----------------------------------------------------------------------------
  2002                                  
  2003                                  tim_entry:				
  2004 00000659 E80700                  		call	cdev_entry
  2005                                  ; ----------------------------------------------------------------------------
  2006                                  		;dw 147h		; tim_table
  2007 0000065C [4701]                  		dw tim_table		; 364h:147h = 70h:3087h (PCDOS 7.1)
  2008                                  					; 2C7h:147h = 70h:26B7h
  2009                                  ; ----------------------------------------------------------------------------
  2010                                  
  2011                                  ; 15/10/2022
  2012                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  2013                                  ; 09/12/2022
  2014                                  DSKTBL equ dsktbl
  2015                                  
  2016                                  dsk_entry:				
  2017 0000065E E80200                  		call	cdev_entry
  2018                                  ; ----------------------------------------------------------------------------
  2019                                  		;dw 4A2h		; dsktbl
  2020 00000661 [6F05]                  		dw DSKTBL		; 09/12/2022
  2021                                  					; 2C7h:4A2h = 70h:2A12h
  2022                                  					; 02/10/2023 (PCDOS 7.1 IBMBIO.COM)
  2023                                  					; 364h:579h = 70h:34B9h
  2024                                  
  2025                                  ; =============== S U B	R O U T	I N E ========================================
  2026                                  
  2027                                  ;************************************************************************
  2028                                  ;*									*
  2029                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  2030                                  ;*	This code assumes that if Segment of Device request packet is	*
  2031                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  2032                                  ;*	A20 is already on.						*
  2033                                  ;*									*
  2034                                  ;************************************************************************
  2035                                  
  2036                                  cdev_entry:	; proc near		
  2037 00000663 2E803E[0D00]00          		cmp	byte [cs:inHMA],0
  2038 00000669 740D                    		jz	short ce_enter_codeseg
  2039                                  				; optimized for DOS in HMA
  2040 0000066B 50                      		push	ax
  2041 0000066C 2EA1[0300]              		mov	ax,[cs:DosDataSg]
  2042 00000670 2E3906[1400]            		cmp	[cs:ptrsav+2],ax
  2043 00000675 58                      		pop	ax
  2044 00000676 7505                    		jnz	short not_from_dos
  2045                                  				; jump is coded this way to fall thru
  2046                                  				; in 99.99% of the cases
  2047                                  ce_enter_codeseg:
  2048 00000678 2EFF2E[0206]            		jmp	far [cs:cdev]			
  2049                                  		;jmp	dword ptr cs:cdev
  2050                                  ;-----------------------------------------------------------------------------
  2051                                  
  2052                                  not_from_dos:				
  2053 0000067D E8AA00                  		call	EnsureA20On
  2054 00000680 EBF6                    		jmp	short ce_enter_codeseg
  2055                                  
  2056                                  ;************************************************************************
  2057                                  ;*									*
  2058                                  ;*	outchr - this is our int 29h handler. it writes the		*
  2059                                  ;*	   character in al on the display using int 10h ttywrite	*
  2060                                  ;*									*
  2061                                  ;************************************************************************
  2062                                  
  2063                                  	; 02/10/2023
  2064                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0682h
  2065                                  outchr:					
  2066 00000682 50                      		push	ax		; int 29h handler
  2067 00000683 56                      		push	si
  2068 00000684 57                      		push	di
  2069 00000685 55                      		push	bp
  2070 00000686 53                      		push	bx
  2071                                  		;;;
  2072                                  		; 02/10/2023 - Retro DOS v5.0 (Modified POCDOS 7.1) 
  2073                                  		;mov	ah,0Eh
  2074                                  		;mov	bx,7
  2075                                  		;int	10h	; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  2076                                  		;		; AL = character, BH = display page (alpha modes)
  2077                                  		;		; BL = foreground color	(graphics modes)
  2078                                  		; 02/10/2023
  2079                                  		;push	ds ; *
  2080 00000687 31DB                    		xor	bx,bx ; 0
  2081 00000689 2E381E[1208]            		cmp	[cs:IsWin386], bl ; (are we in) Windows ?
  2082 0000068E 7510                    		jnz	short win_outchr ; *
  2083 00000690 1E                      		push	ds ; *
  2084 00000691 8EDB                    		mov	ds,bx ; 0
  2085 00000693 B40E                    		mov	ah,0Eh
  2086 00000695 B307                    		mov	bl,7
  2087                                  		;jnz	short win_outchr ; Running on Windows
  2088 00000697 9C                      		pushf			; far call (simulate INT)	
  2089 00000698 FA                      		cli	; disable interrupts
  2090 00000699 FF1E4000                		call	far [40h]	; far call to INT 10h vector
  2091 0000069D 1F                      		pop	ds ; *
  2092 0000069E EB02                    		jmp	short outchr_ok
  2093                                  win_outchr:
  2094 000006A0 CD10                    		int	10h
  2095                                  outchr_ok:
  2096                                  		;pop	ds ; *
  2097                                  		;;;
  2098 000006A2 5B                      		pop	bx
  2099 000006A3 5D                      		pop	bp
  2100 000006A4 5F                      		pop	di
  2101 000006A5 5E                      		pop	si
  2102 000006A6 58                      		pop	ax
  2103 000006A7 CF                      		iret
  2104                                  
  2105                                  ;-----------------------------------------------------------------------------
  2106                                  
  2107                                  	; 02/10/2023 - Retro DOS v5.0
  2108                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06A8h
  2109                                  
  2110 000006A8 50                      		db 50h ; P		; 'PCI' signature
  2111 000006A9 43                      		db 43h ; C
  2112 000006AA 49                      		db 49h ; I
  2113                                  
  2114 000006AB 00000000                Orig1A:		dd 0
  2115                                  
  2116                                  ; =============== S U B R O U T I N E =======================================
  2117                                  
  2118                                  	; 02/10/2023 - Retro DOS v5.0
  2119                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06AFh
  2120                                  
  2121                                  Int1A:
  2122 000006AF 80FC04                  		cmp	ah,4		; (Y2K-fix)
  2123 000006B2 7405                    		je	short int1a_1	; Read the date from the computer's real-time clock
  2124 000006B4 2EFF2E[AB06]            		jmp	far [cs:Orig1A]
  2125                                  int1a_1:
  2126 000006B9 55                      		push	bp
  2127                                  int1a_2:
  2128 000006BA 89E5                    		mov	bp,sp
  2129 000006BC 55                      		push	bp
  2130 000006BD 9C                      		pushf
  2131 000006BE 2EFF1E[AB06]            		call	far [cs:Orig1A]
  2132 000006C3 7220                    		jc	short int1a_4
  2133                                  
  2134                                  		;cmp	cl,0		; Year (BCD)
  2135                                  		; 02/10/2023
  2136 000006C5 08C9                    		or	cl,cl
  2137 000006C7 7515                    		jnz	short int1a_3
  2138 000006C9 80FD19                  		cmp	ch,19h		; Century (BCD)
  2139 000006CC 7510                    		jne	short int1a_3
  2140 000006CE B520                    		mov	ch,20h
  2141 000006D0 B405                    		mov	ah,5		; Set the date on the computer's real-time clock
  2142 000006D2 51                        		push	cx
  2143 000006D3 52                      		push	dx		; dh = Month (BCD), dl = Day (BCD)
  2144 000006D4 9C                      		pushf
  2145 000006D5 2EFF1E[AB06]            		call	far [cs:Orig1A]
  2146 000006DA 5A                      		pop	dx
  2147 000006DB 59                      		pop	cx
  2148 000006DC 7207                    		jc	short int1a_4
  2149                                  int1a_3:
  2150 000006DE 5D                      		pop	bp
  2151 000006DF 806606FE                		and	byte [bp+6],0FEh ; clear carry flag
  2152 000006E3 EB05                                    jmp	short int1a_5
  2153                                  int1a_4:
  2154 000006E5 5D                      		pop	bp
  2155 000006E6 804E0601                		or	byte [bp+6],1	; set carry flag
  2156                                  int1a_5:
  2157 000006EA 5D                      		pop	bp
  2158 000006EB CF                      		iret
  2159                                  
  2160                                  		; 02/10/2023
  2161 000006EC 90                      		nop	; (not necessary, i have used this 'nop' to locate 'block13:'
  2162                                  			; at BIOSDATA:06EDh, just as in the original PCDOS 7.1 IBMBIO.COM)
  2163                                  	
  2164                                  ;-----------------------------------------------------------------------------
  2165                                  
  2166                                  ;************************************************************************
  2167                                  ;*									*
  2168                                  ;*	block13 - our int13 hooker					*
  2169                                  ;*									*
  2170                                  ;************************************************************************
  2171                                  
  2172                                  	; 02/10/2023 - Retro DOS v5.0
  2173                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06EDh
  2174                                  
  2175                                  block13:				
  2176 000006ED 2E803E[0D00]00          		cmp	byte [cs:inHMA],0
  2177 000006F3 7403                    		jz	short skipa20
  2178                                  		
  2179                                  		;call	IsA20Off	; A20 Off?
  2180                                  		;jnz	short skipa20
  2181                                  		;call	EnableA20	; assure a20 enabled
  2182                                  		; 02/10/2023 -  Retro DOS v5.0 (Modified PCDOS 7.1)
  2183 000006F5 E83200                  		call	EnsureA20On	; assure a20 enabled
  2184                                  skipa20:				
  2185 000006F8 2E8C1E[1C00]            		mov	[cs:i13_ds],ds	; save caller's ds for call-through
  2186 000006FD 9C                      		pushf			; fake interrupt
  2187 000006FE 2EFF1E[0A06]            		call	far [cs:i13x]
  2188                                  		;call	dword ptr cs:i13x
  2189                                  					; call through Bios_Code entry table
  2190 00000703 2E8E1E[1C00]            		mov	ds,[cs:i13_ds]
  2191 00000708 CA0200                  		retf	2
  2192                                  
  2193                                  ; =============== S U B	R O U T	I N E =======================================
  2194                                  
  2195                                  ; the int13 hook calls back here to call-through to the ROM
  2196                                  ; this is necessary because some people have extended their
  2197                                  ; ROM BIOSs to use ds as a parameter/result register and
  2198                                  ; our int13 hook relies heavily on ds to access Bios_Data
  2199                                  
  2200                                  call_orig13:	; proc far		
  2201 0000070B 8E1E[1C00]              		mov	ds,[i13_ds]	; get caller's ds register
  2202 0000070F 9C                      		pushf			; simulate an int13
  2203 00000710 2EFF1E[B400]            		call	far [cs:Orig13]
  2204                                  		;call	cs:Orig13
  2205 00000715 2E8C1E[1C00]            		mov	[cs:i13_ds],ds
  2206 0000071A 0E                      		push	cs
  2207 0000071B 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  2208                                  
  2209 0000071C 9C                      		pushf
  2210                                  		; 10/12/2022
  2211                                  		; ds = cs
  2212 0000071D 803E[0D00]00            		cmp	byte [inHMA],0	; 16/10/2022
  2213                                  		;cmp	byte [cs:inHMA],0
  2214 00000722 7403                    		jz	short corig13_popf_retf
  2215                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2216                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0725h	
  2217                                  		;call	IsA20Off
  2218                                  		;jnz	short corig13_popf_retf
  2219                                  		;call	EnableA20
  2220 00000724 E80300                  		call	EnsureA20On ; 07/08/2023
  2221                                  corig13_popf_retf:	
  2222 00000727 9D                      		popf
  2223                                  		; 20/09/2023
  2224                                  re_init:	; 07/08/2023
  2225 00000728 CB                      		retf
  2226                                  
  2227                                  		; 02/10/2023
  2228 00000729 90                      		nop	; (not necessary, i have used this 'nop' to locate 'EnsureA20On:'
  2229                                  			; at BIOSDATA:072Ah, just as in the original PCDOS 7.1 IBMBIO.COM)
  2230                                  
  2231                                  ;-----------------------------------------------------------------------------
  2232                                  
  2233                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  2234                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  2235                                  
  2236                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2237                                  ;HiMem:		dd 0FFFF0090h		
  2238                                  ;LoMem:		dd 80h
  2239                                  
  2240                                  ; ----------------------------------------------------------------------------			
  2241                                  
  2242                                  ; =============== S U B	R O U T	I N E ========================================
  2243                                  
  2244                                  
  2245                                  ;************************************************************************
  2246                                  ;*									*
  2247                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  2248                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  2249                                  ;*									*
  2250                                  ;************************************************************************
  2251                                  
  2252                                  EnsureA20On:	; proc near
  2253 0000072A E80E00                  		call	IsA20Off
  2254                                  		;jz	short EnableA20
  2255                                  		;retn
  2256                                  		; 18/12/2022
  2257 0000072D 750B                    		jnz	short A20On_retn
  2258                                  
  2259                                  ; =============== S U B	R O U T	I N E ========================================
  2260                                  
  2261                                  
  2262                                  EnableA20:	; proc near
  2263 0000072F 50                      		push	ax
  2264 00000730 53                      		push	bx
  2265 00000731 B405                    		mov	ah,5	 ; local enable a20
  2266                                  		;call	cs:xms
  2267 00000733 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  2268 00000738 5B                      		pop	bx
  2269 00000739 58                      		pop	ax
  2270                                  A20On_retn:	; 18/12/2022
  2271 0000073A C3                      		retn
  2272                                  
  2273                                  ; =============== S U B	R O U T	I N E ========================================
  2274                                  
  2275                                  
  2276                                  IsA20Off:	; proc near
  2277 0000073B 1E                      		push	ds
  2278 0000073C 06                      		push	es
  2279 0000073D 51                      		push	cx
  2280 0000073E 56                      		push	si
  2281 0000073F 57                      		push	di
  2282                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2283                                  		;lds	si,[cs:HiMem]
  2284                                  		;les	di,[cs:LoMem]
  2285                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0740h
  2286 00000740 31FF                    		xor	di,di
  2287 00000742 8EC7                    		mov	es,di
  2288 00000744 4F                      		dec	di
  2289 00000745 BE9000                  		mov	si,90h	; 0FFFFh:0090h ; HiMem
  2290 00000748 8EDF                    		mov	ds,di
  2291 0000074A BF8000                  		mov	di,80h	; 0000h:0080h ; LoMem
  2292                                  		; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (PCDOS 7.1)
  2293                                  		; (following cpu instructions will be modified by 'SYSIN'
  2294                                  		; if the cpu is a 386/32bit, for checking A20 line faster) 
  2295                                  cpu386_cmpsd:
  2296 0000074D 90                      		nop
  2297 0000074E B90800                  		mov	cx,8
  2298 00000751 F3A7                    		repe cmpsw
  2299                                  				; zf = 0 -> A20 line is ON
  2300                                  				; zf = 1 -> A20 line is OFF
  2301 00000753 5F                      		pop	di
  2302 00000754 5E                      		pop	si
  2303 00000755 59                      		pop	cx
  2304 00000756 07                      		pop	es
  2305 00000757 1F                      		pop	ds
  2306 00000758 C3                      		retn
  2307                                  
  2308                                  ; ----------------------------------------------------------------------------
  2309                                  
  2310                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2311                                  %if 0
  2312                                  DisableA20:
  2313                                  		push	ax
  2314                                  		push	bx
  2315                                  		mov	ah,6		; local disable A20
  2316                                  		call	far [cs:xms]
  2317                                  		;call	cs:xms
  2318                                  		pop	bx
  2319                                  		pop	ax
  2320                                  		retn
  2321                                  %endif
  2322                                  
  2323                                  ; ----------------------------------------------------------------------------
  2324                                  
  2325                                  ;************************************************************************
  2326                                  ;*									*
  2327                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  2328                                  ;*	  interrupt vectors before resuming the original int19 code	*
  2329                                  ;*									*
  2330                                  ;************************************************************************
  2331                                  
  2332                                  		; 02/10/2023 - Retro DOS v5.0
  2333                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0759h
  2334                                  int19:
  2335 00000759 0E                      		push	cs
  2336 0000075A 1F                      		pop	ds
  2337                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2338                                  		;mov	es,[zeroseg]	; 16/10/2022
  2339                                  		;mov	cx,5		; NUMROMVECTORS
  2340 0000075B 31C9                    		xor	cx,cx
  2341 0000075D 8EC1                    		mov	es,cx
  2342 0000075F B105                    		mov	cl,5
  2343                                  		;mov	si,offset RomVectors
  2344 00000761 BE[0001]                		mov	si,RomVectors	; 19/10/2022
  2345                                  next_int:
  2346 00000764 AC                      		lodsb			; get int number
  2347 00000765 98                      		cbw			; assume < 128
  2348 00000766 D1E0                    		shl	ax,1
  2349 00000768 D1E0                    		shl	ax,1		; int *	4
  2350                                  		; 07/08/2023
  2351                                  		;mov	di,ax
  2352                                  		;lodsw
  2353                                  		;stosw
  2354                                  		;lodsw
  2355                                  		;stosw			; install the saved vector
  2356                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:076Ah
  2357 0000076A 97                      		xchg	ax,di
  2358 0000076B A5                      		movsw
  2359 0000076C A5                      		movsw
  2360 0000076D E2F5                    		loop	next_int
  2361                                  		;cmp	byte [int19sem], 0 ; 19/10/2022
  2362 0000076F 380E[B105]              		cmp	[int19sem], cl ; 0 ; 07/08/2023
  2363 00000773 7419                    		jz	short doint19
  2364 00000775 BE[B205]                		mov	si,i19_lst	; stacks code has changed these hardware interrupt vectors
  2365                                  					; stkinit in sysinit1 will initialize int19oldxx values
  2366                                  		;mov	cx,14		; num_i19
  2367                                  		; 07/08/2023
  2368 00000778 B10E                    		mov	cl,14
  2369                                  i19_restore_loop:
  2370 0000077A AC                      		lodsb			; get interrupt	number
  2371 0000077B 98                      		cbw			; assume < 128
  2372                                  		;mov	di,ax
  2373                                  		;lodsw			; get original vector offset
  2374                                  		;mov	bx,ax		; save it
  2375                                  		;lodsw
  2376                                  		; 07/08/2023
  2377 0000077C 97                      		xchg	ax,di
  2378 0000077D AD                      		lodsw
  2379 0000077E 93                      		xchg	ax,bx
  2380 0000077F AD                      		lodsw
  2381                                  		;cmp	bx,0FFFFh	; check	for 0ffffh (unlikely segment)
  2382 00000780 43                      		inc	bx ; 07/08/2023
  2383 00000781 7409                    		jz	short i19_restor_1 ; opt no need to check selector too
  2384                                  		;cmp	ax,0FFFFh	; opt 0ffffh is	unlikely offset
  2385                                  		;jz	short i19_restor_1
  2386 00000783 4B                      		dec	bx ; 07/08/2023
  2387 00000784 01FF                    		add	di,di
  2388 00000786 01FF                    		add	di,di
  2389 00000788 93                      		xchg	ax,bx
  2390 00000789 AB                      		stosw
  2391 0000078A 93                      		xchg	ax,bx
  2392 0000078B AB                      		stosw			; put the vector back
  2393                                  i19_restor_1:
  2394 0000078C E2EC                    		loop	i19_restore_loop
  2395                                  doint19:
  2396                                  		;cmp	byte [inHMA],0	; ; Is dos running from	HMA
  2397 0000078E 380E[0D00]              		cmp	[inHMA],cl ; 0	; 07/08/2023
  2398 00000792 7403                    		jz	short SkipVDisk
  2399 00000794 E82A00                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  2400                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  2401                                  					; the memory above 1MB during a	warm boot.
  2402                                  SkipVDisk:
  2403 00000797 CD19                    		int	19h		; DISK BOOT
  2404                                  					; causes reboot	of disk	system
  2405                                  
  2406                                  ; =============== S U B	R O U T	I N E ========================================
  2407                                  
  2408                                  ;-----------------------------------------------------------------------------
  2409                                  ;
  2410                                  ; procedure : int15
  2411                                  ;
  2412                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  2413                                  ;		If it recognizes ctrl-alt-del and if DOS was
  2414                                  ;		is running high, it Erases the VDISK header
  2415                                  ;		present at 1MB boundary
  2416                                  ;
  2417                                  ;-----------------------------------------------------------------------------
  2418                                  
  2419                                  ; 16/10/2022
  2420                                  ;DELKEY		equ	53h
  2421                                  ;ROMDATASEG	equ	40h
  2422                                  KBFLAG		equ	17h
  2423                                  ;CTRLSTATE	equ	04h
  2424                                  ;ALTSTATE	equ	08h
  2425                                  
  2426                                  		; 02/10/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  2427                                  Int15:
  2428                                  		;cmp	ax,4F00h+DELKEY
  2429 00000799 3D534F                  		cmp	ax,4F53h	; del keystroke ?
  2430                                  		; 02/10/2023 - Retro DOS v5.0
  2431                                  		; 07/08/2023
  2432 0000079C 7405                    		jz	short int15_1
  2433                                  		;jnz	short Old15_j	; 07/08/2023 
  2434                                  Old15_j:
  2435 0000079E 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  2436                                  
  2437                                  ; ----------------------------------------------------------------------------
  2438                                  int15_1:
  2439 000007A3 1E                      		push	ds
  2440 000007A4 50                      		push	ax
  2441                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2442                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07A5h
  2443                                  		;mov	ax,40h		; ROMDATASEG
  2444                                  		;mov	ds,ax
  2445                                  		;;mov	al,ds:17h	; [KBFLAG]
  2446                                  		;; 16/10/2022
  2447                                  		;mov	al,[KBFLAG]
  2448 000007A5 31C0                    		xor	ax,ax
  2449 000007A7 8ED8                    		mov	ds,ax
  2450 000007A9 A01704                  		mov	al,[0417h]	; KBFLAG = 0417h (PCDOS 7.1 IBMBIO.COM)
  2451 000007AC 240C                    		and	al,0Ch		; (CTRLSTATE | ALTSTATE)
  2452 000007AE 3C0C                    		cmp	al,0Ch		; (CTRLSTATE | ALTSTATE)
  2453 000007B0 750A                    		jnz	short int15_2
  2454                                  		; 07/08/2023
  2455                                  		;push	cs
  2456                                  		;pop	ds
  2457                                  		;cmp	byte [inHMA],0	; is DOS running from HMA
  2458 000007B2 2E3826[0D00]            		cmp	byte [cs:inHMA],ah ; 0
  2459 000007B7 7403                    		jz	short int15_2
  2460 000007B9 E80500                  		call	EraseVDiskHead
  2461                                  int15_2:
  2462 000007BC 58                      		pop	ax
  2463 000007BD 1F                      		pop	ds
  2464 000007BE F9                      		stc
  2465                                  		; 02/10/2023 - Retro DOS v5.0
  2466 000007BF EBDD                    		jmp	short Old15_j
  2467                                  
  2468                                  		; 02/10/2023
  2469                                  ;Old15_j:	; 07/08/2023
  2470                                  ;		jmp	far [cs:Old15]	; 16/10/2022
  2471                                  ;		;jmp	cs:Old15
  2472                                  	
  2473                                  ; =============== S U B	R O U T	I N E ========================================
  2474                                  
  2475                                  ;-----------------------------------------------------------------------------
  2476                                  ;
  2477                                  ; procedure : EraseVDiskHead
  2478                                  ;
  2479                                  ;		Erases the VDisk Header present in the 1MB boundary
  2480                                  ;
  2481                                  ;-----------------------------------------------------------------------------
  2482                                  
  2483                                  EraseVDiskHead:	; proc near
  2484                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2485                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07C1h
  2486                                  		;push	ax
  2487 000007C1 51                      		push	cx
  2488 000007C2 57                      		push	di
  2489 000007C3 06                      		push	es
  2490 000007C4 E863FF                  		call	EnsureA20On
  2491                                  		;mov	ax,0FFFFh	; HMA seg
  2492                                  		;mov	es,ax
  2493                                  		; 03/10/2023 - Retro DOS v5.0
  2494 000007C7 6AFF                    		push	0FFFFh
  2495 000007C9 07                      		pop	es
  2496 000007CA BF1000                  		mov	di,10h		; point	to VDISK header
  2497                                  		; 07/08/2023
  2498                                  		;mov	cx,10h		; size of vdisk	header
  2499 000007CD 89F9                    		mov	cx,di ; 16
  2500                                  		; 03/10/2023
  2501 000007CF 31C0                    		xor	ax,ax
  2502                                  		;inc	ax ; ax = 0
  2503 000007D1 F3AB                    		rep stosw		; clear	it
  2504 000007D3 07                      		pop	es
  2505 000007D4 5F                      		pop	di
  2506 000007D5 59                      		pop	cx
  2507                                  		;pop	ax ; 07/08/2023
  2508 000007D6 C3                      		retn
  2509                                  
  2510                                  ; ----------------------------------------------------------------------------
  2511                                  
  2512                                  ; 03/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  2513                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2514                                  
  2515                                  ; 09/12/2022
  2516                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2517                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2518                                  ; (followings are in sysinit segment)
  2519                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2520                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2521                                  ;DEVICELIST	equ 273h
  2522                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2523                                  ;MEMORYSIZE	equ 292h	
  2524                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2525                                  ;DEFAULTDRIVE	equ 296h
  2526                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2527                                  ;;currentdoslocation equ 271h
  2528                                  ;CURRENTDOSLOCATION equ 271h
  2529                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2530                                  ;SYSINITSTART	equ 267h
  2531                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2532                                  ; 18/10/2022
  2533                                  ;toomanydrivesflag equ 3FFh 
  2534                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2535                                  
  2536                                  ; ----------------------------------------------------------------------------
  2537                                  
  2538                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2539                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07D7h
  2540                                  
  2541                                  %if 1
  2542                                  
  2543 000007D7 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2544                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2545                                  					; (procedure in	SYSINIT	segment)
  2546                                  ; 17/10/2022
  2547 000007D9 [E20B]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2548 000007DB D904                    		dw SYSINITSEG		; 08/08/2023
  2549                                  					; 0544h for PCDOS 7.1 IBMBIO.COM
  2550                                  					; 0473h for MSDOS 6.21 IO.SYS
  2551                                  ;SR;
  2552                                  ; A communication block has been setup between the DOS and the BIOS. All
  2553                                  ;the data starting from SysinitPresent will be part of the data block. 
  2554                                  ;Right now, this is the only data being communicated. It can be expanded 
  2555                                  ;later to add more stuff
  2556                                  
  2557 000007DD 00                      SysinitPresent:	db 0
  2558                                  
  2559                                  %endif
  2560                                  
  2561                                  ; ----------------------------------------------------------------------------
  2562                                  
  2563                                  ;************************************************************************
  2564                                  ;*									*
  2565                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  2566                                  ;*	  it returns through one of the three functions that follow.	*
  2567                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  2568                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2569                                  ;*									*
  2570                                  ;************************************************************************
  2571                                  
  2572                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2573                                  %if 0	; 20/09/2023
  2574                                  int_2f:		
  2575                                  		jmp	far [cs:bcode_i2f] ; 16/10/2022
  2576                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2577                                  
  2578                                  ; ----------------------------------------------------------------------------
  2579                                  
  2580                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2581                                  ; note:  is it really necessary to transiton out and then back in?
  2582                                  ;	 It's not as if this is a really speed critical function.
  2583                                  ;	 might as well do whatever's most compact.
  2584                                  
  2585                                  i2f_dskentry:
  2586                                  		jmp	dsk_entry
  2587                                  
  2588                                  ; ----------------------------------------------------------------------------
  2589                                  
  2590                                  ;************************************************************************
  2591                                  ;*									*
  2592                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2593                                  ;*		is done. presently does nothing. affects no		*
  2594                                  ;*		registers!						*
  2595                                  ;*									*
  2596                                  ;************************************************************************
  2597                                  
  2598                                  ; 09/12/2022
  2599                                  ; re_init_:
  2600                                  re_init:				; called back by sysinit after
  2601                                  		retf			; a bunch of stuff is done.
  2602                                  					; presently does nothing
  2603                                  %endif
  2604                                  
  2605                                  ; ----------------------------------------------------------------------------
  2606                                  
  2607                                  ;SR; WIN386 support
  2608                                  
  2609                                  ; WIN386 instance data structure
  2610                                  ;
  2611                                  ; Here is a Win386 startup info structure which we set up and to which
  2612                                  ; we return a pointer when Win386 initializes.
  2613                                  
  2614 000007DE 0300                    Win386_SI:	db 3,0			; SI_Version
  2615                                  					; Startup Info for Win386
  2616 000007E0 00000000                SI_Next:	dd 0			; pointer to next info structure
  2617 000007E4 00000000                		dd 0			; a field we don't need
  2618 000007E8 00000000                		dd 0			; another field	we don't need
  2619 000007EC [F007]                  SI_Instance:	dw Instance_Table
  2620 000007EE 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2621                                  
  2622                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2623                                  ; areas. Note that the address and size of the hardware stacks must
  2624                                  ; be calculated and inserted at boot time.
  2625                                  
  2626 000007F0 00005000                Instance_Table:	dw 0,50h		; print	screen status...
  2627 000007F4 0200                    		dw 2			; ... 2	bytes
  2628 000007F6 0E005000                		dw 0Eh,50h		; ROM Basic data...
  2629 000007FA 1400                    		dw 14h			; ... 14H bytes
  2630 000007FC [0C00]                  		dw altah		; a con	device buffer...
  2631 000007FE 7000                    		dw 70h			; Bios_Data segment
  2632 00000800 0100                    		dw 1			; ... 1 byte
  2633                                  
  2634                                  NextStack:
  2635                                  
  2636                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2637                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2638                                  ;	That's just fine as long as these are the last items
  2639                                  ;	in the instance list since the first item is initialized
  2640                                  ;	to 0000 at load time.
  2641                                  
  2642 00000802 00000000                		dw 0,0			; pointer to next stack	to be used...
  2643 00000806 0200                    		dw 2			; ... 2 bytes
  2644 00000808 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2645 0000080C 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2646 0000080E 00000000                		dd 0			; terminate the	instance table
  2647                                  
  2648                                  					;SR;
  2649 00000812 00                      IsWin386:	db 0			; Flag to indicate whether
  2650                                  					; Win386 is running or not
  2651                                  ;-----------------------------------------------------------------------------
  2652                                  
  2653                                  ; 09/12/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2654                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0813h
  2655                                  
  2656                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2657                                  ;when we call it including checking of A20. The code being only about 
  2658                                  ;30 bytes, we might as well put it in BIOS_DATA
  2659                                  
  2660                                  V86_Crit_SetFocus:			
  2661 00000813 57                      		push	di
  2662 00000814 06                      		push	es
  2663 00000815 53                      		push	bx
  2664 00000816 50                      		push	ax
  2665 00000817 31FF                    		xor	di,di
  2666 00000819 8EC7                    		mov	es,di
  2667 0000081B BB1500                  		mov	bx,15h		; Device ID of DOSMGR device
  2668 0000081E B88416                  		mov	ax,1684h	; Get API entry	point
  2669 00000821 CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2670                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2671                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2672 00000823 8CC0                    		mov	ax, es
  2673 00000825 09F8                    		or	ax, di
  2674 00000827 740A                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2675                                  					; Set up stack frame to	simulate a call.
  2676 00000829 0E                      		push	cs
  2677                                  		;;mov	ax,offset Skip
  2678                                  		;mov	ax,Skip
  2679                                  		;push	ax
  2680                                  		; 03/10/2023 - Retro DOS v5.0
  2681 0000082A 68[3308]                		push	Skip
  2682 0000082D 06                      		push	es
  2683 0000082E 57                      		push	di		; API far call address
  2684 0000082F B80100                  		mov	ax,1		; SetFocus function number
  2685 00000832 CB                      		retf			; do the call
  2686                                  ;-----------------------------------------------------------------------------
  2687                                  
  2688                                  Skip:					
  2689 00000833 58                      		pop	ax
  2690 00000834 5B                      		pop	bx
  2691 00000835 07                      		pop	es
  2692 00000836 5F                      		pop	di
  2693 00000837 CB                      		retf
  2694                                  
  2695                                  ;End WIN386 support
  2696                                  
  2697                                  ; ----------------------------------------------------------------------------
  2698                                  
  2699                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2700                                  %if 0
  2701                                  
  2702                                  FreeHMAPtr:	dw 0FFFFh		
  2703                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2704                                  					; (procedure in	SYSINIT	segment)
  2705                                  ; 17/10/2022
  2706                                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2707                                  		dw SYSINITSEG		; 08/08/2023
  2708                                  					; 0544h for PCDOS 7.1 IBMBIO.COM
  2709                                  					; 0473h for MSDOS 6.21 IO.SYS
  2710                                  ;SR;
  2711                                  ; A communication block has been setup between the DOS and the BIOS. All
  2712                                  ;the data starting from SysinitPresent will be part of the data block. 
  2713                                  ;Right now, this is the only data being communicated. It can be expanded 
  2714                                  ;later to add more stuff
  2715                                  
  2716                                  SysinitPresent:	db 0
  2717                                  		
  2718                                  endfloppy:	db 0, 0
  2719                                  
  2720                                  %endif
  2721                                  	
  2722                                  	; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM
  2723                                  
  2724                                  	endfloppy:
  2725 00000838 00                      		db 0
  2726                                  
  2727                                  	; 03/10/2023
  2728                                  
  2729                                  numxdiv	equ ($-BData_start)
  2730                                  numxmod	equ (numxdiv % 16)
  2731                                  
  2732                                  %if (numxmod>0) & (numxmod<16)
  2733 00000839 00<rep 7h>              		times (16-numxmod) db 0
  2734                                  %endif
  2735                                  
  2736                                  ; ----------------------------------------------------------------------------			
  2737                                  
  2738                                  ; Bios_Data ends
  2739                                  	
  2740                                  ; Possibly disposable BIOS data
  2741                                  ; This data follows the	regular	BIOS data,
  2742                                  ; and is part of the same group.
  2743                                  
  2744                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM
  2745                                  ;nul_vid:	db 'NO NAME    ',0 	; null volume id
  2746                                  ;tmp_vid:	db 'NO NAME    ',0	; vid scratch buffer
  2747                                  
  2748                                  ; 03/10/2023
  2749 00000840 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    '
  2749 00000849 2020               
  2750                                  
  2751 0000084B 80                      harddrv:	db 80h			
  2752                                  
  2753                                  end96tpi:
  2754                                  
  2755                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2756                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:084Ch ('bdss:' address)
  2757                                  
  2758                                  ;;*********************************************************************
  2759                                  ;;memory allocation for bdss
  2760                                  ;;*********************************************************************
  2761                                  ;
  2762                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2763                                  ;
  2764                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2765                                  ;
  2766                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2767                                  
  2768                                  
  2769                                  ; 09/12/2023
  2770                                  %if 1
  2771                                  ; Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM BDS structure (FAT32 adaptation)
  2772                                  
  2773 0000084C FFFF                    bdss:		dw 0FFFFh		; ...
  2774                                  					; max_mini_dsk_num equ 23
  2775                                  					; BDS_STRUC (2+max_mini_dsk_num) dup (<>)
  2776                                  					; currently max. 25
  2777                                  					; (MSDOS 6 BDS structure size = 100 bytes)
  2778                                  					; (PCDOS 7.1 BDS structure size = 150 bytes)
  2779                                  					; BDS.link
  2780 0000084E 0000                    		dw 0
  2781 00000850 50                      		db 80			; BDS.drivenum
  2782 00000851 03                      		db 3			; BDS.drivelet
  2783 00000852 0002                    		dw 512			; BDS.BPB (BDS offset 6)
  2784                                  					; 53 bytes BPB for FAT32 fs
  2785                                  					; 25 bytes BPB for FAT16 and FAT12 fs
  2786                                  					; .bytespersec
  2787 00000854 01                      		db 1			; .secperclus
  2788 00000855 0100                    		dw 1			; .resectors
  2789 00000857 02                      		db 2			; .fats
  2790 00000858 1000                    		dw 16			; .direntries
  2791 0000085A 0000                    		dw 0			; .totalsec16
  2792 0000085C F8                      		db 0F8h			; .media
  2793 0000085D 0100                    		dw 1			; .fatsecs16
  2794 0000085F 0000                    		dw 0			; .secpertrack
  2795 00000861 0000                    		dw 0			; .heads
  2796 00000863 00000000                		dd 0			; .hiddensectors
  2797 00000867 00000000                		dd 0			; .totalsecs32
  2798                                  					; (End of FAT12/FAT16 BPB)
  2799                                  					;
  2800                                  					; FAT32 extensions to BDS
  2801 0000086B 00000000                		dd 0			; .fatsecs32 ; BPB_FATSz32 (BDS offset 31)
  2802 0000086F 0000                    		dw 0			; .extflags ; BPB_ExtFlags
  2803 00000871 0000                    		dw 0			; .fsver ; BPB_FSVer
  2804 00000873 00000000                		dd 0			; .rootdirclust ; BPB_RootClus (BDS offset 39)
  2805 00000877 FFFF                    		dw 0FFFFh		; .fsinfo ; BPB_FSInfo ; initialized to -1
  2806 00000879 FFFF                    		dw 0FFFFh		; .bkbootsec ; BPB_BkBootSec ; initialized to -1
  2807 0000087B 00<rep Ch>              		times 12 db 0		; .reserved ; BPB_Reserved (12 zero bytes)
  2808 00000887 00                      		db 0			; BDS.fatsiz (BDS offset 59)
  2809 00000888 0000                    		dw 0			; BDS.opcnt
  2810 0000088A 03                      		db 3
  2811 0000088B 2000                    		dw 20h			; BDS.flags (BDS offset 63)
  2812 0000088D 2800                    		dw 40
  2813 0000088F 00<rep 25h>             		times 37 db 0
  2814 000008B4 FFFFFFFF                		dd 0FFFFFFFFh
  2815 000008B8 00<rep Ch>              		times 12 db 0
  2816 000008C4 FF                      		db -1			; BDS.track (BDS offset 120)
  2817 000008C5 0100                    		dw 1			; BDS.tim_lo ; BDS.bdsm_ismini
  2818 000008C7 0000                    		dw 0			; BDS.tim_hi
  2819 000008C9 4E4F204E414D452020-     		db 'NO NAME    ',0	; BDS.volid
  2819 000008D2 202000             
  2820 000008D5 00000000                		dd 0			; BDS.vol_serial (BDS offset 137)
  2821 000008D9 464154313220202000      		db 'FAT12   ',0		; BDS.filesys_id
  2822 000008E2 FFFF                    bds_1:		dw 0FFFFh
  2823 000008E4 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2823 000008ED 0210000000F8       
  2824 000008F3 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2824 000008FC 000000000000000000 
  2825 00000905 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2825 0000090E FFFFFF0000         
  2826 00000913 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2826 0000091C 0000000003200028   
  2827 00000924 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2827 0000092D 000000000000000000 
  2828 00000936 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2828 0000093F 000000000000000000 
  2829 00000948 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2829 00000951 0000000000         
  2830 00000956 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2830 0000095F 4E4F204E41         
  2831 00000964 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2831 0000096D 00004641           
  2832 00000971 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2833 00000978 FFFF                    bds_2:		dw 0FFFFh
  2834 0000097A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2834 00000983 0210000000F8       
  2835 00000989 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2835 00000992 000000000000000000 
  2836 0000099B 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2836 000009A4 FFFFFF0000         
  2837 000009A9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2837 000009B2 0000000003200028   
  2838 000009BA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2838 000009C3 000000000000000000 
  2839 000009CC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2839 000009D5 000000000000000000 
  2840 000009DE 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2840 000009E7 0000000000         
  2841 000009EC 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2841 000009F5 4E4F204E41         
  2842 000009FA 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2842 00000A03 00004641           
  2843 00000A07 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2844 00000A0E FFFF                    bds_3:		dw 0FFFFh
  2845 00000A10 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2845 00000A19 0210000000F8       
  2846 00000A1F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2846 00000A28 000000000000000000 
  2847 00000A31 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2847 00000A3A FFFFFF0000         
  2848 00000A3F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2848 00000A48 0000000003200028   
  2849 00000A50 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2849 00000A59 000000000000000000 
  2850 00000A62 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2850 00000A6B 000000000000000000 
  2851 00000A74 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2851 00000A7D 0000000000         
  2852 00000A82 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2852 00000A8B 4E4F204E41         
  2853 00000A90 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2853 00000A99 00004641           
  2854 00000A9D 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2855 00000AA4 FFFF                    bds_4:		dw 0FFFFh
  2856 00000AA6 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2856 00000AAF 0210000000F8       
  2857 00000AB5 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2857 00000ABE 000000000000000000 
  2858 00000AC7 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2858 00000AD0 FFFFFF0000         
  2859 00000AD5 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2859 00000ADE 0000000003200028   
  2860 00000AE6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2860 00000AEF 000000000000000000 
  2861 00000AF8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2861 00000B01 000000000000000000 
  2862 00000B0A 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2862 00000B13 0000000000         
  2863 00000B18 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2863 00000B21 4E4F204E41         
  2864 00000B26 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2864 00000B2F 00004641           
  2865 00000B33 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2866 00000B3A FFFF                    		dw 0FFFFh
  2867 00000B3C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2867 00000B45 0210000000F8       
  2868 00000B4B 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2868 00000B54 000000000000000000 
  2869 00000B5D 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2869 00000B66 FFFFFF0000         
  2870 00000B6B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2870 00000B74 0000000003200028   
  2871 00000B7C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2871 00000B85 000000000000000000 
  2872 00000B8E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2872 00000B97 000000000000000000 
  2873 00000BA0 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2873 00000BA9 0000000000         
  2874 00000BAE 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2874 00000BB7 4E4F204E41         
  2875 00000BBC 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2875 00000BC5 00004641           
  2876 00000BC9 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2877 00000BD0 FFFF                    		dw 0FFFFh
  2878 00000BD2 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2878 00000BDB 0210000000F8       
  2879 00000BE1 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2879 00000BEA 000000000000000000 
  2880 00000BF3 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2880 00000BFC FFFFFF0000         
  2881 00000C01 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2881 00000C0A 0000000003200028   
  2882 00000C12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2882 00000C1B 000000000000000000 
  2883 00000C24 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2883 00000C2D 000000000000000000 
  2884 00000C36 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2884 00000C3F 0000000000         
  2885 00000C44 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2885 00000C4D 4E4F204E41         
  2886 00000C52 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2886 00000C5B 00004641           
  2887 00000C5F 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2888 00000C66 FFFF                    		dw 0FFFFh
  2889 00000C68 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2889 00000C71 0210000000F8       
  2890 00000C77 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2890 00000C80 000000000000000000 
  2891 00000C89 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2891 00000C92 FFFFFF0000         
  2892 00000C97 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2892 00000CA0 0000000003200028   
  2893 00000CA8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2893 00000CB1 000000000000000000 
  2894 00000CBA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2894 00000CC3 000000000000000000 
  2895 00000CCC 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2895 00000CD5 0000000000         
  2896 00000CDA 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2896 00000CE3 4E4F204E41         
  2897 00000CE8 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2897 00000CF1 00004641           
  2898 00000CF5 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2899 00000CFC FFFF                    		dw 0FFFFh
  2900 00000CFE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2900 00000D07 0210000000F8       
  2901 00000D0D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2901 00000D16 000000000000000000 
  2902 00000D1F 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2902 00000D28 FFFFFF0000         
  2903 00000D2D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2903 00000D36 0000000003200028   
  2904 00000D3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2904 00000D47 000000000000000000 
  2905 00000D50 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2905 00000D59 000000000000000000 
  2906 00000D62 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2906 00000D6B 0000000000         
  2907 00000D70 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2907 00000D79 4E4F204E41         
  2908 00000D7E 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2908 00000D87 00004641           
  2909 00000D8B 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2910 00000D92 FFFF                    		dw 0FFFFh
  2911 00000D94 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2911 00000D9D 0210000000F8       
  2912 00000DA3 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2912 00000DAC 000000000000000000 
  2913 00000DB5 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2913 00000DBE FFFFFF0000         
  2914 00000DC3 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2914 00000DCC 0000000003200028   
  2915 00000DD4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2915 00000DDD 000000000000000000 
  2916 00000DE6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2916 00000DEF 000000000000000000 
  2917 00000DF8 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2917 00000E01 0000000000         
  2918 00000E06 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2918 00000E0F 4E4F204E41         
  2919 00000E14 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2919 00000E1D 00004641           
  2920 00000E21 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2921 00000E28 FFFF                    		dw 0FFFFh
  2922 00000E2A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2922 00000E33 0210000000F8       
  2923 00000E39 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2923 00000E42 000000000000000000 
  2924 00000E4B 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2924 00000E54 FFFFFF0000         
  2925 00000E59 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2925 00000E62 0000000003200028   
  2926 00000E6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2926 00000E73 000000000000000000 
  2927 00000E7C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2927 00000E85 000000000000000000 
  2928 00000E8E 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2928 00000E97 0000000000         
  2929 00000E9C 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2929 00000EA5 4E4F204E41         
  2930 00000EAA 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2930 00000EB3 00004641           
  2931 00000EB7 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2932 00000EBE FFFF                    		dw 0FFFFh
  2933 00000EC0 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2933 00000EC9 0210000000F8       
  2934 00000ECF 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2934 00000ED8 000000000000000000 
  2935 00000EE1 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2935 00000EEA FFFFFF0000         
  2936 00000EEF 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2936 00000EF8 0000000003200028   
  2937 00000F00 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2937 00000F09 000000000000000000 
  2938 00000F12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2938 00000F1B 000000000000000000 
  2939 00000F24 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2939 00000F2D 0000000000         
  2940 00000F32 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2940 00000F3B 4E4F204E41         
  2941 00000F40 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2941 00000F49 00004641           
  2942 00000F4D 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2943 00000F54 FFFF                    		dw 0FFFFh
  2944 00000F56 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2944 00000F5F 0210000000F8       
  2945 00000F65 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2945 00000F6E 000000000000000000 
  2946 00000F77 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2946 00000F80 FFFFFF0000         
  2947 00000F85 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2947 00000F8E 0000000003200028   
  2948 00000F96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2948 00000F9F 000000000000000000 
  2949 00000FA8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2949 00000FB1 000000000000000000 
  2950 00000FBA 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2950 00000FC3 0000000000         
  2951 00000FC8 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2951 00000FD1 4E4F204E41         
  2952 00000FD6 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2952 00000FDF 00004641           
  2953 00000FE3 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2954 00000FEA FFFF                    		dw 0FFFFh
  2955 00000FEC 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2955 00000FF5 0210000000F8       
  2956 00000FFB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2956 00001004 000000000000000000 
  2957 0000100D 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2957 00001016 FFFFFF0000         
  2958 0000101B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2958 00001024 0000000003200028   
  2959 0000102C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2959 00001035 000000000000000000 
  2960 0000103E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2960 00001047 000000000000000000 
  2961 00001050 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2961 00001059 0000000000         
  2962 0000105E 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2962 00001067 4E4F204E41         
  2963 0000106C 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2963 00001075 00004641           
  2964 00001079 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2965 00001080 FFFF                    		dw 0FFFFh
  2966 00001082 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2966 0000108B 0210000000F8       
  2967 00001091 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2967 0000109A 000000000000000000 
  2968 000010A3 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2968 000010AC FFFFFF0000         
  2969 000010B1 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2969 000010BA 0000000003200028   
  2970 000010C2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2970 000010CB 000000000000000000 
  2971 000010D4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2971 000010DD 000000000000000000 
  2972 000010E6 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2972 000010EF 0000000000         
  2973 000010F4 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2973 000010FD 4E4F204E41         
  2974 00001102 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2974 0000110B 00004641           
  2975 0000110F 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2976 00001116 FFFF                    		dw 0FFFFh
  2977 00001118 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2977 00001121 0210000000F8       
  2978 00001127 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2978 00001130 000000000000000000 
  2979 00001139 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2979 00001142 FFFFFF0000         
  2980 00001147 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2980 00001150 0000000003200028   
  2981 00001158 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2981 00001161 000000000000000000 
  2982 0000116A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2982 00001173 000000000000000000 
  2983 0000117C 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2983 00001185 0000000000         
  2984 0000118A 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2984 00001193 4E4F204E41         
  2985 00001198 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2985 000011A1 00004641           
  2986 000011A5 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2987 000011AC FFFF                    		dw 0FFFFh
  2988 000011AE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2988 000011B7 0210000000F8       
  2989 000011BD 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2989 000011C6 000000000000000000 
  2990 000011CF 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  2990 000011D8 FFFFFF0000         
  2991 000011DD 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  2991 000011E6 0000000003200028   
  2992 000011EE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2992 000011F7 000000000000000000 
  2993 00001200 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  2993 00001209 000000000000000000 
  2994 00001212 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  2994 0000121B 0000000000         
  2995 00001220 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  2995 00001229 4E4F204E41         
  2996 0000122E 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  2996 00001237 00004641           
  2997 0000123B 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  2998 00001242 FFFF                    		dw 0FFFFh
  2999 00001244 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  2999 0000124D 0210000000F8       
  3000 00001253 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3000 0000125C 000000000000000000 
  3001 00001265 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3001 0000126E FFFFFF0000         
  3002 00001273 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3002 0000127C 0000000003200028   
  3003 00001284 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3003 0000128D 000000000000000000 
  3004 00001296 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3004 0000129F 000000000000000000 
  3005 000012A8 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3005 000012B1 0000000000         
  3006 000012B6 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3006 000012BF 4E4F204E41         
  3007 000012C4 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3007 000012CD 00004641           
  3008 000012D1 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3009 000012D8 FFFF                    		dw 0FFFFh
  3010 000012DA 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3010 000012E3 0210000000F8       
  3011 000012E9 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3011 000012F2 000000000000000000 
  3012 000012FB 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3012 00001304 FFFFFF0000         
  3013 00001309 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3013 00001312 0000000003200028   
  3014 0000131A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3014 00001323 000000000000000000 
  3015 0000132C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3015 00001335 000000000000000000 
  3016 0000133E 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3016 00001347 0000000000         
  3017 0000134C 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3017 00001355 4E4F204E41         
  3018 0000135A 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3018 00001363 00004641           
  3019 00001367 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3020 0000136E FFFF                    		dw 0FFFFh
  3021 00001370 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3021 00001379 0210000000F8       
  3022 0000137F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3022 00001388 000000000000000000 
  3023 00001391 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3023 0000139A FFFFFF0000         
  3024 0000139F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3024 000013A8 0000000003200028   
  3025 000013B0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3025 000013B9 000000000000000000 
  3026 000013C2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3026 000013CB 000000000000000000 
  3027 000013D4 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3027 000013DD 0000000000         
  3028 000013E2 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3028 000013EB 4E4F204E41         
  3029 000013F0 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3029 000013F9 00004641           
  3030 000013FD 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3031 00001404 FFFF                    		dw 0FFFFh
  3032 00001406 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3032 0000140F 0210000000F8       
  3033 00001415 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3033 0000141E 000000000000000000 
  3034 00001427 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3034 00001430 FFFFFF0000         
  3035 00001435 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3035 0000143E 0000000003200028   
  3036 00001446 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3036 0000144F 000000000000000000 
  3037 00001458 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3037 00001461 000000000000000000 
  3038 0000146A 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3038 00001473 0000000000         
  3039 00001478 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3039 00001481 4E4F204E41         
  3040 00001486 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3040 0000148F 00004641           
  3041 00001493 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3042 0000149A FFFF                    		dw 0FFFFh
  3043 0000149C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3043 000014A5 0210000000F8       
  3044 000014AB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3044 000014B4 000000000000000000 
  3045 000014BD 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3045 000014C6 FFFFFF0000         
  3046 000014CB 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3046 000014D4 0000000003200028   
  3047 000014DC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3047 000014E5 000000000000000000 
  3048 000014EE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3048 000014F7 000000000000000000 
  3049 00001500 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3049 00001509 0000000000         
  3050 0000150E 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3050 00001517 4E4F204E41         
  3051 0000151C 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3051 00001525 00004641           
  3052 00001529 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3053 00001530 FFFF                    		dw 0FFFFh
  3054 00001532 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3054 0000153B 0210000000F8       
  3055 00001541 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3055 0000154A 000000000000000000 
  3056 00001553 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3056 0000155C FFFFFF0000         
  3057 00001561 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3057 0000156A 0000000003200028   
  3058 00001572 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3058 0000157B 000000000000000000 
  3059 00001584 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3059 0000158D 000000000000000000 
  3060 00001596 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3060 0000159F 0000000000         
  3061 000015A4 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3061 000015AD 4E4F204E41         
  3062 000015B2 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3062 000015BB 00004641           
  3063 000015BF 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3064 000015C6 FFFF                    		dw 0FFFFh
  3065 000015C8 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3065 000015D1 0210000000F8       
  3066 000015D7 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3066 000015E0 000000000000000000 
  3067 000015E9 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3067 000015F2 FFFFFF0000         
  3068 000015F7 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3068 00001600 0000000003200028   
  3069 00001608 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3069 00001611 000000000000000000 
  3070 0000161A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3070 00001623 000000000000000000 
  3071 0000162C 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3071 00001635 0000000000         
  3072 0000163A 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3072 00001643 4E4F204E41         
  3073 00001648 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3073 00001651 00004641           
  3074 00001655 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3075 0000165C FFFF                    bds_24:		dw 0FFFFh
  3076 0000165E 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  3076 00001667 0210000000F8       
  3077 0000166D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3077 00001676 000000000000000000 
  3078 0000167F 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  3078 00001688 FFFFFF0000         
  3079 0000168D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  3079 00001696 0000000003200028   
  3080 0000169E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3080 000016A7 000000000000000000 
  3081 000016B0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  3081 000016B9 000000000000000000 
  3082 000016C2 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  3082 000016CB 0000000000         
  3083 000016D0 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  3083 000016D9 4E4F204E41         
  3084 000016DE 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  3084 000016E7 00004641           
  3085 000016EB 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  3086                                  
  3087                                  %endif
  3088                                  
  3089                                  ; 09/12/2023
  3090                                  %if 0
  3091                                  ; Retro DOS v4.2 (MSDOS 6.22) IO.SYS BDS structure
  3092                                  
  3093                                  bdss:		dw 0FFFFh		
  3094                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3095                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3096                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3097                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3098                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3099                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3100                                  		db 32h,	20h, 20h, 20h, 0
  3101                                  		dw 0FFFFh
  3102                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3103                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3104                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3105                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3106                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3107                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3108                                  		db 32h,	20h, 20h, 20h, 0
  3109                                  		dw 0FFFFh
  3110                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3111                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3112                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3113                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3114                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3115                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3116                                  		db 32h,	20h, 20h, 20h, 0
  3117                                  		dw 0FFFFh
  3118                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3119                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3120                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3121                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3122                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3123                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3124                                  		db 32h,	20h, 20h, 20h, 0
  3125                                  		dw 0FFFFh
  3126                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3127                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3128                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3129                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3130                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3131                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3132                                  		db 32h,	20h, 20h, 20h, 0
  3133                                  		dw 0FFFFh
  3134                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3135                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3136                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3137                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3138                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3139                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3140                                  		db 32h,	20h, 20h, 20h, 0
  3141                                  		dw 0FFFFh
  3142                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3143                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3144                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3145                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3146                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3147                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3148                                  		db 32h,	20h, 20h, 20h, 0
  3149                                  		dw 0FFFFh
  3150                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3151                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3152                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3153                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3154                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3155                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3156                                  		db 32h,	20h, 20h, 20h, 0
  3157                                  		dw 0FFFFh
  3158                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3159                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3160                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3161                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3162                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3163                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3164                                  		db 32h,	20h, 20h, 20h, 0
  3165                                  		dw 0FFFFh
  3166                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3167                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3168                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3169                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3170                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3171                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3172                                  		db 32h,	20h, 20h, 20h, 0
  3173                                  		dw 0FFFFh
  3174                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3175                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3176                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3177                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3178                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3179                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3180                                  		db 32h,	20h, 20h, 20h, 0
  3181                                  		dw 0FFFFh
  3182                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3183                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3184                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3185                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3186                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3187                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3188                                  		db 32h,	20h, 20h, 20h, 0
  3189                                  		dw 0FFFFh
  3190                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3191                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3192                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3193                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3194                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3195                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3196                                  		db 32h,	20h, 20h, 20h, 0
  3197                                  		dw 0FFFFh
  3198                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3199                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3200                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3201                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3202                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3203                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3204                                  		db 32h,	20h, 20h, 20h, 0
  3205                                  		dw 0FFFFh
  3206                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3207                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3208                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3209                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3210                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3211                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3212                                  		db 32h,	20h, 20h, 20h, 0
  3213                                  		dw 0FFFFh
  3214                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3215                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3216                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3217                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3218                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3219                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3220                                  		db 32h,	20h, 20h, 20h, 0
  3221                                  		dw 0FFFFh
  3222                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3223                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3224                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3225                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3226                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3227                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3228                                  		db 32h,	20h, 20h, 20h, 0
  3229                                  		dw 0FFFFh
  3230                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3231                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3232                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3233                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3234                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3235                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3236                                  		db 32h,	20h, 20h, 20h, 0
  3237                                  		dw 0FFFFh
  3238                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3239                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3240                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3241                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3242                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3243                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3244                                  		db 32h,	20h, 20h, 20h, 0
  3245                                  		dw 0FFFFh
  3246                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3247                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3248                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3249                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3250                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3251                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3252                                  		db 32h,	20h, 20h, 20h, 0
  3253                                  		dw 0FFFFh
  3254                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3255                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3256                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3257                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3258                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3259                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3260                                  		db 32h,	20h, 20h, 20h, 0
  3261                                  		dw 0FFFFh
  3262                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3263                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3264                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3265                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3266                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3267                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3268                                  		db 32h,	20h, 20h, 20h, 0
  3269                                  		dw 0FFFFh
  3270                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3271                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3272                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3273                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3274                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3275                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3276                                  		db 32h,	20h, 20h, 20h, 0
  3277                                  		dw 0FFFFh
  3278                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3279                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3280                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3281                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3282                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3283                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3284                                  		db 32h,	20h, 20h, 20h, 0
  3285                                  		dw 0FFFFh
  3286                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  3287                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  3288                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  3289                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  3290                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  3291                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  3292                                  		db 32h,	20h, 20h, 20h, 0
  3293                                  		db 0
  3294                                  %endif
  3295                                  
  3296                                  ;---------------------------------------------------------------------------
  3297                                  ; Possibly disposable data, goes at end of data group
  3298                                  ;***************************************************************************
  3299                                  
  3300                                  ; Possibly disposable data, goes at end of data group
  3301                                  
  3302                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  3303                                  ;
  3304                                  ;	entry:	(ah) = function, 02 or 0a for read.
  3305                                  ;		(dl) = drive number (80h or 81h).
  3306                                  ;		(dh) = head number.
  3307                                  ;		(ch) = cylinder number.
  3308                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  3309                                  ;		(al) = number of sectors.
  3310                                  ;		(es:bx) = address of read buffer.
  3311                                  ;		for more on register contents see rom bios listing.
  3312                                  ;		stack set up for return by an iret.
  3313                                  ;
  3314                                  ;	exit:	(ah) = status of current operation.
  3315                                  ;		(cy) = 1 if failed, 0 if successful.
  3316                                  ;		for other register contents see rom bios listing.
  3317                                  ;
  3318                                  ;	uses:	
  3319                                  ;
  3320                                  ;
  3321                                  ;	warning: uses old13 vector for non-read calls.
  3322                                  ;		does direct calls to the at rom.
  3323                                  ;		does segment arithmatic.
  3324                                  ;
  3325                                  ;	effects: performs disk i/o operation.
  3326                                  
  3327                                  ; 16/10/2022
  3328                                  ; 28/05/2019
  3329                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  3330                                  
  3331                                  ;* offsets into cmd_block for registers
  3332                                  
  3333                                  pre_comp equ 0	;write pre-compensation
  3334                                  sec_cnt	 equ 1	;sector count
  3335                                  sec_num	 equ 2	;sector number
  3336                                  cyl_low	 equ 3	;cylinder number, low part
  3337                                  cyl_high equ 4	;cylinder number, high part
  3338                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  3339                                  		;            bit 4 = drive number, bits 3-0 have head number)
  3340                                  cmd_reg  equ 6	;command register
  3341                                  
  3342                                  ; 01/10/2022
  3343                                  disk_status1	equ 74h
  3344                                  hf_num		equ 75h
  3345                                  control_byte	equ 76h
  3346                                  
  3347                                  ibm_disk_io:				
  3348 000016F2 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  3349 000016F5 720A                    		jb	short atd1	; pass through floppy disk calls. 
  3350 000016F7 80FC02                  		cmp	ah, 2
  3351 000016FA 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  3352 000016FC 80FC0A                  		cmp	ah, 0Ah
  3353 000016FF 7405                    		jz	short atd2	; and call 0Ah (read long).
  3354                                  atd1:
  3355 00001701 2EFF2E[0601]            		jmp	far [cs:Old13]					
  3356                                  		;jmp	cs:Old13	; use rom int 13h handler
  3357                                  ;-----------------------------------------------------------------------------
  3358                                  
  3359                                  atd2:					
  3360 00001706 53                      		push	bx
  3361 00001707 51                      		push	cx
  3362 00001708 52                      		push	dx
  3363 00001709 57                      		push	di
  3364 0000170A 1E                      		push	ds
  3365 0000170B 06                      		push	es
  3366 0000170C 50                      		push	ax
  3367 0000170D B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  3368                                  					; establish bios segment addressing
  3369 00001710 8ED8                    		mov	ds, ax
  3370                                  		; 16/10/2022
  3371 00001712 C606740000              		mov	byte [disk_status1], 0
  3372                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  3373                                  					; initially no error code.
  3374 00001717 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  3375 0000171A 3A167500                		cmp	dl, [hf_num]
  3376                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  3377 0000171E 7207                    		jb	short atd3	; disk number in range
  3378                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  3379 00001720 C606740001              		mov	byte [disk_status1], 1
  3380 00001725 EB20                    		jmp	short atd4	; disk number out of range error,
  3381                                  					; return
  3382                                  ; ----------------------------------------------------------------------------
  3383                                  
  3384                                  atd3:					
  3385 00001727 53                      		push	bx
  3386 00001728 8CC0                    		mov	ax, es
  3387 0000172A C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  3388 0000172D 01D8                    		add	ax, bx
  3389 0000172F 8EC0                    		mov	es, ax
  3390 00001731 5B                      		pop	bx
  3391 00001732 83E30F                  		and	bx, 0Fh
  3392 00001735 0E                      		push	cs
  3393 00001736 E8DF00                  		call	check_dma
  3394 00001739 720C                    		jb	short atd4	; abort if dma across segment boundary
  3395 0000173B 58                      		pop	ax
  3396 0000173C 50                      		push	ax
  3397 0000173D E81A00                  		call	setcmd		; set up command block for disk op
  3398 00001740 BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  3399 00001743 EE                      		out	dx, al		; write out command modifier
  3400 00001744 E86B00                  		call	docmd		; carry out command
  3401                                  ; ----------------------------------------------------------------------------
  3402                                  
  3403                                  atd4:	
  3404                                  
  3405                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  3406                                  ;	      and save a couple bytes while were at it.
  3407                                  				
  3408 00001747 58                      		pop	ax
  3409                                  		;mov	ah, ds:74h	; [disk_status1]
  3410 00001748 8A267400                		mov	ah, [disk_status1]
  3411 0000174C 08E4                    		or	ah, ah
  3412 0000174E 7401                    		jz	short atd5
  3413 00001750 F9                      		stc
  3414                                  atd5:					
  3415 00001751 07                      		pop	es
  3416 00001752 1F                      		pop	ds
  3417 00001753 5F                      		pop	di
  3418 00001754 5A                      		pop	dx
  3419 00001755 59                      		pop	cx
  3420 00001756 5B                      		pop	bx
  3421 00001757 CA0200                  		retf	2		; far return, dropping flags
  3422                                  
  3423                                  ; =============== S U B	R O U T	I N E ========================================
  3424                                  
  3425                                  ;***	setcmd - set up cmd_block for the disk operation
  3426                                  ;
  3427                                  ;	entry:	(ds) = bios data segment.
  3428                                  ;		(es:bx) in seg:000x form.
  3429                                  ;		other registers as in int 13h call
  3430                                  ;	
  3431                                  ;	exit:	cmd_block set up for disk read call.
  3432                                  ;		control_byte set up for disk operation.
  3433                                  ;		(al) = control byte modifier
  3434                                  ;
  3435                                  ;	sets the fields of cmd_block using the register contents
  3436                                  ;	and the contents of the disk parameter block for the given drive.
  3437                                  ;
  3438                                  ;	warning: (ax) destroyed.
  3439                                  ;		does direct calls to the at rom.
  3440                                  
  3441                                  setcmd:		; proc near		
  3442                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  3443                                  		; 16/10/2022
  3444 0000175A A24300                  		mov	[cmd_block+sec_cnt], al
  3445                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  3446 0000175D C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  3447 00001762 80FC02                  		cmp	ah, 2
  3448 00001765 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  3449 00001767 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  3450                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  3451                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  3452                                  setc1:					
  3453 0000176C 88C8                    		mov	al, cl
  3454 0000176E 243F                    		and	al, 3Fh		; mask sector number
  3455                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  3456                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  3457 00001770 A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  3458 00001773 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  3459 00001777 88C8                    		mov	al, cl
  3460 00001779 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  3461                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  3462 0000177C A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  3463 0000177F 89D0                    		mov	ax, dx
  3464 00001781 C0E004                  		shl	al, 4		; drive	number
  3465 00001784 80E40F                  		and	ah, 0Fh
  3466 00001787 08E0                    		or	al, ah		; head number
  3467 00001789 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  3468                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  3469 0000178B A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  3470 0000178E 06                      		push	es
  3471 0000178F 53                      		push	bx
  3472 00001790 0E                      		push	cs
  3473 00001791 E85C00                  		call	get_vec
  3474 00001794 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  3475                                  			 		; write pre-comp from disk parameters
  3476 00001798 C1E802                  		shr	ax, 2
  3477                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  3478 0000179B A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  3479                                  					; only use low part
  3480 0000179E 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  3481                                  					; control byte modifier
  3482 000017A2 5B                      		pop	bx
  3483 000017A3 07                      		pop	es
  3484                                  		;mov	ah, ds:76h	; [control_byte]
  3485 000017A4 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  3486 000017A8 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  3487 000017AB 08C4                    		or	ah, al
  3488                                  		;mov	ds:76h,	ah
  3489 000017AD 88267600                		mov	[control_byte], ah ; mov [76h],al
  3490 000017B1 C3                      		retn
  3491                                  
  3492                                  ; =============== S U B	R O U T	I N E ========================================
  3493                                  
  3494                                  ;***	docmd - carry out read operation to at hard disk
  3495                                  ;
  3496                                  ;	entry:	(es:bx) = address for read in data.
  3497                                  ;		cmd_block set up for disk read.
  3498                                  ;
  3499                                  ;	exit:	buffer at (es:bx) contains data read.
  3500                                  ;		disk_status1 set to error code (0 if success).
  3501                                  ;
  3502                                  ;	
  3503                                  ;
  3504                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  3505                                  ;		no check is made for dma boundary overrun.
  3506                                  ;
  3507                                  ;	effects: programs disk controller.
  3508                                  ;		performs disk input.
  3509                                  
  3510                                  docmd:		; proc near		
  3511 000017B2 89DF                    		mov	di, bx
  3512 000017B4 0E                      		push	cs
  3513 000017B5 E84000                  		call	command
  3514 000017B8 7535                    		jnz	short doc3
  3515                                  doc1:					
  3516 000017BA 0E                      		push	cs
  3517 000017BB E84200                  		call	waitt		; wait for controller to complete read
  3518 000017BE 752F                    		jnz	short doc3
  3519 000017C0 B90001                  		mov	cx, 256		; 256 words per sector
  3520 000017C3 BAF001                  		mov	dx, 1F0h	; hf_port
  3521 000017C6 FC                      		cld			; string op goes up
  3522 000017C7 FA                      		cli			; disable interrupts
  3523                                  					; (bug was forgetting this)
  3524                                  
  3525                                  ;	M062 -- some of these old machines have intermittent failures
  3526                                  ;		when the read is done at full speed. Instead of using
  3527                                  ;		a string rep instruction, we'll use a loop. There is
  3528                                  ;		a slight performance hit, but it only affects these
  3529                                  ;		very old machines with an exact date code match, and
  3530                                  ;		it makes said machines more reliable
  3531                                  ;
  3532                                  ;M062	repz	insw		;read in sector
  3533                                  
  3534                                  rsct_loop:				
  3535 000017C8 6D                      		insw
  3536 000017C9 E2FD                    		loop	rsct_loop
  3537 000017CB FB                      		sti
  3538                                  		; 16/10/2022
  3539 000017CC F606480002              		test	byte [cmd_block+cmd_reg], 02h
  3540                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  3541                                  					; (ds =	40h)
  3542 000017D1 7410                    		jz	short doc2	; no ecc bytes to read.
  3543 000017D3 0E                      		push	cs
  3544 000017D4 E83100                  		call	wait_drq	; wait for controller to complete read
  3545 000017D7 7216                    		jb	short doc3
  3546 000017D9 B90400                  		mov	cx, 4		; 4 bytes of ecc
  3547 000017DC BAF001                  		mov	dx, 1F0h	; hf_port
  3548 000017DF FA                      		cli
  3549 000017E0 F36C                    		rep insb		; read in ecc
  3550 000017E2 FB                      		sti
  3551                                  doc2:					
  3552 000017E3 0E                      		push	cs
  3553 000017E4 E82900                  		call	check_status
  3554 000017E7 7506                    		jnz	short doc3	; operation failed
  3555                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  3556 000017E9 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  3557 000017ED 75CB                    		jnz	short doc1	; loop while more sectors to read
  3558                                  doc3:					
  3559 000017EF C3                      		retn
  3560                                  
  3561                                  ; =============== S U B	R O U T	I N E ========================================
  3562                                  
  3563                                  ;***	define where the rom routines are actually located
  3564                                  ;	   in the buggy old AT BIOS that we might need to
  3565                                  ;	   install a special level of int13 handler for
  3566                                  
  3567                                  ; 16/10/2022
  3568                                  
  3569                                  romsegment 	equ 0F000h  ; segment
  3570                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  3571                                  romwait		equ 2E7Fh   ; offset in romsegment
  3572                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  3573                                  romcheck_status equ 2EF8h   ; offset in romsegment
  3574                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  3575                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  3576                                  romfret		equ 0FF65h  ; far return in rom	
  3577                                  
  3578                                  ;***	get_vec - get pointer to hard disk parameters.
  3579                                  ;
  3580                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  3581                                  ;
  3582                                  ;	exit:	(es:bx) = address of disk parameters table.
  3583                                  ;
  3584                                  ;	uses:	ax for segment computation.
  3585                                  ;
  3586                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  3587                                  ;	or 70h (disk 1).
  3588                                  ;	
  3589                                  ;	warning: (ax) destroyed.
  3590                                  ;		this does a direct call to the at rom.
  3591                                  
  3592                                  get_vec:	; proc near		
  3593                                  		;push	0FF65h		; romfret ; far	return in rom
  3594                                  		;jmp	far ptr	0F000h:2F8Eh
  3595                                  		; 16/10/2022
  3596 000017F0 6865FF                  		push	romfret		; far return in rom
  3597 000017F3 EA8E2F00F0              		jmp	romsegment:romget_vec
  3598                                  
  3599                                  ; =============== S U B	R O U T	I N E ========================================
  3600                                  
  3601                                  ;***	command - send contents of cmd_block to disk controller.
  3602                                  ;
  3603                                  ;	entry:	control_byte 
  3604                                  ;		cmd_block - set up with values for hard disk controller.
  3605                                  ;
  3606                                  ;	exit:	disk_status1 = error code.
  3607                                  ;		nz if error, zr for no error.
  3608                                  ;
  3609                                  ;
  3610                                  ;	warning: (ax), (cx), (dx) destroyed.
  3611                                  ;		does a direct call to the at rom.
  3612                                  ;
  3613                                  ;	effects: programs disk controller.
  3614                                  
  3615                                  command:	; proc near		
  3616                                  		;push	0FF65h		; romfret ; far	return in rom
  3617                                  		;jmp	far ptr	0F000h:2E1Eh
  3618                                  		; 16/10/2022
  3619 000017F8 6865FF                  		push	romfret		; far return in rom
  3620 000017FB EA1E2E00F0              		jmp	romsegment:romcommand
  3621                                  
  3622                                  ; =============== S U B	R O U T	I N E ========================================
  3623                                  
  3624                                  ;***	waitt - wait for disk interrupt
  3625                                  ;
  3626                                  ;	entry:	nothing.
  3627                                  ;
  3628                                  ;	exit:	disk_status1 = error code.
  3629                                  ;		nz if error, zr if no error.
  3630                                  ;
  3631                                  ;
  3632                                  ;	warning: (ax), (bl), (cx) destroyed.
  3633                                  ;		does a direct call to the at rom.
  3634                                  ;		
  3635                                  ;	effects: calls int 15h, function 9000h.
  3636                                  
  3637                                  waitt:		; proc near		
  3638                                  		;push	0FF65h		; romfret ; far	return in rom
  3639                                  		;jmp	far ptr	0F000h:2E7Fh
  3640                                  		; 16/10/2022
  3641 00001800 6865FF                  		push	romfret		; far return in rom
  3642 00001803 EA7F2E00F0              		jmp	romsegment:romwait
  3643                                  
  3644                                  ; =============== S U B	R O U T	I N E ========================================
  3645                                  
  3646                                  ;***	wait_drq - wait for data request.
  3647                                  ;
  3648                                  ;	entry:	nothing.
  3649                                  ;
  3650                                  ;	exit:	disk_status1 = error code.
  3651                                  ;		cy if error, nc if no error.
  3652                                  ;
  3653                                  ;	warning: (al), (cx), (dx) destroyed.
  3654                                  ;		does a direct call to the at rom.
  3655                                  
  3656                                  wait_drq:	; proc near		
  3657                                  		;push	0FF65h		; romfret ; far	return in rom
  3658                                  		;jmp	far ptr	0F000h:2EE2h
  3659                                  		; 16/10/2022
  3660 00001808 6865FF                  		push	romfret		; far return in rom
  3661 0000180B EAE22E00F0              		jmp	romsegment:romwait_drq
  3662                                  
  3663                                  ; =============== S U B	R O U T	I N E ========================================
  3664                                  
  3665                                  ;***	check_status - check hard disk status.
  3666                                  ;
  3667                                  ;	entry:	nothing.
  3668                                  ;
  3669                                  ;	exit:	disk_status1 = error code.
  3670                                  ;		nz if error, zr if no error.
  3671                                  ;
  3672                                  ;	warning: (ax), (cx), (dx) destroyed.
  3673                                  ;		does a direct call to the at rom.
  3674                                  
  3675                                  check_status:	; proc near		
  3676                                  		;push	0FF65h		; romfret ; far	return in rom
  3677                                  		;jmp	far ptr	0F000h:2EF8h
  3678                                  		; 16/10/2022
  3679 00001810 6865FF                  		push	romfret		; far return in rom
  3680 00001813 EAF82E00F0              		jmp	romsegment:romcheck_status
  3681                                  
  3682                                  ; =============== S U B	R O U T	I N E ========================================
  3683                                  
  3684                                  ;***	check_dma - check for dma overrun 64k segment.
  3685                                  ;
  3686                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  3687                                  ;		cmd_block set up for operation.
  3688                                  ;
  3689                                  ;	exit:	disk_status1 - error code.
  3690                                  ;		cy if error, nc if no error.
  3691                                  ;
  3692                                  ;	warning: does a direct call to the at rom.
  3693                                  
  3694                                  check_dma:	; proc near		
  3695                                  		;push	0FF65h		; romfret ; far	return in rom
  3696                                  		;jmp	far ptr	0F000h:2F69h
  3697                                  		; 16/10/2022
  3698 00001818 6865FF                  		push	romfret		; far return in rom
  3699 0000181B EA692F00F0              		jmp	romsegment:romcheck_dma
  3700                                  
  3701                                  ;-----------------------------------------------------------------------------
  3702                                  
  3703                                  endatrom:
  3704                                  
  3705                                  ; ----------------------------------------------------------------------------
  3706                                  
  3707                                  ;; M015 -- begin changes
  3708                                  ;;
  3709                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  3710                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  3711                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  3712                                  ;; If our init code detects this error, it will install this
  3713                                  ;; special Int13 hook through the same mechanism that was set
  3714                                  ;; up for the IBM patch above. This code is also dynamically
  3715                                  ;; relocated by MSINIT.
  3716                                  
  3717                                  compaq_disk_io:
  3718 00001820 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  3719                                  					;
  3720                                  					; the following	label defines the end of the at	rom patch.
  3721                                  					; this is used at configuration	time.
  3722                                  					;
  3723                                  					; warning!!!
  3724                                  					; this code will be dynamically	relocated by msinit
  3725 00001823 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  3726                                  no_hookit:				
  3727                                  		;jmp	cs:Old13
  3728                                  		; 16/10/2022
  3729 00001825 2EFF2E[0601]            		jmp	far [cs:Old13]
  3730                                  
  3731                                  ; ----------------------------------------------------------------------------
  3732                                  
  3733                                  mebbe_hookit:
  3734 0000182A 80FA80                  		cmp	dl, 80h
  3735 0000182D 72F6                    		jb	short no_hookit
  3736 0000182F 1E                      		push	ds
  3737                                  		
  3738                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3739                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1830h
  3740                                  		;push	ax
  3741                                  		;mov	ax, 40h
  3742                                  		;mov	ds, ax
  3743                                  		;pop	ax
  3744 00001830 6A40                    		push	40h
  3745 00001832 1F                      		pop	ds
  3746                                  
  3747 00001833 9C                      		pushf
  3748                                  		;call	cs:Old13
  3749                                  		; 16/10/2022
  3750 00001834 2EFF1E[0601]            		call	far [cs:Old13]
  3751 00001839 1F                      		pop	ds
  3752 0000183A CA0200                  		retf	2
  3753                                  
  3754                                  ; ----------------------------------------------------------------------------
  3755                                  
  3756 0000183D 00                      end_compaq_i13hook: db 0			
  3757                                  
  3758                                  ; =============== S U B	R O U T	I N E ========================================
  3759                                  
  3760                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3761                                  %if 0  
  3762                                  
  3763                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  3764                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  3765                                  
  3766                                  daycnt_to_day:	; proc far
  3767                                  
  3768                                  ; entry: [daycnt] = number of days since 1-1-80
  3769                                  ;
  3770                                  ; return: ch - century in bcd
  3771                                  ;	  cl - year in bcd
  3772                                  ;	  dh - month in bcd
  3773                                  ;	  dl - day in bcd
  3774                                  
  3775                                  		; 16/10/2022		
  3776                                  		push	word [cs:daycnt] ; save daycnt
  3777                                  		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  3778                                  					; # days from 1-1-1980 to 1-1-2000
  3779                                  		jnb	short century20
  3780                                  		mov	byte [cs:base_century], 19
  3781                                  		mov	byte [cs:base_year], 80
  3782                                  		jmp	short years
  3783                                  ; ----------------------------------------------------------------------------
  3784                                  		
  3785                                  century20:				
  3786                                  		mov	byte [cs:base_century], 20
  3787                                  		mov	byte [cs:base_year], 0
  3788                                  		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  3789                                  					; adjust daycnt
  3790                                  years:					
  3791                                  		xor	dx, dx
  3792                                  		mov	ax, [cs:daycnt]
  3793                                  		mov	bx, 1461	; (366+365*3)
  3794                                  					; # of days in a Leap year block
  3795                                  		div	bx		; AX = # of leap block,	DX = daycnt
  3796                                  		mov	[cs:daycnt], dx	; save daycnt left
  3797                                  		mov	bl, 4
  3798                                  		mul	bl		; AX = # of years. Less	than 100
  3799                                  		add	[cs:base_year], al ; So, ah = 0. Adjust year
  3800                                  		inc	word [cs:daycnt]	; set daycnt to	1 base
  3801                                  		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  3802                                  		jbe	short leapyear	; within 366+355+355+355 days.
  3803                                  		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  3804                                  		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  3805                                  		mov	cx, 3		; And next three years are normal
  3806                                  regularyear:				
  3807                                  		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  3808                                  		jbe	short yeardone	; {if (daycnt >	365)
  3809                                  		inc	byte [cs:base_year]	;   { daycnt -=	365
  3810                                  		sub	word [cs:daycnt], 365	;   }
  3811                                  		loop	regularyear	; }
  3812                                  					;
  3813                                  					; should never fall through loop
  3814                                  leapyear:				
  3815                                  		mov	byte [cs:month_tab+1], 29 ; leap year.
  3816                                  					; change month table.
  3817                                  yeardone:				
  3818                                  		xor	bx, bx
  3819                                  		xor	dx, dx
  3820                                  		mov	ax, [cs:daycnt]
  3821                                  		;mov	si, offset month_tab
  3822                                  		mov	si, month_tab	; 19/10/2022
  3823                                  		mov	cx, 12
  3824                                  months:					
  3825                                  		inc	bl
  3826                                  
  3827                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  3828                                  		;mov	dl, [cs:si]
  3829                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  3830                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  3831                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  3832                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  3833                                  		
  3834                                  		mov	dl, [si] ; ?	; mov dl, [cs:si]
  3835                                  		cmp	ax, dx		; cmp daycnt for each month till fit
  3836                                  					; dh=0
  3837                                  		jbe	short month_done
  3838                                  		inc	si		; next month
  3839                                  		sub	ax, dx		; adjust daycnt
  3840                                  		loop	months		;
  3841                                  					; should never fall through loop
  3842                                  month_done:				
  3843                                  		mov	byte [cs:month_tab+1], 28
  3844                                  					; restore month table value
  3845                                  		mov	dl, bl
  3846                                  		mov	dh, [cs:base_year]
  3847                                  		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  3848                                  		call	far [cs:bintobcd]
  3849                                  		;call	cs:bintobcd	; convert "day"	to bcd
  3850                                  					; dl = bcd day,	al = month
  3851                                  		xchg	dl, al
  3852                                  		call	far [cs:bintobcd]
  3853                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  3854                                  		xchg	dh, al
  3855                                  		call	far [cs:bintobcd]
  3856                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  3857                                  		xchg	cl, al
  3858                                  		call	far [cs:bintobcd]
  3859                                  		;call	cs:bintobcd	; ch = bcd century
  3860                                  		mov	ch, al
  3861                                  		pop	word [cs:daycnt] ; restore original value
  3862                                  		retf
  3863                                  
  3864                                  enddaycnttoday:	
  3865                                  
  3866                                  %endif
  3867                                  
  3868                                  ; =============== S U B	R O U T	I N E ========================================
  3869                                  
  3870                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3871                                  %if 0  
  3872                                  
  3873                                  bin_to_bcd:	; proc far		; real time clock support
  3874                                  
  3875                                  ;convert a binary input in al (less than 63h or 99 decimal)
  3876                                  ;into a bcd value in al. ah destroyed.	
  3877                                  		
  3878                                  		push	cx		
  3879                                  		aam			; al=high digit	bcd, ah=low digit bcd
  3880                                  		mov	cl, 4
  3881                                  		shl	ah, cl		; mov the high digit to	high nibble
  3882                                  		or	al, ah
  3883                                  		pop	cx
  3884                                  		retf
  3885                                  %endif
  3886                                  
  3887                                  ; ----------------------------------------------------------------------------
  3888                                  
  3889                                  ; the k09 requires the routines for reading the clock because of the suspend/
  3890                                  ; resume facility. the system clock needs to be reset after resume.
  3891                                  
  3892                                  ; the following routine is executed at resume time when the system
  3893                                  ; powered on after suspension. it reads the real time clock and
  3894                                  ; resets the system time and date, and then irets.
  3895                                  
  3896                                  ; warning!!! this code will be dynamically relocated by msinit.
  3897                                  
  3898                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3899                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:183Eh
  3900                                  int_6Ch:
  3901 0000183E 0E                      		push	cs
  3902 0000183F 1F                      		pop	ds
  3903                                  		;cmp	byte [cs:inHMA], 0  
  3904 00001840 803E[0D00]00            		cmp	byte [inHMA], 0
  3905 00001845 7405                    		jz      short int6c
  3906 00001847 BB[2A07]                		mov     bx, EnsureA20On
  3907 0000184A FFD3                    		call    bx
  3908                                  int6c:					
  3909                                  		;push	cs
  3910                                  		;pop	ds
  3911 0000184C 8F06[F805]              		pop	word [int6c_ret_addr]	; pop off return address
  3912 00001850 8F06[FA05]              		pop	word [int6c_ret_addr+2]
  3913 00001854 9D                      		popf
  3914 00001855 E81300                  		call	read_real_date	; get the date from the clock
  3915 00001858 FA                      		cli
  3916 00001859 8936[8904]              		mov	[daycnt], si	; update dos copy of date
  3917 0000185D FB                      		sti
  3918 0000185E E8B900                  		call	read_real_time	; get the time from the	rtc
  3919 00001861 FA                      		cli
  3920 00001862 B401                    		mov	ah, 1
  3921 00001864 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  3922                                  					; CX:DX	= clock	count
  3923                                  					; Return: time of day set
  3924 00001866 FB                      		sti
  3925                                  		;jmp	int6c_ret_addr	; long jump
  3926                                  		; 16/10/2022
  3927 00001867 FF2E[F805]              		jmp	far [int6c_ret_addr] ; long jump
  3928                                  
  3929                                  ; =============== S U B	R O U T	I N E ========================================
  3930                                  
  3931                                  ;   read_real_date reads real-time clock for date and returns the number
  3932                                  ;   of days elapsed since 1-1-80 in si
  3933                                  
  3934                                  read_real_date:	; proc near		
  3935 0000186B 50                      		push	ax
  3936 0000186C 51                      		push	cx
  3937 0000186D 52                      		push	dx
  3938 0000186E 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3939 00001870 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3940                                  					; Return: CX:DX	= clock	count
  3941                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3942                                  					; midnight
  3943                                  					; Otherwise, AL	> 0
  3944 00001872 5A                      		pop	dx
  3945 00001873 59                      		pop	cx
  3946 00001874 58                      		pop	ax
  3947 00001875 50                      		push	ax
  3948 00001876 53                      		push	bx
  3949 00001877 51                      		push	cx
  3950 00001878 52                      		push	dx
  3951                                  		;mov	word [cs:daycnt2], 1
  3952                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3953                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:187Ah
  3954 00001879 C706[0006]0100          		mov	word [daycnt2], 1
  3955                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3956 0000187F B404                    		mov	ah, 4
  3957 00001881 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3958                                  					; Return: DL = day in BCD
  3959                                  					; DH = month in	BCD
  3960                                  					; CL = year in BCD
  3961                                  					; CH = century (19h or 20h)
  3962 00001883 7303                    		jnb	short read_ok
  3963 00001885 E98300                  		jmp	r_d_ret
  3964                                  ;-----------------------------------------------------------------------------
  3965                                  
  3966                                  read_ok:
  3967 00001888 882E[FC05]              		mov	[bin_date_time], ch
  3968 0000188C 880E[FD05]              		mov	[bin_date_time+1], cl
  3969 00001890 8836[FE05]              		mov	[bin_date_time+2], dh
  3970 00001894 8816[FF05]              		mov	[bin_date_time+3], dl
  3971                                  		;mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3972                                  		; 08/08/2023
  3973                                  		;mov	byte [daycnt2], 2
  3974 00001898 FE06[0006]              		inc	byte [daycnt2] ; 2
  3975 0000189C E83401                  		call	bcd_verify	; verify bcd values in range
  3976 0000189F 726A                    		jb	short r_d_ret	; some value out of range
  3977                                  		;mov	word [cs:daycnt2], 3
  3978                                  		; 08/08/2023
  3979                                  		;mov	byte [daycnt2], 3
  3980 000018A1 FE06[0006]              		inc	byte [daycnt2] ; 3
  3981 000018A5 E8DB00                  		call	date_verify
  3982 000018A8 7261                    		jb	short r_d_ret
  3983                                  		;mov	word [cs:daycnt2], 0
  3984                                  		; 08/08/2023
  3985 000018AA C606[0006]00            		mov	byte [daycnt2], 0
  3986 000018AF E8A100                  		call	in_bin
  3987 000018B2 A0[FD05]                		mov	al, [bin_date_time+1]
  3988 000018B5 98                      		cbw
  3989 000018B6 803E[FC05]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3990 000018BB 7503                    		jnz	short century_19 ; no
  3991 000018BD 83C064                  		add	ax, 100		; add in a century
  3992                                  century_19:				
  3993 000018C0 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3994 000018C3 B104                    		mov	cl, 4		; leap year every 4
  3995 000018C5 F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3996 000018C7 88E3                    		mov	bl, ah		; save odd years
  3997 000018C9 98                      		cbw			; zero ah
  3998 000018CA B9B505                  		mov	cx, 1461	; 366+(3*365)
  3999                                  					; # of days in leap year blocks
  4000 000018CD F7E1                    		mul	cx
  4001                                  		;mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  4002                                  		; 08/08/2023
  4003 000018CF A3[0006]                		mov	[daycnt2], ax
  4004 000018D2 88D8                    		mov	al, bl		; get odd years	count
  4005 000018D4 98                      		cbw
  4006 000018D5 09C0                    		or	ax, ax
  4007 000018D7 740B                    		jz	short leap_year
  4008 000018D9 B96D01                  		mov	cx, 365		; days in year
  4009 000018DC F7E1                    		mul	cx
  4010                                  		;add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  4011                                  		; 08/08/2023
  4012 000018DE 0106[0006]              		add	[daycnt2], ax
  4013 000018E2 EB07                    		jmp	short leap_adjustment ;	account	for leap year
  4014                                  					; possibly account for a leap day
  4015                                  ;-----------------------------------------------------------------------------
  4016                                  
  4017                                  leap_year:
  4018 000018E4 803E[FE05]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  4019 000018E9 7604                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  4020                                  leap_adjustment:
  4021                                  		;inc	word [cs:daycnt2] ; account for leap day
  4022                                  		; 08/08/2023
  4023 000018EB FF06[0006]              		inc	word [daycnt2]
  4024                                  no_leap_adjustment:			
  4025 000018EF 8A0E[FF05]              		mov	cl, [bin_date_time+3] ; get days of month
  4026 000018F3 30ED                    		xor	ch, ch
  4027 000018F5 49                      		dec	cx		; because of offset from day 1,	not day	0
  4028                                  		;add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  4029                                  		; 08/08/2023
  4030 000018F6 010E[0006]              		add	[daycnt2], cx
  4031 000018FA 8A0E[FE05]              		mov	cl, [bin_date_time+2] ; get month
  4032                                  		; 08/08/2023
  4033                                  		;xor	ch, ch
  4034 000018FE 49                      		dec	cx		; january starts at offset 0
  4035                                  		
  4036                                  		; 08/08/2023
  4037                                  		;shl	cx, 1		; word offset
  4038                                  		;;mov	si, month_table
  4039                                  		;add	si, cx
  4040                                  		;; 16/10/2022
  4041                                  		;; ds must be same with cs here, if so..
  4042                                  		;; what for cs: prefixes are used !?)
  4043                                  		;; mov	ax, [cs:si]
  4044                                  		;; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  4045                                  		;mov	ax, [si]	; mov ax, [cs:si]
  4046                                  		;			; get #	days in	previous months
  4047                                  		;add	[cs:daycnt2], ax
  4048                                  
  4049                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  4050                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1907h
  4051 000018FF B400                    		mov	ah, 0
  4052 00001901 BE[8F04]                		mov	si, month_tab
  4053                                  r_d_sum_loop:
  4054 00001904 AC                      		lodsb
  4055 00001905 0106[0006]              		add	[daycnt2], ax
  4056 00001909 E2F9                    		loop	r_d_sum_loop
  4057                                  r_d_ret:
  4058                                  		;mov	si, [cs:daycnt2]
  4059                                  		; 08/08/2023
  4060 0000190B 8B36[0006]              		mov	si, [daycnt2]
  4061 0000190F 5A                      		pop	dx
  4062 00001910 59                      		pop	cx
  4063 00001911 5B                      		pop	bx
  4064 00001912 58                      		pop	ax
  4065 00001913 C3                      		retn
  4066                                  
  4067                                  ;-----------------------------------------------------------------------------
  4068                                  
  4069                                  r_t_retj:				
  4070 00001914 31C9                    		xor	cx, cx
  4071 00001916 31D2                    		xor	dx, dx
  4072 00001918 EB38                    		jmp	short r_t_ret
  4073                                  
  4074                                  ; =============== S U B	R O U T	I N E ========================================
  4075                                  
  4076                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  4077                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  4078                                  
  4079                                  read_real_time:	; proc near		
  4080 0000191A B402                    		mov	ah, 2
  4081 0000191C CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  4082                                  					; Return: CH = hours in	BCD
  4083                                  					; CL = minutes in BCD
  4084                                  					; DH = seconds in BCD
  4085 0000191E 72F4                    		jb	short r_t_retj
  4086 00001920 882E[FC05]              		mov	[bin_date_time], ch ; hours
  4087 00001924 880E[FD05]              		mov	[bin_date_time+1], cl ; minutes
  4088 00001928 8836[FE05]              		mov	[bin_date_time+2], dh ; seconds
  4089 0000192C C606[FF05]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  4090 00001931 E89F00                  		call	bcd_verify
  4091 00001934 72DE                    		jb	short r_t_retj
  4092 00001936 E88500                  		call	time_verify
  4093 00001939 72D9                    		jb	short r_t_retj
  4094 0000193B E81500                  		call	in_bin		; from bcd to bin
  4095 0000193E 8A2E[FC05]              		mov	ch, [bin_date_time]
  4096 00001942 8A0E[FD05]              		mov	cl, [bin_date_time+1]
  4097 00001946 8A36[FE05]              		mov	dh, [bin_date_time+2]
  4098 0000194A 8A16[FF05]              		mov	dl, [bin_date_time+3]
  4099                                  		; 16/10/2022
  4100                                  		; 17/09/2022
  4101                                  		; 31/05/2019
  4102 0000194E FF1E[0606]              		call	far [ttticks] 
  4103                                  		;call	dword ptr ttticks ; note: indirect far call
  4104                                  					; cx:dx	= number of ticks
  4105                                  					; (at 18.2 ticks per sec.)
  4106                                  r_t_ret:				
  4107 00001952 C3                      		retn
  4108                                  
  4109                                  ; =============== S U B	R O U T	I N E =======================================
  4110                                  
  4111                                  ;   in_bin converts bin_date_time values from bcd to bin
  4112                                  
  4113                                  in_bin:		; proc near
  4114 00001953 A0[FC05]                		mov	al, [bin_date_time] ; century or hours
  4115 00001956 E81F00                  		call	bcd_to_bin
  4116 00001959 A2[FC05]                		mov	[bin_date_time], al
  4117 0000195C A0[FD05]                		mov	al, [bin_date_time+1] ; years or minutes
  4118 0000195F E81600                  		call	bcd_to_bin
  4119 00001962 A2[FD05]                		mov	[bin_date_time+1], al
  4120 00001965 A0[FE05]                		mov	al, [bin_date_time+2] ; months or seconds
  4121 00001968 E80D00                  		call	bcd_to_bin
  4122 0000196B A2[FE05]                		mov	[bin_date_time+2], al
  4123 0000196E A0[FF05]                		mov	al, [bin_date_time+3] ; days (not used for time)
  4124 00001971 E80400                  		call	bcd_to_bin
  4125 00001974 A2[FF05]                		mov	[bin_date_time+3], al
  4126 00001977 C3                      		retn
  4127                                  
  4128                                  ; =============== S U B	R O U T	I N E =======================================
  4129                                  
  4130                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  4131                                  ;   a binary representation in al
  4132                                  ;   ah is destroyed
  4133                                  
  4134                                  bcd_to_bin:	; proc near
  4135 00001978 88C4                    		mov	ah, al
  4136 0000197A 240F                    		and	al, 0Fh
  4137 0000197C B104                    		mov	cl, 4
  4138 0000197E D2EC                    		shr	ah, cl
  4139 00001980 D50A                    		aad
  4140 00001982 C3                      		retn
  4141                                  
  4142                                  ; =============== S U B	R O U T	I N E ========================================
  4143                                  
  4144                                  ;   date_verify loosely checks bcd date values to be in range
  4145                                  ;   in bin_date_time
  4146                                  
  4147                                  date_verify:	; proc near
  4148 00001983 803E[FC05]20            		cmp	byte [bin_date_time], 20h ; century check
  4149 00001988 7732                    		ja	short date_error
  4150 0000198A 740E                    		jz	short century_20 ; jmp in 21th century
  4151 0000198C 803E[FC05]19            		cmp	byte [bin_date_time], 19h ; century check
  4152                                  		;jb	short date_error
  4153                                  		; 12/12/2022
  4154 00001991 722A                    		jb	short date_err2
  4155 00001993 803E[FD05]80            		cmp	byte [bin_date_time+1], 80h ; year check
  4156                                  		;jb	short date_error
  4157                                  		; 12/12/2022
  4158 00001998 7223                    		jb	short date_err2
  4159                                  century_20:
  4160 0000199A 803E[FD05]99            		cmp	byte [bin_date_time+1], 99h ; year check
  4161 0000199F 771B                    		ja	short date_error
  4162 000019A1 803E[FE05]12            		cmp	byte [bin_date_time+2], 12h ; month check
  4163 000019A6 7714                    		ja	short date_error
  4164 000019A8 803E[FE05]00            		cmp	byte [bin_date_time+2], 0
  4165                                  		;jbe	short date_error
  4166 000019AD 760D                    		jna	short date_error
  4167 000019AF 803E[FF05]31            		cmp	byte [bin_date_time+3], 31h ; day check
  4168 000019B4 7706                    		ja	short date_error
  4169                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  4170                                  		;;jbe	short date_error
  4171                                  		;jna	short date_error
  4172                                  		; 12/12/2022
  4173                                  		; cf=0
  4174                                  		;clc
  4175                                  		; 12/12/2022
  4176 000019B6 803E[FF05]01            		cmp	byte [bin_date_time+3], 1 ; day check
  4177 000019BB C3                      		retn
  4178                                  ;-----------------------------------------------------------------------------
  4179                                  
  4180                                  date_error:
  4181 000019BC F9                      		stc
  4182                                  date_err2:
  4183 000019BD C3                      		retn
  4184                                  
  4185                                  ; =============== S U B	R O U T	I N E ========================================
  4186                                  
  4187                                  ; time_verify very loosely checks bcd date values to be in range
  4188                                  ; in bin_date_time
  4189                                  
  4190                                  time_verify:	; proc near
  4191 000019BE 803E[FC05]24            		cmp	byte [bin_date_time], 24h ; hour check
  4192 000019C3 770C                    		ja	short time_error
  4193 000019C5 803E[FD05]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  4194 000019CA 7705                    		ja	short time_error
  4195                                  		; 12/12/2022h
  4196                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  4197                                  		;ja	short time_error
  4198                                  		;clc
  4199                                  		;retn
  4200                                  		; 12/12/2022
  4201 000019CC 803E[FE05]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  4202                                  time_error:
  4203                                  bv_error:
  4204 000019D1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  4205 000019D2 C3                      		retn
  4206                                  
  4207                                  ; ----------------------------------------------------------------------------
  4208                                  
  4209                                  ;time_error:				
  4210                                  		;stc
  4211                                  		;retn
  4212                                  
  4213                                  ; =============== S U B	R O U T	I N E ========================================
  4214                                  
  4215                                  ;   bcd_verify checks values in bin_date_time to be valid
  4216                                  ;   bcd numerals.  carry set if any nibble out of range
  4217                                  
  4218                                  bcd_verify:	; proc near
  4219 000019D3 B90400                  		mov	cx, 4		; 4 bytes to check
  4220 000019D6 BB[FC05]                		mov	bx, bin_date_time
  4221                                  bv_loop:
  4222 000019D9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  4223 000019DB 88C4                    		mov	ah, al
  4224 000019DD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  4225                                  					; is 1's place in range?
  4226 000019E0 3C0A                    		cmp	al, 10
  4227 000019E2 77ED                    		ja	short bv_error	; jmp out of range
  4228 000019E4 D0EC                    		shr	ah, 1
  4229 000019E6 D0EC                    		shr	ah, 1
  4230 000019E8 D0EC                    		shr	ah, 1
  4231 000019EA D0EC                    		shr	ah, 1
  4232 000019EC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  4233 000019EF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  4234 000019F2 77DD                    		ja	short bv_error	; jmp out of range
  4235 000019F4 43                      		inc	bx		; next byte
  4236 000019F5 49                      		dec	cx
  4237 000019F6 75E1                    		jnz	short bv_loop
  4238 000019F8 F8                      		clc			; set success flag
  4239 000019F9 C3                      		retn
  4240                                  ; ----------------------------------------------------------------------------
  4241                                  
  4242                                  		; 12/12/2022
  4243                                  ;bv_error:
  4244                                  		;stc			; set error flag
  4245                                  		;retn
  4246                                  
  4247                                  ; ----------------------------------------------------------------------------
  4248                                  
  4249                                  endk09:
  4250                                  
  4251                                  ; ----------------------------------------------------------------------------
  4252                                  
  4253                                  ;------------------------------------------------------------------------
  4254                                  ;									:
  4255                                  ;	System initialization						:
  4256                                  ;									:
  4257                                  ;	The entry conditions are established by the bootstrap		:
  4258                                  ;	loader and are considered unknown. The following jobs		:
  4259                                  ;	will be performed by this module:				:
  4260                                  ;									:
  4261                                  ;	1.	All device initialization is performed			:
  4262                                  ;	2.	A local stack is set up and DS:SI are set		:
  4263                                  ;		to point to an initialization table. Then		:
  4264                                  ;		an inter-segment call is made to the first		:
  4265                                  ;		byte of the dos 					:
  4266                                  ;	3.	Once the dos returns from this call the ds		:
  4267                                  ;		register has been set up to point to the start		:
  4268                                  ;		of free memory. The initialization will then		:
  4269                                  ;		load the command program into this area 		:
  4270                                  ;		beginning at 100 hex and transfer control to		:
  4271                                  ;		this program.						:
  4272                                  ;									:
  4273                                  ;------------------------------------------------------------------------
  4274                                  
  4275                                  ; 01/10/2022
  4276                                  ; 08/01/2018 - Retro DOS v4.0
  4277                                  
  4278                                  ; drvfat must be the first location of freeable space!
  4279                                  
  4280                                  align 2
  4281                                  		;db 90h
  4282                                  
  4283                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM 7.1)
  4284                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A0Ch)
  4285                                  
  4286                                  ; 30/12/2022
  4287                                  ; (MSDOS 6.21 IO.SYS, BIOSDATA:16D6h)
  4288                                  	
  4289 000019FA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  4290                                  ; 09/12/2023
  4291                                  ;bios_l:	dw 0			; first	sector of data (low word)
  4292                                  ;bios_h:	dw 0			; first	sector of data (high word)
  4293                                  First_Data_Sector:
  4294 000019FC 0000                    		dw 0
  4295 000019FE 0000                    		dw 0
  4296 00001A00 0000                    doscnt:		dw 0			; how many sectors to read
  4297                                  ;fbigfat:	db 0			; flags	for drive
  4298 00001A02 0000                    fatloc:		dw 0			; seg addr of fat sector
  4299 00001A04 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  4300                                  ; 09/12/2023
  4301 00001A06 00                      fbigfat:	db 0			; flags	for drive
  4302 00001A07 80                      rom_drv_num:	db 80h			; rom drive number
  4303 00001A08 0002                    md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  4304                                  ; 12/12/2023
  4305                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  4306 00001A0A FFFF                    last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  4307                                  
  4308                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  4309                                  ; call to determine drive parameters.
  4310                                  
  4311 00001A0C 02                      num_heads:	db 2	; dw 2		; number of heads returned by rom
  4312 00001A0D 00                      		db 0	; 09/12/2023
  4313                                  ;sec_trk:	db 9			; sec/trk returned by rom
  4314 00001A0E 28                      num_cyln:	db 40	; dw 40		; number of cylinders returned by rom
  4315 00001A0F 00                      		db 0	; 09/12/2023
  4316                                  ; 09/12/2023
  4317 00001A10 09                      sec_trk:	db 9			; sec/trk returned by rom
  4318 00001A11 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  4319                                  
  4320                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  4321                                  Orig_Int1Eh_Table:
  4322 00001A12 0000                    		dw 0
  4323 00001A14 0000                    		dw 0
  4324                                  
  4325                                  ; ----------------------------------------------------------------------------
  4326                                  
  4327                                  ; 09/12/2023
  4328                                  %if 0
  4329                                  
  4330                                  disktable:	dw 512,	0100h, 64, 0	; warning !!! old values
  4331                                  		dw 2048, 0201h, 112, 0
  4332                                  		dw 8192, 0402h, 256, 0
  4333                                  		dw 32680, 0803h, 512, 0	; warning !!! old values
  4334                                  		dw 65535, 1004h, 1024, 0
  4335                                  					; default disktable under
  4336                                  					; the assumption of total fat size <= 128 kb,
  4337                                  					; and the maximum size of fat entry = 16 bit.
  4338                                  %endif
  4339                                  
  4340                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM 7.1)
  4341                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A2Ah)
  4342                                  
  4343                                  		; 09/12/2023
  4344                                  		; 08/08/2023
  4345                                  		; disktable.totalsectors: resw 1 ; high word
  4346                                  		;			  resw 1 ; low word
  4347                                  		; disktable.shiftcount:   resb 1
  4348                                  		; disktable.secperclus:   resb 1
  4349                                  		; disktable.rdirentries:  resw 1
  4350                                  		; disktable.bigflag:      resw 1
  4351 00001A16 0000A87F0308000200-     disktable2:	dw 0, 32680, 0803h, 512, 0 ; for compatibility.
  4351 00001A1F 00                 
  4352                                  					   ; (32680 sectors, 16340 KB)
  4353 00001A20 040000000204000240-     		dw 4, 0, 0402h, 512, 40h   ; covers upto 134 mb media.
  4353 00001A29 00                 
  4354                                  					   ; fbig = 40h  ; (40000h sectors = 128 MB)
  4355 00001A2A 080000000308000240-     		dw 8, 0, 0803h, 512, 40h   ; upto 268 mb ; (80000h sectors = 256 MB)
  4355 00001A33 00                 
  4356 00001A34 100000000410000240-     		dw 16, 0, 1004h, 512, 40h  ; upto 536 mb ; (100000h sectors = 512 MB)
  4356 00001A3D 00                 
  4357 00001A3E 200000000520000240-     		dw 32, 0, 2005h, 512, 40h  ; upto 1072 mb ; (200000h sectors = 1024 MB)
  4357 00001A47 00                 
  4358 00001A48 400000000640000240-     		dw 64, 0, 4006h, 512, 40h  ; upto 2144 mb ; (400000h sectors = 2048 MB)
  4358 00001A51 00                 
  4359                                  		; 09/12/2023
  4360                                  		;dw 128, 0, 8007h, 512, 40h ; upto 4288 mb ; (800000h sectors = 4096 MB)
  4361 00001A52 FFFFFFFF0308000060-     		dw 0FFFFh, 0FFFFh, 0803h, 0, 60h ; FAT32 (> 2144MB)
  4361 00001A5B 00                 
  4362                                  					   ; (fbig and fbigbig flags are set)			
  4363                                  			
  4364                                  ; ----------------------------------------------------------------------------
  4365                                  
  4366                                  ;******************************************************
  4367                                  ;variables for mini disk initialization
  4368                                  ;******************************************************
  4369                                  
  4370                                  ; 01/10/2022
  4371                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  4372                                  
  4373 00001A5C 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  4374 00001A5D 00                      hnum:		db 0			; real number of hardfiles
  4375 00001A5E [3C05]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  4376 00001A60 [4C08]                  end_of_bdss:	dw bdss			; offset value of the ending address
  4377                                  					; of bds table. needed to figure out
  4378                                  					; the dosdatasg address.
  4379 00001A62 0000                    mini_hdlim:	dw 0			
  4380 00001A64 0000                    mini_seclim:	dw 0
  4381                                  
  4382                                  ; 19/12/2023
  4383                                  ; 09/12/2023
  4384                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A7Ah)
  4385                                  ;ld_p_number:	dw 2BADh		; (for 'find_mini_partition' proc)
  4386                                  
  4387                                  ;end of mini disk init variables **********************
  4388                                  
  4389                                  ; ----------------------------------------------------------------------------
  4390                                  			
  4391 00001A66 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  4392                                  
  4393                                  ; 13/12/2022
  4394                                  %if 0
  4395                                  
  4396                                  ;align 2
  4397                                  		db  90h	
  4398                                  
  4399                                  ; the following are the recommended bpbs for the media that we know of so far.
  4400                                  
  4401                                  ;struc bpbx
  4402                                  ;   resw 1 ; 512
  4403                                  ;   resb 1
  4404                                  ;   resw 1 ; 1
  4405                                  ;   resb 1 ; 2
  4406                                  ;   resw 1
  4407                                  ;   resw 1
  4408                                  ;   resb 1
  4409                                  ;   resw 1
  4410                                  ;   resw 1
  4411                                  ;   resw 1 ; 2
  4412                                  ;   resw 1
  4413                                  ;   resw 1 ; hidden sector high
  4414                                  ;   resd 1 ; extended total sectors
  4415                                  ;.size:
  4416                                  ;endstruc
  4417                                  
  4418                                  ; 08/01/2019 - Retro DOS v4.0
  4419                                  
  4420                                  ; 20/04/2019
  4421                                  
  4422                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  4423                                  
  4424                                  ; 09/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  4425                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A86h)
  4426                                  
  4427                                  ; 09/12/2022
  4428                                  BPB48T:
  4429                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  4430                                  		; 48 tpi diskettes	;
  4431                                  		dw	512		; physical sector size in bytes
  4432                                  		db	2		; sectors/allocation unit
  4433                                  		dw	1		; reserved sectors for dos
  4434                                  		db	2		; number of allocation tables
  4435                                  		dw	112		; number of directory entries
  4436                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  4437                                  		db	0FDh		; media descriptor
  4438                                  		dw	2		; number of fat sectors
  4439                                  		dw	9		; sectors per track
  4440                                  		dw	2		; heads
  4441                                  		dw	0		; hidden sector count (low word)
  4442                                  		dw	0		; hidden sector (high)
  4443                                  		dw	0		; number of sectors (low)
  4444                                  		dw	0		; number of sectors (high)
  4445                                  		; 09/12/2023
  4446                                  		; FAT32 extensions (to BDS)
  4447                                  		times	28 db 0
  4448                                  		;
  4449                                  		db 90h
  4450                                  ;align 2
  4451                                  BPB96T:
  4452                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  4453                                  		; 96 tpi diskettes	;
  4454                                  		dw	512		; physical sector size in bytes
  4455                                  		db	1		; sectors/allocation unit
  4456                                  		dw	1		; reserved sectors for dos
  4457                                  		db	2		; number of allocation tables
  4458                                  		dw	224		; number of directory entries
  4459                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  4460                                  		db	0F9h		; media descriptor
  4461                                  		dw	7		; number of fat sectors
  4462                                  		dw	15		; sectors per track
  4463                                  		dw	2		; heads
  4464                                  		dw	0		; hidden sector count (low word)
  4465                                  		dw	0		; hidden sector (high)
  4466                                  		dw	0		; number of sectors (low)
  4467                                  		dw	0		; number of sectors (high)
  4468                                  		; 09/12/2023
  4469                                  		; FAT32 extensions (to BDS)
  4470                                  		times	28 db 0
  4471                                  		;
  4472                                  		db 90h
  4473                                  ;align 2
  4474                                  BPB35:
  4475                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  4476                                  		; 3.5" diskettes - 720 KB ;		
  4477                                  		dw	512		; physical sector size in bytes
  4478                                  		db	2		; sectors/allocation unit
  4479                                  		dw	1		; reserved sectors for dos
  4480                                  		db	2		; number of allocation tables
  4481                                  		dw	112		; number of directory entries
  4482                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  4483                                  		db	0F9h		; media descriptor
  4484                                  		dw	3		; number of fat sectors
  4485                                  		dw	9		; sectors per track
  4486                                  		dw	2		; heads
  4487                                  		dw	0		; hidden sector count (low word)
  4488                                  		dw	0		; hidden sector (high)
  4489                                  		dw	0		; number of sectors (low)
  4490                                  		dw	0		; number of sectors (high)
  4491                                  		; 09/12/2023
  4492                                  		; FAT32 extensions (to BDS)
  4493                                  		times	28 db 0
  4494                                  		;
  4495                                  		db 90h
  4496                                  ;align 2
  4497                                  
  4498                                  ;align 2
  4499                                  ;BPB144:
  4500                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  4501                                  ;
  4502                                  ;		dw	512		; physical sector size in bytes
  4503                                  ;		db	1		; sectors/allocation unit
  4504                                  ;		dw	1		; reserved sectors for dos
  4505                                  ;		db	2		; number of allocation tables
  4506                                  ;		dw	224		; number of directory entries
  4507                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  4508                                  ;		db	0F0h		; media descriptor
  4509                                  ;		dw	9		; number of fat sectors
  4510                                  ;		dw	18		; sectors per track
  4511                                  ;		dw	2		; heads
  4512                                  ;		dw	0		; hidden sector count (low word)
  4513                                  ;		dw	0		; hidden sector (high)
  4514                                  ;		dw	0		; number of sectors (low)
  4515                                  ;		dw	0		; number of sectors (high)
  4516                                  ;
  4517                                  ;		db 90h
  4518                                  ;align 2
  4519                                  
  4520                                  BPB288:
  4521                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  4522                                  		; 3.5" diskettes - 2.88 MB ;	 
  4523                                  		dw	512		; physical sector size in bytes
  4524                                  		db	2		; sectors/allocation unit
  4525                                  		dw	1		; reserved sectors for dos
  4526                                  		db	2		; number of allocation tables
  4527                                  		dw	240		; number of directory entries
  4528                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  4529                                  		db	0F0h		; media descriptor
  4530                                  		dw	3		; number of fat sectors
  4531                                  		dw	9		; sectors per track
  4532                                  		dw	2		; heads
  4533                                  		dw	0		; hidden sector count (low word)
  4534                                  		dw	0		; hidden sector (high)
  4535                                  		dw	0		; number of sectors (low)
  4536                                  		dw	0		; number of sectors (high)
  4537                                  		; 09/12/2023
  4538                                  		; FAT32 extensions (to BDS)
  4539                                  		times	28 db 0
  4540                                  		;
  4541                                  		db 90h
  4542                                  ;align 2
  4543                                  
  4544                                  %endif
  4545                                  
  4546                                  ; ----------------------------------------------------------------------------
  4547                                  					; align	2
  4548                                  ; 09/12/2022
  4549                                  %if 0
  4550                                  bpbtable:	dw bpb48t		; 48tpi	drives
  4551                                  		dw bpb96t		; 96tpi	drives
  4552                                  		dw bpb35		; 3.5" drives
  4553                                  		dw bpb35		; unused 8" diskette
  4554                                  		dw bpb35		; unused 8" diskette
  4555                                  		dw bpb35		; used for hard	disk
  4556                                  		dw bpb35		; used for tape	drive
  4557                                  		dw bpb35		; FFOTHER
  4558                                  		dw bpb35		; ERIMO
  4559                                  		dw bpb288		; 2.88MB drive
  4560                                  		;
  4561                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  4562                                  %endif
  4563                                  
  4564                                  ; 13/12/2022
  4565                                  %if 0
  4566                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  4567                                  		dw BPB96T		; 96tpi	drives
  4568                                  		dw BPB35		; 3.5" drives
  4569                                  		dw BPB35		; unused 8" diskette
  4570                                  		dw BPB35		; unused 8" diskette
  4571                                  		dw BPB35		; used for hard	disk
  4572                                  		dw BPB35		; used for tape	drive
  4573                                  		dw BPB35		; FFOTHER
  4574                                  		dw BPB35		; ERIMO
  4575                                  		dw BPB288		; 2.88MB drive
  4576                                  		;
  4577                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  4578                                  
  4579                                  %endif
  4580                                  
  4581                                  ; ----------------------------------------------------------------------------
  4582                                  
  4583                                  ;	entry point to call utility functions in Bios_Code. At this time,
  4584                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  4585                                  ;	  will not yet be moved to its final resting place, so we know
  4586                                  ;	  it'll be low.
  4587                                  ;
  4588                                  ;	to use this function, do a "push cs" and load bp with the offset of
  4589                                  ;	  the function you want to call in Bios_Code. This routine will
  4590                                  ;	  push the address of a retf in Bios_Code onto the stack which
  4591                                  ;	  will get executed when the utility function finishes. It will
  4592                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  4593                                  ;	  and a retf
  4594                                  
  4595                                  ; 16/10/2022
  4596                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  4597                                  ; 09/12/2022
  4598                                  BC_RETF equ bc_retf
  4599                                  
  4600                                  ; 09/12/2023
  4601                                  ;PCDOS 7.1 IBMBIO.COM bc_retf offset = 0CAh (in BIOSCODE segment = 364h)
  4602                                  
  4603                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  4604                                  					; 2C7h:0C8h = 70h:2638h
  4605                                  					; 09/12/2023
  4606                                  					; 364h:0CAh = 70h:300Ah ; PCDOS 7.1
  4607 00001A6F [CA00]                  		dw BC_RETF		; dw 0CAh
  4608                                  
  4609                                  ; ----------------------------------------------------------------------------
  4610                                  
  4611                                  call_bios_code:	; proc far			
  4612 00001A71 2EFF36[6F1A]            		push	word [cs:addr_of_bcretf] 
  4613                                  					; set up near return to far return
  4614 00001A76 2EFF36[0406]            		push	word [cs:cdev+2] ; push Bios_Code segment
  4615 00001A7B 55                      		push	bp		; save offset of utility function
  4616 00001A7C CB                      		retf			; far jump to (DOS)BIOS code
  4617                                  
  4618                                  ; ----------------------------------------------------------------------------
  4619                                  
  4620                                  		; 09/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  4621                                  		; 20/12/2022
  4622 00001A7D 00                      flp_drvs:	db 0
  4623                                  		; 11/12/2023
  4624                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:1B81h)
  4625                                  firstcluster_hw: 
  4626 00001A7E 0000                    		dw 0	; 06/04/2024
  4627 00001A80 00                      Boot_Drv:	db 0
  4628                                  
  4629                                  ; ----------------------------------------------------------------------------
  4630                                  
  4631                                  ; 09/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  4632                                  ;-----------------------------------------------------------------------------
  4633                                  ; PCDOS 7.1 CD BOOT option code 
  4634                                  ;-----------------------------------------------------------------------------
  4635                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1B84h)
  4636                                  
  4637                                  cd_boot_option:
  4638 00001A81 50                      		push	ax
  4639 00001A82 1E                      		push	ds
  4640 00001A83 06                      		push	es
  4641 00001A84 52                      		push	dx
  4642                                  cdbo_1:
  4643 00001A85 B401                    		mov	ah, 1
  4644 00001A87 CD16                    		int	16h			; KEYBOARD - status
  4645 00001A89 7406                    		jz	short cdbo_2
  4646 00001A8B 30E4                    		xor	ah, ah
  4647 00001A8D CD16                    		int	16h			; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  4648                                  						; Return: AH = scan code, AL = character
  4649 00001A8F EBF4                    		jmp	short cdbo_1
  4650                                  cdbo_2:
  4651 00001A91 0E                      		push	cs
  4652 00001A92 1F                      		pop	ds
  4653 00001A93 BE[6B1B]                		mov	si, cd_boot_msg		; "Press the ENTER key to boot from CD"...
  4654 00001A96 AC                      		lodsb
  4655                                  cdbo_3:
  4656 00001A97 BB0700                  		mov	bx, 7
  4657 00001A9A B40E                    		mov	ah, 0Eh
  4658 00001A9C CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4659                                  						; AL = character, BH = display page (alpha modes)
  4660                                  						; BL = foreground color (graphics modes)
  4661 00001A9E AC                      		lodsb
  4662 00001A9F 08C0                    		or	al, al
  4663 00001AA1 75F4                    		jnz	short cdbo_3
  4664 00001AA3 B84000                  		mov	ax, 40h
  4665 00001AA6 8ED8                    		mov	ds, ax
  4666                                  		;mov	bx, [6Ch]		; 0:46Ch = Daily timer counter (4 bytes)
  4667                                  		; 09/12/2023
  4668 00001AA8 8B166C00                		mov	dx, [6Ch]
  4669 00001AAC 8B366E00                		mov	si, [6Eh]
  4670                                  wait_for_key:
  4671                                  		;push	bx
  4672                                  		;mov	bx, 7
  4673                                  		; bx = 7
  4674 00001AB0 B8080E                  		mov	ax, 0E08h
  4675 00001AB3 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4676                                  						; AL = character, BH = display page (alpha modes)
  4677                                  						; BL = foreground color (graphics modes)
  4678 00001AB5 B8200E                  		mov	ax, 0E20h
  4679 00001AB8 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4680                                  						; AL = character, BH = display page (alpha modes)
  4681                                  						; BL = foreground color (graphics modes)
  4682 00001ABA B8080E                  		mov	ax, 0E08h
  4683 00001ABD CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4684                                  						; AL = character, BH = display page (alpha modes)
  4685                                  						; BL = foreground color (graphics modes)
  4686                                  		;pop	bx
  4687                                  		;add	bx, 18			; 18.2 ticks per second
  4688                                  		; 09/12/2023
  4689 00001ABF 83C212                  		add	dx, 18
  4690 00001AC2 83D600                  		adc	si, 0			; next second (if carry flag is 1)
  4691                                  continue_to_wait:
  4692 00001AC5 B401                    		mov	ah, 1
  4693 00001AC7 CD16                    		int	16h			; KEYBOARD - status
  4694 00001AC9 741B                    		jz	short cdbo_5
  4695 00001ACB B400                    		mov	ah, 0
  4696 00001ACD CD16                    		int	16h			; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  4697                                  						; Return: AH = scan code, AL = character
  4698                                  
  4699                                  		; 09/12/2023
  4700                                  		;cmp	ax, 11Bh ; ESC key
  4701                                  		;jz	short cdb0_7
  4702                                  ;cdbo_4:
  4703                                  		;push	ax ; *
  4704 00001ACF 89C2                    		mov	dx, ax ; *
  4705                                  
  4706                                  		; CRLF (next line)
  4707                                  		;mov	bx, 7
  4708                                  		; bx = 7
  4709 00001AD1 B80D0E                  		mov	ax, 0E0Dh
  4710 00001AD4 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4711                                  						; AL = character, BH = display page (alpha modes)
  4712                                  						; BL = foreground color (graphics modes)
  4713 00001AD6 B80A0E                  		mov	ax, 0E0Ah
  4714 00001AD9 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4715                                  						; AL = character, BH = display page (alpha modes)
  4716                                  						; BL = foreground color (graphics modes)
  4717                                  		; 09/12/2023
  4718                                  		;pop	ax ; *
  4719                                  			
  4720 00001ADB 81FA1B01                		cmp	dx, 11Bh
  4721                                  		;cmp	ax, 11Bh ; ESC key (to cancel CD/DVD boot)
  4722 00001ADF 7418                    		je	short cdbo_7
  4723                                  
  4724                                  cdbo_4:		; 10/12/2023
  4725 00001AE1 5A                      		pop	dx
  4726 00001AE2 07                      		pop	es
  4727 00001AE3 1F                      		pop	ds
  4728 00001AE4 58                      		pop	ax
  4729 00001AE5 C3                      		retn
  4730                                  cdbo_5:
  4731 00001AE6 3B366E00                		cmp	si, [6Eh]
  4732 00001AEA 7504                    		jnz	short cdbo_6
  4733                                  		; 09/12/2023
  4734 00001AEC 3B166C00                		cmp	dx, [6Ch]
  4735                                  		;cmp	bx, [6Ch]
  4736                                  cdbo_6:
  4737 00001AF0 73D3                    		jnb	short continue_to_wait
  4738 00001AF2 2EFE0E[6A1B]            		dec	byte [cs:time_counter]
  4739 00001AF7 75B7                    		jnz	short wait_for_key
  4740                                  cdbo_7:
  4741                                  		; 09/12/2023
  4742                                  		; CRLF (next line)
  4743                                  		;
  4744                                  		;mov	bx, 7
  4745                                  		;mov	ax, 0E0Dh
  4746                                  		;int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4747                                  		;				; AL = character, BH = display page (alpha modes)
  4748                                  		;				; BL = foreground color (graphics modes)
  4749                                  		;mov	ax, 0E0Ah
  4750                                  		;int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  4751                                  		;				; AL = character, BH = display page (alpha modes)
  4752                                  		;				; BL = foreground color (graphics modes)
  4753                                  		
  4754 00001AF9 0E                      		push	cs
  4755 00001AFA 1F                      		pop	ds
  4756                                  		; 09/12/2023
  4757 00001AFB 1E                      		push	ds
  4758 00001AFC 07                      		pop	es
  4759                                  		; es = ds = cs
  4760                                  
  4761 00001AFD B8004B                  		mov	ax, 4B00h
  4762                                  		;xor	dl, dl
  4763                                  		; 09/12/2023
  4764 00001B00 31D2                    		xor	dx, dx
  4765                                  		; dl = disk drive = 0  ; fd
  4766                                  		;mov	si, 1C93h
  4767 00001B02 BE[571B]                		mov	si, empty_dap_buff
  4768 00001B05 CD13                    		int	13h			; DISK - Bootable CD-ROM - AL = TERMINATE DISK EMULATION
  4769                                  		; DS:SI = Specification packet filled		
  4770                                  
  4771                                  		;mov	dx, 80h
  4772                                  		;xor	ax, ax
  4773                                  		; 09/12/2023
  4774 00001B07 B81300                  		mov	ax, 19
  4775 00001B0A 89F7                    		mov	di, si	
  4776                                  		;mov	byte [si], 13h
  4777                                  		;mov	[si+1], al
  4778 00001B0C AB                      		stosw	
  4779                                  		;mov	[si+2], dx
  4780 00001B0D B080                    		mov	al, 80h
  4781 00001B0F AB                      		stosw
  4782 00001B10 89C2                    		mov	dx, ax
  4783                                  		;mov	[si+4], ax
  4784                                  		;mov	[si+6], ax
  4785                                  		;mov	[si+8], ax
  4786                                  		;mov	[si+0Ah], ax
  4787                                  		;mov	[si+0Ch], ax
  4788                                  		;mov	[si+0Eh], ax
  4789                                  		;mov	[si+10h], al
  4790                                  		;mov	[si+11h], al
  4791                                  		;mov	[si+12h], al
  4792 00001B12 B90F00                  		mov	cx, 15
  4793 00001B15 F3AA                    		rep	stosb
  4794                                  		; dl = disk drive = 80h ; hd
  4795 00001B17 B8004B                  		mov	ax, 4B00h
  4796 00001B1A CD13                    		int	13h			; DISK - Bootable CD-ROM - AL = TERMINATE DISK EMULATION
  4797 00001B1C 31C0                    		xor	ax, ax
  4798                                  		; 09/12/2023
  4799                                  		;mov	dx, 80h
  4800                                  		; dx = 80h
  4801 00001B1E CD13                    		int	13h			; DISK - RESET DISK SYSTEM
  4802                                  						; DL = drive (if bit 7 is set both hard disks and floppy disks reset)
  4803                                  		; 09/12/2023
  4804                                  		;push	cs
  4805                                  		;pop	es
  4806                                  		; es = ds = cs		
  4807                                  
  4808 00001B20 B80102                  		mov	ax, 201h
  4809                                  		;mov	bx, 152h
  4810 00001B23 BB[5201]                		mov	bx, disksector
  4811                                  		;mov	cx, 1
  4812                                  		; 09/12/2023
  4813 00001B26 41                      		inc	cx ; cx = 1
  4814                                  		;mov	dx, 80h
  4815                                  		; dx = 80h
  4816 00001B27 CD13                    		int	13h			; DISK - READ SECTORS INTO MEMORY
  4817                                  						; AL = number of sectors to read, CH = track, CL = sector
  4818                                  						; DH = head, DL = drive, ES:BX -> buffer to fill
  4819                                  						; Return: CF set on error, AH = status, AL = number of sectors read
  4820                                  		;jc	short cdbo_8
  4821                                  		; 10/12/2023
  4822 00001B29 72B6                    		jc	short cdbo_4
  4823                                  
  4824 00001B2B 2681BFFE0155AA          		cmp	word [es:bx+1FEh], 0AA55h
  4825                                  		;jz 	short cdbo_9
  4826                                  		; 10/12/2023
  4827 00001B32 75AD                    		jnz	short cdbo_4
  4828                                  ;cdbo_8:
  4829                                  		;jmp	short cdbo_4
  4830                                  ;cdbo_9:
  4831                                  		; 10/12/2023
  4832                                  		; (stack clearing -pop- is not necessary here, 
  4833                                  		;  PCDOS 7.1 boot sector will set stack pointer again)
  4834                                  		;pop	ax ; near call return address
  4835                                  		;pop	cx ; +++ ; ch = [MediaByte]
  4836                                  
  4837                                  		; 09/12/2023
  4838                                  		;push	cs
  4839                                  		;pop	ds
  4840                                  		; ds = cs
  4841 00001B34 31C0                    		xor	ax, ax	; 0
  4842 00001B36 BF007C                  		mov	di, 7C00h
  4843 00001B39 8EC0                    		mov	es, ax
  4844 00001B3B 89DE                    		mov	si, bx
  4845 00001B3D 06                      		push	es
  4846 00001B3E 57                      		push	di
  4847 00001B3F B90001                  		mov	cx, 100h ; 256
  4848                                  		; 10/12/2023
  4849                                  		;cld	; not necessary (direction flag is already cleared) 
  4850 00001B42 F3A5                    		rep movsw
  4851 00001B44 8ED8                    		mov	ds, ax
  4852 00001B46 BE7800                  		mov	si, 78h
  4853 00001B49 2EA1[121A]              		mov	ax, [cs:Orig_Int1Eh_Table]
  4854 00001B4D 8904                    		mov	[si], ax
  4855 00001B4F 2EA1[141A]              		mov	ax, [cs:Orig_Int1Eh_Table+2]
  4856 00001B53 894402                  		mov	[si+2], ax
  4857 00001B56 CB                      		retf
  4858                                  
  4859                                  ; ----------------------------------------------------------------------------
  4860                                  dap_buffer: ; 16/12/2023
  4861                                  
  4862 00001B57 13                      empty_dap_buff:	db 19
  4863                                  		;db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0  ; db 18 dup(0)
  4864 00001B58 00<rep 12h>             		times 18 db 0
  4865 00001B6A 05                      time_counter:	db 5	; 5 seconds
  4866 00001B6B 0D0A                    cd_boot_msg:	db 0Dh,0Ah
  4867                                  		;db 'Press the ENTER key to boot from CD or DVD......',0
  4868                                  		; 09/12/2023
  4869 00001B6D 507265737320616E79-     		db 'Press any key to boot from CD or DVD ...',0
  4869 00001B76 206B657920746F2062-
  4869 00001B7F 6F6F742066726F6D20-
  4869 00001B88 4344206F7220445644-
  4869 00001B91 202E2E2E00         
  4870                                  
  4871                                  ; ----------------------------------------------------------------------------
  4872                                  
  4873                                  ; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1)
  4874                                  
  4875                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  4876                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  4877                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  4878                                  
  4879                                  ;-----------------------------------------------------------------------------
  4880                                  ; entry point from boot sector
  4881                                  ;-----------------------------------------------------------------------------
  4882                                  
  4883                                  init:		; 27/12/2018
  4884                                  		; MSDOS 6.0 (MSINIT.ASM)
  4885                                  		;=============================================================
  4886                                  		;
  4887                                  		; entry from boot sector. the register contents are:
  4888                                  		;
  4889                                  		;   dl = int 13 drive number we booted from
  4890                                  		;   ch = media byte
  4891                                  		;   bx = first data sector on disk.
  4892                                  		;   ax = first data sector (high)
  4893                                  		;   di = sectors/fat for the boot media.
  4894                                  
  4895                                  		; 10/12/2023
  4896                                  		; Retro DOS v5.0 (IBMBIO.COM)
  4897                                  		;=============================================================
  4898                                  		; PCDOS 7.1 IBMBIO.COM - registers from MSLOAD section
  4899                                                  ; DL = [BootDrive]
  4900                                  		; CH = [MediaByte]
  4901                                  		; AX:BX = First data Sector
  4902                                  		; DS:SI = Original INT 1Eh table address
  4903                                  		;
  4904                                  		; Stack: INT 1Eh vector (0:78h) !not used! (dword [sp])
  4905                                  		;	 INT 1Eh table address !not used! (dword [sp+4])
  4906                                  		; DI = 78h !not used!
  4907                                  
  4908                                  		; 07/04/2018
  4909                                  		;=============================================================
  4910                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  4911                                                  ; DL = [bsDriveNumber]
  4912                                  		; DH = [bsMedia]
  4913                                  		; AX = [bsSectors] ; Total sectors
  4914                                  		; DS = 0, SS = 0
  4915                                  		; BP = 7C00h
  4916                                  
  4917                                  		; 29/09/2023
  4918                                  		; SP = 0FFFEh (for Retro DOS v2&v3 boot sector) 
  4919                                  		;    = 07C00h (for MSDOS 5.0 boot sector)
  4920                                  
  4921                                  		; 10/12/2023 - Retro DOS v5.0
  4922                                  		; ------------------------------------------------------------
  4923                                  		; INPUT (registers from Retro DOS v4-v5 boot sector):
  4924                                  		;  DL = [bsDriveNumber]
  4925                                  		;  DH = [bsMedia]
  4926                                  		;  SS = 0
  4927                                  		;  BP = 7C00h (boot sector address)
  4928                                  		;
  4929                                  		; If the boot drive is a CD (CDROM) or DVD
  4930                                  		;    and CD boot option is enabled/requested:
  4931                                  		;    AX = 'CD'
  4932                                  		; If the boot drive is a FD or HD 
  4933                                  		;    or CD boot option is not enabled/requested:
  4934                                  		;    AX <> 'CD'
  4935                                  
  4936                                  ; 20/12/2022
  4937                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  4938                                  %if 0	
  4939                                  		cli
  4940                                  
  4941                                  		push	ax
  4942                                  		xor	ax, ax
  4943                                  		mov	ds, ax
  4944                                  		pop	ax
  4945                                  %endif
  4946                                  
  4947                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  4948                                  ; 10/12/2023 - Retro DOS v5.0 (combined kernel)
  4949                                  
  4950                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  4951                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  4952                                  
  4953                                  ;-----------------------------------------------------------------------------
  4954                                  ; initialization - stage 1
  4955                                  ;-----------------------------------------------------------------------------
  4956                                  ; 02/06/2018 - Retro DOS v3.0
  4957                                  
  4958                                  		; 10/12/2023
  4959 00001B96 FC                      		cld	; may not be necessary
  4960                                  		
  4961                                  		; 21/12/2022
  4962                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  4963                                  		;mov	bx, 60h
  4964                                  		;mov	es, bx
  4965                                  		;mov	si, bp
  4966                                  		;sub	di, di
  4967                                  		;mov	cx, 35 ; 70 bytes, 35 words
  4968                                  		;;mov	cl, 35
  4969                                  		;rep	movsw
  4970                                  
  4971                                  		; 10/12/2023 - Retro DOS v5.0
  4972 00001B97 3D4344                  		cmp	ax, 'CD' ; is CD boot option enabled or not ?
  4973 00001B9A 7503                    		jne	short init0
  4974                                  
  4975 00001B9C E8E2FE                  		call	cd_boot_option
  4976                                  init0:
  4977 00001B9F 0E                      		push	cs
  4978 00001BA0 1F                      		pop	ds
  4979                                  
  4980                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  4981                                  		;mov	[Boot_Drv], dl
  4982                                  
  4983                                  		; 20/03/2019 - Retro DOS v4.0
  4984                                  		;cli		; turn interrupts off while manupulating stack
  4985                                  		;mov	ss, cx	; set stack segment register
  4986                                  
  4987 00001BA1 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  4988                                  
  4989                                  		;sti		; turn interrupts on
  4990                                  
  4991                                  		; 27/03/2018
  4992                                  		;mov	cx, KERNEL_SIZE	; words !
  4993                                  
  4994                                  		; 20/03/2019
  4995 00001BA4 B90080                  		mov	cx, 32768 ; 65536 bytes
  4996                                  
  4997                                  		; 21/12/2022
  4998                                  		; 07/04/2018
  4999 00001BA7 BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  5000                                  		;mov	bl, KERNEL_SEGMENT
  5001 00001BAA 8EC3                    		mov	es, bx
  5002 00001BAC 31FF                    		xor	di, di
  5003 00001BAE 89FE                    		mov	si, di
  5004                                  		
  5005                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  5006                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  5007 00001BB0 F3A5                    		rep	movsw
  5008                                  
  5009                                  		; 20/03/2019 - Retro DOS v4.0
  5010 00001BB2 53                      		push	bx
  5011                                  		;push	init0
  5012 00001BB3 68[B71B]                		push	init1	; 10/12/2023
  5013 00001BB6 CB                      		retf
  5014                                  ;init0:
  5015                                  		; 10/12/2023 - Retro DOS 5.0	
  5016                                  init1:
  5017                                  		; 20/12/2022
  5018                                  		; (combined kernel file > 64KB)
  5019                                  
  5020                                  		; 20/03/2019
  5021 00001BB7 B520                    		mov	ch, 20h
  5022 00001BB9 8ED9                    		mov	ds, cx ; 2000h
  5023                                  		;mov	cx, 1070h
  5024 00001BBB B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  5025 00001BBE 8EC1                    		mov	es, cx
  5026                                  		
  5027                                  		; 21/12/2022
  5028                                  		;KERNEL_SIZE equ END_OF_KERNEL - BData_start
  5029                                  		; 28/09/2023
  5030                                  		NXWORDCOUNT equ ((KERNEL_SIZE+1)>>1)-32768
  5031                                  
  5032                                  		;mov	cx, KERNEL_SIZE - 32768
  5033                                  		; 28/09/2023 (BugFix)
  5034 00001BC0 B97320                  		mov	cx, NXWORDCOUNT
  5035                                  		;mov	cx, NXBYTECOUNT
  5036                                  		;shr	cx, 1 ; 28/09/2023
  5037                                  		;xor	si, si
  5038                                  		;xor	di, di
  5039 00001BC3 F3A5                    		rep	movsw
  5040                                  
  5041                                  		; 28/09/2023
  5042                                  		;; 17/06/2018 
  5043                                  		;mov	ds, bx
  5044                                  		;; 21/03/2019
  5045                                  		;mov	es, bx
  5046                                  ;init0:
  5047                                  ;		;push	es
  5048                                  ;		push	bx ; 20/03/2019
  5049                                  ;		push	init1 ; 07/04/2018
  5050                                  ;		retf	; jump to 0070h:init1
  5051                                  ;init:
  5052                                  ;init1:
  5053                                  		; 10/12/2023
  5054                                  init2:
  5055                                  		; 20/12/2022
  5056                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  5057                                  		; for full MSDOS compatibility.
  5058                                  
  5059                                  		; 10/12/2023
  5060                                  		;cli	; not necessary for INT 1Eh
  5061                                  
  5062 00001BC5 8EC1                    		mov	es, cx ; 0
  5063 00001BC7 8ED9                    		mov	ds, cx ; 0
  5064                                  
  5065 00001BC9 B82205                  		mov	ax, SEC9
  5066                                  
  5067                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  5068 00001BCC B378                    		mov	bl, 1Eh*4
  5069                                  				; INT 1Eh points to diskette parms table
  5070                                  
  5071                                  		; check if the table is already at 0:SEC9 (0:0522h)
  5072                                   		; (do not move the DPT if is not original ROMBIOS table)
  5073                                  
  5074                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  5075                                  		;;jnz	short mov_dpt
  5076                                  
  5077                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  5078                                  		;je	short dont_mov_dpt
  5079                                  
  5080                                  		;mov	si, [bx] ; [1Eh*4]		
  5081                                  ;mov_dpt:
  5082                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  5083 00001BCE C537                    		lds	si, [bx]
  5084                                  		
  5085                                  		; 10/12/2023 - Retro DOS v5.0
  5086                                  		;mov	[cs:Orig_Int1Eh_Table+2], ds
  5087                                  		;mov	[cs:Orig_Int1Eh_Table], si
  5088                                  
  5089 00001BD0 89C7                    		mov	di, ax  ; SEC9
  5090 00001BD2 B10B                    		mov	cl, 11
  5091                                  		;cld
  5092 00001BD4 F3A4                    		rep	movsb
  5093                                  
  5094                                  		; Set INT 1Eh vector/pointer to the new DPT address
  5095 00001BD6 8ED9                    		mov	ds, cx ; 0
  5096 00001BD8 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  5097 00001BDA 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  5098                                  ;dont_mov_dpt:
  5099                                  
  5100                                  ; 20/12/2022 - Retro DOS v4.0
  5101                                  %if 0
  5102                                  		; 27/12/2018 - Retro DOS v4.0
  5103                                  		; 'Starting MS-DOS...' message
  5104                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  5105                                  		; (0070h:96A3h)
  5106                                  
  5107                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  5108                                  		mov     ah, 0Eh
  5109                                  		;bh = 0
  5110                                          	mov     bl, 7		; "normal" attribute and page
  5111                                  startmsg_nxt_chr:  
  5112                                  		lodsb
  5113                                  		or	al, al
  5114                                          	jz	short startmsg_ok
  5115                                         
  5116                                  		int	10h		; video write
  5117                                          	jmp	short startmsg_nxt_chr
  5118                                  
  5119                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  5120                                  
  5121                                  startmsg_ok:
  5122                                  
  5123                                  %endif
  5124                                  
  5125                                  ;-----------------------------------------------------------------------------
  5126                                  ; initialization - stage 2
  5127                                  ;-----------------------------------------------------------------------------
  5128                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  5129                                  
  5130                                  
  5131                                  ; 19/03/2018
  5132                                  ; Retro DOS v2.0 (24/02/2018)
  5133                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  5134                                  
  5135                                  ;------------------------------------------------------------------------
  5136                                  ;									:
  5137                                  ;	System initialization						:
  5138                                  ;									:
  5139                                  ;	The entry conditions are established by the bootstrap		:
  5140                                  ;	loader and are considered unknown. The following jobs		:
  5141                                  ;	will be performed by this module:				:
  5142                                  ;									:
  5143                                  ;	1.	All device initialization is performed			:
  5144                                  ;	2.	A local stack is set up and DS:SI are set		:
  5145                                  ;		to point to an initialization table. Then		:
  5146                                  ;		an inter-segment call is made to the first		:
  5147                                  ;		byte of the dos 					:
  5148                                  ;	3.	Once the dos returns from this call the ds		:
  5149                                  ;		register has been set up to point to the start		:
  5150                                  ;		of free memory. The initialization will then		:
  5151                                  ;		load the command program into this area 		:
  5152                                  ;		beginning at 100 hex and transfer control to		:
  5153                                  ;		this program.						:
  5154                                  ;									:
  5155                                  ;------------------------------------------------------------------------
  5156                                  		
  5157                                  		; 20/12/2022
  5158                                  		; ----------------------
  5159                                  		; Registers
  5160                                  		; ----------------------
  5161                                  		; DL = [bsDriveNumber]
  5162                                  		; DH = [bsMedia]
  5163                                  		; DS = 0, ES = 0, SS = 0
  5164                                  		; BP = 7C00h
  5165                                  		; SP = 700h
  5166                                  		; ----------------------
  5167                                  		; CX = 0				
  5168                                  
  5169                                  ; 02/10/2022 - 20/12/2022
  5170                                  ; ------------------------------------------------------------------------------
  5171                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  5172                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  5173                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  5174                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  5175                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  5176                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  5177                                  ; ------------------------------------------------------------------------------
  5178                                  
  5179                                  ; msload will check the extended boot record and set ax, bx accordingly.
  5180                                  ;
  5181                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  5182                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  5183                                  ;;	data sector of the bios.
  5184                                  ;
  5185                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  5186                                  ;		mov	[cs:bios_l], bx
  5187                                  
  5188                                  ; with the following information from msload, we don't need the
  5189                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  5190                                  ;     limitation of msbio.com file.
  5191                                  
  5192                                  		; 10/12/2023
  5193                                  		; 21/12/2022
  5194                                  		;cli
  5195                                  
  5196 00001BDD 0E                      		push	cs		; Save a peck of interrupt vectors...
  5197 00001BDE 07                      		pop	es
  5198                                  		;push	cx
  5199                                  		;push	di
  5200                                  
  5201                                  		; 20/12/2022
  5202 00001BDF B105                    		mov	cl, 5
  5203                                  		;mov	cx, 5		; NUMROMVECTORS
  5204                                  					; no. of rom vectors to	be saved
  5205                                  		;mov	si, offset RomVectors ; point to list of int vectors
  5206 00001BE1 BE[0001]                		mov	si, RomVectors
  5207                                  
  5208                                  		; 10/12/2023
  5209 00001BE4 FA                      		cli
  5210                                  next_int_:		
  5211 00001BE5 2E                      		cs	; 16/10/2022
  5212 00001BE6 AC                      		lodsb		
  5213                                  		;lods	byte ptr cs:[si] ; cs lodsb
  5214 00001BE7 98                      		cbw			; ax = interrupt number
  5215 00001BE8 D1E0                    		shl	ax, 1
  5216 00001BEA D1E0                    		shl	ax, 1		; int no * 4
  5217 00001BEC 89C7                    		mov	di, ax		; interrupt vector address
  5218 00001BEE 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  5219                                  					; saving address in di
  5220                                  		;lodsw			; movsw
  5221                                  		;stosw
  5222                                  		;lodsw			; movsw
  5223                                  		;stosw			; save the vector
  5224                                  		; 20/12/2022
  5225 00001BF0 A5                      		movsw
  5226 00001BF1 A5                      		movsw		
  5227                                  
  5228 00001BF2 87F7                    		xchg	si, di
  5229 00001BF4 E2EF                    		loop	next_int_
  5230                                  		
  5231                                  		;pop	di
  5232                                  		;pop	cx
  5233                                  
  5234                                  ; we need to save int13 in two places in case we are running on an at.
  5235                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  5236                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  5237                                  ; rom int13 routine, we must have that rom address also stored away.
  5238                                  
  5239                                  		; 20/12/2022
  5240                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  5241                                  		;mov	[cs:Orig13], ax
  5242                                  		;mov	ax, [cs:Old13+2]
  5243                                  		;mov	[cs:Orig13+2], ax
  5244                                  
  5245                                  		; 10/12/2023
  5246                                  		;cli
  5247                                  
  5248                                  		; 16/10/2022
  5249 00001BF6 C7064C00[ED06]          		mov	word [13h*4], block13
  5250                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  5251                                  					; set up int 13	for new	action
  5252 00001BFC 8C0E4E00                		mov	[13h*4+2], cs
  5253                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  5254 00001C00 C7065400[9907]          		mov	word [15h*4], Int15
  5255                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  5256                                  					; set up int 15	for new	action
  5257 00001C06 8C0E5600                		mov	[15h*4+2], cs
  5258                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  5259 00001C0A C7066400[5907]          		mov	word [19h*4], int19
  5260                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  5261                                  					; set up int 19	for new	action
  5262 00001C10 8C0E6600                		mov	[19h*4+2], cs
  5263                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  5264                                  
  5265                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  5266 00001C14 A16800                  		mov	ax, [68h]	 ; 1Ah*4
  5267 00001C17 8B3E6A00                		mov	di, [6Ah]	 ; 1Ah*4+2
  5268 00001C1B C7066800[AF06]          		mov	word [68h], Int1A
  5269 00001C21 8C0E6A00                		mov	[6Ah], cs
  5270                                  
  5271                                  		; 20/12/2022
  5272 00001C25 0E                      		push	cs
  5273 00001C26 1F                      		pop	ds
  5274                                  		
  5275                                  		; 10/12/2023
  5276 00001C27 A3[AB06]                		mov	[Orig1A], ax
  5277 00001C2A 893E[AD06]              		mov	[Orig1A+2], di
  5278                                  
  5279 00001C2E A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  5280 00001C31 A3[B400]                		mov	[Orig13], ax
  5281 00001C34 A1[0801]                		mov	ax, [Old13+2]
  5282 00001C37 A3[B600]                		mov	[Orig13+2], ax
  5283                                  					; ;
  5284 00001C3A FB                      		sti
  5285 00001C3B CD11                    		int	11h		; EQUIPMENT DETERMINATION
  5286                                  					; Return: AX = equipment flag bits
  5287                                  		; 10/12/2023
  5288                                  		;jmp	short chk_fd_count
  5289                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1DF7h) ; *!!*
  5290                                  		; ((signature))
  5291                                  		;push	dx		; 52h ; 'R'
  5292                                  		;push	ax		; 50h ; 'P'
  5293                                  		;push	bx		; 53h ; 'S'
  5294                                  
  5295                                  ; we have to support a system that does not have any diskette
  5296                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  5297                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  5298                                  ; otherwise, the system has only hardfiles.
  5299                                  ;
  5300                                  ; important thing is that still, for compatibility reason, the drive letter
  5301                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  5302                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  5303                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  5304                                  ; drives will get "invalid drive letter ..." message. we are going to
  5305                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  5306                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  5307                                  
  5308                                  ; check the register returned by the equipment determination interrupt
  5309                                  ; we have to handle the case of no diskettes in the system by faking
  5310                                  ; two dummy drives.
  5311                                  ;
  5312                                  ; if the register indicates that we do have floppy drives we don't need
  5313                                  ; to do anything special.
  5314                                  ;
  5315                                  ; if the register indicates that we don't have any floppy drives then
  5316                                  ; what we need to do is set the fakefloppydrv variable, change the
  5317                                  ; register to say that we do have floppy drives and then go to execute
  5318                                  ; the code which starts at notsingle. this is because we can skip the
  5319                                  ; code given below which tries to find if there are one or two drives
  5320                                  ; since we already know about this.
  5321                                  
  5322                                  chk_fd_count:	; 10/12/2023
  5323                                  		;or	ax, 1	; *!!*
  5324                                  
  5325                                  		; 06/05/2019 - Retro DOS v4.0
  5326 00001C3D 88C1                    		mov	cl, al
  5327                                  
  5328                                  		; 12/12/2022
  5329 00001C3F A801                    		test	al, 1
  5330                                  		;test	ax, 1		; floppy drives	present	?
  5331 00001C41 751E                    		jnz	short normalfloppydrv ;	yes.
  5332                                  
  5333                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  5334                                  ; whether it is an old ROM BIOS or a new one
  5335                                  ;
  5336                                  ; WARNING !!!
  5337                                  ;
  5338                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  5339                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  5340                                  
  5341                                  		; 20/12/2022
  5342                                  		;push	ax
  5343                                  		;push	bx
  5344                                  		;push	cx
  5345 00001C43 52                      		push	dx
  5346                                  		;push	di
  5347 00001C44 06                      		push	es
  5348                                  
  5349 00001C45 B408                    		mov	ah, 8
  5350 00001C47 B200                    		mov	dl, 0
  5351 00001C49 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5352                                  					; DL = drive number
  5353                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5354                                  					; DL = number of consecutive drives
  5355                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5356 00001C4B 7202                    		jc	short _gdskp_error
  5357                                  		;;mov	[cs:flp_drvs], dl
  5358                                  		; 20/12/2022
  5359                                  		; ds = cs
  5360                                  		;mov	[flp_drvs], dl
  5361 00001C4D 88D1                    		mov	cl, dl
  5362                                  _gdskp_error:	
  5363                                  		; 20/12/2022			
  5364 00001C4F 07                      		pop	es
  5365                                  		;pop	di
  5366 00001C50 5A                      		pop	dx
  5367                                  		;pop	cx
  5368                                  		;pop	bx
  5369                                  		;pop	ax
  5370                                  		
  5371 00001C51 720E                    		jc	short normalfloppydrv
  5372                                  					; if error it is an old ROM BIOS
  5373                                  					; so, lets assume that ROM BIOS lied
  5374                                  		; 20/12/2022
  5375                                  		; ds = cs
  5376                                  		;cmp	byte [flp_drvs], 0
  5377                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  5378                                  		;jz	short _set_fake_flpdrv
  5379                                  		;;mov	al, [cs:flp_drvs]
  5380                                  		;mov	al, [flp_drvs]
  5381                                  		;;dec	al		; make it zero based
  5382                                  		;; 18/12/2022
  5383                                  		;dec	ax
  5384                                  		;jmp	short got_num_flp_drvs
  5385                                  		
  5386                                  		; 20/12/2022
  5387 00001C53 08C9                    		or	cl, cl ; [flp_drvs]
  5388 00001C55 7403                    		jz	short _set_fake_flpdrv		
  5389 00001C57 49                      		dec	cx	
  5390 00001C58 EB0B                    		jmp	short got_num_flp_drvs
  5391                                  ; ----------------------------------------------------------------------------
  5392                                  
  5393                                  _set_fake_flpdrv:
  5394                                  		; 20/12/2022
  5395                                  		; ds = cs
  5396                                  		;inc	cl	; cl = 1
  5397                                  		; 10/12/2023
  5398 00001C5A 41                      		inc	cx	; cl = 1
  5399 00001C5B 880E[111A]              		mov	[fakefloppydrv], cl ; 1
  5400                                  		;mov	byte [fakefloppydrv], 1		
  5401                                  		;;mov	byte [cs:fakefloppydrv], 1
  5402                                  					; we don't have any floppy drives.
  5403                                  		; 20/12/2022
  5404                                  		;mov	ax, 1
  5405 00001C5F EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  5406                                  ; ----------------------------------------------------------------------------
  5407                                  
  5408                                  normalfloppydrv:			; yes, bit 0 is 1.			
  5409                                  		; 20/12/2022
  5410                                  		;rol	al, 1		; there	exist floppy drives.
  5411                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  5412 00001C61 D0C1                    		rol	cl, 1
  5413 00001C63 D0C1                    		rol	cl, 1
  5414                                  got_num_flp_drvs:			
  5415                                  		;;and	ax, 3		; only look at bits 0 &	1
  5416                                  		; 18/12/2022
  5417                                  		;and	al, 3
  5418                                  		; 20/12/2022
  5419 00001C65 80E103                  		and	cl, 3
  5420 00001C68 7505                    		jnz	short notsingle	; zero means single drive system
  5421                                  		; 20/12/2022
  5422 00001C6A 41                      		inc	cx
  5423                                  		;inc	ax		; pretend it's a two drive system
  5424                                  settwodrive:				; set this to two fakedrives
  5425                                  		; 20/12/2022
  5426                                  		; ds = cs
  5427 00001C6B FE06[7800]              		inc	byte [single]
  5428                                  		;inc	byte [cs:single] ; remember this
  5429                                  notsingle:	
  5430                                  		; 20/12/2022			
  5431                                  		;inc	ax		; ax has number	of drives, 2-4
  5432                                  		;			; is also 0 indexed boot drive if we
  5433                                  		;			; booted off hard file
  5434                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  5435                                  		
  5436                                  		; 20/12/2022
  5437                                  		;inc	cl	; cl >= 2
  5438                                  		; 10/12/2023
  5439 00001C6F 41                      		inc	cx	; cl >= 2
  5440                                  
  5441                                  ; 16/10/2022
  5442                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  5443                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  5444                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  5445                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  5446                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  5447                                  SEC9	EQU	522h	; address of disk parameters
  5448                                  CHROUT	EQU	29h
  5449                                  LSTDRV	EQU     504h
  5450                                  
  5451                                  ; determine whether we booted from floppy or hard disk...
  5452                                  
  5453                                  		; 20/12/2022
  5454 00001C70 88C8                    		mov	al, cl	; 26/05/2019
  5455                                  
  5456 00001C72 F6C280                  		test	dl, 80h		; boot from floppy ?
  5457 00001C75 7502                    		jnz	short gothrd	; no.
  5458 00001C77 31C0                    		xor	ax, ax		; indicate boot	from drive a
  5459                                  		; 10/12/2023
  5460                                  		;mov	[Boot_Drv], al
  5461                                  gothrd:
  5462                                  
  5463                                  ; MSDOS 6.0
  5464                                  ;   ax = 0-based drive we booted from
  5465                                  ;   bios_l, bios_h set.
  5466                                  ;   cl = number of floppies including fake one
  5467                                  ;   ch = media byte
  5468                                  
  5469                                  ; Retro DOS 4.0 - 27/12/2018 
  5470                                  ;  (from Retro DOS v2.0 boot sector)
  5471                                  ;   dl = int 13 drive number we booted from
  5472                                  ;   dh = media byte
  5473                                  
  5474                                  		; 20/12/2022
  5475 00001C79 88F5                    		mov	ch, dh		; 01/07/2018
  5476                                  
  5477                                  		; cl = number of floppies
  5478                                  		; ch = media byte
  5479                                  
  5480                                  		; set up local stack
  5481                                  
  5482                                  		; 20/12/2022
  5483                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  5484                                  					; bios_l, bios_h set.
  5485                                  					; cl = number of floppies including fake one
  5486                                  					; ch = media byte
  5487                                  		; 20/12/2022
  5488                                  		; es = ds = cs
  5489                                  		; ss = 0
  5490                                  		; sp = 700h
  5491                                  
  5492                                  		; 20/12/2022
  5493                                  		;cli
  5494                                  		;mov	ss, dx		; set stack segment and stack pointer
  5495                                  		;mov	sp, 700h
  5496                                  		;sti
  5497                                  
  5498 00001C7B 51                      		push	cx ; (***) 	; save number of floppies and media byte
  5499                                  		
  5500 00001C7C 88EC                    		mov	ah, ch		; FAT ID to AH
  5501 00001C7E 50                      		push	ax ; (**)	; save boot drive number and media byte
  5502                                  		
  5503                                  ; let model_byte, secondary_model_byte be set here!!!
  5504                                  
  5505 00001C7F B4C0                    		mov	ah, 0C0h
  5506 00001C81 CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  5507 00001C83 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  5508 00001C85 80FC00                  		cmp	ah, 0
  5509 00001C88 7510                    		jnz	short no_rom_system_conf
  5510                                  
  5511                                  ;		; 20/12/2022
  5512                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  5513                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  5514                                  ;
  5515                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  5516                                  ;
  5517                                  ;		on return:
  5518                                  ;		CF = 0 if successful
  5519                                  ;		   = 1 if error
  5520                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  5521                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  5522                                  ;
  5523                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  5524                                  ;
  5525                                  ;		Offset Size	     Description
  5526                                  ;
  5527                                  ;		  00   word   length of descriptor (8 minimum)
  5528                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  5529                                  ;		  03   byte   secondary model byte
  5530                                  ;		  04   byte   BIOS revision level (zero based)
  5531                                  ;		  05   byte   feature information, see below
  5532                                  ;		  06   dword  reserved
  5533                                  
  5534                                  		; 20/12/2022
  5535                                  		; ds = cs
  5536 00001C8A 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  5537 00001C8E A2[AF05]                		mov	[model_byte], al
  5538                                  		;mov	[cs:model_byte], al
  5539                                  					; get/save model byte
  5540 00001C91 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  5541 00001C95 A2[B005]                		mov	[secondary_model_byte], al
  5542                                  		;mov	[cs:secondary_model_byte], al
  5543                                  					; get/save secondary model byte
  5544 00001C98 EB0C                    		jmp	short turn_timer_on
  5545                                  ;-----------------------------------------------------------------------------
  5546                                  
  5547                                  no_rom_system_conf:			
  5548 00001C9A BEFFFF                  		mov	si, 0FFFFh
  5549 00001C9D 8EC6                    		mov	es, si
  5550                                  		; 20/12/2022
  5551 00001C9F 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  5552 00001CA3 A2[AF05]                		mov	[model_byte], al
  5553                                  		;mov	[cs:model_byte], al ; save model byte
  5554                                  turn_timer_on:				
  5555 00001CA6 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  5556 00001CA8 E620                    		out	20h, al		; Interrupt controller,	8259A.
  5557                                  					; AKPORT
  5558                                  
  5559                                  ; some olivetti m24 machines have an 8530 serial communications
  5560                                  ; chip installed at io address 50h and 52h. if we're running
  5561                                  ; on one of those, we must inhibit the normal aux port initialization
  5562                                  
  5563                                  		; 20/12/2022
  5564                                  		; ds = cs
  5565 00001CAA 803E[AF05]00            		cmp	byte [model_byte], 0
  5566                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  5567 00001CAF 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  5568                                  					; (except olivetti m24)
  5569 00001CB1 E466                    		in	al, 66h		; is 8530 installed?
  5570 00001CB3 A820                    		test	al, 20h
  5571 00001CB5 740A                    		jz	short not_olivetti_m24 ; we're done if not
  5572 00001CB7 B00F                    		mov	al, 0Fh		; double check
  5573 00001CB9 E650                    		out	50h, al
  5574 00001CBB E450                    		in	al, 50h
  5575 00001CBD A801                    		test	al, 1		; this test was	copied from olivetti
  5576 00001CBF 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  5577                                  
  5578                                  not_olivetti_m24:
  5579 00001CC1 B003                    		mov	al, 3		; init com4
  5580 00001CC3 E8D909                  		call	aux_init
  5581 00001CC6 B002                    		mov	al, 2		; init com3
  5582 00001CC8 E8D409                  		call	aux_init
  5583 00001CCB B001                    		mov	al, 1		; init com2
  5584 00001CCD E8CF09                  		call	aux_init
  5585 00001CD0 30C0                    		xor	al, al		; init com1
  5586 00001CD2 E8CA09                  		call	aux_init
  5587                                  
  5588                                  skip_aux_port_init:
  5589 00001CD5 B002                    		mov	al, 2		; init lpt3
  5590 00001CD7 E8BD09                  		call	print_init
  5591 00001CDA B001                    		mov	al, 1		; init lpt2
  5592 00001CDC E8B809                  		call	print_init
  5593 00001CDF 30C0                    		xor	al, al		; init lpt1
  5594 00001CE1 E8B309                  		call	print_init
  5595                                  
  5596                                  		; 11/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  5597                                  		;mov	di, 534h	; offset INITSPOT
  5598                                  		;;mov	di, INITSPOT	; 0534h
  5599                                  		;			; IBMDOS.COM's first cluster - high word
  5600                                  		;			; 520h (the 2nd entry of root dir) + 14h
  5601                                  		;mov	ax, [di]
  5602                                  		;mov	[firstcluster_hw], ax
  5603                                  
  5604 00001CE4 31D2                    		xor	dx, dx	; 0
  5605 00001CE6 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  5606 00001CE8 8EC2                    		mov	es, dx
  5607 00001CEA 31C0                    		xor	ax, ax
  5608                                  		; 16/10/2022
  5609 00001CEC BF3405                  		mov	di, INITSPOT	; 0534h
  5610                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  5611                                  					; IBM wants 4 zeros here
  5612 00001CEF AB                      		stosw
  5613 00001CF0 AB                      		stosw
  5614 00001CF1 8CC8                    		mov	ax, cs		; fetch	segment
  5615 00001CF3 C7066C00[0E06]          		mov	word [BRKADR], cbreak
  5616                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  5617                                  					; break	entry point
  5618 00001CF9 A36E00                  		mov	[BRKADR+2], ax		
  5619                                  		;mov	ds:6Eh,	ax	; vector for break
  5620 00001CFC C706A400[8206]          		mov	word [CHROUT*4], outchr
  5621                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  5622 00001D02 A3A600                  		mov	[CHROUT*4+2], ax
  5623                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  5624                                  
  5625 00001D05 BF0400                  		mov	di, 4
  5626 00001D08 BB[1406]                		mov	bx, intret ; 19/10/2022
  5627                                  		;mov	bx, offset intret ; intret (cs:intret)
  5628                                  					; will initialize rest of interrupts
  5629 00001D0B 93                      		xchg	ax, bx
  5630 00001D0C AB                      		stosw			; location 4
  5631 00001D0D 93                      		xchg	ax, bx		; cs:
  5632 00001D0E AB                      		stosw			; int 1	; location 6
  5633 00001D0F 83C704                  		add	di, 4
  5634 00001D12 93                      		xchg	ax, bx
  5635 00001D13 AB                      		stosw			; location 12
  5636 00001D14 93                      		xchg	ax, bx		; cs:
  5637 00001D15 AB                      		stosw			; int 3	; location 14
  5638 00001D16 93                      		xchg	ax, bx
  5639 00001D17 AB                      		stosw			; location 16
  5640 00001D18 93                      		xchg	ax, bx		; cs:
  5641 00001D19 AB                      		stosw			; int 4	; location 18
  5642                                  
  5643                                  ;		; 20/12/2022
  5644                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  5645                                  ;		Address Size	Description	(BIOS/DOS Data Area)
  5646                                  ;	
  5647                                  ;		50:00	byte	Print screen status byte
  5648                                  ;				 00 = PrtSc not active,
  5649                                  ;				 01 = PrtSc in progress
  5650                                  ;				 FF = error
  5651                                  ;		50:01  3 bytes	Used by BASIC
  5652                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  5653                                  ;		50:05  10bytes	POST work area
  5654                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  5655                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  5656                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  5657                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  5658                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  5659                                  ;		50:20	word	DOS dynamic storage
  5660                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  5661                                  ;		50:30	4bytes	MODE command
  5662                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  5663                                  
  5664 00001D1A 89160005                		mov	[0500h], dx ; 0
  5665                                  		;mov	ds:500h, dx	; set print screen & break = 0
  5666 00001D1E 89160405                		mov	[LSTDRV], dx	; [0504h]
  5667                                  		;mov	ds:504h, dx	; clean	out last drive spec
  5668                                  
  5669                                  ; we need to initialize the cs:motorstartup variable from the disk
  5670                                  ; parameter table at sec9. the offsets in this table are defined in
  5671                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  5672                                  
  5673 00001D22 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  5674                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  5675                                  					; [522h+0Ah]
  5676                                  		; 20/12/2022
  5677                                  		; ds = 0
  5678                                  
  5679 00001D25 2EA2[2601]              		mov	[cs:motorstartup], al
  5680 00001D29 2E803E[AF05]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  5681 00001D2F 720B                    		jb	short no_diddle	; no
  5682 00001D31 C7062B050F02            		mov	word [SEC9+09h], 20Fh
  5683                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  5684                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  5685 00001D37 C6062205DF              		mov	byte [SEC9+0], 0DFh
  5686                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  5687                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  5688                                  no_diddle:
  5689 00001D3C CD12                    		int	12h		; MEMORY SIZE -
  5690                                  					; Return: AX = number of contiguous 1K blocks of memory
  5691 00001D3E B106                    		mov	cl, 6
  5692 00001D40 D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  5693                                  		
  5694                                  		; 20/12/2022
  5695                                  		; 03/07/2018 - 27/12/2018
  5696                                  		;pop	cx ; (**)
  5697                                  		;mov	[cs:drvfat], cx
  5698                                  		
  5699 00001D42 50                      		push	ax ; (*)	; save real top	of memory
  5700                                  
  5701                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  5702                                  
  5703                                  ;M068 - BEGIN
  5704                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  5705                                  
  5706                                  		; 20/12/2022
  5707                                  		; ds = 0
  5708                                  
  5709                                  		;push	ds
  5710                                  		;push	bx		; pushes not required but since this
  5711                                  					; happens to be a last minute change
  5712                                  					; & since it is only init code.
  5713                                  		;xor	bx, bx
  5714                                  		;mov	ds, bx
  5715                                  		
  5716                                  		;;mov	bx, ds:0BCh	; [2Fh*4]
  5717                                  		;mov	bx, [2Fh*4]
  5718                                  		;;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  5719                                  		;mov	ds, [2Fh*4+2]
  5720                                  		; 29/09/2023
  5721 00001D43 C51EBC00                		lds	bx, [2Fh*4]
  5722                                  
  5723 00001D47 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  5724                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  5725 00001D4C 750F                    		jnz	short SkipRPL
  5726 00001D4E 807F054C                		cmp	byte [bx+5], 'L'
  5727                                  		;cmp	byte ptr [bx+5], 'L'
  5728 00001D52 7509                    		jnz	short SkipRPL
  5729 00001D54 89C2                    		mov	dx, ax		; get TOM into DX
  5730 00001D56 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  5731 00001D59 CD2F                    		int	2Fh		; Get new TOM from any RPL
  5732 00001D5B 89D0                    		mov	ax, dx
  5733                                  SkipRPL:	
  5734                                  		; 20/12/2022		
  5735                                  		;pop	bx
  5736                                  		;pop	ds
  5737                                  
  5738                                  ;M068 - END
  5739                                  		; 20/12/2022
  5740                                  		; 27/12/2018
  5741 00001D5D 0E                      		push	cs
  5742 00001D5E 1F                      		pop	ds
  5743                                  
  5744                                  		; 18/03/2019 - Retro DOS v4.0
  5745                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  5746                                  		;mov	[cs:fatloc], ax	; location to read fat
  5747                                  
  5748                                  		; 01/07/2018
  5749                                  		; 08/04/2018
  5750                                  		; 28/03/2018
  5751                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  5752 00001D5F 83E840                  		sub	ax, 64
  5753 00001D62 A3[041A]                		mov	[init_bootseg], ax ; 20/12/2022
  5754                                  		;mov	[cs:init_bootseg], ax
  5755                                  
  5756                                  		; 27/12/2018 - Retro DOS v4.0
  5757                                  		;;pop	ax ; (*)	; get back real top of memory
  5758                                  		;pop	dx ; (*)
  5759                                  		; 29/09/2023 - Retro DOS v4.2 (BugFix)
  5760 00001D65 58                      		pop	ax ; (*)	; get back real top of memory		
  5761                                  
  5762                                  
  5763                                  		; 20/12/2022
  5764                                  		; 27/12/2018
  5765 00001D66 59                      		pop	cx ; (**)
  5766 00001D67 890E[FA19]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  5767                                  
  5768                                  		; 20/12/2022
  5769                                  
  5770                                  		;mov	dx, 46Dh	; SYSINIT segment
  5771                                  		;mov	dx, 544h	; 10/12/2023 (PCDOS 7.1 IBMBIO.COM)
  5772 00001D6B BAD904                  		mov	dx, SYSINITSEG	; 17/10/2022
  5773 00001D6E 8EDA                    		mov	ds, dx
  5774                                  
  5775                                  ; set pointer to resident device driver chain
  5776                                  
  5777                                  		; 17/10/2022
  5778 00001D70 C706[7502][2300]        		mov	word [DEVICELIST], res_dev_list
  5779                                  		;mov	word [273h], res_dev_list
  5780                                  		;;mov	word ptr ds:273h, offset res_dev_list
  5781                                  					; [SYSINIT+DEVICE_LIST]
  5782 00001D76 8C0E[7702]              		mov	[DEVICELIST+2], cs		
  5783                                  		;mov	[275h], cs
  5784                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  5785                                  
  5786 00001D7A A3[9402]                		mov	[MEMORYSIZE], ax
  5787                                  		;mov	[292h], ax
  5788                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  5789                                  
  5790 00001D7D FEC1                    		inc	cl
  5791 00001D7F 880E[9802]              		mov	[DEFAULTDRIVE], cl
  5792                                  		;mov	[296h], cl
  5793                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  5794                                  
  5795                                  		;mov	word [CURRENTDOSLOCATION], 0AF8h ; 10/12/2023
  5796 00001D83 C706[7302]1A0A          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  5797                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  5798                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  5799                                  					; dos_load_seg
  5800                                  
  5801                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  5802                                  ; printer cards. we initialize this value to point to an iret only if
  5803                                  ;
  5804                                  ; 1) the original segment points to storage inside valid ram.
  5805                                  ;
  5806                                  ; 2) the original segment is 0F000:xxxx
  5807                                  
  5808                                  		;;;mov	ax, 46Dh	; SYSINIT segment
  5809                                  		;;mov	ax, 544h	; 10/12/2023
  5810                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  5811                                  		;mov	es, ax
  5812                                  		; 20/12/2022
  5813                                  		;push	ds ; SYSINITSEG
  5814                                  		;pop	es
  5815 00001D89 8EC2                    		mov	es, dx ; SYSINITSEG
  5816 00001D8B 31C0                    		xor	ax, ax ; 0
  5817 00001D8D 8ED8                    		mov	ds, ax		; segment 0
  5818                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  5819 00001D8F A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  5820                                  		; 18/10/2022
  5821 00001D92 263B06[9402]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  5822                                  		;cmp	ax, es:292h	; [ES:MEMORY_SIZE]  ; (condition 1)
  5823 00001D97 7605                    		jbe	short resetintf
  5824 00001D99 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  5825 00001D9C 750A                    		jnz	short keepintf
  5826                                  resetintf:	
  5827 00001D9E C7063C00[1406]          		mov	word [0Fh*4], intret			
  5828                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  5829 00001DA4 8C0E3E00                		mov	word [0Fh*4+2], cs
  5830                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  5831                                  keepintf:				
  5832                                  ; end important
  5833                                  
  5834                                  ; 17/10/2022
  5835                                  ; 28/12/2018 - Retro DOS v4.0
  5836                                  
  5837                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  5838                                  ;
  5839                                  ; we will check if the system has ibm extended keyboard by
  5840                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  5841                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  5842                                  ; for the extended keyboard function. use cx as the temporary register.
  5843                                  
  5844                                  		; 20/12/2022
  5845                                  		; ds = 0
  5846                                  		;xor	cx, cx
  5847                                  		;mov	ds, cx
  5848                                  
  5849 00001DA8 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  5850                                  
  5851                                  		; 20/12/2022
  5852                                  		; 20/03/2019
  5853 00001DAC 0E                      		push	cs
  5854 00001DAD 1F                      		pop	ds
  5855                                  
  5856                                  		;test	cl, 00010000b ; 10h
  5857 00001DAE F6C110                  		test	cl, 10h		; extended keyboard ?
  5858 00001DB1 740A                    		jz	short org_key	; no, original keyboard
  5859                                  
  5860                                  		; 20/12/2022
  5861                                  		;  ds = cs
  5862 00001DB3 C606[7E04]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  5863 00001DB8 C606[7F04]11            		mov	byte [keysts_func], 11h
  5864                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  5865                                  		;mov	byte [cs:keysts_func], 11h
  5866                                  					; change for extended keyboard functions
  5867                                  org_key:
  5868                                  
  5869                                  ; 02/06/2018 - Retro DOS v3.0
  5870                                  
  5871                                  ;**************************************************************
  5872                                  ;	will initialize the number of drives
  5873                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  5874                                  ;	the indications are as follows:
  5875                                  ;
  5876                                  ;	bits	7	6	drives
  5877                                  ;		0	0	1
  5878                                  ;		0	1	2
  5879                                  ;		1	0	3
  5880                                  ;		1	1	4
  5881                                  ;**************************************************************
  5882                                  		
  5883                                  		; 20/12/2022
  5884                                  		; ds = cs
  5885                                  		;push	cs
  5886                                  		;pop	ds
  5887                                  		; 21/12/2022
  5888                                  		;push	cs
  5889                                  		;pop	es
  5890                                  
  5891 00001DBD E8C00A                  		call	cmos_clock_read	; If cmos clock	exists,
  5892                                  					; then set the system time according to	that.
  5893                                  					; also,	reset the cmos clock rate.
  5894                                  		; 18/10/2022
  5895                                  		;mov	word ptr BData_start, offset harddrv ;
  5896                                  					; set up pointer to hdrive
  5897                                  		; 02/10/2022
  5898 00001DC0 C706[0000][4B08]        		mov	word [hdrv_pat], harddrv 
  5899                                  
  5900                                  		; 20/12/2022
  5901                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  5902 00001DC6 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  5903                                  
  5904 00001DC7 30E4                    		xor	ah, ah		; chuck	fat id byte
  5905 00001DC9 A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  5906 00001DCC A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  5907 00001DCF D1E0                    		shl	ax, 1
  5908 00001DD1 0106[5E1A]              		add	[last_dskdrv_table], ax
  5909                                  
  5910                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM)
  5911                                  		; ((MSDOS 6.22 IO.SYS & PCDOS 7.1 IBMBIO.COM))
  5912                                  		; ........
  5913 00001DD5 1E                      		push    ds
  5914 00001DD6 B800F0                  		mov     ax, 0F000h
  5915 00001DD9 8ED8                    		mov     ds, ax
  5916                                  
  5917 00001DDB 813EEAFF434F            		cmp	word [0FFEAh], 'CO' ; 'COMPAQ'
  5918 00001DE1 751F                    		jne	short skip_mode2
  5919 00001DE3 813EECFF4D50            		cmp	word [0FFECh], 'MP'
  5920 00001DE9 7517                    		jne	short skip_mode2
  5921 00001DEB 813EEEFF4151            		cmp	word [0FFEEh], 'AQ'
  5922 00001DF1 750F                    		jne	short skip_mode2
  5923                                  
  5924 00001DF3 B800E4                  		mov	ax, 0E400h	; get advanced system info (COMPAQ ROMBIOS)
  5925 00001DF6 CD15                    		int	15h
  5926 00001DF8 7208                    		jc	short skip_mode2
  5927                                  		; 10/12/2023
  5928                                  		; PCDOS 7.1 IBMBIO.COM
  5929                                  		;or	bx, 0           ; or bx,40h ; enable mode 2
  5930                                  					; (MSDOS 6.0)
  5931                                  		; MSDOS 6.22 IO.SYS
  5932 00001DFA 83CB40                  		or	bx, 40h		; enable mode 2 (dual harddisk controller)
  5933 00001DFD B880E4                  		mov	ax, 0E480h      ; set advanced system info (COMPAQ ROMBIOS)
  5934 00001E00 CD15                    		int	15h
  5935                                  skip_mode2:
  5936 00001E02 1F                      		pop	ds
  5937                                  		; ........
  5938                                  
  5939 00001E03 B280                    		mov	dl, 80h
  5940 00001E05 B408                    		mov	ah, 8
  5941 00001E07 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5942                                  					; DL = drive number
  5943                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5944                                  					; DL = number of consecutive drives
  5945                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5946 00001E09 7204                    		jc	short enddrv
  5947 00001E0B 8816[5D1A]              		mov	[hnum], dl	; save number of hard disk drives
  5948                                  enddrv:
  5949                                  		; 21/12/2022
  5950 00001E0F 0E                      		push	cs
  5951 00001E10 07                      		pop	es
  5952                                  
  5953                                  ; scan the list of drives to determine their type. we have three flavors of
  5954                                  ; diskette drives:
  5955                                  ;
  5956                                  ;   48tpi drives    we do nothing special for them
  5957                                  ;   96tpi drives    mark the fact that they have changeline support.
  5958                                  ;   3.5"  drives    mark changeline support and small.
  5959                                  ;
  5960                                  ; the following code uses registers for certain values:
  5961                                  ;
  5962                                  ;   dl - physical drive
  5963                                  ;   ds:di - points to current bds
  5964                                  ;   cx - flag bits for bds
  5965                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  5966                                  					
  5967 00001E11 30D2                    		xor	dl, dl
  5968                                  
  5969                                  		; 20/12/2022
  5970                                  		; ds = cs
  5971                                  		; 17/06/2018		 
  5972                                  		;push	cs
  5973                                  		;pop	ds
  5974                                  
  5975 00001E13 C606[2C01]09            		mov	byte [eot], 9
  5976 00001E18 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  5977                                  					; to set aside two bdss	for the	two fake floppy	drives
  5978                                  
  5979                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  5980                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  5981                                  
  5982                                  ; check to see if we are faking floppy drives. if not we don't
  5983                                  ; do anything special. if we are faking floppy drives we need
  5984                                  ; to set aside two bdss for the two fake floppy drives. we
  5985                                  ; don't need to initalise any fields though. so starting at start_bds
  5986                                  ; use the link field in the bds structure to go to the second bds
  5987                                  ; in the list and initalise it's link field to -1 to set the end of
  5988                                  ; the list. then jump to the routine at dohard to allocate/initialise
  5989                                  ; the bds for harddrives.
  5990                                  
  5991 00001E1B 803E[111A]01            		cmp	byte [fakefloppydrv], 1
  5992 00001E20 750B                    		jnz	short loop_drive
  5993 00001E22 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5994                                  					; di <-	first bds link
  5995 00001E24 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5996                                  					; di <-	second bds link
  5997 00001E26 C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  5998 00001E2A E98801                  		jmp	dohard		; allocate/initialise bds for harddrives
  5999                                  ;-----------------------------------------------------------------------------
  6000                                  
  6001                                  loop_drive:				
  6002 00001E2D 3A16[7500]              		cmp	dl, [drvmax]
  6003 00001E31 7203                    		jb	short got_more
  6004 00001E33 E97B01                  		jmp	done_drives
  6005                                  ;-----------------------------------------------------------------------------
  6006                                  
  6007                                  got_more:	
  6008                                  		; 12/12/2023
  6009                                  		;xor	cx, cx		; zero all flags
  6010 00001E36 8B3D                    		mov	di, [di]	; [di+BDS.link]
  6011                                  					; get next bds
  6012                                  		; ........
  6013                                  		; 10/12/2023 - Retro DOS v5.0
  6014                                  		; (PCDOS 7.1 IBMBIO.COM BIOSDATA:2046h) 
  6015 00001E38 83FFFF                  		cmp	di, 0FFFFh      ; end of link ?
  6016 00001E3B 7516                    		jne	short not_last_bds
  6017 00001E3D 88D0                    		mov	al, dl          ; drive number (0 based)
  6018 00001E3F 98                      		cbw
  6019 00001E40 01C0                    		add	ax, ax
  6020 00001E42 05[3C05]                		add	ax, dskdrvs
  6021 00001E45 A3[5E1A]                		mov	[last_dskdrv_table], ax
  6022 00001E48 8B3E[601A]              		mov	di, [end_of_bdss]
  6023 00001E4C E8FB09                  		call	xinstall_bds
  6024 00001E4F FE0E[7500]              		dec	byte [drvmax]
  6025                                  not_last_bds:
  6026                                  		; ........
  6027                                  
  6028 00001E53 B600                    		mov	dh, 0		; ff48tpi
  6029                                  					; set form factor to 48	tpi
  6030 00001E55 C606[0E1A]28            		mov	byte [num_cyln], 40 ; 40 tracks per side
  6031                                  		
  6032                                  		; 20/12/2022
  6033                                  		;push	ds ; 11/05/2019	
  6034 00001E5A 57                      		push	di
  6035 00001E5B 52                      		push	dx
  6036                                  		;push	cx ; not necessary (10/12/2023)
  6037 00001E5C 06                      		push	es ; ((*)) ; 20/12/2022
  6038                                  
  6039                                  		; ...........
  6040                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  6041                                  		;xor	bx, bx
  6042                                  		;xor	cx, cx
  6043 00001E5D 52                      		push	dx  ; dl = drive number	
  6044                                  		
  6045 00001E5E B408                    		mov	ah, 8
  6046 00001E60 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6047                                  					; DL = drive number
  6048                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6049                                  					; DL = number of consecutive drives
  6050                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6051                                  		;jc	short noparmsfromrom
  6052                                  		; 10/12/2023
  6053 00001E62 58                      		pop	ax  ; al = drive number
  6054 00001E63 7303                    		jnc	short chk_drv_type
  6055 00001E65 E9E600                  		jmp	noparmsfromrom
  6056                                  
  6057                                  chk_drv_type:
  6058                                  		; 10/12/2023
  6059                                  		; ch = low eight bits of maximum cylinder number
  6060                                  		; cl = maximum sector number (bits 5-0)
  6061                                  		;      high two bits of maximum cylinder number (bits 7-6)
  6062                                  		;
  6063 00001E68 80FB10                  		cmp	bl, 10h		; ATAPI Removable Media Device
  6064 00001E6B 7554                    		jne	short not_atapi_removable
  6065                                  		
  6066                                  		; save ds:si
  6067 00001E6D 1E                      		push	ds
  6068                                  		;push	si	; not necessary (10/12/2023)
  6069                                  		
  6070 00001E6E 88C2                    		mov	dl, al
  6071 00001E70 83EC1A                  		sub	sp, 26
  6072 00001E73 31C0                    		xor	ax, ax ; 0
  6073 00001E75 50                      		push	ax
  6074 00001E76 B81E00                  		mov	ax, 30
  6075 00001E79 50                      		push	ax
  6076 00001E7A 89E6                    		mov	si, sp		; DS:SI = segment:offset pointer to Result Buffer
  6077 00001E7C 16                      		push	ss
  6078 00001E7D 1F                      		pop	ds
  6079 00001E7E B448                    		mov	ah, 48h
  6080 00001E80 CD13                    		int	13h		; DISK - IBM/MS Extension
  6081                                  					; GET DRIVE PARAMETERS (DL - drive, DS:SI - buffer)
  6082 00001E82 7239                    		jb	short ext_gdp_err
  6083 00001E84 8B4408                  		mov	ax, [si+8]	; physical number of heads
  6084 00001E87 A3[0C1A]                		mov	[num_heads], ax
  6085 00001E8A 8B4404                  		mov	ax, [si+4]	; physical number of cylinders
  6086 00001E8D A3[0E1A]                		mov	[num_cyln], ax
  6087 00001E90 8A440C                  		mov	al, [si+0Ch]	; physical number of sectors per track
  6088 00001E93 A2[101A]                		mov	[sec_trk], al
  6089 00001E96 3A06[2C01]              		cmp	al, [eot]
  6090 00001E9A 7603                    		jbe	short _eotok
  6091 00001E9C A2[2C01]                		mov	[eot], al
  6092                                  
  6093                                  _eotok:		; 10/12/2023
  6094                                  		;xor	al, al
  6095 00001E9F 31C9                    		xor	cx, cx ; 0
  6096 00001EA1 F6440210                		test	byte [si+2], 10h ; information flags
  6097                                  					; bit 4 = Device has change line support
  6098 00001EA5 7403                    		jz	short not_chgline_sup
  6099                                  		;or	al, 2		; change line support
  6100 00001EA7 80C902                  		or	cl, 2
  6101                                  not_chgline_sup:
  6102 00001EAA 83C41E                  		add	sp, 30
  6103                                  		;pop	si	; (10/12/2023)
  6104 00001EAD 1F                      		pop	ds
  6105                                  		;
  6106 00001EAE 07                      		pop	es	; es=cs=ds (21/12/2022)
  6107                                  		;pop	cx	; (10/12/2023)
  6108 00001EAF 5A                      		pop	dx
  6109 00001EB0 5F                      		pop	di
  6110                                  		;pop	ds	; (21/12/2022)
  6111                                  
  6112                                  		; 10/12/2023
  6113 00001EB1 F6C102                  		test	cl, 2
  6114                                  		;test	al, 2
  6115                                  		;jz	short gotother_j
  6116 00001EB4 7450                    		jz	short gotother
  6117                                  		;or	cl, al
  6118 00001EB6 C606[7700]01            		mov	byte [fhave96], 1 ; Device has change line support
  6119                                  gotother_j:
  6120 00001EBB EB49                    		jmp	short gotother
  6121                                  ext_gdp_err:
  6122 00001EBD 83C41E                  		add	sp, 30
  6123                                  		;pop	si	; (10/12/2023)
  6124 00001EC0 1F                      		pop	ds
  6125                                  
  6126                                  		; 10/12/2023
  6127                                  not_atapi_removable:
  6128                                  		; ...........
  6129                                  
  6130                                  
  6131                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  6132                                  ; in this case, we are going to put bogus informations to bds table.
  6133                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  6134                                  ; they are calculated at the later time. this is just for the diagnostic
  6135                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  6136                                  ; this should only happen with drive b.
  6137                                  
  6138 00001EC1 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  6139 00001EC4 7505                    		jnz	short pfr_ok
  6140                                  
  6141                                  		;mov	ch, 39		; rom gave wrong info.
  6142                                  		;mov	cl, 9		; let's default to 360k.
  6143                                  		; 20/12/2022
  6144 00001EC6 B90927                  		mov	cx, 2709h
  6145                                  
  6146 00001EC9 B601                    		mov	dh, 1
  6147                                  pfr_ok:					
  6148                                  		;inc	dh		; make number of heads 1-based
  6149                                  		;mov	[num_heads], dh	; save parms returned by rom
  6150                                  		; 10/12/2023
  6151 00001ECB 86D6                    		xchg	dl, dh
  6152 00001ECD 30F6                    		xor	dh, dh
  6153 00001ECF 42                      		inc	dx		; make number of heads 1-based
  6154 00001ED0 8916[0C1A]              		mov	[num_heads], dx
  6155                                  
  6156                                  		;inc	ch		; make number of cylinders 1-based
  6157                                  		;and	cl, 3Fh
  6158                                  		;mov	[sec_trk], cl
  6159                                  		;mov	[num_cyln], ch	; assume less than 256 cylinders!!
  6160                                  		; 10/12/2023
  6161 00001ED4 88CA                    		mov	dl, cl
  6162 00001ED6 80E23F                  		and	dl, 3Fh
  6163 00001ED9 8816[101A]              		mov	[sec_trk], dl
  6164 00001EDD 86CD                    		xchg	cl, ch
  6165 00001EDF D0C5                    		rol	ch, 1
  6166 00001EE1 D0C5                    		rol	ch, 1
  6167 00001EE3 80E503                  		and	ch, 3
  6168 00001EE6 41                      		inc	cx		; make number of cylinders 1-based
  6169 00001EE7 890E[0E1A]              		mov	[num_cyln], cx
  6170                                  
  6171                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  6172                                  
  6173                                  		;mov	cl, [sec_trk] ; 10/12/2023
  6174                                  		;cmp	cl, [eot]	; may set carry
  6175                                  		;;jbe	short eot_ok
  6176                                  		;; 09/12/2022
  6177                                  		;;jne	short eotok  ; wrong ! 14/08/2023
  6178                                  		;; 14/08/2023
  6179                                  		;jbe	short eotok
  6180                                  		;mov	[eot], cl
  6181                                  		; 10/12/2023
  6182 00001EEB 3A16[2C01]              		cmp	dl, [eot] ; dl = [sec_trk]
  6183 00001EEF 7604                    		jbe	short eotok
  6184 00001EF1 8816[2C01]              		mov	[eot], dl
  6185                                  ;eot_ok:
  6186                                  eotok:
  6187                                  		; 10/12/2023
  6188                                  		; !!!
  6189                                  		; (following pops are moved to 'chk_changeline' procedure)
  6190                                  		;
  6191                                  		; 20/12/2022
  6192                                  		;pop	es ; ((*)) es = cs = ds
  6193                                  		;;pop	cx	; 10/12/2023
  6194                                  		;pop	dx
  6195                                  		;pop	di
  6196                                  
  6197                                  		; 20/12/2022
  6198                                  		;pop	ds
  6199                                  
  6200                                  ; Check	for presence of	changeline
  6201                                  
  6202                                  ; 10/12/2023
  6203                                  %if 0
  6204                                  		; 10/12/2023
  6205                                  		;xor	cx, cx	; 0
  6206                                  		;push	cx
  6207                                  		push	dx
  6208                                  
  6209                                  		mov	ah, 15h
  6210                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  6211                                  					; DL = drive ID
  6212                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  6213                                  					; CX:DX	= number of sectors on the media
  6214                                  		; 10/12/2023
  6215                                  		pop	dx
  6216                                  		;pop	cx
  6217                                  		mov	cx, 0 ; 12/12/2023
  6218                                  		jc	short changeline_done
  6219                                  		cmp	ah, 2		; check	for presence of	changeline
  6220                                  		jnz	short changeline_done
  6221                                  
  6222                                  ; we have a drive with change line support.
  6223                                  
  6224                                  		or	cl, 2		; fchangeline
  6225                                  					; signal type
  6226                                  		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  6227                                  %endif
  6228                                  		; 10/12/2023
  6229 00001EF5 E83800                  		call	chk_changeline
  6230                                  		;jc	short changeline_done
  6231                                  
  6232                                  ; we now try to set up the form factor for the types of media that we know
  6233                                  ; and can recognise. for the rest, we set the form factor as "other".
  6234                                  
  6235                                  changeline_done:
  6236                                  
  6237                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  6238                                  			
  6239 00001EF8 803E[0E1A]28            		cmp	byte [num_cyln], 40
  6240 00001EFD 750B                    		jnz	short try_80
  6241 00001EFF 803E[101A]09            		cmp	byte [sec_trk], 9
  6242 00001F04 765F                    		jbe	short nextdrive
  6243                                  gotother:
  6244                                  		; 10/12/2023
  6245                                  		; ch = 0, cl = 2 or 0
  6246                                  				
  6247 00001F06 B607                    		mov	dh, 7 		; ffOther
  6248                                  					; we have a "strange" medium 
  6249 00001F08 EB5B                    		jmp	short nextdrive
  6250                                  ;-----------------------------------------------------------------------------
  6251                                  
  6252                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  6253                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  6254                                  
  6255                                  try_80:					
  6256 00001F0A 803E[0E1A]50            		cmp	byte [num_cyln], 80
  6257 00001F0F 75F5                    		jnz	short gotother
  6258 00001F11 B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  6259 00001F13 803E[101A]24            		cmp	byte [sec_trk], 36 ; is it ?
  6260 00001F18 744B                    		jz	short nextdrive	; yeah,	go update
  6261                                  
  6262                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  6263                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  6264                                  		;mov	dh, ff144
  6265                                  		;cmp	byte [sec_trk], 18
  6266                                  		;je	short nextdrive
  6267                                  
  6268 00001F1A 803E[101A]0F            		cmp	byte [sec_trk], 15
  6269 00001F1F 740B                    		jz	short got96
  6270                                  		
  6271 00001F21 803E[101A]09            		cmp	byte [sec_trk], 9
  6272 00001F26 75DE                    		jnz	short gotother
  6273                                  		
  6274 00001F28 B602                    		mov	dh, 2 		; ffSmall
  6275 00001F2A EB39                    		jmp	short nextdrive
  6276                                  ; ----------------------------------------------------------------------------
  6277                                  
  6278                                  got96:					
  6279 00001F2C B601                    		mov	dh, 1		; ff96tpi
  6280 00001F2E EB35                    		jmp	short nextdrive
  6281                                  
  6282                                  ; ----------------------------------------------------------------------------
  6283                                  		
  6284                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  6285                                  		; check change line feature (and set fhave96 if there is)
  6286                                  		; (common procedure for 'eotok:' and 'noparmsfromrom:')
  6287                                  chk_changeline:
  6288 00001F30 59                      		pop	cx ; near call return address
  6289                                  
  6290                                  		; (pop es, dx, di for 'eotok' and 'noparmsfromrom' procs)
  6291 00001F31 07                      		pop	es ; es=cs=ds ; 21/12/2022
  6292                                  		;pop	cx	; (10/12/2023)
  6293 00001F32 5A                      		pop	dx
  6294 00001F33 5F                      		pop	di ; BDS address/offset
  6295                                  		
  6296 00001F34 51                      		push	cx ; near call return address
  6297                                  
  6298                                  		;xor	cx, cx ; 0
  6299                                  		;push	cx
  6300 00001F35 52                      		push	dx
  6301                                  
  6302 00001F36 B415                    		mov	ah, 15h
  6303 00001F38 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  6304                                  					; DL = drive ID
  6305                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  6306                                  					; CX:DX	= number of sectors on the media
  6307 00001F3A 5A                      		pop	dx
  6308                                  		;pop	cx
  6309 00001F3B B90000                  		mov	cx, 0
  6310 00001F3E 720D                    		jc	short chk_chgl_1
  6311                                  
  6312 00001F40 80FC02                  		cmp	ah, 2		; is there changeline?
  6313 00001F43 7508                    		jne	short chk_chgl_2 ; *
  6314                                  
  6315 00001F45 80C902                  		or	cl, 2
  6316                                  		;or	cl, ah ; 2
  6317 00001F48 C606[7700]01            		mov	byte [fhave96], 1 ; fchangeline
  6318                                  		; cf = 0
  6319                                  chk_chgl_1:
  6320                                  chk_chgl_2:
  6321 00001F4D C3                      		retn
  6322                                  
  6323                                  ;chk_chgl_2:	; *
  6324                                  ;		; 10/12/2023
  6325                                  ;		; ah = 1 ; harddisk type (ah = 3) return not possible here for floppies 
  6326                                  ;		;stc
  6327                                  ;		; cf = 1
  6328                                  ;		retn
  6329                                  
  6330                                  ; ----------------------------------------------------------------------------
  6331                                  
  6332                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  6333                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  6334                                  
  6335                                  noparmsfromrom:
  6336                                  		; 10/12/2023
  6337                                  		; !!!
  6338                                  		; (following pops are moved to 'chk_changeline' procedure)
  6339                                  		;
  6340                                  		; 20/12/2022
  6341                                  		;pop	es ; ((*))
  6342                                  		;;pop	cx	; (10/12/2023)
  6343                                  		;pop	dx
  6344                                  		;pop	di
  6345                                  		
  6346                                  		; 20/12/2022
  6347                                  		;pop	ds
  6348                                  ; 10/12/2023
  6349                                  %if 0
  6350                                  		; 10/12/2023
  6351                                  		;xor	cx, cx ; 0
  6352                                  		;push	cx
  6353                                  		push	dx
  6354                                  
  6355                                  
  6356                                  		mov	ah, 15h
  6357                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  6358                                  					; DL = drive ID
  6359                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  6360                                  					; CX:DX	= number of sectors on the media
  6361                                  		; 10/12/2023
  6362                                  		pop	dx
  6363                                  		;pop	cx
  6364                                  		mov	cx, 0 ; 12/12/2023
  6365                                  		jc	short nextdrive
  6366                                  
  6367                                  		cmp	ah, 2		; is there changeline?
  6368                                  		jnz	short nextdrive
  6369                                  
  6370                                  		or	cl, 2
  6371                                  		mov	byte [fhave96], 1 ; fchangeline
  6372                                  %endif
  6373                                  		; 10/12/2023
  6374 00001F4E E8DFFF                  		call	chk_changeline
  6375 00001F51 7212                    		jc	short nextdrive
  6376                                  		
  6377                                  		; change line support, [fhave96] = 1
  6378                                  		
  6379 00001F53 C606[0E1A]50            		mov	byte [num_cyln], 80
  6380 00001F58 B601                    		mov	dh, 1		; ff96tpi
  6381 00001F5A B00F                    		mov	al, 15
  6382 00001F5C 3A06[2C01]              		cmp	al, [eot]
  6383 00001F60 7603                    		jbe	short nextdrive
  6384 00001F62 A2[2C01]                		mov	[eot], al
  6385                                  ; ----------------------------------------------------------------------------
  6386                                  
  6387                                  ;eot_ok2:
  6388                                  nextdrive:
  6389                                  		; 10/12/2023
  6390                                  		; ch = 0, cl = 2 or 0	
  6391                                  				
  6392 00001F65 80C920                  		or	cl, 20h	; fi_own_physical
  6393                                  					; set this true	for all	drives
  6394 00001F68 88D7                    		mov	bh, dl		; save int13 drive number
  6395                                  
  6396                                  ; we need to do special things if we have a single drive system and are setting
  6397                                  ; up a logical drive. it needs to have the same int13 drive number as its
  6398                                  ; counterpart, but the next drive letter. also reset ownership flag.
  6399                                  ; we detect the presence of this situation by examining the flag single for the
  6400                                  ; value 2.
  6401 00001F6A 803E[7800]02            		cmp	byte [single], 2
  6402 00001F6F 7505                    		jnz	short not_special
  6403 00001F71 FECF                    		dec	bh		; int13	drive number same for logical drive
  6404 00001F73 80F120                  		xor	cl, 20h	; fi_own_physical
  6405                                  					; reset	ownership flag for logical drive
  6406                                  not_special:
  6407                                  
  6408                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  6409                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  6410                                  ; form factor is of type "ffother".
  6411                                  				
  6412                                  		;xor	ax, ax		; fill BDS for drive
  6413                                  		;mov	al, [num_heads]
  6414                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM) ; *
  6415 00001F76 A1[0C1A]                		mov	ax, [num_heads]
  6416                                  		;mov	[di+36h], ax	; [di+BDS.rheads]
  6417 00001F79 894552                  		mov	[di+52h], ax	; [di+BDS.rheads] ; *
  6418 00001F7C 31C0                    		xor	ax, ax		; *
  6419 00001F7E A0[101A]                		mov	al, [sec_trk]
  6420                                  		;mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  6421 00001F81 894550                  		mov	[di+50h], ax	; [di+BDS.rsecpertrack] ; *
  6422                                  		;mov	[di+23h], cx	; [di+BDS.flags]
  6423 00001F84 894D3F                  		mov	[di+3Fh], cx	; [di+BDS.flags] ; *
  6424                                  		;mov	[di+22h], dh	; [di+BDS.formfactor]
  6425 00001F87 88753E                  		mov	[di+3Eh], dh	; [di+BDS.formfactor] ; *
  6426 00001F8A 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  6427 00001F8D 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  6428                                  		;mov	bl, [num_cyln]
  6429                                  		;mov	[di+25h], bl	; [di+BDS.cylinders]
  6430                                  		; 10/12/2023
  6431 00001F90 A1[0E1A]                		mov	ax, [num_cyln]
  6432 00001F93 894541                  		mov	[di+41h], ax	; [di+BDS.cylinders] ; *
  6433                                  
  6434 00001F96 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  6435 00001F9B 7510                    		jnz	short no_single
  6436                                  		;mov	byte [single], 2 ; Don't forget we have
  6437                                  					; single drive system
  6438                                  		; 10/12/2023
  6439 00001F9D FE06[7800]              		inc	byte [single]	; [single] = 2
  6440                                  		; 18/12/2022
  6441 00001FA1 80C910                  		or	cl, 10h
  6442                                  		;or	cx, 10h		; fi_am_mult
  6443                                  					; set that this	is one of several drives
  6444                                  		;or	[di+23h], cx	; [di+BDS.flags]
  6445 00001FA4 094D3F                  		or	[di+3Fh], cx	; [di+BDS.flags] ; *
  6446                                  					; save flags
  6447 00001FA7 8B3D                    		mov	di, [di]	; [di+BDS.link]
  6448                                  					; move to next BDS in list
  6449 00001FA9 FEC2                    		inc	dl		; add a	number
  6450 00001FAB EBB8                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  6451                                  ; ----------------------------------------------------------------------------
  6452                                  
  6453                                  no_single:				
  6454                                  		;inc	dl
  6455                                  		; 18/12/2022
  6456 00001FAD 42                      		inc	dx
  6457 00001FAE E97CFE                  		jmp	loop_drive
  6458                                  ; ----------------------------------------------------------------------------
  6459                                  
  6460                                  		; 11/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  6461                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:21E8h)
  6462                                  done_drives:	
  6463                                  		;mov	word [di+BDS.link], -1
  6464 00001FB1 C705FFFF                		mov	word [di], -1	; set link to null
  6465                                  
  6466                                  ; set up all the hard drives in	the system
  6467                                  
  6468                                  		; 20/12/2022
  6469                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6470                                  dohard:					
  6471 00001FB5 8A36[5D1A]              		mov	dh, [hnum]
  6472 00001FB9 08F6                    		or	dh, dh		; done if no hardfiles
  6473 00001FBB 7459                    		jz	short static_configure
  6474 00001FBD B280                    		mov	dl, 80h
  6475                                  dohard1:				
  6476 00001FBF 52                      		push	dx
  6477 00001FC0 8B3E[601A]              		mov	di, [end_of_bdss]
  6478 00001FC4 8A1E[7500]              		mov	bl, [drvmax]
  6479 00001FC8 B700                    		mov	bh, 0		; first	primary	partition (or active)
  6480 00001FCA E89A01                  		call	sethard
  6481 00001FCD 7208                    		jb	short hardfile_err
  6482 00001FCF E86308                  		call	dmax_check	; error	if already 26 drives
  6483 00001FD2 7303                    		jnb	short hardfile_err
  6484 00001FD4 E87308                  		call	xinstall_bds	; insert new bds into linked list
  6485                                  hardfile_err:				
  6486 00001FD7 5A                      		pop	dx
  6487                                  		;inc	dl		; next hard drive
  6488                                  		; 12/12/2023
  6489 00001FD8 42                      		inc	dx
  6490 00001FD9 FECE                    		dec	dh
  6491 00001FDB 75E2                    		jnz	short dohard1
  6492                                  
  6493                                  ; end of physical drive	initialization
  6494                                  
  6495                                  ; *** do not change the position of the following statement.
  6496                                  ; *** domini routine will use [drvmax] value for the start of the logical
  6497                                  ; *** drive number of mini disk(s).
  6498                                  					
  6499 00001FDD E8C806                  		call	domini		; for setting up mini disks, if found
  6500                                  
  6501                                  ; -- begin added section
  6502                                  
  6503 00001FE0 8A36[5D1A]              		mov	dh, [hnum]	; we already know this is >0
  6504 00001FE4 B280                    		mov	dl, 80h
  6505                                  dohardx1:				
  6506 00001FE6 B701                    		mov	bh, 1		; do all subsequent primary partitions
  6507                                  dohardx2:				
  6508 00001FE8 52                      		push	dx
  6509 00001FE9 53                      		push	bx
  6510 00001FEA 8B3E[601A]              		mov	di, [end_of_bdss]
  6511 00001FEE 8A1E[7500]              		mov	bl, [drvmax]
  6512 00001FF2 E87201                  		call	sethard
  6513 00001FF5 720E                    		jb	short dohardx4	; move to next hardfile if error
  6514 00001FF7 E83B08                  		call	dmax_check	; make sure <=26 drives
  6515 00001FFA 7309                    		jnb	short dohardx4	; skip if error
  6516 00001FFC E84B08                  		call	xinstall_bds	; insert new bds into linked list
  6517 00001FFF 5B                      		pop	bx		; get partition number
  6518 00002000 5A                      		pop	dx		; restore physical drive counts
  6519 00002001 FEC7                    		inc	bh
  6520 00002003 EBE3                    		jmp	short dohardx2	; keep looping until we fail
  6521                                  ; ----------------------------------------------------------------------------
  6522                                  
  6523                                  dohardx4:				
  6524 00002005 5B                      		pop	bx		; unjunk partition number from stack
  6525 00002006 5A                      		pop	dx		; restore physical drive counts
  6526                                  		;inc	dl		; next hard drive
  6527                                  		; 12/12/2023
  6528 00002007 42                      		inc	dx
  6529 00002008 FECE                    		dec	dh
  6530 0000200A 75DA                    		jnz	short dohardx1
  6531                                  
  6532                                  ; -- end changed section
  6533                                  
  6534                                  ;******************************************************************************
  6535                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  6536                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  6537                                  ; than two diskette drives
  6538                                  ;
  6539                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  6540                                  ;		as usual and then rescan the bds chain to adjust the  drive
  6541                                  ;		letters. to do this, scan for disk drives and assign logical
  6542                                  ;		drive number starting from 2 and then rescan diskette drives
  6543                                  ;		and assign next to the last logical drive number of last disk
  6544                                  ;		drive to the 3rd and 4th diskette drives.
  6545                                  ;******************************************************************************
  6546                                  
  6547 0000200C 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  6548                                  		;jbe	short static_configure ; no - no need for remapping
  6549 00002011 7603                    		jbe	short no_remap
  6550 00002013 E8D500                  		call	remap		; remap	bds chain to adjust driver letters
  6551                                  no_remap:
  6552                                  
  6553                                  ; End of drive initialization.
  6554                                  
  6555                                  ; ----------------------------------------------------------------------------
  6556                                  
  6557                                  ;we now decide, based on the configurations available so far, what
  6558                                  ;code or data we need to keep as a stay resident code. the following table
  6559                                  ;shows the configurations under consideration. they are listed in the order
  6560                                  ;of their current position memory.
  6561                                  ;
  6562                                  ;configuration will be done in two ways:
  6563                                  ;
  6564                                  ;first, we are going to set "static configuration". static configuration will
  6565                                  ;consider from basic configuration to endof96tpi configuration. the result
  6566                                  ;of static configuration will be the address the dynamic configuration will
  6567                                  ;use to start with.
  6568                                  ;
  6569                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  6570                                  ;involves possible relocation of code or data. dynamic configuration routine
  6571                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  6572                                  ;code individually. after these operation, [dosdatasg] will be set.
  6573                                  ;this will be the place sysinit routine will relocate msdos module for good.
  6574                                  
  6575                                  ; -- begin changed section
  6576                                  ;
  6577                                  ;   1.	 basic configuration for msbio (endfloppy)
  6578                                  ;   2.   end96tpi	; a system that supports "change line error"
  6579                                  ;   3.	 end of bdss	; end of bdss for hard disks
  6580                                  ;   4.	 endatrom	;some of at rom fix module.
  6581                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  6582                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  6583                                  ;
  6584                                  
  6585                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  6586                                  
  6587                                  static_configure:			
  6588 00002016 8B3E[601A]              		mov	di, [end_of_bdss]
  6589 0000201A 81FF[4C08]              		cmp	di, bdss	; 19/10/2022
  6590                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  6591 0000201E 750D                    		jnz	short dynamic_configure	; that's the end, then
  6592                                  		; 18/10/2022
  6593 00002020 BF[4C08]                		mov	di, end96tpi
  6594                                  		;mov	di, offset harddrv ; end96tpi
  6595                                  					; keep everything up to end96tpi
  6596 00002023 803E[7700]00            		cmp	byte [fhave96], 0
  6597 00002028 7503                    		jnz	short dynamic_configure
  6598                                  		
  6599 0000202A BF[3808]                		mov	di, endfloppy
  6600                                  dynamic_configure:
  6601                                  		; 20/12/2022
  6602                                  		;push	cs
  6603                                  		;pop	es
  6604                                  		
  6605                                  		; 10/12/2023
  6606 0000202D FC                      		cld	; clear direction flag is not necessary here !?
  6607                                  			; because there will not be a running program
  6608                                  			; which will set direction flag as backward (std)
  6609                                  
  6610                                  ; -- end changed section
  6611                                  
  6612                                  		; 20/12/2022
  6613                                  		; ds = cs <> es
  6614                                  		; ss = 0
  6615                                  		; sp = 700h
  6616                                  
  6617                                  		; 13/12/2023
  6618 0000202E BE00F0                  		mov	si, 0F000h
  6619 00002031 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  6620                                  
  6621 00002033 803E[AF05]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  6622                                  		;jnz	short checkcmosclock
  6623                                  		; 10/12/2023
  6624 00002038 751E                    		jnz	short checkcompaqbug ; no
  6625 0000203A 803E[5D1A]00            		cmp	byte [hnum], 0	; No hard file?
  6626                                  		;jz	short checkcmosclock
  6627 0000203F 7417                    		jz	short checkcompaqbug
  6628 00002041 97                      		xchg	ax, di		; save allocation pointer in ax
  6629                                  		; 13/12/2023
  6630                                  		;mov	si, 0F000h
  6631                                  		;mov	es, si		; ES ->	ROM BIOS segment
  6632 00002042 BE[661A]                		mov	si, bios_date	; "01/10/84"
  6633 00002045 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  6634 00002048 B90900                  		mov	cx, 9		; bdate_l
  6635                                  					; Only patch ROM for bios 01/10/84
  6636 0000204B F3A6                    		repe cmpsb		; check	for date + zero	on end
  6637 0000204D 97                      		xchg	ax, di		; restore allocation pointer
  6638                                  
  6639                                  ; M015 -- begin changes
  6640                                  
  6641                                  		;jnz	short checkcmosclock
  6642                                  		; 02/10/2022
  6643 0000204E 7508                    		jnz	short checkcompaqbug
  6644                                  
  6645                                  ; install at rom fix
  6646                                  
  6647                                  		; 19/10/2022
  6648                                  		;mov	cx, offset endatrom
  6649 00002050 B9[2018]                		mov	cx, endatrom
  6650                                  		;mov	si, offset ibm_disk_io
  6651 00002053 BE[F216]                		mov	si, ibm_disk_io
  6652 00002056 EB46                    		jmp	short install_int13_patch
  6653                                  ; ----------------------------------------------------------------------------
  6654                                  
  6655                                  ; M065 -- begin changes
  6656                                  ;
  6657                                  ; On certain systems with Western Digital disk controllers, the
  6658                                  ; following detection scheme caused an unpredictable and serious
  6659                                  ; failure. In particular, they've implemented a nonstandard
  6660                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  6661                                  ; what happens to be at es:[bx] and other memory locations indexed
  6662                                  ; off of it.
  6663                                  ;
  6664                                  ; Compaq was unable to tell us exactly which kind of systems have
  6665                                  ; the bug, except that they guarantee that the bug was fixed in
  6666                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  6667                                  ; string, and then look for date codes before 08/04/86 to decide
  6668                                  ; when to install the hook.
  6669                                  
  6670                                  ;checkcmosclock:
  6671                                  ; 02/10/2022				
  6672                                  checkcompaqbug:
  6673                                  		; 20/12/2022
  6674                                  		; es = 0F000h
  6675                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  6676                                  		;mov	es, ax
  6677                                  
  6678                                  		; 19/10/2022
  6679 00002058 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  6680                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  6681 0000205F 754B                    		jnz	short not_compaq_patch
  6682 00002061 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  6683                                  		;cmp	word ptr es:0FFECh, 'PM'
  6684 00002068 7542                    		jnz	short not_compaq_patch
  6685 0000206A 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  6686                                  		;cmp	word ptr es:0FFEEh, 'QA'
  6687 00002071 7539                    		jnz	short not_compaq_patch
  6688                                  
  6689                                  ; We're running on a COMPAQ. Now look at the date code.
  6690                                  
  6691 00002073 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  6692 00002077 86E0                    		xchg	ah, al
  6693                                  
  6694                                  ; 11/12/2023
  6695                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:22B9h)
  6696                                  %if 0
  6697                                  		cmp	ax, 3836h       ; '68' (NASM syntax) (('86' in MASM syntax))
  6698                                  		ja	short not_compaq_patch
  6699                                  		jz	short chkcompaqbug1
  6700                                  		cmp	ax, 3739h       ; '97'
  6701                                  		jbe	short not_compaq_patch
  6702                                  		stc
  6703                                  chkcompaqbug1:
  6704                                  		jb	short do_compaq_patch
  6705                                  		mov	ax, [es:0FFF5h]
  6706                                  		xchg	ah, al
  6707                                  		cmp	ax, 3038h       ; '80'
  6708                                  		ja	short not_compaq_patch
  6709                                  		jb	short do_compaq_patch
  6710                                  		mov	ax, [es:0FFF8h]
  6711                                  		xchg	ah, al
  6712                                  		cmp	ax, 3034h       ; '40'
  6713                                  		jnb	short not_compaq_patch
  6714                                  do_compaq_patch:
  6715                                  %endif
  6716                                  		; 11/12/2023
  6717                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1C85h)
  6718                                  
  6719 00002079 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  6720                                  		;cmp	ax, '86'        ; 3836h
  6721                                  					; is it	86?
  6722 0000207C 772E                    		ja	short not_compaq_patch
  6723 0000207E 7218                    		jb	short do_compaq_patch
  6724 00002080 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  6725 00002084 86E0                    		xchg	ah, al
  6726 00002086 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  6727                                  		;cmp	ax, '08'        ; 3038h
  6728                                  					; is it	08?
  6729 00002089 7721                    		ja	short not_compaq_patch
  6730 0000208B 720B                    		jb	short do_compaq_patch
  6731 0000208D 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  6732 00002091 86E0                    		xchg	ah, al
  6733 00002093 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  6734                                  		;cmp	ax, '04'        ; 3034h
  6735                                  					; is it	04?
  6736 00002096 7314                    		jnb	short not_compaq_patch
  6737                                  
  6738                                  do_compaq_patch:			
  6739 00002098 B9[3D18]                		mov	cx, end_compaq_i13hook
  6740                                  		;mov	si, endatrom
  6741                                  		; 11/12/2023
  6742 0000209B BE[2018]                		mov	si, compaq_disk_io ; endatrom
  6743                                  
  6744                                  install_int13_patch:			
  6745 0000209E 0E                      		push	cs
  6746 0000209F 07                      		pop	es
  6747                                  		; 18/10/2022
  6748 000020A0 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  6749 000020A4 8C0E[B600]              		mov	[Orig13+2], cs
  6750 000020A8 29F1                    		sub	cx, si		; size of rom fix module
  6751 000020AA F3A4                    		rep movsb		; relocate it
  6752                                  
  6753                                  ; M065 -- end changes
  6754                                  
  6755                                  ; ----------------------------------------------------------------------------
  6756                                  not_compaq_patch:			; M065
  6757                                  		; 17/10/2022
  6758                                  checkcmosclock:	
  6759                                  		; 18/10/2022		
  6760 000020AC 0E                      		push	cs
  6761 000020AD 07                      		pop	es
  6762                                  
  6763                                  		; 20/12/2022
  6764                                  		; ds = cs = es
  6765                                  		; ss = 0
  6766                                  		; sp = 700h
  6767                                  
  6768                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6769                                  %if 0
  6770                                  		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  6771                                  		jnz	short checkk09	; no
  6772                                  
  6773                                  		mov	word [daycnttoday], di
  6774                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  6775                                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  6776                                  		mov	si, daycnt_to_day
  6777                                  		rep movsb
  6778                                  		mov	word [bintobcd], di
  6779                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  6780                                  					; let original segment stay
  6781                                  		;mov	cx, 11	; endcmosclockset - bin_to_bcd
  6782                                  		; 08/08/2023
  6783                                  		mov	cl, 11
  6784                                  		mov	si, bin_to_bcd
  6785                                  		rep movsb
  6786                                  %endif
  6787                                  
  6788                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6789                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:22F4h
  6790                                  		;push	cs
  6791                                  		;pop	es
  6792                                  checkk09:				
  6793 000020AE 57                      		push	di ; ? ; save ? ; 21/12/2022
  6794                                  
  6795                                  ; 13/12/2023 - Retro DOS v4.2 IO.SYS
  6796                                  ; (MSDOS 6.22 IO.SYS - BIOSDATA:1CDAh)
  6797                                  %if 0		
  6798                                  
  6799                                  		mov	ax, 4101h	; wait for bh=es:[di]
  6800                                  		mov	bl, 1		; wait for 1 clock tick
  6801                                  		mov	bh, [es:di]
  6802                                  		stc			; Assume we will fail
  6803                                  		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  6804                                  					; AL = condition type, BH = condition compare or mask value
  6805                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  6806                                  					; DX = I/O port	address	if AL bit 4 set
  6807                                  					; 11/12/2023
  6808                                  					; ES:DI = user byte if AL bit 4 clear
  6809                                  %endif
  6810                                  		; 13/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  6811                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:1CDAh)
  6812                                  	
  6813                                  		; ........
  6814                                  
  6815 000020AF B80041                  		mov	ax, 4100h	; wait for any external event (al=0)
  6816 000020B2 B304                    		mov	bl, 4		; wait for 4 clock ticks
  6817 000020B4 F9                      		stc			; Assume we will fail
  6818 000020B5 CD15                    		int	15h		; SYSTEM - WAIT ON EXTERNAL EVENT (CONVERTIBLE)
  6819                                  					; AL = condition type, BH = condition compare or mask value
  6820                                  					; BL = timeout value times 55 milliseconds, 00h means no timeout
  6821                                  					; DX = I/O port address if AL bit 4 set
  6822                                  		; ........
  6823                                  
  6824 000020B7 5F                      		pop	di ; ?
  6825 000020B8 721B                    		jc	short configdone ; 21/12/2022
  6826                                  
  6827 000020BA C606[7900]01            		mov	byte [fhavek09], 1
  6828                                  					; remember we have a k09 type
  6829 000020BF 1E                      		push	ds
  6830 000020C0 31C0                    		xor	ax, ax
  6831 000020C2 8ED8                    		mov	ds, ax
  6832                                  		
  6833 000020C4 893EB001                		mov	[6Ch*4], di
  6834                                  		;mov	ds:1B0h, di	; [6Ch*4]
  6835                                  					; new int 6Ch handler
  6836                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  6837 000020C8 8C0EB201                		mov	word [6Ch*4+2], cs
  6838 000020CC 1F                      		pop	ds
  6839                                  		; 20/12/2022
  6840                                  		; ds = cs = es
  6841                                  		;mov	si, int6c
  6842                                  		;mov	cx, endk09-int6c ; 459
  6843                                  		;;mov	cx, 459		; endk09 - int6c
  6844                                  					; size of k09 routine
  6845                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  6846                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2315h
  6847 000020CD BE[3E18]                		mov	si, int_6Ch
  6848 000020D0 B9BC01                  		mov	cx, endk09-int_6Ch ; 461 in PCDOS 7.1 IBMBIO.COM
  6849 000020D3 F3A4                    		rep movsb		;
  6850                                  					; set up config	stuff for sysinit
  6851                                  ; ----------------------------------------------------------------------------
  6852                                  ; Set up config stuff for SYSINIT
  6853                                  
  6854                                  ; 17/10/2022
  6855                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  6856                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  6857                                  ; 09/12/2022
  6858                                  SETDRIVE equ SetDrive
  6859                                  GETBP equ GetBp
  6860                                  		
  6861                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6862                                  configdone:	
  6863                                  		; 21/12/2022			
  6864                                  		; 20/03/2019
  6865                                  		;push	cs		; di is	final ending address of	msbio.
  6866                                  		;pop	ds
  6867                                  		
  6868 000020D5 83C70F                  		add	di, 15		; round	(up) to	paragraph
  6869                                  		; 10/12/2022
  6870                                  		;shr	di, 1
  6871                                  		;shr	di, 1
  6872                                  		;shr	di, 1
  6873                                  		;shr	di, 1
  6874 000020D8 B104                    		mov	cl, 4
  6875 000020DA D3EF                    		shr	di, cl		
  6876                                  		; 10/12/2022
  6877 000020DC 83C770                  		add	di, 70h	 ; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  6878                                  		; 19/10/2022 - Temporary !
  6879                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  6880 000020DF 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  6881                                  
  6882                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  6883                                  
  6884                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  6885                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  6886                                  	     
  6887                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  6888                                  
  6889                                  ; 11/12/2023 - Retro DOS v5.0 (PCDOS 7.1 combined/single kernel file)
  6890                                  
  6891                                  	     ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2332h)
  6892                                  
  6893                                  	     ; (("IBMDOS.COM" kernel file reading code here, below...))	
  6894                                  
  6895                                  ; ----------------------------------------------------------------------------
  6896                                  ; ----------------------------------------------------------------------------
  6897                                  %if 0
  6898                                  		mov	ax, [drvfat]	; get drive and	fat id
  6899                                  		; 22/12/2022
  6900                                  		; Note: SETDRIVES uses AL (drive number) only
  6901                                  		mov	bp, SETDRIVE
  6902                                  		;mov	bp, 5AEh ; 11/12/2023 (PCDOS 7.1 IBMBIO.COM)
  6903                                  		;;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  6904                                  					; at 2C7h:4D7h = 70h:2A47h
  6905                                  		push	cs		; simulate far call
  6906                                  		call	call_bios_code	; get bds for drive
  6907                                  		mov	bp, GETBP	; ensure valid bpb is present
  6908                                  		;mov	bp, 6E4h ; 11/12/2023 (PCDOS 7.1 IBMBIO.COM)
  6909                                  		;;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h)
  6910                                  		push	cs
  6911                                  		call	call_bios_code
  6912                                  
  6913                                  	; resort to funky old segment definitions for now
  6914                                  
  6915                                  		; 22/12/2022
  6916                                  		;push	es		; copy bds to ds:di
  6917                                  		;pop	ds
  6918                                  
  6919                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  6920                                  	;
  6921                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  6922                                  	;	  back. Apparently it was what actually setup es: for the following
  6923                                  	; cas----
  6924                                  
  6925                                  		; 22/12/2022
  6926                                  		;xor	di, di
  6927                                  		;mov	al, [es:di]	; get fat id byte
  6928                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  6929                                  		;mov	[es:drvfat+1], al
  6930                                  		;mov	ax, [es:drvfat]
  6931                                  		
  6932                                  		; 22/12/2022
  6933                                  		; ds = cs
  6934                                  	;;;	mov	al, [drvfat]
  6935                                  
  6936                                  	; cas -- why do a SECOND setdrive here???
  6937                                  
  6938                                  		; 22/12/2022
  6939                                  		;push	es		; save whatever's in es
  6940                                  		;push	ds		; copy bds to es:di
  6941                                  		;pop	es
  6942                                  		;push	cs		; copy Bios_Data to ds
  6943                                  		;pop	ds
  6944                                  	
  6945                                  	; 22/12/2022
  6946                                  	;;;	mov	bp, SETDRIVE
  6947                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  6948                                  	;;;	push	cs		; simulate far call
  6949                                  	;;;	call	call_bios_code	; get correct bds for this drive
  6950                                  	
  6951                                  		; 22/12/2022
  6952                                  		;push	es		; copy bds back to ds:di
  6953                                  		;pop	ds
  6954                                  		;pop	es		; pop whatever was in es
  6955                                  
  6956                                  	; Now we load in the MSDOS.SYS file
  6957                                  
  6958                                  	; 22/12/2022
  6959                                  	; -----
  6960                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  6961                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  6962                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  6963                                  	;				; get size of fat on media
  6964                                  	;	;mov	es:16DEh, bl
  6965                                  	;	mov	[es:fbigfat], bl
  6966                                  	;	mov	cl, [di+8]
  6967                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  6968                                  	;	;sub	es:16D8h, ax
  6969                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  6970                                  	;				; need a logical sector number that will
  6971                                  	;				; be used by getclus(diskrd procedure)
  6972                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  6973                                  	;	;sbb	es:16DAh, ax
  6974                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  6975                                  	; -----
  6976                                  		
  6977                                  		; 11/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  6978                                  	; -----	; 22/12/2022
  6979                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  6980                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  6981                                  		; 11/12/2023 ; *
  6982                                  		mov	bl, [es:di+3Bh]	; [di+BDS.fatsiz] ; *
  6983                                  		;mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  6984                                  					; get size of fat on media
  6985                                  		mov	[fbigfat], bl
  6986                                  		mov	cl, [es:di+8]
  6987                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  6988                                  		sub	[First_Data_Sector], ax ; *
  6989                                  		;sub	[bios_l], ax	; subtract hidden sectors since we
  6990                                  					; need a logical sector number that will
  6991                                  					; be used by getclus(diskrd procedure)
  6992                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  6993                                  		sbb	[First_Data_Sector+2], ax ; *
  6994                                  		;sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  6995                                  	; ------
  6996                                  
  6997                                  		xor	ch, ch	 ; cx = sectors/cluster
  6998                                  
  6999                                  	; the boot program has left the directory at 0:500h
  7000                                  
  7001                                  		; 11/12/2023 - - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  7002                                  		;push	di
  7003                                  		push	ds
  7004                                  		;xor	di, di
  7005                                  		;mov	ds, di
  7006                                  		xor	bx, bx ; 0
  7007                                  		mov	ds, bx
  7008                                  		mov	bx, [53Ah]
  7009                                  		;mov	bx, ds:53Ah    	; (First cluster of the 2nd dir entry
  7010                                  				   	; of root directory in the buffer at 500h)
  7011                                  		pop	ds
  7012                                  		mov     si, [firstcluster_hw] ; 11/12/2023 
  7013                                  				   	; (32 bit cluster number for FAT32 fs)
  7014                                  		;pop	ds
  7015                                  		;pop	di
  7016                                  
  7017                                  		; 12/12/2023
  7018                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2397h)
  7019                                  		; ...........
  7020                                  		; ds = cs
  7021                                  		mov	al, [fbigfat]
  7022                                  		push	ax              ; (*) save fbigfat flags
  7023                                  		mov	al, [drvfat]
  7024                                  		or	al, [Boot_Drv]
  7025                                  		jnz	short boot_drv_fixed ; hard disk
  7026                                  boot_drv_removable:			; calculate cluster count and set fbig or fbigbig flag
  7027                                  		push	bx              ; for removable drives
  7028                                  		push	cx
  7029                                  		; 28/12/2023
  7030                                  		;push	dx ; (not necessary)
  7031                                  	
  7032                                  		; 12/12/2023
  7033                                  		push	es
  7034                                  		pop	ds
  7035                                  
  7036                                  		mov	ax, [di+0Eh]    ; [di+BDS.totalsecs16]
  7037                                  		xor	dx, dx
  7038                                  		or	ax, ax
  7039                                  		jnz	short prep_totalsecs_ok
  7040                                  		mov	ax, [di+1Bh]    ; [di+BDS.totalsecs32]
  7041                                  		mov	dx, [di+1Dh]
  7042                                  prep_totalsecs_ok:
  7043                                  		sub	ax, [di+9]      ; [di+BDS.resectors]
  7044                                  		sbb	dx, 0
  7045                                  		push	ax
  7046                                  		push	dx
  7047                                  		mov	bx, [di+11h]    ; [di+BDS.fatsecs16]
  7048                                  		xor	ax, ax
  7049                                  		or	bx, bx
  7050                                  		jnz	short prep_fatsecs_ok
  7051                                  		mov	bx, [di+1Fh]    ; [di+BDS.fatsecs32]
  7052                                  		mov	ax, [di+21h]
  7053                                  prep_fatsecs_ok:
  7054                                  		mov	cl, [di+0Bh]    ; ax:bx = 32 bit count of FAT sectors
  7055                                  				        ; [di+BDS.fats]
  7056                                  		xor	ch, ch
  7057                                  		mul	cx
  7058                                  		xchg	ax, cx
  7059                                  		mul	bx
  7060                                  		add	cx, dx
  7061                                  		mov	bx, ax          ; cx:bx = total (2*) fat sectors
  7062                                  		pop	dx
  7063                                  		pop	ax              ; dx:ax = totals sectors - reserved sectors
  7064                                  		sub	ax, bx
  7065                                  		sbb	dx, cx          ; dx:ax = data sectors (includes root dir sectors)
  7066                                  		mov	bx, [di+0Ch]    ; [di+BDS.direntries]
  7067                                  		add	bx, 15          ; 16 directory entries per sector
  7068                                  				        ; (round up sector count by adding 15)
  7069                                  		mov	cl, 4           ; (rounded) dir entries / 16
  7070                                  		shr	bx, cl
  7071                                  		xor	cx, cx
  7072                                  		sub	ax, bx
  7073                                  		sbb	dx, cx          ; dx:ax = data sectors (except root directory sectors)
  7074                                  					; (will be used for cluster count calculation)
  7075                                  		mov	cl, [di+8]      ; [di+BDS.secperclus]
  7076                                  
  7077                                  		; 12/12/2023
  7078                                  		push	cs
  7079                                  		pop	ds
  7080                                  
  7081                                  		push	ax              ; 32 bit division (data sectors / sector per cluster)
  7082                                  		mov	ax, dx
  7083                                  		xor	dx, dx
  7084                                  		div	cx
  7085                                  		mov	bx, ax
  7086                                  		pop	ax
  7087                                  		div	cx
  7088                                  		or	bx, bx          ; 32 bit cluster count if bx > 0
  7089                                  		jnz	short set_fbigbig_flag ; too big cluster number
  7090                                  		cmp	ax, 0FFF6h
  7091                                  		jb	short set_fbig_flag
  7092                                  set_fbigbig_flag:
  7093                                  		or	byte [fbigfat], 20h ; FAT32 ; fbigbig
  7094                                  		jmp	short set_fbig_flag_ok
  7095                                  ; ---------------------------------------------------------------------------
  7096                                  
  7097                                  set_fbig_flag:
  7098                                  		cmp	ax, 0FF6h       ; 4096-10
  7099                                  				        ; is this 16-bit fat?
  7100                                  		jb	short set_fbig_flag_ok ; no, small fat
  7101                                  		or	byte [fbigfat], 40h ; FAT16 ; fbig
  7102                                  set_fbig_flag_ok:
  7103                                  		; 28/12/2023
  7104                                  		;pop	dx
  7105                                  		pop	cx
  7106                                  		pop	bx
  7107                                  boot_drv_fixed:
  7108                                  		xor	di, di
  7109                                  
  7110                                  		; cx = sectors/cluster
  7111                                  		; si:bx = first cluster
  7112                                  		; di = 0
  7113                                  
  7114                                  		; ...........
  7115                                  loadit:
  7116                                  		mov	ax, SYSINITSEG	; 46Dh
  7117                                  		;mov	ax, 544h	; 11/12/2023 - PCDOS 7.1 IBMBIO.COM
  7118                                  		;;mov	ax, 46Dh	; sysinit segment
  7119                                  		mov	es, ax
  7120                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  7121                                  		;mov	es, [es:271h]
  7122                                  
  7123                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  7124                                  
  7125                                  ; ----------------------------------------------------------------------------
  7126                                  
  7127                                  		; 13/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7128                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2431h)
  7129                                  
  7130                                  		;test	byte [cs:fbigfat], 20h ; fbigbig ; FAT32 fs flag
  7131                                  		test	byte [fbigfat], 20h ; fbigbig ; FAT32 fs flag
  7132                                  		jz	short iseof
  7133                                  
  7134                                  eofbigbig:	; si:bx = 32 bit cluster number
  7135                                  		cmp	si, 0FFFh
  7136                                  		jnz	short iseofx
  7137                                  		cmp	bx, 0FFF7h
  7138                                  		jmp	short iseofx
  7139                                  
  7140                                  ; ----------------------------------------------------------------------------
  7141                                  		; 13/12/2023
  7142                                  iseof:
  7143                                  		;;test	byte [cs:fbigfat], fbig
  7144                                  		;test	byte [cs:fbigfat], 40h ; fbig
  7145                                  		; 12/12/2023
  7146                                  		; ds = cs
  7147                                  		test	byte [fbigfat], 40h ; fbig
  7148                                  		jnz	short eofbig
  7149                                  		cmp	bx, 0FF7h
  7150                                  		jmp	short iseofx
  7151                                  ; ----------------------------------------------------------------------------
  7152                                  
  7153                                  eofbig:
  7154                                  		cmp	bx, 0FFF7h
  7155                                  iseofx:
  7156                                  		jb	short loadit	; keep loading until cluster = eof
  7157                                  
  7158                                  ; ----------------------------------------------------------------------------
  7159                                  
  7160                                  		; 19/04/2024
  7161                                  		; 28/12/2023
  7162                                  		pop	ax		; (*) restore fbigfat flags
  7163                                  					; (after loading DOS kernel)
  7164                                  		; 06/04/2024
  7165                                  		;mov	[cs:fbigfat], al
  7166                                  		mov	[fbigfat], al
  7167                                  %endif
  7168                                  ; ----------------------------------------------------------------------------
  7169                                  ; ----------------------------------------------------------------------------
  7170                                  	
  7171                                  		; 19/04/2024
  7172                                  
  7173 000020E3 E8FC04                  		call	setdrvparms
  7174                                  
  7175                                  		;;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  7176                                  		;;jmp	far 46Dh:267h
  7177                                  		; 12/12/2023
  7178                                  		;jmp	far 544h:269h	; (PCDOS 7.1 IBMBIO.COM)
  7179                                  
  7180 000020E6 EA[6902]D904            		jmp	SYSINITSEG:SYSINITSTART
  7181                                  
  7182                                  ; =============== S U B	R O U T	I N E ========================================
  7183                                  
  7184                                  ; Following are subroutines to support resident device driver initialization
  7185                                  ;
  7186                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  7187                                  
  7188                                  ;	M035 -- begin changed section
  7189                                  
  7190                                  ;******************************************************************************
  7191                                  ; module name: remap
  7192                                  ;
  7193                                  ; descriptive name: all the code for himem that could be separated from msbio
  7194                                  ;
  7195                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  7196                                  ;	     letters) if more than two diskette drives on the system.
  7197                                  ;
  7198                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  7199                                  ;	       as usual and then rescan the bds chain to adjust the drive
  7200                                  ;	       letters. to do this, scan for disk drives and assign logical
  7201                                  ;	       drive number starting from 2 and then rescan diskette drives
  7202                                  ;	       and assign next to the last logical drive number of last disk
  7203                                  ;	       drive to the 3rd and 4th diskette drives.
  7204                                  
  7205                                  ; input:       none
  7206                                  ; exit:	drive letters have been remapped in bds chain
  7207                                  ; exit error:  none
  7208                                  ; called from: msinit
  7209                                  ;
  7210                                  ; notes:  this function  will be called only if more than 2 diskettes are
  7211                                  ;	  found in the system
  7212                                  ;	  this function assumes that there are no more than 26 drives assigned
  7213                                  ;	    this is guaranteed by the code that creates bdss for partitions
  7214                                  ;	  this function assumes that the first entries in the chain are
  7215                                  ;	   floppy drives, and all the rest are hard drives
  7216                                  ;	  will alter the boot drive if necessary to reflect remapping
  7217                                  ;
  7218                                  ;******************************************************************************
  7219                                  
  7220                                  ; 17/10/2022
  7221                                  ; 02/10/2022
  7222                                  		; 15/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7223                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2464h)
  7224                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1D9Eh)
  7225                                  
  7226                                  remap:		; proc near
  7227                                  
  7228                                  		; 15/12/2023
  7229                                  		; ds = cs
  7230                                  		;mov	di, [cs:start_bds] ; get first bds
  7231 000020EB 8B3E[1901]              		mov	di, [start_bds]
  7232                                  
  7233                                  ; search for 1st fixed disk physical drive num
  7234                                  
  7235                                  drive_loop:
  7236 000020EF 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  7237                                  					; first	hard disk??
  7238 000020F3 7409                    		jz	short fdrv_found ; yes,	continue
  7239 000020F5 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7240                                  					; get next bds,	assume segment
  7241 000020F7 83FFFF                  		cmp	di, -1 ; 0FFFFh	; last bds?
  7242 000020FA 75F3                    		jnz	short drive_loop ; loop	if not
  7243 000020FC EB49                    		jmp	short rmap_exit	; yes, no hard drive on	system
  7244                                  
  7245                                  ;------------------------------------------------------------------------------
  7246                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  7247                                  ;logical drive nums to 3, 4, 5 etc.
  7248                                  ;------------------------------------------------------------------------------
  7249                                  
  7250                                  fdrv_found:
  7251 000020FE B002                    		mov	al, 2		; start	with logical drv num=2
  7252                                  fdrv_loop:
  7253 00002100 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  7254 00002103 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7255                                  					; ds:di--> next	bds
  7256                                  		;inc	al		; set num for next drive
  7257                                  		; 18/12/2022
  7258 00002105 40                      		inc	ax
  7259 00002106 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ?
  7260 00002109 75F5                    		jnz	short fdrv_loop	; no - assign more disk drives
  7261                                  
  7262                                  ;------------------------------------------------------------------------------
  7263                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  7264                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  7265                                  ; any more.
  7266                                  ;------------------------------------------------------------------------------
  7267                                  
  7268                                  		;mov	di, [cs:start_bds] ; [start_bds]
  7269                                  		; 15/12/2023
  7270 0000210B 8B3E[1901]              		mov	di, [start_bds]	; get first bds
  7271 0000210F 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7272                                  					; ds:di-->bds2
  7273                                  		;mov	ah, [cs:dsktnum] ; get number of floppies to remap
  7274 00002111 8A26[2501]              		mov	ah, [dsktnum]
  7275 00002115 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  7276                                  remap_loop1:
  7277 00002118 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7278                                  					; set new num to next floppy
  7279 0000211A 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  7280 0000211D FEC0                    		inc	al		; new number for next floppy
  7281 0000211F FECC                    		dec	ah		; count down extra floppies
  7282 00002121 75F5                    		jnz	short remap_loop1
  7283                                  
  7284                                  ; now we've got to adjust the boot drive if we reassigned it
  7285                                  
  7286                                  		; 15/12/2023
  7287                                  		;mov	al, [cs:drvfat]
  7288 00002123 A0[FA19]                		mov	al, [drvfat]
  7289 00002126 3C02                    		cmp	al, 2		; is it	a: or b: ?
  7290 00002128 721D                    		jb	short rmap_exit
  7291                                  		;sub	al, [cs:dsktnum]
  7292 0000212A 2A06[2501]              		sub	al, [dsktnum]	; is it one of the other floppies?
  7293 0000212E 7204                    		jb	short remap_boot_flop ;	brif so
  7294                                  
  7295                                  ; we've got to remap the boot hard drive
  7296                                  ; subtract the number of EXTRA floppies from it
  7297                                  
  7298 00002130 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  7299 00002132 EB04                    		jmp	short remap_change_boot_drv
  7300                                  ; ---------------------------------------------------------------------------
  7301                                  
  7302                                  ; we've got to remap the boot floppy.
  7303                                  ; add the number of hard drive partitions to it
  7304                                  
  7305                                  remap_boot_flop:
  7306                                  		;add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  7307                                  		; 15/12/2023
  7308 00002134 0206[7500]              		add	al, [drvmax]
  7309                                  remap_change_boot_drv:			
  7310                                  		;mov	[cs:drvfat], al ; alter msdos.sys load drive
  7311 00002138 A2[FA19]                		mov	[drvfat], al
  7312 0000213B FEC0                    		inc	al
  7313 0000213D 1E                      		push	ds
  7314 0000213E BFD904                  		mov	di, SYSINITSEG	; 46Dh
  7315                                  		;mov	di, 544h	; PCDOS 7.1 IBMBIO.COM
  7316                                  		;;mov	di, 46Dh	; SYSINIT segment
  7317 00002141 8EDF                    		mov	ds, di
  7318 00002143 A2[9802]                		mov	[DEFAULTDRIVE], al
  7319                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  7320                                  					; pass it to sysinit as	well
  7321 00002146 1F                      		pop	ds ; ds = cs
  7322                                  rmap_exit:
  7323 00002147 C3                      		retn
  7324                                  
  7325                                  ; =============== S U B	R O U T	I N E =======================================
  7326                                  
  7327                                  ; 17/10/2022
  7328                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  7329                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  7330                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  7331                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  7332                                  ;**************************************************
  7333                                  ; getboot - get the boot sector for a hard disk
  7334                                  ;
  7335                                  ; Reads the boot sector from a specified drive into
  7336                                  ; a buffer at the top of memory.
  7337                                  ;
  7338                                  ; dl = int13 drive number to read boot sector for
  7339                                  ;**************************************************
  7340                                  
  7341                                  ; 17/10/2022
  7342                                  bootbias equ 200h
  7343                                  
  7344                                  getboot:	; proc near
  7345                                  
  7346                                  		; 15/12/2023 - Retro DOS v5.0 
  7347                                  		;	 (Modified PCDOS 7.1) IBMBIO.COM/IO.SYS
  7348                                  		; ds = cs
  7349                                  		
  7350                                  		; 08/04/2018
  7351                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  7352                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  7353                                  		; 02/10/2022 - Retro DOS v4.0
  7354                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  7355                                  
  7356                                  		;mov	ax, [cs:init_bootseg] ; 17/10/2022
  7357                                  		; 15/12/2023
  7358 00002148 A1[041A]                		mov	ax, [init_bootseg]
  7359 0000214B 8EC0                    		mov	es, ax
  7360                                  
  7361                                  		; 17/10/2022
  7362 0000214D BB0002                  		mov	bx, bootbias ; 200h
  7363                                  		;mov	bx, 200h	; bootbias
  7364                                  					; load BX, ES:BX is where sector goes
  7365 00002150 B80102                  		mov	ax, 201h
  7366 00002153 30F6                    		xor	dh, dh
  7367 00002155 B90100                  		mov	cx, 1
  7368 00002158 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  7369                                  					; AL = number of sectors to read, CH = track, CL = sector
  7370                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  7371                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  7372 0000215A 7209                    		jc	short erret
  7373                                  		; 17/10/2022
  7374 0000215C 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  7375                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  7376                                  					; Dave Litton magic word?
  7377 00002163 7401                    		jz	short norm_ret	; yes
  7378                                  erret:
  7379 00002165 F9                      		stc
  7380                                  norm_ret:
  7381 00002166 C3                      		retn
  7382                                  
  7383                                  ; =============== S U B	R O U T	I N E =======================================
  7384                                  
  7385                                  ; 28/12/2018 - Retro DOS v4.0 
  7386                                  
  7387                                  ;***************************************************************************
  7388                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  7389                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  7390                                  ;   our own logical sectors start. we also read in our boot sector to
  7391                                  ;   determine version number
  7392                                  ;
  7393                                  ;   inputs:	dl is rom drive number (80...)
  7394                                  ;		bh is partition number (0....) 
  7395                                  ;		ds:di points to bds
  7396                                  ;   outputs:	carry clear -> bpb is filled in
  7397                                  ;		carry set   -> bpb is left uninitialized due to error
  7398                                  ;	trashes (at least) si, cx
  7399                                  ;	MUST PRESERVE ES:!!!!
  7400                                  ;***************************************************************************
  7401                                  
  7402                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7403                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:24E9h)
  7404                                  
  7405                                  sethard:	; proc near
  7406                                  		; 12/08/2023
  7407                                  		; ds = cs = BIOSDATA
  7408 00002167 57                      		push	di
  7409 00002168 53                      		push	bx
  7410                                  		;push	ds  ; ds = cs = BIOSDATA ; 12/08/2023
  7411 00002169 06                      		push	es
  7412 0000216A 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  7413 0000216D 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  7414                                  		; 16/12/2023
  7415 00002170 804D3F01                		or	byte [di+3Fh], 1 ; PCDOS 7.1
  7416                                  		;or	byte [di+23h], 1 ; [di+BDS.flags]
  7417                                  					; fnon_removable
  7418 00002174 C6453E05                		mov	byte [di+3Eh], 5 ; PCDOS 7.1
  7419                                  		;mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  7420                                  					; ffHardFile
  7421 00002178 C606[061A]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  7422 0000217D 88FE                    		mov	dh, bh		; partition number
  7423 0000217F 52                      		push	dx
  7424 00002180 B408                    		mov	ah, 8
  7425 00002182 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  7426                                  					; DL = drive number
  7427                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  7428                                  					; DL = number of consecutive drives
  7429                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  7430                                  		;inc	dh
  7431                                  		; 16/12/2023 - Retro DOS v5.0
  7432 00002184 88F2                    		mov	dl, dh
  7433 00002186 B600                    		mov	dh, 0
  7434 00002188 42                      		inc	dx
  7435                                  		;mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  7436 00002189 895515                  		mov	[di+15h], dx
  7437 0000218C 5A                      		pop	dx
  7438 0000218D 7253                    		jc	short setret	; error	if no hard disk
  7439                                  		; 16/12/2023
  7440                                  		;jc	short setret_j
  7441                                  		
  7442 0000218F 80E13F                  		and	cl, 3Fh
  7443 00002192 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  7444 00002195 52                      		push	dx		; save partition number
  7445 00002196 E8AFFF                  		call	getboot
  7446 00002199 5A                      		pop	dx		; restore partition number
  7447 0000219A 7246                    		jc	short setret
  7448                                  		; 16/12/2023
  7449                                  		;jnc	short chk_act_part
  7450                                  ;setret_j:
  7451                                  		;jmp	setret
  7452                                  
  7453                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7454                                  chk_act_part:
  7455 0000219C 31DB                    		xor	bx, bx ; 0
  7456                                  		;;mov	[cs:ep_start_sector], bx
  7457                                  		;;mov	[cs:ep_start_sector+2], bx
  7458                                  		;mov	[cs:ep_hidden_secs], bx
  7459                                  		;mov	[cs:ep_hidden_secs+2], bx
  7460                                  		; 16/12/2023
  7461                                  		; ds = cs
  7462                                  		; 20/12/2023
  7463                                  		;mov	[ep_start_sector], bx
  7464                                  		;mov	[ep_start_sector+2], bx
  7465 0000219E 891E[0422]              		mov	[ep_hidden_secs], bx
  7466 000021A2 891E[0622]              		mov	[ep_hidden_secs+2], bx
  7467                                  		
  7468 000021A6 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  7469                                  
  7470                                  ; The first 'active' partition is 00, the second is 01....
  7471                                  ;   then the remainder of the 'primary' but non-active partitions
  7472                                  
  7473                                  act_part:
  7474 000021A9 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  7475 000021AE 740B                    		jz	short no_act	; no
  7476                                  ; 16/12/2023
  7477                                  %if 0		
  7478                                  		; 16/12/2023
  7479                                  		; reject if partitiontype != 1, 4, 6, 0Bh, 0Ch, 0Eh
  7480                                  		cmp	byte [es:bx], 1 ; FAT12
  7481                                  		jz	short got_good_act
  7482                                  		cmp	byte [es:bx], 4	; FAT16 CHS (<= 32MB)
  7483                                  		jz	short got_good_act
  7484                                  		
  7485                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7486                                  		cmp	byte [es:bx], 0Bh ; FAT32 CHS
  7487                                  		jz	short got_good_act
  7488                                  		cmp	byte [es:bx], 0Ch ; FAT32 LBA
  7489                                  		jz	short got_good_act
  7490                                  		cmp	byte [es:bx], 0Eh ; FAT16 LBA
  7491                                  		jz	short got_good_act
  7492                                  
  7493                                  		cmp	byte [es:bx], 6	; FAT16 BIG CHS (> 32MB)
  7494                                  		jnz	short no_act
  7495                                  ;%else
  7496                                  		; 16/12/2023
  7497                                  		mov	al, [es:bx]	 ; partition type
  7498                                  
  7499                                  		; reject if partitiontype != 1, 4, 6, 0Bh, 0Ch, 0Eh
  7500                                  		cmp	al, 1		; FAT12
  7501                                  		je	short got_good_act
  7502                                  		cmp	al, 4		; FAT16 CHS (<= 32MB)
  7503                                  		je	short got_good_act
  7504                                  		
  7505                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7506                                  		cmp	al, 0Bh		; FAT32 CHS
  7507                                  		je	short got_good_act
  7508                                  		cmp	al, 0Ch		; FAT32 LBA
  7509                                  		je	short got_good_act
  7510                                  		cmp	al, 0Eh		; FAT16 LBA
  7511                                  		je	short got_good_act
  7512                                  
  7513                                  		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  7514                                  		jne	short no_act
  7515                                  %endif		
  7516                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7517                                  		; check if it is a primary dos partition
  7518                                  
  7519 000021B0 E83300                  		call	chk_partition_type
  7520 000021B3 7506                    		jne	short no_act
  7521                                  
  7522                                  got_good_act:				; 11/08/2023
  7523 000021B5 08F6                    		or	dh, dh		; is this our target partition #?
  7524                                  					; (0 = first primary dos or active partition)
  7525 000021B7 744F                    		jz	short set2	; WE GOT THE ONE WANTED!!
  7526 000021B9 FECE                    		dec	dh		; count	down
  7527                                  no_act:					
  7528 000021BB 83C310                  		add	bx, 16
  7529 000021BE 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7530                                  					; last entry done?
  7531 000021C2 75E5                    		jnz	short act_part	; no, process next entry
  7532                                  
  7533 000021C4 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  7534                                  					; restore original value of bx
  7535                                  
  7536                                  ; Now scan the non-active partitions
  7537                                  
  7538                                  get_primary:
  7539 000021C7 26F647FC80              		test	byte [es:bx-4], 80h
  7540 000021CC 750B                    		jnz	short not_prim	; we've already scanned
  7541                                  					; the ACTIVE ones
  7542                                  ; 16/12/2023
  7543                                  %if 0
  7544                                  		; 16/12/2023
  7545                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  7546                                  		cmp	byte [es:bx], 1	; FAT12
  7547                                  		jz	short got_prim
  7548                                  		cmp	byte [es:bx], 4	; FAT16 CHS (<= 32MB)
  7549                                  		jz	short got_prim
  7550                                  
  7551                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7552                                  		cmp	byte [es:bx], 0Bh ; FAT32 CHS
  7553                                  		jz	short got_prim
  7554                                  		cmp	byte [es:bx], 0Ch ; FAT32 LBA
  7555                                  		jz	short got_prim
  7556                                  		cmp	byte [es:bx], 0Eh ; FAT16 LBA
  7557                                  		jz	short got_prim
  7558                                  
  7559                                  		cmp	byte [es:bx], 6	; FAT16 BIG CHS (> 32MB)
  7560                                  		jnz	short not_prim
  7561                                  ;%else
  7562                                  		; 16/12/2023
  7563                                  		mov	al, [es:bx]	 ; partition type
  7564                                  
  7565                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  7566                                  		cmp	al, 1		; FAT12
  7567                                  		je	short got_prim
  7568                                  		cmp	al, 4		; FAT16 CHS (<= 32MB)
  7569                                  		je	short got_prim
  7570                                  		
  7571                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7572                                  		cmp	al, 0Bh		; FAT32 CHS
  7573                                  		je	short got_prim
  7574                                  		cmp	al, 0Ch		; FAT32 LBA
  7575                                  		je	short got_prim
  7576                                  		cmp	al, 0Eh		; FAT16 LBA
  7577                                  		je	short got_prim
  7578                                  
  7579                                  		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  7580                                  		jne	short not_prim
  7581                                  %endif
  7582                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7583                                  		; check if it is a primary dos partition
  7584                                  
  7585 000021CE E81500                  		call	chk_partition_type
  7586 000021D1 7506                    		jne	short not_prim
  7587                                  
  7588                                  got_prim:
  7589 000021D3 08F6                    		or	dh, dh		; is this our target partition?
  7590 000021D5 7431                    		jz	short set2
  7591 000021D7 FECE                    		dec	dh
  7592                                  not_prim:
  7593 000021D9 83C310                  		add	bx, 16
  7594 000021DC 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7595 000021E0 75E5                    		jnz	short get_primary ; loop till we've gone through table
  7596                                  setret:					
  7597 000021E2 F9                      		stc			; error	return
  7598 000021E3 E9C503                  		jmp	ret_hard_err
  7599                                  
  7600                                  ; ---------------------------------------------------------------------------
  7601                                  		
  7602                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7603                                  
  7604                                  chk_partition_type:
  7605                                  		; 16/12/2023
  7606 000021E6 268A07                  		mov	al, [es:bx]	 ; partition type
  7607                                  
  7608                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  7609 000021E9 3C01                    		cmp	al, 1		; FAT12
  7610 000021EB 7412                    		je	short chk_ptype_retn
  7611 000021ED 3C04                    		cmp	al, 4		; FAT16 CHS (<= 32MB)
  7612 000021EF 740E                    		je	short chk_ptype_retn
  7613                                  		
  7614                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7615 000021F1 3C0B                    		cmp	al, 0Bh		; FAT32 CHS
  7616 000021F3 740A                    		je	short chk_ptype_retn
  7617 000021F5 3C0C                    		cmp	al, 0Ch		; FAT32 LBA
  7618 000021F7 7406                    		je	short chk_ptype_retn
  7619 000021F9 3C0E                    		cmp	al, 0Eh		; FAT16 LBA
  7620 000021FB 7402                    		je	short chk_ptype_retn
  7621                                  
  7622 000021FD 3C06                    		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  7623                                  chk_ptype_retn:
  7624                                  		; zf = 1 -> primary DOS partition
  7625                                  		; zf = 0 -> not a primary DOS partition
  7626 000021FF C3                      		retn
  7627                                  
  7628                                  ; ---------------------------------------------------------------------------
  7629                                  
  7630                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  7631                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:25B6h)
  7632                                  ep_start_sector:
  7633 00002200 00000000                		dd 0
  7634 00002204 00000000                ep_hidden_secs:	dd 0
  7635                                  
  7636                                  ; ---------------------------------------------------------------------------
  7637                                  
  7638                                  ;  until we get the real logical boot record and get the bpb,
  7639                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  7640                                  ;  for the convenience of the computation.
  7641                                  ;
  7642                                  ;  at the end of this procedure, if a bpb information is gotten from
  7643                                  ;  the valid boot record, then we are going to use those bpb information
  7644                                  ;  without change.
  7645                                  ;
  7646                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  7647                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  7648                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  7649                                  
  7650                                  set2:		
  7651                                  		; 12/08/2023
  7652                                  		; ds = cs = BIOSDATA segment (0070h)
  7653 00002208 8816[071A]              		mov	[rom_drv_num], dl
  7654                                  		;mov	[cs:rom_drv_num], dl
  7655                                  			; save the rom bios drive number we are handling now.
  7656 0000220C 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  7657 00002210 268B5706                		mov	dx, [es:bx+6]
  7658                                  
  7659                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  7660                                  ; sectors should be allowed	
  7661                                  
  7662 00002214 83E801                  		sub	ax, 1
  7663 00002217 83DA00                  		sbb	dx, 0
  7664 0000221A 26034708                		add	ax, [es:bx+8]	; sectors in partition
  7665 0000221E 2613570A                		adc	dx, [es:bx+10]
  7666 00002222 7305                    		jnc	short okdrive
  7667 00002224 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  7668                                  
  7669                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7670                                  		;;;
  7671                                  okdrive:
  7672                                  		;add	ax, [cs:ep_hidden_secs]
  7673                                  		;adc	dx, [cs:ep_hidden_secs+2]
  7674                                  		; ds = cs
  7675 00002229 0306[0422]              		add	ax, [ep_hidden_secs]
  7676 0000222D 1316[0622]              		adc	dx, [ep_hidden_secs+2]
  7677 00002231 7305                    		jnc	short okdrive_1
  7678 00002233 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  7679                                  okdrive_1:
  7680 00002238 26803F0C                		cmp	byte [es:bx], 0Ch ; FAT32 LBA partition ID
  7681 0000223C 7418                    		je	short set_lba_flag
  7682 0000223E 26803F0E                		cmp	byte [es:bx], 0Eh ; FAT16 LBA partition ID
  7683 00002242 7412                    		je	short set_lba_flag
  7684 00002244 3B5513                  		cmp	dx, [di+13h]	; if dx > [di+BDS.secpertrack] then
  7685 00002247 730D                    		jnb	short set_lba_flag ; set LBA r/w flag
  7686 00002249 F77513                  		div	word [di+13h]
  7687 0000224C 31D2                    		xor	dx, dx
  7688 0000224E F77515                  		div	word [di+15h]
  7689 00002251 3D0004                  		cmp	ax, 400h	; if ax (cylinder number) >= 1024
  7690                                  					;  set LBA r/w flag
  7691 00002254 7204                     		jb	short set3
  7692                                  set_lba_flag:
  7693 00002256 804D4004                                or	byte [di+40h], 4 ; fLBArw ; LBA r/w flag
  7694                                  		;;;
  7695                                  ;okdrive:
  7696                                  		; 16/12/2023
  7697                                  set3:		
  7698                                  		;mov	ax, [es:bx+4]
  7699                                  		;mov	[di+17h], ax	; [di+BDS.hiddensecs]
  7700                                  		;			; BPB_HIDDENSECTORS = p->partitionbegin
  7701                                  		;mov	ax, [es:bx+6]
  7702                                  		;mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  7703                                  
  7704                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7705                                  		;;;
  7706 0000225A 268B4704                		mov	ax, [es:bx+4]	; start sector (LBA) of the partition
  7707 0000225E 268B5706                		mov	dx, [es:bx+6]
  7708                                  		;add	ax, [cs:ep_hidden_secs]
  7709                                  		;adc	dx, [cs:ep_hidden_secs+2]
  7710                                  		; ds = cs
  7711 00002262 0306[0422]              		add	ax, [ep_hidden_secs]
  7712                                  					; + hidden secs of the extd dos partion
  7713 00002266 1316[0622]              		adc	dx, [ep_hidden_secs+2]
  7714 0000226A 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  7715 0000226D 895519                  		mov	[di+19h], dx	; [di+BDS.hiddensecs+2]
  7716 00002270 31C0                    		xor	ax, ax ; 0
  7717 00002272 89457B                  		mov	[di+7Bh], ax	; [di+BDS.bdsm_hidden_trks]
  7718 00002275 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsec16]	
  7719                                  		;;;
  7720                                  
  7721 00002278 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  7722 0000227C 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  7723 00002280 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  7724 00002283 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  7725                                  					; bpb->maxsec =	p->partitionlength
  7726                                  		;cmp	dx, 0
  7727                                  		;ja	short okdrive_1
  7728                                  		; 16/12/2023
  7729 00002286 09D2                    		or	dx, dx
  7730 00002288 7505                    		jnz	short set3_read
  7731 0000228A 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  7732                                  		;jb	short setret	; return -1;
  7733 0000228D 7264                    		jb	short set3_err
  7734                                  ;okdrive_1:
  7735                                  		; 16/12/2023
  7736                                  set3_read:
  7737 0000228F 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  7738 00002292 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  7739 00002295 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  7740                                  					; usually equal	to the # of sec/trk.
  7741 00002297 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  7742 0000229A 50                      		push	ax
  7743 0000229B 89D0                    		mov	ax, dx
  7744 0000229D 31D2                    		xor	dx, dx
  7745 0000229F F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  7746                                  					; (track)temp_h:ax + (sector)dx
  7747                                  ; 16/12/2023
  7748                                  %if 0
  7749                                  		; 17/10/2022
  7750                                  		;mov	[cs:temp_h], ax
  7751                                  		; 12/08/2023 (ds=cs)
  7752                                  		mov	[temp_h], ax
  7753                                  		pop	ax
  7754                                  		div	bx
  7755                                  		mov	cl, dl
  7756                                  		inc	cl
  7757                                  		xor	bx, bx
  7758                                  		mov	bl, [di+15h]	; [di+BDS.heads]
  7759                                  		push	ax
  7760                                  		xor	dx, dx
  7761                                  		;mov	ax, [cs:temp_h]
  7762                                  		mov	ax, [temp_h] ; 12/08/2023
  7763                                  		div	bx
  7764                                  		;mov	[cs:temp_h], ax
  7765                                  		mov	[temp_h], ax ; 12/08/2023
  7766                                  		pop	ax
  7767                                  		div	bx		; dl is head, ax is cylinder
  7768                                  		; 12/08/2023 (ds=cs)
  7769                                  		cmp	word [temp_h], 0
  7770                                  		;cmp	word [cs:temp_h], 0
  7771                                  		ja	short setret_brdg ; exceeds the	limit of int 13h
  7772                                  		cmp	ax, 1024
  7773                                  		ja	short setret_brdg ; exceeds the	limit of int 13h
  7774                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  7775                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  7776                                  			; ('ja' must be 'jnb')
  7777                                  okdrive_2:
  7778                                   		; 28/07/2019
  7779                                  ; dl is head.
  7780                                  ; ax is cylinder
  7781                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  7782                                  
  7783                                  ;*** for mini disks ***
  7784                                  
  7785                                  		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  7786                                  					; check for mini disk
  7787                                  		jnz	short oknotmini	; not mini disk.
  7788                                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  7789                                  					; set the physical track number
  7790                                  oknotmini:
  7791                                  %endif
  7792                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  7793                                  		;;;
  7794                                  		;mov	[cs:saved_word], ax
  7795 000022A1 A3[9E04]                		mov	[saved_word], ax
  7796 000022A4 58                      		pop	ax
  7797 000022A5 F7F3                    		div	bx
  7798 000022A7 88D1                    		mov	cl, dl
  7799 000022A9 FEC1                    		inc	cl
  7800 000022AB 8B5D15                  		mov	bx, [di+15h]	; [di+BDS.heads]
  7801 000022AE 50                      		push	ax
  7802 000022AF 31D2                    		xor	dx, dx
  7803                                  		;mov	ax, [cs:saved_word]
  7804 000022B1 A1[9E04]                		mov	ax, [saved_word]
  7805 000022B4 F7F3                    		div	bx
  7806                                  		;mov	[cs:saved_word], ax
  7807 000022B6 A3[9E04]                		mov	[saved_word], ax ; not necessary !? (ax must be 0)
  7808 000022B9 58                      		pop	ax
  7809 000022BA F7F3                    		div	bx		; dl is head, ax is cylinder
  7810                                  		; 16/12/2023
  7811 000022BC 0E                      		push	cs
  7812 000022BD 07                      		pop	es ; (*)
  7813 000022BE BB[5201]                		mov	bx, disksector ; (**)
  7814                                  		;
  7815 000022C1 F6454004                		test	byte [di+40h], 4 ; fLBArw ; LBA read/write flag
  7816 000022C5 742F                    		jz	short set3_chs_read
  7817                                  set3_lba_read:
  7818                                  
  7819                                  ; 16/12/2023
  7820                                  %if 0
  7821                                  		;push	cs
  7822                                  		;pop	es ; (*)
  7823                                  		;mov	bx, disksector ; (**)
  7824                                  
  7825                                  		;push	ds
  7826                                  		;push	si
  7827                                  		xor	ax, ax	; 0
  7828                                  		push	ax
  7829                                  		push	ax
  7830                                  		mov	ax, [di+19h]	; [di+BDS.hiddensectors+2]
  7831                                  		push	ax
  7832                                  		mov	ax, [di+17h]	; [di+BDS.hiddensectors]
  7833                                  		push	ax
  7834                                  		push	es		; buffer address
  7835                                  		push	bx
  7836                                  		mov	ax, 1		; sector (read) count
  7837                                  		push	ax
  7838                                  		;mov	ax, 16		; DAP size
  7839                                  		mov	al, 16
  7840                                  		push	ax
  7841                                  		mov	dl, [rom_drv_num] ; ds = cs
  7842                                  		mov	ax, ss
  7843                                  		mov	ds, ax ; ds = ss
  7844                                  		mov	si, sp
  7845                                  		;mov	dl, [cs:rom_drv_num]
  7846                                  		mov	ah, 42h
  7847                                  		int	13h		; DISK - IBM/MS Extension
  7848                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  7849                                  		;pop	si
  7850                                  		;pop	ds
  7851                                  		jnc	short set3_lba_read_ok
  7852                                  		add	sp, 16
  7853                                  		;pop	si
  7854                                  		;pop	ds
  7855                                  set3_err:
  7856                                  		;jmp	setret
  7857                                  		jmp	ret_hard_err
  7858                                  
  7859                                  set3_lba_read_ok
  7860                                  		add	sp, 16
  7861                                  		;pop	si
  7862                                  		;pop	ds
  7863                                  		jmp	short set3_read_ok
  7864                                  %else
  7865                                  		; 16/12/2023
  7866                                  		;push	si ; * ; (not necessary)
  7867                                  		;mov	si, empty_dap_buff ; dap_buffer
  7868 000022C7 BE[571B]                		mov	si, dap_buffer ; empty_dap_buff 
  7869 000022CA 56                      		push	si
  7870 000022CB 87F7                    		xchg	si, di
  7871                                  		; si = BDS
  7872                                  		; di = DAP buffer
  7873 000022CD B81000                  		mov	ax, 16
  7874 000022D0 AB                      		stosw		; DAP size
  7875 000022D1 B001                    		mov	al, 1
  7876 000022D3 AB                      		stosw		; sector (read) count
  7877                                  		; buffer address
  7878 000022D4 89D8                    		mov	ax, bx	; offset disksector
  7879 000022D6 AB                      		stosw
  7880 000022D7 8CC0                    		mov	ax, es	; es=ds=cs = BIOSDATA segment
  7881 000022D9 AB                      		stosw
  7882                                  		; sector address (bits 0 to 31)	
  7883 000022DA 8B4417                  		mov	ax, [si+17h] ; [di+BDS.hiddensectors]
  7884 000022DD AB                      		stosw
  7885 000022DE 8B4419                  		mov	ax, [si+19h] ; [di+BDS.hiddensectors+2]
  7886 000022E1 AB                      		stosw
  7887                                  		; sector address bits 32 to 63 (0)
  7888 000022E2 31C0                    		xor	ax, ax ; 0
  7889 000022E4 AB                      		stosw
  7890 000022E5 AB                      		stosw
  7891                                  		;xchg	di, si
  7892 000022E6 89F7                    		mov	di, si
  7893                                  		; di = BDS
  7894 000022E8 5E                      		pop	si ; DAP buffer address	
  7895                                  		
  7896 000022E9 8A16[071A]              		mov	dl, [rom_drv_num] ; ds = cs
  7897 000022ED B442                    		mov	ah, 42h
  7898 000022EF CD13                    		int	13h		; DISK - IBM/MS Extension
  7899                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  7900                                  		;pop	si ; *
  7901 000022F1 7324                    		jnc	short set3_read_ok
  7902                                  set3_err:
  7903                                  		;jmp	setret
  7904 000022F3 E9B502                  		jmp	ret_hard_err
  7905                                  %endif
  7906                                  
  7907                                  set3_chs_read:
  7908 000022F6 837D7901                		cmp	word [di+79h], 1 ; [di+BDS.bdsm_ismini] ; check for mini disk
  7909 000022FA 7503                    		jnz	short oknotmini
  7910 000022FC 03457B                  		add	ax, [di+7Bh]	; [di+BDS.bdsm_hidden_trks]
  7911                                  		;;;
  7912                                  
  7913                                  oknotmini:
  7914                                  ;*** end of added logic for mini disk
  7915                                  				
  7916 000022FF D0CC                    		ror	ah, 1		; move high two bits of cyl to high
  7917 00002301 D0CC                    		ror	ah, 1		; two bits of upper byte
  7918 00002303 80E4C0                  		and	ah, 0C0h	; turn off remainder of bits
  7919 00002306 08E1                    		or	cl, ah		; move two bits to correct spot
  7920 00002308 88C5                    		mov	ch, al		; ch iscylinder (low 8 bits)
  7921                                  					; cl is sector + 2 high bits of cylinder
  7922 0000230A 88D6                    		mov	dh, dl		; dh is	head
  7923                                  		
  7924                                  		; 12/08/2023 (ds=cs)
  7925 0000230C 8A16[071A]              		mov	dl, [rom_drv_num]
  7926                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  7927                                  
  7928                                  ; cl is sector + 2 high bits of cylinder
  7929                                  ; ch is low 8 bits of cylinder
  7930                                  ; dh is head
  7931                                  ; dl is drive
  7932                                  
  7933                                  ; for convenience, we are going to read the logical boot sector
  7934                                  ; into cs:disksector area.
  7935                                  
  7936                                  ; read in boot sector using bios disk interrupt. the buffer where it
  7937                                  ; is to be read in is cs:disksector.
  7938                                  
  7939                                  		; 16/12/2023
  7940                                  		; es=ds=cs = BIOSDATA segment
  7941                                  		; bx = disksector ; (**)
  7942                                  
  7943                                  		;push	cs
  7944                                  		;pop	es ; (*)
  7945                                  		
  7946                                  		;mov	bx, disksector	; for convenience,
  7947                                  					; we are going to read the logical boot sector
  7948                                  					; into cs:disksector area.
  7949 00002310 B80102                  		mov	ax, 201h
  7950 00002313 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  7951                                  					; AL = number of sectors to read, CH = track, CL = sector
  7952                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  7953                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  7954                                  		; 16/12/2023
  7955 00002315 72DC                    		jc	short set3_err
  7956                                  
  7957                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  7958                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  7959                                  ; media if we recognize the version number.
  7960                                  
  7961                                  set3_read_ok:
  7962                                  		; 11/08/2023
  7963                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  7964                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  7965                                  		; 18/12/2023
  7966                                  		;push	bx ; +
  7967                                  		;push	ax ; (not necessary)
  7968                                  
  7969                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7970                                  		;;;
  7971 00002317 81BFFE0155AA            		cmp	word [bx+1FEh], 0AA55h
  7972 0000231D 7541                    		jne	short invalid_boot_record
  7973                                  		; 16/12/2023
  7974                                  		; 12/08/2023
  7975                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  7976 0000231F 803FE9                  		cmp	byte [bx], 0E9h	; is it a near jump?
  7977 00002322 740B                    		je	short check_1_ok ; yes
  7978 00002324 803FEB                  		cmp	byte [bx], 0EBh	; is it a short jump?
  7979 00002327 7537                    		jne	short invalid_boot_record ; no
  7980 00002329 807F0290                		cmp	byte [bx+2], 90h ; yes, is the next one a nop?
  7981 0000232D 7531                    		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  7982                                  check_1_ok:
  7983 0000232F 837F1600                		cmp     word [bx+16h], 0 ; [bx+BPB_FATSz16]
  7984                                  		;jz	short check_1	; 16 bit FAT size is 0 if it is FAT32 bs
  7985                                  		; 16/12/2023
  7986 00002333 740E                    		jz	short check_2	; FAT32 bs
  7987                                  
  7988                                  		; FAT16 or FAT12 bs
  7989                                  
  7990                                  		;push	ds
  7991                                  		;push	si  ; (not necessary)
  7992 00002335 57                      		push	di
  7993                                  		; es=ds=cs = BIOSDATA segment
  7994                                  		;push	es
  7995                                  		;pop	ds
  7996                                  
  7997                                  		;mov	cx, 28
  7998 00002336 B90E00                  		mov	cx, 14 ; *
  7999 00002339 8D7724                  		lea	si, [bx+24h]	; move offset 36 to 63
  8000                                  					;      to offset 64 (28 bytes)
  8001 0000233C 8D7F40                  		lea	di, [bx+40h]	; boot sector offset 64
  8002 0000233F FC                      		cld	; (not necessary, 'std' is not used before here)
  8003                                  		;rep movsb
  8004 00002340 F3A5                    		rep movsw ; *
  8005 00002342 5F                      		pop	di
  8006                                  		;pop	si
  8007                                  		;pop	ds
  8008                                  		;;;
  8009                                  ; 16/12/2023
  8010                                  %if 0
  8011                                  ;check_1:
  8012                                  		; 12/08/2023
  8013                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  8014                                  		cmp	byte [bx], 0E9h
  8015                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  8016                                  		je	short check_1_ok ; yes
  8017                                  		cmp	byte [bx], 0EBh
  8018                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  8019                                  		jne	short invalid_boot_record ; no
  8020                                  		cmp	byte [bx+2], 90h
  8021                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  8022                                  		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  8023                                  check_1_ok:
  8024                                  %endif
  8025                                  
  8026                                  ; 18/12/2023
  8027                                  %if 0
  8028                                  		; 14/08/2023
  8029                                  check_2:
  8030                                  		mov	bx, disksector+11 ; disksector+EXT_BOOT.BPB
  8031                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  8032                                  					; point to the bpb in the boot record
  8033                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  8034                                  		mov	al, [bx+10] ; 12/08/2023 
  8035                                  					; get the mediadescriptor byte
  8036                                  		and	al, 0F0h	; mask off low nibble
  8037                                  		cmp	al, 0F0h	; is high nibble = 0Fh?
  8038                                  		jne	short invalid_boot_record ; no, invalid boot record
  8039                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  8040                                  		cmp	word [bx], 512 ; 12/08/2023
  8041                                  		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  8042                                  
  8043                                  check2_ok:				; yes, mediadescriptor ok.
  8044                                  		mov	al, [bx+2] ; 12/08/2023
  8045                                  		;mov	al, [cs:bx+2]	; now make sure that
  8046                                  					; the sectorspercluster is
  8047                                  					; a power of 2
  8048                                  					;
  8049                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  8050                                  					; get the sectorspercluster
  8051                                  %endif
  8052                                  		;;;
  8053                                  check_2:
  8054                                  		; 18/12/2023
  8055                                  		; bx = disksector
  8056 00002343 8A4715                  		mov	al, [bx+21]	; [bx+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  8057                                  					; get the mediadescriptor byte
  8058 00002346 24F0                    		and	al, 0F0h	; mask off low nibble
  8059 00002348 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  8060 0000234A 7514                    		jne	short invalid_boot_record ; no, invalid boot record
  8061 0000234C 817F0B0002              		cmp	word [bx+11], 512 ; [bx+EXT_BOOT.BPB+EBPB.BYTESPERSECTOR]
  8062 00002351 750D                    		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  8063                                  
  8064                                  check2_ok:	; yes, mediadescriptor ok.
  8065 00002353 8A470D                  		mov	al, [bx+13]	; now make sure that
  8066                                  					; the sectorspercluster is
  8067                                  					; a power of 2
  8068                                  					;
  8069                                  					; [bx++EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  8070                                  					; get the sectorspercluster
  8071                                  		;;;
  8072                                  
  8073 00002356 08C0                    		or	al, al		; is it zero?
  8074 00002358 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  8075                                  
  8076                                  ck_power_of_two:
  8077 0000235A D0E8                    		shr	al, 1		; shift until first bit emerges
  8078 0000235C 73FC                    		jnc	short ck_power_of_two
  8079 0000235E 7406                    		jz	short valid_boot_record
  8080                                  
  8081                                  invalid_boot_record:
  8082                                  		; 18/12/2023
  8083                                  		;pop	ax
  8084                                  		;pop	bx ; +
  8085 00002360 E95E01                  		jmp	unknown		; jump to invalid boot record
  8086                                  					; unformatted or illegal media.
  8087                                  ; 16/12/2023
  8088                                  ; ---------------------------------------------------------------------------
  8089                                  ;	; 12/08/2023
  8090                                  ;setret_brdg:
  8091                                  ;		jmp	setret
  8092                                  ; ---------------------------------------------------------------------------
  8093                                  
  8094                                  unknown3_0_j:
  8095 00002363 E95F01                  		jmp	unknown3_0	; legally formatted media,
  8096                                  					; although, content might be bad.
  8097                                  ; ---------------------------------------------------------------------------
  8098                                  
  8099                                  valid_boot_record:
  8100                                  		; 18/12/2023
  8101                                  		;pop	ax
  8102                                  		;pop	bx ; +
  8103                                  		
  8104                                  		; 18/12/2023
  8105                                  		; bx = offset disksector ; +
  8106                                  
  8107                                  ; Signature found. Now check version.
  8108                                  
  8109                                  		; 14/08/2023
  8110 00002366 817F08322E              		cmp	word [bx+8], '2.'
  8111                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  8112                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  8113 0000236B 7506                    		jne	short try5
  8114 0000236D 807F0A30                		cmp	byte [bx+10], '0'
  8115                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  8116                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  8117                                  		; 12/08/2023
  8118                                  		;jnz	short try5
  8119                                  		;jmp	short copybpb
  8120 00002371 7425                    		je	short copybpb
  8121                                  
  8122                                  ;; --------------------------------------------------------------------------
  8123                                  ;;	; 12/08/2023
  8124                                  ;;setret_brdg:
  8125                                  ;;		jmp	setret
  8126                                  ;; --------------------------------------------------------------------------
  8127                                  ;
  8128                                  ;unknown3_0_j:
  8129                                  ;		jmp	unknown3_0	; legally formatted media,
  8130                                  ;					; although, content might be bad.
  8131                                  ; ---------------------------------------------------------------------------
  8132                                  
  8133                                  try5:
  8134 00002373 E83902                  		call	cover_fdisk_bug
  8135                                  
  8136                                  ; see if it is an os2 signature
  8137                                  
  8138                                  		; 12/08/2023
  8139                                  		; ds = cs = BIOSDATA segment
  8140 00002376 817F08302E              		cmp	word [bx+8], '0.'
  8141                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  8142                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  8143 0000237B 750C                    		jne	short no_os2
  8144 0000237D 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  8145                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  8146 00002380 2C31                    		sub	al, '1'
  8147                                  		;sub	al, 31h		; '1'
  8148 00002382 24FE                    		and	al, 0FEh
  8149 00002384 7412                    		jz	short copybpb	; accept either	'1' or '2'
  8150 00002386 E93801                  		jmp	unknown
  8151                                  ; ---------------------------------------------------------------------------
  8152                                  
  8153                                  ; no os2 signature, this is to check for real dos versions
  8154                                  
  8155                                  no_os2:
  8156                                  		; 12/08/2023
  8157                                  		; ds = cs = BIOSDATA
  8158 00002389 817F08332E              		cmp	word [bx+8], '3.'			
  8159                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  8160                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  8161 0000238E 72D3                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  8162                                  					; do not trust it, but still legal.
  8163 00002390 7506                    		jnz	short copybpb	; honor	os2 boot record
  8164                                  					; or dos 4.0 version
  8165 00002392 807F0A31                		cmp	byte [bx+10], '1' ; 12/08/2023
  8166                                  		;cmp	byte [cs:bx+10], '1'
  8167                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  8168 00002396 72CB                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  8169                                  copybpb:
  8170                                  
  8171                                  ; 03/10/2022
  8172                                  
  8173                                  ; we have a valid boot sector. use the bpb in it to build the
  8174                                  ; bpb in bios. it is assumed that only
  8175                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  8176                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  8177                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  8178                                  ; need to be set (all other values in already). fbigfat is also set.
  8179                                  
  8180                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  8181                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  8182                                  ; and system id according to the boot record.
  8183                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  8184                                  
  8185                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8186                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2787h)
  8187                                  		;;;
  8188                                  		; 17/12/2023
  8189 00002398 BE[5D01]                		mov	si, disksector+11
  8190                                  		;sub	ch, ch ; ; (ch may be > 0)
  8191 0000239B 29C9                    		sub	cx, cx ; 0 
  8192                                  		;mov	cl, [disksector+16] ; BPB_NumFATs
  8193 0000239D 8A4C05                  		mov	cl, [si+5] ; number of FATs
  8194                                  
  8195                                  		; NOTE: This check is not proper for FAT32 boot sector (standard spec)
  8196                                  		; (after PCDOS 7.1). So, it is not existing in Windows ME IO.SYS
  8197                                  		; Erdogan Tan - 01/09/2023 ((IBMBIO.COM 7.1 disassembly note))
  8198                                  
  8199                                  		;;cmp	word ptr cs:disksector+4Dh, 0 ; ???
  8200                                  		;cmp	word [disksector+4Dh], 0
  8201                                  		;jnz	short check_3
  8202                                  
  8203                                  		; 17/12/2023
  8204                                  		; check extended boot signature (0x29)
  8205                                  		;
  8206                                  		; (***) NOTE: 28 bytes of FAT16/FAT12 boot sector from offset 36
  8207                                  		; have been moved to offset 64 (see label 'check_1_ok:' above) 
  8208                                  		; ((now, BS_BootSig is at offset 66 even if it was at offset 38))
  8209                                  		
  8210                                  		;cmp	cs:disksector+42h, 29h	; BS_BootSig (FAT32)
  8211 000023A0 803E[9401]29            		cmp	byte [disksector+42h], 29h ; BS_BootSig (***)
  8212                                  		;jmp	short check_4
  8213                                  check_3:
  8214                                  		;;cmp	cs:disksector+26h, 29h	; BS_BootSig (FAT16/FAT12)
  8215                                  		;cmp	byte [disksector+26h], 29h ; (***)
  8216                                  check_4:
  8217 000023A5 7538                    		jnz	short copybpb_fat	; conventional fat system
  8218                                  
  8219                                  ; 17/12/2023
  8220                                  %if 0
  8221                                  		; 10/12/2022
  8222                                  		; (number of FATs optimization)
  8223                                  		mov	si, disksector+11 ; disksector+0Bh
  8224                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  8225                                  		;mov	cl, [cs:si+05h]
  8226                                  		; 12/08/2023
  8227                                  		; ds = cs = BIOSDATA segment (0070h)
  8228                                  		mov	cl, [si+05h] ; number of FATs
  8229                                  
  8230                                  		cmp	byte [si+1Bh], 29h ; 12/08/2023
  8231                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  8232                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  8233                                  					; [disksector+EXT_BOOT.SIG]
  8234                                  					; EXT_BOOT_SIGNATURE
  8235                                  		jnz	short copybpb_fat ; conventional fat system
  8236                                  
  8237                                  		; 03/10/2022
  8238                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  8239                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  8240                                  		;	     number of FATs must be 2 ; =*?=
  8241                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  8242                                  		;
  8243                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  8244                                  
  8245                                  		; 10/12/2022
  8246                                  		;cmp	byte [cs:disksector+10h], 0
  8247                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  8248                                  		;jnz	short copybpb_fat ; a fat system.
  8249                                  		or	cl, cl	 ; [cs:disksector+10h]
  8250                                  		jnz	short copybpb_fat ; a fat system.
  8251                                  %endif
  8252                                  
  8253                                  		; 17/12/2023 - Retro DOS v5.0
  8254                                  		;;cmp	byte [cs:disksector+10h], 0 ; BPB.fats
  8255                                  		;cmp	byte [disksector+10h], 0 ; BPB_NUmFATs
  8256                                  		;jnz	short copybpb_fat ; a fat system
  8257                                  		; 17/12/2023
  8258                                  		; cl = [disksector+10h]
  8259 000023A7 20C9                    		and	cl, cl ; 0 ?
  8260 000023A9 7534                    		jnz	short copybpb_fat ; a fat system
  8261                                  
  8262                                  ; non fat based	media.
  8263                                  
  8264 000023AB 57                      		push	di  ; BDS
  8265                                  		; 12/08/2023
  8266                                  		;push	ds  ; ds = cs = BIOSDATA segment
  8267                                  		
  8268                                  		; 17/12/2023
  8269                                  		; es = ds = cs
  8270                                  		;push	ds
  8271                                  		;pop	es
  8272                                  
  8273                                  		; 12/08/2023
  8274                                  		; ds = cs
  8275                                  		;push	cs
  8276                                  		;pop	ds
  8277                                  
  8278                                  		; 10/12/2022
  8279                                  		; (number of FATs optimization)
  8280                                  		; SI = disksector+11
  8281                                  		; 17/10/2022
  8282                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  8283                                  		;mov	si, disksector+11
  8284 000023AC 83C706                  		add	di, 6		; add di,BDS.BPB
  8285                                  
  8286                                  ; just for completeness, we'll make sure that total_sectors and
  8287                                  ; big_total_sectors aren't both zero. I've seen examples of
  8288                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  8289                                  ; got that way. If it occurs, then use the values from the
  8290                                  ; partition table.
  8291                                  
  8292                                  		; 17/12/2023
  8293                                  		; cx = 0
  8294                                  		; 18/12/2022
  8295                                  		;sub	cx, cx
  8296                                  
  8297                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  8298                                  		;jnz	short already_nonz 
  8299                                  		;			; how about big_total?
  8300                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  8301                                  		;jnz	short already_nonz ; we're okay if any are != 0
  8302                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  8303                                  		;jnz	short already_nonz
  8304                                  
  8305                                  		; 12/08/2023
  8306                                  		; ds = cs = BIOSDATA segment (0070h)
  8307                                  
  8308                                  		; 17/12/2023
  8309                                  		; 12/08/2023
  8310 000023AF 394C08                  		cmp	[si+8], cx ; 0		; [si+EBPB.TOTALSECTORS]
  8311 000023B2 751C                    		jnz	short already_nonz
  8312                                  				    	; how about big_total?
  8313 000023B4 394C15                  		cmp	[si+15h], cx ; 0	; [si+EBPB.BIGTOTALSECTORS]
  8314 000023B7 7517                    		jnz	short already_nonz ; we're okay if any are != 0
  8315 000023B9 394C17                  		cmp	[si+17h], cx ; 0	; [si+EBPB.BIGTOTALSECTORS+2]
  8316 000023BC 7512                    		jnz	short already_nonz
  8317                                  
  8318                                  ; now let's copy the values from the partition table (now in the BDS)
  8319                                  ; into the BPB in the boot sector buffer, before they get copied back.
  8320                                  
  8321 000023BE 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  8322                                  		; 12/08/2023
  8323                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  8324 000023C1 894408                  		mov	[si+8], ax
  8325 000023C4 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  8326                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  8327 000023C7 894415                  		mov	[si+15h], ax
  8328 000023CA 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  8329                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  8330 000023CD 894417                  		mov	[si+17h], ax
  8331                                  
  8332                                  already_nonz:
  8333                                  		; 18/12/2022
  8334                                  		; cx = 0
  8335                                  		;mov	cl, 25
  8336                                  		;;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  8337                                  		; 17/12/2023 - Retro DOS v5.0
  8338 000023D0 B135                    		mov	cl, 53	; PCDOS 7.1 IBMBIO.COM
  8339                                  				; BDS.BPB size (25 + 28 for FAT32 parms)
  8340 000023D2 F3A4                    		rep movsb
  8341                                  		;pop	ds
  8342                                  		; 12/08/2023
  8343                                  		; ds = cs
  8344                                  		;pop	bp  ; ds (on top of stack) = BIOSDATA
  8345 000023D4 5F                      		pop	di  ; BDS
  8346                                  		;push	es
  8347                                  		;push	ds
  8348                                  		;pop	es
  8349                                  		;push	cs
  8350                                  		;pop	ds
  8351                                  		; 12/08/2023
  8352                                  		;mov	es, bp
  8353                                  		; ds = cs = es
  8354                                  		
  8355                                  		; 14/08/2023
  8356 000023D5 BD[4F08]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  8357                                  		; 18/12/2022
  8358                                  		;mov	bp, mov_media_ids
  8359                                  		;;mov	bp, 751h	; mov_media_ids
  8360                                  					; at 2C7h:751h = 70h:2CC1h
  8361                                  					; set volume id, systemid, serial.
  8362 000023D8 0E                      		push	cs		; simulate far call
  8363 000023D9 E895F6                  		call	call_bios_code
  8364                                  		; 12/08/2023
  8365                                  		; ds = cs = es
  8366                                  		;push	es
  8367                                  		;pop	ds
  8368                                  		;pop	es
  8369 000023DC E9C501                  		jmp	goodret
  8370                                  
  8371                                  ; ---------------------------------------------------------------------------
  8372                                  
  8373                                  ; ****** cas ---
  8374                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  8375                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  8376                                  ; happens with some frequency -- perhaps through some OS/2 setup
  8377                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  8378                                  ; from the boot sector into the DPB anyway, we've just been using
  8379                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  8380                                  ; we'll go ahead and copy it into the DPB, except in the case
  8381                                  ; that it equals zero, in which case we just use the values in
  8382                                  ; the DPB from the partition table.
  8383                                  
  8384                                  ; 17/10/2022
  8385                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  8386                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  8387                                  ; 09/12/2022
  8388                                  MOVMEDIAIDS equ mov_media_ids
  8389                                  CLEARIDS equ clear_ids
  8390                                  ; 11/09/2023
  8391                                  CLEARIDS_X equ clear_ids_x
  8392                                  
  8393                                  copybpb_fat:
  8394                                  		; 17/12/2023
  8395                                  		; ch = 0, cl = number of FATs
  8396                                  		; 10/12/2022
  8397                                  		; (number of FATs optimization)
  8398                                  		; SI = disksector+11
  8399                                  		; 17/10/2022
  8400                                  		;mov	si, disksector+11
  8401                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  8402                                  					; cs:si	-> bpb in boot
  8403                                  		; 17/12/2023
  8404                                  		; dx = 0
  8405                                  		;xor	dx, dx
  8406                                  
  8407                                  		; 12/08/2023
  8408                                  		; ds = cs = BIOSDATA segment (0070h)
  8409 000023DF 8B4408                  		mov	ax, [si+8]
  8410                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  8411                                  					; get totsec from boot sec
  8412 000023E2 09C0                    		or	ax, ax
  8413 000023E4 7514                    		jnz	short copy_totsec ; if non zero, use that
  8414 000023E6 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  8415                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  8416                                  					; get the big version
  8417                                  					; (32 bit total	sectors)
  8418 000023E9 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  8419                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  8420                                  		; 10/12/2022
  8421                                  		; (number of FATs optimization)
  8422                                  		; CL = number of FATs (2 or 1) 
  8423 000023EC 89D3                    		mov	bx, dx		; see if it is a big zero
  8424 000023EE 09C3                    		or	bx, ax
  8425 000023F0 7508                    		jnz	short copy_totsec
  8426                                  			; screw it. it was bogus.
  8427 000023F2 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8428 000023F5 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8429 000023F8 EB06                    		jmp	short fat_big_small
  8430                                  
  8431                                  		;mov	cx, dx
  8432                                  		;or	cx, ax		; see if it is a big zero
  8433                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  8434                                  copy_totsec:				
  8435 000023FA 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  8436                                  					; make DPB match boot sec
  8437 000023FD 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  8438                                  
  8439                                  		; 10/12/2022
  8440                                  ;totsec_already_set:			
  8441                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8442                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8443                                  
  8444                                  ; determine fat entry size.
  8445                                  
  8446                                  fat_big_small:
  8447                                  
  8448                                  ;at this moment dx;ax = total sector number
  8449                                  
  8450                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  8451                                  ;from the BPB on the disk
  8452                                  		
  8453                                  		; 12/08/2023
  8454                                  		; ds = cs = BIOSDATA segment (0070h)
  8455                                  				
  8456 00002400 8B5C03                  		mov	bx, [si+3]
  8457                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  8458                                  					; get #reserved_sectors	from BPB
  8459 00002403 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  8460                                  					; update BDS field
  8461 00002406 29D8                    		sub	ax, bx
  8462 00002408 83DA00                  		sbb	dx, 0		; update the count
  8463                                  		; 12/08/2023
  8464 0000240B 8B5C0B                  		mov	bx, [si+0Bh]
  8465                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  8466                                  					; bx = sectors/fat
  8467 0000240E 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  8468                                  					; set in bds bpb
  8469                                  		; 17/12/2023 - Retro DOS v5.0
  8470                                  		;	      (PCDOS 7.1 IBMBIO.COM)
  8471 00002411 53                      		push	bx ; FAT sectors
  8472 00002412 09DB                    		or	bx, bx
  8473 00002414 753A                    		jnz	short fat_16bit	
  8474                                  
  8475                                  ; 17/12/2023
  8476                                  %if 0		
  8477                                  		sub	ax, [si+19h]	; FAT32 file system (PCDOS 7.1 BUG!)
  8478                                  					; BPB.FATSz32
  8479                                  		sbb	dx, [si+1Bh]	; BPB.FATSz32+2 (PCDOS 7.1 BUG!)
  8480                                  		; dx:ax = partition size - (one FAT sectors + reserved sects)  
  8481                                  		mov	bx, [si+19h]	; BPB.FATSz32
  8482                                  		mov	[di+1Fh], bx	; [di+BDS.fatsecs32]
  8483                                  		mov	bx, [si+1Bh]	; BPB.FATSz32+2
  8484                                  		mov	[di+21h], bx	; [di+BDS.fatsecs32+2]
  8485                                  		mov	bx, [si+1Dh]	; BPB.BPB_ExtFlags
  8486                                  		mov	[di+23h], bx	; [di+BDS.extflags]
  8487                                  		mov	bx, [si+1Fh]	; BPB.FSVer
  8488                                  		mov	[di+25h], bx	; [di+BDS.fsver]
  8489                                  		mov	bx, [si+21h]	; BPB.RootClus
  8490                                  		mov	[di+27h], bx	; [di+BDS.rootdirclust]
  8491                                  		mov	bx, [si+23h]	; BPB.RootClus+2
  8492                                  		mov	[di+29h], bx	; [di+BDS.rootdirclust+2]
  8493                                  		mov	bx, [si+25h]	; BPB.FSInfo
  8494                                  		mov	[di+2Bh], bx	; [di+BDS.fsinfo]
  8495                                  		mov	bx, [si+27h]	; BPB.FSInfo+2
  8496                                  		mov	[di+2Dh], bx	; [di+BDS.fsinfo+2]
  8497                                  		jmp	short fat_32bit	; PCDOS 7.1 BUG! Erdogan Tan - 8/8/2023
  8498                                  					; correct code (would be):
  8499                                  					;   mov cl, [cs:si+05h] ; BPB_NumFATs
  8500                                  					; sub_fat32_size:
  8501                                  					;   sub ax, [cs:si+19h] ; BPB_FATSz32
  8502                                  					;   sbb dx, [cs:si+1Bh] ; BPB_FATSz32+2
  8503                                  					;   dec cl
  8504                                  					;   jg short sub_fat32_size
  8505                                  					;   jmp short fat_32bit
  8506                                  %endif
  8507                                  		; 17/12/2023
  8508                                  		; cl = BPB_NumFATs (2 or 1)
  8509                                  		; ch = 0
  8510 00002416 8B5C19                  		mov	bx, [si+19h]	; BPB.FATSz32
  8511                                  sub_fat32_size:
  8512 00002419 29D8                    		sub	ax, bx
  8513 0000241B 1B541B                  		sbb	dx, [si+1Bh]	; BPB.FATSz32+2
  8514                                  		;dec	cl
  8515 0000241E 49                      		dec	cx
  8516 0000241F 7FF8                    		jg	short sub_fat32_size
  8517                                  
  8518 00002421 895D1F                  		mov	[di+1Fh], bx	; [di+BDS.fatsecs32]
  8519 00002424 8B5C1B                  		mov	bx, [si+1Bh]	; BPB.FATSz32+2
  8520 00002427 895D21                  		mov	[di+21h], bx	; [di+BDS.fatsecs32+2]
  8521                                  
  8522 0000242A 8B5C1D                  		mov	bx, [si+1Dh]	; BPB.BPB_ExtFlags
  8523 0000242D 895D23                  		mov	[di+23h], bx	; [di+BDS.extflags]
  8524 00002430 8B5C1F                  		mov	bx, [si+1Fh]	; BPB.FSVer
  8525 00002433 895D25                  		mov	[di+25h], bx	; [di+BDS.fsver]
  8526 00002436 8B5C21                  		mov	bx, [si+21h]	; BPB.RootClus
  8527 00002439 895D27                  		mov	[di+27h], bx	; [di+BDS.rootdirclust]
  8528 0000243C 8B5C23                  		mov	bx, [si+23h]	; BPB.RootClus+2
  8529 0000243F 895D29                  		mov	[di+29h], bx	; [di+BDS.rootdirclust+2]
  8530 00002442 8B5C25                  		mov	bx, [si+25h]	; BPB.FSInfo
  8531 00002445 895D2B                  		mov	[di+2Bh], bx	; [di+BDS.fsinfo]
  8532 00002448 8B5C27                  		mov	bx, [si+27h]	; BPB.FSInfo+2
  8533 0000244B 895D2D                  		mov	[di+2Dh], bx	; [di+BDS.fsinfo+2]
  8534 0000244E EB08                    		jmp	short fat_32bit
  8535                                  		
  8536                                  fat_16bit:
  8537                                  		; 17/12/2023 - Retro DOS v5.0
  8538                                  		;	      (PCDOS 7.1 IBMBIO.COM)
  8539                                  		; 10/12/2022
  8540                                  		; (number of FATs optimization)
  8541                                  		; CL = number of FATs (2 or 1)
  8542                                  		; CH = 0 ; 17/12/2023 
  8543                                  		;dec	cl ; *
  8544                                  		; 18/12/2022
  8545 00002450 49                      		dec	cx ; *
  8546 00002451 D3E3                    		shl	bx, cl
  8547                                  		;shl	bx, 1	; =*?=	; always 2 fats
  8548                                  		
  8549 00002453 29D8                    		sub	ax, bx		; sub #	fat sectors
  8550 00002455 83DA00                  		sbb	dx, 0
  8551                                  fat_32bit:	
  8552                                  		; 17/12/2023
  8553 00002458 8B5C06                  		mov	bx, [si+6] ; 12/08/2023
  8554                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  8555                                  					; # root entries
  8556 0000245B 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  8557                                  					; set in bds bpb
  8558 0000245E B104                    		mov	cl, 4
  8559 00002460 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  8560 00002462 29D8                    		sub	ax, bx		; sub #	dir sectors
  8561 00002464 83DA00                  		sbb	dx, 0		;
  8562                                  					; dx:ax	now contains the
  8563                                  					; # of data sectors
  8564                                  		; 17/12/2023
  8565                                  		; ch = 0
  8566                                  		;xor	cx, cx ; *
  8567 00002467 8A4C02                  		mov	cl, [si+2] ; 12/08/2023
  8568                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  8569                                  					; sectors per cluster
  8570 0000246A 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  8571                                  					; set in bios bpb
  8572 0000246D 50                      		push	ax
  8573 0000246E 89D0                    		mov	ax, dx
  8574 00002470 31D2                    		xor	dx, dx
  8575 00002472 F7F1                    		div	cx		; cx = sectors per cluster
  8576                                  		; 12/08/2023 (ds=cs)
  8577                                  		;mov	[temp_h], ax
  8578                                  		;;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  8579                                  					; # clusters.
  8580                                  		; 17/12/2023
  8581 00002474 A3[9E04]                		mov	[saved_word], ax ; hw of cluster number
  8582 00002477 58                      		pop	ax
  8583 00002478 F7F1                    		div	cx
  8584                                  		; 17/12/2023
  8585                                  		;;cmp	word [cs:temp_h], 0
  8586                                  		;cmp	word [temp_h], 0  ; 12/08/2023
  8587                                  		;cmp	word [saved_word], 0 ; (*)
  8588                                  		;ja	short toobig_ret ; too big cluster number
  8589                                  
  8590                                  		; 17/12/2023
  8591                                  		;;;
  8592 0000247A 5B                      		pop	bx ; FAT sectors (16 bit)
  8593                                  		;and	bx, bx ; 0 ?
  8594 0000247B 09DB                    		or	bx, bx ; 0 ?
  8595 0000247D 751F                    		jnz	short chk_clnum_hw
  8596                                  				 ; 16 bit fat sectors > 0 ; FAT12 or FAT16 fs
  8597                                  
  8598 0000247F 813E[9E04]FF0F          		cmp	word [saved_word], 0FFFh 
  8599 00002485 7503                    		jne	short fat32_clust_limit
  8600 00002487 83F8F6                  		cmp	ax, 0FFF6h	; FAT32 cluster number limit: 0FFFFFF6h
  8601                                  fat32_clust_limit:
  8602 0000248A 772D                    		ja	short short toobig_ret ; too big cluster number
  8603 0000248C 391E[9E04]              		cmp	[saved_word], bx ; 0 ?
  8604                                  	 	;jnz	short fat16_clust_limit
  8605 00002490 7505                    		jnz	short set_fbigbig_flag ; 17/12/2023
  8606                                  fat16_clust_limit:	; 17/12/2023
  8607 00002492 83F8F6                  		cmp	ax, 0FFF6h	; FAT16 cluster number limit: 0FFF6h
  8608                                  ;fat16_clust_limit:
  8609 00002495 760E                    		jna     short fat12_clust_limit ; jbe
  8610                                  set_fbigbig_flag:	; 17/12/2023
  8611 00002497 800E[061A]20            		or	byte [fbigfat], 20h ; fbigbig ; FAT32 fs
  8612 0000249C EB11                    		jmp	short copymediaid
  8613                                  chk_clnum_hw:
  8614 0000249E 833E[9E04]00            		cmp	word [saved_word], 0 ; (*)
  8615 000024A3 7714                    		ja	short toobig_ret ; too big cluster number
  8616                                  		;;;
  8617                                  fat12_clust_limit:
  8618 000024A5 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  8619                                  					; is this 16-bit fat?
  8620 000024A8 7205                    		jb	short copymediaid ; no,	small fat
  8621                                  		; 17/10/2022
  8622 000024AA 800E[061A]40            		or	byte [fbigfat], 40h ; fbig ; FAT16 fs
  8623                                  		;or	ds:fbigfat, 40h	; fbig
  8624                                  					; 16 bit fat
  8625                                  copymediaid:
  8626                                  		; 17/12/2023
  8627                                  		; es = ds = cs
  8628                                  		
  8629                                  		;push	es
  8630                                  		;push	ds
  8631                                  		;pop	es
  8632                                  		
  8633                                  		; 12/08/2023
  8634                                  		; ds = cs = BIOSDATA
  8635                                  		;push	cs
  8636                                  		;pop	ds
  8637                                  		; 17/10/2022
  8638 000024AF BD[4F08]                		mov	bp, MOVMEDIAIDS
  8639                                  		;mov	bp, 865h	; (PCDOS 7.1 IBMBIO.COM)
  8640                                  		;;mov	bp, 751h	; mov_media_ids
  8641                                  					; at 2C7h:751h = 70h:2CC1h
  8642                                  					; copy filesys_id, volume label
  8643 000024B2 0E                      		push	cs		; simulate far call
  8644 000024B3 E8BBF5                  		call	call_bios_code
  8645                                  
  8646                                  		; 12/08/2023
  8647                                  		;push	es
  8648                                  		;pop	ds
  8649                                  		; 17/12/2023	
  8650                                  		;pop	es
  8651                                  
  8652 000024B6 E9CD00                  		jmp	massage_bpb	; now final check for bpb info
  8653                                  					; and return.
  8654                                  ; ---------------------------------------------------------------------------
  8655                                  
  8656                                  toobig_ret:
  8657                                  		; 12/08/2023 (ds=cs=BIOSDATA)
  8658 000024B9 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  8659                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  8660                                  					; too big (32 bit clust #) for FAT16
  8661 000024BE E9E300                  		jmp	goodret		; still	drive letter is	assigned
  8662                                  					; but useless. to big for
  8663                                  					; current pc dos fat file system
  8664                                  ; ---------------------------------------------------------------------------
  8665                                  
  8666                                  unknown:
  8667                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8668 000024C1 804D4002                		or	byte [di+40h], 2 ; [di+BDS.flags+1]
  8669                                  					 ; unformatted_media
  8670                                  		; 12/12/2022
  8671                                  		;or	byte [di+24h], 02h
  8672                                  		;;or	word [di+23h], 200h ; [di+BDS.flags]
  8673                                  					; unformatted_media
  8674                                  					; Set unformatted media	flag.
  8675                                  
  8676                                  ; the boot signature may not be	recognizable,
  8677                                  ; but we should	try and	read it	anyway.
  8678                                  
  8679                                  unknown3_0:
  8680 000024C5 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  8681                                  					; [di+BDS.totalsecs32+2]
  8682 000024C8 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8683 000024CB BE[161A]                		mov	si, disktable2
  8684                                  scan:					; 08/08/2023
  8685                                  		;cmp	dx, [cs:si]	; total sectors hw
  8686                                  		; 12/08/2023 (ds=cs)
  8687 000024CE 3B14                    		cmp	dx, [si] 
  8688 000024D0 720C                     		jb	short gotparm
  8689 000024D2 7705                    		ja	short scan_next
  8690                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  8691 000024D4 3B4402                  		cmp	ax, [si+2]
  8692 000024D7 7605                    		jbe	short gotparm
  8693                                  scan_next:				
  8694 000024D9 83C60A                  		add	si, 10		; 5*2
  8695 000024DC EBF0                    		jmp	short scan	; covers upto 512 mb media
  8696                                  ; ---------------------------------------------------------------------------
  8697                                  
  8698                                  gotparm:
  8699 000024DE 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  8700                                  		;or	ds:fbigfat, cl
  8701                                  		; 17/10/2022
  8702 000024E1 080E[061A]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  8703                                  		; 12/08/2023
  8704                                  		; ds = cs = BIOSDATA
  8705 000024E5 8B4C04                  		mov	cx, [si+4]
  8706                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  8707                                  					; cl = log base 2 of ch
  8708 000024E8 8B5406                  		mov	dx, [si+6]
  8709                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  8710                                  
  8711                                  ; now calculate size of fat table
  8712                                  
  8713 000024EB 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  8714                                  					; save number of (root)	dir entries
  8715 000024EE 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8716 000024F1 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8717 000024F4 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  8718                                  					; save sectors per cluster
  8719                                  		
  8720                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8721 000024F7 F606[061A]60            		test	byte [fbigfat], 60h ; fbig+fbigbig ; FAT16 or FAT32
  8722                                  		; 11/09/2023
  8723                                  		; 17/10/2022
  8724                                  		;test	byte [fbigfat], 40h
  8725                                  		;;test	ds:fbigfat, 40h	; fbig
  8726                                  					; if (fbigfat)
  8727 000024FC 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  8728                                  
  8729                                  ; we don't need to change "small fat" logic since it is guaranteed
  8730                                  ; that double word total sector will not use 12 bit fat (unless
  8731                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  8732                                  ; so in this case we assume dx = 0 !!
  8733                                  
  8734 000024FE 31DB                    		xor	bx, bx		; 12 bit fat (FAT12 fs)
  8735 00002500 88EB                    		mov	bl, ch
  8736 00002502 4B                      		dec	bx
  8737 00002503 01C3                    		add	bx, ax		; dx=0
  8738 00002505 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  8739 00002507 43                      		inc	bx		; BDS.secperclus
  8740 00002508 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  8741 0000250B 89DE                    		mov	si, bx
  8742 0000250D D1EB                    		shr	bx, 1
  8743 0000250F 01F3                    		add	bx, si		; number of FAT bytes ; 08/08/2023
  8744 00002511 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  8745 00002515 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  8746 00002517 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  8747                                  					; save number of fat sectors
  8748 0000251A EB6A                    		jmp	short massage_bpb
  8749                                  ; ---------------------------------------------------------------------------
  8750                                  
  8751                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  8752                                  
  8753                                  dobig:					
  8754 0000251C B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  8755 0000251E 52                      		push	dx		; save total sectors (high)
  8756 0000251F 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  8757 00002522 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  8758 00002524 29D0                    		sub	ax, dx
  8759 00002526 5A                      		pop	dx
  8760 00002527 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  8761 0000252A 83E801                  		sub	ax, 1
  8762 0000252D 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  8763                                  					; total	secs - reserved	secs - root dir	secs
  8764 00002530 B302                    		mov	bl, 2
  8765 00002532 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  8766                                  					; bx = 256 * BDS.secperclus + 2
  8767                                  
  8768                                  ; I don't understand why to add bx here!!!
  8769                                  
  8770                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  8771                                  		; 27/09/2022
  8772                                  		; (Microsoft FAT32 File	System Specification,
  8773                                  		; December 2000, Page 21)
  8774                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  8775                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  8776                                  		; 8/8/2023 (Retro DOS v5.0)
  8777                                  		; If(FATType == FAT32)
  8778                                  		;   TmpVal2 = TmpVal2 / 2;
  8779                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  8780                                  		; 8/8/2023 (Retro DOS v5.0)
  8781                                  		; If(FATType == FAT32) {
  8782                                  		;   BPB_FATSz16 = 0;
  8783                                  		;   BPB_FATSz32 = FATSz;
  8784                                  		;} else {
  8785                                  		;   BPB_FATSz16 = LOWORD(FATSz);
  8786                                  		;/* there is no BPB_FATSz32 in a FAT16 BPB */
  8787                                  		;}
  8788                                  					; dx:ax = TmpVal1, bx = TmpVal2
  8789 00002535 01D8                    		add	ax, bx		; 
  8790 00002537 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  8791 0000253A 83E801                  		sub	ax, 1		
  8792 0000253D 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  8793                                  
  8794                                  		;;;
  8795                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8796 00002540 F606[061A]20            		test	byte [fbigfat], 20h ; fbigbig (FAT32) flag
  8797 00002545 740D                    		jz      short dobig1
  8798                                  
  8799 00002547 D1EB                    		shr	bx, 1           ; TmpVal2 = TmpVal2 / 2
  8800                                  					; dx:ax = TmpVal1+(2*TmpVal2)-1
  8801 00002549 83E81F                  		sub	ax, 31          ; reserved sectors = 32 (for FAT32 fs) /// 1+31 = 32
  8802 0000254C 83DA00                  		sbb	dx, 0
  8803 0000254F 29D8                    		sub	ax, bx
  8804 00002551 83DA00                  		sbb	dx, 0           ; dx:ax = TmpVal1+(2*TmpVal2)-TmpVal2-1
  8805                                  					;       = TmpVal1+(TmpVal2-1)
  8806                                  dobig1:
  8807 00002554 50                      		push	ax		; save lw of dividend
  8808 00002555 89D0                    		mov	ax, dx		; divide hw of dx:ax at first (as 1st stage)
  8809 00002557 31D2                    		xor	dx, dx
  8810 00002559 F7F3                    		div	bx		; 32 bit division, dx:ax/bx
  8811                                  					; remainder in dx is hw of 2nd stage dividend
  8812 0000255B 89C5                    		mov	bp, ax		; hw of quotient
  8813 0000255D 58                      		pop	ax		; restore lw of dividend (of 1st stage)
  8814                                  		;;;
  8815                                  
  8816                                  ; assuming dx in the table will never be bigger than bx.
  8817                                  
  8818 0000255E F7F3                    		div	bx		; BDS.fatsecs =
  8819                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  8820 00002560 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  8821                                  					; number of fat	sectors
  8822                                  		;;;
  8823                                  		
  8824                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8825 00002563 8A1E[061A]              		mov	bl, [fbigfat]
  8826 00002567 885D3B                  		mov	[di+3Bh], bl	; [di+BDS.fatsiz] ; fat size flag
  8827                                  		
  8828 0000256A F6C320                  		test	bl, 20h		; fbigbig (FAT32) flag
  8829 0000256D 7410                    		jz	short dobig2	; not FAT32
  8830                                  
  8831 0000256F 89451F                  		mov	[di+1Fh], ax	; [di+BDS.fatsecs32]
  8832 00002572 896D21                  		mov	[di+21h], bp	; [di+BDS.fatsecs32+2]
  8833 00002575 C745110000              		mov	word [di+11h], 0 ; [di+BDS.fatsecs] = 0
  8834                                  					; clear 16 bit FAT size field
  8835 0000257A C745092000              		mov	word [di+9], 32	; [di+BDS.resectors]
  8836                                  					; set reserved sectors to 32 (FAT32 de facto)
  8837                                  dobig2:
  8838                                  		;;;
  8839                                  
  8840                                  ; now, set the default filesys_id, volume label, serial number
  8841                                  
  8842                                  		; 05/08/2023
  8843                                  		; [di+1Fh] = [fbigfat]
  8844                                  		;
  8845                                  		;;mov	bl, ds:fbigfat
  8846                                  		;; 17/10/2022
  8847                                  		;mov	bl, [fbigfat]
  8848                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  8849                                  
  8850                                  		; 12/08/2023
  8851                                  		;push	ds ; ds = cs = BIOSDATA
  8852                                  		
  8853                                  		; 17/12/2023
  8854                                  		; es = ds = cs
  8855                                  		;push	ds
  8856                                  		;pop	es
  8857                                  
  8858                                  		; 12/08/2023 
  8859                                  		; ds = cs = BIOSDATA
  8860                                  		;push	cs
  8861                                  		;pop	ds
  8862                                  
  8863                                  		; 18/12/2023 - Retro DOS v5.0
  8864                                  		; bl = [fbigfat] (clear_ids_x uses bl value here)
  8865                                  		; 11/09/2023
  8866                                  		;mov	al, [fbigfat]
  8867 0000257F BD[A106]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  8868                                  		; 17/10/2022
  8869                                  		;mov	bp, CLEARIDS
  8870                                  		;;mov	bp, 5D9h	; clear_ids
  8871                                  					; at 2C7h:5D9h = 70h:2B49h
  8872                                  					; at BIOSCODE:06ABh
  8873                                  					;	in PCDOS 7.1 IBMBIO.COM
  8874 00002582 0E                      		push	cs
  8875 00002583 E8EBF4                  		call	call_bios_code
  8876                                  
  8877                                  		; 12/08/2023
  8878                                  		;pop	ds ; ds = cs = BIOSDATA
  8879                                  
  8880                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  8881                                  ; set according to the partition information. we are going to
  8882                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  8883                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  8884                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  8885                                  ; we don't do this for the bpb information from the boot record. we
  8886                                  ; are not going to change the bpb information from the boot record.
  8887                                  
  8888                                  massage_bpb:
  8889                                  		; 05/08/2023
  8890                                  		; [di+1Fh] = [fbigfat]
  8891                                  		;
  8892                                  		;; 12/12/2022
  8893                                  		;mov	bl, [fbigfat]
  8894                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  8895                                  		;			; set size of fat on media
  8896                                  		;
  8897 00002586 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  8898 00002589 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8899                                  		; 11/09/2023
  8900 0000258C 09D2                    		or	dx, dx
  8901 0000258E 7514                    		jnz	short goodret	
  8902                                  		;cmp	dx, 0		; double word total sectors?
  8903                                  		;;ja	short goodret	; don't have to change it.
  8904                                  		;; 12/12/2022
  8905                                  		;ja	short short goodret2
  8906                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  8907                                  		;ja	short goodret	; don't have to change it.
  8908                                  		; 12/12/2022
  8909 00002590 395519                  		cmp	[di+19h], dx ; 0
  8910                                  		;ja	short goodret2
  8911 00002593 770F                    		ja	short goodret	; 11/09/2023
  8912 00002595 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  8913                                  		;jb	short goodret
  8914                                  		; 12/12/2022
  8915                                  		;jc	short goodret
  8916 00002598 7209                    		jc	short goodret_clc ; 11/09/2023
  8917 0000259A 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  8918 0000259D 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  8919                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  8920                                  		; 12/12/2022
  8921 000025A0 89551B                  		mov	[di+1Bh], dx ; 0
  8922                                  goodret_clc:
  8923                                  		; 11/09/2023
  8924 000025A3 F8                      		clc 
  8925                                  goodret:
  8926                                  		;mov	bl, ds:fbigfat
  8927                                  		; 11/09/2023
  8928                                  		; 12/12/2022
  8929                                  		; 17/10/2022
  8930 000025A4 8A1E[061A]              		mov	bl, [fbigfat]
  8931                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8932 000025A8 885D3B                  		mov	[di+3Bh], bl	; [di+BDS.fatsiz]
  8933                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  8934                                  					; set size of fat on media
  8935                                  		; 11/09/2023
  8936                                  		;clc
  8937                                  ret_hard_err:
  8938                                  		; 12/12/2022
  8939                                  goodret2:
  8940 000025AB 07                      		pop	es
  8941                                  		;pop	ds	; ds = cs = BIOSDATA ; 14/08/2023
  8942 000025AC 5B                      		pop	bx
  8943 000025AD 5F                      		pop	di
  8944 000025AE C3                      		retn
  8945                                  
  8946                                  ; =============== S U B	R O U T	I N E =======================================
  8947                                  
  8948                                  ; 15/10/2022
  8949                                  
  8950                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  8951                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  8952                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  8953                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  8954                                  ;then subtract 1 from BPB_TOTALSECTORS.
  8955                                  
  8956                                  		; 17/10/2022
  8957                                  cover_fdisk_bug:
  8958                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  8959                                  		; ds = cs
  8960                                  
  8961                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8962                                  		; (optimization)
  8963                                  		;push	ax
  8964                                  		;push	dx
  8965                                  		;push	si
  8966                                  
  8967                                  		; 18/12/2023
  8968                                  		; bx = offset disksector
  8969                                  
  8970                                  		; 18/12/2023
  8971 000025AF 807F2629                		cmp	byte [bx+26h], 29h
  8972                                  		; 12/08/2023
  8973                                  		;cmp	byte [disksector+26h], 29h
  8974                                  		;;cmp	byte [cs:disksector+26h], 29h
  8975                                  					; [disksector+EXT_BOOT.SIG],
  8976                                  					; EXT_BOOT_SIGNATURE
  8977 000025B3 7426                    		je	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  8978                                  		
  8979 000025B5 817F073130              		cmp	word [bx+7], 3031h
  8980                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  8981 000025BA 7506                    		jne	short cfb_chk_totalsecs ; 11/08/2023
  8982 000025BC 807F0A30                		cmp	byte [bx+10], '0'
  8983                                  		;cmp	byte [cs:bx+10], '0'
  8984 000025C0 7519                    		jne	short cfb_retit
  8985                                  
  8986                                  cfb_chk_totalsecs:
  8987                                  		; 11/08/2023
  8988                                  ; 18/12/2023
  8989                                  %if 0
  8990                                  		; 17/10/2022		
  8991                                  		mov	si, disksector+11 ; 14Eh+0Bh
  8992                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  8993                                  		; 12/08/2023
  8994                                  		cmp	word [si+8], 0
  8995                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  8996                                  					; just to make sure.
  8997                                  		jz	short cfb_retit
  8998                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  8999                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  9000                                  		; 12/08/2023
  9001                                  		mov	ax, [si+8]
  9002                                  		add	ax, [si+11h]
  9003                                  
  9004                                  		jnb	short cfb_retit
  9005                                  		jnz	short cfb_retit
  9006                                  					; if carry set and ax=0
  9007                                  		dec	word [si+8]
  9008                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
  9009                                  					; then decrease	BPB_TOTALSECTORS by 1
  9010                                  %endif
  9011                                  		; 18/12/2023
  9012                                  		;cmp	word [bx+19], 0
  9013 000025C2 8B4713                  		mov	ax, [bx+19]	; [bx+EBPB.TOTALSECTORS]
  9014 000025C5 21C0                    		and	ax, ax ; 0 ?
  9015 000025C7 7412                    		jz	short cfb_retit
  9016                                  
  9017                                  		;mov	ax, [bx+19]
  9018 000025C9 03471C                  		add	ax, [bx+28]	; [bx+EBPB.HIDDENSECTORS]
  9019 000025CC 730D                    		jnc	short cfb_retit
  9020 000025CE 750B                    		jnz	short cfb_retit
  9021                                  		; ax = 0		; 0 -> 0FFFFh
  9022 000025D0 FF4F13                  		dec	word [bx+19]	; then decrease	BPB_TOTALSECTORS by 1
  9023                                  
  9024 000025D3 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  9025 000025D7 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  9026                                  cfb_retit:	
  9027                                  		; 18/12/2023
  9028                                  		;pop	si
  9029                                  		;pop	dx
  9030                                  		;pop	ax
  9031                                  		
  9032 000025DB C3                      		retn
  9033                                  
  9034                                  ; ---------------------------------------------------------------------------
  9035                                  
  9036 000025DC 0200                    word2:		dw 2
  9037 000025DE 0300                    word3:		dw 3
  9038 000025E0 0002                    word512:	dw 512
  9039                                  
  9040                                  ; =============== S U B	R O U T	I N E =======================================
  9041                                  
  9042                                  ; 15/10/2022
  9043                                  
  9044                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  9045                                  ; the form factor. it is assumed that the bpbs for the various form factors
  9046                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  9047                                  ; as the bpb on the drive.
  9048                                  ;
  9049                                  ; no attempt is made to preserve registers since we are going to jump to
  9050                                  ; sysinit straight after this routine.
  9051                                  
  9052                                  		; 18/12/2023 - Retro DOS v5.0 
  9053                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2A43h)
  9054                                  setdrvparms:
  9055                                  		; 12/12/2023
  9056                                  		; ds = cs
  9057 000025E2 31DB                    		xor	bx, bx
  9058                                  		; 18/10/2022
  9059 000025E4 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  9060                                  _next_bds:
  9061 000025E8 06                      		push	es
  9062 000025E9 57                      		push	di
  9063                                  
  9064                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9065 000025EA 268A5D3E                		mov	bl, [es:di+3Eh]	; [es:di+BDS.formfactor]
  9066                                  		;mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  9067                                  
  9068 000025EE 80FB05                  		cmp	bl, 5		; ffHardFile
  9069 000025F1 753A                    		jnz	short nothardff
  9070 000025F3 31D2                    		xor	dx, dx
  9071 000025F5 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  9072 000025F9 09C0                    		or	ax, ax
  9073 000025FB 7508                    		jnz	short get_ccyl
  9074 000025FD 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  9075 00002601 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  9076                                  get_ccyl:
  9077 00002605 52                      		push	dx
  9078 00002606 50                      		push	ax
  9079 00002607 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  9080 0000260B 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  9081                                  					; assume sectors per cyl. < 64k.
  9082 0000260F 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  9083 00002611 58                      		pop	ax
  9084 00002612 5A                      		pop	dx		; dx:ax	= total	sectors
  9085 00002613 50                      		push	ax
  9086 00002614 89D0                    		mov	ax, dx
  9087 00002616 31D2                    		xor	dx, dx
  9088 00002618 F7F1                    		div	cx
  9089                                  		; 12/12/2023  ; !*!
  9090                                  		; (data segment may not be same with code segment here)
  9091                                  		;mov	[cs:temp_h], ax	; ax be	0 here.
  9092                                  		; 18/12/2023 - Retro DOS v5.0
  9093                                  		;mov	[cs:saved_word], ax
  9094 0000261A 58                      		pop	ax
  9095 0000261B F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  9096 0000261D 09D2                    		or	dx, dx
  9097 0000261F 7401                    		jz	short no_cyl_rnd ; came out even
  9098 00002621 40                      		inc	ax		; round	up
  9099                                  no_cyl_rnd:
  9100                                  		; 18/12/2023 - Retro DOS v5.0
  9101 00002622 26894541                		mov	[es:di+41h], ax	; [es:di+BDS.cylinders]
  9102                                  		;mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  9103                                  		
  9104 00002626 06                      		push	es
  9105 00002627 1F                      		pop	ds  ; !*! ; 12/12/2023
  9106                                  
  9107 00002628 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  9108                                  					; ds:si	-> bpb for hard	file
  9109 0000262B EB55                    		jmp	short set_recbpb
  9110                                  ; ---------------------------------------------------------------------------
  9111                                  
  9112                                  nothardff:				
  9113 0000262D 0E                      		push	cs
  9114 0000262E 1F                      		pop	ds
  9115                                  
  9116                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  9117                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  9118                                  
  9119                                  		; 10/12/2022
  9120                                  		; ds = cs
  9121                                  		; 17/10/2022 (ds=cs)
  9122 0000262F 803E[111A]01            		cmp	byte [fakefloppydrv], 1
  9123                                  		;cmp	byte [cs:fakefloppydrv], 1
  9124 00002634 7454                    		jz	short go_to_next_bds
  9125 00002636 80FB07                  		cmp	bl, 7		; ffother
  9126                                  					; special case "other" type of medium
  9127 00002639 753D                    		jnz	short not_process_other
  9128                                  process_other:
  9129 0000263B 31D2                    		xor	dx, dx
  9130                                  
  9131                                  		;mov	ax, [di+25h]	; [di+BDS.cylinders]
  9132                                  		;mul	word [di+36h]	; [di+BDS.rheads]
  9133                                  		;mul	word [di+34h]	; [di+BDS.rsecpertrack]
  9134                                  		;mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  9135                                  		;			; have the total number of sectors
  9136                                  		; 18/12/2023 - Retro DOS v5.0
  9137 0000263D 8B4541                  		mov	ax, [di+41h]	; [di+BDS.cylinders]
  9138 00002640 F76552                  		mul	word [di+52h]	; [di+BDS.rheads]
  9139 00002643 F76550                  		mul	word [di+50h]	; [di+BDS.rsecpertrack]
  9140 00002646 89454B                  		mov	[di+4Bh], ax	; [di+BDS.rtotalsecs16]
  9141                                  					; have the total number of sectors
  9142 00002649 48                      		dec	ax
  9143 0000264A B201                    		mov	dl, 1
  9144                                  _again:					
  9145 0000264C 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  9146 0000264F 7206                    		jb	short _@@
  9147 00002651 D1E8                    		shr	ax, 1
  9148 00002653 D0E2                    		shl	dl, 1
  9149 00002655 EBF5                    		jmp	short _again
  9150                                  ; ---------------------------------------------------------------------------
  9151                                  
  9152                                  _@@:
  9153 00002657 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  9154 0000265A 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  9155                                  
  9156                                  		; 18/12/2023 - Retro DOS v5.0
  9157 0000265C C74549F000              		mov	word [di+49h], 240 ; [di+BDS.rdirentries]
  9158                                  		;mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  9159                                  __@@:
  9160                                  		; 18/12/2023 - Retro DOS v5.0
  9161 00002661 885545                  		mov	[di+45h], dl	; [di+BDS.rsecperclus]
  9162                                  		;mov	[di+29h], dl	; [di+BDS.rsecperclus]
  9163                                  
  9164                                  ; logic to get the sectors/fat area.
  9165                                  ; fat entry is assumed to be 1.5 bytes!!!
  9166                                  
  9167                                  		; 10/12/2022
  9168                                  		; ds = cs
  9169                                  		; 17/10/2022 (ds=cs)
  9170 00002664 F726[DE25]              		mul	word [word3]	; * 3
  9171 00002668 F736[DC25]              		div	word [word2]	; / 2
  9172 0000266C 31D2                    		xor	dx, dx
  9173 0000266E F736[E025]              		div	word [word512]	; / 512
  9174                                  		;
  9175                                  		; 10/12/2022
  9176                                  		;mul	word [cs:word3]	; * 3
  9177                                  		;div	word [cs:word2]	; / 2
  9178                                  		;xor	dx, dx
  9179                                  		;div	word [cs:word512] ; / 512
  9180                                  		;
  9181 00002672 40                      		inc	ax		; + 1
  9182                                  no_round_up:
  9183                                  		; 18/12/2023 - Retro DOS v5.0
  9184 00002673 89454E                  		mov	[di+4Eh], ax	; [di+BDS.rfatsecs]
  9185                                  		;mov	[di+32h], ax	; [di+BDS.rfatsecs]
  9186                                  
  9187 00002676 EB12                    		jmp	short go_to_next_bds
  9188                                  ; ---------------------------------------------------------------------------
  9189                                  
  9190                                  not_process_other:
  9191 00002678 D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  9192                                  		
  9193                                  		;mov	si, bpbtable
  9194                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  9195                                  		; 09/12/2022
  9196                                  		;mov	si, BPBTABLE
  9197                                  		;mov	si, [bx+si]	; get address of bpb
  9198                                  		; 10/12/2022
  9199                                  		;mov	si, [BPBTABLE+bx]
  9200                                  		; 13/12/2022
  9201                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  9202                                  		
  9203                                  		; 14/08/2023
  9204                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  9205                                  							; correct offset
  9206 0000267A 8BB7[BE96]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  9207                                  		
  9208                                  		; 18/12/2023 
  9209                                  		; si = address of the requested disk(ette) parameter block
  9210                                  		;	! as offset from SYSINIT segment !
  9211                                  
  9212                                  		; 28/08/2023
  9213 0000267E 81C69046                		add	si, SYSINIT_OFFSET
  9214                                  			; + displacement from BIOSDATA segment ; 18/12/2023
  9215                                  set_recbpb:
  9216                                  		; 18/12/2023
  9217                                  		;lea	di, [di+27h]	; [di+BDS.R_BPB]
  9218                                  		;			; es:di	-> recbpb
  9219                                  		;mov	cx, 25		; bpbx.size
  9220                                  		;rep movsb		; move (size bpbx) bytes
  9221                                  		
  9222                                  		; 18/12/2023 - Retro DOS v5.0
  9223 00002682 8D7D43                  		lea	di, [di+43h]	; [di+BDS.R_BPB]
  9224                                  					; es:di	-> recbpb
  9225 00002685 B93500                  		mov	cx, 53		; bpbx.size
  9226 00002688 F3A4                    		rep movsb		; move (size bpbx) byte
  9227                                  go_to_next_bds:
  9228 0000268A 5F                      		pop	di
  9229 0000268B 07                      		pop	es		; restore pointer to bds
  9230 0000268C 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  9231 0000268F 83FFFF                  		cmp	di, 0FFFFh	; -1
  9232 00002692 740A                    		jz	short got_end_of_bds_chain
  9233 00002694 E951FF                  		jmp	_next_bds
  9234                                  
  9235                                  ; ---------------------------------------------------------------------------
  9236                                  
  9237                                  		; 18/12/2022
  9238                                  ;got_end_of_bds_chain:
  9239                                  		;retn
  9240                                  
  9241                                  ; =============== S U B	R O U T	I N E =======================================
  9242                                  
  9243                                  ; 15/10/2022
  9244                                  ; 30/12/2018 - Retro DOS v4.0
  9245                                  
  9246                                  ; al = device number
  9247                                  
  9248                                  print_init:	
  9249 00002697 98                      		cbw
  9250 00002698 89C2                    		mov	dx, ax
  9251 0000269A B401                    		mov	ah, 1
  9252 0000269C CD17                    		int	17h		; PRINTER - INITIALIZE
  9253                                  					; DX = printer port (0-3)
  9254                                  					; Return: AH = status
  9255                                  got_end_of_bds_chain:	; 18/12/2022
  9256 0000269E C3                      		retn
  9257                                  
  9258                                  ; =============== S U B	R O U T	I N E =======================================
  9259                                  
  9260                                  ; al = device number
  9261                                  
  9262                                  aux_init:
  9263 0000269F 98                      		cbw
  9264 000026A0 89C2                    		mov	dx, ax
  9265                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  9266                                  					; 2400,n,1,8 (msequ.inc)
  9267                                  		;mov	ah, 0
  9268                                  		; 10/12/2022
  9269 000026A2 B8A300                  		mov	ax, 00A3h
  9270 000026A5 CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  9271                                  					; 	AL = initializing parameters,
  9272                                  					;	DX = port number (0-3)
  9273                                  					; Return: AH = RS-232 status code bits,
  9274                                  					;	  AL = modem status bits
  9275 000026A7 C3                      		retn
  9276                                  
  9277                                  ; =============== S U B	R O U T	I N E =======================================
  9278                                  
  9279                                  ; 18/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  9280                                  ; 08/08/2023 - Retro DOS v4.2 (Modified MSDOS 6.22 IO.SYS)
  9281                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS) -Retro DOS v4 2022- (MSDOS 5.0-6.21)
  9282                                  ; 30/12/2018 - Retro DOS v4.0
  9283                                  ; 03/06/2018 - Retro DOS v3.0
  9284                                  ; (19/03/2018 - Retro DOS v2.0)
  9285                                  
  9286                                  ; domini **********************************************************************
  9287                                  ;
  9288                                  ;mini disk initialization routine. called right after dohard
  9289                                  ;modified for >2 hardfile support
  9290                                  ;
  9291                                  ; **cs=ds=es=datagrp
  9292                                  ;
  9293                                  ; **domini will search for every extended partition in the system, and
  9294                                  ;   initialize it.
  9295                                  ;
  9296                                  ; **bdsm stands for bds table for mini disk and located right after the label
  9297                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  9298                                  ;   address of bdsm table.
  9299                                  ;
  9300                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  9301                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  9302                                  ;   right now, they are called as ismini, hidden_trks respectively.
  9303                                  ;
  9304                                  ; **domini will use the same routine in sethard routine after label set2 to
  9305                                  ;   save coding.
  9306                                  ;
  9307                                  ; **drvmax determined in dohard routine will be used for the next
  9308                                  ;   available logical mini disk drive number.
  9309                                  ;
  9310                                  ; input: drvmax, dskdrvs
  9311                                  ;
  9312                                  ; output: minidisk installed. bdsm table established and installed to bds.
  9313                                  ;	  end_of_bdsm - ending offset address of bdsm.
  9314                                  ;
  9315                                  ; called modules:
  9316                                  ;		  getboot
  9317                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  9318                                  ;
  9319                                  ;		  setmini (new, it will use set2 routine)
  9320                                  ;
  9321                                  ; variables used: end_of_bdsm
  9322                                  ;		  rom_minidisk_num
  9323                                  ;		  mini_hdlim, mini_seclim
  9324                                  ;		  BDS_STRUC, start_bds
  9325                                  ;
  9326                                  ;******************************************************************************
  9327                                  		; 18/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  9328                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B10h)
  9329                                  
  9330                                  		; 19/10/2022
  9331                                  domini:
  9332 000026A8 8A36[5D1A]              		mov	dh, [hnum]	; get number of hardfiles
  9333                                  		; 10/12/2022
  9334 000026AC 20F6                    		and	dh, dh
  9335                                  		;cmp	dh, 0
  9336 000026AE 743C                    		jz	short dominiret	; no hard file?	then exit.
  9337 000026B0 B280                    		mov	dl, 80h		; start	with hardfile 80h
  9338                                  domini_loop:
  9339                                  		; 18/12/2023 - Retro DOS v5.0
  9340 000026B2 31C0                    		xor	ax, ax ; 0
  9341                                  		; ds = cs
  9342                                  		;mov	[cs:ep_start_sector], ax
  9343                                  		;mov	[cs:ep_start_sector+2], ax
  9344                                  		;mov	[cs:ep_hidden_secs], ax
  9345                                  		;mov	[cs:ep_hidden_secs+2], ax
  9346 000026B4 A3[0022]                		mov	[ep_start_sector], ax
  9347 000026B7 A3[0222]                		mov	[ep_start_sector+2], ax
  9348 000026BA A3[0422]                		mov	[ep_hidden_secs], ax
  9349 000026BD A3[0622]                		mov	[ep_hidden_secs+2], ax
  9350                                  		;
  9351 000026C0 52                      		push	dx
  9352 000026C1 8816[5C1A]              		mov	[rom_minidisk_num], dl
  9353 000026C5 B408                    		mov	ah, 8
  9354 000026C7 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  9355                                  					; DL = drive number
  9356                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  9357                                  					; DL = number of consecutive drives
  9358                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  9359                                  		
  9360                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9361                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B36h
  9362                                  		;inc	dh
  9363                                  		;xor	ax, ax
  9364                                  		;mov	al, dh
  9365 000026C9 31C0                    		xor	ax, ax
  9366 000026CB 88F0                    		mov	al, dh	; <= 255
  9367 000026CD 40                      		inc	ax	; (0FFh -> 100h)
  9368 000026CE A3[621A]                		mov	[mini_hdlim], ax ; # of heads
  9369                                  		;and	cl, 3Fh
  9370                                  		;mov	al, cl
  9371                                  		; 08/08/2023
  9372 000026D1 88C8                    		mov	al, cl
  9373 000026D3 83E03F                  		and	ax, 3Fh
  9374 000026D6 A3[641A]                		mov	[mini_seclim], ax ; # of sectors/track
  9375                                  		
  9376                                  		; 18/12/2023
  9377                                  		;push	es ; * ; not necessary
  9378 000026D9 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
  9379 000026DD E868FA                  		call	getboot		; read master boot record into
  9380                                  					; initbootsegment:bootbias
  9381 000026E0 7203                    		jc	short domininext
  9382 000026E2 E80800                  		call	find_mini_partition
  9383                                  domininext:
  9384                                  		;pop	es ; *
  9385 000026E5 5A                      		pop	dx
  9386 000026E6 FEC2                    		inc	dl		; next hard file
  9387 000026E8 FECE                    		dec	dh
  9388 000026EA 75C6                    		jnz	short domini_loop
  9389                                  dominiret:
  9390 000026EC C3                      		retn
  9391                                  
  9392                                  ; =============== S U B	R O U T	I N E =======================================
  9393                                  
  9394                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  9395                                  ; 30/12/2018 - Retro DOS v4.0
  9396                                  
  9397                                  ;find_mini_partition tries to find every extended partition on a disk.
  9398                                  ;at entry:	di -> bdsm entry
  9399                                  ;		es:bx -> 07c0:bootbias - master boot record
  9400                                  ;		rom_minidisk_num - rom drive number
  9401                                  ;		drvmax - logical drive number
  9402                                  ;		mini_hdlim, mini_seclim
  9403                                  ;
  9404                                  ;called routine: setmini which uses set2 (in sethard routine)
  9405                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  9406                                  
  9407                                  
  9408                                  		; 19/12/2023 - Retro DOS v5.0 
  9409                                  		;	(Modified PCDOS 7.1 IBMBIO.COM)
  9410                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSADATA:2BFCh)
  9411                                  
  9412                                  find_mini_partition:	
  9413 000026ED 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  9414                                  
  9415                                  		; 19/12/2023
  9416                                  		; PCDOS 7.1 IBMBIO.COM
  9417                                  		;mov	word [ld_p_number], 26
  9418                                  fmpnext:
  9419                                  		;add	word [ld_p_number], 16
  9420                                  		;cmp	word [ld_p_number], 4122
  9421                                  		;		; 64 logical disk partitions (64 EBRs)
  9422                                  		;		; (64*4 = 256 pte's, 256*16 = 4096, + 26 = 4122)
  9423                                  		;jg	short fmpnextfound
  9424                                  				
  9425 000026F1 26803F05                		cmp	byte [es:bx], 5 ; 05h = extended partition id.
  9426 000026F5 7410                    		je	short fmpgot ; Extended DOS CHS
  9427                                  		
  9428                                  		; 19/12/2023 - Retro DOS v5.0
  9429 000026F7 26803F0F                		cmp     byte [es:bx], 0Fh ; Extended DOS LBA
  9430 000026FB 740A                    		je	short fmpgot
  9431                                  
  9432 000026FD 83C310                  		add	bx, 16
  9433 00002700 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  9434 00002704 75EB                    		jnz	short fmpnext
  9435                                  		;jmp	short fmpnextfound ; extended partition	not found
  9436                                  		; 18/12/2022
  9437                                  fmpnextfound:
  9438 00002706 C3                      		retn
  9439                                  
  9440                                  ;		; 30/07/2019 - Retro DOS v3.2
  9441                                  ;		jb	short fmpnext
  9442                                  ;fmpret:
  9443                                  ;		retn	; 29/05/2019
  9444                                  
  9445                                  ; ---------------------------------------------------------------------------
  9446                                  
  9447                                  		; 19/10/2022
  9448                                  fmpgot:					; found my partition.
  9449 00002707 E82B01                  		call	dmax_check	; check	for drvmax already 26
  9450 0000270A 73FA                    		jnb	short fmpnextfound ; done if too many
  9451                                  
  9452 0000270C 8B3E[601A]              		mov	di, [end_of_bdss] ; get next free bds
  9453                                  
  9454                                  		; 19/12/2023
  9455                                  		;mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  9456                                  		;; 10/12/2022
  9457                                  		;or	byte [di+23h], 1
  9458                                  		;;or	word [di+23h], 1 ; [di+BDS.flags]
  9459                                  		;			; fNon_Removable
  9460                                  		;mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  9461                                  		;			; ffHardFile
  9462                                  		; 19/12/2023 - Retro DOS v5.0
  9463 00002710 C745790100              		mov	word [di+79h], 1 ; [di+BDS.bdsm_ismini]
  9464 00002715 804D3F01                		or	byte [di+3Fh], 1 ; [di+BDS.flags], fNon_Removable
  9465 00002719 C6453E05                		mov	byte [di+3Eh], 5 ; [di+BDS.formfactor], ffHardFile 
  9466                                  
  9467 0000271D C606[061A]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  9468 00002722 A1[621A]                		mov	ax, [mini_hdlim]
  9469 00002725 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  9470 00002728 A1[641A]                		mov	ax, [mini_seclim]
  9471 0000272B 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  9472 0000272E A0[5C1A]                		mov	al, [rom_minidisk_num]
  9473 00002731 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  9474                                  					; set physical number
  9475 00002734 A0[7500]                		mov	al, [drvmax]
  9476 00002737 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  9477                                  					; set logical number
  9478 0000273A 26837F0A00              		cmp	word [es:bx+10], 0
  9479                                  		;ja	short fmpgot_cont
  9480 0000273F 7707                    		ja	short fmpgot1	; 19/12/2023
  9481 00002741 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  9482                                  					; only lower word is meaningful.
  9483 00002746 72BE                    		jb	short fmpnextfound
  9484                                  					; should be bigger than 64 sectors at least
  9485                                  fmpgot1:	; 19/12/2023
  9486                                  ;fmpgot_cont:				
  9487 00002748 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  9488 0000274B 268A7702                		mov	dh, [es:bx+2]	; cylinder
  9489 0000274F 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  9490 00002752 D0C6                    		rol	dh, 1
  9491 00002754 D0C6                    		rol	dh, 1
  9492 00002756 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  9493                                  		; 19/12/2023 - Retro DOS v5.0
  9494 0000275A 89557B                  		mov	[di+7Bh], dx	; [di+BDS.bdsm_hidden_trks]
  9495                                  		;mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  9496                                  					; set hidden trks
  9497                                  		; 19/12/2023
  9498                                  		;push	bx ; * ; PCDOS 7.1	
  9499                                  		;;;
  9500 0000275D 268B4F08                		mov	cx, [es:bx+8]	; partition size, lw
  9501 00002761 268B470A                		mov	ax, [es:bx+10]	; partition size, hw
  9502 00002765 030E[0022]              		add	cx, [ep_start_sector]
  9503 00002769 1306[0222]              		adc	ax, [ep_start_sector+2]
  9504 0000276D 31D2                    		xor	dx, dx ; 19/12/2023
  9505 0000276F 3916[0022]              		cmp	[ep_start_sector], dx ; 0
  9506                                  		;cmp	word [ep_start_sector], 0
  9507 00002773 750D                    		jnz	short fmpgot2
  9508 00002775 3916[0222]              		cmp	[ep_start_sector+2], dx ; 0
  9509                                  		;cmp	word [ep_start_sector+2], 0
  9510 00002779 7507                    		jnz	short fmpgot2
  9511 0000277B 890E[0022]              		mov	[ep_start_sector], cx
  9512 0000277F A3[0222]                		mov	[ep_start_sector+2], ax
  9513                                  fmpgot2:
  9514 00002782 890E[0422]              		mov	[ep_hidden_secs], cx
  9515 00002786 A3[0622]                		mov	[ep_hidden_secs+2], ax
  9516                                  		
  9517                                  		; convert start sector address to CHS
  9518                                  	
  9519                                  		; 19/12/2023
  9520                                  		; dx = 0
  9521                                  		;push	bx ; * ; not necessary
  9522                                  
  9523                                  		;mov	bx, [di+13h]	; [di+BDS.secpertrack]
  9524 00002789 8B7513                  		mov	si, [di+13h]	; [di+BDS.secpertrack]
  9525                                  		;xor	dx, dx  ; dx = 0
  9526                                  		;div	bx
  9527 0000278C F7F6                    		div	si
  9528 0000278E 91                      		xchg	ax, cx
  9529                                  		;div	bx
  9530 0000278F F7F6                    		div	si
  9531                                  		;mov	bx, [di+15h]	; [di+BDS.heads]
  9532                                  		; 07/05/2024
  9533                                  		; 17/04/2024 (BugFix)
  9534 00002791 8B7515                  		mov	si, [di+15h]	; [di+BDS.heads]
  9535 00002794 91                      		xchg	ax, cx
  9536 00002795 31D2                    		xor	dx, dx
  9537                                  		;div	bx
  9538 00002797 F7F6                    		div	si
  9539 00002799 91                      		xchg	ax, cx
  9540                                  		;div	bx
  9541 0000279A F7F6                    		div	si
  9542                                  
  9543                                  		;pop	bx ; *
  9544                                  
  9545 0000279C 09C9                    		or	cx, cx
  9546 0000279E 7505                    		jnz	short fmpgot_lba_rd
  9547 000027A0 3D0004                  		cmp	ax, 1024	; cylinder number < 1024, CHS read is proper
  9548 000027A3 7235                    		jb	short fmpgot_chs_rd
  9549                                  fmpgot_lba_rd:
  9550 000027A5 804D4004                		or	byte [di+40h], 4 ; set fLBArw flag ; LBA read/write ok/ready
  9551 000027A9 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
  9552 000027AD 1E                      		push	ds
  9553                                  		; 19/12/2023
  9554                                  		;push	si ; ** ; not necessary 
  9555 000027AE 31C0                    		xor	ax, ax		; push bp
  9556                                  				        ; mov bp, sp ; (*)
  9557 000027B0 50                      		push	ax ; 0
  9558 000027B1 50                      		push	ax ; 0
  9559 000027B2 FF36[0622]              		push	word [ep_hidden_secs+2]
  9560 000027B6 FF36[0422]              		push	word [ep_hidden_secs]
  9561 000027BA B80002                  		mov	ax, bootbias ; 200h	
  9562                                  		;mov	ax, 200h	; bootbias (buffer offset)
  9563 000027BD 06                      		push	es		; buffer segment
  9564 000027BE 50                      		push	ax
  9565 000027BF B80100                  		mov	ax, 1
  9566 000027C2 50                      		push	ax		; read count
  9567 000027C3 B81000                  		mov	ax, 10h		; DAP size = 16
  9568 000027C6 50                      		push	ax
  9569 000027C7 8CD0                    		mov	ax, ss
  9570 000027C9 8ED8                    		mov	ds, ax
  9571 000027CB 89E6                    		mov	si, sp		; ds:si = Disk Address Packet
  9572                                  		
  9573 000027CD B442                    		mov	ah, 42h		; LBA read
  9574 000027CF CD13                    		int	13h		; DISK - IBM/MS Extension
  9575                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  9576                                  		; 19/12/2023	
  9577                                  		;pushf		; PCDOS 7.1 IBMBIO.COM BUG! Erdogan Tan - 08/08/2023
  9578                                  		;add	sp, 16
  9579                                  		;popf		; BUG!
  9580                                  					; mov sp, bp ; (*)
  9581                                  					; pop bp
  9582                                  		; 19/12/2023
  9583 000027D1 9F                      		lahf		; load status flags into AH
  9584 000027D2 83C410                  		add	sp, 16
  9585 000027D5 9E                      		sahf		; store AH into flags
  9586                                  		
  9587                                  		;pop	si ; ** ; 19/12/2023
  9588 000027D6 1F                      		pop	ds
  9589 000027D7 7317                    		jnc	short fmpgot3
  9590                                  fmpnotfound:	; 19/12/2023
  9591 000027D9 C3                      		retn
  9592                                  		;jmp	short fmpgot3 
  9593                                  		;;;
  9594                                  
  9595                                  		; 19/12/2023
  9596                                  fmpgot_chs_rd:
  9597 000027DA 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  9598 000027DE 268A7701                		mov	dh, [es:bx+1]	; head
  9599 000027E2 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
  9600 000027E6 BB0002                  		mov	bx, 200h	; bootbias
  9601 000027E9 B80102                  		mov	ax, 201h
  9602 000027EC CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9603                                  					; AL = number of sectors to read, CH = track, CL = sector
  9604                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9605                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9606                                  ;fmpgot3:	; 19/12/2023
  9607                                  		;jc	short fmpnextfound
  9608 000027EE 72E9                    		jc	short fmpnotfound
  9609                                  fmpgot3:	
  9610 000027F0 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  9611                                  
  9612                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9613                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C7Ch
  9614 000027F3 26817F3C55AA            		cmp	word [es:bx+3Ch], 0AA55h ; 03C2h+03Ch = 3FEh
  9615                                  		;jne	short fmpnextfound ; not a valid boot sector !
  9616                                  		; 19/12/2023
  9617 000027F9 75DE                    		jne	short fmpnotfound ; not a valid boot sector !
  9618                                  
  9619                                  		; 13/08/2023
  9620                                  		;push	es
  9621 000027FB E80800                  		call	setmini		; install a mini disk.
  9622                                  					; bx value saved.
  9623                                  		;pop	es  ; 13/08/2023
  9624 000027FE 7203                    		jc	short fmpnextchain
  9625 00002800 E84700                  		call	xinstall_bds	; -- install the bdsm into table
  9626                                  fmpnextchain:
  9627 00002803 E9EBFE                  		jmp	fmpnext		; let's find out
  9628                                  					; if we	have any chained partition
  9629                                  ; ---------------------------------------------------------------------------
  9630                                  
  9631                                  		; 18/12/2022
  9632                                  ;fmpnextfound:
  9633                                  		;retn
  9634                                  
  9635                                  ; =============== S U B	R O U T	I N E =======================================
  9636                                  
  9637                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9638                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  9639                                  
  9640                                  ; 19/12/2022 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  9641                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C92h)
  9642                                  
  9643                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  9644                                  	
  9645 00002806 57                      		push	di
  9646 00002807 53                      		push	bx
  9647                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9648                                  		; ds = cs = BIOSDATA segment
  9649                                  		;push	ds
  9650 00002808 06                      		push	es
  9651                                  setmini_1:
  9652                                  		;cmp	byte [es:bx], 1 ; FAT12 partition
  9653                                  		;je	short setmini_2
  9654                                  		;cmp	byte [es:bx], 4 ; FAT16 (CHS) partition
  9655                                  		;je	short setmini_2
  9656                                  		;cmp	byte [es:bx], 6 ; FAT16 BIG (CHS) partition
  9657                                  		;je	short setmini_2
  9658                                  		;
  9659                                  		; 19/12/2023 - Retro DOS v5.0
  9660                                  		;cmp	byte [es:bx], 0Bh ; FAT32 (CHS) partition
  9661                                  		;je	short setmini_2
  9662                                  		;cmp	byte [es:bx], 0Ch ; FAT32 (LBA) partition
  9663                                  		;je	short setmini_2
  9664                                  		;cmp	byte [es:bx], 0Eh ; FAT16 (LBA) partition
  9665                                  		;je	short setmini_2
  9666                                  
  9667                                  		; 19/12/2023
  9668 00002809 268A07                  		mov 	al, [es:bx]
  9669 0000280C 3C01                    		cmp	al, 1 		; FAT12 partition
  9670 0000280E 7422                    		je	short setmini_2
  9671 00002810 3C04                    		cmp	al, 4 		; FAT16 (CHS) partition
  9672 00002812 741E                    		je	short setmini_2
  9673 00002814 3C06                    		cmp	al, 6 		; FAT16 BIG (CHS) partition
  9674 00002816 741A                    		je	short setmini_2
  9675 00002818 3C0B                    		cmp	al, 0Bh 	; FAT32 (CHS) partition
  9676 0000281A 7416                    		je	short setmini_2
  9677 0000281C 3C0C                    		cmp	al, 0Ch 	; FAT32 (LBA) partition
  9678 0000281E 7412                    		je	short setmini_2
  9679 00002820 3C0E                    		cmp	al, 0Eh 	; FAT16 (LBA) partition
  9680 00002822 740E                    		je	short setmini_2
  9681                                  
  9682 00002824 83C310                  		add	bx, 16
  9683 00002827 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  9684                                  		;jne	short setmini_1
  9685 0000282B 72DC                    		jb	short setmini_1 ; 19/12/2023
  9686 0000282D F9                      		stc
  9687 0000282E 07                      		pop	es
  9688                                  		; 12/08/2023
  9689                                  		;pop	ds
  9690 0000282F 5B                      		pop	bx
  9691 00002830 5F                      		pop	di
  9692 00002831 C3                      		retn
  9693                                  
  9694                                  ; ---------------------------------------------------------------------------
  9695                                  setmini_2:
  9696 00002832 E9D3F9                  		jmp	set2		; branch into middle of sethard
  9697                                  
  9698                                  ; =============== S U B	R O U T	I N E =======================================
  9699                                  
  9700                                  ; 30/12/2022 - Retro DOS v4.2
  9701                                  ; (SYSINITSEG is 473h for MSDOS 6.21 IO.SYS)
  9702                                  
  9703                                  ; 15/10/2022
  9704                                  ; 28/12/2018 - Retro DOS v4.0
  9705                                  ;
  9706                                  ; dmax_check -- call this when we want to install a new drive.
  9707                                  ;		it checks for drvmax < 26 to see if there is
  9708                                  ;		a drive letter left.
  9709                                  ;
  9710                                  ;	drvmax < 26 : carry SET!
  9711                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  9712                                  ;			trash ax
  9713                                  
  9714                                  		; 19/12/2023 - Retro DOS v5.0
  9715                                  dmax_check:
  9716 00002835 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  9717 0000283A 720D                    		jb	short dmax_ok	; return with carry if okay
  9718 0000283C 06                      		push	es
  9719                                  		;;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  9720                                  		;mov	ax, 544h	; 19/12/2023 (PCDOS 7.1)
  9721 0000283D B8D904                  		mov	ax, SYSINITSEG	; 17/10/2022	
  9722 00002840 8EC0                    		mov	es, ax
  9723                                  		; 18/10/2022
  9724 00002842 26C606[8803]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  9725                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  9726                                  					; set message flag
  9727                                  					; [SYSINIT+toomanydrivesflag]
  9728 00002848 07                      		pop	es
  9729                                  
  9730                                  		;;push	es
  9731                                  		;;mov	ax,SYSINIT_SEG
  9732                                  		;;mov	es,ax
  9733                                  		;;mov	byte [es:toomanydrivesflag],1
  9734                                  					; set message flag
  9735                                  		;;pop	es
  9736                                  		;
  9737                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  9738                                  dmax_ok:
  9739 00002849 C3                      		retn
  9740                                  
  9741                                  ; =============== S U B	R O U T	I N E =======================================
  9742                                  
  9743                                  ; 18/10/2022
  9744                                  ; 15/10/2022
  9745                                  ; 28/12/2018 - Retro DOS v4.0
  9746                                  ;
  9747                                  ;	link next bds (at ds:di) into the chain. assume that the
  9748                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  9749                                  ;	  dskdrv_table, and end_of_bdss.	
  9750                                  
  9751                                  		; 19/12/2023 - Retro DOS v5.0
  9752                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2CE1h)
  9753                                  xinstall_bds:
  9754 0000284A 56                      		push	si
  9755 0000284B 53                      		push	bx
  9756 0000284C 8B36[1901]              		mov	si, [start_bds]	; get first bds
  9757                                  xinstall_bds_1:
  9758 00002850 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  9759 00002853 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  9760                                  		;mov	si, [si+BDS.link]
  9761 00002855 8B34                    		mov	si, [si]	; chain	through	list
  9762 00002857 EBF7                    		jmp	short xinstall_bds_1
  9763                                  
  9764                                  xinstall_bds_2:
  9765                                  		;mov	[si+BDS.link], di
  9766 00002859 893C                    		mov	[si], di
  9767                                  		;mov	[si+BDS.link+2], ds
  9768 0000285B 8C5C02                  		mov	[si+2], ds
  9769                                  		;mov	word [di+BDS.link], -1
  9770 0000285E C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  9771                                  		;mov	[di+BDS.link+2], ds
  9772 00002862 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  9773                                  		; 20/03/2019 - Retro DOS v4.0
  9774                                  		;lea	bx, [di+BDS.BPB]
  9775 00002865 8D5D06                  		lea	bx, [di+6]
  9776 00002868 8B36[5E1A]              		mov	si, [last_dskdrv_table]
  9777 0000286C 891C                    		mov	[si], bx
  9778 0000286E 8306[5E1A]02            		add	word [last_dskdrv_table], 2
  9779 00002873 FE06[7500]              		inc	byte [drvmax]
  9780                                  		;add	word [end_of_bdss], 100 ; BDS.size = 100
  9781                                  		; 19/12/2023 - Retro DOS v5.0
  9782 00002877 8106[601A]9600          		add	word [end_of_bdss], 150 ; BDS.size = 150
  9783 0000287D 5B                      		pop	bx
  9784 0000287E 5E                      		pop	si
  9785 0000287F C3                      		retn
  9786                                  
  9787                                  ; =============== S U B	R O U T	I N E =======================================
  9788                                  
  9789                                  ; 17/10/2022
  9790                                  ; 15/10/2022
  9791                                  ; 28/12/2018 - Retro DOS v4.0
  9792                                  ; 03/06/2018 - Retro DOS v3.0
  9793                                  
  9794                                  		; 19/12/2023 - Retro DOS v5.0
  9795                                  cmos_clock_read:
  9796 00002880 50                      		push	ax
  9797 00002881 51                      		push	cx
  9798 00002882 52                      		push	dx
  9799 00002883 55                      		push	bp
  9800 00002884 31ED                    		xor	bp, bp
  9801                                  loop_clock:
  9802 00002886 31C9                    		xor	cx, cx
  9803 00002888 31D2                    		xor	dx, dx
  9804 0000288A B402                    		mov	ah, 2
  9805 0000288C CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  9806                                  					; Return: CH = hours in	BCD
  9807                                  					; CL = minutes in BCD
  9808                                  					; DH = seconds in BCD
  9809                                  		; 19/12/2023
  9810                                  		;cmp	cx, 0
  9811 0000288E 21C9                    		and	cx, cx
  9812 00002890 750F                    		jnz	short clock_present
  9813                                  		;cmp	dx, 0
  9814 00002892 09D2                    		or	dx, dx
  9815 00002894 750B                    		jnz	short clock_present
  9816                                  		;cmp	bp, 1		; read again after a slight delay, in case clock
  9817                                  		;je	short no_readdate ; was	at zero	setting.
  9818 00002896 21ED                    		and	bp, bp
  9819 00002898 751A                    		jnz	short no_readdate
  9820 0000289A 45                      		inc	bp		; only perform delay once.
  9821                                  		;mov	cx, 4000h	; 16384
  9822                                  		; 19/12/2023
  9823 0000289B B540                    		mov	ch, 40h ; cx = 4000h ; 16384
  9824                                  delay:					
  9825 0000289D E2FE                    		loop	delay
  9826 0000289F EBE5                    		jmp	short loop_clock
  9827                                  ; ---------------------------------------------------------------------------
  9828                                  
  9829                                  clock_present:
  9830                                  		;mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  9831                                  		; 19/12/2023
  9832                                  		; ds = cs
  9833 000028A1 C606[8C04]01            		mov	byte [havecmosclock], 1 ; set the flag for cmos clock
  9834                                  		
  9835 000028A6 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  9836                                  					; possibly destroyed by	cp dos and
  9837                                  					; post routine did not restore that.
  9838 000028A9 56                      		push	si
  9839 000028AA E8BEEF                  		call	read_real_date	; read real-time clock for date
  9840 000028AD FA                      		cli
  9841                                  		;mov	ds:daycnt, si	; set system date
  9842 000028AE 8936[8904]              		mov	[daycnt], si
  9843 000028B2 FB                      		sti
  9844 000028B3 5E                      		pop	si
  9845                                  no_readdate:
  9846 000028B4 5D                      		pop	bp
  9847 000028B5 5A                      		pop	dx
  9848 000028B6 59                      		pop	cx
  9849 000028B7 58                      		pop	ax
  9850                                  
  9851                                  cmosck9:	; 19/12/2023
  9852 000028B8 C3                      		retn
  9853                                  
  9854                                  ; ---------------------------------------------------------------------------
  9855                                  
  9856                                  ; the following code is written by jack gulley in engineering group.
  9857                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  9858                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  9859                                  ; the cmos clock rate are still slow which slow down disk operations
  9860                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  9861                                  ; to fix this problem at the request of cp dos.
  9862                                  ;
  9863                                  ; the program is modified to be run on msinit. equates are defined
  9864                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  9865                                  ;
  9866                                  ;  the following code cmosck is used to insure that the cmos has not
  9867                                  ;	had its rate controls left in an invalid state on older at's.
  9868                                  ;
  9869                                  ;	it checks for an at model byte "fc" with a submodel type of
  9870                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  9871                                  ;	bits in case post has not done it. this initilization routine
  9872                                  ;	is only needed once when dos loads. it should be run as soon
  9873                                  ;	as possible to prevent slow diskette access.
  9874                                  ;
  9875                                  ;	this code exposes one to dos clearing cmos setup done by a
  9876                                  ;	resident program that hides and re-boots the system.
  9877                                  
  9878                                  cmosck:					; check and reset rtc rate bits
  9879                                  
  9880                                  ;model byte and submodel byte were already determined in msinit.
  9881                                  
  9882                                  	; 16/06/2018 - Retro DOS v3.0
  9883                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  9884                                  
  9885                                  	; 19/12/2023 - Retro DOS v5.0
  9886                                  	
  9887                                  		; 19/12/2023
  9888                                  		; ds = cs
  9889                                  		;push	ax ; not necessary ; 19/12/2023
  9890                                  		;
  9891 000028B9 803E[AF05]FC            		cmp	byte [model_byte], 0FCh
  9892                                  		;cmp	byte [cs:model_byte], 0FCh
  9893 000028BE 75F8                    		jnz	short cmosck9	; Exit if not an AT model
  9894 000028C0 803E[B005]06            		cmp	byte [secondary_model_byte], 6 ; 21/04/2024
  9895                                  		;cmp	byte [cs:secondary_model_byte], 6
  9896                                  					; Is it 06 for the industral AT ?
  9897 000028C5 7407                    		jz	short cmosck4	; Go reset CMOS periodic rate if 06
  9898 000028C7 803E[B005]04            		cmp	byte [secondary_model_byte], 4
  9899                                  		;cmp	byte [cs:secondary_model_byte], 4
  9900                                  					; Is it 00, 01, 02, or 03 ?
  9901 000028CC 73EA                    		jnb	short cmosck9	; EXIT if problem fixed by POST
  9902                                  					; Also,Secondary_model_byte = 0
  9903                                  					;   when AH=0C0h, int 15h failed.
  9904                                  					;	RESET THE CMOS PERIODIC RATE
  9905                                  					;  Model=FC submodel=00,01,02,03 or 06
  9906                                  cmosck4:
  9907 000028CE B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  9908                                  					; NMI disabled on return
  9909 000028D0 B426                    		mov	ah, 26h		; 00100110b
  9910                                  					; Set divider & rate selection
  9911 000028D2 E80B00                  		call	cmos_write
  9912 000028D5 B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  9913                                  					; NMI disabled on return
  9914 000028D7 E82000                  		call	cmos_read
  9915 000028DA 2407                    		and	al, 7		; 00000111b
  9916                                  					; clear SET,PIE,AIE,UIE,SQWE
  9917 000028DC 88C4                    		mov	ah, al
  9918 000028DE B00B                    		mov	al, 0Bh		; cmos_reg_b
  9919                                  					; NMI enabled on return
  9920                                  		; 19/12/2023
  9921                                  		;call	cmos_write
  9922                                  ;cmosck9:
  9923                                  		;pop	ax ; 19/12/2023
  9924                                  		;retn
  9925                                  
  9926                                  		; 19/12/2023
  9927                                  		;jmp	short cmos_write
  9928                                  
  9929                                  ; =============== S U B	R O U T	I N E =======================================
  9930                                  
  9931                                  ;--- cmos_write ----------------------------------------------------------------
  9932                                  ;		write byte to cmos system clock configuration table	       :
  9933                                  ;									       :
  9934                                  ; input: (al)=	cmos table address to be written to			       :
  9935                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  9936                                  ;		bits 6-0 = address of table location to write		       :
  9937                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  9938                                  ;									       :
  9939                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  9940                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  9941                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  9942                                  ;		the cmos address register is pointed to a default value and    :
  9943                                  ;		the interrupt flag restored to the entry state on return.      :
  9944                                  ;		only the cmos location and the nmi state is changed.	       :
  9945                                  ;-------------------------------------------------------------------------------
  9946                                  
  9947                                  cmos_write:				; write (ah) to location (al)
  9948 000028E0 9C                      		pushf			;
  9949 000028E1 50                      		push	ax		; save work register values
  9950 000028E2 FA                      		cli
  9951 000028E3 50                      		push	ax		; save user nmi	state
  9952 000028E4 0C80                    		or	al, 80h		; disable nmi for us
  9953 000028E6 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  9954                                  					; RTC Seconds
  9955 000028E8 90                      		nop
  9956 000028E9 88E0                    		mov	al, ah
  9957 000028EB E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  9958 000028ED 58                      		pop	ax		; get user nmi
  9959 000028EE 2480                    		and	al, 80h
  9960 000028F0 0C0F                    		or	al, 0Fh
  9961 000028F2 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  9962                                  					; RTC Seconds
  9963 000028F4 90                      		nop
  9964 000028F5 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  9965 000028F7 58                      		pop	ax		; restore work registers
  9966                                  
  9967                                  		; 19/12/2023
  9968                                  		;push	cs		; *place code segment in stack and
  9969                                  		;call	cmos_popf	; *handle popf for b- level 80286
  9970                                  		;retn
  9971 000028F8 EB18                    		jmp	short cmos_rw_popf
  9972                                  
  9973                                  ; =============== S U B	R O U T	I N E =======================================
  9974                                  
  9975                                  ;--- CMOS_READ -----------------------------------------------------------------
  9976                                  ;		read byte from cmos system clock configuration table	       :
  9977                                  ;									       :
  9978                                  ; input: (al)=	cmos table address to be read				       :
  9979                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  9980                                  ;		bits 6-0 = address of table location to read		       :
  9981                                  ;									       :
  9982                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  9983                                  ;		on then nmi left disabled. during the cmos read both nmi and  :
  9984                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  9985                                  ;		the cmos address register is pointed to a default value and    :
  9986                                  ;		the interrupt flag restored to the entry state on return.      :
  9987                                  ;		only the (al) register and the nmi state is changed.	       :
  9988                                  ;-------------------------------------------------------------------------------
  9989                                  
  9990                                  cmos_read:				; read location (al) into (al)
  9991 000028FA 9C                      		pushf
  9992 000028FB FA                      		cli
  9993 000028FC 53                      		push	bx
  9994                                  		;push	ax ; *		; AL = cmos table address to be read
  9995                                  		; 19/12/2023
  9996 000028FD 89C3                    		mov	bx, ax ; * ; input
  9997 000028FF 0C80                    		or	al, 80h
  9998 00002901 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  9999                                  					; RTC Seconds
 10000 00002903 90                      		nop			; (undocumented delay needed)
 10001 00002904 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 10002                                  		
 10003                                  		;mov	bx, ax ; output
 10004                                  		;pop	ax ; * ; input
 10005                                  
 10006                                  		; 19/12/2023
 10007                                  		; al = output, bl = input
 10008 00002906 93                      		xchg	ax, bx ; *
 10009                                  		; bl = output, al = input
 10010                                  	
 10011 00002907 2480                    		and	al, 80h
 10012 00002909 0C0F                    		or	al, 0Fh
 10013 0000290B E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 10014                                  					; RTC Seconds
 10015 0000290D 90                      		nop
 10016 0000290E E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 10017                                  		;mov	ax, bx ; * ; output
 10018                                  		; 19/12/2023
 10019 00002910 93                      		xchg	ax, bx
 10020 00002911 5B                      		pop	bx
 10021                                  
 10022                                  		; 19/12/2023
 10023                                  cmos_rw_popf:
 10024 00002912 0E                      		push	cs		; *place code segment in stack and
 10025 00002913 E80100                  		call	cmos_popf	; *handle popf for b- level 80286
 10026 00002916 C3                      		retn			; return with flags restored
 10027                                  
 10028                                  ; ---------------------------------------------------------------------------
 10029                                  
 10030                                  cmos_popf:				
 10031 00002917 CF                      		iret			; popf for level b- parts
 10032                                  					; return far and restore flags
 10033                                  
 10034                                  ; 21/12/2022
 10035                                  ; ---------------------------------------------------------------------------
 10036                                  ; ---------------------------------------------------------------------------
 10037                                  %if 0
 10038                                  
 10039                                  ; ---------------------------------------------------------------------------
 10040                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
 10041                                  ; ---------------------------------------------------------------------------
 10042                                  ; The following routines provide support for reading in the file MSDOS.SYS.
 10043                                  ; ---------------------------------------------------------------------------
 10044                                  
 10045                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10046                                  ;
 10047                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
 10048                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
 10049                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
 10050                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
 10051                                  
 10052                                  ; =============== S U B	R O U T	I N E =======================================
 10053                                  
 10054                                  ; GetClus, read in a cluster at a specified address
 10055                                  ;
 10056                                  ;  bx = cluster to read
 10057                                  ;  cx = sectors per cluster
 10058                                  ;  es:di = load location
 10059                                  
 10060                                  ; 17/10/2022
 10061                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
 10062                                  ; 09/12/2022
 10063                                  DISKRD equ diskrd
 10064                                  
 10065                                  		; 29/12/2023
 10066                                  		; 20/12/2023 - Retro DOS v5.0
 10067                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2DC4h)
 10068                                  
 10069                                  		; si:bx = (32 bit) cluster to read
 10070                                  		; cx = sectors per cluster
 10071                                  		; es:di = load location
 10072                                  
 10073                                  		; 17/10/2022
 10074                                  getclus:
 10075                                  		; 12/12/2023
 10076                                  		; ds = cs
 10077                                  		
 10078                                  		push	cx ; 1*
 10079                                  		push	di ; 2*
 10080                                  		;mov	[cs:doscnt], cx
 10081                                  		mov	[doscnt], cx ; 12/12/2023
 10082                                  
 10083                                  		; 20/12/2023
 10084                                  		;;mov	[cs:ClusterH], si ; high word of cluster number
 10085                                  		;mov	[ClusterH], si ; high word of cluster number
 10086                                  		mov	bp, si
 10087                                  
 10088                                  		mov	ax, bx
 10089                                  
 10090                                  		;dec	ax
 10091                                  		;dec	ax
 10092                                  		; 20/12/2023
 10093                                  		sub	ax, 2
 10094                                  
 10095                                  		;;sbb	[cs:ClusterH], 0
 10096                                  		;sbb	[ClusterH], 0
 10097                                  		sbb	bp, 0		
 10098                                  
 10099                                  		; 20/12/2023
 10100                                  		;;xchg	ax, [cs:ClusterH]
 10101                                  		;xchg	ax, [ClusterH]
 10102                                  		xchg	ax, bp
 10103                                  
 10104                                  		mul	cx
 10105                                  
 10106                                  		;;xchg	ax, [cs:ClusterH]
 10107                                  		;xchg	ax, [ClusterH]
 10108                                  		xchg	ax, bp ; (+)
 10109                                  		;
 10110                                  		mul	cx		;; convert to logical sector
 10111                                  					;; dx:ax = matching logical sector number
 10112                                  					;;	  starting from the data sector
 10113                                  		;;add	ax, [cs:bios_l]
 10114                                  		;;adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
 10115                                  		; 12/12/2023
 10116                                  		;add	ax, [bios_l]
 10117                                  		;adc	dx, [bios_h]	; dx:ax	= first	logical	sector to read
 10118                                  
 10119                                  		; 20/12/2023
 10120                                  		;;add	dx, [cs:ClusterH]
 10121                                  		;add	ax, [cs:First_Data_Sector]
 10122                                  		;adc	dx, [cs:First_Data_Sector+2]
 10123                                  		add	dx, bp ; (+)
 10124                                  		;add	dx, [ClusterH]	; convert to logical sector
 10125                                  					; dx:ax	= matching logical sector number
 10126                                  					;	  starting from the data sector
 10127                                  		add	ax, [First_Data_Sector]
 10128                                  		adc	dx, [First_Data_Sector+2]
 10129                                  					; dx:ax = first logical sector to read
 10130                                  unpack:
 10131                                  		; 20/12/2023
 10132                                  		push	ds ; 3* ; ds = cs ; 12/12/2023
 10133                                  		push	dx ; 4* ; * ; 12/12/2023
 10134                                  		push	ax ; 5*
 10135                                  		; 29/12/2023
 10136                                  		push	si ; 6* 
 10137                                  		push	bx ; 7*
 10138                                  
 10139                                  		;;mov	si, [cs:fatloc]
 10140                                  		;mov	si, [fatloc] ; 12/12/2023
 10141                                  		;mov	ds, si
 10142                                  		; 20/12/2023
 10143                                  		;mov	ax, [fatloc]
 10144                                  		;mov	ds, ax
 10145                                  		push	bx ; 8*
 10146                                  		push	word [fatloc] ; 9*
 10147                                  
 10148                                  		;test	byte [cs:fbigfat], 20h
 10149                                  		test	byte [fbigfat], 20h	; fbigbig FAT32 ?
 10150                                  		pop	ds ; 9* ; ds = [fatloc]
 10151                                  		jz      short not_32bit_cluster ; no
 10152                                  unpack32:
 10153                                  		;push	dx
 10154                                  		mov	dx, si
 10155                                  		;mov	si, bx
 10156                                  		pop	si ; 8* ; si = bx
 10157                                  		add	si, si
 10158                                  		adc	dx, dx
 10159                                  		add	si, si
 10160                                  		adc	dx, dx 
 10161                                  			; dx:si = 4*(si:bx) ; clust num offset from FAT entry 0
 10162                                  		call	get_fat_sector
 10163                                  		mov	si, [bx+2]	; high word of the FAT32 cluster number
 10164                                  		mov	bx, [bx]	; low word of the FAT32 cluster number
 10165                                  		;pop	dx
 10166                                  		jmp	short getcl1
 10167                                  
 10168                                  not_32bit_cluster:
 10169                                  		;mov	si, bx		; next cluster
 10170                                  		pop	si ; 8* ; si = bx
 10171                                  		test	byte [cs:fbigfat], 40h	; fbig
 10172                                  					; 16 bit fat?
 10173                                  		jnz	short unpack16	; yes
 10174                                  unpack12:
 10175                                  		shr	si, 1		; 12 bit fat. si = si/2
 10176                                  					; si = clus + clus/2
 10177                                  		add	si, bx		;
 10178                                  					; (si =	byte offset of the cluster in the FAT)
 10179                                  		;push	dx ; 12/12/2023
 10180                                  		xor	dx, dx
 10181                                  		; 12/12/2023
 10182                                  		; ds = FAT buffer segment
 10183                                  		call	get_fat_sector
 10184                                  		;pop	dx ; 12/12/2023
 10185                                  
 10186                                  		mov	ax, [bx]	; save it into ax
 10187                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
 10188                                  		; 25/06/2023
 10189                                  		;mov	al, [bx]	; splitted fat
 10190                                  		
 10191                                  		; 12/12/2023
 10192                                  		;mov	[cs:temp_cluster], al
 10193                                  		push	ax ; **	; al = low 8 bits of 12 bits cluster number
 10194                                  
 10195                                   		inc	si		; (next	byte)
 10196                                  
 10197                                  		;push	dx ; 12/12/2023
 10198                                  		xor	dx, dx
 10199                                  		call	get_fat_sector
 10200                                  		;pop	dx ; 12/12/2023
 10201                                  
 10202                                  		;mov	al, ds:0
 10203                                  		; 12/12/2023
 10204                                  		; ds = FAT buffer segment
 10205                                  		;mov	al, [0] ; 19/10/2022
 10206                                  		;mov	[cs:temp_cluster+1], al
 10207                                  		;mov	ax, [cs:temp_cluster]
 10208                                  		; 12/12/2023
 10209                                  		;mov	al, [cs:temp_cluster]
 10210                                  		pop	ax  ; ** ; al = low 8 bits of 12 bits cluster number
 10211                                  		mov	ah, [0] ; high 4 bits (bits 7 to 11) of 12 bits cluster num
 10212                                  even_odd:
 10213                                  		; 29/12/2023
 10214                                  		pop	bx ; 7*		; restore old fat entry	value
 10215                                  		push	bx		; save it right	away.
 10216                                  		shr	bx, 1		; was it even or odd?
 10217                                  		jnc	short havclus	; it was even.
 10218                                  		shr	ax, 1		; odd. massage fat value and keep
 10219                                  					; the highest 12 bits.
 10220                                  		shr	ax, 1
 10221                                  		shr	ax, 1
 10222                                  		shr	ax, 1
 10223                                  havclus:
 10224                                  		mov	bx, ax		; now bx = new fat entry.
 10225                                  		and	bx, 0FFFh	; keep low 12 bits.
 10226                                  		jmp	short unpackx
 10227                                  ; ---------------------------------------------------------------------------
 10228                                  
 10229                                  unpack16:
 10230                                  		;push	dx	; 12/12/2023
 10231                                  		xor	dx, dx ; 0
 10232                                  		shl	si, 1		; extend to 32 bit offset
 10233                                  		;adc	dx, 0
 10234                                  		; 12/12/2023
 10235                                  		rcl	dx, 1
 10236                                  
 10237                                  		; 12/12/2023
 10238                                  		; ds = FAT buffer segment
 10239                                  		call	get_fat_sector
 10240                                  		;pop	dx	; 12/12/2023
 10241                                  		mov	bx, [bx]	;
 10242                                  					; bx = new fat entry.
 10243                                  unpackx:
 10244                                  		; 20/12/2023
 10245                                  		xor	si, si		; high word of cluster number = 0
 10246                                  					; (FAT12 or FAT16)
 10247                                  getcl1:
 10248                                  		; 29/12/2023
 10249                                  		pop	ax	; 7* - cluster number lw
 10250                                  		;pop	word [cs:ClusterH]
 10251                                  		pop	dx	; 6* - cluster number hw
 10252                                  
 10253                                  		; 20/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 10254                                  		; (this is a fast kernel loading method by the MSDOS programmer)
 10255                                  		; ((consequtive clusters --> consequtive sectors))
 10256                                  
 10257                                  		sub	ax, bx	; previous - current (or current - new)	
 10258                                  		;sbb	[cs:ClusterH], si
 10259                                  		sbb	dx, si
 10260                                  		;;cmp	[cs:ClusterH], -1 ; one apart? (current = previous+1)
 10261                                  		;cmp	dx, -1
 10262                                  		; 29/12/2023
 10263                                  		inc	dx ; -1 -> 0
 10264                                  		jnz	short not_consequental
 10265                                  		;cmp	ax, -1		; 0FFFFh ; is [ClusterH]:ax = -1 ?
 10266                                  		inc	ax ; -1 -> 0
 10267                                  not_consequental:
 10268                                  		pop	ax ; 5* 	; restore logical sector (low)
 10269                                  		pop	dx ; 4* ; * ; 12/12/2023
 10270                                  		pop	ds ; 3*
 10271                                  
 10272                                  		;; 12/12/2023
 10273                                  		;; (this is a fast kernel loading method by the MSDOS programmer)
 10274                                  		;; ((consequtive clusters --> consequtive sectors))
 10275                                  		;; ds = cs
 10276                                  		;sub	si, bx
 10277                                  		;cmp	si, -1		; one apart? (consequtive?)
 10278                                  		;			; (current = previous+1)
 10279                                  
 10280                                  		jnz	short getcl2	; no, read [doscnt] sectors 
 10281                                  
 10282                                  		;add	[cs:doscnt], cx ; (cx = sectors per cluster)
 10283                                  		add	[doscnt], cx ; 12/12/2023 ; add to read count
 10284                                  		jmp	unpack
 10285                                  ; ---------------------------------------------------------------------------
 10286                                  
 10287                                  getcl2:
 10288                                  		push	si ; 20/12/2023
 10289                                  		push	bx	
 10290                                  		; bx = low word of the new cluster number
 10291                                  		; 20/12/2023 - Retro DOS v5.0 (32 bit cluster numbers)
 10292                                  		; si = high word of the new cluster number
 10293                                  		push	dx		; sector to read (high word)
 10294                                  		push	ax		; sector to read (low word)
 10295                                  		
 10296                                  		; 12/12/2023
 10297                                  		; ds = cs
 10298                                  		;mov	ax, [cs:drvfat]	; get drive and	fat spec
 10299                                  		;mov	cx, [cs:doscnt]
 10300                                  		mov	ax, [drvfat]	; get drive and	fat spec
 10301                                  
 10302                                  		;;;
 10303                                  		; 20/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 10304                                  		;
 10305                                  		; dma and segment (64K boundary) overrun precaution
 10306                                  		; (sector count will be decreased if it is required)
 10307                                   		mov	cx, di
 10308                                  		not	cx		; cx = 65535 - cx
 10309                                  		shr	cx, 1		; cx = cx/2
 10310                                  		xor	cl, cl
 10311                                  		xchg	cl, ch		; cx = cx/256
 10312                                  		
 10313                                  		;cmp	cx, [cs:doscnt]	
 10314                                  				; if sector read count > cx, decrease it to cx
 10315                                  		cmp	cx, [doscnt]
 10316                                  		jbe	short getcl3
 10317                                  		;;;
 10318                                  		;mov	cx, [cs:doscnt]
 10319                                  		mov	cx, [doscnt]
 10320                                  getcl3:
 10321                                  		pop	dx		; sector to read for diskrd (low)
 10322                                  		;pop	word [cs:start_sec_h]
 10323                                  		; 12/12/2023
 10324                                  		pop	word [start_sec_h]
 10325                                  					; sector to read for diskrd (high)
 10326                                  		; 12/12/2023
 10327                                  		; ds = cs
 10328                                  		;push	ds
 10329                                  		;push	cs
 10330                                  		;pop	ds
 10331                                  		
 10332                                  		push	cs		; simulate far call
 10333                                  
 10334                                  		; 20/12/2023
 10335                                  		; 17/10/2022
 10336                                  		mov	bp, DISKRD	; offset diskrd
 10337                                  		;mov	bp, 0A2Bh	; 20/12/2023
 10338                                  		;	(PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A2Bh ; 364h:0A2Bh)
 10339                                  		;mov	bp, 8E5h	; 17/10/2022
 10340                                  					; 2C7h:8E5h = 70h:2E55h
 10341                                  
 10342                                  		call	call_bios_code	; read the clusters
 10343                                  		
 10344                                  		;pop	ds
 10345                                  		; 12/12/2023
 10346                                  		; ds = cs
 10347                                  		pop	bx		; lw of the new cluster number
 10348                                  		pop	si ; 20/12/2023 ; hw of the new cluster number
 10349                                  
 10350                                  		pop	di ; 2* - (kernel) load location (es:di)
 10351                                  
 10352                                  		;mov	ax, [cs:doscnt]	; get number of	sectors	read
 10353                                  		; 12/12/2023
 10354                                  		mov	ax, [doscnt]
 10355                                  		xchg	ah, al		; multiply by 256
 10356                                  		shl	ax, 1		; times	2 equal	512
 10357                                  		add	di, ax		; update load location
 10358                                  
 10359                                  		pop	cx ; 1*		; restore sectors/cluster
 10360                                  
 10361                                  		retn
 10362                                  
 10363                                  ; =============== S U B	R O U T	I N E =======================================
 10364                                  
 10365                                  ;function: find and read the corresponding fat sector into ds:0
 10366                                  ;
 10367                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
 10368                                  ;     ds - fatloc segment
 10369                                  ;     cs:drvfat - logical drive number, fat id
 10370                                  ;     cs:md_sectorsize
 10371                                  ;     cs:last_fat_secnum - last fat sector number read in.
 10372                                  ;
 10373                                  ;out). corresponding fat sector read in.
 10374                                  ;      bx = offset value from fatlog segment.
 10375                                  ;      other registers are saved.
 10376                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
 10377                                  ;      starts at the last byte of the fat sector. in this case, the caller
 10378                                  ;      should save this byte, and read the next fat sector to get the rest
 10379                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
 10380                                  
 10381                                  		; 17/10/2022
 10382                                  get_fat_sector:	
 10383                                  		; 12/12/2023
 10384                                  		; ds = fat buffer segment
 10385                                  
 10386                                  		; 12/12/2023
 10387                                  		;push	ax ; (not necessary)
 10388                                  		push	cx ; read count (sectors per cluster)
 10389                                  		push	di ; IBMDOS.COM/MSDOS.SYS load offset
 10390                                  		push	si ; FAT offset value (from fat entry 0)
 10391                                  		push	es ; IBMDOS.COM/MSDOS.SYS load segment
 10392                                  		push	ds ; FAT buffer segment
 10393                                  
 10394                                  		; 12/12/2023
 10395                                  		push	cs
 10396                                  		pop	ds
 10397                                  	
 10398                                  		mov	ax, si
 10399                                  		;;mov	cx, [cs:md_sectorsize] ; 512
 10400                                  		; 12/12/2023
 10401                                  		;mov	cx, [md_sectorsize] ; 512
 10402                                  		;div	cx		; ax = sector number, dx = offset
 10403                                  		; 12/12/2023
 10404                                  		;nop
 10405                                  
 10406                                  		; 12/12/2023
 10407                                  		div	word [md_sectorsize] ; 512
 10408                                  
 10409                                  		; ax = FAT sector (sequence/index) number
 10410                                  		; dx = cluster number offset
 10411                                  
 10412                                  		; Get rid of the assumption that
 10413                                  		; there	is only	one reserved sector
 10414                                  
 10415                                  		; 12/12/2023 ; *
 10416                                  		;push	es ; *
 10417                                  		;push	ds ; *
 10418                                  		;push	di ; *
 10419                                  		push	ax
 10420                                  		;push	cs ; *
 10421                                  		;pop	ds ; *
 10422                                  
 10423                                  		;mov	ax, [cs:drvfat]	; get drive # and FAT id
 10424                                  		; 12/12/2023
 10425                                  		mov	ax, [drvfat]	; get drive # and FAT id 
 10426                                  		mov	bp, SETDRIVE
 10427                                  		;mov	bp, 5AEh  ; PCDOS 7.1 IBMBIO.COM
 10428                                  		;;mov	bp, 4D7h	; setdrive
 10429                                  					; at 2C7h:4D7h = 70h:2A47h
 10430                                  		push	cs		; simulate far call
 10431                                  		call	call_bios_code	; get bds for drive
 10432                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
 10433                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 10434                                  					; add #reserved_sectors
 10435                                  		; 12/12/2023
 10436                                  		;pop	di ; *
 10437                                  		;pop	ds ; *
 10438                                  		;pop	es ; *
 10439                                  
 10440                                  		; 12/12/2023
 10441                                  		; ds = cs
 10442                                  		cmp	ax, [last_fat_sec_num]
 10443                                  		;cmp	ax, [cs:last_fat_sec_num]
 10444                                  		jz	short gfs_split_chk ; don't need to read it again.
 10445                                  		mov	[last_fat_sec_num], ax
 10446                                  		;mov	[cs:last_fat_sec_num], ax
 10447                                  					; sector number
 10448                                  					; (in the partition, without hidden sectors)
 10449                                  		; 13/12/2023
 10450                                  		pop	es ; FAT buffer segment (DS on top of the stack)
 10451                                  		push	es ; (put it on top of the stack again)
 10452                                  
 10453                                  		push	dx ; cluster number offset
 10454                                  
 10455                                  		; 12/12/2023
 10456                                  		xor	cx, cx
 10457                                  		mov	[start_sec_h], cx ;0 
 10458                                  		;mov	word [cs:start_sec_h], 0 
 10459                                  					; prepare to read the fat sector
 10460                                  					; start_sec_h is always	0 for fat sector.
 10461                                  		mov	dx, ax
 10462                                  		; 12/12/2023
 10463                                  		inc	cx ; cx = 1
 10464                                  		;mov	cx, 1		; 1 sector read
 10465                                  		;mov	ax, [cs:drvfat]
 10466                                  		mov	ax, [drvfat]
 10467                                  		;push	ds
 10468                                  		;pop	es
 10469                                  
 10470                                  		xor	di, di	; 0	; es:di	-> fatloc segment:0
 10471                                  		
 10472                                  		; 12/12/2023
 10473                                  		;push	ds
 10474                                  		;push	cs
 10475                                  		;pop	ds
 10476                                  		
 10477                                  		push	cs		; simulate far call
 10478                                  		mov	bp, DISKRD	; 8E5h
 10479                                  		;mov	bp, 8E5h	; offset diskrd
 10480                                  					; 2C7h:8E5h = 70h:2E55h
 10481                                  		call	call_bios_code
 10482                                  
 10483                                  		; 12/12/2023
 10484                                  		;pop	ds
 10485                                  		; ds = cs = biosdata segment
 10486                                  
 10487                                  		pop	dx ; cluster number offset 
 10488                                  
 10489                                  gfs_split_chk:
 10490                                  		; 13/12/2023
 10491                                  		;mov	cx, [cs:md_sectorsize] ; 512
 10492                                  		mov	cx, [md_sectorsize]
 10493                                  ;gfs_split_chk:					
 10494                                  		dec	cx		; 511
 10495                                  		cmp	dx, cx		; if offset points to the
 10496                                  					; last byte of this sector,
 10497                                  					; then splitted	entry.
 10498                                  		mov	bx, dx		; set bx to dx
 10499                                  		
 10500                                  		; 12/12/2023
 10501                                  		; bx = dx = cluster number offset in the FAT buffer
 10502                                  		pop	ds ; FAT buffer segment
 10503                                  		pop	es ; IBMDOS.COM/MSDOS.SYS load segment
 10504                                  		pop	si ; FAT offset value (from fat entry 0)
 10505                                  		pop	di ; IBMDOS.COM/MSDOS.SYS load offset
 10506                                  		pop	cx ; read count (sectors per cluster)
 10507                                  		;pop	ax
 10508                                  
 10509                                  		retn
 10510                                  ; 15/10/2022
 10511                                  ;Bios_Data_Init	ends
 10512                                  
 10513                                  %endif
 10514                                  ; ---------------------------------------------------------------------------
 10515                                  ; ---------------------------------------------------------------------------
 10516                                  
 10517                                  		; 09/12/2022
 10518                                  		;db 0
 10519                                  
 10520                                  numbertodiv	equ ($-BData_start)
 10521                                  numbertomod	equ (numbertodiv % 16)
 10522                                  
 10523                                  %if (numbertomod>0) & (numbertomod<16) ; 17/09/2023
 10524 00002918 00<rep 8h>              		times (16-numbertomod) db 0
 10525                                  %endif
 10526                                  
 10527                                  ;align 16
 10528                                  
 10529                                  ; 09/12/2022
 10530                                  IOSYSCODESEGOFF equ $ - BData_start
 10531                                  ; 29/09/2023
 10532                                  ;IOSYSCODESEGOFF equ $-$$
 10533                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
 10534                                  
 10535                                  ; 28/09/2023
 10536                                  S1SIZE equ $-$$
 10537                                  
 10538                                  ;--- End of DOSBIOS data segment --------------------------------------------
 10539                                  ; ---------------------------------------------------------------------------
 10540                                  		;db 4 dup(0)
 10541                                  ; 09/12/2022		
 10542                                  ;		times 4 db 0	; 19/10/2022
 10543                                  ; ---------------------------------------------------------------------------
 10544                                  
 10545                                  ;============================================================================
 10546                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
 10547                                  ;============================================================================
 10548                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10549                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 10550                                  
 10551                                  section .BIOSCODE vstart=0 
 10552                                  
 10553                                  ; 30/12/2022
 10554                                  ; (BIOSCODE SEGMENT is 2CCh for MSDOS 6.21 IO.SYS)  -- ((25C0h+700h)>>4) --
 10555                                  
 10556                                  BCode_start:	 ; 09/12/2022
 10557                                   
 10558                                  ; 02/10/2022
 10559                                  
 10560                                  ;--- DOSBIOS code segment ---------------------------------------------------
 10561                                  ;----------------------------------------------------------------------------
 10562                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
 10563                                  ;----------------------------------------------------------------------------
 10564                                  
 10565                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
 10566 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
 10567 00000030 7000                    BiosDataWord:	dw 70h
 10568                                  
 10569                                  ; 15/10/2022
 10570                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
 10571                                  ; 09/12/2022
 10572                                  BIOSDATAWORD	equ BiosDataWord
 10573                                  
 10574                                  ; ---------------------------------------------------------------------------
 10575                                  
 10576                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10577                                  ; 20/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 10578                                  
 10579                                  ;************************************************************************
 10580                                  ;*									*
 10581                                  ;*	seg_reinit is called with ax = our new code segment value,	*
 10582                                  ;*	  trashes di, cx, es						*
 10583                                  ;*									*
 10584                                  ;*	cas -- should be made disposable!				*
 10585                                  ;*									*
 10586                                  ;************************************************************************
 10587                                  
 10588                                  	; 20/09/2023	
 10589                                  	; 10/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 10590                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0032h 
 10591                                  
 10592                                  _seg_reinit:
 10593 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 10594                                  					; at 2C7h:30h or 70h:25A0h
 10595                                  		;mov	di, (offset cdev+2)
 10596 00000037 BF[0406]                		mov	di, cdev+2	; 19/10/2022
 10597                                  		;mov	cx, 4		; (end_BC_entries - cdev)/4
 10598                                  		; 10/08/2023
 10599 0000003A B90300                  		mov	cx, 3 ; (PCDOS 7.1)
 10600                                  _seg_reinit_1:
 10601 0000003D AB                      		stosw			; modify Bios_Code entry points
 10602 0000003E 47                      		inc	di
 10603 0000003F 47                      		inc	di
 10604 00000040 E2FB                    		loop	_seg_reinit_1
 10605                                  		; 10/08/2023 (PCDOS 7.1)
 10606                                  		; (direct jump to i2f_handler from BIOSDATA:bios_i2f)
 10607                                  		; (instead of 'bcode_i2f: dw i2f_handler, IOSYSCODESEG')
 10608 00000042 26A3[0800]              		mov     [es:bios_i2f_seg], ax ; actual BIOSCODE segment
 10609                                  
 10610 00000046 CB                      		retf
 10611                                  
 10612                                  ; ---------------------------------------------------------------------------
 10613                                  
 10614                                  ; 15/10/2022
 10615                                  
 10616                                  ;************************************************************************
 10617                                  ;*									*
 10618                                  ;*	chardev_entry - main device driver dispatch routine		*
 10619                                  ;*	   called with a dummy parameter block on the stack		*
 10620                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
 10621                                  ;*									*
 10622                                  ;*	will eventually take care of doing the transitions in		*
 10623                                  ;*	   out of Bios_Code						*
 10624                                  ;*									*
 10625                                  ;************************************************************************
 10626                                  
 10627                                  		; 20/09/2023
 10628                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
 10629 00000047 56                      		push	si
 10630 00000048 50                      		push	ax
 10631 00000049 51                      		push	cx
 10632 0000004A 52                      		push	dx
 10633 0000004B 57                      		push	di
 10634 0000004C 55                      		push	bp
 10635 0000004D 1E                      		push	ds
 10636 0000004E 06                      		push	es
 10637 0000004F 53                      		push	bx
 10638 00000050 89E5                    		mov	bp, sp
 10639 00000052 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
 10640                                  		;;mov	ds, word [cs:0030h]
 10641                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 10642 00000055 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 10643                                  		; 20/09/2023 (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:005Ah)
 10644 0000005A C434                    		les	si, [si]
 10645                                  		;mov	ax, [si+2]	; get the device number	if present
 10646 0000005C 8CC0                    		mov	ax, es
 10647 0000005E A2[2100]                		mov	[auxnum], al
 10648 00000061 8826[8004]              		mov	[printdev], ah
 10649                                  		;mov	si, [si]	; point	to the device dispatch table
 10650 00000065 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
 10651 00000069 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
 10652 0000006D 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
 10653 00000071 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
 10654 00000075 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
 10655                                  		; 17/10/2022
 10656 00000079 81FE[6F05]              		cmp	si, DSKTBL
 10657                                  		;;cmp	si, 579h	; (PCDOS 7.1 IBMBIO.COM)
 10658                                  		;cmp	si, 4A2h	; dsktbl
 10659                                  					; at 2C7h:4A2h = 70h:2A12h
 10660 0000007D 7517                    		jnz	short no_sector32_mapping
 10661                                  
 10662                                  ; Special case for 32-bit start sector number:
 10663                                  ;   if (si==dsktbl) /* if this is a disk device call */
 10664                                  ;      set high 16 bits of secnum to 0
 10665                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
 10666                                  ;
 10667                                  ; pass high word of sector number in start_sec_h, low word in dx
 10668                                  ;
 10669                                  ; note: start_l and start_h are the offsets within the io_request packet
 10670                                  ;	  which contain the low and hi words of the 32 bit start sector if
 10671                                  ;	  it has been used.
 10672                                  ;
 10673                                  ; note: remember not to destroy the registers which have been set up before
 10674                                  
 10675                                  		; 20/09/2023
 10676                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
 10677 0000007F C706[9C04]0000          		mov	word [start_sec_h], 0
 10678 00000085 83FAFF                  		cmp	dx, 0FFFFh
 10679 00000088 750C                    		jnz	short no_sector32_mapping
 10680 0000008A 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
 10681                                  					; 32 bits dsk req
 10682                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
 10683 0000008E 8916[9C04]              		mov	[start_sec_h], dx
 10684 00000092 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
 10685                                  					; dx = packet.start_l
 10686                                  no_sector32_mapping:
 10687 00000096 97                      		xchg	ax, di
 10688 00000097 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
 10689 0000009B 2E3A04                  		cmp	al, [cs:si]
 10690 0000009E 732B                    		jnb	short command_error
 10691 000000A0 98                      		cbw			; note that al <= 15 means ok
 10692 000000A1 D1E0                    		shl	ax, 1
 10693 000000A3 01C6                    		add	si, ax
 10694 000000A5 97                      		xchg	ax, di
 10695 000000A6 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
 10696 000000AA FC                      		cld
 10697                                  		; 17/10/2022
 10698 000000AB 2EFF5401                		call	near [cs:si+1]
 10699                                  		;call	word ptr cs:si+1
 10700 000000AF 7202                    		jb	short already_got_ah_status
 10701 000000B1 B401                    		mov	ah, 1
 10702                                  already_got_ah_status:
 10703                                  		;;mov	ds, [cs:0030h]	; 15/10/2022
 10704                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 10705                                  					; cas note: shouldn't be needed!
 10706 000000B3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 10707                                  		;lds	bx, ds:ptrsav
 10708 000000B8 C51E[1200]              		lds	bx, [ptrsav]
 10709 000000BC 894703                  		mov	[bx+3],	ax	; [bx+status]
 10710                                  					; mark operation complete
 10711 000000BF 5B                      		pop	bx
 10712 000000C0 07                      		pop	es
 10713 000000C1 1F                      		pop	ds
 10714 000000C2 5D                      		pop	bp
 10715 000000C3 5F                      		pop	di
 10716 000000C4 5A                      		pop	dx
 10717 000000C5 59                      		pop	cx
 10718 000000C6 58                      		pop	ax
 10719 000000C7 5E                      		pop	si
 10720                                  		;add	sp, 2		; get rid of fake return address
 10721                                  		; 20/09/2023 (PCDOS 7.1	- IBMBIO.COM - BIOSCODE:00C8h)
 10722 000000C8 44                      		inc	sp
 10723 000000C9 44                      		inc	sp	
 10724                                  
 10725                                  		; fall through into bc_retf
 10726                                  ; ---------------------------------------------------------------------------	
 10727                                  bc_retf:
 10728 000000CA CB                      		retf
 10729                                  ; ---------------------------------------------------------------------------
 10730                                  
 10731                                  command_error:				
 10732 000000CB E80700                  		call	bc_cmderr
 10733 000000CE EBE3                    		jmp	short already_got_ah_status
 10734                                  ; 15/10/2022
 10735                                  ; 01/05/2019
 10736                                  
 10737                                  ;----------------------------------------------------------------------------
 10738                                  ; The following piece of hack is for supporting CP/M compatibility
 10739                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
 10740                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
 10741                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
 10742                                  ; high.
 10743                                  ;----------------------------------------------------------------------------
 10744                                  
 10745                                  		;db 7 dup(0)
 10746                                  
 10747                                  		; 20/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 10748                                  		; (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:0D0h)
 10749                                  		; 15/10/2022
 10750                                  		;dw 0		; pad to bring offset to 0D0h
 10751                                  
 10752 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
 10753                                  				;  which is the CP/M call 5 entry point
 10754                                  		
 10755                                  
 10756                                  ; ---------------------------------------------------------------------------
 10757                                  
 10758                                  ;	exit - all routines return through this path
 10759                                  
 10760                                  bc_cmderr:				
 10761 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
 10762                                  					; unknown command error
 10763                                  
 10764                                  ; =============== S U B	R O U T	I N E =======================================
 10765                                  
 10766                                  ;	now zero the count field by subtracting its current value,
 10767                                  ;	  which is still in cx, from itself.
 10768                                  
 10769                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
 10770                                  ;	  in order to return the number actually complete
 10771                                  
 10772                                  bc_err_cnt:	
 10773                                  		;les	bx, ds:ptrsav
 10774                                  		; 19/10/2022
 10775 000000D7 C41E[1200]              		les	bx, [ptrsav]
 10776 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
 10777                                  					; # of successful i/o's
 10778 000000DF B481                    		mov	ah, 81h		; mark error return
 10779 000000E1 F9                      		stc			; indicate abnormal end
 10780 000000E2 C3                      		retn
 10781                                  
 10782                                  ; 15/10/2022
 10783                                  
 10784                                  ;Bios_Code ends
 10785                                  
 10786                                  ;----------------------------------------------------------------------------
 10787                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
 10788                                  ;----------------------------------------------------------------------------
 10789                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10790                                  ; 10/01/2019 - Retro DOS v4.0
 10791                                  
 10792                                  ; 30/04/2019
 10793                                  
 10794                                  ;title	mschar - character and clock devices
 10795                                  
 10796                                  ;MODE_CTRLBRK	equ	0FFh
 10797                                  
 10798                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
 10799                                  
 10800                                  ;************************************************************************
 10801                                  ;*									*
 10802                                  ;*	device driver dispatch tables					*
 10803                                  ;*									*
 10804                                  ;*	each table starts with a byte which lists the number of		*
 10805                                  ;*	legal functions, followed by that number of words. Each		*
 10806                                  ;*	word represents an offset of a routine in Bios_Code which	*
 10807                                  ;*	handles the function. The functions are terminated with		*
 10808                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
 10809                                  ;*	to the caller. If carry is set, the ah/al registers are		*
 10810                                  ;*	returned as abnormal completion status. Notice that ds		*
 10811                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
 10812                                  ;*									*
 10813                                  ;************************************************************************
 10814                                  
 10815                                  		; 20/09/2023
 10816                                  		; (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:00E3h)
 10817                                  		; 13/12/2022
 10818 000000E3 00                      		db 0
 10819                                  
 10820                                  		; 13/12/2022
 10821 000000E4 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
 10822                                  					; 2C7h:0E4h = 70h:2654h
 10823 000000E5 [FA01]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
 10824                                  					; 00 init
 10825 000000E7 [FA01]                  		dw bc_exvec  ; 1FBh	; 01
 10826 000000E9 [FA01]                  		dw bc_exvec  ; 1FBh	; 02
 10827 000000EB [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
 10828                                  					; 03
 10829 000000ED [5C01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
 10830                                  					; 04
 10831 000000EF [9F01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
 10832                                  					; 05
 10833 000000F1 [FA01]                  		dw bc_exvec  ; 1FBh	; 06
 10834 000000F3 [0802]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
 10835                                  					; 07
 10836 000000F5 [FC01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
 10837                                  					; 08
 10838 000000F7 [FC01]                  		dw con_writ  ; 1FDh	; 09
 10839 000000F9 [FA01]                  		dw bc_exvec  ; 1FBh	; 0A
 10840                                  con_table_end:
 10841 000000FB 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
 10842                                  					; 2C7h:0FBh = 70h:266Bh
 10843 000000FC [FA01]                  		dw bc_exvec   ; 1FBh	; bc_exvec
 10844 000000FE [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 10845 00000100 [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 10846 00000102 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
 10847 00000104 [1902]                  		dw prn_input  ;	21Ah	; prn_input
 10848                                  					; 04 indicate zero chars read
 10849 00000106 [C701]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
 10850                                  					; 05 read non-destructive
 10851 00000108 [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 10852 0000010A [FA01]                  		dw bc_exvec   ; 1FBh	; 07
 10853 0000010C [1E02]                  		dw prn_writ   ;	21Fh	; prn_writ
 10854 0000010E [1E02]                  		dw prn_writ   ; 21Fh	; 09
 10855 00000110 [4F02]                  		dw prn_stat   ; 251h	; prn_stat
 10856 00000112 [FA01]                  		dw bc_exvec   ; 1FBh	; 0B
 10857 00000114 [FA01]                  		dw bc_exvec   ; 1FBh	; 0C
 10858 00000116 [FA01]                  		dw bc_exvec   ; 1FBh	; 0D
 10859 00000118 [FA01]                  		dw bc_exvec   ; 1FBh	; 0E
 10860 0000011A [FA01]                  		dw bc_exvec   ; 1FBh	; 0F
 10861 0000011C [9402]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
 10862 0000011E [FA01]                  		dw bc_exvec   ; 1FBh	; 11
 10863 00000120 [FA01]                  		dw bc_exvec   ; 1FBh	; 12
 10864 00000122 [C202]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
 10865 00000124 [FA01]                  		dw bc_exvec   ; 1FBh	; 14
 10866 00000126 [FA01]                  		dw bc_exvec   ; 1FBh	; 15
 10867 00000128 [FA01]                  		dw bc_exvec   ; 1FBh	; 16
 10868 0000012A [FA01]                  		dw bc_exvec   ; 1FBh	; 17
 10869 0000012C [FA01]                  		dw bc_exvec   ; 1FBh	; 18
 10870 0000012E [F702]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
 10871                                  prn_table_end:
 10872 00000130 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
 10873                                  					; 2C7h:130h = 70h:26A0h
 10874 00000131 [FA01]                  		dw bc_exvec   ; 1FBh	; 00 - init
 10875 00000133 [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 10876 00000135 [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 10877 00000137 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
 10878 00000139 [1203]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
 10879 0000013B [3703]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
 10880 0000013D [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 10881 0000013F [7803]                  		dw aux_flsh   ;	36Ch	; aux_flsh
 10882 00000141 [7F03]                  		dw aux_writ   ;	374h	; aux_writ
 10883 00000143 [7F03]                  		dw aux_writ   ;	374h	; 09
 10884 00000145 [5703]                  		dw aux_wrst   ;	355h	; aux_wrst
 10885                                  aux_table_end:
 10886 00000147 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
 10887                                  					; 2C7h:147h = 70h:26B7h
 10888 00000148 [FA01]                  		dw bc_exvec   ; 1FBh	; 00
 10889 0000014A [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 10890 0000014C [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 10891 0000014E [D500]                  		dw bc_cmderr  ;	0D5h	; 03
 10892 00000150 [E404]                  		dw tim_read   ;	435h	; tim_read
 10893 00000152 [C701]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
 10894 00000154 [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 10895 00000156 [FA01]                  		dw bc_exvec   ; 1FBh	; 07
 10896 00000158 [E503]                  		dw tim_writ   ; 3DBh	; tim_writ
 10897 0000015A [E503]                  		dw tim_writ   ; 3DBh	; 09
 10898                                  tim_table_end:
 10899                                  
 10900                                  ; ---------------------------------------------------------------------------
 10901                                  
 10902                                  ;************************************************************************
 10903                                  ;*									*
 10904                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
 10905                                  ;*									*
 10906                                  ;************************************************************************
 10907                                  
 10908                                  con_read:				; 2C7h:15Ch = 70h:26CCh
 10909                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
 10910 0000015C E306                    		jcxz	con_exit	; 19/10/2022
 10911                                  con_loop:				
 10912 0000015E E80500                  		call	chrin		; get char in al
 10913 00000161 AA                      		stosb			; store	char at	es:di
 10914 00000162 E2FA                    		loop	con_loop
 10915                                  con_exit:				
 10916 00000164 F8                      		clc
 10917 00000165 C3                      		retn
 10918                                  
 10919                                  ; =============== S U B	R O U T	I N E =======================================
 10920                                  
 10921                                  ;************************************************************************
 10922                                  ;*									*
 10923                                  ;*	chrin - input single char from keyboard into al			*
 10924                                  ;*									*
 10925                                  ;*	  we are going to issue extended keyboard function, if		*
 10926                                  ;*	  supported. the returning value of the extended keystroke	*
 10927                                  ;*	  of the extended keyboard function uses 0E0h in al		*
 10928                                  ;*	  instead of 00h as in the conventional keyboard function.	*
 10929                                  ;*	  this creates a conflict when the user entered real		*
 10930                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
 10931                                  ;*	  keystroke and the greek alpha. this case will be handled	*
 10932                                  ;*	  in the following manner:					*
 10933                                  ;*									*
 10934                                  ;*	      ah = 16h							*
 10935                                  ;*	      int 16h							*
 10936                                  ;*	      if al == 0, then extended code (in ah)			*
 10937                                  ;*	      else if al == 0E0h, then					*
 10938                                  ;*	      if ah <> 0, then extended code (in ah)			*
 10939                                  ;*		else greek_alpha character.				*
 10940                                  ;*									*
 10941                                  ;*	also, for compatibility reason, if an extended code is		*
 10942                                  ;*	  detected, then we are going to change the value in al		*
 10943                                  ;*	  from 0E0h to 00h.						*
 10944                                  ;*									*
 10945                                  ;************************************************************************
 10946                                  
 10947                                  		; 19/10/2022
 10948                                  chrin:		
 10949 00000166 8A26[7E04]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
 10950 0000016A 30C0                    		xor	al, al
 10951 0000016C 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
 10952 00000170 08C0                    		or	al, al
 10953 00000172 752A                    		jnz	short keyret
 10954 00000174 CD16                    		int	16h		; KEYBOARD -
 10955 00000176 09C0                    		or	ax, ax
 10956 00000178 74EC                    		jz	short chrin
 10957 0000017A 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
 10958 0000017D 7504                    		jnz	short alt_ext_chk
 10959 0000017F B010                    		mov	al, 10h
 10960 00000181 EB1B                    		jmp	short keyret
 10961                                  ; ---------------------------------------------------------------------------
 10962                                  
 10963                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
 10964                                  ;    if character read was 0E0h then
 10965                                  ;      if extended byte was zero (i.e. ah == 0) then
 10966                                  ;	 goto keyret
 10967                                  ;      else
 10968                                  ;	 set al to zero
 10969                                  ;	 goto alt_save
 10970                                  ;      endif
 10971                                  ;    endif
 10972                                  ;  endif
 10973                                  
 10974                                  alt_ext_chk:
 10975 00000183 803E[7E04]00            		cmp	byte [keyrd_func], 0
 10976 00000188 740C                    		jz	short not_ext
 10977 0000018A 3CE0                    		cmp	al, 0E0h
 10978 0000018C 7508                    		jnz	short not_ext
 10979 0000018E 08E4                    		or	ah, ah
 10980 00000190 740C                    		jz	short keyret
 10981 00000192 30C0                    		xor	al, al
 10982 00000194 EB04                    		jmp	short alt_save
 10983                                  ; ---------------------------------------------------------------------------
 10984                                  
 10985                                  not_ext:				
 10986 00000196 08C0                    		or	al, al		; special case?
 10987 00000198 7504                    		jnz	short keyret
 10988                                  alt_save:				
 10989 0000019A 8826[0C00]              		mov	[altah], ah	; store	special	key
 10990                                  keyret:					
 10991 0000019E C3                      		retn
 10992                                  
 10993                                  ; ---------------------------------------------------------------------------
 10994                                  
 10995                                  ;************************************************************************
 10996                                  ;*									*
 10997                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
 10998                                  ;*									*
 10999                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
 11000                                  ;*	in the status word of the request packet, and there is no	*
 11001                                  ;*	character in the input buffer, the driver issues a system	*
 11002                                  ;*	wait request to the rom. on return from the rom, it returns	*
 11003                                  ;*	a 'char-not-found' to the dos.					*
 11004                                  ;*									*
 11005                                  ;************************************************************************
 11006                                  
 11007                                  		; 19/10/2022
 11008                                  con_rdnd:				
 11009 0000019F A0[0C00]                		mov	al, [altah]
 11010 000001A2 08C0                    		or	al, al
 11011 000001A4 754C                    		jnz	short rdexit
 11012 000001A6 8A26[7F04]              		mov	ah, [keysts_func]
 11013 000001AA CD16                    		int	16h		; KEYBOARD -
 11014 000001AC 751D                    		jnz	short gotchr
 11015 000001AE 803E[7900]00            		cmp	byte [fhavek09], 0
 11016 000001B3 7412                    		jz	short z_bus_exit
 11017 000001B5 C41E[1200]              		les	bx, [ptrsav]
 11018                                  		; 12/12/2022
 11019 000001B9 26F6470404              		test	byte [es:bx+4], 04h
 11020                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
 11021 000001BE 7407                    		jz	short z_bus_exit
 11022 000001C0 B80041                  		mov	ax, 4100h
 11023 000001C3 30DB                    		xor	bl, bl
 11024 000001C5 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
 11025                                  					; AL = condition type, BH = condition compare or mask value
 11026                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
 11027                                  					; DX = I/O port	address	if AL bit 4 set
 11028                                  z_bus_exit:				
 11029 000001C7 F9                      		stc			; 2C7h:1C8h = 70h:2738h
 11030 000001C8 B403                    		mov	ah, 3		; indicate busy	status
 11031 000001CA C3                      		retn
 11032                                  ; ---------------------------------------------------------------------------
 11033                                  
 11034                                  gotchr:					
 11035 000001CB 09C0                    		or	ax, ax
 11036 000001CD 7508                    		jnz	short notbrk	; check	for null after break
 11037 000001CF 8A26[7E04]              		mov	ah, [keyrd_func] ; issue keyboard read function
 11038 000001D3 CD16                    		int	16h		; KEYBOARD -
 11039 000001D5 EBC8                    		jmp	short con_rdnd	; get a	real status
 11040                                  ; ---------------------------------------------------------------------------
 11041                                  
 11042                                  notbrk:					
 11043 000001D7 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
 11044 000001DA 7504                    		jnz	short rd_ext_chk
 11045 000001DC B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
 11046 000001DE EB12                    		jmp	short rdexit
 11047                                  ; ---------------------------------------------------------------------------
 11048                                  
 11049                                  rd_ext_chk:				
 11050 000001E0 803E[7E04]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
 11051 000001E5 740B                    		jz	short rdexit
 11052 000001E7 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
 11053 000001E9 7507                    		jnz	short rdexit
 11054 000001EB 80FC00                  		cmp	ah, 0		; scan code exist?
 11055 000001EE 7402                    		jz	short rdexit	; yes. greek alpha char.
 11056 000001F0 B000                    		mov	al, 0		; no. extended key stroke.
 11057                                  					; change it for	compatibility
 11058                                  rdexit:					
 11059 000001F2 C41E[1200]              		les	bx, [ptrsav]
 11060 000001F6 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
 11061                                  					; return keyboard character here
 11062                                  bc_exvec:				
 11063 000001FA F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
 11064                                  					; indicate normal termination
 11065 000001FB C3                      		retn
 11066                                  ; ---------------------------------------------------------------------------
 11067                                  
 11068                                  ;************************************************************************
 11069                                  ;*									*
 11070                                  ;*	con_write - console write routine				*
 11071                                  ;*									*
 11072                                  ;*	entry:	es:di -> buffer						*
 11073                                  ;*		cx    =  count						*
 11074                                  ;*									*
 11075                                  ;************************************************************************
 11076                                  
 11077                                  con_writ:
 11078                                  		;jcxz	short bc_exvec
 11079 000001FC E3FC                    		jcxz	bc_exvec	; 19/10/2022
 11080                                  		; 12/12/2022
 11081                                  		;jcxz	cc_ret
 11082                                  con_lp:					
 11083 000001FE 268A05                  		mov	al, [es:di]
 11084 00000201 47                      		inc	di
 11085 00000202 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 11086                                  					; AL = character to display
 11087 00000204 E2F8                    		loop	con_lp
 11088                                  cc_ret:					
 11089 00000206 F8                      		clc
 11090 00000207 C3                      		retn
 11091                                  
 11092                                  ; =============== S U B	R O U T	I N E =======================================
 11093                                  
 11094                                  ;************************************************************************
 11095                                  ;*									*
 11096                                  ;*	con_flush - flush out keyboard queue				*
 11097                                  ;*									*
 11098                                  ;************************************************************************
 11099                                  
 11100                                  con_flush:
 11101 00000208 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
 11102                                  flloop:					; while	(charavail()) charread();	
 11103 0000020D B401                    		mov	ah, 1
 11104 0000020F CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
 11105                                  					; Return: ZF clear if character	in buffer
 11106                                  					; AH = scan code, AL = character
 11107                                  					; ZF set if no character in buffer
 11108 00000211 74F3                    		jz	short cc_ret
 11109 00000213 30E4                    		xor	ah, ah
 11110 00000215 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 11111                                  					; Return: AH = scan code, AL = character
 11112 00000217 EBF4                    		jmp	short flloop
 11113                                  
 11114                                  ; ---------------------------------------------------------------------------
 11115                                  
 11116                                  ; 15/10/2022
 11117                                  
 11118                                  ;************************************************************************
 11119                                  ;*									*
 11120                                  ;*	some equates for rom bios printer i/o				*
 11121                                  ;*									*
 11122                                  ;************************************************************************
 11123                                  
 11124                                  ; ibm rom status bits (i don't trust them, neither should you)
 11125                                  ; warning!!! the ibm rom does not return just one bit. it returns a
 11126                                  ; whole slew of bits, only one of which is correct.
 11127                                  
 11128                                  ;notbusystatus	equ 10000000b		; not busy
 11129                                  ;nopaperstatus	equ 00100000b		; no more paper
 11130                                  ;prnselected	equ 00010000b		; printer selected
 11131                                  ;ioerrstatus	equ 00001000b		; some kinda error
 11132                                  ;timeoutstatus	equ 00000001b		; time out.
 11133                                  ;
 11134                                  ;noprinter	equ 00110000b		; no printer attached
 11135                                  
 11136                                  ; 18/03/2019 - Retro DOS v4.0
 11137                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
 11138                                  
 11139                                  ; ---------------------------------------------------------------------------
 11140                                  
 11141                                  ;************************************************************************
 11142                                  ;*									*
 11143                                  ;*	prn_input - return with no error but zero chars read		*
 11144                                  ;*									*
 11145                                  ;*	enter with cx = number of characters requested			*
 11146                                  ;*									*
 11147                                  ;************************************************************************
 11148                                  
 11149                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
 11150 00000219 E8BBFE                  		call	bc_err_cnt	; reset	count to zero
 11151                                  					; (sub reqpkt.count,cx)
 11152                                  		; 12/12/2022
 11153                                  prn_done:
 11154 0000021C F8                      		clc			; but return with carry	reset for no error
 11155 0000021D C3                      		retn
 11156                                  ; ---------------------------------------------------------------------------
 11157                                  
 11158                                  ;************************************************************************
 11159                                  ;*									*
 11160                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
 11161                                  ;*									*
 11162                                  ;*	auxnum has printer number					*
 11163                                  ;*									*
 11164                                  ;************************************************************************
 11165                                  
 11166                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
 11167                                  		;jcxz	short prn_done	; no chars to output
 11168 0000021E E3FC                    		jcxz	prn_done	; 19/10/2022
 11169                                  prn_loop:				
 11170 00000220 BB0200                  		mov	bx, 2		; retry	count
 11171                                  prn_out:				
 11172 00000223 E83600                  		call	prnstat		; get status
 11173 00000226 751D                    		jnz	short TestPrnError
 11174 00000228 268A05                  		mov	al, [es:di]	; get character	to print
 11175 0000022B 30E4                    		xor	ah, ah
 11176 0000022D E82E00                  		call	prnop		; print	to printer
 11177 00000230 7419                    		jz	short prn_con	; no error - continue
 11178 00000232 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
 11179 00000235 7509                    		jnz	short _prnwf
 11180 00000237 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
 11181 00000239 C606[0C00]00            		mov	byte [altah], 0
 11182 0000023E EB08                    		jmp	short pmessg
 11183                                  ; ---------------------------------------------------------------------------
 11184                                  
 11185                                  _prnwf:					
 11186 00000240 F6C401                  		test	ah, 1		; timeoutstatus
 11187 00000243 7406                    		jz	short prn_con
 11188                                  TestPrnError:				
 11189 00000245 4B                      		dec	bx		; retry	until count is exhausted.
 11190 00000246 75DB                    		jnz	short prn_out
 11191                                  pmessg:					
 11192 00000248 E98CFE                  		jmp	bc_err_cnt
 11193                                  ; ---------------------------------------------------------------------------
 11194                                  
 11195                                  prn_con:				
 11196 0000024B 47                      		inc	di		; point	to next	char and continue
 11197 0000024C E2D2                    		loop	prn_loop
 11198                                  ;prn_done:				
 11199                                  		; 12/12/2022
 11200                                  prn_done2:
 11201                                  		;clc
 11202                                  		; cf=0
 11203 0000024E C3                      		retn
 11204                                  ; ---------------------------------------------------------------------------
 11205                                  
 11206                                  ;************************************************************************
 11207                                  ;*									*
 11208                                  ;*	prn_stat - device driver entry to return printer status		*
 11209                                  ;*									*
 11210                                  ;************************************************************************
 11211                                  
 11212                                  prn_stat:				; 2C7h:251h = 70h:27C1h
 11213 0000024F E80A00                  		call	prnstat		; device in dx
 11214 00000252 75F4                    		jnz	short pmessg
 11215 00000254 F6C480                  		test	ah, 80h		; notbusystatus
 11216                                  		;jnz	short prn_done
 11217                                  		; 12/12/2022
 11218 00000257 75F5                    		jnz	short prn_done2 ; cf=0
 11219 00000259 E96BFF                  		jmp	z_bus_exit
 11220                                  ; ---------------------------------------------------------------------------
 11221                                  
 11222                                  ;************************************************************************
 11223                                  ;*									*
 11224                                  ;*	prnstat - utility function to call ROM BIOS to check		*
 11225                                  ;*		 printer status. Return meaningful error code		*
 11226                                  ;*									*
 11227                                  ;************************************************************************
 11228                                  
 11229                                  prnstat:				
 11230 0000025C B402                    		mov	ah, 2		; set command for get status
 11231                                  					; PRINTER - GET	STATUS
 11232                                  					; DX = printer port (0-3)
 11233                                  					; Return: AH = status
 11234                                  
 11235                                  ; =============== S U B	R O U T	I N E =======================================
 11236                                  
 11237                                  ;************************************************************************
 11238                                  ;*									*
 11239                                  ;*	prnop - call ROM BIOS printer function in ah			*
 11240                                  ;*		return zero true if no error				*
 11241                                  ;*		return zero false if error, al = error code		*
 11242                                  ;*									*
 11243                                  ;************************************************************************
 11244                                  
 11245                                  prnop:
 11246                                  		; 20/12/2023 - Retro DOS v5.0
 11247                                  		; PCDOS 7.1 IBMBIO.COM
 11248                                  		
 11249                                  		;mov	dx, [auxnum]	; get printer number
 11250                                  		;int	17h
 11251                                  
 11252 0000025E 1E                      		push	ds
 11253 0000025F FF36[2100]              		push	word [auxnum]
 11254 00000263 31D2                    		xor	dx, dx ; 0
 11255 00000265 8EDA                    		mov	ds, dx
 11256 00000267 5A                      		pop	dx
 11257 00000268 9C                      		pushf			; simulate int 17h
 11258 00000269 FA                      		cli
 11259                                  		;call	dword ptr ds:5ghghCh
 11260 0000026A FF1E5C00                		call	far [17h*4]	; 0:5Ch = INT 17h vector
 11261 0000026E 1F                      		pop	ds
 11262                                  
 11263                                  	; This check was added to see if this is a case of no
 11264                                  	; printer being installed. This tests checks to be sure
 11265                                  	; the error is noprinter (30h)
 11266                                  
 11267 0000026F 50                      		push	ax
 11268 00000270 80E430                  		and	ah, 30h
 11269 00000273 80FC30                  		cmp	ah, 30h		; noprinter
 11270 00000276 58                      		pop	ax
 11271 00000277 7506                    		jnz	short NextTest
 11272 00000279 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
 11273 0000027C 80CC08                  		or	ah, 8		; ioerrstatus
 11274                                  
 11275                                  ; examine the status bits to see if an error occurred. unfortunately, several
 11276                                  ; of the bits are set so we have to pick and choose. we must be extremely
 11277                                  ; careful about breaking basic.
 11278                                  
 11279                                  NextTest:				
 11280 0000027F F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
 11281                                  					; i/o error?
 11282 00000282 740A                    		jz	short checknotready ; no, try not ready
 11283                                  
 11284                                  ; at this point, we know we have an error. the converse is not true
 11285                                  
 11286 00000284 B009                    		mov	al, 9		; error_I24_out_of_paper
 11287                                  					; first, assume	out of paper
 11288 00000286 F6C420                  		test	ah, 20h		; out of paper set?
 11289 00000289 7502                    		jnz	short ret1	; yes, error is	set
 11290 0000028B FEC0                    		inc	al		; return al=10 (i/o error)
 11291                                  ret1:					
 11292 0000028D C3                      		retn
 11293                                  ; ---------------------------------------------------------------------------
 11294                                  
 11295                                  checknotready:				
 11296 0000028E B002                    		mov	al, 2		; assume not-ready
 11297 00000290 F6C401                  		test	ah, 1
 11298 00000293 C3                      		retn
 11299                                  
 11300                                  ; ---------------------------------------------------------------------------
 11301                                  
 11302                                  ;************************************************************************
 11303                                  ;*									*
 11304                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
 11305                                  ;*		     this entry point should never block waiting for	*
 11306                                  ;*		     device to come ready.				*
 11307                                  ;*									*
 11308                                  ;*	inputs:	cx = count, es:di -> buffer				*
 11309                                  ;*	outputs: set the number of bytes transferred in the		*
 11310                                  ;*		 device driver request packet				*
 11311                                  ;*									*
 11312                                  ;************************************************************************
 11313                                  
 11314                                  		; 19/10/2022
 11315                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
 11316 00000294 89FE                    		mov	si, di		; everything is	set for	lodsb
 11317                                  prn_tilbloop:				
 11318 00000296 51                      		push	cx
 11319 00000297 53                      		push	bx
 11320 00000298 30FF                    		xor	bh, bh
 11321 0000029A 8A1E[8004]              		mov	bl, [printdev]
 11322 0000029E D1E3                    		shl	bx, 1
 11323                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
 11324 000002A0 8B8F[8104]              		mov	cx, [wait_count+bx]
 11325 000002A4 5B                      		pop	bx
 11326                                  prn_getstat:				
 11327 000002A5 E8B4FF                  		call	prnstat		; get status
 11328 000002A8 7514                    		jnz	short prn_bperr	; error
 11329 000002AA F6C480                  		test	ah, 80h		; ready	yet?
 11330 000002AD E1F6                    		loope	prn_getstat	; no, go for more
 11331 000002AF 59                      		pop	cx		; get original count
 11332 000002B0 740D                    		jz	short prn_berr	; still	not ready => done
 11333 000002B2 26                      		es
 11334 000002B3 AC                      		lodsb
 11335                                  		;lods	byte ptr es:[si] ; es
 11336                                  					; lodsb
 11337 000002B4 30E4                    		xor	ah, ah
 11338 000002B6 E8A5FF                  		call	prnop
 11339 000002B9 7504                    		jnz	short prn_berr	; error
 11340 000002BB E2D9                    		loop	prn_tilbloop
 11341                                  		; 12/12/2022
 11342                                  		; cf=0 (prnop)
 11343                                  		;clc			; normal no-error return
 11344 000002BD C3                      		retn			;   from device driver
 11345                                  
 11346                                  ; ---------------------------------------------------------------------------
 11347                                  
 11348                                  prn_bperr:				
 11349 000002BE 59                      		pop	cx		; restore transfer count from stack
 11350                                  prn_berr:				
 11351 000002BF E915FE                  		jmp	bc_err_cnt
 11352                                  ; ---------------------------------------------------------------------------
 11353                                  
 11354                                  ; 15/10/2022
 11355                                  
 11356                                  ;************************************************************************
 11357                                  ;*									*
 11358                                  ;*	prn_genioctl - get/set printer retry count			*
 11359                                  ;*									*
 11360                                  ;************************************************************************
 11361                                  
 11362                                  ; IOCTL.INC (MSDOS 6.0, 1991)
 11363                                  ; 11/01/2019
 11364                                  
 11365                                  ;********************************;*
 11366                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
 11367                                  ;********************************;*
 11368                                  
 11369                                  ;;RAWIO SUB-FUNCTIONS
 11370                                  ;;get_retry_count equ 65h
 11371                                  ;;set_retry_count equ 45h
 11372                                  
 11373                                  ;;struc A_RETRYCOUNT
 11374                                  ;;.rc_count: resw 1
 11375                                  ;;endstruc
 11376                                  
 11377                                  ;ioc_pc equ 5
 11378                                  
 11379                                  ; ---------------------------------------------------------------------------
 11380                                  
 11381                                  		; 19/10/2022
 11382                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
 11383 000002C2 C43E[1200]              		les	di, [ptrsav]
 11384 000002C6 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
 11385                                  					; ioc_pc
 11386 000002CB 7403                    		jz	short prnfunc_ok
 11387                                  
 11388                                  prnfuncerr:				
 11389 000002CD E905FE                  		jmp	bc_cmderr
 11390                                  ; ---------------------------------------------------------------------------
 11391                                  
 11392                                  prnfunc_ok:				
 11393 000002D0 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 11394 000002D4 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
 11395 000002D8 30FF                    		xor	bh, bh
 11396                                  		;mov	bl, ds:printdev	; get index into retry counts
 11397 000002DA 8A1E[8004]              		mov	bl, [printdev]
 11398 000002DE D1E3                    		shl	bx, 1
 11399                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
 11400 000002E0 8B8F[8104]              		mov	cx, [wait_count+bx]
 11401 000002E4 3C65                    		cmp	al, 65h		; get_retry_count
 11402 000002E6 7407                    		jz	short prngetcount
 11403 000002E8 3C45                    		cmp	al, 45h		; set_retry_count
 11404 000002EA 75E1                    		jnz	short prnfuncerr
 11405 000002EC 268B0D                  		mov	cx, [es:di]
 11406                                  prngetcount:				
 11407                                  		;mov	ds:wait_count[bx], cx
 11408 000002EF 898F[8104]              		mov	[wait_count+bx], cx
 11409 000002F3 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
 11410                                  					; return current retry count
 11411                                  		; 12/12/2022
 11412                                  		; cf=0
 11413                                  		;clc
 11414 000002F6 C3                      		retn
 11415                                  ; ---------------------------------------------------------------------------
 11416                                  
 11417                                  ;************************************************************************
 11418                                  ;*									*
 11419                                  ;*  prn_ioctl_query							*
 11420                                  ;*									*
 11421                                  ;*  Added for 5.00							*
 11422                                  ;************************************************************************
 11423                                  
 11424                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
 11425 000002F7 C43E[1200]              		les	di, [ptrsav]
 11426 000002FB 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
 11427                                  					; ioc_pc
 11428 00000300 750D                    		jnz	short prn_query_err
 11429 00000302 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 11430 00000306 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
 11431 00000308 7404                    		jz	short IOCtlSupported
 11432 0000030A 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
 11433 0000030C 7501                    		jnz	short prn_query_err
 11434                                  IOCtlSupported:	
 11435                                  		; 12/12/2022
 11436                                  		; cf=0		
 11437                                  		;clc
 11438 0000030E C3                      		retn
 11439                                  ; ---------------------------------------------------------------------------
 11440                                  
 11441                                  prn_query_err:
 11442                                  		; 12/12/2022				
 11443                                  		;stc
 11444 0000030F E9C3FD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
 11445                                  ; ---------------------------------------------------------------------------
 11446                                  
 11447                                  ;************************************************************************
 11448                                  ;*									*
 11449                                  ;*	aux port driver code -- "aux" == "com1"				*
 11450                                  ;*									*
 11451                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
 11452                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
 11453                                  ;*									*
 11454                                  ;************************************************************************
 11455                                  
 11456                                  ;	values in ah, requesting function of int 14h in rom bios
 11457                                  
 11458                                  ;auxfunc_send	 equ	1	;transmit
 11459                                  ;auxfunc_receive equ	2	;read
 11460                                  ;auxfunc_status	 equ	3	;request status
 11461                                  
 11462                                  ;	error flags, reported by int 14h, reported in ah:
 11463                                  
 11464                                  ;flag_data_ready equ	01h	;data ready
 11465                                  ;flag_overrun	 equ	02h	;overrun error
 11466                                  ;flag_parity	 equ	04h	;parity error
 11467                                  ;flag_frame	 equ	08h	;framing error
 11468                                  ;flag_break	 equ	10h	;break detect
 11469                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
 11470                                  ;flag_timeout	 equ	80h	;timeout
 11471                                  
 11472                                  ;	these flags reported in al:
 11473                                  
 11474                                  ;flag_cts	 equ	10h	;clear to send
 11475                                  ;flag_dsr	 equ	20h	;data set ready
 11476                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
 11477                                  
 11478                                  ; ---------------------------------------------------------------------------
 11479                                  
 11480                                  ;************************************************************************
 11481                                  ;*									*
 11482                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
 11483                                  ;*		   at es:di						*
 11484                                  ;*									*
 11485                                  ;************************************************************************
 11486                                  
 11487                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
 11488                                  		;jcxz	short exvec2
 11489 00000312 E311                    		jcxz	exvec2		; 19/10/2022
 11490 00000314 E88000                  		call	getbx		; put address of auxbuf	in bx
 11491 00000317 30C0                    		xor	al, al
 11492 00000319 8607                    		xchg	al, [bx]
 11493 0000031B 08C0                    		or	al, al
 11494 0000031D 7503                    		jnz	short aux2
 11495                                  aux1:					
 11496 0000031F E80500                  		call	auxin		; get character	from port
 11497                                  					; won't return if error
 11498                                  aux2:					
 11499 00000322 AA                      		stosb
 11500 00000323 E2FA                    		loop	aux1		; if more characters, go around	again
 11501                                  exvec2:					
 11502 00000325 F8                      		clc			; all done, successful exit
 11503                                  auxin_retn:	; 18/12/2022
 11504 00000326 C3                      		retn
 11505                                  ; ---------------------------------------------------------------------------
 11506                                  
 11507                                  ;************************************************************************
 11508                                  ;*									*
 11509                                  ;*	auxin - call rom bios to read character from aux port		*
 11510                                  ;*		if error occurs, map the error and return one		*
 11511                                  ;*		level up to device driver exit code, setting		*
 11512                                  ;*		the number of bytes transferred appropriately		*
 11513                                  ;*									*
 11514                                  ;************************************************************************
 11515                                  
 11516                                  auxin:					
 11517 00000327 B402                    		mov	ah, 2		; auxfunc_receive
 11518 00000329 E83A00                  		call	auxop
 11519 0000032C F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
 11520                                  		;jnz	short arbad	; skip if any error bits set
 11521                                  		;retn
 11522                                  		; 25/06/2023 (BugFix)
 11523 0000032F 74F5                    		jz	short auxin_retn
 11524                                  ; ---------------------------------------------------------------------------
 11525                                  
 11526                                  arbad:					
 11527 00000331 58                      		pop	ax		; remove return	address	(near call)
 11528                                  		;xor	al, al
 11529                                  		;or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
 11530                                  		; 11/08/2023
 11531 00000332 B0B0                    		mov	al, 0B0h	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0334h
 11532 00000334 E9A0FD                  		jmp	bc_err_cnt
 11533                                  
 11534                                  ; ---------------------------------------------------------------------------
 11535                                  
 11536                                  ;************************************************************************
 11537                                  ;*									*
 11538                                  ;*	aux_rdnd - non-destructive aux port read			*
 11539                                  ;*									*
 11540                                  ;************************************************************************
 11541                                  
 11542                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
 11543 00000337 E85D00                  		call	getbx
 11544 0000033A 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
 11545 0000033C 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
 11546 0000033E 7511                    		jnz	short auxdrx	; then return character
 11547 00000340 E82100                  		call	auxstat		; if not, get status of	aux device
 11548 00000343 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
 11549 00000346 740C                    		jz	short auxbus	; then device is busy (not ready)
 11550 00000348 A820                    		test	al, 20h		; flag_dsr - test data set ready
 11551 0000034A 7408                    		jz	short auxbus	; then device is busy (not ready)
 11552 0000034C E8D8FF                  		call	auxin		; else aux is ready, get character
 11553 0000034F 8807                    		mov	[bx], al
 11554                                  auxdrx:					
 11555 00000351 E99EFE                  		jmp	rdexit		; return busy status
 11556                                  ; ---------------------------------------------------------------------------
 11557                                  
 11558                                  auxbus:					
 11559 00000354 E970FE                  		jmp	z_bus_exit
 11560                                  ; ---------------------------------------------------------------------------
 11561                                  
 11562                                  ;************************************************************************
 11563                                  ;*									*
 11564                                  ;*	aux_wrst - return aux port write status				*
 11565                                  ;*									*
 11566                                  ;************************************************************************
 11567                                  
 11568                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
 11569 00000357 E80A00                  		call	auxstat		; get status of	aux in ax
 11570 0000035A A820                    		test	al, 20h		; test data set	ready
 11571 0000035C 74F6                    		jz	short auxbus	; then device is busy (not ready)
 11572 0000035E F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
 11573 00000361 74F1                    		jz	short auxbus	; then device is busy (not ready)
 11574                                  		; 12/12/2022
 11575                                  		; cf=0	; (test instruction resets cf)
 11576                                  		;clc
 11577 00000363 C3                      		retn
 11578                                  ; ---------------------------------------------------------------------------
 11579                                  
 11580                                  ;************************************************************************
 11581                                  ;*									*
 11582                                  ;*	auxstat - call rom bios to determine aux port status		*
 11583                                  ;*									*
 11584                                  ;*	exit:	ax = status						*
 11585                                  ;*		dx = [auxnum]						*
 11586                                  ;*									*
 11587                                  ;************************************************************************
 11588                                  
 11589                                  auxstat:				
 11590 00000364 B403                    		mov	ah, 3		; auxfunc_status
 11591                                  
 11592                                  		; fall into auxop
 11593                                  
 11594                                  ; =============== S U B	R O U T	I N E =======================================
 11595                                  
 11596                                  ;************************************************************************
 11597                                  ;*									*
 11598                                  ;*	auxop - perform rom-biox aux port interrupt			*
 11599                                  ;*									*
 11600                                  ;*	entry:	ah = int 14h function number				*
 11601                                  ;*	exit:	ax = results						*
 11602                                  ;*		dx = [auxnum]						*
 11603                                  ;*									*
 11604                                  ;************************************************************************
 11605                                  
 11606                                  auxop:		; proc near
 11607                                  		; 20/12/2023 - Retro DOS v5.0
 11608                                  		;mov	dx, [auxnum]	; ah=function code
 11609                                  		;			; 0=init, 1=send, 2=receive, 3=status
 11610                                  		;			; get port number
 11611                                  		;
 11612                                  		;int	14h		; SERIAL I/O - GET USART STATUS
 11613                                  		;			; DX = port number (0-3)
 11614                                  		;			; Return: AX = port status code
 11615                                  		; (PCDOS 7.1 IBMBIO.COM)
 11616 00000366 1E                      		push	ds
 11617 00000367 FF36[2100]              		push	word [auxnum]
 11618 0000036B 31D2                    		xor	dx, dx ; 0
 11619 0000036D 8EDA                    		mov	ds, dx
 11620 0000036F 5A                      		pop	dx
 11621 00000370 9C                      		pushf			; simulate INT 14h
 11622 00000371 FA                      		cli
 11623                                  		;call	dword ptr ds:50h
 11624 00000372 FF1E5000                		call	far [14h*4]	; INT 14h vector (14h*4 = 50h)
 11625 00000376 1F                      		pop	ds
 11626 00000377 C3                      		retn
 11627                                  
 11628                                  ; ---------------------------------------------------------------------------
 11629                                  
 11630                                  ;************************************************************************
 11631                                  ;*									*
 11632                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
 11633                                  ;*		   auxbuf [auxnum] to zero				*
 11634                                  ;*									*
 11635                                  ;*	cas - shouldn't this code call the rom bios input function	*
 11636                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
 11637                                  ;*	      pending serial input queue if there's a tsr like MODE	*
 11638                                  ;*	      which is providing interrupt-buffering of aux port?	*
 11639                                  ;*									*
 11640                                  ;************************************************************************
 11641                                  
 11642                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
 11643 00000378 E81C00                  		call	getbx		; flush	aux input buffer
 11644 0000037B C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
 11645                                  					; zero out buffer
 11646                                  		;clc			; all done, successful return
 11647                                  		; 12/12/2022
 11648                                  		; cf=0 ('add' instruction in 'getbx')
 11649 0000037E C3                      		retn
 11650                                  ; ---------------------------------------------------------------------------
 11651                                  
 11652                                  ;************************************************************************
 11653                                  ;*									*
 11654                                  ;*	aux_writ - write to aux device					*
 11655                                  ;*									*
 11656                                  ;************************************************************************
 11657                                  
 11658                                  aux_writ:				; 2C7h:374h = 70h:28E4h
 11659                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
 11660 0000037F E3A4                    		jcxz	exvec2		; 19/10/2022
 11661                                  aux_loop:				
 11662 00000381 268A05                  		mov	al, [es:di]	; get character	to be written
 11663                                  					; move di pointer to next character
 11664 00000384 47                      		inc	di
 11665 00000385 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
 11666 00000387 E8DCFF                  		call	auxop		; send character over aux port
 11667 0000038A F6C480                  		test	ah, 80h		; check	for error
 11668 0000038D 7405                    		jz	short awok	; then no error
 11669 0000038F B00A                    		mov	al, 10		; else indicate	write fault
 11670 00000391 E943FD                  		jmp	bc_err_cnt	; call error routines
 11671                                  ; ---------------------------------------------------------------------------
 11672                                  
 11673                                  awok:					
 11674 00000394 E2EB                    		loop	aux_loop	; if cx	is non-zero,
 11675                                  					; still	more character to print
 11676                                  		;clc			; all done, successful return
 11677                                  		; 12/12/2022
 11678                                  		; cf=0 (test instruction above)	
 11679 00000396 C3                      		retn
 11680                                  
 11681                                  ; =============== S U B	R O U T	I N E =======================================
 11682                                  
 11683                                  ;************************************************************************
 11684                                  ;*									*
 11685                                  ;*	getbx - return bx -> single byte input buffer for		*
 11686                                  ;*		selected aux port ([auxnum])				*
 11687                                  ;*									*
 11688                                  ;************************************************************************
 11689                                  
 11690                                  getbx:	
 11691 00000397 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
 11692                                  					; for selected aux port	([auxnum])
 11693                                  		;add	bx, offset auxbuf
 11694 0000039B 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
 11695                                  		; 12/12/2022
 11696                                  		; cf=0 (if [auxnum] is valid number) 
 11697 0000039F C3                      		retn
 11698                                  
 11699                                  ; ---------------------------------------------------------------------------
 11700                                  
 11701                                  ; 15/10/2022
 11702                                  
 11703                                  ;----------------------------------------------------------------
 11704                                  ;								:
 11705                                  ;		    clock device driver 			:
 11706                                  ;								:
 11707                                  ;								:
 11708                                  ;   this file contains the clock device driver. 		:
 11709                                  ;								:
 11710                                  ;   the routines in this files are:				:
 11711                                  ;								:
 11712                                  ;	routine 		function			:
 11713                                  ;	------- 		--------			:
 11714                                  ;	tim_writ		set the current time		:
 11715                                  ;	tim_read		read the current time		:
 11716                                  ;	time_to_ticks		convert time to corresponding	:
 11717                                  ;				  number of clock ticks 	:
 11718                                  ;								:
 11719                                  ; the clock ticks at the rate of:				:
 11720                                  ;								:
 11721                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
 11722                                  ; see each routine for information on the use.			:
 11723                                  ;								:
 11724                                  ;----------------------------------------------------------------
 11725                                  
 11726                                  ; convert time to ticks
 11727                                  ; input : time in cx and dx
 11728                                  ; ticks returned in cx:dx
 11729                                  
 11730                                  ;19/07/2019
 11731                                  ;09/03/2019
 11732                                  
 11733                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
 11734                                  
 11735                                  ; first convert from hour,min,sec,hund. to
 11736                                  ; total number of 100th of seconds
 11737                                  
 11738 000003A0 B03C                    		mov	al, 60
 11739 000003A2 F6E5                    		mul	ch		; hours	to minutes
 11740 000003A4 B500                    		mov	ch, 0
 11741 000003A6 01C8                    		add	ax, cx		; total	minutes
 11742 000003A8 B97017                  		mov	cx, 6000	; 60*100
 11743 000003AB 89D3                    		mov	bx, dx		; get out of the way of	the multiply
 11744 000003AD F7E1                    		mul	cx		; convert to 1/100 sec
 11745 000003AF 89C1                    		mov	cx, ax
 11746 000003B1 B064                    		mov	al, 100
 11747 000003B3 F6E7                    		mul	bh		; convert seconds to 1/100 sec
 11748 000003B5 01C1                    		add	cx, ax		; combine seconds with hours and min
 11749 000003B7 83D200                  		adc	dx, 0		; ripple carry
 11750 000003BA B700                    		mov	bh, 0
 11751 000003BC 01D9                    		add	cx, bx		; combine 1/100	sec
 11752 000003BE 83D200                  		adc	dx, 0
 11753                                  
 11754                                  	; dx:cx is time in 1/100 sec
 11755                                  
 11756 000003C1 92                      		xchg	ax, dx
 11757 000003C2 91                      		xchg	ax, cx		; now time is in cx:ax
 11758 000003C3 BB0BE9                  		mov	bx, 59659
 11759 000003C6 F7E3                    		mul	bx		; multiply low half
 11760 000003C8 87D1                    		xchg	dx, cx
 11761 000003CA 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
 11762 000003CB F7E3                    		mul	bx		; multiply high	half
 11763 000003CD 01C8                    		add	ax, cx		; combine overlapping products
 11764 000003CF 83D200                  		adc	dx, 0
 11765 000003D2 92                      		xchg	ax, dx		; ax:dx=time*59659
 11766 000003D3 BB0500                  		mov	bx, 5
 11767 000003D6 F6F3                    		div	bl		; divide high half by 5
 11768 000003D8 88C1                    		mov	cl, al
 11769 000003DA B500                    		mov	ch, 0
 11770 000003DC 88E0                    		mov	al, ah		; remainder of divide-by-5
 11771 000003DE 98                      		cbw
 11772 000003DF 92                      		xchg	ax, dx		; use it to extend low half
 11773 000003E0 F7F3                    		div	bx		; divide low half by 5
 11774 000003E2 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
 11775 000003E4 CB                      		retf			; far return
 11776                                  
 11777                                  ; ---------------------------------------------------------------------------
 11778                                  
 11779                                  ; 17/10/2022
 11780                                  ; 15/10/2022
 11781                                  
 11782                                  ;--------------------------------------------------------------------
 11783                                  ;
 11784                                  ; tim_writ sets the current time
 11785                                  ;
 11786                                  ; on entry es:[di] has the current time:
 11787                                  ;
 11788                                  ;	number of days since 1-1-80	(word)
 11789                                  ;	minutes (0-59)			(byte)
 11790                                  ;	hours (0-23)			(byte)
 11791                                  ;	hundredths of seconds (0-99)	(byte)
 11792                                  ;	seconds (0-59)			(byte)
 11793                                  ;
 11794                                  ; each number has been checked for the correct range.
 11795                                  ;
 11796                                  ;	NOTE: Any changes in this routine probably require corresponding
 11797                                  ;	changes in the version that is built with the power manager driver.
 11798                                  ;	See ptime.asm.
 11799                                  ;
 11800                                  ;--------------------------------------------------------------------
 11801                                  
 11802                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 11803                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:03EAh
 11804                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
 11805 000003E5 268B05                  		mov	ax, [es:di]
 11806 000003E8 50                      		push	ax		; daycnt. we need to set this at the very
 11807                                  					; end to avoid tick windows.
 11808 000003E9 803E[8C04]00            		cmp	byte [havecmosclock], 0
 11809                                  		;cmp	ds:havecmosclock, 0
 11810 000003EE 7423                    		jz	short no_cmos_1
 11811 000003F0 268A4503                		mov	al, [es:di+3]	; near indirect	calls
 11812                                  					; get binary hours
 11813                                  					; convert to bcd
 11814                                  		;call	far [bintobcd]
 11815                                  		;;call	ds:bintobcd	; call far [bintobcd]
 11816                                  		; 08/08/2023
 11817 000003F4 E8E800                  		call	bintobcd
 11818 000003F7 88C5                    		mov	ch, al		; ch = bcd hours
 11819 000003F9 268A4502                		mov	al, [es:di+2]	; get binary minutes
 11820                                  		;call	far [bintobcd]
 11821                                  		;;call	ds:bintobcd	; convert to bcd
 11822 000003FD E8DF00                  		call	bintobcd
 11823 00000400 88C1                    		mov	cl, al		; cl = bcd minutes
 11824 00000402 268A4505                		mov	al, [es:di+5]	; get binary seconds
 11825                                  		;call	far [bintobcd]
 11826                                  		;;call	ds:bintobcd
 11827 00000406 E8D600                  		call	bintobcd
 11828                                  
 11829 00000409 88C6                    		mov	dh, al		; dh = bcd seconds
 11830 0000040B B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
 11831 0000040D FA                      		cli
 11832 0000040E B403                    		mov	ah, 3
 11833 00000410 CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
 11834                                  					; CH = hours in	BCD, CL	= minutes in BCD
 11835                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
 11836                                  					; Return: CMOS clock set
 11837 00000412 FB                      		sti
 11838                                  no_cmos_1:				
 11839 00000413 268B4D02                		mov	cx, [es:di+2]
 11840 00000417 268B5504                		mov	dx, [es:di+4]
 11841                                  		; 17/10/2022
 11842 0000041B FF1E[0606]              		call	far [ttticks]
 11843                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
 11844                                  					; convert time to ticks
 11845                                  					; cx:dx	now has	time in	ticks
 11846 0000041F FA                      		cli			; turn off timer
 11847 00000420 B401                    		mov	ah, 1
 11848 00000422 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
 11849                                  					; CX:DX	= clock	count
 11850                                  					; Return: time of day set
 11851                                  		;pop	ds:daycnt
 11852 00000424 8F06[8904]              		pop	word [daycnt]
 11853 00000428 FB                      		sti
 11854                                  		;cmp	ds:havecmosclock, 0
 11855 00000429 803E[8C04]00            		cmp	byte [havecmosclock], 0
 11856 0000042E 7409                    		jz	short no_cmos_2
 11857                                  
 11858                                  		; 08/08/2023
 11859                                  		;call	far [daycnttoday]
 11860                                  		;;call	ds:daycnttoday	; call far [daycnttoday]
 11861                                  					; convert to bcd format
 11862 00000430 E80700                  		call	daycnttoday
 11863                                  
 11864 00000433 FA                      		cli
 11865 00000434 B405                    		mov	ah, 5
 11866 00000436 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
 11867                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
 11868                                  					; CH = century (19h or 20h)
 11869                                  					; Return: CMOS clock set
 11870 00000438 FB                      		sti
 11871                                  no_cmos_2:
 11872                                  		; 12/12/2022
 11873                                  		; cf=0
 11874                                  		;clc
 11875 00000439 C3                      		retn
 11876                                  
 11877                                  ; ---------------------------------------------------------------------------
 11878                                  
 11879                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 11880                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0440h
 11881                                  %if 1 
 11882                                  
 11883                                  ; CMOS Clock setting support routines used by MSCLOCK.
 11884                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
 11885                                  
 11886                                  daycnttoday:	; proc near
 11887                                  
 11888                                  ; entry: [daycnt] = number of days since 1-1-80
 11889                                  ;
 11890                                  ; return: ch - century in bcd
 11891                                  ;	  cl - year in bcd
 11892                                  ;	  dh - month in bcd
 11893                                  ;	  dl - day in bcd
 11894                                  
 11895                                  		; 20/12/2023 - Retro DOS v5.0
 11896                                  
 11897                                  		; 08/08/2023 (ds:) (near proc)
 11898                                  		; 16/10/2022 (cs:) (far proc)		
 11899 0000043A FF36[8904]              		push	word [daycnt] ; save daycnt
 11900 0000043E 813E[8904]891C          		cmp	word [daycnt], 7305 ; (365*20+(20/4))
 11901                                  					; # days from 1-1-1980 to 1-1-2000
 11902 00000444 7308                    		jnb	short century20
 11903                                  		;mov	byte [base_century], 19
 11904                                  		;mov	byte [base_year], 80
 11905                                  		; 08/08/2023
 11906 00000446 C706[8D04]1350          		mov	word [base_century], 5013h
 11907 0000044C EB0C                    		jmp	short years
 11908                                  ; ----------------------------------------------------------------------------
 11909                                  		
 11910                                  century20:				
 11911                                  		;mov	byte [base_century], 20
 11912                                  		;mov	byte [base_year], 0
 11913                                  		; 08/08/2023
 11914 0000044E C706[8D04]1400          		mov	word [base_century], 20
 11915 00000454 812E[8904]891C          		sub	word [daycnt], 7305 ; (365*20+(20/4))
 11916                                  					; adjust daycnt
 11917                                  years:					
 11918 0000045A 31D2                    		xor	dx, dx
 11919 0000045C A1[8904]                		mov	ax, [daycnt]
 11920 0000045F BBB505                  		mov	bx, 1461	; (366+365*3)
 11921                                  					; # of days in a Leap year block
 11922 00000462 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
 11923 00000464 8916[8904]              		mov	[daycnt], dx	; save daycnt left
 11924 00000468 B304                    		mov	bl, 4
 11925 0000046A F6E3                    		mul	bl		; AX = # of years. Less	than 100
 11926 0000046C 0006[8E04]              		add	[base_year], al ; So, ah = 0. Adjust year
 11927 00000470 FF06[8904]              		inc	word [daycnt]	; set daycnt to	1 base
 11928                                  		; 08/08/2023
 11929 00000474 BB6E01                  		mov	bx, 366
 11930 00000477 B90300                  		mov	cx, 3
 11931                                  		;cmp	word [daycnt], 366 ; daycnt=remainder of leap year
 11932 0000047A 391E[8904]              		cmp	[daycnt], bx ; 366
 11933 0000047E 7619                    		jbe	short leapyear	; within 366+355+355+355 days.
 11934 00000480 FE06[8E04]              		inc	byte [base_year] ; if daycnt <= 366, then leap year
 11935                                  		;sub	word [daycnt], 366 ; else daycnt--, base_year++ ;
 11936 00000484 291E[8904]              		sub	[daycnt], bx ; 366 ; 08/08/2023
 11937                                  		;mov	cx, 3		; And next three years are normal
 11938                                  		; 08/08/2023
 11939 00000488 4B                      		dec	bx ; 365
 11940                                  regularyear:	; 20/12/2023
 11941                                  		;cmp	word [daycnt], 365 ; for(i=1; i>3 or daycnt <=365; i++)
 11942 00000489 391E[8904]              		cmp	[daycnt], bx ; 365 ; 08/08/2023
 11943 0000048D 760F                    		jbe	short yeardone	; {if (daycnt >	365)
 11944 0000048F FE06[8E04]              		inc	byte [base_year] ; { daycnt -=	365
 11945                                  		;sub	word [daycnt], 365 ; }
 11946 00000493 291E[8904]              		sub	[daycnt], bx ; 365 ; 08/08/2023
 11947 00000497 E2F0                    		loop	regularyear	; }
 11948                                  					;
 11949                                  					; should never fall through loop
 11950                                  leapyear:	
 11951 00000499 C606[9004]1D            		mov	byte [february], 29 ; 08/08/2023			
 11952                                  		;mov	byte [month_tab+1], 29 ; leap year.
 11953                                  					; change month table.
 11954                                  yeardone:				
 11955 0000049E 31DB                    		xor	bx, bx
 11956 000004A0 31D2                    		xor	dx, dx
 11957 000004A2 A1[8904]                		mov	ax, [daycnt]
 11958                                  		;mov	si, offset month_tab
 11959 000004A5 BE[8F04]                		mov	si, month_tab	; 19/10/2022
 11960                                  		;mov	cx, 12
 11961                                  		; 08/08/2023
 11962 000004A8 B10C                    		mov	cl, 12
 11963                                  months:					
 11964 000004AA FEC3                    		inc	bl
 11965                                  		; 08/08/2023
 11966 000004AC 8A14                    		mov	dl, [si]	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:04B7h
 11967 000004AE 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
 11968                                  					; dh=0
 11969 000004B0 7605                    		jbe	short month_done
 11970 000004B2 46                      		inc	si		; next month
 11971 000004B3 29D0                    		sub	ax, dx		; adjust daycnt
 11972 000004B5 E2F3                    		loop	months		;
 11973                                  					; should never fall through loop
 11974                                  month_done:	
 11975 000004B7 C606[9004]1C            		mov	byte [february], 28 ; 08/08/2023
 11976                                  		;mov	byte [month_tab+1], 28
 11977                                  					; restore month table value
 11978 000004BC 88DA                    		mov	dl, bl
 11979 000004BE 8A36[8E04]              		mov	dh, [base_year]
 11980 000004C2 8A0E[8D04]              		mov	cl, [base_century] ; al=day,dl=month,dh=year,cl=cntry
 11981 000004C6 E81600                  		call	bintobcd	; convert "day"	to bcd
 11982                                  					; dl = bcd day,	al = month
 11983 000004C9 86D0                    		xchg	dl, al
 11984 000004CB E81100                  		call	bintobcd	; dh = bcd month, al = year
 11985 000004CE 86F0                    		xchg	dh, al
 11986 000004D0 E80C00                  		call	bintobcd	; cl = bcd year, al = century
 11987 000004D3 86C8                    		xchg	cl, al
 11988 000004D5 E80700                  		call	bintobcd	; ch = bcd century
 11989 000004D8 88C5                    		mov	ch, al
 11990 000004DA 8F06[8904]              		pop	word [daycnt] ; restore original value
 11991 000004DE C3                      		retn
 11992                                  
 11993                                  ;----------------------------------------------------------------------------
 11994                                  
 11995                                  bintobcd:	; proc near		; real time clock support
 11996                                  
 11997                                  ;convert a binary input in al (less than 63h or 99 decimal)
 11998                                  ;into a bcd value in al. ah destroyed.	
 11999                                  		
 12000 000004DF D40A                    		aam			; AH = AL/10, AL = AL MOD 10
 12001 000004E1 D510                    		aad     10h             ; db 0D5h,10h
 12002                                  					; AL = (AH*10H)+AL, AH = 0
 12003 000004E3 C3                      		retn
 12004                                  %endif
 12005                                  
 12006                                  ;----------------------------------------------------------------------------
 12007                                  
 12008                                  ; 15/10/2022
 12009                                  
 12010                                  ;----------------------------------------------------------------------------
 12011                                  ; gettime reads date and time
 12012                                  ; and returns the following information:
 12013                                  ;
 12014                                  ;	es:[di]  =count of days since 1-1-80
 12015                                  ;	es:[di+2]=hours
 12016                                  ;	es:[di+3]=minutes
 12017                                  ;	es:[di+4]=seconds
 12018                                  ;	es:[di+5]=hundredths of seconds
 12019                                  ;
 12020                                  ;	NOTE: Any changes in this routine probably require corresponding
 12021                                  ;	changes in the version that is built with the power manager driver.
 12022                                  ;	See ptime.asm.
 12023                                  ;----------------------------------------------------------------------------
 12024                                  
 12025                                  tim_read:				; 2C7h:435h = 70h:29A5h
 12026 000004E4 E84A00                  		call	GetTickCnt
 12027 000004E7 8B36[8904]              		mov	si, [daycnt]
 12028                                  
 12029                                  ; we now need to convert the time in tick to the time in 100th of
 12030                                  ; seconds. the relation between tick and seconds is:
 12031                                  ;
 12032                                  ;		 65,536 seconds
 12033                                  ;	       ----------------
 12034                                  ;		1,193,180 tick
 12035                                  ;
 12036                                  ; to get to 100th of second we need to multiply by 100. the equation is:
 12037                                  ;
 12038                                  ;	ticks from clock  * 65,536 * 100
 12039                                  ;      --------------------------------- = time in 100th of seconds
 12040                                  ;		1,193,180
 12041                                  ;
 12042                                  ; fortunately this formula simplifies to:
 12043                                  ;
 12044                                  ;	ticks from clock * 5 * 65,536
 12045                                  ;      --------------------------------- = time in 100th of seconds
 12046                                  ;		59,659
 12047                                  ;
 12048                                  ; the calculation is done by first multipling tick by 5. next we divide by
 12049                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
 12050                                  ; my 16 bits to the left.
 12051                                  ;
 12052                                  ; start with ticks in cx:dx
 12053                                  ; multiply by 5
 12054                                  
 12055 000004EB 89C8                    		mov	ax, cx
 12056 000004ED 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
 12057                                  					; multiply by 5
 12058 000004EF D1E2                    		shl	dx, 1
 12059 000004F1 D1D1                    		rcl	cx, 1		; times	2
 12060 000004F3 D1E2                    		shl	dx, 1
 12061 000004F5 D1D1                    		rcl	cx, 1		; times	4
 12062 000004F7 01DA                    		add	dx, bx
 12063 000004F9 11C8                    		adc	ax, cx		; times	5
 12064 000004FB 92                      		xchg	ax, dx
 12065                                  
 12066                                  ; now have ticks * 5 in	dx:ax
 12067                                  ; we now need to multiply by 65536 and divide by 59659 d.
 12068                                  
 12069 000004FC B90BE9                  		mov	cx, 59659	; get divisor
 12070 000004FF F7F1                    		div	cx		; dx now has remainder
 12071                                  					; ax has high word of final quotient
 12072                                  
 12073                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 12074                                  		;mov	bx, ax		; put high word	in safe	place
 12075 00000501 93                      		xchg	bx, ax
 12076 00000502 31C0                    		xor	ax, ax		; this is the multiply by 65536
 12077 00000504 F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
 12078                                  
 12079                                  ; rounding based on the	remainder may be added here
 12080                                  ; the result in	bx:ax is time in 1/100 second.
 12081                                  
 12082 00000506 89DA                    		mov	dx, bx		
 12083 00000508 B9C800                  		mov	cx, 200		; extract 1/100's
 12084                                  
 12085                                  ; division by 200 is necessary to ensure no overflow--max result
 12086                                  ; is number of seconds in a day/2 = 43200.
 12087                                  
 12088 0000050B F7F1                    		div	cx
 12089 0000050D 80FA64                  		cmp	dl, 100		; remainder over 100?
 12090 00000510 7203                    		jb	short noadj
 12091 00000512 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
 12092                                  noadj:					
 12093 00000515 F5                      		cmc			; if we	subtracted 100,	carry is now set
 12094 00000516 88D3                    		mov	bl, dl		; save 1/100's
 12095                                  
 12096                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
 12097                                  ; by two, shifting a one in if the remainder had exceeded 100.
 12098                                  
 12099 00000518 D1D0                    		rcl	ax, 1		
 12100 0000051A B200                    		mov	dl, 0
 12101 0000051C D1D2                    		rcl	dx, 1
 12102                                  		;mov	cx, 60		; divide out seconds
 12103                                  		; 20/12/2023
 12104 0000051E B13C                    		mov	cl, 60
 12105 00000520 F7F1                    		div	cx
 12106 00000522 88D7                    		mov	bh, dl		; save the seconds
 12107 00000524 F6F1                    		div	cl		; break	into hours and minutes
 12108 00000526 86C4                    		xchg	al, ah
 12109                                  
 12110                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
 12111                                  
 12112                                  		; 08/08/2023
 12113                                  		;push	ax
 12114                                  		;mov	ax, si		; daycnt
 12115 00000528 96                      		xchg	ax, si
 12116 00000529 AB                      		stosw
 12117                                  		;pop	ax
 12118 0000052A 96                      		xchg	ax, si		; al = hours, ah = minutes
 12119 0000052B AB                      		stosw
 12120 0000052C 89D8                    		mov	ax, bx
 12121 0000052E AB                      		stosw
 12122 0000052F F8                      		clc			; [es:di] = count of days since 1-1-80
 12123                                  					;   [es:di+2] = hours
 12124                                  					;   [es:di+3] = minutes
 12125                                  					;   [es:di+4] = seconds
 12126                                  					;   [es:di+5] = hundredths of seconds
 12127 00000530 C3                      		retn
 12128                                  
 12129                                  ; =============== S U B	R O U T	I N E =======================================
 12130                                  
 12131                                  ; 15/10/2022
 12132                                  
 12133                                  ;----------------------------------------------------------------------------
 12134                                  ;
 12135                                  ; procedure : GetTickCnt
 12136                                  ;
 12137                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
 12138                                  ;		of rollover [except when power management driver is in use]. 
 12139                                  ;		Uses the following logic for updating Daycnt
 12140                                  ;
 12141                                  ;		if ( rollover ) {
 12142                                  ;			if ( t_switch )
 12143                                  ;				daycnt++ ;
 12144                                  ;			else
 12145                                  ;				daycnt += rollover ;
 12146                                  ;		}
 12147                                  ;
 12148                                  ; USES : AX
 12149                                  ;
 12150                                  ; RETURNS : CX:DX - tick count
 12151                                  ; MODIFIES : daycnt
 12152                                  ;
 12153                                  ;----------------------------------------------------------------------------
 12154                                  
 12155                                  		; 17/10/2022
 12156                                  GetTickCnt:
 12157 00000531 30E4                    		xor	ah, ah
 12158 00000533 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
 12159                                  					; Return: CX:DX	= clock	count
 12160                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
 12161                                  					; midnight
 12162                                  					; Otherwise, AL	> 0
 12163                                  		; 20/12/2023
 12164 00000535 30E4                    		xor	ah, ah
 12165 00000537 3826[8B04]              		cmp	byte [t_switch], ah ; 0
 12166                                  		;cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
 12167 0000053B 7505                    		jnz	short inc_case	; old method assumes that Int 1Ah returns rollover flag
 12168                                  		;xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
 12169                                  					; and not flag
 12170 0000053D 0106[8904]              		add	[daycnt], ax
 12171 00000541 C3                      		retn
 12172                                  ; ---------------------------------------------------------------------------
 12173                                  
 12174                                  inc_case:
 12175 00000542 08C0                    		or	al, al
 12176 00000544 7404                    		jz	short no_rollover
 12177 00000546 FF06[8904]              		inc	word [daycnt]
 12178                                  no_rollover:
 12179 0000054A C3                      		retn
 12180                                  
 12181                                  ; ---------------------------------------------------------------------------
 12182                                  ; ---------------------------------------------------------------------------
 12183                                  ; 03/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12184                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0556h
 12185                                  
 12186                                  %if 1
 12187                                  
 12188 0000054B 4641543132202020        fat_12_id:	db 'FAT12   '
 12189 00000553 4641543136202020        fat_16_id:	db 'FAT16   '
 12190 0000055B 4641543332202020        fat_32_id:	db 'FAT32   '
 12191 00000563 4E4F204E414D452020-     nul_vid:	db 'NO NAME    '
 12191 0000056C 2020               
 12192                                  
 12193                                  %endif
 12194                                  
 12195                                  ;----------------------------------------------------------------------------
 12196                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
 12197                                  ;----------------------------------------------------------------------------
 12198                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12199                                  ; 09/03/2019 - Retro DOS v4.0
 12200                                  
 12201                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
 12202                                  ; 26/05/2018 - Retro DOS v3.0
 12203                                  ; 23/03/2018 - Retro DOS v2.0
 12204                                  
 12205                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
 12206                                  
 12207                                  ;struc BPB_TYPE
 12208                                  ;.SECSIZE:	resw 1
 12209                                  ;.SECALL:	resb 1
 12210                                  ;.RESNUM:	resw 1
 12211                                  ;.FATNUM:	resb 1
 12212                                  ;.DIRNUM:	resw 1
 12213                                  ;.SECNUM:	resw 1
 12214                                  ;.FATID:	resb 1
 12215                                  ;.FATSIZE:	resw 1
 12216                                  ;.SLIM:		resw 1
 12217                                  ;.HLIM:		resw 1
 12218                                  ;.HIDDEN:	resw 1
 12219                                  ;.size:
 12220                                  ;endstruc
 12221                                  
 12222                                  ;-----------------------------------------------------------------
 12223                                  ;	disk interface routines
 12224                                  ;-----------------------------------------------------------------
 12225                                  
 12226                                  ; device attribute bits:
 12227                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
 12228                                  
 12229                                  ;MAXERR		equ	5
 12230                                  ;MAX_HD_FMT_ERR	equ	2
 12231                                  
 12232                                  ;LSTDRV	equ 504h
 12233                                  
 12234                                  ; some floppies do not have changeline. as a result, media-check would
 12235                                  ; normally return i-don't-know, the dos would continually reread the fat and
 12236                                  ; discard cached data. we optimize this by implementing a logical door-latch:
 12237                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
 12238                                  ; the time of the last successful disk operation and compare it with the current
 12239                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
 12240                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
 12241                                  ; since we cannot trust the timer to be always available, we record the number 
 12242                                  ; of media checks that have occurred when no apparent time has elapsed. while
 12243                                  ; this number is < a given threshold, we say no change. when it exceeds that
 12244                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
 12245                                  ; the time of last successful access, if we see that time has passed too,
 12246                                  ; we reset the counter.
 12247                                  
 12248                                  accessmax	equ	5
 12249                                  
 12250                                  ; due to various bogosities, we need to continually adjust what the head
 12251                                  ; settle time is.  the following algorithm is used:
 12252                                  ;
 12253                                  ;   get the current head settle value.
 12254                                  ;   if it is 0, then
 12255                                  ;	set slow = 15
 12256                                  ;   else
 12257                                  ;	set slow = value
 12258                                  ;   ...
 12259                                  ;*********************************************
 12260                                  ;************ old algorithm ******************
 12261                                  ;*   if we are seeking and writing then
 12262                                  ;*	 use slow
 12263                                  ;*   else
 12264                                  ;*	 use fast
 12265                                  ;*********************************************
 12266                                  ;*********** ibm's requested logic ***********
 12267                                  ;   if we are seeking and writing and not on an at then
 12268                                  ;	use slow
 12269                                  ;   else
 12270                                  ;	use fast
 12271                                  ;   ...
 12272                                  ;   restore current head settle value
 12273                                  ;
 12274                                  ;
 12275                                  ;---------------------------------------
 12276                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
 12277                                  					; it on after handling config.sys file as a
 12278                                  					; default value, if multrk_flag = multrk_off1.
 12279                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
 12280                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
 12281                                  
 12282                                  ; close data segment, open Bios_Code segment
 12283                                  
 12284                                  ; 15/10/2022
 12285                                  
 12286                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
 12287                                  
 12288                                  ;-----------------------------------------------------------------
 12289                                  ;	command jump table
 12290                                  ;-----------------------------------------------------------------
 12291                                  
 12292 0000056E 00                      		db 0
 12293                                  
 12294                                  ; 11/12/2022
 12295                                  %if 0
 12296                                  
 12297                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
 12298                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
 12299                                  		dw 1742h		; dsk_init
 12300                                  		dw 4EBh			; media_chk
 12301                                  		dw 592h			; get_bpb
 12302                                  		dw 0D5h			; bc_cmderr
 12303                                  		dw 857h			; dsk_read
 12304                                  		dw 83Dh			; x_bus_exit
 12305                                  		dw 558h			; ret_carry_clear
 12306                                  		dw 558h			; ret_carry_clear
 12307                                  		dw 849h			; dsk_writ
 12308                                  		dw 841h			; dsk_writv
 12309                                  		dw 558h			; ret_carry_clear
 12310                                  		dw 558h			; ret_carry_clear
 12311                                  		dw 0D5h			; bc_cmderr
 12312                                  		dw 80Ah			; dsk_open
 12313                                  		dw 81Ah			; dsk_close
 12314                                  		dw 831h			; dsk_rem
 12315                                  		dw 558h			; ret_carry_clear
 12316                                  		dw 558h			; ret_carry_clear
 12317                                  		dw 558h			; ret_carry_clear
 12318                                  		dw 0C6Bh		; do_generic_ioctl
 12319                                  		dw 558h			; ret_carry_clear
 12320                                  		dw 558h			; ret_carry_clear
 12321                                  		dw 558h			; ret_carry_clear
 12322                                  		dw 1124h		; ioctl_getown
 12323                                  		dw 1142h		; ioctl_setown
 12324                                  		dw 129Ah		; ioctl_support_query
 12325                                  
 12326                                  ;dtbl_siz equ $-dsktbl
 12327                                  
 12328                                  %endif
 12329                                  
 12330                                  ; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12331                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0579h		
 12332                                  
 12333                                  		; 21/12/2023 - Retro DOS v5.0
 12334                                  		; 11/12/2022
 12335 0000056F 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
 12336 00000570 [4A1A]                  		dw dsk_init
 12337 00000572 [B805]                  		dw media_chk
 12338 00000574 [5706]                  		dw get_bpb
 12339                                  		;dw bc_cmderr
 12340 00000576 [4A0E]                  		dw ioctl_input ; PCDOS 7 ; 21/12/2023
 12341 00000578 [7209]                  		dw dsk_read
 12342 0000057A [5809]                  		dw x_bus_exit
 12343 0000057C [2206]                  		dw ret_carry_clear
 12344 0000057E [2206]                  		dw ret_carry_clear
 12345 00000580 [6409]                  		dw dsk_writ
 12346 00000582 [5C09]                  		dw dsk_writv
 12347 00000584 [2206]                  		dw ret_carry_clear
 12348 00000586 [2206]                  		dw ret_carry_clear
 12349                                  		;dw bc_cmderr
 12350 00000588 [F70D]                  		dw ioctl_output ; PCDOS 7 ; 21/12/2023
 12351 0000058A [2909]                  		dw dsk_open
 12352 0000058C [3809]                  		dw dsk_close
 12353 0000058E [4E09]                  		dw dsk_rem
 12354 00000590 [2206]                  		dw ret_carry_clear
 12355 00000592 [2206]                  		dw ret_carry_clear
 12356 00000594 [2206]                  		dw ret_carry_clear
 12357 00000596 [CC0E]                  		dw do_generic_ioctl
 12358 00000598 [2206]                  		dw ret_carry_clear
 12359 0000059A [2206]                  		dw ret_carry_clear
 12360 0000059C [2206]                  		dw ret_carry_clear
 12361 0000059E [A713]                  		dw ioctl_getown
 12362 000005A0 [C413]                  		dw ioctl_setown
 12363 000005A2 [1C15]                  		dw ioctl_support_query
 12364                                  
 12365                                  dtbl_siz equ $-dsktbl
 12366                                  
 12367                                  ; =============== S U B	R O U T	I N E =======================================
 12368                                  
 12369                                  ; ---------------------------------------------------------------------------
 12370                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
 12371                                  ; the one that belongs to the drive specified. carry is set if none exists
 12372                                  ; for the drive. Pointer is returned in es:[di]
 12373                                  ;
 12374                                  ;  AL contains the logical drive number.
 12375                                  ; ---------------------------------------------------------------------------
 12376                                  
 12377                                  SetDrive:
 12378                                  		;les	di, dword ptr ds:start_bds ; Point es:di to first bds
 12379 000005A4 C43E[1901]              		les	di, [start_bds] ; 19/10/2022
 12380                                  X_Scan_Loop:
 12381 000005A8 26384505                		cmp	[es:di+5], al	
 12382 000005AC 7409                    		jz	short X_SetDrv
 12383 000005AE 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
 12384 000005B1 83FFFF                  		cmp	di, 0FFFFh
 12385 000005B4 75F2                    		jnz	short X_Scan_Loop
 12386 000005B6 F9                      		stc
 12387                                  X_SetDrv:
 12388 000005B7 C3                      		retn
 12389                                  
 12390                                  ; ---------------------------------------------------------------------------
 12391                                  
 12392                                  ; 15/10/2022
 12393                                  
 12394                                  	; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12395                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05C2h
 12396                                  
 12397                                  ; ---------------------------------------------------------------------
 12398                                  ; if id is f9, have a 96tpi disk else
 12399                                  ; if bit 2 is 0 then media is not removable and could not have changed
 12400                                  ;  otherwise if within 2 secs of last disk operation media could not
 12401                                  ;    have changed, otherwise dont know if media has changed
 12402                                  ; ---------------------------------------------------------------------
 12403                                  
 12404                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
 12405 000005B8 E8E9FF                  		call	SetDrive
 12406 000005BB BE0100                  		mov	si, 1
 12407                                  		; 21/12/2023
 12408 000005BE 26F6454001              		test	byte [es:di+40h], 1
 12409                                  		;test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
 12410                                  					; fchanged_by_format
 12411 000005C3 7415                    		jz	short WeAreNotFakingIt
 12412                                  		; 21/12/2023
 12413 000005C5 26806540FE              		and	byte [es:di+40h], 0FEh
 12414                                  		; 12/12/2022
 12415                                  		;and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
 12416                                  		;;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
 12417                                  					; ~fchanged_by_format ;	reset flag
 12418 000005CA C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
 12419                                  					; Ensure that we ask the rom if media has changed
 12420                                  		; 21/12/2023
 12421 000005CF 26F6453F01              		test	byte [es:di+3Fh], 1
 12422                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 12423                                  					; fnon_removable
 12424 000005D4 740B                    		jz	short wehaveafloppy
 12425                                  		;mov	si, 0FFFFh	; Indicate media changed
 12426                                  		; 11/08/2023
 12427 000005D6 F7DE                    		neg	si		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05E0h
 12428 000005D8 EB2B                    		jmp	short Media_Done ; Media_Done
 12429                                  ; ---------------------------------------------------------------------------
 12430                                  
 12431                                  WeAreNotFakingIt:
 12432                                  		; 21/12/2023
 12433 000005DA 26F6453F01              		test	byte [es:di+3Fh], 1
 12434                                  		;test	byte [es:di+BDS.flags], fnon_removable			
 12435                                  		;test	byte [es:di+23h], 1
 12436 000005DF 7524                    		jnz	short Media_Done
 12437                                  wehaveafloppy:
 12438                                  		;xor	si, si ; 0	; Presume "I don't know"
 12439                                  		; 11/08/2023
 12440 000005E1 4E                      		dec	si ; 0 		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05EBh
 12441                                  
 12442                                  		; If we have a floppy with changeline support, we ask the ROM
 12443                                  		; to determine if media has changed. We do not perform the
 12444                                  		; 2 second check for these drives.
 12445                                  
 12446 000005E2 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
 12447 000005E7 740A                    		jz	short mChk_NoChangeLine	; Brif not
 12448 000005E9 E83615                  		call	mediacheck	;  Call	into removable routine
 12449 000005EC 7236                    		jb	short err_exitj
 12450 000005EE E89A16                  		call	haschange
 12451 000005F1 7512                    		jnz	short Media_Done
 12452                                  mChk_NoChangeLine:
 12453                                  		; If we come here, we have a floppy with no changeline support
 12454                                  			
 12455 000005F3 BE0100                  		mov	si, 1		; Presume no change
 12456 000005F6 A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
 12457 000005F9 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
 12458                                  					; Is drive of last access the same?
 12459 000005FD 7505                    		jnz	short Media_Unk	; No, then "i don't know"
 12460 000005FF E82800                  		call	Check_Time_Of_Access
 12461 00000602 EB01                    		jmp	short Media_Done
 12462                                  ; ---------------------------------------------------------------------------
 12463                                  
 12464                                  Media_Unk:
 12465 00000604 4E                      		dec	si		; 0 ; Return "I don't know"
 12466                                  
 12467                                  		; SI now contains the correct value for media change.
 12468                                  		; Clean up the left overs
 12469                                  Media_Done:
 12470                                  		; 19/10/2022
 12471 00000605 06                      		push	es
 12472 00000606 C41E[1200]              		les	bx, [ptrsav]
 12473 0000060A 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
 12474 0000060E 07                      		pop	es
 12475 0000060F 09F6                    		or	si, si
 12476 00000611 790F                    		jns	short ret_carry_clear ;	volidok
 12477 00000613 803E[7700]00            		cmp	byte [fhave96], 0
 12478 00000618 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
 12479 0000061A E80016                  		call	media_set_vid
 12480                                  mChk1_NoChangeLine:
 12481 0000061D C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
 12482                                  					; Make sure we ask rom for media check
 12483                                  ret_carry_clear:			
 12484 00000622 F8                      		clc			; volidok
 12485 00000623 C3                      		retn
 12486                                  ; ---------------------------------------------------------------------------
 12487                                  
 12488                                  err_exitj:
 12489 00000624 E88207                  		call	maperror	; guaranteed to	set carry
 12490                                  ret81:					
 12491 00000627 B481                    		mov	ah, 81h		; return error status
 12492 00000629 C3                      		retn			; return with carry set
 12493                                  
 12494                                  ; =============== S U B	R O U T	I N E =======================================
 12495                                  
 12496                                  ; ---------------------------------------------------------------------------
 12497                                  ; perform a check on the time passed since the last access for this physical
 12498                                  ; drive.
 12499                                  ; we are accessing the same drive. if the time of last successful access was
 12500                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
 12501                                  ; returns in si:
 12502                                  ;	0 - if time of last access was >= 2 seconds
 12503                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
 12504                                  ; registers affected ax,cx,dx, flags.
 12505                                  ;
 12506                                  ;	assume es:di -> bds, ds->Bios_Data
 12507                                  ; ---------------------------------------------------------------------------
 12508                                  
 12509                                  		; 21/12/2023 - Retro DOS v5.0 IBMBIO.COM
 12510                                  		; 19/10/2022
 12511                                  Check_Time_Of_Access:
 12512 0000062A BE0100                  		mov	si, 1		; presume no change.
 12513 0000062D E801FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
 12514                                  		; 21/12/2023
 12515 00000630 268B4579                		mov	ax, [es:di+79h]
 12516                                  		;mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
 12517                                  					; get stored time
 12518 00000634 29C2                    		sub	dx, ax
 12519                                  		; 21/12/2023
 12520 00000636 268B457B                		mov	ax, [es:di+7Bh]
 12521                                  		;mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
 12522 0000063A 19C1                    		sbb	cx, ax
 12523                                  		; 11/08/2023
 12524                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0646h
 12525                                  		;mov	al, [accesscount]
 12526 0000063C 7515                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
 12527 0000063E 09D2                    		or	dx, dx		; time must pass
 12528 00000640 750C                    		jnz	short timepassed ; yes, examine max value
 12529                                  		; 11/08/2023
 12530                                  		;inc	al
 12531                                  		;cmp	al, 5
 12532                                  		;;inc	byte [accesscount]
 12533                                  		;;cmp	byte [accesscount], 5
 12534                                  		;			; if count is less than threshold, ok
 12535                                  		;jb	short timecheck_ret
 12536                                  		;;dec	byte [accesscount] ; don't let the count wrap
 12537                                  		; 11/08/2023
 12538                                  		;dec	al
 12539                                  		;jmp	short timecheck_unk ; "i don't know" if media changed
 12540                                  		; 11/08/2023
 12541 00000642 803E[1D01]04            		cmp	byte [accesscount], 4
 12542 00000647 730A                    		jnb	short timecheck_unk
 12543 00000649 FE06[1D01]              		inc	byte [accesscount]
 12544 0000064D C3                      		retn
 12545                                  
 12546                                  ; ---------------------------------------------------------------------------
 12547                                  
 12548                                  timepassed:
 12549 0000064E 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
 12550                                  					; min elapsed time? (2 seconds)
 12551 00000651 7601                    		jbe	short timecheck_ret ; yes, presume no change
 12552                                  
 12553                                  		; everything indicates that we do not know what has happened.
 12554                                  timecheck_unk:
 12555 00000653 4E                      		dec	si		; presume i don't know
 12556                                  timecheck_ret:
 12557                                  		; 11/08/2023
 12558                                  		;mov	[accesscount], al
 12559 00000654 C3                      		retn
 12560                                  
 12561                                  ; ---------------------------------------------------------------------------
 12562                                  ; 15/10/2022
 12563                                  Err_Exitj2:
 12564 00000655 EBCD                    		jmp	short err_exitj
 12565                                  
 12566                                  ; ---------------------------------------------------------------------------
 12567                                  
 12568                                  ; 15/10/2022
 12569                                  
 12570                                  ; ==========================================================================
 12571                                  ; Build a valid bpb for the disk in the drive.
 12572                                  ; ==========================================================================
 12573                                  
 12574                                  		; 21/12/2023 - Retro DOS v5.0 IBMBIO.COM
 12575                                  		; 19/10/2022
 12576                                  get_bpb:				; 2C7h:592h = 70h:2B02h
 12577 00000657 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
 12578 0000065A E847FF                  		call	SetDrive	; get the correct bds for the drive
 12579                                  		; 21/12/2023
 12580 0000065D 26F6453F01              		test	byte [es:di+3Fh], 1
 12581                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 12582                                  					; fnon_removable
 12583 00000662 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
 12584                                  
 12585                                  		; let's set the default value for volid,vol_serial,
 12586                                  		; filesys_id in bds table
 12587                                  
 12588 00000664 E83600                  		call	clear_ids
 12589                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
 12590 00000667 C606[9B04]01            		mov	byte [set_id_flag], 1
 12591 0000066C E86700                  		call	GetBp		; build	a bpb if necessary
 12592 0000066F 72B6                    		jb	short ret81
 12593                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
 12594 00000671 803E[9B04]02            		cmp	byte [set_id_flag], 2
 12595                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
 12596 00000676 C606[9B04]00            		mov	byte [set_id_flag], 0
 12597 0000067B 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
 12598                                  					; otherwise, conventional boot record
 12599                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
 12600 0000067D 803E[7700]00            		cmp	byte [fhave96], 0
 12601 00000682 7403                    		jz	short already_gotbpb ; brif not
 12602 00000684 E80A16                  		call	set_volume_id
 12603                                  already_gotbpb:
 12604 00000687 83C706                  		add	di, 6		; BDS.BPB
 12605                                  					; return the bpb from the current bds
 12606                                  
 12607                                  ;		fall into setptrsav, es:di -> result
 12608                                  
 12609                                  ; ---------------------------------------------------------------------------
 12610                                  
 12611                                  ; 15/10/2022
 12612                                  
 12613                                  ; ==========================================================================
 12614                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
 12615                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
 12616                                  ;Note that this works in most cases because most pointers are in Bios_Data.
 12617                                  ;It fails, for instance, when we install an external drive using driver.sys
 12618                                  ;because then the BDS segment is no longer Bios_Data. 
 12619                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
 12620                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
 12621                                  ;restored before returning to the caller.
 12622                                  ; ==========================================================================
 12623                                  
 12624                                  ; 21/12/2023
 12625                                  %if 0
 12626                                  		; 19/10/2022
 12627                                  SetPtrSav:	; return point for dsk_init
 12628                                  		mov	cx, es		; save es
 12629                                  		;les	bx, ds:ptrsav
 12630                                  		les	bx, [ptrsav]
 12631                                  		mov	[es:bx+0Dh], ah	; [es:bx+media]
 12632                                  		mov	[es:bx+12h], di	; [es:bx+count]
 12633                                  		mov	[es:bx+14h], cx	; [es:bx+count+2]
 12634                                  		clc
 12635                                  		retn
 12636                                  %endif
 12637                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12638                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0698h
 12639                                  SetPtrSav:	
 12640                                  		; return point for dsk_init
 12641 0000068A 1E                      		push	ds
 12642                                  		;lds	bx, ds:ptrsav
 12643 0000068B C51E[1200]              		lds	bx, [ptrsav]
 12644 0000068F 88670D                  		mov	[bx+0Dh], ah	; [bx+media]
 12645 00000692 897F12                  		mov	[bx+12h], di	; [bx+count]
 12646 00000695 8C4714                  		mov	[bx+14h], es	; [bx+count+2]
 12647 00000698 1E                      		push	ds
 12648 00000699 07                      		pop	es
 12649 0000069A 1F                      		pop	ds
 12650 0000069B F8                      		clc
 12651 0000069C C3                      		retn
 12652                                  
 12653                                  ; =============== S U B	R O U T	I N E =======================================
 12654                                  
 12655                                  ; 15/10/2022
 12656                                  
 12657                                  ; -----------------------------------------------------
 12658                                  ; clear ids in bds table. only applied for floppies.
 12659                                  ;input:  es:di -> bds table
 12660                                  ;	assumes ds: -> Bios_Data
 12661                                  ;output: volid set to "NO NAME    "
 12662                                  ;	 vol_serial set to 0.
 12663                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
 12664                                  ;	   depending on the flag fatsize in bds.
 12665                                  ;
 12666                                  ;	trashes si, cx
 12667                                  ; -----------------------------------------------------
 12668                                  
 12669                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
 12670                                  ;size_of_EXT_SYSTEM_ID equ 8
 12671                                  
 12672                                  ; 11/09/2023
 12673                                  ; 14/08/2023
 12674                                  ;BDS.fatsiz equ 1Fh
 12675                                  ; 21/12/2023
 12676                                  ;BDS.fatsiz equ 59
 12677                                  
 12678                                  		; 22/12/2023
 12679                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12680                                  clear_ids:
 12681                                  		;mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
 12682                                  		; 21/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM BugFix)
 12683 0000069D 268A5D3B                		mov	bl, [es:di+3Bh] ; mov bl,[es:di+BDS.fatsiz]; *+
 12684                                  clear_ids_x:
 12685                                  		; 21/12/2023 
 12686                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:06ABh)
 12687                                  		; 11/09/2023		
 12688                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
 12689 000006A1 57                      		push	di
 12690 000006A2 31C9                    		xor	cx, cx		; no serial number
 12691                                  		; 21/12/2023
 12692 000006A4 26898D8900              		mov	[es:di+89h], cx	; [es:di+BDS.vol_serial]
 12693 000006A9 26898D8B00              		mov	[es:di+8Bh], cx	; [es:di+BDS.vol_serial+2]
 12694                                  		;mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 12695                                  		;mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 12696                                  
 12697                                  		; BUGBUG - there's a lot in common here and with
 12698                                  		; mov_media_ids.. see if we can save some space by
 12699                                  		; merging them... jgl
 12700                                  
 12701                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 12702                                  		; 10/12/2022
 12703 000006AE B10B                    		mov	cl, 11 ; cx = 11
 12704                                  
 12705                                  		;;mov	si, offset vol_no_name ; "NO NAME    "
 12706                                  		;mov	si, vol_no_name	; 19/10/2022
 12707                                  		; 22/12/2023
 12708                                  		;mov	si, offset nul_vid ; "NO NAME    "
 12709 000006B0 BE[6305]                		mov	si, nul_vid
 12710                                  
 12711                                  		; 21/12/2023
 12712 000006B3 83C77D                  		add	di, 125
 12713                                  		;add	di, 75		; BDS.volid
 12714                                  		
 12715                                  		;rep movsb
 12716                                  		; 21/12/2023
 12717                                  		;rep movs byte ptr es:[di], byte ptr cs:[si] ; cs rep movsb
 12718                                  		; 26/12/2023
 12719                                  		;cs	; vol_no_name is in BIOSCODE segment
 12720                                  		;rep movsb
 12721 000006B6 F3                      		rep
 12722 000006B7 2E                      		cs
 12723 000006B8 A4                      		movsb
 12724                                  
 12725                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
 12726                                  		;;test	byte [es:di+BDS.fatsiz], fbig
 12727                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
 12728                                  		;test	byte [es:di+1Fh], 40h
 12729                                  		; 21/12/2023 - Retro DOS v5.0
 12730                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h)
 12731                                  		;test	byte [es:di+59], 20h 
 12732                                  			; (here, es:di points to the BDS offset +136)
 12733                                  			; purpose: test byte [es:di+BDS.fatsiz], fbigbig
 12734                                  			; applied: test byte [es:BDS.fatsiz+136], fbigbig -BUG!-
 12735                                  
 12736                                  			; (PCDOS 7.1 BUG note: 26/06/2023 - Erdogan Tan)
 12737                                  			;; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
 12738                                  			; Microsoft/IBM code has a bug here because the BDS's
 12739                                  			; .volid and .filesys_id fields will be reset
 12740                                  			; (to their default text) according to 'BDS.fatsiz' flags
 12741                                  			; at the BDS offset 59 but current (this) code checks flags
 12742                                  			; at ES:DI+59 while DI points the BDS offset 136!? ; (PCDOS 7.1)
 12743                                  			;; at the BDS offset 31 but current (this) code checks flags
 12744                                  			;; at ES:DI+31 while DI points the BDS offset 86!? ; (MSDOS 6.22)
 12745                                  			;
 12746                                  			; Correct Code:
 12747                                  			; ;test byte [ES:59],20h or [ES:BDS.fatsiz],fbigbig  ; (PCDOS 7.1)	
 12748                                  			; ;;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig  ; (MSDOS 6.22)
 12749                                  			; 11/09/2023
 12750                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
 12751                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
 12752                                  			;
 12753                                  			; Same BUG is existing in MSDOS 6.22 IO.SYS - BIOSCODE:05EFh
 12754                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
 12755                                  
 12756                                  			;
 12757                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
 12758                                  			; 'clear_ids' is used for floppy disks only and the default
 12759                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
 12760                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
 12761                                  
 12762                                  		; 21/12/2023 - Retro DOS v5.0
 12763                                  		;mov	si, offset fat_32_id ; "FAT32   "
 12764 000006B9 BE[5B05]                		mov	si, fat_32_id	
 12765                                  
 12766                                  		; 21/12/2023
 12767                                  		; BugFix (of the PCDOS 7.1 IBMBIO.COM BUG) ; *+
 12768                                  		;test	bl, fbigbig ; FAT32 flag
 12769 000006BC F6C320                  		test	bl, 20h ; * ; BL = [es:BDS.fatsiz] = [es:59]
 12770 000006BF 750B                    		jnz	short ci_bigfat
 12771                                  
 12772                                  		;mov	si, offset fat_16_id ; "FAT16	"
 12773 000006C1 BE[5305]                		mov	si, fat_16_id	; 19/10/2022
 12774                                  		
 12775                                  		; 21/12/2023
 12776                                  		; !BUG! (PCDOS 7.1 IBMBIO.COM BIOSCODE:06CDh)
 12777                                  		;test	byte [es:di+59], 40h ; [es:di+BDS.fatsiz], fbig
 12778                                  		; BugFix ; *+
 12779                                  		;test	bl, fbig ; FAT16 flag
 12780 000006C4 F6C340                  		test	bl, 40h ; * ; Retro DOS v5.0
 12781                                  		;;test	al, 40h ; * ; Retro DOS v4.2
 12782 000006C7 7503                    		jnz	short ci_bigfat
 12783                                  
 12784                                  		;mov	si, offset fat_12_id ; "FAT12	"
 12785 000006C9 BE[4B05]                		mov	si, fat_12_id	; 19/10/2022
 12786                                  ci_bigfat:
 12787                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 12788                                  		; 10/12/2022
 12789 000006CC B108                    		mov	cl, 8 ; cx = 8 
 12790 000006CE 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 12791                                  					; filesys_id field
 12792                                  		;rep movsb
 12793                                  		; 21/12/2023 - Retro DOS v5.0
 12794                                  		;rep movs byte ptr es:[di], byte ptr cs:[si] ; 0F3h,2Eh,0A4h
 12795                                  		; 26/12/2023
 12796                                  		;cs	; fat32_id, fat16_id and fat12_id are in BIOSCODE segment
 12797                                  		;rep movsb
 12798 000006D1 F3                      		rep
 12799 000006D2 2E                      		cs
 12800 000006D3 A4                      		movsb
 12801                                  
 12802 000006D4 5F                      		pop	di		; restore bds pointer
 12803                                  getret_exit:		; 21/12/2023
 12804 000006D5 C3                      		retn
 12805                                  
 12806                                  ; =============== S U B	R O U T	I N E =======================================
 12807                                  
 12808                                  ; 15/10/2022
 12809                                  
 12810                                  ; ---------------------------------------------------------------------------
 12811                                  ;	getbp - return bpb from the drive specified by the bds.
 12812                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
 12813                                  ;	    note that we never come here for fixed disks.
 12814                                  ;	    for all other cases,
 12815                                  ;	      - it reads boot sector to pull out the bpb
 12816                                  ;	      - if no valid bpb is found, it then reads the fat sector,
 12817                                  ;		to get the fat id byte to build the bpb from there.
 12818                                  ;
 12819                                  ;   inputs:	es:di point to correct bds.
 12820                                  ;
 12821                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
 12822                                  ;		carry set, and al=7 if invalid disk.
 12823                                  ;		carry set and error code in al if other error.
 12824                                  ;		if failed to recognize the boot record, then will set the
 12825                                  ;		set_id_flag to 0.
 12826                                  ;		this routine will only work for a floppy diskette.
 12827                                  ;		     for a fixed disk, it will just return.
 12828                                  ;
 12829                                  ;	****** Note: getbp is a clone of getbp which uses the newer
 12830                                  ;	  segment definitions. It should be migrated towards.
 12831                                  ;	   now es:di has the bds, ds: has Bios_Data
 12832                                  ; ---------------------------------------------------------------------------
 12833                                  
 12834                                  		; 29/12/2023
 12835                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 12836                                  GetBp:
 12837                                  		; if returning fake bpb then return bpb as is.
 12838                                  		; 21/12/2023
 12839 000006D6 26F6453F05              		test	byte [es:di+3Fh], 5 ; PCDOS 7.1
 12840                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
 12841                                  		;test	byte [es:di+23h], 5 ; MSDOS 6.22 (& MSDOS 5.0)
 12842                                  		;jz	short getbp1	; getbp1
 12843                                  		;jmp	getret_exit
 12844                                  		; 21/12/2023
 12845 000006DB 75F8                    		jnz	short getret_exit
 12846                                  ; ---------------------------------------------------------------------------
 12847                                  getbp1:	
 12848 000006DD 51                      		push	cx
 12849 000006DE 52                      		push	dx
 12850 000006DF 53                      		push	bx
 12851                                  
 12852                                  		; attempt to read in boot sector and determine bpb.
 12853                                  		; we assume that the 2.x and greater dos disks all
 12854                                  		; have a valid boot sector.
 12855                                  
 12856 000006E0 E8CF00                  		call	readbootsec
 12857 000006E3 720A                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
 12858 000006E5 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
 12859 000006E7 7509                    		jnz	short dofatbpb
 12860 000006E9 E81401                  		call	movbpb		; move bpb into	registers
 12861                                  		;jmp	short Has1
 12862                                  		; 21/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
 12863 000006EC E9B500                  		jmp	getret
 12864                                  ; ---------------------------------------------------------------------------
 12865                                  
 12866                                  getbp_err_ret_brdg:
 12867 000006EF E9B600                  		jmp	getbp_err_ret
 12868                                  ; ---------------------------------------------------------------------------
 12869                                  
 12870                                  		; we have a 1.x diskette. In this case read in the fat ID byte
 12871                                  		; and fill in bpb from there.
 12872                                  dofatbpb:				
 12873 000006F2 E8B401                  		call	readfat		; puts media descriptor	byte in	ah
 12874 000006F5 72F8                    		jb	short getbp_err_ret_brdg
 12875                                  		;cmp	ds:fhave96, 0	;  changeline support available?
 12876 000006F7 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
 12877 000006FC 7403                    		jz	short bpb_nochangeline ; brif not
 12878 000006FE E83115                  		call	hidensity	; may not return! May add sp, 2	and
 12879                                  					; jump to has1!!!!!! or	has720K
 12880                                  bpb_nochangeline:		; test for a valid 3.5" medium			
 12881                                  		; 21/12/2023 - Retro DOS v5.0
 12882 00000701 26807D3E02              		cmp	byte [es:di+3Eh], 2
 12883                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 12884                                  					; ffSmall
 12885 00000706 7512                    		jnz	short is_floppy
 12886 00000708 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
 12887 0000070B 7512                    		jnz	short got_unknown_medium
 12888                                  Has720K:
 12889                                  		; 21/12/2023
 12890                                  		;;mov	bx, offset sm92 ; pointer to correct bpb
 12891                                  		;mov	bx, sm92	; 19/10/2022
 12892                                  
 12893                                  		; es points to segment of bds. the following should be modified
 12894                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
 12895                                  		; driver.sys is loaded since the bds is inside the driver.sys.
 12896                                  
 12897                                  		; 21/12/2023
 12898                                  		;; 10/12/2022
 12899                                  		;;mov	al, [bx+0]	; [bx+bpbtype.spf]
 12900                                  		;; 21/12/2022
 12901                                  		;mov	al, [bx]
 12902                                  		;mov	cx, [bx+3]	; [bx+bpbtype.csec]
 12903                                  		;mov	dx, [bx+5]	; [bx+bpbtype.spau]
 12904                                  		;mov	bx, [bx+1]	; [bx+bpbtype.spt]
 12905                                  		;; 19/10/2022 - Temporary !
 12906                                  		;;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
 12907                                  		;;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
 12908                                  		;;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
 12909                                  		;;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]
 12910                                  
 12911                                  		; 21/12/2023 - Retro DOS v5.0
 12912 0000070D B003                    		mov	al, 3		; bpbtype.sbf = 3
 12913 0000070F B9A005                  		mov	cx, 1440	; bpbtype.csec = 1440
 12914 00000712 BA0202                  		mov	dx, 202h	; dl = bpbtype.spau = 2
 12915                                  					; dh = bpbtype.chead = 2
 12916 00000715 BB0970                  		mov	bx, 7009h	; bl = bpbtype.spt = 9
 12917                                  					; bh = bpbtype.dire = 112
 12918 00000718 EB30                    		jmp	short Has1
 12919                                  ; ---------------------------------------------------------------------------
 12920                                  
 12921                                  is_floppy:			; must be a 5.25" floppy if we come here
 12922 0000071A 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
 12923                                  		;jb	short got_unknown_medium
 12924                                  		; 21/12/2023
 12925 0000071D 730A                    		jnb	short chk_160K
 12926                                  ; ---------------------------------------------------------------------------
 12927                                  		; 21/12/2023
 12928                                  		; we have a 3.5" diskette for which we cannot build a bpb.
 12929                                  		; we do	not assume any type of bpb for this medium.
 12930                                  got_unknown_medium:
 12931                                  		;mov	ds:set_id_flag,	0
 12932 0000071F C606[9B04]00            		mov	byte [set_id_flag], 0
 12933 00000724 B007                    		mov	al, 7
 12934 00000726 F9                      		stc
 12935 00000727 EB7B                    		jmp	short getret
 12936                                  ; ---------------------------------------------------------------------------
 12937                                  chk_160K:
 12938 00000729 B001                    		mov	al, 1		; set number of	fat sectors
 12939 0000072B BB0840                  		mov	bx, 16392	; 64*256+8
 12940                                  					; set dir entries and sector max
 12941 0000072E B94001                  		mov	cx, 320		; 40*8
 12942                                  					; set size of drive
 12943 00000731 BA0101                  		mov	dx, 257		; 01*256+1
 12944                                  					; set head limit and sec/all unit
 12945                                  		; 21/12/2023
 12946                                  		;mov	al, 1		; bpbtype.sbf = 1
 12947                                  		;mov	bx, 4008h	; bl = bpbtype.spt = 8
 12948                                  		;			; bh = bpbtype.dire = 64
 12949                                  		;mov	cx, 140h	; bpbtype.csec = 320
 12950                                  		;mov	dx, 101h	; dl = bpbtype.spau = 1
 12951                                  		;			; dh = bpbtype.chead = 1
 12952                                  
 12953 00000734 F6C402                  		test	ah, 2		; test for 8 or	9 sector
 12954 00000737 7505                    		jnz	short has8	; nz = has 8 sectors
 12955                                  		
 12956                                  		; 29/12/2023
 12957                                  		;inc	al	; 2 	; inc number of	fat sectors
 12958                                  		;inc	bl	; 9	; inc sector max
 12959 00000739 40                      		inc	ax
 12960 0000073A 43                      		inc	bx
 12961                                  
 12962                                  		;add	cx, 40		; increase size	(to 360)
 12963                                  		; 18/12/2022
 12964 0000073B 80C128                  		add	cl, 40	; 28h	; 180K (360 sectors)
 12965                                  has8:
 12966 0000073E F6C401                  		test	ah, 1		; test for 1 or	2 heads
 12967 00000741 7407                    		jz	short Has1	; jz = 1 head
 12968 00000743 01C9                    		add	cx, cx		; double size of disk
 12969 00000745 B770                    		mov	bh, 112		; increase number of directory entries
 12970 00000747 FEC6                    		inc	dh	; 2	; inc sec/all unit
 12971                                  		; 29/12/2023
 12972                                  		;inc	dl	; 2	; inc head limit
 12973 00000749 42                      		inc	dx
 12974                                  Has1:
 12975                                  		; 02/09/2023 (PCDOS 7.1, IBMBIO.COM - BIOSCODE:0754h)
 12976 0000074A 1E                      		push	ds
 12977 0000074B 06                      		push	es
 12978 0000074C 1F                      		pop	ds
 12979                                  
 12980                                  		;mov	[es:di+8], dh	; [es:di+BDS.secperclus]
 12981                                  		;mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
 12982                                  		;mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
 12983                                  		;mov	[es:di+10h], ah	; [es:di+BDS.media]
 12984                                  		;mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
 12985                                  		;mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
 12986                                  		;mov	[es:di+15h], dl	; [es:di+BDS.heads]
 12987                                  
 12988 0000074D 887508                  		mov	[di+8], dh	; [di+BDS.secperclus]
 12989 00000750 30F6                    		xor	dh, dh
 12990 00000752 895515                  		mov	[di+15h], dx	; [di+BDS.heads]
 12991 00000755 88FA                    		mov	dl, bh
 12992 00000757 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
 12993 0000075A 894D0E                  		mov	[di+0Eh], cx	; [di+BDS.totalsecs16]
 12994 0000075D 894D1B                  		mov	[di+1Bh], cx	; [di+BDS.totalsecs32]
 12995 00000760 886510                  		mov	[di+10h], ah	; [di+BDS.media]
 12996 00000763 88C2                    		mov	dl, al
 12997 00000765 895511                  		mov	[di+11h], dx	; [di+BDS.fatsecs]
 12998 00000768 88DA                    		mov	dl, bl
 12999 0000076A 895513                  		mov	[di+13h], dx	; [di+BDS.secpertrack]
 13000                                  
 13001                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
 13002                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
 13003                                  		; to 0 since this code is for floppies
 13004                                  
 13005                                  		; 18/12/2022
 13006                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
 13007                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
 13008                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
 13009                                  		; 18/12/2022
 13010 0000076D 29C9                    		sub	cx, cx ; 0
 13011                                  		;mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
 13012                                  		;mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
 13013                                  		;mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
 13014                                  		
 13015                                  		; 02/09/2023
 13016 0000076F 894D19                  		mov	[di+19h], cx ; 0 ; [di+BDS.hiddensecs+2]
 13017 00000772 894D17                  		mov	[di+17h], cx ; 0 ; [di+BDS.hiddensecs]
 13018 00000775 894D1D                  		mov	[di+1Dh], cx ; 0 ; [di+BDS.totalsecs32+2]
 13019                                  
 13020                                  		; 21/12/2023 - Retro DOS v5.0
 13021 00000778 894D1F                  		mov     [di+1Fh], cx    ; [di+BDS.fatsecs32] ; BPB_FATSz32
 13022 0000077B 894D21                  		mov     [di+21h], cx    ; [di+BDS.fatsecs32+2]
 13023 0000077E 894D27                  		mov     [di+27h], cx    ; [di+BDS.rootdirclust]
 13024 00000781 894D29                  		mov     [di+29h], cx    ; [di+BDS.rootdirclust+2]
 13025 00000784 894D2F                  		mov     [di+2Fh], cx    ; [di+BDS.reserved]
 13026                                  					;     BPB_Reserved (12 zero bytes)
 13027 00000787 894D31                  		mov     [di+31h], cx
 13028 0000078A 894D33                  		mov     [di+33h], cx
 13029 0000078D 894D35                  		mov     [di+35h], cx
 13030 00000790 894D37                  		mov     [di+37h], cx
 13031 00000793 894D39                  		mov     [di+39h], cx
 13032 00000796 894D23                  		mov     [di+23h], cx    ; [di+BDS.extflags] ; BPB_ExtFlags
 13033 00000799 894D25                  		mov     [di+25h], cx    ; [di+BDS.fsver] ; BPB_FSVer
 13034                                  
 13035 0000079C 49                      		dec     cx              ; -1 ; 0FFFFFFFFh
 13036 0000079D 894D2B                  		mov     [di+2Bh], cx    ; [di+BDS.fsinfo] ; BPB_FSInfo
 13037 000007A0 894D2D                  		mov     [di+2Dh], cx    ; [di+BDS.bkbootsec] ; BPB_BkBootSec
 13038                                  		
 13039 000007A3 1F                      		pop	ds ; 02/09/2023
 13040                                  getret:
 13041 000007A4 5B                      		pop	bx
 13042 000007A5 5A                      		pop	dx
 13043 000007A6 59                      		pop	cx
 13044                                  ;getret_exit:		; 21/12/2023
 13045 000007A7 C3                      		retn
 13046                                  ; ---------------------------------------------------------------------------
 13047                                  
 13048                                  getbp_err_ret:	; before doing anything else, set set_id_flag to 0.
 13049                                  		;mov	ds:set_id_flag,	0
 13050                                  		; 19/10/2022
 13051 000007A8 C606[9B04]00            		mov	byte [set_id_flag], 0
 13052 000007AD E8F905                  		call	maperror
 13053 000007B0 EBF2                    		jmp	short getret
 13054                                  ; ---------------------------------------------------------------------------
 13055                                  ; 21/12/2023
 13056                                  ;		; we have a 3.5" diskette for which we cannot build a bpb.
 13057                                  ;		; we do	not assume any type of bpb for this medium.
 13058                                  ;
 13059                                  ;got_unknown_medium:
 13060                                  ;		;mov	ds:set_id_flag,	0
 13061                                  ;		mov	byte [set_id_flag], 0
 13062                                  ;		mov	al, 7
 13063                                  ;		stc
 13064                                  ;		jmp	short getret
 13065                                  
 13066                                  ; =============== S U B	R O U T	I N E =======================================
 13067                                  
 13068                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 13069                                  
 13070                                  ; ----------------------------------------------------------------
 13071                                  ; read in the boot sector. set carry if error in reading sector.
 13072                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
 13073                                  ;
 13074                                  ;	assumes es:di -> bds, ds-> Bios_Data
 13075                                  ; ----------------------------------------------------------------
 13076                                  
 13077                                  ; 10/03/2019 - Retro DOS v4.0
 13078                                  
 13079                                  ; 30/12/2022 - Retro DOS v4.2
 13080                                  ; (MSDOS 6.21 IO.SYS, BIOSCODE:06C3h)
 13081                                  ; ((MSDOS 6.22 IO.SYS, BIOSCODE:06C3h)) ; 22/12/2023
 13082                                  
 13083                                  ; 22/12/2023 - Retro DOS v5.0
 13084                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:07C6h)
 13085                                  
 13086                                  readbootsec:	
 13087 000007B2 B600                    		mov	dh, 0		; head 0
 13088 000007B4 B90100                  		mov	cx, 1		; cylinder 0, sector 1
 13089 000007B7 E8FC00                  		call	read_sector
 13090 000007BA 7243                    		jb	short err_ret
 13091 000007BC 31DB                    		xor	bx, bx		; assume valid boot sector
 13092                                  
 13093                                  		; put a sanity check for the boot sector in here to detect
 13094                                  		; boot sectors that do not have valid bpbs. we examine the
 13095                                  		; first two bytes - they must contain a long jump (69h) or a
 13096                                  		; short jump (EBh) followed by a nop (90h), or a short jump
 13097                                  		; (E9h). if this test is passed, we further check by examining
 13098                                  		; the signature at the end of the boot sector for the word
 13099                                  		; AA55h. if the signature is not present, we examine the media
 13100                                  		; descriptor byte to see if it is valid. for dos 3.3, this
 13101                                  		; logic is modified a little bit. we are not going to check
 13102                                  		; signature. instead we are going to sanity check the media
 13103                                  		; byte in bpb regardless of the validity of signature. this is
 13104                                  		; to save the already developed commercial products that have
 13105                                  		; good jump instruction and signature but with the false bpb
 13106                                  		; informations
 13107                                  
 13108                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
 13109                                  
 13110                                  		; 02/09/2023
 13111                                  		; 19/10/2022
 13112                                  		;cmp	byte [disksector], 69h ; is it a direct jump?
 13113                                  		;jz	short check_bpb_mediabyte ; don't need to find a nop
 13114                                  		;cmp	byte [disksector], 0E9h ; dos 2.0 jump?
 13115                                  		;jz	short check_bpb_mediabyte ; no need for	nop
 13116                                  		;cmp	byte [disksector], 0EBh ; how about a short jump?
 13117                                  		;jnz	short invalidbootsec
 13118                                  		;cmp	byte [disksector+2], 90h ; is next one a nop?
 13119                                  		;jnz	short invalidbootsec
 13120                                  
 13121                                  		; 02/09/2023 (PCDOS 7.1)
 13122 000007BE A0[5201]                		mov	al, [disksector]
 13123 000007C1 3C69                    		cmp	al, 69h		; is it a direct jump?
 13124 000007C3 740F                    		je	short check_bpb_mediabyte
 13125                                  					; don't need to find a nop
 13126 000007C5 3CE9                    		cmp	al, 0E9h	; dos 2.0 jump?
 13127 000007C7 740B                    		je	short check_bpb_mediabyte
 13128                                  					; no need for nop
 13129 000007C9 3CEB                    		cmp	al, 0EBh	; how about a short jump?
 13130 000007CB 7530                    		jne	short invalidbootsec
 13131 000007CD 803E[5401]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
 13132 000007D2 7529                    		jne	short invalidbootsec
 13133                                  
 13134                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13135                                  ;
 13136                                  ;; 10/03/2019
 13137                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
 13138                                  ;;
 13139                                  ;; Don't have to perform the following signature check since
 13140                                  ;; we need to check the media byte even with the good signatured diskette.
 13141                                  ;;
 13142                                  ;;check_signature:
 13143                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
 13144                                  ;;							 ; disk or 1.x media.
 13145                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
 13146                                  ;;					       ; may need some special handling
 13147                                  
 13148                                  ; check for non-ibm disks which do not have the signature AA55h at the
 13149                                  ; end of the boot sector, but still have a valid boot sector. this is done
 13150                                  ; by examining the media descriptor in the boot sector.
 13151                                  
 13152                                  		; 19/10/2022
 13153                                  check_bpb_mediabyte:
 13154 000007D4 A0[6701]                		mov	al, [disksector+15h]
 13155                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 13156 000007D7 50                      		push	ax ; 02/09/2023
 13157 000007D8 24F0                    		and	al, 0F0h
 13158 000007DA 3CF0                    		cmp	al, 0F0h	; allow	for strange media
 13159 000007DC 58                      		pop	ax ; 02/09/2023
 13160 000007DD 751E                    		jnz	short invalidbootsec
 13161                                  
 13162                                  ; there were some (apparently a lot of them) diskettes that had been formatted
 13163                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
 13164                                  ; sectors. these are specifically diskettes that were formatted in drives
 13165                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
 13166                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
 13167                                  ; in dos. in order to support them, we have to introduce a "hack" that will
 13168                                  ; help our build bpb routine to recognise these specific cases, and to
 13169                                  ; set up out copy of the bpb accordingly.
 13170                                  ; we do this by checking to see if the boot sector is off a diskette that
 13171                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
 13172                                  ; sec/clus field to 1. if not, we carry on as normal.
 13173                                  
 13174                                  checksinglesided:
 13175                                  		;mov	al, [disksector+15h]
 13176                                  		; 02/09/2023
 13177                                  		; al = [disksector+15h]
 13178 000007DF 3CF0                    		cmp	al, 0F0h
 13179 000007E1 741B                    		jz	short gooddsk
 13180 000007E3 A801                    		test	al, 1
 13181 000007E5 7517                    		jnz	short gooddsk
 13182 000007E7 813E[5A01]332E          		cmp	word [disksector+8], 2E33h ; "3."
 13183 000007ED 7507                    		jnz	short mustbeearlier
 13184 000007EF 803E[5C01]32            		cmp	byte [disksector+0Ah], 32h ; "2"
 13185 000007F4 7308                    		jnb	short gooddsk
 13186                                  
 13187                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
 13188                                  
 13189                                  mustbeearlier:				
 13190 000007F6 C606[5F01]01            		mov	byte [disksector+0Dh], 1
 13191                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 13192 000007FB EB01                    		jmp	short gooddsk
 13193                                  ; ---------------------------------------------------------------------------
 13194                                  
 13195                                  invalidbootsec:				
 13196 000007FD 43                      		inc	bx		; indicate that boot sector invalid
 13197                                  		; 10/12/2022
 13198                                  movbpb_ret:
 13199                                  gooddsk:				
 13200 000007FE F8                      		clc
 13201                                  err_ret:
 13202 000007FF C3                      		retn
 13203                                  ; ---------------------------------------------------------------------------
 13204                                  
 13205                                  		; 10/12/2022
 13206                                  ;err_ret:				
 13207                                  		;retn
 13208                                  
 13209                                  ; =============== S U B	R O U T	I N E =======================================
 13210                                  
 13211                                  ; 15/10/2022
 13212                                  ; ---------------------------------------------------------------------------
 13213                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
 13214                                  ; getbp routine at has1
 13215                                  ;
 13216                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
 13217                                  ; serial number, volume label, file system id in bds according to
 13218                                  ; the boot record. after that, this routine will set the set_id_flag to 2
 13219                                  ; to signal that volume label is set already from the extended boot record
 13220                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
 13221                                  ; the volume label in the root directory.)
 13222                                  ; ---------------------------------------------------------------------------
 13223                                  
 13224                                  ; 10/03/2019 - Retro DOS v4.0
 13225                                  
 13226                                  ; 22/12/2023
 13227                                  %if 0
 13228                                  		; 19/10/2022
 13229                                  movbpb:
 13230                                  		mov	dh, [disksector+0Dh]
 13231                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 13232                                  					; sectors per unit
 13233                                  		mov	bh, [disksector+11h]
 13234                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
 13235                                  					; number of directory entries
 13236                                  		mov	cx, [disksector+13h]
 13237                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
 13238                                  					; size of drive
 13239                                  		mov	ah, [disksector+15h]
 13240                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 13241                                  					; media	descriptor
 13242                                  		mov	al, [disksector+16h];
 13243                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
 13244                                  					; number of fat	sectors
 13245                                  		mov	bl, [disksector+18h]
 13246                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
 13247                                  					; sectors per track
 13248                                  		mov	dl, [disksector+1Ah]
 13249                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
 13250                                  					; number of heads
 13251                                  %else
 13252                                  		; 29/12/2023
 13253                                  		; 22/12/2023 - Retro DOS v5.0
 13254                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:0814h)
 13255                                  		;;;
 13256                                  movbpb:
 13257 00000800 57                      		push	di
 13258 00000801 83C706                  		add	di, 6		; BDS+6 = BDS.BPB
 13259 00000804 8D36[5D01]              		lea	si, [disksector+0Bh]
 13260 00000808 B93500                  		mov	cx, 53		; copy bios parameters block
 13261                                  					; from BPB_BytsPerSec to (FAT32) BS_DrvNum (excluded)
 13262 0000080B FC                      		cld
 13263 0000080C F3A4                    		rep movsb
 13264 0000080E 8B4CD3                  		mov	cx, [si-45]	; si = disksector+64 -> 64-45 = 19
 13265                                  					; disksektor+19 = BPB_TotSec16
 13266 00000811 31C0                    		xor	ax, ax
 13267 00000813 E308                    		jcxz	movbpb_bigdisk
 13268 00000815 26894DE0                		mov	[es:di-32], cx	; write 16 bit total sectors
 13269                                  					; to 32 bit total sectors field
 13270 00000819 268945E2                		mov	[es:di-30], ax	; BPB_TotalSec32+2 (BDS offset 29, BPB offset 23)
 13271                                  movbpb_bigdisk:
 13272 0000081D 3944D6                  		cmp	[si-42], ax     ; BPB_FATSz16 = disksector+22
 13273 00000820 7410                    		jz	short movbpb_fat32
 13274                                  movbpb_fat:
 13275 00000822 83EF1C                  		sub	di, 28		; di = BDS offset 31 (BPB offset 25)
 13276                                  		; 29/12/2023
 13277 00000825 B90C00                  		mov	cx, 12		; clear 12 byte extended BDS (FAT32) fields
 13278                                  					; (which are used only for FAT32 disks)
 13279 00000828 F3AA                    		rep stosb
 13280 0000082A 48                      		dec	ax		; -1 ; 0FFFFh
 13281 0000082B AB                      		stosw			; set BDS offset 43 (dword) to -1
 13282                                  					; dword [BDS.BPB_FSInfo] = 0FFFFFFFFh
 13283 0000082C AB                      		stosw
 13284 0000082D 40                      		inc	ax		; ax = 0
 13285 0000082E B10C                    		mov	cl, 12		
 13286                                  		;mov	cx, 12		; clear BDS offset 47 to 59
 13287                                  					; (BPB offset 41 to 53) (disksector offset 52 to 64)
 13288 00000830 F3AA                    		rep stosb
 13289                                  movbpb_fat32:
 13290 00000832 5F                      		pop	di
 13291                                  %endif
 13292                                  		;;;
 13293                                  
 13294 00000833 803E[9B04]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
 13295 00000838 75C4                    		jnz	short movbpb_ret
 13296 0000083A E81200                  		call	mov_media_ids
 13297 0000083D 7205                    		jb	short movbpb_conv ; conventional boot record?
 13298 0000083F C606[9B04]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
 13299                                  movbpb_conv:
 13300 00000844 803E[7700]01            		cmp	byte [fhave96], 1
 13301 00000849 75B3                    		jnz	short movbpb_ret
 13302 0000084B E83714                  		call	resetchanged	; reset	flags in bds to	not fchanged.
 13303                                  		; 10/12/2022
 13304                                  		; cf = 0
 13305                                  ;movbpb_ret:
 13306                                  		;clc
 13307 0000084E C3                      		retn
 13308                                  		
 13309                                  ; =============== S U B	R O U T	I N E =======================================
 13310                                  
 13311                                  ;copy the boot_serial number, volume id, and filesystem id from the
 13312                                  ;***extended boot record*** in ds:disksector to the bds table pointed
 13313                                  ;by es:di.
 13314                                  
 13315                                  ;in.) es:di -> bds
 13316                                  ;     ds:disksector = valid extended boot record.
 13317                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
 13318                                  ;      the boot record information.
 13319                                  ;     carry flag set if not an extended bpb.
 13320                                  ;     all registers saved except the flag.
 13321                                  
 13322                                  ; 22/12/2023
 13323                                  %if 0
 13324                                  		; 19/10/2022
 13325                                  mov_media_ids:		
 13326                                  		cmp	byte [disksector+26h], 29h
 13327                                  					; [disksector+EXT_BOOT.SIG],
 13328                                  					; EXT_BOOT_SIGNATURE
 13329                                  		jnz	short mmi_not_ext
 13330                                  		push	cx
 13331                                  		mov	cx, [disksector+27h]
 13332                                  					; [disksector+EXT_BOOT.SERIAL]
 13333                                  		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 13334                                  		mov	cx, [disksector+29h]
 13335                                  					; [disksector+EXT_BOOT.SERIAL+2]
 13336                                  		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 13337                                  		push	di
 13338                                  		push	si
 13339                                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 13340                                  		mov	si, disksector+2Bh
 13341                                  		;mov	si, (offset disksector+2Bh) ;
 13342                                  					; disksector+EXT_BOOT.VOL_LABEL
 13343                                  		add	di, 75		; BDS.volid
 13344                                  		rep movsb
 13345                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 13346                                  		; 10/12/2022
 13347                                  		mov	cl, 8 ; cx = 8
 13348                                  		mov	si, disksector+36h
 13349                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
 13350                                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 13351                                  		rep movsb
 13352                                  		pop	si
 13353                                  		pop	di
 13354                                  		pop	cx
 13355                                  		; 10/12/2022
 13356                                  		; cf = 0
 13357                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
 13358                                  				; (20/09/2022)
 13359                                  		retn
 13360                                  %else
 13361                                  		; 22/12/2023 - Retro DOS v5.0
 13362                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:0865h)
 13363                                  		;;;		
 13364                                  mov_media_ids:
 13365 0000084F 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 13366 00000854 7507                    		jnz	short mmi_chk_fat
 13367 00000856 803E[9401]29            		cmp	byte [disksector+42h], 29h
 13368                                  					; [disksector+FAT32_EXT_BOOT.SIG],
 13369                                  					; EXT_BOOT_SIGNATURE
 13370 0000085B EB05                    		jmp	short mmi_chk_fat32
 13371                                  mmi_chk_fat:
 13372 0000085D 803E[7801]29            		cmp	byte [disksector+26h], 29h
 13373                                  					; [disksector+EXT_BOOT.SIG],EXT_BOOT_SIGNATURE
 13374                                  mmi_chk_fat32:
 13375 00000862 7543                    		jnz	short mmi_not_ext
 13376 00000864 51                      		push	cx
 13377 00000865 50                      		push	ax
 13378 00000866 57                      		push	di
 13379 00000867 56                      		push	si
 13380 00000868 1E                      		push	ds
 13381 00000869 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 13382 0000086E 750C                    		jnz	short mmi_fat
 13383                                  
 13384                                  mmi_fat32:				; FAT32 file system
 13385                                  		;lds	cx, dword ptr ds:disksector+43h
 13386 00000870 C50E[9501]              		lds	cx, [disksector+43h]	; BS_FAT32_VolID
 13387 00000874 BE[9901]                		mov	si, disksector+47h	; BS_FAT32_VolLab
 13388 00000877 B8[A401]                		mov	ax, disksector+52h	; BS_FAT32_FilSysType
 13389 0000087A EB0A                    		jmp	short mmi_do
 13390                                  
 13391                                  mmi_fat:
 13392                                  		;lds	cx, dword ptr ds:disksector+27h
 13393 0000087C C50E[7901]              		lds	cx, [disksector+27h]	; BS_VolID
 13394 00000880 BE[7D01]                		mov	si, disksector+2Bh	; BS_VolLab
 13395 00000883 B8[8801]                		mov	ax, disksector+36h	; BS_FilSysType
 13396                                  mmi_do:
 13397 00000886 26898D8900              		mov	[es:di+89h], cx	; [es:di+BDS.vol_serial]
 13398                                  					; (BDS offset 137)
 13399 0000088B 268C9D8B00              		mov	[es:di+8Bh], ds	; [es:di+BDS.vol_serial+2]
 13400 00000890 1F                      		pop	ds
 13401 00000891 B90B00                  		mov	cx, 11
 13402 00000894 83C77D                  		add	di, 125		; di = di+125 = BDS.volid
 13403 00000897 F3A4                    		rep movsb
 13404 00000899 B108                    		mov	cl, 8		; di = di+136
 13405 0000089B 89C6                    		mov	si, ax		; BS_FilSysType or BS_FAT32_FilSysType
 13406 0000089D 83C705                  		add	di, 5		; di = di+141 = BDS.filesys_id
 13407 000008A0 F3A4                    		rep movsb
 13408 000008A2 5E                      		pop	si
 13409 000008A3 5F                      		pop	di
 13410 000008A4 58                      		pop	ax
 13411 000008A5 59                      		pop	cx
 13412                                  		;clc	; this clc is not required (16/06/2019 - Erdogan Tan)
 13413                                  			; (20/09/2022 - 27/06/2023) MSDOS 6.21 .. PCDOS 7.1
 13414 000008A6 C3                      		retn
 13415                                  %endif
 13416                                  		;;;
 13417                                  	
 13418                                  ; ---------------------------------------------------------------------------
 13419                                  
 13420                                  mmi_not_ext:				
 13421 000008A7 F9                      		stc
 13422 000008A8 C3                      		retn
 13423                                  
 13424                                  ; =============== S U B	R O U T	I N E =======================================
 13425                                  
 13426                                  ; 15/10/2022
 13427                                  ; --------------------------------------------------------------
 13428                                  ; read in the fat sector and get the media byte from it.
 13429                                  ; input : es:di -> bds
 13430                                  ; output:
 13431                                  ;	  carry set if an error occurs, ax contains error code.
 13432                                  ;	  otherwise, ah contains media byte on exit
 13433                                  ; --------------------------------------------------------------
 13434                                  
 13435                                  readfat:	
 13436                                  		;mov	dh, 0
 13437                                  		; 10/12/2022
 13438 000008A9 30F6                    		xor	dh, dh
 13439 000008AB B90200                  		mov	cx, 2		; head 0
 13440                                  					; cylinder 0, sector 2
 13441 000008AE E80500                  		call	read_sector
 13442 000008B1 7202                    		jb	short bad_fat_ret
 13443 000008B3 8A27                    		mov	ah, [bx]	; media	byte
 13444                                  bad_fat_ret:				
 13445 000008B5 C3                      		retn
 13446                                  
 13447                                  ; =============== S U B	R O U T	I N E =======================================
 13448                                  
 13449                                  ; 15/10/2022
 13450                                  
 13451                                  ; ---------------------------------------------------------------------------
 13452                                  ; read a single sector into the temp buffer.
 13453                                  ; perform three retries in case of error.
 13454                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
 13455                                  ;		cx has sector and cylinder
 13456                                  ;		dh has head
 13457                                  ;		es:di has bds
 13458                                  ;		ds has Bios_Data
 13459                                  ;
 13460                                  ;   outputs:	carry clear
 13461                                  ;		    Bios_Data:bx point to sector
 13462                                  ;		       (note: some callers assume location of buffer)
 13463                                  ;
 13464                                  ;		carry set
 13465                                  ;		    ax has rom error code
 13466                                  ;
 13467                                  ; register bp is preserved.
 13468                                  ; ---------------------------------------------------------------------------
 13469                                  
 13470                                  ; 10/03/2019 - Retro DOS v4.0
 13471                                  ; 22/12/2023 - Retro DOS v5.0
 13472                                  
 13473                                  		; 19/10/2022
 13474                                  read_sector:
 13475 000008B6 55                      		push	bp
 13476 000008B7 BD0300                  		mov	bp, 3		; make 3 attempts
 13477 000008BA 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13478 000008BE BB[5201]                		mov	bx, disksector	; get es:bx to point to	buffer
 13479                                  rd_ret:
 13480 000008C1 06                      		push	es
 13481 000008C2 1E                      		push	ds
 13482 000008C3 07                      		pop	es
 13483 000008C4 B80102                  		mov	ax, 201h
 13484 000008C7 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 13485                                  					; AL = number of sectors to read, CH = track, CL = sector
 13486                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 13487                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 13488 000008C9 07                      		pop	es
 13489 000008CA 734A                    		jnb	short okret2
 13490                                  rd_rty:
 13491 000008CC E81205                  		call	again		; reset	disk, decrement	bp, preserve ax
 13492 000008CF 7442                    		jz	short err_rd_ret
 13493                                  
 13494                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13495 000008D1 26F6453F01              		test	byte [es:di+3Fh], 1
 13496                                  		;test	byte [es:di+23h], 1
 13497                                  		;;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
 13498                                  					; fnon_removable
 13499 000008D6 75E9                    		jnz	short rd_ret
 13500 000008D8 803E[A905]00            		cmp	byte [media_set_for_format], 0
 13501 000008DD 7510                    		jnz	short rd_skip1_dpt
 13502 000008DF 50                      		push	ax
 13503 000008E0 1E                      		push	ds		; for retry, set the head settle time to 0Fh
 13504 000008E1 C536[2D01]              		lds	si, [dpt]
 13505                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 13506                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
 13507                                  		;			; NORMSETTLE
 13508                                  		; 12/12/2022
 13509 000008E5 B00F                    		mov	al, 15
 13510 000008E7 864409                  		xchg	al, [si+9]
 13511                                  		; 
 13512 000008EA 1F                      		pop	ds
 13513 000008EB A2[2A01]                		mov	[save_head_sttl], al
 13514 000008EE 58                      		pop	ax
 13515                                  rd_skip1_dpt:
 13516 000008EF 06                      		push	es
 13517 000008F0 1E                      		push	ds
 13518 000008F1 07                      		pop	es
 13519 000008F2 B80102                  		mov	ax, 201h
 13520 000008F5 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 13521                                  					; AL = number of sectors to read, CH = track, CL = sector
 13522                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 13523                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 13524 000008F7 07                      		pop	es
 13525 000008F8 9C                      		pushf
 13526 000008F9 803E[A905]00            		cmp	byte [media_set_for_format], 0
 13527 000008FE 750E                    		jnz	short rd_skip2_dpt
 13528 00000900 50                      		push	ax
 13529 00000901 A0[2A01]                		mov	al, [save_head_sttl]
 13530 00000904 1E                      		push	ds
 13531 00000905 C536[2D01]              		lds	si, [dpt]
 13532 00000909 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
 13533 0000090C 1F                      		pop	ds
 13534 0000090D 58                      		pop	ax
 13535                                  rd_skip2_dpt:
 13536 0000090E 9D                      		popf
 13537 0000090F 7305                    		jnb	short okret2
 13538 00000911 EBB9                    		jmp	short rd_rty
 13539                                  ; ---------------------------------------------------------------------------
 13540                                  
 13541                                  err_rd_ret:
 13542 00000913 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
 13543                                  					; return error
 13544 00000915 F9                      		stc
 13545                                  
 13546                                  ; update information pertaining to last drive accessed, time of access, last
 13547                                  ; track accessed in that drive.
 13548                                  
 13549                                  okret2:
 13550 00000916 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
 13551 0000091A 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
 13552                                  		
 13553                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13554 0000091E 26886D78                		mov	[es:di+78h], ch
 13555                                  		;mov	[es:di+46h], ch	; [es:di+BDS.track]
 13556                                  					; save last track accessed on this drive
 13557                                  					; preserve flags in case error occurred
 13558 00000922 9C                      		pushf
 13559 00000923 E89B04                  		call	set_tim
 13560 00000926 9D                      		popf			; restore flags
 13561 00000927 5D                      		pop	bp
 13562 00000928 C3                      		retn
 13563                                  
 13564                                  ;----------------------------------------------------------------------------
 13565                                  ;	disk open/close routines
 13566                                  ;----------------------------------------------------------------------------
 13567                                  
 13568                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
 13569 00000929 803E[7700]00            		cmp	byte [fhave96], 0
 13570 0000092E 7407                    		jz	short dsk_open_exit ; done if no changeline support
 13571 00000930 E871FC                  		call	SetDrive	; get bds for drive
 13572                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13573 00000933 26FF453C                		inc	word [es:di+3Ch] ; [es:di+BDS.opcnt] ; BDS offset 60
 13574                                  		;inc	word [es:di+20h] ; [es:di+BDS.opcnt]
 13575                                  dsk_open_exit:
 13576                                  		; 10/12/2022
 13577                                  		; cf = 0			
 13578                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 13579                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 13580 00000937 C3                      		retn
 13581                                  ; ---------------------------------------------------------------------------
 13582                                  
 13583                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
 13584 00000938 803E[7700]00            		cmp	byte [fhave96], 0
 13585 0000093D 740E                    		jz	short exitjx	; done if no changeline	support
 13586 0000093F E862FC                  		call	SetDrive	; get bds for drive
 13587                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13588 00000942 26837D3C00              		cmp	word [es:di+3Ch], 0 ; [es:di+BDS.opcnt] ; BDS off 60
 13589                                  		;cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 13590 00000947 7404                    		jz	short exitjx	; watch	out for	wrap
 13591                                  		; 22/12/2023
 13592 00000949 26FF4D3C                		dec	word [es:di+3Ch]
 13593                                  		;dec	word [es:di+20h]
 13594                                  exitjx:
 13595                                  		; 10/12/2022
 13596                                  		; cf = 0
 13597                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 13598                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 13599 0000094D C3                      		retn
 13600                                  
 13601                                  ;----------------------------------------------------------------------------
 13602                                  ;		disk removable routine
 13603                                  ;----------------------------------------------------------------------------
 13604                                  
 13605                                  		; al is	unit #
 13606                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
 13607 0000094E E853FC                  		call	SetDrive	; get bds for this drive
 13608                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13609                                  		;test	byte [es:di+BDS.flags], fnon_removable
 13610 00000951 26F6453F01              		test	byte [es:di+3Fh], 1 ; [es:di+BDS.flags], fnon_removable
 13611 00000956 74F5                    		jz	short exitjx
 13612                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags], fnon_removable
 13613                                  		;;jnz	short x_bus_exit ; non_rem
 13614                                  		;jnz	short non_rem	; 15/10/2022
 13615                                  		;; 10/12/2022
 13616                                  		;; cf = 0
 13617                                  		;;clc			; CF is already ZERO here
 13618                                  		;			; 15/10/2022
 13619                                  		;retn
 13620                                  ; ---------------------------------------------------------------------------
 13621                                  
 13622                                  non_rem:
 13623                                  x_bus_exit:
 13624 00000958 B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
 13625                                  					; return busy status
 13626 0000095A F9                      		stc
 13627                                  dsk_ret:
 13628 0000095B C3                      		retn
 13629                                  
 13630                                  ;----------------------------------------------------------------------------
 13631                                  ;		disk i/o routines
 13632                                  ;----------------------------------------------------------------------------
 13633                                  
 13634                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
 13635                                  		;mov	word [wrtverify], 103h
 13636                                  		; 19/10/2022
 13637 0000095C C706[2001]0301          		mov	word [rflag], 103h
 13638                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
 13639 00000962 EB06                    		jmp	short dsk_cl
 13640                                  ; ---------------------------------------------------------------------------
 13641                                  
 13642                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
 13643                                  		;mov	word [wrtverify], 3
 13644                                  		; 19/10/2022
 13645 00000964 C706[2001]0300          		mov	word [rflag], 3
 13646                                  		;mov	word ptr ds:rflag, 3 ; romwrite
 13647                                  dsk_cl:
 13648 0000096A E8A400                  		call	diskio		; romwrite
 13649                                  ; ---------------------------------------------------------------------------
 13650                                  
 13651                                  dsk_io:
 13652 0000096D 73EC                    		jnb	short dsk_ret
 13653 0000096F E965F7                  		jmp	bc_err_cnt
 13654                                  ; ---------------------------------------------------------------------------
 13655                                  
 13656                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
 13657 00000972 E89700                  		call	diskrd
 13658 00000975 EBF6                    		jmp	short dsk_io
 13659                                  
 13660                                  ; =============== S U B	R O U T	I N E =======================================
 13661                                  
 13662                                  ; 15/10/2022
 13663                                  ; 10/03/2019 - Retro DOS v4.0
 13664                                  ; 22/12/2023 - Retro DOS v5.0
 13665                                  
 13666                                  ;-----------------------------------------------------------
 13667                                  ; miscellaneous odd jump routines. 
 13668                                  ; moved out of mainline for speed.
 13669                                  
 13670                                  ; if we have a system where we have virtual drives, we need 
 13671                                  ; to prompt the user to place the correct disk in the drive.
 13672                                  ;
 13673                                  ;	assume es:di -> bds, ds:->Bios_Data
 13674                                  ;-----------------------------------------------------------
 13675                                  
 13676                                  		; 19/10/2022
 13677                                  checksingle:
 13678 00000977 50                      		push	ax
 13679 00000978 53                      		push	bx
 13680                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13681 00000979 268B5D3F                		mov	bx, [es:di+3Fh]	; [es:di+BDS.flags]
 13682                                  		;mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 13683                                  
 13684                                  ; if hard drive, cannot change disk.
 13685                                  ; if current owner of physical drive, no need to change diskette.
 13686                                  
 13687 0000097D F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 13688 00000980 7573                    		jnz	short singleret
 13689 00000982 F6C310                  		test	bl, 10h		; fi_am_mult
 13690                                  					; is there a drive sharing this	physical drive?
 13691 00000985 746E                    		jz	short singleret
 13692                                  
 13693                                  ; look for the previous owner of this physical drive
 13694                                  ; and reset its ownership flag.
 13695                                  
 13696 00000987 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13697                                  					; get physical drive number
 13698 0000098B 06                      		push	es		; preserve pointer to current bds
 13699 0000098C 57                      		push	di
 13700 0000098D C43E[1901]              		les	di, [start_bds] ; get first bds
 13701                                  scan_list:
 13702 00000991 26384504                		cmp	[es:di+4], al
 13703 00000995 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 13704 00000997 B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 13705                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 13706 00000999 26845D3F                		test	[es:di+3Fh], bl	; [es:di+BDS.flags]
 13707                                  		;test	[es:di+23h], bl
 13708 0000099D 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 13709 0000099F 26305D3F                		xor	[es:di+3Fh], bl
 13710                                  		;xor	[es:di+23h], bl	; reset	ownership flag
 13711 000009A3 5F                      		pop	di		; restore pointer to current bds
 13712 000009A4 07                      		pop	es
 13713 000009A5 26085D3F                		or	[es:di+3Fh], bl
 13714                                  		;or	[es:di+23h], bl	; ; set	ownership flag
 13715                                  
 13716                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 13717                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 13718                                  ; in this case.
 13719 000009A9 803E[7A00]01            		cmp	byte [fsetowner], 1
 13720 000009AE 7517                    		jnz	short not_fsetowner
 13721                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 13722 000009B0 26807D0400              		cmp	byte [es:di+4], 0
 13723 000009B5 753E                    		jnz	short singleret
 13724 000009B7 268A4505                		mov	al, [es:di+5]
 13725                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 13726                                  					; get the DOS drive letter
 13727 000009BB 06                      		push	es
 13728 000009BC 8E06[1A00]              		mov	es, [zeroseg]
 13729 000009C0 26A20405                		mov	[es:LSTDRV], al
 13730                                  		;mov	es:504h, al	; [es:LSTDRV]
 13731                                  					; set up sdsb
 13732 000009C4 07                      		pop	es		; restore bds pointer
 13733 000009C5 EB2E                    		jmp	short singleret
 13734                                  ; ---------------------------------------------------------------------------
 13735                                  
 13736                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 13737                                  ; we now check to see if we are in a single drive system and the application
 13738                                  ; has "cleverly" diddled the sdsb
 13739                                  
 13740                                  not_fsetowner:
 13741 000009C7 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 13742 000009CC 7517                    		jnz	short ignore_sdsb
 13743 000009CE 50                      		push	ax
 13744 000009CF 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 13745 000009D3 88C4                    		mov	ah, al
 13746 000009D5 06                      		push	es
 13747 000009D6 8E06[1A00]              		mov	es, [zeroseg]
 13748 000009DA 2686060405              		xchg	al, [es:LSTDRV]
 13749                                  		;xchg	al, es:504h	; [es:LSTDRV]
 13750                                  					; then swap(curr_drv,req_drv)
 13751 000009DF 07                      		pop	es
 13752 000009E0 38C4                    		cmp	ah, al		; else
 13753 000009E2 58                      		pop	ax		; swap(curr_drv,req_drv)
 13754 000009E3 7410                    		jz	short singleret	; issue	swap_dsk_msg
 13755                                  ignore_sdsb:
 13756 000009E5 E8B310                  		call	swpdsk
 13757 000009E8 EB0B                    		jmp	short singleret
 13758                                  ; ---------------------------------------------------------------------------
 13759                                  
 13760                                  scan_skip:
 13761 000009EA 26C43D                  		les	di, [es:di]
 13762                                  		;les	di, es:[di]	; [es:di+BDS.link]
 13763                                  					; go to	next bds
 13764 000009ED 83FFFF                  		cmp	di, 0FFFFh ; -1	; end of list?
 13765 000009F0 759F                    		jnz	short scan_list	; continue until hit end of list
 13766 000009F2 F9                      		stc
 13767 000009F3 5F                      		pop	di		; restore current bds
 13768 000009F4 07                      		pop	es
 13769                                  singleret:
 13770 000009F5 5B                      		pop	bx
 13771 000009F6 58                      		pop	ax
 13772 000009F7 C3                      		retn
 13773                                  
 13774                                  ; 22/12/2023
 13775                                  %if 0
 13776                                  ; ---------------------------------------------------------------------------
 13777                                  
 13778                                  baddrive:
 13779                                  		mov	al, 8		; sector not found
 13780                                  		jmp	short baddrive_ret
 13781                                  %endif
 13782                                  
 13783                                  ; ---------------------------------------------------------------------------
 13784                                  
 13785                                  unformatteddrive:
 13786 000009F8 B007                    		mov	al, 7		; unknown media
 13787                                  ;baddrive_ret:
 13788 000009FA F9                      		stc
 13789                                  ; ---------------------------------------------------------------------------
 13790                                  
 13791                                  ioret:
 13792 000009FB C3                      		retn
 13793                                  
 13794                                  ; ---------------------------------------------------------------------------
 13795                                  		
 13796                                  		; 22/12/2023 - Retro DOS v5.0
 13797                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A1Bh
 13798                                  
 13799 000009FC 10                      LBA_Packet:	db 16			; ...
 13800                                  					; DAP buffer
 13801 000009FD 00                                      db 0
 13802 000009FE 0000                    dap_block_cnt:	dw 0			; ...
 13803 00000A00 00000000                dap_trans_buf:	dd 0			; ...
 13804 00000A04 00000000                dap_lba_value:	dd 0			; ...
 13805 00000A08 00000000                		dd 0
 13806                                  
 13807                                  ; ---------------------------------------------------------------------------
 13808                                  
 13809                                  ; 15/10/2022
 13810                                  
 13811                                  ; ---------------------------------------------------------------------------
 13812                                  ;	disk i/o handler
 13813                                  ;
 13814                                  ;	al = drive number (0-6)
 13815                                  ;	ah = media descriptor
 13816                                  ;	cx = sector count
 13817                                  ;	dx = first sector (low)
 13818                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 13819                                  ;	ds = cs
 13820                                  ;	es:di = transfer address
 13821                                  ;	[rflag]=operation (2=read, 3=write)
 13822                                  ;	[verify]=1 for verify after write
 13823                                  ;
 13824                                  ;	if successful carry flag = 0
 13825                                  ;	  else cf=1 and al contains error code
 13826                                  ; ---------------------------------------------------------------------------
 13827                                  
 13828                                  		; 12/12/2023
 13829                                  		; ds = biosdata segment (cs = bioscode segment)
 13830                                  diskrd:	
 13831                                  		;mov	ds:rflag, 2	; romread
 13832                                  		; 19/10/2022
 13833 00000A0C C606[2001]02            		mov	byte [rflag], 2 ; romread
 13834                                  
 13835                                  ; =============== S U B	R O U T	I N E =======================================
 13836                                  
 13837                                  		; 22/12/2023 - Retro DOS v5.0
 13838                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A30h
 13839                                  ; 22/12/2023
 13840                                  %if 0
 13841                                  		; 19/10/2022
 13842                                  diskio:
 13843                                  		mov	bx, di		; es:bx	= transfer address
 13844                                  		mov	[xfer_seg], es	; save transfer	segment
 13845                                  		call	SetDrive
 13846                                  		mov	al, [es:di+10h]	; [es:di+BDS.media]
 13847                                  		mov	[medbyt], al
 13848                                  		;jcxz	short ioret
 13849                                  		jcxz	ioret
 13850                                  
 13851                                  ; see if the media is formatted or not by checking the flags field in
 13852                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 13853                                  ; go to the error exit at label unformatteddrive.
 13854                                  
 13855                                  		test	byte [es:di+24h], 2
 13856                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 13857                                  					; unformatted_media
 13858                                  		jnz	short unformatteddrive
 13859                                  		mov	[seccnt], cx	; save sector count
 13860                                  		mov	[spsav], sp	; save sp
 13861                                  
 13862                                  ; ensure that we are trying to access valid sectors on the drive
 13863                                  
 13864                                  		mov	ax, dx
 13865                                  		xor	si, si ; 0
 13866                                  		add	dx, cx
 13867                                  		;adc	si, 0
 13868                                  		; 02/09/2023 (PCDOS 7.1)
 13869                                  		rcl	si, 1
 13870                                  		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 13871                                  					; 32 bit sector ?
 13872                                  		jz	short sanity32
 13873                                  		;cmp	si, 0
 13874                                  		; 02/09/2023
 13875                                  		or	si, si
 13876                                  		jnz	short baddrive
 13877                                  		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 13878                                  		ja	short baddrive
 13879                                  		jmp	short sanityok
 13880                                  ; ---------------------------------------------------------------------------
 13881                                  
 13882                                  sanity32:
 13883                                  		add	si, [start_sec_h]
 13884                                  		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 13885                                  		jb	short sanityok
 13886                                  		ja	short baddrive
 13887                                  		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 13888                                  		ja	short baddrive
 13889                                  sanityok:
 13890                                  		mov	dx, [start_sec_h]
 13891                                  		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 13892                                  		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 13893                                  
 13894                                  ; now dx;ax have the physical first sector.
 13895                                  ; since the following procedures is going to destroy ax, let's
 13896                                  ; save it temporarily to saved_word.
 13897                                  
 13898                                  		mov	[saved_word], ax ; save the sector number (low)
 13899                                  
 13900                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 13901                                  ; will do it because we will skip the set up stuff with hard disks.
 13902                                  
 13903                                  		push	es
 13904                                  		;mov	es, [zeroseg]
 13905                                  		; 02/09/2023
 13906                                  		xor	si, si ; 0
 13907                                  		mov	es, si
 13908                                  		les	si, [es:DSKADR]
 13909                                  		;les	si, es:78h	; [es:DSKADR]
 13910                                  					; current disk parm table
 13911                                  		mov	[dpt], si
 13912                                  		mov	[dpt+2], es
 13913                                  		pop	es
 13914                                  		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 13915                                  					; fnon_removable
 13916                                  		jnz	short skip_setup
 13917                                  		call	checksingle
 13918                                  
 13919                                  ; check to see if we have previously noted a change line. the routine
 13920                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 13921                                  ; the proper error code.
 13922                                  
 13923                                  		cmp	byte [fhave96], 0 ; do we have changeline support?
 13924                                  		jz	short diskio_nochangeline ; brif not
 13925                                  		call	checklatchio	; will do a sneaky pop stack return
 13926                                  					; if a disk error occurs
 13927                                  diskio_nochangeline:			
 13928                                  		call	iosetup		; set up tables	and variables for i/o
 13929                                  
 13930                                  ; now the settle values are correct for the following code
 13931                                  
 13932                                  skip_setup:
 13933                                  
 13934                                  ; 32 bit sector calculation.
 13935                                  ; dx:[saved_word] = starting sector number.
 13936                                  				
 13937                                  		mov	ax, dx
 13938                                  		xor	dx, dx
 13939                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 13940                                  					 ; divide by sec per track
 13941                                  		; 02/09/2023
 13942                                  		mov	cx, [es:di+13h]
 13943                                  		div	cx
 13944                                  		mov	[temp_h], ax
 13945                                  		mov	ax, [saved_word]
 13946                                  		div	cx ; 02/09/2023
 13947                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 13948                                  					; now, [temp_h]:ax = track #, dx = sector
 13949                                  		;inc	dl		; sector number	is 1 based.
 13950                                  		; 18/12/2022
 13951                                  		inc	dx
 13952                                  		mov	[cursec], dl	; save current sector
 13953                                  		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 13954                                  					; get number of	heads
 13955                                  		push	ax
 13956                                  		xor	dx, dx
 13957                                  		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 13958                                  		div	cx
 13959                                  		mov	[temp_h], ax
 13960                                  		pop	ax
 13961                                  		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 13962                                  		cmp	word [temp_h], 0
 13963                                  		ja	short baddrive_brdg
 13964                                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 13965                                  		ja	short baddrive_brdg
 13966                                  		mov	[curhd], dl	; save current head
 13967                                  		mov	[curtrk], ax	; save current track
 13968                                  
 13969                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 13970                                  ; violations here. not true. we perform the operation as if everything is
 13971                                  ; symmetric; let the int 13 handler worry about the dma violations.
 13972                                  
 13973                                  		mov	ax, [seccnt]
 13974                                  		call	block		; (cas - call/ret)
 13975                                  		;call	done
 13976                                  		;retn
 13977                                  		; 18/12/2022
 13978                                  		jmp	done
 13979                                  %else
 13980                                  		;;;	; 22/12/2023
 13981                                  diskio:
 13982 00000A11 89FB                    		mov	bx, di		; al = drive number
 13983                                  					; cx = sector count
 13984                                  					; dx = first sector (low)
 13985                                  					; [start_sec_h] = first sector (high)
 13986                                  					;
 13987                                  					; es:bx = transfer address
 13988 00000A13 8C06[A804]              		mov	[xfer_seg], es	; save transfer segment
 13989 00000A17 E88AFB                  		call	SetDrive
 13990 00000A1A 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 13991 00000A1E A2[1F01]                		mov	[medbyt], al
 13992 00000A21 E3D8                    		jcxz	ioret
 13993                                  
 13994                                  ; see if the media is formatted or not by checking the flags field in
 13995                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 13996                                  ; go to the error exit at label unformatteddrive.
 13997                                  
 13998 00000A23 26F6454002              		test	byte [es:di+40h], 2 ; [es:di+BDS.flags+1]
 13999                                  					; unformatted_media
 14000 00000A28 75CE                    		jnz	short unformatteddrive
 14001 00000A2A 890E[2201]              		mov	[seccnt], cx	; save sector count
 14002 00000A2E 8926[3501]              		mov	[spsav], sp	; save sp
 14003                                  
 14004                                  ; ensure that we are trying to access valid sectors on the drive
 14005                                  
 14006 00000A32 89D0                    		mov	ax, dx
 14007 00000A34 31F6                    		xor	si, si ; 0
 14008 00000A36 01CA                    		add	dx, cx
 14009 00000A38 D1D6                    		rcl	si, 1
 14010 00000A3A 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 14011                                  					; > 32 bit sector ?
 14012 00000A3F 740E                    		jz	short sanity32
 14013 00000A41 09F6                    		or	si, si
 14014 00000A43 7506                    		jnz	short baddrive
 14015 00000A45 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 14016                                  		;ja	short baddrive
 14017                                  		;jmp	short sanityok
 14018                                  		; 22/12/2023
 14019 00000A49 7616                    		jna	short sanityok
 14020                                  ; 29/12/2023
 14021                                  ; 22/12/2023
 14022                                  ;%if 1
 14023                                  ; ---------------------------------------------------------------------------
 14024                                  
 14025                                  baddrive:
 14026 00000A4B B008                    		mov	al, 8		; sector not found
 14027                                  		;jmp	short baddrive_ret
 14028                                  ; ---------------------------------------------------------------------------
 14029                                  ;unformatteddrive:
 14030                                  		;mov	al, 7		; unknown media
 14031                                  baddrive_ret:
 14032 00000A4D F9                      		stc
 14033                                  ;ioret:
 14034 00000A4E C3                      		retn
 14035                                  ;%endif
 14036                                  
 14037                                  ; ---------------------------------------------------------------------------
 14038                                  
 14039                                  sanity32:
 14040 00000A4F 0336[9C04]              		add	si, [start_sec_h]
 14041 00000A53 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 14042 00000A57 7208                    		jb	short sanityok
 14043 00000A59 77F0                    		ja	short baddrive
 14044 00000A5B 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 14045 00000A5F 77EA                    		ja	short baddrive
 14046                                  sanityok:
 14047 00000A61 8B16[9C04]              		mov	dx, [start_sec_h]
 14048 00000A65 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 14049 00000A69 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 14050                                  
 14051                                  ; now dx;ax have the physical first sector.
 14052                                  ; since the following procedures is going to destroy ax, let's
 14053                                  ; save it temporarily to saved_word.
 14054                                  
 14055 00000A6D A3[9E04]                		mov	[saved_word], ax ; save the sector number (low)
 14056                                  
 14057                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 14058                                  ; will do it because we will skip the set up stuff with hard disks.
 14059                                  
 14060 00000A70 06                      		push	es
 14061 00000A71 31F6                    		xor	si, si ; 0
 14062 00000A73 8EC6                    		mov	es, si
 14063                                  		;les	si, dword ptr es:78h
 14064 00000A75 26C4367800              		les	si, [es:78h]	; INT 1Eh vector address
 14065                                  					; [es:DSKADR] - current disk parm table
 14066 00000A7A 8936[2D01]              		mov	[dpt], si
 14067 00000A7E 8C06[2F01]              		mov	[dpt+2], es
 14068 00000A82 07                      		pop	es
 14069 00000A83 26F6453F01              		test	byte [es:di+3Fh], 1 ; [es:di+BDS.flags], fnon_removable
 14070 00000A88 7510                    		jnz	short chk_13h_ext_flag
 14071 00000A8A E8EAFE                  		call	checksingle
 14072                                  
 14073                                  ; check to see if we have previously noted a change line. the routine
 14074                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 14075                                  ; the proper error code.
 14076                                  
 14077 00000A8D 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 14078 00000A92 7403                    		jz	short diskio_nochangeline ; brif not
 14079 00000A94 E8D210                  		call	checklatchio	; will do a sneaky pop stack return
 14080                                  					; if a disk error occurs
 14081                                  diskio_nochangeline:
 14082 00000A97 E8E000                  		call	iosetup		; set up tables and variables for i/o
 14083                                  
 14084                                  chk_13h_ext_flag:
 14085 00000A9A 26F6454004              		test	byte [es:di+40h], 4 ; [es:di+BDS.flags+1], fLBArw
 14086                                  					; LBA read/write flag
 14087 00000A9F 7539                    		jnz	short set_lbarw_1
 14088                                  		;jmp	skip_setup
 14089                                  		; 22/12/2023
 14090                                  ; ---------------------------------------------------------------------------
 14091                                  
 14092                                  ; now the settle values are correct for the following code
 14093                                  
 14094                                  skip_setup:
 14095                                  
 14096                                  ; 32 bit sector calculation.
 14097                                  ; dx:[saved_word] = starting sector number.
 14098                                  
 14099                                  		;push	bp ; ! (not necessary) ; 22/12/2023
 14100 00000AA1 92                      		xchg	ax, dx ; mov ax,dx
 14101 00000AA2 31D2                    		xor	dx, dx
 14102 00000AA4 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 14103                                  					; divide by sec per track
 14104 00000AA8 F7F1                    		div	cx
 14105 00000AAA 95                      		xchg	ax, bp ; mov bp,ax
 14106 00000AAB A1[9E04]                		mov	ax, [saved_word]
 14107 00000AAE F7F1                    		div	cx		; [es:di+BDS.secpertrack]
 14108                                  					; now, bp:ax = track #, dx = sector
 14109                                  					; sector number is 1 based.
 14110 00000AB0 42                      		inc	dx
 14111 00000AB1 8816[3101]              		mov	[cursec], dl	; save current sector
 14112 00000AB5 268B4D15                		mov	cx, [es:di+15h] ; [es:di+BDS.heads]
 14113                                  					; get number of heads
 14114                                  		; 22/12/2023
 14115                                  		;push	ax ; *
 14116 00000AB9 31D2                    		xor	dx, dx
 14117 00000ABB 95                      		xchg	ax, bp ; bp = *	; divide tracks by heads per cylinder
 14118 00000ABC F7F1                    		div	cx
 14119 00000ABE 95                      		xchg	ax, bp ; ax = *, bp = **
 14120                                  		;pop	ax ; *
 14121 00000ABF F7F1                    		div	cx		; now, bp:ax = cylinder #, dx = head
 14122 00000AC1 09ED                    		or	bp, bp ; ** = 0 ?
 14123                                  		;pop	bp ; ! ; 22/12/2023
 14124                                  		;jnz	short baddrive_brdg
 14125                                  		; 22/12/2023
 14126 00000AC3 7586                    		jnz	short baddrive
 14127                                  
 14128                                  		;cmp	ax, 1024	; 2^10 currently maximum for track #.
 14129                                  		;jnb	short baddrive_brdg
 14130                                  		; 22/12/2023
 14131 00000AC5 80FC04                  		cmp	ah, 4	; if ax >= 4*256 (1024) 
 14132 00000AC8 7381                    		jnb	short baddrive 
 14133                                  
 14134 00000ACA 8816[3201]              		mov	[curhd], dl	; save current head
 14135 00000ACE A3[3301]                		mov	[curtrk], ax	; save current track
 14136                                  
 14137                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 14138                                  ; violations here. not true. we perform the operation as if everything is
 14139                                  ; symmetric; let the int 13 handler worry about the dma violations.
 14140                                  
 14141 00000AD1 A1[2201]                		mov	ax, [seccnt]
 14142 00000AD4 E81F01                  		call	block
 14143                                  		;call	done
 14144                                  		;retn
 14145                                  		; 22/12/2023
 14146 00000AD7 E9E500                  		jmp	done
 14147                                  		
 14148                                  ; ---------------------------------------------------------------------------
 14149                                  
 14150                                  set_lbarw_1:
 14151 00000ADA A1[9E04]                		mov	ax, [saved_word] ; check for mini disk
 14152                                  					 ; (logical dos drive/partition)
 14153 00000ADD 26837D7901              		cmp	word [es:di+79h], 1 ; [di+BDS.bdsm_ismini]
 14154                                  					    ; logical dos partition
 14155 00000AE2 750F                    		jnz	short set_lbarw_2 ; not a logical dos partition/drive
 14156 00000AE4 26837D7B00              		cmp	word [es:di+7Bh], 0 ; [di+BDS.bdsm_hidden_trks] (> 0)
 14157 00000AE9 7408                    		jz	short set_lbarw_2
 14158 00000AEB 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 14159 00000AEF 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 14160                                  
 14161                                  set_lbarw_2:
 14162 00000AF3 2EA3[040A]              		mov	[cs:dap_lba_value], ax
 14163 00000AF7 2E8916[060A]            		mov	[cs:dap_lba_value+2], dx
 14164 00000AFC 2E891E[000A]            		mov	[cs:dap_trans_buf], bx
 14165 00000B01 A1[A804]                		mov	ax, [xfer_seg]
 14166 00000B04 2EA3[020A]              		mov	[cs:dap_trans_buf+2], ax
 14167 00000B08 A1[2201]                		mov	ax, [seccnt]
 14168 00000B0B 2EA3[FE09]              		mov	[cs:dap_block_cnt], ax
 14169 00000B0F BD0500                  		mov	bp, 5
 14170 00000B12 892E[A304]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 14171 00000B16 892E[A504]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count
 14172                                  
 14173                                  set_lbarw_3:
 14174 00000B1A 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14175 00000B1E 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 14176 00000B22 80C440                  		add	ah, 40h
 14177 00000B25 30C0                    		xor	al, al
 14178 00000B27 1E                      		push	ds
 14179 00000B28 0E                      		push	cs
 14180 00000B29 1F                      		pop	ds
 14181 00000B2A BE[FC09]                		mov	si, LBA_Packet
 14182 00000B2D CD13                    		int	13h		; LBA read/write
 14183 00000B2F 1F                      		pop	ds
 14184 00000B30 731A                    		jnc	short set_lbarw_7
 14185 00000B32 E8AC02                  		call	again
 14186                                  set_lbarw_9:
 14187 00000B35 7503                    		jnz	short set_lbarw_4
 14188 00000B37 E92B02                  		jmp	harderr
 14189                                  ; ---------------------------------------------------------------------------
 14190                                  
 14191                                  set_lbarw_4:
 14192                                  ;set_lbarw_9:	; 22/12/2023
 14193 00000B3A 80FCCC                  		cmp	ah, 0CCh	; Write fault (hard disk)
 14194 00000B3D 7505                    		jnz	short set_lbarw_5
 14195 00000B3F BD0100                  		mov	bp, 1
 14196                                  		;jmp	short set_lbarw_6
 14197                                  		; 17/04/2024
 14198 00000B42 EBD6                    		jmp	short set_lbarw_3
 14199                                  ; ---------------------------------------------------------------------------
 14200                                  
 14201                                  set_lbarw_5:
 14202                                  set_lbarw_10:	; 22/12/2023
 14203 00000B44 C706[A504]0500          		mov	word [soft_ecc_cnt], 5 ; soft ecc error retry count
 14204                                  set_lbarw_6:
 14205                                  set_lbarw_11:
 14206 00000B4A EBCE                    		jmp	short set_lbarw_3
 14207                                  ; ---------------------------------------------------------------------------
 14208                                  
 14209                                  set_lbarw_7:
 14210 00000B4C 813E[2001]0301          		cmp	word [rflag], 103h
 14211 00000B52 7523                    		jnz	short set_lbarw_12
 14212 00000B54 B444                    		mov	ah, 44h
 14213 00000B56 1E                      		push	ds
 14214 00000B57 0E                      		push	cs
 14215 00000B58 1F                      		pop	ds
 14216 00000B59 CD13                    		int	13h		; DISK - IBM/MS Extension - VERIFY SECTORS
 14217                                  					;  (DL - drive, [SI - disk address packet)
 14218 00000B5B 1F                      		pop	ds
 14219 00000B5C 7319                    		jnc	short set_lbarw_12
 14220 00000B5E 80FC11                  		cmp	ah, 11h		; ECC corrected data error (soft error - retried OK )
 14221 00000B61 7506                    		jnz	short set_lbarw_8
 14222 00000B63 FF0E[A504]              		dec	word [soft_ecc_cnt]
 14223                                  ;set_lbarw_8:
 14224 00000B67 740E                    		jz	short set_lbarw_12
 14225                                  set_lbarw_8:
 14226 00000B69 E8CF07                  		call	ResetDisk
 14227 00000B6C 80FC11                  		cmp	ah, 11h
 14228 00000B6F 74D9                    		jz	short set_lbarw_11
 14229 00000B71 FF0E[A304]              		dec	word [vretry_cnt]
 14230                                  		;jnz	short set_lbarw_9
 14231                                  		;jmp	harderr
 14232                                  		; 22/12/2023
 14233 00000B75 EBBE                    		jmp	short set_lbarw_9
 14234                                  
 14235                                  ; ---------------------------------------------------------------------------
 14236                                  ;		; 22/12/2023
 14237                                  ;set_lbarw_9:
 14238                                  ;		cmp	ah, 0CCh
 14239                                  ;		jnz	short set_lbarw_10
 14240                                  ;		mov	bp, 1
 14241                                  ;		jmp	short set_lbarw_11
 14242                                  ; ---------------------------------------------------------------------------
 14243                                  ;		; 22/12/2023
 14244                                  ;set_lbarw_10:
 14245                                  ;		mov	word [soft_ecc_cnt], 5 ; soft ecc error retry count
 14246                                  ;set_lbarw_11:
 14247                                  ;		jmp	short set_lbarw_3
 14248                                  ; ---------------------------------------------------------------------------
 14249                                  
 14250                                  set_lbarw_12:
 14251 00000B77 31C0                    		xor	ax, ax
 14252                                  skip_dpt_setting:	; 23/12/2023
 14253 00000B79 C3                      		retn
 14254                                  		;;;	; 22/12/2023
 14255                                  %endif
 14256                                  
 14257                                  ; ---------------------------------------------------------------------------
 14258                                  
 14259                                  		; 22/12/2023
 14260                                  ;baddrive_brdg:
 14261                                  		;jmp	baddrive
 14262                                  
 14263                                  ; =============== S U B	R O U T	I N E =======================================
 14264                                  
 14265                                  ;--------------------------------------------------------------
 14266                                  ; set the drive-last-accessed flag for diskette only.
 14267                                  ; we know that the hard disk will not be removed.
 14268                                  ; es:di -> current bds.
 14269                                  ; ds -> Bios_Data
 14270                                  ; ax,cx,si are destroyed.
 14271                                  ;--------------------------------------------------------------
 14272                                  
 14273                                  		; 23/12/2023 - Retro DOS v5.0
 14274                                  
 14275                                  		; 19/10/2022
 14276                                  iosetup:
 14277 00000B7A 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 14278 00000B7E A2[1E01]                		mov	[tim_drv], al	; save drive letter
 14279                                  
 14280                                  ; determine proper head settle values
 14281                                  
 14282 00000B81 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14283 00000B86 75F1                    		jnz	short skip_dpt_setting
 14284 00000B88 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 14285 00000B8B 1E                      		push	ds
 14286 00000B8C C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 14287 00000B90 884404                  		mov	[si+4],	al
 14288                                  		
 14289                                  		;; 23/12/2023
 14290                                  		;mov	ah, al
 14291                                  		;mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 14292                                  		;;mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 14293                                  		;pop	ds
 14294                                  		;mov	[motorstartup], al
 14295                                  		;mov	[save_eot], ah
 14296                                  		; 06/04/2024
 14297 00000B93 8A640A                  		mov	ah,[si+10]
 14298 00000B96 1F                      		pop	ds
 14299 00000B97 8826[2601]              		mov	[motorstartup], ah
 14300 00000B9B A2[2B01]                		mov	[save_eot], al
 14301                                  
 14302                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 14303                                  ; motor start time to 4. this checking for every i/o is going to affect
 14304                                  ; performance across the board, but is necessary!!
 14305                                  
 14306 00000B9E 1E                      		push	ds
 14307 00000B9F C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 14308                                  		; 23/12/2023  - Retro DOS v5.0
 14309 00000BA3 26807D3E02              		cmp	byte [es:di+3Eh], 2 ; (PCDOS 7.1 IBMBIO.COM)
 14310                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 14311                                  					; ffSmall
 14312 00000BA8 7505                    		jnz	short motor_start_ok
 14313 00000BAA B004                    		mov	al, 4
 14314 00000BAC 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 14315                                  motor_start_ok:
 14316                                  
 14317                                  ; ds:si now points to disk parameter table.
 14318                                  ; get current settle and set fast settle
 14319                                  
 14320                                  		;xor	al, al
 14321                                  		;inc	al		; ibm wants fast settle	to be 1
 14322                                  		; 18/12/2022
 14323 00000BAF 31C0                    		xor	ax, ax
 14324 00000BB1 40                      		inc	ax
 14325 00000BB2 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 14326                                  					; get settle and set up	for fast
 14327 00000BB5 1F                      		pop	ds
 14328 00000BB6 A2[2701]                		mov	[settlecurrent], al
 14329 00000BB9 B00F                    		mov	al, 15		; NORMSETTLE
 14330                                  					; someone has diddled the settle
 14331 00000BBB A2[2801]                		mov	[settleslow], al
 14332                                  		; 23/12/2023
 14333                                  ;skip_dpt_setting:
 14334 00000BBE C3                      		retn
 14335                                  
 14336                                  ; =============== S U B	R O U T	I N E =======================================
 14337                                  
 14338                                  ;--------------------------------------------------------------
 14339                                  ; set time of last access, and reset default values in the dpt.
 14340                                  ;
 14341                                  ;	  note: trashes (at least) si
 14342                                  ;--------------------------------------------------------------
 14343                                  
 14344                                  		; 23/12/2023 - Retro DOS v5.0
 14345                                  
 14346                                  		; 19/10/2022
 14347                                  done:		
 14348                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14349                                  					; fnon_removable
 14350                                  		; 23/12/2023
 14351 00000BBF 26F6453F01              		test	byte [es:di+3Fh], 1 ; (PCDOS 7.1 IBMBIO.COM)
 14352 00000BC4 752F                    		jnz	short ddbx	; do not set for non-removable media
 14353 00000BC6 E8F801                  		call	set_tim
 14354                                  ;diddleback:
 14355                                  ; 09/12/2022
 14356                                  diddle_back:
 14357 00000BC9 9C                      		pushf
 14358 00000BCA 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14359 00000BCF 7523                    		jnz	short nodiddleback
 14360 00000BD1 50                      		push	ax
 14361 00000BD2 06                      		push	es
 14362 00000BD3 C436[2D01]              		les	si, [dpt]
 14363 00000BD7 A0[2B01]                		mov	al, [save_eot]
 14364 00000BDA 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 14365 00000BDE A0[2701]                		mov	al, [settlecurrent]
 14366 00000BE1 8A26[2601]              		mov	ah, [motorstartup]
 14367 00000BE5 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 14368 00000BE9 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 14369 00000BEE 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 14370 00000BF2 07                      		pop	es
 14371 00000BF3 58                      		pop	ax
 14372                                  nodiddleback:
 14373 00000BF4 9D                      		popf
 14374                                  ddbx:
 14375 00000BF5 C3                      		retn
 14376                                  
 14377                                  ; =============== S U B	R O U T	I N E =======================================
 14378                                  
 14379                                  ;--------------------------------------------------------------
 14380                                  ;read the number of sectors specified in ax,
 14381                                  ;handling track boundaries
 14382                                  ;es:di -> bds for this drive
 14383                                  ;--------------------------------------------------------------
 14384                                  
 14385                                  		; 23/12/2023 - Retro DOS v5.0
 14386                                  
 14387                                  		; 19/10/2022
 14388                                  block:	
 14389 00000BF6 09C0                    		or	ax, ax
 14390 00000BF8 74FB                    		jz	short ddbx
 14391                                  		; 23/12/2023
 14392 00000BFA 26F6453F01              		test	byte [es:di+3Fh], 1 ; (PCDOS 7.1 IBMBIO.COM)
 14393                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14394                                  					    ; fnon_removable
 14395 00000BFF 740D                    		jz	short block_floppy
 14396                                  
 14397                                  ; check	to see if multi	track operation	is allowed. if not
 14398                                  ; we have to go	to the block_floppy below to break up the operation.
 14399                                  
 14400 00000C01 F606[A004]80            		test	byte [multrk_flag], 80h
 14401                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 14402 00000C06 7406                    		jz	short block_floppy
 14403 00000C08 E82800                  		call	Disk
 14404 00000C0B 31C0                    		xor	ax, ax
 14405 00000C0D C3                      		retn
 14406                                  ; ---------------------------------------------------------------------------
 14407                                  
 14408                                  block_floppy:
 14409                                  
 14410                                  ; read at most 1 track worth. perform minimization at sector / track
 14411                                  
 14412 00000C0E 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 14413                                  		;inc	cl
 14414                                  		; 23/12/2023
 14415 00000C12 41                      		inc	cx
 14416 00000C13 2A0E[3101]              		sub	cl, [cursec]
 14417 00000C17 30ED                    		xor	ch, ch
 14418 00000C19 39C8                    		cmp	ax, cx
 14419 00000C1B 7302                    		jnb	short gotmin
 14420 00000C1D 89C1                    		mov	cx, ax
 14421                                  gotmin:
 14422                                  
 14423                                  ; ax is the requested number of sectors to read
 14424                                  ; cx is the number that we can do on this track
 14425                                  
 14426 00000C1F 50                      		push	ax
 14427 00000C20 51                      		push	cx
 14428 00000C21 89C8                    		mov	ax, cx
 14429 00000C23 E80D00                  		call	Disk
 14430 00000C26 59                      		pop	cx
 14431 00000C27 58                      		pop	ax
 14432                                  
 14433                                  ; cx is the number of sectors just transferred
 14434                                  
 14435 00000C28 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 14436 00000C2A D0E1                    		shl	cl, 1
 14437 00000C2C 00CF                    		add	bh, cl		; adjust transfer address
 14438 00000C2E EBC6                    		jmp	short block
 14439                                  dskerr_brdg:
 14440 00000C30 E9F400                  		jmp	dskerr
 14441                                  
 14442                                  ; =============== S U B	R O U T	I N E =======================================
 14443                                  
 14444                                  ; 15/10/2022
 14445                                  
 14446                                  ;--------------------------------------------------------------
 14447                                  ;perform disk i/o with retries
 14448                                  ; al = number of sectors (1-8, all on one track)
 14449                                  ; es:di point to drive parameters
 14450                                  ; xfer_seg:bx = transfer address 
 14451                                  ;		(must not cross a 64k physical boundary)
 14452                                  ; [rflag] = 2 if read, 3 if write
 14453                                  ; [verify] = 0 for normal, 1 for verify after write
 14454                                  ;--------------------------------------------------------------
 14455                                  
 14456                                  		; 18/04/2024
 14457                                  		; 23/12/2023 - Retro DOS v5.0
 14458                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0C74h)
 14459                                  
 14460                                  		; 19/10/2022
 14461                                  Disk:
 14462                                  
 14463                                  ; Check for hard disk format and
 14464                                  ; if TRUE then set max error count to 2
 14465                                  
 14466 00000C33 BD0500                  		mov	bp, 5		; MAXERR
 14467                                  					; set up retry count
 14468                                  		; 18/04/2024
 14469                                  		;; 23/12/2023
 14470                                  		;mov	cl, [es:di+3Fh]
 14471                                  		;and	cx, 1
 14472 00000C36 26F6453F01              		test	byte [es:di+3Fh], 1
 14473                                  		;test	byte [es:di+23h], 1 
 14474                                  					; [es:di+BDS.flags], fnon_removable
 14475 00000C3B 7408                    		jz	short GetRdWrInd
 14476 00000C3D 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 14477 00000C40 7403                    		jz	short GetRdWrInd
 14478 00000C42 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 14479                                  GetRdWrInd:				
 14480 00000C45 892E[A304]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 14481 00000C49 892E[A504]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 14482 00000C4D 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 14483                                  ;retry:
 14484                                  ; 09/12/2022
 14485                                  _retry:
 14486 00000C51 50                      		push	ax
 14487 00000C52 8B16[3301]              		mov	dx, [curtrk]
 14488                                  		;; 23/12/2023
 14489                                  		;jcxz	disk_not_mini
 14490                                  		; 18/04/2024
 14491 00000C56 26F6453F01              		test	byte [es:di+3Fh], 1
 14492                                  		;test	byte [es:di+23h], 1
 14493 00000C5B 740B                    		jz	short disk_not_mini
 14494                                  
 14495                                  		; 23/12/2023
 14496 00000C5D 26837D7901              		cmp	word [es:di+79h], 1
 14497                                  		;cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 14498                                  					; is this a mini disk? ((logical dos partition))
 14499 00000C62 7504                    		jnz	short disk_not_mini ; no. continue to next.
 14500                                  		; 23/12/2023
 14501 00000C64 2603557B                		add     dx, [es:di+7Bh]
 14502                                  		;add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 14503                                  					; add hidden trks.
 14504                                  disk_not_mini:
 14505 00000C68 D0CE                    		ror	dh, 1
 14506 00000C6A D0CE                    		ror	dh, 1
 14507 00000C6C 0A36[3101]              		or	dh, [cursec]
 14508 00000C70 89D1                    		mov	cx, dx
 14509 00000C72 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 14510 00000C74 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 14511 00000C78 268A5504                		mov	dl, [es:di+4]	; physical drive number
 14512                                  					; [es:di+BDS.drivenum]
 14513                                  		; 23/12/2023
 14514 00000C7C 26807D3E05              		cmp	byte [es:di+3Eh], 5 
 14515                                  		;cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 14516 00000C81 7411                    		jz	short do_fast	; hard files use fast speed
 14517                                  
 14518                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 14519                                  ; this helps when we have just done a reset disk operation and the head has
 14520                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 14521                                  
 14522 00000C83 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 14523                                  		;jz	short do_writej
 14524                                  		; 23/12/2023
 14525 00000C88 746A                    		jz	short do_write
 14526 00000C8A 80FC02                  		cmp	ah, 2		; romread
 14527 00000C8D 7405                    		jz	short do_fast
 14528 00000C8F 80FC04                  		cmp	ah, 4		; romverify
 14529                                  		;jz	short do_fast
 14530                                  		; 23/12/2023
 14531 00000C92 7560                    		jnz	short do_write
 14532                                  ;do_writej:
 14533                                  
 14534                                  ; reads always fast, unless we have just done a disk reset operation
 14535                                  			
 14536                                  		;jmp	short do_write	; reads	always fast
 14537                                  ; ---------------------------------------------------------------------------
 14538                                  
 14539                                  do_fast:
 14540 00000C94 E80501                  		call	fastspeed	; change settle	mode
 14541                                  testerr:
 14542 00000C97 7297                    		jb	short dskerr_brdg
 14543                                  
 14544                                  		; 23/12/2023 Retro DOS v5.0
 14545                                  		; (PCDOS 7.1 IBMBIO.COM)
 14546 00000C99 83FD05                  		cmp	bp, 5		; is there retry ?
 14547 00000C9C 7505                    		jnz	short testerror	; yes
 14548 00000C9E 80FCBB                  		cmp	ah, 0BBh	; Undefined error (hard disk)
 14549 00000CA1 748D                    		jz	short dskerr_brdg
 14550                                  testerror:
 14551                                  
 14552                                  ; set drive and track of last access
 14553                                  
 14554 00000CA3 8816[7600]              		mov	[step_drv], dl
 14555                                  		; 23/12/2023
 14556 00000CA7 26886D78                		mov	[es:di+78h], ch
 14557                                  		;mov	[es:di+46h], ch	; [es:di+BDS.track]
 14558                                  no_set:
 14559                                  		;cmp	word [wrtverify], 103h
 14560 00000CAB 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 14561 00000CB1 7452                    		jz	short doverify
 14562                                  noverify:
 14563 00000CB3 58                      		pop	ax
 14564                                  
 14565                                  ; check the flags word in the bds to see if the drive is non removable
 14566                                  ; if not we needn't do anything special
 14567                                  ; if it is a hard disk then check to see if multi-track operation
 14568                                  ; is specified. if specified we don't have to calculate for the next
 14569                                  ; track since we are already done. so we can go to the exit of this routine.
 14570                                  
 14571                                  		; 23/12/2023
 14572 00000CB4 26F6453F01              		test	byte [es:di+3Fh], 1
 14573                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14574                                  					; fnon_removable
 14575 00000CB9 7407                    		jz	short its_removable
 14576 00000CBB F606[A004]80            		test	byte [multrk_flag], 80h ; multrk_on
 14577 00000CC0 7530                    		jnz	short disk_ret
 14578                                  its_removable:
 14579 00000CC2 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 14580 00000CC5 30E4                    		xor	ah, ah
 14581 00000CC7 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 14582 00000CCB 00C1                    		add	cl, al
 14583 00000CCD 880E[3101]              		mov	[cursec], cl
 14584 00000CD1 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 14585                                  					; see if sector/track limit reached
 14586 00000CD5 761B                    		jbe	short disk_ret
 14587 00000CD7 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 14588 00000CDC 8A36[3201]              		mov	dh, [curhd]
 14589 00000CE0 FEC6                    		inc	dh
 14590 00000CE2 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 14591 00000CE6 7206                    		jb	short noxor
 14592 00000CE8 30F6                    		xor	dh, dh
 14593 00000CEA FF06[3301]              		inc	word [curtrk]
 14594                                  noxor:
 14595 00000CEE 8836[3201]              		mov	[curhd], dh
 14596                                  disk_ret:
 14597 00000CF2 F8                      		clc
 14598 00000CF3 C3                      		retn
 14599                                  ; ---------------------------------------------------------------------------
 14600                                  
 14601                                  ; 15/10/2022
 14602                                  
 14603                                  ; 24/12/2023 - Retro DOS v5.0
 14604                                  
 14605                                  ;--------------------------------------------------------------
 14606                                  ; the request is for write. determine if we are talking about
 14607                                  ; the same track and drive. if so, use the fast speed.
 14608                                  ;--------------------------------------------------------------
 14609                                  
 14610                                  do_write:
 14611 00000CF4 3A16[7600]              		cmp	dl, [step_drv]
 14612 00000CF8 7506                    		jnz	short do_norm	; we have changed drives
 14613                                  		; 24/12/2023
 14614 00000CFA 263A6D78                		cmp	ch, [es:di+78h]
 14615                                  		;cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 14616 00000CFE 7494                    		jz	short do_fast	; we are still on the same track
 14617                                  do_norm:
 14618 00000D00 E87500                  		call	normspeed
 14619 00000D03 EB92                    		jmp	short testerr
 14620                                  ; ---------------------------------------------------------------------------
 14621                                  
 14622                                  ;--------------------------------------------------------------
 14623                                  ; we have a verify request also. get state info and go verify
 14624                                  ;--------------------------------------------------------------
 14625                                  
 14626                                  doverify:
 14627 00000D05 58                      		pop	ax
 14628 00000D06 50                      		push	ax
 14629 00000D07 B404                    		mov	ah, 4
 14630 00000D09 E89000                  		call	fastspeed
 14631 00000D0C 73A5                    		jnb	short noverify
 14632                                  
 14633                                  ; check the error returned in ah to see if it is a soft ecc error.
 14634                                  ; if it is not we needn't do anything special. if it is a soft
 14635                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 14636                                  ; this retry count becomes 0 then we just ignore the error and go to
 14637                                  ; no_verify but if we can still try then we call the routine to reset
 14638                                  ; the disk and go to dskerr1 to retry the operation.
 14639                                  
 14640 00000D0E 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 14641 00000D11 750B                    		jnz	short not_softecc_err
 14642 00000D13 FF0E[A504]              		dec	word [soft_ecc_cnt]
 14643 00000D17 749A                    		jz	short noverify	; no more retry
 14644 00000D19 E81F06                  		call	ResetDisk	; reset	disk
 14645 00000D1C EB3E                    		jmp	short dskerr1	; retry
 14646                                  ; ---------------------------------------------------------------------------
 14647                                  
 14648                                  not_softecc_err:			; other error.
 14649 00000D1E E81A06                  		call	ResetDisk
 14650 00000D21 FF0E[A304]              		dec	word [vretry_cnt]
 14651 00000D25 EB1C                    		jmp	short dskerr0
 14652                                  ; ---------------------------------------------------------------------------
 14653                                  
 14654                                  ;--------------------------------------------------------------
 14655                                  ; need to special case the change-line error ah=06h.
 14656                                  ; if we get this, we need to return it.
 14657                                  ;--------------------------------------------------------------
 14658                                  
 14659                                  dskerr:
 14660 00000D27 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 14661 00000D2C 7403                    		jz	short dskerr_nochangeline ; brif not
 14662 00000D2E E8BE0E                  		call	checkio
 14663                                  dskerr_nochangeline:
 14664 00000D31 803E[A704]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 14665 00000D36 7508                    		jnz	short dochkagain ; no more retry.
 14666 00000D38 BD0100                  		mov	bp, 1
 14667 00000D3B C606[A704]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 14668                                  dochkagain:
 14669 00000D40 E89E00                  		call	again
 14670                                  dskerr0:
 14671 00000D43 7420                    		jz	short harderr
 14672                                  		; 24/12/2023
 14673 00000D45 26F6453F01              		test	byte [es:di+3Fh], 1
 14674                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14675                                  					; fnon_removable
 14676 00000D4A 7505                    		jnz	short skip_timeout_chk
 14677 00000D4C 80FC80                  		cmp	ah, 80h		; timeout?
 14678 00000D4F 7414                    		jz	short harderr
 14679                                  skip_timeout_chk:
 14680 00000D51 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 14681 00000D54 740A                    		jz	short write_fault_err ;	then, don't retry.
 14682 00000D56 C706[A504]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 14683                                  					; set soft_ecc_cnt back	to maxerr
 14684                                  dskerr1:
 14685 00000D5C 58                      		pop	ax		; restore sector count
 14686                                  		;jmp	retry
 14687                                  		; 09/12/2022
 14688 00000D5D E9F1FE                  		jmp	_retry
 14689                                  ; ---------------------------------------------------------------------------
 14690                                  
 14691                                  write_fault_err:
 14692 00000D60 BD0100                  		mov	bp, 1		; just retry only once
 14693                                  					; for write fault error.
 14694 00000D63 EBF7                    		jmp	short dskerr1
 14695                                  
 14696                                  		; fall into harderr
 14697                                  ; ---------------------------------------------------------------------------
 14698                                  
 14699                                  ; entry point for routines that call maperror themselves
 14700                                  
 14701                                  harderr:
 14702 00000D65 E84100                  		call	maperror
 14703                                  harderr2:
 14704 00000D68 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 14705                                  					; force a media check through rom
 14706 00000D6D 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 14707 00000D71 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 14708                                  
 14709                                  ; since we are performing a non-local goto, restore the disk parameters
 14710                                  
 14711                                  		;jmp	diddleback
 14712                                  		; 09/12/2022
 14713 00000D75 E951FE                  		jmp	diddle_back
 14714                                  
 14715                                  ; =============== S U B	R O U T	I N E =======================================
 14716                                  
 14717                                  ; change settle value from settlecurrent to whatever is appropriate
 14718                                  ; note that this routine is never called for a fixed disk.
 14719                                  
 14720                                  		; 19/10/2022
 14721                                  normspeed:
 14722 00000D78 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14723 00000D7D 751D                    		jnz	short fastspeed
 14724 00000D7F 06                      		push	es
 14725 00000D80 50                      		push	ax
 14726 00000D81 A0[2801]                		mov	al, [settleslow]
 14727 00000D84 C436[2D01]              		les	si, [dpt]	; current disk parm table
 14728 00000D88 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 14729 00000D8C 58                      		pop	ax
 14730 00000D8D 07                      		pop	es
 14731 00000D8E E80B00                  		call	fastspeed
 14732                                  		; 24/12/2023
 14733                                  		;push	es
 14734                                  		;les	si, [dpt]
 14735                                  		;mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 14736                                  		;			; 1 is fast settle value
 14737                                  		;pop	es
 14738 00000D91 1E                      		push	ds
 14739 00000D92 C536[2D01]              		lds	si, [dpt]
 14740 00000D96 C6440901                		mov	byte [si+9], 1
 14741 00000D9A 1F                      		pop	ds
 14742                                  
 14743 00000D9B C3                      		retn
 14744                                  
 14745                                  ; =============== S U B	R O U T	I N E =======================================
 14746                                  
 14747                                  ; if the drive has been marked as too big (i.e. starting sector of the
 14748                                  ; partition is > 16 bits, then always return drive not ready.
 14749                                  
 14750                                  		; 24/12/2023 - Retro DOS v5.0
 14751                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0DDDh)
 14752                                  fastspeed:
 14753                                  		;;test	byte [es:di+3Bh], 80h ; [es:di+BDS.fatsiz]
 14754                                  		;test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 14755                                  		;			; ftoobig
 14756                                  		;jnz	short notready
 14757 00000D9C 06                      		push	es
 14758 00000D9D 8E06[A804]              		mov	es, [xfer_seg]
 14759 00000DA1 CD13                    		int	13h		; DISK -
 14760 00000DA3 8C06[A804]              		mov	[xfer_seg], es
 14761 00000DA7 07                      		pop	es
 14762 00000DA8 C3                      		retn
 14763                                  ; ---------------------------------------------------------------------------
 14764                                  ;		; 24/12/2023
 14765                                  ;notready:
 14766                                  		;stc
 14767                                  		;mov	ah, 80h
 14768                                  		;retn
 14769                                  
 14770                                  ; =============== S U B	R O U T	I N E =======================================
 14771                                  
 14772                                  ; map error returned by rom in ah into corresponding code to be returned to
 14773                                  ; dos in al. trashes di. guaranteed to set carry.
 14774                                  
 14775                                  maperror:
 14776 00000DA9 51                      		push	cx
 14777 00000DAA 06                      		push	es
 14778 00000DAB 1E                      		push	ds		; set es=Bios_Data
 14779 00000DAC 07                      		pop	es
 14780 00000DAD 88E0                    		mov	al, ah		; put error code in al
 14781 00000DAF A2[4601]                		mov	[lsterr], al	; terminate list with error code
 14782                                  		; 24/12/2023
 14783 00000DB2 B90B00                  		mov	cx, 11 ; PCDOS 7.1 ; 02/09/2023
 14784                                  		;mov	cx, 9		; numerr (= errout-errin)
 14785                                  					; number of possible error conditions
 14786 00000DB5 BF[3C01]                		mov	di, errin	; point to error conditions
 14787 00000DB8 F2AE                    		repne scasb
 14788                                  
 14789                                  		; 24/12/2023
 14790                                  		; 02/09/2023
 14791 00000DBA 8A450A                  		mov	al, [di+10] ; PCDOS 7.1 IBMBIO.COM
 14792                                  		; 10/12/2022
 14793                                  		;mov	al, [di+8]	; [di+numerr-1]
 14794                                  					; get translation
 14795                                  		; 19/10/2022 - Temporary ! 
 14796                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 14797 00000DBD 07                      		pop	es
 14798 00000DBE 59                      		pop	cx
 14799 00000DBF F9                      		stc			; flag error condition
 14800 00000DC0 C3                      		retn
 14801                                  
 14802                                  ; =============== S U B	R O U T	I N E =======================================
 14803                                  
 14804                                  ; set the time of last access for this drive.
 14805                                  ; this is done only for removable media. es:di -> bds
 14806                                  
 14807                                  set_tim:
 14808 00000DC1 50                      		push	ax
 14809 00000DC2 E86CF7                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 14810                                  
 14811                                  ; we have the new time. if we see that the time has passed,
 14812                                  ; then we reset the threshold counter...
 14813                                  
 14814                                  		; 24/12/2023 - Retro DOS v5.0
 14815 00000DC5 263B5579                		cmp	dx, [es:di+79h]	; PCDOS 7.1 IBMBIO.COM
 14816                                  		;cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 14817 00000DC9 7506                    		jne	short setaccess
 14818                                  		; 24/12/2023
 14819 00000DCB 263B4D7B                		cmp	cx, [es:di+7Bh]	; PCDOS 7.1 IBMBIO.COM
 14820                                  		;cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 14821                                  		;jz	short done_set
 14822                                  		; 12/12/2022
 14823 00000DCF 740E                    		je	short done_set2
 14824                                  setaccess:
 14825 00000DD1 C606[1D01]00            		mov	byte [accesscount], 0
 14826                                  		
 14827                                  		; 24/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14828 00000DD6 26895579                		mov	[es:di+79h], dx
 14829 00000DDA 26894D7B                		mov	[es:di+7Bh], cx
 14830                                  		;mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 14831                                  		;mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 14832                                  done_set:
 14833 00000DDE F8                      		clc
 14834                                  done_set2:		; 12/12/2022
 14835 00000DDF 58                      		pop	ax
 14836 00000DE0 C3                      		retn
 14837                                  
 14838                                  ; =============== S U B	R O U T	I N E =======================================
 14839                                  
 14840                                  ; this routine is called if an error occurs while formatting or verifying.
 14841                                  ; it resets the drive,and decrements the retry count.
 14842                                  ; on entry - ds:di - points to bds for the drive
 14843                                  ;	     bp    - contains retry count
 14844                                  ; on exit    flags indicate result of decrementing retry count
 14845                                  
 14846                                  again:
 14847 00000DE1 E85705                  		call	ResetDisk
 14848 00000DE4 80FC06                  		cmp	ah, 6
 14849 00000DE7 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 14850                                  					; do not decrement retry count.
 14851 00000DE9 4D                      		dec	bp		; decrement retry count
 14852 00000DEA C3                      		retn
 14853                                  ; ---------------------------------------------------------------------------
 14854                                  
 14855                                  dont_dec_retry_count:
 14856 00000DEB 08E4                    		or	ah, ah
 14857 00000DED C3                      		retn
 14858                                  
 14859                                  ;----------------------------------------------------------------------------
 14860                                  ; Retro DOS v5.0 - PCDOS 7.1 IBMBIO.COM - BIOSCODE:0E30h
 14861                                  ;----------------------------------------------------------------------------
 14862                                  ; 24/12/2023 - Retro DOS v5.0
 14863                                  ;;;;
 14864                                  
 14865 00000DEE 00                      ioctl_drvnum:	db 0
 14866                                  
 14867                                  		; 24/12/2023
 14868                                  
 14869                                  ; =============== S U B R O U T I N E =======================================
 14870                                  
 14871                                  get_phy_drv_num:
 14872 00000DEF E8B2F7                  		call	SetDrive	; get physical drive number
 14873                                  					; INPUT: al = logical drive number (BDS.drivelet)
 14874                                  					; OUTPUT: physical drive number (BDS.drivenum)
 14875 00000DF2 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14876 00000DF6 C3                      		retn
 14877                                  
 14878                                  ; =============== S U B R O U T I N E =======================================
 14879                                  
 14880                                  		; 24/12/2023
 14881                                  ioctl_output:
 14882 00000DF7 E8F5FF                  		call	get_phy_drv_num
 14883 00000DFA 2E8816[EE0D]            		mov	[cs:ioctl_drvnum], dl
 14884 00000DFF B441                    		mov	ah, 41h
 14885 00000E01 BBAA55                  		mov	bx, 55AAh
 14886 00000E04 CD13                    		int	13h		; DISK - Check for INT 13h Extensions
 14887                                  					; BX = 55AAh, DL = drive number
 14888                                  					; Return: CF set if not supported
 14889                                  					; AH = extensions version
 14890                                  					; BX = AA55h
 14891                                  					; CX = Interface support bit map
 14892 00000E06 7235                    		jc	short int13h_exts_err
 14893                                  ioctl_input_1:
 14894 00000E08 C43E[1200]              		les	di, [ptrsav]
 14895 00000E0C 26C47D0E                		les	di, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 14896 00000E10 723E                    		jc	short ioctl_input_2
 14897 00000E12 B80046                  		mov	ax, 4600h	; Eject removable media
 14898 00000E15 263805                  		cmp	[es:di], al	; al = 0 ; disk ioctl function = 0
 14899 00000E18 7417                    		je	short ioctl_output_1
 14900 00000E1A 26803D01                		cmp	byte [es:di], 1 ; al = 1 ; disk ioctl function = 1
 14901 00000E1E 751B                    		jne	short ioctl_output_2
 14902 00000E20 B80145                  		mov	ax, 4501h	; Lock/unlock media
 14903                                  					; (al, 0 = lock, 1 = unlock)
 14904 00000E23 26807D0100              		cmp	byte [es:di+1], 0 ; unlock (reverse of INT 13h ah=45h)
 14905 00000E28 7407                    		jz	short ioctl_output_1
 14906 00000E2A 26384501                		cmp	[es:di+1], al	; lock (reverse of INT 13h ah=45h)
 14907 00000E2E 750B                    		jne	short ioctl_output_2
 14908 00000E30 48                      		dec	ax
 14909                                  ioctl_output_1:
 14910 00000E31 2E8A16[EE0D]            		mov	dl, [cs:ioctl_drvnum]
 14911 00000E36 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE (DL - drive, [SI - disk address packet)
 14912 00000E38 7203                    		jc	short int13h_exts_err
 14913                                  ioctl_lock_err:
 14914                                  		; cf=0
 14915                                  ioctl_output_ret:
 14916                                  		;clc
 14917 00000E3A C3                      		retn
 14918                                  ; ---------------------------------------------------------------------------
 14919                                  
 14920                                  ioctl_output_2:
 14921 00000E3B B401                    		mov	ah, 1
 14922                                  int13h_exts_err:
 14923 00000E3D 80FCB0                  		cmp	ah, 0B0h	; volume not locked in drive
 14924 00000E40 74F8                    		je	short ioctl_lock_err
 14925 00000E42 80FCB4                  		cmp	ah, 0B4h	; lock count exceeded
 14926 00000E45 74F3                    		je	short ioctl_lock_err
 14927 00000E47 E9DAF7                  		jmp	err_exitj
 14928                                  
 14929                                  ; =============== S U B R O U T I N E =======================================
 14930                                  
 14931                                  		; 24/12/2023
 14932                                  ioctl_input:
 14933 00000E4A E8A2FF                  		call	get_phy_drv_num
 14934 00000E4D F9                      		stc
 14935 00000E4E EBB8                    		jmp	short ioctl_input_1
 14936                                  ioctl_input_2:
 14937 00000E50 26803D06                		cmp	byte [es:di], 6	; disk ioctl function = 6
 14938 00000E54 75E5                    		jne	short ioctl_output_2
 14939 00000E56 B80245                  		mov	ax, 4502h	; get lock status
 14940 00000E59 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE (DL - drive, [SI - disk address packet)
 14941 00000E5B 72E0                    		jc	short int13h_exts_err
 14942 00000E5D BB0C00                  		mov	bx, 0Ch		; bit 1 lock bit
 14943 00000E60 3C00                    		cmp	al, 0		; not locked
 14944 00000E62 7402                    		jz	short ioctl_input_3
 14945 00000E64 B30E                    		mov	bl, 0Eh
 14946                                  ioctl_input_3:
 14947 00000E66 53                      		push	bx
 14948 00000E67 B404                    		mov	ah, 4
 14949 00000E69 B90101                  		mov	cx, 101h
 14950 00000E6C B601                    		mov	dh, 1
 14951 00000E6E CD13                    		int	13h		; DISK - VERIFY SECTORS
 14952                                  					; AL = number of sectors to verify, CH = track, CL = sector
 14953                                  					; DH = head, DL = drive
 14954                                  					; Return: CF set on error, AH = status
 14955                                  					; AL = number of sectors verified
 14956 00000E70 5B                      		pop	bx
 14957 00000E71 80FC31                  		cmp	ah, 31h		; no media in drive (IBM/MS INT 13 extensions)
 14958 00000E74 740B                    		je	short ioctl_input_5
 14959 00000E76 80FC80                  		cmp	ah, 80h		; timeout (not ready)
 14960 00000E79 7406                    		je	short ioctl_input_5
 14961                                  ioctl_input_4:
 14962 00000E7B 26895D01                		mov	[es:di+1], bx
 14963 00000E7F EBB9                    		jmp	short ioctl_lock_err
 14964                                  ioctl_input_5:
 14965 00000E81 81CB0108                		or	bx, 801h	; bit 0 error bit (1 = error, 31h or 80h)
 14966                                  					; bit 11 (not ready -removable media error- bit)
 14967                                  					; if bit 11 = 0, another error (except 31h and 80h)
 14968 00000E85 EBF4                    		jmp	short ioctl_input_4
 14969                                  
 14970                                  ; ---------------------------------------------------------------------------
 14971                                  ;;;;
 14972                                  
 14973                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 14974                                  
 14975                                  ;----------------------------------------------------------------------------
 14976                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 14977                                  ;----------------------------------------------------------------------------
 14978                                  ; 11/03/2019 - Retro DOS v4.0
 14979                                  
 14980                                  ; 18/03/2019
 14981                                  
 14982                                  ; ==========================================================================
 14983                                  ;
 14984                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 14985                                  ;
 14986                                  ;      This function is intended to give the user to control the
 14987                                  ;      bds table flags of unformatted_media bit.
 14988                                  ;      GetAccessFlag will show the status -
 14989                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 14990                                  ;						1 disk i/o allowed
 14991                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 14992                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 14993                                  ;						1 disallow disk i/o
 14994                                  ; ==========================================================================
 14995                                  
 14996                                  		; generic ioctl dispatch tables
 14997                                  
 14998                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 14999                                  
 15000                                  ; 24/12/2023
 15001                                  ; BIOSCODE:0ECAh (PCDOS 7.1, IBMBIO.COM)
 15002                                  
 15003                                  ; ---------------------------------------------------------------------------
 15004                                  		; 24/12/2023
 15005                                  		;db 0
 15006                                  ; 09/12/2022 
 15007                                  %if 0
 15008                                  
 15009                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 15010                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 15011                                  		dw 0EE8h	; 61h	; ReadTrack
 15012                                  		dw 0E86h	; 62h	; VerifyTrack
 15013                                  		dw 0CA3h	 	; Cmd_Error_Proc
 15014                                  		dw 0CA3h		; Cmd_Error_Proc
 15015                                  		dw 0CA3h		; Cmd_Error_Proc
 15016                                  		dw 119Ah	; 66h	; GetMediaId
 15017                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 15018                                  		dw 12C1h	; 68h	; SenseMediaType
 15019                                  
 15020                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 15021                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 15022                                  		dw 0EEFh	; 41h	; WriteTrack
 15023                                  		dw 0DC1h	; 42h	; FormatTrack
 15024                                  		dw 0CA3h		; Cmd_Error_Proc
 15025                                  		dw 0CA3h		; Cmd_Error_Proc
 15026                                  		dw 0CA3h		; Cmd_Error_Proc
 15027                                  		dw 11D2h	; 46h	; SetMediaId
 15028                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 15029                                  
 15030                                  %endif
 15031                                  		; 24/12/2023 - Retro DOS v5.0
 15032                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0ECAh)
 15033                                  
 15034                                  		; 09/12/2022
 15035                                  IoReadJumpTable:
 15036 00000E87 10                      		db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 15
 15037 00000E88 [1A0F]                  		dw GetDeviceParameters	; 60h
 15038 00000E8A [9311]                  		dw ReadTrack		; 61h
 15039 00000E8C [3311]                  		dw VerifyTrack		; 62h
 15040 00000E8E [160F]                  		dw Cmd_Error_Proc
 15041 00000E90 [160F]                  		dw Cmd_Error_Proc
 15042 00000E92 [160F]                  		dw Cmd_Error_Proc
 15043 00000E94 [1214]                  		dw GetMediaId		; 66h
 15044 00000E96 [EF14]                  		dw GetAccessFlag	; 67h ; unpublished function
 15045 00000E98 [4415]                  		dw SenseMediaType	; 68h
 15046                                  		; 24/12/2023
 15047                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 15048 00000E9A [160F]                  		dw Cmd_Error_Proc	; 69h
 15049 00000E9C [160F]                  		dw Cmd_Error_Proc	; 6Ah
 15050 00000E9E [160F]                  		dw Cmd_Error_Proc
 15051 00000EA0 [160F]                  		dw Cmd_Error_Proc
 15052 00000EA2 [160F]                  		dw Cmd_Error_Proc
 15053 00000EA4 [160F]                  		dw Cmd_Error_Proc	; 6Eh
 15054 00000EA6 [C815]                  		dw GetDrvMapInfo	; 6Fh
 15055                                  
 15056                                  IoWriteJumpTable:
 15057 00000EA8 0A                      		db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 9
 15058 00000EA9 [7A0F]                  		dw SetDeviceParameters	; 40h
 15059 00000EAB [9A11]                  		dw WriteTrack		; 41h
 15060 00000EAD [6D10]                  		dw FormatTrack		; 42h
 15061 00000EAF [160F]                  		dw Cmd_Error_Proc
 15062 00000EB1 [160F]                  		dw Cmd_Error_Proc
 15063 00000EB3 [160F]                  		dw Cmd_Error_Proc
 15064 00000EB5 [5214]                  		dw SetMediaId		; 46h
 15065 00000EB7 [0415]                  		dw SetAccessFlag	; 47h ; unpublished function
 15066                                  		; 24/12/2023
 15067                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 15068 00000EB9 [8115]                  		dw SetLockState		; 48h
 15069 00000EBB [9815]                  		dw EjectMedia		; 49h	
 15070                                  		
 15071                                  ; ==========================================================================
 15072                                  ; IOC_DC_Table
 15073                                  ;
 15074                                  ; This table contains all of the valid generic IOCtl Minor codes for
 15075                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 15076                                  ; Added for 5.00
 15077                                  ; ==========================================================================
 15078                                  
 15079                                  		; 24/12/2023 - Retro DOS v5.0
 15080                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F00h)
 15081                                  
 15082 00000EBD 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 15083 00000EBE 40                      		db 40h			; SET_DEVICE_PARAMETERS
 15084 00000EBF 61                      		db 61h			; READ_TRACK
 15085 00000EC0 41                      		db 41h			; WRITE_TRACK
 15086 00000EC1 62                      		db 62h			; VERIFY_TRACK
 15087 00000EC2 42                      		db 42h			; FORMAT_TRACK
 15088 00000EC3 66                      		db 66h			; GET_MEDIA_ID
 15089 00000EC4 46                      		db 46h			; SET_MEDIA_ID
 15090 00000EC5 67                      		db 67h			; GET_ACCESS_FLAG
 15091 00000EC6 47                      		db 47h			; SET_ACCESS_FLAG
 15092 00000EC7 68                      		db 68h			; SENSE_MEDIA_TYPE
 15093                                  		; 24/12/2023
 15094                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 15095 00000EC8 48                      		db 48h			; SET_LOCK_STATE
 15096 00000EC9 49                      		db 49h			; EJECT_MEDIA
 15097 00000ECA 6F                      		db 6Fh			; GET_DRV_MAP_INFO
 15098                                  
 15099                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 15100                                  
 15101                                  		; 24/12/2023 - Retro DOS v5.0
 15102                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F0Eh)
 15103                                  
 15104 00000ECB 00                      new_genioctl:	db 0
 15105                                  
 15106                                  ; ---------------------------------------------------------------------------
 15107                                  
 15108                                  ; 16/10/2022
 15109                                  
 15110                                  ; ==========================================================================
 15111                                  ; Do_Generic_IOCtl: perform generic ioctl request
 15112                                  ;
 15113                                  ;    input: AL contains logical drive
 15114                                  ;
 15115                                  ;	functions are dispatched through a call. On return, carry indicates
 15116                                  ;	error code in al. Note::bES:b& ds undefined on return from
 15117                                  ;	subfunctions.
 15118                                  ;
 15119                                  ; ==========================================================================
 15120                                  
 15121                                  ; 11/03/2019
 15122                                  		; 24/12/2023 - Retro DOS v5.0
 15123                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F0Fh)
 15124                                  
 15125                                  		; 19/10/2022
 15126                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 15127 00000ECC E8D5F6                  		call	SetDrive	; ES:DI	Points to bds for drive
 15128                                  		
 15129                                  		; 24/12/2023
 15130                                  		;;;
 15131 00000ECF 2EC606[CB0E]00          		mov	byte [cs:new_genioctl], 0
 15132                                  					; 0, old generic ioctl function
 15133 00000ED5 06                      		push	es
 15134 00000ED6 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 15135 00000EDA 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 15136                                  					; RAWIO
 15137                                  		; 24/12/2023
 15138                                  		;mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 15139                                  		;pop	es
 15140                                  		;jnz	short IoctlFuncErr
 15141 00000EDF 740A                    		jz	short chk_genioctl_minor
 15142 00000EE1 2EFE06[CB0E]            		inc	byte [cs:new_genioctl]
 15143                                  					; 1, new generic ioctl function (FAT32)
 15144 00000EE6 26807F0D48              		cmp	byte [es:bx+0Dh], 48h ; Generic IOCtl Request support
 15145                                  				; (called only if bit 6 of attribute is set to 1)
 15146                                  chk_genioctl_minor:
 15147 00000EEB 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 15148 00000EEF 07                      		pop	es
 15149 00000EF0 7525                    		jnz	short IoctlFuncErr
 15150                                  		;;;
 15151                                  
 15152                                  		; cas note: Could do the above two blocks in reverse order.
 15153                                  		; Would have to preserve al for SetDrive
 15154                                  
 15155                                  		; 10/12/2022
 15156 00000EF2 BE[870E]                		mov	si, IoReadJumpTable
 15157                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 15158                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 15159 00000EF5 A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 15160 00000EF7 7503                    		jnz	short NotGenericWrite ; function is a read.
 15161                                  		; 10/12/2022
 15162 00000EF9 BE[A80E]                		mov	si, IoWriteJumpTable
 15163                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 15164                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 15165                                  NotGenericWrite:
 15166 00000EFC 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 15167 00000EFE 2C40                    		sub	al, 40h		; offset for base function
 15168 00000F00 2E3A04                  		cmp	al, [cs:si]
 15169 00000F03 7712                    		ja	short IoctlFuncErr
 15170 00000F05 98                      		cbw
 15171                                  		; 24/12/2023
 15172                                  		;shl	ax, 1
 15173 00000F06 01C0                    		add	ax, ax
 15174 00000F08 46                      		inc	si
 15175 00000F09 01C6                    		add	si, ax
 15176 00000F0B 2EFF14                  		call	near [cs:si]
 15177                                  		;call	word ptr cs:[si]
 15178 00000F0E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15179                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15180                                  					; 2C7h:30h = 70h:25A0h
 15181 00000F13 B481                    		mov	ah, 81h		; Return this status in	case of	carry
 15182 00000F15 C3                      		retn			; Pass carry flag through to exit code
 15183                                  ; ---------------------------------------------------------------------------
 15184                                  
 15185                                  		; Cmd_Error_Proc is called as a procedure and also use
 15186                                  		; as a fall through from above
 15187                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 15188 00000F16 5A                      		pop	dx
 15189                                  IoctlFuncErr:
 15190 00000F17 E9BBF1                  		jmp	bc_cmderr
 15191                                  ; ---------------------------------------------------------------------------
 15192                                  
 15193                                  ; 16/10/2022
 15194                                  
 15195                                  ; ==========================================================================
 15196                                  ;**	GetDeviceParameters:
 15197                                  ;
 15198                                  ;	GetDeviceParameters implements the generic ioctl function:
 15199                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 15200                                  ;
 15201                                  ;	ENTRY	(ES:di) = BDS for drive
 15202                                  ;		PtrSav = long pointer to request header
 15203                                  ;	EXIT	??? BUGBUG
 15204                                  ;	USES	??? BUGBUG
 15205                                  ; ==========================================================================
 15206                                  
 15207                                  		; 24/12/2023 - Retro DOS v5.0
 15208                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F5Dh)
 15209                                  
 15210                                  		; 19/10/2022
 15211                                  GetDeviceParameters:
 15212                                  		; Copy info from bds to the device parameters packet
 15213                                  
 15214 00000F1A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 15215 00000F1E C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15216                                  					; (DS:BX) = return buffer
 15217                                  		; 24/12/2023
 15218 00000F21 268A453E                		mov	al, [es:di+3Eh]
 15219                                  		;mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 15220 00000F25 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 15221                                  		; 24/12/2023
 15222 00000F28 268B453F                		mov	ax, [es:di+3Fh]
 15223                                  		;mov	ax, [es:di+35]	; [es:di+BDS.flags]
 15224 00000F2C 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 15225                                  					; Mask off other bits
 15226 00000F2F 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 15227                                  		; 24/12/2023
 15228 00000F32 268B4541                		mov     ax, [es:di+41h]
 15229                                  		;mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 15230 00000F36 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 15231 00000F39 30C0                    		xor	al, al		; Set media type to default
 15232 00000F3B 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 15233                                  					
 15234                                  		; copy recommended bpb
 15235                                  
 15236                                  		; 24/12/2023
 15237 00000F3E 8D7543                  		lea     si, [di+43h]
 15238                                  		;lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 15239 00000F41 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15240                                  					; BUILD_DEVICE_BPB
 15241 00000F44 7412                    		jz	short UseBpbPresent
 15242 00000F46 1E                      		push	ds		; Save request packet segment
 15243 00000F47 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15244                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15245                                  					; 2C7h:30h = 70h:25A0h
 15246                                  					; Point back to Bios_Data
 15247 00000F4C E828FA                  		call	checksingle
 15248 00000F4F E884F7                  		call	GetBp		; Build	the bpb	from scratch
 15249 00000F52 1F                      		pop	ds		; Restore request packet segment
 15250 00000F53 7224                    		jb	short GetParmRet
 15251 00000F55 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 15252                                  					; Use this subfield of bds instead
 15253                                  UseBpbPresent:				
 15254 00000F58 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 15255                                  					; This is where	the result goes
 15256                                  		; 24/12/2023
 15257 00000F5B 31D2                    		xor	dx, dx ; 0
 15258                                  		
 15259                                  		; 24/12/2023
 15260 00000F5D B91F00                  		mov	cx, 31		; A_BPB.size = 31
 15261                                  		;mov	cx, 25		; A_BPB.size - 6
 15262                                  					; For now use 'small' bpb
 15263                                  		; 24/12/2023
 15264                                  		;;;
 15265 00000F60 2E3816[CB0E]            		cmp	[cs:new_genioctl], dl ; 0 ? ; *
 15266 00000F65 7404                    		jz	short gdp_1	; old type (FAT12 & FAT16) structure
 15267                                  		;mov	cx, 53		; FAT32 BPB size
 15268                                  		;mov	dx, 32		; 53+32 = 85 bytes (A_BPB_FAT32.size)
 15269 00000F67 B135                    		mov	cl, 53
 15270 00000F69 B220                    		mov	dl, 32
 15271                                  gdp_1:
 15272                                  		;;;
 15273 00000F6B 1E                      		push	ds		; reverse segments for copy
 15274 00000F6C 06                      		push	es
 15275 00000F6D 1F                      		pop	ds
 15276 00000F6E 07                      		pop	es
 15277 00000F6F F3A4                    		rep movsb
 15278                                  
 15279                                  		; 24/12/2023
 15280                                  		;;;
 15281 00000F71 89D1                    		mov	cx, dx		; 0 or 32
 15282 00000F73 E304                    		jcxz	gdp_2
 15283 00000F75 30C0                    		xor	al, al		; 32 zeros
 15284 00000F77 F3AA                    		rep stosb
 15285                                  gdp_2:
 15286                                  		;clc	; cf is already 0 ; * ; 24/12/2023
 15287                                  		;;;		
 15288                                  		
 15289                                  		; 12/12/2022
 15290                                  		; cf=0 (cmp instruction -above- resets cf) 	
 15291                                  		;clc
 15292                                  GetParmRet:				
 15293 00000F79 C3                      		retn
 15294                                  ; ---------------------------------------------------------------------------
 15295                                  
 15296                                  ; 17/10/2022
 15297                                  ; 16/10/2022
 15298                                  
 15299                                  ; ==========================================================================
 15300                                  ; SetDeviceParameters:
 15301                                  ;
 15302                                  ; input: ES:di points to bds for drive
 15303                                  ; ==========================================================================
 15304                                  
 15305                                  		; 24/12/2023 - Retro DOS v5.0
 15306                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0FC0h)
 15307                                  
 15308                                  		; 19/10/2022
 15309                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 15310 00000F7A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 15311 00000F7E C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15312                                  		; 24/12/2023
 15313 00000F81 26814D3F4001            		or	word [es:di+3Fh], 140h
 15314                                  		;or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 15315                                  					; fchanged_by_format|fchanged
 15316 00000F87 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15317                                  					; ONLY_SET_TRACKLAYOUT
 15318                                  		;jnz	short setTrackTable
 15319                                  		; 24/12/2023
 15320 00000F8A 7403                    		jz	short sdp_1
 15321 00000F8C E98000                  		jmp	setTrackTable
 15322                                  sdp_1:	
 15323 00000F8F 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 15324                                  		; 24/12/2023
 15325 00000F92 2688453E                		mov	[es:di+3Eh], al
 15326                                  		;mov	[es:di+34], al	; [es:di+BDS.formfactor]
 15327 00000F96 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 15328                                  		; 24/12/2023
 15329 00000F99 26894541                		mov	[es:di+41h], ax
 15330                                  		;mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 15331 00000F9D 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 15332 00000FA0 1E                      		push	ds
 15333                                  		; 17/10/2022
 15334 00000FA1 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15335                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15336                                  					; 2C7h:30h = 70h:25A0h
 15337                                  		;cmp	byte [fhave96], 0
 15338 00000FA6 803E[7700]00            		cmp	byte [fhave96], 0
 15339 00000FAB 1F                      		pop	ds
 15340 00000FAC 7502                    		jnz	short HaveChange ; we have changeline support
 15341                                  		; 10/12/2022
 15342 00000FAE 24FD                    		and	al, 0FDh
 15343                                  		;and	ax, 0FFFDh	; ~fchangeline
 15344                                  
 15345                                  		; Ignore all bits except non_removable and changeline
 15346                                  HaveChange:
 15347 00000FB0 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 15348                                  		; 24/12/2023
 15349 00000FB3 268B4D3F                		mov	cx, [es:di+3Fh]
 15350                                  		;mov	cx, [es:di+35]	; [es:di+BDS.flags]
 15351 00000FB7 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 15352 00000FBB 09C8                    		or	ax, cx
 15353                                  		; 24/12/2023
 15354 00000FBD 2689453F                		mov	[es:di+3Fh], ax
 15355                                  		;mov	[es:di+35], ax	; [es:di+BDS.flags]
 15356 00000FC1 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 15357                                  					; Set media type
 15358 00000FC4 1E                      		push	ds
 15359 00000FC5 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15360                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15361 00000FCA A2[A805]                		mov	[mediatype], al
 15362                                  		;mov	ds:mediatype, al
 15363                                  
 15364                                  		; 24/12/2023
 15365                                  		;;;
 15366 00000FCD B93500                  		mov	cx, 53		; FAT32 BPB size
 15367 00000FD0 2E803E[CB0E]00          		cmp	byte [cs:new_genioctl], 0
 15368 00000FD6 7502                    		jnz	short sdp_2	; new type (FAT32) structure
 15369                                  		;mov	cx, 31		; A_BPB.size = 31
 15370 00000FD8 B11F                    		mov	cl, 31
 15371                                  sdp_2:
 15372                                  		;;;	
 15373 00000FDA 1F                      		pop	ds
 15374                                  
 15375                                  		; The media changed (maybe) so we will have to do a set dasd
 15376                                  		; the next time we format a track
 15377                                  
 15378                                  		; 24/12/2023
 15379 00000FDB 26804D3F80              		or	byte [es:di+3Fh], 80h
 15380                                  		; 10/12/2022
 15381                                  		;or	byte [es:di+35], 80h
 15382                                  		;;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 15383                                  					; set_dasd_true
 15384 00000FE0 57                      		push	di		; Save bds pointer
 15385                                  
 15386                                  		; Figure out what we are supposed to do with the bpb
 15387                                  		; were we asked to install a fake bpb?
 15388                                  
 15389 00000FE1 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15390                                  					; INSTALL_FAKE_BPB
 15391 00000FE4 7511                    		jnz	short InstallFakeBpb
 15392                                  
 15393                                  		; were we returning a fake bpb when asked to build a bpb?
 15394                                  
 15395                                  		; 24/12/2023
 15396 00000FE6 26F6453F04              		test	byte [es:di+3Fh], 4
 15397                                  		; 10/12/2022
 15398                                  		;test	byte [es:di+35], 4
 15399                                  		;;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 15400                                  					; return_fake_bpb
 15401 00000FEB 7405                    		jz	short InstallRecommendedBpb
 15402                                  
 15403                                  		; we were returning a fake bpb but we can stop now
 15404                                  
 15405                                  		; 24/12/2023
 15406 00000FED 2680653FFB              		and	byte [es:di+3Fh], 0FBh
 15407                                  		; 10/12/2022
 15408                                  		;and	byte [es:di+35], 0FBh
 15409                                  		;;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 15410                                  					; ~return_fake_bpb
 15411                                  InstallRecommendedBpb:
 15412                                  		; 24/12/2023
 15413                                  		;mov	cx, 31		; A_BPB.size
 15414                                  		;lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 15415                                  		; cx = 53 or 31
 15416 00000FF2 8D7D43                  		lea	di, [di+43h]	; (PCDOS 7.1 IBMBIO.COM)
 15417 00000FF5 EB08                    		jmp	short CopyTheBpb
 15418                                  ; ---------------------------------------------------------------------------
 15419                                  
 15420                                  InstallFakeBpb:
 15421                                  		; 24/12/2023
 15422 00000FF7 26804D3F04              		or	byte [es:di+3Fh], 4
 15423                                  		; 10/12/2022
 15424                                  		;or	byte [es:di+35], 4
 15425                                  		;;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 15426                                  					; return_fake_bpb
 15427                                  		; 24/12/2023
 15428                                  		; cx = 53 or 31
 15429                                  		;mov	cx, 25		; A_BPB.size - 6
 15430                                  					; move 'smaller' bpb
 15431 00000FFC 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 15432                                  CopyTheBpb:				
 15433 00000FFF 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 15434 00001002 F3A4                    		rep movsb
 15435 00001004 1E                      		push	ds		; Save packet segment
 15436                                  		; 17/10/2022
 15437 00001005 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15438                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15439                                  					; Setup	for ds -> Bios_Data
 15440 0000100A E8DD03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 15441 0000100D 1F                      		pop	ds		; Restore packet segment
 15442 0000100E 5F                      		pop	di		; Restore bds pointer
 15443                                  setTrackTable:	
 15444                                  		; 24/12/2023
 15445                                  		;mov	cx, [bx+38]	; [bx+26h]
 15446                                  		;;;
 15447 0000100F 8B4F5C                  		mov	cx, [bx+5Ch]	; [bx+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES]
 15448                                  					; offset 85+7 (A_BPB.size+7) (FAT32)
 15449 00001012 2E803E[CB0E]00          		cmp	byte [cs:new_genioctl], 0
 15450 00001018 7503                    		jnz	short sdp_3	; new type (FAT32) structure
 15451 0000101A 8B4F26                  		mov	cx, [bx+26h]	; [bx+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES]
 15452                                  					; offset 31+7 (A_BPB.size+7)
 15453                                  sdp_3:
 15454                                  		;;;
 15455                                  
 15456 0000101D 1E                      		push	ds
 15457 0000101E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15458 00001023 890E[AA04]              		mov	[sectorspertrack], cx
 15459 00001027 1F                      		pop	ds
 15460                                  		
 15461                                  		; 24/12/2023
 15462 00001028 2680653FF7              		and	byte [es:di+3Fh], 0F7h
 15463                                  		; 10/12/2022
 15464                                  		;and	byte [es:di+35], 0F7h
 15465                                  		;;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 15466                                  					; ~good_tracklayout
 15467 0000102D F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15468                                  					; TRACKLAYOUT_IS_GOOD
 15469 00001030 7405                    		jz	short UglyTrackLayOut
 15470                                  		; 24/12/2023
 15471 00001032 26804D3F08              		or	byte [es:di+3Fh], 8
 15472                                  		; 10/12/2022
 15473                                  		;or	byte [es:di+35], 8
 15474                                  		;;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 15475                                  					; good_tracklayout
 15476                                  UglyTrackLayOut:
 15477 00001037 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 15478 0000103A 772D                    		ja	short TooManyPerTrack
 15479                                  		;jcxz	short SectorInfoSaved
 15480 0000103C E329                    		jcxz	SectorInfoSaved	; 19/10/2022
 15481                                  		
 15482 0000103E BF[AC04]                		mov	di, tracktable
 15483                                  
 15484                                  		; 24/12/2023
 15485                                  		;lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 15486                                  		;;;
 15487 00001041 8D775E                  		lea	si, [bx+5Eh]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 15488                                  					; offset 85+9 (A_BPB.size+9) (FAT32)
 15489 00001044 2E803E[CB0E]00          		cmp	byte [cs:new_genioctl], 0
 15490 0000104A 7503                    		jnz	short sdp_4	; new type (FAT32) structure
 15491 0000104C 8D7728                  		lea	si, [bx+28h]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 15492                                  					; offset 31+9 (A_BPB.size+9)
 15493                                  sdp_4:
 15494                                  		;;;
 15495                                  
 15496                                  		; 17/10/2022
 15497 0000104F 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 15498                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15499                                  					; Trash	our bds	pointer
 15500                                  StoreSectorInfo:
 15501 00001054 47                      		inc	di
 15502 00001055 47                      		inc	di		; Skip over cylinder and head
 15503 00001056 AD                      		lodsw			; Get sector id
 15504 00001057 AA                      		stosb			; Copy it
 15505 00001058 AD                      		lodsw			; Get sector size
 15506                                  		
 15507                                  		; 24/12/2023
 15508                                  		; 02/09/2023 (PCDOS 7.1)
 15509                                  		;call	SectSizeToSectIndex
 15510                                  		; 18/04/2024
 15511                                  		;cmp	ah, 3 ; 02/09/2023
 15512 00001059 80FC02                  		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 15513                                  					; examine upper	byte only
 15514 0000105C 7704                    		ja	short OneK
 15515 0000105E 88E0                    		mov	al, ah		; value	in AH is the index!
 15516 00001060 EB02                    		jmp	short sdp_s
 15517                                  OneK:
 15518 00001062 B003                    		mov	al, 3		; 1024 bytes per sector
 15519                                  sdp_s:
 15520 00001064 AA                      		stosb			; Store	sector SIZE index
 15521 00001065 E2ED                    		loop	StoreSectorInfo
 15522                                  SectorInfoSaved:
 15523 00001067 F8                      		clc
 15524 00001068 C3                      		retn
 15525                                  ; ---------------------------------------------------------------------------
 15526                                  
 15527                                  TooManyPerTrack:
 15528 00001069 B00C                    		mov	al, 0Ch
 15529 0000106B F9                      		stc
 15530 0000106C C3                      		retn
 15531                                  ; ---------------------------------------------------------------------------
 15532                                  
 15533                                  ; 16/10/2022
 15534                                  
 15535                                  ; ==========================================================================
 15536                                  ; FormatTrack:
 15537                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 15538                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 15539                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 15540                                  ;
 15541                                  ; input: ES:di points to bds for drive
 15542                                  ;
 15543                                  ; output:
 15544                                  ;	for status call:
 15545                                  ;	specialfunction byte set to:
 15546                                  ;		0 - rom support + legal combination
 15547                                  ;		1 - no rom support
 15548                                  ;		2 - illegal combination
 15549                                  ;		3 - no media present
 15550                                  ;	carry cleared.
 15551                                  ;
 15552                                  ;	for format track:
 15553                                  ;		carry set if error
 15554                                  ;
 15555                                  ; ==========================================================================
 15556                                  
 15557                                  ; 16/03/2019
 15558                                  		; 24/12/2023 - Retro DOS 5.0
 15559                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:10B7h)
 15560                                  
 15561                                  		; 19/10/2022
 15562                                  FormatTrack:
 15563 0000106D C51E[1200]              		lds	bx, [ptrsav]
 15564 00001071 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 15565 00001074 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15566                                  					; STATUS_FOR_FORMAT
 15567 00001077 740E                    		jz	short DoFormatTrack
 15568 00001079 1E                      		push	ds
 15569                                  		; 17/10/2022
 15570 0000107A 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15571                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15572 0000107F E82502                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 15573 00001082 1F                      		pop	ds
 15574 00001083 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 15575 00001085 F8                      		clc
 15576 00001086 C3                      		retn
 15577                                  ; ---------------------------------------------------------------------------
 15578                                  
 15579                                  DoFormatTrack:
 15580                                  		; 24/12/2023 - Retro DOS 5.0
 15581 00001087 26807D3E05              		cmp	byte [es:di+3Eh], 5				
 15582                                  		;cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 15583                                  					; DEV_HARDDISK
 15584 0000108C 7508                    		jnz	short DoFormatDiskette
 15585                                  		; 17/10/2022
 15586 0000108E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15587                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15588                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 15589 00001093 E99D00                  		jmp	VerifyTrack
 15590                                  ; ---------------------------------------------------------------------------
 15591                                  
 15592                                  DoFormatDiskette:
 15593 00001096 8B4F01                  		mov	cx, [bx+1]
 15594 00001099 8B5703                  		mov	dx, [bx+3]
 15595 0000109C F60702                  		test	byte [bx], 2
 15596                                  		; 17/10/2022
 15597 0000109F 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 15598                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 15599                                  					; Setup	ds-> Bios_Data for verify
 15600 000010A4 7403                    		jz	short DoFormatDiskette_1
 15601 000010A6 E9E500                  		jmp	VerifyTrack_Err
 15602                                  ; ---------------------------------------------------------------------------
 15603                                  
 15604                                  DoFormatDiskette_1:
 15605 000010A9 E8FB01                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 15606 000010AC 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 15607 000010AE 7406                    		jz	short NeedToSetDasd ; Old rom
 15608 000010B0 3C03                    		cmp	al, 3		; Time out error?
 15609 000010B2 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 15610                                  					; about	the illegal combination)
 15611 000010B4 EB68                    		jmp	short FormatFailed
 15612                                  ; ---------------------------------------------------------------------------
 15613                                  
 15614                                  NeedToSetDasd:
 15615 000010B6 52                      		push	dx
 15616 000010B7 E89001                  		call	SetDasd		; INT 13h, AH=17h
 15617 000010BA 5A                      		pop	dx
 15618                                  NoSetDasd:
 15619 000010BB E8B9F8                  		call	checksingle	; Do any needed	diskette swapping
 15620 000010BE 89D0                    		mov	ax, dx		; Get track from packet
 15621 000010C0 A3[3901]                		mov	[trknum], ax
 15622 000010C3 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 15623 000010C7 88CC                    		mov	ah, cl
 15624 000010C9 BB[AC04]                		mov	bx, tracktable
 15625 000010CC 8B0E[AA04]              		mov	cx, [sectorspertrack]
 15626                                  		; 24/12/2023 - Retro DOS 5.0
 15627 000010D0 E307                    		jcxz	set_fmt_retry_count
 15628                                  StoreCylinderHead:
 15629 000010D2 8907                    		mov	[bx], ax	; Store	into TrackTable
 15630 000010D4 83C304                  		add	bx, 4		; Skip to next sector field
 15631 000010D7 E2F9                    		loop	StoreCylinderHead
 15632                                  set_fmt_retry_count:	; 24/12/2023
 15633                                  		;mov	cx, 5		; MAXERR - Set up retry	count
 15634                                  		; 02/09/2023
 15635 000010D9 B105                    		mov	cl, 5
 15636                                  FormatRetry:
 15637 000010DB 51                      		push	cx
 15638 000010DC BB[AC04]                		mov	bx, tracktable
 15639 000010DF A0[AA04]                		mov	al, [sectorspertrack]
 15640 000010E2 B405                    		mov	ah, 5		; romformat
 15641 000010E4 8C1E[A804]              		mov	[xfer_seg], ds
 15642 000010E8 E86602                  		call	ToRom
 15643 000010EB 59                      		pop	cx
 15644 000010EC 7216                    		jb	short FormatError
 15645 000010EE 51                      		push	cx		; Now verify the sectors just formatted.
 15646                                  					; NOTE:	because	of bug in some BIOSes we have to
 15647                                  					;	set ES:BX to 00:00
 15648 000010EF 53                      		push	bx
 15649 000010F0 31DB                    		xor	bx, bx
 15650 000010F2 891E[A804]              		mov	[xfer_seg], bx
 15651 000010F6 A0[AA04]                		mov	al, [sectorspertrack]
 15652 000010F9 B404                    		mov	ah, 4		; romverify
 15653 000010FB B101                    		mov	cl, 1
 15654 000010FD E85102                  		call	ToRom
 15655 00001100 5B                      		pop	bx
 15656 00001101 59                      		pop	cx
 15657 00001102 7329                    		jnb	short FormatOk
 15658                                  FormatError:
 15659 00001104 E83402                  		call	ResetDisk
 15660 00001107 C606[AA05]01            		mov	byte [had_format_error], 1
 15661 0000110C 50                      		push	ax
 15662 0000110D 51                      		push	cx
 15663 0000110E 52                      		push	dx
 15664 0000110F E89501                  		call	SetMediaForFormat
 15665 00001112 3C01                    		cmp	al, 1
 15666 00001114 7503                    		jnz	short WhileErr
 15667 00001116 E83101                  		call	SetDasd
 15668                                  WhileErr:
 15669 00001119 5A                      		pop	dx
 15670 0000111A 59                      		pop	cx
 15671 0000111B 58                      		pop	ax
 15672 0000111C E2BD                    		loop	FormatRetry
 15673                                  FormatFailed:
 15674 0000111E C606[AA05]01            		mov	byte [had_format_error], 1
 15675                                  					; Set the format error flag
 15676 00001123 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 15677 00001126 7502                    		jnz	short DoMapIt	; Error	to time	out error
 15678 00001128 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 15679                                  DoMapIt:
 15680 0000112A E97CFC                  		jmp	maperror
 15681                                  ; ---------------------------------------------------------------------------
 15682                                  
 15683                                  FormatOk:
 15684 0000112D C606[AA05]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 15685 00001132 C3                      		retn
 15686                                  ; ---------------------------------------------------------------------------
 15687                                  
 15688                                  ; 16/10/2022
 15689                                  
 15690                                  ; ==========================================================================
 15691                                  ;
 15692                                  ; VerifyTrack:
 15693                                  ;
 15694                                  ; input: ES:di points to bds for drive
 15695                                  ; ==========================================================================
 15696                                  
 15697                                  		; 24/12/2023 - Retro DOS 5.0
 15698                                  VerifyTrack:
 15699 00001133 1E                      		push	ds
 15700 00001134 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 15701 00001138 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15702                                  
 15703                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 15704                                  
 15705 0000113B 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 15706 0000113E 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 15707 00001141 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 15708 00001144 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 15709                                  					; Get option flag word
 15710 00001146 1F                      		pop	ds
 15711 00001147 C606[2001]04            		mov	byte [rflag], 4	; romverify
 15712 0000114C 890E[3301]              		mov	[curtrk], cx
 15713 00001150 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 15714 00001153 8B0E[AA04]              		mov	cx, [sectorspertrack]
 15715                                  
 15716                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 15717                                  		; specified if not we should go to the normal track verification
 15718                                  		; routine. If fast format has been specified we should get the
 15719                                  		; number of tracks to be verified and check it to see if it is
 15720                                  		; > 255. If it is then it is an error and we should go to
 15721                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 15722                                  		; sectors per track to get the total number of sectors to be
 15723                                  		; verified. This should also be less than equal to 255
 15724                                  		; otherwise we go to same error exit. If everything is okay
 15725                                  		; we initialise cx to the total sectors. use ax as a temporary
 15726                                  		; register.
 15727                                  
 15728                                  					; Special function requested?	
 15729 00001157 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 15730 0000115A 7421                    		jz	short NormVerifyTrack
 15731 0000115C 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 15732 0000115E 08E4                    		or	ah, ah
 15733 00001160 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 15734 00001162 F6E1                    		mul	cl
 15735 00001164 08E4                    		or	ah, ah
 15736 00001166 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 15737 00001168 89C1                    		mov	cx, ax
 15738                                  		; 24/12/2023
 15739 0000116A 26F6453F01              		test	byte [es:di+3Fh], 1 ; PCDOS 7.1 IBMBIO.COM
 15740                                  		; 10/12/2022
 15741                                  		;test	byte [es:di+35], 1
 15742                                  		;;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 15743                                  					; fnon_removable
 15744 0000116F 740C                    		jz	short NormVerifyTrack
 15745                                  					; Multitrack operation = on?
 15746                                  		; 10/12/2022
 15747                                  		; 19/10/2022
 15748 00001171 F606[A004]80            		test	byte [multrk_flag], 80h
 15749                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 15750                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 15751 00001176 7405                    		jz	short NormVerifyTrack
 15752 00001178 C606[A704]01            		mov	byte [multitrk_format_flag], 1
 15753                                  NormVerifyTrack:
 15754 0000117D 31C0                    		xor	ax, ax		; 1st sector
 15755 0000117F 31DB                    		xor	bx, bx
 15756 00001181 891E[A804]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 15757 00001185 E83F00                  		call	TrackIo
 15758 00001188 C606[A704]00            		mov	byte [multitrk_format_flag], 0
 15759 0000118D C3                      		retn
 15760                                  ; ---------------------------------------------------------------------------
 15761                                  
 15762                                  VerifyTrack_Err:
 15763 0000118E B401                    		mov	ah, 1
 15764 00001190 E916FC                  		jmp	maperror
 15765                                  ; ---------------------------------------------------------------------------
 15766                                  
 15767                                  ; 16/10/2022
 15768                                  
 15769                                  ; ==========================================================================
 15770                                  ;
 15771                                  ; ReadTrack:
 15772                                  ;
 15773                                  ; input: ES:di points to bds for drive
 15774                                  ;
 15775                                  ; ==========================================================================
 15776                                  
 15777                                  ReadTrack:
 15778 00001193 C606[2001]02            		mov	byte [rflag], 2	; romread
 15779 00001198 EB05                    		jmp	short ReadWriteTrack
 15780                                  ; ---------------------------------------------------------------------------
 15781                                  
 15782                                  WriteTrack:
 15783                                  
 15784                                  ; ==========================================================================
 15785                                  ;
 15786                                  ; WriteTrack:
 15787                                  ;
 15788                                  ; input: ES:di points to bds for drive
 15789                                  ;
 15790                                  ; ==========================================================================
 15791                                  				
 15792 0000119A C606[2001]03            		mov	byte [rflag], 3	; romwrite
 15793                                  
 15794                                  		; Fall into ReadWriteTrack
 15795                                  
 15796                                  ; ==========================================================================
 15797                                  ;
 15798                                  ; readWriteTrack:
 15799                                  ;
 15800                                  ; input:
 15801                                  ;    ES:di points to bds for drive
 15802                                  ;    rFlag - 2 for read,3 for write
 15803                                  ;
 15804                                  ; ==========================================================================
 15805                                  
 15806                                  ReadWriteTrack:	
 15807                                  		; save bds pointer segment so we can use it to access
 15808                                  		; our packet. Notice that this is not the standard register
 15809                                  		; assignment for accessing packets
 15810                                  		
 15811                                  		; 19/10/2022
 15812 0000119F 06                      		push	es
 15813 000011A0 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 15814 000011A4 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 15815 000011A8 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 15816 000011AC A3[3301]                		mov	[curtrk], ax
 15817 000011AF 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 15818 000011B3 A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 15819 000011B6 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 15820 000011BA 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 15821 000011BE 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 15822                                  					; Get transfer address
 15823                                  
 15824                                  		; we just trashed our packet address, but we no longer care
 15825                                  
 15826 000011C2 8C06[A804]              		mov	[xfer_seg], es	; Pass transfer	segment
 15827 000011C6 07                      		pop	es
 15828                                  
 15829                                  		; Fall into TrackIo
 15830                                  
 15831                                  ; =============== S U B	R O U T	I N E =======================================
 15832                                  
 15833                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 15834                                  
 15835                                  ; ==========================================================================
 15836                                  ;
 15837                                  ; TrackIo:
 15838                                  ;    performs track read/write/verify
 15839                                  ;
 15840                                  ;   input:
 15841                                  ;      rFlag	- 2 = read
 15842                                  ;		  3 = write
 15843                                  ;		  4 = verify
 15844                                  ;      AX	- Index into track table of first sector to io
 15845                                  ;      CX	- Number of sectors to io
 15846                                  ;      Xfer_Seg:BX - Transfer address
 15847                                  ;      ES:DI	- Pointer to bds
 15848                                  ;      CurTrk	- Current cylinder
 15849                                  ;      CurHd	- Current head
 15850                                  ;
 15851                                  ; ==========================================================================
 15852                                  
 15853                                  ; 16/03/2019 - Retro DOS v4.0
 15854                                  
 15855                                  		; 24/12/2023 - Retro DOS 5.0		
 15856                                  
 15857                                  		; 19/10/2022
 15858                                  TrackIo:
 15859                                  					; Procedure `disk' will pop stack to
 15860 000011C7 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 15861 000011CB E8A9F7                  		call	checksingle	; Ensure correct disk is in drv
 15862 000011CE 803E[A905]01            		cmp	byte [media_set_for_format], 1
 15863                                  					; See if we have already set	disk
 15864 000011D3 7407                    		jz	short Dptalreadyset ; base table
 15865 000011D5 50                      		push	ax		; set up tables	and variables for i/o
 15866 000011D6 51                      		push	cx
 15867 000011D7 E8A0F9                  		call	iosetup
 15868 000011DA 59                      		pop	cx
 15869 000011DB 58                      		pop	ax
 15870                                  Dptalreadyset:				; Point si at the table entry of the			
 15871 000011DC BE[AC04]                		mov	si, tracktable	; first sector to be io'd
 15872                                  		; 24/12/2023
 15873                                  		;add	ax, ax		; PCDOS 7.1 IBMBIO.COM
 15874                                  		;add	ax, ax
 15875 000011DF D1E0                    		shl	ax, 1
 15876 000011E1 D1E0                    		shl	ax, 1
 15877 000011E3 01C6                    		add	si, ax
 15878                                  
 15879                                  		; WE WANT:
 15880                                  		; CX to	be the number of times we have to loop
 15881                                  		; DX to	be the number of sectors we read on each iteration
 15882                                  		
 15883 000011E5 BA0100                  		mov	dx, 1
 15884                                  
 15885                                  		; 24/12/2023
 15886 000011E8 26F6453F08              		test	byte [es:di+3Fh], 8 ; PCDOS 7.1 IBMBIO.COM
 15887                                  		; 12/12/2022
 15888                                  		;test	byte [es:di+23h], 8
 15889                                  		;;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 15890                                  					; good_tracklayout
 15891 000011ED 7402                    		jz	short ionextsector
 15892                                  		
 15893 000011EF 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 15894                                  ionextsector:
 15895 000011F1 51                      		push	cx
 15896 000011F2 52                      		push	dx
 15897 000011F3 46                      		inc	si
 15898 000011F4 46                      		inc	si		; Skip over the	cylinder and head in
 15899                                  					; the track table
 15900 000011F5 AC                      		lodsb			; Get sector ID	from track table
 15901 000011F6 A2[3101]                		mov	[cursec], al
 15902                                  
 15903                                  		; assumptions for a fixed disk multi-track disk	i/o
 15904                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 15905                                  		;     only CL is valid.
 15906                                  		; 2). Sector size should be set	to 512 bytes.
 15907                                  		; 3). Good track layout
 15908                                  		
 15909                                  		; 24/12/2023
 15910 000011F9 26F6453F01              		test	byte [es:di+3Fh], 1 ; PCDOS 7.1 IBMBIO.COM
 15911                                  		; 12/12/2022
 15912                                  		;test	byte [es:di+23h], 1
 15913                                  		;;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 15914                                  					; fnon_removable ; Fixed disk?
 15915 000011FE 7414                    		jz	short IoRemovable ; No
 15916                                  
 15917                                  		; 12/12/2022
 15918 00001200 F606[A004]80            		test	byte [multrk_flag], 80h
 15919                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 15920                                  						; Allow multi-track operation?
 15921 00001205 740D                    		jz	short IoRemovable ; No,don't do that.
 15922 00001207 8916[2201]              		mov	[seccnt], dx
 15923 0000120B 89D0                    		mov	ax, dx
 15924 0000120D E823FA                  		call	Disk
 15925 00001210 5A                      		pop	dx
 15926 00001211 59                      		pop	cx
 15927 00001212 F8                      		clc
 15928 00001213 C3                      		retn
 15929                                  ; ---------------------------------------------------------------------------
 15930                                  
 15931                                  IoRemovable:
 15932 00001214 AC                      		lodsb			; Get sector size index	from track
 15933                                  					; table	and save it
 15934 00001215 50                      		push	ax
 15935 00001216 56                      		push	si
 15936 00001217 1E                      		push	ds		; Save Bios_Data
 15937 00001218 50                      		push	ax
 15938 00001219 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 15939                                  					; Fetch	EOT while ds-> Bios_Data
 15940 0000121D C536[2D01]              		lds	si, [dpt]
 15941 00001221 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 15942 00001224 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 15943 00001227 58                      		pop	ax
 15944 00001228 1F                      		pop	ds
 15945 00001229 88D0                    		mov	al, dl
 15946 0000122B A3[2201]                		mov	[seccnt], ax
 15947 0000122E E802FA                  		call	Disk
 15948 00001231 5E                      		pop	si		; Advance buffer pointer by adding
 15949                                  					; sector size
 15950                                  		;pop	ax
 15951                                  		; 24/12/2023
 15952 00001232 59                      		pop	cx
 15953                                  
 15954                                  		; 02/09/2023 (PCDOS 7.1)
 15955                                  		;call	SectorSizeIndexToSectorSize
 15956                                  		;mov	cl, al	; 24/12/2023
 15957 00001233 B88000                  		mov	ax, 128
 15958 00001236 D3E0                    		shl	ax, cl
 15959                                  
 15960 00001238 01C3                    		add	bx, ax
 15961 0000123A 5A                      		pop	dx
 15962 0000123B 59                      		pop	cx
 15963 0000123C E2B3                    		loop	ionextsector
 15964 0000123E 803E[A905]01            		cmp	byte [media_set_for_format], 1
 15965                                  		;jz	short NoNeedDone
 15966                                  		; 12/12/2022
 15967 00001243 7404                    		je	short NoNeedDone2
 15968 00001245 E877F9                  		call	done		; set time of last access, and reset
 15969                                  					; entries in Dpt.
 15970                                  NoNeedDone:
 15971 00001248 F8                      		clc	; not necessary ('done' clears cf) ; 24/12/2023
 15972                                  NoNeedDone2:
 15973 00001249 C3                      		retn
 15974                                  
 15975                                  ; =============== S U B	R O U T	I N E =======================================
 15976                                  
 15977                                  ; ---------------------------------------------------------------------------
 15978                                  ;
 15979                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 15980                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 15981                                  ; are permissible.
 15982                                  ;
 15983                                  ; On Input   AX contains sector size in bytes
 15984                                  ; On Output  AL Contains index
 15985                                  ; All other registers preserved
 15986                                  ;
 15987                                  ; ---------------------------------------------------------------------------
 15988                                  
 15989                                  ; 02/09/2023
 15990                                  ;SectSizeToSectIndex:
 15991                                  ;		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 15992                                  ;					; examine upper	byte only
 15993                                  ;		ja	short OneK
 15994                                  ;		mov	al, ah		; value	in AH is the index!
 15995                                  ;		retn
 15996                                  
 15997                                  ; ---------------------------------------------------------------------------
 15998                                  ;
 15999                                  ;OneK:
 16000                                  ;		mov	al, 3
 16001                                  ;		retn
 16002                                  
 16003                                  ; =============== S U B	R O U T	I N E =======================================
 16004                                  
 16005                                  ; 02/09/2023
 16006                                  ;SectorSizeIndexToSectorSize:
 16007                                  ;		mov	cl, al
 16008                                  ;		mov	ax, 128
 16009                                  ;		shl	ax, cl
 16010                                  ;		retn
 16011                                  
 16012                                  ; =============== S U B	R O U T	I N E =======================================
 16013                                  
 16014                                  ; 16/10/2022
 16015                                  
 16016                                  ; ---------------------------------------------------------------------------
 16017                                  ;
 16018                                  ; SetDASD
 16019                                  ;
 16020                                  ; Set up the rom for formatting.
 16021                                  ; we have to tell the rom bios what type of disk is in the drive.
 16022                                  ;
 16023                                  ; On Input   - ES:di - Points to bds
 16024                                  ;
 16025                                  ; ---------------------------------------------------------------------------
 16026                                  
 16027                                  		; 24/12/2023 - Retro DOS 5.0
 16028                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:129Bh)
 16029                                  
 16030                                  		; 19/10/2022
 16031                                  SetDasd:
 16032 0000124A 803E[AA05]01            		cmp	byte [had_format_error], 1 ;
 16033                                  					; See if we've previously set dasd type
 16034 0000124F 740C                    		jz	short DoSetDasd
 16035                                  		; 24/12/2023
 16036 00001251 26F6453F80              		test	byte [es:di+3Fh], 80h
 16037                                  		; 10/12/2022
 16038                                  		;test	byte [es:di+23h], 80h
 16039                                  		;;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 16040                                  					; set_dasd_true
 16041 00001256 7446                    		jz	short DasdHasBeenSet
 16042                                  		; 24/12/2023
 16043 00001258 2680653F7F              		and	byte [es:di+3Fh], 7Fh
 16044                                  		; 10/12/2022
 16045                                  		;and	byte [es:di+23h], 7Fh
 16046                                  		;;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 16047                                  					; ~set_dasd_true
 16048                                  DoSetDasd:
 16049 0000125D C606[AA05]00            		mov	byte [had_format_error], 0 ; Reset it
 16050 00001262 C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 16051 00001267 B004                    		mov	al, 4
 16052                                  		; 24/12/2023
 16053 00001269 268A653E                		mov	ah, [es:di+3Eh]
 16054                                  		; 02/09/2023
 16055                                  		;mov	ah, [es:di+22h] ; [es:di+BDS.formfactor]
 16056 0000126D 80FC02                  		cmp	ah, 2
 16057                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 16058                                  					; DEV_3INCH720KB
 16059 00001270 7414                    		jz	short DoSet
 16060                                  		; 24/12/2023
 16061 00001272 B001                    		mov	al, 1
 16062                                  		;cmp	ah, 1
 16063 00001274 38C4                    		cmp	ah, al	; 1
 16064                                  		;cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 16065                                  					; DEV_5INCH96TPI
 16066                                  		;jz	short GotBig
 16067                                  		; 24/12/2023
 16068                                  		;mov	al, 1
 16069                                  		;jmp	short DoSet
 16070                                  		; 02/09/2023
 16071 00001276 750E                    		jnz	short DoSet
 16072                                  GotBig:
 16073                                  		;mov	al, 2		; 160/320k in a	1.2 meg	drive
 16074                                  		; 02/09/2023
 16075 00001278 40                      		inc	ax  ; mov al, 2
 16076 00001279 803E[A805]00            		cmp	byte [mediatype], 0
 16077 0000127E 7506                    		jnz	short DoSet
 16078                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 16079                                  		; 10/12/2022
 16080                                  		;inc	al  ; al = 3
 16081                                  		; 18/12/2022
 16082 00001280 40                      		inc	ax  ; al = 3
 16083 00001281 C606[3B01]54            		mov	byte [gap_patch], 54h
 16084                                  DoSet:
 16085 00001286 1E                      		push	ds
 16086 00001287 56                      		push	si
 16087                                  
 16088                                  		;mov	ds, [zeroseg]	; Point	to interrupt vectors
 16089                                  		; 02/09/2023
 16090 00001288 31F6                    		xor	si, si
 16091 0000128A 8EDE                    		mov	ds, si	; 0
 16092                                  
 16093 0000128C C5367800                		lds	si, [DSKADR]
 16094                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 16095                                  		;;lds	si, ds:78h
 16096                                  
 16097 00001290 C644090F                		mov	byte [si+9], 0Fh ;
 16098                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 16099 00001294 5E                      		pop	si
 16100 00001295 1F                      		pop	ds
 16101 00001296 B417                    		mov	ah, 17h
 16102 00001298 268A5504                		mov	dl, [es:di+4]
 16103 0000129C CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 16104                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 16105                                  DasdHasBeenSet:
 16106 0000129E 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 16107 000012A2 8826[3701]              		mov	[formt_eot], ah
 16108 000012A6 C3                      		retn
 16109                                  
 16110                                  ; =============== S U B	R O U T	I N E =======================================
 16111                                  
 16112                                  ; 16/10/2022
 16113                                  
 16114                                  ; ---------------------------------------------------------------------------
 16115                                  ;
 16116                                  ; Set Media Type for Format
 16117                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 16118                                  ; BPB area in the BDS can be handled by the rom.
 16119                                  ; On Input, ES:DI -> current BDS.
 16120                                  ; The status of the operation is returned in AL
 16121                                  ;
 16122                                  ;	- 0 - if the support is available,and the combination is valid.
 16123                                  ;	- 1 - no rom support
 16124                                  ;	- 2 - illegal combination
 16125                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 16126                                  ;
 16127                                  ; Flags also may be altered. All other registers preserved.
 16128                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 16129                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 16130                                  ; to the one returned. the original pointer to the disk base table is stored
 16131                                  ; in TempDpt, until it is restored.
 16132                                  ;
 16133                                  ; ---------------------------------------------------------------------------
 16134                                  
 16135                                  		; 24/12/2023 - Retro DOS 5.0
 16136                                  
 16137                                  		; 19/10/2022
 16138                                  SetMediaForFormat:	
 16139 000012A7 51                      		push	cx
 16140 000012A8 52                      		push	dx
 16141                                  
 16142                                  		; If we have a format error, then do not change Dpt, TempDpt.
 16143                                  		; but we need to call int 13h, ah=18h again.
 16144                                  
 16145 000012A9 803E[AA05]01            		cmp	byte [had_format_error], 1
 16146 000012AE 7425                    		jz	short SkipSaveDskAdr
 16147 000012B0 30C0                    		xor	al, al		; If already done return 0
 16148 000012B2 803E[A905]01            		cmp	byte [media_set_for_format], 1
 16149 000012B7 7502                    		jnz	short DoSetMediaForFormat
 16150 000012B9 EB7D                    		jmp	SetMediaRet	; Media	already	set
 16151                                  ; ---------------------------------------------------------------------------
 16152                                  
 16153                                  DoSetMediaForFormat:
 16154 000012BB 06                      		push	es
 16155 000012BC 56                      		push	si
 16156                                  
 16157                                  		; 02/09/2023
 16158                                  		;mov	es, [zeroseg]	; Point to interrupt vectors
 16159 000012BD 31F6                    		xor	si, si ; 0
 16160 000012BF 8EC6                    		mov	es, si
 16161                                  
 16162 000012C1 26C4367800              		les	si, [es:DSKADR]
 16163                                  		;les	si, es:78h	; [es:DSKADR]
 16164                                  					; Get pointer to disk base table
 16165 000012C6 8936[2D01]              		mov	[dpt], si
 16166 000012CA 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 16167                                  
 16168                                  		; Initialize the head settle time to 0Fh. See the offsets
 16169                                  		; given in dskprm.inc.
 16170                                  
 16171 000012CE 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 16172 000012D3 5E                      		pop	si
 16173 000012D4 07                      		pop	es
 16174                                  SkipSaveDskAdr:
 16175                                  		; 24/12/2023
 16176 000012D5 268B4D41                		mov	cx, [es:di+41h]	; (PCDOS 7.1 IBMBIO.COM)
 16177                                  		;mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 16178 000012D9 49                      		dec	cx
 16179 000012DA 80E503                  		and	ch, 3
 16180 000012DD D0CD                    		ror	ch, 1
 16181 000012DF D0CD                    		ror	ch, 1
 16182 000012E1 86E9                    		xchg	ch, cl
 16183 000012E3 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 16184 000012E7 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 16185 000012EB 06                      		push	es
 16186 000012EC 1E                      		push	ds
 16187 000012ED 56                      		push	si
 16188 000012EE 57                      		push	di
 16189 000012EF B418                    		mov	ah, 18h
 16190 000012F1 CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 16191                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 16192 000012F3 7231                    		jc	short FormaStatErr
 16193 000012F5 803E[AA05]01            		cmp	byte [had_format_error], 1
 16194 000012FA 7423                    		jz	short skip_disk_base_setting
 16195 000012FC 06                      		push	es		; Save segment returned	by the rom
 16196                                  
 16197                                  		; 02/09/2023
 16198                                  		;mov	es, [zeroseg]	; Point	to interrupt vector segment
 16199 000012FD 31F6                    		xor	si, si
 16200 000012FF 8EC6                    		mov	es, si ; 0
 16201 00001301 06                      		push	es ; * ; 02/09/2023
 16202                                  
 16203 00001302 26C4367800              		les	si, [es:DSKADR]
 16204                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 16205                                  					; Get current disk base	table
 16206 00001307 8936[AB05]              		mov	[tempdpt], si
 16207 0000130B 8C06[AD05]              		mov	[tempdpt+2], es ; Save it
 16208                                  
 16209                                  		; 02/09/2023
 16210                                  		;;mov	es, [zeroseg]
 16211                                  		;xor	si, si ; 0
 16212                                  		;mov	es, si
 16213 0000130F 07                      		pop	es ; * ; 02/09/2023
 16214                                  
 16215                                  		;mov	es:78h,	di
 16216 00001310 26893E7800              		mov	[es:DSKADR], di
 16217                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 16218 00001315 268F067A00              		pop	word [es:DSKADR+2]
 16219 0000131A C606[A905]01            		mov	byte [media_set_for_format], 1
 16220                                  skip_disk_base_setting:
 16221 0000131F 30C0                    		xor	al, al		; Legal	combination + rom support code
 16222                                  		;mov	ds:had_format_error, al	; Reset	the flag
 16223 00001321 A2[AA05]                		mov	[had_format_error], al
 16224 00001324 EB0E                    		jmp	short PopStatRet
 16225                                  ; ---------------------------------------------------------------------------
 16226                                  
 16227                                  FormaStatErr:
 16228                                  		; 10/12/2022
 16229 00001326 B003                    		mov	al, 3
 16230                                  
 16231 00001328 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 16232                                  					; Illegal combination =	0Ch
 16233 0000132B 7406                    		jz	short FormatStatIllegalComb
 16234 0000132D 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 16235 00001330 7402                    		jz	short FormatStatTimeOut
 16236                                  		; 10/12/2022
 16237                                  		;dec	al
 16238                                  		; 18/12/2022
 16239 00001332 48                      		dec	ax
 16240                                  		; al = 2
 16241                                  		;mov	al, 1		; Function not supported.
 16242                                  		;jmp	short PopStatRet
 16243                                  ; ---------------------------------------------------------------------------
 16244                                  
 16245                                  FormatStatIllegalComb:
 16246                                  		; 10/12/2022
 16247                                  		;dec	al	; 3 -> 2 or 2 -> 1
 16248                                  		; 18/12/2022
 16249 00001333 48                      		dec	ax
 16250                                  		; al = 2
 16251                                  		;mov	al, 2		; Function supported, but
 16252                                  					; Illegal sect/trk,trk combination.
 16253                                  		; 10/12/2022
 16254                                  		;jmp	short PopStatRet
 16255                                  ; ---------------------------------------------------------------------------
 16256                                  
 16257                                  FormatStatTimeOut:
 16258                                  		; 10/12/2022
 16259                                  		; al = 3
 16260                                  		;mov	al, 3		; Function supported, but
 16261                                  					; Media	not present.
 16262                                  PopStatRet:
 16263 00001334 5F                      		pop	di
 16264 00001335 5E                      		pop	si
 16265 00001336 1F                      		pop	ds
 16266 00001337 07                      		pop	es
 16267                                  SetMediaRet:
 16268 00001338 5A                      		pop	dx
 16269 00001339 59                      		pop	cx
 16270 0000133A C3                      		retn
 16271                                  
 16272                                  ; =============== S U B	R O U T	I N E =======================================
 16273                                  
 16274                                  ; 16/10/2022
 16275                                  
 16276                                  ; ---------------------------------------------------------------------------
 16277                                  ;
 16278                                  ; RESET THE DRIVE
 16279                                  ;
 16280                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 16281                                  ; slow head settle time for the next operation. this is because the reset
 16282                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 16283                                  ; time around - there is a problem with 3.5" drives in that the head does
 16284                                  ; not settle down in time,even for read operations!!
 16285                                  ;
 16286                                  ; ---------------------------------------------------------------------------
 16287                                  
 16288                                  ResetDisk:
 16289 0000133B 50                      		push	ax
 16290                                  
 16291                                  		; 02/09/2023
 16292 0000133C B80100                  		mov	ax, 1 ; PCDOS 7.1
 16293 0000133F 3806[A905]              		cmp	[media_set_for_format], al ; 1
 16294                                  		;cmp	byte [media_set_for_format], 1
 16295                                  					; Reset while formatting?
 16296 00001343 7503                    		jnz	short ResetDisk_cont
 16297                                  					; Then verify operation in "fmt & vrfy"
 16298                                  		;mov	byte [had_format_error], 1 ; Might have failed.
 16299 00001345 A2[AA05]                		mov	[had_format_error], al ; 1
 16300                                  ResetDisk_cont:
 16301                                  		; 02/09/2023 (ah=0)
 16302                                  		;xor	ah, ah		; So signals that we had a format error
 16303 00001348 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 16304                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 16305 0000134A C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 16306                                  					; Zap up the speed
 16307 0000134F 58                      		pop	ax
 16308 00001350 C3                      		retn
 16309                                  
 16310                                  ; =============== S U B	R O U T	I N E =======================================
 16311                                  
 16312                                  ; 16/10/2022
 16313                                  
 16314                                  ; ---------------------------------------------------------------------------
 16315                                  ;
 16316                                  ; This routine sets up the drive parameter table with the values needed for
 16317                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 16318                                  ;
 16319                                  ; on entry  -	ES:DI - points to bds for the drive
 16320                                  ;		Xfer_Seg:BX - points to trkbuf
 16321                                  ;		AL    - number of sectors
 16322                                  ;		AH    - int 13 function code
 16323                                  ;		CL    - sector number for verify
 16324                                  ;		DS    - Bios_Data
 16325                                  ;
 16326                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 16327                                  ;		AX and flags are the results of the int 13
 16328                                  ;
 16329                                  ; ---------------------------------------------------------------------------
 16330                                  
 16331                                  		; 24/12/2023 - Retro DOS 5.0
 16332                                  
 16333                                  		; 19/10/2022
 16334                                  ToRom:
 16335 00001351 53                      		push	bx
 16336 00001352 56                      		push	si
 16337                                  
 16338                                  		; Compaq bug fix - check whether we are using new ROM
 16339                                  		; functionality to set up format, not merely if it exists.
 16340                                  		; This was formerly a check against [new_rom]
 16341                                  
 16342 00001353 F606[A905]01            		test	byte [media_set_for_format], 1
 16343 00001358 7534                    		jnz	short GotValidDpt
 16344 0000135A 50                      		push	ax
 16345 0000135B 06                      		push	es		; Save bds segment
 16346                                  		; 24/12/2023
 16347 0000135C 26807D3E02              		cmp	byte [es:di+3Eh], 2
 16348                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 16349                                  					; ffSmall ; is it a 3.5" drive?
 16350                                  		; 24/12/2023
 16351                                  		;pushf	; not necessary	; (Save	the cmp	result)
 16352 00001361 8E06[1A00]              		mov	es, [zeroseg]
 16353                                  		;les	si, es:78h	; Get pointer to disk base table
 16354 00001365 26C4367800              		les	si, [es:DSKADR]
 16355                                  		;mov	word ptr ds:dpt, si
 16356                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 16357 0000136A 8936[2D01]              		mov	[dpt], si
 16358 0000136E 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 16359                                  		
 16360 00001372 A0[3701]                		mov	al, [formt_eot]
 16361 00001375 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 16362 00001379 A0[3B01]                		mov	al, [gap_patch]
 16363 0000137C 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 16364                                  					; Important for	format
 16365 00001380 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 16366                                  					; Assume we are	doing a	seek operation
 16367                                  					; Setup	motor start correctly for 3.5" drives
 16368                                  		; 24/12/2023
 16369                                  		;popf			; Get result of	earlier	cmp
 16370 00001385 7505                    		jnz	short MotorStrtOK
 16371 00001387 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 16372                                  MotorStrtOK:
 16373 0000138C 07                      		pop	es		; Restore bds segment
 16374 0000138D 58                      		pop	ax
 16375                                  GotValidDpt:
 16376 0000138E 8B16[3901]              		mov	dx, [trknum]	; Set track number
 16377 00001392 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 16378 00001394 268A5504                		mov	dl, [es:di+4]	; Set drive number
 16379 00001398 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 16380 0000139C 06                      		push	es		; Save bds segment
 16381 0000139D 8E06[A804]              		mov	es, [xfer_seg]
 16382 000013A1 CD13                    		int	13h		; DISK -
 16383 000013A3 07                      		pop	es		; Restore bds segment
 16384 000013A4 5E                      		pop	si
 16385 000013A5 5B                      		pop	bx
 16386 000013A6 C3                      		retn
 16387                                  
 16388                                  ; ---------------------------------------------------------------------------
 16389                                  
 16390                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16391                                  ; 24/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 16392                                  
 16393                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 16394                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1404h
 16395                                  
 16396                                  ; ==========================================================================
 16397                                  ;
 16398                                  ; get the owner of the physical drive represented by the logical drive in al.
 16399                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 16400                                  ; if this is not the case, the system may hang, just following the linked list.
 16401                                  ;
 16402                                  ; ==========================================================================
 16403                                  
 16404                                  		; 24/12/2023 - Retro DOS 5.0
 16405                                  
 16406                                  		; 19/10/2022
 16407                                  ioctl_getown:
 16408 000013A7 E8FAF1                  		call	SetDrive
 16409 000013AA 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 16410                                  					; Get physical drive number
 16411 000013AE C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 16412                                  ownloop:
 16413 000013B2 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 16414 000013B6 7507                    		jnz	short getnextBDS
 16415                                  		; 24/12/2023
 16416 000013B8 26F6453F20              		test	byte [es:di+3Fh], 20h ; (PCDOS 7.1 IBMBIO.COM)
 16417                                  		; 10/12/2022
 16418                                  		;test	byte [es:di+23h], 20h
 16419                                  		;;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 16420                                  					; fi_own_physical
 16421 000013BD 7514                    		jnz	short exitown
 16422                                  getnextBDS:
 16423 000013BF 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 16424 000013C2 EBEE                    		jmp	short ownloop
 16425                                  ; ---------------------------------------------------------------------------
 16426                                  
 16427                                  ; ==========================================================================
 16428                                  ;
 16429                                  ; set the ownership of the physical drive represented by the logical drive
 16430                                  ; in al to al.
 16431                                  ;
 16432                                  ; ==========================================================================
 16433                                  
 16434                                  		; 24/12/2023 - Retro DOS 5.0
 16435                                  
 16436                                  		; 19/10/2022
 16437                                  ioctl_setown:
 16438 000013C4 E8DDF1                  		call	SetDrive
 16439 000013C7 C606[7A00]01            		mov	byte [fsetowner], 1
 16440                                  					; set flag for CheckSingle to look at.
 16441 000013CC E8A8F5                  		call	checksingle
 16442                                  		; 02/09/2023
 16443 000013CF FE0E[7A00]              		dec	byte [fsetowner] ; 0
 16444                                  		;mov	byte [fsetowner], 0
 16445                                  					; set ownership	of drive reset flag
 16446                                  		; Fall into ExitOwn
 16447                                  
 16448                                  ; ==========================================================================
 16449                                  ;
 16450                                  ; if there is only one logical drive assigned to this physical drive, return
 16451                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 16452                                  ;
 16453                                  ; ==========================================================================
 16454                                  
 16455                                  		; 24/12/2023 - Retro DOS 5.0
 16456                                  exitown:
 16457 000013D3 30C9                    		xor	cl, cl
 16458                                  		; 24/12/2023
 16459 000013D5 26F6453F10              		test	byte [es:di+3Fh], 10h ; (PCDOS 7.1 IBMBIO.COM)
 16460                                  		; 12/12/2022
 16461                                  		;test	byte [es:di+23h], 10h
 16462                                  		;;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 16463                                  					; fi_am_mult
 16464 000013DA 7406                    		jz	short exitnomult
 16465 000013DC 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 16466                                  					; Get logical drive number
 16467                                  					; Get it 1-based
 16468 000013E0 FEC1                    		inc	cl
 16469                                  exitnomult:
 16470 000013E2 C51E[1200]              		lds	bx, [ptrsav]
 16471 000013E6 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 16472                                  					; Exit normal termination
 16473                                  		; 12/12/2022
 16474                                  		; cf=0
 16475                                  		;clc
 16476 000013E9 C3                      		retn
 16477                                  
 16478                                  ; =============== S U B	R O U T	I N E =======================================
 16479                                  
 16480                                  ; 16/10/2022
 16481                                  
 16482                                  ; ---------------------------------------------------------------------------
 16483                                  ;
 16484                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 16485                                  ; only if the first byte of TempDpt is not -1.
 16486                                  ; all registers (including flags) are preserved.
 16487                                  ;
 16488                                  ; ---------------------------------------------------------------------------
 16489                                  
 16490                                  		; 24/12/2023
 16491                                  		; 19/10/2022
 16492                                  RestoreOldDpt:
 16493                                  		; if we have already restored the disk base table earlier,
 16494                                  		; do not do it again.
 16495                                  
 16496 000013EA 50                      		push	ax
 16497 000013EB 30C0                    		xor	al, al
 16498 000013ED A2[AA05]                		mov	[had_format_error], al	; Reset flag and 
 16499 000013F0 8606[A905]              		xchg	al, [media_set_for_format] ; get current flag setting
 16500 000013F4 08C0                    		or	al, al
 16501 000013F6 7418                    		jz	short DontRestore
 16502 000013F8 56                      		push	si
 16503 000013F9 1E                      		push	ds
 16504 000013FA 06                      		push	es
 16505 000013FB C536[AB05]              		lds	si, [tempdpt]
 16506                                  
 16507                                  		; 17/10/2022
 16508                                  		;mov	es, [cs:BIOSDATAWORD]
 16509                                  		;;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16510                                  		;mov	es, [es:zeroseg]
 16511                                  		;;mov	es, es:zeroseg	; CAS -- bleeeech!
 16512                                  
 16513                                  		; 24/12/2023
 16514 000013FF 31C0                    		xor	ax, ax
 16515 00001401 8EC0                    		mov	es, ax ; 0
 16516                                  
 16517                                  		;mov	es:78h,	si	; [es:DSKADR]  (Int 1Eh)
 16518 00001403 2689367800              		mov	[es:DSKADR], si
 16519                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 16520 00001408 268C1E7A00              		mov	[es:DSKADR+2], ds
 16521 0000140D 07                      		pop	es
 16522 0000140E 1F                      		pop	ds
 16523 0000140F 5E                      		pop	si
 16524                                  DontRestore:
 16525 00001410 58                      		pop	ax
 16526                                  		; 12/12/2022
 16527                                  		; cf=0
 16528                                  		;clc			;  Clear carry
 16529 00001411 C3                      		retn
 16530                                  
 16531                                  ; ---------------------------------------------------------------------------
 16532                                  
 16533                                  ; 16/10/2022
 16534                                  
 16535                                  ; ==========================================================================
 16536                                  ;	get media id
 16537                                  ; ==========================================================================
 16538                                  ;
 16539                                  ; FUNCTION: get the volume label,the system id and the serial number from
 16540                                  ;	    the media that has the extended boot record.
 16541                                  ;	    for the conventional media,this routine will return "unknown
 16542                                  ;	    media type" error to dos.
 16543                                  ;
 16544                                  ; INPUT :   ES:di -> bds table for this drive.
 16545                                  ;
 16546                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 16547                                  ;	    if carry set,then al contains the device driver error number
 16548                                  ;	    that will be returned to dos.
 16549                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 16550                                  ;
 16551                                  ; SUBROUTINES TO BE CALLED:
 16552                                  ;	BootIo:NEAR
 16553                                  ;
 16554                                  ; LOGIC:
 16555                                  ;	to recognize the extended boot record,this logic will actually
 16556                                  ;	access the boot sector even if it is a hard disk.
 16557                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 16558                                  ;	field of bpb and the extended boot signature.
 16559                                  ;
 16560                                  ; {
 16561                                  ;	get logical drive number from bds table;
 16562                                  ;	rFlag = read operation;
 16563                                  ;	BootIo;		 /*get the media boot record into the buffer
 16564                                  ;	if (no error) then
 16565                                  ;	     if (extended boot record) then
 16566                                  ;		{ set volume label,volume serial number and system id
 16567                                  ;		  of the request packet to those of the boot record;
 16568                                  ;		};
 16569                                  ;	     else		  /*not an extended bpb */
 16570                                  ;		{ set register al to "unknown media.." error code;
 16571                                  ;		  set carry bit;
 16572                                  ;		};
 16573                                  ;	else
 16574                                  ;	     ret;	/*already error code is set in the register al
 16575                                  ;
 16576                                  ; ==========================================================================
 16577                                  
 16578                                  ;size_of_EXT_BOOT_SERIAL equ 4
 16579                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 16580                                  ;;size_of_EXT_SYSTEM_ID equ 8
 16581                                  
 16582                                  		; 24/12/2023 - Retro DOS 5.0
 16583                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:1478h)
 16584                                  
 16585                                  		; 19/10/2022
 16586                                  GetMediaId:
 16587 00001412 E8B000                  		call	ChangeLineChk
 16588 00001415 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 16589 00001419 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 16590 0000141E E88C00                  		call	BootIo		; Read boot sector into	DiskSector
 16591 00001421 722E                    		jb	short IOCtl_If1
 16592                                  					; Valid? (0F0h-0FFh?)
 16593 00001423 803E[6701]F0            		cmp	byte [disksector+15h], 0F0h
 16594                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 16595                                  		;jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 16596                                  		; 24/12/2023
 16597 00001428 7225                    		jb	short IOCtl_If7		
 16598                                  
 16599                                  		; 24/12/2023
 16600                                  		; 10/12/2022
 16601                                  		;mov	si, disksector+26h
 16602                                  		;;;
 16603                                  		; 24/12/2023
 16604                                  		;mov	si, disksector+43h ; BS_FAT32_VolID
 16605 0000142A BE[9401]                		mov	si, disksector+42h ; BS_FAT32_BootSig ; 24/12/2023
 16606 0000142D 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 16607 00001432 7403                    		jz	short IOCtl_If3 ; FAT32 fs
 16608 00001434 83EE1C                  		sub	si, 1Ch         ; FAT (12-16) fs ; 43h-1Ch = 27h ; BS_VolID
 16609                                  		; si = disksector+26h = BS_BootSig ; 24/12/2023
 16610                                  IOCtl_If3:
 16611                                  		;cmp	byte [si-1], 29h ; BS_BootSig or BS_FAT32_BootSig
 16612                                  		;;;
 16613 00001437 803C29                  		cmp	byte [si], 29h
 16614                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 16615                                  					; EXT_BOOT_SIGNATURE
 16616 0000143A 7512                    		jne	short IOCtl_If2	; not extended boot record
 16617 0000143C C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 16618 00001440 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16619                                  		; 10/12/2022
 16620                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 16621 00001444 46                      		inc	si
 16622                                  		; 24/12/2023
 16623                                  		; si = disksector+27h (BS_VolID)
 16624                                  		;      or disksector+43h (BS_FAT32_VolID)
 16625                                  
 16626 00001445 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 16627                                  IOCtl_If4:		; 24/12/2023
 16628 00001448 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 16629                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 16630                                  					; +size_of_EXT_SYSTEM_ID
 16631 0000144B F3A4                    		rep movsb		; Move from Bios_Data into request packet
 16632                                  	
 16633                                  		; 10/12/2022
 16634                                  		; cf = 0
 16635                                  		;clc
 16636                                  
 16637 0000144D C3                      		retn
 16638                                  ; ---------------------------------------------------------------------------
 16639                                  
 16640                                  		; 24/12/2023
 16641                                  IOCtl_If2:
 16642 0000144E F9                      		stc	
 16643                                  IOCtl_If7:
 16644 0000144F B007                    		mov	al, 7		; error_unknown_media
 16645                                  		;stc
 16646                                  IOCtl_If6:
 16647                                  IOCtl_If1:
 16648 00001451 C3                      		retn
 16649                                  ; ---------------------------------------------------------------------------
 16650                                  
 16651                                  ; 16/10/2022
 16652                                  
 16653                                  ; ==========================================================================
 16654                                  ;  set media id
 16655                                  ; ==========================================================================
 16656                                  
 16657                                  ; function: set the volume label, the system id and the serial number of
 16658                                  ;	    the media that has the extended boot record.
 16659                                  ;	    for the conventional media, this routine will return "unknown
 16660                                  ;	    media.." error to dos.
 16661                                  ;	    this routine will also set the corresponding informations in
 16662                                  ;	    the bds table.
 16663                                  ;
 16664                                  ; input :   ES:di -> bds table for this drive.
 16665                                  ;
 16666                                  ; output:   the extended boot record in the media will be set according to
 16667                                  ;	    the request packet.
 16668                                  ;	    if carry set, then al contains the device driver error number
 16669                                  ;	    that will be returned to dos.
 16670                                  ;
 16671                                  ; subroutines to be called:
 16672                                  ;	BootIo:NEAR
 16673                                  ;
 16674                                  ; logic:
 16675                                  ;
 16676                                  ; {
 16677                                  ;	get drive_number from bds;
 16678                                  ;	rFlag = "read operation";
 16679                                  ;	BootIo;
 16680                                  ;	if (no error) then
 16681                                  ;	     if (extended boot record) then
 16682                                  ;		{ set volume label,volume serial number and system id
 16683                                  ;		  of the boot record to those of the request packet;
 16684                                  ;		  rFlag = "write operation";
 16685                                  ;		  get drive number from bds;
 16686                                  ;		  BootIo;	  /*write it back*/
 16687                                  ;		};
 16688                                  ;	     else		  /*not an extended bpb */
 16689                                  ;		{ set register al to "unknown media.." error code;
 16690                                  ;		  set carry bit;
 16691                                  ;		  ret;	 /*return back to caller */
 16692                                  ;		};
 16693                                  ;	else
 16694                                  ;	     ret;		 /*already error code is set */
 16695                                  ;
 16696                                  ; ==========================================================================
 16697                                  
 16698                                  		; 24/12/2023 - Retro DOS 5.0
 16699                                  
 16700                                  		; 19/10/2022
 16701                                  SetMediaId:
 16702 00001452 E87000                  		call	ChangeLineChk
 16703 00001455 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 16704                                  					; Logical drive	number
 16705 00001459 88C2                    		mov	dl, al
 16706 0000145B C606[2001]02            		mov	byte [rflag], 2	; romread
 16707 00001460 52                      		push	dx
 16708 00001461 E84900                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 16709 00001464 5A                      		pop	dx
 16710 00001465 72EA                    		jb	short IOCtl_If6
 16711                                  					; Valid? (0F0h-0FFh?)
 16712 00001467 803E[6701]F0            		cmp	byte [disksector+15h], 0F0h
 16713                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 16714 0000146C 72E1                    		jb	short IOCtl_If7	; Brif not
 16715                                  
 16716                                  		; 24/12/2023
 16717                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 16718                                  		;			; EXT_BOOT_SIGNATURE
 16719                                  		;jnz	short IOCtl_If7	; not extended boot record
 16720                                  		
 16721 0000146E 06                      		push	es		; Save BDS pointer
 16722 0000146F 57                      		push	di
 16723 00001470 1E                      		push	ds		; Point	ES To boot record
 16724 00001471 07                      		pop	es
 16725                                  
 16726                                  		; 24/12/2023
 16727                                  		;;;
 16728                                  		;mov	di, disksector+43h ; disksector+EXT_BOOT.SERIAL
 16729 00001472 BF[9401]                		mov	di, disksector+42h ; BS_FAT32_BootSig ; 24/12/2023 
 16730 00001475 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 16731 0000147A 7403                    		jz      short IOCtl_If5	; FAT32 fs
 16732 0000147C 83EF1C                  		sub	di, 1Ch		; 67-28 ; offset disksektor+27h
 16733                                  		; di = disksector+26h = BS_BootSig ; 24/12/2023
 16734                                  IOCtl_If5:
 16735                                  		;cmp	byte [di-1], 29h ; BS_BootSig or BS_FAT32_BootSig
 16736 0000147F 803D29                  		cmp	byte [di], 29h
 16737 00001482 7404                    		je	short IOCtl_If8
 16738 00001484 5F                      		pop	di		; not extended boot record
 16739 00001485 07                      		pop	es
 16740                                  		;jmp	short IOCtl_If7
 16741                                  		; 24/12/2023
 16742 00001486 EBC6                    		jmp	short IOCtl_If2
 16743                                  IOCtl_If8:
 16744                                  		;;;
 16745                                  		; 24/12/2023
 16746                                  		;mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 16747 00001488 47                      		inc	di
 16748                                  		; di = disksector+27h (BS_VolID)
 16749                                  		;      or disksector+43h (BS_FAT32_VolID)
 16750                                  
 16751 00001489 C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 16752 0000148D C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 16753 00001490 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 16754                                  		
 16755                                  		; 24/12/2023
 16756                                  		;mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 16757                                  		;			; +size_of_EXT_BOOT_VOL_LABEL
 16758                                  		;			; +size_of_EXT_SYSTEM_ID
 16759                                  		;rep movsb
 16760 00001493 E8B2FF                  		call	IOCtl_If4       ; copy volume serial, label and system id
 16761                                  
 16762 00001496 06                      		push	es		; point	ds back	to Bios_Data
 16763 00001497 1F                      		pop	ds
 16764 00001498 5F                      		pop	di		; restore bds pointer
 16765 00001499 07                      		pop	es
 16766 0000149A E8B2F3                  		call	mov_media_ids	; update the bds media id info.
 16767 0000149D 88D0                    		mov	al, dl
 16768 0000149F C606[2001]03            		mov	byte [rflag], 3	; romwrite
 16769 000014A4 E80600                  		call	BootIo		; write	it back.
 16770 000014A7 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 16771                                  					; make sure chk_media check the driver
 16772                                  					; return with error code from BootIo
 16773 000014AC C3                      		retn
 16774                                  ; ---------------------------------------------------------------------------
 16775                                  
 16776                                  		; 24/12/2023
 16777                                  ;IOCtl_If7:
 16778                                  ;		mov	al, 7		; error_unknown_media
 16779                                  ;		stc
 16780                                  ;IOCtl_If6:
 16781                                  ;		retn
 16782                                  
 16783                                  ; =============== S U B	R O U T	I N E =======================================
 16784                                  
 16785                                  ; 16/10/2022
 16786                                  
 16787                                  ; ---------------------------------------------------------------------------
 16788                                  ;	BootIo
 16789                                  ; ---------------------------------------------------------------------------
 16790                                  ;
 16791                                  ; function: read/write the boot record into boot sector.
 16792                                  ;
 16793                                  ; input :
 16794                                  ;	    al=logical drive number
 16795                                  ;	    rFlag = operation (read/write)
 16796                                  ;
 16797                                  ; output:   for read operation,the boot record of the drive specified in bds
 16798                                  ;	    be read into the DiskSector buffer.
 16799                                  ;	    for write operation,the DiskSector buffer image will be written
 16800                                  ;	    to the drive specified in bds.
 16801                                  ;	    if carry set,then al contains the device driver error number
 16802                                  ;	    that will be returned to dos.
 16803                                  ;	    AX,CX,DX register destroyed.
 16804                                  ;	    if carry set,then al will contain the error code from DiskIO.
 16805                                  ;
 16806                                  ; subroutines to be called:
 16807                                  ;	DiskIO:NEAR
 16808                                  ;
 16809                                  ; logic:
 16810                                  ;
 16811                                  ; {
 16812                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 16813                                  ;	sectorcount = 1;	 /*read 1 sector only */
 16814                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 16815                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 16816                                  ; }
 16817                                  ; ==========================================================================
 16818                                  
 16819                                  		; 19/10/2022
 16820                                  BootIo:	
 16821 000014AD 06                      		push	es
 16822 000014AE 57                      		push	di
 16823 000014AF 53                      		push	bx
 16824 000014B0 1E                      		push	ds
 16825 000014B1 07                      		pop	es		; Point ES: to Bios_Data
 16826                                  
 16827                                  		; Call DiskIO to read/write the boot sec. The parameters which
 16828                                  		; need to be initialized for this subroutine out here are
 16829                                  		; - Transfer address to Bios_Data:DiskSector
 16830                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 16831                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 16832                                  		; - Number of sectors <-- 1
 16833                                  
 16834 000014B2 BF[5201]                		mov	di, disksector	; es:di -> transfer address
 16835 000014B5 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 16836 000014B7 8916[9C04]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 16837 000014BB B90100                  		mov	cx, 1
 16838 000014BE E850F5                  		call	diskio
 16839 000014C1 5B                      		pop	bx
 16840 000014C2 5F                      		pop	di
 16841 000014C3 07                      		pop	es
 16842 000014C4 C3                      		retn
 16843                                  
 16844                                  ; =============== S U B	R O U T	I N E =======================================
 16845                                  
 16846                                  ; 16/10/2022
 16847                                  
 16848                                  ; ---------------------------------------------------------------------------
 16849                                  ;	ChangeLineChk
 16850                                  ; ---------------------------------------------------------------------------
 16851                                  ;
 16852                                  ; when the user calls get/set media id call before dos establishes the media
 16853                                  ; by calling "media_chk",the change line activity of the drive is going to be
 16854                                  ; lost.	this routine will check the change line activity and will save the
 16855                                  ; history in the flags.
 16856                                  ;
 16857                                  ; FUNCTION: check the change line error activity
 16858                                  ;
 16859                                  ; INPUT :  ES:di -> bds table.
 16860                                  ;
 16861                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 16862                                  ;
 16863                                  ; SUBROUTINES TO BE CALLED:
 16864                                  ;	Set_Changed_DL
 16865                                  ;
 16866                                  ; ---------------------------------------------------------------------------
 16867                                  
 16868                                  		; 24/12/2023 - Retro DOS 5.0
 16869                                  ChangeLineChk:	
 16870 000014C5 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 16871 000014C9 08D2                    		or	dl, dl		; Fixed	disk?
 16872 000014CB 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 16873                                  		; 24/12/2023
 16874 000014CD 26F6453F04              		test	byte [es:di+3Fh], 4 ; [es:di+BDS.flags] ; PCDOS 7.1
 16875                                  		; 12/12/2022
 16876                                  		;test	byte [es:di+23h], 4
 16877                                  		;;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 16878                                  					; return_fake_bpb
 16879 000014D2 751A                    		jnz	short ChangeLnChkRet
 16880 000014D4 803E[7700]01            		cmp	byte [fhave96], 1   ; This rom support change line?
 16881 000014D9 7513                    		jnz	short ChangeLnChkRet
 16882 000014DB E8AD07                  		call	haschange	; This drive support change line?
 16883 000014DE 740E                    		jz	short ChangeLnChkRet ; Do nothing
 16884                                  
 16885                                  		; Execute the rom disk interrupt to check changeline activity.
 16886                                  
 16887 000014E0 B416                    		mov	ah, 16h
 16888 000014E2 CD13                    		int	13h	; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 16889                                  				; DL = drive to	check
 16890                                  				; Return: AH = disk change status
 16891 000014E4 7308                    		jnb	short ChangeLnChkRet
 16892 000014E6 53                      		push	bx
 16893 000014E7 BB4000                  		mov	bx, 40h		; fchanged
 16894                                  					; Update flag in BDS for this
 16895                                  					; physical drive
 16896 000014EA E87707                  		call	set_changed_dl
 16897 000014ED 5B                      		pop	bx
 16898                                  ChangeLnChkRet:				
 16899 000014EE C3                      		retn
 16900                                  
 16901                                  ; ---------------------------------------------------------------------------
 16902                                  
 16903                                  ; 16/10/2022
 16904                                  
 16905                                  ; ==========================================================================
 16906                                  ;	GetAccessFlag
 16907                                  ; ==========================================================================
 16908                                  ;
 16909                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 16910                                  ;
 16911                                  ; INPUT :
 16912                                  ;	    ES:di -> bds table
 16913                                  ;
 16914                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 16915                                  ;						 = 1 if disk i/o allowed.
 16916                                  ; ==========================================================================
 16917                                  
 16918                                  		; 24/12/2023 - Retro DOS 5.0
 16919                                  
 16920                                  		; 19/10/2022
 16921                                  GetAccessFlag:				
 16922 000014EF C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 16923 000014F3 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16924                                  		;mov	al, 0		; Assume result	is unformatted
 16925                                  		; 10/12/2022
 16926 000014F6 28C0                    		sub	al, al
 16927                                  		; 24/12/2023
 16928 000014F8 26F6454002              		test	byte [es:di+40h], 02h ; (PCDOS 7.1 IBMBIO.COM)
 16929                                  		;test	word ptr es:[di+3Fh], 200h
 16930                                  		; 10/12/2022
 16931                                  		;test	byte [es:di+36], 02h
 16932                                  		;;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 16933                                  					; unformatted_media
 16934 000014FD 7501                    		jnz	short GafDone	; Done if unformatted
 16935                                  		;inc	al		; Return true for formatted
 16936                                  		; 24/12/2023
 16937 000014FF 40                      		inc	ax
 16938                                  GafDone:				
 16939 00001500 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 16940 00001503 C3                      		retn
 16941                                  ; ---------------------------------------------------------------------------
 16942                                  
 16943                                  ; 16/10/2022
 16944                                  
 16945                                  ; ==========================================================================
 16946                                  ;	SetAccessFlag
 16947                                  ; ==========================================================================
 16948                                  ;
 16949                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 16950                                  ;
 16951                                  ; input :
 16952                                  ;	    ES:di -> bds table
 16953                                  ;
 16954                                  ; output:   unformtted_media bit modified according to the user request
 16955                                  ; ==========================================================================
 16956                                  
 16957                                  		; 24/12/2023 - Retro DOS 5.0
 16958                                  
 16959                                  		; 19/10/2022
 16960                                  SetAccessFlag:				
 16961 00001504 C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 16962 00001508 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16963                                  		; 24/12/2023
 16964 0000150B 26806540FD              		and	byte [es:di+40h], 0FDh ; (PCDOS 7.1 IBMBIO.COM)
 16965                                  		;and	word ptr es:[di+3Fh], 0FDFFh
 16966                                  		; 10/12/2022
 16967                                  		;and	byte [es:di+36], 0FDh
 16968                                  		;;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 16969                                  					; ~unformatted_media
 16970 00001510 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 16971 00001514 7505                    		jnz	short saf_Done
 16972                                  		; 24/12/2023
 16973 00001516 26804D4002              		or	byte [es:di+40h], 02h ; (PCDOS 7.1 IBMBIO.COM)
 16974                                  		;or	word ptr es:[di+3Fh], 200h
 16975                                  		; 15/04/2024
 16976                                  		; 10/12/2022
 16977                                  		;or	byte [es:di+36], 02h
 16978                                  		;;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 16979                                  					; unformatted_media
 16980                                  saf_Done:				
 16981 0000151B C3                      		retn
 16982                                  ; ---------------------------------------------------------------------------
 16983                                  
 16984                                  ; 16/10/2022
 16985                                  
 16986                                  ; ==========================================================================
 16987                                  ; Ioctl_Support_Query
 16988                                  ; ==========================================================================
 16989                                  ;
 16990                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 16991                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 16992                                  ; device attributes specifies if this function is supported.
 16993                                  ;
 16994                                  ; ==========================================================================
 16995                                  
 16996                                  		; 24/12/2023 - Retro DOS 5.0
 16997                                  
 16998                                  		; 19/10/2022
 16999                                  ioctl_support_query:
 17000 0000151C 06                      		push	es
 17001 0000151D C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 17002 00001521 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 17003                                  					; AL ==	Major, AH == Minor
 17004                                  		; 24/12/2023
 17005                                  		; 02/09/2023 (PCDOS 7.1)
 17006 00001525 3C48                    		cmp	al, 48h		; IOC_NEW_DC (PCDOS 7.1)
 17007                                  					; new generic ioctl function (FAT32)
 17008 00001527 7404                    		je	short ioctl_support
 17009                                  
 17010 00001529 3C08                    		cmp	al, 8		; IOC_DC
 17011                                  					; See if major code is 8
 17012 0000152B 7513                    		jne	short nosupport
 17013                                  ioctl_support:
 17014 0000152D 0E                      		push	cs
 17015 0000152E 07                      		pop	es
 17016                                  		; 24/12/2023
 17017                                  		; 02/09/2023
 17018 0000152F B90E00                  		mov	cx, 14          ; (PCDOS 7.1) IOC_DC_TABLE_LEN
 17019                                  		;mov	cx, 11		; IOC_DC_TABLE_LEN
 17020                                  		; 10/12/2022
 17021 00001532 BF[BD0E]                		mov	di, IOC_DC_Table
 17022                                  		;mov	di, 0C60h	; IOC_DC_Table
 17023                                  					; at 2C7h:0C60h	= 70h:31D0h
 17024 00001535 86C4                    		xchg	al, ah		; Put minor code in AL
 17025 00001537 F2AE                    		repne scasb		; Scan for minor code in AL
 17026 00001539 7505                    		jnz	short nosupport	; it was not found
 17027 0000153B B80001                  		mov	ax, 100h
 17028                                  		; 10/12/2022
 17029                                  		; (jump to ioctlsupexit is not required)
 17030                                  		;jmp	short $+2	; ioctlsupexit
 17031                                  					; Signal ioctl is supported
 17032                                  		;;jmp	short ioctlsupexit
 17033                                  ; ---------------------------------------------------------------------------
 17034                                  ioctlsupexit:
 17035 0000153E 07                      		pop	es
 17036                                  		; 10/12/2022
 17037                                  		; cf = 0
 17038                                  		;clc
 17039 0000153F C3                      		retn
 17040                                  ; ---------------------------------------------------------------------------
 17041                                  nosupport:
 17042 00001540 07                      		pop	es
 17043 00001541 E991EB                  		jmp	bc_cmderr
 17044                                  ; ---------------------------------------------------------------------------
 17045                                  
 17046                                  ; 16/10/2022
 17047                                  
 17048                                  ; ==========================================================================
 17049                                  ;	GetMediaSenseStatus
 17050                                  ; ==========================================================================
 17051                                  ;
 17052                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 17053                                  ;	    diskette drive and whether the media is the default type
 17054                                  ;	    for that drive. (default type means the max size for that
 17055                                  ;	    drive)
 17056                                  ;
 17057                                  ; INPUT :   ES:DI -> BDS table
 17058                                  ; OUTPUT:   If carry clear
 17059                                  ;	    DS:BX -> Updated IOCtlPacket
 17060                                  ;
 17061                                  ;			 Special Function at offset 0:
 17062                                  ;				0	- Media detected is not default type
 17063                                  ;				1	- Media detected is default type
 17064                                  ;
 17065                                  ;			 Device Type at offset 1:
 17066                                  ;				2       - 720K 3.5" 80 tracks
 17067                                  ;				7	- 1.44M 3.5" 80 tracks
 17068                                  ;				9	- 2.88M 3.5" 80 tracks
 17069                                  ;
 17070                                  ; Error Codes returned in AX if carry set:
 17071                                  ;
 17072                                  ; 8102 - Drive not ready	- No disk is in the drive.
 17073                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 17074                                  ;				  the media is really unkown, any error
 17075                                  ;				  other than "media not present"
 17076                                  ; 
 17077                                  ; ==========================================================================
 17078                                  
 17079                                  		; 19/10/2022
 17080                                  SenseMediaType:
 17081 00001544 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 17082 00001548 C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17083                                  		; 10/10/2022
 17084                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 17085 0000154B 31D2                    		xor	dx, dx
 17086 0000154D 8917                    		mov	[bx], dx ; 0
 17087                                  		;
 17088 0000154F 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17089                                  					; Get int 13h drive number from	BDS
 17090                                  		; 10/12/2022
 17091                                  		;xor	dh, dh		; DX = physical	drive number
 17092 00001553 B420                    		mov	ah, 20h		; Get Media Type function
 17093                                  					; If no	carry media type in AL
 17094 00001555 CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 17095 00001557 7216                    		jc	short MediaSenseEr ; error code	in AH
 17096 00001559 FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 17097                                  DetermineMediaType:
 17098 0000155B FEC8                    		dec	al
 17099 0000155D 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 17100 0000155F 740A                    		jz	short GotMediaType
 17101 00001561 0404                    		add	al, 4
 17102 00001563 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 17103 00001565 7404                    		jz	short GotMediaType
 17104 00001567 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 17105 00001569 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 17106                                  GotMediaType:
 17107 0000156B 884701                  		mov	[bx+1],	al	; Save the return value
 17108                                  		; 10/12/2022
 17109                                  		; cf = 0
 17110                                  		;clc			; Signal success
 17111 0000156E C3                      		retn
 17112                                  ; ---------------------------------------------------------------------------
 17113                                  
 17114                                  MediaSenseEr:
 17115 0000156F 80FC32                  		cmp	ah, 32h		; See if not default media error
 17116 00001572 74E7                    		jz	short DetermineMediaType ; Not really an error
 17117 00001574 B002                    		mov	al, 2		; Now assume drive not ready
 17118 00001576 80FC31                  		cmp	ah, 31h		; See if media was present
 17119 00001579 7402                    		jz	short SenseErrExit ; Return drive not ready
 17120                                  UnknownMediaType:
 17121 0000157B B007                    		mov	al, 7		; Just don't know the media type
 17122                                  SenseErrExit:
 17123 0000157D B481                    		mov	ah, 81h		; Signal error return
 17124 0000157F F9                      		stc
 17125 00001580 C3                      		retn
 17126                                  
 17127                                  ; ----------------------------------------------------------------------------
 17128                                  		; 10/12/2022
 17129                                  		;db    0
 17130                                  ; ----------------------------------------------------------------------------
 17131                                  
 17132                                  ;-----------------------------------------------------------------------------
 17133                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:15F2h
 17134                                  ;-----------------------------------------------------------------------------
 17135                                  ; 26/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 17136                                  
 17137                                  ; =============== S U B R O U T I N E =======================================
 17138                                  
 17139                                  SetLockState:
 17140 00001581 C51E[1200]              		lds	bx, [ptrsav]	; set media lock state
 17141 00001585 C55F13                  		lds	bx, [bx+13h]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17142                                  		;mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17143                                  		;call	check_int13h_exts_present
 17144                                  		; 26/12/2023
 17145 00001588 E82100                  		call	check_int13h_exts_p
 17146                                  		;mov	al, 3		; unknown command error
 17147 0000158B 721C                    		jc	short setlockst_ret
 17148 0000158D 8A07                    		mov	al, [bx]	; [bx+A_LOCKSTATE_CONTROL.LOCKSTATE_FUNCTIONS]
 17149 0000158F B445                    		mov	ah, 45h
 17150 00001591 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE
 17151                                  		; (DL - drive, [SI - disk address packet)
 17152 00001593 884701                  		mov	[bx+1], al	; 1 = locked, 0 = not locked
 17153                                  		; [bx+A_LOCKSTATE_CONTROL.LOCKSTATE_FLAG]
 17154                                  		
 17155                                  		; 26/12/2023
 17156 00001596 EB0A                    		jmp	short sls_em
 17157                                  
 17158                                  ;		jnc	short setlockst_ret
 17159                                  ;		mov	al, ah
 17160                                  ;		call	maperror
 17161                                  ;setlockst_ret:
 17162                                  ;		mov	ah, 81h		; Return this status in case of carry
 17163                                  ;		retn
 17164                                  
 17165                                  ; =============== S U B R O U T I N E =======================================
 17166                                  
 17167                                  EjectMedia:
 17168                                  		;mov	dl, [es:di+4]	; eject media in drive
 17169                                  		;			; [es:di+BDS.drivenum]
 17170                                  		;call	check_int13h_exts_present
 17171                                  		; 26/12/2023
 17172 00001598 E81100                  		call	check_int13h_exts_p
 17173                                  		;mov	al, 3		; unknown command error
 17174 0000159B 720C                    		jc	short ejectm_ret
 17175 0000159D B80046                  		mov	ax, 4600h
 17176 000015A0 CD13                    		int	13h		; DISK - IBM/MS Extension - EJECT MEDIA
 17177                                  		; (DL - drive)
 17178                                  sls_em:			; 26/12/2023
 17179 000015A2 7305                    		jnc	short ejectm_ret
 17180 000015A4 88E0                    		mov	al, ah
 17181 000015A6 E800F8                  		call	maperror
 17182                                  setlockst_ret:		; 26/12/2023
 17183                                  ejectm_ret:
 17184 000015A9 B481                    		mov	ah, 81h		; Return this status in case of carry
 17185 000015AB C3                      		retn
 17186                                  
 17187                                  ; =============== S U B R O U T I N E =======================================
 17188                                  
 17189                                  		; 26/12/2023
 17190                                  check_int13h_exts_p:
 17191 000015AC 268A5504                		mov	dl, [es:di+4]
 17192                                  
 17193                                  check_int13h_exts_present:
 17194 000015B0 B441                    		mov	ah, 41h
 17195 000015B2 53                      		push	bx
 17196 000015B3 BBAA55                  		mov	bx, 55AAh
 17197 000015B6 CD13                    		int	13h		; DISK - Check for INT 13h Extensions
 17198                                  					; BX = 55AAh, DL = drive number
 17199                                  					; Return: CF set if not supported
 17200                                  					; AH = extensions version
 17201                                  					; BX = AA55h
 17202                                  					; CX = Interface support bit map
 17203 000015B8 81FB55AA                		cmp	bx, 0AA55h
 17204 000015BC 5B                      		pop	bx
 17205 000015BD 7505                    		jnz	short exts_notsupported
 17206 000015BF F6C102                  		test	cl, 2		; bit 1 - drive locking and ejecting subset
 17207 000015C2 7503                    		jnz	short exts_supported
 17208                                  exts_notsupported:
 17209                                  		; 26/12/2023
 17210 000015C4 B003                    		mov	al, 3
 17211                                  		;
 17212 000015C6 F9                      		stc
 17213                                  exts_supported:
 17214 000015C7 C3                      		retn
 17215                                  
 17216                                  ; =============== S U B R O U T I N E =======================================
 17217                                  
 17218                                  GetDrvMapInfo:
 17219 000015C8 8CD9                    		mov	cx, ds		; get drive map information
 17220                                  					;
 17221                                  					; es:di points to BDS which belongs to
 17222                                  					;	  the requested logical/dos drive number
 17223                                  					;
 17224                                  					; Format of parameter block:
 17225                                  					; Offset  Description (Table 01570)
 17226                                  					;  00h    (call) length of this buffer (in bytes)
 17227                                  					;  01h    (ret) number of bytes in parameter block
 17228                                  					;	    actually used
 17229                                  					;  02h    (ret) drive flags
 17230                                  					;  03h    (ret) physical drive number
 17231                                  					;	    00h-7Fh floppy
 17232                                  					;	    80h-FEh hard
 17233                                  					;	    FFh no physical drive
 17234                                  					;  04h    (ret) bitmap of logical drives associated with
 17235                                  					;	    physical drive
 17236                                  					;	    bit 0 = drive A:, etc.
 17237                                  					;  08h    (ret) relative block address of partition start
 17238                                  					;	    qword
 17239                                  					;
 17240                                  					; Ref: Ralf Brown's Interrupt List, INTERRUP.G
 17241 000015CA C51E[1200]              		lds	bx, [ptrsav]
 17242 000015CE C55F13                  		lds	bx, [bx+13h]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17243 000015D1 B80381                  		mov	ax, 8103h	; ah = generic ioctl error code (81h)
 17244                                  					; al = unknown command error (03h)
 17245 000015D4 803F10                  		cmp	byte [bx], 10h	; parameter buffer length = 16 bytes
 17246 000015D7 7251                    		jb	short gdmi_4
 17247 000015D9 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17248 000015DD 885703                  		mov	[bx+3], dl	; parameter block - offset 3 - physical drive number
 17249 000015E0 C6470110                		mov	byte [bx+1], 10h ; parameter block - actually used length
 17250 000015E4 268B4517                		mov	ax, [es:di+17h]	; [es:di+BDS.hiddensectors]
 17251 000015E8 894708                  		mov	[bx+8], ax	; parameter block - offset 8 - partition start LBA
 17252 000015EB 268B4519                		mov	ax, [es:di+19h]	; [es:di+BDS.hiddensectors+2]
 17253 000015EF 89470A                  		mov	[bx+0Ah], ax	; parameter block - offset 10
 17254 000015F2 31C0                    		xor	ax, ax ; 0
 17255 000015F4 884702                  		mov	[bx+2], al	; drive flags = 0 (protected mode flags etc.)
 17256 000015F7 89470C                  		mov	[bx+0Ch], ax	; high dword of partition start address (LBA) is 0
 17257 000015FA 89470E                  		mov	[bx+0Eh], ax
 17258 000015FD 894704                  		mov	[bx+4], ax	; logical drive bitmap of same physical drive
 17259                                  					; initialized as 0
 17260 00001600 894706                  		mov	[bx+6], ax ; 0
 17261 00001603 8EC1                    		mov	es, cx
 17262                                  		;les	di, dword ptr es:start_bds ; 1st BDS
 17263 00001605 26C43E[1901]            		les	di, [es:start_bds]
 17264 0000160A B90100                  		mov	cx, 1		; bit 0 (drive A:)
 17265                                  gdmi_1:
 17266 0000160D 83FFFF                  		cmp	di, 0FFFFh	; last BDS ?
 17267 00001610 7415                    		jz	short gdmi_3	; yes
 17268 00001612 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum], dl
 17269                                  					; is it same physical drive ?
 17270 00001616 7506                    		jnz	short gdmi_2	; no
 17271 00001618 094F04                  		or	[bx+4], cx	; set bit for logical drive index of this BDS
 17272                                  					; (previously) shifted bit (which is 1/ON) is in ax:cx
 17273 0000161B 094706                  		or	[bx+6], ax
 17274                                  gdmi_2:
 17275 0000161E D1E1                    		shl	cx, 1		; shift one left for setting the next drive's bit
 17276 00001620 D1D0                    		rcl	ax, 1		; set high word of the bit select (set) value
 17277 00001622 26C43D                  		les	di, [es:di]	; next BDS
 17278 00001625 EBE6                    		jmp	short gdmi_1	; loop until di = -1 (last BDS sign)
 17279                                  gdmi_3:
 17280 00001627 B80001                  		mov	ax, 100h	; success
 17281                                  gdmi_4:
 17282 0000162A C3                      		retn
 17283                                  
 17284                                  ;-----------------------------------------------------------------------------
 17285                                  
 17286                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17287                                  ; 26/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 17288                                  
 17289                                  ;-----------------------------------------------------------------------------
 17290                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 17291                                  ;-----------------------------------------------------------------------------
 17292                                  ; 16/03/2019 - Retro DOS v4.0
 17293                                  
 17294                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 17295                                  ;	after booting. this allows testing and implementation of custom int_13
 17296                                  ;	handlers, without giving up ms-dos error recovery
 17297                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 17298                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 17299                                  ;	exit:	orig13	== address of new int_13 handler
 17300                                  ;		ds:dx	== old orig13 value
 17301                                  ;		es:bx	== old old13  value
 17302                                  ;
 17303                                  ; int 2f handler for external block drivers to communicate with the internal
 17304                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 17305                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 17306                                  ; dsk_entry, the entry point for all disk requests.
 17307                                  ;
 17308                                  ; on exit from this driver, we will return to the external driver
 17309                                  ; that issued this int 2f, and can then remove the flags from the stack.
 17310                                  ; this scheme allows us to have a small external device driver, and makes
 17311                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 17312                                  ; since we only need to make changes in one place (most of the time).
 17313                                  ;
 17314                                  ;   ax=800h - check for installed handler - reserved
 17315                                  ;   ax=801h - install the bds into the linked list
 17316                                  ;   ax=802h - dos request
 17317                                  ;   ax=803h - return bds table starting pointer in ds:di
 17318                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 17319                                  ;	    problem. bds table is going to be used to get head/sector
 17320                                  ;	    informations without calling generic ioctl get device parm call.)
 17321                                  
 17322                                  ;BIOSSEGMENT equ 70h
 17323                                  DOSBIOSSEG equ 0070h ; 17/10/2022
 17324                                  
 17325                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 17326                                  ;BIOSCODE:16AAh (PCDOS 7.1, IBMBIO.COM) ; 26/12/2023
 17327                                  
 17328                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 17329 0000162B 80FC13                  		cmp	ah, 13h
 17330 0000162E 7413                    		jz	short int2f_replace_int13
 17331 00001630 80FC08                  		cmp	ah, 8
 17332 00001633 7432                    		jz	short mine
 17333                                  
 17334                                  ; Check for WIN386 startup and return the BIOS instance data
 17335                                  
 17336 00001635 80FC16                  		cmp	ah, 16h		; MultWin386
 17337 00001638 746D                    		jz	short win386call
 17338 0000163A 80FC4A                  		cmp	ah, 4Ah		; multMULT
 17339 0000163D 7503                    		jnz	short i2f_handler_iret
 17340 0000163F E99800                  		jmp	handle_multmult
 17341                                  ; ---------------------------------------------------------------------------
 17342                                  
 17343                                  i2f_handler_iret:			
 17344 00001642 CF                      		iret
 17345                                  ; ---------------------------------------------------------------------------
 17346                                  
 17347                                  int2f_replace_int13:
 17348 00001643 FA                      		cli	; 26/12/2023
 17349 00001644 50                      		push	ax	; free up a register for caller's ds
 17350 00001645 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 17351                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 17352                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 17353                                  					; = [02C7h:0030h] = [0070h:25A0h]
 17354 00001647 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 17355                                  		; 19/10/2022
 17356                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 17357                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 17358                                  		;push	word ptr ds:Old13	; return them to caller
 17359                                  		;push	word ptr ds:Old13+2
 17360                                  		
 17361                                  		; 02/09/2023 (PCDOS 7.1)
 17362                                  		;push	word [Orig13]
 17363 0000164C FF36[B600]              		push	word [Orig13+2]
 17364                                  		;push	word [Old13]
 17365 00001650 FF36[0801]              		push	word [Old13+2]
 17366                                  
 17367                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 17368                                  		;mov	word ptr ds:Orig13+2, ax
 17369                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 17370                                  		;mov	word ptr ds:Old13+2, es
 17371                                  		
 17372                                  		;mov	[Orig13], dx
 17373                                  		; 02/09/2023
 17374 00001654 8716[B400]              		xchg	dx, [Orig13]
 17375 00001658 A3[B600]                		mov	[Orig13+2], ax
 17376                                  		;mov	[Old13], bx
 17377                                  		; 02/09/2023
 17378 0000165B 871E[0601]              		xchg	bx, [Old13]
 17379 0000165F 8C06[0801]              		mov	[Old13+2], es
 17380                                  
 17381 00001663 07                      		pop	es			; es:bx := old old13 vector
 17382                                  		; 02/09/2023
 17383                                  		;pop	bx
 17384 00001664 1F                      		pop	ds			; ds:dx := old orig13 vector
 17385                                  		;pop	dx ; 02/09/2023
 17386 00001665 58                      		pop	ax
 17387                                  i2f_iret:
 17388 00001666 CF                      		iret
 17389                                  ; ---------------------------------------------------------------------------
 17390                                  
 17391                                  mine:
 17392 00001667 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 17393 00001669 73FB                    		jnb	short i2f_iret
 17394 0000166B 08C0                    		or	al, al			; a get installed state request?
 17395 0000166D 7503                    		jnz	short disp_func
 17396 0000166F B0FF                    		mov	al, 0FFh
 17397                                  		;jmp	short i2f_iret
 17398                                  		; 02/09/2023
 17399 00001671 CF                      		iret
 17400                                  ; ---------------------------------------------------------------------------
 17401                                  
 17402                                  disp_func:
 17403 00001672 3C01                    		cmp	al, 1			; request for installing bds?
 17404 00001674 7418                    		jz	short do_subfun_01
 17405 00001676 3C03                    		cmp	al, 3			; get bds vector?
 17406 00001678 7423                    		jz	short do_get_bds_vector
 17407                                  
 17408                                  ; set up pointer to request packet
 17409                                  
 17410 0000167A 1E                      		push	ds
 17411 0000167B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 17412                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17413                                  					; = [0070h:25A0h] = [02C7h:0030h]
 17414                                  		; 19/10/2022
 17415                                  		;mov	word ptr ds:ptrsav, bx
 17416                                  		;mov	word ptr ds:ptrsav+2, es
 17417 00001680 891E[1200]              		mov	[ptrsav], bx
 17418 00001684 8C06[1400]              		mov	[ptrsav+2], es
 17419 00001688 1F                      		pop	ds
 17420                                  		;jmp	far ptr	i2f_dskentry
 17421                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 17422                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1708h
 17423 00001689 EA[5E06]7000            		jmp	DOSBIOSSEG:dsk_entry ; BIOSDATA:dsk_entry
 17424                                  		;; 17/10/2022
 17425                                  		;;jmp	far DOSBIOSSEG:dsk_entry
 17426                                  		;jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 17427                                  					; NOTE: jump to a FAR function, not an
 17428                                  					;  IRET type function. Callers of
 17429                                  					;  this int2f subfunction will have
 17430                                  					;  to be careful to do a popf
 17431                                  
 17432                                  ; ---------------------------------------------------------------------------
 17433                                  
 17434                                  do_subfun_01:
 17435 0000168E 06                      		push	es
 17436 0000168F 1E                      		push	ds
 17437 00001690 1E                      		push	ds
 17438 00001691 07                      		pop	es
 17439                                  		; 17/10/2022
 17440 00001692 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17441                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17442                                  					; point	ds: -> Bios_Data
 17443 00001697 E8BC03                  		call	install_bds
 17444 0000169A 1F                      		pop	ds
 17445 0000169B 07                      		pop	es
 17446                                  		;jmp	short i2f_iret
 17447                                  		; 02/09/2023
 17448 0000169C CF                      		iret
 17449                                  ; ---------------------------------------------------------------------------
 17450                                  
 17451                                  do_get_bds_vector:
 17452                                  		; 17/10/2022
 17453 0000169D 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17454                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17455 000016A2 C53E[1901]              		lds	di, [start_bds]
 17456                                  		;lds	di, ds:start_bds
 17457                                  ;ii2f_iret:	; 10/12/2022
 17458                                  		;jmp	short i2f_iret
 17459                                  		; 02/09/2023
 17460 000016A6 CF                      		iret
 17461                                  ; ---------------------------------------------------------------------------
 17462                                  
 17463                                  ; 17/10/2022
 17464                                  ; 16/10/2022
 17465                                  
 17466                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 17467                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 17468                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 17469                                  
 17470                                  win386call:
 17471 000016A7 1E                      		push	ds
 17472 000016A8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17473                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17474                                  					; at 2C7h:30h =	70h:25A0h
 17475 000016AD 3C05                    		cmp	al, 5		; Win386_Init
 17476                                  					; is it	win386 initializing?
 17477 000016AF 7410                    		jz	short Win386Init
 17478 000016B1 3C06                    		cmp	al, 6		; Win386_Exit
 17479                                  					; is it	win386 exiting?
 17480 000016B3 7523                    		jnz	short win_iret	; if not, continue int2f chain
 17481                                  		; 12/12/2022
 17482 000016B5 F6C201                  		test	dl, 1
 17483                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 17484 000016B8 751E                    		jnz	short win_iret	; if not win386, then continue
 17485                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 17486 000016BA 8026[1208]00            		and	byte [IsWin386], 0 
 17487 000016BF EB17                    		jmp	short win_iret
 17488                                  ; ---------------------------------------------------------------------------
 17489                                  
 17490                                  Win386Init:
 17491                                  		; 12/12/2022
 17492 000016C1 F6C201                  		test	dl, 1
 17493                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 17494 000016C4 7512                    		jnz	short win_iret	; if not win386, then continue
 17495                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 17496 000016C6 800E[1208]01            		or	byte [IsWin386], 1
 17497                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 17498                                  		;mov	word ptr ds:SI_Next+2, es
 17499 000016CB 891E[E007]              		mov	[SI_Next], bx
 17500 000016CF 8C06[E207]              		mov	[SI_Next+2], es
 17501                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 17502 000016D3 BB[DE07]                		mov	bx, Win386_SI	; 19/10/2022
 17503 000016D6 1E                      		push	ds
 17504 000016D7 07                      		pop	es
 17505                                  win_iret:
 17506 000016D8 1F                      		pop	ds
 17507                                  ii2f_iret:	; 10/12/2022
 17508                                  		;jmp	short i2f_iret	; return back up the chain
 17509                                  		; 02/09/2023
 17510 000016D9 CF                      		iret
 17511                                  ; ---------------------------------------------------------------------------
 17512                                  
 17513                                  handle_multmult:
 17514 000016DA 3C01                    		cmp	al, 1
 17515 000016DC 7514                    		jnz	short try_2
 17516 000016DE 1E                      		push	ds
 17517 000016DF E84500                  		call	HMAPtr		; get offset of free HMA
 17518                                  		; 10/12/2022
 17519                                  		;xor	bx, bx
 17520                                  		;dec	bx
 17521 000016E2 BBFFFF                  		mov	bx, 0FFFFh
 17522 000016E5 8EC3                    		mov	es, bx		; seg of HMA
 17523 000016E7 89FB                    		mov	bx, di
 17524 000016E9 F7D3                    		not	bx
 17525 000016EB 09DB                    		or	bx, bx
 17526 000016ED 7401                    		jz	short try_1
 17527 000016EF 43                      		inc	bx
 17528                                  try_1:
 17529 000016F0 1F                      		pop	ds
 17530                                  		;jmp	short ii2f_iret
 17531                                  		; 02/09/2023
 17532 000016F1 CF                      		iret
 17533                                  ; ---------------------------------------------------------------------------
 17534                                  
 17535                                  try_2:
 17536 000016F2 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 17537 000016F4 7530                    		jnz	short try_3
 17538 000016F6 1E                      		push	ds
 17539                                  		; 10/12/2022
 17540                                  		;xor	di, di
 17541                                  		;dec	di
 17542 000016F7 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 17543 000016FA 8EC7                    		mov	es, di
 17544 000016FC E82800                  		call	HMAPtr		; get offset of free HMA
 17545 000016FF 83FFFF                  		cmp	di, 0FFFFh
 17546 00001702 7421                    		jz	short InsuffHMA
 17547 00001704 F7DF                    		neg	di		; free space in HMA
 17548 00001706 39FB                    		cmp	bx, di
 17549 00001708 7605                    		jbe	short try_4
 17550                                  		; 10/12/2022
 17551                                  		;sub	di, di
 17552                                  		;dec	di
 17553 0000170A BFFFFF                  		mov	di, 0FFFFh
 17554                                  		;jmp	short InsuffHMA
 17555                                  		; 02/09/2023
 17556 0000170D 1F                      		pop	ds
 17557 0000170E CF                      		iret
 17558                                  ; ---------------------------------------------------------------------------
 17559                                  
 17560                                  try_4:
 17561                                  		;mov	di, ds:FreeHMAPtr
 17562 0000170F 8B3E[D707]              		mov	di, [FreeHMAPtr]
 17563 00001713 83C30F                  		add	bx, 15
 17564                                  		;and	bx, 0FFF0h
 17565                                  		; 10/12/2022
 17566 00001716 80E3F0                  		and	bl, 0F0h
 17567                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer
 17568 00001719 011E[D707]              		add	[FreeHMAPtr], bx
 17569 0000171D 7506                    		jnz	short InsuffHMA
 17570 0000171F C706[D707]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 17571                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 17572                                  					; no more HMA if we have wrapped
 17573                                  InsuffHMA:
 17574 00001725 1F                      		pop	ds
 17575                                  		; 10/12/2022
 17576                                  try_3:
 17577                                  		;jmp	short ii2f_iret
 17578                                  		; 02/09/2023
 17579 00001726 CF                      		iret
 17580                                  ; ---------------------------------------------------------------------------
 17581                                  
 17582                                  		; 10/12/2022
 17583                                  ;try_3:
 17584                                  		;jmp	ii2f_iret
 17585                                  
 17586                                  ; =============== S U B	R O U T	I N E =======================================
 17587                                  
 17588                                  ; 16/10/2022
 17589                                  
 17590                                  ;--------------------------------------------------------------------------
 17591                                  ;
 17592                                  ; procedure : HMAPtr
 17593                                  ;
 17594                                  ;		Gets the offset of the free HMA area ( with respect to
 17595                                  ;							seg ffff )
 17596                                  ;		If DOS has not moved high, tries to move DOS high.
 17597                                  ;		In the course of doing this, it will allocate all the HMA
 17598                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 17599                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 17600                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 17601                                  ;
 17602                                  ;	RETURNS : offset of free HMA in DI
 17603                                  ;		  BIOS_DATA, seg in DS
 17604                                  ;
 17605                                  ;--------------------------------------------------------------------------
 17606                                  
 17607                                  		; 17/10/2022
 17608                                  HMAPtr:
 17609 00001727 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17610                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17611 0000172C 8B3E[D707]              		mov	di, [FreeHMAPtr]
 17612                                  		;mov	di, ds:FreeHMAPtr
 17613 00001730 83FFFF                  		cmp	di, 0FFFFh
 17614 00001733 750F                    		jnz	short HMAPtr_retn
 17615 00001735 803E[DD07]00            		cmp	byte [SysinitPresent], 0
 17616                                  		;cmp	ds:SysinitPresent, 0
 17617 0000173A 7408                    		jz	short HMAPtr_retn
 17618 0000173C FF1E[D907]              		call	far [MoveDOSIntoHMA]
 17619                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 17620 00001740 8B3E[D707]              		mov	di, [FreeHMAPtr]
 17621                                  		;mov	di, ds:FreeHMAPtr
 17622                                  HMAPtr_retn:
 17623 00001744 C3                      		retn
 17624                                  
 17625                                  ; =============== S U B	R O U T	I N E =======================================
 17626                                  
 17627                                  ; 16/10/2022
 17628                                  
 17629                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 17630                                  ; but go ahead and update direction flag, si, & di
 17631                                  
 17632                                  move_sector:
 17633                                  
 17634                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 17635                                  ; any segment to be a fault. Theoretically, this could be handled
 17636                                  ; by the fault handler and the behavior of an 8086 could be emulated
 17637                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 17638                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 17639                                  ; also handles the fault incorrectly in their ROM BIOS for real
 17640                                  ; mode. Their fault handler was only designed to deal with one
 17641                                  ; special case which occurred in a magazine benchmark, but didn't
 17642                                  ; handle the general case worth beans.
 17643                                  ;
 17644                                  ; Simply changing this code to do a byte loop would work okay but
 17645                                  ; would involve a general case performance hit. Therefore, we'll
 17646                                  ; check for either source or destination offsets being within one
 17647                                  ; sector of the end of their segments and only in that case fall
 17648                                  ; back to a byte move.
 17649                                  
 17650 00001745 FC                      		cld
 17651 00001746 51                      		push	cx
 17652 00001747 B90001                  		mov	cx, 256
 17653 0000174A 81FE00FE                		cmp	si, 0FE00h
 17654 0000174E 770A                    		ja	short movsec_bytes
 17655 00001750 81FF00FE                		cmp	di, 0FE00h
 17656 00001754 7704                    		ja	short movsec_bytes
 17657 00001756 F3A5                    		rep movsw
 17658 00001758 59                      		pop	cx
 17659 00001759 C3                      		retn
 17660                                  ; ---------------------------------------------------------------------------
 17661                                  
 17662                                  movsec_bytes:
 17663 0000175A D1E1                    		shl	cx, 1
 17664 0000175C F3A4                    		rep movsb
 17665 0000175E 59                      		pop	cx
 17666 0000175F C3                      		retn
 17667                                  
 17668                                  ; =============== S U B	R O U T	I N E =======================================
 17669                                  
 17670                                  ; 16/10/2022
 17671                                  
 17672                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 17673                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 17674                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 17675                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 17676                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 17677                                  ; but we break down a request when we get an ecc or dma error into several
 17678                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 17679                                  ; number of sectors on a track on the medium, and the request would fail.
 17680                                  ;
 17681                                  ; input conditions:
 17682                                  ;	all registers set up for an int 13 request.
 17683                                  ;
 17684                                  ; output:
 17685                                  ;	dh - contains starting head number for request
 17686                                  ;	cx - contains starting sector and cylinder numbers
 17687                                  ;	(the above may or may not have been changed, and are 0-based)
 17688                                  ;	all other registers preserved.
 17689                                  
 17690                                  		; 26/12/2023 - Retro DOS 5.0
 17691                                  check_wrap:	
 17692 00001760 50                      		push	ax
 17693 00001761 53                      		push	bx
 17694 00001762 06                      		push	es
 17695 00001763 57                      		push	di
 17696 00001764 E86C00                  		call	find_bds	; get pointer to bds for drive in dl
 17697 00001767 725E                    		jb	short no_wrap	; finished if DOS doesn't use it
 17698                                  		; 26/12/2023
 17699 00001769 26F6453F01              		test	byte [es:di+3Fh], 1
 17700                                  		; 12/12/2022
 17701                                  		;test	byte [es:di+23h], 1
 17702                                  		;;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 17703 0000176E 7457                    		jz	short no_wrap	; no wrapping for removable media
 17704 00001770 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 17705 00001774 89C8                    		mov	ax, cx
 17706 00001776 83E03F                  		and	ax, 3Fh		; extract sector number
 17707 00001779 39D8                    		cmp	ax, bx		; are we going to wrap?
 17708 0000177B 764A                    		jbe	short no_wrap
 17709 0000177D F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 17710                                  
 17711                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 17712                                  ; last sector on that track.
 17713                                  
 17714 0000177F 08E4                    		or	ah, ah
 17715 00001781 7503                    		jnz	short not_on_bound
 17716                                  		; 18/12/2022
 17717 00001783 48                      		dec	ax ; *
 17718 00001784 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 17719                                  					; if on	boundary
 17720                                  		;dec	al ; *		; also decrement # of head wraps
 17721                                  not_on_bound:
 17722 00001786 80E1C0                  		and	cl, 0C0h	; zero out sector #
 17723 00001789 08E1                    		or	cl, ah		; or in	new sector #
 17724 0000178B 30E4                    		xor	ah, ah		; ax = # of head wraps
 17725 0000178D 40                      		inc	ax
 17726 0000178E 00F0                    		add	al, dh		; add in starting head #
 17727 00001790 80D400                  		adc	ah, 0		; catch	any carry
 17728                                  		; 02/09/2023
 17729 00001793 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 17730 00001797 39D8                    		cmp	ax, bx
 17731                                  		;cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 17732                                  					; are we going to wrap around a	head?
 17733 00001799 7632                    		jbe	short no_wrap_head ; do	not lose new head number!!
 17734 0000179B 52                      		push	dx		; preserve drive number and head number
 17735 0000179C 31D2                    		xor	dx, dx
 17736                                  		;mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 17737 0000179E F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 17738                                  
 17739                                  ; careful here! if new head # is 0, then we are on the last head.
 17740                                  
 17741 000017A0 09D2                    		or	dx, dx
 17742 000017A2 7507                    		jnz	short no_head_bound
 17743 000017A4 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 17744                                  
 17745                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 17746                                  
 17747 000017A6 09C0                    		or	ax, ax
 17748 000017A8 7401                    		jz	short no_head_bound
 17749 000017AA 48                      		dec	ax		; reduce number	of cylinder wraps
 17750                                  no_head_bound:				
 17751 000017AB 88D7                    		mov	bh, dl		; bh has new head number
 17752 000017AD 5A                      		pop	dx		; restore drive number and head number
 17753 000017AE FECF                    		dec	bh		; get it 0-based
 17754 000017B0 88FE                    		mov	dh, bh		; set up new head number in dh
 17755 000017B2 88CF                    		mov	bh, cl
 17756 000017B4 80E73F                  		and	bh, 3Fh		; preserve sector number
 17757 000017B7 B306                    		mov	bl, 6
 17758 000017B9 86CB                    		xchg	cl, bl
 17759 000017BB D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 17760 000017BD 00C5                    		add	ch, al		; add in cylinder wrap
 17761 000017BF 10E3                    		adc	bl, ah		; add in high byte
 17762 000017C1 D2E3                    		shl	bl, cl		; move up to ms	end
 17763 000017C3 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 17764 000017C5 08F9                    		or	cl, bh		; or in	sector number
 17765                                  no_wrap:				
 17766 000017C7 F8                      		clc
 17767 000017C8 5F                      		pop	di
 17768 000017C9 07                      		pop	es
 17769 000017CA 5B                      		pop	bx
 17770 000017CB 58                      		pop	ax
 17771 000017CC C3                      		retn
 17772                                  ; ---------------------------------------------------------------------------
 17773                                  
 17774                                  no_wrap_head:				
 17775 000017CD 88C6                    		mov	dh, al		; do not lose new head number
 17776 000017CF FECE                    		dec	dh		; get it 0-based
 17777 000017D1 EBF4                    		jmp	short no_wrap
 17778                                  
 17779                                  ; =============== S U B	R O U T	I N E =======================================
 17780                                  
 17781                                  ; 16/10/2022
 17782                                  
 17783                                  ; this is a special version of the bds lookup code which is
 17784                                  ; based on physical drives rather than the usual logical drives
 17785                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 17786                                  ; otherwise carry is clear
 17787                                  ;
 17788                                  ; guaranteed to trash no registers except es:di
 17789                                  
 17790                                  		; 19/10/2022
 17791                                  find_bds:	
 17792 000017D3 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 17793                                  fbds_1:					
 17794 000017D7 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 17795 000017DB 7409                    		jz	short fdbs_2
 17796 000017DD 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 17797                                  					; go to next bds
 17798 000017E0 83FFFF                  		cmp	di, 0FFFFh
 17799 000017E3 75F2                    		jnz	short fbds_1
 17800 000017E5 F9                      		stc
 17801                                  fdbs_2:					
 17802 000017E6 C3                      		retn
 17803                                  
 17804                                  ; =============== S U B	R O U T	I N E =======================================
 17805                                  
 17806                                  ; 16/10/2022
 17807                                  		; 17/10/2022
 17808                                  doint:
 17809                                  		; 10/12/2022
 17810 000017E7 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 17811                                  					; get physical drive number
 17812                                  		; 19/10/2022 - Temporary !
 17813                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 17814                                  		
 17815 000017EA 30E4                    		xor	ah, ah
 17816 000017EC 08C0                    		or	al, al
 17817 000017EE 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 17818                                  		; 10/12/2022
 17819 000017F0 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 17820                                  					; get request code
 17821                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 17822 000017F3 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 17823                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 17824 000017F6 9D                      		popf
 17825                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 17826                                  		; 17/10/2022
 17827 000017F7 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 17828                                  		;;call	call_orig13	; call far 70h:797h
 17829                                  					; call far KERNEL_SEGMENT:call_orig13
 17830 000017FC 9C                      		pushf
 17831                                  		; 10/12/2022
 17832 000017FD 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 17833                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 17834                                  dointdone:				
 17835 00001800 C3                      		retn
 17836                                  
 17837                                  ;----------------------------------------------------------------------------
 17838                                  
 17839                                  ; 16/10/2022
 17840                                  
 17841                                  ; this is the true int 13 handler. we parse the request to see if there is
 17842                                  ; a dma violation. if so, depending on the function, we:
 17843                                  ;   read/write break the request into three pieces and move the middle one
 17844                                  ;	       into our internal buffer.
 17845                                  ;
 17846                                  ;   format     copy the format table into the buffer
 17847                                  ;   verify     point the transfer address into the buffer
 17848                                  ;
 17849                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 17850                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 17851                                  ; the offending sector into the buffer below and do the i/o from there.
 17852                                  
 17853                                  ;struc INT13FRAME
 17854                                  ;.oldbp: resw
 17855                                  ;.oldax: resw 
 17856                                  ;.oldbx: resw
 17857                                  ;.oldcx: resw
 17858                                  ;.olddx: resw
 17859                                  ;.oldds: resw	; now we save caller's ds, too
 17860                                  ;.olddd: resd
 17861                                  ;.oldf:	resw
 17862                                  ;end struc
 17863                                  
 17864                                  ;----------------------------------------------------------------------------
 17865                                  
 17866                                  ;   entry conditions:
 17867                                  ;	ah = function
 17868                                  ;	al = number of sectors
 17869                                  ;	es:bx = dma address
 17870                                  ;	cx = packed track and sector
 17871                                  ;	dx = head and drive
 17872                                  ;   output conditions:
 17873                                  ;	no dma violation.
 17874                                  
 17875                                  ;	use extreme caution when working with this code. In general,
 17876                                  ;	  all registers are hot at all times.
 17877                                  ;
 17878                                  ;	question:  does this code handle cases where dma errors
 17879                                  ;	  occur during ecc retries, and where ecc errors occur during
 17880                                  ;	  dma breakdowns???? Hmmmmm.
 17881                                  
 17882                                  ;----------------------------------------------------------------------------
 17883                                  
 17884                                  ; ---------------------------------------------------------------------------
 17885                                  
 17886                                  		; 26/12/2023 - Retro DOS v5.0
 17887                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1889h
 17888                                  dtype_array:
 17889 00001801 90004000                		dd 400090h		; 40h:90h is drive type array addr
 17890                                  
 17891                                  ; 17/10/2022
 17892                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 17893                                  ; 09/12/2022
 17894                                  DTYPEARRAY equ dtype_array
 17895                                  
 17896                                  ; ---------------------------------------------------------------------------
 17897                                  
 17898                                  ; stick some special stuff out of mainline
 17899                                  
 17900                                  ; we know we're doing a format command. if we have changeline
 17901                                  ; support, then flag some special changed stuff and set changed
 17902                                  ; by format bit for all logical drives using this physical drive
 17903                                  
 17904                                  format_special_stuff:
 17905 00001805 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 17906 0000180A 7459                    		jz	short format_special_stuff_done ; brif not
 17907 0000180C 53                      		push	bx
 17908 0000180D BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 17909 00001810 E85104                  		call	set_changed_dl	; indicate that media changed by format
 17910 00001813 5B                      		pop	bx
 17911 00001814 EB4F                    		jmp	short format_special_stuff_done
 17912                                  ; ---------------------------------------------------------------------------
 17913                                  
 17914                                  ; 16/10/2022
 17915                                  
 17916                                  ; we know we've got ec35's on the system. Now see if we're doing
 17917                                  ; a floppy. If so, create a mask and see if this particular
 17918                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 17919                                  
 17920                                  		; 19/10/2022
 17921                                  ec35_special_stuff:
 17922 00001816 84D2                    		test	dl, dl		; floppy or hard disk?
 17923 00001818 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 17924 0000181A 50                      		push	ax		; see if this PARTICULAR drive is ec35
 17925 0000181B 51                      		push	cx
 17926 0000181C 88D1                    		mov	cl, dl		; turn drive number into bit map
 17927 0000181E B001                    		mov	al, 1		; assume drive 0
 17928 00001820 D2E0                    		shl	al, cl		; shift	over correct number of times
 17929 00001822 8406[A204]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 17930 00001826 59                      		pop	cx
 17931 00001827 58                      		pop	ax
 17932 00001828 7442                    		jz	short ec35_special_stuff_done
 17933                                  					; done if this floppy is not an	ec35
 17934 0000182A 53                      		push	bx		; free up a far	pointer	(es:bx)
 17935 0000182B 06                      		push	es
 17936                                  		; 17/10/2022
 17937 0000182C 2EC41E[0118]            		les	bx, [cs:DTYPEARRAY]
 17938                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 17939                                  					; 0070h:3A65h =	2C7h:14F5h
 17940 00001831 00D3                    		add	bl, dl
 17941 00001833 80D700                  		adc	bh, 0		; find entry for this drive
 17942 00001836 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 17943                                  					; (360k	disk in	360k drive,
 17944                                  					; no double-stepping, 250 kbs transfer rate)
 17945 0000183A 07                      		pop	es
 17946 0000183B 5B                      		pop	bx
 17947 0000183C EB2E                    		jmp	short ec35_special_stuff_done
 17948                                  ; ---------------------------------------------------------------------------
 17949                                  
 17950                                  ; 16/10/2022
 17951                                  
 17952                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 17953                                  ; this function does not reset the common buses after the execution.
 17954                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 17955                                  ; will issue ah=1 (read status) call to reset the buses.
 17956                                  
 17957                                  ps2_special_stuff:
 17958 0000183E 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 17959                                  					; read driver parm ?
 17960 00001843 7407                    		jz	short ps2_30_problem
 17961 00001845 803E[1E00]15            		cmp	byte [prevoper], 15h
 17962                                  					; apparently function 15h fails, too
 17963 0000184A 752D                    		jnz	short ps2_special_stuff_done
 17964                                  ps2_30_problem:
 17965 0000184C 50                      		push	ax
 17966 0000184D B401                    		mov	ah, 1
 17967                                  		; 26/12/2023
 17968                                  		;call	70h:70Bh ; PCDOS 7.1 IBMBIO.COM BIOSCODE:18D7h
 17969                                  		;		 ; call BIOSDATA:call_orig13	
 17970                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 17971                                  		; 17/10/2022
 17972 0000184F 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 17973                                  		;call	call_orig13	; call far 70:797h
 17974                                  					; call far KERNEL_SEGMENT:call_orig13
 17975 00001854 58                      		pop	ax
 17976 00001855 EB22                    		jmp	short ps2_special_stuff_done
 17977                                  ; ---------------------------------------------------------------------------
 17978                                  
 17979                                  ; 17/10/2022
 17980                                  ; 16/10/2022
 17981                                  
 17982                                  ; here is the actual int13 handler
 17983                                  
 17984                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 17985                                  
 17986                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 17987                                  ; vectoring up here from Bios_Data
 17988                                  
 17989                                  		; 19/10/2022
 17990 00001857 1E                      		push	ds		; save caller's ds register first thing
 17991                                  		;;mov	ds, word [cs:0030h]
 17992                                  					; and set up our own ds -> Bios_Data
 17993 00001858 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 17994                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 17995                                  					; = [02C7h:0030h] = [0070h:25A0h]
 17996                                  
 17997                                  ; let the operation proceed. if there is a dma violation, then we do things
 17998                                  
 17999 0000185D A3[1E00]                		mov	[prevoper], ax	; save request
 18000 00001860 80FC05                  		cmp	ah, 5		; romformat
 18001 00001863 74A0                    		jz	short format_special_stuff
 18002                                  					; go do special stuff for format
 18003                                  format_special_stuff_done:
 18004 00001865 803E[A204]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 18005 0000186A 75AA                    		jnz	short ec35_special_stuff
 18006                                  					; go handle it out of line if so
 18007                                  ec35_special_stuff_done:
 18008                                  		; 26/12/2023
 18009                                  		;call	70h:70Bh ; PCDOS 7.1 IBMBIO.COM BIOSCODE:18EDh
 18010                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h
 18011 0000186C 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18012                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18013                                  		
 18014 00001871 9C                      		pushf			; save result flags
 18015                                  		
 18016 00001872 803E[AF05]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 18017                                  					; mdl_ps2_30
 18018 00001877 74C5                    		jz	short ps2_special_stuff
 18019                                  					; exit mainline to address special
 18020                                  ps2_special_stuff_done:			; ps2/30 problem if so
 18021 00001879 9D                      		popf
 18022 0000187A 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 18023                                  ret_from_i13:
 18024 0000187C 1F                      		pop	ds
 18025 0000187D CA0200                  		retf	2		; restore ds &	iret w/flags
 18026                                  ; ---------------------------------------------------------------------------
 18027                                  
 18028                                  ; most of our code exits through here. If carry isn't set, then
 18029                                  ; just do a simple exit. Else doublecheck that we aren't getting
 18030                                  ; a changeline error.
 18031                                  
 18032                                  i13ret_ck_chglinerr:			
 18033 00001880 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 18034                                  i13_ret_error:				
 18035 00001882 80FC06                  		cmp	ah, 6		; did i	see a change event?
 18036 00001885 7513                    		jnz	short int13b	; skip if wrong	error
 18037 00001887 08D2                    		or	dl, dl		; is this for the hard disk?
 18038 00001889 780F                    		js	short int13b	; yes, ignore
 18039 0000188B 803E[7700]00            		cmp	byte [fhave96], 0
 18040 00001890 7408                    		jz	short int13b	; just in case ROM returned this
 18041                                  					; error	even though it told us it
 18042                                  					; never	would
 18043 00001892 53                      		push	bx
 18044 00001893 BB4000                  		mov	bx, 40h		; fchanged
 18045 00001896 E8CB03                  		call	set_changed_dl
 18046 00001899 5B                      		pop	bx
 18047                                  int13b:
 18048 0000189A F9                      		stc			; now return the error
 18049 0000189B EBDF                    		jmp	short ret_from_i13
 18050                                  ; ---------------------------------------------------------------------------
 18051                                  
 18052                                  ; some kind of error occurred. see if it is dma violation
 18053                                  
 18054                                  goterr13:
 18055 0000189D 80FC09                  		cmp	ah, 9		; dma error?
 18056 000018A0 747C                    		jz	short gotdmaerr
 18057                                  goterr13_xxxx:
 18058 000018A2 80FC11                  		cmp	ah, 11h		; ecc error?
 18059 000018A5 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 18060 000018A7 803E[A905]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 18061 000018AC 74D4                    		jz	short i13_ret_error
 18062                                  
 18063 000018AE 803E[1F00]02            		cmp	byte [prevoper+1], 2
 18064                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 18065                                  					; (2 = romread)
 18066                                  					; ECC correction only applies to reads
 18067 000018B3 75CD                    		jnz	short i13_ret_error
 18068                                  
 18069 000018B5 30E4                    		xor	ah, ah
 18070                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 18071                                  		; 17/10/2022
 18072 000018B7 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18073                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18074                                  					; call far 70:797h
 18075 000018BC A1[1E00]                		mov	ax, [prevoper]
 18076 000018BF 30E4                    		xor	ah, ah		; return code =	no error
 18077 000018C1 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 18078 000018C3 74B7                    		jz	short ret_from_i13 ; return with carry clear
 18079 000018C5 53                      		push	bx
 18080 000018C6 51                      		push	cx
 18081 000018C7 52                      		push	dx
 18082 000018C8 A2[2000]                		mov	[number_of_sec], al
 18083                                  loop_ecc:
 18084 000018CB B80102                  		mov	ax, 201h	; read one sector
 18085                                  
 18086                                  ; we do reads one sector at a time. this ensures that we will eventually
 18087                                  ; finish the request since ecc errors on one sector do read in that sector.
 18088                                  ;
 18089                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 18090                                  ; that attempt to read more sectors than are available on a particular
 18091                                  ; track.
 18092                                  ;
 18093                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 18094                                  ; this request.
 18095                                  ;
 18096                                  ; at this point, all registers are set up for the call to orig13, except
 18097                                  ; that there may be a starting sector number that is bigger than the number
 18098                                  ; of sectors on a track.
 18099                                  ;
 18100 000018CE E88FFE                  		call	check_wrap	; get correct parameters for int 13
 18101                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 18102                                  		; 17/10/2022
 18103 000018D1 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18104                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18105 000018D6 730C                    		jnb	short ok11_op
 18106 000018D8 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 18107 000018DB 741B                    		jz	short handle_dma_during_ecc
 18108 000018DD 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 18109 000018E0 7510                    		jnz	short ok11_exit_err
 18110                                  		; 10/12/2022
 18111                                  		; xor ax ax -> ah = 0
 18112                                  		;mov	ah, 0		; ecc error. reset the system again.
 18113 000018E2 31C0                    		xor	ax, ax		; clear	the error code so that if this
 18114                                  					; was the last sector, no error	code
 18115                                  					; will be returned for the corrected
 18116                                  					; read.	(clear carry too.)
 18117                                  ok11_op:
 18118 000018E4 FE0E[2000]              		dec	byte [number_of_sec]
 18119 000018E8 7409                    		jz	short ok11_exit	; all done?
 18120 000018EA FEC1                    		inc	cl		; advance sector number
 18121                                  					; add 200h to address
 18122 000018EC FEC7                    		inc	bh
 18123 000018EE FEC7                    		inc	bh
 18124 000018F0 EBD9                    		jmp	short loop_ecc
 18125                                  ; ---------------------------------------------------------------------------
 18126                                  
 18127                                  ; locate error returns centrally
 18128                                  
 18129                                  ok11_exit_err:
 18130 000018F2 F9                      		stc			; set carry bit again.
 18131                                  ok11_exit:
 18132 000018F3 5A                      		pop	dx
 18133 000018F4 59                      		pop	cx
 18134 000018F5 5B                      		pop	bx
 18135 000018F6 EB88                    		jmp	short i13ret_ck_chglinerr
 18136                                  ; ---------------------------------------------------------------------------
 18137                                  
 18138                                  ; do the single sector read again, this time into our temporary
 18139                                  ; buffer, which is guaranteed not to have a DMA error, then
 18140                                  ; move the data to its proper location and proceed
 18141                                  
 18142                                  handle_dma_during_ecc:
 18143 000018F8 06                      		push	es
 18144 000018F9 53                      		push	bx
 18145 000018FA BB[5201]                		mov	bx, disksector
 18146 000018FD 1E                      		push	ds
 18147 000018FE 07                      		pop	es		; point es:bx to buffer
 18148 000018FF B80102                  		mov	ax, 201h	; read one sector
 18149                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 18150                                  		; 17/10/2022
 18151 00001902 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18152                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18153 00001907 5B                      		pop	bx
 18154 00001908 07                      		pop	es
 18155 00001909 7305                    		jnb	short handle_dma_during_ecc_noerr
 18156 0000190B 80FC11                  		cmp	ah, 11h
 18157 0000190E 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 18158                                  
 18159                                  ; now we're kosher. Copy the data to where it belongs and resume
 18160                                  ; the ECC looping code.
 18161                                  
 18162                                  handle_dma_during_ecc_noerr:
 18163 00001910 56                      		push	si
 18164 00001911 57                      		push	di
 18165 00001912 89DF                    		mov	di, bx
 18166 00001914 BE[5201]                		mov	si, disksector
 18167 00001917 E82BFE                  		call	move_sector
 18168 0000191A 5F                      		pop	di
 18169 0000191B 5E                      		pop	si
 18170 0000191C EBC6                    		jmp	short ok11_op
 18171                                  ; ---------------------------------------------------------------------------
 18172                                  
 18173                                  ; we truly have a dma violation. restore register ax and retry the
 18174                                  ; operation as best we can.
 18175                                  
 18176                                  gotdmaerr:
 18177 0000191E A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 18178 00001921 FB                      		sti
 18179 00001922 80FC02                  		cmp	ah, 2		; romread
 18180 00001925 723B                    		jb	short i13_done_dmaerr
 18181                                  					; just pass dma error thru for
 18182                                  					; functions we don't handle
 18183 00001927 80FC04                  		cmp	ah, 4		; romverify
 18184 0000192A 743C                    		jz	short intverify
 18185 0000192C 80FC05                  		cmp	ah, 5		; romformat
 18186 0000192F 7448                    		jz	short intformat
 18187 00001931 772F                    		ja	short i13_done_dmaerr
 18188                                  
 18189                                  ; we are doing a read/write call. check for dma problems
 18190                                  
 18191                                  ;	******** set up stack frame here!!! ********
 18192                                  
 18193 00001933 52                      		push	dx
 18194 00001934 51                      		push	cx
 18195 00001935 53                      		push	bx
 18196 00001936 50                      		push	ax
 18197 00001937 55                      		push	bp
 18198 00001938 89E5                    		mov	bp, sp
 18199 0000193A 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 18200                                  		; 26/12/2023
 18201                                  		;add	dx, dx
 18202                                  		;add	dx, dx
 18203                                  		;add	dx, dx
 18204                                  		;add	dx, dx		; dx = dx*16
 18205 0000193C D1E2                    		shl	dx, 1
 18206 0000193E D1E2                    		shl	dx, 1
 18207 00001940 D1E2                    		shl	dx, 1
 18208 00001942 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 18209 00001944 01DA                    		add	dx, bx		; combine with offset
 18210 00001946 81C2FF01                		add	dx, 511		; simulate a transfer
 18211                                  
 18212                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 18213                                  ; we skip the first transfer and perform the remaining buffering and transfer
 18214                                  
 18215 0000194A 7303                    		jnb	short no_skip_first
 18216 0000194C E98300                  		jmp	bufferx		; restore dh=head & do buffer
 18217                                  ; ---------------------------------------------------------------------------
 18218                                  
 18219                                  no_skip_first:
 18220 0000194F D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 18221 00001951 B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 18222 00001953 28F4                    		sub	ah, dh
 18223                                  
 18224                                  ; ah is now the number of sectors that we can successfully write in this
 18225                                  ; segment. if this number is above or equal to the requested number, then we
 18226                                  ; continue the operation as normal. otherwise, we break it into pieces.
 18227                                  ;
 18228                                  ; wait a sec. this is goofy. the whole reason we got here in the
 18229                                  ; first place is because we got a dma error. so it's impossible
 18230                                  ; for the whole block to fit, unless the dma error was returned
 18231                                  ; in error.
 18232                                  
 18233 00001955 38C4                    		cmp	ah, al		; can we fit it	in?
 18234 00001957 7236                    		jb	short doblock	; no, perform blocking.
 18235                                  
 18236                                  ; yes, the request fits. let it happen.
 18237                                  
 18238 00001959 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 18239                                  					; set up head number
 18240 0000195C E888FE                  		call	doint
 18241 0000195F E9D900                  		jmp	bad13		; and return from this place
 18242                                  ; ---------------------------------------------------------------------------
 18243                                  
 18244                                  i13_done_dmaerr:
 18245 00001962 B409                    		mov	ah, 9		; pass dma error thru to caller
 18246 00001964 F9                      		stc
 18247 00001965 E914FF                  		jmp	ret_from_i13	; return with error,
 18248                                  					; we know it's not a changeline error
 18249                                  ; ---------------------------------------------------------------------------
 18250                                  
 18251                                  ; verify the given sectors. place the buffer pointer into our space.
 18252                                  
 18253                                  intverify:
 18254 00001968 06                      		push	es		; save caller's dma address
 18255 00001969 53                      		push	bx
 18256 0000196A 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 18257 0000196B 07                      		pop	es
 18258                                  dosimple:
 18259 0000196C BB[5201]                		mov	bx, disksector
 18260                                  					; do the i/o from Bios_Data:disksector
 18261                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 18262                                  		; 17/10/2022
 18263 0000196F 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18264                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18265 00001974 5B                      		pop	bx
 18266 00001975 07                      		pop	es
 18267 00001976 E907FF                  		jmp	i13ret_ck_chglinerr
 18268                                  ; ---------------------------------------------------------------------------
 18269                                  
 18270                                  ; format operation. copy the parameter table into Bios_Data:disksector
 18271                                  
 18272                                  intformat:
 18273 00001979 06                      		push	es
 18274 0000197A 53                      		push	bx
 18275 0000197B 56                      		push	si
 18276 0000197C 57                      		push	di
 18277 0000197D 1E                      		push	ds
 18278                                  
 18279                                  ; point ds to the caller's dma buffer, es to Bios_Data
 18280                                  ; in other words, swap (ds, es)
 18281                                  
 18282 0000197E 06                      		push	es
 18283 0000197F 1E                      		push	ds
 18284 00001980 07                      		pop	es
 18285 00001981 1F                      		pop	ds
 18286 00001982 89DE                    		mov	si, bx
 18287 00001984 BF[5201]                		mov	di, disksector
 18288 00001987 E8BBFD                  		call	move_sector	; user's data into Bios_Data:disksector
 18289 0000198A 1F                      		pop	ds
 18290 0000198B 5F                      		pop	di
 18291 0000198C 5E                      		pop	si		; do the i/o from
 18292 0000198D EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 18293                                  ; ---------------------------------------------------------------------------
 18294                                  
 18295                                  ; we can't fit the request into the entire block. perform the operation on
 18296                                  ; the first block.
 18297                                  ;
 18298                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 18299                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 18300                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 18301                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 18302                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 18303                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 18304                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 18305                                  ; doblock will handle the first block of requested sectors within the
 18306                                  ; boundary of this safe value.
 18307                                  
 18308                                  		; 26/12/2023 - Retro DOS v5.0
 18309                                  doblock:
 18310                                  
 18311                                  ; try to get the # of sectors/track from bds via rom drive number.
 18312                                  ; for any mini disks installed, here we have to pray that they have the
 18313                                  ; same # of sector/track as the main dos partition disk drive.
 18314                                  				
 18315 0000198F 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 18316                                  					; get head #, drive #
 18317 00001992 51                      		push	cx
 18318 00001993 06                      		push	es
 18319 00001994 57                      		push	di		; ah - # of sectors before dma boundary
 18320                                  					; al - requested # of sectors for i/o.
 18321 00001995 E83BFE                  		call	find_bds
 18322 00001998 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 18323                                  		; 26/12/2023
 18324 0000199C 26F6453F01              		test	byte [es:di+3Fh], 1
 18325                                  		; 12/12/2022
 18326                                  		;test	byte [es:di+23h], 1
 18327                                  		;;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 18328 000019A1 5F                      		pop	di
 18329 000019A2 07                      		pop	es
 18330 000019A3 88E0                    		mov	al, ah		; set al=ah for	floppies
 18331 000019A5 7404                    		jz	short doblockflop ; they are track by track operation
 18332 000019A7 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 18333 000019A9 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 18334                                  doblockflop:
 18335 000019AB 59                      		pop	cx
 18336                                  doblockcontinue:
 18337 000019AC 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 18338 000019AE 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 18339 000019B0 50                      		push	ax
 18340 000019B1 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 18341 000019B3 EB03                    		jmp	short doblockdoint
 18342                                  ; ---------------------------------------------------------------------------
 18343                                  
 18344                                  doblocklast:
 18345 000019B5 88C4                    		mov	ah, al
 18346 000019B7 50                      		push	ax
 18347                                  doblockdoint:				; let ah = al =	# of sectors for this shot
 18348 000019B8 E82CFE                  		call	doint
 18349 000019BB 727E                    		jb	short bad13	; something happened, bye!
 18350 000019BD 58                      		pop	ax
 18351 000019BE 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 18352                                  					; decrement by the successful operation
 18353 000019C1 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 18354 000019C3 00E7                    		add	bh, ah		; advance dma addres
 18355 000019C5 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 18356 000019C7 38C4                    		cmp	ah, al		; check	the previous value
 18357 000019C9 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 18358                                  					; then we are done already.
 18359 000019CB 28E0                    		sub	al, ah		; otherwise,
 18360                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 18361 000019CD E890FD                  		call	check_wrap	; get new cx, dh for the next operation.
 18362 000019D0 EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 18363                                  ; ---------------------------------------------------------------------------
 18364                                  
 18365                                  bufferx:
 18366 000019D2 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 18367                                  					; set up head number
 18368                                  buffer:
 18369 000019D5 53                      		push	bx
 18370 000019D6 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 18371 000019D9 80FC03                  		cmp	ah, 3		; romwrite
 18372 000019DC 7525                    		jnz	short doread	;
 18373                                  					
 18374                                  ; copy the offending sector into local buffer
 18375                                  
 18376 000019DE 06                      		push	es
 18377 000019DF 1E                      		push	ds
 18378 000019E0 56                      		push	si
 18379 000019E1 57                      		push	di
 18380 000019E2 1E                      		push	ds		; exchange segment registers
 18381 000019E3 06                      		push	es
 18382 000019E4 1F                      		pop	ds
 18383 000019E5 07                      		pop	es
 18384 000019E6 BF[5201]                		mov	di, disksector	; where to move
 18385 000019E9 57                      		push	di		; save it
 18386 000019EA 89DE                    		mov	si, bx		; source
 18387 000019EC E856FD                  		call	move_sector	; move sector into local buffer
 18388 000019EF 5B                      		pop	bx		; new transfer address
 18389                                  					; (es:bx = Bios_Data:diskbuffer)
 18390 000019F0 5F                      		pop	di		; restore caller's di & si
 18391 000019F1 5E                      		pop	si
 18392 000019F2 1F                      		pop	ds		; restore Bios_Data
 18393                                  
 18394                                  ; see if we are wrapping around a track or head
 18395                                  
 18396 000019F3 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 18397                                  					; get drive number
 18398 000019F5 8A5608                  		mov	dl, [bp+8]
 18399 000019F8 E865FD                  		call	check_wrap	; sets up registers if wrap-around
 18400                                  					;
 18401                                  					; ah is	function
 18402                                  					; al is	1 for single sector transfer
 18403                                  					; es:bx	is local transfer addres
 18404                                  					; cx is	track/sector number
 18405                                  					; dx is	head/drive number
 18406                                  					; si,di	unchanged
 18407 000019FB E8E9FD                  		call	doint
 18408 000019FE 07                      		pop	es		; restore caller's dma segment
 18409 000019FF 723A                    		jb	short bad13	; go clean up
 18410 00001A01 EB22                    		jmp	short dotail
 18411                                  ; ---------------------------------------------------------------------------
 18412                                  
 18413                                  ; reading a sector. do int first, then move things around
 18414                                  
 18415                                  doread:
 18416 00001A03 06                      		push	es
 18417 00001A04 53                      		push	bx
 18418 00001A05 1E                      		push	ds		; es = Bios_Code
 18419 00001A06 07                      		pop	es
 18420 00001A07 BB[5201]                		mov	bx, disksector
 18421 00001A0A B001                    		mov	al, 1
 18422 00001A0C 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 18423                                  					; get drive number
 18424 00001A0F E84EFD                  		call	check_wrap	;
 18425                                  					; ah = function
 18426                                  					; al = 1 for single sector
 18427                                  					; es:bx	points to local	buffer
 18428                                  					; cx, dx are track/sector, head/drive
 18429 00001A12 E8D2FD                  		call	doint
 18430 00001A15 5B                      		pop	bx
 18431 00001A16 07                      		pop	es
 18432 00001A17 7222                    		jb	short bad13
 18433 00001A19 56                      		push	si
 18434 00001A1A 57                      		push	di
 18435 00001A1B 89DF                    		mov	di, bx
 18436 00001A1D BE[5201]                		mov	si, disksector
 18437 00001A20 E822FD                  		call	move_sector
 18438 00001A23 5F                      		pop	di
 18439 00001A24 5E                      		pop	si
 18440                                  
 18441                                  ; note the fact that we've done 1 more sector
 18442                                  
 18443                                  dotail:
 18444 00001A25 5B                      		pop	bx		; retrieve new dma area
 18445 00001A26 80C702                  		add	bh, 2		; advance over sector
 18446 00001A29 41                      		inc	cx
 18447 00001A2A 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 18448 00001A2D F8                      		clc
 18449 00001A2E FEC8                    		dec	al
 18450 00001A30 7409                    		jz	short bad13	; no more i/o
 18451                                  
 18452                                  ; see if we wrap around a track or head boundary with starting sector
 18453                                  ; we already have the correct head number to pass to check_wrap
 18454                                  
 18455 00001A32 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 18456 00001A35 E828FD                  		call	check_wrap
 18457 00001A38 E8ACFD                  		call	doint
 18458                                  
 18459                                  ; we are done. ax has the final code; we throw away what we got before
 18460                                  
 18461                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 18462                                  ;	   or we've finished. If carry is set now, our only
 18463                                  ;	   hope for salvation is that it was a read operation
 18464                                  ;	   and the error code is ECC error. In that case, we'll
 18465                                  ;	   just pop the registers and go do the old ECC thing.
 18466                                  ;	   When the DMA error that got us here in the first
 18467                                  ;	   place occurs, it'll handle it.
 18468                                  
 18469                                  bad13:
 18470 00001A3B 89EC                    		mov	sp, bp
 18471 00001A3D 5D                      		pop	bp
 18472 00001A3E 5B                      		pop	bx
 18473 00001A3F 5B                      		pop	bx
 18474 00001A40 59                      		pop	cx
 18475 00001A41 5A                      		pop	dx
 18476 00001A42 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 18477 00001A44 E935FE                  		jmp	ret_from_i13	; non-error exit
 18478                                  ; ---------------------------------------------------------------------------
 18479                                  
 18480                                  xgoterr13_xxxx:	
 18481 00001A47 E958FE                  		jmp	goterr13_xxxx
 18482                                  
 18483                                  ; ---------------------------------------------------------------------------
 18484                                  		; 10/12/2022
 18485                                  		;db 	0
 18486                                  ; ---------------------------------------------------------------------------
 18487                                  
 18488                                  ;Bios_Code ends
 18489                                  
 18490                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18491                                  
 18492                                  ;-----------------------------------------------------------------------------
 18493                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 18494                                  ;-----------------------------------------------------------------------------
 18495                                  ; 17/03/2019 - Retro DOS v4.0
 18496                                  
 18497                                  		; 19/10/2022
 18498                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 18499 00001A4A 8A26[7500]              		mov	ah, [drvmax]
 18500 00001A4E BF[3C05]                		mov	di, dskdrvs
 18501 00001A51 1E                      		push	ds		; pass result in es:di
 18502 00001A52 07                      		pop	es
 18503 00001A53 E934EC                  		jmp	SetPtrSav
 18504                                  
 18505                                  ; =============== S U B	R O U T	I N E =======================================
 18506                                  
 18507                                  ;---------------------------------------------------------------------------
 18508                                  ; install_bds installs a bds at location es:di into the current linked list of
 18509                                  ; bds maintained by this device driver. it places the bds at the end of the
 18510                                  ; list. Trashes (at least) ax, bx, di, si
 18511                                  ;---------------------------------------------------------------------------
 18512                                  
 18513                                  		; 26/12/2023 - Retro DOS v5.0
 18514                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1AE0h
 18515                                  install_bds:
 18516 00001A56 1E                      		push	ds		; save Bios_Data segment
 18517 00001A57 BE[1901]                		mov	si, start_bds	; beginning of chain
 18518                                  
 18519                                  		; ds:si now points to link to first bds
 18520                                  		; assume bds list is non-empty
 18521                                  loop_next_bds:
 18522 00001A5A C534                    		lds	si, [si]	; [si+BDS.link]
 18523                                  					; fetch	next bds
 18524 00001A5C 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 18525 00001A60 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 18526                                  					; drive	with new one?
 18527 00001A63 7518                    		jnz	short next_bds
 18528 00001A65 B310                    		mov	bl, 10h		; fi_am_mult
 18529                                  		; 26/12/2023
 18530 00001A67 26085D3F                		or	[es:di+3Fh], bl
 18531                                  		;or	[es:di+23h], bl	; [es:di+BDS.flags]
 18532                                  					; set both of them to i_am_mult	if so
 18533 00001A6B 085C3F                  		or	[si+3Fh], bl
 18534                                  		;or	[si+23h], bl	; [si+BDS.flags]
 18535 00001A6E 2680653FDF              		and	byte [es:di+3Fh], 0DFh
 18536                                  		;and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 18537                                  					; we don't own it
 18538 00001A73 8A5C3F                  		mov	bl, [si+3Fh]
 18539                                  		;mov	bl, [si+23h]	; [si+BDS.flags]
 18540                                  					; determine if changeline available
 18541 00001A76 80E302                  		and	bl, 2		; fchangeline
 18542 00001A79 26085D3F                		or	[es:di+3Fh], bl
 18543                                  		;or	[es:di+23h], bl	; [es:di+BDS.flags]
 18544                                  next_bds:
 18545                                  		; 02/09/2023 (PCDOS 7.1)
 18546 00001A7D B8FFFF                  		mov	ax, 0FFFFh	; -1
 18547 00001A80 3904                    		cmp	[si], ax	; [si+BDS.link],-1
 18548                                  		;cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 18549                                  					; are we at end	of list?
 18550 00001A82 75D6                    		jnz	short loop_next_bds
 18551 00001A84 8C4402                  		mov	[si+2], es	; [si+BDS.link+2],es
 18552                                  					; install bds
 18553 00001A87 893C                    		mov	[si], di
 18554 00001A89 268905                  		mov	[es:di], ax	; [es:di+BDS.link],-1
 18555                                  		;mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 18556                                  					; set next pointer to null
 18557 00001A8C 1F                      		pop	ds
 18558                                  
 18559                                  ; 01/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS - BIOSCODE:1785h)
 18560                                  ; 16/10/2022 (MSDOS 6.0 Code)
 18561                                  
 18562                                  ; **** If the new drive has a higher EOT value, we must alter the
 18563                                  ;      'eot' variable appropriately.
 18564                                  
 18565                                  		; 26/12/2023
 18566 00001A8D 268A4550                		mov	al, [es:di+50h]	; [es:di+BDS.rsecpertrack]
 18567                                  		; 01/06/2019
 18568                                  		;mov	al,[es:di+52]
 18569                                  		; 22/07/2023
 18570                                  		;mov	al,[es:di+BDS.rsecpertrack]
 18571 00001A91 3A06[2C01]              		cmp	al,[eot]
 18572 00001A95 7603                    		jbe	short _eot_ok
 18573 00001A97 A2[2C01]                		mov	[eot],al
 18574                                  _eot_ok:
 18575 00001A9A C3                      		retn
 18576                                  
 18577                                  ; ---------------------------------------------------------------------------
 18578                                  
 18579                                  ; 17/10/2022
 18580                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 18581                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h
 18582                                  ; 09/12/2022
 18583                                  DRVLET equ drvlet
 18584                                  SNGMSG equ sngmsg
 18585                                  
 18586                                  ; 16/10/2022
 18587                                  
 18588                                  ;---------------------------------------------------------------------------
 18589                                  ;  ask to swap the disk in drive a:
 18590                                  ;	es:di -> bds
 18591                                  ;	ds -> Bios_Data
 18592                                  ;---------------------------------------------------------------------------
 18593                                  
 18594                                  		; 26/12/2023 - Retro DOS v5.0
 18595                                  
 18596                                  		; 19/10/2022
 18597 00001A9B F606[1208]01            swpdsk:		test	byte [IsWin386], 1
 18598                                  		;test	ds:IsWin386, 1	; Is win386 present?
 18599 00001AA0 7405                    		jz	short no_win386	; no, skip SetFocus
 18600                                  		
 18601                                  		; set focus to the correct VM
 18602                                  		;call	far ptr 70h:813h ; PCDOS 7.1 IBMBIO.COM BIOSCODE:1B2Ch
 18603                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 18604                                  		; 17/10/2022
 18605 00001AA2 9A[1308]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus ; BIOSDATA:V86_Crit_SetFocus
 18606                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 18607                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 18608                                  no_win386:
 18609 00001AA7 51                      		push	cx
 18610 00001AA8 52                      		push	dx
 18611 00001AA9 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 18612                                  					; get the drive	letter
 18613                                  
 18614                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 18615                                  ;           then existing dsk is drive A & vice versa
 18616                                  
 18617 00001AAD 88D6                    		mov	dh, dl
 18618 00001AAF 80F601                  		xor	dh, 1
 18619 00001AB2 29C9                    		sub	cx, cx		; nobody has handled swap disk
 18620 00001AB4 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 18621                                  					; broad	cast code for swap disk
 18622                                  					; Broadcast it
 18623 00001AB7 CD2F                    		int	2Fh
 18624 00001AB9 41                      		inc	cx		; cx == -1 ?
 18625 00001ABA 741E                    		jz	short swpdsk9	; somebody has handled it
 18626                                  
 18627                                  ; using a different drive in a one drive system so request the user change disks
 18628                                  
 18629 00001ABC 80C241                  		add	dl, 'A'
 18630                                  		; 17/10/2022
 18631 00001ABF 2E8816[F91A]            		mov	[cs:DRVLET], dl	; "A: and press any key when ready\r\n\n"
 18632                                  		; 16/10/2022
 18633                                  		;;mov	byte [cs:drvlet], dl
 18634                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 18635                                  					; 0070h:3D54h =	2C7h:17E4h
 18636 00001AC4 BE[DD1A]                		mov	si, SNGMSG	; "\r\nInsert diskette for drive "
 18637                                  		;mov	si, 17C8h	; sngmsg
 18638                                  					; 0070h:3D38h =	2C7h:17C8h
 18639 00001AC7 53                      		push	bx
 18640 00001AC8 2E                      		cs
 18641 00001AC9 AC                      		lodsb			; get the next character of the message
 18642                                  		;lods	byte ptr cs:[si]
 18643                                  wrmsg_loop:
 18644 00001ACA CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 18645                                  					; AL = character to display
 18646 00001ACC 2E                      		cs
 18647 00001ACD AC                      		lodsb
 18648                                  		;lods	byte ptr cs:[si] ; cs lodsb
 18649                                  					; get the next character of the	message
 18650 00001ACE 08C0                    		or	al, al
 18651 00001AD0 75F8                    		jnz	short wrmsg_loop
 18652 00001AD2 E833E7                  		call	con_flush	; flush out keyboard queue
 18653                                  					; call rom-bios
 18654 00001AD5 30E4                    		xor	ah, ah
 18655 00001AD7 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 18656                                  					; Return: AH = scan code, AL = character
 18657 00001AD9 5B                      		pop	bx
 18658                                  swpdsk9:
 18659 00001ADA 5A                      		pop	dx
 18660 00001ADB 59                      		pop	cx
 18661 00001ADC C3                      		retn
 18662                                  
 18663                                  ; ---------------------------------------------------------------------------
 18664                                  
 18665                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18666                                  
 18667                                  ;--------------------------------------------------------
 18668                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 18669                                  ;--------------------------------------------------------
 18670                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 18671                                  ;--------------------------------------------------------
 18672                                  ; 17/03/2019 - Retro DOS v4.0
 18673                                  ; 26/12/2023 - Retro DOS v5.0
 18674                                  
 18675                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 18676                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1B67h
 18677 00001ADD 0D0A                    sngmsg:		db 0Dh,0Ah
 18678 00001ADF 496E73657274206469-     		db 'Insert diskette for drive '
 18678 00001AE8 736B6574746520666F-
 18678 00001AF1 7220647269766520   
 18679                                  
 18680                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 18681                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1B83h
 18682 00001AF9 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 18682 00001B02 65737320616E79206B-
 18682 00001B0B 6579207768656E2072-
 18682 00001B14 656164790D0A       
 18683 00001B1A 0A00                    		db 0Ah,0
 18684                                  
 18685                                  ; =============== S U B	R O U T	I N E =======================================
 18686                                  
 18687                                  ;---------------------------------------------------------------------------
 18688                                  ; input : es:di points to current bds for drive.
 18689                                  ; return : zero set if no open files
 18690                                  ;	   zero reset if open files
 18691                                  ;---------------------------------------------------------------------------
 18692                                  
 18693                                  		; 26/12/2023 - Retro DOS v5.0
 18694                                  chkopcnt:	
 18695 00001B1C 26837D3C00              		cmp     word [es:di+3Ch], 0
 18696                                  		;cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 18697 00001B21 C3                      		retn
 18698                                  
 18699                                  ; =============== S U B	R O U T	I N E =======================================
 18700                                  
 18701                                  ;---------------------------------------------------------------------------
 18702                                  ; at media check time, we need to really get down and check what the change is.
 18703                                  ; this is guaranteed to be expensive.
 18704                                  ;
 18705                                  ;	es:di -> bds, ds -> Bios_Data
 18706                                  ;---------------------------------------------------------------------------
 18707                                  
 18708                                  		; 26/12/2023 - Retro DOS v5.0
 18709                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1BA6h
 18710                                  mediacheck:
 18711 00001B22 E852EE                  		call	checksingle	; make sure correct disk is in place
 18712 00001B25 31F6                    		xor	si, si
 18713 00001B27 E86101                  		call	haschange
 18714 00001B2A 742F                    		jz	short mediaret
 18715                                  		; 26/12/2023
 18716                                  		;test	byte [es:di+3Fh], 40h ; [es:di+BDS.flags], fchanged ; 40h
 18717 00001B2C E85001                  		call	checkromchange
 18718 00001B2F 752B                    		jnz	short mediadovolid
 18719 00001B31 50                      		push	ax
 18720 00001B32 52                      		push	dx
 18721 00001B33 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 18722                                  					; set logical drive number
 18723 00001B37 B416                    		mov	ah, 16h
 18724 00001B39 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 18725                                  					; DL = drive to	check
 18726                                  					; Return: AH = disk change status
 18727 00001B3B 5A                      		pop	dx
 18728 00001B3C 58                      		pop	ax
 18729 00001B3D 721D                    		jb	short mediadovolid
 18730 00001B3F BE0100                  		mov	si, 1		; signal no change
 18731                                  
 18732                                  ; there are some drives with changeline that "lose" the changeline indication
 18733                                  ; if a different drive is accessed after the current one. in order to avoid
 18734                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 18735                                  ; is not active and we are accessing a different drive from the last one.
 18736                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 18737                                  ; status.
 18738                                  		; 19/10/2022
 18739 00001B42 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 18740 00001B46 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 18741                                  					; (If the last drive accessed is not current drive
 18742                                  					; media	change status may be incorrect.	So,
 18743                                  					; "I don't now" will be returned even if it is indicated
 18744                                  					; as media is not changed.)
 18745 00001B4A 740F                    		jz	short mediaret	; (same	drive,
 18746                                  					; media	changeline indication is reliable)
 18747                                  
 18748                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 18749                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 18750                                  ; "not changed" here since the 2 second test said no change.)
 18751                                  
 18752 00001B4C 50                      		push	ax
 18753 00001B4D 51                      		push	cx
 18754 00001B4E 52                      		push	dx
 18755 00001B4F E8D8EA                  		call	Check_Time_Of_Access
 18756 00001B52 5A                      		pop	dx
 18757 00001B53 59                      		pop	cx
 18758 00001B54 58                      		pop	ax
 18759 00001B55 09F6                    		or	si, si
 18760 00001B57 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 18761                                  					; (volume id will be checked)
 18762 00001B59 31F6                    		xor	si, si		; return "i don't know"
 18763                                  mediaret:
 18764 00001B5B C3                      		retn
 18765                                  ; ---------------------------------------------------------------------------
 18766                                  
 18767                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 18768                                  ; because this may be different since we only set medbyt when doing a read
 18769                                  ; or write.
 18770                                  
 18771                                  mediadovolid:
 18772 00001B5C E877EB                  		call	GetBp		; build	a new bpb in current bds
 18773 00001B5F 72FA                    		jb	short mediaret
 18774 00001B61 E82D00                  		call	check_vid
 18775 00001B64 73F5                    		jnb	short mediaret
 18776 00001B66 E940F2                  		jmp	maperror	; fix up al for	return to dos
 18777                                  ; ---------------------------------------------------------------------------
 18778                                  
 18779                                  ; simple, quick check of latched change. if no indication, then return
 18780                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 18781                                  ; return and set al = 15 (for invalid media change) which will be returned to
 18782                                  ; dos.
 18783                                  ;
 18784                                  ; for dos 3.3, this will work only for the drive that has changeline.
 18785                                  
 18786                                  ;	call with es:di -> bds, ds -> Bios_Data
 18787                                  ;	***** warning:  this routine will return one level up on the stack
 18788                                  ;			if an error occurs!
 18789                                  
 18790                                  checklatchio:
 18791                                  
 18792                                  ; if returning fake bpb then assume the disk has not changed
 18793                                  
 18794                                  		; 26/12/2023
 18795                                  		;cmp	word [es:di+3Ch], 0 ; [es:di+BDS.opcnt]	
 18796 00001B69 E8B0FF                  		call	chkopcnt
 18797 00001B6C 741B                    		jz	short checkret	; done if zero
 18798                                  
 18799                                  ; check for past rom indications. if no rom change indicated, then return ok.
 18800                                  
 18801                                  		; 26/12/2023
 18802                                  		;test	word [es:di+3Fh], 40h
 18803                                  		;			; test [es:di+BDS.flags], fchanged ; 40h
 18804 00001B6E E80E01                  		call	checkromchange
 18805 00001B71 7416                    		jz	short checkret
 18806                                  
 18807                                  ; we now see that a change line has been seen in the past. let's do the
 18808                                  ; expensive verification.
 18809                                  
 18810 00001B73 E860EB                  		call	GetBp		; build	bpb in current bds
 18811 00001B76 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 18812 00001B78 E81600                  		call	check_vid
 18813 00001B7B 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 18814 00001B7D 09F6                    		or	si, si		; is changed for sure?
 18815 00001B7F 7908                    		jns	short checkret
 18816 00001B81 E88F00                  		call	returnvid
 18817                                  checklatchret:
 18818 00001B84 E822F2                  		call	maperror	; fix up al for	return to dos
 18819                                  ret_no_error_map:
 18820 00001B87 F9                      		stc
 18821 00001B88 5E                      		pop	si		; pop off return address
 18822                                  checkret:
 18823 00001B89 C3                      		retn
 18824                                  ; ---------------------------------------------------------------------------
 18825                                  
 18826                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 18827                                  ; only if there was a disk error. return that error code in ax.
 18828                                  ;
 18829                                  ;	called with es:di -> bds, ds -> Bios_Data
 18830                                  
 18831                                  checkfatvid:
 18832 00001B8A E8D101                  		call	fat_check	; check	the fat	and the	vid
 18833 00001B8D 09F6                    		or	si, si
 18834 00001B8F 7835                    		js	short changed_drv
 18835                                  
 18836                                  ; the fat was the same. fall into check_vid and check volume id.
 18837                                  
 18838                                  		; fall into check_vid
 18839                                  
 18840                                  ; =============== S U B	R O U T	I N E =======================================
 18841                                  
 18842                                  ; now with the extended boot record, the logic should be enhanced.
 18843                                  ;
 18844                                  ; if it is the extended boot record, then we check the volume serial
 18845                                  ; number instead of volume id. if it is different, then set si to -1.
 18846                                  ;
 18847                                  ; if it is same, then si= 1 (no change).
 18848                                  ;
 18849                                  ; if it is not the extended boot record, then just follows the old
 18850                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 18851                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 18852                                  ; should have already covered by extended boot structure checking.
 18853                                  ; so, we will return "i don't know" by setting si to 0.
 18854                                  ;
 18855                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 18856                                  ; (this will be gauranteed by a successful getbp call right before this
 18857                                  ; routine.)
 18858                                  ;
 18859                                  ;	called with es:di -> bds, ds -> bds
 18860                                  
 18861                                  		; 26/12/2023 - Retro DOS v5.0
 18862                                  		; 19/10/2022
 18863                                  check_vid:
 18864                                  
 18865                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 18866                                  ; boot signature. if it is set then go to do the extended
 18867                                  ; id check otherwise continue with code below
 18868                                  
 18869                                  		; 26/12/2023
 18870                                  		;;;
 18871 00001B91 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB_FATSz16
 18872 00001B96 7507                    		jnz     short chk_vid_1
 18873 00001B98 803E[9401]29            		cmp     byte [disksector+42h], 29h ; BS_FAT32_BootSig
 18874                                  					; [disksector+EXT_BOOT.SIG],EXT_BOOT_SIGNATURE
 18875 00001B9D EB05                    		jmp     short chk_vid_2
 18876                                  chk_vid_1:
 18877                                  		;;;
 18878 00001B9F 803E[7801]29            		cmp	byte [disksector+26h], 29h
 18879                                  					; [disksector+EXT_BOOT.SIG],
 18880                                  					; EXT_BOOT_SIGNATURE
 18881                                  chk_vid_2:		; 26/12/2023
 18882 00001BA4 7427                    		jz	short do_ext_check_id
 18883 00001BA6 E8E200                  		call	haschange
 18884 00001BA9 74DE                    		jz	short checkret
 18885 00001BAB 31F6                    		xor	si, si
 18886 00001BAD 803E[6201]00            		cmp	byte [disksector+10h], 0 ; BPB_NumFATs
 18887                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 18888 00001BB2 7411                    		jz	short checkfatret ; don't read vol id
 18889                                  					; if not fat system
 18890 00001BB4 E8F400                  		call	read_volume_id
 18891 00001BB7 720C                    		jb	short checkfatret
 18892 00001BB9 E89901                  		call	check_volume_id
 18893 00001BBC BEFFFF                  		mov	si, 0FFFFh	; -1
 18894                                  					; definitely changed
 18895 00001BBF 7505                    		jnz	short changed_drv
 18896                                  
 18897 00001BC1 46                      		inc	si		; not changed
 18898                                  vid_no_changed:
 18899 00001BC2 E8C000                  		call	resetchanged
 18900                                  		; 12/12/2022
 18901                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 18902                                  		;clc
 18903                                  checkfatret:
 18904 00001BC5 C3                      		retn
 18905                                  ; ---------------------------------------------------------------------------
 18906                                  
 18907                                  		; 12/12/2022
 18908                                  changed_drv:
 18909 00001BC6 F8                      		clc			; cas -- return	no error
 18910 00001BC7 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 18911                                  					; ensure that we ask rom for media
 18912 00001BCC C3                      		retn			; check	next time round
 18913                                  ; ---------------------------------------------------------------------------
 18914                                  
 18915                                  ; extended id check
 18916                                  
 18917                                  ; 16/10/2022
 18918                                  
 18919                                  ; the code to check extended id is basically a check to see if the
 18920                                  ; volume serial number is still the same. the volume serial number
 18921                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 18922                                  ; ds:di points to the bds of the drive under consideration.
 18923                                  ; the bds has fields containing the high and low words 
 18924                                  ; of the volume serial number of the media in the drive.
 18925                                  ; compare these fields to the fields mentioned above. if these fields
 18926                                  ; do not match the media has changed and so we should jump to the code
 18927                                  ; starting at ext_changed else return "i don't know" status
 18928                                  ; in the register used for the changeline status and continue executing
 18929                                  ; the code given below. for temporary storage use the register which
 18930                                  ; has been saved and restored around this block.
 18931                                  ;
 18932                                  ; bds fields in inc\msbds.inc
 18933                                  
 18934                                  		; 26/12/2023 - Retro DOS v5.0
 18935                                  		; 19/10/2022
 18936                                  do_ext_check_id:
 18937                                  		; 26/12/2023
 18938                                  		;push	ax
 18939                                  		;;mov	ax, word ptr ds:disksector+27h
 18940                                  		;			; [DiskSector+EXT_BOOT.SERIAL]
 18941                                  		;mov	ax, [disksector+27h]
 18942                                  ; 26/12/2023
 18943                                  %if 1
 18944                                  		;;;
 18945 00001BCD 57                      		push	di
 18946 00001BCE BE[9501]                		mov	si, disksector+43h ; BS_FAT32_VolID
 18947                                  					; [DiskSector+FAT32_EXT_BOOT.SERIAL]
 18948 00001BD1 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB_FATSz16
 18949 00001BD6 7403                    		jz	short chk_vid_3
 18950 00001BD8 83EE1C                  		sub	si, 28		; BS_VolID
 18951                                  		; si = disksector+27h	; [DiskSector+EXT_BOOT.SERIAL]
 18952                                  chk_vid_3:
 18953                                  		; [es:di+89h] = [es:di+BDS.vol_serial]
 18954 00001BDB 81C78900                		add	di, 137		; BDS.vol_serial
 18955 00001BDF A7                      		cmpsw	; [DiskSector+EXT_BOOT.SERIAL] ; (or FAT32_EXT_BOOT)
 18956                                  			;		= [di+BDS.vol_serial] ?
 18957 00001BE0 7501                    		jnz	short chk_vid_4
 18958 00001BE2 A7                      		cmpsw	; [DiskSector+EXT_BOOT.SERIAL+2] ; (or FAT32_EXT_BOOT)
 18959                                  			;		= [di+BDS.vol_serial+2] ?
 18960                                  chk_vid_4:
 18961 00001BE3 5F                      		pop	di
 18962                                  		;pop	ax
 18963 00001BE4 7504                    		jnz	short ext_changed ; not equal/same
 18964 00001BE6 31F6                    		xor	si, si 		 ; 0 ; don't know
 18965 00001BE8 EBD8                    		jmp	short vid_no_changed ; reset the flag
 18966                                  		;;;
 18967                                  %else
 18968                                  		; 02/09/2023
 18969                                  		xor	si, si ; 0
 18970                                  		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 18971                                  		jnz	short ext_changed
 18972                                  		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 18973                                  		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 18974                                  		jnz	short ext_changed
 18975                                  		;xor	si, si		; 0
 18976                                  					; don't know
 18977                                  		pop	ax
 18978                                  		jmp	short vid_no_changed
 18979                                  					; reset the flag
 18980                                  %endif
 18981                                  
 18982                                  ; ---------------------------------------------------------------------------
 18983                                  
 18984                                  ext_changed:
 18985                                  		; 26/12/2023
 18986                                  		;pop	ax
 18987                                  		; 02/09/2023
 18988                                  		;dec	si ; mov si, 0FFFFh ; -1
 18989 00001BEA BEFFFF                  		mov	si, 0FFFFh	; -1
 18990                                  					; disk changed!
 18991                                  		; 12/12/2022
 18992                                  		; ('changed_drv' clears cf)
 18993                                  		;clc
 18994 00001BED EBD7                    		jmp	short changed_drv
 18995                                  
 18996                                  ; ---------------------------------------------------------------------------
 18997                                  
 18998                                  ; at i/o time, we detected the error. now we need to determine whether the
 18999                                  ; media was truly changed or not. we return normally if media change unknown.
 19000                                  ; and we pop off the call and jmp to harderr if we see an error.
 19001                                  ;
 19002                                  ; es:di -> bds
 19003                                  
 19004                                  checkio:				
 19005 00001BEF 80FC06                  		cmp	ah, 6
 19006 00001BF2 75D1                    		jnz	short checkfatret
 19007 00001BF4 E825FF                  		call	chkopcnt
 19008 00001BF7 74CC                    		jz	short checkfatret
 19009 00001BF9 E8DAEA                  		call	GetBp
 19010 00001BFC 7212                    		jb	short no_error_map
 19011 00001BFE E889FF                  		call	checkfatvid
 19012 00001C01 7209                    		jb	short checkioret ; disk	error trying to	read in.
 19013 00001C03 09F6                    		or	si, si		; is changed for sure?
 19014 00001C05 7802                    		js	short checkioerr ; yes changed
 19015 00001C07 45                      		inc	bp		; allow	a retry
 19016 00001C08 C3                      		retn
 19017                                  ; ---------------------------------------------------------------------------
 19018                                  
 19019                                  checkioerr:				
 19020 00001C09 E80700                  		call	returnvid
 19021                                  
 19022                                  checkioret:				
 19023 00001C0C F9                      		stc			; make sure carry gets passed through
 19024 00001C0D E955F1                  		jmp	harderr
 19025                                  ; ---------------------------------------------------------------------------
 19026                                  
 19027                                  no_error_map:				
 19028 00001C10 E955F1                  		jmp	harderr2
 19029                                  
 19030                                  ; =============== S U B	R O U T	I N E =======================================
 19031                                  
 19032                                  ; return vid sets up the vid for a return to dos.
 19033                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 19034                                  ;  **** trashes si! ****
 19035                                  
 19036                                  returnvid:		
 19037 00001C13 BE1600                  		mov	si, 22		; extra
 19038                                  					; offset into pointer to return	value
 19039 00001C16 E80700                  		call	vid_into_packet
 19040 00001C19 B406                    		mov	ah, 6
 19041 00001C1B F9                      		stc
 19042 00001C1C C3                      		retn
 19043                                  
 19044                                  ; ---------------------------------------------------------------------------
 19045                                  
 19046                                  ; moves the pointer to the volid for the drive into the original request packet
 19047                                  ; no attempt is made to preserve registers.
 19048                                  ;
 19049                                  ; assumes es:di -> bds
 19050                                  ; **trashes si**
 19051                                  
 19052                                  media_set_vid:				
 19053 00001C1D BE0F00                  		mov	si, 15		; trans+1
 19054                                  					; return the value here	in packet
 19055                                  
 19056                                  		; fall into vid_into_packet
 19057                                  
 19058                                  ; =============== S U B	R O U T	I N E =======================================
 19059                                  
 19060                                  ; return pointer to vid in bds at es:di in packet[si]
 19061                                  
 19062                                  		; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 19063                                  		; 19/10/2022
 19064                                  vid_into_packet:
 19065 00001C20 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 19066 00001C21 C51E[1200]              		lds	bx, [ptrsav]
 19067                                  		;add	di, 75		; BDS.volid
 19068                                  		; 14/04/2024
 19069 00001C25 83C77D                  		add	di, 125	; (PCDOS 7.1)
 19070 00001C28 8938                    		mov	[bx+si], di
 19071                                  		;sub	di, 75		; BDS.volid
 19072 00001C2A 83EF7D                  		sub	di, 125
 19073 00001C2D 8C4002                  		mov	[bx+si+2], es
 19074 00001C30 1F                      		pop	ds
 19075                                  dofloppy:	; 18/12/2022
 19076 00001C31 C3                      		retn
 19077                                  
 19078                                  ; ---------------------------------------------------------------------------
 19079                                  
 19080                                  ;----------------------------------------------------------------------------
 19081                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 19082                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 19083                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 19084                                  ;   of getbp. for 3.5" media, we just return.
 19085                                  ;
 19086                                  ;   inputs:	es:di point to correct bds for this drive
 19087                                  ;		ah has media byte
 19088                                  ;
 19089                                  ;   outputs:	carry clear
 19090                                  ;		    no registers modified
 19091                                  ;		carry set
 19092                                  ;		    al = sectors/fat
 19093                                  ;		    bh = number of root directory entries
 19094                                  ;		    bl = sectors per track
 19095                                  ;		    cx = number of sectors
 19096                                  ;		    dh = sectors per allocation unit
 19097                                  ;		    dl = number of heads
 19098                                  ;
 19099                                  ;----------------------------------------------------------------------------
 19100                                  
 19101                                  		; 26/12/2023 - Retro DOS v5.0
 19102                                  hidensity:
 19103                                  
 19104                                  ; check for correct drive
 19105                                  		
 19106                                  		; 26/12/2023
 19107 00001C32 26F6453F02              		test	byte [es:di+3Fh], 2 ; is it special?
 19108                                  		; 12/12/2022
 19109                                  		;test	byte [es:di+23h], 2
 19110                                  		;;test	word [es:di+23h], 2 ; is it special?
 19111                                  					; [es:di+BDS.flags], fchangeline
 19112 00001C37 74F8                    		jz	short dofloppy	; no, do normal floppy test
 19113                                  
 19114                                  ; we have a media byte that is pretty complex. examine drive information
 19115                                  ; table to see what kind it is.
 19116                                  
 19117                                  		; 26/12/2023
 19118 00001C39 26807D3E02              		cmp	byte [es:di+3Eh], 2 ; is it single-media?
 19119                                  		;cmp	byte [es:di+22h], 2 ; is it single-media?
 19120 00001C3E 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 19121                                  					; yes, use fatid...
 19122                                  ; 96 tpi drive?
 19123 00001C40 80FCF9                  		cmp	ah, 0F9h
 19124 00001C43 75EC                    		jnz	short dofloppy
 19125                                  
 19126                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 19127                                  ;------ a 720K diskette
 19128                                  
 19129                                  		; 02/09/2023 (PCDOS 7.1)
 19130                                  		; 26/12/2023
 19131 00001C45 268A453E                		mov	al, [es:di+3Eh] ; [es:di+BDS.formfactor]
 19132                                  		;mov	al, [es:di+22h]	; [es:di+BDS.formfactor]
 19133 00001C49 3C07                    		cmp	al, 7
 19134                                  		;cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 19135                                  					; ffOther
 19136 00001C4B 7413                    		jz	short Is720K
 19137 00001C4D 3C09                    		cmp	al, 9
 19138                                  		;cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 19139                                  					; ff288
 19140 00001C4F 740F                    		jz	short Is720K
 19141 00001C51 B007                    		mov	al, 7		; seven	sectors	/ fat
 19142 00001C53 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 19143                                  					; 224 root dir entries
 19144                                  					; & 0Fh sector max
 19145 00001C56 B96009                  		mov	cx, 2400	; 80*15*2
 19146                                  					; 80 tracks, 15 sectors/track,
 19147                                  					; 2 sides
 19148                                  		; 02/09/2023
 19149 00001C59 5A                      		pop	dx		; pop off return address
 19150 00001C5A BA0201                  		mov	dx, 258		; 1*256+2
 19151                                  					; sectors/allocation unit
 19152                                  					; & head max
 19153                                  		;add	sp, 2		; pop off return address
 19154 00001C5D E9EAEA                  		jmp	Has1		; return to tail of getbp
 19155                                  ; ---------------------------------------------------------------------------
 19156                                  
 19157                                  Is720K:
 19158                                  		; 02/09/2023
 19159 00001C60 5B                      		pop	bx		; pop off return address
 19160                                  		;add	sp, 2		; pop off return address
 19161 00001C61 E9A9EA                  		jmp	Has720K		; return to 720K code
 19162                                  ; ---------------------------------------------------------------------------
 19163                                  
 19164                                  		; 18/12/2022
 19165                                  ;dofloppy:
 19166                                  		;retn
 19167                                  
 19168                                  ; =============== S U B	R O U T	I N E =======================================
 19169                                  
 19170                                  ; 16/10/2022
 19171                                  
 19172                                  ;---------------------------------------------------------------------------
 19173                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 19174                                  ;		   essentially used to indicate changeline, or format.
 19175                                  ;
 19176                                  ;   inputs:	dl contains physical drive number
 19177                                  ;		bx contains bits to set in the flag field in the bdss
 19178                                  ;   outputs:	none
 19179                                  ;   registers modified: flags
 19180                                  ;
 19181                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 19182                                  ;
 19183                                  ; in the virtual drive system we *must* flag the other drives as being changed
 19184                                  ;---------------------------------------------------------------------------
 19185                                  
 19186                                  		; 26/12/2023 - Retro DOS v5.0
 19187                                  set_changed_dl:	
 19188 00001C64 06                      		push	es
 19189 00001C65 57                      		push	di
 19190                                  		;les	di, ds:start_bds
 19191                                  		; 19/10/2022
 19192 00001C66 C43E[1901]              		les	di, [start_bds]
 19193                                  
 19194                                  ; note: we assume that the list is non-empty
 19195                                  
 19196                                  scan_bds:
 19197 00001C6A 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 19198 00001C6E 7504                    		jnz	short get_next_bds
 19199                                  
 19200                                  ; someone may complain, but this *always* must be done when a disk change is
 19201                                  ; noted. there are *no* other compromising circumstances.
 19202                                  
 19203                                  		; 26/12/2023
 19204 00001C70 26095D3F                		or	[es:di+3Fh], bx	; [es:di+BDS.flags]
 19205                                  		;or	[es:di+23h], bx	; [es:di+BDS.flags]
 19206                                  					; signal change	on other drive
 19207                                  get_next_bds:
 19208 00001C74 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 19209                                  					; go to	next bds
 19210 00001C77 83FFFF                  		cmp	di, 0FFFFh
 19211 00001C7A 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 19212 00001C7C 5F                      		pop	di
 19213 00001C7D 07                      		pop	es
 19214 00001C7E C3                      		retn
 19215                                  
 19216                                  ; =============== S U B	R O U T	I N E =======================================
 19217                                  
 19218                                  ;---------------------------------------------------------------------------
 19219                                  ; checkromchange - see if external program has diddled rom change line.
 19220                                  ;
 19221                                  ;   inputs:	es:di points to current bds.
 19222                                  ;   outputs:	zero set - no change
 19223                                  ;		zero reset - change
 19224                                  ;   registers modified: none
 19225                                  ;---------------------------------------------------------------------------
 19226                                  
 19227                                  		; 26/12/2023 - Retro DOS v5.0
 19228                                  checkromchange:	
 19229                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 19230                                  		; 26/12/2023
 19231 00001C7F 26F6453F40              		test	byte [es:di+3Fh], 40h
 19232                                  		; 10/12/2022
 19233                                  		;test	byte [es:di+23h], 40h
 19234                                  		;;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 19235                                  					; fchanged
 19236 00001C84 C3                      		retn
 19237                                  
 19238                                  ; =============== S U B	R O U T	I N E =======================================
 19239                                  
 19240                                  ;---------------------------------------------------------------------------
 19241                                  ; resetchanged - restore value of change line
 19242                                  ;
 19243                                  ;   inputs:	es:di points to current bds
 19244                                  ;   outputs:	none
 19245                                  ;   registers modified: none
 19246                                  ;---------------------------------------------------------------------------
 19247                                  
 19248                                  		; 26/12/2023 - Retro DOS v5.0
 19249                                  resetchanged:
 19250                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh
 19251                                  		; 26/12/2023
 19252 00001C85 2680653FBF              		and	byte [es:di+3Fh], 0BFh
 19253                                  		; 10/12/2022
 19254                                  		;and	byte [es:di+23h], 0BFh
 19255                                  		;;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 19256                                  					; ~fchanged
 19257 00001C8A C3                      		retn
 19258                                  
 19259                                  ; =============== S U B	R O U T	I N E =======================================
 19260                                  
 19261                                  ;---------------------------------------------------------------------------
 19262                                  ; haschange - see if drive can supply change line
 19263                                  ;
 19264                                  ;   inputs:	es:di points to current bds
 19265                                  ;   outputs:	zero set - no change line available
 19266                                  ;		zero reset - change line available
 19267                                  ;   registers modified: none
 19268                                  ;---------------------------------------------------------------------------
 19269                                  
 19270                                  		; 26/12/2023 - Retro DOS v5.0
 19271                                  haschange:
 19272                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 19273                                  		; 26/12/2023
 19274 00001C8B 26F6453F02              		test	byte [es:di+3Fh], 2
 19275                                  		; 10/12/2022
 19276                                  		;test	byte [es:di+23h], 2
 19277                                  		;;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 19278                                  					; fchangeline
 19279 00001C90 C3                      		retn
 19280                                  
 19281                                  ; ---------------------------------------------------------------------------
 19282                                  
 19283                                  ; 16/10/2022
 19284                                  
 19285                                  ;-------------------------------------------------------------------------
 19286                                  ; set_volume_id      -	main routine, calls other routines.
 19287                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 19288                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 19289                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 19290                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 19291                                  ;-------------------------------------------------------------------------
 19292                                  
 19293                                  ; set_volume_id
 19294                                  ;   if drive has changeline support, read in and set the volume_id
 19295                                  ; and the last fat_id byte. if no change line support then do nothing.
 19296                                  ;
 19297                                  ;   on entry:
 19298                                  ;	es:di points to the bds for this disk.
 19299                                  ;	ah contains media byte
 19300                                  ;
 19301                                  ;   on exit:
 19302                                  ;	carry clear:
 19303                                  ;	   successful call
 19304                                  ;	carry set
 19305                                  ;	   error and ax has error code
 19306                                  
 19307                                  set_volume_id:
 19308 00001C91 52                      		push	dx		; save registers
 19309 00001C92 50                      		push	ax
 19310 00001C93 E8F5FF                  		call	haschange	; does drive have changeline support?
 19311 00001C96 740B                    		jz	short setvret	; no, get out
 19312 00001C98 E81000                  		call	read_volume_id
 19313 00001C9B 7209                    		jb	short seterr
 19314 00001C9D E8A900                  		call	transfer_volume_id ; copy the volume id	to special drive
 19315 00001CA0 E8E2FF                  		call	resetchanged	; restore value	of change line
 19316                                  setvret:				
 19317                                  		; 10/12/2022
 19318                                  		; cf = 0
 19319                                  		;clc			; no error, clear carry flag
 19320 00001CA3 58                      		pop	ax		; restore registers
 19321 00001CA4 5A                      		pop	dx
 19322 00001CA5 C3                      		retn
 19323                                  ; ---------------------------------------------------------------------------
 19324                                  
 19325                                  seterr:
 19326 00001CA6 5A                      		pop	dx		; pop stack but don't overwrite ax
 19327 00001CA7 5A                      		pop	dx		; restore dx
 19328 00001CA8 C3                      		retn
 19329                                  ; ---------------------------------------------------------------------------
 19330 00001CA9 0000                    root_sec:	dw 0			; root sector #
 19331                                  
 19332                                  ; 16/10/2022
 19333                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 19334                                  ; 09/12/2022
 19335                                  ROOTSEC equ root_sec
 19336                                  
 19337                                  ; =============== S U B	R O U T	I N E =======================================
 19338                                  
 19339                                  ; 16/10/2022
 19340                                  
 19341                                  ; read_volume_id read the volume id and tells if it has been changed.
 19342                                  ;
 19343                                  ;   on entry:
 19344                                  ;	es:di points to current bds for drive.
 19345                                  ;
 19346                                  ;   on exit:
 19347                                  ;	carry clear
 19348                                  ;	    si = 1  no change
 19349                                  ;	    si = 0  ?
 19350                                  ;	    si = -1 change
 19351                                  ;
 19352                                  ;	carry set:
 19353                                  ;	    error and ax has error code.
 19354                                  
 19355                                  read_volume_id:
 19356 00001CAB 52                      		push	dx		; preserve registers
 19357 00001CAC 51                      		push	cx
 19358 00001CAD 53                      		push	bx
 19359 00001CAE 50                      		push	ax
 19360 00001CAF 06                      		push	es		; stack the bds last
 19361 00001CB0 57                      		push	di
 19362 00001CB1 1E                      		push	ds		; point es to Bios_Data
 19363 00001CB2 07                      		pop	es
 19364 00001CB3 BF[4008]                		mov	di, tmp_vid	; "NO NAME	 "
 19365 00001CB6 BE[6305]                		mov	si, nul_vid	; "NO NAME	 "
 19366                                  		; 26/12/2023
 19367 00001CB9 B90B00                  		mov	cx, 11		; PCDOS 7.1 - 02/09/2023
 19368                                  		;mov	cx, 12		; initialize tmp_vid to	null vi_id
 19369                                  		
 19370                                  		;rep	movsb
 19371                                  		; 26/12/2023
 19372                                  		;rep movs byte ptr es:[di], byte ptr cs:[si]
 19373                                  		;db 0FBh,2Eh,0A4h 
 19374                                  		;cs	; nul_vid is in BIOSCODE segment 
 19375                                  		;rep movsb
 19376 00001CBC F3                      		rep
 19377 00001CBD 2E                      		cs
 19378 00001CBE A4                      		movsb	
 19379                                  		
 19380 00001CBF 5F                      		pop	di
 19381 00001CC0 07                      		pop	es
 19382 00001CC1 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 19383                                  					; # of fats
 19384 00001CC5 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 19385                                  					; sectors / fat
 19386 00001CC9 F6E1                    		mul	cl		; size taken by	fats
 19387 00001CCB 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 19388                                  					; add on reserved sectors
 19389                                  					;
 19390                                  					; ax is	now sector # (0	based)
 19391                                  		; 17/10/2022
 19392 00001CCF 2EA3[A91C]              		mov	[cs:ROOTSEC], ax
 19393                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 19394                                  					; 0070h:3EFFh =	2C7h:198Fh
 19395 00001CD3 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 19396                                  					; # root dir entries
 19397 00001CD7 B104                    		mov	cl, 4		; 16 entries/sector
 19398 00001CD9 D3E8                    		shr	ax, cl		; divide by 16
 19399                                  		;mov	cx, ax		; cx is	# of sectors to	scan
 19400                                  		; 02/09/2023 (PCDOS 7.1, one byte opcode)
 19401 00001CDB 91                      		xchg	ax, cx		; cx is	# of sectors to	scan
 19402                                  next_sec:
 19403 00001CDC 51                      		push	cx		; save outer loop counter
 19404 00001CDD 2EA1[A91C]              		mov	ax, [cs:ROOTSEC]
 19405                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 19406                                  					; get sector #
 19407 00001CE1 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 19408                                  					; sectors / track
 19409 00001CE5 31D2                    		xor	dx, dx
 19410 00001CE7 F7F1                    		div	cx
 19411                                  
 19412                                  ; set up registers for call to read_sector
 19413                                  
 19414 00001CE9 42                      		inc	dx		; dx= sectors into track
 19415                                  					; ax= track count from 0
 19416 00001CEA 88D1                    		mov	cl, dl		; sector to read
 19417 00001CEC 31D2                    		xor	dx, dx
 19418 00001CEE 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 19419                                  					; # heads on this disc
 19420 00001CF2 88D6                    		mov	dh, dl		; head number
 19421 00001CF4 88C5                    		mov	ch, al		; track	#
 19422 00001CF6 E8BDEB                  		call	read_sector	; get first sector of the root directory,
 19423                                  					; ds:bx	-> directory sector
 19424 00001CF9 723F                    		jb	short readviderr
 19425 00001CFB B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 19426 00001CFE B008                    		mov	al, 8		; volume label bit
 19427                                  fvid_loop:
 19428                                  		; 02/09/2023 (PCDOS 7.1)
 19429 00001D00 382F                    		cmp	[bx], ch ; 0				
 19430                                  		;cmp	byte [bx], 0 ; end of dir?
 19431 00001D02 7433                    		jz	short no_vid	; yes, no vol id
 19432 00001D04 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 19433 00001D07 7405                    		jz	short ent_loop	; yes, skip
 19434 00001D09 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 19435 00001D0C 750F                    		jnz	short found_vid	; jmp yes
 19436                                  ent_loop:
 19437 00001D0E 83C320                  		add	bx, 32		; add length of	directory entry
 19438 00001D11 E2ED                    		loop	fvid_loop
 19439 00001D13 59                      		pop	cx		; outer loop
 19440 00001D14 2EFF06[A91C]            		inc	word [cs:ROOTSEC]
 19441                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 19442                                  					; next sector
 19443 00001D19 E2C1                    		loop	next_sec	; continue
 19444                                  notfound:
 19445                                  		; 02/09/2023
 19446                                  		;xor	si, si
 19447 00001D1B EB13                    		jmp	short fvid_ret
 19448                                  ; ---------------------------------------------------------------------------
 19449                                  
 19450                                  found_vid:
 19451                                  		; 02/09/2023
 19452                                  		; cf = 0  ('test' instruction clears cf)
 19453 00001D1D 59                      		pop	cx		; clean stack of outer loop counter
 19454 00001D1E 89DE                    		mov	si, bx		; point	to volume_id
 19455 00001D20 06                      		push	es		; preserve current bds
 19456 00001D21 57                      		push	di
 19457 00001D22 1E                      		push	ds
 19458 00001D23 07                      		pop	es		; point es to Bios_Data
 19459 00001D24 BF[4008]                		mov	di, tmp_vid	; "NO NAME	 "
 19460 00001D27 B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 19461                                  					; length of string minus nul
 19462 00001D2A F3A4                    		rep movsb		; mov volume label to tmp_vid
 19463                                  		;xor	al, al
 19464                                  		; 02/09/2023
 19465 00001D2C 91                      		xchg	ax, cx		; ax = 0
 19466 00001D2D AA                      		stosb			; null terminate
 19467                                  		;;xor	si, si
 19468                                  		; 02/09/2023
 19469                                  		;xchg	ax, si		; si = 0
 19470 00001D2E 5F                      		pop	di		; restore current bds
 19471 00001D2F 07                      		pop	es
 19472                                  fvid_ret:
 19473                                  		; 02/09/2023
 19474 00001D30 31F6                    		xor	si, si ; 0
 19475                                  				
 19476 00001D32 58                      		pop	ax
 19477                                  		; 10/12/2022
 19478                                  		; cf = 0
 19479                                  		;clc
 19480                                  rvidret:
 19481 00001D33 5B                      		pop	bx		; restore registers
 19482 00001D34 59                      		pop	cx
 19483 00001D35 5A                      		pop	dx
 19484 00001D36 C3                      		retn
 19485                                  ; ---------------------------------------------------------------------------
 19486                                  
 19487                                  no_vid:
 19488 00001D37 59                      		pop	cx		; clean stack of outer loop counter
 19489                                  		;jmp	short notfound	; not found
 19490                                  		; 02/09/2023
 19491 00001D38 EBF6                    		jmp	short fvid_ret
 19492                                  ; ---------------------------------------------------------------------------
 19493                                  
 19494                                  readviderr:
 19495 00001D3A 5E                      		pop	si		; trash the outer loop counter
 19496 00001D3B 5E                      		pop	si		; caller's ax, return error code instead
 19497 00001D3C EBF5                    		jmp	short rvidret
 19498                                  
 19499                                  ; ---------------------------------------------------------------------------
 19500                                  		; 26/12/2023 - Retro DOS v5.0
 19501                                  		; 02/09/2023 - Retro DOS v4.2 (IO.SYS optimization)
 19502                                  		; PCDOS 7.1 - IBMBIO.COM - BIOSCODE:1DCFh 
 19503                                  preset_volid_addr:
 19504 00001D3E BE[4008]                		mov	si, tmp_vid	; "NO NAME    "
 19505                                  		; 26/12/2023
 19506                                  		; PCDOS 7.1
 19507 00001D41 83C77D                  		add	di, 125		; BDS.volid
 19508 00001D44 B90B00                  		mov	cx, 11		; VOLID_SIZ (12 for MSDOS 5.0-6.22 versions)
 19509                                  		; MSDOS 6.21 (MSDOS 5.0 & 6.?)
 19510                                  		;add	di, 75		; BDS.volid
 19511                                  		;mov	cx, 12		; VOLID_SIZ
 19512                                  		;
 19513 00001D47 FC                      		cld
 19514 00001D48 C3                      		retn
 19515                                  
 19516                                  ; =============== S U B	R O U T	I N E =======================================
 19517                                  
 19518                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 19519                                  ;
 19520                                  ; inputs:	es:di has current bds
 19521                                  ; outputs:	bds for drive has volume id from tmp
 19522                                  
 19523                                  		; 27/12/2023 - Retro DOS v5.0
 19524                                  transfer_volume_id:
 19525 00001D49 57                      		push	di		; copy the volume id from tmp to special drive
 19526                                  		;push	si
 19527 00001D4A 51                      		push	cx
 19528                                  		; 27/12/2023
 19529 00001D4B 56                      		push	si
 19530                                  
 19531                                  		;mov	si, tmp_vid	; "NO NAME	 "
 19532                                  		;;add	di, BDS.volid
 19533                                  		;add	di, 75		; BDS.volid
 19534                                  		;;mov	cx, VOLID_SIZ
 19535                                  		;mov	cx, 12		; VOLID_SIZ
 19536                                  		;cld
 19537                                  		; 02/09/2023 (PCDOS 7.1)
 19538 00001D4C E8EFFF                  		call	preset_volid_addr
 19539                                  
 19540 00001D4F F3A4                    		rep movsb
 19541                                  		
 19542                                  		; 27/12/2023
 19543 00001D51 5E                      		pop	si
 19544                                  chk_volid_ok:
 19545 00001D52 59                      		pop	cx
 19546                                  		;pop	si
 19547 00001D53 5F                      		pop	di
 19548 00001D54 C3                      		retn
 19549                                  
 19550                                  ; =============== S U B	R O U T	I N E =======================================
 19551                                  
 19552                                  ;  check_volume_id - compare volume id in tmp area with
 19553                                  ;		     one expected for drive
 19554                                  ;
 19555                                  ;   inputs:	es:di has current bds for drive
 19556                                  ;   outputs:	zero true means it matched
 19557                                  
 19558                                  		; 27/12/2023 - Retro DOS v5.0
 19559                                  check_volume_id:
 19560 00001D55 57                      		push	di
 19561 00001D56 51                      		push	cx
 19562                                  		
 19563                                  		;mov	si, tmp_vid	; "NO NAME	 "
 19564                                  		;;add	di, BDS.volid
 19565                                  		;add	di, 75		; BDS.volid
 19566                                  		;;mov	cx, VOLID_SIZ
 19567                                  		;mov	cx, 12		; VOLID_SIZ
 19568                                  		;cld
 19569                                  		; 02/09/2023 (PCDOS 7.1)
 19570 00001D57 E8E4FF                  		call	preset_volid_addr
 19571                                  
 19572 00001D5A F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 19573                                  		
 19574                                  		; 27/12/2023
 19575                                  		;pop	cx
 19576                                  		;pop	di
 19577                                  		;retn
 19578 00001D5C EBF4                    		jmp	short chk_volid_ok
 19579                                  
 19580                                  ; =============== S U B	R O U T	I N E =======================================
 19581                                  
 19582                                  ;   fat_check - see of the fatid has changed in the specified drive.
 19583                                  ;	      - uses the fat id obtained from the boot sector.
 19584                                  ;
 19585                                  ;   inputs:	medbyt is expected fat id
 19586                                  ;		es:di points to current bds
 19587                                  ;
 19588                                  ;   output:	si = -1 if fat id different,
 19589                                  ;		si = 0 otherwise
 19590                                  ;
 19591                                  ;   no other registers changed.
 19592                                  
 19593                                  fat_check:
 19594 00001D5E 50                      		push	ax
 19595 00001D5F 31F6                    		xor	si, si		; say fat id's are same.
 19596 00001D61 A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 19597 00001D64 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 19598                                  					; compare it with the bds medbyte
 19599 00001D68 7401                    		jz	short okret1	; carry	clear
 19600 00001D6A 4E                      		dec	si
 19601                                  okret1:
 19602 00001D6B 58                      		pop	ax
 19603 00001D6C C3                      		retn
 19604                                  
 19605                                  ; ---------------------------------------------------------------------------
 19606                                  
 19607                                  ; BIOSCODE:1DFEh (PCDOS 7.1 IBMBIO.COM) ; 27/12/2023
 19608                                  		;times 2 db 0
 19609                                  
 19610                                  ; BIOSCODE:1A69h (MSDOS 6.21 IO.SYS) ((& MSDOS 6.22 IO.SYS))
 19611                                  		;times 7 db 0
 19612                                  
 19613                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 19614                                  
 19615                                  		; 09/12/2022
 19616                                  		;times 4 db 0	; 17/10/2022
 19617                                  		;db 4 dup(0)	; times 4 db 0
 19618                                  
 19619                                  ; ---------------------------------------------------------------------------
 19620                                  
 19621                                  		; 09/12/2022
 19622                                  		;db 0
 19623                                  
 19624                                  number2div	equ ($-BCode_start)
 19625                                  number2mod	equ (number2div % 16)
 19626                                  
 19627                                  %if (number2mod>0) & (number2mod<16) ; 17/09/2023
 19628 00001D6D 00<rep 3h>              		times (16-number2mod) db 0
 19629                                  %endif
 19630                                  
 19631                                  ;align 16
 19632                                  
 19633                                  ; 09/12/2022
 19634                                  BCODE_END	equ $ - BCode_start
 19635                                  ; 29/09/2023
 19636                                  BCODEEND:
 19637                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 19638                                  ; 13/12/2022
 19639                                  SYSINITOFFSET	equ BCODE_END
 19640                                  ; 29/09/2023
 19641                                  ;SYSINITOFFSET	equ $-$$
 19642                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 19643                                  
 19644                                  ; 28/09/2023
 19645                                  S2SIZE equ $-$$
 19646                                  
 19647                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 19648                                  
 19649                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19650                                  ; 01/05/2019 - Retro DOS v4.0 
 19651                                  ; ============================================================================
 19652                                  ; end of BIOSCODE
 19653                                  
 19654                                  ; ----------------------------------------------------------------------------
 19655                                  ; %include sysinit5.s	; 09/12/2022
 19656                                  ; ----------------------------------------------------------------------------
 19657                                  
 19658                                  ;=============================================================================
 19659                                  ; (IO.SYS) SYSINIT SEGMENT 
 19660                                  ;=============================================================================
 19661                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19662                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 19663                                  ;
 19664                                  ; 27/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 19665                                  
 19666                                  section .SYSINIT vstart=0
 19667                                  
 19668                                  ; ****************************************************************************
 19669                                  ; SYSINIT.BIN (MSDOS 6.21 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 19670                                  ; ----------------------------------------------------------------------------
 19671                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 30/12/2022))
 19672                                  ; ----------------------------------------------------------------------------
 19673                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 19674                                  ; ----------------------------------------------------------------------------
 19675                                  ; Assembler: NASM version 2.15
 19676                                  ; ----------------------------------------------------------------------------
 19677                                  ;	   ((nasm sysinit6.s -l sysinit6.lst -o SYSINIT6.BIN -Z error.txt)) 	
 19678                                  ; ----------------------------------------------------------------------------
 19679                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 19680                                  ; ----------------------------------------------------------------------------
 19681                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 19682                                  ; source code by Microsoft, 1991 
 19683                                  ; ----------------------------------------------------------------------------
 19684                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 19685                                  ; by Microsoft, 12/10/1983
 19686                                  ; ****************************************************************************
 19687                                  ; main file: 'retrodos4.s'
 19688                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 19689                                  
 19690                                  ; 30/12/2022 - Retro DOS v4.2 
 19691                                  ; Retro DOS v4.0 - 2019
 19692                                  ; SYSINIT (MSDOS 6.21 IO.SYS) draft: 'sysinit3.s' (01/07/2019)
 19693                                   
 19694                                  ; 21/10/2022
 19695                                  ; ----------------------------------------------------------------------------
 19696                                  ; This source code (version) is based on SYSINIT source code of disassembled
 19697                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 19698                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 19699                                  ; ----------------------------------------------------------------------------
 19700                                  ; Binary file splitter & joiner: FFSJ v3.3
 19701                                  
 19702                                  ;--------------------------------------------------------------
 19703                                  ; SYSINIT.TXT (27/01/1983)
 19704                                  ;--------------------------------------------------------------
 19705                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 19706                                  ;over  the  system  initialization  after  the  OEM  bios   has
 19707                                  ;performed any  initialization  it  needs  to  do.   Control is
 19708                                  ;transfered with a long jump to the external  variable  SYSINIT
 19709                                  ;
 19710                                  ;
 19711                                  ;   The OEM  has  the  following  variables declared external:
 19712                                  ;
 19713                                  ;   CURRENT_DOS_LOCATION    WORD
 19714                                  ;
 19715                                  ;This word  contains  the  segment  number of the DOS before it
 19716                                  ;is relocated.  The OEM bios must set this value.
 19717                                  ;
 19718                                  ;   FINAL_DOS_LOCATION      WORD
 19719                                  ;
 19720                                  ;This word contains the segment number of the DOS after SYSINIT
 19721                                  ;moves it.  The OEM bios must set this value.
 19722                                  ;
 19723                                  ;   DEVICE_LIST             DWORD
 19724                                  ;
 19725                                  ;This  double  word  pointer  points  to  the  linked  list  of
 19726                                  ;character and block device drivers.  The  OEM  must  set  this
 19727                                  ;value.
 19728                                  ;
 19729                                  ;   MEMORY_SIZE             WORD
 19730                                  ;
 19731                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 19732                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 19733                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 19734                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 19735                                  ;and read it back until it gets a mismatch.
 19736                                  ;
 19737                                  ;   DEFAULT_DRIVE           BYTE
 19738                                  ;
 19739                                  ;This is  the initial default drive when the system first comes
 19740                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 19741                                  ;it then drive a is assumed.
 19742                                  ;
 19743                                  ;   BUFFERS                 BYTE
 19744                                  ;
 19745                                  ;This is  the  default  number of buffers for the system.  This
 19746                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 19747                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 19748                                  ;
 19749                                  ;   FILES                   BYTE
 19750                                  ;
 19751                                  ;This is  the  default  number  of  files for the system.  This
 19752                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 19753                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 19754                                  ;
 19755                                  ;   SYSINIT                 FAR
 19756                                  ;
 19757                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 19758                                  ;this label at the end of its INIT code.
 19759                                  ;
 19760                                  ;   The OEM  has  the  following  variables declared public:
 19761                                  ;
 19762                                  ;   RE_INIT                 FAR
 19763                                  ;
 19764                                  ;This is an entry point which allows the BIOS to do some INIT
 19765                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 19766                                  ;PRESERVED.  On entry DS points to the first available memory
 19767                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 19768                                  ;prefix which represents  the  "program"  currently  running.
 19769                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 19770                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 19771                                  ;that  no  memory  is  allocated to it, it is running in free
 19772                                  ;memory.
 19773                                  ;NOTES:
 19774                                  ;     At the time this routine is called SYSINIT occupies the
 19775                                  ;highest 10K of memory ("highest" is determined by the  value
 19776                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 19777                                  ;     Since this is called AFTER DOS is initialized, you can
 19778                                  ;make system calls.  This also implies that the code for this
 19779                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 19780                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 19781                                  ;     If you don't want  anything done just set this to point
 19782                                  ;at a FAR RET instruction.
 19783                                  
 19784                                  ; ----------------------------------------------------------------------
 19785                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 19786                                  ; ----------------------------------------------------------------------
 19787                                  
 19788                                  ;include version.inc
 19789                                  ; ----------------------------------------------------------------------
 19790                                  
 19791                                  ;FALSE   EQU     0
 19792                                  ;TRUE    EQU     0FFFFh
 19793                                  
 19794                                  ;IBMVER	    EQU     TRUE
 19795                                  ;IBMCOPYRIGHT EQU   FALSE
 19796                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 19797                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 19798                                  ;MSVER      EQU     FALSE
 19799                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 19800                                  ;KANJI      EQU     FALSE
 19801                                  
 19802                                  ;(MSDOS 6.0, versiona.inc, 1991)
 19803                                  ; ----------------------------------------------------------------------
 19804                                  ;MAJOR_VERSION  EQU	6
 19805                                  ;;MINOR_VERSION	EQU	0	;6.00
 19806                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 19807                                  
 19808                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 19809                                  ; ----------------------------------------------------------------------
 19810                                  ;MAJOR_VERSION   EQU	5
 19811                                  ;MINOR_VERSION   EQU	0
 19812                                  
 19813                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21)
 19814                                  ;MAJOR_VERSION   EQU	6
 19815                                  ;MINOR_VERSION   EQU	22
 19816                                  
 19817                                  ; 21/02/2024 - Retro DOS v5.0 (Modified PCDOS 7.1)
 19818                                  MAJOR_VERSION   EQU	7
 19819                                  MINOR_VERSION   EQU	10
 19820                                  
 19821                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 19822                                  
 19823                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 19824                                  				; currently 0.
 19825                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 19826                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 19827                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 19828                                  
 19829                                  ;      if1
 19830                                  ;      %OUT  ... for DOS Version 5.00 ...
 19831                                  ;      endif
 19832                                  
 19833                                         ;******************************
 19834                                         ;Each assembler program should:
 19835                                         ;  mov ah,030h                   ;DOS Get Version function
 19836                                         ;  int 021h                      ;Version ret. in AX,minor version first
 19837                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 19838                                         ;  jne error_handler             ; EXACT version match.
 19839                                         ;******************************
 19840                                  
 19841                                  ; ----------------------------------------------------------------------
 19842                                  ; device definitions
 19843                                  
 19844                                  ;Attribute bit masks
 19845                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 19846                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 19847                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 19848                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 19849                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 19850                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 19851                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 19852                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 19853                                  
 19854                                  ; The device table list has the form:
 19855                                  struc	SYSDEV
 19856 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 19857 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 19858 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 19859 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 19860 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 19861                                  .size:
 19862                                  endstruc
 19863                                  
 19864                                  ;Static Reguest Header
 19865                                  struc	SRHEAD
 19866 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 19867 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 19868 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 19869 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 19870 00000005 ????????????????                	resb 8		;Reserved for queue links
 19871                                  .size:
 19872                                  endstruc
 19873                                  
 19874                                  ;Status word masks
 19875                                  STERR   EQU     8000H           ;Bit 15 - Error
 19876                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 19877                                  STDON   EQU     0100H           ;Bit 8 - Done
 19878                                  STECODE EQU     00FFH           ;Error code
 19879                                  WRECODE EQU     0
 19880                                  
 19881                                  ;Function codes
 19882                                  DEVINIT EQU     0               ;Initialization
 19883                                  DINITHL EQU     26              ;Size of init header
 19884                                  DEVMDCH EQU     1               ;Media check
 19885                                  DMEDHL  EQU     15              ;Size of media check header
 19886                                  DEVBPB  EQU     2               ;Get BPB
 19887                                  DEVRDIOCTL EQU  3               ;IOCTL read
 19888                                  DBPBHL  EQU     22              ;Size of Get BPB header
 19889                                  DEVRD   EQU     4               ;Read
 19890                                  DRDWRHL EQU     22              ;Size of RD/WR header
 19891                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 19892                                  DRDNDHL EQU     14              ;Size of non destructive read header
 19893                                  DEVIST  EQU     6               ;Input status
 19894                                  DSTATHL EQU     13              ;Size of status header
 19895                                  DEVIFL  EQU     7               ;Input flush
 19896                                  ; 21/02/2024
 19897                                  ;DFLSHL EQU     15              ;Size of flush header
 19898                                  DFLSHL	equ	13	; PCDOS 7.1 IBMDOS.COM  ; 21/02/2024
 19899                                  DEVWRT  EQU     8               ;Write
 19900                                  DEVWRTV EQU     9               ;Write with verify
 19901                                  DEVOST  EQU     10              ;Output status
 19902                                  DEVOFL  EQU     11              ;Output flush
 19903                                  DEVWRIOCTL EQU  12              ;IOCTL write
 19904                                  
 19905                                  ; ----------------------------------------------------------------------
 19906                                  struc	SYS_FCB
 19907 00000000 ??                      .fcb_drive:	resb 1
 19908 00000001 ????????????????        .fcb_name:	resb 8
 19909 00000009 ??????                  .fcb_ext:	resb 3
 19910 0000000C ????                    .fcb_EXTENT:	resw 1
 19911 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 19912 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 19913                                                          ; word
 19914 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 19915 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 19916 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 19917 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 19918                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 19919                                                          ; If file, bit 6=0 if dirty
 19920                                                          ; If I/O device, bit 6=0 if EOF (input)
 19921                                                          ;               Bit 5=1 if Raw mode
 19922                                                          ;               Bit 0=1 if console input device
 19923                                                          ;               Bit 1=1 if console output device
 19924                                                          ;               Bit 2=1 if null device
 19925                                                          ;               Bit 3=1 if clock device
 19926 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 19927 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 19928 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 19929 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 19930 00000020 ??                      .fcb_NR:	resb 1	; Next record
 19931 00000021 ????????                .fcb_RR:	resb 4	; Random record
 19932                                  .size:
 19933                                  endstruc
 19934                                  
 19935                                  ; ----------------------------------------------------------------------
 19936                                  ; Field definition for I/O buffer information
 19937                                  
 19938                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 19939                                  
 19940                                  	; 03/01/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMDOS.COM)
 19941                                  
 19942                                  struc BUFFINFO
 19943 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
 19944 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
 19945 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
 19946                                  				; SFT table index (bit 7 = 1)
 19947                                  				; = FFH if buffer free
 19948 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
 19949                                  				;	= 0 if Local device buffer
 19950                                  				; Bit 6 = 1 if buffer dirty
 19951                                  				; Bit 5 = Reserved
 19952                                  				; Bit 4 = Search bit (bit 7 = 1)
 19953                                  				; Bit 3 = 1 if buffer is DATA
 19954                                  				; Bit 2 = 1 if buffer is DIR
 19955                                  				; Bit 1 = 1 if buffer is FAT
 19956                                  				; Bit 0 = Reserved
 19957 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
 19958                                  ; The next two items are often refed as a word (flags bit 7 = 0)
 19959 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
 19960 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
 19961 0000000D ????                    		resw 1 ; * ; 03/01/2024 ; PCDOS 7.1
 19962                                  			   ; hw of sectors per FAT
 19963 0000000F ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
 19964 00000013 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
 19965 00000015 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
 19966 00000016 ????                    		resw 1 ; * ; 03/01/2024 ; PCDOS 7.1
 19967                                  			   ; reserved word for dword boundary
 19968                                  .size:	; 20 bytes ; MSDOS 5.0 to 6.22
 19969                                  	; 24 bytes ; PCDOS 7.1 ; 03/01/2024
 19970                                  endstruc
 19971                                  
 19972                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
 19973                                  				;For buf_flags bit 7 = 1, this is the byte
 19974                                  				;offset of the start of the buffer in
 19975                                  				;the file pointed to by buf_ID. Thus
 19976                                  				;the buffer starts at location
 19977                                  				;buf_offset in the file and contains
 19978                                  				;buf_fill bytes.
 19979                                  
 19980                                  bufinsiz	equ	BUFFINFO.size	; Size of structure in bytes
 19981                                  
 19982                                  
 19983                                  buf_Free	equ	0FFh		; buf_id of free buffer
 19984                                  
 19985                                  ;Flag byte masks
 19986                                  buf_isnet	EQU	10000000B
 19987                                  buf_dirty	EQU	01000000B
 19988                                  ;***
 19989                                  buf_visit	EQU	00100000B
 19990                                  ;***
 19991                                  buf_snbuf	EQU	00010000B
 19992                                  
 19993                                  buf_isDATA	EQU	00001000B
 19994                                  buf_isDIR	EQU	00000100B
 19995                                  buf_isFAT	EQU	00000010B
 19996                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 19997                                  
 19998                                  buf_NetID	EQU	bufinsiz
 19999                                  
 20000                                  ; ----------------------------------------------------------------------
 20001                                  
 20002                                  ; ----------------------------------------------------------------------
 20003                                  ;**	DPB - Drive Parameter Block
 20004                                  
 20005                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 20006                                  
 20007                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 20008                                  ;	possibly inaccurate deductions from code study... - jgl
 20009                                  ;
 20010                                  ;	The DPB is DOS's main structure for describing block devices.
 20011                                  ;	It contains info about the "Drive" intermingled with info about
 20012                                  ;	the FAT file system which is presumably on the drive.  I don't know
 20013                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 20014                                  ;
 20015                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 20016                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 20017                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 20018                                  
 20019                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 20020                                  
 20021                                  ; 12/05/2019 - Retro DOS v4.0
 20022                                  
 20023                                  ; 01/01/2024
 20024                                  %if 0
 20025                                  
 20026                                  struc	DPB
 20027                                  .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 20028                                  .UNIT:		resb 1		; Driver unit number of DPB
 20029                                  .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 20030                                  .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 20031                                  .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 20032                                  .FIRST_FAT:	resw 1		; Starting record of FATs
 20033                                  .FAT_COUNT:	resb 1		; Number of FATs for this drive
 20034                                  .ROOT_ENTRIES:	resw 1		; Number of directory entries
 20035                                  .FIRST_SECTOR:	resw 1		; First sector of first cluster
 20036                                  .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 20037                                  ; MSDOS 3.3
 20038                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
 20039                                  ; MSDOS 6.0
 20040                                  .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 20041                                  .DIR_SECTOR:	resw 1		; Starting record of directory
 20042                                  .DRIVER_ADDR:	resd 1		; Pointer to driver
 20043                                  .MEDIA:		resb 1		; Media byte
 20044                                  .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 20045                                  				; check the first time this DPB is used
 20046                                  .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 20047                                  .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 20048                                  .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 20049                                  .size:
 20050                                  endstruc
 20051                                  
 20052                                  %else
 20053                                  
 20054                                  ; 01/01/2024 - Retro DOS v5.0 (PCDOS 7.1)
 20055                                  
 20056                                  struc	DPB
 20057 00000000 ??                      .DRIVE:		resb 1	; 0	; Logical drive # assoc with DPB (A=0,B=1,...)
 20058 00000001 ??                      .UNIT:		resb 1	; 1	; Driver unit number of DPB
 20059 00000002 ????                    .SECTOR_SIZE:	resw 1	; 2	; Size of physical sector in bytes
 20060 00000004 ??                      .CLUSTER_MASK:	resb 1	; 4	; Sectors/cluster - 1
 20061 00000005 ??                      .CLUSTER_SHIFT:	resb 1	; 5	; Log2 of sectors/cluster
 20062 00000006 ????                    .FIRST_FAT:	resw 1	; 6	; Starting record of FATs
 20063 00000008 ??                      .FAT_COUNT:	resb 1	; 8	; Number of FATs for this drive
 20064 00000009 ????                    .ROOT_ENTRIES:	resw 1	; 9	; Number of directory entries
 20065 0000000B ????                    .FIRST_SECTOR:	resw 1	; 11	; First sector of first cluster
 20066 0000000D ????                    .MAX_CLUSTER:	resw 1	; 13	; Number of clusters on drive + 1
 20067 0000000F ????                    .FAT_SIZE:	resw 1	; 15	; Number of records occupied by FAT
 20068 00000011 ????                    .DIR_SECTOR:	resw 1	; 17	; Starting record of directory
 20069 00000013 ????????                .DRIVER_ADDR:	resd 1  ; 19	; Pointer to driver
 20070 00000017 ??                      .MEDIA:		resb 1	; 23	; Media byte
 20071 00000018 ??                      .FIRST_ACCESS:	resb 1	; 24	; This is initialized to -1 to force a media
 20072                                  				; check the first time this DPB is used
 20073 00000019 ????????                .NEXT_DPB:	resd 1	; 25	; Pointer to next Drive parameter block
 20074 0000001D ????                    .NEXT_FREE:	resw 1	; 29	; Cluster # of last allocated cluster
 20075 0000001F ????                    .FREE_CNT:	resw 1	; 31	; Count of free clusters, -1 if unknown
 20076                                  ; FAT32 fs ; 01/01/2024
 20077                                  ; ref: https://en.wikibooks.org/wiki/
 20078                                  ;      First_steps_towards_system_programming_under_MS-DOS_7/Appendix
 20079                                  ;   -- A.03-1. Structure of Drive Parameters Blocks (DPB) ---
 20080 00000021 ????                    .FREE_CNT_HW:	resw 1	; 33	; High word of free cluster count
 20081 00000023 ????                    .EXT_FLAGS:	resw 1	; 35	; FAT32 extended flags (active FAT number)
 20082 00000025 ????                    .FSINFO_SECTOR:	resw 1	; 37	; (FAT32 fs) FSINFO structure sector address
 20083 00000027 ????                    .BKBOOT_SECTOR:	resw 1	; 39	; (FAT32 fs) Backup Boot Sector address
 20084 00000029 ????????                .FCLUS_FSECTOR: resd 1	; 41	; The first cluster's first sector address
 20085 0000002D ????????                .LAST_CLUSTER:	resd 1	; 45	; The last cluster number
 20086 00000031 ????????                .FAT32_SIZE:	resd 1	; 49	; Number of FAT sectors (for FAT32 fs)	 
 20087 00000035 ????????                .ROOT_CLUSTER:	resd 1	; 53	; Root directory's cluster number (FAT32 fs)
 20088                                  ; 01/01/2024 - Retro DOS v5.0
 20089 00000039 ????????                .FAT32_NXTFREE:	resd 1  ; 57	; The next free cluster (for FAT32 fs)
 20090                                  .size:		; 61 bytes ; 01/01/2024 (PCDOS 7.1)
 20091                                  endstruc
 20092                                  
 20093                                  %endif
 20094                                  
 20095                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 20096                                  
 20097                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 20098                                  
 20099                                  ; ----------------------------------------------------------------------
 20100                                  ; 26/03/2018
 20101                                  
 20102                                  ; IOCTL SUB-FUNCTIONS
 20103                                  IOCTL_GET_DEVICE_INFO	EQU	0
 20104                                  IOCTL_SET_DEVICE_INFO	EQU	1
 20105                                  IOCTL_READ_HANDLE	EQU	2
 20106                                  IOCTL_WRITE_HANDLE	EQU	3
 20107                                  IOCTL_READ_DRIVE	EQU	4
 20108                                  IOCTL_WRITE_DRIVE	EQU	5
 20109                                  IOCTL_GET_INPUT_STATUS	EQU	6
 20110                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 20111                                  IOCTL_CHANGEABLE?	EQU	8
 20112                                  IOCTL_SHARING_RETRY	EQU	11
 20113                                  GENERIC_IOCTL_HANDLE	EQU	12
 20114                                  GENERIC_IOCTL		EQU	13
 20115                                  
 20116                                  ; GENERIC IOCTL SUB-FUNCTIONS
 20117                                  RAWIO			EQU	8
 20118                                  
 20119                                  ; RAWIO SUB-FUNCTIONS
 20120                                  GET_DEVICE_PARAMETERS	EQU	60H
 20121                                  SET_DEVICE_PARAMETERS	EQU	40H
 20122                                  READ_TRACK		EQU	61H
 20123                                  WRITE_TRACK		EQU	41H
 20124                                  VERIFY_TRACK		EQU	62H
 20125                                  FORMAT_TRACK		EQU	42H
 20126                                  
 20127                                  ; DEVICETYPE VALUES
 20128                                  MAX_SECTORS_IN_TRACK	EQU	63
 20129                                  DEV_5INCH		EQU	0
 20130                                  DEV_5INCH96TPI		EQU	1
 20131                                  DEV_3INCH720KB		EQU	2
 20132                                  DEV_8INCHSS		EQU	3
 20133                                  DEV_8INCHDS		EQU	4
 20134                                  DEV_HARDDISK		EQU	5
 20135                                  DEV_OTHER		EQU	7
 20136                                  ;DEV_3INCH1440KB	EQU	7
 20137                                  DEV_3INCH2880KB		EQU	9
 20138                                  ; Retro DOS v2.0 - 26/03/2018
 20139                                  ;;DEV_TAPE		EQU	6
 20140                                  ;;DEV_ERIMO		EQU	8
 20141                                  ;DEV_3INCH2880KB	EQU	9
 20142                                  DEV_3INCH1440KB		EQU	10
 20143                                  
 20144                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 20145                                  					; CURRENTLY SUPPORT.
 20146                                  MAX_DEV_TYPE		EQU	10
 20147                                  
 20148                                  struc A_SECTORTABLE
 20149 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 20150 00000002 ????                    .ST_SECTORSIZE:		resw	1
 20151                                  .size:
 20152                                  endstruc
 20153                                  
 20154                                  ; ----------------------------------------------------------------------
 20155                                  ; structure, equates for devmark for mem command.
 20156                                  
 20157                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 20158                                  
 20159                                  struc devmark
 20160 00000000 ??                       .id:	    resb 1
 20161 00000001 ????                     .seg:	    resw 1
 20162 00000003 ????                     .size:	    resw 1
 20163 00000005 ??????                   .dum:	    resb 3
 20164 00000008 ????????????????         .filename: resb 8
 20165                                  endstruc
 20166                                  
 20167                                  devmark_stk	equ	'S'
 20168                                  devmark_device	equ	'D'
 20169                                  devmark_ifs	equ	'I'
 20170                                  devmark_buf	equ	'B'
 20171                                  devmark_cds	equ	'L' ; lastdrive
 20172                                  devmark_files	equ	'F'
 20173                                  devmark_fcbs	equ	'X'
 20174                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 20175                                  devmark_ems_stub equ	'E'
 20176                                  
 20177                                  setbrkdone	equ	00000001b
 20178                                  for_devmark	equ	00000010b
 20179                                  not_for_devmark equ	11111101b
 20180                                  
 20181                                  ; ----------------------------------------------------------------------
 20182                                  ; Memory arena structure
 20183                                  
 20184                                  ; 24/03/2019 - Retro DOS v4.0 
 20185                                  ; (MSDOS 6.0, ARENA.INC)
 20186                                  
 20187                                  ;** Arena Header
 20188                                  
 20189                                  struc ARENA
 20190 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 20191 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 20192 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 20193 00000005 ??????                  .RESERVED	resb 3		; reserved
 20194 00000008 ????????????????        .NAME:		resb 8		; owner file name
 20195                                  endstruc
 20196                                  
 20197                                  ; 12/04/2019
 20198                                  
 20199                                  arena_owner_system	EQU 0	; free block indication
 20200                                  
 20201                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 20202                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 20203                                  
 20204                                  ; ----------------------------------------------------------------------
 20205                                  ; Process data block (otherwise known as program header)
 20206                                  
 20207                                  ; 23/03/2019 - Retro DOS v4.0
 20208                                  
 20209                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 20210                                  
 20211                                  FILPERPROC	EQU     20
 20212                                  
 20213                                  struc PDB	; Process_data_block
 20214 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 20215 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 20216 00000004 ??                                      resb 1
 20217 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 20218 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 20219 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 20220 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 20221 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 20222 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 20223 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 20224 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 20225 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 20226 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 20227 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 20228 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 20229 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 20230 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 20231 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 20232 00000042 <res Eh>                .PAD1:		resb 14		; 	
 20233 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 20234 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 20235 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 20236 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 20237 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 20238 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 20239                                  ;.size:
 20240                                  endstruc
 20241                                  
 20242                                  ; ----------------------------------------------------------------------
 20243                                  ; <system call definitions>
 20244                                  
 20245                                  ; 23/03/2019 - Retro DOS v4.0
 20246                                  
 20247                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 20248                                  
 20249                                  ABORT                           EQU 0   ;  0      0
 20250                                  STD_CON_INPUT                   EQU 1   ;  1      1
 20251                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 20252                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 20253                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 20254                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 20255                                  RAW_CON_IO                      EQU 6   ;  6      6
 20256                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 20257                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 20258                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 20259                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 20260                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 20261                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 20262                                  DISK_RESET                      EQU 13  ; 13      D
 20263                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 20264                                  FCB_OPEN                        EQU 15  ; 15      F
 20265                                  FCB_CLOSE                       EQU 16  ; 16     10
 20266                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 20267                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 20268                                  FCB_DELETE                      EQU 19  ; 19     13
 20269                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 20270                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 20271                                  FCB_CREATE                      EQU 22  ; 22     16
 20272                                  FCB_RENAME                      EQU 23  ; 23     17
 20273                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 20274                                  SET_DMA                         EQU 26  ; 26     1A
 20275                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 20276                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 20277                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 20278                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 20279                                  GET_FCB_POSITION                EQU 36  ; 36     24
 20280                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 20281                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 20282                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 20283                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 20284                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 20285                                  GET_DATE                        EQU 42  ; 42     2A
 20286                                  SET_DATE                        EQU 43  ; 43     2B
 20287                                  GET_TIME                        EQU 44  ; 44     2C
 20288                                  SET_TIME                        EQU 45  ; 45     2D
 20289                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 20290                                  ; Extended functionality group
 20291                                  GET_DMA                         EQU 47  ; 47     2F
 20292                                  GET_VERSION                     EQU 48  ; 48     30
 20293                                  KEEP_PROCESS                    EQU 49  ; 49     31
 20294                                  GET_DPB                         EQU 50  ; 50     32
 20295                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 20296                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 20297                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 20298                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 20299                                  CHAR_OPER                       EQU 55  ; 55     37
 20300                                  INTERNATIONAL                   EQU 56  ; 56     38
 20301                                  ;   Directory Group
 20302                                  MKDIR                           EQU 57  ; 57     39
 20303                                  RMDIR                           EQU 58  ; 58     3A
 20304                                  CHDIR                           EQU 59  ; 59     3B
 20305                                  ;   File Group
 20306                                  CREAT                           EQU 60  ; 60     3C
 20307                                  OPEN                            EQU 61  ; 61     3D
 20308                                  CLOSE                           EQU 62  ; 62     3E
 20309                                  READ                            EQU 63  ; 63     3F
 20310                                  WRITE                           EQU 64  ; 64     40
 20311                                  UNLINK                          EQU 65  ; 65     41
 20312                                  LSEEK                           EQU 66  ; 66     42
 20313                                  CHMOD                           EQU 67  ; 67     43
 20314                                  IOCTL                           EQU 68  ; 68     44
 20315                                  XDUP                            EQU 69  ; 69     45
 20316                                  XDUP2                           EQU 70  ; 70     46
 20317                                  CURRENT_DIR                     EQU 71  ; 71     47
 20318                                  ;    Memory Group
 20319                                  ALLOC                           EQU 72  ; 72     48
 20320                                  DEALLOC                         EQU 73  ; 73     49
 20321                                  SETBLOCK                        EQU 74  ; 74     4A
 20322                                  ;    Process Group
 20323                                  EXEC                            EQU 75  ; 75     4B
 20324                                  EXIT                            EQU 76  ; 76     4C
 20325                                  WAITPROCESS			EQU 77  ; 77     4D
 20326                                  FIND_FIRST                      EQU 78  ; 78     4E
 20327                                  ;   Special Group
 20328                                  FIND_NEXT                       EQU 79  ; 79     4F
 20329                                  ; SPECIAL SYSTEM GROUP
 20330                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 20331                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 20332                                  GET_IN_VARS                     EQU 82  ; 82     52
 20333                                  SETDPB                          EQU 83  ; 83     53
 20334                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 20335                                  DUP_PDB                         EQU 85  ; 85     55
 20336                                  RENAME                          EQU 86  ; 86     56
 20337                                  FILE_TIMES                      EQU 87  ; 87     57
 20338                                  ;
 20339                                  ALLOCOPER			EQU 88	; 88     58	
 20340                                  ; Network extention system calls
 20341                                  GetExtendedError		EQU 89	; 89	 59
 20342                                  CreateTempFile			EQU 90	; 90	 5A
 20343                                  CreateNewFile			EQU 91	; 91	 5B
 20344                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 20345                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 20346                                  					;	    CloseByName, CloseUser,
 20347                                  					;	    CloseUserProcess,
 20348                                  					;	    GetOpenFileList
 20349                                  UserOper			EQU 94	; 94	 5E Get and Set
 20350                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 20351                                  xNameTrans			EQU 96	; 96	 60
 20352                                  PathParse			EQU 97	; 97	 61
 20353                                  GetCurrentPSP			EQU 98	; 98	 62
 20354                                  Hongeul 			EQU 99	; 99	 63
 20355                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 20356                                  Set_Printer_Flag		EQU 100 ; 100	 64
 20357                                  GetExtCntry			EQU 101 ; 101	 65
 20358                                  GetSetCdPg			EQU 102 ; 102	 66
 20359                                  ExtHandle			EQU 103 ; 103	 67
 20360                                  Commit				EQU 104 ; 104	 68
 20361                                  GetSetMediaID			EQU 105 ; 105	 69
 20362                                  IFS_IOCTL			EQU 107 ; 107	 6B
 20363                                  ExtOpen 			EQU 108 ; 108	 6C
 20364                                  ;
 20365                                  ;ifdef ROMEXEC
 20366                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 20367                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 20368                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 20369                                  ;endif
 20370                                  ;
 20371                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 20372                                  OEM_C1				EQU 249 ; 249	 F9
 20373                                  OEM_C2				EQU 250 ; 250	 FA
 20374                                  OEM_C3				EQU 251 ; 251	 FB
 20375                                  OEM_C4				EQU 252 ; 252	 FC
 20376                                  OEM_C5				EQU 253 ; 253	 FD
 20377                                  OEM_C6				EQU 254 ; 254	 FE
 20378                                  OEM_C7				EQU 255 ; 255	 FF
 20379                                  
 20380                                  ; ----------------------------------------------------------------------
 20381                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 20382                                  ; ----------------------------------------------------------------------
 20383                                  
 20384                                  ;;	IF	STACKSW
 20385                                  
 20386                                  ;;
 20387                                  ;; Internal Stack Parameters
 20388                                  ;EntrySize		equ	8
 20389                                  ;
 20390                                  ;MinCount		equ	8
 20391                                  ;DefaultCount		equ	9
 20392                                  ;MaxCount		equ	64
 20393                                  ;
 20394                                  ;MinSize 		equ	32
 20395                                  ;DefaultSize		equ	128
 20396                                  ;MaxSize 		equ	512
 20397                                  
 20398                                  ;;	ENDIF
 20399                                  
 20400                                  ; ----------------------------------------------------------------------
 20401                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 20402                                  ; ----------------------------------------------------------------------
 20403                                  					  ;;Rev 3.30 Modification
 20404                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 20405                                  									  
 20406                                  ;*******************************					  
 20407                                  ;System Service call ( Int 15h )					  
 20408                                  ;*******************************					  
 20409                                  ;Function AH = 0C0h, Return system configuration			  
 20410                                  ;For PC and PCJR on return:						  
 20411                                  ;	(AH)	= 80h							  
 20412                                  ;	(CY)	= 1							  
 20413                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 20414                                  ;	(AH)	= 86h							  
 20415                                  ;	(CY)	= 1							  
 20416                                  ;For all others:							  
 20417                                  ;	(AH)	= 0							  
 20418                                  ;	(CY)	= 0							  
 20419                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 20420                                  ; System descriptor :							  
 20421                                  ;	DW	xxxx		length of descriptor in bytes,		  
 20422                                  ;				minimum length = 8			  
 20423                                  ;	DB	xx		model byte				  
 20424                                  ;				0FFh	= PC				  
 20425                                  ;				0FEh	= PC/XT, Portable		  
 20426                                  ;				0FDh	= PC/JR 			  
 20427                                  ;				0FCh	= PC/AT				  
 20428                                  ;				0F9h	= Convertable			  
 20429                                  ;				0F8h	= Model 80			  
 20430                                  ;				0E0 thru 0EFh = reserved		  
 20431                                  ;									  
 20432                                  ;	DB	xx		secondary model byte			  
 20433                                  ;				000h	= PC1				  
 20434                                  ;				000h	= PC/XT, Portable		  
 20435                                  ;				000h	= PC/JR 			  
 20436                                  ;				000h	= PC/AT 			  
 20437                                  ;				001h	= PC/AT Model 339		  
 20438                                  ;				003h	= PC/RT				  
 20439                                  ;				000h	= Convertable			  
 20440                                  ;									  
 20441                                  ;	DB	xx		bios revision level			  
 20442                                  ;				00 for first release, subsequent release  
 20443                                  ;				of code with same model byte and	  
 20444                                  ;				secondary model byte require revison level
 20445                                  ;				to increase by one.			  
 20446                                  ;									  
 20447                                  ;	DB	xx		feature information byte 1		  
 20448                                  ;				X0000000 = 1, bios use DMA channel 3	  
 20449                                  ;					 = 0, DMA channel 3 not used	  
 20450                                  ;									  
 20451                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 20452                                  ;					 = 0, 2nd Interrupt chip not present
 20453                                  ;									  
 20454                                  ;				00X00000 = 1, Real Time Clock present	  
 20455                                  ;					 = 0, Real Time Clock not present 
 20456                                  ;									  
 20457                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 20458                                  ;						called in keyboard interrupt
 20459                                  ;						(Int 09h).		  
 20460                                  ;					 = 0, Keyboard escape sequence not
 20461                                  ;						called. 		  
 20462                                  ;				0000XXXX reserved			  
 20463                                  ;									  
 20464                                  ;	DB	xx		feature information byte 2 - reserved	  
 20465                                  ;									  
 20466                                  ;	DB	xx		feature information byte 2 - reserved	  
 20467                                  ;									  
 20468                                  ;	DB	xx		feature information byte 2 - reserved	  
 20469                                  ;									  
 20470                                  ;	DB	xx		feature information byte 2 - reserved	  
 20471                                  ;									  
 20472                                  
 20473                                  ; 22/03/2019
 20474                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR
 20475 00000000 ????                    .bios_sd_leng:		resw 1
 20476 00000002 ??                      .bios_sd_modelbyte:	resb 1
 20477                                  .bios_sd_scnd_modelbyte: 
 20478 00000003 ??                      			resb 1
 20479 00000004 ??                      			resb 1
 20480 00000005 ??                      .bios_sd_featurebyte1:	resb 1
 20481 00000006 ????????                			resb 4
 20482                                  endstruc
 20483                                  
 20484                                  ;FeatureByte1	bit map equates
 20485                                  DMAchannel3		equ 10000000b
 20486                                  ScndIntController	equ 01000000b
 20487                                  RealTimeClock		equ 00100000b
 20488                                  KeyEscapeSeq		equ 00010000b
 20489                                  					;;End of Modification
 20490                                  
 20491                                  ; ----------------------------------------------------------------------
 20492                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 20493                                  ; ----------------------------------------------------------------------
 20494                                  ; 22/03/2019 - Retro DOS v4.0
 20495                                  
 20496                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 20497                                  
 20498                                  struc SysInitVars
 20499                                  ; MSDOS 3.3
 20500 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 20501 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 20502 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 20503 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 20504 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 20505 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 20506 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 20507 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 20508 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 20509 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 20510 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 20511 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 20512                                  ; MSDOS 6.0
 20513 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 20514 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 20515 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 20516 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 20517                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 20518 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 20519 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 20520 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 20521 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 20522 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 20523 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 20524 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 20525                                  .size:
 20526                                  endstruc
 20527                                  
 20528                                  ;This is added for more information exchage between DOS, BIOS.
 20529                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 20530                                  
 20531                                  ; 22/03/2019
 20532                                  struc SysInitVars_Ext
 20533 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 20534 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 20535                                  endstruc
 20536                                  
 20537                                  ; 09/06/2018
 20538                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 20539                                  SYSI_DPB    equ	0
 20540                                  SYSI_SFT    equ 4
 20541                                  SYSI_CLOCK  equ 8
 20542                                  SYSI_CON    equ 12
 20543                                  SYSI_MAXSEC equ 16
 20544                                  SYSI_BUF    equ 18
 20545                                  SYSI_CDS    equ 22
 20546                                  SYSI_FCB    equ 26
 20547                                  SYSI_KEEP   equ 30
 20548                                  SYSI_NUMIO  equ	32
 20549                                  SYSI_NCDS   equ	33
 20550                                  SYSI_DEV    equ 34
 20551                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 20552                                  SYSI_ATTR	  equ 38
 20553                                  SYSI_STRAT	  equ 40
 20554                                  SYSI_INTER	  equ 42
 20555                                  SYSI_NAME	  equ 44
 20556                                  SYSI_SPLICE	  equ 52
 20557                                  SYSI_IBMDOS_SIZE  equ 53
 20558                                  SYSI_IFS_DOSCALL@ equ 55
 20559                                  SYSI_IFS	  equ 59
 20560                                  SYSI_BUFFERS	  equ 63
 20561                                  SYSI_BOOT_DRIVE   equ 67
 20562                                  SYSI_DWMOVE	  equ 68
 20563                                  SYSI_EXT_MEM	  equ 69
 20564                                  
 20565                                  ;The SYSI_BUF of SysInitVars points to the following structure
 20566                                  
 20567                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 20568                                  
 20569                                  struc BUFFINF 	; BUFFINFO
 20570 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 20571 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 20572 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 20573 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 20574                                  
 20575 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 20576                                  				; are in HMA
 20577 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 20578                                  				;  used to read/write on disks
 20579 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 20580 00000015 ????                    .UU_EMS_NPA640:		resw 1
 20581 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 20582 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 20583 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 20584 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 20585 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 20586 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 20587 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 20588                                  .size:
 20589                                  endstruc
 20590                                  
 20591                                  ; ----------------------------------------------------------------------
 20592                                  ; CURDIR.INC (MSDOS 6.0 - 1991)
 20593                                  ; ----------------------------------------------------------------------
 20594                                  ; 22/03/2019 - Retro DOS v4.0
 20595                                  
 20596                                  ;**	CDS - Current Directory Structure
 20597                                  ;
 20598                                  ; CDS items are used bu the internal routines to store cluster numbers and
 20599                                  ; network identifiers for each logical name.  The ID field is used dually,
 20600                                  ; both as net ID and for a cluster number for local devices. In the case
 20601                                  ; of local devices, the cluster number will be -1 if there is a potential
 20602                                  ; of the disk being changed or if the path must be recracked.
 20603                                  ;
 20604                                  ;	Some pathnames have special preambles, such as
 20605                                  ;
 20606                                  ;		\\machine\sharename\...
 20607                                  ;	For these pathnames we can't allow ".." processing to back us
 20608                                  ;	up into the special front part of the name.  The CURDIR_END field
 20609                                  ;	holds the address of the seperator character which marks
 20610                                  ;	the split between the special preamble and the regular
 20611                                  ;	path list; ".." processing isn't allowed to back us up past
 20612                                  ;	(i.e., before) CURDIR_END
 20613                                  ;	For the root, it points at the leading /. For net
 20614                                  ;	assignments it points at the end (nul) of the initial assignment:
 20615                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 20616                                  ;	  ^		 ^		     ^
 20617                                  
 20618                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 20619                                  TEMPLEN 	EQU	DIRSTRLEN*2
 20620                                  
 20621                                  struc 		curdir_list
 20622                                  ; MSDOS 3.3
 20623 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 20624 00000043 ????                    .cdir_flags	resw	1		; various flags
 20625 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 20626 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 20627 0000004D ????                    .cdir_usr_word	resw	1
 20628 0000004F ????                    .cdir_end	resw	1		; end of assignment
 20629                                  ; MSDOS 6.0
 20630 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 20631 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 20632 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 20633                                  .size:
 20634                                  endstruc
 20635                                  
 20636                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 20637                                  						; ASM87 which doesn't allow
 20638                                  						; Size directive as a macro
 20639                                  						; argument
 20640                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 20641                                  
 20642                                  ;**	Flag values for CURDIR_FLAGS
 20643                                  
 20644                                  ;Flag word masks
 20645                                  curdir_isnet	EQU	1000000000000000B
 20646                                  curdir_isifs	EQU	1000000000000000B
 20647                                  curdir_inuse	EQU	0100000000000000B
 20648                                  curdir_splice	EQU	0010000000000000B
 20649                                  curdir_local	EQU	0001000000000000B
 20650                                  
 20651                                  ; ----------------------------------------------------------------------
 20652                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 20653                                  ; ----------------------------------------------------------------------
 20654                                  ; 25/03/2019 - Retro DOS v4.0
 20655                                  
 20656                                  ; 09/04/2024 - Retro DOS v4.2 (BugFix)
 20657                                  ; 09/04/2024 - Retro DOS v5.0
 20658                                  
 20659                                  ; system file table
 20660                                  
 20661                                  ;**	System File Table SuperStructure
 20662                                  ;
 20663                                  ;	The system file table entries are allocated in contiguous groups.
 20664                                  ;	There may be more than one such groups; the SF "superstructure"
 20665                                  ;	tracks the groups.
 20666                                  
 20667                                  struc	SF
 20668 00000000 ????????                .SFLink:	resd	1
 20669 00000004 ????                    .SFCount:	resw	1		; number of entries
 20670 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 20671                                  .size:
 20672                                  endstruc
 20673                                  
 20674                                  ;**	System file table entry
 20675                                  ;
 20676                                  ;	These are the structures which are at SFTABLE in the SF structure.
 20677                                  
 20678                                  struc	SF_ENTRY
 20679 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 20680                                  					;   if FCB then ref count
 20681 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 20682 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 20683 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 20684                                  					; Bit 15 = 1 if remote file
 20685                                  					;	 = 0 if local file or device
 20686                                  					; Bit 14 = 1 if date/time is not to be
 20687                                  					;   set from clock at CLOSE.  Set by
 20688                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 20689                                  					;   other reseters of the dirty bit
 20690                                  					;   (WRITE)
 20691                                  					; Bit 13 = Pipe bit (reserved)
 20692                                  					;
 20693                                  					; Bits 0-7 (old FCB_devid bits)
 20694                                  					; If remote file or local file, bit
 20695                                  					; 6=0 if dirty Device ID number, bits
 20696                                  					; 0-5 if local file.
 20697                                  					; bit 7=0 for local file, bit 7
 20698                                  					;      =1 for local I/O device
 20699                                  					; If local I/O device, bit 6=0 if EOF (input)
 20700                                  					;		Bit 5=1 if Raw mode
 20701                                  					;		Bit 0=1 if console input device
 20702                                  					;		Bit 1=1 if console output device
 20703                                  					;		Bit 2=1 if null device
 20704                                  					;		Bit 3=1 if clock device
 20705 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 20706                                  					; to device header if local device,
 20707                                  					; points to net device header if
 20708                                  					; remote
 20709 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 20710                                  ;.sf_lstclus:	resw	1 ; *	
 20711 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 20712 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 20713 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 20714 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 20715                                  ;
 20716                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 20717                                  ; ID
 20718                                  ;
 20719 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 20720 0000001B ????????                .sf_dirsec:	resd	1 ; 09/04/2024	; Sector number of directory sector for this file
 20721 0000001F ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 20722                                  ;
 20723                                  ; End of 7 bytes of file-system specific info.
 20724                                  ;
 20725 00000020 <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 20726                                  					; directory entry.  This is used by
 20727                                  					; close to detect file deleted and
 20728                                  					; disk changed errors.
 20729                                  ; SHARING INFO
 20730 0000002B ????????                .sf_chain:	resd	1		; link to next SF
 20731 0000002F ????                    .sf_UID:	resw	1
 20732 00000031 ????                    .sf_PID:	resw	1
 20733 00000033 ????                    .sf_MFT:	resw	1
 20734 00000035 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 20735 00000037 ????????                .sf_IFS_HDR:	resd 	1 ; **
 20736                                  .size:
 20737                                  endstruc
 20738                                  
 20739                                  ; ----------------------------------------------------------------------
 20740                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987)
 20741                                  ; ----------------------------------------------------------------------
 20742                                  ; 11/06/2018 - Retro DOS v3.0
 20743                                  
 20744                                  ;Equates for COUNTRY INFORMATION.
 20745                                  SetCountryInfo		EQU	1	;country info
 20746                                  SetUcase		EQU	2	;uppercase table
 20747                                  SetLcase		EQU	3	;lowercase table (Reserved)
 20748                                  SetUcaseFile		EQU	4	;uppercase file spec table
 20749                                  SetFileList		EQU	5	;valid file character list
 20750                                  SetCollate		EQU	6	;collating sequence
 20751                                  SetDBCS 		EQU	7	;double byte character set
 20752                                  SetALL			EQU	-1	;all the entries
 20753                                  
 20754                                  ;DOS country and code page information table structure.
 20755                                  ;Internally, IBMDOS gives a pointer to this table.
 20756                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 20757                                  ;this structure.
 20758                                  
 20759                                  struc country_cdpg_info ; DOS_country_cdpg_info
 20760 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 20761 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 20762 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 20763 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 20764 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 20765 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 20766                                  
 20767 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 20768 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 20769                                  
 20770 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 20771 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 20772                                  
 20773 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 20774 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 20775                                  
 20776 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 20777 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 20778 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 20779 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 20780 00000067 ????                    .ccDFormat:		resw	1	;date format
 20781 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 20782                                  					;5 byte of (currency symbol+0)
 20783 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 20784 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 20785 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 20786 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 20787 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 20788 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 20789 00000078 ??                      .ccTFormat:		resb	1	;time format
 20790 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 20791 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 20792 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 20793                                  .size:
 20794                                  endstruc
 20795                                  
 20796                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 20797                                  
 20798                                  ; ======================================================================
 20799                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 20800                                  ; ======================================================================
 20801                                  ; 21/03/2019 - Retro DOS v4.0
 20802                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 20803                                  
 20804                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 20805                                  ; 21/10/2022
 20806                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 20807                                  ; 22/10/2022
 20808                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 20809                                  ; 09/12/2022
 20810                                  DOSBIOCODESEG equ IOSYSCODESEG
 20811                                  
 20812                                  ; Note: These offset addresses must be chanqed when the code 
 20813                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 20814                                  
 20815                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 20816                                  
 20817                                  ; 09/12/2022
 20818                                  %if 0
 20819                                  
 20820                                  ; 13/05/2019
 20821                                  
 20822                                  ;IsWin386         equ 08CFh
 20823                                  ;V86_Crit_SetFocus equ 08D0h
 20824                                  ; 21/10/2022
 20825                                  IsWin386          equ 08D0h
 20826                                  V86_Crit_SetFocus equ 08D1h 
 20827                                  
 20828                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 20829                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 20830                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 20831                                  
 20832                                  ;SysinitPresent	  equ 08FCh
 20833                                  ; 21/10/2022
 20834                                  SysinitPresent	  equ 08FDh
 20835                                  
 20836                                  inHMA		  equ 000Dh
 20837                                  xms		  equ 000Eh
 20838                                  ;FreeHMAPtr	  equ 08F6h
 20839                                  ;multrk_flag	  equ 0533h
 20840                                  ;ec35_flag	  equ 0535h
 20841                                  ;EOT		  equ 012Eh
 20842                                  ; 21/10/2022
 20843                                  FreeHMAPtr	  equ 08F7h
 20844                                  multrk_flag	  equ 052Fh
 20845                                  ec35_flag	  equ 0531h
 20846                                  EOT		  equ 012Ch
 20847                                  
 20848                                  ;NextStack	  equ 08BFh
 20849                                  ;IT_StackLoc	  equ 08C5h
 20850                                  ;IT_StackSize	  equ 08C9h
 20851                                  ; 21/10/2022
 20852                                  NextStack	  equ 08C0h
 20853                                  IT_StackLoc	  equ 08C6h
 20854                                  IT_StackSize	  equ 08CAh
 20855                                  
 20856                                  ;MoveDOSIntoHMA	  equ 08F8h
 20857                                  ; 21/10/2022
 20858                                  MoveDOSIntoHMA	  equ 08F9h
 20859                                  
 20860                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 20861                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 20862                                  ; 21/10/2022
 20863                                  INT19SEM equ 0640h ; (iosys5.txt)
 20864                                  I19_LST  equ 0641h ; (iosys5.txt)
 20865                                  
 20866                                  %endif
 20867                                  
 20868                                  ; 09/12/2022
 20869                                  seg_reinit equ _seg_reinit
 20870                                  ec35_flag  equ ec35flag
 20871                                  INT19SEM   equ int19sem
 20872                                  I19_LST    equ i19_lst
 20873                                  
 20874                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 20875                                  INT19OLD08 equ I19_LST+6
 20876                                  INT19OLD09 equ I19_LST+11
 20877                                  INT19OLD0A equ I19_LST+16
 20878                                  INT19OLD0B equ I19_LST+21
 20879                                  INT19OLD0C equ I19_LST+26
 20880                                  INT19OLD0D equ I19_LST+31
 20881                                  INT19OLD0E equ I19_LST+36
 20882                                  INT19OLD70 equ I19_LST+41
 20883                                  INT19OLD72 equ I19_LST+46
 20884                                  INT19OLD73 equ I19_LST+51
 20885                                  INT19OLD74 equ I19_LST+56
 20886                                  INT19OLD76 equ I19_LST+61
 20887                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 20888                                  
 20889                                  ; 09/12/2022
 20890                                  %if 0
 20891                                  
 20892                                  ;keyrd_func	equ 04E9h
 20893                                  ;keysts_func	equ 04EAh
 20894                                  ;t_switch	equ 04F6h
 20895                                  ; 21/10/2022
 20896                                  keyrd_func	equ 04E5h
 20897                                  keysts_func	equ 04E6h
 20898                                  t_switch	equ 04F2h
 20899                                  
 20900                                  ; 22/10/2022
 20901                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 20902                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 20903                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 20904                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 20905                                  
 20906                                  %endif
 20907                                  
 20908                                  ; 09/12/2022
 20909                                  BCODESTART	equ BIOSDATAWORD
 20910                                  RE_INIT		equ re_init
 20911                                  
 20912                                  ; ----------------------------------------------------------------------
 20913                                  ; CONFIG.INC (MSDOS 6.0 - 1991)
 20914                                  ; ----------------------------------------------------------------------
 20915                                  ; 15/04/2019 - Retro DOS v4.0
 20916                                  
 20917                                  CONFIG_BEGIN        equ  '['
 20918                                  CONFIG_BREAK        equ  'C'
 20919                                  CONFIG_BUFFERS      equ  'B'
 20920                                  CONFIG_COMMENT      equ  'Y'
 20921                                  CONFIG_COUNTRY      equ  'Q'
 20922                                  CONFIG_DEVICE       equ  'D'
 20923                                  CONFIG_DEVICEHIGH   equ  'U'
 20924                                  CONFIG_DOS          equ  'H'
 20925                                  CONFIG_DRIVPARM     equ  'P'
 20926                                  CONFIG_FCBS         equ  'X'
 20927                                  CONFIG_FILES        equ  'F'
 20928                                  CONFIG_INCLUDE      equ  'J'
 20929                                  CONFIG_INSTALL      equ  'I'
 20930                                  CONFIG_INSTALLHIGH  equ  'W'
 20931                                  CONFIG_LASTDRIVE    equ  'L'
 20932                                  CONFIG_MENUCOLOR    equ  'R'
 20933                                  CONFIG_MENUDEFAULT  equ  'A'
 20934                                  CONFIG_MENUITEM     equ  'E'
 20935                                  CONFIG_MULTITRACK   equ  'M'
 20936                                  CONFIG_NUMLOCK      equ  'N'
 20937                                  CONFIG_REM          equ  '0'
 20938                                  CONFIG_SEMICOLON    equ  ';'
 20939                                  CONFIG_SET          equ  'V'
 20940                                  CONFIG_SHELL        equ  'S'
 20941                                  CONFIG_STACKS       equ  'K'
 20942                                  CONFIG_SUBMENU      equ  'O'
 20943                                  CONFIG_SWITCHES     equ  '1'
 20944                                  
 20945                                  CONFIG_UNKNOWN      equ  'Z'
 20946                                  
 20947                                  ; 13/05/2024 - Retro DOS v5.0 (PCDOS 71 IBMBIO.COM)
 20948                                  CONFIG_DOSDATA      equ  'T'
 20949                                  
 20950                                  CONFIG_OPTION_QUERY equ 80h
 20951                                  
 20952                                  ; ----------------------------------------------------------------------
 20953                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991)
 20954                                  ; ----------------------------------------------------------------------
 20955                                  ; 21/03/2019 - Retro DOS v4.0
 20956                                  
 20957                                  true	equ	0FFFFh
 20958                                  false	equ	0
 20959                                  cr	equ	13
 20960                                  lf	equ	10
 20961                                  tab	equ	9
 20962                                  
 20963                                  multMULT	   equ	4Ah
 20964                                  multMULTGETHMAPTR  equ	1
 20965                                  multMULTALLOCHMA   equ	2
 20966                                  
 20967                                  ;NOEXEC    equ	FALSE
 20968                                  
 20969                                  stacksw    equ	true	;include switchable hardware stacks
 20970                                  mycds_size equ	88	;size of curdir_list. if it is not
 20971                                  			;the same, then will generate compile error.
 20972                                  
 20973                                  entrysize   equ     8
 20974                                  
 20975                                  mincount    equ     8
 20976                                  defaultcount equ    9
 20977                                  maxcount    equ     64
 20978                                  
 20979                                  minsize     equ     32
 20980                                  defaultsize equ     128
 20981                                  maxsize     equ     512
 20982                                  
 20983                                  ;%define allocbyte  byte [es:bp+0]
 20984                                  ;%define intlevel   byte [es:bp+1]
 20985                                  ;%define savedsp    word [es:bp+2]
 20986                                  ;%define savedss    word [es:bp+4]
 20987                                  ;%define newsp	    word [es:bp+6]
 20988                                  
 20989                                  allocbyte   equ     0
 20990                                  intlevel    equ     1
 20991                                  savedsp     equ     2
 20992                                  savedss     equ     4
 20993                                  newsp       equ     6
 20994                                  
 20995                                  free	    equ     0
 20996                                  allocated   equ     1
 20997                                  overflowed  equ     2
 20998                                  clobbered   equ     3
 20999                                  
 21000                                  ;---------------------------------------
 21001                                  ; external variable defined in ibmbio module for multi-track
 21002                                  
 21003                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 21004                                  			  ; it on after handling config.sys file as a
 21005                                  			  ; default value,if multrk_flag = multrk_off1.
 21006                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 21007                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 21008                                  
 21009                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 21010                                  
 21011                                  SYSINIT$:
 21012                                  	;IF	STACKSW 
 21013                                  	; include MSSTACK.INC	;Main stack program and data definitions
 21014                                  	; include STKMES.INC	;Fatal stack error message
 21015                                  	;   public Endstackcode
 21016                                  ;Endstackcode	label byte
 21017                                  	;ENDIF
 21018                                  
 21019                                  ; 05/07/2018
 21020                                  ; ----------------------------------------------------------------------
 21021                                  ; 04/06/2018 - Retro DOS v3.0
 21022                                  
 21023                                  ; ----------------------------------------------------------------------
 21024                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 21025                                  ; ----------------------------------------------------------------------
 21026                                  
 21027                                  ;	MSStack.inc
 21028                                  ;
 21029                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 21030                                  ;	should follow the standard Interrupt Sharing Scheme which has
 21031                                  ;	a standard header structure.
 21032                                  ;	Fyi, the following shows the relations between
 21033                                  ;	the interrupt vector and interrupt level.
 21034                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 21035                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 21036                                  ;	MSSTACK module modifies the following interrupt vectors
 21037                                  ;	to meet the standard Interrupt Sharing standard;
 21038                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 21039                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 21040                                  ;	should be initialized to indicat whether this interrupt handler is
 21041                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 21042                                  ;	program header is initialized in STKINIT.INC module.
 21043                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 21044                                  ;
 21045                                  
 21046                                  ;  User specifies the number of stack elements - default = 9
 21047                                  ;						 minimum = 8
 21048                                  ;						 maximum = 64
 21049                                  ;
 21050                                  ;  Intercepts Asynchronous Hardware Interrupts only
 21051                                  ;
 21052                                  ;  Picks a stack from pool of stacks and switches to it
 21053                                  ;
 21054                                  ;  Calls the previously saved interrupt vector after pushing flags
 21055                                  ;
 21056                                  ;  On return, returns the stack to the stack pool
 21057                                  ;
 21058                                  
 21059                                  ; This is a modification of STACKS:
 21060                                  ; 1. To fix a bug which was causing the program to take up too much space.
 21061                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 21062                                  ;    . Clobbers the stack that got too big instead of innocent stack
 21063                                  ;    . Allows system to work if the only stack that got too big was the most
 21064                                  ;      deeply nested one
 21065                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 21066                                  ; 4. Does not intercept any interrupts on a PCjr.
 21067                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 21068                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 21069                                  
 21070                                  		;EVEN
 21071                                  ;align 2
 21072                                  		; 21/10/2022
 21073                                  
 21074 00000000 0000                    		dw	0	; spare field but leave these in order
 21075 00000002 0000                    stackcount:	dw	0
 21076 00000004 0000                    stackat: 	dw	0
 21077 00000006 0000                    stacksize:	dw	0
 21078 00000008 0000                    stacks:		dw	0
 21079 0000000A 0000                    		dw	0
 21080                                  
 21081 0000000C [0800]                  firstentry:	dw	stacks
 21082 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 21083 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 21084                                  
 21085                                  ;***********************************************************************
 21086                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 21087                                  
 21088                                  ; ----------------------------------------------------------------------
 21089                                  
 21090 00000012 00000000                old02:	dd	0
 21091                                  
 21092                                  int02:
 21093                                  
 21094                                  ; *********************************************************************
 21095                                  ;
 21096                                  ; this is special support for the pc convertible / nmi handler
 21097                                  ;
 21098                                  ;	on the pc convertible, there is a situation where an nmi can be 
 21099                                  ;	caused by using the "out" instructions to certain ports. when this
 21100                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 21101                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 21102                                  ;	includes other type of interrupts (hardware and software), and
 21103                                  ;	also includes other type of nmi's. when any nmi has occured,
 21104                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 21105                                  ;	the software takes specific steps to allow further interrupting.
 21106                                  ;
 21107                                  ;	for pc convertible, the situation where the nmi is generated by the
 21108                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 21109                                  ;	otherwords, it is actually a "restartable exception". in this
 21110                                  ;	case, the software handler must be able to get to the stack in
 21111                                  ;	order to figure out what instruction caused the problem, where
 21112                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 21113                                  ;	we will not switch stacks in this situation. this situation is
 21114                                  ;	detected by interrogating port 62h, and checking for a bit value
 21115                                  ;	of 80h. if set, *****do not switch stacks*****.
 21116                                  ;
 21117                                  ; *********************************************************************
 21118                                  
 21119 00000016 50                      	push	ax
 21120 00000017 06                      	push	es
 21121 00000018 B800F0                  	mov	ax,0F000h
 21122 0000001B 8EC0                    	mov	es,ax
 21123                                  	; 02/11/2022
 21124 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 21125 00000023 07                      	pop	es
 21126 00000024 750C                    	jne	short normal02
 21127                                  
 21128 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 21129                                  				; 0-3: values of DIP switches
 21130                                  				; 5: 1=Timer 2 channel out
 21131                                  				; 6: 1=I/O channel check
 21132                                  				; 7: 1=RAM parity check error occurred.
 21133 00000028 A880                    	test	al,80h
 21134 0000002A 7406                    	jz	short normal02
 21135                                  special02:
 21136 0000002C 58                      	pop	ax
 21137 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 21138                                  normal02:
 21139 00000032 58                      	pop	ax
 21140 00000033 E81101                  	call	do_int_stacks
 21141 00000036 [1200]                  	dw	old02
 21142                                  
 21143                                  ; ----------------------------------------------------------------------
 21144                                  
 21145 00000038 00000000                old08:	dd	0
 21146                                  
 21147                                  int08:
 21148 0000003C E80801                  	call	do_int_stacks
 21149 0000003F [3800]                  	dw	old08
 21150                                  
 21151                                  ; ----------------------------------------------------------------------
 21152                                  
 21153 00000041 00000000                old09:	dd	0
 21154                                  
 21155                                  int09:
 21156                                  
 21157                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 21158                                  ; as its first instruction for compatibility reasons
 21159                                  
 21160 00000045 EB02                    	jmp	short keyboard_lbl
 21161 00000047 90                      	nop
 21162 00000048 00                      	db	0
 21163                                  
 21164                                  keyboard_lbl:
 21165 00000049 E8FB00                  	call	do_int_stacks
 21166 0000004C [4100]                  	dw	old09
 21167                                  
 21168                                  ; ----------------------------------------------------------------------
 21169                                  
 21170 0000004E 00000000                old70:	dd	0
 21171                                  
 21172                                  int70:
 21173 00000052 E8F200                  	call	do_int_stacks
 21174 00000055 [4E00]                  	dw	old70
 21175                                  
 21176                                  ; ----------------------------------------------------------------------
 21177                                  
 21178                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 21179                                  ;public	int&a
 21180                                  ;public	old&a
 21181                                  ;public	firstflag&a
 21182                                  ;int&a	proc	far
 21183                                  ;	jmp	short entry_int&a&_stk
 21184                                  ;old&a	dd	  0		;forward pointer
 21185                                  ;	dw	  424bh 	;compatible signature for int. sharing
 21186                                  ;firstflag&a db   0		;the firstly hooked.
 21187                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 21188                                  ;	db	7 dup (0)	;reserved for future.
 21189                                  ;entry_int&a&_stk:
 21190                                  ;	call	do_int_stacks
 21191                                  ;	dw	old&a
 21192                                  ;intret_&a:
 21193                                  ;	iret
 21194                                  ;int&a	endp
 21195                                  ;	endm
 21196                                  
 21197                                  ; ----------------------------------------------------------------------
 21198                                  
 21199                                  int0A:
 21200 00000057 EB10                    	jmp	short entry_int0A_stk
 21201 00000059 00000000                old0A:	dd	0	
 21202 0000005D 4B42                    	dw	424Bh
 21203                                  firstflag0A:
 21204 0000005F 00                      	db	0
 21205 00000060 EB0C                    	jmp	short intret_0A
 21206 00000062 00<rep 7h>              	times	7 db 0
 21207                                  
 21208                                  entry_int0A_stk:
 21209 00000069 E8DB00                  	call	do_int_stacks
 21210 0000006C [5900]                  	dw	old0A
 21211                                  intret_0A:
 21212 0000006E CF                      	iret
 21213                                  
 21214                                  ; ----------------------------------------------------------------------
 21215                                  
 21216                                  int0B:
 21217 0000006F EB10                    	jmp	short entry_int0B_stk
 21218 00000071 00000000                old0B:	dd	0	
 21219 00000075 4B42                    	dw	424Bh
 21220                                  firstflag0B:
 21221 00000077 00                      	db	0
 21222 00000078 EB0C                    	jmp	short intret_0B
 21223 0000007A 00<rep 7h>              	times	7 db 0
 21224                                  
 21225                                  entry_int0B_stk:
 21226 00000081 E8C300                  	call	do_int_stacks
 21227 00000084 [7100]                  	dw	old0B
 21228                                  intret_0B:
 21229 00000086 CF                      	iret
 21230                                  
 21231                                  ; ----------------------------------------------------------------------
 21232                                  
 21233                                  int0C:
 21234 00000087 EB10                    	jmp	short entry_int0C_stk
 21235 00000089 00000000                old0C:	dd	0	
 21236 0000008D 4B42                    	dw	424Bh
 21237                                  firstflag0C:
 21238 0000008F 00                      	db	0
 21239 00000090 EB0C                    	jmp	short intret_0C
 21240 00000092 00<rep 7h>              	times	7 db 0
 21241                                  
 21242                                  entry_int0C_stk:
 21243 00000099 E8AB00                  	call	do_int_stacks
 21244 0000009C [8900]                  	dw	old0C
 21245                                  intret_0C:
 21246 0000009E CF                      	iret
 21247                                  
 21248                                  ; ----------------------------------------------------------------------
 21249                                  
 21250                                  int0D:
 21251 0000009F EB10                    	jmp	short entry_int0D_stk
 21252 000000A1 00000000                old0D:	dd	0	
 21253 000000A5 4B42                    	dw	424Bh
 21254                                  firstflag0D:
 21255 000000A7 00                      	db	0
 21256 000000A8 EB0C                    	jmp	short intret_0D
 21257 000000AA 00<rep 7h>              	times	7 db 0
 21258                                  
 21259                                  entry_int0D_stk:
 21260 000000B1 E89300                  	call	do_int_stacks
 21261 000000B4 [A100]                  	dw	old0D
 21262                                  intret_0D:
 21263 000000B6 CF                      	iret
 21264                                  
 21265                                  ; ----------------------------------------------------------------------
 21266                                  
 21267                                  int0E:
 21268 000000B7 EB10                    	jmp	short entry_int0E_stk
 21269 000000B9 00000000                old0E:	dd	0	
 21270 000000BD 4B42                    	dw	424Bh
 21271                                  firstflag0E:
 21272 000000BF 00                      	db	0
 21273 000000C0 EB0C                    	jmp	short intret_0E
 21274 000000C2 00<rep 7h>              	times	7 db 0
 21275                                  
 21276                                  entry_int0E_stk:
 21277 000000C9 E87B00                  	call	do_int_stacks
 21278 000000CC [B900]                  	dw	old0E
 21279                                  intret_0E:
 21280 000000CE CF                      	iret
 21281                                  
 21282                                  ; ----------------------------------------------------------------------
 21283                                  
 21284                                  int72:
 21285 000000CF EB10                    	jmp	short entry_int72_stk
 21286 000000D1 00000000                old72:	dd	0	
 21287 000000D5 4B42                    	dw	424Bh
 21288                                  firstflag72:
 21289 000000D7 00                      	db	0
 21290 000000D8 EB0C                    	jmp	short intret_72
 21291 000000DA 00<rep 7h>              	times	7 db 0
 21292                                  
 21293                                  entry_int72_stk:
 21294 000000E1 E86300                  	call	do_int_stacks
 21295 000000E4 [D100]                  	dw	old72
 21296                                  intret_72:
 21297 000000E6 CF                      	iret
 21298                                  
 21299                                  ; ----------------------------------------------------------------------
 21300                                  
 21301                                  int73:
 21302 000000E7 EB10                    	jmp	short entry_int73_stk
 21303 000000E9 00000000                old73:	dd	0	
 21304 000000ED 4B42                    	dw	424Bh
 21305                                  firstflag73:
 21306 000000EF 00                      	db	0
 21307 000000F0 EB0C                    	jmp	short intret_73
 21308 000000F2 00<rep 7h>              	times	7 db 0
 21309                                  
 21310                                  entry_int73_stk:
 21311 000000F9 E84B00                  	call	do_int_stacks
 21312 000000FC [E900]                  	dw	old73
 21313                                  intret_73:
 21314 000000FE CF                      	iret
 21315                                  
 21316                                  ; ----------------------------------------------------------------------
 21317                                  
 21318                                  int74:
 21319 000000FF EB10                    	jmp	short entry_int74_stk
 21320 00000101 00000000                old74:	dd	0	
 21321 00000105 4B42                    	dw	424Bh
 21322                                  firstflag74:
 21323 00000107 00                      	db	0
 21324 00000108 EB0C                    	jmp	short intret_74
 21325 0000010A 00<rep 7h>              	times	7 db 0
 21326                                  
 21327                                  entry_int74_stk:
 21328 00000111 E83300                  	call	do_int_stacks
 21329 00000114 [0101]                  	dw	old74
 21330                                  intret_74:
 21331 00000116 CF                      	iret
 21332                                  
 21333                                  ; ----------------------------------------------------------------------
 21334                                  
 21335                                  int76:
 21336 00000117 EB10                    	jmp	short entry_int76_stk
 21337 00000119 00000000                old76:	dd	0	
 21338 0000011D 4B42                    	dw	424Bh
 21339                                  firstflag76:
 21340 0000011F 00                      	db	0
 21341 00000120 EB0C                    	jmp	short intret_76
 21342 00000122 00<rep 7h>              	times	7 db 0
 21343                                  
 21344                                  entry_int76_stk:
 21345 00000129 E81B00                  	call	do_int_stacks
 21346 0000012C [1901]                  	dw	old76
 21347                                  intret_76:
 21348 0000012E CF                      	iret
 21349                                  
 21350                                  ; ----------------------------------------------------------------------
 21351                                  
 21352                                  int77:
 21353 0000012F EB10                    	jmp	short entry_int77_stk
 21354 00000131 00000000                old77:	dd	0	
 21355 00000135 4B42                    	dw	424Bh
 21356                                  firstflag77:
 21357 00000137 00                      	db	0
 21358 00000138 EB0C                    	jmp	short intret_77
 21359 0000013A 00<rep 7h>              	times	7 db 0
 21360                                  
 21361                                  entry_int77_stk:
 21362 00000141 E80300                  	call	do_int_stacks
 21363 00000144 [3101]                  	dw	old77
 21364                                  intret_77:
 21365 00000146 CF                      	iret
 21366                                  
 21367                                  ; ----------------------------------------------------------------------
 21368                                  
 21369                                  ;********************************************************************
 21370                                  ;common routines
 21371                                  ;********************************************************************
 21372                                  
 21373                                  ; do interrupt stack switching. the fake return address holds
 21374                                  ; a pointer to the far-pointer of the actual interrupt
 21375                                  ; service routine
 21376                                  
 21377                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 21378                                  ; 21/03/2019 - Retro DOS v4.0
 21379                                  
 21380                                  ;allocbyte   equ 0
 21381                                  ;intlevel    equ 1
 21382                                  ;savedsp     equ 2
 21383                                  ;savedss     equ 4
 21384                                  ;newsp       equ 6
 21385                                  
 21386                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 SYSINIT)
 21387                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:0147h)
 21388                                  
 21389                                  do_int_stacks:
 21390 00000147 50                      	push	ax
 21391 00000148 55                      	push	bp
 21392 00000149 06                      	push	es
 21393 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 21394 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 21395 00000154 B001                    	mov	al,allocated ; 1
 21396                                  	; 21/10/2022
 21397                                  	;xchg	[es:bp+allocbyte],al 
 21398                                  	; 11/12/2022
 21399 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 21400 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 21401 0000015C 7551                    	jne	short notfree02
 21402                                  
 21403 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 21404                                  
 21405                                  found02:
 21406 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 21407 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 21408                                  
 21409 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 21410                                  
 21411 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 21412                                  	; 21/10/2022
 21413                                  	;mov	bp,[es:bp+6]
 21414                                  	; 11/12/2022
 21415                                  	;cmp	[es:bp+0],ax	
 21416 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 21417 00000176 7544                    	jne	short foundbad02
 21418                                  
 21419                                  	; 02/07/2023 (MSDOS 6.21 SYSINIT code)
 21420 00000178 8CC0                    	mov	ax,es			; point ss,sp to the new stack
 21421 0000017A 8EC5                    	mov	es,bp
 21422 0000017C 89E5                    	mov	bp,sp
 21423 0000017E 8B6E06                  	mov	bp,[bp+6]
 21424 00000181 8ED0                    	mov	ss,ax
 21425 00000183 8CC4                    	mov	sp,es
 21426 00000185 8EC0                    	mov	es,ax
 21427 00000187 2E8B6E00                	mov	bp,[cs:bp]
 21428                                  
 21429                                  	; 21/10/2022 (MSDOS 5.0 SYSINIT code)
 21430                                  	;push    bp
 21431                                  	;mov     bp,sp
 21432                                  	;mov     ax,[bp+8]
 21433                                  	;pop     bp
 21434                                  	;push    es
 21435                                  	;pop     ss
 21436                                  	;mov     sp,bp
 21437                                  	;mov     bp,ax
 21438                                  	; 11/12/2022
 21439                                  	;;mov	bp,[cs:bp+0]	
 21440                                  	;mov	bp,[cs:bp]	
 21441                                  
 21442 0000018B 9C                      	pushf				; go execute the real interrupt handler
 21443                                  	; 11/12/2022
 21444 0000018C 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 21445                                  	; 21/10/2022
 21446                                  	;call	far [cs:bp+0]
 21447                                  
 21448 00000190 89E5                    	mov	bp,sp			; retrieve the table offset for us
 21449                                  	; 11/12/2022
 21450 00000192 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 21451                                  	; 21/10/2022
 21452                                  	;mov	bp,[es:bp+0]
 21453 00000196 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 21454 0000019A 268B6602                	mov	sp,[es:bp+savedsp]
 21455                                  
 21456                                  	; 11/12/2022
 21457                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 21458                                  	; 21/10/2022
 21459 0000019E 26C6460000              	mov	byte [es:bp],free ; 0
 21460 000001A3 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 21461                                  
 21462 000001A8 07                      	pop	es
 21463 000001A9 5D                      	pop	bp			; saved on entry
 21464 000001AA 58                      	pop	ax			; saved on entry
 21465 000001AB 83C402                  	add	sp,2
 21466 000001AE CF                      	iret				; done with this interrupt
 21467                                  
 21468                                  notfree02:
 21469 000001AF 3C01                    	cmp	al,allocated		; error flag
 21470 000001B1 7404                    	je	short findnext02	;  no, continue
 21471                                  	; 11/12/2022
 21472                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 21473                                  	; 21/10/2022
 21474 000001B3 26864600                	xchg	[es:bp],al
 21475                                  
 21476                                  findnext02:
 21477 000001B7 E81200                  	call	longpath
 21478 000001BA EBA8                    	jmp	short found02
 21479                                  
 21480                                  foundbad02:
 21481 000001BC 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 21482 000001C1 72F4                    	jc	short findnext02
 21483 000001C3 89C5                    	mov	bp,ax			; flag this entry
 21484                                  	; 11/12/2022
 21485                                  	;mov	byte [es:bp+allocbyte],clobbered
 21486                                  	; 21/10/2022
 21487 000001C5 26C6460003              	mov	byte [es:bp],clobbered ; 3
 21488 000001CA EBEB                    	jmp	short findnext02	; keep looking
 21489                                  
 21490                                  ; ----------------------------------------------------------------------
 21491                                  
 21492                                  ; Common routines
 21493                                  
 21494                                  longpath:
 21495                                  	; 21/03/2019
 21496 000001CC 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 21497                                  lploopp:
 21498                                  	; 11/12/2022
 21499                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 21500                                  	; 21/10/2022
 21501 000001D1 26807E0000              	cmp	byte [es:bp],free
 21502 000001D6 7512                    	jne	short inuse		;  no, try next one
 21503                                  
 21504 000001D8 B001                    	mov	al,allocated
 21505                                  	; 11/12/2022
 21506                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 21507                                  	; 21/10/2022
 21508 000001DA 26864600                	xchg	[es:bp],al
 21509 000001DE 3C00                    	cmp	al,free 		; is it still free?
 21510 000001E0 7414                    	je	short found		;  yes, go use it
 21511                                  
 21512 000001E2 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 21513 000001E4 7404                    	je	short inuse		;  no, check the next one
 21514                                  
 21515                                  	; 11/12/2022
 21516                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 21517                                  	; 21/10/2022
 21518 000001E6 26884600                	mov	[es:bp],al
 21519                                  inuse:
 21520 000001EA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 21521 000001EF 7406                    	je	short fatal
 21522 000001F1 83ED08                  	sub	bp,entrysize
 21523 000001F4 EBDB                    	jmp	short lploopp
 21524                                  found:
 21525 000001F6 C3                      	retn
 21526                                  fatal:
 21527 000001F7 1E                      	push	ds
 21528 000001F8 B800F0                  	mov	ax,0F000h		;look at the model byte
 21529 000001FB 8ED8                    	mov	ds,ax
 21530 000001FD 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 21531 00000202 1F                      	pop	ds
 21532 00000203 7504                    	jne	short skip_nmis
 21533                                  
 21534 00000205 B007                    	mov	al,07h			; disable pc convertible nmis
 21535 00000207 E672                    	out	72h,al
 21536                                  
 21537                                  skip_nmis:
 21538 00000209 FA                      	cli				; disable and mask
 21539 0000020A B0FF                    	mov	al,0FFh			;   all other ints
 21540 0000020C E621                    	out	021h,al
 21541 0000020E E6A1                    	out	0A1h,al
 21542                                  
 21543 00000210 8CCE                    	mov	si,cs
 21544 00000212 8EDE                    	mov	ds,si
 21545 00000214 BE[3B02]                	mov	si,fatal_msg
 21546                                  ;SR;
 21547                                  ;   We set all foci to this VM to issue the stack failure message
 21548                                  ;
 21549 00000217 50                      	push	ax
 21550 00000218 1E                      	push	ds
 21551                                  	;;mov	ax,Bios_Data ; 0070h
 21552                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 21553                                  	; 21/10/2022
 21554 00000219 B87000                  	mov	ax,DOSBIODATASEG
 21555 0000021C 8ED8                    	mov	ds,ax
 21556                                  
 21557                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 21558 0000021E F606[1208]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 21559 00000223 1F                      	pop	ds
 21560 00000224 58                      	pop	ax
 21561 00000225 7405                    	jz	short fatal_loop	; win386 not present, continue
 21562                                  
 21563                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 21564                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 21565                                  	; 21/10/2022
 21566 00000227 9A[1308]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 21567                                  ;
 21568                                  ;SR; We do not bother about the returned status of this call. 
 21569                                  ;
 21570                                  fatal_loop:
 21571 0000022C AC                      	lodsb
 21572 0000022D 3C24                    	cmp	al,'$'
 21573 0000022F 7408                    	je	short fatal_done
 21574                                  
 21575 00000231 B307                    	mov	bl,7
 21576 00000233 B40E                    	mov	ah,14
 21577 00000235 CD10                    	int	10h			; whoops, this enables ints
 21578 00000237 EBF3                    	jmp	short fatal_loop
 21579                                  
 21580                                  fatal_done:
 21581 00000239 EBFE                    	jmp	short fatal_done
 21582                                  
 21583                                  
 21584                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 21585                                  ; ----------------------------------------------------------------------
 21586                                  ;	include msbio.cl5		; fatal stack error message
 21587                                  
 21588                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 21589                                  
 21590                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 21591                                  ; ----------------------------------------------------------------------
 21592                                  ; 04/06/2018 - Retro DOS v3.0
 21593                                  
 21594                                  fatal_msg:
 21595 0000023B 0D0A                    	db	0Dh,0Ah
 21596 0000023D 070D0A                  	db	7,0Dh,0Ah
 21597 00000240 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 21597 00000249 737461636B206F7665-
 21597 00000252 72666C6F770D0A     
 21598 00000259 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 21598 00000262 6C7465640D0A24     
 21599                                  
 21600                                  endstackcode:
 21601                                  
 21602                                  ; ----------------------------------------------------------------------
 21603                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 21604                                  ; ----------------------------------------------------------------------
 21605                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 21606                                  
 21607                                  ; 22/03/2019 - Retro DOS v4.0
 21608                                  
 21609                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 21610                                  
 21611                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 21612                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 21613                                  
 21614                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21615                                  ; ----------------------------------------------------------------------
 21616                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 21617                                  
 21618                                  ; SYSINIT:0269h (MSDOS 6.22 IO.SYS, SYSINIT segment, offset: 0269h)
 21619                                  
 21620                                  ; 29/12/2023- Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 21621                                  ; ----------------------------------------------------------------------
 21622                                  ; SYSINITSEG:0269h (PCDOS 7.1 IBMBIO.COM, SYSINIT segment, offset: 0269h)
 21623                                  
 21624                                  SYSINIT:	
 21625 00000269 E9AD01                          JMP	GOINIT
 21626                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 21627                                  
 21628                                  ; ----------------------------------------------------------------------
 21629                                  
 21630                                  struc DDHighInfo
 21631 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 21632 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 21633 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 21634                                  endstruc
 21635                                  
 21636                                  ; 22/03/2019 - Retro DOS v4.0
 21637                                  
 21638 0000026C 00                      runhigh: db	0
 21639                                  
 21640                                  ; 02/11/2022
 21641                                  ;align 4
 21642                                  
 21643                                  DOSINFO: 
 21644 0000026D 00000000                	dd	0	; address of the DOS Sysini Variables
 21645                                  ;MSDOS:
 21646                                  dos_temp_location: ; dword ; MSDOS 6.0
 21647                                  dosinit:		; MSDOS 6.0
 21648 00000271 0000                    	dw	0
 21649                                  
 21650                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21651                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 21652                                  ;	dw	0
 21653                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 21654                                  
 21655                                  CURRENT_DOS_LOCATION:
 21656 00000273 0000                    	dw	0
 21657                                  
 21658                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 21659                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 21660                                  
 21661                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21662                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 21663                                  ;DOSSIZE equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 21664                                  ; 30/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 21665                                  ; 03/09/2023 (PCDOS 7.1 IBMDOS.COM size is 42566 bytes, 04/12/2003)
 21666                                  DOSSIZE equ	0B000h	; (PCDOS 7.1 - SYSINIT)
 21667                                  
 21668                                  DEVICE_LIST:
 21669 00000275 00000000                	dd	0
 21670                                  
 21671                                  ; 04/06/2018 - Retro DOS v3.0
 21672                                  ; 28/03/2018
 21673                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 21674                                  ;
 21675                                  sysi_country:	
 21676 00000279 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 21677                                  
 21678                                  ; MSDOS 6.0
 21679 0000027D 00000000                dos_segreinit:	dw	0,0	; room for dword
 21680                                  
 21681 00000281 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 21682 00000283 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 21683                                  
 21684 00000285 0000                    def_php:	dw	0
 21685                                  
 21686                                  ; M022--
 21687                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 21688                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 21689                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 21690                                  ;  the new home.
 21691                                  
 21692                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 21693                                  ; 21/10/2022
 21694                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 21695                                  
 21696                                  ; 22/10/2022
 21697                                  seg_reinit_ptr:	; label dword
 21698 00000287 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 21699                                  temp_bcode_seg:
 21700                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 21701                                  		; 22/10/2022
 21702 00000289 0203                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS
 21703                                  				; 364h for PCDOS 7.1 IBMBIO.COM - 29/12/2023
 21704                                  fake_floppy_drv:
 21705 0000028B 00                      		db	0	; set to 1 if this machine
 21706                                  				; does not have any floppies!!!
 21707                                  
 21708                                  ; Internal Stack Parameters
 21709                                  
 21710 0000028C 0900                    stack_count:	dW	defaultcount ; 9
 21711 0000028E 8000                    stack_size:	dw	defaultsize  ; 128
 21712 00000290 00000000                stack_addr:	dd	0
 21713                                  
 21714                                  ; 05/06/2018 - Retro DOS v3.0
 21715                                  
 21716                                  ; various default values
 21717                                  
 21718 00000294 0100                    MEMORY_SIZE:	dw	1
 21719                                  
 21720                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 21721                                  
 21722 00000296 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)
 21723 00000298 00                      DEFAULT_DRIVE:	db	0	; initialized by ibminit.
 21724 00000299 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 21725 0000029B 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 21726 0000029D 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 21727                                  
 21728 0000029F 08                      FILES:	db	8	; enough files for pipe
 21729 000002A0 04                      FCBS:	db	4	; performance for recycling
 21730 000002A1 00                      KEEP:	db	0	; keep original set
 21731 000002A2 05                      NUM_CDS: db	5	; 5 net drives
 21732                                  
 21733                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 21734                                  ;;CONFBOT: dw	0
 21735                                  ;;ALLOCLIM: dw	0
 21736                                  ;CONFBOT: ; 02/11/2022
 21737                                  ;top_of_cdss: dw 0
 21738                                  
 21739                                  ; 30/12/2022 - Retrodos v4.2 (MSDOS 6.21 SYSINIT)
 21740                                  ; (SYSINIT:02A3h)
 21741 000002A3 0000                    CONFBOT: dw	0
 21742 000002A5 0000                    ALLOCLIM: dw	0
 21743 000002A7 0000                    top_of_cdss: dw 0
 21744                                  
 21745                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 21746                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 21747                                  ;ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 21748                                  
 21749 000002A9 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 21750                                  
 21751                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 SYSINIT)
 21752                                  %if 0
 21753                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21754                                  ; (SYSINIT:02A9h)
 21755                                  
 21756                                  command_line:
 21757                                  	db	2,0
 21758                                  	db	'P'
 21759                                  	db	0
 21760                                  	times	124 db 0 ; db 124 dup(0)
 21761                                  
 21762                                  %endif
 21763                                  
 21764                                  ; (SYSINIT:0329h)
 21765 000002AD 00                      ZERO:	db	0
 21766 000002AE 00                      sepchr:	db	0
 21767 000002AF 0000                    linecount: dw	0			; line count in config.sys
 21768 000002B1 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 21769 000002B9 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 21770                                  
 21771 000002BB FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 21772 000002BC 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 21773                                  
 21774 000002BD 0000                    buf_prev_off:	dw	0
 21775                                  
 21776                                          ;IF      NOT NOEXEC
 21777                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 21778                                          ;ENDIF
 21779                                  
 21780                                  ; 29/12/2023
 21781                                  ; 01/05/2018
 21782                                  COMEXE:
 21783 000002BF 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 21784 000002C1 [BB4B]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 21785 000002C3 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 21786                                  				; SYSINIT segment (0544h for PCDOS 7.1 IBMBIO.COM)
 21787 000002C5 [9802]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 21788 000002C7 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 21789 000002C9 [AD02]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 21790 000002CB 0000                    		dw	0
 21791                                  
 21792                                  ; variables for install= command.
 21793                                  
 21794 000002CD 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 21795                                  					;  indicating the pass number
 21796                                  					; 0 - do scan for DOS=HIGH/LOW
 21797                                  					; 1 - load device drivers
 21798                                  					; 2 - was to load IFS
 21799                                  					;      now it is unused
 21800                                  					; 3 - do install=
 21801                                  					; >3 - nop
 21802 000002CE 0000                    install_flag:	dw	0
 21803                                  
 21804                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 21805                                  has_installed	equ	00000010b	; sysinit_base installed.
 21806                                  
 21807 000002D0 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 21808 000002D2 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 21809 000002D6 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 21810 000002DA 0000                    checksum:	dw	0		; used by sum_up
 21811                                  
 21812 000002DC 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 21813 000002F0 00                      ldexec_line:	db	0		;# of parm characters
 21814 000002F1 20                      ldexec_start:	db	' '
 21815 000002F2 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 21816                                  
 21817                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 21818                                  
 21819                                  instexe:
 21820 00000342 0000                    iexec.environ:	dw	0		; seg addr of environment
 21821 00000344 [F002]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 21822 00000346 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 21823                                  				; SYSINIT segment (0544h for PCDOS 7.1 IBMBIO.COM)
 21824 00000348 [DC02]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 21825 0000034A 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.22 IO.SYS)
 21826 0000034C [DC02]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 21827 0000034E 0000                    		dw	0
 21828                                  
 21829                                  ; variables for comment=
 21830                                  
 21831 00000350 00                      com_level:	db	0		; level of " " in command line
 21832 00000351 00                      cmmt:		db	0		; length of comment string token
 21833 00000352 00                      cmmt1:		db	0		; token
 21834 00000353 00                      cmmt2:		db	0		; token
 21835 00000354 00                      cmd_indicator:	db	0
 21836 00000355 00                      donotshownum:	db	0
 21837                                  
 21838 00000356 0000                    count:		dw	0
 21839 00000358 0000                    org_count:	dw	0
 21840 0000035A 0000                    chrptr:		dw	0
 21841 0000035C 0000                    cntryfilehandle: dw	0
 21842 0000035E 0000                    old_area:	dw	0
 21843 00000360 0000                    impossible_owner_size: dw 0		; paragraph
 21844                                  
 21845                                  bucketptr: ; label dword
 21846                                  bufptr:	   ; label dword		; leave this stuff in order!
 21847 00000362 0000                    memlo:	dw	0
 21848                                  prmblk:	   ; label word
 21849 00000364 0000                    memhi:	dw	0
 21850 00000366 0000                    ldoff:	dw	0
 21851 00000368 0000                    area:	dw	0
 21852                                  
 21853                                  ; 29/12/2023 - PCDOS 7.1 IBMBIO.COM - SYSINIT:036Ah
 21854 0000036A 0000                    prev_memhi:	dw 0
 21855 0000036C 0000                    prev_alloclim:	dw 0
 21856 0000036E 00                      dosdata_umb:	db 0
 21857                                  
 21858                                  ; Following is the request packet used to call INIT routines for 
 21859                                  ; all device drivers. Some fields may be accessed individually in
 21860                                  ; the code, and hence have individual labels, but they should not
 21861                                  ; be separated.
 21862                                  
 21863 0000036F 19                      packet:	db	25			; PCDOS 7.1 IBMBIO.COM
 21864                                  	;db	24			; was 22
 21865 00000370 00                      	db	0
 21866 00000371 00                      	db	0			; initialize code
 21867 00000372 0000                    	dw	0
 21868 00000374 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 21869                                  
 21870 0000037C 00                      unitcount:	db	0
 21871 0000037D 00000000                break_addr:	dd	0
 21872 00000381 00000000                bpb_addr:	dd	0
 21873                                  drivenumber:	; 22/10/2022
 21874 00000385 00                      devdrivenum:	db	0 
 21875 00000386 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 21876                                  
 21877                                  ; end of request packet
 21878                                  
 21879                                  ;drivenumber:	db	0  ; 22/03/2019
 21880                                  
 21881                                  toomanydrivesflag:
 21882 00000388 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 21883 00000389 90                      align 2
 21884                                  
 21885                                  BCodeSeg:	; 21/10/2022
 21886 0000038A 0203                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 21887                                  			; 0364h for PCDOS 7.1 IBMBIO.COM - 29/12/2023
 21888                                  	;dw	Bios_Code  ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 21889                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 21890                                  
 21891                                  ; 30/12/2022
 21892                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0387h
 21893                                  ;
 21894                                  ; Magicbackdoor: dd 0
 21895                                  ; NullBackdoor: 
 21896                                  ;		retf
 21897                                  
 21898                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21899                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 21900                                  ; 19/04/2019
 21901                                  _timer_lw_:
 21902 0000038C 0000                    	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 21903                                  
 21904                                  ; 29/12/2023 - Retro DOS v5.0
 21905                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:038Eh
 21906                                  
 21907 0000038E 00                      F5_key:	db 0
 21908 0000038F 00                      F8_key:	db 0
 21909 00000390 00000000                MagicBackdoor:	dd 0
 21910                                  NullBackdoor:
 21911 00000394 CB                      		retf
 21912                                  
 21913                                  ;SR;
 21914                                  ; This is the communication block between the DOS and the BIOS. It starts at
 21915                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 21916                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 21917                                  ;is passed to DOS as part of the DOSINIT call.
 21918                                  ;
 21919                                  
 21920                                  BiosComBlock:
 21921                                  	;dd	Bios_Data:SysinitPresent 
 21922                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 21923 00000395 [DD07]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 21924                                  	;dw	KERNEL_SEGMENT ; 0070h
 21925                                  	; 21/10/2022
 21926 00000397 7000                    	dw	DOSBIODATASEG ; 0070h
 21927                                  
 21928                                  ;align 2
 21929                                  
 21930                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 21931                                  	; 30/12/2022 - (MSDOS 6.21 IO.SYS, SYSINIT:0392h)
 21932                                  tempstack:	
 21933 00000399 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 21934                                  
 21935                                  ; ----------------------------------------------------------------------------
 21936                                  
 21937                                  	; 29/12/2023 - Retro DOS v5.0
 21938                                  	; 22/10/2022 - Retro DOS v4.0
 21939                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 21940                                  GOINIT:		; (MSDOS 6.22 IO.SYS, SYSINIT:0412h)
 21941                                  		; (PCDOS 7.1 IBMBIO.COM, SYSINIT:0419h)
 21942                                  	; 12/12/2023
 21943 00000419 0E                      	push	cs
 21944 0000041A 1F                      	pop	ds
 21945                                  
 21946                                  	; 12/12/2022
 21947                                  	; 22/03/2019 - Retro DOS v4.0
 21948                                  	; 06/07/2018
 21949                                  	; 04/06/2018 - Retro DOS v3.0
 21950                                  ; before doing anything else, let's set the model byte
 21951 0000041B B4C0                    	mov	ah,0C0h 		; get system configuration
 21952 0000041D CD15                    	int	15h			; 
 21953 0000041F 7214                    	jc	short no_rom_config
 21954                                  
 21955                                  	;cmp	ah,0			; double check
 21956                                  	;jne	short no_rom_config
 21957                                  	; 03/09/2023
 21958 00000421 08E4                    	or	ah,ah
 21959 00000423 7510                    	jnz	short no_rom_config
 21960                                  
 21961                                  	; 12/12/2023 ; *
 21962                                  	; ds = cs
 21963                                  
 21964 00000425 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 21965                                  	;mov	[cs:sys_model_byte],al 
 21966 00000429 A2[BB02]                	mov	[sys_model_byte],al ; *
 21967 0000042C 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 21968                                  	;mov	[cs:sys_scnd_model_byte],al
 21969 00000430 A2[BC02]                	mov	[sys_scnd_model_byte],al ; *
 21970                                  	;jmp	short SYSIN
 21971                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21972 00000433 EB29                    	jmp	short move_myself
 21973                                  
 21974                                  no_rom_config:				; Old ROM
 21975                                  	; 12/12/2023
 21976                                  	;mov	ax,0F000h
 21977                                  	;mov	ds,ax
 21978                                  	;mov	al,[0FFFEh]
 21979                                  	;mov	[cs:sys_model_byte],al	; set the model byte.
 21980                                  	; 12/12/2023
 21981                                  	; ds = cs
 21982 00000435 B800F0                  	mov	ax,0F000h
 21983 00000438 8EC0                    	mov	es,ax
 21984 0000043A 26A0FEFF                	mov	al,[es:0FFFEh]
 21985 0000043E A2[BB02]                	mov	[sys_model_byte],al	; set the model byte.
 21986                                  	
 21987                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 21988                                  ; execute the equipment determination interrupt and then
 21989                                  ; check the returned value to see if we have any floppy drives
 21990                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 21991                                  ; see the at tech ref bios listings for help on the equipment
 21992                                  ; flag interrupt (11h)	
 21993                                  
 21994                                  	; 22/10/2022
 21995                                  ;check_for_fake_floppy:			; entry point for rom_config above
 21996 00000441 CD11                    	int	11h			; check equipment flag
 21997                                  
 21998                                  	; 29/12/2023 - Retro DOS v5.0
 21999                                  	;jmp	short check_for_fake_floppy
 22000                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0446h
 22001                                  	;db	52h	; 'RPS' sign
 22002                                  	;db	50h
 22003                                  	;db	53h
 22004                                  
 22005                                  check_for_fake_floppy:
 22006                                  	; 29/12/2023
 22007                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0449h
 22008                                  	;or	ax, 1		; (nonsense! this may be overwritten/disabled
 22009                                  	;			; by using 'RPS' sign position)
 22010                                  	;			;		 03/07/2023 - Erdogan Tan
 22011                                  	;test	ax, 1		; have any floppies?
 22012                                  
 22013                                  	; 12/12/2022
 22014 00000443 A801                    	test	al,1		
 22015                                  	;test	ax,1			; have any floppies?
 22016 00000445 7517                    	jnz	short move_myself	; yes,normal system
 22017                                  
 22018                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 22019                                  ; whether it is an old ROM BIOS or a new one
 22020                                  ;
 22021                                  ; WARNING !!!
 22022                                  ;
 22023                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 22024                                  ; here will require an equivalent modification in MSINIT.ASM also
 22025                                  
 22026                                  	; 12/12/2023
 22027                                  	;push	es  ; not necessary
 22028                                  
 22029 00000447 30C9                    	xor	cl,cl	
 22030 00000449 B408                    	mov	ah,8			; get disk parameters
 22031 0000044B B200                    	mov	dl,0			; of drive 0
 22032 0000044D CD13                    	int	13h
 22033                                  
 22034                                  	;pop	es  ; 12/12/2023	
 22035                                  
 22036 0000044F 720D                    	jc	short move_myself	; if error lets assume that the
 22037                                  					;  ROM BIOS lied
 22038                                  	;cmp	cl,0			; double check (max sec no cannot be 0)
 22039                                  	;je	short move_myself
 22040                                  	; 03/09/2023
 22041 00000451 08C9                    	or	cl,cl
 22042 00000453 7409                    	jz	short move_myself
 22043                                  
 22044 00000455 08D2                    	or	dl,dl			; number of flp drvs == 0?
 22045 00000457 7505                    	jnz	short move_myself	; no
 22046                                  
 22047                                  	;mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 22048                                  	; 12/12/2023
 22049                                  	; ds = cs
 22050 00000459 C606[8B02]01            	mov	byte [fake_floppy_drv],1 ; set fake flag.
 22051                                  
 22052                                  move_myself:
 22053                                  	; 12/12/2023
 22054                                  	;cld	; not necessary		; set up move
 22055                                  	;xor	si,si
 22056                                  	;mov	di,si
 22057                                  
 22058                                  	; 12/12/2023
 22059                                  	; ds = cs
 22060                                  	; 12/12/2022
 22061                                  	;push	cs
 22062                                  	;pop	ds
 22063                                  
 22064                                  	;mov	cx,[cs:MEMORY_SIZE]
 22065 0000045E 8B0E[9402]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 22066                                  
 22067                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 22068                                  ;;;	if	msver
 22069                                  ;	cmp	cx,1		; 1 means do scan
 22070                                  ;	jnz	short noscan
 22071                                  ;	mov	cx,2048		; start scanning at 32k boundary
 22072                                  ;	xor	bx,bx
 22073                                  ;
 22074                                  ;memscan:inc	cx
 22075                                  ;	jz	short setend
 22076                                  ;	mov	ds,cx
 22077                                  ;	mov	al,[bx]
 22078                                  ;	not	al
 22079                                  ;	mov	[bx],al
 22080                                  ;	cmp	al,[bx]
 22081                                  ;	not	al
 22082                                  ;	mov	[bx],al
 22083                                  ;	jz	short memscan
 22084                                  ;setend:
 22085                                  ;	mov	cs:[memory_size],cx
 22086                                  ;;;	endif
 22087                                  
 22088                                  ;noscan: 				; cx is mem size in para
 22089                                  ;;
 22090                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 22091                                  ;;		  before we try to run.
 22092                                  ;;	       b) in any case, we should check for sufficient memory and give
 22093                                  ;;		  an appropriate error diagnostic if there isn't enough
 22094                                  ;
 22095                                  ;	push	cs
 22096                                  ;	pop	ds
 22097                                  ;
 22098                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 22099                                  ;;	  that way it would be easier to slide them down home in a minimal
 22100                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 22101                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 22102                                  ;;	  temporary home and the final one.  the problem with doing that
 22103                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 22104                                  ;
 22105                                  ;	dec	cx			; one para for an arena at end of mem
 22106                                  ;					; in case of UMBs
 22107                                  
 22108                                  	; 22/10/2022
 22109                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 22110                                  
 22111                                  	; 12/12/2022
 22112                                  	;push	cs
 22113                                  	;pop	ds
 22114                                  
 22115 00000462 49                      	dec	cx
 22116                                  
 22117                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 22118                                  
 22119 00000463 31DB                    	xor	bx,bx
 22120 00000465 8EC3                    	mov	es,bx
 22121                                  	;mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 22122                                  	;mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 22123                                  	; 29/09/2023
 22124 00000467 26C41EBC00              	les	bx,[es:(2Fh*4)]
 22125 0000046C 26817F035250            	cmp	word [es:bx+3],'RP'
 22126 00000472 751B                    	jne	short NoRPL
 22127 00000474 26807F054C              	cmp	byte [es:bx+5],'L'
 22128 00000479 7514                    	jne	short NoRPL
 22129                                  
 22130 0000047B 89CA                    	mov	dx,cx			; get TOM into DX
 22131 0000047D 52                      	push	dx
 22132 0000047E B8064A                  	mov	ax,4A06h
 22133                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 22134 00000481 CD2F                    	int	2Fh			; Get new TOM from any RPL
 22135 00000483 58                      	pop	ax
 22136 00000484 89D1                    	mov	cx,dx
 22137 00000486 39C2                    	cmp	dx,ax
 22138 00000488 7405                    	je	short NoRPL
 22139                                  	
 22140                                  	; 11/12/2022
 22141                                  	; ds = cs
 22142 0000048A 8916[9602]              	mov	[RPLMemTop],dx
 22143                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22144                                  	;mov	[cs:RPLMemTop],dx
 22145                                  	
 22146 0000048E 49                      	dec	cx
 22147                                  NoRPL:
 22148 0000048F B8[1054]                	mov	ax,SI_end		; need this much room for sysinit
 22149                                  					; (SI_end == sysinit code size)
 22150                                  					; 03/09/2023
 22151                                  					; (58A0h for MSDOS 6.21 IO.SYS)
 22152                                  					; (5B40h for PCDOS 7.1 IBMBIO.COM)
 22153 00000492 E80509                  	call	off_to_para
 22154 00000495 29C1                    	sub	cx,ax
 22155                                  
 22156                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 22157                                  ; code above sysinit in memory
 22158                                  ;
 22159 00000497 81E9000B                	sub	cx,DOSSIZE/16 ; (0A00h)	; leave this much room for DOS
 22160                                  			      ; (0B00h) ; (PCDOS 7.1 IBMBIO.COM) -03/09/2023-	
 22161                                  
 22162 0000049B B8701D                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 22163                                  					; (1A70h for MSDOS 6.21 IO.SYS)
 22164                                  					; 03/09/2023
 22165                                  					; (1E00h for PCDOS 7.1 IBMBIO.COM)
 22166 0000049E E8F908                  	call	off_to_para		; leave this much room for BIOS code
 22167 000004A1 29C1                    	sub	cx,ax
 22168 000004A3 8EC1                    	mov	es,cx			; segment where sysinit will be located
 22169                                  
 22170                                  	; 12/12/2023
 22171 000004A5 FC                      	cld	; not necessary		; set up move
 22172 000004A6 31F6                    	xor	si,si
 22173 000004A8 89F7                    	mov	di,si
 22174                                  
 22175 000004AA B9[1054]                	mov	cx,SI_end		; (sysinit code size)
 22176 000004AD D1E9                    	shr	cx,1			; divide by 2 to get words
 22177 000004AF F3A5                    	rep	movsw			; relocate sysinit
 22178                                  
 22179 000004B1 06                      	push	es			; push relocated segment
 22180 000004B2 B8[B704]                	mov	ax,SYSIN
 22181 000004B5 50                      	push	ax			; push relocated entry point
 22182                                  
 22183 000004B6 CB                      	retf				; far jump to relocated sysinit
 22184                                  
 22185                                  ; =============== S U B R O U T I N E ========================================
 22186                                  
 22187                                  ; 30/12/2023
 22188                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:04CEh
 22189                                  %if 0
 22190                                  get_cpu_type:
 22191                                  	pushf
 22192                                  	push	bx
 22193                                  	xor	bx,bx
 22194                                  	xor	ax,ax
 22195                                  	push	ax
 22196                                  	popf
 22197                                  	pushf
 22198                                  	pop	ax
 22199                                  	and	ax,0F000h
 22200                                  	cmp	ax,0F000h
 22201                                  	jz	short cpu_8086
 22202                                  	mov	ax,0F000h
 22203                                  	push	ax
 22204                                  	popf
 22205                                  	pushf
 22206                                  	pop	ax
 22207                                  	and	ax,0F000h
 22208                                  	jz	short cpu_286
 22209                                  cpu_386:
 22210                                  	inc	bx
 22211                                  cpu_286:
 22212                                  	inc	bx
 22213                                  cpu_8086:
 22214                                  	mov	ax,bx
 22215                                  	pop	bx
 22216                                  	popf
 22217                                  	retn
 22218                                  %endif
 22219                                  
 22220                                  ; ----------------------------------------------------------------------------
 22221                                  
 22222                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 22223                                  
 22224                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 22225                                  	; (SYSINIT:0533h)
 22226                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 22227                                  	; (SYSINIT:04BFh)
 22228                                  	; 03/09/2023 - Retro DOS 4.2 (5.0 - Modified PCDOS 7.1 IBMBIO.COM)
 22229                                  	; (SYSINIT:04F3h)
 22230                                  SYSIN:
 22231                                  	; Retro DOS 5.0 - 30/12/2023
 22232                                  	; Retro DOS 4.0 - 22/03/2019
 22233                                  	; Retro DOS 2.0 - 25/02/2018
 22234                                  
 22235                                  	; 23/04/2019
 22236                                  	;;mov	ax,Bios_Data
 22237                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 22238                                  	; 21/10/2022
 22239 000004B7 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22240 000004BA 8ED8                    	mov	ds,ax
 22241                                  
 22242                                  	; 30/12/2023 - Retro DOS v5.0
 22243                                  	;;;
 22244                                  	;push	es
 22245                                  	;push	ax		; not needed (*) E.TAN - 03/07/2023
 22246                                  	;push	di
 22247                                  	
 22248                                  	;call	get_cpu_type	; determine if 386 system
 22249                                  	;
 22250                                  get_cpu_type:
 22251 000004BC 9C                      	pushf
 22252 000004BD 31C0                    	xor	ax,ax
 22253 000004BF 50                      	push	ax
 22254 000004C0 9D                      	popf
 22255 000004C1 9C                      	pushf
 22256 000004C2 58                      	pop	ax
 22257 000004C3 2500F0                  	and	ax,0F000h
 22258 000004C6 3D00F0                  	cmp	ax,0F000h
 22259 000004C9 740F                    	jz	short cpu_8086
 22260 000004CB B800F0                  	mov	ax,0F000h
 22261 000004CE 50                      	push	ax
 22262 000004CF 9D                      	popf
 22263 000004D0 9C                      	pushf
 22264 000004D1 58                      	pop	ax
 22265 000004D2 2500F0                  	and	ax,0F000h
 22266 000004D5 7402                    	jz	short cpu_286
 22267                                  cpu_386:
 22268 000004D7 29C0                    	sub	ax,ax
 22269                                  cpu_286:
 22270 000004D9 40                      	inc	ax
 22271                                  cpu_8086:	; ax = 0
 22272                                  	; 30/12/2023 - Retro DOS v5.0
 22273 000004DA 2EA2[B606]              	mov	[cs:cpu_type],al ; 07/04/2024
 22274 000004DE 9D                      	popf
 22275                                  	;
 22276                                  	;cmp	ax,2		; 0 = 8086, 1 = 286, 2 = 386
 22277 000004DF 3C02                    	cmp	al,2
 22278 000004E1 7512                    	jnz     short not_386_system
 22279 000004E3 FC                      	cld			; 80386
 22280 000004E4 1E                      	push	ds
 22281 000004E5 07                      	pop	es		; change A20 line on/off check code
 22282 000004E6 BF[4D07]                	mov	di,cpu386_cmpsd
 22283 000004E9 B8B904                  	mov	ax,04B9h	; mov cx,4 ; B90400
 22284 000004EC AB                      	stosw
 22285 000004ED B800F3                  	mov	ax,0F300h	; repz  ; F3
 22286 000004F0 AB                      	stosw
 22287 000004F1 B866A7                  	mov	ax,0A766h	; cmpsd ; 66A7
 22288 000004F4 AB                      	stosw
 22289                                  not_386_system:
 22290                                  	;pop	di
 22291                                  	;pop	ax
 22292                                  	;pop	es
 22293                                  	;;;
 22294                                  
 22295 000004F5 8C0E[DB07]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 22296 000004F9 C606[DD07]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 22297                                  
 22298                                  ; first move the MSDOS.SYS image up to a harmless place 
 22299                                  ; on top of our new sysinitseg
 22300                                  
 22301                                  	; 22/10/2022
 22302 000004FE B8[1054]                	mov	ax,SI_end		; how big is sysinitseg?
 22303 00000501 E89608                  	call	off_to_para
 22304 00000504 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 22305 00000506 01C8                    	add	ax,cx
 22306 00000508 8EC0                    	mov	es,ax
 22307                                  	
 22308 0000050A 31F6                    	xor	si,si
 22309 0000050C 89F7                    	mov	di,si
 22310                                  
 22311 0000050E 2E8E1E[7302]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 22312                                  
 22313                                  	;mov	ax,cs	
 22314                                  	;mov	ds,ax
 22315                                  
 22316                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 22317                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 22318                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 22319                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 22320                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 22321                                  
 22322                                  	; 22/10/2022
 22323 00000513 B90058                  	mov	cx,DOSSIZE/2 ; 5000h
 22324                                  			     ; 03/09/2023
 22325                                  			     ; 5800h (PCDOS 7.1)
 22326 00000516 F3A5                    	rep     movsw
 22327 00000518 2E8C06[7302]            	mov	[cs:CURRENT_DOS_LOCATION],es
 22328                                  
 22329                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 22330                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 22331                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 22332                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 22333                                  
 22334                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 22335                                  	;mov	ax,cs
 22336                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22337                                  	;mov	ds,ax
 22338                                  
 22339                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 22340                                  
 22341                                  ;	; 24/04/2019 
 22342                                  ;;ifndef ROMDOS
 22343                                  ;	mov	ax,[es:3] 		; get offset of dos
 22344                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 22345                                  ;	mov	[dosinit],ax		; that's the entry point offset
 22346                                  ;	call	off_to_para		; subtract this much from segment
 22347                                  ;	; 23/04/2019
 22348                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 22349                                  ;	sub	[FINAL_DOS_LOCATION],ax
 22350                                  ;;else
 22351                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 22352                                  ;;
 22353                                  ;;endif ; ROMDOS
 22354                                  
 22355                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 22356                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 22357                                  
 22358                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 22359                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 22360                                  
 22361                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22362                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 22363                                  	; 03/09/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 22364                                  	; (SYSINIT:04ECh for MSDOS 6.21 IO.SYS SYSINIT)
 22365                                  	; (SYSINIT:0540h for PCDOS 7.1 IBMBIO.COM SYSINIT)
 22366 0000051D A10300                  	mov	ax,[3]		; mov ax, word ptr ds:3
 22367                                  				; 30/12/2023
 22368                                  				; ax = 3F10h for IBMDOS 7.1 kernel
 22369                                  				;  (IBMDOS.SYS, offset 3)
 22370                                  
 22371 00000520 2EA3[7102]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 22372                                  	; 02/11/2022
 22373 00000524 E87308                  	call	off_to_para		; subtract this much from segment
 22374 00000527 2E2906[7302]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 22375                                  
 22376                                  	; Current DOSCODE start address = dword [dosinit]
 22377                                  
 22378                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 22379                                  ;; until it is determined whether it will be running in HIMEM or not.
 22380                                  
 22381                                  ;ifndef ROMDOS
 22382                                  
 22383                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 22384                                  
 22385                                  	; 22/10/2022
 22386 0000052C 8CC0                    	mov	ax,es
 22387 0000052E 05000B                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 22388 00000531 8EC0                    	mov	es,ax
 22389 00000533 2E8706[8902]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 22390 00000538 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 22391                                  
 22392                                  	;mov	si,BCODE_START ; mov si,30h
 22393                                  	; 09/12/2022
 22394 0000053A BE[3000]                	mov	si,BCODESTART
 22395                                  	; 02/11/2022
 22396 0000053D 89F7                    	mov	di,si
 22397                                  	; 30/12/2023
 22398                                  	;mov	cx,1E00h	; BCODE_END = (SYSINITSEG-DOSBIOCODESEG)*16
 22399                                  	;			; (544h-364h)*10h = 1E00h (for PCDOS 7.1 IBMBIO.COM)
 22400                                  	;mov	cx,BCODE_END	; mov cx,1A60h ; mov cx,1A70h ; 30/12/2022
 22401                                  	;sub	cx,si
 22402                                  	; 31/03/2024
 22403                                  	BCODESIZE equ BCODEEND-BCODESTART
 22404 0000053F B9401D                  	mov	cx,BCODESIZE
 22405 00000542 D1E9                    	shr	cx,1
 22406 00000544 F3A5                    	rep	movsw			; move Bios_Code into place
 22407                                  
 22408 00000546 8CC0                    	mov	ax,es			; tell it what segment it's in
 22409 00000548 2EFF1E[8702]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 22410                                  
 22411                                  ;endif	; not ROMDOS
 22412                                  
 22413                                  ; now call dosinit while it's in its temporary home
 22414                                  
 22415                                  	;mov	ax,cs
 22416                                  	;mov	ds,ax	 
 22417                                  
 22418                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 22419                                  
 22420                                  	; 22/10/2022
 22421                                  
 22422 0000054D 2EC43E[9503]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 22423                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 22424 00000552 2EC536[7502]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 22425                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 22426                                  
 22427 00000557 2E8B16[9402]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 22428                                  
 22429 0000055C FA                      	cli
 22430 0000055D 8CC8                    	mov	ax,cs
 22431 0000055F 8ED0                    	mov	ss,ax
 22432                                  
 22433                                  ; 30/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 22434                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 22435                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 22436                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 22437                                  					  ; 586h in PCDOS 7.1 IBMBIO.COM SYSINIT
 22438                                  ;SYSINIT:0532h: 
 22439                                  
 22440                                  ; 22/10/2022
 22441                                  ; ----------------------------------------------------------------------------
 22442                                  ;SYSINIT:05A6h:
 22443                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 22444                                  
 22445                                  ; 03/09/2023
 22446                                  ; (locstack at SYSINIT:0586h in PCDOS 7.1 IBMBIO.COM SYSINIT)
 22447                                  
 22448                                  	;mov	sp,05A6h
 22449 00000561 BC6005                  	mov     sp,locstack		; set stack
 22450                                  
 22451 00000564 FB                      	sti
 22452                                  
 22453                                  ;align 2
 22454                                  	; 30/03/2018
 22455                                  ;LOCSTACK:
 22456                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 22457                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 22458                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 22459                                  
 22460                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 22461                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 22462                                  
 22463                                  ; This call to DOSINIT will relocate the DOS data from its present location
 22464                                  ; at the top of memory, to its final location in low memory just above the
 22465                                  ; BIOS data. It will then build important DOS data structures in low 
 22466                                  ; memory following the DOS data. It returns (among many other things) the
 22467                                  ; new starting address of free memory.
 22468                                  
 22469 00000565 2EFF1E[7102]            	call	far [cs:dosinit]	; call dosinit	
 22470                                  			 ; es:di -> sysinitvars_ext
 22471                                  
 22472 0000056A 2E8C1E[8502]            	mov	[cs:def_php],ds		; save pointer to PSP
 22473                                  	
 22474                                  	; 11/12/2022
 22475                                  	; 22/03/2019
 22476 0000056F 0E                      	push	cs
 22477 00000570 1F                      	pop	ds
 22478                                  	; 22/10/2022
 22479 00000571 A3[8302]                	mov	[hi_doscod_size],ax
 22480 00000574 890E[8102]              	mov	[lo_doscod_size],cx
 22481 00000578 8916[7D02]              	mov	[dos_segreinit],dx
 22482                                  	
 22483                                  	; 11/12/2022
 22484                                  	; ds = cs
 22485                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 22486                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 22487                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 22488                                  
 22489                                  	; 05/06/2018 - Retro DOS v3.0
 22490                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 22491                                  
 22492                                  	; 11/12/2022
 22493                                  	; ds = cs
 22494                                  	; 22/10/2022
 22495                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 22496 0000057C 268B05                  	mov	ax,[es:di] ; 22/03/2019
 22497                                  	;mov	[cs:DOSINFO],ax
 22498 0000057F A3[6D02]                	mov	[DOSINFO],ax
 22499                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 22500 00000582 268B4502                	mov	ax,[es:di+2]
 22501                                  	;mov	[cs:DOSINFO+2],ax
 22502 00000586 A3[6F02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 22503                                  
 22504                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 22505 00000589 268B4504                	mov	ax,[es:di+4]
 22506                                  	;mov	[cs:sysi_country],ax
 22507 0000058D A3[7902]                	mov	[sysi_country],ax
 22508                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 22509 00000590 268B4506                	mov	ax,[es:di+6]
 22510                                  	;mov	[cs:sysi_country+2],ax
 22511 00000594 A3[7B02]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 22512                                  
 22513                                  	; 20/04/2019
 22514                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 22515                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 22516                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 22517                                  	; 22/10/2022
 22518                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 22519                                  	;;;mov	[dos_segreinit+2],es
 22520                                  	;;mov	[dos_segreinit+2],ax
 22521                                  	;mov	[cs:dos_segreinit+2],ax
 22522                                  	; 11/12/2022
 22523                                  	; ds = cs
 22524 00000597 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 22525 0000059B 8C06[7F02]              	mov	[dos_segreinit+2],es
 22526                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22527                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 22528                                  	;mov	[cs:dos_segreinit+2],es
 22529                                  
 22530                                  ; ----------------------------------------------------------------------------
 22531                                  
 22532                                  ;SYSINIT:0577h:
 22533                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 22534                                  ;SYSINIT:05D1h:	; NoRPLArena 
 22535                                  
 22536                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 22537                                  ;------ Cover up RPL code with an arena
 22538                                  ;SYSINIT:05EBh:
 22539                                  	; 11/12/2022
 22540                                  	; ds = cs
 22541 0000059F 31DB                    	xor	bx,bx
 22542 000005A1 391E[9602]              	cmp	[RPLMemTop],bx ; 0
 22543                                  	;cmp	word [RPLMemTop],0
 22544                                  	;;cmp	word [cs:RPLMemTop],0
 22545 000005A5 7450                    	je	short NoRPLArena
 22546                                  
 22547                                  ;------ alloc all memory
 22548                                  
 22549                                  	; 11/12/2022
 22550                                  	;mov	bx,0FFFFh
 22551 000005A7 4B                      	dec	bx
 22552                                  	; bx = 0FFFFh
 22553 000005A8 B448                    	mov	ah,48h
 22554 000005AA CD21                    	int	21h
 22555                                  			; DOS - 2+ - ALLOCATE MEMORY
 22556                                  			; BX = number of 16-byte paragraphs desired
 22557 000005AC B448                    	mov	ah,48h
 22558 000005AE CD21                    	int	21h
 22559                                  
 22560 000005B0 8EC0                    	mov	es,ax			; get it into ES and save it
 22561 000005B2 06                      	push	es
 22562                                  
 22563                                  ;------ resize upto RPL mem
 22564                                  
 22565                                  	; 11/12/2022
 22566                                  	; ds = cs
 22567                                  	;sub	ax,[cs:RPLMemTop]
 22568 000005B3 2B06[9602]              	sub	ax,[RPLMemTop]
 22569 000005B7 F7D8                    	neg	ax
 22570 000005B9 48                      	dec	ax
 22571 000005BA 89C3                    	mov	bx,ax
 22572 000005BC B44A                    	mov	ah,4Ah
 22573 000005BE CD21                    	int	21h
 22574                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 22575                                  			; ES = segment address of block to change
 22576                                  			; BX = new size in paragraphs
 22577                                  
 22578                                  ;------ allocate the free (RPL MEM)
 22579                                  
 22580 000005C0 BBFFFF                  	mov	bx,0FFFFh
 22581 000005C3 B448                    	mov	ah,48h
 22582 000005C5 CD21                    	int	21h
 22583 000005C7 B448                    	mov	ah,48h
 22584 000005C9 CD21                    	int	21h
 22585                                  
 22586                                  ;----- mark that it belongs to RPL
 22587                                  
 22588 000005CB 48                      	dec	ax
 22589 000005CC 8EC0                    	mov	es,ax
 22590                                  	;mov	word [es:arena_owner],8
 22591 000005CE 26C70601000800          	mov	word [es:1],8
 22592                                  	;mov	word [es:arena_name],'RP'
 22593 000005D5 26C70608005250          	mov	word [es:8],'RP'
 22594                                  	;mov	word [es:arena_name+2],'L'
 22595 000005DC 26C7060A004C00          	mov	word [es:10],'L'
 22596                                  	;mov	word [es:arena_name+4],0
 22597 000005E3 26C7060C000000          	mov	word [es:12],0
 22598                                  	;mov	word [es:arena_name+6],0
 22599 000005EA 26C7060E000000          	mov	word [es:14],0	
 22600                                  
 22601 000005F1 07                              pop     es                      ; get back ptr to first block
 22602 000005F2 B449                            mov     ah,49h	; Dealloc	; and free it
 22603 000005F4 CD21                    	int	21h		
 22604                                  					; DOS - 2+ - FREE MEMORY
 22605                                  					; ES = segment address of area to be freed
 22606                                  	; 11/12/2022
 22607 000005F6 F8                      	clc
 22608                                  
 22609                                  ; ----------------------------------------------------------------------------
 22610                                  
 22611                                  NoRPLArena:
 22612                                  	; 11/12/2022
 22613                                  	; ds = cs
 22614                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 22615 000005F7 C43E[6D02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 22616                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 22617                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 22618                                  
 22619                                  	; 11/12/2022
 22620                                  	;clc				; get the extended memory size
 22621                                  
 22622                                  ;	execute the get extended memory size subfunction in the bios int 15h
 22623                                  ;	if the function reports an error do nothing else store the extended
 22624                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 22625                                  ;	currently pointed to by es:di. use the offsets specified in the
 22626                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 22627                                  
 22628 000005FB B488                    	mov	ah,88h
 22629 000005FD CD15                    	int	15h			; check extended memory size
 22630 000005FF 720B                    	jc	short no_ext_memory
 22631                                  			; Get Extended Memory Size
 22632                                  			; Return: CF clear on success
 22633                                  			; AX = size of memory above 1M in K	
 22634                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 22635                                  	; 22/10/2022
 22636 00000601 26894545                	mov	[es:di+45h],ax ; save extended memory size
 22637 00000605 09C0                    	or	ax,ax
 22638 00000607 7403                    	jz	short no_ext_memory
 22639 00000609 E8F006                  	call	ClrVDISKHeader
 22640                                  no_ext_memory:
 22641                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 22642 0000060C 268B4510                	mov	ax,[es:di+10h]
 22643                                  	;add	ax,bufinsiz
 22644                                  	; 30/12/2023 - Retro DOS v5.0
 22645                                  	;add	ax,20		; size of buffer header
 22646 00000610 83C018                  	add     ax,24		; bufinsiz
 22647                                  				; size of buffer header = 24 (PCDOS v7.1 IBMBIO.COM)
 22648                                  				; (it was 20 in MSDOS 6.22 IO.SYS)
 22649                                  	; 11/12/2022
 22650                                  	; ds = cs
 22651 00000613 A3[9D02]                	mov	[singlebuffersize],ax	; total size for a buffer
 22652                                  	;mov	[cs:singlebuffersize],ax	
 22653                                  	; 11/12/2022
 22654 00000616 A0[9802]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 22655                                  	;mov	al,[cs:DEFAULT_DRIVE]
 22656                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 22657 00000619 26884543                	mov	[es:di+43h],al
 22658                                  
 22659                                  ; determine if 386 system...
 22660                                  
 22661                                  ; 30/12/2023
 22662                                  %if 0
 22663                                  	;get_cpu_type			; macro to determine cpu type
 22664                                  
 22665                                  get_cpu_type:
 22666                                  	; 11/12/2022
 22667                                  	pushf
 22668                                  	;push	bx
 22669                                  	;xor	bx,bx
 22670                                  	; 11/12/2022
 22671                                  	;xor	cx,cx
 22672                                  	;
 22673                                  	xor	ax,ax
 22674                                  	; ax = 0
 22675                                  	push    ax
 22676                                  	popf
 22677                                  	pushf
 22678                                  	pop	ax
 22679                                  	and	ax,0F000h
 22680                                  	;cmp	ax,0F000h
 22681                                  	cmp	ah,0F0h 
 22682                                  	je	short cpu_8086
 22683                                  	;mov	ax,0F000h
 22684                                  	mov	ah,0F0h
 22685                                  	; ax = 0F000h
 22686                                  	push	ax
 22687                                  	popf
 22688                                  	pushf
 22689                                  	pop	ax
 22690                                  	;and	ax,0F000h
 22691                                  	and	ah,0F0h
 22692                                  	jz	short cpu_286
 22693                                  cpu_386:
 22694                                  	; 11/12/2022
 22695                                  	;;inc	bx
 22696                                  	;inc	cx
 22697                                  	; 11/12/2022
 22698                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 22699                                  	mov	byte [es:di+44h],1
 22700                                  
 22701                                  	; 03/09/2023 - Retro DOS v5.0 (PCDOS 7.1 Modified SYSINIT)
 22702                                  	; change A20 line on/off check code to the faster (for 32 bit cpu)
 22703                                  	;push	es
 22704                                  	;push	di
 22705                                  	;mov	ax,DOSBIODATASEG ; 0070h
 22706                                  	;mov	es,ax
 22707                                  	;cld
 22708                                  	;mov	di,cpu386_cmpsd ; (IsA20Off)
 22709                                  	;mov	ax,4B9h        ; mov cx,4 ; B90400
 22710                                  	;stosw
 22711                                  	;mov	ax,0F300h      ; repz  ; F3
 22712                                  	;stosw
 22713                                  	;mov	ax,0A766h      ; cmpsd ; 66A7
 22714                                  	;stosw
 22715                                  	;pop	di
 22716                                  	;pop	es
 22717                                  
 22718                                  cpu_286:
 22719                                  	;;;inc	bx
 22720                                  	;;inc	cx
 22721                                  cpu_8086:
 22722                                  	; 11/12/2022
 22723                                  	;;mov	ax,bx
 22724                                  	;pop	bx
 22725                                  	popf
 22726                                  %endif
 22727                                  	;...
 22728                                  
 22729                                  	; 11/12/2022
 22730                                  	;or	cl,cl
 22731                                  	;jz	short not_386_system
 22732                                  	; 11/12/202
 22733                                  	;cmp	cl,2
 22734                                  	;;cmp	ax,2			; is it a 386?
 22735                                  	;jne	short not_386_system	; no: don't mess with flag
 22736                                  
 22737                                  	; 30/12/2023 - Retro DOS v5.0
 22738 0000061D 803E[B606]02            	cmp	byte [cpu_type], 2	; is it a 386?
 22739 00000622 7505                    	jne	short _not_386_cpu	; no: don't mess with flag
 22740                                  	
 22741                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 22742                                  	; 11/12/2022
 22743                                  	; 22/10/2022
 22744 00000624 26C6454401              	mov	byte [es:di+44h],1
 22745                                  _not_386_cpu:
 22746                                  	;mov	al,[es:di+SYSI_NUMIO]
 22747 00000629 268A4520                	mov	al,[es:di+20h]
 22748                                  	; 11/12/2022
 22749                                  	; ds = cs
 22750 0000062D A2[8503]                	mov	[drivenumber],al	; save start of installable block drvs
 22751                                  	;mov	[cs:drivenumber],al
 22752                                  
 22753 00000630 8CC8                    	mov	ax,cs
 22754 00000632 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 22755                                  	; 11/12/2022
 22756                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 22757                                  	;;mov	cx,[cs:singlebuffersize]
 22758                                  	;shr	cx,1			
 22759                                  	;shr	cx,1			; divide size by 16...
 22760                                  	;shr	cx,1
 22761                                  	;shr	cx,1			; ...to get paragraphs...
 22762                                  	;inc	cx			; ... and round up
 22763                                  	; 11/12/2022
 22764 00000635 8B1E[9D02]              	mov	bx,[singlebuffersize]
 22765 00000639 B104                    	mov	cl,4
 22766 0000063B D3EB                    	shr	bx,cl
 22767 0000063D 43                      	inc	bx
 22768                                  
 22769                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 22770                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 22771                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 22772                                  ;	  it is probably safe to assume that the sector size always will be.
 22773                                  ;
 22774                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 22775                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 22776                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 22777                                  ;	  other code from ever causing a problem???
 22778                                  
 22779                                  	; 11/12/2022
 22780 0000063E 29D8                    	sub	ax,bx
 22781                                  	;sub	ax,cx
 22782 00000640 A3[A702]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 22783                                  	; 22/10/2022
 22784                                  	;mov	[cs:top_of_cdss],ax
 22785                                  
 22786                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 22787                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 22788                                  ;	for allocating memory for MagicDrv.
 22789                                  
 22790                                  	; 30/12/2023
 22791                                  	;push	es ; not necessary (!*)	; preserve pointer to dosinfo
 22792                                  	;push	di
 22793                                  
 22794                                  	; 22/10/2022
 22795                                  ;	mov	cx,ax			; save pointer for buffer
 22796                                  ;
 22797                                  ;;	now allocate space for 26 CDSs
 22798                                  ;
 22799                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 22800                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 22801                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 22802                                  
 22803                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 22804                                  	; (SYSINIT:064Ch)
 22805 00000643 89C1                    	mov	cx,ax ; (*)
 22806 00000645 2D8F00                  	sub	ax,((26*(curdirlen))+15)/16 ; sub ax,143
 22807 00000648 A3[A502]                	mov	[ALLOCLIM],ax		; init top of free memory pointer
 22808 0000064B A3[A302]                	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 22809                                  	 	
 22810                                  ; setup and initialize the temporary buffer at cx
 22811                                  
 22812                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 22813 0000064E 26C47D12                	les	di,[es:di+12h]
 22814                                  	; 11/12/2022
 22815 00000652 31DB                    	xor	bx,bx
 22816                                  	;xor	ax,ax
 22817                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 22818                                  	;mov	word [es:di+4],0
 22819 00000654 26895D04                	mov	[es:di+4],bx ; 0
 22820                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 22821                                  	;mov	word [es:di],0
 22822 00000658 26891D                  	mov	[es:di],bx ; 0
 22823                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss] ; 6.21
 22824                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss] ; 5.0
 22825                                  	;mov	[es:di+2],ax
 22826                                  	;mov	es,ax	; [top_of_cdss] = [CONFBOT]
 22827                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 22828 0000065B 26894D02                	mov	[es:di+2],cx ; [top_of_cdss] ; (*)	
 22829 0000065F 8EC1                    	mov	es,cx
 22830                                  
 22831                                  	; 11/12/2022
 22832                                  	;xor	ax,ax
 22833                                  	;mov	di,ax			; es:di -> single buffer
 22834 00000661 89DF                    	mov	di,bx
 22835                                  	; di = 0
 22836                                  
 22837                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 22838                                  	; 11/12/2022
 22839                                  	;mov	[es:di],ax ; 0
 22840 00000663 26891D                  	mov	[es:di],bx ; 0
 22841                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 22842                                  	; 11/12/2022
 22843                                  	;mov	[es:di+2],ax ; 0
 22844 00000666 26895D02                	mov	[es:di+2],bx ; 0 
 22845                                  
 22846                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 22847                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 22848                                  
 22849                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 22850 0000066A 26C74504FF00            	mov	word [es:di+4],00FFh
 22851                                  ;SYSINIT:06E6h
 22852                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 22853                                  	;mov	word [es:di+6],0
 22854                                  	; 11/12/2022
 22855                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 22856 00000670 26895D06                	mov	[es:di+6],bx ; 0
 22857                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 22858                                  	;mov	word [es:di+8],0
 22859                                  	; 11/12/2022
 22860                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 22861 00000674 26895D08                	mov	[es:di+8],bx ; 0
 22862                                  
 22863                                  	; 30/12/2023 (!*)
 22864                                  	;pop	di			; restore pointer to DOSINFO data
 22865                                  	;pop	es
 22866                                  
 22867                                  	; 11/12/2022
 22868                                  	; ds = cs
 22869                                  	; 22/10/2022
 22870                                  	;push	cs
 22871                                  	;pop	ds
 22872                                  
 22873 00000678 E82807                  	call	TempCDS			; set up cdss so re_init and sysinit
 22874                                  					;  can make disk system calls
 22875                                  					; tempcds trashes ds
 22876                                  	; 10/05/2019
 22877 0000067B 2E8E1E[8502]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 22878                                  
 22879                                  	;if not ibmjapver
 22880                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 22881                                  	;endif
 22882                                  
 22883                                  	; 22/10/2022
 22884                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 22885                                  	; 30/12/2022
 22886                                  ;SYSINIT:0697h:	; (MSDOS 6.21 IO.SYS, SYSINIT)
 22887                                  	;call	far ptr 70h:89Bh
 22888 00000680 9A[2807]7000            	call	DOSBIODATASEG:RE_INIT
 22889                                  
 22890 00000685 FB                      	sti				; ints ok
 22891 00000686 FC                      	cld				; make sure
 22892                                  
 22893                                  ; 23/03/2019
 22894                                  
 22895                                  ;SYSINIT:069Eh	; 30/12/2022
 22896                                  
 22897                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 22898                                  ; of the way by putting it just below sysinit at end of memory.
 22899                                  
 22900 00000687 8CCB                    	mov	bx,cs
 22901 00000689 83EB10                  	sub	bx,10h
 22902 0000068C 8EC3                    	mov	es,bx
 22903 0000068E 31F6                    	xor	si,si
 22904 00000690 89F7                    	mov	di,si
 22905 00000692 B98000                  	mov	cx,128
 22906 00000695 F3A5                    	rep	movsw
 22907                                  
 22908                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 22909                                  	; 22/10/2022
 22910 00000697 268C063600              	mov	[es:36h],es
 22911                                  
 22912                                   	; Set Process Data Block - Program Segment Prefix address
 22913                                  	; BX = PDB/PSP segment
 22914 0000069C B450                            mov	ah,50h	; SET_CURRENT_PDB
 22915 0000069E CD21                    	int	21h			; tell DOS we moved it
 22916                                  			; DOS - 2+ internal - SET PSP SEGMENT
 22917                                  			; BX = segment address of new PSP
 22918                                  	; 22/10/2022
 22919                                  	; 27/03/2019
 22920                                  	; 30/12/2023
 22921                                  	;push	ds ; */			; preserve DS returned by DOSINIT
 22922                                  
 22923 000006A0 0E                      	push	cs	
 22924 000006A1 1F                      	pop	ds
 22925                                  
 22926                                  	; set up temp. critical error handler
 22927 000006A2 BA[794A]                	mov	dx,int24		; set up int 24 handler
 22928                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 22929                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 22930 000006A5 B82425                  	mov	ax,2524h
 22931 000006A8 CD21                    	int	21h
 22932                                  
 22933 000006AA 803E[8803]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 22934 000006AF 7406                            je      short no_err		   ;  N: continue            M029
 22935 000006B1 BA[9E53]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 22936                                          ; 22/10/2022
 22937                                  	;call	print 			   ;		             M029
 22938                                  	; 12/12/2022
 22939 000006B4 EB04                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0
 22940                                  
 22941                                  	; 30/12/2023 - Retro DOS v5.0
 22942                                  cpu_type:
 22943 000006B6 FF                      	db 0FFh	; db 0
 22944                                  
 22945                                  no_err:
 22946                                  	; 12/05/2019
 22947                                  	;----------------------------------------------
 22948                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 22949                                  	; 22/10/2022 - Retro DOS v4.0
 22950                                  	; 12/12/2022
 22951                                  	; 30/12/2023 - Retro DOS v5.0
 22952 000006B7 BA[7D4A]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 22953                                  p_dosinit_msg:
 22954 000006BA E89743                  	call	print			; Print message
 22955                                  	;----------------------------------------------
 22956                                  	
 22957                                  	; 11/12/2022
 22958                                  	; 22/10/2022
 22959                                  	; 23/03/2019 - Retro DOS v4.0
 22960                                  	;pop	ds			; start of free memory
 22961                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 22962                                  	
 22963                                  	; 11/12/2022
 22964                                  	; 27/03/2019
 22965 000006BD 8A16[9802]              	mov	dl,[DEFAULT_DRIVE]	
 22966                                  	; 30/12/2023
 22967                                  	;pop	ds ; */
 22968                                  
 22969 000006C1 08D2                    	or	dl,dl
 22970                                  	; 30/12/2023
 22971 000006C3 7405                    	jz	short nodrvset		; bios didn't say
 22972                                  	;jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 22973                                  	;dec	dl			; A = 0
 22974                                  	; 18/12/2022
 22975 000006C5 4A                      	dec	dx
 22976 000006C6 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 22977 000006C8 CD21                    	int	21h			; select the disk
 22978                                  			; DOS - SELECT DISK
 22979                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 22980                                  			; Return: AL = number of logical drives
 22981                                  nodrvset:
 22982                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS SYINIT)
 22983                                  	; (SYSINIT:06DFh)
 22984                                  	
 22985                                  	; 30/12/2023 - Retro DOS 5.0
 22986                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0733h)
 22987 000006CA 1E                      	push	ds
 22988 000006CB 29C0                    	sub	ax,ax
 22989 000006CD 8ED8                    	mov	ds,ax ; 0 ; ROM BIOS Data Area
 22990 000006CF A16C04                  	mov	ax,[46Ch] ; timer tick count (18.2 ticks per second)
 22991                                  	;mov	[cs:_timer_lw_],ax
 22992 000006D2 1F                      	pop	ds
 22993                                  	; ds = cs	
 22994 000006D3 A3[8C03]                	mov	[_timer_lw_],ax
 22995                                  
 22996                                  	; ---------------------
 22997                                  
 22998                                  	;ifdef	dblspace_hooks
 22999                                  	;	....
 23000                                  	;	....
 23001                                  	;endif
 23002                                  
 23003                                  	; ---------------------
 23004                                  
 23005                                  	; 30/12/2023 - Retro DOS 5.0 (Modified MSDOS 7.1 IBMBIO.COM SYS SYINIT)
 23006                                  ; ----------------------------------------------------------------------------
 23007                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0740h
 23008                                  
 23009 000006D6 0E                      	push	cs
 23010 000006D7 07                      	pop	es
 23011                                  
 23012                                  	; 07/04/2024
 23013                                   	;mov	word [cs:MagicBackdoor+2],cs
 23014                                  	;mov	word [cs:MagicBackdoor], NullBackdoor
 23015 000006D8 8C0E[9203]               	mov	word [MagicBackdoor+2],cs
 23016 000006DC C706[9003][9403]        	mov	word [MagicBackdoor], NullBackdoor
 23017                                  
 23018                                  	; ds = es = cs = SYSINIT segment
 23019                                  set_drvspc_size:
 23020 000006E2 BE[AB16]                	mov	si,MagicDDName		; "\DBLSPACE.BIN"
 23021                                  set_dblspc_size:
 23022 000006E5 E8792F                  	call	SizeDevice
 23023 000006E8 732B                    	jnc	short wait_for_key_2s
 23024                                  	;cmp	byte [cs:si], 'C'
 23025 000006EA 803C43                  	cmp	byte [si],'C'		; "C:\STACKER.BIN"
 23026 000006ED 740C                    	je	short set_drvspc_name
 23027                                  	;cmp	byte [cs:DEFAULT_DRIVE],3
 23028 000006EF 803E[9802]03            	cmp	byte [DEFAULT_DRIVE],3
 23029 000006F4 7405                    	je	short set_drvspc_name
 23030 000006F6 83EE02                  	sub	si,2			; "C:\DBLSPACE.BIN"
 23031 000006F9 EBEA                    	jmp	short set_dblspc_size
 23032                                  
 23033                                  set_drvspc_name:
 23034                                  	;cmp	byte [cs:MagicDDName+2],'R'	; "BLSPACE.BIN"
 23035 000006FB 803E[AD16]52            	cmp	byte [MagicDDName+2],'R'
 23036 00000700 7408                    	je	short set_stacker_name
 23037                                  	;mov	word [cs:MagicDDName+2],'RV'	; "DRVSPACE.BIN"
 23038 00000702 C706[AD16]5256          	mov	word [MagicDDName+2],'RV'
 23039 00000708 EBD8                    	jmp     short set_drvspc_size
 23040                                  
 23041                                  set_stacker_name:
 23042 0000070A 81FE[B916]              	cmp	si,StackerName		; "C:\STACKER.BIN"
 23043 0000070E 734B                    	jnb	short wfk2s_4
 23044 00000710 BE[BB16]                	mov	si,StackerName+2	; "\STACKER.BIN"
 23045 00000713 EBD0                    	jmp	short set_dblspc_size
 23046                                  
 23047                                  wait_for_key_2s:
 23048                                  	;mov	[cs:MagicDDNamePtr],si
 23049 00000715 8936[A716]              	mov	[MagicDDNamePtr],si
 23050 00000719 1E                      	push	ds
 23051 0000071A 29C0                    	sub	ax,ax
 23052 0000071C 8ED8                    	mov	ds,ax	; 0		; ROMBIOS data area
 23053 0000071E 8B166C04                	mov	dx,[46Ch]		; Counter for Interrupt 1Ah
 23054                                  wfk2s_1:
 23055 00000722 B401                    	mov	ah,1
 23056 00000724 CD16                    	int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
 23057                                  				; Return: ZF clear if character in buffer
 23058                                  				; AH = scan code, AL = character
 23059                                  				; ZF set if no character in buffer
 23060 00000726 7511                    	jnz	short wfk2s_2
 23061 00000728 B402                    	mov	ah,2
 23062 0000072A CD16                    	int	16h			; KEYBOARD - GET SHIFT STATUS
 23063                                  					; AL = shift status bits
 23064 0000072C A803                    	test	al,3
 23065 0000072E 7509                    	jnz	short wfk2s_2
 23066 00000730 A16C04                  	mov	ax,[46Ch]		; tick count
 23067 00000733 29D0                    	sub	ax,dx
 23068 00000735 3C25                            cmp	al,37			; 2 seconds
 23069 00000737 72E9                    	jb	short wfk2s_1		; wait for user's key press
 23070                                  wfk2s_2:
 23071 00000739 1F                      	pop	ds			; read/check the pressed key
 23072 0000073A 29DB                    	sub	bx,bx	; bx = 0
 23073 0000073C B402                    	mov	ah,2
 23074 0000073E CD16                    	int	16h			; KEYBOARD - GET SHIFT STATUS
 23075                                  					; AL = shift status bits
 23076 00000740 A803                    	test	al,3			; Left or Right SHIFT key pressed ?
 23077 00000742 7402                    	jz	short wfk2s_3		; no
 23078 00000744 43                      	inc	bx
 23079 00000745 43                      	inc	bx	; bx = 2
 23080                                  wfk2s_3:
 23081 00000746 B401                    	mov	ah,1
 23082 00000748 CD16                    	int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
 23083                                  				; Return: ZF clear if character in buffer
 23084                                  				; AH = scan code, AL = character
 23085                                  				; ZF set if no character in buffer
 23086 0000074A 7418                    	jz	short wfk2s_6
 23087 0000074C 80FC65                  	cmp	ah,65h			; F8 key pressed ?
 23088 0000074F 740C                    	jz	short wfk2s_5
 23089 00000751 80FC62                  	cmp	ah,62h			; F5 key pressed ?
 23090 00000754 750E                    	jnz	short wfk2s_6
 23091                                  	;mov	byte [cs:F5_key],1
 23092 00000756 C606[8E03]01            	mov	byte [F5_key],1
 23093                                  wfk2s_4:
 23094 0000075B EB49                    	jmp	short ProcessConfig	; continue (as normal/default state)
 23095                                  
 23096                                  wfk2s_5:
 23097                                  	;mov	byte [cs:F8_key],1
 23098 0000075D C606[8F03]01            	mov	byte [F8_key],1
 23099 00000762 EB42                    	jmp	short ProcessConfig
 23100                                  
 23101                                  wfk2s_6:
 23102 00000764 E8AA02                  	call	AllocFreeMem		; get the largest free block from DOS
 23103 00000767 E8700F                  	call	MagicPreload		; **** PRE-LOAD MAGICDRV!!! ****
 23104                                  
 23105                                  	; 07/04/2024 - Retro DOS v5.0
 23106                                  	; (DS may not be same with CS here!)
 23107 0000076A 0E                      	push	cs
 23108 0000076B 1F                      	pop	ds ; *
 23109 0000076C 8E06[6803]              	mov	es,[area]
 23110                                                        
 23111 00000770 09C0                    	or	ax,ax			; error?
 23112 00000772 7406                    	jz	short wfk2s_7
 23113                                  PreloadFailed:
 23114 00000774 B449                    	mov	ah,49h			; Dealloc ; free the block if no load
 23115                                  	;;mov	es,[cs:area]
 23116                                  	;mov	es,[area]
 23117 00000776 CD21                    	int	21h		; DOS - 2+ - FREE MEMORY
 23118                                  				; ES = segment address of area to be freed
 23119 00000778 EB2C                    	jmp	short ProcessConfig
 23120                                  
 23121                                  wfk2s_7:
 23122                                  	;mov	bx,[cs:memhi]
 23123                                  	;mov	es,[cs:area]
 23124                                  	;sub	bx,[cs:area]		; get desired block size in paras
 23125                                  	; 07/04/2024 - Retro DOS v5.0
 23126                                  	; ds = cs ; *
 23127 0000077A 8CC3                    	mov	bx,es
 23128 0000077C F7DB                    	neg	bx		; bx = - [cs:area]
 23129 0000077E 031E[6403]              	add	bx,[memhi]	; bx = [cs:memhi] - [cs:area]
 23130                                  
 23131 00000782 B44A                    	mov	ah,4Ah
 23132 00000784 CD21                    	int	21h		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 23133                                  				; ES = segment address of block to change
 23134                                  				; BX = new size in paragraphs
 23135 00000786 8CC0                    	mov	ax,es
 23136 00000788 48                      	dec	ax
 23137 00000789 8EC0                    	mov	es,ax			; get Magicdrv arena
 23138                                  
 23139 0000078B 26C70601000800          	mov	word [es:1],8	; [es:arena_owner]
 23140                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 23141 00000792 26C70608005344          	mov     word [es:8],4453h ; [es:arena_name],'SD' ; System Data
 23142                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h
 23143 00000799 2603060300                      add	ax,[es:3]		; get MCB length
 23144                                  	;add	ax,[es:ARENA.SIZE]
 23145                                  
 23146                                  	;lds	si,[cs:DOSINFO]		; get to arena header
 23147 0000079E C536[6D02]              	lds	si,[DOSINFO]
 23148 000007A2 40                              inc     ax			; get addr of next MCB
 23149 000007A3 8944FE                          mov     [si-2], ax      	; store that
 23150                                  
 23151                                  ; ----------------------------------------------------------------------------
 23152                                  
 23153                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 23154                                  
 23155                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 23156                                  ; ----------------------------------------------------------------------------
 23157                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 23158                                  ; ----------------------------------------------------------------------------
 23159                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS SYSINIT)
 23160                                  ; ----------------------------------------------------------------------------
 23161                                  ; 07/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM SYSINIT)
 23162                                  
 23163                                  ; (MSDOS 6.22 IO.SYS - SYSINIT:0744h)
 23164                                  
 23165                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:0820h
 23166                                  
 23167                                  ProcessConfig:
 23168                                  	;; ds = cs ; 27/03/2019
 23169                                  	; 11/12/2022
 23170                                  	; ds <> cs	
 23171                                  
 23172                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 23173                                  
 23174 000007A6 E8BF1C                  	call	doconf			; do pre-scan for dos=high/low
 23175                                  
 23176                                  	; 11/12/2022
 23177                                  	; 27/03/2019
 23178                                  	; ds = cs (at return from doconf)
 23179                                  
 23180                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 23181                                  ; It will either be relocated to low memory, above the DOS data structures,
 23182                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 23183                                  ; code entry points will be located in low memory. Dos_segreinit is used
 23184                                  ; to tell the DOS data where the code has been placed, and to install the
 23185                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 23186                                  ; must first initialize it in its present location and load the installable
 23187                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 23188                                  ; relocate the DOS code into HiMem.
 23189                                  ;
 23190                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 23191                                  ; to install the low memory stub (this must be done before allowing any
 23192                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 23193                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 23194                                  ; been patched.
 23195                                  
 23196                                  	; 22/10/2022 - Retro DOS v4.0
 23197                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 23198                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 23199                                  	; 11/12/2022
 23200 000007A9 803E[6C02]00            	cmp	byte [runhigh],0
 23201 000007AE 7404                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 23202                                  
 23203                                  ;------ user chose to load high
 23204                                  
 23205                                  	; 22/10/2022
 23206                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 23207                                  	; 11/12/2022
 23208                                  	; ds = cs
 23209                                  ; 13/04/2024
 23210                                  %if 0
 23211                                  	mov	es,[CURRENT_DOS_LOCATION]
 23212                                  %endif
 23213                                  	;mov	es,[cs:FINAL_DOS_LOCATION] ; Retro DOS v4.0
 23214                                  	; 27/03/2019
 23215                                  	;;mov	es,[FINAL_DOS_LOCATION]
 23216                                  
 23217 000007B0 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 23218                                  
 23219                                  ; 13/04/2024
 23220                                  %if 0	
 23221                                  	; 11/12/2022
 23222                                  	; ds = cs
 23223                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 23224                                  	call	far [dos_segreinit]
 23225                                  %endif
 23226 000007B2 EB08                    	jmp	short do_multi_pass
 23227                                  
 23228                                  ;------ User chose to load dos low
 23229                                  
 23230                                  dont_install_stub:
 23231                                  	; 22/10/2022
 23232 000007B4 31DB                    	xor	bx,bx			; M012
 23233                                  					; don't use int 21 call to alloc mem
 23234 000007B6 E80E03                  	call	MovDOSLo		; move it !
 23235                                  
 23236 000007B9 B80100                  	mov	ax,1			; dont install stub
 23237                                  
 23238                                  ; 13/04/2024
 23239                                  %if 1
 23240                                  do_multi_pass:
 23241                                  %endif
 23242                                  	; 11/12/2022
 23243                                  	; ds = cs
 23244 000007BC 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 23245                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 23246                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 23247                                  	; 27/03/2019
 23248                                  ;do_multi_pass:
 23249                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 23250                                  
 23251                                  	; 11/12/2022
 23252                                  	; ds =cs
 23253                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 23254 000007C0 FF1E[7D02]              	call	far [dos_segreinit]
 23255                                  
 23256                                  ; 13/04/2024
 23257                                  %if 0
 23258                                  do_multi_pass:
 23259                                  %endif
 23260                                  
 23261 000007C4 E84A02                  	call	AllocFreeMem		; allocate all the free mem
 23262                                  					; & update [memhi] & [area]
 23263                                  					; start of free memory.
 23264                                  	;ifdef	dblspace_hooks
 23265                                  	;mov	bx,0			; magic backdoor to place int hooks
 23266                                  	;call	cs:MagicBackdoor
 23267                                  	;endif
 23268                                  
 23269                                  	; 07/04/2024 - Retro DOS v5.0
 23270                                  	; (PCDOS 7.1 IBMBIO.COM)
 23271                                  	;cmp	byte [cs:F5_key],1
 23272 000007C7 803E[8E03]01            	cmp	byte [F5_key],1
 23273 000007CC 740D                    	je	short skip_magicbackdoor
 23274                                  	;cmp	byte [cs:F8_key],1
 23275 000007CE 803E[8F03]01            	cmp	byte [F8_key],1
 23276 000007D3 7406                    	je	short skip_magicbackdoor
 23277 000007D5 31DB                    	xor	bx,bx	; bx = 0	; magic backdoor to place int hooks
 23278                                  	;call	far [cs:MagicBackdoor]
 23279 000007D7 FF1E[9003]              	call	far [MagicBackdoor]
 23280                                  
 23281                                  skip_magicbackdoor:
 23282                                  
 23283                                  ; Now, process config.sys some more.  
 23284                                  ; Load the device drivers and install programs
 23285                                  
 23286                                  	; 22/10/2022
 23287                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 23288                                  	; 11/12/2022
 23289                                  	; ds = cs
 23290 000007DB FE06[CD02]              	inc	byte [multi_pass_id]
 23291 000007DF E8221D                  	call	multi_pass		; load device drivers
 23292 000007E2 E8EA31                  	call	ShrinkUMB
 23293 000007E5 E80E32                  	call	UnlinkUMB		; unlink all UMBs	;M002
 23294                                  	; 02/11/2022
 23295                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 23296                                  	; 11/12/2022
 23297                                  	; ds = cs
 23298 000007E8 FE06[CD02]              	inc	byte [multi_pass_id]
 23299 000007EC E8151D                  	call	multi_pass		; was load ifs (now does nothing)
 23300                                  
 23301                                  	;ifdef	dblspace_hooks
 23302                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 23303                                  	;endif
 23304                                  
 23305                                  	; ds = cs
 23306                                  
 23307                                  	; 07/04/2024
 23308                                  	;call	endfile			; setup fcbs, files, buffers etc
 23309                                  
 23310                                  	;ifdef	dblspace_hooks
 23311                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 23312                                  	;endif
 23313                                  
 23314                                  	; 07/04/2024 - Retro DOS v5.0
 23315                                  	; (PCDOS 7.1 IBMBIO.COM)
 23316                                  	;cmp	byte [cs:F5_key],1
 23317 000007EF 803E[8E03]01            	cmp	byte [F5_key],1
 23318 000007F4 7412                    	je	short skip_magicpostload
 23319                                  	;cmp	byte [cs:F8_key],1
 23320 000007F6 803E[8F03]01            	cmp	byte [F8_key],1
 23321 000007FB 740B                    	je	short skip_magicpostload
 23322 000007FD E8B710                  	call	MagicPostload		; make sure Magicdrv is final placed
 23323                                  	; 13/04/2024
 23324                                  	; ds = cs
 23325 00000800 E83E06                  	call	endfile			; setup fcbs, files, buffers etc
 23326 00000803 E81011                  	call	MagicSetCdss		; disable CDSs of reserved drives
 23327                                  	; ds = cs
 23328 00000806 EB03                    	jmp	short _@_
 23329                                  
 23330                                  skip_magicpostload:
 23331                                  	; 13/04/2024
 23332                                  	; ds = cs
 23333 00000808 E83606                  	call	endfile			; setup fcbs, files, buffers etc
 23334                                  _@_:
 23335                                  
 23336                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 23337                                  ;to device drivers. This has been moved up to this point to avoid problems 
 23338                                  ;with overlays called from installed programs
 23339                                  
 23340                                  	; 11/12/2022
 23341                                  	; ds = cs
 23342                                  
 23343                                  	;;mov	ax,Bios_Data ; 0070h
 23344                                  	;mov	ax,KERNEL_SEGMENT
 23345                                  	; 21/10/2022
 23346 0000080B B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 23347 0000080E 8EC0                    	mov	es,ax			; point ES to bios data
 23348                                  
 23349 00000810 26C606[DD07]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 23350                                  
 23351                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23352                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 23353                                  	;test	byte [cs:install_flag],1
 23354                                  	; 11/12/2022
 23355                                  	; ds = cs
 23356 00000816 F606[CE02]01            	test	byte [install_flag],1
 23357                                  	;test	byte [cs:install_flag],have_install_cmd
 23358                                  					; are there install commands?
 23359 0000081B 7407                    	jz	short dolast		; no, no need for further processing
 23360                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 23361                                  	; 11/12/2022
 23362                                  	; ds =cs
 23363 0000081D FE06[CD02]              	inc	byte [multi_pass_id]
 23364 00000821 E8E01C                  	call	multi_pass		; execute install= commands
 23365                                  
 23366                                  dolast:
 23367                                  	
 23368                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 23369                                  ;  free the confbot area used for config.sys and sysinit itself.
 23370                                  
 23371                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 23372                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 23373                                  ; anything, but just set up the ROM area for suballocation (or print
 23374                                  ; a message if HiMem is not available).
 23375                                  ;
 23376                                  ; There is also this little hack for CPM style DOS calls that needs to
 23377                                  ; be done when A20 is set...
 23378                                  
 23379                                  	; 11/12/2022
 23380                                  	; ds = cs
 23381                                  
 23382                                  	; 22/10/2022
 23383                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 23384                                  	; 11/12/2022
 23385 00000824 803E[6C02]FF            	cmp	byte [runhigh],0FFh
 23386 00000829 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 23387 0000082B E84802                  	call	LoadDOSHiOrLo
 23388                                  _@@_:
 23389                                  	;cmp	byte [cs:runhigh],0	; are we running low
 23390                                  	; 11/12/2022
 23391                                  	; ds = cs
 23392 0000082E 803E[6C02]00            	cmp	byte [runhigh],0
 23393                                  	;je	short _@@@
 23394 00000833 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 23395 00000835 E84C05                  	call	CPMHack			; make ffff:d0 same as 0:c0
 23396                                  _@@@:
 23397                                  
 23398                                  ; We are now done with CONFIG.SYS processing
 23399                                  
 23400                                  ConfigDone:
 23401                                  	; 12/12/2022
 23402                                  	; 22/10/2022
 23403                                  	;mov	byte [cs:donotshownum],1 
 23404                                  					; done with config.sys.
 23405                                  					; do not show line number message.
 23406                                  	;mov	es,[cs:area]
 23407                                  	; 12/12/2022
 23408                                  	; ds = cs
 23409                                  	; 27/03/2019
 23410 00000838 C606[5503]01            	mov	byte [donotshownum],1
 23411 0000083D 8E06[6803]              	mov	es,[area]
 23412                                  
 23413 00000841 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 23414 00000843 CD21                    	int	21h
 23415                                  			; DOS - 2+ - FREE MEMORY
 23416                                  			; ES = segment address of area to be freed
 23417                                  
 23418                                  	; 22/10/2022
 23419                                  	;test	word [cs:install_flag],2
 23420                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 23421                                  	;test	byte [cs:install_flag],has_installed
 23422                                  	; 11/12/2022
 23423                                  	; ds = cs
 23424 00000845 F606[CE02]02            	test	byte [install_flag],2 ; has_installed
 23425                                  	;test	byte [install_flag],has_installed
 23426 0000084A 741F                    	jz	short skip_free_sysinitbase ; no.
 23427                                  
 23428                                  ; set block from the old_area with impossible_owner_size.
 23429                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 23430                                  ; handle install= command.
 23431                                  
 23432                                  	; 12/12/2022
 23433                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 23434                                  	;push	bx
 23435                                  	
 23436                                  	; 22/10/2022
 23437                                  	;mov	es,[cs:old_area]
 23438                                  	;mov	bx,[cs:impossible_owner_size]
 23439                                  	; 12/12/2022
 23440                                  	; ds = cs
 23441 0000084C 8E06[5E03]              	mov	es,[old_area]
 23442 00000850 8B1E[6003]              	mov	bx,[impossible_owner_size]
 23443                                  	
 23444 00000854 B44A                    	mov	ah,4Ah ; SETBLOCK
 23445 00000856 CD21                    	int	21h
 23446                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 23447                                  			; ES = segment address of block to change
 23448                                  			; BX = new size in paragraphs
 23449 00000858 8CC0                    	mov	ax,es
 23450 0000085A 48                      	dec	ax
 23451 0000085B 8EC0                    	mov	es,ax			; point to arena
 23452                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 23453 0000085D 26C70601000800          	mov	word [es:1],8
 23454                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 23455 00000864 26C70608005344          	mov	word [es:8],'SD'
 23456                                  	
 23457                                  	; 12/12/2022
 23458                                  	;pop	bx
 23459                                          ;pop	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 23460                                  
 23461                                  skip_free_sysinitbase:
 23462                                  	; 22/10/2022
 23463                                  	;cmp	byte [cs:runhigh],0
 23464                                  	; 12/12/2022
 23465                                  	; ds = cs
 23466 0000086B 803E[6C02]00            	cmp	byte [runhigh],0	
 23467 00000870 7403                    	je	short _@@@_ ; 04/07/2023
 23468                                  
 23469 00000872 E8DF03                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 23470                                  
 23471                                  ; ----------------------------------------------------------------------------
 23472                                  
 23473                                  _@@@_:
 23474                                  	; 12/12/2022
 23475                                  	; ds = cs
 23476                                  	; 22/10/2022
 23477                                  	; 27/03/2019
 23478                                  	;push	cs
 23479                                  	;pop	ds			; point DS to sysinitseg
 23480                                  
 23481                                  ; set up the parameters for command
 23482                                  
 23483                                  ;	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 23484                                  ;;ifdef	MULTI_CONFIG
 23485                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 23486                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 23487                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 23488                                  ;	; !!!
 23489                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 23490                                  ;       ; !!!
 23491                                  ;	call    disable_autoexec        ; no, we should disable it
 23492                                  ;process_autoexec:
 23493                                  ;;endif	; !!!
 23494                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 23495                                  ;	; !!!
 23496                                  
 23497                                  	; 22/10/2022 
 23498                                  	;mov     cl,[command_line]
 23499                                          ;mov     ch,0
 23500                                          ;inc     cx
 23501                                          ;mov     si,command_line	
 23502                                  	;add     si,cx
 23503                                          ;mov     byte [si],cr	; cr-terminate command line
 23504                                  
 23505                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 23506                                  	; (SYSINIT:0809h)
 23507                                  
 23508                                  	;;;;
 23509                                  
 23510                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 23511                                  	; (SYSINIT:0813h)
 23512                                  	; ds = cs
 23513                                  	; push	cs
 23514                                  	; pop	ds
 23515                                  
 23516 00000875 C606[6419]00            	mov	byte [config_cmd],0	; set special code for query_user
 23517 0000087A E89F3D                  	call    query_user		; to issue the AUTOEXEC prompt
 23518                                  	; 07/04/2024
 23519                                  	;jnc	short process_autoexec	; we should process autoexec normally
 23520                                  
 23521                                  	; 07/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 23522                                  	;;;
 23523 0000087D 9C                      	pushf
 23524 0000087E F606[814C]01            	test	byte [bDisableUI],1
 23525 00000883 7507                    	jnz	short _@@@@_	; F5 clean/interactive boot option (has been) disabled
 23526 00000885 803E[8E03]01            	cmp	byte [F5_key],1
 23527 0000088A 7405                    	je	short _@@@@@_	; F5 key pressed, bypass AUTOEXEC.BAT (clean boot)
 23528                                  _@@@@_:
 23529 0000088C 9D                      	popf
 23530 0000088D 730B                    	jnc	short process_autoexec	; we should process autoexec normally
 23531 0000088F EB01                    	jmp	short bypass_autoexec
 23532                                  _@@@@@_:
 23533 00000891 9D                      	popf			; cf status at the return from 'query_user' call
 23534                                  bypass_autoexec:
 23535                                  	;;;
 23536                                  
 23537                                  	; !!!
 23538 00000892 800E[854C]04            	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 23539                                  	; !!!
 23540 00000897 E87D3E                  	call    disable_autoexec        ; no, we should disable it
 23541                                  process_autoexec:
 23542                                  	; !!!
 23543 0000089A E8C53E                  	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 23544                                  
 23545                                  	;mov     cl,[command_line]
 23546                                  	; 30/12/2022
 23547 0000089D BE[BB4B]                	mov	si,command_line
 23548 000008A0 8A0C                    	mov	cl,[si]
 23549 000008A2 B500                    	mov     ch,0
 23550 000008A4 41                      	inc     cx
 23551                                  	;mov	si,command_line
 23552 000008A5 01CE                    	add     si,cx
 23553 000008A7 C6040D                  	mov     byte [si],cr ; 0Dh	; cr-terminate command line
 23554                                  	
 23555                                  	;;;;		
 23556                                  
 23557                                  ; 30/12/2022 - Retro DOS v4.2
 23558                                  %if 0
 23559                                  	;mov	si,(offset command_line+1)
 23560                                  	mov	si,command_line+1
 23561                                  	push    ds
 23562                                  	pop     es
 23563                                  	mov     di,si
 23564                                  	mov     cl,0FFh ; -1
 23565                                  _@_loop:
 23566                                  	inc     cl ; +1
 23567                                  	lodsb
 23568                                  	stosb
 23569                                  	or      al,al
 23570                                  	jnz     short _@_loop
 23571                                  	dec     di
 23572                                  	mov     al,0Dh
 23573                                  	stosb			; cr-terminate command line
 23574                                  	mov     [command_line],cl ; command line length (except CR)
 23575                                  %endif
 23576                                  
 23577                                  ; ----------------------------------------------------------------------------
 23578                                  
 23579                                  ;   Once we get to this point, the above code, which is below "retry"
 23580                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 23581                                  ;   which follow....)
 23582                                  
 23583                                  retry:		; PCDOS 7.1 IBMBIO.COM - SYSINIT:094Ch ; 07/04/2024
 23584 000008AA BA[2D4B]                	mov	dx,commnd	; now pointing to file description
 23585                                  
 23586                                  ; we are going to open the command interpreter and size it as is done in
 23587                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 23588                                  ; there is not enough room for the command interpreter,exec will probably
 23589                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 23590                                  ; here to catch it. this code is not perfect (for instance .exe command
 23591                                  ; interpreters are possible) because it does its sizing based on the
 23592                                  ; assumption that the file being loaded is a .com file. it is close enough to
 23593                                  ; correctness to be usable.
 23594                                  
 23595                                  ; first, find out where the command interpreter is going to go.
 23596                                  
 23597 000008AD 52                      	push	dx		; save pointer to name
 23598 000008AE BBFFFF                  	mov	bx,0FFFFh
 23599 000008B1 B448                    	mov	ah,48h	; ALLOC
 23600 000008B3 CD21                            int     21h             ; get biggest piece
 23601 000008B5 B448                    	mov	ah,48h	; ALLOC
 23602 000008B7 CD21                    	int	21h		; second time gets it
 23603 000008B9 726B                    	jc	short memerrjx	; oooops
 23604                                  
 23605 000008BB 8EC0                    	mov	es,ax
 23606 000008BD B449                    	mov	ah,49h	; DEALLOC
 23607 000008BF CD21                    	int	21h		; give it right back
 23608 000008C1 89DD                    	mov	bp,bx
 23609                                  
 23610                                  ; es:0 points to block,and bp is the size of the block in para.
 23611                                  
 23612                                  ; we will now adjust the size in bp down by the size of sysinit.
 23613                                  ; we need to do this because exec might get upset if some of the exec
 23614                                  ; data in sysinit is overlayed during the exec.
 23615                                  
 23616                                  	; 22/10/2022
 23617                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 23618 000008C3 8B1E[9402]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 23619 000008C7 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 23620                                  
 23621                                  ; Note that the "config_wrkseg" environment data is a segment in
 23622                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 23623                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 23624                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 23625                                  ; we need to make sure that there's no way Exec will stomp on that data
 23626                                  ; before it can copy it, and one way to do that is to make the available
 23627                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 23628                                  ; from the "memory_size" segment value (which is typically A000h) instead
 23629                                  ; of the current sysinit CS....
 23630                                  ;
 23631                                  ; The reason I use the term "paranoid" is because this code should have
 23632                                  ; slid the data required by Exec up to the very top of memory, because as
 23633                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 23634                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 23635                                  ; consumes). Now it's just a little worse (65K or more, depending on
 23636                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 23637                                  ; is determined by the size of CONFIG.SYS.... -JTP
 23638                                  
 23639                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21, IO.SYS)
 23640                                  	; (SYSINIT:0858h)
 23641 000008C9 8B0E[6019]              	mov	cx,[config_envlen]
 23642 000008CD E303                            jcxz	no_env		; use config_wrkseg only if there's env data
 23643 000008CF A1[6219]                        mov	ax,[config_wrkseg]	
 23644                                  
 23645                                  	; 22/10/2022
 23646                                  	;mov	cx,[config_envlen]
 23647                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 23648                                          ;mov	ax,[config_wrkseg]
 23649                                  ;no_env:
 23650                                  	; 22/10/2022
 23651                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 23652                                  no_env:
 23653                                  	; 30/12/2022
 23654                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0861h)
 23655 000008D2 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 23656 000008D4 83C311                  	add	bx,11h		; add the sysinit php
 23657 000008D7 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 23658 000008D9 724B                    	jc	short memerrjx	; if there isn't even this much memory, give up
 23659                                  
 23660                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 23661 000008DB B8003D                          mov	ax,3D00h
 23662 000008DE F9                      	stc                     ; in case of int 24
 23663 000008DF CD21                    	int	21h
 23664 000008E1 7271                    	jc	short comerr	; ooops
 23665                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 23666                                  			; DS:DX -> ASCIZ filename
 23667                                  			; AL = access mode
 23668                                  			; 0 - read
 23669                                  	; 22/10/2022
 23670                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 23671 000008E3 89C3                            mov     bx,ax           ; handle in bx
 23672                                  
 23673                                  ;   If the standard command interpreter is being used, verify it is correct
 23674                                  
 23675                                  	; 30/12/2022 - Retro DOS v4.2
 23676                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:0874h)
 23677 000008E5 803E[2A4B]00            	cmp	byte [newcmd],0	; was a new shell selected?
 23678 000008EA 7518                    	jne	short skip_validation ; yes
 23679                                  	; 07/04/2024 - Retro DOS v5.0
 23680                                  	; (PCDOS 7.1 IBMBIO.COM, SYSINIT:098Eh)
 23681 000008EC BA[A608]                	mov	dx,retry-4	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0948h
 23682 000008EF B90400                  	mov	cx,4		;
 23683 000008F2 B43F                    	mov	ah,READ		;
 23684 000008F4 CD21                    	int	21h		;
 23685 000008F6 803E[A608]E9            	cmp	byte [retry-4],0E9h
 23686 000008FB 7557                    	jne	short comerr
 23687                                  	; 20/04/2019 - Retro DOS v4.0
 23688                                  	; 30/12/2022 
 23689                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 23690                                  				; .. COMMAND.COM Version 6.20 (14h&0Fh)
 23691                                  	; 07/04/2024 - Retro DOS v5.0
 23692                                  	;;cmp	byte [retry-1],66h ; .. COMMAND.COM Version 6.22 (16h&0Fh)
 23693                                  	;cmp	byte [retry-1],7Ah ; PCDOS 7.1 IBMBIO.COM - SYSINIT:099Fh
 23694                                  				; .. COMMAND.COM Version 7.10 (0Ah&0Fh)
 23695 000008FD 803E[A908]7A            	cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 23696 00000902 7550                    	jne	short comerr	;
 23697                                  
 23698                                  	; 22/10/2022
 23699                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 23700                                  	;jne	short skip_validation ; yes
 23701                                  	;mov	dx,retry-4
 23702                                  	;mov	cx,4		;
 23703                                  	;mov	ah,READ		;
 23704                                  	;int	21h		;
 23705                                  	;cmp	byte [retry-4],0E9h
 23706                                  	;jne	short comerr
 23707                                  	;; 20/04/2019 - Retro DOS v4.0
 23708                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 23709                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 23710                                  	;jne	short comerr	;
 23711                                  
 23712                                  ;skip_validation:
 23713                                  	; 22/10/2022
 23714                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 23715                                  skip_validation:
 23716                                  	; 30/12/2022
 23717                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0893h)
 23718 00000904 31C9                    	xor	cx,cx
 23719 00000906 31D2                    	xor	dx,dx
 23720                                  	;mov	ax,(LSEEK<<8)|2
 23721 00000908 B80242                  	mov	ax,4202h
 23722 0000090B F9                      	stc			; in case of int 24
 23723 0000090C CD21                    	int	21h		; get file size in dx:ax
 23724 0000090E 7244                    	jc	short comerr
 23725                                  				; convert size in dx:ax to para in ax
 23726 00000910 83C00F                  	add	ax,15		; round up size for conversion to para
 23727 00000913 83D200                  	adc	dx,0
 23728 00000916 E88104                  	call	off_to_para
 23729 00000919 B10C                    	mov	cl,12
 23730 0000091B D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 23731 0000091D 09D0                    	or	ax,dx		; ax is now # of para for file
 23732 0000091F 83C010                  	add	ax,10h		; 100h byte php
 23733 00000922 39E8                    	cmp	ax,bp		; will command fit in available mem?
 23734 00000924 7208                    	jb	short okld	; jump if yes.
 23735                                  
 23736                                  ; 30/12/2022
 23737                                  %if 0
 23738                                  	; 22/10/2022
 23739                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 23740                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 23741                                  	; 02/11/2022
 23742                                  	;jmp	mem_err
 23743                                  	; 11/12/2022
 23744                                  	; ds = cs
 23745                                  	jmp	mem_err2
 23746                                  %endif
 23747                                  	; 30/12/2022
 23748                                  	; (MSDOS 6.21, IO.SYS, SYSINIT:08B5h)
 23749                                  memerrjx:
 23750 00000926 BA[4951]                	mov	dx,badmem 	; "Configuration too large for memory"
 23751 00000929 E82841                  	call	print
 23752 0000092C EB3A                    	jmp     short continue
 23753                                  
 23754                                  okld:
 23755 0000092E B43E                    	mov	ah,3Eh ; CLOSE
 23756 00000930 CD21                    	int	21h		; close file
 23757                                  
 23758                                  	; 22/10/2022
 23759 00000932 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 23760                                  
 23761                                  	; 24/03/2019
 23762                                  
 23763 00000933 0E                      	push	cs		; point es to sysinitseg
 23764 00000934 07                      	pop	es
 23765 00000935 BB[BF02]                        mov     bx,COMEXE	; point to exec block
 23766                                  	; 22/10/2022
 23767                                  	;pop	dx              ; recover pointer to name
 23768                                  
 23769                                  ;;ifdef	MULTI_CONFIG
 23770                                  
 23771                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 23772                                  ;   there will be data if there were any valid SET commands and/or if a menu
 23773                                  ;   selection was made (in which case the CONFIG environment variable will be
 23774                                  ;   set to that selection).
 23775                                  
 23776                                  	; 23/10/2022
 23777                                  	;mov	cx,[config_envlen]
 23778                                  	;jcxz	no_envdata
 23779                                          ;mov	cx,[config_wrkseg]
 23780                                  ;no_envdata:
 23781                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 23782                                  	;mov	[bx],cx
 23783                                  
 23784                                  ;;endif	;MULTI_CONFIG
 23785                                  
 23786                                  	; 30/12/2022 - Retro DOS v4.2
 23787                                  	; (MSDOS 6.21 IO.SYS SYSINIT:08C7h)
 23788 00000938 8B0E[6019]              	mov	cx,[config_envlen]
 23789 0000093C E304                    	jcxz	no_envdata
 23790 0000093E 8B0E[6219]                      mov	cx,[config_wrkseg]
 23791                                  no_envdata:
 23792                                  	;mov	[bx+EXEC0.ENVIRON],cx
 23793 00000942 890F                    	mov	[bx],cx	
 23794                                  	
 23795                                  	; 23/10/2022
 23796                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 23797                                  
 23798                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 23799 00000944 8C4F04                  	mov	[bx+4],cs
 23800                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 23801 00000947 8C4F08                  	mov	[bx+8],cs
 23802                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 23803 0000094A 8C4F0C                  	mov	[bx+12],cs
 23804                                  
 23805                                  	;mov	ax,(EXEC<<8) + 0
 23806                                  	; 23/10/2022
 23807                                  	;xor	ax,ax
 23808                                  	;mov	ah,4Bh
 23809                                  	; 04/07/2023
 23810                                  	;mov	ax,4B00h
 23811 0000094D B8004B                  	mov	ax,(EXEC<<8)
 23812                                  
 23813 00000950 F9                      	stc                     ; in case of int 24
 23814 00000951 CD21                            int     21h             ; go start up command
 23815                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 23816                                  			; DS:DX -> ASCIZ filename
 23817                                  			; ES:BX -> parameter block
 23818                                  			; AL = subfunc: load & execute program
 23819                                  	;push	cs
 23820                                  	;pop	ds
 23821                                  
 23822                                  	; 13/04/2024
 23823                                  	; 23/10/2022
 23824 00000953 52                      	push	dx		; push to balance fall-through pop
 23825                                  
 23826                                  ; note fall through if exec returns (an error)
 23827                                  comerr:
 23828                                  	; 23/10/2022
 23829                                  ;;ifdef	MULTI_CONFIG
 23830                                  	;cmp	byte [commnd4],0
 23831                                  	;je	short comerr2	; all defaults exhausted, print err msg
 23832                                  	;cmp	byte [newcmd],0
 23833                                  	;je	short continue	; don't print err msg for defaults just yet
 23834                                  ;comerr2:
 23835                                  ;;endif
 23836                                  
 23837                                  	; 30/12/2022 - Retro DOS v4.2
 23838                                  	;push	cs
 23839                                  	;pop	ds
 23840                                  	; 07/04/2024
 23841                                  	; ds = cs
 23842                                  
 23843 00000954 803E[9E4B]00            	cmp	byte [commnd4],0
 23844 00000959 7407                    	je	short comerr2	; all defaults exhausted, print err msg
 23845 0000095B 803E[2A4B]00            	cmp	byte [newcmd],0
 23846 00000960 7406                    	je	short continue	; don't print err msg for defaults just yet
 23847                                  comerr2:
 23848                                  	; 07/04/2024
 23849                                  	;push	dx ; 30/12/2022
 23850                                  
 23851                                  	; 23/10/2022
 23852 00000962 BA[C550]                        mov     dx,badcom	; want to print command error
 23853 00000965 E8C040                  	call	badfil
 23854                                  	
 23855                                  	; 07/04/2024
 23856                                  	;pop	dx  ; 30/12/2022
 23857                                  continue:
 23858                                  	; 13/04/2024
 23859                                  	; 23/10/2022
 23860 00000968 5A                      	pop	dx
 23861                                  
 23862                                  ; 30/12/2022
 23863                                  %if 0
 23864                                  
 23865                                  ;;ifndef MULTI_CONFIG
 23866                                  	;jmp	stall
 23867                                  	; 24/10/2022
 23868                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 23869                                  	jmp	short stall
 23870                                  ;;else
 23871                                  
 23872                                  %endif
 23873                                  	
 23874                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT, Retro DOS v4.2)
 23875                                  ;%if 1
 23876                                  ; 23/10/2022 (MSDOS 5.0 SYSINIT, Retrodos v4.0)
 23877                                  ;%if 0	
 23878 00000969 B419                    	mov	ah,GET_DEFAULT_DRIVE ; 19h
 23879 0000096B CD21                    	int	21h             ;
 23880 0000096D 0441                    	add	al,'A'          ;
 23881 0000096F 88C2                    	mov	dl,al           ; DL == default drive letter
 23882 00000971 BE[6D4B]                	mov	si,commnd2
 23883 00000974 803E[2A4B]00            	cmp	byte [newcmd],0 ; if a SHELL= was given
 23884 00000979 7505                    	jne	short do_def2	; then try the 2nd alternate;
 23885 0000097B C60400                  	mov	byte [si],0	; otherwise, the default SHELL= was tried,
 23886 0000097E EB05                    	jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 23887                                  do_def2:			
 23888 00000980 803C00                  	cmp	byte [si],0	; has 2nd alternate been tried?
 23889 00000983 7554                            jne	short do_alt    ; no
 23890                                  do_def3:
 23891 00000985 BE[7E4B]                	mov	si,commnd3
 23892 00000988 803C00                  	cmp	byte [si],0	; has 3rd alternate been tried?
 23893 0000098B 754C                    	jne	short do_alt	; no
 23894 0000098D BE[9E4B]                	mov	si,commnd4
 23895 00000990 803C00                  	cmp	byte [si],0	; has 4th alternate been tried?
 23896 00000993 7544                    	jne	short do_alt	; no
 23897 00000995 52                      	push	dx              ;
 23898 00000996 BA[3853]                	mov	dx,badcomprmpt
 23899 00000999 E8B840                  	call	print		;
 23900 0000099C 5A                      	pop	dx              ; recover default drive letter in DL
 23901                                  request_input:			;
 23902 0000099D B402                    	mov	ah,STD_CON_OUTPUT
 23903 0000099F CD21                    	int	21h             ;
 23904 000009A1 52                      	push	dx              ;
 23905 000009A2 B23E                    	mov	dl,'>'          ;
 23906 000009A4 CD21                    	int	21h             ;
 23907 000009A6 8A1E[2C4B]              	mov	bl,[tmplate+1]	; [tmplate+1] = 12
 23908 000009AA B700                    	mov	bh,0            ;
 23909 000009AC C687[2D4B]0D            	mov	byte [commnd+bx],0Dh
 23910 000009B1 BA[2B4B]                	mov	dx,tmplate
 23911 000009B4 B40A                    	mov	ah,STD_CON_STRING_INPUT
 23912 000009B6 CD21                    	int	21h             ; read a line of input
 23913 000009B8 BA[7050]                	mov	dx,crlfm	;
 23914 000009BB E89640                  	call	print           ;
 23915 000009BE 5A                      	pop	dx              ;
 23916 000009BF 8A1E[2C4B]              	mov	bl,[tmplate+1]	;
 23917 000009C3 08DB                    	or	bl,bl           ; was anything typed?
 23918 000009C5 74D6                    	jz	short request_input ;
 23919 000009C7 C606[2A4B]01            	mov	byte [newcmd],1 ; disable validation for user-specified binaries
 23920 000009CC C687[2D4B]00            	mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 23921 000009D1 C706[BB4B]000D          	mov	word [command_line],0D00h
 23922 000009D7 EB35                    	jmp	short do_exec   ;
 23923                                  do_alt:
 23924 000009D9 1E                      	push	ds
 23925 000009DA 07                      	pop	es
 23926 000009DB C606[2A4B]00            	mov	byte [newcmd],0 ; force validation for alternate binaries
 23927 000009E0 BF[2D4B]                	mov	di,commnd	;
 23928                                  do_alt1:
 23929 000009E3 AC                      	lodsb			; copy the alternate, zapping it as we go,
 23930 000009E4 C644FF00                	mov	byte [si-1],0	; so that we know it's been tried
 23931 000009E8 AA                      	stosb 			;
 23932 000009E9 08C0                    	or	al,al		;
 23933 000009EB 75F6                    	jnz	short do_alt1	;
 23934 000009ED BF[BB4B]                	mov	di,command_line
 23935 000009F0 807C023A                	cmp	byte [si+2],':'
 23936 000009F4 7503                    	jne	short do_alt2	;
 23937 000009F6 885401                  	mov	[si+1],dl	; stuff default drive into alt. command line
 23938                                  do_alt2:			;
 23939 000009F9 AC                      	lodsb			;
 23940 000009FA AA                      	stosb			;
 23941 000009FB 08C0                    	or	al,al           ;
 23942 000009FD 75FA                    	jnz	short do_alt2   ;
 23943 000009FF C645FF0D                	mov	byte [di-1],cr
 23944                                  
 23945                                  ;;   Last but not least, see if we need to call disable_autoexec
 23946                                  
 23947                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 23948                                  	;cmp	[command_line-1],0
 23949                                          ;jne	short do_exec   ;
 23950                                          ;mov	[command_line-1],'/'
 23951                                  	;call	disable_autoexec ;
 23952                                  
 23953                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 23954 00000A03 C606[7B4C]00            	mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 23955 00000A08 E80C3D                  	call	disable_autoexec
 23956 00000A0B E8543D                  	call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 23957                                  do_exec:
 23958 00000A0E E999FE                  	jmp	retry		;
 23959                                  
 23960                                  ;;endif	;MULTI_CONFIG
 23961                                  
 23962                                  ;%endif ; 23/10/2022 (MSDOS 5.0 SYSINIT)
 23963                                  ;%endif ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 23964                                  
 23965                                  ; 24/03/2019 - Retro DOS v4.0
 23966                                  
 23967                                  ; ----------------------------------------------------------------------
 23968                                  ; procedure : AllocFreeMem
 23969                                  ;
 23970                                  ; Allocate Max memory from DOS to find out where to load DOS.
 23971                                  ; DOS is at temporary location when this call is being made
 23972                                  ;
 23973                                  ; Inputs : None
 23974                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 23975                                  ;	   [area] & [memhi] set to the para value of the start of the
 23976                                  ;	   free memory.
 23977                                  ;
 23978                                  ; Uses   : AX, BX
 23979                                  ;
 23980                                  ; ----------------------------------------------------------------------
 23981                                  	
 23982                                  	; 30/12/2022 - Retro DOS v4.2
 23983                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:09A2h)
 23984                                  
 23985                                  	; 08/04/2024 - Retro DOS v5.0
 23986                                  	; (PCDOS 7.1 IBMBIO.COM, SYSINIT:0AB5h)
 23987                                  
 23988                                  	; 23/10/2022
 23989                                  AllocFreeMem:
 23990 00000A11 BBFFFF                  	mov	bx,0FFFFh
 23991 00000A14 B448                    	mov	ah,48h ; ALLOC
 23992 00000A16 CD21                    	int	21h			; first time fails
 23993 00000A18 B448                    	mov	ah,48h ; ALLOC
 23994 00000A1A CD21                    	int	21h			; second time gets it
 23995                                  	; 11/12/2022
 23996                                  	; ds = cs
 23997                                  	;mov	[cs:area],ax
 23998                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 23999 00000A1C A3[6803]                	mov	[area],ax
 24000 00000A1F A3[6403]                	mov	[memhi],ax		; memhi:memlo now points to			
 24001 00000A22 C3                      	retn				; start of free memory
 24002                                  				
 24003                                  	; include msbio.cl6
 24004                                  ; ----------------------------------------------------------------------
 24005                                  DOSLOMSG:
 24006 00000A23 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 24006 00000A2C 7661696C61626C653A-
 24006 00000A35 204C6F6164696E6720-
 24006 00000A3E 444F53206C6F770D0A-
 24006 00000A47 24                 
 24007                                  FEmsg:
 24008 00000A48 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 24008 00000A51 6F723A2043616E6E6F-
 24008 00000A5A 7420616C6C6F636174-
 24008 00000A63 65204D656D6F727920-
 24008 00000A6C 666F7220444F530D0A-
 24008 00000A75 24                 
 24009                                  
 24010                                  ; ----------------------------------------------------------------------
 24011                                  ;
 24012                                  ; procedure : LoadDOSHiOrLo
 24013                                  ;
 24014                                  ;		Tries to move DOS into HMA. If it fails then loads
 24015                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 24016                                  ;		moved; this just tries to allocate the HMA, and prints
 24017                                  ;		a message if this is not possible.
 24018                                  ;
 24019                                  ; ----------------------------------------------------------------------
 24020                                  
 24021                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24022                                  LoadDOSHiOrLo:
 24023                                  	; 27/03/2019 - Retro DOS v4.0
 24024                                  	; ds = cs
 24025 00000A76 E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 24026                                  	;jc	short LdngLo		; If that don't work...
 24027                                  	;retn
 24028                                  	; 18/12/2022
 24029 00000A79 731C                    	jnc	short LoadDosHi_ok
 24030                                  LdngLo:
 24031                                  	; 23/10/2022
 24032                                  	;push	cs
 24033                                  	;pop	ds
 24034                                  	; 11/12/2022
 24035                                  	; ds = cs
 24036 00000A7B B409                    	mov	ah,9
 24037 00000A7D BA[230A]                	mov	dx,DOSLOMSG		; inform user that we are
 24038 00000A80 CD21                    	int	21h			; loading low
 24039                                  
 24040                                  ;ifndef ROMDOS
 24041                                  	; actually move the dos, and reinitialize it.
 24042                                  
 24043 00000A82 BB0100                  	mov	bx,1				; M012
 24044                                  						;  use int 21 alloc for mem
 24045 00000A85 E83F00                  	call	MovDOSLo
 24046                                  	; 11/12/2022
 24047                                  	; ds = cs
 24048                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 24049                                  	; 23/10/2022
 24050 00000A88 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 24051                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 24052                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 24053 00000A8C 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 24054                                  	; 11/12/2022
 24055                                  	; ds = cs
 24056                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 24057 00000A8E FF1E[7D02]              	call	far [dos_segreinit] ; 27/03/2019
 24058                                  	
 24059                                  ;endif ; ROMDOS
 24060                                  	; 23/10/2022
 24061                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 24062                                  	; 11/12/2022
 24063                                  	; ds = cs
 24064 00000A92 C606[6C02]00            	mov	byte [runhigh],0 ; 27/03/2019
 24065                                  LoadDosHi_ok:	; 18/12/2022
 24066 00000A97 C3                      	retn
 24067                                  
 24068                                  ; ----------------------------------------------------------------------
 24069                                  ;
 24070                                  ; procedure : TryToMovDOSHi
 24071                                  ;
 24072                                  ;		This tries to move DOS into HMA.
 24073                                  ;		Returns CY if it failed.
 24074                                  ;		If it succeeds returns with carry cleared.
 24075                                  ;
 24076                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 24077                                  ;		the A20 switching code in the low mem stub to be installed.
 24078                                  ; 
 24079                                  ; ----------------------------------------------------------------------
 24080                                  
 24081                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24082                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 24083                                  TryToMovDOSHi:
 24084                                  	; 11/12/2022
 24085                                  	; 27/03/2019 - Retro DOS v4.0
 24086                                  	; ds = cs
 24087 00000A98 E81300                  	call	MovDOSHi
 24088 00000A9B 7210                    	jc	short ttldhx
 24089                                  
 24090                                  ;ifndef ROMDOS
 24091                                  	; 23/10/2022
 24092                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 24093                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 24094                                  	; 11/12/2022
 24095                                  	; ds = cs
 24096 00000A9D 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 24097                                  ;else
 24098                                  ;	..
 24099                                  ;endif ; ROMDOS
 24100                                  
 24101                                  	; 11/12/2022
 24102                                  	; ds = cs
 24103 00000AA1 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 24104                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 24105 00000AA3 FF1E[7D02]              	call	far [dos_segreinit]
 24106                                  	;mov	byte [cs:runhigh],1
 24107 00000AA7 C606[6C02]01            	mov	byte [runhigh],1
 24108 00000AAC F8                      	clc
 24109                                  ttldhx:
 24110 00000AAD C3                      	retn
 24111                                  
 24112                                  ; ----------------------------------------------------------------------
 24113                                  ;
 24114                                  ; procedure : MovDOSHi
 24115                                  ;
 24116                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 24117                                  ;		For ROMDOS, the code is not actually moved, but the
 24118                                  ;		HMA is allocated and prepared for sub-allocation.
 24119                                  ;
 24120                                  ;		Returns : CY if it failed
 24121                                  ;
 24122                                  ; ----------------------------------------------------------------------
 24123                                  
 24124                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24125                                  MovDOSHi:
 24126                                  	; 14/05/2019
 24127                                  	; 27/03/2019 - Retro DOS v4.0
 24128                                  	; ds = cs
 24129 00000AAE E8D600                  	call	AllocHMA
 24130 00000AB1 7213                    	jc	short mdhx			; did we get HMA?
 24131 00000AB3 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 24132 00000AB6 8EC0                    	mov	es,ax
 24133                                  
 24134                                  ;ifndef ROMDOS
 24135                                  	; actually move the BIOS and DOS
 24136                                  
 24137                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 24138                                  	; 24/03/2019
 24139                                  	
 24140                                  	; 23/10/2022
 24141 00000AB8 E83200                  	call	MovBIOS				; First move BIOS into HMA
 24142                                  
 24143                                  	; ES:DI points to free HMA after BIOS
 24144                                  	
 24145                                  	; 14/05/2019
 24146                                  	; 24/03/2019 - Retro DOS v4.0
 24147                                  	;xor	di,di
 24148                                  	
 24149                                  	; 23/10/2022
 24150                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 24151                                  	; 11/12/2022
 24152                                  	; ds = cs
 24153 00000ABB 8B0E[8302]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 24154 00000ABF E81100                  	call	MovDOS				; and move it
 24155                                  
 24156                                  	; ES:DI points to free HMA after DOS
 24157                                  ;else
 24158                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 24159                                  ;
 24160                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 24161                                  ;
 24162                                  ;endif ; ROMDOS
 24163                                  
 24164 00000AC2 E87602                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 24165 00000AC5 F8                      	clc
 24166                                  mdhx:
 24167 00000AC6 C3                      	retn
 24168                                  
 24169                                  ; ----------------------------------------------------------------------
 24170                                  ;
 24171                                  ; procedure : MovDOSLo
 24172                                  ;
 24173                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 24174                                  ;
 24175                                  ; ----------------------------------------------------------------------
 24176                                  
 24177                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24178                                  
 24179                                  ;ifndef ROMDOS
 24180                                  
 24181                                  MovDOSLo:
 24182                                  	; 14/05/2019
 24183                                  	; 27/03/2019 - Retro DOS v4.0
 24184                                  	; ds = cs
 24185 00000AC7 E84500                  	call	AllocMemForDOS			; incestuosly!!!
 24186                                  	
 24187                                  	; 23/10/2022
 24188                                  	; 14/05/2019
 24189                                  	;inc	ax  ; skip MCB
 24190                                  	
 24191 00000ACA 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 24192                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 24193                                  	; 24/03/2019
 24194                                  	
 24195                                  	; 23/10/2022
 24196 00000ACC E81E00                  	call	MovBIOS
 24197                                  
 24198                                  ;------ ES:DI points memory immediately after BIOS
 24199                                  
 24200                                  	; 14/05/2019
 24201                                  	; NOTE: 
 24202                                  	;     Order of (RETRO) DOS kernel sections at memory:
 24203                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 24204                                  
 24205                                  	; 24/03/2019 - Retro DOS v4.0
 24206                                  	;xor	di,di	
 24207                                  
 24208                                  	; 23/10/2022
 24209                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 24210                                  	; 11/12/2022
 24211                                  	; ds = cs
 24212 00000ACF 8B0E[8102]              	mov	cx,[lo_doscod_size]		; low
 24213                                  	;call	MovDOS
 24214                                  	;retn
 24215                                  	; 11/12/2022
 24216                                  	;jmp	short MovDOS
 24217                                  
 24218                                  ;endif ; ROMDOS
 24219                                  
 24220                                  ; 11/12/2022
 24221                                  
 24222                                  ; ----------------------------------------------------------------------
 24223                                  ;
 24224                                  ; procedure : MovDOS
 24225                                  ;
 24226                                  ;		Moves DOS code into requested area
 24227                                  ;
 24228                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 24229                                  ;	     CX    - size of DOS code to be moved
 24230                                  ;
 24231                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 24232                                  ;
 24233                                  ; ----------------------------------------------------------------------
 24234                                  
 24235                                  	; 11/12/2022
 24236                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24237                                  
 24238                                  ;ifndef ROMDOS
 24239                                  
 24240                                  MovDOS:
 24241                                  	; 14/05/2019
 24242                                  	; 27/03/2019 - Retro DOS v4.0
 24243                                  
 24244                                  	; 11/12/2022
 24245                                  	; ds = cs
 24246                                  
 24247                                  	; 23/10/2022
 24248                                  	;push	ds ; *//
 24249                                  	
 24250 00000AD3 06                      	push	es
 24251 00000AD4 57                      	push	di
 24252                                  
 24253                                  	; 11/12/2022
 24254 00000AD5 1E                      	push	ds ; *// ; 11/12/202
 24255                                  
 24256                                  	; 29/04/2019
 24257 00000AD6 C536[7102]              	lds	si,[dosinit] ; 11/12/2022
 24258                                  	; 23/10/2022
 24259                                  	;lds	si,[cs:dosinit]
 24260                                  	; 03/09/2023
 24261 00000ADA 89F0                    	mov	ax,si
 24262                                  
 24263 00000ADC F3A4                    	rep	movsb
 24264                                  
 24265 00000ADE 1F                      	pop	ds ; *// ; 11/12/2022
 24266                                  
 24267 00000ADF 5B                      	pop	bx				; get back offset into which
 24268                                  						;  DOS was moved
 24269                                  	; 03/09/2023
 24270                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 24271                                  						;  wants to run
 24272                                  	; 03/09/2023
 24273                                  	;mov	ax,[dosinit]
 24274                                  	; ax = [dosinit]
 24275                                  
 24276 00000AE0 29D8                    	sub	ax,bx
 24277 00000AE2 E8B502                  	call	off_to_para
 24278 00000AE5 5B                      	pop	bx				; get the segment at which
 24279                                  						;  we moved DOS into
 24280 00000AE6 29C3                    	sub	bx,ax				; Adjust segment
 24281                                  	
 24282                                  	; 11/12/2022
 24283                                  	; 23/10/2022
 24284                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 24285                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 24286                                  	; 11/12/2022
 24287 00000AE8 891E[7302]              	mov	[CURRENT_DOS_LOCATION],bx
 24288                                  		
 24289                                  	; 27/03/2019
 24290                                  	;pop	ds ; *//
 24291                                  	; ds = cs
 24292                                  	;mov	[FINAL_DOS_LOCATION],bx
 24293                                  
 24294 00000AEC C3                      	retn
 24295                                  
 24296                                  ;endif ;ROMDOS
 24297                                  
 24298                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 24299                                  ; 24/03/2019
 24300                                  ; ----------------------------------------------------------------------
 24301                                  ;
 24302                                  ; procedure : MovBIOS
 24303                                  ;
 24304                                  ;		Moves BIOS code into requested segment
 24305                                  ;
 24306                                  ;	In : ES - segment to which BIOS is to be moved
 24307                                  ;		  ( it moves always into offset BCode_Start)
 24308                                  ;
 24309                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 24310                                  ;
 24311                                  ; ----------------------------------------------------------------------
 24312                                  
 24313                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24314                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 24315                                  
 24316                                  ;ifndef ROMDOS
 24317                                  
 24318                                  MovBIOS: ; proc	near
 24319                                  	; 11/12/2022
 24320 00000AED 1E                      	push	ds ; ds = cs
 24321                                  	;
 24322                                  	; 23/10/2022
 24323                                  	;mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 24324                                  	; 17/09/2023 ; 08/04/2024
 24325 00000AEE 8E1E[8902]              	mov	ds,[temp_bcode_seg]
 24326                                  	;mov	si,BCODE_START ; mov si,30h
 24327                                  	; 09/12/2022
 24328 00000AF2 BE[3000]                	mov	si,BCODESTART ; 30h
 24329 00000AF5 89F7                    	mov	di,si
 24330                                  	;mov	cx,1E00h ; PCDOS 7.1 IBMBIO.COM ; 08/04/2024
 24331 00000AF7 B9701D                  	mov	cx,BCODE_END ; mov cx,1A60h
 24332 00000AFA 29F1                    	sub	cx,si				; size of BIOS
 24333 00000AFC D1E9                    	shr	cx,1				; Both the labels are para
 24334                                  						;  aligned
 24335 00000AFE F3A5                    	rep	movsw
 24336                                  	
 24337                                  	; 11/12/2022
 24338 00000B00 1F                      	pop	ds ; ds = cs
 24339                                  	;
 24340 00000B01 06                      	push	es
 24341 00000B02 57                      	push	di				; save end of BIOS
 24342 00000B03 8CC0                    	mov	ax,es
 24343                                  	;
 24344                                  	; 11/12/2022
 24345                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 24346                                  	;;call	dword ptr cs:_seg_reinit_ptr
 24347                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 24348                                  	; ds = cs
 24349 00000B05 A3[8A03]                	mov	[BCodeSeg],ax
 24350 00000B08 FF1E[8702]              	call	far [seg_reinit_ptr]
 24351                                  	;
 24352 00000B0C 5F                      	pop	di
 24353 00000B0D 07                      	pop	es				; get back end of BIOS
 24354 00000B0E C3                      	retn
 24355                                  
 24356                                  ;MovBIOS endp
 24357                                  
 24358                                  ;endif ; ROMDOS
 24359                                  
 24360                                  ; 11/12/2022
 24361                                  %if 0
 24362                                  
 24363                                  ; 24/03/2019
 24364                                  
 24365                                  ; ----------------------------------------------------------------------
 24366                                  ;
 24367                                  ; procedure : MovDOS
 24368                                  ;
 24369                                  ;		Moves DOS code into requested area
 24370                                  ;
 24371                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 24372                                  ;	     CX    - size of DOS code to be moved
 24373                                  ;
 24374                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 24375                                  ;
 24376                                  ; ----------------------------------------------------------------------
 24377                                  
 24378                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24379                                  
 24380                                  ;ifndef ROMDOS
 24381                                  
 24382                                  MovDOS:
 24383                                  	; 14/05/2019
 24384                                  	; 27/03/2019 - Retro DOS v4.0
 24385                                  
 24386                                  	; 11/12/2022
 24387                                  	; ds = cs
 24388                                  
 24389                                  	; 23/10/2022
 24390                                  	;push	ds ; *//
 24391                                  	
 24392                                  	push	es
 24393                                  	push	di
 24394                                  
 24395                                  	; 11/12/2022
 24396                                  	push	ds ; *// ; 11/12/202
 24397                                  
 24398                                  	; 29/04/2019
 24399                                  	lds	si,[dosinit] ; 11/12/2022
 24400                                  	; 23/10/2022
 24401                                  	;lds	si,[cs:dosinit]
 24402                                  	; 03/09/2023
 24403                                  	mov	ax,si
 24404                                  
 24405                                  	rep	movsb
 24406                                  
 24407                                  	pop	ds ; *// ; 11/12/2022
 24408                                  
 24409                                  	pop	bx				; get back offset into which
 24410                                  						;  DOS was moved
 24411                                  	;mov	ax,[dosinit] ; 03/09/2023
 24412                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 24413                                  						;  wants to run
 24414                                  	sub	ax,bx
 24415                                  	call	off_to_para
 24416                                  	pop	bx				; get the segment at which
 24417                                  						;  we moved DOS into
 24418                                  	sub	bx,ax				; Adjust segment
 24419                                  	
 24420                                  	; 11/12/2022
 24421                                  	; 23/10/2022
 24422                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 24423                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 24424                                  	; 11/12/2022
 24425                                  	mov	[CURRENT_DOS_LOCATION],bx
 24426                                  		
 24427                                  	; 27/03/2019
 24428                                  	;pop	ds ; *//
 24429                                  	; ds = cs
 24430                                  	;mov	[FINAL_DOS_LOCATION],bx
 24431                                  
 24432                                  	retn
 24433                                  
 24434                                  ;endif ;ROMDOS
 24435                                  
 24436                                  %endif
 24437                                  
 24438                                  ; ----------------------------------------------------------------------
 24439                                  ;
 24440                                  ; procedure : AllocMemForDOS
 24441                                  ;
 24442                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 24443                                  ;
 24444                                  ;	Out : AX - seg of allocated memoryblock
 24445                                  ;
 24446                                  ; ----------------------------------------------------------------------
 24447                                  
 24448                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24449                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 24450                                  
 24451                                  ;ifndef ROMDOS
 24452                                  
 24453                                  AllocMemForDOS:
 24454                                  	; 11/12/2022
 24455                                  	; 14/05/2019
 24456                                  	; 27/03/2019 - Retro DOS v4.0
 24457                                  	; ds = cs
 24458                                  	;mov	ax,BCode_end
 24459                                  	;sub	ax,BCode_start		; BIOS code size
 24460                                  	; 23/10/2022
 24461 00000B0F B8701D                  	mov	ax,BCODE_END ; 1A60h	; 1A70h for MSDOS 6.21
 24462                                  					; 30/12/2022
 24463                                  	;mov	ax,1E00h ; PCDOS 7.1 IBMBIO.COM ; 08/04/2024
 24464                                  	;sub	ax,BCODE_START ; 30h
 24465                                  	; 09/12/2022
 24466 00000B12 2D[3000]                	sub	ax,BCODESTART ; sub ax,30h ; 08/04/2024
 24467                                  	; 24/03/2019 - Retro DOS v4.0 
 24468                                  	; 02/11/2022
 24469                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 24470                                  	; 11/12/2022
 24471                                  	; ds = cs
 24472 00000B15 0306[8102]              	add	ax,[lo_doscod_size]
 24473 00000B19 83C00F                  	add	ax,15
 24474 00000B1C E87B02                  	call	off_to_para			; convert to para
 24475                                  	; 23/10/2022
 24476                                  	; 14/05/2019
 24477                                  	;inc	ax ; + 1 paragraph for MCB
 24478 00000B1F 09DB                    	or	bx,bx				; M012
 24479 00000B21 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 24480 00000B23 741A                    	jz	short update_arena		; M012
 24481 00000B25 B448                    	mov	ah,48h				; request DOS
 24482 00000B27 CD21                    	int	21h
 24483 00000B29 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 24484                                   	; 23/10/2022
 24485                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 24486 00000B2B 83E803                  	sub	ax,3				; Take care ORG 30h of
 24487                                  						;  BIOS code
 24488 00000B2E 8EC0                    	mov	es,ax
 24489                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 24490                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 24491                                  	; 14/05/2019
 24492                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 24493                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 24494                                  	; 08/04/2024 (PCDOS 7.1 IBMBIO.COM)
 24495                                  	; 23/10/2022
 24496 00000B30 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 24497 00000B37 26C70628005343          	mov	word [es:20h+8],'SC' ; 4353h	;  code area
 24498                                  
 24499 00000B3E C3                      	retn
 24500                                  
 24501                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 24502                                  ;	  using DOS itself causes an arena to be generated.
 24503                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 24504                                  ;	  assume that the device drivers are loaded into
 24505                                  ;	  the first arena. For this reason, MagicDrv's
 24506                                  ;	  main device driver header arena is manually
 24507                                  ;	  truncated from the arena chain, and the space
 24508                                  ;	  for DOS is allocated using the following
 24509                                  ;	  simple code, which also assumes that the
 24510                                  ;	  first arena is the free one where DOS's low
 24511                                  ;	  stub will go.
 24512                                  ;
 24513                                  ; M012 : BEGIN
 24514                                  
 24515                                  	; 23/10/2022
 24516                                  update_arena:
 24517 00000B3F 1E                      	push	ds ; ds = cs
 24518 00000B40 57                      	push	di
 24519 00000B41 51                      	push	cx
 24520 00000B42 52                      	push	dx
 24521                                  	; 23/10/2022
 24522                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 24523                                  	; 11/12/2022
 24524                                  	; ds = cs 
 24525 00000B43 C53E[6D02]              	lds	di,[DOSINFO] ; 27/03/2019	
 24526 00000B47 4F                      	dec	di
 24527 00000B48 4F                      	dec	di				; Arena head is immediately
 24528                                  						;  before sysvar
 24529 00000B49 8E05                    	mov	es,[di]				; es = arena head
 24530                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 24531 00000B4B 268B0E0300              	mov	cx,[es:3]
 24532 00000B50 39D9                    	cmp	cx,bx				; is it sufficient ?
 24533 00000B52 7227                    	jb	short FatalErr			; no, fatal error
 24534                                  
 24535                                  	;mov	dl,[es:ARENA.SIGNATURE]
 24536 00000B54 268A160000              	mov	dl,[es:0]
 24537 00000B59 8CC0                    	mov	ax,es
 24538 00000B5B 01D8                    	add	ax,bx				; ax = new arena head
 24539 00000B5D 8905                    	mov	[di],ax				; store it in DOS data area
 24540 00000B5F 8ED8                    	mov	ds,ax
 24541                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 24542 00000B61 88160000                	mov	[0],dl
 24543                                  	;mov	word [ARENA.OWNER],0		; free
 24544 00000B65 C70601000000            	mov	word [1],0
 24545 00000B6B 29D9                    	sub	cx,bx				; size of the new block
 24546                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 24547 00000B6D 890E0300                	mov	[3],cx
 24548 00000B71 8CC0                    	mov	ax,es				; return seg to the caller
 24549                                  	; 23/10/2022
 24550                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 24551 00000B73 83E803                  	sub	ax,3				;  BIOS code
 24552 00000B76 5A                      	pop	dx
 24553 00000B77 59                      	pop	cx
 24554 00000B78 5F                      	pop	di
 24555 00000B79 1F                      	pop	ds ; ds = cs
 24556 00000B7A C3                      	retn
 24557                                  ;
 24558                                  ; M012 : END
 24559                                  ;
 24560                                  FatalErr:
 24561 00000B7B 0E                      	push	cs
 24562 00000B7C 1F                      	pop	ds
 24563 00000B7D BA[480A]                	mov	dx,FEmsg
 24564 00000B80 B409                    	mov	ah,9
 24565 00000B82 CD21                    	int	21h 		; DOS - PRINT STRING
 24566                                  				; DS:DX -> string terminated by "$"
 24567                                  	; 30/12/2022 (MSDOS 6.21 SYSINIT)
 24568 00000B84 E9C707                  	jmp	stall
 24569                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 24570                                  	;cli
 24571                                  	;hlt
 24572                                  
 24573                                  ;endif ;ROMDOS
 24574                                  
 24575                                  ; 25/03/2019 - Retro DOS v4.0
 24576                                  
 24577                                  ; ----------------------------------------------------------------------
 24578                                  ;
 24579                                  ; procedure : AllocHMA
 24580                                  ;
 24581                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 24582                                  ;	  up there. If it gets any sort of error, it will return with
 24583                                  ;	  carry set so that we can resort to running low.
 24584                                  ;
 24585                                  ;	It also returns ES: -> 0ffffh if it returns success
 24586                                  ;
 24587                                  ; ----------------------------------------------------------------------
 24588                                  
 24589                                  AllocHMA:
 24590                                  ;	cas note:  The pre-286 check is no longer needed here since the
 24591                                  ;		   presence of XMS is sufficient. However, this code hasn't
 24592                                  ;		   been deleted because it can be recycled for skipping the
 24593                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 24594                                  ;		   in the case of a pre-286.
 24595                                  
 24596                                  ;;	see if we're running on a pre-286. If not, force low.
 24597                                  ;
 24598                                  ;	xor	ax,ax
 24599                                  ;	pushf			; save flags (like int)
 24600                                  ;	push	ax
 24601                                  ;	popf
 24602                                  ;	pushf
 24603                                  ;	pop	ax
 24604                                  ;	popf			; restore original flags (like int)
 24605                                  ;	and	ax,0F000h
 24606                                  ;	cmp	ax,0F000h	; 8088/8086?
 24607                                  ;	jz	short grab_hma_error
 24608                                  
 24609                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24610                                  	; (SYSINIT:0A26h)
 24611                                  
 24612                                  	; 13/04/2024 - Retro DOS v5.0
 24613                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0C41h) 
 24614                                  
 24615 00000B87 1E                      	push	ds
 24616                                  	;;mov	ax,Bios_Data
 24617                                  	;mov	ax,KERNEL_SEGMENT
 24618                                  	; 21/10/2022
 24619 00000B88 B87000                  	mov	ax,DOSBIODATASEG ; 70h
 24620 00000B8B 8ED8                    	mov	ds,ax
 24621                                  
 24622 00000B8D E84A00                  	call	IsXMSLoaded
 24623 00000B90 7545                    	jnz	short grabhma_error
 24624                                  
 24625 00000B92 B81043                  	mov	ax,4310h
 24626 00000B95 CD2F                    	int	2Fh		; get the vector into es:bx
 24627                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 24628                                  		; Return: ES:BX -> driver entry point
 24629                                  
 24630 00000B97 891E[0E00]              	mov	[xms],bx
 24631                                  	;mov	[0Eh], bx
 24632 00000B9B 8C06[1000]              	mov	[xms+2],es
 24633                                  	;mov	[10h],es
 24634                                  
 24635 00000B9F B401                    	mov	ah,1		; request HMA
 24636 00000BA1 BAFFFF                  	mov	dx,0FFFFh
 24637                                  	;call	dword ptr ds:0Eh
 24638 00000BA4 FF1E[0E00]              	call	far [xms]
 24639 00000BA8 48                      	dec	ax
 24640 00000BA9 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 24641                                  
 24642                                  ;------ Himem may be lying because it has allocated mem for int 15
 24643                                  
 24644 00000BAB B488                    	mov	ah,88h
 24645 00000BAD CD15                    	int	15h
 24646                                  		; Get Extended Memory Size
 24647                                  		; Return: CF clear on success
 24648                                  		; AX = size of memory above 1M in K
 24649 00000BAF 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 24650                                  	;jb	short grabhma_error
 24651                                  	; 11/12/2022
 24652 00000BB2 7224                    	jb	short grabhma_err ; cf=1
 24653                                  allocHMA_1:
 24654 00000BB4 B405                    	mov	ah,5		; localenableA20
 24655                                  	;call	dword ptr ds:0Eh
 24656 00000BB6 FF1E[0E00]              	call	far [xms]
 24657 00000BBA 48                      	dec	ax
 24658 00000BBB 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 24659                                  
 24660 00000BBD E89D01                  	call	IsVDiskInstalled
 24661 00000BC0 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 24662                                  
 24663 00000BC2 B8FFFF                  	mov	ax,0FFFFh
 24664 00000BC5 8EC0                    	mov	es,ax
 24665 00000BC7 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 24666 00000BCE 26813E10003412          	cmp	word [es:10h],1234h
 24667                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 24668                                  	; 11/12/2022
 24669 00000BD5 7401                    	je	short allocHMA_ok	
 24670                                  
 24671                                  ; 11/12/2022
 24672                                  ;	; 11/12/2022
 24673                                  ;	; cf=0
 24674                                  ;	;clc
 24675                                  ;	pop	ds
 24676                                  ;	retn
 24677                                  
 24678                                  grabhma_error:
 24679 00000BD7 F9                      	stc
 24680                                  	; 11/12/022
 24681                                  grabhma_err:	; cf=1
 24682                                  allocHMA_ok:	; cf=0
 24683 00000BD8 1F                      	pop	ds
 24684 00000BD9 C3                      	retn
 24685                                  
 24686                                  ; ----------------------------------------------------------------------
 24687                                  ;
 24688                                  ; procedure : IsXMSLoaded
 24689                                  ;
 24690                                  ;             Checks whether a XMS driver is loaded
 24691                                  ;
 24692                                  ; Returns : Z flag set if XMS driver loaded
 24693                                  ;           Z flag reset if no XMS drivers are present
 24694                                  ;
 24695                                  ; ----------------------------------------------------------------------
 24696                                  
 24697                                  IsXMSLoaded:
 24698 00000BDA B80043                  	mov	ax,4300h
 24699 00000BDD CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 24700                                  				; Return: AL = 80h XMS driver installed
 24701                                  				; AL <> 80h no driver
 24702 00000BDF 3C80                    	cmp	al,80h		; XMS installed?
 24703 00000BE1 C3                      	retn
 24704                                  
 24705                                  ; ----------------------------------------------------------------------
 24706                                  ; procedure : FTryToMovDOSHi
 24707                                  ;
 24708                                  ;		Called from HMA suballoc calls
 24709                                  ;	
 24710                                  ; ----------------------------------------------------------------------
 24711                                  
 24712                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24713                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0A84h)
 24714                                  
 24715                                  	; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 24716                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0C9Fh)
 24717                                  
 24718                                  	; ((MSDOS 6.22 IO.SYS - SYSINIT:0B8Ch))
 24719                                  
 24720                                  FTryToMovDOSHi:	; proc	far
 24721                                  
 24722 00000BE2 50                      	push	ax
 24723 00000BE3 53                      	push	bx
 24724 00000BE4 51                      	push	cx
 24725 00000BE5 52                      	push	dx
 24726 00000BE6 56                      	push	si
 24727 00000BE7 57                      	push	di
 24728 00000BE8 1E                      	push	ds
 24729 00000BE9 06                      	push	es
 24730                                  
 24731                                  	; 23/10/2022
 24732                                  	; 27/03/2019 - Retro DOS v4.0
 24733                                  	; 11/12/2022
 24734 00000BEA 0E                      	push	cs
 24735 00000BEB 1F                      	pop	ds
 24736                                  
 24737                                  	;cmp	byte [cs:runhigh],0FFh
 24738                                  	; 11/12/2022
 24739 00000BEC 803E[6C02]FF            	cmp	byte [runhigh],0FFh
 24740 00000BF1 7503                    	jne	short _ftymdh_1
 24741                                  
 24742                                  	; ds = cs
 24743 00000BF3 E8A2FE                  	call	TryToMovDOSHi
 24744                                  _ftymdh_1:
 24745 00000BF6 07                      	pop	es
 24746 00000BF7 1F                      	pop	ds
 24747 00000BF8 5F                      	pop	di
 24748 00000BF9 5E                      	pop	si
 24749 00000BFA 5A                      	pop	dx
 24750 00000BFB 59                      	pop	cx
 24751 00000BFC 5B                      	pop	bx
 24752 00000BFD 58                      	pop	ax
 24753                                  
 24754 00000BFE CB                      	retf
 24755                                  
 24756                                  ; ----------------------------------------------------------------------
 24757                                  ;
 24758                                  ; following piece of code will be moved into a para boundary. And the para
 24759                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 24760                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 24761                                  ; to determine free extended memory.
 24762                                  ;
 24763                                  ; For more details read "power programming" column by Ray Duncan in the
 24764                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 24765                                  ;
 24766                                  ; ----------------------------------------------------------------------
 24767                                  
 24768                                  	; 30/12/2023 - Retro DOS 5.0
 24769 00000BFF 00                      	db	0
 24770                                  
 24771                                  ; 13/04/2024
 24772                                  ;align 2
 24773                                  
 24774                                  	; 30/12/2023
 24775                                  	; PCDOS v7.1 IBMBIO.COM, SYSYINIT:0CBCh
 24776                                  
 24777                                  StartVDHead:
 24778                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 24779                                  
 24780 00000C00 00000000                	dd	0		; link to next device driver
 24781 00000C04 0080                    	dw	8000h		; device attribute
 24782 00000C06 0000                    	dw	0		; strategy routine offset
 24783 00000C08 0000                    	dw	0		; interrupt routine offset
 24784 00000C0A 01                      	db	1		; number of units
 24785                                  	;db	7 dup(0) 
 24786 00000C0B 00<rep 7h>              	times	7 db 0 		; reserved area
 24787                                  VDiskSig1:
 24788 00000C12 564449534B              	db	'VDISK'
 24789                                  
 24790                                  VLEN1	equ	($-VDiskSig1)
 24791                                  
 24792 00000C17 202056332E33            	db	'  V3.3'	; vdisk label
 24793                                  	;db	15 dup (0)	; pad
 24794 00000C1D 00<rep Fh>              	times	15 db 0
 24795 00000C2C 0000                    	dw	0		; bits 0-15 of free HMA
 24796 00000C2E 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 24797                                  VDInt19:
 24798 00000C2F EA                      	db	0EAh		; jmp to old vector
 24799                                  OldVDInt19:
 24800 00000C30 00000000                	dd	0		; Saved int 19 vector
 24801                                  
 24802                                  EndVDHead: ; label byte
 24803                                  
 24804                                  VDiskHMAHead:	
 24805 00000C34 000000                  	db	0,0,0		; non-bootable disk
 24806                                  VDiskSig2:
 24807 00000C37 564449534B              	db	'VDISK'
 24808                                  
 24809                                  VLEN2	equ	($-VDiskSig2)
 24810                                  
 24811 00000C3C 332E33                  	db	'3.3'		; OEM - signature
 24812 00000C3F 8000                    	dw	128		; number of bytes/sector
 24813 00000C41 01                      	db	1		; sectors/cluster
 24814 00000C42 0100                    	dw	1		; reserved sectors
 24815 00000C44 01                      	db	1		; number of FAT copies
 24816 00000C45 4000                    	dw	64		; number of root dir entries
 24817 00000C47 0002                    	dw	512		; number of sectors
 24818 00000C49 FE                      	db	0FEh		; media descriptor
 24819 00000C4A 0600                    	dw	6		; number of sectors/FAT
 24820 00000C4C 0800                    	dw	8		; sectors per track
 24821 00000C4E 0100                    	dw	1		; number of heads
 24822 00000C50 0000                    	dw	0		; number of hidden sectors
 24823 00000C52 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 24824                                  
 24825                                  EndVDiskHMAHead: ; label byte
 24826                                  
 24827                                  ; ----------------------------------------------------------------------
 24828                                  ;
 24829                                  ; procedure : InstVDiskHeader
 24830                                  ;
 24831                                  ;             Installs the VDISK header to reserve the 64k of HMA
 24832                                  ;	      It puts a 32 byte header at 10000:0 and
 24833                                  ;	      another header at (seg of int19):0
 24834                                  ;
 24835                                  ; Inputs : None
 24836                                  ;
 24837                                  ; Outputs : None
 24838                                  ;
 24839                                  ; USES : DS,SI,AX,CX,DX
 24840                                  ;
 24841                                  ; ----------------------------------------------------------------------
 24842                                  
 24843                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24844                                  
 24845                                  InstVDiskHeader:
 24846 00000C54 31C0                    	xor	ax,ax
 24847 00000C56 8ED8                    	mov	ds,ax			; seg of int vect table
 24848                                  
 24849                                  ;-------------- save old int 19 vector
 24850                                  
 24851                                  	; 23/10/2022
 24852 00000C58 A16400                  	mov	ax,[19h*4]
 24853                                  	;mov	[OldVDInt19],ax
 24854 00000C5B 2EA3[300C]              	mov	[cs:OldVDInt19],ax
 24855 00000C5F A16600                  	mov	ax,[19h*4+2]
 24856                                  	;mov	[OldVDInt19+2],ax
 24857 00000C62 2EA3[320C]              	mov	[cs:OldVDInt19+2],ax
 24858                                  
 24859                                  ;-------------- calculate seg of new int 19 handler
 24860                                  
 24861 00000C66 B448                    	mov	ah,48h			; allocate memory
 24862                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 24863                                  	; 23/10/2022
 24864 00000C68 BB0400                  	mov	bx,4
 24865 00000C6B CD21                    	int	21h
 24866                                  
 24867                                  ;	if carry, fatal hanging error!!!!!
 24868                                  
 24869 00000C6D 48                      	dec	ax			; point to arena
 24870 00000C6E 8EC0                    	mov	es,ax
 24871                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 24872 00000C70 26C70601000800          	mov	word [es:1],8
 24873                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 24874 00000C77 26C70608005343          	mov	word [es:8],'SC' ; 4353h
 24875 00000C7E 40                      	inc	ax
 24876 00000C7F 8EC0                    	mov	es,ax			; get back to allocated memory
 24877                                  
 24878                                  ;-------------- install new int 19 vector
 24879                                  
 24880 00000C81 FA                      	cli				; no reboots at this time
 24881                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 24882 00000C82 C70664002F00            	mov	word [19h*4],47
 24883 00000C88 A36600                  	mov	[19h*4+2],ax
 24884                                  
 24885                                  ;-------------- move the code into proper place
 24886                                  
 24887                                  	;mov	cx,(EndVDHead-StartVDHead)
 24888 00000C8B B93400                  	mov	cx,52
 24889 00000C8E BE[000C]                	mov	si,StartVDHead
 24890 00000C91 31FF                    	xor	di,di
 24891 00000C93 0E                      	push	cs
 24892 00000C94 1F                      	pop	ds
 24893 00000C95 FC                      	cld
 24894 00000C96 F3A4                    	rep	movsb
 24895 00000C98 FB                      	sti				; BUGBUG is sti OK now?
 24896                                  
 24897                                  ;-------------- mov the HMA VDisk head into HMA
 24898                                  
 24899                                  	; 23/10/2022
 24900 00000C99 57                      	push	di
 24901 00000C9A 06                      	push	es
 24902                                  
 24903                                  	;mov	ax,0FFFFh
 24904                                  	;mov	es,ax
 24905                                  	; 03/09/2023
 24906 00000C9B 49                      	dec	cx
 24907                                  	; cx = 0FFFFh
 24908 00000C9C 8EC1                    	mov	es,cx
 24909                                  
 24910 00000C9E BF1000                  	mov	di,10h
 24911                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 24912 00000CA1 B92000                  	mov	cx,32
 24913 00000CA4 BE[340C]                	mov	si,VDiskHMAHead
 24914 00000CA7 F3A4                    	rep	movsb			; ds already set to cs
 24915                                  
 24916 00000CA9 5F                      	pop	di
 24917 00000CAA 07                      	pop	es
 24918                                  
 24919 00000CAB C3                      	retn
 24920                                  
 24921                                  ; ----------------------------------------------------------------------
 24922                                  ; procedure : ClrVDISKHeader
 24923                                  ;
 24924                                  ;		Clears the first 32 bytes at 1MB boundary
 24925                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 24926                                  ;		left by previous DOS=HIGH session
 24927                                  ;
 24928                                  ; ----------------------------------------------------------------------
 24929                                  
 24930                                  struc desc
 24931 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 24932 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 24933 00000004 ??                       .hi_byte:	resb 	1		; address
 24934 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 24935 00000006 ????                     .reserved:	resw	1		;
 24936                                   .size:
 24937                                  endstruc
 24938                                  
 24939                                  		; 23/10/2022
 24940                                  bmove:		;label byte
 24941                                  
 24942                                  dummy:		;times desc.size db 0	; desc	<>
 24943 00000CAC 00<rep 8h>              		times 8 db 0		 
 24944                                  gdt:		;times desc.size db 0	; desc	<>
 24945 00000CB4 00<rep 8h>              		times 8 db 0
 24946 00000CBC FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 24947 00000CBE 0000                    		dw	0
 24948 00000CC0 00                      		db	0
 24949 00000CC1 93                      		db	93h
 24950 00000CC2 0000                    		dw	0
 24951 00000CC4 FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 24952 00000CC6 0000                    		dw	0
 24953 00000CC8 10                      		db	10h
 24954 00000CC9 93                      		db	93h
 24955 00000CCA 0000                    		dw	0
 24956                                  
 24957                                  rombios_code:	;times desc.size db 0	; desc	<>
 24958 00000CCC 00<rep 8h>              		times 8 db 0
 24959                                  temp_stack:	;times desc.size db 0	; desc	<>
 24960 00000CD4 00<rep 8h>              		times 8 db 0
 24961                                  
 24962 00000CDC 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 24963                                  
 24964                                  
 24965                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIT1.ASM)
 24966                                  
 24967                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 24968                                  ; (SYSINIT:0CA6h)
 24969                                  
 24970                                  ClrVDISKHeader:	; proc	near
 24971                                  
 24972                                  ;; 04/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 24973                                  ;;-----------------------------------------------------------	      ;I070
 24974                                  ;; The following workaround get around a problem with the	      ;I070
 24975                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 24976                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 24977                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 24978                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 24979                                  ;; move crashes the system. We can do this because these	      ;I070
 24980                                  ;; systems clear all of memory on a cold boot.			      ;I070
 24981                                  ;								      ;I070
 24982                                  ;               in      al,64h         ; Test for password servr mode ;I070
 24983                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 24984                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 24985                                  ;                                      ; Check for Tortugas...	      ;I070
 24986                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 24987                                  ;               je      short ClrVDISKno                              ;I070
 24988                                  ;                                      ; Check for mod 30-286	      ;I070
 24989                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 24990                                  ;               jne     short ClrVDISKok			      ;I070
 24991                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 24992                                  ;								      ;I070
 24993                                  ;ClrVDISKok:							      ;I070
 24994                                  ;-----------------------------------------------------------	      ;I070
 24995                                  
 24996                                  	; 30/12/2023 - Retro DOS v5.0
 24997                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:0DBAh
 24998                                  ClrVDISKHeader:
 24999 00000CFC E464                    	in	al,64h	; 8042 keyboard controller status register
 25000                                  			; 7:  PERR    1=parity error in data received from keyboard
 25001                                  			;    +----------- AT Mode ----------+------------ PS/2 Mode ------------+
 25002                                  			; 6: |RxTO    receive (Rx) timeout  | TO     general timeout (Rx or Tx) |
 25003                                  			; 5: |TxTO    transmit (Tx) timeout | MOBF   mouse output buffer full   |
 25004                                  			;    +------------------------------+-----------------------------------+
 25005                                  			; 4:  INH     0=keyboard communications inhibited
 25006                                  			; 3:  A2      0=60h was the port last written to, 1=64h was last
 25007                                  			; 2:  SYS     distinguishes reset types: 0=cold reboot, 1=warm reboot
 25008                                  			; 1:  IBF     1=input buffer full (keyboard can't accept data)
 25009                                  			; 0:  OBF     1=output buffer full (data from keyboard is available)
 25010 00000CFE A810                    	test	al,10h	; test bit 4 - Is keyboard inhibited?
 25011 00000D00 7511                    	jnz	short ClrVDISKok ; No, go do block move
 25012                                  	; 30/12/2023
 25013                                  	; ds = cs	
 25014 00000D02 813E[BB02]F819          	cmp	word [sys_model_byte],19F8h ; check for TORTUGA models
 25015 00000D08 7408                    	jz	short ClrVDISKno ; do not use INT 15h block move code
 25016                                  				 ; (while 8042 is disabled)
 25017 00000D0A 813E[BB02]FC09          	cmp	word [sys_model_byte],9FCh ; check for PS/2 30-286 model
 25018 00000D10 7501                    	jnz	short ClrVDISKok
 25019                                  ClrVDISKno:
 25020 00000D12 C3                      	retn
 25021                                  ; ---------------------------------------------------------------------------
 25022                                  	; 30/12/2023
 25023                                  ClrVDISKok:
 25024                                  	; 12/12/2022
 25025                                  	; ds = cs
 25026                                  
 25027                                  	; 30/12/2022 - Retro DOS v4.2
 25028                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0CBFh)
 25029                                  
 25030 00000D13 06                      	push	es
 25031 00000D14 8CC8                    	mov	ax,cs
 25032 00000D16 89C2                    	mov	dx,ax
 25033 00000D18 B10C                    	mov	cl,12
 25034 00000D1A D3EA                    	shr	dx,cl
 25035 00000D1C B104                    	mov	cl,4
 25036 00000D1E D3E0                    	shl	ax,cl
 25037 00000D20 05[DC0C]                	add	ax,ClrdVDISKHead
 25038 00000D23 80D200                  	adc	dl,0
 25039                                  
 25040                                  	;; 23/10/2022
 25041                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 25042                                  	;mov	[cs:src_desc+2],ax
 25043                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 25044                                  	;mov	[cs:src_desc+4],dl
 25045                                  	; 12/12/2022
 25046                                  	;mov	[src_desc+desc.lo_word],ax
 25047 00000D26 A3[BE0C]                	mov	[src_desc+2],ax
 25048                                  	;mov	[src_desc+desc.hi_byte],dl
 25049 00000D29 8816[C00C]              	mov	[src_desc+4],dl
 25050                                  
 25051 00000D2D B91000                  	mov	cx,16	; 16 words
 25052 00000D30 0E                      	push	cs
 25053 00000D31 07                      	pop	es
 25054 00000D32 BE[AC0C]                	mov	si,bmove
 25055 00000D35 B487                    	mov	ah,87h
 25056 00000D37 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 25057                                  			; CX = number of words to move 
 25058                                  			; ES:SI -> global descriptor table
 25059                                  			; Return: CF set on error, AH = status
 25060 00000D39 07                      	pop	es
 25061 00000D3A C3                      	retn
 25062                                  
 25063                                  ; ----------------------------------------------------------------------
 25064                                  ;
 25065                                  ; procedure : SaveFreeHMAPtr
 25066                                  ;
 25067                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 25068                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 25069                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 25070                                  ;		the offset.
 25071                                  ;
 25072                                  ; Inputs : ES:DI - pointer to free HMA
 25073                                  ; Output : FreeHMAPtr in BIOS data segment updated
 25074                                  ;
 25075                                  ; ----------------------------------------------------------------------
 25076                                  
 25077                                  SaveFreeHMAPtr:
 25078                                  	; 03/09/2023
 25079 00000D3B 1E                      	push	ds
 25080 00000D3C B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 25081 00000D3F 8ED8                    	mov	ds,ax
 25082                                  	;
 25083 00000D41 8CC3                    	mov	bx,es
 25084 00000D43 B8FFFF                  	mov	ax,0FFFFh	   ; HMA segment
 25085                                  	; 03/09/2023
 25086 00000D46 A2[0D00]                	mov	[inHMA],al ; 0FFh  ; (BIOSDATA:000Dh) ; 08/04/2024
 25087                                  	;
 25088 00000D49 29D8                    	sub	ax,bx
 25089 00000D4B 83C70F                  	add	di,15		   ; para round
 25090 00000D4E 83E7F0                  	and	di,0FFF0h
 25091 00000D51 B104                    	mov	cl,4
 25092 00000D53 D3E0                    	shl	ax,cl
 25093 00000D55 29C7                    	sub	di,ax
 25094                                  	;
 25095                                  	; 03/09/2023
 25096                                  	;push	ds
 25097                                  	;;mov	ax,Bios_Data ; 0070h
 25098                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 25099                                  	; 21/10/2022
 25100                                  	; 03/09/2023
 25101                                  	;mov	ax,DOSBIODATASEG ; 0070h
 25102                                  	;mov	ds,ax
 25103                                  		; (BIOSDATA:07D7h for PCDOS 7.1 IBMBIO.COM) ; 08/04/2024
 25104 00000D57 893E[D707]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 25105                                  	;mov	byte [inHMA],0FFh  ; (ds:0Dh)
 25106 00000D5B 1F                      	pop	ds
 25107 00000D5C C3                      	retn
 25108                                  
 25109                                  ; ----------------------------------------------------------------------
 25110                                  ;
 25111                                  ; procedure : IsVDiskInstalled
 25112                                  ;
 25113                                  ;		Checks for the presence of VDISK header at 1MB boundary
 25114                                  ;		& INT 19 vector
 25115                                  ;
 25116                                  ; Inputs  : A20 flag should be ON
 25117                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 25118                                  ;
 25119                                  ; ----------------------------------------------------------------------
 25120                                  
 25121                                  IsVDiskInstalled:
 25122 00000D5D 31C0                    	xor	ax,ax
 25123 00000D5F 8ED8                    	mov	ds,ax
 25124 00000D61 8E1E4E00                	mov	ds,[19*4+2]
 25125                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 25126                                  	; 23/10/2022
 25127 00000D65 BE1200                  	mov	si,12h ; 18
 25128                                  	;mov	cx,VLEN1 ; 5
 25129 00000D68 B90500                  	mov	cx,5
 25130 00000D6B 0E                      	push	cs
 25131 00000D6C 07                      	pop	es
 25132 00000D6D BF[120C]                	mov	di,VDiskSig1
 25133 00000D70 F3A6                    	rep	cmpsb
 25134 00000D72 740F                    	je	short ivdins_retn
 25135 00000D74 B8FFFF                  	mov	ax,0FFFFh
 25136 00000D77 8ED8                    	mov	ds,ax
 25137                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 25138 00000D79 BE1300                  	mov	si,13h
 25139 00000D7C BF[370C]                	mov	di,VDiskSig2
 25140                                  	;;mov	cx,VLEN2  ; 5
 25141                                  	;mov	cx,5
 25142                                  	; 03/09/2023
 25143 00000D7F B105                    	mov	cl,5
 25144 00000D81 F3A6                    	rep	cmpsb
 25145                                  ivdins_retn: 
 25146 00000D83 C3                      	retn			; returns the Zero flag
 25147                                  
 25148                                  ; ----------------------------------------------------------------------
 25149                                  ;
 25150                                  ; procedure : CPMHack
 25151                                  ;
 25152                                  ;		Copies the code from 0:c0 into ffff:0d0h
 25153                                  ;		for CPM compatibility
 25154                                  ;
 25155                                  ; ----------------------------------------------------------------------
 25156                                  
 25157                                  	; 11/12/2022
 25158                                  CPMHack:
 25159 00000D84 1E                      	push	ds
 25160 00000D85 B9FFFF                  	mov	cx,0FFFFh
 25161 00000D88 8EC1                    	mov	es,cx		; ES = FFFF
 25162                                  	;xor	cx,cx
 25163                                  	; 11/12/2022
 25164 00000D8A 41                      	inc	cx  ; cx = 0
 25165 00000D8B 8ED9                    	mov	ds,cx		; DS = 0
 25166 00000D8D BEC000                  	mov	si,0C0h
 25167 00000D90 BFD000                  	mov	di,0D0h
 25168                                  	;mov	cx,5
 25169 00000D93 B105                    	mov	cl,5
 25170 00000D95 FC                      	cld
 25171 00000D96 F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 25172 00000D98 1F                      	pop	ds
 25173 00000D99 C3                      	retn
 25174                                  
 25175                                  ; ----------------------------------------------------------------------
 25176                                  ;
 25177                                  ; procedure : off_to_para
 25178                                  ;
 25179                                  ; ----------------------------------------------------------------------
 25180                                  off_to_para:
 25181 00000D9A D1E8                    	shr	ax,1
 25182 00000D9C D1E8                    	shr	ax,1
 25183 00000D9E D1E8                    	shr	ax,1
 25184 00000DA0 D1E8                    	shr	ax,1
 25185 00000DA2 C3                      	retn
 25186                                  
 25187                                  ; ----------------------------------------------------------------------
 25188                                  ;**	TempCDS - Create (Temporary?) CDS
 25189                                  ;
 25190                                  ;	ENTRY	?? BUGBUG
 25191                                  ;		(DS) = SysInitSeg
 25192                                  ;	EXIT	?? BUGBUG
 25193                                  ;	USES	?? BUGBUG
 25194                                  ; ----------------------------------------------------------------------
 25195                                  
 25196                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25197                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25198                                  	; 30/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 25199                                  TempCDS:
 25200 00000DA3 C43E[6D02]              	les	di,[DOSINFO]
 25201 00000DA7 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 25202                                  
 25203                                  	;mov	cl,[es:di+20h]
 25204 00000DAB 30ED                    	xor	ch,ch			; (cx) = # of block devices
 25205                                  
 25206 00000DAD 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 25207                                  	;mov	[es:di+21h],cl	
 25208                                  
 25209                                  	;mov	al,cl
 25210                                  	;mov	ah,curdirlen ; curdir_list.size ; 88
 25211                                  	;;mov	ah,88
 25212                                  	;mul	ah			; (ax) = byte size for those CDSs
 25213                                  	; 30/12/2023
 25214 00000DB1 B058                    	mov	al,curdirlen ; curdir_list.size ; 88
 25215                                  	;mov	al,88
 25216 00000DB3 F6E1                    	mul	cl			; (ax) = byte size for those CDSs
 25217                                  
 25218 00000DB5 E85D05                  	call	ParaRound		; (ax) = paragraph size for CDSs
 25219 00000DB8 8B36[A702]              	mov	si,[top_of_cdss] ; 31/12/2022
 25220                                  
 25221                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 25222                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 25223                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 25224                                  ;		   variable which has the top of free memory for
 25225                                  ;		   device driver loads, etc.
 25226                                  
 25227 00000DBC 29C6                    	sub	si,ax
 25228                                  
 25229                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 25230                                  ;		that automatically updates alloclim every time we
 25231                                  ;		set up some new CDSs. Instead, I've added code
 25232                                  ;		which pre-allocates space for 26 CDSs. This
 25233                                  ;	        way we've got room for worst case CDSs before
 25234                                  ;		we place MagicDrv.sys
 25235                                  ;
 25236                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 25237                                  
 25238                                  	; 30/12/2022
 25239                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25240                                  	; (SYSINIT:0C52h)
 25241                                  	;mov	[ALLOCLIM],si ; (MSDOS 5.0 SYSINIT)
 25242                                  
 25243 00000DBE 26897518                	mov	[es:di+SYSI_CDS+2],si
 25244                                  	;mov	[es:di+18h],si
 25245 00000DC2 89F0                    	mov	ax,si
 25246 00000DC4 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 25247                                  	;mov	[word es:di+16h],0
 25248                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 25249 00000DCA 26C535                  	lds	si,[es:di]
 25250 00000DCD 8EC0                    	mov	es,ax
 25251 00000DCF 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 25252                                  
 25253                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 25254                                  ;	info from the corresponding DPB.
 25255                                  ;
 25256                                  ;	(cx) = count of CDSs left to process
 25257                                  ;	(es:di) = address of next CDS
 25258                                  
 25259                                  fooset:
 25260                                  	; 23/10/2022
 25261 00000DD1 2EA1[A902]              	mov	ax,[cs:DirStrng] ; "A:"
 25262 00000DD5 AB                      	stosw				; setup the root as the curdir
 25263                                  	
 25264                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 25265                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 25266                                  
 25267                                  	; 30/12/2022
 25268                                  	; (MSDOS 6.21 SYSINIT:0D8Bh)
 25269 00000DD6 E85200                  	call	get_dpb_for_drive_al	; get dpb for drive in dpb
 25270                                  
 25271                                  ;	(ds:si) = address of DPB
 25272                                  ;		 (si) = -1 if no drive
 25273                                  
 25274 00000DD9 2EA1[AB02]              	mov	ax,[cs:DirStrng+2] ; "\",0
 25275 00000DDD AB                      	stosw
 25276 00000DDE 2EFE06[A902]            	inc	byte [cs:DirStrng]
 25277 00000DE3 31C0                    	xor	ax,ax ; 0
 25278 00000DE5 51                      	push	cx
 25279                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 25280 00000DE6 B93F00                  	mov	cx,63	; 23/10/2022
 25281 00000DE9 F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 25282                                  
 25283                                  ;	should handle the system that does not have any floppies.
 25284                                  ;	in this case,we are going to pretended there are two dummy floppies
 25285                                  ;	in the system. still they have dpb and cds,but we are going to
 25286                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 25287                                  ;	"invalid drive specification" message when the user try to
 25288                                  ;	access them.
 25289                                  ;
 25290                                  ;	(ax) = 0
 25291                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 25292                                  ;	(ds:si) = Next DPB (-1 if none)
 25293                                  
 25294 00000DEB 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 25295 00000DEE 740C                    	je	short fooset_zero	; don't have any physical drive.
 25296                                  
 25297                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 25298                                  ;	if we are faking floppy drives then see if this cds being initialised
 25299                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 25300                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 25301                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 25302                                  ;	for dpb offsets look at inc\dpb.inc.
 25303                                  
 25304                                  	; 03/09/2023
 25305 00000DF0 41                      	inc	cx  ; cx = 1
 25306                                  
 25307 00000DF1 2E380E[8B02]            	cmp	[cs:fake_floppy_drv],cl ; 1 ; 03/09/2023
 25308                                  	;cmp	byte [cs:fake_floppy_drv],1
 25309 00000DF6 750A                    	jne	short normcds 		; machine has floppy drives
 25310                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 25311                                  	;cmp	byte [si],1
 25312 00000DF8 380C                    	cmp	[si],cl ; 1 ; 03/09/2023
 25313 00000DFA 7706                    	ja	short normcds
 25314                                  
 25315                                  	; 30/12/2023
 25316                                  	; ax = 0
 25317                                  fooset_zero:
 25318 00000DFC B103                    	mov	cl,3			; the next dbp pointer
 25319                                  					; AX should be zero here
 25320 00000DFE F3AB                    	rep	stosw
 25321                                  	; 30/12/2023
 25322                                  	;pop	cx
 25323 00000E00 EB0F                    	jmp	short get_next_dpb ; findcds
 25324                                  
 25325                                  ;	(ax) = 0
 25326                                  
 25327                                  	; 30/12/2023
 25328                                  ;fooset_zero:
 25329                                  	;mov	cl,3
 25330                                  	;rep	stosw
 25331                                  	;pop	cx
 25332                                  	;jmp	short fincds
 25333                                  
 25334                                  ;*	We have a "normal" DPB and thus a normal CDS.
 25335                                  ;
 25336                                  ;	(ax) = 0
 25337                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 25338                                  ;	(ds:si) = Next DPB (-1 if none)
 25339                                  
 25340                                  normcds:
 25341                                  	; 30/12/2023
 25342                                  	;pop	cx
 25343                                  
 25344                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 25345                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 25346                                  ;	this media is a non-fat based one.
 25347                                  
 25348                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 25349                                  	; 23/10/2022
 25350                                  	;cmp	byte [si+8],0
 25351                                  	; 03/09/2023 (ax=0)
 25352 00000E02 384408                  	cmp	[si+8],al ; 0
 25353 00000E05 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 25354 00000E07 B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 25355                                  	;mov	ax,4000h
 25356                                  setnormcds:
 25357 00000E0A AB                      	stosw				; curdir_flags
 25358 00000E0B 89F0                    	mov	ax,si
 25359 00000E0D AB                      	stosw				; curdir_devptr
 25360 00000E0E 8CD8                    	mov	ax,ds
 25361 00000E10 AB                      	stosw
 25362                                  
 25363                                  get_next_dpb:				; entry point for fake_fooset_zero
 25364                                  	; 30/12/2022
 25365                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 25366                                  	; 23/10/2022
 25367                                  	;lds	si,[si+19h] ; (MSDOS 5.0 SYSINIT)
 25368                                  	;;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 25369                                  fincds:	; get_next_dpb
 25370                                  	; 30/12/2023
 25371 00000E11 59                      	pop	cx
 25372                                  	; 30/12/2022
 25373                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 25374 00000E12 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 25375 00000E15 AB                      	stosw				; curdir_id
 25376 00000E16 AB                      	stosw				; curdir_id
 25377 00000E17 AB                      	stosw				; curdir_user_word
 25378 00000E18 B80200                  	mov	ax,2
 25379 00000E1B AB                      	stosw				; curdir_end
 25380 00000E1C B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 25381 00000E1E AA                      	stosb
 25382 00000E1F AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 25383 00000E20 AB                      	stosw
 25384 00000E21 AB                      	stosw
 25385                                  
 25386 00000E22 E2AD                    	loop	fooset
 25387                                  	
 25388 00000E24 2EC606[A902]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 25389                                  	
 25390 00000E2A C3                      	retn
 25391                                  
 25392                                  ; ----------------------------------------------------------------------
 25393                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 25394                                  ;
 25395                                  ;	entry:
 25396                                  ;	   al == ASCII CAPS drive letter
 25397                                  ;
 25398                                  ;	exit:
 25399                                  ;	   ds:si -> DPB, or si = -1 if not found
 25400                                  ; ----------------------------------------------------------------------
 25401                                  
 25402                                  ; 30/12/2023
 25403                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:0EFEh
 25404                                  
 25405                                  	; 30/12/2022
 25406                                  	; (MSDOS 6.21 SYSINIT:0DEAh)
 25407                                  	; 23/10/2022
 25408                                  get_dpb_for_drive_al:
 25409 00000E2B 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; point to first DPB
 25410                                  	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 25411 00000E30 C534                    	lds	si,[si]
 25412 00000E32 2C41                    	sub	al,'A'
 25413                                  
 25414                                  get_dpb_for_drive_1:
 25415                                  	;cmp	al,[si+DPB.DRIVE]	; match?
 25416 00000E34 3A04                    	cmp	al,[si]
 25417 00000E36 7408                    	je	short got_dpb_for_drive	;  done if so
 25418                                  
 25419 00000E38 C57419                  	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 25420 00000E3B 83FEFF                  	cmp	si,-1
 25421 00000E3E 75F4                    	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 25422                                  
 25423                                  got_dpb_for_drive:
 25424 00000E40 C3                      	retn
 25425                                  
 25426                                  ;=======================================================================
 25427                                  
 25428                                  ;**	EndFile - Build DOS structures
 25429                                  ;
 25430                                  ; This procedure is called after the config.sys has been processed and
 25431                                  ; installable device drivers have been loaded (but before "install="
 25432                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 25433                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 25434                                  ; to allow for the safe EXECing of "install=" programs. All memory
 25435                                  ; above these structures is deallocated back to DOS.
 25436                                  ;
 25437                                  ;	ENTRY	?? BUGBUG
 25438                                  ;	EXIT	?? BUGBUG
 25439                                  ;	USES	?? BUGBUG
 25440                                  
 25441                                  ;=======================================================================
 25442                                  ; allocate files
 25443                                  ; ----------------------------------------------------------------------
 25444                                  
 25445                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25446                                  	; (SYSINIT:0CCDh)
 25447                                  
 25448                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25449                                  	; (SYSINIT:0E00h)
 25450                                  
 25451                                  	; 09/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 25452                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:0F14h)
 25453                                  	
 25454                                  	; ((MSDOS 6.22 IO.SYS - SYSINIT:0E00h))
 25455                                  
 25456                                  endfile:
 25457                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 25458                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 25459                                  ; to confbot.
 25460                                  
 25461                                  ;	if this procedure has been called to take care of install= command,
 25462                                  ;	   then we have to save es,si registers.
 25463                                  
 25464                                  	; 11/12/2022
 25465                                  	; ds = cs
 25466                                  
 25467                                  	; 23/10/2022
 25468                                  	; 31/03/2019
 25469 00000E41 1E                      	push	ds
 25470                                  
 25471                                  	;;mov	ax,Bios_Data ; 0070h
 25472                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 25473                                  	; 21/10/2022
 25474 00000E42 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 25475 00000E45 8ED8                    	mov	ds,ax
 25476                                  
 25477                                  	;cmp	word [052Fh],0
 25478 00000E47 833E[A004]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 25479 00000E4C 7505                    	jne	short multrk_flag_done
 25480                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25481                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 25482                                  	; 12/12/2022
 25483 00000E4E 800E[A004]80            	or	byte [multrk_flag],multrk_on ; 80h
 25484                                  multrk_flag_done:
 25485                                  	; 23/10/2022
 25486                                  	; 31/03/2019
 25487 00000E53 1F                      	pop	ds
 25488                                  
 25489                                  	; 11/12/2022
 25490                                  	; ds = cs
 25491                                  	;mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 25492                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25493                                  	; (SYSINIT:0E14h)
 25494 00000E54 A1[A302]                	mov	ax,[CONFBOT]
 25495 00000E57 A3[A502]                	mov	[ALLOCLIM],ax
 25496                                  	; 23/10/2022
 25497                                  	;mov	ax, [cs:top_of_cdss]
 25498                                  	;mov	[cs:ALLOCLIM], ax 
 25499                                  
 25500                                  	; 11/12/2022
 25501                                  	; ds = cs
 25502                                  	;push	cs
 25503                                  	;pop	ds
 25504                                  	
 25505                                  	;mov	ax,[CONFBOT]
 25506                                  	;mov	[ALLOCLIM],ax
 25507                                  
 25508                                  	; 09/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 25509                                  	;;;
 25510                                  	;;mov	ax,[cs:ALLOCLIM]
 25511                                  	;mov	ax,[ALLOCLIM]
 25512                                  	;mov	[cs:prev_alloclim],ax
 25513 00000E5A A3[6C03]                	mov	[prev_alloclim],ax
 25514                                  	;mov	ax,[cs:memhi]
 25515 00000E5D A1[6403]                	mov	ax,[memhi]
 25516                                  	;mov	[cs:prev_memhi],ax
 25517 00000E60 A3[6A03]                	mov	[prev_memhi],ax
 25518                                  dosfts:
 25519                                  	;;;
 25520                                  
 25521 00000E63 E88C39                  	call	round
 25522                                  
 25523                                  	; 11/12/2022
 25524                                  	; ds = cs
 25525 00000E66 A0[9F02]                	mov	al,[FILES]
 25526                                  	; 23/10/2022
 25527                                  	;mov	al,[cs:FILES]
 25528 00000E69 2C05                    	sub	al,5
 25529 00000E6B 764B                    	jbe	short dofcbs
 25530                                  
 25531 00000E6D 50                      	push	ax
 25532                                  	;mov	al,devmark_files ; 'F'
 25533 00000E6E B046                    	mov	al,'F'
 25534 00000E70 E81808                  	call	setdevmark		; set devmark for sfts (files)
 25535 00000E73 58                      	pop	ax
 25536 00000E74 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 25537                                  					;  it does sign extend.
 25538                                  	; 11/12/2022
 25539                                  	; ds = cs
 25540 00000E76 8B1E[6203]              	mov	bx,[memlo]
 25541 00000E7A 8B16[6403]              	mov	dx,[memhi]
 25542 00000E7E C53E[6D02]              	lds	di,[DOSINFO]		;get pointer to dos data
 25543                                  	; 23/10/2022
 25544                                  	;mov	bx,[cs:memlo]
 25545                                  	;mov	dx,[cs:memhi]
 25546                                  	;lds	di,[cs:DOSINFO]		
 25547                                  
 25548                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 25549 00000E82 C57D04                  	lds	di,[di+4]
 25550                                  
 25551                                  	;mov	[di+SF.SFLink],bx
 25552 00000E85 891D                    	mov	[di],bx
 25553 00000E87 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 25554                                  
 25555 00000E8A 0E                      	push	cs
 25556 00000E8B 1F                      	pop	ds
 25557                                  
 25558                                  	; 11/12/2022
 25559                                  	; ds = cs
 25560 00000E8C C43E[6203]              	les	di,[memlo]		;point to new sft
 25561                                  	; 23/10/2022
 25562                                  	;les	di,[cs:memlo]
 25563                                  
 25564                                  	;mov	word [es:di+SF.SFLink],-1
 25565 00000E90 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 25566                                  	;mov	[es:di+SF.SFCount],ax
 25567 00000E95 26894504                	mov	[es:di+4],ax
 25568                                  	; 09/04/2024
 25569 00000E99 B33B                    	mov	bl,SF_ENTRY.size ; 59
 25570                                  	;mov	bl,59
 25571 00000E9B F6E3                    	mul	bl			;ax = number of bytes to clear
 25572 00000E9D 89C1                    	mov	cx,ax
 25573                                  	; 11/12/2022
 25574                                  	; ds = cs
 25575 00000E9F 0106[6203]              	add	[memlo],ax		;allocate memory
 25576                                  	; 23/10/2022
 25577                                  	;add	[cs:memlo],ax
 25578 00000EA3 B80600                  	mov	ax,6
 25579                                  	; 11/12/2022
 25580 00000EA6 0106[6203]              	add	[memlo],ax		;remember the header too
 25581                                  	;add	[cs:memlo],ax
 25582                                  	; 11/12/2022
 25583 00000EAA 800E[6919]02            	or	byte [setdevmarkflag],for_devmark ; 2
 25584                                  	; 23/10/2022
 25585                                  	;or	byte [cs:setdevmarkflag],2
 25586 00000EAF E84039                  	call	round			; check for mem error before the stosb
 25587 00000EB2 01C7                    	add	di,ax
 25588 00000EB4 31C0                    	xor	ax,ax
 25589 00000EB6 F3AA                    	rep	stosb			;clean out the stuff
 25590                                  
 25591                                  ; allocate fcbs
 25592                                  ; ----------------------------------------------------------------------
 25593                                  
 25594                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25595                                  	; (SYSINIT:0D48h)
 25596                                  dofcbs:
 25597                                  	; 11/12/2022
 25598                                  	; ds = cs
 25599                                  	;push	cs
 25600                                  	;pop	ds
 25601 00000EB8 E83739                  	call	round
 25602                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 25603 00000EBB B058                    	mov	al,'X'
 25604 00000EBD E8CB07                  	call	setdevmark
 25605                                  	; 11/12/2022
 25606                                  	; ds = cs
 25607 00000EC0 A0[A002]                	mov	al,[FCBS]
 25608                                  	;mov	al,[cs:FCBS]
 25609 00000EC3 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 25610                                  					;  it does sign extend.
 25611                                  	; 11/12/2022
 25612 00000EC5 8B1E[6203]              	mov	bx,[memlo]
 25613 00000EC9 8B16[6403]              	mov	dx,[memhi]
 25614 00000ECD C53E[6D02]              	lds	di,[DOSINFO]		;get pointer to dos data
 25615                                  	; 23/10/2022
 25616                                  	;mov	bx,[cs:memlo]
 25617                                  	;mov	dx,[cs:memhi]
 25618                                  	;lds	di,[cs:DOSINFO]
 25619                                  
 25620                                  	;mov	[di+SYSI_FCB],bx
 25621                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 25622                                  	; 23/10/2022
 25623 00000ED1 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 25624 00000ED4 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 25625                                  
 25626 00000ED7 2E8A1E[A102]            	mov	bl,[cs:KEEP]
 25627 00000EDC 30FF                    	xor	bh,bh
 25628                                  	;mov	[di+SYSI_KEEP],bx
 25629 00000EDE 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 25630                                  
 25631 00000EE1 0E                      	push	cs
 25632 00000EE2 1F                      	pop	ds
 25633                                  	
 25634 00000EE3 C43E[6203]              	les	di,[memlo]		;point to new table
 25635                                  	;mov	word [es:di+SF.SFLink],-1
 25636 00000EE7 26C705FFFF              	mov	word [es:di],-1
 25637                                  	;mov	[es:di+SF.SFCount],ax
 25638                                  	; 02/11/2022
 25639 00000EEC 26894504                	mov	[es:di+4],ax
 25640 00000EF0 B33B                    	mov	bl,SF_ENTRY.size ; 59
 25641 00000EF2 89C1                    	mov	cx,ax
 25642 00000EF4 F6E3                    	mul	bl			;ax = number of bytes to clear
 25643 00000EF6 0106[6203]              	add	[memlo],ax		;allocate memory
 25644                                  	;mov	ax,6
 25645 00000EFA B80600                  	mov	ax,SF.size-2 ; 6
 25646 00000EFD 0106[6203]              	add	[memlo],ax		;remember the header too
 25647                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 25648 00000F01 800E[6919]02            	or	byte [setdevmarkflag],2
 25649 00000F06 E8E938                  	call	round			; check for mem error before the stosb
 25650 00000F09 01C7                    	add	di,ax			;skip over header
 25651 00000F0B B041                    	mov	al,'A'
 25652                                  fillloop:
 25653 00000F0D 51                      	push	cx			; save count
 25654 00000F0E B93B00                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 25655 00000F11 FC                      	cld
 25656 00000F12 F3AA                    	rep	stosb			; filled
 25657                                  
 25658                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 25659                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]
 25660                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 25661                                  
 25662                                  	; 18/12/2022
 25663                                  	;cx = 0
 25664 00000F14 26894DC5                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 25665 00000F18 26894DDA                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]
 25666 00000F1C 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 25667                                  	
 25668                                  	; 23/10/2022	
 25669                                  	;mov     word [es:di-3Bh],0
 25670                                  	;mov     word [es:di-26h],0
 25671                                  	;mov     word [es:di-24h],0
 25672                                  
 25673 00000F20 59                      	pop	cx
 25674 00000F21 E2EA                    	loop	fillloop
 25675                                  
 25676                                  ; allocate buffers
 25677                                  ; ----------------------------------------------------------------------
 25678                                  
 25679                                  ; search through the list of media supported and allocate 3 buffers if the
 25680                                  ; capacity of the drive is > 360kb
 25681                                  
 25682                                  	; 18/12/2022
 25683                                  	; cx = 0
 25684 00000F23 833E[9902]FF            	cmp	word [buffers],-1	; has buffers been already set?
 25685 00000F28 7403                    	je	short dodefaultbuff
 25686 00000F2A E98000                  	jmp	dobuff			; the user entered the buffers=.
 25687                                  
 25688                                  dodefaultbuff:
 25689                                  	; 18/12/2022
 25690 00000F2D 890E[9B02]              	mov	[h_buffers],cx ; 0
 25691                                  	;inc	cx
 25692                                  	;inc	cx
 25693                                  	;mov	[buffers],cx ; 2
 25694                                  	; 10/04/2024
 25695 00000F31 C706[9902]0200          	mov	word [buffers],2
 25696                                  
 25697                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 25698                                  	;mov	word [buffers],2	; default to 2 buffers
 25699                                  
 25700                                  	; 23/10/2022
 25701                                  	; 04/09/2023
 25702                                  	;push	ax
 25703                                  	;push	ds ; 26/03/2019
 25704                                  
 25705                                  	; 04/09/2023
 25706                                  	; ds = cs
 25707 00000F37 C42E[6D02]              	les	bp,[DOSINFO]		; search through the dpb's
 25708                                  	;les	bp,[cs:DOSINFO]
 25709                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 25710                                  	; 11/12/2022
 25711 00000F3B 26C46E00                	les	bp,[es:bp]
 25712                                  	; 23/10/2022
 25713                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 25714                                  
 25715                                  	; 04/09/2023
 25716                                  	; ds = cs
 25717                                  	;push	cs
 25718                                  	;pop	ds
 25719                                  ;SYSINIT:0DE2h:
 25720                                  nextdpb:				; test if the drive supports removeable media
 25721                                  	;mov	bl,[es:bp+DPB.drive]
 25722                                  	; 11/12/2022
 25723 00000F3F 268A5E00                	mov	bl,[es:bp]
 25724                                  	; 23/10/2022
 25725                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 25726                                  
 25727                                  	;inc	bl
 25728                                  	; 18/12/2022
 25729 00000F43 43                      	inc	bx
 25730                                  
 25731                                  	;mov	ax,(IOCTL<<8)|8
 25732 00000F44 B80844                  	mov	ax,4408h
 25733 00000F47 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 25734                                  
 25735                                  ; ignore fixed disks
 25736                                  
 25737 00000F49 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 25738 00000F4B 7534                    	jnz	short nosetbuf
 25739                                  
 25740                                  ; get parameters of drive
 25741                                  
 25742 00000F4D 31DB                    	xor	bx,bx
 25743                                  	;;mov	bl,[es:bp+DPB.drive]
 25744                                  	; 11/12/2022
 25745 00000F4F 268A5E00                	mov	bl,[es:bp]
 25746                                  	; 23/10/2022
 25747                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 25748                                  	
 25749                                  	;inc	bl
 25750                                  	; 18/12/2022
 25751 00000F53 43                      	inc	bx
 25752                                  
 25753 00000F54 BA[BF4D]                	mov	dx,deviceparameters
 25754                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 25755 00000F57 B80D44                  	mov	ax,440Dh
 25756                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 25757 00000F5A B96008                  	mov	cx,860h
 25758 00000F5D CD21                    	int	21h		; DOS - 2+ - IOCTL -
 25759 00000F5F 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 25760                                  					; generic ioctl
 25761                                  ; determine capacity of drive
 25762                                  ; media capacity = #sectors * bytes/sector
 25763                                  
 25764                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS]
 25765                                  	; 23/10/2022
 25766 00000F61 8B1E[CE4D]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 25767                                  	
 25768                                  ; to keep the magnitude of the media capacity within a word,
 25769                                  ; scale the sector size
 25770                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 25771                                  
 25772                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BYTESPERSECTOR]
 25773                                  	; 23/10/2022
 25774 00000F65 A1[C64D]                	mov	ax,[deviceparameters+7] ; bytes per sector
 25775 00000F68 31D2                    	xor	dx,dx
 25776 00000F6A B90002                  	mov	cx,512
 25777 00000F6D F7F1                    	div	cx			; scale sector size in factor of
 25778                                  					; 512 bytes
 25779 00000F6F F7E3                    	mul	bx			; ax = #sectors * size factor
 25780 00000F71 09D2                    	or	dx,dx			; just in case of large floppies
 25781 00000F73 7505                    	jnz	short setbuf
 25782 00000F75 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 25783 00000F78 7607                    	jbe	short nosetbuf
 25784                                  setbuf:
 25785                                  	; 18/12/2022
 25786                                  	; word [buffers] = 2
 25787 00000F7A C606[9902]03            	mov	byte [buffers],3
 25788                                  	;mov	word [buffers],3
 25789 00000F7F EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 25790                                  					; for default buffer count
 25791                                  nosetbuf:
 25792                                  	; 23/10/2022
 25793                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 25794 00000F81 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 25795 00000F86 7406                    	je	short chk_memsize_for_buffers
 25796                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 25797 00000F88 26C46E19                	les	bp,[es:bp+19h]
 25798 00000F8C EBB1                    	jmp	short nextdpb
 25799                                  
 25800                                  ;from dos 3.3,the default number of buffers will be changed according to the
 25801                                  ;memory size too.
 25802                                  ; default buffers = 2
 25803                                  ; if diskette media > 360 kb,then default buffers = 3
 25804                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 25805                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 25806                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 25807                                  
 25808                                  chk_memsize_for_buffers:
 25809                                  	; 18/12/2022
 25810                                  	;cmp	word [MEMORY_SIZE],2000h
 25811                                  	;jbe	short bufset
 25812                                  	;mov	word [buffers],5
 25813                                  	;cmp	word [MEMORY_SIZE],4000h
 25814                                  	;jbe	short bufset
 25815                                  	;mov	word [buffers],10
 25816                                  	;cmp	word [MEMORY_SIZE],8000h
 25817                                  	;jbe	short bufset
 25818                                  	;mov	word [buffers],15
 25819                                  
 25820                                  	; 18/12/2022
 25821                                  	; word [buffers] = 3 or 2
 25822 00000F8E BB[9902]                	mov	bx,buffers
 25823 00000F91 A1[9402]                	mov	ax,[MEMORY_SIZE]
 25824 00000F94 48                      	dec	ax	; [MEMORY_SIZE] - 1
 25825                                  
 25826 00000F95 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 25827 00000F98 7213                    	jb	short bufset
 25828 00000F9A C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 25829 00000F9D 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 25830 00000FA0 730B                    	jnb	short bufset
 25831 00000FA2 C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 25832 00000FA5 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 25833 00000FA8 7303                    	jnb	short bufset
 25834 00000FAA C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 25835                                  bufset:
 25836                                  	; 23/10/2022
 25837                                  	; 26/03/2019
 25838                                  	; 04/09/2023
 25839                                  	;pop	ds
 25840                                  	;pop	ax
 25841                                  
 25842                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 25843                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 25844                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 25845                                  
 25846                                  ; 26/03/2019
 25847                                  
 25848                                  ;*******************************************************************************
 25849                                  ;									       *
 25850                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 25851                                  ; input :								       *
 25852                                  ;    memhi:memlo - start of the next available memory			       *
 25853                                  ;    buffers = number of buffers					       *
 25854                                  ;    h_buffers = number of secondary buffers				       *
 25855                                  ;									       *
 25856                                  ; output:								       *
 25857                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 25858                                  ;	buffinfo set.							       *
 25859                                  ;	bufferqueue set.						       *
 25860                                  ;									       *
 25861                                  ; subroutines to be called:						       *
 25862                                  ;									       *
 25863                                  ;*******************************************************************************
 25864                                  
 25865                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25866                                  	; (SYSINIT:0E60h)
 25867                                  dobuff:
 25868                                  	; ds = cs ; 31/03/2019
 25869                                  	; 23/10/2022
 25870                                  	;lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 25871                                  	; 04/09/2023
 25872 00000FAD A1[9902]                	mov	ax,[buffers] ; 31/03/2019
 25873 00000FB0 8B0E[9B02]              	mov	cx,[h_buffers] ; *
 25874 00000FB4 C51E[6D02]              	lds	bx,[DOSINFO]
 25875                                  	;mov	ax,[cs:buffers]	; set sysi_buffers
 25876                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 25877 00000FB8 89473F                  	mov	[bx+3Fh],ax
 25878                                  	; 04/09/2023
 25879                                  	;mov	ax,[cs:h_buffers]
 25880                                  	;;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 25881                                  	;mov	[bx+41h],ax
 25882                                  	; 04/09/2023
 25883 00000FBB 894F41                  	mov	[bx+41h],cx ; *
 25884 00000FBE C55F12                  	lds	bx,[bx+12h]
 25885                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 25886 00000FC1 E82E38                  	call	round		; get [memhi]:[memlo]
 25887                                  	;mov	al,devmark_buf	; ='B'
 25888 00000FC4 B042                    	mov	al,'B'	
 25889 00000FC6 E8C206                  	call	setdevmark
 25890                                  
 25891                                  ;allocate buffers
 25892                                  
 25893 00000FC9 1E                      	push	ds			; save buffer info. ptr.
 25894 00000FCA 53                      	push	bx
 25895                                  
 25896 00000FCB E8D403                  	call	set_buffer
 25897                                  
 25898 00000FCE 5B                      	pop	bx
 25899 00000FCF 1F                      	pop	ds
 25900                                  
 25901                                  ;now set the secondary buffer if specified.
 25902                                  
 25903 00000FD0 2E833E[9B02]00          	cmp	word [cs:h_buffers],0
 25904 00000FD6 742D                    	je	short xif16
 25905 00000FD8 E81738                  	call	round
 25906                                  	; 23/10/2022
 25907 00000FDB 2E8B0E[6203]            	mov	cx,[cs:memlo]
 25908                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 25909 00000FE0 894F06                  	mov	[bx+6],cx
 25910 00000FE3 2E8B0E[6403]            	mov	cx,[cs:memhi]
 25911                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 25912 00000FE8 894F08                  	mov	[bx+8],cx
 25913 00000FEB 2E8B0E[9B02]            	mov	cx,[cs:h_buffers]
 25914                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 25915 00000FF0 894F0A                  	mov	[bx+10],cx
 25916 00000FF3 B80002                  	mov	ax,512			; 512 byte
 25917 00000FF6 F7E1                    	mul	cx
 25918 00000FF8 2EA3[6203]              	mov	[cs:memlo],ax
 25919                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 25920 00000FFC 2E800E[6919]02          	or	byte [cs:setdevmarkflag],2
 25921 00001002 E8ED37                  	call	round
 25922                                  xif16:
 25923                                  
 25924                                  ; ----------------------------------------------------------------------
 25925                                  ; allocate cdss
 25926                                  ; ----------------------------------------------------------------------
 25927                                  
 25928                                  buf1:
 25929 00001005 E8EA37                  	call	round
 25930                                  
 25931 00001008 50                      	push	ax
 25932                                  	; 23/10/2022
 25933                                  	;mov	ax,devmark_cds		;='L'
 25934 00001009 B84C00                  	mov	ax, 'L'
 25935 0000100C E87C06                  	call	setdevmark
 25936 0000100F 58                      	pop	ax
 25937                                  
 25938 00001010 2EC43E[6D02]            	les	di,[cs:DOSINFO]
 25939                                  	;mov	cl,[es:di+SYSI_NUMIO]
 25940 00001015 268A4D20                	mov	cl,[es:di+20h]
 25941 00001019 2E3A0E[A202]            	cmp	cl,[cs:NUM_CDS]
 25942 0000101E 7305                    	jae	short gotncds 		; user setting must be at least numio
 25943 00001020 2E8A0E[A202]            	mov	cl,[cs:NUM_CDS]
 25944                                  gotncds:
 25945 00001025 30ED                    	xor	ch,ch
 25946                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 25947 00001027 26884D21                	mov	[es:di+21h],cl
 25948 0000102B 2EA1[6403]              	mov	ax,[cs:memhi]
 25949                                  	;mov	[es:di+SYSI_CDS+2],ax
 25950 0000102F 26894518                	mov	[es:di+18h],ax
 25951 00001033 2EA1[6203]              	mov	ax,[cs:memlo]
 25952                                  	;mov	[es:di+SYSI_CDS],ax
 25953 00001037 26894516                	mov	[es:di+16h],ax
 25954 0000103B 88C8                    	mov	al,cl
 25955                                  	;mov	ah,curdirlen ; curdir_list.size
 25956 0000103D B458                    	mov	ah,88
 25957 0000103F F6E4                    	mul	ah
 25958 00001041 E8D102                  	call	ParaRound
 25959 00001044 2E0106[6403]            	add	[cs:memhi],ax
 25960                                  
 25961                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 25962 00001049 2E800E[6919]02          	or	byte [cs:setdevmarkflag],2
 25963 0000104F E8A037                  	call	round			; check for mem error before initializing
 25964                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 25965 00001052 26C535                  	lds	si,[es:di]
 25966                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 25967 00001055 26C47D16                	les	di,[es:di+16h]
 25968 00001059 E875FD                  	call	fooset
 25969                                  
 25970                                  ; ----------------------------------------------------------------------
 25971                                  ; allocate space for internal stack
 25972                                  ; ----------------------------------------------------------------------
 25973                                  
 25974 0000105C 0E                      	push	cs
 25975 0000105D 1F                      	pop	ds
 25976                                  
 25977                                  ;	if the user did not entered stacks= command, as a default, do not install
 25978                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 25979                                  ;	otherwise,install it to the user specified value or to the default
 25980                                  ;	value of 9,128 for other systems.
 25981                                  
 25982 0000105E 833E[9002]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 25983 00001063 740E                    	je	short doinstallstack	; then install as specified by the user
 25984 00001065 803E[BC02]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 25985 0000106A 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 25986 0000106C 803E[BB02]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 25987 00001071 736D                    	jae	short skipstack
 25988                                  doinstallstack:
 25989 00001073 A1[8C02]                	mov	ax,[stack_count]	; stack_count = 0?
 25990 00001076 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 25991 00001078 7466                    	jz	short skipstack		; don't install stack.
 25992                                  
 25993                                  ;	dynamic relocation of stack code.
 25994                                  
 25995 0000107A E87537                  	call	round			;[memhi] = seg. for stack code
 25996                                  					;[memlo] = 0
 25997                                  
 25998                                  ; set devmark block into memory for mem command
 25999                                  ; devmark_id = 's' for stack
 26000                                  
 26001                                  	;mov	al,devmark_stk	;='S'
 26002                                  	; 23/10/2022
 26003 0000107D B053                    	mov	al,'S'
 26004 0000107F E80906                  	call	setdevmark
 26005                                  
 26006 00001082 A1[6403]                	mov	ax,[memhi]
 26007 00001085 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 26008                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26009                                  	; 11/12/2022
 26010                                  	; ds = cs
 26011                                  	;push	cs
 26012                                  	;pop	ds
 26013 00001087 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 26014 00001089 31FF                    	xor	di,di
 26015 0000108B B9[6902]                	mov	cx,endstackcode
 26016 0000108E 890E[6203]              	mov	[memlo],cx
 26017 00001092 E85D37                  	call	round		;have enough space for relocation?
 26018 00001095 F3A4                    	rep	movsb
 26019                                  
 26020 00001097 1E                      	push	ds		; stick the location of the NextStack entry
 26021                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 26022                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 26023                                  	; 21/10/2022
 26024 00001098 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 26025 0000109B 8ED8                    	mov	ds,ax
 26026 0000109D C706[0208][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 26027 000010A3 8C06[0408]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 26028                                  
 26029 000010A7 2EA1[6203]              	mov	ax,[cs:memlo]
 26030 000010AB 2EA3[9002]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 26031 000010AF A3[0808]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 26032 000010B2 2EA1[6403]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 26033 000010B6 2EA3[9202]              	mov	[cs:stack_addr+2],ax
 26034 000010BA A3[0A08]                	mov	[IT_StackLoc+2],ax
 26035                                  
 26036                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 26037                                  
 26038                                  	;mov	ax,entrysize ; mov ax,8
 26039                                  	; 23/10/2022
 26040 000010BD B80800                  	mov	ax,8
 26041 000010C0 2E0306[8E02]            	add	ax,[cs:stack_size]
 26042 000010C5 2EF726[8C02]            	mul	word [cs:stack_count]
 26043                                  
 26044 000010CA A3[0C08]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 26045                                  
 26046 000010CD 1F                      	pop	ds		; no more need to access Instance Table
 26047                                  
 26048 000010CE E84402                  	call	ParaRound	; convert size to paragraphs
 26049                                  	
 26050                                  	; 11/12/2022
 26051                                  	; ds = cs
 26052                                  	;add	[cs:memhi],ax
 26053 000010D1 0106[6403]              	add	[memhi],ax
 26054                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 26055                                  	;or	byte [cs:setdevmarkflag],2
 26056 000010D5 800E[6919]02            	or	byte [setdevmarkflag],2
 26057                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 26058                                  				;to set the devmark_size for stack by round routine.
 26059 000010DA E81537                  	call	round		; check for memory error before
 26060                                  				; continuing
 26061 000010DD E87D03                  	call	stackinit	; initialize hardware stack. 
 26062                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 26063                                  skipstack:
 26064                                  	
 26065                                  	; 10/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 26066                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:11F0h)
 26067                                  	;;;
 26068                                  	;push	cs
 26069                                  	;pop	ds
 26070                                  	; ds = cs
 26071 000010E0 803E[6E03]01            	cmp	byte [dosdata_umb],1	; PCDOS 7 feature - DOSDATA=UMB/NOUMB configuration
 26072                                  					; 1 = DOSDATA=UMB, 2 = (UMB) done, 0 = NOUMB
 26073 000010E5 7773                    	ja	short dosdata_umb_done	; 2 - done
 26074 000010E7 727D                    	jb	short dosdata_noumb	; 0 - DOSDATA=NOUMB
 26075                                  	
 26076 000010E9 803E[8B16]EA            	cmp	byte [setdevmark],0EAh
 26077 000010EE 7476                    	je	short dosdata_noumb
 26078                                  	
 26079 000010F0 B80258                  	mov	ax,5802h
 26080 000010F3 CD21                    	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 26081                                  				; AL = function code: (DOS 5beta) get UMB link state
 26082 000010F5 98                      	cbw
 26083 000010F6 89C7                    	mov	di,ax			; al = 01h -> UMBs in DOS memory chain
 26084                                  					; save current (previous) UMB link state
 26085 000010F8 BB0100                  	mov	bx,1			; bx = 01h -> add UMBs to DOS memory chain
 26086                                  	
 26087 000010FB B80358                  	mov	ax,5803h
 26088 000010FE CD21                    	int	21h
 26089 00001100 7264                    	jc	short dosdata_noumb
 26090                                  	
 26091 00001102 B80058                  	mov	ax,5800h
 26092 00001105 CD21                    	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 26093                                  				; AL = function code: get allocation strategy
 26094                                  	
 26095 00001107 89C6                    	mov	si,ax			; ax = current strategy
 26096                                  					; save current (previous) allocation strategy
 26097 00001109 BB4000                  	mov	bx,40h			; bl = new strategy = 40h - high memory first fit
 26098                                  	
 26099 0000110C B80158                  	mov	ax,5801h
 26100 0000110F CD21                    	int	21h
 26101                                  
 26102 00001111 8B1E[6403]              	mov	bx,[memhi]
 26103 00001115 2B1E[6A03]              	sub	bx,[prev_memhi]
 26104                                  	
 26105 00001119 B448                    	mov	ah,48h
 26106 0000111B CD21                    	int	21h		; DOS - 2+ - ALLOCATE MEMORY
 26107                                  				; BX = number of 16-byte paragraphs desired
 26108 0000111D 89C1                    	mov	cx,ax			; ax = segment of allocated block
 26109 0000111F 89FB                    	mov	bx,di			; restore previous UMB link state
 26110                                  	
 26111 00001121 B80358                  	mov	ax,5803h
 26112 00001124 CD21                    	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 26113                                  				; AL = function code: (DOS 5beta) set UMB link state
 26114 00001126 89F3                    	mov	bx,si			; restore previous allocation strategy
 26115                                  	
 26116 00001128 B80158                  	mov	ax,5801h
 26117 0000112B CD21                    	int	21h		; DOS - 3+ - GET/SET MEMORY ALLOCATION STRATEGY
 26118                                  				; AL = function code: set allocation strategy
 26119 0000112D 81F900A0                	cmp	cx,0A000h		; Is the allocated memory block (segment) a UMB?
 26120 00001131 7233                    	jb	short dosdata_noumb	; no
 26121                                  	
 26122                                  	;mov	word [ALLOCLIM],0FFFFh
 26123                                  	;mov	word [memlo],0
 26124 00001133 890E[6403]              	mov	[memhi],cx
 26125 00001137 49                      	dec	cx
 26126 00001138 8EC1                    	mov	es,cx			; point to arena/mcb
 26127                                  	; 10/04/2024
 26128 0000113A 31C9                    	xor	cx,cx ; 0
 26129 0000113C 890E[6203]              	mov	[memlo],cx ; 0
 26130 00001140 49                      	dec	cx
 26131 00001141 890E[A502]              	mov	[ALLOCLIM],cx ; 0FFFFh
 26132                                  
 26133 00001145 26C70601000800          	mov	word [es:1],8		; [es:arena_owner], 8 ; set impossible owner
 26134 0000114C 26C70608005344          	mov	word [es:8],4453h	; [es:arena_name],'SD' ; System Data
 26135 00001153 FE06[6E03]              	inc	byte [dosdata_umb]	; 1 -> 2 ; DOSDATA=UMB done.
 26136 00001157 E909FD                  	jmp	dosfts
 26137                                  
 26138                                  dosdata_umb_done:
 26139 0000115A A1[6A03]                	mov	ax,[prev_memhi]		; (recent memory block/segment before UMBs)
 26140 0000115D A3[6403]                	mov	[memhi],ax
 26141 00001160 A1[6C03]                	mov	ax,[prev_alloclim]
 26142 00001163 A3[A502]                	mov	[ALLOCLIM],ax
 26143                                  dosdata_noumb:
 26144                                   	;;;
 26145                                  
 26146                                  ;skipstack:
 26147                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26148                                  	; (SYSINIT:0F99h)
 26149                                  
 26150                                  	; 11/12/2022
 26151                                  	; ds = cs
 26152                                  	;push	cs
 26153                                  	;pop	ds
 26154                                  
 26155 00001166 A0[9F02]                	mov	al,[FILES]
 26156 00001169 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 26157                                  				;  it does sign extend.
 26158 0000116B 89C1                    	mov	cx,ax
 26159 0000116D 31DB                    	xor	bx,bx		;close standard input
 26160 0000116F B43E                    	mov	ah,3Eh ; CLOSE
 26161 00001171 CD21                    	int	21h
 26162 00001173 BB0200                  	mov	bx,2
 26163                                  rcclloop:			;close everybody but standard output
 26164 00001176 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 26165 00001178 CD21                    	int	21h		; in case we can't get new one open.
 26166 0000117A 43                      	inc	bx
 26167 0000117B E2F9                    	loop	rcclloop
 26168                                  
 26169 0000117D BA[C54A]                	mov	dx,condev
 26170 00001180 B002                    	mov	al,2
 26171 00001182 B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 26172 00001184 F9                      	stc			; set for possible int 24
 26173 00001185 CD21                    	int	21h
 26174 00001187 7305                    	jnc	short goaux
 26175 00001189 E89C38                  	call	badfil
 26176 0000118C EB13                    	jmp	short goaux2
 26177                                  goaux:	
 26178 0000118E 50                      	push	ax
 26179 0000118F BB0100                  	mov	bx,1		;close standard output
 26180 00001192 B43E                    	mov	ah,3Eh ; CLOSE
 26181 00001194 CD21                    	int	21h
 26182 00001196 58                      	pop	ax
 26183                                  
 26184 00001197 89C3                    	mov	bx,ax		;new device handle
 26185 00001199 B445                    	mov	ah,45h ; XDUP
 26186 0000119B CD21                    	int	21h		;dup to 1,stdout
 26187 0000119D B445                    	mov	ah,45h ; XDUP
 26188 0000119F CD21                    	int	21h		;dup to 2,stderr
 26189                                  goaux2: 
 26190 000011A1 BA[C94A]                	mov	dx,auxdev
 26191 000011A4 B002                    	mov	al,2		;read/write access
 26192 000011A6 E8B038                  	call	open_dev
 26193                                  
 26194 000011A9 BA[CD4A]                	mov	dx,prndev
 26195 000011AC B001                    	mov	al,1		;write only
 26196 000011AE E8A838                  	call	open_dev
 26197                                  
 26198                                  ;global rearm command for shared interrupt devices attached in the system;
 26199                                  ;shared interrupt attachment has some problem when it issues interrupt
 26200                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 26201                                  ;no further interrupts on that level will be presented until a global rearm
 26202                                  ;is issued. by the request of the system architecture group, msbio will
 26203                                  ;issue a global rearm after every device driver is loaded.
 26204                                  ;to issue a global rearm:	;for pc1,xt,palace
 26205                                  ;
 26206                                  ;			  out 02f2h,xx  ; interrupt level 2
 26207                                  ;			  out 02f3h,xx  ; interrupt level 3
 26208                                  ;			  out 02f4h,xx  ; interrupt level 4
 26209                                  ;			  out 02f5h,xx  ; interrupt level 5
 26210                                  ;			  out 02f6h,xx  ; interrupt level 6
 26211                                  ;			  out 02f7h,xx  ; interrupt level 7
 26212                                  ;
 26213                                  ;	for pc at,in addition to the above commands,
 26214                                  ;	need to handle the secondary interrupt handler
 26215                                  ;
 26216                                  ;			  out 06f2h,xx  ; interrupt level 10
 26217                                  ;			  out 06f3h,xx  ; interrupt level 11
 26218                                  ;			  out 06f4h,xx  ; interrupt level 12
 26219                                  ;			  out 06f6h,xx  ; interrupt level 14
 26220                                  ;			  out 06f7h,xx  ; interrupt level 15
 26221                                  ;
 26222                                  ;	for round-up machine
 26223                                  ;
 26224                                  ;			  none.
 26225                                  
 26226                                  ; where xx stands for any value.
 26227                                  ;
 26228                                  ; for your information,after naples level machine,the system service bios
 26229                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 26230                                  
 26231                                  	; 24/10/2022
 26232                                  
 26233 000011B1 50                      	push	ax
 26234 000011B2 53                      	push	bx
 26235 000011B3 52                      	push	dx
 26236 000011B4 06                      	push	es
 26237                                  
 26238 000011B5 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 26239 000011B7 BAF202                  	mov	dx,2F2h 		;get starting address
 26240 000011BA EE                      	out	dx,al			; out 02f2h,0ffh
 26241 000011BB 42                      	inc	dx
 26242 000011BC EE                      	out	dx,al			; out 02f3h,0ffh
 26243 000011BD 42                      	inc	dx
 26244 000011BE EE                      	out	dx,al			; out 02f4h,0ffh
 26245 000011BF 42                      	inc	dx
 26246 000011C0 EE                      	out	dx,al			; out 02f5h,0ffh
 26247 000011C1 42                      	inc	dx
 26248 000011C2 EE                      	out	dx,al			; out 02f6h,0ffh
 26249 000011C3 42                      	inc	dx
 26250 000011C4 EE                      	out	dx,al			; out 02f7h,0ffh
 26251                                  
 26252                                  ;sb secondary global rearm
 26253                                  
 26254 000011C5 B800F0                  	mov	ax,0F000h		;get machine type
 26255 000011C8 8EC0                    	mov	es,ax
 26256 000011CA 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 26257 000011D0 740D                    	je	short startrearm	; *if at no need to check
 26258                                  
 26259 000011D2 B4C0                    	mov	ah,0C0h 		;get system configuration
 26260 000011D4 CD15                    	int	15h			; *
 26261 000011D6 7216                    	jc	short finishrearm	; *jmp if old rom
 26262                                  
 26263                                  ; test feature byte for secondary interrupt controller
 26264                                  
 26265 000011D8 26F6470540              	test	byte [es:bx+5],40h
 26266                                  	; 24/10/2022
 26267                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 26268 000011DD 740F                    	je	short finishrearm	;jmp if it is there
 26269                                  
 26270                                  startrearm:
 26271 000011DF B0FF                    	mov	al,0FFh 		;write any pattern to port
 26272 000011E1 BAF206                  	mov	dx,6F2h 		;get starting address
 26273 000011E4 EE                      	out	dx,al			;out 06f2h,0ffh
 26274 000011E5 42                      	inc	dx			;bump address
 26275 000011E6 EE                      	out	dx,al			;out 06f3h,0ffh
 26276 000011E7 42                      	inc	dx			;bump address
 26277 000011E8 EE                      	out	dx,al			;out 06f4h,0ffh
 26278 000011E9 42                      	inc	dx			;bump address
 26279 000011EA 42                      	inc	dx			;bump address
 26280 000011EB EE                      	out	dx,al			;out 06f6h,0ffh
 26281 000011EC 42                      	inc	dx			;bump address
 26282 000011ED EE                      	out	dx,al			;out 06f7h,0ffh
 26283                                  
 26284                                  finishrearm:
 26285 000011EE 07                      	pop	es
 26286 000011EF 5A                      	pop	dx
 26287 000011F0 5B                      	pop	bx
 26288 000011F1 58                      	pop	ax
 26289                                  
 26290                                  ;    global rearm end *******************
 26291                                  
 26292                                  ; ----------------------------------------------------------------------
 26293                                  ; allocate sysinit_base for install= command
 26294                                  ; ----------------------------------------------------------------------
 26295                                  ; sysinit_base allocation.
 26296                                  ;   check if endfile has been called to handle install= command.
 26297                                  
 26298                                  set_sysinit_base:
 26299                                  
 26300                                  ; ----------------------------------------------------------------------
 26301                                  ;sysinit_base will be established in the secure area of
 26302                                  ;lower memory when it handles the first install= command.
 26303                                  ;sysinit_base is the place where the actual exec function will be called and
 26304                                  ;will check sysinit module in high memory if it is damaged by the application
 26305                                  ;program.  if sysinit module has been broken,then "memory error..." message
 26306                                  ;is displayed by sysinit_base.
 26307                                  ; ----------------------------------------------------------------------
 26308                                  
 26309                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 26310                                  	; (SYSINIT:1028h)
 26311                                  
 26312                                  	; 11/12/2022
 26313                                  	; ds = cs
 26314 000011F2 50                      	push	ax			; set devmark for mem command
 26315 000011F3 A1[6403]                	mov	ax,[memhi]
 26316 000011F6 2B06[6803]              	sub	ax,[area]
 26317 000011FA A3[6003]                	mov	[impossible_owner_size],ax ;remember the size in case.
 26318                                  	;mov	al,devmark_inst ; 'T'
 26319 000011FD B054                    	mov	al,'T'
 26320 000011FF E88904                  	call	setdevmark
 26321 00001202 58                      	pop	ax
 26322                                  
 26323 00001203 8B3E[6403]              	mov	di,[memhi]
 26324 00001207 8EC7                    	mov	es,di
 26325 00001209 893E[D402]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 26326 0000120D 31FF                    	xor	di,di
 26327 0000120F 893E[D202]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 26328 00001213 BE[2113]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 26329 00001216 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 26330                                  	; 24/10/2022 
 26331                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 26332 00001219 010E[6203]              	add	[memlo],cx
 26333                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 26334                                  	; 11/12/2022
 26335                                  	; ds = cs
 26336                                  	;or	byte [cs:setdevmarkflag],2
 26337 0000121D 800E[6919]02            	or	byte [setdevmarkflag],2
 26338                                  	;or	byte [setdevmarkflag],for_devmark
 26339 00001222 E8CD35                  	call	round			; check mem error. also,readjust memhi for the next use.
 26340 00001225 F3A4                    	rep	movsb			; reallocate it.
 26341                                  
 26342 00001227 C706[D602][0813]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 26343 0000122D 8C0E[D802]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 26344                                  	;or	word [install_flag],has_installed ; set the flag.
 26345                                  	;or	byte [install_flag],has_installed ; 2
 26346                                  	; 11/12/2022
 26347 00001231 800E[CE02]02            	or	byte [install_flag],2
 26348                                  	; 24/10/2022
 26349                                  	;or	word [install_flag],2	
 26350                                  
 26351                                  ; ----------------------------------------------------------------------
 26352                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 26353                                  ; the top of the memory will be allocated for sysinit and config.sys if
 26354                                  ; have_install_cmd.
 26355                                  ; ----------------------------------------------------------------------
 26356                                  
 26357 00001236 E8B935                  	call	round
 26358 00001239 8B1E[6403]              	mov	bx,[memhi]
 26359 0000123D A1[6803]                	mov	ax,[area]
 26360 00001240 A3[5E03]                	mov	[old_area],ax		; save [area]
 26361 00001243 8EC0                    	mov	es,ax			;calc what we needed
 26362 00001245 29C3                    	sub	bx,ax
 26363                                  	; 24/10/2022
 26364 00001247 B44A                    	mov	ah,4Ah ; SETBLOCK
 26365 00001249 CD21                    	int	21h			;give the rest back
 26366                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 26367                                  		; ES = segment address of block to change
 26368                                  		; BX = new size in paragraphs
 26369 0000124B 06                      	push	es
 26370 0000124C 8CC0                    	mov	ax,es
 26371 0000124E 48                      	dec	ax
 26372 0000124F 8EC0                    	mov	es,ax			;point to arena
 26373                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 26374                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 26375                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 26376                                  	; 24/10/2022
 26377 00001251 26C70601000800          	mov	word [es:1],8		;set impossible owner
 26378 00001258 26C70608005344          	mov	word [es:8],'SD'	; System Data
 26379 0000125F 07                      	pop	es
 26380                                  
 26381 00001260 BBFFFF                  	mov	bx,0FFFFh
 26382 00001263 B448                    	mov	ah,48h ; ALLOC
 26383 00001265 CD21                    	int	21h
 26384 00001267 B448                    	mov	ah,48h ; ALLOC
 26385 00001269 CD21                    	int	21h			; allocate the rest of the memory
 26386                                  		; DOS - 2+ - ALLOCATE MEMORY
 26387                                  		; BX = number of 16-byte paragraphs desired
 26388 0000126B A3[6403]                	mov	[memhi],ax		; start of the allocated memory
 26389 0000126E C706[6203]0000          	mov	word [memlo],0		;  to be used next.
 26390                                  
 26391                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 26392                                  ;;;; allocated.
 26393                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 26394                                  ;;;; this time) to the top-of-the memory),here we are going to
 26395                                  ;;;; 1). "setblock" from memhi to confbot.
 26396                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 26397                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 26398                                  
 26399                                  ;memory allocation for sysinit,confbot module.
 26400                                  
 26401 00001274 8EC0                    	mov	es,ax
 26402                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26403                                  	; (SYSINIT:11DFh)
 26404 00001276 8B1E[A302]              	mov	bx,[CONFBOT]
 26405                                  	; 24/10/2022
 26406                                  	;mov	bx,[top_of_cdss] ; mov bx,[confbot]
 26407 0000127A 29C3                    	sub	bx,ax			; confbot - memhi
 26408 0000127C 4B                      	dec	bx			; make a room for the memory block id.
 26409 0000127D 4B                      	dec	bx			; make sure!!!.
 26410 0000127E B44A                    	mov	ah,4Ah ; SETBLOCK
 26411 00001280 CD21                    	int	21h			; this will free (confbot to top of memory)
 26412                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 26413                                  		; ES = segment address of block to change
 26414                                  		; BX = new size in paragraphs
 26415 00001282 BBFFFF                  	mov	bx,0FFFFh
 26416 00001285 B448                    	mov	ah,48h ; ALLOC
 26417 00001287 CD21                    	int	21h
 26418 00001289 B448                    	mov	ah,48h ; ALLOC
 26419 0000128B CD21                    	int	21h			; allocate (confbot to top of memory)
 26420                                  		; DOS - 2+ - ALLOCATE MEMORY
 26421                                  		; BX = number of 16-byte paragraphs desired
 26422 0000128D A3[6803]                	mov	[area],ax		; save allocated memory segment.
 26423                                  					; need this to free this area for command.com.
 26424 00001290 8E06[6403]              	mov	es,[memhi]
 26425 00001294 B449                    	mov	ah,49h			; free allocated memory.
 26426 00001296 CD21                    	int	21h			; free (memhi to confbot(=area))
 26427                                  		; DOS - 2+ - FREE MEMORY
 26428                                  		; ES = segment address of area to be freed
 26429                                  endfile_ret:
 26430 00001298 C3                      	retn
 26431                                  
 26432                                  ; End of "EndFile" DOS structure configuration.
 26433                                  
 26434                                  ; ----------------------------------------------------------------------
 26435                                  ; 26/03/2019 - Retro DOS v4.0
 26436                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 26437                                  ; ----------------------------------------------------------------------
 26438                                  ; Do_Install_Exec
 26439                                  ;
 26440                                  ; This procedure is used to EXEC a program being loaded via the 
 26441                                  ; "install=" mechanism in config.sys. It does this by setting up
 26442                                  ; the parameters, and then jumping to sysinit_base, which has been
 26443                                  ; setup in low memory. When complete, sysinit_base will jump back
 26444                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 26445                                  ; program).
 26446                                  
 26447                                  ;SYSINIT:10CFh:
 26448                                  
 26449                                  do_install_exec:			; now,handles install= command.
 26450                                  
 26451 00001299 56                      	push	si			; save si for config.sys again.
 26452                                  
 26453                                  ; we are going to call load/exec function.
 26454                                  ; set es:bx to the parameter block here;;;;;;;
 26455                                  ; set ds:dx to the asciiz string. remember that we already has 0
 26456                                  ; after the filename. so parameter starts after that. if next
 26457                                  ; character is a line feed (i.e. 10),then assume that the 0
 26458                                  ; we already encountered used to be a carrage return. in this
 26459                                  ; case,let's set the length to 0 which will be followed by
 26460                                  ; carridge return.
 26461                                  
 26462                                  ; es:si -> command line in config.sys. points to the first non blank
 26463                                  ;character after =.
 26464                                  
 26465 0000129A 06                      	push	es
 26466 0000129B 1E                      	push	ds
 26467 0000129C 07                      	pop	es
 26468 0000129D 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 26469 0000129E 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 26470                                  
 26471 000012A0 31C9                    	xor	cx,cx
 26472 000012A2 FC                      	cld
 26473 000012A3 2EC606[F102]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 26474 000012A9 BF[F202]                	mov	di,ldexec_parm
 26475                                  installfilename:			; skip the file name
 26476 000012AC AC                      	lodsb				; al = ds:si; si++
 26477                                  	; 05/09/2023
 26478 000012AD 08C0                    	or	al,al
 26479                                  	;cmp	al,0
 26480                                  	;je	short got_installparm
 26481                                  	;jmp	short installfilename
 26482                                  	; 10/04/2024
 26483 000012AF 75FB                    	jnz	short installfilename
 26484                                  got_installparm:			; copy the parameters to ldexec_parm
 26485 000012B1 AC                      	lodsb
 26486 000012B2 268805                  	mov	[es:di],al
 26487 000012B5 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 26488 000012B7 7405                    	je	short done_installparm
 26489 000012B9 FEC1                    	inc	cl			; # of char. in the parm.
 26490 000012BB 47                      	inc	di
 26491 000012BC EBF3                    	jmp	short got_installparm
 26492                                  done_installparm:
 26493 000012BE 2E880E[F002]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 26494                                  	; 05/09/2023
 26495 000012C3 08C9                    	or	cl,cl
 26496                                  	;cmp	cl,0			; if no parm,then
 26497 000012C5 7506                    	jne	short install_seg_set 	; let the parm area
 26498 000012C7 2EC606[F102]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 26499                                  					; starts with cr.
 26500                                  install_seg_set:
 26501                                  	; 05/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 26502 000012CD 31DB                    	xor	bx,bx
 26503                                  	;mov	word [cs:0],0		; make a null environment segment
 26504 000012CF 2E891F                  	mov	[cs:bx],bx ; 05/09/2023
 26505 000012D2 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 26506                                  
 26507                                  ;---------------------------------------------------M067----------------
 26508                                  ;
 26509                                  ; 	the environment pointer is made 0. so the current environment ptr.
 26510                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 26511                                  ;
 26512                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 26513                                  ;
 26514                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 26515                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 26516                                  ; 	was fixed. 
 26517                                  ;
 26518                                  ; ----------------------------------------------------------------------
 26519                                  
 26520                                  ;;ifdef MULTI_CONFIG
 26521                                  
 26522                                  ; If there's any environment data in "config_wrkseg", pass to app
 26523                                  
 26524                                  ; 30/12/2022 - Retro DOS v4.0 (Modified MSDOS 6.21 IO.SYS SYSINIT)
 26525                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 26526                                  ;%if 0
 26527 000012D4 89C1                    	mov	cx,ax ; *
 26528                                  	; 05/09/2023
 26529 000012D6 2E391E[6019]            	cmp	[cs:config_envlen],bx ; 0
 26530                                  	;cmp	word [cs:config_envlen],0
 26531 000012DB 7405                    	je	short no_envdata2
 26532 000012DD 2E8B0E[6219]            	mov	cx,[cs:config_wrkseg] ; *
 26533                                  no_envdata2:
 26534                                  ;;endif  ;MULTI_CONFIG
 26535                                  
 26536                                  ;%endif	; 24/10/2022
 26537                                  
 26538                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 26539                                  	; 05/09/2023 (BugFix)
 26540                                  	; 24/10/2022
 26541 000012E2 2E890E[4203]            	mov	[cs:iexec.environ],cx ; *
 26542                                  	; 02/11/2022
 26543                                  	;mov	[cs:iexec.environ],ax	; 05/09/2023
 26544                                  
 26545                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 26546 000012E7 2EA3[4603]              	mov	[cs:iexec.ldexec_line+2],ax
 26547                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 26548 000012EB 2EA3[4A03]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 26549                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 26550 000012EF 2EA3[4E03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 26551 000012F3 E86000                  	call	sum_up
 26552 000012F6 26A3[DA02]              	mov	[es:checksum],ax	; save the value of the sum
 26553 000012FA 31C0                    	xor	ax,ax
 26554 000012FC B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 26555 000012FE BB[4203]                	mov	bx,instexe		; es:bx -> parm block.
 26556 00001301 06                      	push	es			; save es,ds for load/exec
 26557 00001302 1E                      	push	ds			; these registers will be restored in sysinit_base.
 26558 00001303 2EFF2E[D202]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 26559                                  					; load/exec function and check sum.
 26560                                  
 26561                                  ;----------------------------------------
 26562                                  
 26563                                  ;j.k. this is the returning address from sysinit_base.
 26564                                  
 26565                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 26566                                  
 26567                                  sysinitptr:				; returning far address from sysinit_base
 26568 00001308 5E                      	pop	si			; restore si for config.sys file.
 26569 00001309 06                      	push	es
 26570 0000130A 1E                      	push	ds
 26571 0000130B 07                      	pop	es
 26572 0000130C 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 26573 0000130D 7305                            jnc     short install_exit_ret
 26574                                  
 26575 0000130F 56                      	push	si			; error in loading the file for install=.
 26576 00001310 E81937                  	call	badload 		; es:si-> path,filename,0.
 26577 00001313 5E                      	pop	si
 26578                                  
 26579                                  	; 24/10/2022
 26580                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 26581                                  	; 11/12/2022
 26582                                  	; ds = cs
 26583                                  
 26584                                  	; 30/12/2022 - Retro DOS v4.2
 26585                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:1283h)
 26586                                  
 26587                                  install_exit_ret:
 26588 00001314 C3                      	retn
 26589                                  
 26590                                  ; 30/12/2022 - Retro DOS v4.2
 26591                                  %if 0
 26592                                  install_exit_ret:
 26593                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 26594                                  
 26595                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 26596                                  ;SYSINIT:1142h:
 26597                                  	mov     ah,4Dh
 26598                                  	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 26599                                  	cmp     ah,3
 26600                                  	jz      short sysinitptr_retn
 26601                                  	call    error_line
 26602                                  	stc
 26603                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 26604                                  	retn		
 26605                                  
 26606                                  %endif ; 24/10/2022
 26607                                  
 26608                                  ; ----------------------------------------------------------------------
 26609                                  
 26610                                  ;**	ParaRound - Round Up length to paragraph multiple
 26611                                  ;
 26612                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 26613                                  ;	by 16 yielding a "length in paragraphs" value.
 26614                                  ;
 26615                                  ;	ENTRY	(ax) = byte length
 26616                                  ;	EXIT	(ax) = rounded up length in paragraphs
 26617                                  ;	USES	ax, flags
 26618                                  
 26619                                  ParaRound:
 26620 00001315 83C00F                  	add	ax,15
 26621 00001318 D1D8                    	rcr	ax,1
 26622 0000131A D1E8                    	shr	ax,1
 26623 0000131C D1E8                    	shr	ax,1
 26624 0000131E D1E8                    	shr	ax,1
 26625 00001320 C3                      	retn
 26626                                  
 26627                                  ; ----------------------------------------------------------------------
 26628                                  ; sysinit_base module.
 26629                                  ;
 26630                                  ; This module is relocated by the routine EndFile to a location in low
 26631                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 26632                                  ; that are being loaded by the "install=" command. After the EXEC call
 26633                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 26634                                  ; top of memory) to be sure that the EXECed program did not damage it.
 26635                                  ; If it did, then this module will print an error message and stop the
 26636                                  ; system. Otherwise, it returns control to SYSINIT.
 26637                                  ;
 26638                                  ;in: after relocation,
 26639                                  ;    ax = 4b00h - load and execute the program dos function.
 26640                                  ;    ds = confbot. segment of config.sys file image
 26641                                  ;    es = sysinitseg. segment of sysinit module itself.
 26642                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 26643                                  ;    es:bx = pointer to a parameter block for load.
 26644                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 26645                                  ;    bigsize (word) - # of word from confbot to SI_end.
 26646                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 26647                                  ;			word boundary moduler form.
 26648                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 26649                                  ;
 26650                                  ;note: sysinit should save necessary registers and when the control is back
 26651                                  
 26652                                  	; 24/10/2022
 26653                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 26654                                  sysinit_base:				
 26655 00001321 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 26656 00001326 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 26657 0000132B CD21                    	int	21h			; load/exec dos call.
 26658 0000132D 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 26659 00001332 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 26660 00001337 1F                      	pop	ds			; restore confbot seg
 26661 00001338 07                      	pop	es			; restore sysinitseg
 26662 00001339 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 26663                                  					; at this time,i don't have to worry about
 26664                                  					; that sysinit module has been broken or not.
 26665 0000133B E81800                  	call	sum_up			; otherwise,check if it is good.
 26666 0000133E 263906[DA02]            	cmp	[es:checksum],ax
 26667 00001343 740C                    	je	short sysinit_base_end
 26668                                  
 26669                                  ;	memory broken. show "memory allocation error" message and stall.
 26670                                  
 26671 00001345 B409                    	mov	ah,9
 26672 00001347 0E                      	push	cs
 26673 00001348 1F                      	pop	ds
 26674                                  	; 30/12/2022
 26675                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:12B8h)
 26676                                  	;mov	dx,102
 26677 00001349 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 26678                                  					; 66h (for MSDOS 6.21 SYSINIT)
 26679 0000134C CD21                    	int	21h
 26680                                  		; DOS - PRINT STRING
 26681                                  		; DS:DX -> string terminated by "$"
 26682                                  
 26683                                  	; 30/12/2022 - Retro DOS v4.2
 26684                                  stall:
 26685                                  	; 24/10/2022
 26686                                  _stall: 
 26687                                  	; 11/12/2022
 26688 0000134E F4                      	hlt 
 26689                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26690                                  	;hlt				;use HLT to minimize energy consumption
 26691 0000134F EBFD                            jmp	short _stall
 26692                                  
 26693                                  sysinit_base_end: 
 26694 00001351 26FF2E[D602]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 26695                                  
 26696                                  ;-------------------------------------
 26697                                  
 26698                                  sum_up:
 26699                                  
 26700                                  ;in:   es - sysinitseg.
 26701                                  ;out:  ax - result
 26702                                  ;
 26703                                  ;remark: since this routine will only check starting from "locstack" to the end of
 26704                                  ;	 sysinit segment,the data area, and the current stack area are not
 26705                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 26706                                  ;	 gaurantee to be safe.
 26707                                  ;
 26708                                  ;first sum up confbot seg.
 26709                                  
 26710 00001356 1E                      	push	ds
 26711                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26712                                  	; (SYSINIT:12C6h)
 26713 00001357 26A1[A302]              	mov	ax,[es:CONFBOT]
 26714                                  	; 24/10/2022
 26715                                  	;mov	ax,[es:top_of_cdss]
 26716 0000135B 8ED8                    	mov	ds,ax
 26717 0000135D 31F6                    	xor	si,si
 26718 0000135F 31C0                    	xor	ax,ax
 26719 00001361 268B0E[D002]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 26720                                  					; whole test better fail.
 26721 00001366 D1E9                    	shr	cx,1			; make it a word count
 26722 00001368 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 26723                                  sum1:
 26724 0000136A 0304                    	add	ax,[si]
 26725 0000136C 46                      	inc	si
 26726 0000136D 46                      	inc	si
 26727 0000136E E2FA                    	loop	sum1
 26728                                  ;now,sum up sysinit module.
 26729                                  sum_sys_code:
 26730                                  	; 24/10/2022
 26731 00001370 BE7013                  	mov	si,locstack ;; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 26732                                  			    ;; 532h (MSDOS 6.21 IO.SYS, SYSINIT)
 26733                                  			    ; 10/04/2024	
 26734                                  			    ; 586h (PCDOS 7.1 IBMBIO.COM, SYSINIT)	
 26735                                  				        ; starting after the stack.  M069
 26736                                  					;  this does not cover the possible stack code!!!
 26737                                  	;;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 26738                                  	; 02/11/2022
 26739                                  	;;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 26740                                  	; 10/04/2024
 26741                                  	;mov	cx,5B40h  ; (23360) for PCDOS 7.1 IBMBIO.COM (SYSINIT)	
 26742                                  	; 30/12/2022  
 26743 00001373 B9[1054]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 26744 00001376 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 26745 00001378 D1E9                    	shr	cx,1
 26746                                  sum2:
 26747 0000137A 260304                  	add	ax,[es:si]
 26748 0000137D 46                      	inc	si
 26749 0000137E 46                      	inc	si
 26750 0000137F E2F9                    	loop	sum2
 26751 00001381 1F                      	pop	ds
 26752 00001382 C3                      	retn
 26753                                  
 26754                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 26755                                  ; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 26756                                  ; (SYSINIT:12F2h)
 26757                                  ; 10/04/2024 - Retro DOS 5.0 (Modified PCDOS 7.1 IBMBIO.COM, SYSINIT)
 26758                                  ; (SYSINIT:149Dh)
 26759                                  
 26760                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 26761                                  ;SYSINIT:11BDh:			    ; = 62 (MSDOS 6.21 IO.SYS, SYSINIT:1290h)
 26762                                  				    ; = 62 (PCDOS 7.1 IBMBIO.COM, SYSINIT:143Bh)
 26763                                  sysinit_base_ssx:	
 26764 00001383 0000                    	dw	0
 26765                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 26766                                  ;SYSINIT:11BFh:			    ; = 64 (MSDOS 6.21 IO.SYS, SYSINIT:1295h)
 26767                                  				    ; = 64 (PCDOS 7.1 IBMBIO.COM, SYSINIT:1440h)
 26768                                  sysinit_base_spx:
 26769 00001385 0000                    	dw	0	
 26770                                  
 26771                                  mem_alloc_err_msgx:
 26772                                  
 26773                                         ;include msbio.cl4		; memory allocation error message
 26774                                  
 26775                                  ;(SYSINIT:12F6h: ; MSDOS 6.21 IO.SYS)
 26776                                  ;SYSINIT:14A1h:	; PCDOS 7.1 IBMBIO.COM
 26777 00001387 0D0A                    	db	0Dh,0Ah
 26778 00001389 4D656D6F727920616C-     	db 	'Memory allocation error $'
 26778 00001392 6C6F636174696F6E20-
 26778 0000139B 6572726F722024     
 26779                                  
 26780                                  end_sysinit_base: ; label byte
 26781                                  	; 24/10/2022
 26782                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 26783                                  
 26784                                  ; ----------------------------------------------------------------------
 26785                                  ; Set_Buffer
 26786                                  ;
 26787                                  ;function: set buffers in the real memory.				  
 26788                                  ;	   lastly set the memhi,memlo for the next available free address.
 26789                                  ;
 26790                                  ;input:    ds:bx -> buffinfo.
 26791                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 26792                                  ;	   singlebuffersize = buffer header size + sector size		  
 26793                                  ;
 26794                                  ;output:   buffers Queue established.	       				   
 26795                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 26796                                  ; ----------------------------------------------------------------------
 26797                                  
 26798                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 26799                                  	; (SYSINIT:11DCh)
 26800                                  
 26801                                  	; 11/04/2024 - Retro DOS 5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 26802                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:14BCh)
 26803                                  
 26804                                  set_buffer:
 26805 000013A2 30D2                    	xor	dl,dl				; assume buffers not in HMA
 26806 000013A4 E85500                  	call	GetBufferAddr
 26807 000013A7 7402                    	jz	short set_buff_1
 26808 000013A9 B201                    	mov	dl,1				; buffers in HMA
 26809                                  set_buff_1:
 26810                                  	; 25/10/2022
 26811                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 26812 000013AB 893F                    	mov	[bx],di
 26813                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 26814 000013AD 8C4702                  	mov	[bx+2],es
 26815                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 26816 000013B0 C747040000              	mov	word [bx+4],0
 26817                                  
 26818 000013B5 89F8                    	mov	ax,di
 26819 000013B7 2E8B0E[9902]            	mov	cx,[cs:buffers]
 26820 000013BC 57                      	push	di				; remember first buffer
 26821                                  
 26822                                  ;	for each buffer
 26823                                  
 26824                                  nxt_buff:
 26825 000013BD E87500                  	call	set_buffer_info 		; set buf_link,buf_id...
 26826 000013C0 89C7                    	mov	di,ax
 26827 000013C2 E2F9                    	loop	nxt_buff
 26828                                  
 26829 000013C4 2E2B3E[9D02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 26830                                  
 26831 000013C9 59                      	pop	cx				; get first buffer
 26832                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 26833 000013CA 26890D                  	mov	[es:di],cx
 26834 000013CD 87CF                    	xchg	cx,di
 26835                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 26836                                  	; 25/10/2022
 26837 000013CF 26894D02                	mov	[es:di+2],cx
 26838                                  
 26839 000013D3 08D2                    	or	dl,dl				; In HMa ?
 26840 000013D5 7417                    	jz	short set_buff_2		; no
 26841                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 26842 000013D7 C6470C01                	mov	byte [bx+12],1
 26843 000013DB 2EA1[6403]              	mov	ax,[cs:memhi]			; seg of scratch buff
 26844                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 26845 000013DF C7470D0000              	mov	word [bx+13],0
 26846                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 26847 000013E4 89470F                  	mov	word [bx+15],ax
 26848 000013E7 2EA1[9D02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 26849                                  	; 11/04/2024 - Retro DOS v5.0
 26850                                  	; 05/09/2023
 26851                                  	;;sub	ax,bufinsiz ; 20		; buffer head not required
 26852                                  	;sub	ax,20
 26853 000013EB 83E818                  	sub	ax,24 ; bufinsiz		; (bufinsiz is 24 in PCDOS 7.1)
 26854                                  
 26855                                  set_buff_2:
 26856 000013EE 2E0106[6203]            	add	[cs:memlo],ax
 26857                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 26858 000013F3 2E800E[6919]02          	or	byte [cs:setdevmarkflag],2
 26859                                  	;call	round
 26860                                  	;retn
 26861                                  	; 12/12/2022
 26862 000013F9 E9F633                  	jmp	round
 26863                                  
 26864                                  ; ----------------------------------------------------------------------
 26865                                  ; procedure : GetBufferAddr
 26866                                  ;
 26867                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 26868                                  ;
 26869                                  ; returns in es:di the buffer adress
 26870                                  ; returns NZ if allocated in HMA
 26871                                  ; ----------------------------------------------------------------------
 26872                                  
 26873                                  	; 25/10/2022 
 26874                                  GetBufferAddr:
 26875 000013FC 53                      	push	bx
 26876 000013FD 52                      	push	dx
 26877                                  
 26878                                  	; 11/04/2024 - Retro DOS v5.0
 26879                                  	; PCDOS 7.1 IBMBIO.COM
 26880                                  	;;;
 26881 000013FE 2E803E[6E03]02          	cmp	byte [cs:dosdata_umb],2
 26882                                  				; is dosdata moved to UMB ? (DOSDATA=UMB done)
 26883 00001404 7506                    	jne	short gba_1     ; no
 26884 00001406 837F02FF                	cmp	word [bx+2],0FFFFh ; is the buffer (already) in HMA ?
 26885 0000140A 7423                    	je	short gba_2	; yes
 26886                                  gba_1:
 26887                                  	;;;
 26888                                  
 26889 0000140C 2EA1[9D02]              	mov	ax, [cs:singlebuffersize]
 26890 00001410 2EF726[9902]            	mul	word [cs:buffers]
 26891                                  	;add	ax,0Fh
 26892 00001415 83C00F                  	add	ax,15 
 26893                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26894                                  	;and	ax,~15	; 0FFF0h	; para round
 26895                                  	; 12/12/2022
 26896 00001418 24F0                    	and	al,~15	; 0F0h
 26897 0000141A 89C3                    	mov	bx,ax
 26898 0000141C B8024A                  	mov	ax,4A02h
 26899                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 26900 0000141F CD2F                    	int	2Fh	; DOS 5+ - ALLOCATE HMA SPACE
 26901                                  			;     AX = 4A02h
 26902                                  			;     BX = number of bytes
 26903                                  			; Return:
 26904                                  			;     ES:DI -> start of allocated HMA block or FFFFh:FFFFh
 26905                                  			;     BX = number of bytes actually allocated
 26906                                  			;	   (rounded up to next paragraph)
 26907                                  			; Notes:
 26908                                  			;     this call is not valid unless DOS is loaded in the HMA
 26909                                  			;     (DOS=HIGH)
 26910                                  
 26911 00001421 83FFFF                  	cmp	di,0FFFFh
 26912 00001424 7506                    	jne	short got_hma
 26913                                  	
 26914                                  	;mov	di,0		; dont xor di,di Z flag needed
 26915                                  	; 05/09/2023
 26916                                  	; zf=1
 26917 00001426 47                      	inc	di ; 0FFFFh -> 0
 26918                                  	; zf=1
 26919                                  	
 26920                                  	;zf=1
 26921                                  	;xor	di,di	; 25/10/2022
 26922                                  	;zf=1
 26923 00001427 2E8E06[6403]            	mov	es,[cs:memhi]
 26924                                  got_hma:
 26925 0000142C 5A                      	pop	dx
 26926 0000142D 5B                      	pop	bx
 26927 0000142E C3                      	retn
 26928                                  
 26929                                  	; 11/04/2024 - Retro DOS v5.0
 26930                                  	; PCDOS 7.1 IBMBIO.COM
 26931                                  	;;;
 26932                                  gba_2:
 26933 0000142F C43F                    	les	di,[bx]
 26934 00001431 09FF                    	or	di,di
 26935                                  	;pop	dx
 26936                                  	;pop	bx
 26937                                  	;retn
 26938                                  	; 11/04/2024 - Retro DOS v5.0
 26939 00001433 EBF7                    	jmp	short got_hma
 26940                                  	;;;
 26941                                  
 26942                                  ; ----------------------------------------------------------------------
 26943                                  
 26944                                  set_buffer_info:
 26945                                  
 26946                                  ;function: set buf_link,buf_id,buf_sector
 26947                                  ;
 26948                                  ;in: es:di -> buffer header to be set.
 26949                                  ;    ax = di
 26950                                  ;
 26951                                  ;out:
 26952                                  ;    above entries set.
 26953                                  
 26954                                  	; 25/10/2022 
 26955 00001435 2EFF36[BD02]            	push	word [cs:buf_prev_off]
 26956                                  	;pop	word [es:di+buffinfo.buf_prev]
 26957 0000143A 268F4502                	pop	word [es:di+2]
 26958 0000143E 2EA3[BD02]              	mov	[cs:buf_prev_off],ax
 26959 00001442 2E0306[9D02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 26960                                  	;mov	[es:di+buffinfo.buf_next],ax
 26961 00001447 268905                  	mov	[es:di],ax
 26962                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 26963 0000144A 26C74504FF00            	mov	word [es:di+4],00FFh
 26964                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 26965 00001450 26C745060000            	mov	word [es:di+6],0
 26966                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 26967 00001456 26C745080000            	mov	word [es:di+8],0
 26968 0000145C C3                      	retn
 26969                                  
 26970                                  ; ======================================================================
 26971                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 26972                                  ; ----------------------------------------------------------------------
 26973                                  ; 27/03/2019 - Retro DOS v4.0
 26974                                  
 26975                                  ; ----------------------------------------------------------------------
 26976                                  ; ibmstack initialization routine.
 26977                                  ;
 26978                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 26979                                  ;	has been modified. this initialization routine also has to
 26980                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 26981                                  ;	should be set to signal that this interrupt handler is the
 26982                                  ;	first handler hooked to this interrupt vector.
 26983                                  ;	we determine this by looking at the instruction pointed by
 26984                                  ;	this vector. if it is iret, then this handler should be the
 26985                                  ;	first one. in our case, only the interrupt vector 77h is the
 26986                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 26987                                  ;
 26988                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 26989                                  ;	some design changes are needed to the above interrupt sharing
 26990                                  ;	method. the above sharing scheme assumes that 1). interrupt
 26991                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 26992                                  ;	interrupts would only be generated on levels 7 and 15.
 26993                                  ;	these assumptions are not true any more. we have to use the firstflag
 26994                                  ;	for every level of interrupt. we will set the firstflag on the following
 26995                                  ;	conditions:
 26996                                  ;
 26997                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 26998                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 26999                                  ;	 c. else if cs:ip points to an iret, then "first"
 27000                                  ;	 d. else if cs:ip points to dummy, then "first"
 27001                                  ;
 27002                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 27003                                  ;	be equal to the value at f000:ff01. this location is the initial value
 27004                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 27005                                  ;	the bioses for all of the machines.
 27006                                  ;
 27007                                  ;	system design group requests bios to handle the phantom interrupts.
 27008                                  ;
 27009                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 27010                                  ;	produced by the bogus adapter card even without interrupt request is
 27011                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 27012                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 27013                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 27014                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 27015                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 27016                                  ;	interrupt line.
 27017                                  ;
 27018                                  ;	to handle those "phantom" interrupts, the main stack code will check
 27019                                  ;	the own firstflag, and if it is not "first" (which means the forward
 27020                                  ;	pointer points to the legal shared interrupt handler), then pass the
 27021                                  ;	control. if it is the first, then the following action should be
 27022                                  ;	taken. we don't have to implement skack logic in this case.
 27023                                  ;
 27024                                  ;	to implement this logic, we rather choose a simple method.
 27025                                  ;	if ont of the above "firstflag" conditions is met, we are not
 27026                                  ;	going to hook this interrupt vector. the reason is if the original
 27027                                  ;	vector points to "iret" and do nothing, we don't need
 27028                                  ;	to implement the stack logic for it. this will simplify implementation
 27029                                  ;	while maintaining compatibility with the old version of dos.
 27030                                  ;	this implies that in the main stack code, there might be a stack code
 27031                                  ;	that will never be used, a dead code.
 27032                                  ;
 27033                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 27034                                  
 27035                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 27036                                  	; (SYSINIT:1287h)
 27037                                  
 27038                                  	; 11/04/2024 - Retro DOS 5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 27039                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:157Ch)
 27040                                  
 27041                                  	; 14/12/2022
 27042                                  stackinit:
 27043 0000145D 50                      	push	ax
 27044 0000145E 1E                      	push	ds
 27045 0000145F 06                      	push	es
 27046 00001460 53                      	push	bx
 27047 00001461 51                      	push	cx
 27048 00001462 52                      	push	dx
 27049 00001463 57                      	push	di
 27050 00001464 56                      	push	si
 27051 00001465 55                      	push	bp
 27052                                  
 27053                                  ;currently es -> stack code area
 27054                                  
 27055                                  	; 12/12/2022
 27056                                  	; ds = cs
 27057 00001466 A1[8C02]                	mov	ax,[stack_count]
 27058 00001469 89C1                    	mov	cx,ax  ; *!*!*  
 27059                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27060                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 27061                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 27062 0000146B 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 27063                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 27064 0000146F A1[8E02]                	mov	ax,[stack_size]	 ; !!		;in cs
 27065 00001472 26A3[0600]              	mov	[es:stacksize],ax
 27066                                  	; 12/12/2022
 27067 00001476 A1[9002]                	mov	ax,[stack_addr]			; offset
 27068                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27069                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 27070                                  	;mov	ax,[cs:stack_addr]  ; !!
 27071 00001479 26A3[0800]              	mov	[es:stacks],ax
 27072                                  	; 12/12/2022
 27073 0000147D 89C5                    	mov	bp,ax ; *!*
 27074 0000147F A1[9202]                	mov	ax,[stack_addr+2]
 27075                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27076                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 27077                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 27078 00001482 26A3[0A00]              	mov	[es:stacks+2],ax
 27079                                  
 27080                                  ; initialize the data fields with the parameters
 27081                                  
 27082                                  ; "firstentry" will always be at stacks
 27083                                  
 27084                                  	;mov	bp,[es:stacks]			; get offset of stack
 27085                                  	; 12/12/2022
 27086                                  	; bp = [es:stacks] ; *!*
 27087 00001486 26892E[0C00]            	mov	[es:firstentry],bp
 27088                                  
 27089                                  ; the stacks will always immediately follow the table entries
 27090                                  
 27091 0000148B B80800                  	mov	ax,entrysize ; 8
 27092                                  	;mov	cx,[es:stackcount]
 27093                                  	; 12/12/2022
 27094                                  	; cx = [es:stackcount] ; *!*!*
 27095 0000148E F7E1                    	mul	cx
 27096 00001490 01E8                    	add	ax,bp
 27097 00001492 26A3[0400]              	mov	[es:stackat],ax
 27098 00001496 89C3                    	mov	bx,ax
 27099 00001498 83EB02                  	sub	bx,2
 27100                                  
 27101                                  ; zero the entire stack area to start with
 27102                                  
 27103 0000149B 268B3E[0400]            	mov	di,[es:stackat]
 27104 000014A0 26A1[0600]              	mov	ax,[es:stacksize]
 27105 000014A4 F7E1                    	mul	cx
 27106 000014A6 89C1                    	mov	cx,ax
 27107 000014A8 31C0                    	xor	ax,ax
 27108 000014AA 06                      	push	es
 27109 000014AB 1F                      	pop	ds				;ds = relocated stack code seg.
 27110                                  
 27111                                  ;now, ds -> stack code area
 27112                                  
 27113 000014AC 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 27114 000014B0 FC                      	cld
 27115 000014B1 F3AA                    	rep	stosb
 27116                                  
 27117 000014B3 8B0E[0200]              	mov	cx,[stackcount]
 27118                                  
 27119                                  ; loop for "count" times, building a table entry
 27120                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 27121                                  ;  cx = number of entries
 27122                                  ;  es:bp => base of stacks - 2
 27123                                  ;  es:bx => first table entry
 27124                                  
 27125                                  buildloop:
 27126                                  	; 11/12/2022
 27127                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 27128                                  	; 25/10/2022
 27129                                  	;mov	byte [es:bp],free
 27130                                  	; 06/07/2023
 27131 000014B7 26884600                	mov	[es:bp],al ; 0 ; free
 27132 000014BB 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 27133                                  	;mov	[es:bp+1],al
 27134 000014BF 26894602                	mov	[es:bp+savedsp],ax
 27135                                  	;mov	[es:bp2],ax
 27136 000014C3 26894604                	mov	[es:bp+savedss],ax
 27137                                  	;mov	[es:bp+4],ax
 27138 000014C7 031E[0600]              	add	bx,[stacksize]
 27139 000014CB 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 27140                                  	;mov	[es:bp+6],bx
 27141 000014CF 26892F                  	mov	[es:bx],bp
 27142 000014D2 83C508                  	add	bp,entrysize ; 8
 27143                                  
 27144 000014D5 E2E0                    	loop	buildloop
 27145                                  
 27146 000014D7 83ED08                  	sub	bp,entrysize ; 8
 27147 000014DA 892E[0E00]              	mov	[lastentry],bp
 27148 000014DE 892E[1000]              	mov	[nextentry],bp
 27149                                  
 27150 000014E2 1E                      	push	ds
 27151                                  	;mov	ax,0F000h		;look at the model byte
 27152                                  	; 05/09/2023
 27153 000014E3 B4F0                    	mov	ah,0F0h ; ax = 0F000h
 27154 000014E5 8ED8                    	mov	ds,ax
 27155 000014E7 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 27156 000014EC 1F                      	pop	ds
 27157 000014ED 7504                    	jne	short skip_disablenmis
 27158                                  
 27159 000014EF B007                    	mov	al,07h			; disable convertible nmis
 27160 000014F1 E672                    	out	72h,al
 27161                                  
 27162                                  skip_disablenmis:
 27163 000014F3 31C0                    	xor	ax,ax
 27164 000014F5 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 27165                                  					;ds - relocated stack code segment
 27166 000014F7 FA                      	cli
 27167                                  
 27168                                  	;irp	aa,<02,08,09,70>
 27169                                  	;
 27170                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 27171                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 27172                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 27173                                  	;mov	dx,offset int&aa	;pass where new handler is
 27174                                  	;call	new_init_loop		;adjust the vector to new handler,
 27175                                  	;				;saving pointer to original owner
 27176                                  	;endm
 27177                                  
 27178                                  stkinit_02:
 27179 000014F8 BE0800                  	mov	si,02h*4 ; 8
 27180 000014FB BF[B305]                	mov	di,INT19OLD02
 27181 000014FE BB[1200]                	mov	bx,old02
 27182 00001501 BA[1600]                	mov	dx,int02
 27183 00001504 E84801                  	call	new_init_loop
 27184                                  stkinit_08:
 27185 00001507 BE2000                  	mov	si,08h*4 ; 32
 27186 0000150A BF[B805]                	mov	di,INT19OLD08
 27187 0000150D BB[3800]                	mov	bx,old08
 27188 00001510 BA[3C00]                	mov	dx,int08
 27189 00001513 E83901                  	call	new_init_loop
 27190                                  stkinit_09:
 27191 00001516 BE2400                  	mov	si,09h*4 ; 36
 27192 00001519 BF[BD05]                	mov	di,INT19OLD09
 27193 0000151C BB[4100]                	mov	bx,old09
 27194 0000151F BA[4500]                	mov	dx,int09
 27195 00001522 E82A01                  	call	new_init_loop
 27196                                  stkinit_70:
 27197 00001525 BEC001                  	mov	si,70h*4 ; 448
 27198 00001528 BF[DB05]                	mov	di,INT19OLD70
 27199 0000152B BB[4E00]                	mov	bx,old70
 27200 0000152E BA[5200]                	mov	dx,int70
 27201 00001531 E81B01                  	call	new_init_loop
 27202                                  
 27203                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 27204                                  	;
 27205                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 27206                                  	;push	ds			;save relocated stack code segment
 27207                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 27208                                  	;push	ds
 27209                                  	;pop	dx			;dx = segment value
 27210                                  	;	
 27211                                  	;cmp	dx,0
 27212                                  	;jz	int&aa&_first
 27213                                  	;
 27214                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 27215                                  	;jz	int&aa&_first
 27216                                  	;
 27217                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 27218                                  	;jz	int&aa&_not_first
 27219                                  	;
 27220                                  	;cmp	dx,0f000h		;rom bios segment
 27221                                  	;jnz	int&aa&_not_first
 27222                                  	;
 27223                                  	;push	es
 27224                                  	;push	dx
 27225                                  	;mov	dx,0f000h
 27226                                  	;mov	es,dx
 27227                                  	;cmp	bx,word ptr es:0ff01h
 27228                                         	;pop	dx
 27229                                  	;pop	es
 27230                                  	;jz	int&aa&_first
 27231                                  	;
 27232                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 27233                                  	;pop	ds
 27234                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 27235                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 27236                                  	;mov	dx, offset int&aa	;pass where new handler is
 27237                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 27238                                  	;				;pointer to original owner.
 27239                                  	;jmp	short int&aa&_end
 27240                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 27241                                  	;pop	ds
 27242                                  ;int&aa&_end:
 27243                                  	;
 27244                                  	;endm
 27245                                  
 27246                                  stkinit_0A:
 27247 00001534 BE2800                  	mov	si,0Ah*4 ; 40
 27248                                  	
 27249                                  ; 14/12/2022
 27250                                  %if 0	
 27251                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27252                                  	push	ds
 27253                                  	
 27254                                  	lds	bx,[es:si]
 27255                                  	push	ds
 27256                                  	pop	dx
 27257                                  		
 27258                                  	cmp	dx,0
 27259                                  	je	short int_0A_first
 27260                                  	
 27261                                  	cmp	byte [bx],0CFh
 27262                                  	je	short int_0A_first
 27263                                  	
 27264                                  	cmp	word [bx+6],424Bh
 27265                                  	je	short int_0A_not_first
 27266                                  	
 27267                                  	cmp	dx,0F000h
 27268                                  	jne	short int_0A_not_first
 27269                                  	
 27270                                  	push	es
 27271                                  	push	dx
 27272                                  	mov	dx,0F000h
 27273                                  	mov	es,dx
 27274                                  	cmp	bx,[es:0FF01h]
 27275                                         	pop	dx
 27276                                  	pop	es
 27277                                  	je	short int_0A_first
 27278                                  %Endif
 27279                                  
 27280                                  	; 14/12/2022
 27281                                  	; 25/10/2022
 27282 00001537 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 27283 0000153A 730C                    	jnc	short int_0A_first
 27284                                  	
 27285                                  int_0A_not_first:
 27286                                  	; 14/12/2022
 27287                                  	; 25/10/2022
 27288                                  	;pop	ds
 27289 0000153C BF[C205]                	mov	di,INT19OLD0A
 27290 0000153F BB[5900]                	mov	bx,old0A
 27291 00001542 BA[5700]                	mov	dx,int0A
 27292 00001545 E80701                  	call	new_init_loop
 27293                                  	
 27294                                  	; 14/12/2022	
 27295                                  	;jmp	short int_0A_end
 27296                                  ;int_0A_first:
 27297                                  	; 25/10/2022
 27298                                  	;pop	ds
 27299                                  
 27300                                  	; 14/12/2022
 27301                                  int_0A_first:
 27302                                  int_0A_end:
 27303                                  
 27304                                  stkinit_0B:
 27305 00001548 BE2C00                  	mov	si,0Bh*4 ; 44
 27306                                  	
 27307                                  	; 14/12/2022
 27308                                  	; 25/10/2022
 27309 0000154B E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 27310 0000154E 730C                    	jnc	short int_0B_end ; int_0B_first
 27311                                  
 27312                                  ; 14/12/2022
 27313                                  %if 0	
 27314                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27315                                  	push	ds
 27316                                  	lds	bx,[es:si]
 27317                                  	push	ds
 27318                                  	pop	dx
 27319                                  		
 27320                                  	cmp	dx,0
 27321                                  	je	short int_0B_first
 27322                                  
 27323                                  	cmp	byte [bx],0CFh
 27324                                  	je	short int_0B_first
 27325                                  	
 27326                                  	cmp	word [bx+6],424Bh
 27327                                  	je	short int_0B_not_first
 27328                                  	
 27329                                  	cmp	dx,0F000h
 27330                                  	jne	short int_0B_not_first
 27331                                  
 27332                                  	push	es
 27333                                  	push	dx
 27334                                  	mov	dx,0F000h
 27335                                  	mov	es,dx
 27336                                  	cmp	bx,[es:0FF01h]
 27337                                  	pop	dx
 27338                                  	pop	es
 27339                                  	je	short int_0B_first
 27340                                  %endif
 27341                                  
 27342                                  int_0B_not_first:
 27343                                  	; 14/12/2022
 27344                                  	; 25/10/2022
 27345                                  	;pop	ds
 27346 00001550 BF[C705]                	mov	di,INT19OLD0B
 27347 00001553 BB[7100]                	mov	bx,old0B
 27348 00001556 BA[6F00]                	mov	dx,int0B
 27349 00001559 E8F300                  	call	new_init_loop
 27350                                  
 27351                                  	; 14/12/2022
 27352                                  	;jmp	short int_0B_end
 27353                                  ;int_0B_first:
 27354                                  	; 25/10/2022
 27355                                  	;pop	ds
 27356                                  
 27357                                  int_0B_end:
 27358                                  	
 27359                                  stkinit_0C:
 27360 0000155C BE3000                  	mov	si,0Ch*4 ; 48
 27361                                  	
 27362                                  	; 14/12/2022
 27363                                  	; 25/10/2022
 27364 0000155F E8C300                  	call	int_xx_first_check
 27365 00001562 730C                    	jnc	short int_0C_end ; int_0C_first
 27366                                  
 27367                                  ; 14/12/2022
 27368                                  %if 0	
 27369                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27370                                  	push	ds
 27371                                  	lds	bx,[es:si]
 27372                                  	push	ds
 27373                                  	pop	dx
 27374                                  		
 27375                                  	cmp	dx,0
 27376                                  	je	short int_0C_first
 27377                                  
 27378                                  	cmp	byte [bx],0CFh
 27379                                  	je	short int_0C_first
 27380                                  	
 27381                                  	cmp	word [bx+6],424Bh
 27382                                  	je	short int_0C_not_first
 27383                                  	
 27384                                  	cmp	dx,0F000h
 27385                                  	jne	short int_0C_not_first
 27386                                  
 27387                                  	push	es
 27388                                  	push	dx
 27389                                  	mov	dx,0F000h
 27390                                  	mov	es,dx
 27391                                  	cmp	bx,[es:0FF01h]
 27392                                  	pop	dx
 27393                                  	pop	es
 27394                                  	je	short int_0C_first
 27395                                  %endif
 27396                                  	
 27397                                  int_0C_not_first:
 27398                                  	; 14/12/2022
 27399                                  	; 25/10/2022
 27400                                  	;pop	ds
 27401 00001564 BF[CC05]                	mov	di,INT19OLD0C
 27402 00001567 BB[8900]                	mov	bx,old0C
 27403 0000156A BA[8700]                	mov	dx,int0C
 27404 0000156D E8DF00                  	call	new_init_loop
 27405                                  
 27406                                  	; 14/12/2022
 27407                                  	;jmp	short int_0C_end
 27408                                  ;int_0C_first:
 27409                                  	; 25/10/2022
 27410                                  	;pop	ds
 27411                                  
 27412                                  int_0C_end:
 27413                                  
 27414                                  stkinit_0D:
 27415 00001570 BE3400                  	mov	si,0Dh*4 ; 52
 27416                                  
 27417                                  	; 14/12/2022	
 27418                                  	; 25/10/2022
 27419 00001573 E8AF00                  	call	int_xx_first_check
 27420 00001576 730C                    	jnc	short int_0D_end ; int_0D_first
 27421                                  
 27422                                  ; 14/12/2022
 27423                                  %if 0	
 27424                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27425                                  	push	ds
 27426                                  	lds	bx,[es:si]
 27427                                  	push	ds
 27428                                  	pop	dx
 27429                                  		
 27430                                  	cmp	dx,0
 27431                                  	je	short int_0D_first
 27432                                  
 27433                                  	cmp	byte [bx],0CFh
 27434                                  	je	short int_0D_first
 27435                                  	
 27436                                  	cmp	word [bx+6],424Bh
 27437                                  	je	short int_0D_not_first
 27438                                  	
 27439                                  	cmp	dx,0F000h
 27440                                  	jne	short int_0D_not_first
 27441                                  
 27442                                  	push	es
 27443                                  	push	dx
 27444                                  	mov	dx,0F000h
 27445                                  	mov	es,dx
 27446                                  	cmp	bx,[es:0FF01h]
 27447                                  	pop	dx
 27448                                  	pop	es
 27449                                  	je	short int_0D_first
 27450                                  %endif
 27451                                  	
 27452                                  int_0D_not_first:
 27453                                  	; 14/12/2022
 27454                                  	; 25/10/2022
 27455                                  	;pop	ds
 27456 00001578 BF[D105]                	mov	di,INT19OLD0D
 27457 0000157B BB[A100]                	mov	bx,old0D
 27458 0000157E BA[9F00]                	mov	dx,int0D
 27459 00001581 E8CB00                  	call	new_init_loop
 27460                                  
 27461                                  	; 14/12/2022
 27462                                  	;jmp	short int_0D_end
 27463                                  	; 02/11/2022
 27464                                  ;int_0D_first:
 27465                                  	;pop	ds
 27466                                  
 27467                                  int_0D_end:
 27468                                  
 27469                                  stkinit_0E:
 27470 00001584 BE3800                  	mov	si,0Eh*4 ; 56
 27471                                  
 27472                                  	; 14/12/2022	
 27473                                  	; 25/10/2022
 27474 00001587 E89B00                  	call	int_xx_first_check
 27475 0000158A 730C                    	jnc	short int_0E_end ; int_0E_first
 27476                                  
 27477                                  ; 14/12/2022
 27478                                  %if 0	
 27479                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27480                                  	push	ds
 27481                                  	lds	bx,[es:si]
 27482                                  	push	ds
 27483                                  	pop	dx
 27484                                  		
 27485                                  	cmp	dx,0
 27486                                  	je	short int_0E_first
 27487                                  
 27488                                  	cmp	byte [bx],0CFh
 27489                                  	je	short int_0E_first
 27490                                  	
 27491                                  	cmp	word [bx+6],424Bh
 27492                                  	je	short int_0E_not_first
 27493                                  	
 27494                                  	cmp	dx,0F000h
 27495                                  	jne	short int_0E_not_first
 27496                                  
 27497                                  	push	es
 27498                                  	push	dx
 27499                                  	mov	dx,0F000h
 27500                                  	mov	es,dx
 27501                                  	cmp	bx,[es:0FF01h]
 27502                                  	pop	dx
 27503                                  	pop	es
 27504                                  	je	short int_0E_first
 27505                                  %endif
 27506                                  	
 27507                                  int_0E_not_first:
 27508                                  	; 14/12/2022
 27509                                  	; 25/10/2022
 27510                                  	;pop	ds
 27511 0000158C BF[D605]                	mov	di,INT19OLD0E
 27512 0000158F BB[B900]                	mov	bx,old0E
 27513 00001592 BA[B700]                	mov	dx,int0E
 27514 00001595 E8B700                  	call	new_init_loop
 27515                                  
 27516                                  	; 14/12/2022
 27517                                  	;jmp	short int_0E_end
 27518                                  ;int_0E_first:
 27519                                  	; 25/10/2022
 27520                                  	;pop	ds	
 27521                                  
 27522                                  int_0E_end:
 27523                                  
 27524                                  stkinit_72:
 27525 00001598 BEC801                  	mov	si,72h*4 ; 456
 27526                                  	
 27527                                  	; 14/12/2022
 27528                                  	; 25/10/2022
 27529 0000159B E88700                  	call	int_xx_first_check
 27530 0000159E 730C                    	jnc	short int_72_end ; int_72_first
 27531                                  
 27532                                  ; 14/12/2022
 27533                                  %if 0	
 27534                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27535                                  	push	ds
 27536                                  	lds	bx,[es:si]
 27537                                  	push	ds
 27538                                  	pop	dx
 27539                                  		
 27540                                  	cmp	dx,0
 27541                                  	je	short int_72_first
 27542                                  
 27543                                  	cmp	byte [bx],0CFh
 27544                                  	je	short int_72_first
 27545                                  	
 27546                                  	cmp	word [bx+6],424Bh
 27547                                  	je	short int_72_not_first
 27548                                  	
 27549                                  	cmp	dx,0F000h
 27550                                  	jne	short int_72_not_first
 27551                                  
 27552                                  	push	es
 27553                                  	push	dx
 27554                                  	mov	dx,0F000h
 27555                                  	mov	es,dx
 27556                                  	cmp	bx,[es:0FF01h]
 27557                                  	pop	dx
 27558                                  	pop	es
 27559                                  	je	short int_72_first
 27560                                  %endif
 27561                                  	
 27562                                  int_72_not_first:
 27563                                  	; 14/12/2022
 27564                                  	; 25/10/2022
 27565                                  	;pop	ds
 27566 000015A0 BF[E005]                	mov	di,INT19OLD72
 27567 000015A3 BB[D100]                	mov	bx,old72
 27568 000015A6 BA[CF00]                	mov	dx,int72
 27569 000015A9 E8A300                  	call	new_init_loop
 27570                                  
 27571                                  	; 14/12/2022
 27572                                  	;jmp	short int_72_end
 27573                                  ;int_72_first:
 27574                                  	; 25/10/2022
 27575                                  	;pop	ds
 27576                                  
 27577                                  int_72_end:
 27578                                  
 27579                                  stkinit_73:
 27580 000015AC BECC01                  	mov	si,73h*4 ; 460
 27581                                  	
 27582                                  	; 14/12/2022
 27583                                  	; 25/10/2022
 27584 000015AF E87300                  	call	int_xx_first_check
 27585 000015B2 730C                    	jnc	short int_73_end ; int_73_first
 27586                                  
 27587                                  ; 14/12/2022
 27588                                  %if 0	
 27589                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27590                                  	push	ds
 27591                                  	lds	bx,[es:si]
 27592                                  	push	ds
 27593                                  	pop	dx
 27594                                  		
 27595                                  	cmp	dx,0
 27596                                  	je	short int_73_first
 27597                                  
 27598                                  	cmp	byte [bx],0CFh
 27599                                  	je	short int_73_first
 27600                                  	
 27601                                  	cmp	word [bx+6],424Bh
 27602                                  	je	short int_73_not_first
 27603                                  	
 27604                                  	cmp	dx,0F000h
 27605                                  	jne	short int_73_not_first
 27606                                  
 27607                                  	push	es
 27608                                  	push	dx
 27609                                  	mov	dx,0F000h
 27610                                  	mov	es,dx
 27611                                  	cmp	bx,[es:0FF01h]
 27612                                  	pop	dx
 27613                                  	pop	es
 27614                                  	je	short int_73_first
 27615                                  %endif	
 27616                                  	
 27617                                  int_73_not_first:
 27618                                  	; 14/12/2022
 27619                                  	; 25/10/2022
 27620                                  	;pop	ds
 27621 000015B4 BF[E505]                	mov	di,INT19OLD73
 27622 000015B7 BB[E900]                	mov	bx,old73
 27623 000015BA BA[E700]                	mov	dx,int73
 27624 000015BD E88F00                  	call	new_init_loop
 27625                                  
 27626                                  	; 14/12/2022
 27627                                  	;jmp	short int_73_end
 27628                                  ;int_73_first:
 27629                                  	; 25/10/2022
 27630                                  	;pop	ds
 27631                                  
 27632                                  int_73_end:
 27633                                  
 27634                                  stkinit_74:
 27635 000015C0 BED001                  	mov	si,74h*4 ; 464
 27636                                  	
 27637                                  	; 14/12/2022
 27638                                  	; 25/10/2022
 27639 000015C3 E85F00                  	call	int_xx_first_check
 27640 000015C6 730C                    	jnc	short int_74_end ; int_74_first
 27641                                  
 27642                                  ; 14/12/2022
 27643                                  %if 0		
 27644                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27645                                  	push	ds
 27646                                  	lds	bx,[es:si]
 27647                                  	push	ds
 27648                                  	pop	dx
 27649                                  		
 27650                                  	cmp	dx,0
 27651                                  	je	short int_74_first
 27652                                  
 27653                                  	cmp	byte [bx],0CFh
 27654                                  	je	short int_74_first
 27655                                  	
 27656                                  	cmp	word [bx+6],424Bh
 27657                                  	je	short int_74_not_first
 27658                                  	
 27659                                  	cmp	dx,0F000h
 27660                                  	jne	short int_74_not_first
 27661                                  
 27662                                  	push	es
 27663                                  	push	dx
 27664                                  	mov	dx,0F000h
 27665                                  	mov	es,dx
 27666                                  	cmp	bx,[es:0FF01h]
 27667                                  	pop	dx
 27668                                  	pop	es
 27669                                  	je	short int_74_first
 27670                                  %endif
 27671                                  
 27672                                  int_74_not_first:
 27673                                  	; 14/12/2022
 27674                                  	; 25/10/2022
 27675                                  	;pop	ds
 27676 000015C8 BF[EA05]                	mov	di,INT19OLD74
 27677 000015CB BB[0101]                	mov	bx,old74
 27678 000015CE BA[FF00]                	mov	dx,int74
 27679 000015D1 E87B00                  	call	new_init_loop
 27680                                  	
 27681                                  	; 14/12/2022
 27682                                  	;jmp	short int_74_end
 27683                                  ;int_74_first:
 27684                                  	; 25/10/2022
 27685                                  	;pop	ds
 27686                                  
 27687                                  int_74_end:
 27688                                  
 27689                                  stkinit_76:
 27690 000015D4 BED801                  	mov	si,76h*4 ; 472
 27691                                  	
 27692                                  	; 14/12/2022
 27693                                  	; 25/10/2022
 27694 000015D7 E84B00                  	call	int_xx_first_check
 27695 000015DA 730E                    	jnc	short int_76_end ; int_76_first
 27696                                  
 27697                                  ; 14/12/2022
 27698                                  %if 0	
 27699                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27700                                  	push	ds
 27701                                  	lds	bx,[es:si]
 27702                                  	push	ds
 27703                                  	pop	dx
 27704                                  		
 27705                                  	cmp	dx,0
 27706                                  	je	short int_76_first
 27707                                  
 27708                                  	cmp	byte [bx],0CFh
 27709                                  	je	short int_76_first
 27710                                  	
 27711                                  	cmp	word [bx+6],424Bh
 27712                                  	je	short int_76_not_first
 27713                                  	
 27714                                  	cmp	dx,0F000h
 27715                                  	jne	short int_76_not_first
 27716                                  
 27717                                  	push	es
 27718                                  	push	dx
 27719                                  	mov	dx,0F000h
 27720                                  	mov	es,dx
 27721                                  	cmp	bx,[es:0FF01h]
 27722                                  	pop	dx
 27723                                  	pop	es
 27724                                  	je	short int_76_first
 27725                                  %endif
 27726                                  	
 27727                                  int_76_not_first:
 27728                                  	; 14/12/2022
 27729                                  	; 25/10/2022
 27730                                  	;pop	ds
 27731 000015DC BF[EF05]                	mov	di,INT19OLD76
 27732 000015DF BB[1901]                	mov	bx,old76
 27733 000015E2 BA[1701]                	mov	dx,int76
 27734 000015E5 E86700                  	call	new_init_loop
 27735                                  
 27736                                  	; 14/12/2022
 27737 000015E8 EB00                    	jmp	short int_76_end
 27738                                  ;int_76_first:
 27739                                  	; 25/10/2022
 27740                                  	;pop	ds
 27741                                  
 27742                                  int_76_end:
 27743                                  
 27744                                  stkinit_77:
 27745 000015EA BEDC01                  	mov	si,77h*4 ; 476
 27746                                  	
 27747                                  	; 14/12/2022
 27748                                  	; 25/10/2022
 27749 000015ED E83500                  	call	int_xx_first_check
 27750 000015F0 730C                    	jnc	short int_77_end ; int_77_first
 27751                                  
 27752                                  ; 14/12/2022
 27753                                  %if 0	
 27754                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27755                                  	push	ds
 27756                                  	lds	bx,[es:si]
 27757                                  	push	ds
 27758                                  	pop	dx
 27759                                  		
 27760                                  	cmp	dx,0
 27761                                  	je	short int_77_first
 27762                                  
 27763                                  	cmp	byte [bx],0CFh
 27764                                  	je	short int_77_first
 27765                                  	
 27766                                  	cmp	word [bx+6],424Bh
 27767                                  	je	short int_77_not_first
 27768                                  	
 27769                                  	cmp	dx,0F000h
 27770                                  	jne	short int_77_not_first
 27771                                  
 27772                                  	push	es
 27773                                  	push	dx
 27774                                  	mov	dx,0F000h
 27775                                  	mov	es,dx
 27776                                  	cmp	bx,[es:0FF01h]
 27777                                  	pop	dx
 27778                                  	pop	es
 27779                                  	je	short int_77_first
 27780                                  %endif
 27781                                  	
 27782                                  int_77_not_first:
 27783                                  	; 14/12/2022
 27784                                  	; 25/10/2022
 27785                                  	;pop	ds
 27786 000015F2 BF[F405]                	mov	di,INT19OLD77
 27787 000015F5 BB[3101]                	mov	bx,old77
 27788 000015F8 BA[2F01]                	mov	dx,int77
 27789 000015FB E85100                  	call	new_init_loop
 27790                                  
 27791                                  	; 14/12/2022
 27792                                  	;jmp	short int_77_end
 27793                                  ;int_77_first:
 27794                                  	; 25/10/2022
 27795                                  	;pop	ds
 27796                                  
 27797                                  int_77_end:
 27798 000015FE 1E                      	push	ds
 27799 000015FF B800F0                  	mov	ax,0F000h		; look at the model byte
 27800 00001602 8ED8                    	mov	ds,ax
 27801 00001604 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 27802 00001609 1F                      	pop	ds
 27803 0000160A 7504                    	jne	short skip_enablenmis
 27804                                  
 27805 0000160C B027                    	mov	al,27h			; enable convertible nmis
 27806 0000160E E672                    	out	72h,al
 27807                                  
 27808                                  ; 25/10/2022
 27809                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 27810                                  
 27811                                  skip_enablenmis:
 27812 00001610 FB                      	sti
 27813                                  	;;mov	ax,Bios_Data ; 70h
 27814                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 27815                                  	; 21/10/2022
 27816 00001611 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27817 00001614 8ED8                    	mov	ds,ax
 27818                                  
 27819                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 27820                                  
 27821 00001616 C606[B105]01            	mov	byte [INT19SEM],1	; indicate that int 19
 27822                                  					; initialization is complete
 27823                                  
 27824 0000161B 5D                      	pop	bp			; restore all
 27825 0000161C 5E                      	pop	si
 27826 0000161D 5F                      	pop	di
 27827 0000161E 5A                      	pop	dx
 27828 0000161F 59                      	pop	cx
 27829 00001620 5B                      	pop	bx
 27830 00001621 07                      	pop	es
 27831 00001622 1F                      	pop	ds
 27832 00001623 58                      	pop	ax
 27833 00001624 C3                      	retn
 27834                                  
 27835                                  ; 14/12/2022
 27836                                  ; ----------------------------------------------------------------------
 27837                                  
 27838                                  	; 14/12/2022
 27839                                  	; 25/10/2022
 27840                                  ;%if 0
 27841                                  	; 27/03/2019 - Retro DOS v4.0
 27842                                  int_xx_first_check:
 27843 00001625 1E                      	push	ds
 27844 00001626 26C51C                  	lds	bx,[es:si]
 27845 00001629 1E                      	push	ds
 27846 0000162A 5A                      	pop	dx
 27847                                  		
 27848                                  	;cmp	dx,0
 27849                                  	;je	short int_xx_first
 27850                                  	; 05/09/2023
 27851 0000162B 21D2                    	and	dx,dx
 27852 0000162D 741E                    	jz	short int_xx_first
 27853                                  	
 27854 0000162F 803FCF                  	cmp	byte [bx],0CFh
 27855 00001632 7419                    	je	short int_xx_first
 27856                                  	
 27857 00001634 817F064B42              	cmp	word [bx+6],424Bh
 27858 00001639 7411                    	je	short int_xx_not_first
 27859                                  	
 27860 0000163B 81FA00F0                	cmp	dx,0F000h
 27861 0000163F 750B                    	jne	short int_xx_not_first
 27862                                  
 27863 00001641 06                      	push	es
 27864                                  	;push	dx
 27865                                  	;mov	dx,0F000h
 27866 00001642 8EC2                    	mov	es,dx
 27867 00001644 263B1E01FF              	cmp	bx,[es:0FF01h]
 27868                                        	;pop	dx
 27869 00001649 07                      	pop	es
 27870 0000164A 7401                    	je	short int_xx_first
 27871                                  
 27872                                  int_xx_not_first:
 27873 0000164C F9                      	stc
 27874                                  int_xx_first:
 27875 0000164D 1F                      	pop	ds
 27876 0000164E C3                      	retn
 27877                                  
 27878                                  ;%endif
 27879                                  
 27880                                  ; ----------------------------------------------------------------------
 27881                                  ; 27/03/2019 - Retro DOS v4.0
 27882                                  
 27883                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 27884                                  ; (SYSINIT:1610h)
 27885                                  
 27886                                  ; 13/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM, SYSINIT)
 27887                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1905h)
 27888                                  
 27889                                  new_init_loop:
 27890                                  	;;; 13/04/2024 (PCDOS 7.1 IBMBIO.COM)
 27891 0000164F 2E803E[6E03]02          	cmp	byte [cs:dosdata_umb],2
 27892                                  				; is DOSDATA=UMB done ? (DOSDATA is in UMB)
 27893 00001655 7510                    	jne	short new_init_loop_1st
 27894 00001657 1E                      	push	ds		; restore original/previous interrupt handler
 27895                                  				; (from int19old?? field in BIOSDATA)
 27896                                  	;mov	ax,70h
 27897 00001658 B87000                  	mov	ax,DOSBIODATASEG
 27898 0000165B 8ED8                    	mov	ds,ax
 27899 0000165D C505                    	lds	ax,[di]		; restore original Int ?? handler addr from int19old?? field
 27900 0000165F 268904                  	mov	[es:si],ax	; copy the original int handler addr to its int vector addr
 27901 00001662 268C5C02                	mov	[es:si+2],ds
 27902 00001666 1F                      	pop	ds
 27903                                  new_init_loop_1st: 
 27904                                  	;;;
 27905                                  
 27906                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 27907                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 27908                                  ;	dx=ds:offset of intxx, the new interrupt handler
 27909                                  ;	di=offset value of int19old&aa variable in bios.
 27910                                  ;	es=zero, segid of vector table
 27911                                  ;	ds=relocated stack code segment
 27912                                  
 27913                                  ; 13/04/2024
 27914                                  %if 0
 27915                                  	mov	ax,[es:si]		;remember offset in vector
 27916                                  	mov	[bx],ax			; to original owner in ds
 27917                                  	mov	ax,[es:si+2]		;remember segid in vector
 27918                                  	mov	[bx+2],ax		; to original owner in ds
 27919                                  
 27920                                  	push	ds
 27921                                  	;;mov	ax,Bios_Data ; 70h
 27922                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 27923                                  	; 21/10/2022
 27924                                  	mov	ax,DOSBIODATASEG ; 0070h
 27925                                  	mov	ds,ax			;set int19oldxx value in bios for
 27926                                  	mov	ax,[es:si]		;int 19 handler
 27927                                  	mov	[di],ax
 27928                                  	mov	ax,[es:si+2]
 27929                                  	mov	[di+2],ax
 27930                                  	pop	ds
 27931                                  %else
 27932                                  	; 13/04/2024 - Retro DOS v5.0
 27933 00001667 1E                      	push	ds
 27934 00001668 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 27935 0000166C 894702                  	mov	[bx+2],ax		; to original owner in ds
 27936 0000166F 50                      	push	ax
 27937 00001670 268B04                  	mov	ax,[es:si]		;remember offset in vector
 27938 00001673 8907                    	mov	[bx],ax			; to original owner in ds
 27939 00001675 50                      	push	ax
 27940 00001676 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27941 00001679 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 27942 0000167B 58                      	pop	ax			;int 19 handler
 27943 0000167C 8905                    	mov	[di],ax
 27944 0000167E 58                      	pop	ax
 27945 0000167F 894502                  	mov	[di+2],ax
 27946 00001682 1F                      	pop	ds
 27947                                  %endif
 27948 00001683 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 27949 00001686 268C5C02                	mov	[es:si+2],ds
 27950 0000168A C3                      	retn
 27951                                  
 27952                                  ; End of STACK initialization routine
 27953                                  ; ----------------------------------------------------------------------
 27954                                  
 27955                                  ; ----------------------------------------------------------------------
 27956                                  ;set the devmark for mem command.
 27957                                  ;in: [memhi] - the address to place devmark
 27958                                  ;    [memlo] = 0
 27959                                  ;    al = id for devmark_id
 27960                                  ;out: devmark established.
 27961                                  ;     the address saved in cs:[devmark_addr]
 27962                                  ;     [memhi] increase by 1.
 27963                                  ; ----------------------------------------------------------------------
 27964                                  
 27965                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 27966                                  ; (SYSINIT:1637h)
 27967                                  ; 04/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 27968                                  ; (SYSINIT:176Ch)
 27969                                  
 27970                                  ; 04/09/2023 - PCDOS 7.1 - IBMBIO.COM (SYSINIT:1944h)
 27971                                  
 27972                                  setdevmark:
 27973                                  
 27974                                  	; 04/09/2023
 27975                                  	;push	es
 27976                                  	;push	cx
 27977                                  
 27978 0000168B 2E8B0E[6403]            	mov	cx,[cs:memhi]
 27979 00001690 2E890E[6719]            	mov	[cs:devmark_addr],cx
 27980 00001695 8EC1                    	mov	es,cx
 27981                                  	; 25/10/2022
 27982                                  	;mov	[es:devmark.id],al
 27983 00001697 26A20000                	mov	[es:0],al
 27984 0000169B 41                      	inc	cx
 27985                                  	;mov	[es:devmark.seg],cx
 27986 0000169C 26890E0100              	mov	[es:1],cx
 27987                                  
 27988                                  	; 04/09/2023
 27989                                  	;pop	cx
 27990                                  	;pop	es
 27991                                  	
 27992 000016A1 2EFF06[6403]            	inc	word [cs:memhi]
 27993 000016A6 C3                      	retn
 27994                                  
 27995                                  ; ----------------------------------------------------------------------
 27996                                  ; SYSPRE.ASM - MSDOS 6.0 - 1992
 27997                                  ; ----------------------------------------------------------------------
 27998                                  ;; pre-load and final placement of dblspace.bin
 27999                                  ;
 28000                                  ; 08/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 28001                                  ; ===========================================================
 28002                                  
 28003                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1964h)
 28004                                  ;;; --------------------------------------------------------------------
 28005 000016A7 [AB16]                  MagicDDNamePtr:	dw MagicDDName	; "\DBLSPACE.BIN"
 28006 000016A9 433A                    		db 'C:'
 28007 000016AB 5C44424C5350414345-     MagicDDName:	db '\DBLSPACE.BIN',0
 28007 000016B4 2E42494E00         
 28008 000016B9 433A5C535441434B45-     StackerName:	db 'C:\STACKER.BIN',0
 28008 000016C2 522E42494E00       
 28009                                  tiny_stub_start:
 28010 000016C8 FFFF                    		dw 0FFFFh	; phony device driver link
 28011 000016CA FFFF                    		dw 0FFFFh	; dw -1, -1
 28012 000016CC 0080                    		dw 8000h	; mark as character device for MEM display
 28013 000016CE 00000000                		dw 2 dup(0)	; strategy and interrupt
 28014 000016D2 44424C5342494E24        		db 'DBLSBIN$'	; magic default load
 28015                                  tiny_stub_end:			; (tiny_stub_end-tiny_stub_start = 18)
 28016                                  
 28017                                  ; =============== S U B R O U T I N E ==================================
 28018                                  
 28019                                  ; 08/04/2024 - Retro DOS v5.0
 28020                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1997h)
 28021                                  
 28022                                  ;***	MagicPreload - pre-load dblspace.bin
 28023                                  ;
 28024                                  ;	EXIT	ax = error code, 00 means none.
 28025                                  ;		ZF = true if ax == 0
 28026                                  
 28027                                  MagicPreload:
 28028                                  	; 13/04/2024 - Retro DOS v5.0
 28029                                  	; ds = cs
 28030                                  	;mov	byte [cs:setdevmarkflag],0 ; not for devmark
 28031 000016DA C606[6919]00            	mov	byte [setdevmarkflag],0
 28032 000016DF E81031                  	call	round
 28033 000016E2 0E                      	push	cs
 28034 000016E3 07                      	pop	es
 28035                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB
 28036                                  	; 13/04/2024
 28037 000016E4 C606[5124]00            	mov	byte [DeviceHi],0
 28038 000016E9 E8791E                  	call	InitDevLoad		; set up sub-arena, DevLoadAddr,
 28039                                  					;  DevLoadEnd, and DevEntry
 28040                                  					;  gets arena name from bpb_addr
 28041                                  	; 13/04/2024
 28042                                  	; ds = cs
 28043                                  
 28044                                  ;	check to make sure device driver fits our available space.
 28045                                  
 28046                                  	;mov	ax,[cs:DevLoadAddr]
 28047 000016EC A1[3524]                	mov	ax,[DevLoadAddr]
 28048                                  	;add	ax,[cs:DevSize]		; calculate seg after DD load
 28049 000016EF 0306[3324]              	add	ax,[DevSize]
 28050 000016F3 725E                    	jc	short pre_exit_err	; choke if overflows address space
 28051                                  	;cmp	ax,[cs:DevLoadEnd]	; does it overflow available space?
 28052 000016F5 3B06[3724]              	cmp	ax,[DevLoadEnd]
 28053 000016F9 7758                    	ja	short pre_exit_err
 28054                                  
 28055                                  _LoadDev:				; we're golden if not
 28056                                  	; 13/04/2024
 28057                                  	; ds = cs
 28058                                  	;push	cs
 28059                                  	;pop	ds
 28060                                  	;mov	dx,[cs:MagicDDNamePtr]
 28061 000016FB 8B16[A716]              	mov	dx,[MagicDDNamePtr]
 28062 000016FF E8A41F                  	call	ExecDev			; load device driver using exec call
 28063 00001702 724F                    	jb	short pre_exit_err
 28064                                  
 28065                                  	; 13/04/2024
 28066                                  	; ds = cs
 28067                                  	;les	bx,[cs:DevEntry]	; point to the Magic DD header
 28068 00001704 C41E[3924]              	les	bx,[DevEntry]
 28069 00001708 26817F122C2E            	cmp	word [es:bx+12h],2E2Ch	; is it our stamp? ; ',.'
 28070 0000170E 7543                    	jnz	short pre_exit_err
 28071                                  	;mov	word [cs:MagicBackdoor],14h ; save the backdoor entry.
 28072                                  	;		  		; (initial IP -EXE header offset 20-)
 28073                                  	;mov	[cs:MagicBackdoor+2],es
 28074 00001710 C706[9003]1400          	mov	word [MagicBackdoor],14h
 28075 00001716 8C06[9203]              	mov	[MagicBackdoor+2],es
 28076                                  	
 28077 0000171A 0E                      	push	cs
 28078 0000171B 07                      	pop	es
 28079 0000171C BB[6F03]                	mov	bx,packet
 28080                                  	
 28081                                  	;mov	word [cs:break_addr],0
 28082                                  	;mov	ax,[cs:DevLoadEnd]
 28083                                  	;mov	[cs:break_addr+2],ax
 28084                                  	;mov	al,[cs:drivenumber]	; pass drive number to DBLSPACE as if
 28085                                  	;mov	[cs:devdrivenum],al	; it is a normal block device driver
 28086 0000171F C706[7D03]0000          	mov	word [break_addr],0
 28087 00001725 A1[3724]                	mov	ax,[DevLoadEnd]
 28088 00001728 A3[7F03]                	mov	[break_addr+2],ax
 28089 0000172B A0[8503]                	mov	al,[drivenumber]	; pass drive number to DBLSPACE as if
 28090 0000172E A2[8503]                	mov	[devdrivenum],al	; it is a normal block device driver
 28091                                  
 28092 00001731 B80A00                  	mov	ax,10			; DS_INTERNAL_REVISION
 28093                                  			  		; tell it what revision we expect
 28094                                  	;call	far [cs:MagicBackdoor]	; first time call is init entry point
 28095 00001734 FF1E[9003]              	call	far [MagicBackdoor]
 28096                                  			  		; with a standard device driver
 28097                                  			  		; init packet at es:bx
 28098 00001738 731D                    	jnb	short no_driver_version_fail ; skip if not a version failure
 28099 0000173A B80600                  	mov	ax,6			; DS_INTERNAL_REVISION_6 ; (Stacker ?)
 28100                                  			  		; tell it what revision we expect
 28101                                  	;call	far [cs:MagicBackdoor]
 28102 0000173D FF1E[9003]              	call	far [MagicBackdoor]
 28103 00001741 7314                    	jnb	short no_driver_version_fail
 28104                                  
 28105                                  ;	In this case, we're going to display a message
 28106                                  
 28107                                  	;push	cs
 28108                                  	;pop	ds
 28109                                  	; 13/04/2024
 28110                                  	; ds = cs
 28111 00001743 BA[DA53]                	mov	dx,baddblspace		; "Required system component is not instal"...
 28112 00001746 E80B33                  	call	print			; display the message
 28113                                  
 28114                                  ;	point backdoor call back to safe far return
 28115                                  
 28116                                  fail_driver_load:
 28117                                  	;mov	[cs:MagicBackdoor+2],cs
 28118                                  	;mov	word [cs:MagicBackdoor],NullBackdoor
 28119 00001749 8C0E[9203]              	mov	[MagicBackdoor+2],cs
 28120 0000174D C706[9003][9403]        	mov	word [MagicBackdoor],NullBackdoor
 28121                                  pre_exit_err:
 28122 00001753 B84000                  	mov	ax,40h			; SYSPRE_BADFILE_ERROR
 28123                                  			  		; (problem loading dblspace.bin)
 28124 00001756 C3                      	retn
 28125                                  
 28126                                  no_driver_version_fail:
 28127 00001757 09C0                    	or	ax,ax			; error code returned?
 28128 00001759 75EE                    	jnz	short fail_driver_load
 28129                                  
 28130                                  magic_is_resident:
 28131                                  	; 13/04/2024
 28132                                  	; ds = cs
 28133                                  	;mov	ax,[cs:break_addr]
 28134 0000175B A1[7D03]                	mov	ax,[break_addr]
 28135 0000175E E8B4FB                  	call	ParaRound	 	; convert to paragraphs
 28136                                  	;add	ax,[cs:break_addr+2]
 28137                                  	;mov	[cs:DevBrkAddr+2],ax
 28138                                  	;mov	word [cs:DevBrkAddr],0	; store normalized end here
 28139 00001761 0306[7F03]              	add	ax,[break_addr+2]
 28140 00001765 A3[3F24]                	mov	[DevBrkAddr+2],ax
 28141 00001768 C706[3D24]0000          	mov	word [DevBrkAddr],0
 28142 0000176E BB0400                  	mov	bx,4			; inquire how many paragraphs it wants
 28143                                  	;call	far [cs:MagicBackdoor]
 28144 00001771 FF1E[9003]              	call	far [MagicBackdoor]
 28145                                  	;mov	bx,[cs:ALLOCLIM]	; get top of free memory
 28146 00001775 8B1E[A502]              	mov	bx,[ALLOCLIM]
 28147 00001779 29C3                    	sub	bx,ax			; see how much we'll lower it
 28148                                  	;cmp	bx,[cs:DevBrkAddr+2]	; is there that much room free?
 28149 0000177B 3B1E[3F24]              	cmp	bx,[DevBrkAddr+2]
 28150 0000177F 7212                    	jb	short cant_move_driver
 28151                                  	;;sub	[cs:ALLOCLIM],ax	; (mov [cs:ALLOCLIM],bx)
 28152                                  	;mov	[cs:ALLOCLIM],bx ; Retro DOS v5.0 ; 08/04/2024
 28153                                  	; 13/04/2024
 28154 00001781 891E[A502]              	mov	[ALLOCLIM],bx 
 28155                                  	;mov	es,[cs:ALLOCLIM]
 28156 00001785 8E06[A502]              	mov	es,[ALLOCLIM]
 28157 00001789 BB0600                  	mov	bx,6			; tell the driver to move itself
 28158                                  	;call	far [cs:MagicBackdoor]
 28159 0000178C FF1E[9003]              	call	far [MagicBackdoor]
 28160                                  	;mov	[cs:DevBrkAddr+2],ax	; save end of low stub
 28161 00001790 A3[3F24]                	mov	[DevBrkAddr+2],ax	; save end of low stub
 28162                                  
 28163                                  cant_move_driver:
 28164                                  	;mov	ax,[cs:DevBrkAddr+2]	; get terminate segment
 28165 00001793 A1[3F24]                	mov	ax,[DevBrkAddr+2]
 28166                                  	;cmp	ax,[cs:DevLoadEnd]	; terminate size TOO big?
 28167 00001796 3B06[3724]              	cmp	ax,[DevLoadEnd]
 28168 0000179A 77B7                    	ja	short pre_exit_err	; error out if so
 28169                                  
 28170                                  ;------ deal with block device drivers
 28171                                  
 28172                                  _isblock:				; if no units found,erase the device
 28173                                  	; 13/04/2024
 28174                                  	; ds = cs
 28175                                  	;mov	al,[cs:unitcount]
 28176 0000179C A0[7C03]                	mov	al,[unitcount]
 28177 0000179F 08C0                    	or	al,al
 28178 000017A1 74B0                    	jz	short pre_exit_err
 28179 000017A3 30E4                    	xor	ah,ah
 28180                                  	;lds	si,[cs:DevEntry]	; set ds:si to header
 28181 000017A5 C536[3924]              	lds	si,[DevEntry]
 28182 000017A9 88440A                  	mov	[si+10],al		; mov [si+SYSDEV.NAME],al
 28183                                  			 		; number of units in name field
 28184                                  			  		; device drivers are *supposed*
 28185                                  			  		; to do this for themselves.
 28186 000017AC 89C1                    	mov	cx,ax
 28187 000017AE 2EC43E[6D02]            	les	di,[cs:DOSINFO]		; es:di point to dos info
 28188 000017B3 268A6520                	mov	ah,[es:di+20h]		; [es:di+SYSI_NUMIO]
 28189                                  			  		; get number of devices
 28190 000017B7 88E2                    	mov	dl,ah
 28191 000017B9 00C4                    	add	ah,al			; check for too many devices
 28192 000017BB 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 28193 000017BE 7793                    	ja	short pre_exit_err
 28194 000017C0 2E800E[6919]02          	or	byte [cs:setdevmarkflag],2
 28195 000017C6 E83D1F                  	call	DevSetBreak
 28196                                  	;jnc	short _ok_block
 28197                                  	;jmp	pre_exit_err
 28198                                  	; 13/04/2024
 28199 000017C9 7288                    	jc	short pre_exit_err  ; ds <> cs
 28200                                  
 28201                                  _ok_block:
 28202 000017CB 26886520                	mov	[es:di+20h],ah		; [es:di+SYSI_NUMIO] ; update the amount
 28203                                  
 28204 000017CF 2EC51E[8103]            	lds	bx,[cs:bpb_addr]	; point to bpb array (*)
 28205 000017D4 30F6                    	xor	dh,dh
 28206                                  
 28207                                  _perunit:
 28208 000017D6 2EC42E[6D02]            	les	bp,[cs:DOSINFO]
 28209 000017DB 26C46E00                	les	bp,[es:bp+0]		; [es:bp.sysi_dpb]
 28210                                  			  		; get first dpb
 28211                                  			  		; [es:bp+SysInitvars.SYSI_DPB] ; [es:bp+0]
 28212                                  _scandpb:
 28213 000017DF 26837E19FF              	cmp	word [es:bp+19h],0FFFFh ; -1 ; [es:bp.dpb_next_dpb]
 28214 000017E4 7406                    	jz	short _foundpb
 28215 000017E6 26C46E19                	les	bp,[es:bp+19h]		; les bp,[es:bp.dpb_next_dpb]
 28216                                  			  		; [es:bp+DPB.NEXT_DPB]
 28217 000017EA EBF3                    	jmp	short _scandpb
 28218                                  
 28219                                  ;	We've found the end of the DPB chain. Now extend it.
 28220                                  
 28221                                  _foundpb:
 28222 000017EC 2EA1[3D24]              	mov	ax,[cs:DevBrkAddr]
 28223 000017F0 26894619                	mov	[es:bp+19h],ax		; [es:bp.dpb_next_dpb] ; DPB.NEXT_DPB
 28224 000017F4 2EA1[3F24]              	mov	ax,[cs:DevBrkAddr+2]
 28225 000017F8 2689461B                	mov	[es:bp+1Bh],ax		; [es:bp.dpb_next_dpb+2] ; DPB.NEXT_DPB+2
 28226 000017FC 2EC42E[3D24]            	les	bp,[cs:DevBrkAddr]
 28227 00001801 26C74619FFFF            	mov	word [es:bp+19h],0FFFFh ; -1
 28228 00001807 26C64618FF              	mov	byte [es:bp+18h],0FFh	; [es:bp.dpb_first_access],-1
 28229                                  			  		; DPB.FIRST_ACCESS
 28230 0000180C 2E8306[3D24]3D          	add	word [cs:DevBrkAddr],61 ; DPBSIZ ; 3Dh
 28231 00001812 E8D01E                  	call	RoundBreakAddr
 28232 00001815 8B37                    	mov	si,[bx]	  		; ds:si points to bpb (*)
 28233                                  			 		; (mov si,[bx] ..and then.. add bx,2)
 28234                                  			  		; Note: If unit count > 1,bx points to a BPB in the BPB array,
 28235                                  			  		; the array address is in [bpb_addr] (*)
 28236                                  			  		; Erdogan Tan - 07/07/2023
 28237 00001817 26885600                	mov	[es:bp+0],dl   		; mov word [es:bp.dpb_drive],dx
 28238                                  			  		; [es:bp+DPB.DRIVE],dl
 28239 0000181B 26887601                	mov	[es:bp+1],dh   		; [es:bp+DPB.UNIT],dh
 28240 0000181F 52                      	push	dx
 28241 00001820 51                      	push	cx
 28242 00001821 BA5241                  	mov	dx,4152h		; DX = signature 4152h ('AR') for FAT32 extended BPB/DPB
 28243 00001824 31C9                    	xor	cx,cx	; 0
 28244 00001826 26894E1D                	mov	[es:bp+1Dh],cx		; DPB.NEXT_FREE ; last allocated cluster #
 28245 0000182A 394C0B                  	cmp	[si+0Bh],cx		; BPB.fatsecs16 ; [si+A_BPB.BPB_SECTORSPERFAT]
 28246 0000182D 7514                    	jnz	short _setdpb		; FAT DPB (33 bytes)
 28247                                  			  		; FAT32 DPB (61 bytes)
 28248 0000182F 26894E39                	mov	[es:bp+39h],cx		; DPB.FAT32_NXTFREE = 0
 28249 00001833 26894E3B                	mov	[es:bp+3Bh],cx		; DPB.FAT32_NXTFREE+2 = 0
 28250 00001837 49                      	dec	cx			; 0FFFFh ; -1
 28251 00001838 26894E1F                	mov	[es:bp+1Fh],cx		; DPB.FREE_CNT (-1 = unknown)
 28252 0000183C 26894E21                	mov	[es:bp+21h],cx		; DPB.FREE_CNT+2 (-1 = unknown)
 28253 00001840 B95845                  	mov	cx,4558h		; CX = signature 4558h ('EX') for FAT32 extended BPB/DPB
 28254                                  
 28255                                  _setdpb:
 28256 00001843 B453                    	mov	ah,53h		; SETDPB ; hidden system call
 28257 00001845 CD21                    	int	21h		; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 28258                                  			  	; DS:SI -> BPB (BIOS Parameter Block)
 28259                                  			  	; ES:BP -> buffer for DOS Drive Parameter Block
 28260                                  			  	; (if CX=4558h & DX=4152h,FAT32 Extended DPB will be set)
 28261 00001847 59                      	pop	cx
 28262 00001848 5A                      	pop	dx
 28263 00001849 268B4602                	mov	ax,[es:bp+2]		; [es:bp.dpb_sector_size]  ; [es:bp+DPB.SECTOR_SIZE]
 28264 0000184D 06                      	push	es
 28265 0000184E 2EC43E[6D02]            	les	di,[cs:DOSINFO]
 28266 00001853 263B4510                	cmp	ax,[es:di+10h]		; [es:di.sysi_maxsec] ; [es:di+SysInitvars.SYSI_MAXSEC]
 28267 00001857 07                      	pop	es
 28268 00001858 7604                    	jbe	short _iblk_1
 28269                                  	; 13/04/2024
 28270                                  	; ds <> cs
 28271 0000185A B84000                  	mov	ax,40h			; SYSPRE_BADFILE_ERROR ; (pre_exit_err)
 28272                                  					; (problem loading dblspace.bin)
 28273 0000185D C3                      	retn
 28274                                  
 28275                                  _iblk_1:
 28276 0000185E 1E                      	push	ds
 28277 0000185F 2EC506[3924]            	lds	ax,[cs:DevEntry]
 28278 00001864 26894613                	mov	[es:bp+13h],ax		; [es:bp+DPB.DRIVER_ADDR]
 28279 00001868 268C5E15                	mov	[es:bp+15h],ds		; [es:bp+DPB.DRIVER_ADDR+2]
 28280 0000186C 1F                      	pop	ds
 28281 0000186D FEC2                    	inc	dl			; increment drive number
 28282 0000186F FEC6                    	inc	dh			; increment unit number
 28283 00001871 43                      	inc	bx
 28284 00001872 43                      	inc	bx			; point to next BPB
 28285                                  					; (in the BPB array) (*) -add bx,2-
 28286 00001873 49                      	dec	cx			; loop _foundpb
 28287 00001874 7403                    	jz	short _linkit
 28288 00001876 E973FF                  	jmp	_foundpb
 28289                                  
 28290                                  _linkit:
 28291 00001879 0E                      	push	cs
 28292 0000187A 1F                      	pop	ds
 28293 0000187B E825F5                  	call	TempCDS			; set cds for new drives
 28294                                  	; 13/04/2024
 28295                                  	; (DS may not be same with CS here)
 28296 0000187E 2EC43E[6D02]            	les	di,[cs:DOSINFO]		; es:di = dos table (SysInitVars)
 28297 00001883 268B4522                	mov	ax,[es:di+22h]		; [es:di+SYSI_DEV] ; dx:cx = head of list
 28298 00001887 268B5D24                	mov	bx,[es:di+24h]		; [es:di+SYSI_DEV+2]
 28299 0000188B 2EC536[3924]            	lds	si,[cs:DevEntry]	; ds:si = device location
 28300 00001890 8904                    	mov	[si],ax			; link in the driver
 28301 00001892 895C02                  	mov	[si+2],bx
 28302 00001895 26897522                	mov	[es:di+22h],si		; [es:di+SYSI_DEV] ; set head of list in dos
 28303 00001899 268C5D24                	mov	[es:di+24h],ds		; [es:di+SYSI_DEV+2]
 28304 0000189D E8881E                  	call	DevBreak		; mark successful install
 28305                                  	; 13/04/2024
 28306                                  	; ds = cs
 28307                                  	;mov	cx,[cs:DevBrkAddr+2]	; pass it a work buffer
 28308                                  	;mov	dx,[cs:ALLOCLIM]	; address in cx (segment)
 28309 000018A0 8B0E[3F24]              	mov	cx,[DevBrkAddr+2]
 28310 000018A4 8B16[A502]              	mov	dx,[ALLOCLIM]
 28311 000018A8 29CA                    	sub	dx,cx			; for len dx (paragraphs)
 28312 000018AA B80055                  	mov	ax,5500h		; we're shuffle aware,but don't move
 28313                                  					; any drives at this point.
 28314 000018AD BB0200                  	mov	bx,2			; switch what we can now
 28315                                  	;call	far [cs:MagicBackdoor]
 28316 000018B0 FF1E[9003]              	call	far [MagicBackdoor]
 28317                                  pre_exit:				; no errors!
 28318 000018B4 31C0                    	xor	ax,ax			; zf=1
 28319                                  no_magic:	; 13/04/2024
 28320 000018B6 C3                      	retn
 28321                                  
 28322                                  ; =============== S U B R O U T I N E ==================================
 28323                                  
 28324                                  ; 08/04/2024 - Retro DOS v5.0
 28325                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1B9Fh)
 28326                                  
 28327                                  ;***	MagicPostload -- called to clean up and make sure Magic is final placed
 28328                                  
 28329                                  MagicPostload:
 28330                                  	; 13/04/3024
 28331                                  	; ds = cs
 28332 000018B7 E89C00                  	call	get_dblspace_version	; is it there?
 28333 000018BA 75FA                    	jnz	short no_magic	     	; done if not
 28334 000018BC F7C20080                	test	dx,8000h		; is it already permanent?
 28335 000018C0 74F4                    	jz	short no_magic		; no,done if so (not in final position)
 28336 000018C2 BBFFFF                  	mov	bx,0FFFFh ; -1		; how much space does it want?
 28337 000018C5 B8114A                  	mov	ax,4A11h		; multMagicdrv
 28338                                  					; DBLSPACE.BIN - GET RELOCATION SIZE
 28339 000018C8 CD2F                    	int	2Fh			; get paragraphs into ax
 28340 000018CA 40                      	inc	ax			; extra 2 paragraphs for the stub
 28341 000018CB 40                      	inc	ax			; ((tiny_stub_end-tiny_stub_start)+15)/16
 28342                                  					; (18+15)/16 = 2
 28343                                  	;mov	[cs:DevSize],ax		; store that (**)
 28344                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB
 28345                                  	;mov	[cs:bpb_addr+2],cs   	; pass name so that
 28346                                  	;				; arena header can be set
 28347                                  	;mov	word [cs:bpb_addr],MagicDDName ; "\DBLSPACE.BIN"
 28348                                  	; 13/04/2024
 28349                                  	; ds = cs
 28350 000018CC A3[3324]                	mov	[DevSize],ax
 28351 000018CF C606[5124]00            	mov	byte [DeviceHi],0
 28352 000018D4 8C0E[8303]              	mov	[bpb_addr+2],cs
 28353 000018D8 C706[8103][AB16]        	mov	word [bpb_addr],MagicDDName
 28354                                  
 28355 000018DE E8112F                  	call	round			; normalize memhi:memlo
 28356 000018E1 E8811C                  	call	InitDevLoad		; set up sub-arena,DevLoadAddr,
 28357                                  			  		; DevLoadEnd,and DevEntry
 28358                                  					; gets arena name from bpb_addr
 28359                                  	; 13/04/2024
 28360                                  	; ds = cs
 28361                                  	;mov	es,[cs:DevLoadAddr]	; (**) (InitDevload sets this)
 28362 000018E4 8E06[3524]              	mov	es,[DevLoadAddr]
 28363                                  
 28364                                  ;	First, move a little header in place so that this looks
 28365                                  ;	to the mem command like a legitimate driver load. Otherwise,
 28366                                  ;	it will display garbage for the device name
 28367                                  
 28368 000018E8 31FF                    	xor	di,di			; move a little header in place
 28369                                  					; so that this looks to the mem command
 28370                                  					; like a legitimate driver load
 28371 000018EA BE[C816]                	mov	si,tiny_stub_start
 28372                                  	;mov	cx,18			; (tiny_stub_end-tiny_stub_start)
 28373 000018ED B91200                  	mov	cx,tiny_stub_end-tiny_stub_start
 28374 000018F0 F3A4                    	rep movsb			; move it!
 28375 000018F2 8CC0                    	mov	ax,es			; advance es appropriately
 28376 000018F4 40                      	inc	ax			; add ax,((tiny_stub_end-tiny_stub_start)+15)/16
 28377 000018F5 40                      	inc	ax
 28378 000018F6 8EC0                    	mov	es,ax
 28379 000018F8 BBFEFF                  	mov	bx,0FFFEh ; -2		; final placement!
 28380 000018FB B8114A                  	mov	ax,4A11h		; multMagicdrv
 28381 000018FE CD2F                    	int	2Fh			; DBLSPACE.BIN - RELOCATE
 28382                                  					; es = segment to which to relocate DBLSPACE.BIN
 28383                                  	;mov	ax,[cs:DevLoadAddr] ; (**)
 28384                                  	;add	ax,[cs:DevSize]		; calculate seg after DD load
 28385                                  	;mov	[cs:DevBrkAddr+2],ax	; save as ending address!
 28386                                  	;mov	word [cs:DevBrkAddr],0
 28387                                  	; 13/04/2024
 28388                                  	; ds = cs
 28389 00001900 A1[3524]                	mov	ax,[DevLoadAddr]
 28390 00001903 0306[3324]              	add	ax,[DevSize]
 28391 00001907 A3[3F24]                	mov	[DevBrkAddr+2],ax
 28392 0000190A C706[3D24]0000          	mov	word [DevBrkAddr],0
 28393                                  
 28394 00001910 E8F31D                  	call	DevSetBreak		; go ahead and alloc mem for device
 28395                                  	;call	DevBreak
 28396                                  ;no_magic:
 28397                                  	;retn
 28398                                  	; 13/04/2024 - Retro DOS v5.0
 28399 00001913 E9121E                  	jmp	DevBreak
 28400                                  
 28401                                  ; =============== S U B R O U T I N E ==================================
 28402                                  
 28403                                  ; 08/04/2024 - Retro DOS v5.0
 28404                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1C08h)
 28405                                  
 28406                                  ;***	MagicSetCdss -- disable CDSs for still unmounted DblSpace drives
 28407                                  ;
 28408                                  ;	entry:
 28409                                  ;	   CDSs are now persistent and in their final place
 28410                                  
 28411                                  MagicSetCdss:
 28412                                  	; 13/04/2024 - Retro DOS v5.0
 28413                                  	; ds = cs
 28414 00001916 E83D00                  	call	get_dblspace_version	; is it there?
 28415 00001919 753A                    	jnz	short magic_set_exit	; done if not
 28416                                  					; cl = first DblSpace drive in ASCII
 28417                                  					; ch = number of DblSpace drive letters
 28418 0000191B 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; point to DOS data area (SysInitVars)
 28419 00001920 C57416                  	lds	si,[si+16h]		; lds si,[si+SYSI_CDS] ; fetch CDSs
 28420 00001923 B458                    	mov	ah,88			; curdirLen
 28421 00001925 80E941                  	sub	cl,'A'			; make it zero based.
 28422 00001928 88C8                    	mov	al,cl			; get first DblSpace drive letter
 28423 0000192A F6E4                    	mul	ah			; find first DblSpace CDS
 28424 0000192C 01C6                    	add	si,ax			; cds pointer
 28425 0000192E 88CA                    	mov	dl,cl			; save for drive testing loop
 28426 00001930 88E9                    	mov	cl,ch			; get DblSpace drive count into cx
 28427 00001932 30ED                    	xor	ch,ch
 28428                                  
 28429                                  ;	We know cx > 0, or else the driver wouldn't have stayed resident
 28430                                  
 28431                                  magic_set_cdss_1:
 28432 00001934 51                      	push	cx
 28433 00001935 52                      	push	dx
 28434 00001936 1E                      	push	ds
 28435 00001937 56                      	push	si
 28436 00001938 B8114A                  	mov	ax,4A11h		; multMagicdrv
 28437 0000193B BB0100                  	mov	bx,1			; MD_DRIVE_MAP ; inquire drive map
 28438 0000193E CD2F                    	int	2Fh			; DBLSPACE.BIN - "GetDriveMapping"
 28439                                  					; see if this is an unused DblSpace drive
 28440 00001940 5E                      	pop	si
 28441 00001941 1F                      	pop	ds
 28442 00001942 5A                      	pop	dx
 28443 00001943 59                      	pop	cx
 28444 00001944 38DA                    	cmp	dl,bl			; if mapped to itself,it is vacant
 28445 00001946 7504                    	jnz	short magic_set_cdss_2	; skip if used
 28446 00001948 806444BF                	and	byte [si+44h],0BFh 	; Retro DOS v5.0 ; 08/04/2024
 28447                                  	;and	word [si+43h],0BFFFh
 28448                                  					; reset the bit in flags (curdir_inuse bit)
 28449                                  					; [si+curdir_list.cdir_flags],~curdir_inuse ; word
 28450                                  					; (.. [si+1+curdir_list.cdir_flags],0BFh ; byte)
 28451                                  magic_set_cdss_2:
 28452 0000194C 83C658                  	add	si,88			; curdirLen
 28453 0000194F FEC2                    	inc	dl			; next drive
 28454 00001951 E2E1                    	loop	magic_set_cdss_1
 28455                                  	; 13/04/2024
 28456 00001953 0E                      	push	cs
 28457 00001954 1F                      	pop	ds
 28458                                  magic_set_exit:
 28459 00001955 C3                      	retn
 28460                                  
 28461                                  ; =============== S U B R O U T I N E ==================================
 28462                                  
 28463                                  ; 08/04/2024 - Retro DOS v5.0
 28464                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1C47h)
 28465                                  
 28466                                  get_dblspace_version:
 28467 00001956 B8114A                  	mov	ax,4A11h 	; multMagicdrv
 28468                                  				; DBLSPACE.BIN - "GetVersion" - INSTALLATION CHECK
 28469                                  			 	; (BX = 0)
 28470 00001959 31DB                    	xor	bx,bx	 	; MD_VERSION = 0
 28471 0000195B CD2F                    	int	2Fh	 	; Return:
 28472                                  			 	;  AX = 0000h (successful)
 28473                                  			 	;  BX = 444Dh ("DM")
 28474                                  			 	;  CL = first drive letter used by DBLSPACE (41h = A:)
 28475                                  			 	;  CH = number of drive letters used by DBLSPACE
 28476                                  			 	;  DX = internal DBLSPACE.BIN version number (bits 14-0)
 28477                                  			 	;  bit 15 set if DBLSPACE.BIN has not yet been relocated
 28478                                  			 	;  to final position in memory (i.e. DBLSPACE.SYS /MOVE)
 28479 0000195D 09C0                    	or	ax,ax	 	; ax = 0 (successful,zf=1)
 28480 0000195F C3                      	retn
 28481                                  
 28482                                  ; ----------------------------------------------------------------------
 28483                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 28484                                  ; ----------------------------------------------------------------------
 28485                                  ; 27/03/2019 - Retro DOS v4.0
 28486                                  
 28487                                  ;MULTI_CONFIG	equ 1
 28488                                  
 28489                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 28490                                                                          ; allocation strategy call
 28491                                  
 28492                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 28493                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 28494                                  
 28495                                  default_filenum equ 8
 28496                                  
 28497                                  ;stacksw	equ true		; include switchable hardware stacks
 28498                                  
 28499                                  ; external variable defined in ibmbio module for multi-track
 28500                                  
 28501                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 28502                                  					; it on after handling config.sys file as a
 28503                                  					; default value,if multrk_flag = multrk_off1.
 28504                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 28505                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 28506                                  
 28507                                  ; if stacksw
 28508                                  
 28509                                  ; internal stack parameters
 28510                                  
 28511                                  ;entrysize	equ 8
 28512                                  
 28513                                  ;mincount	equ 8
 28514                                  ;defaultcount	equ 9
 28515                                  ;maxcount	equ 64
 28516                                  
 28517                                  ;minsize 	equ 32
 28518                                  ;defaultsize	equ 128
 28519                                  ;maxsize 	equ 512
 28520                                  
 28521                                  DOS_FLAG_OFFSET	equ 86h
 28522                                  
 28523                                  ;ifdef MULTI_CONFIG
 28524                                  ;
 28525                                  ;   config_envlen must immediately precede config_wrkseg, because they
 28526                                  ;   may be loaded as a dword ptr
 28527                                  
 28528                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28529                                  ; 25/10/2022
 28530 00001960 0000                    config_envlen:	dw  0  			; when config_wrkseg is being used as
 28531                                                 				;  a scratch env, this is its length
 28532 00001962 0000                    config_wrkseg:	dw  0			; config work area (above confbot)
 28533                                                     			;  segment of work area
 28534                                  
 28535 00001964 00                      config_cmd:	db  0  			; current config cmd
 28536                                                   			;  (with CONFIG_OPTION_QUERY bit intact)
 28537 00001965 00                      config_multi:	db  0                   ; non-zero if multi-config config.sys
 28538                                  
 28539                                  ;endif ; MULTI_CONFIG
 28540                                  
 28541 00001966 00                      multdeviceflag:	db  0
 28542                                  
 28543 00001967 0000                    devmark_addr:	dw  0			;segment address for devmark.
 28544                                  
 28545 00001969 00                      setdevmarkflag: db  0			;flag used for devmark
 28546                                  
 28547                                  ; 30/12/2022
 28548                                  ; 12/12/2022
 28549 0000196A 00                      driver_units:	db  0			;total unitcount for driver
 28550                                  
 28551                                  ; 12/12/2022
 28552                                  ;ems_stub_installed:
 28553                                  ;		db  0
 28554                                  
 28555                                  ; 12/12/2022	
 28556                                  ;align 2
 28557                                  
 28558                                  badparm_ptr:	; label	dword
 28559 0000196B 0000                    badparm_off:	dw  0
 28560 0000196D 0000                    badparm_seg:	dw  0
 28561                                  
 28562                                  ;******************************************************************************
 28563                                  ;take care of config.sys file.
 28564                                  ;system parser data and code.
 28565                                  ;******************************************************************************
 28566                                  
 28567                                  ;*******************************************************************
 28568                                  ; parser options set for msbio sysconf module
 28569                                  ;*******************************************************************
 28570                                  ;
 28571                                  ;**** default assemble swiches definition **************************
 28572                                  
 28573                                  ;farsw	equ 0		; near call expected
 28574                                  ;datesw	equ 0		; check date format
 28575                                  ;timesw	equ 0		; check time format
 28576                                  ;filesw	equ 1		; check file specification
 28577                                  ;capsw	equ 0		; perform caps if specified
 28578                                  ;cmpxsw	equ 0		; check complex list
 28579                                  ;numsw	equ 1		; check numeric value
 28580                                  ;keysw	equ 0		; support keywords
 28581                                  ;swsw	equ 1		; support switches
 28582                                  ;val1sw	equ 1		; support value definition 1
 28583                                  ;val2sw	equ 0		; support value definition 2
 28584                                  ;val3sw	equ 1		; support value definition 3
 28585                                  ;drvsw	equ 1		; support drive only format
 28586                                  ;qussw	equ 0		; support quoted string format
 28587                                  
 28588                                  ; psdata_seg equ cs
 28589                                  
 28590                                  	;.xlist
 28591                                  	;include parse.asm		;together with psdata.inc
 28592                                  	;.list
 28593                                  
 28594                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 28595                                  ; ======================================================================
 28596                                  ; 27/03/2019 - Retro DOS v4.0
 28597                                  
 28598                                  ; 30/03/2019
 28599                                  ; VERSION.INC (MSDOS 6.0) 
 28600                                  ; Set DBCS Blank constant
 28601                                  
 28602                                  ; ifndef DBCS
 28603                                  DB_SPACE EQU 2020h
 28604                                  DB_SP_HI EQU 20h
 28605                                  DB_SP_LO EQU 20h
 28606                                  ; else
 28607                                  
 28608                                  ;*******************************************************************
 28609                                  ; Parser include file
 28610                                  ;*******************************************************************
 28611                                  
 28612                                  ;**** Equation field
 28613                                  ;-------- Character code definition
 28614                                  
 28615                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 28616                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 28617                                  _$P_Period	   equ	"."             ;AN020;
 28618                                  _$P_Slash	   equ	"/"             ;AN020;
 28619                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 28620                                  _$P_Comma	   equ	","             ;AN000;
 28621                                  _$P_Switch	   equ	"/"             ;AN000;
 28622                                  _$P_Keyword	   equ	"="             ;AN000;
 28623                                  _$P_Colon	   equ	":"             ;AN000;
 28624                                  _$P_Plus 	   equ	"+"             ;AN000;
 28625                                  _$P_Minus	   equ	"-"             ;AN000;
 28626                                  _$P_Rparen	   equ	")"             ;AN000;
 28627                                  _$P_Lparen	   equ	"("             ;AN000;
 28628                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 28629                                  _$P_DQuote	   equ	'"'             ;AN000;
 28630                                  _$P_NULL 	   equ	0		;AN000;
 28631                                  _$P_TAB		   equ	9		;AN000;
 28632                                  _$P_CR		   equ	0Dh		;AN000;
 28633                                  _$P_LF		   equ	0Ah		;AN000;
 28634                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 28635                                  
 28636                                  ;-------- Masks
 28637                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 28638                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 28639                                  
 28640                                  ;-------- DOS function call related equs
 28641                                  
 28642                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 28643                                  					; by this call, following information
 28644                                  struc _$P_CDI	
 28645 00000000 ????                     .DateF: resw 1
 28646 00000002 ??????????               .Money: resb 5
 28647 00000007 ????                     .1000:	 resb 2
 28648 00000009 ????                     .Dec:	 resb 2
 28649 0000000B ????                     .DateS: resb 2
 28650 0000000D ????                     .TimeS: resb 2
 28651 0000000F ??                          	 resb 1
 28652 00000010 ??                      	 resb 1
 28653 00000011 ??                       .TimeF: resb 1	 
 28654 00000012 ????????                	 resw 2
 28655 00000016 ????                    	 resb 2
 28656 00000018 <res Ah>                	 resw 5
 28657                                   .size:
 28658                                  endstruc
 28659                                  
 28660                                  _$P_Date_MDY	   equ	0		;AN000;
 28661                                  _$P_Date_DMY	   equ	1		;AN000;
 28662                                  _$P_Date_YMD	   equ	2		;AN000;
 28663                                  ;-------------
 28664                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 28665                                  					;AN000; DS:SI will points to DBCS EV
 28666                                  ;-------------
 28667                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 28668                                  					;AN000; following parameters are set
 28669                                  					;AN000; to get casemap table.
 28670                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 28671                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 28672                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 28673                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 28674                                  					; By this call following information
 28675                                  					; is returned.
 28676                                  struc _$P_DOS_TBL
 28677 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 28678 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 28679 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 28680                                  endstruc
 28681                                  
 28682                                  ; ----------------------------------------------------------------------------
 28683                                  ; PARMS 	LABEL	BYTE
 28684                                  ;		DW	PARMSX
 28685                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 28686                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 28687                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 28688                                  ;					; TYPICAL ARE ";", "="
 28689                                  ;					; "," & WHITESPACE ALWAYS
 28690                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 28691                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 28692                                  ; ----------------------------------------------------------------------------
 28693                                  
 28694                                  ;-------------------------------- PARMS block structure
 28695                                  struc _$P_PARMS_Blk
 28696 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 28697 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 28698 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 28699                                  endstruc
 28700                                  
 28701                                  _$P_Len_PARMS	   equ	4		;AN000;
 28702                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 28703                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 28704                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 28705                                  
 28706                                  ; ----------------------------------------------------------------------------
 28707                                  ; PARMSX	LABEL	BYTE
 28708                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 28709                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 28710                                  ;		:			; REPEATS maxp-1 TIMES
 28711                                  ;		DB	maxs		; # OF SWITCHES
 28712                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 28713                                  ;		:			; REPEATS maxs-1 TIMES
 28714                                  ;		DB	maxk		; # OF KEYWORD
 28715                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 28716                                  ;		:			; REPEATS maxk-1 TIMES
 28717                                  ; ----------------------------------------------------------------------------
 28718                                  
 28719                                  ;-------------------------------- PARMSX block structure
 28720                                  struc _$P_PARMSX_Blk		;AN000;
 28721 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 28722 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 28723 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 28724                                  endstruc
 28725                                  
 28726                                  ; ----------------------------------------------------------------------------
 28727                                  ; << Control field definition  >>
 28728                                  ;
 28729                                  ;
 28730                                  ;CONTROL   LABEL   BYTE
 28731                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 28732                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 28733                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 28734                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 28735                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 28736                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 28737                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 28738                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 28739                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 28740                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 28741                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 28742                                  ;				   ; 0002H=REPEATS ALLOWED
 28743                                  ;				   ; 0001H=OPTIONAL
 28744                                  ;	   DW	   FUNCTION_FLAGS
 28745                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 28746                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 28747                                  ;				   ; 0010H=REMOVE ":" AT END
 28748                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 28749                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 28750                                  ;	   DW	   VALUES	   ; VALUE LISTS
 28751                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 28752                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 28753                                  ;	   :
 28754                                  ;
 28755                                  ;Note:
 28756                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 28757                                  ;      DATE bit simalteniously.
 28758                                  ;
 28759                                  ;      The parser examins each bit along with the following priority.
 28760                                  ;
 28761                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 28762                                  ;      FILE SPEC -> SIMPLE STRING.
 28763                                  ;
 28764                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 28765                                  ;      in the result buffer is capitalized.
 28766                                  ;
 28767                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 28768                                  ;
 28769                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 28770                                  ;      switch, for example, '/A', then STRING points to;
 28771                                  ;
 28772                                  ;			DB    1 	; number of following synonyms
 28773                                  ;			DB   '/A',0
 28774                                  ;
 28775                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 28776                                  ;
 28777                                  ;			DB    1 	; number of following synonyms
 28778                                  ;			DB   'CODEPAGE=',0
 28779                                  ;
 28780                                  ;    - "..." must consist of upper case characters only because the parser
 28781                                  ;      performs pattern matching after converting input to upper case (by
 28782                                  ;      using the current country upper case table)
 28783                                  ;
 28784                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 28785                                  ;      example /A and /B, the format will be;
 28786                                  ;
 28787                                  ;			DB    2 	; number of following synonyms
 28788                                  ;			DB    '/A',0
 28789                                  ;			DB    '/B',0
 28790                                  ; ----------------------------------------------------------------------------
 28791                                  
 28792                                  ;**** Match_Flags
 28793                                  
 28794                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 28795                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 28796                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 28797                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 28798                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 28799                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 28800                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 28801                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 28802                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 28803                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 28804                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 28805                                  _$P_Optional	   equ	0001h		;AN000; Optional
 28806                                  
 28807                                  ;**** Function flags
 28808                                  
 28809                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 28810                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 28811                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 28812                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 28813                                  
 28814                                  ;-------------------------------- Control block structure
 28815                                  struc _$P_Control_Blk
 28816 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 28817 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 28818 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 28819 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 28820 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 28821 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 28822                                  endstruc
 28823                                  
 28824                                  ; ----------------------------------------------------------------------------
 28825                                  ; << Value List Definition >>
 28826                                  ;
 28827                                  ;VALUES 	LABEL	BYTE
 28828                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 28829                                  ;	     +-
 28830                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 28831                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 28832                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 28833                                  ;	     |	:
 28834                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 28835                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 28836                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 28837                                  ;	     |	:
 28838                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 28839                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 28840                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 28841                                  ;	     +-	:
 28842                                  ;
 28843                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 28844                                  ;
 28845                                  ;Note:
 28846                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 28847                                  ;      when no choice lists are provided.
 28848                                  ;
 28849                                  ;    - STRING must consist of upper case characters only because the parser
 28850                                  ;      performs pattern matching after converting input to upper case (by
 28851                                  ;      using the current country upper case table)
 28852                                  ; ----------------------------------------------------------------------------
 28853                                  
 28854                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 28855                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 28856                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 28857                                  _$P_nval_String	   equ	3		;AN000; string list ID
 28858                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 28859                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 28860                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 28861                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 28862                                  
 28863                                  struc _$P_Val_List
 28864 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 28865 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 28866 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 28867 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 28868 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 28869                                  endstruc
 28870                                  
 28871                                  ; ----------------------------------------------------------------------------
 28872                                  ; << Result Buffer Definition  >>
 28873                                  ;
 28874                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 28875                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 28876                                  ;						;	1=NUMBER, 2=LIST INDEX,
 28877                                  ;						;	3=STRING, 4=COMPLEX,
 28878                                  ;						;	5=FILESPEC, 6=DRIVE
 28879                                  ;						;	7=DATE, 8=TIME
 28880                                  ;						;	9=QUOTED STRING
 28881                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 28882                                  ;
 28883                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 28884                                  ;
 28885                                  ;            +-
 28886                                  ;	    | DD	n			; VALUE IF NUMBER
 28887                                  ;	    | or
 28888                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 28889                                  ;	    |					; (ES presents Segment address)
 28890                                  ;	    | or
 28891                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 28892                                  ;	    | or
 28893                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 28894                                  ;	    | or
 28895                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 28896                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 28897                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 28898                                  ;	    | or
 28899                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 28900                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 28901                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 28902                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 28903                                  ;	    +-
 28904                                  ;
 28905                                  ;
 28906                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 28907                                  ;      list.
 28908                                  ;
 28909                                  ;      YEAR: If the input value for the year is less than 100, parser
 28910                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 28911                                  ;	     the year value, he returns 1987.
 28912                                  ; ----------------------------------------------------------------------------
 28913                                  
 28914                                  ;-------------------------------- Result block structure
 28915                                  struc _$P_Result_Blk
 28916 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 28917 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 28918 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 28919 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 28920                                  endstruc
 28921                                  
 28922                                  ;--------------------------------
 28923                                  ;**** values for the type field in the result block
 28924                                  
 28925                                  _$P_EOL		   equ	0		;AN000; End of line
 28926                                  _$P_Number	   equ	1		;AN000; Number
 28927                                  _$P_List_Idx	   equ	2		;AN000; List Index
 28928                                  _$P_String	   equ	3		;AN000; String
 28929                                  _$P_Complex	   equ	4		;AN000; Complex
 28930                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 28931                                  _$P_Drive	   equ	6		;AN000; Drive
 28932                                  _$P_Date_F	   equ	7		;AN000; Date
 28933                                  _$P_Time_F	   equ	8		;AN000; Time
 28934                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 28935                                  
 28936                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 28937                                  
 28938                                  ;**** Return code
 28939                                  ;
 28940                                  ; following return code will be returned in the AX register.
 28941                                  
 28942                                  _$P_No_Error	   equ	0		;AN000; No error
 28943                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 28944                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 28945                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 28946                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 28947                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 28948                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 28949                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 28950                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 28951                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 28952                                  
 28953                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 28954                                  
 28955                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 28956                                  
 28957                                  ; 14/04/2024 - Retro DOS v5.0
 28958                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:1C62h
 28959                                  
 28960                                  ;********************** Local Data *************************************
 28961 0000196F 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 28962 00001971 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 28963 00001973 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 28964 00001975 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 28965 00001977 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 28966 00001978 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 28967 0000197A 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 28968 0000197C 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 28969                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 28970                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 28971                                  
 28972                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 28973                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 28974                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 28975                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 28976                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 28977                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 28978                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 28979                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 28980                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 28981                                  
 28982                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 28983                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 28984                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 28985                                  
 28986 0000197E 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 28987 00001980 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 28988 00001982 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 28989 00001984 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 28990                                  
 28991 00001986 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 28992                                  _$P_STRING_BUF_END equ	$		;AN000;
 28993                                  
 28994                                  ; 25/10/2022
 28995                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 28996                                  
 28997 00001A06 FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 28998 00001A07 0000                    		   dw	0		;AN000; offset	of char case map table
 28999 00001A09 0000                    		   dw	0		;AN000; segment of char case map table
 29000                                  ; 25/10/2022
 29001                                  ;IF CAPSW
 29002                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 29003                                  ;		   dw	0		;AN000; offset	of file case map table
 29004                                  ;		   dw	0		;AN000; segment of file case map table
 29005                                  ;ENDIF
 29006                                  
 29007                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 29008                                  ;
 29009                                  
 29010                                  ;M029
 29011                                  ;!!!WARNING!!!
 29012                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 29013                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 29014                                  ;changes need to be made in SYSPARSE
 29015                                  
 29016                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 29017                                  
 29018                                  ; 25/10/2022
 29019                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 29020                                  
 29021 00001A0B 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 29022                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 29023                                  
 29024                                  ;ENDIF					;AN000;(of FileSW)
 29025                                  
 29026                                  ; delimiter parsing
 29027                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 29028                                  _$P_period_only	   equ	02h		;AN032; check only for period
 29029                                  
 29030                                  ;filespec error flag
 29031 00001A14 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 29032                                  					;AN033;  was detected.
 29033                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 29034                                  
 29035                                  
 29036                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 29037                                  ; ======================================================================
 29038                                  ; 27/03/2019 - Retro DOS v4.0
 29039                                  
 29040                                  ;***********************************************************************
 29041                                  ; SysParse;
 29042                                  ;
 29043                                  ;  Function : Parser Entry
 29044                                  ;
 29045                                  ;  Input: DS:SI -> command line
 29046                                  ;	  ES:DI -> parameter block
 29047                                  ;	  cs -> psdata.inc
 29048                                  ;	  CX = operand ordinal
 29049                                  ;
 29050                                  ;	  Note:  ES is the segment containing all the control blocks defined
 29051                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 29052                                  ;		 is in DS.
 29053                                  ;
 29054                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 29055                                  ;		    invalid value list. But this parser does NOT implement
 29056                                  ;		    this feature. Therefore CY always zero.
 29057                                  ;
 29058                                  ;	   CY = 0   AX = return code
 29059                                  ;		    BL = terminated delimiter code
 29060                                  ;		    CX = new operand ordinal
 29061                                  ;		    SI = set past scaned operand
 29062                                  ;		    DX = selected result buffer
 29063                                  ;
 29064                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 29065                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 29066                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 29067                                  ;
 29068                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 29069                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 29070                                  ;
 29071                                  ;-------- Modification History -----------------------------------------
 29072                                  ;
 29073                                  ;  4/04/87 : Created by K. K,
 29074                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 29075                                  ;	   : JMP SHORT assemble error (tm02)
 29076                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 29077                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 29078                                  ;	     DateSW equ 1)	      (tm04)
 29079                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 29080                                  ;				      (tm05) in PSDATA.INC
 29081                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 29082                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 29083                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 29084                                  ;	     value-list block	      (tm07)
 29085                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 29086                                  ;	     switch (keyword) or not. If there is, backup si for next call
 29087                                  ;	     (tm08)
 29088                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 29089                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 29090                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 29091                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 29092                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 29093                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 29094                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 29095                                  ;					  (tm12)
 29096                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 29097                                  ;					  (tm13)
 29098                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 29099                                  ;					  (tm14)
 29100                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 29101                                  ;					  (tm15)
 29102                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 29103                                  
 29104                                  ;  7/24/87 : Quoted strings being returned with quotes.
 29105                                  
 29106                                  ;  7/28/87 : Kerry S (;AN018;)
 29107                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 29108                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 29109                                  ;	     affected: _$P_Chk_SW_Control.
 29110                                  
 29111                                  ;  7/29/87 : Kerry S (;AN019;)
 29112                                  ;	     Now allow the optional bit in match flags for switches.  This
 29113                                  ;	     allows the switch to be encountered with a value or without a
 29114                                  ;	     value and no error is returned.
 29115                                  ;
 29116                                  
 29117                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 29118                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 29119                                  ;	     within a date response, instead of checking just for the one
 29120                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 29121                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 29122                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 29123                                  
 29124                                  ;  9/1/87  : Kerry S (;AN021)
 29125                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 29126                                  ;	     the command line with the string in the control block the
 29127                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 29128                                  ;	     on the command line and assuming a match.	This allowed a shorter
 29129                                  ;	     string on the command line than in the synonym list in the control
 29130                                  ;	     block.  I put in a test for a null in the control block so the
 29131                                  ;	     string in the control block must be the same length as the string
 29132                                  ;	     preceeding the colon or equal on the command line.
 29133                                  
 29134                                  ;  8/28/87 : Kerry S (;AN022;)
 29135                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 29136                                  ;	     problems for people who included it themselves in a segment other
 29137                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 29138                                  ;	     segment.
 29139                                  
 29140                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 29141                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 29142                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 29143                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 29144                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 29145                                  ;	     BL be used if TIME is being parsed.
 29146                                  
 29147                                  ;  9/24/87 : Ed K
 29148                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 29149                                  ;	     invocations with their normally expanded code; made comments
 29150                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 29151                                  
 29152                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 29153                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 29154                                  ;	     pointed to by non-existant CONTROL.
 29155                                  
 29156                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 29157                                  ;	     A quoted text string can be framed only by double quote.  Remove
 29158                                  ;	     support to frame quoted text string with single quote.
 29159                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 29160                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 29161                                  ;	     single quote in PROC prologues are left as is for history reasons.
 29162                                  
 29163                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 29164                                  ;	     quote chars within a quoted string is supposed to be reported as
 29165                                  ;	     one quote character, but is reported as two quotes.  This changed
 29166                                  ;	     two instructions in PROC _$P_Quoted_Str.
 29167                                  
 29168                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 29169                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 29170                                  
 29171                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 29172                                  
 29173                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 29174                                  ;	     psdata buffer should have cs.
 29175                                  
 29176                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 29177                                  ;	     positional missing.
 29178                                  
 29179                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 29180                                  ;	     as a line delimiter, should use carriage return.
 29181                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 29182                                  
 29183                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 29184                                  
 29185                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 29186                                  ;	     endless loop since SI is returned still pointing to start
 29187                                  ;	     of that parm.
 29188                                  
 29189                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 29190                                  ;	     Vector to returned string has CS instead of cs, but
 29191                                  ;	     when tried to fix it on previous version, changed similar
 29192                                  ;	     but wrong place.
 29193                                  
 29194                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 29195                                  ;	     delimiters between hours, minutes, seconds for time. And period
 29196                                  ;	     and comma are valid delimiters between seconds and 100th second.
 29197                                  
 29198                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 29199                                  ;	     in a filespec, then flag an error.
 29200                                  
 29201                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 29202                                  ;	     indexed off of the cs equate instead of the DS register.
 29203                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 29204                                  ;  -->	     local parser data. Why were some references to local data changed
 29205                                  ;	     to do this before, but not all ?????
 29206                                  
 29207                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 29208                                  
 29209                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 29210                                  ;
 29211                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 29212                                  
 29213                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 29214                                  
 29215                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 29216                                  ;	     separator in TIME before hundredths field.
 29217                                  ;
 29218                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 29219                                  ;			strings as keywords.
 29220                                  ;
 29221                                  ;***********************************************************************
 29222                                  
 29223                                  ;IF FarSW				;AN000;(Check if need far return)
 29224                                  ;SysParse proc far			;AN000;
 29225                                  ;ELSE					;AN000;
 29226                                  ;SysParse proc near			;AN000;
 29227                                  ;ENDIF					;AN000;(of FarSW)
 29228                                  
 29229                                  ; 27/03/2019 - Retro DOS v4.0
 29230                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 29231                                  
 29232                                  ; 25/10/2022 - Retro DOS v4.0
 29233                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 29234                                  
 29235                                  ; 06/09/2023 - Retro DOS v4.2 IO.SYS Optimization (& Retro DOS v5.0 pre-work)
 29236                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1D08h)
 29237                                  
 29238                                  SysParse:
 29239                                  	; 06/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 29240                                  	; dx = 0
 29241 00001A15 1E                      	push	ds ; *!*
 29242 00001A16 0E                      	push	cs
 29243 00001A17 1F                      	pop	ds 
 29244                                  
 29245                                  	;mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 29246                                  	;cld				;AN000; confirm forward direction
 29247                                  	;mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 29248                                  	;mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 29249                                  	;mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 29250                                  	;
 29251                                  	;mov	word [cs:_$P_DX],0	;AC034; (tm15)
 29252                                  
 29253                                  	; 06/09/2023
 29254 00001A18 8916[7C19]              	mov	[_$P_Flags],dx ; 0	;AC034; Clear all internal flags
 29255 00001A1C FC                      	cld				;AN000; confirm forward direction
 29256 00001A1D 890E[6F19]              	mov	[_$P_ORDINAL],cx	;AC034; save operand ordinal
 29257 00001A21 8916[7119]              	mov	[_$P_RC],dx ; $P_No_Error ;AC034; Assume no error
 29258 00001A25 8916[8419]              	mov	[_$P_Found_SYNONYM],dx	; 0 ;AC034; initalize synonym pointer
 29259 00001A29 8916[7519]              	mov	[_$P_DX],dx ; 0		;AC034; (tm15)
 29260                                  
 29261                                  ;M029 -- Begin changes
 29262                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 29263                                  ;entry to SysParse. This is in the non-checksum region and any program that
 29264                                  ;corrupts this table but does not corrupt the checksum region will leave
 29265                                  ;command.com parsing in an inconsistent state.
 29266                                  ; NB: The special characters string has been hardcoded here. If any change
 29267                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 29268                                  
 29269                                  ;IF FileSW + DrvSW
 29270                                  	; 14/04/2024 (NASM syntax BugFix) .. '][' (MASM) -> '[]' (NASM)
 29271                                  	
 29272                                  	;mov	word [cs:_$P_FileSp_Char], '[]'
 29273                                  	;mov	word [cs:_$P_FileSp_Char+2], '|<'
 29274                                  	;mov	word [cs:_$P_FileSp_Char+4], '>+'
 29275                                  	;mov 	word [cs:_$P_FileSp_Char+6], '=;'
 29276                                  
 29277                                  	; 14/04/2024
 29278                                  	; 06/09/2023
 29279 00001A2D C706[0B1A]5B5D          	mov	word [_$P_FileSp_Char], '[]'	; mov word [_$P_FileSp_Char],5D5Bh
 29280 00001A33 C706[0D1A]7C3C          	mov	word [_$P_FileSp_Char+2], '|<'	; 3C7Ch
 29281 00001A39 C706[0F1A]3E2B          	mov	word [_$P_FileSp_Char+4], '>+'	; 2B3Eh
 29282 00001A3F C706[111A]3D3B          	mov 	word [_$P_FileSp_Char+6], '=;'	; 3B3Dh
 29283                                  ;ENDIF
 29284                                  	; 06/09/2023
 29285 00001A45 1F                      	pop	ds ; *!*
 29286                                  
 29287                                  ;M029 -- End of changes
 29288                                  
 29289 00001A46 E87806                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 29290 00001A49 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 29291                                  ;--------------------------- End of Line
 29292 00001A4B B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 29293 00001A4E 53                      	push	bx			;AN000;
 29294                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 29295                                  					;AN000; Get the PARMSX address to
 29296 00001A4F 268B1D                  	mov	bx,[es:di]
 29297                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 29298                                  					;AN000; check ORDINAL to see if the minimum
 29299 00001A52 263A0F                  	cmp	cl,[es:bx]	
 29300 00001A55 7303                    	jae	short _$P_Fin		;AN000; positional found.
 29301                                  
 29302 00001A57 B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 29303                                  _$P_Fin: 				;AN000;
 29304 00001A5A 5B                      	pop	bx			;AN000;
 29305 00001A5B E90A01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 29306                                  ;---------------------------
 29307                                  _$P_Start:				;AN000;
 29308 00001A5E 2E8936[7E19]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 29309 00001A63 53                      	push	bx			;AN000; quoted string or file spec.
 29310 00001A64 57                      	push	di			;AN000;
 29311 00001A65 55                      	push	bp			;AN000;
 29312                                  	;;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 29313                                  	; 02/11/2022
 29314                                  	;lea	bx,[_$P_STRING_BUF]
 29315                                  	; 07/09/2023
 29316 00001A66 BB[8619]                	mov	bx,_$P_STRING_BUF
 29317 00001A69 2EF606[7D19]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 29318 00001A6F 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 29319                                  
 29320                                  _$P_Pack_Loop:				;AN000;
 29321 00001A71 AC                      	lodsb				;AN000; Pick a operand from buffer
 29322 00001A72 E8F106                  	call	_$P_Chk_Switch		;AN000; Check switch character
 29323 00001A75 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 29324                                  
 29325 00001A77 E86906                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 29326 00001A7A 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 29327                                  
 29328 00001A7C E89906                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 29329 00001A7F 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 29330                                  
 29331 00001A81 2EF606[7D19]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 29332                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 29333 00001A87 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 29334                                  
 29335 00001A89 E83506                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 29336 00001A8C EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 29337                                  
 29338                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 29339 00001A8E 2EF606[7D19]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 29340 00001A94 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 29341                                  
 29342 00001A96 4E                      	dec	si			;AN000; (tm08)
 29343 00001A97 EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 29344                                  
 29345                                  _$P_PL01:				;AN000;
 29346 00001A99 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 29347 00001A9C 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 29348 00001A9E 7506                    	jne	short _$P_PL00 		;AN000; then
 29349                                  
 29350 00001AA0 2E800E[7D19]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 29351                                  _$P_PL00:				;AN000;
 29352 00001AA6 43                      	inc	bx			;AN000; ready to see next byte
 29353 00001AA7 E8D506                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 29354 00001AAA 73C5                    	jnc	short _$P_Pack_Loop	;AN000; if no, process to next byte
 29355                                  
 29356 00001AAC AC                      	lodsb				;AN000; if yes, store
 29357 00001AAD 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 29358 00001AB0 43                      	inc	bx			;AN000; update pointer
 29359 00001AB1 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 29360                                  
 29361                                  _$P_Pack_End_BY_EOL:			;AN000;
 29362 00001AB3 4E                      	dec	si			;AN000; backup si pointer
 29363                                  _$P_Pack_End:				;AN000;
 29364 00001AB4 2E8936[7319]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 29365                                  	; 07/09/2023
 29366                                  	;mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 29367 00001AB9 30E4                    	xor	ah,ah ; 0 ; *
 29368 00001ABB 2E8827                  	mov	[cs:bx],ah ; _$P_NULL	;AN000; put NULL at the end
 29369                                  	;
 29370 00001ABE 2E891E[8219]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 29371                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 29372 00001AC3 268B1D                  	mov	bx,[es:di]
 29373                                  	;;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 29374                                  	; 02/11/2022
 29375                                  	;lea	si,[_$P_STRING_BUF]
 29376                                  	; 07/09/2023
 29377 00001AC6 BE[8619]                	mov	si,_$P_STRING_BUF
 29378 00001AC9 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 29379 00001ACD 7440                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 29380                                  
 29381 00001ACF 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 29382 00001AD3 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 29383                                  
 29384 00001AD5 2EF606[7D19]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 29385 00001ADB 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 29386                                  
 29387                                  _$P_Positional_Manager:			;AN000; else process as positional
 29388 00001ADD 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 29389                                  	; 07/09/2023
 29390                                  	;xor	ah,ah			;AN000; ax = maxp
 29391 00001AE1 2E3906[6F19]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 29392 00001AE6 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 29393                                  
 29394 00001AE8 2EA1[6F19]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 29395 00001AEC D1E0                    	shl	ax,1			;AN000; ax = ax*2
 29396 00001AEE 43                      	inc	bx			;AC035; add '2' to
 29397 00001AEF 43                      	inc	bx			;AC035;  BX reg
 29398                                  					;AN000; now bx points to 1st CONTROL
 29399 00001AF0 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 29400 00001AF2 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 29401 00001AF5 E87200                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 29402 00001AF8 EB53                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 29403                                  
 29404                                  _$P_Too_Many_Error:			;AN000;
 29405 00001AFA 2EC706[7119]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 29406 00001B01 EB4A                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 29407                                  
 29408                                  	; 07/09/2023 - Retro DOSD v4.2 IO.SYS (Optimization)
 29409                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1E06h)
 29410                                  get_maxp:
 29411                                  	;mov	al,[es:bx+1]
 29412 00001B03 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 29413                                  	; 07/09/2023
 29414                                  	; ah=0 ; *
 29415                                  	;xor	ah,ah ; 0		;AN000; ax = maxp
 29416 00001B07 30ED                    	xor	ch,ch ; **
 29417 00001B09 40                      	inc	ax			;AN000;
 29418 00001B0A D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 29419 00001B0C 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 29420 00001B0E C3                      	retn
 29421                                  
 29422                                  _$P_SW_Manager:				;AN000;
 29423                                  	; 07/09/2023
 29424                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 29425                                  	;xor	ah,ah			;AN000; ax = maxp
 29426                                  	;inc	ax			;AN000;
 29427                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 29428                                  	;add	bx,ax			;AN000; now bx points to maxs
 29429 00001B0F E8F1FF                  	call	get_maxp ; 07/09/2023
 29430                                  
 29431 00001B12 268A0F                  	mov	cl,[es:bx]		;AN000;
 29432                                  	; 07/09/2023
 29433                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxs
 29434                                  	;or	cx,cx			;AN000; at least one switch ?
 29435                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 29436                                  	; 07/07/2023
 29437 00001B15 E30F                    	jcxz	_$P_SW_Not_Found	; no
 29438                                  
 29439 00001B17 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 29440                                  
 29441                                  _$P_SW_Mgr_Loop: 			;AN000;
 29442 00001B18 53                      	push	bx			;AN000;
 29443 00001B19 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 29444 00001B1C E8A900                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 29445 00001B1F 5B                      	pop	bx			;AN000;
 29446 00001B20 732B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 29447                                  
 29448 00001B22 43                      	inc	bx			;AC035; add '2' to
 29449 00001B23 43                      	inc	bx			;AC035;  BX reg
 29450                                  					;AN000; else bx points to the next CONTROL
 29451 00001B24 E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 29452                                  
 29453                                  _$P_SW_Not_Found:			;AN000;
 29454 00001B26 2EC706[7119]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 29455 00001B2D EB1E                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 29456                                  
 29457                                  _$P_Key_Manager: 			;AN000;
 29458                                  	; 07/09/2023
 29459                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 29460                                  	;xor	ah,ah			;AN000; ax = maxp
 29461                                  	;inc	ax			;AN000;
 29462                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 29463                                  	;add	bx,ax			;AN000; now bx points to maxs
 29464 00001B2F E8D1FF                  	call	get_maxp ; 07/09/2023
 29465                                  	
 29466 00001B32 268A07                  	mov	al,[es:bx]		;AN000;
 29467 00001B35 30E4                    	xor	ah,ah ; 0		;AN000; ax = maxs
 29468 00001B37 D1E0                    	shl	ax,1			;AN000;
 29469 00001B39 40                      	inc	ax			;AN000; ax = ax*2+1
 29470 00001B3A 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 29471 00001B3C 268A0F                  	mov	cl,[es:bx]		;AN000;
 29472                                  	; 07/09/2023
 29473                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxk
 29474                                  	;or	cx,cx			;AN000; at least one keyword ?
 29475                                  	;jz	short _$P_Key_Not_Found	;AN000;
 29476                                  	; 07/07/2023
 29477 00001B3F E305                    	jcxz	_$P_Key_Not_Found	; no
 29478                                  
 29479 00001B41 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 29480                                  
 29481                                  _$P_Key_Mgr_Loop:			;AN000;
 29482                                  	; 07/09/2023
 29483                                  	; ('_$P_Chk_Key_Control' contains only 'stc' instruction)
 29484                                  	; (always returns with cf=1)
 29485                                  	;push	bx			;AN000;
 29486                                  	;mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 29487                                  	;call	_$P_Chk_Key_Control	;AN000; do process for keyword
 29488                                  	;pop	bx			;AN000;
 29489                                  	;jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 29490                                  	; 07/09/2023
 29491                                  	; cf=1 (after 'call _$P_Chk_Key_Control')
 29492                                  
 29493 00001B42 43                      	inc	bx			;AC035; add '2' to
 29494 00001B43 43                      	inc	bx			;AC035;  BX reg
 29495                                  					;AN000; else bx points to the next CONTROL
 29496 00001B44 E2FC                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 29497                                  
 29498                                  _$P_Key_Not_Found:			;AN000;
 29499 00001B46 2EC706[7119]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 29500                                  _$P_Return_to_Caller:			;AN000;
 29501 00001B4D 5D                      	pop	bp			;AN000;
 29502 00001B4E 5F                      	pop	di			;AN000;
 29503 00001B4F 5B                      	pop	bx			;AN000;
 29504 00001B50 2E8B0E[6F19]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 29505 00001B55 2EA1[7119]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 29506 00001B59 2E8B36[7319]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 29507 00001B5E 2E8B16[7519]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 29508 00001B63 2E8A1E[7719]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 29509                                  _$P_Single_Exit: 			;AN000;
 29510 00001B68 F8                      	clc				;AN000;
 29511 00001B69 C3                      	retn				;AN000;
 29512                                  
 29513                                  ;***********************************************************************
 29514                                  ; _$P_Chk_Pos_Control
 29515                                  ;
 29516                                  ; Function: Parse CONTROL block for a positional
 29517                                  ;
 29518                                  ; Input:     ES:BX -> CONTROL block
 29519                                  ;	     cs:SI -> _$P_STRING_BUF
 29520                                  ;
 29521                                  ; Output:    None
 29522                                  ;
 29523                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 29524                                  ;
 29525                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 29526                                  ;***********************************************************************
 29527                                  
 29528                                  _$P_Chk_Pos_Control:
 29529 00001B6A 50                      	push	ax			;AN000;
 29530                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 29531 00001B6B 268B07                  	mov	ax,[es:bx]
 29532                                  	; 12/12/2022
 29533 00001B6E A802                    	test	al,_$P_Repeat
 29534                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 29535 00001B70 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 29536                                  
 29537 00001B72 2EFF06[6F19]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 29538                                  _$P_CPC00:				;AN000;
 29539 00001B77 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 29540 00001B7B 7517                    	jne	short _$P_CPC01		;AN000;
 29541                                  
 29542                                  	; 12/12/2022
 29543 00001B7D A801                    	test	al,_$P_Optional
 29544                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 29545 00001B7F 7509                    	jnz	short _$P_CPC02		;AN000;
 29546                                  
 29547 00001B81 2EC706[7119]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 29548 00001B88 EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 29549                                  
 29550                                  _$P_CPC02:				;AN000;
 29551 00001B8A 50                      	push	ax			;AN000;
 29552                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 29553                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 29554                                  	; 07/07/2023
 29555 00001B8B B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 29556 00001B8E E89600                  	call	_$P_Fill_Result		;AN000;
 29557 00001B91 58                      	pop	ax			;AN000;
 29558 00001B92 EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 29559                                  
 29560                                  _$P_CPC01:				;AN000;
 29561 00001B94 E81101                  	call	_$P_Check_Match_Flags	;AN000;
 29562                                  _$P_CPC_Exit:				;AN000;
 29563 00001B97 58                      	pop	ax			;AN000;
 29564 00001B98 C3                      	retn				;AN000;
 29565                                  
 29566                                  ;***********************************************************************
 29567                                  ; _$P_Chk_Key_Control
 29568                                  ;
 29569                                  ; Function: Parse CONTROL block for a keyword
 29570                                  ;
 29571                                  ; Input:     ES:BX -> CONTROL block
 29572                                  ;	     cs:SI -> _$P_STRING_BUF
 29573                                  ;
 29574                                  ; Output:    CY = 1 : not match
 29575                                  ;
 29576                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 29577                                  ;
 29578                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 29579                                  ;***********************************************************************
 29580                                  
 29581                                  ; 07/09/2023
 29582                                  ;_$P_Chk_Key_Control:
 29583                                  ;	stc				;AN000; this logic works when the KeySW
 29584                                  ;	retn				;AN000; is reset.
 29585                                  
 29586                                  ;***********************************************************************
 29587                                  ; _$P_Search_KEYorSW:
 29588                                  ;
 29589                                  ; Function: Seach specified keyword or switch from CONTROL
 29590                                  ;
 29591                                  ; Input:     ES:BX -> CONTROL block
 29592                                  ;	     cs:SI -> _$P_STRING_BUF
 29593                                  ;
 29594                                  ; Output:    CY = 1 : not match
 29595                                  ;
 29596                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 29597                                  ;***********************************************************************
 29598                                  
 29599                                  	; 25/10/2022 - Retro DOS v4.0
 29600                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 29601                                  
 29602                                  _$P_Search_KEYorSW:			;AN000;
 29603 00001B99 55                      	push	bp			;AN000;
 29604 00001B9A 51                      	push	cx			;AN000;
 29605 00001B9B 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 29606 00001B9F 30ED                    	xor	ch,ch			;AN000; and set it to cx
 29607                                  	;or	cx,cx			;AN000; No synonyms specified ?
 29608                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 29609                                  	; 07/07/2023
 29610 00001BA1 E30D                    	jcxz	_$P_KEYorSW_Not_Found
 29611                                  
 29612                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 29613                                  	; 25/10/2022
 29614 00001BA3 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 29615                                  	;lea	bp,[bx+9]
 29616                                  _$P_KEYorSW_Loop:			;AN000;
 29617 00001BA6 E8B503                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 29618 00001BA9 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 29619                                  
 29620 00001BAB E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 29621 00001BAE E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 29622                                  _$P_KEYorSW_Not_Found:			;AN000;
 29623 00001BB0 F9                      	stc				;AN000; indicate not found in synonym list
 29624 00001BB1 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 29625                                  
 29626                                  _$P_KEYorSW_Found:			;AN000;
 29627 00001BB3 2E892E[8419]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 29628 00001BB8 F8                      	clc				;AN000; indicate found
 29629                                  _$P_KEYorSW_Exit:			;AN000;
 29630 00001BB9 59                      	pop	cx			;AN000;
 29631 00001BBA 5D                      	pop	bp			;AN000;
 29632 00001BBB C3                      	retn				;AN000;
 29633                                   
 29634                                  ;***********************************************************************
 29635                                  ; _$P_MoveBP_NUL
 29636                                  ;***********************************************************************
 29637                                  
 29638                                  _$P_MoveBP_NUL:
 29639                                  _$P_MBP_Loop:				;AN000;
 29640                                  	; 11/12/2022
 29641 00001BBC 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 29642                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 29643                                  	; (SYSINIT:18DBh)
 29644                                   	;cmp     byte [es:bp+0],0
 29645 00001BC1 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 29646                                  
 29647 00001BC3 45                      	inc	bp			;AN000; until
 29648 00001BC4 EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 29649                                  
 29650                                  _$P_MBP_Exit:				;AN000;
 29651 00001BC6 45                      	inc	bp			;AN000; bp points to next to NULL
 29652 00001BC7 C3                      	retn				;AN000;
 29653                                  
 29654                                  ;***********************************************************************
 29655                                  ; _$P_Chk_SW_Control
 29656                                  ;
 29657                                  ; Function: Parse CONTROL block for a switch
 29658                                  ;
 29659                                  ; Input:     ES:BX -> CONTROL block
 29660                                  ;	     cs:SI -> _$P_STRING_BUF
 29661                                  ;
 29662                                  ; Output:    CY = 1 : not match
 29663                                  ;
 29664                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 29665                                  ;
 29666                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 29667                                  ;***********************************************************************
 29668                                  
 29669                                  _$P_Chk_SW_Control:
 29670                                  
 29671                                  ;IF SwSW				;AN000;(Check if switch is supported)
 29672                                  	;or	byte [cs:_$P_Flags+1],10h
 29673 00001BC8 2E800E[7D19]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 29674 00001BCE E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 29675 00001BD1 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 29676                                  
 29677                                  	;and	[cs:_$P_Flags+],0EFh
 29678 00001BD3 2E8026[7D19]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 29679                                  					;AC034; reset the indicator previously set
 29680 00001BD9 50                      	push	ax			;AN000; 	      /switch:
 29681 00001BDA 2EA1[8019]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 29682 00001BDE 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 29683 00001BE0 2E0106[7E19]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 29684 00001BE5 58                      	pop	ax			;AN000;
 29685                                  
 29686 00001BE6 2E8B36[8019]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 29687 00001BEB 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 29688 00001BEF 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 29689                                  
 29690 00001BF1 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 29691 00001BF6 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 29692                                  
 29693 00001BF8 2EC706[7119]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 29694 00001BFF EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 29695                                  
 29696                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 29697                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 29698 00001C01 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 29699 00001C05 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 29700                                  
 29701                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 29702                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 29703                                  	;test	word [es:bx],1
 29704                                  	; 12/12/2022
 29705                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 29706 00001C07 26F60701                	test	byte [es:bx],_$P_Optional
 29707 00001C0B 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 29708                                  
 29709 00001C0D 2EC706[7119]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 29710 00001C14 EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 29711                                  
 29712                                  _$P_CSW00:				;AN000;
 29713 00001C16 E88F00                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 29714 00001C19 F8                      	clc				;AN000; indicate match
 29715                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 29716                                  	; 12/12/2022
 29717 00001C1A C3                      	retn
 29718                                  
 29719                                  _$P_Chk_SW_Err0: 			;AN000;
 29720 00001C1B F9                      	stc				;AN000; not found in switch synonym list
 29721                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 29722                                  	; 12/12/2022
 29723 00001C1C C3                      	retn	
 29724                                  
 29725                                  _$P_Chk_SW_Exit: 			;AN000;
 29726 00001C1D 50                      	push	ax			;AN000;
 29727                                  	;mov	al,_$P_String		;AN000;
 29728                                  	;mov	ah,_$P_No_Tag		;AN000;
 29729                                  	; 07/07/2023
 29730 00001C1E B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 29731 00001C21 E80300                  	call	_$P_Fill_Result		;AN000; set result buffer
 29732 00001C24 58                      	pop	ax			;AN000;
 29733 00001C25 F8                      	clc				;AN000;
 29734                                  _$P_Chk_SW_Single_Exit:			;AN000;
 29735 00001C26 C3                      	retn				;AN000;
 29736                                  ;ELSE					;AN000;(of IF SwSW)
 29737                                  ;	stc				;AN000; this logic works when the SwSW
 29738                                  ;	retn				;AN000; is reset.
 29739                                  
 29740                                  ;***********************************************************************
 29741                                  ; _$P_Fill_Result
 29742                                  ;
 29743                                  ; Function: Fill the result buffer
 29744                                  ;
 29745                                  ; Input:    AH = Item tag
 29746                                  ;	    AL = type
 29747                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 29748                                  ;		  AL = 2: DX has index(offset) into value list
 29749                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 29750                                  ;		  AL = 7: DX has year, CL has month and CH has date
 29751                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 29752                                  ;			  amd CH has hundredths
 29753                                  ;		  AL = else: cs:SI points to returned string buffer
 29754                                  ;	    ES:BX -> CONTROL block
 29755                                  ;
 29756                                  ; Output:   None
 29757                                  ;
 29758                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 29759                                  ;
 29760                                  ; Vars: _$P_DX(W)
 29761                                  ;***********************************************************************
 29762                                  
 29763                                  _$P_Fill_Result:
 29764 00001C27 57                      	push	di			;AN000;
 29765 00001C28 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 29766                                  					;AN000; di points to result buffer
 29767 00001C2C 2E893E[7519]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 29768                                  	;mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 29769                                  	;mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 29770                                  	; 07/09/2023
 29771                                  	;mov	[es:di+_$P_Result_Blk.Type], ax
 29772 00001C31 268905                  	mov	[es:di],ax		; store type (al) and item tag (ah)
 29773                                  
 29774 00001C34 50                      	push	ax			;AN000;
 29775 00001C35 2EA1[8419]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 29776 00001C39 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 29777                                  					;AN000;   then set it to the result
 29778 00001C3D 58                      	pop	ax			;AN000;
 29779                                  _$P_RLT04:				;AN000;
 29780 00001C3E 3C01                    	cmp	al,_$P_Number		;AN000; if number
 29781 00001C40 750A                    	jne	short _$P_RLT00		;AN000;
 29782                                  
 29783                                  _$P_RLT02:				;AN000;
 29784 00001C42 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 29785 00001C46 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 29786 00001C4A EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 29787                                  
 29788                                  _$P_RLT00:				;AN000;
 29789 00001C4C 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 29790 00001C4E 7506                    	jne	short _$P_RLT01		;AN000;
 29791                                  
 29792 00001C50 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx 
 29793                                  					;AN000; then store list index
 29794 00001C54 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 29795                                  
 29796                                  _$P_RLT01:				;AN000;
 29797 00001C56 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 29798 00001C58 74E8                    	je	short _$P_RLT02		;AN000;
 29799                                  
 29800 00001C5A 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 29801 00001C5C 74E4                    	je	short _$P_RLT02		;AN000;
 29802                                  
 29803 00001C5E 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 29804 00001C60 7506                    	jne	short _$P_RLT03		;AN000;
 29805                                  
 29806 00001C62 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 29807 00001C66 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 29808                                  
 29809                                  _$P_RLT03:				;AN000;
 29810 00001C68 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 29811 00001C6A 750F                    	jne	short _$P_RLT05		;AN000;
 29812                                  
 29813 00001C6C 2EA1[7E19]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 29814 00001C70 40                      	inc	ax			;AN000; skip left Parentheses
 29815 00001C71 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 29816 00001C75 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 29817 00001C79 EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 29818                                  
 29819                                  _$P_RLT05:				;AN000;
 29820                                  ;------------------------  AL = 3, 5, or 9
 29821 00001C7B 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 29822                                  					;AN000; store offset of STRING_BUF
 29823 00001C7F 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 29824                                  					;AN031; store segment of STRING_BUF
 29825 00001C83 50                      	push	ax			;AN000;
 29826 00001C84 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 29827                                  					;AN000; need CAPS by file table?
 29828 00001C89 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 29829                                  
 29830 00001C8B B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 29831 00001C8D EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 29832                                  
 29833                                  _$P_RLT_CAP00:				;AN000;
 29834 00001C8F 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 29835                                  					;AN000; need CAPS by char table ?
 29836 00001C94 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 29837                                  
 29838 00001C96 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 29839                                  _$P_RLT_CAP02:				;AN000;
 29840 00001C98 E8DF00                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 29841                                  _$P_RLT_CAP01:				;AN000;
 29842 00001C9B 58                      	pop	ax			;AN000;
 29843 00001C9C 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 29844                                  					;AN000; removing colon at end ?
 29845 00001CA1 7403                    	jz	short _$P_RLT_Exit	;AN000;
 29846                                  
 29847 00001CA3 E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 29848                                  _$P_RLT_Exit:				;AN000;
 29849 00001CA6 5F                      	pop	di			;AN000;
 29850 00001CA7 C3                      	retn				;AN000;
 29851                                  
 29852                                  ;***********************************************************************
 29853                                  ; _$P_Check_Match_Flags
 29854                                  ;
 29855                                  ; Function:  Check the mutch_flags and make the exit code and set the
 29856                                  ;	     result buffer
 29857                                  ;
 29858                                  ;	    Check for types in this order:
 29859                                  ;		Complex
 29860                                  ;		Date
 29861                                  ;		Time
 29862                                  ;		Drive
 29863                                  ;		Filespec
 29864                                  ;		Quoted String
 29865                                  ;		Simple String
 29866                                  ;
 29867                                  ; Input:     cs:SI -> _$P_STRING_BUF
 29868                                  ;	     ES:BX -> CONTROL block
 29869                                  ;
 29870                                  ; Output:    None
 29871                                  ;
 29872                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 29873                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 29874                                  ;	     _$P_Drive_Format
 29875                                  ;***********************************************************************
 29876                                  
 29877                                  	; 25/10/2022 - Retro DOS v4.0
 29878                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 29879                                  
 29880                                  	; 14/04/2024 - Retro DOS v5.0
 29881                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1FC3h)
 29882                                  
 29883                                  	; 12/12/2022
 29884                                  _$P_Check_Match_Flags:
 29885 00001CA8 2EC606[141A]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 29886                                  					;AN033;AC034;; clear filespec error flag.
 29887 00001CAE 50                      	push	ax			;AN000;
 29888                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 29889 00001CAF 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 29890 00001CB2 09C0                    	or	ax,ax			;AC035; test ax for zero
 29891 00001CB4 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 29892 00001CB6 50                      	push	ax			;AN000; (tm12)
 29893 00001CB7 53                      	push	bx			;AN000; (tm12)
 29894 00001CB8 52                      	push	dx			;AN000; (tm12)
 29895 00001CB9 57                      	push	di			;AN000; (tm12)
 29896 00001CBA 2EC706[7119]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 29897                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 29898                                  	;mov	al,_$P_String		;AN000; (tm12)
 29899                                  	; 07/07/2023
 29900 00001CC1 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 29901 00001CC4 E860FF                  	call	_$P_Fill_Result		;AN000; (tm12)
 29902 00001CC7 5F                      	pop	di			;AN000; (tm12)
 29903 00001CC8 5A                      	pop	dx			;AN000; (tm12)
 29904 00001CC9 5B                      	pop	bx			;AN000; (tm12)
 29905 00001CCA 58                      	pop	ax			;AN000; (tm12)
 29906                                  	; 12/12/2022
 29907                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 29908                                  	; 12/12/2022
 29909                                  ;_$P_Mat: 				;AN000; (tm12)
 29910                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 29911                                  _$P_Bridge:
 29912 00001CCB EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 29913                                  	
 29914                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29915                                  	; (SYSINIT:19F9h)
 29916                                  	; 12/12/2022
 29917                                  	;nop	; db 90h
 29918                                  
 29919                                  ; 12/12/2022
 29920                                  _$P_Mat:
 29921                                  _$P_Match03:				;AN000;
 29922                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 29923                                  	; 07/07/2023
 29924 00001CCD F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 29925 00001CD0 7412                    	jz	short _$P_Match04	;AN000;
 29926                                  
 29927 00001CD2 2EC706[7119]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29928 00001CD9 E81E01                  	call	_$P_Value		;AN000; do process
 29929 00001CDC 2E833E[7119]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29930 00001CE2 7557                    	jne	short _$P_Match_Exit	;AN000;
 29931                                  _$P_Match04:				;AN000;
 29932                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 29933                                  	; 07/07/2023
 29934 00001CE4 F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 29935 00001CE7 7412                    	jz	short _$P_Match05	;AN000;
 29936                                  
 29937 00001CE9 2EC706[7119]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29938 00001CF0 E8E300                  	call	_$P_SValue		;AN000; do process
 29939 00001CF3 2E833E[7119]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29940 00001CF9 7540                    	jne	short _$P_Match_Exit	;AN000;
 29941                                  _$P_Match05:				;AN000;
 29942                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 29943                                  	; 07/07/2023
 29944 00001CFB F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 29945 00001CFE 7415                    	jz	short _$P_Match06	;AN000;
 29946                                  
 29947 00001D00 2EC706[7119]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29948 00001D07 E8F202                  	call	_$P_File_Format		;AN000; 1st, call file format
 29949 00001D0A E87203                  	call	_$P_Drive_Format	;AN000; check drive format, next
 29950 00001D0D 2E833E[7119]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29951 00001D13 7526                    	jne	short _$P_Match_Exit	;AN000;
 29952                                  _$P_Match06:				;AN000;
 29953                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 29954                                  	; 07/07/2023
 29955 00001D15 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 29956 00001D18 7412                    	jz	short _$P_Match07	;AN000;
 29957                                  
 29958 00001D1A 2EC706[7119]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29959 00001D21 E8D802                  	call	_$P_File_Format		;AN000; do process
 29960 00001D24 2E833E[7119]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29961 00001D2A 750F                    	jne	short _$P_Match_Exit	;AN000;
 29962                                  _$P_Match07:				;AN000;
 29963                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 29964                                  	; 07/07/2023
 29965 00001D2C F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 29966 00001D2F 740A                    	jz	short _$P_Match09	;AN000;
 29967                                  
 29968 00001D31 2EC706[7119]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29969 00001D38 E8BA01                  	call	_$P_Simple_String	;AN000; do process
 29970                                  _$P_Match09:				;AN000;
 29971                                  _$P_Match_Exit:				;AN000;
 29972 00001D3B 2E833E[141A]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 29973 00001D41 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 29974 00001D43 2E833E[7119]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 29975 00001D49 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 29976 00001D4B 2EC706[7119]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 29977                                  _$P_Match2_Exit: 			;AN033;
 29978 00001D52 58                      	pop	ax			;AN000;
 29979 00001D53 C3                      	retn				;AN000;
 29980                                  
 29981                                  ;***********************************************************************
 29982                                  ; _$P_Remove_Colon;
 29983                                  ;
 29984                                  ; Function: Remove colon at end
 29985                                  ;
 29986                                  ; Input:    cs:SI points to string buffer to be examineed
 29987                                  ;
 29988                                  ; Output:   None
 29989                                  ;
 29990                                  ; Use:	_$P_Chk_DBCS
 29991                                  ;***********************************************************************
 29992                                  
 29993                                  _$P_Remove_Colon:
 29994 00001D54 50                      	push	ax			;AN000;
 29995 00001D55 56                      	push	si			;AN000;
 29996                                  _$P_RCOL_Loop:				;AN000;
 29997 00001D56 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 29998 00001D59 08C0                    	or	al,al			;AN000; end of string ?
 29999 00001D5B 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 30000                                  
 30001 00001D5D 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 30002 00001D5F 750D                    	jne	short _$P_RCOL00	;AN000;
 30003                                  
 30004 00001D61 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 30005 00001D66 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 30006                                  
 30007 00001D68 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 30008 00001D6C EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 30009                                  
 30010                                  _$P_RCOL00:				;AN000;
 30011 00001D6E E80E04                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 30012 00001D71 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 30013                                  
 30014 00001D73 46                      	inc	si			;AN000; if yes, skip trailing byte
 30015                                  _$P_RCOL01:				;AN000;
 30016 00001D74 46                      	inc	si			;AN000; si points to next byte
 30017 00001D75 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 30018                                  
 30019                                  _$P_RCOL_Exit:				;AN000;
 30020 00001D77 5E                      	pop	si			;AN000;
 30021 00001D78 58                      	pop	ax			;AN000;
 30022 00001D79 C3                      	retn				;AN000;
 30023                                  
 30024                                  ;***********************************************************************
 30025                                  ; _$P_Do_CAPS_String;
 30026                                  ;
 30027                                  ; Function: Perform capitalization along with the file case map table
 30028                                  ;	    or character case map table.
 30029                                  ;
 30030                                  ; Input:    AL = 2 : Use character table
 30031                                  ;	    AL = 4 : Use file table
 30032                                  ;	    cs:SI points to string buffer to be capitalized
 30033                                  ;
 30034                                  ; Output:   None
 30035                                  ;
 30036                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 30037                                  ;***********************************************************************
 30038                                  
 30039                                  _$P_Do_CAPS_String:
 30040 00001D7A 56                      	push	si			;AN000;
 30041 00001D7B 52                      	push	dx			;AN000;
 30042 00001D7C 88C2                    	mov	dl,al			;AN000; save info id
 30043                                  
 30044                                  _$P_DCS_Loop:				;AN000;
 30045 00001D7E 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 30046 00001D81 E8FB03                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 30047 00001D84 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 30048                                  
 30049 00001D86 08C0                    	or	al,al			;AN000; end of string ?
 30050 00001D88 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 30051                                  
 30052 00001D8A E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 30053 00001D8D 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 30054 00001D90 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 30055                                  _$P_DCS00:				;AN000;
 30056 00001D92 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 30057                                  _$P_DCS01:				;AN000;
 30058 00001D93 46                      	inc	si			;AN000; si point to next byte
 30059 00001D94 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 30060                                  _$P_DCS_Exit:				;AN000;
 30061 00001D96 5A                      	pop	dx			;AN000;
 30062 00001D97 5E                      	pop	si			;AN000;
 30063 00001D98 C3                      	retn
 30064                                  
 30065                                  ;***********************************************************************
 30066                                  ; _$P_Do_CAPS_Char;
 30067                                  ;
 30068                                  ; Function: Perform capitalization along with the file case map table
 30069                                  ;	    or character case map table.
 30070                                  ;
 30071                                  ; Input:    DL = 2 : Use character table
 30072                                  ;	    DL = 4 : Use file table
 30073                                  ;	    AL = character to be capitalized
 30074                                  ;
 30075                                  ; Output:   None
 30076                                  ;
 30077                                  ; Use:	INT 21h /w AH=65h
 30078                                  ;***********************************************************************
 30079                                  
 30080                                  _$P_Do_CAPS_Char:
 30081 00001D99 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 30082 00001D9B 730B                    	jae	short _$P_DCC_Go	;AN000;
 30083                                  
 30084 00001D9D 3C61                    	cmp	al,"a"                  ;AN000; if no,
 30085 00001D9F 7234                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 30086                                  
 30087 00001DA1 3C7A                    	cmp	al,"z"                  ;AN000;
 30088 00001DA3 7730                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 30089                                  
 30090 00001DA5 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 30091                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 30092                                  	; 07/07/2023
 30093 00001DA7 C3                      	retn
 30094                                  
 30095                                  _$P_DCC_Go:				;AN000;
 30096 00001DA8 53                      	push	bx			;AN000;
 30097 00001DA9 06                      	push	es			;AN000;
 30098 00001DAA 57                      	push	di			;AN000;
 30099                                  
 30100                                  	;;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 30101                                  	;lea	di,[_$P_Char_CAP_Ptr]
 30102                                  	; 07/09/2023
 30103 00001DAB BF[061A]                	mov	di,_$P_Char_CAP_Ptr
 30104                                  _$P_DCC00:				;AN000;
 30105 00001DAE 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 30106 00001DB1 7415                    	je	short _$P_DCC01		;AN000; if no,
 30107                                  
 30108                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 30109                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 30110                                  ; call, regardless of what base register is currently be defined as cs.
 30111                                  
 30112 00001DB3 50                      	push	ax			;AN000; get CAPS table thru DOS call
 30113 00001DB4 51                      	push	cx			;AN000;
 30114 00001DB5 52                      	push	dx			;AN000;
 30115                                  
 30116 00001DB6 0E                      	push	cs			;AC036; pass current base seg into
 30117                                  					;(Note: this used to push CS.  BUG...
 30118 00001DB7 07                      	pop	es			;AN000;   ES reg, required for
 30119                                  					;get extended country information
 30120                                  	;mov	al,dl ; function	;AN000; upper case table
 30121                                  	; 07/07/2023
 30122 00001DB8 92                      	xchg	ax,dx
 30123 00001DB9 B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 30124 00001DBB BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 30125 00001DBE B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 30126                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 30127                                  	; 07/07/2023
 30128 00001DC1 89DA                    	mov	dx,bx ; 0FFFFh
 30129                                  					;DI already set to point to buffer
 30130 00001DC3 CD21                    	int	21h			;AN000; es:di point to buffer that
 30131                                  					;now has been filled in with info
 30132 00001DC5 5A                      	pop	dx			;AN000;
 30133 00001DC6 59                      	pop	cx			;AN000;
 30134 00001DC7 58                      	pop	ax			;AN000;
 30135                                  
 30136                                  _$P_DCC01:				;AN000;
 30137                                  
 30138                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 30139                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 30140                                  ; regardless of which base reg is currently the cs reg.
 30141                                  
 30142                                  	; 14/04/2024
 30143                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 30144                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 30145                                  	; 07/07/2023
 30146 00001DC8 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 30147 00001DCC 43                      	inc	bx			;AC035; add '2' to
 30148 00001DCD 43                      	inc	bx			;AC035;  BX reg
 30149                                  					;AN000; skip length field
 30150 00001DCE 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 30151                                  	;xlat	es:[bx] 		;AN000; perform case map
 30152 00001DD0 26                      	es
 30153 00001DD1 D7                      	xlat
 30154 00001DD2 5F                      	pop	di			;AN000;
 30155 00001DD3 07                      	pop	es			;AN000;
 30156 00001DD4 5B                      	pop	bx			;AN000;
 30157                                  _$P_CAPS_Ret:				;AN000;
 30158 00001DD5 C3                      	retn				;AN000;
 30159                                  
 30160                                  ;***********************************************************************
 30161                                  ; _$P_Value / _$P_SValue
 30162                                  ;
 30163                                  ; Function:  Make 32bit value from cs:SI and see value list
 30164                                  ;	     and make result buffer.
 30165                                  ;	     _$P_SValue is an entry point for the signed value
 30166                                  ;	     and this will simply call _$P_Value after the handling
 30167                                  ;	     of the sign character, "+" or "-"
 30168                                  ;
 30169                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30170                                  ;	     ES:BX -> CONTROL block
 30171                                  ;
 30172                                  ; Output:    None
 30173                                  ;
 30174                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 30175                                  ;
 30176                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 30177                                  ;***********************************************************************
 30178                                  
 30179                                  	; 26/10/2022 - Retro DOS v4.0
 30180                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 30181                                  
 30182                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30183                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C46h)  	
 30184                                  _$P_SValue:				;AN000; when signed value here
 30185 00001DD6 50                      	push	ax			;AN000;
 30186 00001DD7 2E800E[7D19]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 30187 00001DDD 2E8026[7D19]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 30188                                  	;and	byte [cs:_$P_Flags2],~_$P_Neg ; 07/07/2023 
 30189 00001DE3 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 30190 00001DE6 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 30191 00001DE8 740A                    	je	short _$P_SVal00	;AN000;
 30192                                  
 30193 00001DEA 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 30194 00001DEC 7507                    	jne	short _$P_Sval01	;AN000; else
 30195                                  
 30196 00001DEE 2E800E[7D19]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 30197                                  _$P_SVal00:				;AN000;
 30198 00001DF4 46                      	inc	si			;AN000; skip sign char
 30199                                  _$P_Sval01:				;AN000;
 30200 00001DF5 E80200                  	call	_$P_Value		;AN000; and process value
 30201 00001DF8 58                      	pop	ax			;AN000;
 30202 00001DF9 C3                      	retn
 30203                                  
 30204                                  ;***********************************************************************
 30205                                  
 30206                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30207                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C6Ah)
 30208                                  
 30209                                  	; 26/10/2022
 30210                                  _$P_Value:				;AN000;
 30211 00001DFA 50                      	push	ax			;AN000;
 30212 00001DFB 51                      	push	cx			;AN000;
 30213 00001DFC 52                      	push	dx			;AN000;
 30214 00001DFD 56                      	push	si			;AN000;
 30215 00001DFE 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 30216 00001E00 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 30217 00001E02 53                      	push	bx			;AN000; save control pointer
 30218                                  _$P_Value_Loop:				;AN000;
 30219 00001E03 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 30220 00001E06 08C0                    	or	al,al			;AN000; end of line ?
 30221 00001E08 7438                    	jz	short _$P_Value00	;AN000;
 30222                                  
 30223 00001E0A E8DC00                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 30224 00001E0D 722F                    	jc	short _$P_Value_Err0	;AN000;
 30225                                  
 30226 00001E0F 30E4                    	xor	ah,ah			;AN000;
 30227 00001E11 89C5                    	mov	bp,ax			;AN000; save binary number
 30228                                  
 30229                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30230                                  ; Ref: Disassembled PCDOS 7.1 IBMBIO.COM SYSINIT code
 30231                                  ;				Erdogan Tan - July 2023
 30232                                  %if 0
 30233                                  	shl	dx,1			;AN000; to have 2*x
 30234                                  	rcl	cx,1			;AN000; shift left w/ carry
 30235                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 30236                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 30237                                  
 30238                                  	mov	bx,dx			;AN000; save low(2*x)
 30239                                  	mov	ax,cx			;AN000; save high(2*x)
 30240                                  	shl	dx,1			;AN000; to have 4*x
 30241                                  	rcl	cx,1			;AN000; shift left w/ carry
 30242                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 30243                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 30244                                  
 30245                                  	shl	dx,1			;AN000; to have 8*x
 30246                                  	rcl	cx,1			;AN000; shift left w/ carry
 30247                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 30248                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 30249                                  
 30250                                  	add	dx,bx			;AN000; now have 10*x
 30251                                  	adc	cx,ax			;AN000; 32bit ADD
 30252                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 30253                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 30254                                  
 30255                                  	add	dx,bp			;AN000; Add the current one degree decimal
 30256                                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 30257                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 30258                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 30259                                  
 30260                                  	inc	si			;AN000; update pointer
 30261                                  	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 30262                                  ;_$P_Value_Err0:
 30263                                  %endif
 30264                                  ;****
 30265                                  %if 1
 30266                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30267                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2130h)
 30268                                  
 30269                                  	; 14/04/2024 - Retro DOS v5.0
 30270                                  	;xor	ah,ah
 30271                                  	;mov	bp,ax			; save binary number
 30272                                  	
 30273 00001E13 E81C00                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 30274 00001E16 89D3                    	mov	bx,dx			; ax:bx = 2*(cx:dx)
 30275 00001E18 89C8                    	mov	ax,cx
 30276 00001E1A E81500                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 30277 00001E1D E81200                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 30278 00001E20 01DA                    	add	dx,bx			; 8*(cx:dx)+2*(cx:dx) = 10*(cx:dx)
 30279 00001E22 11C1                    	adc	cx,ax
 30280 00001E24 E80F00                  	call	_$P_Value_Chk_Add_OVF
 30281 00001E27 01EA                    	add	dx,bp			; Add the current one degree decimal
 30282                                  					; if carry, add 1 to high 16bit
 30283 00001E29 83D100                  	adc	cx,0
 30284 00001E2C E80700                  	call	_$P_Value_Chk_Add_OVF	; Overflow occurred ?
 30285                                  					; then error, exit (without return here)
 30286 00001E2F 46                      	inc	si			; update pointer
 30287 00001E30 EBD1                    	jmp	short _$P_Value_Loop
 30288                                  
 30289                                  _$P_Value_2x_OVF:
 30290 00001E32 D1E2                    	shl	dx,1 			; to have 2*x
 30291 00001E34 D1D1                    	rcl	cx,1			; shift left w/ carry
 30292                                  _$P_Value_Chk_Add_OVF:
 30293 00001E36 E89E00                  	call	_$P_Check_OVF		; check overflow (for the last shift or add)
 30294 00001E39 7201                    	jc	short _$P_Value_OVF
 30295 00001E3B C3                      	retn
 30296                                  _$P_Value_OVF:
 30297 00001E3C 44                      	inc	sp 			; skip "call" return address to the caller
 30298 00001E3D 44                      	inc	sp
 30299                                  
 30300                                  ;_$P_Value_Err0:	
 30301                                  %endif
 30302                                  ;****
 30303                                  
 30304                                  _$P_Value_Err0:				;AN000;
 30305 00001E3E 5B                      	pop	bx			;AN000;
 30306 00001E3F E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 30307                                  ;
 30308                                  _$P_Value00:				;AN000;
 30309 00001E42 5B                      	pop	bx			;AN000; restore control pointer
 30310 00001E43 2EF606[7D19]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 30311 00001E49 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 30312                                  
 30313 00001E4B F7D1                    	not	cx			;AN000; +
 30314 00001E4D F7D2                    	not	dx			;AN000; |- Make 2's complement
 30315 00001E4F 83C201                  	add	dx,1			;AN000; |
 30316 00001E52 83D100                  	adc	cx,0			;AN000; +
 30317                                  
 30318                                  _$P_Value01:				;AN000; / nval = 0
 30319 00001E55 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 30320 00001E59 268A04                  	mov	al,[es:si]		;AN000; get nval
 30321                                  	; 07/09/2023
 30322                                  	;cmp	al,_$P_nval_None ; 0	;AN000; no value list ?
 30323                                  	;;*jne	short _$P_Value02	;AN000;
 30324                                  	;;* 07/07/2023
 30325                                  	;je	short _$P_Value05
 30326                                  	; 07/09/2023
 30327 00001E5C 08C0                    	or	al,al
 30328 00001E5E 7459                    	jz	short _$P_Value05 ; _$P_nval_None
 30329                                  
 30330                                  	;mov	al,_$P_Number		;AN000; Set type
 30331                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30332                                  	; 07/07/2023
 30333                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 30334                                  	;*jmp	short _$P_Value_Exit	;AN000;
 30335                                  
 30336                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 30337                                  	; (SYSINIT:1BA5h)
 30338                                  	; 12/12/2022
 30339                                  	;nop	; db  90h
 30340                                  
 30341                                  _$P_Value02:				;AN000; / nval = 1
 30342                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 30343                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 30344                                  ;(tm07) jne	short _$P_Value03	;AN000;
 30345                                  
 30346 00001E60 46                      	inc	si			;AN000;
 30347 00001E61 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 30348                                  	
 30349                                  	; 07/09/2023
 30350                                  	;cmp	al,_$P_No_nrng		;AN000; (tm07)
 30351                                  	;je	short _$P_Value03	;AN000; (tm07)
 30352 00001E64 08C0                    	or	al,al
 30353 00001E66 745D                    	jz	short _$P_Value03 ; _$P_No_nrng
 30354                                  
 30355 00001E68 46                      	inc	si			;AN000; si points to 1st item_tag
 30356                                  _$P_Val02_Loop:				;AN000;
 30357 00001E69 2EF606[7D19]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 30358 00001E6F 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 30359                                  
 30360 00001E71 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 30361 00001E75 7234                    	jb	short _$P_Val02_Next	;AN000;
 30362 00001E77 7706                    	ja	short _$P_Val_In	;AN000;
 30363                                  
 30364 00001E79 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 30365 00001E7D 722C                    	jb	short _$P_Val02_Next	;AN000;
 30366                                  
 30367                                  _$P_Val_In:				;AN000;
 30368 00001E7F 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 30369 00001E83 7726                    	ja	short _$P_Val02_Next	;AN000;
 30370 00001E85 7237                    	jb	short _$P_Val_Found	;AN000;
 30371                                  
 30372 00001E87 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 30373 00001E8B 771E                    	ja	short _$P_Val02_Next	;AN000;
 30374                                  
 30375 00001E8D EB2F                    	jmp	short _$P_Val_Found	;AN000;
 30376                                  
 30377                                  _$P_Val02_Sign:				;AN000;
 30378 00001E8F 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 30379 00001E93 7C16                    	jl	short _$P_Val02_Next	;AN000;
 30380 00001E95 7F06                    	jg	short _$P_SVal_In	;AN000;
 30381                                  
 30382 00001E97 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 30383 00001E9B 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 30384                                  
 30385                                  _$P_SVal_In:				;AN000;
 30386 00001E9D 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 30387 00001EA1 7F08                    	jg	short _$P_Val02_Next	;AN000;
 30388                                  
 30389 00001EA3 7C19                    	jl	short _$P_Val_Found	;AN000;
 30390                                  
 30391 00001EA5 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 30392                                  	;jg	short _$P_Val02_Next	;AN000;
 30393                                  	;jmp	short _$P_Val_Found	;AN000;
 30394                                  	; 07/07/2023
 30395 00001EA9 7E13                    	jng	short _$P_Val_Found
 30396                                  
 30397                                  _$P_Val02_Next:				;AN000;
 30398 00001EAB 83C609                  	add	si,_$P_Len_Range 	;AN000;
 30399 00001EAE FEC8                    	dec	al			;AN000; loop nrng times in AL
 30400 00001EB0 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 30401                                  					; / Not found
 30402 00001EB2 2EC706[7119]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 30403                                  	;mov	al,_$P_Number		;AN000;
 30404                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30405                                  _$P_Value05:		;* 07/07/2023
 30406                                  	; 07/07/2023
 30407 00001EB9 B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 30408 00001EBC EB11                    	jmp	short _$P_Value_Exit	;AN000;
 30409                                  
 30410                                  _$P_Val_Found:				;AN000;
 30411 00001EBE B001                    	mov	al,_$P_Number		;AN000;
 30412 00001EC0 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 30413 00001EC3 EB0A                    	jmp	short _$P_Value_Exit	;AN000;
 30414                                  
 30415                                  _$P_Value03:				;AN000; / nval = 2
 30416                                  
 30417                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 30418                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 30419                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 30420                                  ;(tm07) inc	si			;AN000;
 30421                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 30422                                  ;	mov	ah,$P_Len_Range 	;AN000;
 30423                                  ;	mul	ah			;AN000;  Skip nrng field
 30424                                  ;	inc	ax			;AN000;
 30425                                  ;	add	si,ax			;AN000; si points to nnval
 30426                                  ;	mov	al,es:[si]		;AN000; get nnval
 30427                                  ;	inc	si			;AN000; si points to 1st item_tag
 30428                                  ;$P_Val03_Loop:				;AN000;
 30429                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 30430                                  ;	jne	$P_Val03_Next		;AN000;
 30431                                  ;
 30432                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 30433                                  ;	je	$P_Val_Found		;AN000;
 30434                                  ;
 30435                                  ;$P_Val03_Next:				;AN000;
 30436                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 30437                                  ;	dec	al			;AN000; loop nval times in AL
 30438                                  ;	jne	$P_Val03_Loop		;AN000;
 30439                                  ;					;AN000; / Not found
 30440                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 30441                                  ;	mov	al,$P_Number		;AN000;
 30442                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 30443                                  ;	jmp	short $P_Value_Exit	;AN000;
 30444                                  ;
 30445                                  ;ENDIF					;AN000;(of Val2SW)
 30446                                  ;$P_Value04:
 30447                                  
 30448                                  _$P_Value_Err:				;AN000;
 30449 00001EC5 2EC706[7119]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 30450                                  	;mov	al,_$P_String		;AN000; Set type
 30451                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30452                                  	; 07/09/2023
 30453                                  	; 07/07/2023
 30454 00001ECC B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 30455                                  _$P_Value_Exit:				;AN000;
 30456 00001ECF E855FD                  	call	_$P_Fill_Result		;AN000;
 30457 00001ED2 5E                      	pop	si			;AN000;
 30458 00001ED3 5A                      	pop	dx			;AN000;
 30459 00001ED4 59                      	pop	cx			;AN000;
 30460 00001ED5 58                      	pop	ax			;AN000;
 30461 00001ED6 C3                      	retn				;AN000;
 30462                                  
 30463                                  ; 28/03/2019 - Retro DOS v4.0
 30464                                  
 30465                                  ;***********************************************************************
 30466                                  ; _$P_Check_OVF
 30467                                  ;
 30468                                  ; Function:  Check if overflow is occurred with consideration of
 30469                                  ;	     signed or un-signed numeric value
 30470                                  ;
 30471                                  ; Input:     Flag register
 30472                                  ;
 30473                                  ; Output:    CY = 1  :	Overflow
 30474                                  ;
 30475                                  ; Vars:     _$P_Flags(R)
 30476                                  ;***********************************************************************
 30477                                  
 30478                                  	; 26/10/2022
 30479                                  _$P_Check_OVF:
 30480 00001ED7 9C                      	pushf				;AN000;
 30481 00001ED8 2EF606[7D19]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 30482 00001EDE 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 30483                                  
 30484 00001EE0 9D                      	popf				;AN000; by the CY bit
 30485 00001EE1 C3                      	retn				;AN000;
 30486                                  
 30487                                  _$P_COVF:				;AN000;
 30488 00001EE2 9D                      	popf				;AN000; else,
 30489 00001EE3 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 30490                                  
 30491 00001EE5 F8                      	clc				;AN000; indicate it with CY bit
 30492 00001EE6 C3                      	retn				;AN000; CY=0 means no overflow
 30493                                  
 30494                                  _$P_COVF00:				;AN000;
 30495 00001EE7 F9                      	stc				;AN000; and CY=1 means overflow
 30496 00001EE8 C3                      	retn				;AN000;
 30497                                  
 30498                                  ;***********************************************************************
 30499                                  ; _$P_0099;
 30500                                  ;
 30501                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 30502                                  ;
 30503                                  ; Input:     AL = character code
 30504                                  ;
 30505                                  ; Output:    CY = 1 : AL is not number
 30506                                  ;	     CY = 0 : AL contains binary value
 30507                                  ;***********************************************************************
 30508                                  
 30509                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30510                                  %if 0
 30511                                  _$P_0099:
 30512                                  	cmp	al,"0"                  ;AN000;
 30513                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 30514                                  	; 12/12/2022
 30515                                  	jb	short _$P_0099Err2  ; cf=1
 30516                                  
 30517                                  	cmp	al,"9"                  ;AN000;
 30518                                  	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 30519                                  
 30520                                  	sub	al,"0"                  ;AN000; make char -> bin
 30521                                  	; 12/12/2022
 30522                                  	; cf=0	
 30523                                  	;clc				;AN000; indicate no error
 30524                                  	retn				;AN000;
 30525                                  
 30526                                  _$P_0099Err:				;AN000;
 30527                                  	stc				;AN000; indicate error
 30528                                  _$P_0099Err2: ; 12/12/2022	
 30529                                  	retn				;AN000;
 30530                                  %endif
 30531                                  
 30532                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30533                                  %if 1
 30534                                  _$P_0099:
 30535 00001EE9 3C30                    	cmp	al,"0"                  ; cmp al,30h
 30536 00001EEB 7207                    	jb	short _$P_0099Err	; must be 0 =< al =< 9
 30537 00001EED 3C3A                    	cmp	al,"9"+1                ; cmp al,3Ah  
 30538 00001EEF F5                      	cmc				; cf=0 -> cf=1
 30539 00001EF0 7202                    	jb	short _$P_0099Err
 30540 00001EF2 2C30                    	sub	al,"0"	; sub al,30h 	; make char -> bin
 30541                                  	; cf=0
 30542                                  _$P_0099Err:	; cf=1
 30543 00001EF4 C3                      	retn
 30544                                  %endif
 30545                                  
 30546                                  ;***********************************************************************
 30547                                  ; _$P_Simple_String
 30548                                  ;
 30549                                  ; Function:  See value list for the simple string
 30550                                  ;	     and make result buffer.
 30551                                  ;
 30552                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30553                                  ;	     ES:BX -> CONTROL block
 30554                                  ;
 30555                                  ; Output:    None
 30556                                  ;
 30557                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 30558                                  ;
 30559                                  ; Vars: _$P_RC(W)
 30560                                  ;***********************************************************************
 30561                                  
 30562                                  _$P_Simple_String:
 30563 00001EF5 50                      	push	ax			;AN000;
 30564 00001EF6 53                      	push	bx			;AN000;
 30565 00001EF7 52                      	push	dx			;AN000;
 30566 00001EF8 57                      	push	di			;AN000;
 30567 00001EF9 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 30568 00001EFD 268A05                  	mov	al,[es:di]		;AN000; get nval
 30569 00001F00 08C0                    	or	al,al			;AN000; no value list ?
 30570 00001F02 7504                    	jnz	short _$P_Sim00		;AN000; then
 30571                                  
 30572 00001F04 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30573 00001F06 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 30574                                  
 30575                                  _$P_Sim00:				;AN000;
 30576                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 30577 00001F08 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 30578 00001F0A 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 30579                                  
 30580 00001F0C 47                      	inc	di			;AN000;
 30581 00001F0D 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 30582 00001F10 B409                    	mov	ah,_$P_Len_Range 	;AN000;
 30583 00001F12 F6E4                    	mul	ah			;AN000; Skip nrng field
 30584 00001F14 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 30585 00001F15 01C7                    	add	di,ax			;AN000; di points to nnval
 30586 00001F17 268A05                  	mov	al,[es:di]		;AN000; get nnval
 30587 00001F1A B405                    	mov	ah,_$P_Len_Value 	;AN000;
 30588 00001F1C F6E4                    	mul	ah			;AN000; Skip nnval field
 30589 00001F1E 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 30590 00001F1F 01C7                    	add	di,ax			;AN000; di points to nstrval
 30591 00001F21 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 30592 00001F24 47                      	inc	di			;AC035; add '2' to
 30593 00001F25 47                      	inc	di			;AC035;  DI reg
 30594                                  					;AN000; di points to 1st string in list
 30595                                  _$P_Sim_Loop:				;AN000;
 30596 00001F26 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 30597 00001F29 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 30598 00001F2C 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 30599                                  
 30600 00001F2E 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 30601 00001F31 FEC8                    	dec	al			;AN000; loop nstval times in AL
 30602 00001F33 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 30603                                  					;AN000; / Not found
 30604 00001F35 2EC706[7119]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 30605 00001F3C B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30606 00001F3E EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 30607                                  
 30608                                  _$P_Sim_Found:				;AN000;
 30609 00001F40 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 30610 00001F44 B002                    	mov	al,_$P_List_Idx		;AN000;
 30611 00001F46 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 30612 00001F49 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 30613                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 30614                                  _$P_Sim01:				;AN000;
 30615 00001F4B 2EC706[7119]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 30616 00001F52 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30617                                  _$P_Sim_Exit:				;AN000;
 30618 00001F54 B003                    	mov	al,_$P_String		;AN000; Set type
 30619                                  _$P_Sim_Exit0:				;AN000;
 30620 00001F56 E8CEFC                  	call	_$P_Fill_Result		;AN000;
 30621 00001F59 5F                      	pop	di			;AN000;
 30622 00001F5A 5A                      	pop	dx			;AN000;
 30623 00001F5B 5B                      	pop	bx			;AN000;
 30624 00001F5C 58                      	pop	ax			;AN000;
 30625 00001F5D C3                      	retn				;AN000;
 30626                                  
 30627                                  ;***********************************************************************
 30628                                  ; _$P_String_Comp:
 30629                                  ;
 30630                                  ; Function:  Compare two string
 30631                                  ;
 30632                                  ; Input:     cs:SI -> 1st string
 30633                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 30634                                  ;	     ES:BX -> CONTROL block
 30635                                  ;
 30636                                  ; Output:    CY = 1 if not match
 30637                                  ;
 30638                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 30639                                  ;
 30640                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 30641                                  ;***********************************************************************
 30642                                  
 30643                                  _$P_String_Comp:
 30644 00001F5E 50                      	push	ax			;AN000;
 30645 00001F5F 55                      	push	bp			;AN000;
 30646 00001F60 52                      	push	dx			;AN000;
 30647 00001F61 56                      	push	si			;AN000;
 30648 00001F62 B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 30649                                  _$P_SCOM_Loop:				;AN000;
 30650 00001F64 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 30651 00001F67 E81502                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 30652 00001F6A 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 30653                                  
 30654 00001F6C E82AFE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 30655                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 30656 00001F6F 2EF606[7D19]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 30657 00001F75 740D                    	jz	short _$P_SCOM04	;AN000;
 30658                                  
 30659 00001F77 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 30660 00001F79 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 30661                                  
 30662 00001F7B 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 30663 00001F80 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 30664                                  
 30665 00001F82 EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 30666                                  
 30667                                  _$P_SCOM04:				;AN000;
 30668 00001F84 2EF606[7D19]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 30669 00001F8A 740E                    	jz	short _$P_SCOM03	;AN000;
 30670                                  
 30671 00001F8C 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 30672 00001F8E 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 30673                                  
 30674                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30675                                  	;cmp	byte [es:bp+0],_$P_NULL
 30676                                  	; 11/12/2022
 30677 00001F90 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 30678 00001F95 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 30679                                  
 30680                                  _$P_SCOM05:				;AN000;   found a match
 30681 00001F97 46                      	inc	si			;AN000; si points to just after "=" or ":"
 30682 00001F98 EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 30683                                  
 30684                                  _$P_SCOM03:				;AN000;
 30685                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 30686                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30687                                  	;cmp	al,[es:bp+0]
 30688                                  	; 11/12/2022
 30689 00001F9A 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 30690 00001F9E 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 30691                                  
 30692 00001FA0 08C0                    	or	al,al			;AN000; end of line
 30693 00001FA2 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 30694                                  
 30695                                  	; 12/12/2022
 30696                                  	;inc	si			;AN000; update operand pointer
 30697                                  	;inc	bp			;AN000;    and synonym pointer
 30698                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30699 00001FA4 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 30700                                  
 30701                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 30702                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30703                                  	;cmp	al,[es:bp+0]
 30704                                  	; 11/12/2022
 30705 00001FA6 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 30706 00001FAA 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 30707                                  
 30708 00001FAC 46                      	inc	si			;AN000; else, load next byte
 30709 00001FAD 2E8A04                  	mov	al,[cs:si]		;AN000; and
 30710 00001FB0 45                      	inc	bp			;AN000;
 30711                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30712                                  	;cmp	al,[es:bp+0]
 30713                                  	; 11/12/2022
 30714 00001FB1 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 30715 00001FB5 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 30716                                  
 30717                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30718                                  	; 12/12/2022
 30719                                  _$P_SCOM01:
 30720 00001FB7 46                      	inc	si			;AN000; else update operand pointer
 30721 00001FB8 45                      	inc	bp			;AN000; 		and synonym pointer
 30722                                  ;_$P_SCOM01:				;AN000;
 30723 00001FB9 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 30724                                  
 30725                                  _$P_SCOM_Differ0:			;AN000;
 30726                                  ;IF SwSW				;AN000;(tm10)
 30727 00001FBB 2EF606[7D19]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 30728 00001FC1 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 30729                                  
 30730                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30731                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 30732                                  	; 12/12/2022
 30733 00001FC3 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 30734 00001FC8 7407                    	jz	short _$P_not_applicable ;AN000;(tm10)
 30735                                  
 30736                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30737                                  	;cmp	byte [es:bp+0],_$P_NULL
 30738                                  	; 11/12/2022
 30739 00001FCA 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 30740                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 30741 00001FCF 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 30742                                  
 30743                                  _$P_not_applicable:			;AN000;(tm10)
 30744                                  ;ENDIF					;AN000;(tm10)
 30745                                  
 30746                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 30747                                  					;AN000; ignore colon option specified ?
 30748                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 30749                                  	; 12/12/2022
 30750 00001FD1 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 30751                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30752                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 30753 00001FD5 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 30754                                  
 30755 00001FD7 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 30756 00001FD9 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 30757                                  
 30758                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30759                                  	;cmp	byte [es:bp+0],_$P_NULL
 30760                                  	; 11/12/2022
 30761 00001FDB 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 30762 00001FE0 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 30763                                  
 30764 00001FE2 EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 30765                                  
 30766                                  _$P_SCOM02:				;AN000;
 30767 00001FE4 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 30768 00001FE6 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 30769                                  
 30770                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30771                                  	;cmp	byte [es:bp+0],_$P_Colon
 30772                                  	; 11/12/2022
 30773 00001FE8 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 30774 00001FED 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 30775                                  
 30776                                  _$P_SCOM_Differ: 			;AN000;
 30777 00001FEF F9                      	stc				;AN000; indicate not found
 30778 00001FF0 EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 30779                                  
 30780                                  _$P_SCOM_Same:				;AN000;
 30781                                  	; 12/12/2022
 30782                                  	; cf=0
 30783 00001FF2 2E8936[8019]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 30784                                  	; 12/12/2022
 30785                                  	;clc				;AN000; indicate found
 30786                                  _$P_SCOM_Exit:				;AN000;
 30787 00001FF7 5E                      	pop	si			;AN000;
 30788 00001FF8 5A                      	pop	dx			;AN000;
 30789 00001FF9 5D                      	pop	bp			;AN000;
 30790 00001FFA 58                      	pop	ax			;AN000;
 30791 00001FFB C3                      	retn
 30792                                  
 30793                                  ; 30/03/2019
 30794                                  
 30795                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 30796                                  
 30797                                  ;***********************************************************************
 30798                                  ; _$P_File_Format;
 30799                                  ;
 30800                                  ; Function:  Check if the input string is valid file spec format.
 30801                                  ;	     And set the result buffer.
 30802                                  ;
 30803                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30804                                  ;	     ES:BX -> CONTROL block
 30805                                  ;
 30806                                  ; Output:    None
 30807                                  ;
 30808                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 30809                                  ;
 30810                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 30811                                  ;	_$P_SaveSI_Cmpx(R)
 30812                                  ;***********************************************************************
 30813                                  
 30814                                  _$P_File_Format:
 30815 00001FFC 50                      	push	ax			;AN000;
 30816 00001FFD 57                      	push	di			;AN000;
 30817 00001FFE 56                      	push	si			;AN000;
 30818 00001FFF 2E8B3E[7E19]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 30819                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 30820 00002004 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 30821 00002007 08C0                    	or	al,al			;AN000; end of line ?
 30822 00002009 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 30823                                  
 30824 0000200B E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 30825 0000200E 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 30826                                  
 30827 00002010 2EC606[141A]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 30828                                  					;AN033;AC034;; set error flag- bad char.
 30829 00002016 5E                      	pop	si			;AN033;
 30830 00002017 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 30831 0000201B 5F                      	pop	di			;AN033;
 30832 0000201C EB3E                    	jmp	short _$P_FileF02	;AN033;
 30833                                  
 30834                                  _$P_FileF_Err:				;AN000;
 30835 0000201E 5E                      	pop	si			;AN000;
 30836 0000201F 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 30837 00002023 5F                      	pop	di			;AN000;
 30838                                  
 30839                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 30840                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 30841                                  	; 12/12/2022
 30842 00002024 26F60701                	test	byte [es:bx],_$P_Optional
 30843                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30844                                  	;test	word [es:bx],_$P_Optional
 30845 00002028 7532                    	jnz	short _$P_FileF02	;AN000;
 30846                                  
 30847 0000202A 2EC706[7119]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 30848 00002031 EB29                    	jmp	short _$P_FileF02	;AN000;
 30849                                  
 30850                                  _$P_FileF03:				;AN000;
 30851 00002033 58                      	pop	ax			;AN000; discard save si
 30852 00002034 56                      	push	si			;AN000; save new si
 30853                                  _$P_FileF_Loop1: 			;AN000;
 30854 00002035 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 30855 00002038 08C0                    	or	al,al			;AN000; end of line ?
 30856 0000203A 741E                    	jz	short _$P_FileF_RLT	;AN000;
 30857                                  
 30858 0000203C E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 30859 0000203F 740B                    	je	short _$P_FileF00	;AN000;
 30860                                  
 30861 00002041 E83B01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 30862 00002044 7302                    	jnc	short _$P_FileF01	;AN000;
 30863 00002046 47                      	inc	di			;AN000; if yes, skip next byte
 30864 00002047 46                      	inc	si			;AN000;
 30865                                  _$P_FileF01:				;AN000;
 30866 00002048 47                      	inc	di			;AN000;
 30867 00002049 46                      	inc	si			;AN000;
 30868 0000204A EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 30869                                  ;
 30870                                  _$P_FileF00:				;AN000;
 30871 0000204C 2EA2[7719]              	mov	[cs:_$P_Terminator],al	;AC034;
 30872 00002050 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 30873 00002054 47                      	inc	di			;AN000;
 30874 00002055 2E893E[7319]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 30875                                  _$P_FileF_RLT:				;AN000;
 30876 0000205A 5E                      	pop	si			;AN000;
 30877 0000205B 5F                      	pop	di			;AN000;
 30878                                  _$P_FileF02:				;AN000;
 30879 0000205C 58                      	pop	ax			;AN000; (tm14)
 30880                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 30881                                  	; 08/07/2023
 30882 0000205D F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 30883 00002060 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 30884                                  
 30885 00002062 50                      	push	ax			;AN000; (tm14)
 30886                                  	;mov	ah,_$P_No_Tag		;AN000; set
 30887                                  	;mov	al,_$P_File_Spec 	;AN000; result
 30888                                  	; 08/07/2023
 30889 00002063 B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 30890                                  					      ; set result
 30891 00002066 E8BEFB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 30892 00002069 58                      	pop	ax			;AN000;
 30893                                  
 30894                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 30895 0000206A C3                      	retn				;AN000;
 30896                                  
 30897                                  ;***********************************************************************
 30898                                  ; _$P_FileSp_Chk
 30899                                  ;
 30900                                  ; Function:  Check if the input byte is one of file special characters
 30901                                  ;
 30902                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30903                                  ;	     AL = character code to be examineed
 30904                                  ;
 30905                                  ; Output:    ZF = 1 , AL is one of special characters
 30906                                  ;***********************************************************************
 30907                                  
 30908                                  _$P_FileSp_Chk:
 30909 0000206B 53                      	push	bx			;AN000;
 30910 0000206C 51                      	push	cx			;AN000;
 30911                                  	;;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 30912                                  	;lea	bx,[_$P_FileSp_Char] 	; "[]|<>+=;\"" at
 30913                                  					; MSDOS 6.21 IO.SYS - SYSINIT:1838h
 30914                                  	; 07/09/2023
 30915 0000206D BB[0B1A]                	mov	bx,_$P_FileSp_Char
 30916 00002070 B90900                  	mov	cx,_$P_FileSp_Len ; 9	;AN000; load length of it
 30917                                  _$P_FileSp_Loop: 			;AN000;
 30918 00002073 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 30919 00002076 7404                    	je	short _$P_FileSp_Exit	;AN000;
 30920                                  
 30921 00002078 43                      	inc	bx			;AN000;
 30922 00002079 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 30923                                  
 30924 0000207B 41                      	inc	cx			;AN000; reset ZF
 30925                                  _$P_FileSp_Exit: 			;AN000;
 30926 0000207C 59                      	pop	cx			;AN000;
 30927 0000207D 5B                      	pop	bx			;AN000;
 30928 0000207E C3                      	retn
 30929                                  
 30930                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 30931                                  
 30932                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 30933                                  
 30934                                  ;***********************************************************************
 30935                                  ; _$P_Drive_Format;
 30936                                  ;
 30937                                  ; Function:  Check if the input string is valid drive only format.
 30938                                  ;	     And set the result buffer.
 30939                                  ;
 30940                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30941                                  ;	     ES:BX -> CONTROL block
 30942                                  ;
 30943                                  ; Output:    None
 30944                                  ;
 30945                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 30946                                  ;
 30947                                  ; Vars: _$P_RC(W)
 30948                                  ;***********************************************************************
 30949                                  
 30950                                  _$P_Drive_Format:
 30951 0000207F 50                      	push	ax			;AN000;
 30952 00002080 52                      	push	dx			;AN000;
 30953 00002081 2E8A04                  	mov	al,[cs:si]		;AN000;
 30954 00002084 08C0                    	or	al,al			;AN000; if null string
 30955 00002086 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 30956                                  
 30957 00002088 E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 30958 0000208B 722A                    	jc	short _$P_Drv_Err	;AN000;
 30959                                  
 30960 0000208D 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 30961 00002092 740D                    	je	short _$P_DrvF00	;AN000;
 30962                                  
 30963                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 30964                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 30965                                  	; 12/12/2022
 30966 00002094 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 30967                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30968                                  	;test	word [es:bx],_$P_Ig_Colon
 30969 00002098 741D                    	jz	short _$P_Drv_Err	;AN000;
 30970                                  
 30971 0000209A 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 30972 0000209F 7516                    	jne	short _$P_Drv_Err	;AN000;
 30973                                  
 30974                                  _$P_DrvF00:				;AN000;
 30975 000020A1 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 30976 000020A3 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 30977 000020A5 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 30978                                  
 30979 000020A7 3C7A                    	cmp	al,"z"                  ;AN000; "a"-"z"
 30980 000020A9 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 30981                                  
 30982 000020AB 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 30983 000020AD 88C2                    	mov	dl,al			;AN000; set
 30984                                  	;mov	ah,_$P_No_Tag		;AN000; result
 30985                                  	;mov	al,_$P_Drive		;AN000; buffer
 30986                                  	; 08/07/2023
 30987 000020AF B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 30988                                  					      ; set result buffer
 30989 000020B2 E872FB                  	call	_$P_Fill_Result		;AN000; to drive
 30990 000020B5 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 30991                                  
 30992                                  _$P_Drv_Err:				;AN000;
 30993 000020B7 2EC706[7119]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 30994                                  _$P_Drv_Exit:				;AN000;
 30995 000020BE 5A                      	pop	dx			;AN000;
 30996 000020BF 58                      	pop	ax			;AN000;
 30997 000020C0 C3                      	retn				;AN000;
 30998                                  
 30999                                  ;ENDIF					;AN000;(of DrvSW)
 31000                                  
 31001                                  ;***********************************************************************
 31002                                  ; _$P_Skip_Delim;
 31003                                  ;
 31004                                  ; Function: Skip delimiters specified in the PARMS list, white space
 31005                                  ;	    and comma.
 31006                                  ;
 31007                                  ; Input:    DS:SI -> Command String
 31008                                  ;	    ES:DI -> Parameter List
 31009                                  ;
 31010                                  ; Output:   CY = 1 if the end of line encounterd
 31011                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 31012                                  ;	    AL = Last examineed character
 31013                                  ;
 31014                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 31015                                  ;
 31016                                  ; Vars:     _$P_Flags(R)
 31017                                  ;***********************************************************************
 31018                                  
 31019                                  _$P_Skip_Delim:
 31020                                  _$P_Skip_Delim_Loop:			;AN000;
 31021 000020C1 AC                      	lodsb				;AN000;
 31022 000020C2 E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 31023 000020C5 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 31024                                  
 31025 000020C7 E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 31026 000020CA 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 31027                                  
 31028 000020CC 2EF606[7D19]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 31029 000020D2 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 31030                                  
 31031 000020D4 2EF606[7D19]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 31032                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 31033                                  	; 08/07/2023
 31034                                  	; cf=0
 31035 000020DA 7505                    	jnz	short _$P_Skip_Delim_Exit
 31036 000020DC C3                      	retn
 31037                                  
 31038                                  	;dec	si			;AN000; backup si for next call (tm08)
 31039                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 31040                                  	; 12/12/2022
 31041                                  	; cf=0
 31042                                  	; 08/07/2023
 31043                                  	;jmp	short _$P_Skip_Delim_Exit
 31044                                  
 31045                                  _$P_Skip_Delim_CY:			;AN000;
 31046 000020DD F9                      	stc				;AN000; indicate EOL
 31047 000020DE EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 31048                                  
 31049                                  _$P_Skip_Delim_NCY:			;AN000;
 31050 000020E0 F8                      	clc				;AN000; indicate non delim
 31051                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 31052 000020E1 4E                      	dec	si			;AN000;  backup index pointer
 31053                                  	; 08/07/2023
 31054                                  	; 12/12/2022
 31055                                  ;_$P_Exit_At_Extra:	 ; cf=0
 31056 000020E2 C3                      	retn				;AN000;
 31057                                  
 31058                                  	; 12/12/2022
 31059                                  ;_$P_Exit_At_Extra:			;AN000;
 31060                                  	;clc				;AN000; indicate extra delim
 31061                                  	;retn				;AN000;
 31062                                  
 31063                                  ;***********************************************************************
 31064                                  ; _$P_Chk_EOL;
 31065                                  ;
 31066                                  ; Function: Check if AL is one of End of Line characters.
 31067                                  ;
 31068                                  ; Input:    AL = character code
 31069                                  ;	    ES:DI -> Parameter List
 31070                                  ;
 31071                                  ; Output:   ZF = 1 if one of End of Line characters
 31072                                  ;**********************************************************************
 31073                                  
 31074                                  _$P_Chk_EOL:
 31075 000020E3 53                      	push	bx			;AN000;
 31076 000020E4 51                      	push	cx			;AN000;
 31077 000020E5 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 31078 000020E7 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 31079 000020E9 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 31080 000020EB 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 31081                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 31082 000020ED 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 31083 000020EF 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 31084                                  ;ENDIF					;AN028;
 31085 000020F1 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 31086                                  					;AN000; EOL character specified ?
 31087 000020F6 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 31088 000020F8 31DB                    	xor	bx,bx			;AN000;
 31089 000020FA 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 31090                                  					;AN000; get length of delimiter list
 31091 000020FE 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 31092                                  	; 08/07/2023
 31093 00002101 31C9                    	xor	cx,cx ; *
 31094 00002103 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 31095 00002107 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 31096                                  	; 08/07/2023
 31097                                  	;;xor	cx,cx			;AN000; Get number of extra character
 31098                                  	;xor	ch,ch ; *
 31099 00002109 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 31100                                  _$P_Chk_EOL_Loop:			;AN000;
 31101 0000210C 43                      	inc	bx			;AN000;
 31102 0000210D 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 31103 00002110 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 31104 00002112 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 31105                                  	; 08/07/2023
 31106                                  	; cx=0
 31107                                  _$P_Chk_EOL_NZ:				;AN000;
 31108                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 31109                                  	; 08/07/2023
 31110 00002114 41                      	inc	cx  ; zf=0  (cx=1) ; *
 31111                                  _$P_Chk_EOL_Exit:			;AN000;
 31112 00002115 59                      	pop	cx			;AN000;
 31113 00002116 5B                      	pop	bx			;AN000;
 31114 00002117 C3                      	retn
 31115                                  
 31116                                  ;***********************************************************************
 31117                                  ; _$P_Chk_Delim;
 31118                                  ;
 31119                                  ; Function: Check if AL is one of delimiter characters.
 31120                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 31121                                  ;	    blanks.
 31122                                  ;
 31123                                  ; Input:    AL = character code
 31124                                  ;	    DS:SI -> Next Character
 31125                                  ;	    ES:DI -> Parameter List
 31126                                  ;
 31127                                  ; Output:   ZF = 1 if one of delimiter characters
 31128                                  ;	    SI points to the next character
 31129                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 31130                                  ;***********************************************************************
 31131                                  
 31132                                  	; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 31133                                  	; MSDOS 6.21 IO.SYS - SYSINIT:1FAEh
 31134                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2451h) ; (Retro DOS v5.0)
 31135                                  
 31136                                  _$P_Chk_Delim:
 31137 00002118 53                      	push	bx			;AN000;
 31138 00002119 51                      	push	cx			;AN000;
 31139 0000211A 2EC606[7719]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 31140                                  					;AC034; Assume terminated by space
 31141                                  	;and	byte [cs:_$P_Flags20,0DFh
 31142 00002120 2E8026[7D19]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 31143 00002126 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 31144 00002128 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 31145                                  
 31146 0000212A 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 31147 0000212C 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 31148                                  
 31149 0000212E 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 31150 00002130 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 31151                                  
 31152                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 31153                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 31154                                  ;        Erdogan Tan - 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 31155                                  ;_$P_Chk_Delim00:
 31156                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:246Bh)
 31157                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1FC8h)
 31158                                  %if 0
 31159                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31160                                  _$P_Chk_Delim00: 			;AN000;
 31161                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 31162                                  	jne	short _$P_Chk_Delim01	;AN000;
 31163                                  
 31164                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 31165                                  	jne	short _$P_Chk_Delim01	;AN000;
 31166                                  
 31167                                  	mov	al,_$P_Space		;AN000;
 31168                                  	inc	si			;AN000; make si point to next character
 31169                                  	cmp	al,al			;AN000; Set ZF
 31170                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 31171                                  %endif
 31172                                  
 31173                                  _$P_Chk_Delim01: 			;AN000;
 31174 00002132 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 31175                                  					;AN000; delimiter character specified ?
 31176 00002137 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 31177                                  
 31178                                  	;xor	cx,cx			;AN000;
 31179 00002139 30ED                    	xor	ch,ch
 31180                                  	;mov	cl,[es:di+3]
 31181 0000213B 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 31182                                  					;AN000; get length of delimiter list
 31183                                  	;or	cx,cx			;AN000; No extra Delim character ?
 31184                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 31185                                  	; 08/07/2023
 31186 0000213F E30B                    	jcxz	_$P_Chk_Delim_NZ
 31187                                  
 31188 00002141 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 31189                                  _$P_Chk_Delim_Loop:			;AN000;
 31190 00002144 43                      	inc	bx			;AN000;
 31191 00002145 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 31192 00002148 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 31193                                  
 31194 0000214A E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 31195                                  
 31196                                  _$P_Chk_Delim_NZ:			;AN000;
 31197                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 31198                                  	; 08/07/2023
 31199                                  	; cx=0 here
 31200 0000214C 41                      	inc	cx ; cx=1, zf=0
 31201                                  _$P_Chk_Delim_Exit:			;AN000;
 31202                                  _$P_ChkDfin:				;AN000;
 31203 0000214D 59                      	pop	cx			;AN000;
 31204 0000214E 5B                      	pop	bx			;AN000;
 31205 0000214F C3                      	retn				;AN000;
 31206                                  
 31207                                  _$P_Chk_Delim_Exit0:			;AN000;
 31208 00002150 2EA2[7719]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 31209 00002154 2EF606[7D19]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 31210 0000215A 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 31211                                  
 31212 0000215C 2E800E[7D19]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 31213                                  					;AC034; flag terminated extra delimiter or comma
 31214                                  _$P_No_Set_Extra:			;AN027;
 31215 00002162 38C0                    	cmp	al,al			;AN000; set ZF
 31216 00002164 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 31217                                  
 31218                                  ;***********************************************************************
 31219                                  ; _$P_Chk_Switch;
 31220                                  ;
 31221                                  ; Function: Check if AL is the switch character not in first position of
 31222                                  ;	    _$P_STRING_BUF
 31223                                  ;
 31224                                  ; Input:    AL = character code
 31225                                  ;	    BX = current pointer within _$P_String_Buf
 31226                                  ;	    SI =>next char on command line (following the one in AL)
 31227                                  ;
 31228                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 31229                                  ;		 position, and has no chance of being part of a date string,
 31230                                  ;		 i.e. should be treated as a delimiter.
 31231                                  
 31232                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 31233                                  ;		 position, or is a slash but may be part of a date string, i.e.
 31234                                  ;		 should not be treated as a delimiter.
 31235                                  ;
 31236                                  ; Vars:  _$P_Terminator(W)
 31237                                  
 31238                                  ; Use:	 _$P_0099
 31239                                  ;***********************************************************************
 31240                                  
 31241                                  _$P_Chk_Switch:
 31242                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 31243                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 31244                                  	; 08/07/2023
 31245 00002166 BD[8619]                	mov	bp,_$P_STRING_BUF
 31246                                  
 31247                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 31248 00002169 39EB                    	cmp	bx,bp			;AN000;
 31249 0000216B 7406                    	je	short _$P_STRUC_L2	;AN000;
 31250                                  
 31251                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 31252 0000216D 3C2F                    	cmp	al,_$P_Switch		;AN000;
 31253 0000216F 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 31254                                  
 31255 00002171 F9                      	stc				;AN020;not in first position and is slash
 31256                                  	;jmp     short _$P_STRUC_L1	;AN000;
 31257                                  	; 12/12/2022
 31258 00002172 C3                      	retn
 31259                                  
 31260                                  ; 12/12/2022
 31261                                  ;_$P_STRUC_L5:				;AN000;
 31262                                  ;	CLC				;AN020;not a slash
 31263                                  ;;	    .ENDIF			;AN020;
 31264                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 31265                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 31266                                  
 31267                                  _$P_STRUC_L2:				;AN000;
 31268                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;
 31269 00002173 3C2F                    	cmp     al,_$P_Switch		;AN000;
 31270 00002175 7506                    	jne	short _$P_STRUC_L12	;AN000;
 31271                                  
 31272 00002177 2E800E[7D19]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020 ;AC034;;could be valid switch, first char and is slash
 31273                                  ;	.ENDIF				;AN020;
 31274                                  
 31275                                  	; 12/12/2022
 31276                                  	; cf=0
 31277                                  	;retn
 31278                                  
 31279                                  _$P_STRUC_L5:
 31280                                  	; 12/12/2022
 31281                                  _$P_STRUC_L12:				;AN000;
 31282 0000217D F8                      	clc				;AN020;CF=0 indicating first char
 31283                                  ;	.ENDIF				;AN020;
 31284                                  _$P_STRUC_L1:				;AN000;
 31285 0000217E C3                      	retn				;AN000;
 31286                                  
 31287                                  ;**************************************************************************
 31288                                  ; _$P_Chk_DBCS:
 31289                                  ;
 31290                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 31291                                  ;
 31292                                  ;  Input:
 31293                                  ;	  AL	= Code to be examineed
 31294                                  ;
 31295                                  ;  Output:
 31296                                  ;	  If CF is on then a lead byte of DBCS
 31297                                  ;
 31298                                  ; Use: INT 21h w/AH=63
 31299                                  ;
 31300                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 31301                                  ;***************************************************************************
 31302                                  
 31303                                  _$P_Chk_DBCS:
 31304 0000217F 1E                      	push	ds			;AN000;
 31305 00002180 56                      	push	si			;AN000;
 31306 00002181 53                      	push	bx			;AN000; (tm11)
 31307                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 31308                                  	;jne	short _$P_DBCS00	;AN000;
 31309                                  	; 08/07/2023
 31310 00002182 2E8B36[7A19]            	mov	si,[cs:_$P_DBCSEV_SEG]
 31311 00002187 21F6                    	and	si,si ; 0 ?
 31312 00002189 7525                    	jnz	short _$P_DBCS00 ; already set
 31313 0000218B 50                      	push	ax			;AN000;
 31314 0000218C 1E                      	push	ds			;AN000; (tm11)
 31315 0000218D 51                      	push	cx			;AN000;
 31316 0000218E 52                      	push	dx			;AN000;
 31317 0000218F 57                      	push	di			;AN000;
 31318 00002190 55                      	push	bp			;AN000;
 31319 00002191 06                      	push	es			;AN000;
 31320                                  	; si = 0 ; 08/07/2023
 31321                                  	;xor	si,si			;AN000;
 31322 00002192 8EDE                    	mov	ds,si ; 0		;AN000;
 31323 00002194 B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 31324 00002197 CD21                    	int	21h			;AN000;
 31325                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 31326 00002199 8CDB                    	mov	bx,ds			;AN000; (tm11)
 31327 0000219B 09DB                    	or	bx,bx			;AN000; (tm11)
 31328 0000219D 07                      	pop	es			;AN000;
 31329 0000219E 5D                      	pop	bp			;AN000;
 31330 0000219F 5F                      	pop	di			;AN000;
 31331 000021A0 5A                      	pop	dx			;AN000;
 31332 000021A1 59                      	pop	cx			;AN000;
 31333 000021A2 1F                      	pop	ds			;AN000; (tm11)
 31334 000021A3 58                      	pop	ax			;AN000;
 31335 000021A4 7424                    	jz	short _$P_NON_DBCS	;AN000;
 31336                                  _$P_DBCS02:				;AN000;
 31337 000021A6 2E8936[7819]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 31338 000021AB 2E891E[7A19]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 31339                                  _$P_DBCS00:				;AN000;
 31340                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 31341                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 31342                                  	; 08/07/2023
 31343 000021B0 2EC536[7819]            	lds	si,[cs:_$P_DBCSEV_OFF]
 31344                                  _$P_DBCS_LOOP:				;AN000;
 31345 000021B5 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 31346 000021B8 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 31347 000021BA 3A04                    	cmp	al,[si] 		;AN000;
 31348 000021BC 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 31349 000021BE 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 31350 000021C1 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 31351 000021C3 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 31352 000021C4 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 31353                                  _$P_DBCS01:				;AN000;
 31354 000021C6 46                      	inc	si			;AC035; add '2' to
 31355 000021C7 46                      	inc	si			;AC035;  SI reg
 31356                                  					;AN000; get next vector
 31357 000021C8 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 31358                                  _$P_NON_DBCS:				;AN000;
 31359                                  	; 12/12/2022
 31360                                  	; cf=0
 31361                                  	;clc				;AN000; indicate SBCS
 31362                                  _$P_DBCS_EXIT:				;AN000;
 31363 000021CA 5B                      	pop	bx			;AN000; (tm11)
 31364 000021CB 5E                      	pop	si			;AN000;
 31365 000021CC 1F                      	pop	ds			;AN000;
 31366 000021CD C3                      	retn				;AN000;
 31367                                  
 31368                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 31369                                  ; ======================================================================
 31370                                  ; 27/03/2019 - Retro DOS v4.0
 31371                                  
 31372                                  ;control block definitions for parser.
 31373                                  ;-----------------------------------------------------------------------
 31374                                  ; buffer = [n | n,m] {/e}
 31375                                  
 31376                                  ; 30/03/2019
 31377                                  
 31378                                  struc p_parms
 31379 00000000 ????                    	resw	1	; dw ?
 31380 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 31381 00000003 ??                      	resb	1	; db 1	; length is 1
 31382 00000004 ??                      	resb 	1	; db ';' ; delimiter
 31383                                  .size:
 31384                                  endstruc
 31385                                  
 31386                                  struc p_pos
 31387 00000000 ????                    	resw	1	; dw ?	; numeric value??
 31388 00000002 ????                    	resw	1	; dw ?	; function
 31389 00000004 ????                    	resw	1	; dw ?	; result value buffer
 31390                                  
 31391                                  ; note: by defining result_val before this structure, we could remove
 31392                                  ;  the "result_val" from every structure invocation
 31393                                  
 31394 00000006 ????                    	resw	1	; dw ?	; value list
 31395 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 31396                                  .size:
 31397                                  endstruc
 31398                                  
 31399                                  struc	p_range
 31400 00000000 ??                      	resb	1	; db 1	; range definition
 31401 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 31402 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 31403 00000003 ????????                	resd	1	; dd ?	; numeric min
 31404 00000007 ????????                	resd	1	; dd ?	; numeric max
 31405                                  .size:
 31406                                  endstruc
 31407                                  
 31408                                  ;-----------------------------------------------------------------------
 31409                                  
 31410                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31411                                  	; (SYSINIT:1F48h)
 31412                                  
 31413                                  	; 08/07/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31414                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2083h
 31415                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:251Dh) ; (Retro DOS v5.0)
 31416                                  
 31417                                  ; buffer = [n | n,m] {/e}
 31418                                  
 31419                                  ;buf_parms p_parms <buf_parmsx>
 31420                                  buf_parms: 
 31421 000021CE [D321]                  	dw	buf_parmsx
 31422 000021D0 01                      	db	1	; an extra delimiter list
 31423 000021D1 01                      	db	1	; length is 1
 31424 000021D2 3B                      	db	';'	; delimiter
 31425                                  
 31426                                  buf_parmsx:
 31427 000021D3 0102[DD21][F121]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 31428 000021D9 01                      	db	1			; one switch
 31429 000021DA [0522]                  	dw	sw_x_ctrl
 31430 000021DC 00                      	db	0			; no keywords
 31431                                  
 31432                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 31433                                  buf_pos1:
 31434 000021DD 0080                    	dw	8000h	; numeric value??
 31435 000021DF 0000                    	dw	0	; function
 31436 000021E1 [1722]                  	dw	result_val ; result value buffer	
 31437 000021E3 [E621]                  	dw	buf_range_1 ; value list
 31438 000021E5 00                      	db	0  	; no switches/keywords
 31439                                  
 31440                                  ;buf_range_1 p_range <,,,1,99>		; M050
 31441                                  buf_range_1:
 31442 000021E6 01                      	db	1	; range definition
 31443 000021E7 01                      	db	1	; 1 definition of range
 31444 000021E8 01                      	db	1	; item tag for this range
 31445 000021E9 01000000                	dd	1	; numeric min
 31446 000021ED 63000000                	dd	99	; numeric max
 31447                                  
 31448                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 31449                                  buf_pos2:
 31450 000021F1 0180                    	dw	8001h
 31451 000021F3 0000                    	dw	0
 31452 000021F5 [1722]                  	dw	result_val	
 31453 000021F7 [FA21]                  	dw	buf_range_2
 31454 000021F9 00                      	db	0
 31455                                  
 31456                                  ;buf_range_2 p_range <,,,0,8>
 31457                                  buf_range_2:
 31458 000021FA 01                      	db	1
 31459 000021FB 01                      	db	1
 31460 000021FC 01                      	db	1
 31461 000021FD 00000000                	dd	0
 31462 00002201 08000000                	dd	8
 31463                                  
 31464                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 31465                                  sw_x_ctrl:
 31466 00002205 0000                    	dw	0
 31467 00002207 0000                    	dw	0
 31468 00002209 [1722]                  	dw	result_val	
 31469 0000220B [1622]                  	dw	noval
 31470 0000220D 01                      	db	1	; 1 switch
 31471                                  	
 31472                                  switch_x:
 31473 0000220E 2F5800                  	db	'/X',0		; M016
 31474                                  
 31475                                  p_buffers:
 31476 00002211 0000                    	dw	0	; local variables
 31477                                  p_h_buffers:
 31478 00002213 0000                    	dw	0
 31479                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31480                                  p_buffer_slash_x:
 31481 00002215 00                      	db	0 ; 31/03/2019
 31482                                  
 31483                                  ;-- common definitions -------------------------------------------------
 31484                                  
 31485 00002216 00                      noval:	db	0
 31486                                  
 31487                                  result_val: 	;label	byte
 31488 00002217 00                      	db	0		; type returned
 31489                                  result_val_itag:
 31490 00002218 00                      	db	0		; item tag returned
 31491                                  result_val_swoff:
 31492 00002219 0000                    	dw	0		; es:offset of the switch defined
 31493                                  rv_byte:	;label	byte
 31494 0000221B 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 31495                                  
 31496                                  ;-----------------------------------------------------------------------
 31497                                  
 31498                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31499                                  	; (SYSINIT:1F99h)
 31500                                  
 31501                                  ; break = [ on | off ]
 31502                                  
 31503                                  ;brk_parms p_parms  <brk_parmsx>
 31504                                  brk_parms:
 31505 0000221F [2422]                  	dw	brk_parmsx
 31506 00002221 01                      	db	1	; an extra delimiter list
 31507 00002222 01                      	db	1	; length is 1
 31508 00002223 3B                      	db	';'	; delimiter
 31509                                  
 31510                                  brk_parmsx:
 31511 00002224 0101[2A22]              	dw	101h,brk_pos	; min,max = 1 positional
 31512 00002228 00                      	db	0		; no switches
 31513 00002229 00                      	db	0		; no keywords
 31514                                  
 31515                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 31516                                  brk_pos:
 31517 0000222A 0020                    	dw	2000h
 31518 0000222C 0000                    	dw	0
 31519 0000222E [1722]                  	dw	result_val	
 31520 00002230 [3322]                  	dw	on_off_string
 31521 00002232 00                      	db	0
 31522                                  
 31523                                  on_off_string:	;label	byte
 31524 00002233 03                      	db	3		; signals that there is a string choice
 31525 00002234 00                      	db	0		; no range definition
 31526 00002235 00                      	db	0		; no numeric values choice
 31527 00002236 02                      	db	2		; 2 strings for choice
 31528 00002237 01                      	db	1		; the 1st string tag
 31529 00002238 [3D22]                  	dw	on_string
 31530 0000223A 02                      	db	2		; the 2nd string tag
 31531 0000223B [4022]                  	dw	off_string
 31532                                  
 31533                                  on_string:
 31534 0000223D 4F4E00                  	db	"ON",0
 31535                                  off_string:
 31536 00002240 4F464600                	db	"OFF",0
 31537                                  
 31538                                  p_ctrl_break:
 31539 00002244 00                      	db	0	; local variable
 31540                                  
 31541                                  ;-----------------------------------------------------------------------
 31542                                  
 31543                                  	; 27/10/2022
 31544                                  
 31545                                  ; country = n {m {path}}
 31546                                  ; or
 31547                                  ; country = n,,path
 31548                                  
 31549                                  ;cntry_parms p_parms <cntry_parmsx>
 31550                                  cntry_parms:
 31551 00002245 [4A22]                  	dw	cntry_parmsx
 31552 00002247 01                      	db	1
 31553 00002248 01                      	db	1
 31554 00002249 3B                      	db	';'
 31555                                  	
 31556                                  cntry_parmsx:
 31557 0000224A 0103[5422][6822]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 31557 00002250 [7122]             
 31558 00002252 00                      	db	0		; no switches
 31559 00002253 00                      	db	0		; no keywords
 31560                                  
 31561                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 31562                                  cntry_pos1:
 31563 00002254 0080                    	dw	8000h
 31564 00002256 0000                    	dw	0
 31565 00002258 [1722]                  	dw	result_val	
 31566 0000225A [5D22]                  	dw	cc_range
 31567 0000225C 00                      	db	0
 31568                                  
 31569                                  ;cc_range p_range <,,,1,999>
 31570                                  cc_range:
 31571 0000225D 01                      	db	1
 31572 0000225E 01                      	db	1
 31573 0000225F 01                      	db	1
 31574 00002260 01000000                	dd	1
 31575 00002264 E7030000                	dd	999
 31576                                  
 31577                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 31578                                  cntry_pos2:
 31579 00002268 0180                    	dw	8001h
 31580 0000226A 0000                    	dw	0
 31581 0000226C [1722]                  	dw	result_val	
 31582 0000226E [5D22]                  	dw	cc_range
 31583 00002270 00                      	db	0
 31584                                  
 31585                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 31586                                  cntry_pos3:
 31587 00002271 0102                    	dw	201h
 31588 00002273 0000                    	dw	0
 31589 00002275 [1722]                  	dw	result_val	
 31590 00002277 [1622]                  	dw	noval
 31591 00002279 00                      	db	0	
 31592                                  
 31593                                  p_cntry_code:
 31594 0000227A 0000                    	dw	0	; local variable
 31595                                  p_code_page:
 31596 0000227C 0000                    	dw	0	; local variable
 31597                                  
 31598                                  ;-----------------------------------------------------------------------
 31599                                  
 31600                                  	; 27/10/2022
 31601                                  
 31602                                  ; files = n
 31603                                  
 31604                                  ;files_parms p_parms <files_parmsx>
 31605                                  files_parms:
 31606 0000227E [8322]                  	dw	files_parmsx
 31607 00002280 01                      	db	1
 31608 00002281 01                      	db	1
 31609 00002282 3B                      	db	';'
 31610                                  
 31611                                  files_parmsx:
 31612 00002283 0101[8922]              	dw	101h,files_pos	; min,max 1 positional
 31613 00002287 00                      	db	0		; no switches
 31614 00002288 00                      	db	0		; no keywords
 31615                                  
 31616                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 31617                                  files_pos:
 31618 00002289 0080                    	dw	8000h
 31619 0000228B 0000                    	dw	0
 31620 0000228D [1722]                  	dw	result_val	
 31621 0000228F [9222]                  	dw	files_range
 31622 00002291 00                      	db	0
 31623                                  
 31624                                  ;files_range p_range <,,,8,255>
 31625                                  files_range:
 31626 00002292 01                      	db	1
 31627 00002293 01                      	db	1
 31628 00002294 01                      	db	1
 31629 00002295 08000000                	dd	8
 31630 00002299 FF000000                	dd	255
 31631                                  
 31632                                  p_files:
 31633 0000229D 00                      	db	0		; local variable
 31634                                  
 31635                                  ;-----------------------------------------------------------------------
 31636                                  
 31637                                  	; 27/10/2022
 31638                                  
 31639                                  ; fcbs = n,m
 31640                                  
 31641                                  ;fcbs_parms p_parms <fcbs_parmsx>
 31642                                  fcbs_parms:
 31643 0000229E [A322]                  	dw	fcbs_parmsx
 31644 000022A0 01                      	db	1
 31645 000022A1 01                      	db	1
 31646 000022A2 3B                      	db	';'
 31647                                  
 31648                                  fcbs_parmsx:
 31649 000022A3 0102[AB22][BF22]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 31650 000022A9 00                      	db	0		; no switches
 31651 000022AA 00                      	db	0		; no keywords
 31652                                  
 31653                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 31654                                  fcbs_pos_1:
 31655 000022AB 0080                    	dw	8000h
 31656 000022AD 0000                    	dw	0
 31657 000022AF [1722]                  	dw	result_val	
 31658 000022B1 [B422]                  	dw	fcbs_range
 31659 000022B3 00                      	db	0
 31660                                  
 31661                                  ;fcbs_range p_range <,,,1,255>
 31662                                  fcbs_range:
 31663 000022B4 01                      	db	1
 31664 000022B5 01                      	db	1
 31665 000022B6 01                      	db	1
 31666 000022B7 01000000                	dd	1
 31667 000022BB FF000000                	dd	255
 31668                                  
 31669                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 31670                                  fcbs_pos_2:
 31671 000022BF 0080                    	dw	8000h
 31672 000022C1 0000                    	dw	0
 31673 000022C3 [1722]                  	dw	result_val	
 31674 000022C5 [C822]                  	dw	fcbs_keep_range
 31675 000022C7 00                      	db	0
 31676                                  
 31677                                  ;fcbs_keep_range p_range <,,,0,255>
 31678                                  fcbs_keep_range:
 31679 000022C8 01                      	db	1
 31680 000022C9 01                      	db	1
 31681 000022CA 01                      	db	1
 31682 000022CB 00000000                	dd	0
 31683 000022CF FF000000                	dd	255
 31684                                  
 31685 000022D3 00                      p_fcbs:	db	0		; local variable
 31686 000022D4 00                      p_keep:	db	0		; local variable
 31687                                  
 31688                                  ;-----------------------------------------------------------------------
 31689                                  
 31690                                  	; 27/10/2022
 31691                                  
 31692                                  ; lastdrive = x
 31693                                  
 31694                                  ;ldrv_parms p_parms <ldrv_parmsx>
 31695                                  ldrv_parms:
 31696 000022D5 [DA22]                  	dw	ldrv_parmsx
 31697 000022D7 01                      	db	1
 31698 000022D8 01                      	db	1
 31699 000022D9 3B                      	db	';'
 31700                                  
 31701                                  ldrv_parmsx:
 31702 000022DA 0101[E022]              	dw	101h,ldrv_pos	; min,max = 1 positional
 31703 000022DE 00                      	db	0		; no switches
 31704 000022DF 00                      	db	0		; no keywords
 31705                                  
 31706                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 31707                                  ldrv_pos:				    ; remove colon at end
 31708 000022E0 1001                    	dw	110h
 31709 000022E2 1000                    	dw	10h
 31710 000022E4 [1722]                  	dw	result_val	
 31711 000022E6 [1622]                  	dw	noval
 31712 000022E8 00                      	db	0
 31713                                  	
 31714 000022E9 00                      p_ldrv:	db	0		; local variable
 31715                                  
 31716                                  ;-----------------------------------------------------------------------
 31717                                  
 31718                                  	; 27/10/2022
 31719                                  
 31720                                  ; stacks = n,m
 31721                                  
 31722                                  ;stks_parms p_parms <stks_parmsx>
 31723                                  stks_parms:
 31724 000022EA [EF22]                  	dw	stks_parmsx
 31725 000022EC 01                      	db	1
 31726 000022ED 01                      	db	1
 31727 000022EE 3B                      	db	';'
 31728                                  
 31729                                  stks_parmsx:
 31730 000022EF 0202[F722][0B23]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 31731 000022F5 00                      	db	0		; no switches
 31732 000022F6 00                      	db	0		; no keywords
 31733                                  
 31734                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 31735                                  stks_pos_1:
 31736 000022F7 0080                    	dw	8000h
 31737 000022F9 0000                    	dw	0
 31738 000022FB [1722]                  	dw	result_val	
 31739 000022FD [0023]                  	dw	stks_range
 31740 000022FF 00                      	db	0
 31741                                  
 31742                                  ;stks_range p_range <,,,0,64>
 31743                                  stks_range:
 31744 00002300 01                      	db	1
 31745 00002301 01                      	db	1
 31746 00002302 01                      	db	1
 31747 00002303 00000000                	dd	0
 31748 00002307 40000000                	dd	64
 31749                                  
 31750                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 31751                                  stks_pos_2:
 31752 0000230B 0080                    	dw	8000h
 31753 0000230D 0000                    	dw	0
 31754 0000230F [1722]                  	dw	result_val	
 31755 00002311 [1423]                  	dw	stk_size_range
 31756 00002313 00                      	db	0
 31757                                  
 31758                                  ;stk_size_range p_range <,,,0,512>
 31759                                  stk_size_range:
 31760 00002314 01                      	db	1
 31761 00002315 01                      	db	1
 31762 00002316 01                      	db	1
 31763 00002317 00000000                	dd	0
 31764 0000231B 00020000                	dd	512	
 31765                                  
 31766                                  p_stack_count:
 31767 0000231F 0000                    	dw	0	; local variable
 31768                                  p_stack_size:
 31769 00002321 0000                    	dw	0	; local variable
 31770                                  
 31771                                  ;-----------------------------------------------------------------------
 31772                                  
 31773                                  	; 27/10/2022
 31774                                  
 31775                                  ; multitrack = [ on | off ]
 31776                                  
 31777                                  ;mtrk_parms p_parms <mtrk_parmsx>
 31778                                  mtrk_parms:
 31779 00002323 [2823]                  	dw	mtrk_parmsx
 31780 00002325 01                      	db	1
 31781 00002326 01                      	db	1
 31782 00002327 3B                      	db	';'
 31783                                  
 31784                                  mtrk_parmsx:
 31785 00002328 0101[2E23]              	dw	101h,mtrk_pos	; min,max = 1 positional
 31786 0000232C 00                      	db	0		; no switches
 31787 0000232D 00                      	db	0		; no keywords
 31788                                  
 31789                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 31790                                  mtrk_pos:
 31791 0000232E 0020                    	dw	2000h
 31792 00002330 0000                    	dw	0
 31793 00002332 [1722]                  	dw	result_val	
 31794 00002334 [3322]                  	dw	on_off_string
 31795 00002336 00                      	db	0
 31796                                  
 31797 00002337 00                      p_mtrk:	db	0		; local variable
 31798                                  
 31799                                  ;-----------------------------------------------------------------------
 31800                                  
 31801                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31802                                  	; (SYSINIT:20B2h)
 31803                                  
 31804                                  ; switches=/k
 31805                                  
 31806                                  ;swit_parms p_parms <swit_parmsx>
 31807                                  swit_parms:
 31808 00002338 [3D23]                  	dw	swit_parmsx
 31809 0000233A 01                      	db	1
 31810 0000233B 01                      	db	1
 31811 0000233C 3B                      	db	';'
 31812                                  
 31813                                  swit_parmsx:
 31814 0000233D 0000                    	dw	0		; no positionals
 31815                                  	; 08/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 31816                                  	;db	5               ; # of switches
 31817                                  	; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM, SYSINIT)
 31818 0000233F 06                      	db	6
 31819                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 31820                                  	;db	3
 31821 00002340 [4D23]                  	dw	swit_k_ctrl	; /k control
 31822                                  	; 01/01/2023 - Retro DOS v4.2 ; *
 31823 00002342 [5923]                  	dw	swit_n_ctrl ; * ; /n control (for MULTI_CONFIG only)
 31824 00002344 [6523]                  	dw	swit_f_ctrl ; * ; /f control (for MULTI_CONFIG only)
 31825 00002346 [7123]                  	dw	swit_t_ctrl     ; /t control
 31826 00002348 [7D23]                  	dw	swit_w_ctrl     ; /w control
 31827                                  	; 14/04/2024 - Retro DOS v5.0 ; **
 31828 0000234A [8923]                  	dw	swit_i_ctrl	; /i control
 31829 0000234C 00                      	db	0		; no keywords
 31830                                  
 31831                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31832                                  swit_k_ctrl:
 31833 0000234D 00000000[1722]-         	dw	0,0,result_val,noval
 31833 00002353 [1622]             
 31834 00002355 01                      	db	1
 31835 00002356 2F4B00                  swit_k:	db	'/K',0
 31836                                  
 31837                                  ; 01/01/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 31838                                  ; (SYSINIT:220Ch) ; *
 31839                                  
 31840                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 31841                                  ;
 31842                                  ;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31843                                  swit_n_ctrl: ; *
 31844 00002359 00000000[1722]-         	dw	0,0,result_val,noval
 31844 0000235F [1622]             
 31845 00002361 01                      	db	1
 31846 00002362 2F4E00                  swit_n: db	'/N',0
 31847                                  
 31848                                  ;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31849                                  swit_f_ctrl: ; *
 31850 00002365 00000000[1722]-         	dw	0,0,result_val,noval
 31850 0000236B [1622]             
 31851 0000236D 01                      	db	1
 31852 0000236E 2F4600                  swit_f: db 	'/F',0
 31853                                  
 31854                                  	; 27/10/2022
 31855                                  
 31856                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 31857                                  swit_t_ctrl:
 31858 00002371 00000000[1722]-         	dw	0,0,result_val,noval
 31858 00002377 [1622]             
 31859 00002379 01                      	db	1
 31860 0000237A 2F5400                  swit_t:	db	'/T',0			   ;				M059
 31861                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 31862                                  swit_w_ctrl:
 31863 0000237D 00000000[1722]-         	dw	0,0,result_val,noval
 31863 00002383 [1622]             
 31864 00002385 01                      	db	1
 31865 00002386 2F5700                  swit_w:	db	'/W',0			   ;				M063
 31866                                  
 31867                                  ; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM, SYSINIT)
 31868                                  ;;;
 31869                                  ;swit_i_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31870                                  swit_i_ctrl:
 31871 00002389 0000                    	dw	0
 31872 0000238B 0000                    	dw	0
 31873 0000238D [1722]                  	dw	result_val
 31874 0000238F [1622]                  	dw	noval
 31875 00002391 01                      	db	1
 31876 00002392 2F4900                  swit_i:	db	'/I',0
 31877                                  ;;;
 31878                                  
 31879                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 31880                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 31881                                  ;   in the above table to prevent the parsing code from complaining about them
 31882                                  
 31883 00002395 00                      p_swit_k:	db     0	; local variable
 31884 00002396 00                      p_swit_t:	db     0	; local variable			M059
 31885 00002397 00                      p_swit_w:	db     0	; local variable			M063
 31886                                  ; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 31887 00002398 00                      p_swit_i:	db     0
 31888                                  
 31889                                  ;-----------------------------------------------------------------------
 31890                                  
 31891                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31892                                  	; (SYSINIT:20E8h)
 31893                                  
 31894                                  ; DOS = [ high | low ]
 31895                                  
 31896                                  ;dos_parms p_parms  <dos_parmsx>
 31897                                  dos_parms:
 31898 00002399 [9E23]                  	dw	dos_parmsx
 31899 0000239B 01                      	db	1
 31900 0000239C 01                      	db	1
 31901 0000239D 3B                      	db	';'
 31902                                  dos_parmsx:
 31903 0000239E 01                      	db	1		; min parameters
 31904 0000239F 02                      	db	2		; max parameters
 31905 000023A0 [A623]                  	dw	dos_pos		; 
 31906 000023A2 [A623]                  	dw	dos_pos		; 
 31907 000023A4 00                      	db	0		; no switches
 31908 000023A5 00                      	db	0		; no keywords
 31909                                  
 31910                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 31911                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 31912                                  dos_pos:
 31913 000023A6 00200000[1722]-         	dw	2000h,0,result_val,dos_strings
 31913 000023AC [B823]             
 31914 000023AE 00                      	db	0
 31915 000023AF 00200000[1722]-         	dw	2000h,0,result_val,dos_strings
 31915 000023B5 [B823]             
 31916 000023B7 00                      	db	0	
 31917                                  
 31918                                  dos_strings:	;label	byte
 31919 000023B8 03                      	db	3		; signals that there is a string choice
 31920 000023B9 00                      	db	0		; no range definition
 31921 000023BA 00                      	db	0		; no numeric values choice
 31922 000023BB 04                      	db	4		; 4 strings for choice
 31923 000023BC 01                      	db	1		; the 1st string tag
 31924 000023BD [E623]                  	dw	hi_string
 31925 000023BF 02                      	db	2		; the 2nd string tag
 31926 000023C0 [EB23]                  	dw	lo_string
 31927 000023C2 03                      	db	3
 31928 000023C3 [EF23]                  	dw	umb_string
 31929 000023C5 04                      	db	4
 31930 000023C6 [F323]                  	dw	noumb_string
 31931                                  
 31932                                  ; 14/04/2024 - Retro DOS v5.0
 31933                                  ; (PCDOS 7.1 IBMDOS.COM - SYSINIT:273Eh)
 31934                                  ;;;
 31935                                  dosdata_parms:
 31936 000023C8 [CD23]                  	dw	dosdata_parmsx	; DOSDATA = UMB|NOUMB
 31937 000023CA 01                      	db	1
 31938 000023CB 01                      	db	1
 31939 000023CC 3B                      	db	';'
 31940                                  dosdata_parmsx:
 31941 000023CD 01                      	db	1
 31942 000023CE 01                      	db	1		; min,max = 1 positional
 31943 000023CF [D323]                  	dw	dosdata_pos
 31944 000023D1 00                      	db	0		; no switches
 31945 000023D2 00                      	db	0		; no keywords
 31946                                  
 31947                                  	; dosdata_pos p_pos <2000h,0,result_val,dosdata_strings>
 31948                                  dosdata_pos:
 31949 000023D3 0020                    	dw	2000h		; simple string
 31950 000023D5 0000                    	dw	0
 31951 000023D7 [1722]                  	dw	result_val
 31952 000023D9 [DC23]                  	dw	dosdata_strings
 31953 000023DB 00                      	db	0
 31954                                  dosdata_strings:
 31955 000023DC 03                      	db	3		; signals that there is a string choice
 31956 000023DD 00                      	db	0		; no range definition
 31957 000023DE 00                      	db	0		; no numeric values choice
 31958 000023DF 02                      	db	2		; 2 strings for choice
 31959 000023E0 01                      	db	1		; the 1st string tag
 31960 000023E1 [EF23]                  	dw	umb_string	; "UMB"
 31961 000023E3 02                      	db	2		; the 2nd string tag
 31962 000023E4 [F323]                  	dw	noumb_string	; "NOUMB"
 31963                                  ;;;
 31964                                  
 31965 000023E6 4849474800              hi_string:	db	"HIGH",0
 31966 000023EB 4C4F5700                lo_string:	db	"LOW",0
 31967 000023EF 554D4200                umb_string:	db	"UMB",0
 31968 000023F3 4E4F554D4200            noumb_string:	db	"NOUMB",0
 31969                                  
 31970                                  p_dos_hi:
 31971 000023F9 00                      	db	0	; local variable
 31972                                  			; BUGBUG : I dont know whether PARSER uses
 31973                                  			;          this variable or not
 31974                                  	; 14/04/2024 (PCDOS 7.1 IBMBIO.COM)
 31975 000023FA 00                      	db	0
 31976                                  
 31977                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31978                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31979                                  ;%if 0
 31980                                  
 31981                                  ;****************************************************************** RICHID ****
 31982                                  
 31983                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 31984                                  
 31985                                  ; 30/03/2019 - Retro DOS v4.0
 31986                                  ;------------------------------------------------------------------------------
 31987                                  
 31988                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 31989                                  ;
 31990                                  ;   Date:     May 14, 1992
 31991                                  ;
 31992                                  ;******************************************************************************
 31993                                  ;
 31994                                  ;   Modification log:
 31995                                  ;
 31996                                  ;     DATE    WHO      DESCRIPTION
 31997                                  ;   --------  -------  --------------------------------------------------------
 31998                                  ;   05/14/92  t-richj  Original
 31999                                  ;   06/21/92  t-richj  Final revisions before check-in
 32000                                  ;
 32001                                  ;******************************************************************************
 32002                                  ;
 32003                                  ; There are two primary definitions which need to be made, selectively, before
 32004                                  ; this include file should be used.  These are:
 32005                                  ;    HV_Extern - If this has been defined, variables for this module will be
 32006                                  ;                declared as external.  Otherwise, variables will be declared
 32007                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 32008                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 32009                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 32010                                  ;                (as only one module, sysconf.asm, includes this file).
 32011                                  ;    HV_LoadHigh - This should be defined when this module is going into
 32012                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 32013                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 32014                                  ;
 32015                                  ;******************************************************************************
 32016                                  
 32017                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 32018                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 32019                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 32020                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 32021                                  ; space problem (it's just such a nice round number, eh?).
 32022                                  
 32023                                  MAXUMB	equ	16
 32024                                  
 32025                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 32026                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 32027                                  
 32028                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 32029                                  SystemPSPOwner	equ	8
 32030                                  ;JapanPSPOwner	equ	9
 32031                                  
 32032                                  ; for LoadHigh and DeviceHigh:
 32033                                  ;
 32034                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 32035                                  ;	          UnHideUMBs().
 32036                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 32037                                  ;	           line.
 32038                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 32039                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 32040                                  ;	          given a command-line like "/L:3,500;4"
 32041                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 32042                                  ;	          matching its index number was specified on the command-line;
 32043                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 32044                                  ;	          will be set to 1.  All others will be set to 0.
 32045                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 32046                                  ;	          specified by the user for a UMB (in the above example, all
 32047                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 32048                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 32049                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 32050                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 32051                                  ;	           for details).
 32052                                  
 32053 000023FB 00                      fInHigh:  db	0
 32054 000023FC 00                      fUmbTiny: db	0
 32055 000023FD 0000                    SegLoad:  dw	0
 32056 000023FF 00                      UmbLoad:  db	0
 32057 00002400 00<rep 10h>             UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 32058 00002410 0000<rep 10h>           UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 32059 00002430 00                      fm_umb:   db	0
 32060 00002431 00                      fm_strat: db	0
 32061 00002432 00                      fm_argc:  db	0	
 32062                                  
 32063                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 32064                                  ; UmbLoad is set to the UMB number given.
 32065                                  
 32066                                  UNSPECIFIED	equ	-1
 32067                                  
 32068                                  ;%endif ; 27/10/2022
 32069                                  
 32070                                  ;****************************************************************** RICHID ****
 32071                                  
 32072                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 32073                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 32074                                  
 32075                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32076                                  ; (SYSINIT:212Bh)	
 32077                                  
 32078                                  		;public	DevEntry
 32079                                  
 32080 00002433 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 32081 00002435 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 32082 00002437 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 32083 00002439 00000000                DevEntry:	dd	0	; Entry point to the device driver
 32084 0000243D 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 32085                                  ; 30/12/2022
 32086                                  ; 27/10/2022 
 32087 00002441 00                      ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 32088                                  ;
 32089 00002442 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 32090 00002443 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 32091 00002445 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 32092 00002447 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 32093                                  ;
 32094 00002449 00000000                DevXMSAddr:	dd	0
 32095                                  ;
 32096 0000244D 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 32097 0000244F 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 32098                                  ;
 32099 00002451 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 32100                                  				;  is being loaded into UMB
 32101 00002452 0000                    DevSizeOption:	dw	0	; SIZE= option
 32102                                  ;
 32103 00002454 00                      Int12Lied:	db	0	; did we trap int 12 ?
 32104 00002455 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 32105 00002457 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 32106                                  ;
 32107 0000245F 00                      FirstUMBLinked:	db	0
 32108 00002460 0000                    DevDOSData:	dw	0	; segment of DOS Data
 32109 00002462 00000000                DevCmdLine:	dd	0	; Current Command line
 32110 00002466 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 32111                                  				; to use the file name in the command line
 32112                                  ; 13/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 32113                                  ;	ifdef	dblspace_hooks
 32114 00002467 00                      MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 32115                                  ;	endif
 32116                                  
 32117                                  ; ===========================================================================
 32118                                  
 32119                                  ; 31/03/2019 - Retro DOS v4.0
 32120                                  
 32121                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32122                                  ; (SYSINIT:215Eh)
 32123                                  
 32124                                  ;----------------------------------------------------------------------------
 32125                                  ;
 32126                                  ; procedure : doconf
 32127                                  ;
 32128                                  ;             Config file is parsed initially with this routine. For the
 32129                                  ;             Subsequent passes 'multi_pass' entry is used .
 32130                                  ;
 32131                                  ;----------------------------------------------------------------------------
 32132                                  
 32133                                  	; 27/10/2022
 32134                                  doconf:
 32135 00002468 0E                      	push	cs
 32136 00002469 1F                      	pop	ds
 32137                                  
 32138 0000246A B80037                  	mov	ax,3700h
 32139                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 32140 0000246D CD21                    	int	21h
 32141 0000246F 8816[BC4B]              	mov	[command_line+1],dl	; set in default command line
 32142                                  
 32143                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21  IO.SYS)
 32144                                  ; 27/10/2022
 32145                                  ;;ifdef	MULTI_CONFIG
 32146                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 32147 00002473 8816[BA4B]              	mov	[def_swchr],dl ; 31/03/2019 
 32148                                  ;;endif	;MULTI_CONFIG
 32149                                  
 32150 00002477 BA[D14A]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 32151 0000247A B8003D                  	mov	ax,3D00h
 32152                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 32153 0000247D F9                      	stc				;in case of int 24
 32154 0000247E CD21                    	int	21h			;function request
 32155 00002480 7309                    	jnc	short noprob		; brif opened okay
 32156                                  
 32157                                  ; 31/12/2022
 32158                                  ; 27/10/2022
 32159                                  ;;ifdef	MULTI_CONFIG
 32160 00002482 E8A019                  	call	kbd_read		; we still want to give the guy
 32161                                  ;					; a chance to select clean boot!
 32162                                  ;;endif					; (ie, no autoexec.bat processing)
 32163 00002485 C606[CD02]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 32164 0000248A C3                      	retn
 32165                                  noprob: 				;get file size (note < 64k!!)
 32166 0000248B 89C3                    	mov	bx,ax  ; File handle
 32167 0000248D 31C9                    	xor	cx,cx			; 0
 32168 0000248F 31D2                    	xor	dx,dx			; 0
 32169                                  	;mov	ax,4202h
 32170 00002491 B80242                  	mov	ax,(LSEEK<<8)|2
 32171 00002494 CD21                    	int	21h
 32172 00002496 A3[5603]                	mov	[count],ax		; dx:ax = file size ; 08/09/2023
 32173                                  					; 08/09/2023 - Erdogan Tan - Note:
 32174 00002499 31D2                    	xor	dx,dx			; dx already must be 0 here ; 08/09/2023
 32175                                  					; I am not removing 'xor dx,dx' here
 32176                                  					; for MSDOS compatibility.
 32177                                  					; ((Also PCDOS 7.1 has 'xor dx,dx' here))
 32178                                  					; (Error will be same if CONGIG.SYS file
 32179                                  					;  size > 64KB) 
 32180                                  	;mov	ax,4200h
 32181 0000249B B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 32182 0000249E CD21                    	int	21h
 32183                                  
 32184                                  	; 31/12/2022 - Retro DOS v4.2 
 32185 000024A0 8B16[A502]              	mov	dx,[ALLOCLIM]		;use current alloclim value
 32186                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32187                                  	;mov	dx,[top_of_cdss] 
 32188                                  
 32189 000024A4 A1[5603]                	mov	ax,[count]
 32190 000024A7 A3[D002]                	mov	[config_size],ax	;save the size of config.sys file.
 32191 000024AA E868EE                  	call	ParaRound
 32192 000024AD 29C2                    	sub	dx,ax
 32193                                  
 32194                                  ; 31/12/2022
 32195                                  ; 27/10/2022
 32196                                  ;ifdef	MULTI_CONFIG
 32197                                  ;
 32198                                  ;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 32199                                  ;  CONFIG.SYS image, and later for building the initial environment) need
 32200                                  ;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 32201                                  ;  we (may) add a variable to the environment that does not explicity appear
 32202                                  ;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 32203                                  ;  The default setting for CONFIG cannot result in more than 1 paragraph
 32204                                  ;  of extra space, so here we account for it (the worst case of course is
 32205                                  ;  when CONFIG.SYS is some very small size, like 0 -JTP)
 32206                                  ;
 32207 000024AF 4A                      	dec	dx                      ;reserve 1 additional paragraph
 32208 000024B0 8916[6219]              	mov	[config_wrkseg],dx      ;this is the segment to be used for
 32209 000024B4 29C2                    	sub	dx,ax                   ;rebuilding the config.sys memory image
 32210                                  ;;endif	;MULTI_CONFIG
 32211                                  
 32212 000024B6 83EA11                  	sub	dx,11h			;room for header
 32213                                  	
 32214                                  	; 31/12/2022
 32215 000024B9 8916[A502]              	mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 32216 000024BD 8916[A302]              	mov	[CONFBOT],dx
 32217                                  	
 32218                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32219                                  	;mov	[top_of_cdss],dx
 32220                                  	;call    TempCDS 
 32221                                  	; 31/12/2022
 32222                                  	; 11/12/2022
 32223                                  	; ds <> cs 
 32224                                  	;mov	dx,[cs:top_of_cdss]
 32225                                  
 32226                                  	; 08/09/2023
 32227                                  	; ds = cs
 32228 000024C1 8B0E[5603]              	mov	cx,[count]
 32229                                  	
 32230 000024C5 8EDA                    	mov	ds,dx
 32231 000024C7 8EC2                    	mov	es,dx
 32232                                  
 32233 000024C9 31D2                    	xor	dx,dx
 32234                                  	; 08/09/2023
 32235                                  	;mov	cx,[cs:count]
 32236 000024CB B43F                    	mov	ah,3Fh
 32237                                  	;mov	ah,READ  ; 3Fh
 32238 000024CD F9                      	stc				;in case of int 24
 32239 000024CE CD21                    	int	21h			;function request
 32240 000024D0 9C                      	pushf
 32241                                  
 32242                                  ; find the eof mark in the file. if present,then trim length.
 32243                                  
 32244 000024D1 50                      	push	ax
 32245 000024D2 57                      	push	di
 32246 000024D3 51                      	push	cx
 32247 000024D4 B01A                    	mov	al,1Ah			; eof mark
 32248 000024D6 89D7                    	mov	di,dx			; point to buffer
 32249 000024D8 E305                    	jcxz	puteol			; no chars
 32250 000024DA F2AE                    	repnz	scasb			; find end
 32251 000024DC 7501                    	jnz	short puteol		; none found and count exhausted
 32252                                  
 32253                                  ; we found a 1a. back up
 32254                                  
 32255 000024DE 4F                      	dec	di			; backup past 1Ah
 32256                                  
 32257                                  ;  just for the halibut, stick in an extra eol
 32258                                  
 32259                                  puteol:
 32260 000024DF B00D                    	mov	al,cr ; 0Dh
 32261 000024E1 AA                      	stosb
 32262 000024E2 B00A                    	mov	al,lf  ;0Ah
 32263 000024E4 AA                      	stosb
 32264 000024E5 29D7                    	sub	di,dx			; difference moved
 32265                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32266                                  	;mov	[cs:count],di		; new count
 32267                                  
 32268                                  	; 11/12/2022	
 32269                                  	; 31/03/2019 - Retro DOS v4.0
 32270 000024E7 0E                      	push	cs
 32271 000024E8 1F                      	pop	ds
 32272                                  
 32273 000024E9 893E[5603]              	mov	[count],di		; new count
 32274                                  
 32275 000024ED 59                      	pop	cx
 32276 000024EE 5F                      	pop	di
 32277 000024EF 58                      	pop	ax
 32278                                  
 32279                                  	; 11/12/2022
 32280                                  	; 27/10/2022
 32281                                  	;push	cs
 32282                                  	;pop	ds
 32283                                  
 32284 000024F0 50                      	push	ax
 32285                                  	;mov	ah,CLOSE
 32286 000024F1 B43E                    	mov	ah,3Eh
 32287 000024F3 CD21                    	int	21h
 32288 000024F5 58                      	pop	ax
 32289 000024F6 9D                      	popf
 32290 000024F7 7204                    	jc	short conferr 		;if not we've got a problem
 32291 000024F9 39C1                    	cmp	cx,ax
 32292 000024FB 742C                    	jz	short getcom		;couldn't read the file
 32293                                  conferr:
 32294 000024FD BA[D14A]                	mov	dx,config		;want to print config error
 32295 00002500 E82525                  	call	badfil
 32296                                  	; 14/04/2024
 32297                                  endconv:	; 01/01/2023
 32298 00002503 C3                      	retn
 32299                                  
 32300                                  ;----------------------------------------------------------------------------
 32301                                  ;
 32302                                  ; entry : multi_pass
 32303                                  ;
 32304                                  ;             called to execute device=,install= commands
 32305                                  ;
 32306                                  ;----------------------------------------------------------------------------
 32307                                  
 32308                                  	; 27/10/2022
 32309                                  multi_pass:
 32310 00002504 0E                      	push	cs
 32311 00002505 1F                      	pop	ds
 32312                                  
 32313 00002506 803E[CD02]0A            	cmp	byte [multi_pass_id],10
 32314                                  ;jae_endconv:
 32315 0000250B 73F6                    	jae	short endconv 		; do nothing. just return.
 32316                                  
 32317                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32318 0000250D FF36[A302]              	push	word [CONFBOT]
 32319                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32320                                  	;push	word [top_of_cdss]
 32321 00002511 07                      	pop	es			; es -> confbot
 32322                                  
 32323 00002512 8B36[5803]              	mov	si,[org_count]
 32324 00002516 8936[5603]              	mov	[count],si		; set count
 32325 0000251A 31F6                    	xor	si,si ; 0
 32326 0000251C 8936[5A03]                      mov     [chrptr],si		; reset chrptr
 32327 00002520 8936[AF02]                      mov     [linecount],si		; reset linecount
 32328                                  
 32329 00002524 E88822                  	call	getchr
 32330 00002527 EB06                    	jmp	short conflp
 32331                                  
 32332                                  	; 14/04/2024
 32333                                  	; 01/01/2023
 32334                                  ;endconv:
 32335                                  	;retn	
 32336                                  
 32337                                  getcom:
 32338                                  	; 03/01/2023
 32339                                  	; ds = cs
 32340 00002529 E8C016                          call    organize                ; organize the file
 32341 0000252C E88022                  	call	getchr
 32342                                  conflp: 
 32343 0000252F 72D2                    	jc	short endconv
 32344                                  
 32345 00002531 FF06[AF02]                      inc     word [linecount]	; increase linecount
 32346                                  
 32347                                  	; 08/09/2023
 32348 00002535 30E4                    	xor	ah,ah ; 0
 32349                                  	;mov	byte [multdeviceflag],0	; reset multdeviceflag.
 32350                                  	;mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 32351 00002537 8826[6619]              	mov	[multdeviceflag],ah ; 0
 32352 0000253B 8826[6919]              	mov	[setdevmarkflag],ah ; 0
 32353                                  
 32354 0000253F 3C0A                    	cmp	al,lf			; linefeed?
 32355 00002541 7448                    	je	short blank_line	;  then ignore this line.
 32356                                  
 32357                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32358                                  ; (SYSINIT:23CCh)
 32359                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32360                                  ;%if 0
 32361                                  
 32362                                  ;ifdef	MULTI_CONFIG
 32363                                  
 32364                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 32365                                  ;   number immediately following it....
 32366                                  
 32367 00002543 A2[6419]                        mov     [config_cmd],al         ; save original command code
 32368                                  	;and	al,NOT CONFIG_OPTION_QUERY
 32369 00002546 247F                    	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 32370                                  
 32371                                  	; 08/09/2023
 32372 00002548 3826[6519]              	cmp	[config_multi],ah ; 0
 32373                                  	;cmp	byte [config_multi],0	; is this a multi-config config.sys?
 32374 0000254C 7427                            je      short not_final		; no, line number is not embedded
 32375                                  
 32376 0000254E 50                              push    ax                      ;
 32377 0000254F E85D22                          call    getchr                  ; ignore end-of-image errors,
 32378 00002552 88C4                            mov     ah,al                   ; because if there's an error
 32379 00002554 E85822                          call    getchr                  ; fetching the line number that's
 32380 00002557 86C4                            xchg    al,ah                   ; supposed to be there, the next
 32381 00002559 A3[AF02]                        mov     [linecount],ax          ; getchr call will get the same error
 32382 0000255C 58                              pop     ax
 32383                                  ;
 32384                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 32385                                  ;   which to obtain its original program name, it grovels through all of
 32386                                  ;   memory to find the filename that was used to exec it; it wants to find
 32387                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 32388                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 32389                                  ;   immediately before the filename, but since we are now storing line # info
 32390                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 32391                                  ;   spot.
 32392                                  ;
 32393                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 32394                                  ;   over the line number info, since we no longer need that info anyway. This
 32395                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 32396                                  ;   retrieved.
 32397                                  ;
 32398 0000255D 803E[CD02]02                    cmp	byte [multi_pass_id],2	; final pass?
 32399 00002562 7211                            jb	short not_final		; no
 32400                                          ;test	word [install_flag],have_install_cmd
 32401 00002564 F606[CE02]01            	test	byte [install_flag],have_install_cmd ; 1
 32402 00002569 7407                            jz	short final		; no install cmds, so yes it is
 32403 0000256B 803E[CD02]03                    cmp	byte [multi_pass_id],3	; final pass?
 32404 00002570 7203                            jb	short not_final		; no
 32405                                  final:                                  ;
 32406 00002572 268804                  	mov	[es:si],al		; save backward-compatible command code
 32407                                  not_final:                              ;
 32408                                  ;endif
 32409                                  
 32410                                  ; 31/12/2022
 32411                                  ;%endif ; 27/10/2022
 32412                                  
 32413 00002575 88C4                    	mov	ah,al
 32414 00002577 E83522                  	call	getchr
 32415 0000257A 7314                    	jnc	short tryi
 32416                                  
 32417 0000257C 803E[CD02]02            	cmp	byte [multi_pass_id],2
 32418                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 32419                                  	; 27/10/2022
 32420 00002581 7380                    	jnb	short endconv	
 32421 00002583 E90009                  	jmp	badop
 32422                                  	
 32423                                  coff:	
 32424                                  	; 11/12/2022
 32425                                  	; ds = cs
 32426                                  	;push	cs
 32427                                  	;pop	ds
 32428 00002586 E81D22                  	call	newline
 32429 00002589 EBA4                    	jmp	short conflp	; 13/05/2019
 32430                                  
 32431                                  blank_line:
 32432 0000258B E82122                  	call	getchr
 32433 0000258E EB9F                    	jmp	short conflp
 32434                                  
 32435                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32436                                  ; 11/12/2022
 32437                                  ; (there is not a jump or call to here from anywhere!)
 32438                                  ;coff_p:
 32439                                  	;push	cs
 32440                                  	;pop	ds
 32441                                  
 32442                                  ;to handle install= commands,we are going to use multi-pass.
 32443                                  ;the first pass handles the other commands and only set install_flag when
 32444                                  ;it finds any install command. the second pass will only handle the
 32445                                  ;install= command.
 32446                                  
 32447                                  ;------------------------------------------------------------------------------
 32448                                  ;install command
 32449                                  ;------------------------------------------------------------------------------
 32450                                  
 32451                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32452                                  	; (SYSINIT:2250h)
 32453                                  tryi:
 32454 00002590 803E[CD02]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 32455 00002595 7503                    	jne	short not_init_pass
 32456 00002597 E97F01                  	jmp	multi_try_doshi
 32457                                  not_init_pass:
 32458 0000259A 803E[CD02]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 32459                                          ; 11/12/2022
 32460                                  	;je	short multi_pass_coff2	; now it is NOPs
 32461 0000259F 74E5                    	je	short coff
 32462                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32463                                  	;je	short multi_pass_coff	
 32464                                  					; This pass can be made use of if
 32465                                  					; we want do some config.sys process
 32466                                  					; after device drivers are loaded
 32467                                  					; and before install= commands
 32468                                  					; are processed
 32469                                  
 32470 000025A1 803E[CD02]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 32471 000025A6 741D                    	je	short multi_try_i
 32472 000025A8 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 32473                                  	; 11/12/2022
 32474                                  	;je	short multi_pass_coff2
 32475 000025AB 74D9                    	je	short coff
 32476                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32477                                  	;je	short multi_pass_coff	
 32478                                  
 32479                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 32480                                  ;       but don't process them now.        
 32481                                          
 32482 000025AD 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 32483                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32484 000025B0 7507                    	jne	short precheck_installhigh ; the first pass is for normal operation.
 32485                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32486                                  	;jne	short tryb	
 32487                                  	
 32488                                  	;or	word [install_flag],have_install_cmd ; set the flag
 32489 000025B2 800E[CE02]01            	or	byte [install_flag],have_install_cmd ; 1
 32490                                  multi_pass_coff2:
 32491 000025B7 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 32492                                  
 32493                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32494                                  ; (SYSINIT:2448h)
 32495                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32496                                  ;%if 0
 32497                                  precheck_installhigh:
 32498 000025B9 80FC57                  	cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 32499 000025BC 756B                    	jne     short tryb		; carry on with normal processing
 32500                                  	;or	word [install_flag],have_install_cmd
 32501 000025BE 800E[CE02]01            	or	byte [install_flag],have_install_cmd ; 1
 32502 000025C3 EBC1                    	jmp	short coff
 32503                                  ;%endif ; 27/10/2022
 32504                                  
 32505                                  multi_try_i:
 32506 000025C5 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I' ; install= command?
 32507                                  	; 31/12/2022 - Retro DOS v4.2
 32508 000025C8 750A                    	jne	short multi_try_n	; no, check for installhigh
 32509                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32510                                  	;jne	short multi_pass_filter
 32511                                  
 32512                                  ; 31/12/2022
 32513                                  ;%if 1 
 32514                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32515                                  ;%if 0
 32516                                  ;ifdef	MULTI_CONFIG
 32517 000025CA E84F20                  	call	query_user              ; query the user if config_cmd
 32518 000025CD 7241                    	jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 32519                                  ;endif
 32520                                  ;%endif ; 27/10/2022
 32521                                  
 32522 000025CF E8C7EC                  	call	do_install_exec 	;install it.
 32523 000025D2 EBB2                    	jmp	short coff		;to handle next install= command.
 32524                                  
 32525                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32526                                  ; (SYSINIT:2463h)
 32527                                  ;%if 1
 32528                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32529                                  ;%if 0
 32530                                  
 32531                                  multi_try_n:
 32532 000025D4 80FC57                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 32533 000025D7 7537                            jne	short multi_pass_filter	; no. ignore this.
 32534                                  ;ifdef	MULTI_CONFIG
 32535 000025D9 E84020                          call    query_user              ; query the user if config_cmd
 32536 000025DC 7232                            jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 32537                                  ;endif
 32538                                  
 32539                                  ;       The memory environment is in its normal DOS state, so do
 32540                                  ;       the standard calls to set the alloc strategy for loading high
 32541                                  
 32542 000025DE B80058                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 32543 000025E1 CD21                    	int	21h			;get alloc strategy
 32544 000025E3 89C3                    	mov	bx,ax
 32545 000025E5 53                              push    bx                      ; save for the return
 32546                                  
 32547 000025E6 81CB8000                        or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 32548 000025EA B80158                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 32549 000025ED CD21                    	int	21h			;set alloc strategy
 32550                                  
 32551 000025EF B80258                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 32552 000025F2 CD21                            int     21h                     ; get link state
 32553 000025F4 30E4                            xor     ah,ah                   ; clear top byte
 32554 000025F6 50                              push    ax                      ; save for return
 32555                                  
 32556 000025F7 B80358                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 32557 000025FA BB0100                  	mov	bx,1
 32558 000025FD CD21                    	int	21h			;link in UMBs
 32559                                  
 32560 000025FF E897EC                  	call	do_install_exec 	;install it.
 32561                                  
 32562 00002602 B80358                          mov     ax,(ALLOCOPER<<8)|3
 32563 00002605 5B                              pop     bx                      ; recover original link state
 32564 00002606 CD21                            int     21h
 32565 00002608 5B                              pop     bx                      ; recover original alloc strategy
 32566 00002609 B80158                          mov     ax,(ALLOCOPER<<8)|1
 32567 0000260C CD21                            int     21h
 32568                                  
 32569                                  	;jmp	short coff		;to handle next install= command.
 32570                                  	; 01/01/2023
 32571 0000260E EBA7                    	jmp	short multi_pass_coff2
 32572                                  
 32573                                  ;%endif ; 27/10/2022
 32574                                  
 32575                                  multi_pass_filter:
 32576 00002610 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 32577 00002613 740A                    	je	short multi_pass_adjust
 32578 00002615 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 32579 00002618 7405                    	je	short multi_pass_adjust
 32580 0000261A 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 32581 0000261D 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 32582                                  
 32583                                  multi_pass_adjust:			; these commands need to
 32584 0000261F FF0E[5A03]              	dec	word [chrptr]		;  adjust chrptr,count
 32585 00002623 FF06[5603]              	inc	word [count]		;  for newline proc.
 32586                                  
 32587                                  multi_pass_coff:
 32588                                  	; 11/12/2022
 32589                                  	;jmp	short coff		; to handle next install= commands.
 32590                                  	; 01/01/2023
 32591 00002627 EB8E                    	jmp	short multi_pass_coff2
 32592                                  
 32593                                  ;------------------------------------------------------------------------------
 32594                                  ; buffer command
 32595                                  ;------------------------------------------------------------------------------
 32596                                  
 32597                                  ;******************************************************************************
 32598                                  ;									      *
 32599                                  ; function: parse the parameters of buffers= command.			      *
 32600                                  ;									      *
 32601                                  ; input :								      *
 32602                                  ;	es:si -> parameters in command line.				      *
 32603                                  ; output:								      *
 32604                                  ;	buffers set							      *
 32605                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 32606                                  ;	h_buffers set if secondary buffer cache specified.		      *
 32607                                  ;									      *
 32608                                  ; subroutines to be called:						      *
 32609                                  ;	sysinit_parse							      *
 32610                                  ; logic:								      *
 32611                                  ; {									      *
 32612                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 32613                                  ;	set dx,cx to 0; 						      *
 32614                                  ;	reset buffer_slash_x;						      *
 32615                                  ;	while (end of command line)					      *
 32616                                  ;	{ sysinit_parse;						      *
 32617                                  ;	  if (no error) then						      *
 32618                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 32619                                  ;		    buffer_slash_x = 1					      *
 32620                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 32621                                  ;			  buffers = result_val._$P_picked_val;		      *
 32622                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 32623                                  ;	  else	{show error message;error exit} 			      *
 32624                                  ;	};								      *
 32625                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 32626                                  ; };									      *
 32627                                  ;									      *
 32628                                  ;******************************************************************************
 32629                                  
 32630                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32631                                  	; (SYSINIT:229Ch)
 32632                                  tryb:
 32633 00002629 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 32634 0000262C 755C                    	jne	short tryc
 32635                                  
 32636                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32637                                  ; (SYSINIT:24BFh)
 32638                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32639                                  ;%if 0
 32640                                  ;ifdef	MULTI_CONFIG
 32641 0000262E E8EB1F                  	call	query_user		; query the user if config_cmd
 32642 00002631 7257                    	jc	short tryc		; has the CONFIG_OPTION_QUERY bit set
 32643                                  ;endif
 32644                                  ;%endif ; 27/10/2022
 32645                                  
 32646                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32647                                  	; 18/12/2022
 32648 00002633 31C9                    	xor	cx,cx
 32649                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 32650 00002635 880E[1522]              	mov	[p_buffer_slash_x],cl ; 0
 32651                                  
 32652 00002639 BF[CE21]                	mov	di,buf_parms
 32653                                  	;xor	cx,cx	; 18/12/2022
 32654                                  	; 03/01/2023
 32655                                  	;mov	dx,cx
 32656                                  do7:
 32657 0000263C E82808                  	call	sysinit_parse
 32658 0000263F 7303                    	jnc	short if7		; parse error,
 32659                                  	;call	badparm_p		;  and show messages and end the search loop.
 32660                                  	;;jmp	short sr7
 32661                                  	; 31/12/2022
 32662                                  ;sr7:
 32663                                  	;jmp	coff
 32664                                  	; 03/01/2023
 32665 00002641 E91207                  	jmp	badparm_p_coff
 32666                                  if7:
 32667 00002644 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 32668 00002647 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 32669                                  	;cmp	word [result_val_swoff],switch_x
 32670 00002649 813E[1922][0E22]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 32671                                  	;jne	short if11
 32672                                  	; 31/12/2022
 32673 0000264F 74EB                    	je	short do7 ;je short en11
 32674                                  
 32675                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 32676                                  	;jmp	short en11 ; 31/12/2022
 32677                                  if11:
 32678                                  	;mov	ax,[rv_dword]
 32679 00002651 A1[1B22]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 32680 00002654 83F901                  	cmp	cx,1
 32681 00002657 7505                    	jne	short if13
 32682                                  
 32683 00002659 A3[1122]                	mov	[p_buffers],ax
 32684                                  	;jmp	short en11
 32685                                  	; 31/12/2022
 32686 0000265C EBDE                    	jmp	short do7
 32687                                  if13:
 32688 0000265E A3[1322]                	mov	[p_h_buffers],ax
 32689                                  en11:
 32690 00002661 EBD9                    	jmp	short do7
 32691                                  en7:
 32692 00002663 833E[1122]63            	cmp	word [p_buffers],99
 32693 00002668 760B                    	jbe	short if18
 32694                                  
 32695                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 32696                                  ;	jne	short if18
 32697                                  
 32698 0000266A E82508                  	call	badparm_p
 32699 0000266D C706[1322]0000          	mov	word [p_h_buffers],0
 32700 00002673 EB12                    	jmp	short sr7
 32701                                  if18:
 32702 00002675 A1[1122]                	mov	ax,[p_buffers]	; we don't have any problem.
 32703 00002678 A3[9902]                	mov	[buffers],ax	; now,let's set it really.
 32704                                  
 32705 0000267B A1[1322]                	mov	ax,[p_h_buffers]
 32706 0000267E A3[9B02]                	mov	[h_buffers],ax
 32707                                  
 32708                                  ;	mov	al,[p_buffer_slash_x]	; M016
 32709                                  ;	mov	[buffer_slash_x],al
 32710                                  
 32711 00002681 A1[AF02]                	mov	ax,[linecount]
 32712 00002684 A3[B902]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 32713                                  	; 31/12/2022
 32714                                  	;jmp	short sr7
 32715                                  	; 03/01/2023
 32716                                  sr7:
 32717 00002687 E9FCFE                  	jmp	coff
 32718                                  
 32719                                  ;------------------------------------------------------------------------------
 32720                                  ; break command
 32721                                  ;------------------------------------------------------------------------------
 32722                                  
 32723                                  ;****************************************************************************
 32724                                  ;									    *
 32725                                  ; function: parse the parameters of break = command.			    *
 32726                                  ;									    *
 32727                                  ; input :								    *
 32728                                  ;	es:si -> parameters in command line.				    *
 32729                                  ; output:								    *
 32730                                  ;	turn the control-c check on or off.				    *
 32731                                  ;									    *
 32732                                  ; subroutines to be called:						    *
 32733                                  ;	sysinit_parse							    *
 32734                                  ; logic:								    *
 32735                                  ; {									    *
 32736                                  ;	set di to brk_parms;						    *
 32737                                  ;	set dx,cx to 0; 						    *
 32738                                  ;	while (end of command line)					    *
 32739                                  ;	{ sysinit_parse;						    *
 32740                                  ;	  if (no error) then						    *
 32741                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 32742                                  ;		   set p_ctrl_break,on;					    *
 32743                                  ;	       else					  /*off 	 */ *
 32744                                  ;		   set p_ctrl_break,off;				    *
 32745                                  ;	  else {show message;error_exit};				    *
 32746                                  ;	};								    *
 32747                                  ;	if (no error) then						    *
 32748                                  ;	   dos function call to set ctrl_break check according to	    *
 32749                                  ; };									    *
 32750                                  ;									    *
 32751                                  ;****************************************************************************
 32752                                  
 32753                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32754                                  	; (SYSINIT:22FFh)
 32755                                  tryc:
 32756 0000268A 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 32757 0000268D 7539                    	jne	short trym
 32758                                  
 32759                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32760                                  ; (SYSINIT:2527h)
 32761                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32762                                  ;%if 0
 32763                                  ;ifdef	MULTI_CONFIG
 32764 0000268F E88A1F                  	call	query_user              ; query the user if config_cmd
 32765 00002692 7234                    	jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 32766                                  ;endif
 32767                                  ;%endif ; 27/10/2022
 32768                                  
 32769 00002694 BF[1F22]                	mov	di,brk_parms
 32770 00002697 31C9                    	xor	cx,cx
 32771                                  	; 03/01/2023
 32772                                  	;mov	dx,cx
 32773                                  do22:
 32774 00002699 E8CB07                  	call	sysinit_parse
 32775 0000269C 7303                    	jnc	short if22		; parse error
 32776                                  	;call	badparm_p		;  show message and end the search loop.
 32777                                  	;;jmp	short sr22
 32778                                  	; 31/12/2022
 32779                                  ;sr22:
 32780                                  	;jmp	coff
 32781                                  	; 03/01/2023
 32782 0000269E E9B506                  	jmp	badparm_p_coff
 32783                                  if22:
 32784 000026A1 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 32785 000026A4 7415                    	je	short en22		; then end the $endloop
 32786                                  
 32787                                  	;cmp	byte [result_val_itag],1
 32788 000026A6 803E[1822]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 32789 000026AB 7507                    	jne	short if26
 32790                                  
 32791 000026AD C606[4422]01            	mov	byte [p_ctrl_break],1	; turn it on
 32792                                  	;jmp	short en26
 32793                                  	; 31/12/2022
 32794 000026B2 EBE5                    	jmp	short do22
 32795                                  if26:
 32796 000026B4 C606[4422]00            	mov	byte [p_ctrl_break],0	; turn it off
 32797                                  en26:
 32798 000026B9 EBDE                    	jmp	short do22		; we actually set the ctrl break
 32799                                  en22:
 32800 000026BB B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 32801 000026BD B001                    	mov	al,1
 32802 000026BF 8A16[4422]              	mov	dl,[p_ctrl_break]
 32803 000026C3 CD21                    	int	21h
 32804                                  	; 31/12/2022
 32805                                  	;jmp	short sr22
 32806                                  	; 03/01/2023
 32807                                  sr22:
 32808 000026C5 E9BEFE                  	jmp	coff
 32809                                  
 32810                                  ;------------------------------------------------------------------------------
 32811                                  ; multitrack command
 32812                                  ;------------------------------------------------------------------------------
 32813                                  
 32814                                  ;******************************************************************************
 32815                                  ;									      *
 32816                                  ; function: parse the parameters of multitrack= command.		      *
 32817                                  ;									      *
 32818                                  ; input :								      *
 32819                                  ;	es:si -> parameters in command line.				      *
 32820                                  ; output:								      *
 32821                                  ;	turn multrk_flag on or off.					      *
 32822                                  ;									      *
 32823                                  ; subroutines to be called:						      *
 32824                                  ;	sysinit_parse							      *
 32825                                  ; logic:								      *
 32826                                  ; {									      *
 32827                                  ;	set di to brk_parms;						      *
 32828                                  ;	set dx,cx to 0; 						      *
 32829                                  ;	while (end of command line)					      *
 32830                                  ;	{ sysinit_parse;						      *
 32831                                  ;	  if (no error) then						      *
 32832                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 32833                                  ;		   set p_mtrk,on;					      *
 32834                                  ;	       else					  /*off 	 */   *
 32835                                  ;		   set p_mtrk,off;					      *
 32836                                  ;	  else {show message;error_exit};				      *
 32837                                  ;	};								      *
 32838                                  ;	if (no error) then						      *
 32839                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 32840                                  ;									      *
 32841                                  ; };									      *
 32842                                  ;									      *
 32843                                  ;******************************************************************************
 32844                                  
 32845                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32846                                  trym:
 32847 000026C8 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 32848 000026CB 7573                    	jne	short tryu
 32849                                  
 32850                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32851                                  ; (SYSINIT:2569h)
 32852                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32853                                  ;%if 0
 32854                                  ;ifdef	MULTI_CONFIG
 32855 000026CD E84C1F                  	call	query_user      ; query the user if config_cmd
 32856 000026D0 726E                    	jc	short tryu	; has the CONFIG_OPTION_QUERY bit set
 32857                                  ;endif
 32858                                  ;%endif	; 27/10/2022
 32859                                  
 32860 000026D2 BF[2323]                	mov	di,mtrk_parms
 32861 000026D5 31C9                    	xor	cx,cx
 32862                                  	; 03/01/2023
 32863                                  	;mov	dx,cx
 32864                                  do31:
 32865 000026D7 E88D07                  	call	sysinit_parse
 32866 000026DA 7303                    	jnc	short if31	; parse error
 32867                                  	;call	badparm_p	;  show message and end the search loop.
 32868                                  	;;jmp	short sr31
 32869                                  	; 31/12/2022
 32870                                  ;sr31:
 32871                                  	;jmp	coff
 32872                                  	; 03/01/2023
 32873 000026DC E97706                  	jmp	badparm_p_coff
 32874                                  if31:
 32875 000026DF 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 32876 000026E2 7415                    	je	short en31	; then end the $endloop
 32877                                  
 32878                                  	;cmp	byte [result_val_itag],1
 32879 000026E4 803E[1822]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 32880 000026E9 7507                    	jne	short if35
 32881                                  
 32882 000026EB C606[3723]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 32883                                  	;jmp	short en35
 32884                                  	; 31/12/2022
 32885 000026F0 EBE5                    	jmp	short do31
 32886                                  if35:
 32887 000026F2 C606[3723]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 32888                                  en35:
 32889 000026F7 EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 32890                                  en31:
 32891 000026F9 1E                      	push	ds
 32892                                  	;;mov	ax,Bios_Data ; 70h
 32893                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 32894                                  	; 21/10/2022
 32895 000026FA B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 32896 000026FD 8ED8                    	mov	ds,ax
 32897                                  
 32898 000026FF 2E803E[3723]00          	cmp	byte [cs:p_mtrk],0
 32899 00002705 7508                    	jne	short if39
 32900                                  
 32901 00002707 C706[A004]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 32902 0000270D EB06                    	jmp	short en39
 32903                                  if39:
 32904 0000270F C706[A004]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 32905                                  en39:
 32906 00002715 1F                      	pop	ds
 32907                                  	; 31/12/2022
 32908                                  	;jmp	short sr31
 32909                                  	; 03/01/2023
 32910                                  sr31:
 32911 00002716 E96DFE                  	jmp	coff
 32912                                  
 32913                                  ;----------------------------------------------------------------------------
 32914                                  ; DOS=HIGH/LOW command
 32915                                  ;----------------------------------------------------------------------------
 32916                                  
 32917                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32918                                  multi_try_doshi:
 32919 00002719 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 32920 0000271C 7403                    	je	short it_is_h
 32921                                  skip_it:
 32922 0000271E E9EFFE                  	jmp	multi_pass_filter
 32923                                  it_is_h:				; M003 - removed initing DevUMB
 32924                                  					;	 & runhigh
 32925                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32926                                  ; (SYSINIT:25C1h)
 32927                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32928                                  ;%if 0
 32929                                  ;ifdef	MULTI_CONFIG
 32930 00002721 E8F81E                  	call	query_user              ; query the user if config_cmd
 32931 00002724 72F8                    	jc	short skip_it		; has the CONFIG_OPTION_QUERY bit set
 32932                                  ;endif
 32933                                  ;%endif ; 27/10/2022
 32934                                  
 32935 00002726 BF[9923]                	mov	di,dos_parms
 32936 00002729 31C9                    	xor	cx,cx
 32937                                  	; 03/01/2023
 32938                                  	;mov	dx,cx
 32939                                  h_do_parse:
 32940 0000272B E83907                  	call	sysinit_parse
 32941 0000272E 7303                    	jnc	short h_parse_ok	; parse error
 32942                                  h_badparm:
 32943                                  	; 03/01/2023
 32944                                  	;call	badparm_p		; show message and end the search loop.
 32945                                  	;;jmp	short h_end
 32946                                  	; 11/12/2022
 32947                                  ;h_end:
 32948                                  	;jmp	coff
 32949                                  	; 03/01/2023
 32950 00002730 E92306                  	jmp	badparm_p_coff	
 32951                                  h_parse_ok:
 32952 00002733 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 32953 00002736 7405                    	je	short h_end		; then end the $endloop
 32954 00002738 E8AE07                  	call	ProcDOS
 32955 0000273B EBEE                    	jmp	short h_do_parse
 32956                                  	; 11/12/2022
 32957                                  	; 03/01/2023
 32958                                  h_end:
 32959 0000273D E946FE                  	jmp	coff
 32960                                  
 32961                                  ;-----------------------------------------------------------------------------
 32962                                  ; devicehigh command
 32963                                  ;-----------------------------------------------------------------------------
 32964                                  
 32965                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32966                                  tryu:
 32967 00002740 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 32968 00002743 7554                    	jne	short tryd
 32969                                  
 32970                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32971                                  ; (SYSINIT:25E9h)
 32972                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32973                                  ;%if 0
 32974                                  ;ifdef	MULTI_CONFIG
 32975 00002745 E8D41E                  	call	query_user              ; query the user if config_cmd
 32976 00002748 724F                    	jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 32977                                  ;endif
 32978                                  ;%endif ; 28/10/2022
 32979                                  
 32980                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32981                                  ;%if 0
 32982                                  	; 01/01/2023
 32983                                  	; ds = cs
 32984                                  
 32985 0000274A E83108                  	call	InitVar
 32986 0000274D E80510                  	call	ParseSize		; process the size= option
 32987                                  	;jnc	short tryu_0
 32988                                  	; 31/12/2022
 32989 00002750 720C                    	jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 32990                                  
 32991                                  ;%endif ; 28/10/2022
 32992                                  
 32993                                  ; 31/12/2022
 32994                                  %if 0
 32995                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32996                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 32997                                  	;mov	[cs:badparm_seg], es
 32998                                  	; 11/12/2022
 32999                                  	; ds = cs
 33000                                  	mov	[badparm_off], si
 33001                                  	mov	[badparm_seg], es
 33002                                  
 33003                                  	; 31/12/2022
 33004                                  	;call	ParseSize
 33005                                  	;jnc	short tryu_2	; 28/10/2022
 33006                                  	
 33007                                  	;call	badparm_p
 33008                                  	;jmp	coff
 33009                                  	; 03/01/2023
 33010                                  	jmp	badparm_p_coff
 33011                                  %endif
 33012                                  
 33013                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33014                                  ; (SYSINIT:2606h)
 33015                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33016                                  ;%if 0
 33017                                  tryu_0:
 33018                                  	;mov	ax,[cs:DevSizeOption]
 33019                                  	; 31/12/2022
 33020 00002752 A1[5224]                	mov	ax,[DevSizeOption] ; ds = cs
 33021 00002755 09C0                    	or	ax,ax
 33022 00002757 7510                    	jnz	short tryu_2
 33023                                  
 33024 00002759 E8B408                  	call	ParseVar
 33025 0000275C 730B                    	jnc	short tryu_2
 33026                                  tryu_1:
 33027                                  	; 31/12/2022
 33028                                  	; ds = cs
 33029 0000275E 8936[6B19]              	mov	[badparm_off], si
 33030 00002762 8C06[6D19]              	mov	[badparm_seg], es
 33031                                  	;mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 33032                                  	;mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 33033                                  	
 33034                                  	;call	badparm_p		; so all we have to do is choke and
 33035                                  	;jmp	coff			; die, rather verbosely.
 33036                                  	; 03/01/2023
 33037 00002766 E9ED05                  	jmp	badparm_p_coff
 33038                                  
 33039                                  ;%endif ; 28/10/2022
 33040                                  
 33041                                  tryu_2:	
 33042 00002769 56                      	push	si
 33043 0000276A 06                      	push	es
 33044                                  
 33045                                  	; 08/09/2023 - Retro DOS 4.2 IO.SYS (Optimization)
 33046                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2623h
 33047                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:2B17h
 33048                                  tryu_3:
 33049 0000276B 268A04                  	mov	al,[es:si]
 33050 0000276E 3C0D                    	cmp	al,cr
 33051                                  	; 14/04/2024
 33052                                  	;je	short tryu_4
 33053                                  	; 08/09/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
 33054 00002770 740C                    	je	short tryu_5
 33055 00002772 3C0A                    	cmp	al,lf
 33056 00002774 740A                    	je	short tryu_4
 33057 00002776 E81120                  	call	delim
 33058 00002779 7405                    	jz	short tryu_4
 33059 0000277B 46                      	inc	si
 33060 0000277C EBED                    	jmp	short tryu_3
 33061                                  
 33062                                  	; 14/04/2024
 33063                                  	; 08/09/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
 33064                                  tryu_5:
 33065 0000277E B020                    	mov     al,20h ; ' '   ; blank instead of cr
 33066                                  
 33067                                  tryu_4:	
 33068                                  	; 11/12/2022
 33069                                  	; ds = cs
 33070 00002780 A2[6624]                	mov	[DevSavedDelim],al
 33071                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 33072                                  					;  it with null
 33073                                  	; 18/12/2022
 33074 00002783 29DB                    	sub	bx,bx
 33075 00002785 26881C                  	mov	[es:si],bl ; 0
 33076                                   	;mov	byte [es:si],0
 33077                                  
 33078 00002788 07                      	pop	es
 33079 00002789 5E                      	pop	si	; 14/04/2024
 33080                                  
 33081                                  ;------------------------------------------------------------------------------
 33082                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 33083                                  ;------------------------------------------------------------------------------
 33084                                  
 33085                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33086                                  ; (SYSINIT:2642h)
 33087                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33088                                  ;%if 0
 33089                                  ; 10/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 33090                                  ; MSDOS 6.21 IO.SYS - SYSINIT:2642h
 33091                                  %if 1
 33092                                  	; 01/01/2023
 33093                                  	; ds = cs
 33094 0000278A E8F00C                  	call	UmbTest			; See if UMBs are around...
 33095                                  	; 01/01/2023
 33096                                  	;jnc	short NrmTst		; ...yep. So do that normal thang.
 33097                                  	
 33098                                  	;mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 33099                                  	; 31/12/2022
 33100                                  	; ds = cs, bx = 0
 33101                                  	;mov	byte [DeviceHi],bl ; 0
 33102                                  	;jmp	short LoadDevice
 33103                                  	; 01/01/2023
 33104 0000278D 7222                    	jc	short LoadDevice ; bl = 0
 33105                                  %endif
 33106                                  ;%endif
 33107                                  ;------------------------------------------------------------------------------
 33108                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 33109                                  ;------------------------------------------------------------------------------
 33110                                  
 33111                                  NrmTst:
 33112                                  	; 11/12/2022
 33113                                  	; ds = cs
 33114                                  	;;mov	byte [cs:DeviceHi],0
 33115                                  	;mov	byte [DeviceHi],0
 33116                                  	; 18/12/2022
 33117                                  	; bx = 0
 33118 0000278F 381E[4224]              	cmp	[DevUMB],bl ; 0
 33119                                  	;cmp	byte [DevUMB],0
 33120                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 33121 00002793 741C                    	je	short LoadDevice	; no, we don't
 33122                                  	;mov	byte [cs:DeviceHi],1
 33123                                  	; 11/12/2022
 33124                                  	;mov	byte [DeviceHi],1
 33125                                  	; 18/12/2022
 33126 00002795 FEC3                    	inc	bl ; mov bl,1 ; (*)
 33127                                  	; 11/12/2022
 33128                                  	;jmp	short LoadDevice2	; 11/12/2022
 33129 00002797 EB18                    	jmp	short LoadDevice
 33130                                  
 33131                                  ;------------------------------------------------------------------------------
 33132                                  ; device command
 33133                                  ;------------------------------------------------------------------------------
 33134                                  
 33135                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33136                                  	; (SYSINIT:2665h)
 33137                                  
 33138                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33139                                  	; (SYSINIT:2401h)
 33140                                  tryd:
 33141                                  	; 11/12/2022
 33142                                  	;xor 	bx,bx ; 31/12/2022
 33143                                  	;
 33144 00002799 80FC44                          cmp     ah,CONFIG_DEVICE ; 'D'
 33145 0000279C 7403                    	je	short gotd
 33146                                  skip_it2:
 33147 0000279E E9FC02                  	jmp	tryq
 33148                                  gotd:
 33149                                  
 33150                                  ; 31/12/2022 - Retro DOS v4.2
 33151                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33152                                  ;%if 0
 33153                                  ;ifdef	MULTI_CONFIG
 33154 000027A1 E8781E                  	call	query_user              ; query the user if config_cmd
 33155 000027A4 72F8                    	jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 33156                                  ;endif
 33157                                  ;%endif ; 28/10/2022
 33158                                  
 33159                                  	; 31/12/2022
 33160 000027A6 29DB                    	sub	bx,bx
 33161                                  	; bx = 0
 33162                                  	; 11/12/2022
 33163                                  	; ds = cs
 33164                                  	;mov	byte [DeviceHi],0
 33165                                  	;mov	word [DevSizeOption],0
 33166 000027A8 891E[5224]              	mov	[DevSizeOption],bx ; 0
 33167 000027AC C606[6624]20            	mov	byte [DevSavedDelim],' '
 33168                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 33169                                  	;mov	word [cs:DevSizeOption],0
 33170                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 33171                                  					;  be replaced with a ' '
 33172                                  LoadDevice:                             ; device= or devicehigh= command.
 33173                                  	; 11/12/2022
 33174                                  	;mov	byte [DeviceHi],0
 33175 000027B1 881E[5124]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 33176                                  LoadDevice2:
 33177                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 33178                                  	;
 33179                                  	;push    cs
 33180                                          ;pop     ds
 33181                                  	;
 33182                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 33183                                  	;mov	[bpb_addr+2],es
 33184                                  	;
 33185                                  	;mov	[DevCmdLine],si		; save it for ourself
 33186                                  	;mov	[DevCmdLine+2],es
 33187                                  	;
 33188                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 33189                                  
 33190                                  	; 11/12/2022
 33191                                  	; ds = cs
 33192                                  	;mov	bx,cs
 33193                                  	;mov	ds,bx
 33194                                  
 33195                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 33196 000027B5 8936[8103]              	mov	[bpb_addr],si
 33197                                  	;mov	[cs:bpb_addr+2],es
 33198 000027B9 8C06[8303]              	mov	[bpb_addr+2],es
 33199                                  
 33200                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 33201 000027BD 8936[6224]              	mov	[DevCmdLine],si
 33202                                  	;mov	[cs:DevCmdLine+2],es	
 33203 000027C1 8C06[6424]              	mov	[DevCmdLine+2],es
 33204                                  
 33205                                  	; 31/12/2022 - Retro DOS v4.2
 33206 000027C5 C606[6A19]00            	mov	byte [driver_units],0	; clear total block units for driver	
 33207                                  
 33208 000027CA E82520                  	call	round
 33209                                  	
 33210 000027CD E8910E                  	call	SizeDevice
 33211 000027D0 723F                    	jc	short BadFile
 33212                                  
 33213                                  	; 11/12/2022
 33214                                  	; ds = cs
 33215                                  
 33216                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 33217                                  
 33218                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33219                                  ; (SYSINIT:26A4h)
 33220                                  
 33221                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33222                                  ;%if 0
 33223 000027D2 C606[4124]01            	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 33224                                  
 33225                                  	; 22/07/2023
 33226                                  	;mov	al,[DeviceHi]		; If not using upper memory,
 33227 000027D7 800E[5124]00            	or	byte [DeviceHi],0	; Skip all this and go on to
 33228                                  	; 10/07/2023
 33229                                  	;or	al,al
 33230 000027DC 741E                    	jz	short DevConvLoad	; the actual load.
 33231                                  
 33232                                  	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 33233 000027DE A0[FF23]                	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 33234                                  
 33235 000027E1 3CFF                    	cmp	al,-1			; If umb0 not specified, it's old style
 33236 000027E3 7417                    	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 33237                                  
 33238 000027E5 FE0E[4124]              	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 33239                                  
 33240 000027E9 E8590A                  	call	GetLoadSize		; Returns size of first UMB specified
 33241 000027EC 09C0                    	or	ax,ax
 33242 000027EE 7406                    	jz	short tryd_1		; If size1 not specified, nada to do:
 33243                                  
 33244 000027F0 3B06[3324]              	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 33245 000027F4 7D06                    	jge	short DevConvLoad
 33246                                  tryd_1:
 33247 000027F6 A1[3324]                	mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 33248 000027F9 E8550A                  	call	StoLoadSize		; minsize for load UMB.
 33249                                  
 33250                                  ;%endif ; 28/10/2022
 33251                                  
 33252                                  ; - End DeviceHigh primary logic changes --------------------------------------
 33253                                  
 33254                                  DevConvLoad:
 33255                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33256 000027FC E8660D                  	call	InitDevLoad
 33257                                  
 33258                                  	; 11/12/2022
 33259                                  	; ds = cs
 33260 000027FF A1[3524]                	mov	ax,[DevLoadAddr]
 33261 00002802 0306[3324]              	add	ax,[DevSize]
 33262 00002806 7206                    	jc	short NoMem
 33263 00002808 3906[3724]              	cmp	[DevLoadEnd],ax
 33264 0000280C 7315                    	jae	short LoadDev
 33265                                  	
 33266                                  	; 11/12/2022
 33267                                  	;mov	ax,[cs:DevLoadAddr]
 33268                                  	;add	ax,[cs:DevSize]
 33269                                  	;jc	short NoMem
 33270                                  	;cmp	[cs:DevLoadEnd],ax
 33271                                  	;jae	short LoadDev
 33272                                  NoMem:
 33273                                  	; 11/12/2022
 33274                                  	; ds = cs
 33275                                  	;jmp	mem_err
 33276 0000280E E92020                  	jmp	mem_err2
 33277                                  
 33278                                  BadFile:
 33279                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33280                                  	;;call	RetFromUM		; Does nothing if didn't call HideUMBs
 33281                                  	;;cmp	byte [es:si],' '
 33282                                          ;;jae	short tryd_2
 33283                                  	; 31/12/2022	
 33284                                  	;cmp	byte [es:si],0Dh	; cr
 33285                                          ;jne	short tryd_2
 33286                                  	;jmp	badop
 33287                                  	; 31/12/2022
 33288                                  	; ds = cs
 33289                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33290                                  	; (SYSINIT:26E6h)
 33291 00002811 E8AE0E                  	call	RetFromUM		; Does nothing if didn't call HideUMBs
 33292 00002814 26803C20                	cmp	byte [es:si],' ' 
 33293                                  	;cmp	byte [es:si],20h ; space
 33294 00002818 7303                    	jnb	short tryd_2
 33295 0000281A E96906                  	jmp	badop
 33296                                  tryd_2:
 33297 0000281D E80C22                  	call	badload
 33298 00002820 E963FD                  	jmp	coff
 33299                                  
 33300                                  LoadDev:
 33301 00002823 06                      	push	es
 33302 00002824 1F                      	pop	ds
 33303                                  
 33304 00002825 89F2                    	mov	dx,si			;ds:dx points to file name
 33305 00002827 E87C0E                  	call	ExecDev			; load device driver using exec call
 33306                                  badldreset:
 33307 0000282A 1E                      	push	ds
 33308 0000282B 07                      	pop	es			;es:si back to config.sys
 33309 0000282C 0E                      	push	cs
 33310 0000282D 1F                      	pop	ds			;ds back to sysinit
 33311 0000282E 72E1                    	jc	short BadFile
 33312                                  goodld:
 33313                                  	; 11/12/2022
 33314                                  	; ds = cs
 33315                                  
 33316 00002830 06                      	push	es ; +	; 31/12/2022
 33317 00002831 56                      	push	si ; ++
 33318 00002832 E89E0E                  	call	RemoveNull
 33319 00002835 06                      	push	es
 33320 00002836 56                      	push	si
 33321                                  
 33322 00002837 0E                      	push	cs
 33323 00002838 07                      	pop	es
 33324                                  
 33325 00002839 1E                      	push	ds ; **  ; ds = cs
 33326 0000283A 56                      	push	si
 33327                                  
 33328                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 33329                                  	; 31/12/2022
 33330                                  	; ds = cs
 33331 0000283B C536[3924]              	lds	si,[DevEntry]
 33332                                  
 33333                                  	;test	word [si+4],8000h
 33334                                  	; 11/12/2022
 33335 0000283F F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 33336                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 33337 00002843 7514                    	jnz	short got_device_com_cont   ; no.
 33338                                  
 33339 00002845 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 33340                                  	;cmp	byte [si+32],26
 33341 0000284A 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 33342 0000284E 7209                    	jb	short got_device_com_cont
 33343                                  
 33344 00002850 5E                      	pop	si
 33345 00002851 1F                      	pop	ds ; **
 33346                                  
 33347 00002852 5E                      	pop	si			; clear the stack
 33348 00002853 07                      	pop	es
 33349                                  
 33350                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33351                                  	;call	RetFromUM
 33352                                  	; 31/12/2022
 33353                                  	; ds = cs ; **
 33354 00002854 E86B0E                  	call	RetFromUM		; Do this before we leave
 33355                                  
 33356                                  	;jmp	short badnumblock
 33357                                  	; 31/12/2022
 33358 00002857 EB73                    	jmp	short badnumblock2  ; ds = cs
 33359                                  
 33360                                  got_device_com_cont:
 33361 00002859 5E                      	pop	si
 33362 0000285A 1F                      	pop	ds
 33363                                  
 33364                                  	; 11/12/2022
 33365                                  	; ds = cs
 33366                                  
 33367 0000285B E8AE06                  	call	LieInt12Mem
 33368 0000285E E80B07                  	call	UpdatePDB		; update the PSP:2 value M020
 33369                                  
 33370                                  	; 11/12/2022
 33371                                  	; ds = cs
 33372                                  	; 08/09/2023
 33373 00002861 31C0                    	xor	ax, ax ; 0
 33374 00002863 3806[6619]              	cmp	byte [multdeviceflag],al ; 0
 33375                                  	;cmp	byte [multdeviceflag],0
 33376                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 33377                                  					;  driver in the file ; M027
 33378 00002867 750B                    	jne	short skip_pass_limit	;		      ; M027
 33379                                  
 33380                                  	; 11/12/2022
 33381                                  	; ds = cs
 33382                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 33383                                  	;mov	bx,[cs:DevLoadEnd]
 33384                                  	;mov	[cs:break_addr+2],bx
 33385                                  
 33386                                  	;mov	word [break_addr],0
 33387                                  	; 08/09/2023
 33388 00002869 A3[7D03]                	mov	[break_addr],ax ; 0
 33389 0000286C 8B1E[3724]              	mov	bx,[DevLoadEnd]
 33390 00002870 891E[7F03]              	mov	[break_addr+2],bx
 33391                                  
 33392                                  skip_pass_limit:
 33393                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 33394                                  ;	number of installed devices (including DblSpace drives) where
 33395                                  ;	"drivenumber" is the number that the next block device will
 33396                                  ;	be assigned to. Because some naughty device drivers (like
 33397                                  ;	interlnk) look at the internal DOS variable instead of the
 33398                                  ;	value we pass it, we'll temporarily stick our value into
 33399                                  ;	DOS DATA while we're initializing the device drivers.
 33400                                  ;
 33401                                  ;	Note that this will make it impossible for this device
 33402                                  ;	driver to access the DblSpace drive letters, whether
 33403                                  ;	they are swapped-hosts or unswapped compressed drives,
 33404                                  ;	during its initialization phase.
 33405                                  
 33406                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33407                                  ; (SYSINIT:2752h)
 33408                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33409                                  ;%if 0
 33410                                  	; 31/12/2022
 33411                                  	;push	ds
 33412                                  	
 33413                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 33414                                  	; 31/12/2022
 33415                                  	; ds = cs
 33416                                  	; 08/09/2023
 33417                                  	;lds	bx,[DOSINFO]		; ds:bx -> sys_var
 33418                                  
 33419                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 33420                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 33421                                  	;mov	ah,al
 33422                                  
 33423                                  	; 08/09/2023
 33424                                  	; ds = cs
 33425 00002874 A0[8503]                	mov	al,[drivenumber]	; temporarily use this next drv value		
 33426 00002877 A2[8503]                	mov	[devdrivenum],al	; pass drive number in packet to driver
 33427 0000287A 88C4                    	mov	ah,al
 33428 0000287C C51E[6D02]              	lds	bx,[DOSINFO]		; ds:bx -> sys_var
 33429                                  
 33430 00002880 874720                  	xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 33431                                  	; 31/12/2022
 33432                                  	;pop	ds
 33433                                  	
 33434 00002883 50                      	push	ax			; save real sysi_numio/ncds in ax
 33435                                  
 33436                                  ;%endif ; 29/10/2022
 33437                                  
 33438                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33439                                  	; (SYSINIT:24B9h)
 33440                                  
 33441 00002884 BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 33442 00002887 E8B01F                  	call	calldev 		; calldev (sdevstrat);
 33443 0000288A BB0800                  	mov	bx,SYSDEV.INT ; 8
 33444 0000288D E8AA1F                  	call	calldev 		; calldev (sdevint);
 33445                                  
 33446                                  	; 11/12/2022
 33447                                  	; ds <> cs (from calldev) ; 31/12/2022
 33448                                  
 33449                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33450                                  ; (SYSINIT:2773h)
 33451                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33452                                  ;%if 0
 33453 00002890 58                      	pop	ax			; get real sysi_numio value
 33454                                  	; 31/12/2022
 33455                                  	;push	ds
 33456 00002891 2EC51E[6D02]            	lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 33457 00002896 894720                  	mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 33458                                  	; 31/12/2022
 33459                                  	;pop	ds
 33460                                  
 33461                                  ;%endif ; 29/10/2022
 33462                                  
 33463                                  	; 11/12/2022
 33464 00002899 0E                      	push	cs
 33465 0000289A 1F                      	pop	ds
 33466                                  
 33467 0000289B E89C06                  	call	TrueInt12Mem
 33468                                  
 33469                                  	; 11/12/2022
 33470                                  	; ds = cs
 33471                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 33472                                  	;mov	[cs:DevBrkAddr],ax
 33473                                  	;mov	ax,[cs:break_addr+2]
 33474                                  	;mov	[cs:DevBrkAddr+2],ax
 33475 0000289E A1[7D03]                	mov	ax,[break_addr]	
 33476 000028A1 A3[3D24]                	mov	[DevBrkAddr],ax
 33477 000028A4 A1[7F03]                	mov	ax,[break_addr+2]
 33478 000028A7 A3[3F24]                	mov	[DevBrkAddr+2],ax
 33479                                  
 33480                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33481                                  	;call	RetFromUM		; There we go... all done.
 33482                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33483                                  	; (SYSINIT:2791h)
 33484 000028AA E8150E                  	call	RetFromUM		; There we go... all done.	
 33485                                  
 33486                                  	; 31/12/2022
 33487                                  	; ds = cs
 33488                                  
 33489                                  	; 11/12/2022
 33490 000028AD 803E[4224]00            	cmp	byte [DevUMB],0	
 33491                                  	;cmp	byte [cs:DevUMB],0
 33492 000028B2 7403                    	je	short tryd_3
 33493 000028B4 E80010                  	call	AllocUMB
 33494                                  	; 31/12/2022
 33495                                  	; ds = cs
 33496                                  tryd_3:
 33497                                  
 33498                                  ;ifndef ROMDOS
 33499                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 33500                                  
 33501                                  	; 11/12/2022
 33502                                  	; ds = cs
 33503                                  	
 33504                                  	;cmp	byte [cs:runhigh],0FFh
 33505 000028B7 803E[6C02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 33506 000028BC 7503                    	jne	short tryd_4
 33507                                  	
 33508                                  	; 11/12/2022
 33509                                  	; ds = cs
 33510 000028BE E8D7E1                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 33511                                  tryd_4:
 33512                                  ;endif ; ROMDOS
 33513                                  
 33514 000028C1 5E                      	pop	si
 33515 000028C2 1F                      	pop	ds
 33516 000028C3 C60400                  	mov	byte [si],0		; *p = 0;
 33517                                  
 33518 000028C6 0E                      	push	cs
 33519 000028C7 1F                      	pop	ds
 33520                                  
 33521 000028C8 EB1F                    	jmp	short was_device_com
 33522                                  
 33523                                  ;----------------------------------------------------------------------------
 33524                                  
 33525                                  ; 02/04/2019 - Retro DOS v4.0
 33526                                  
 33527                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33528                                  ; (SYSINIT:27B3h)
 33529                                  
 33530                                  badnumblock:
 33531 000028CA 0E                      	push	cs
 33532 000028CB 1F                      	pop	ds
 33533                                  badnumblock2:	; 31/12/2022 (ds=cs)
 33534 000028CC BA[7051]                	mov	dx,badblock
 33535 000028CF E88221                  	call	print
 33536                                  
 33537                                  ;------ fall thru -----------------------------------------------------------
 33538                                  
 33539                                  	; 31/12/2022 - Retro DOS v4.2
 33540                                  
 33541                                  erase_dev_do:				; modified to show message "error in config.sys..."
 33542                                  	
 33543                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 33544                                  				; (Note: 'call CheckDoubleSpace'
 33545                                  				; has been removed at 'erase_dev_do:' pos
 33546                                  				; in PCDOS 7.1 IBMBIO.COM - SYSINIT:2CBAh)
 33547                                  				; Erdogan Tan - 10/07/2023
 33548 000028D2 5E                      	pop	si ; ++
 33549 000028D3 07                      	pop	es ; + ; 31/12/2022
 33550                                  
 33551 000028D4 0E                      	push	cs
 33552 000028D5 1F                      	pop	ds
 33553                                  
 33554                                  skip1_resetmemhi:
 33555                                  	; 11/12/2022
 33556                                  	; ds = cs
 33557 000028D6 833E[8603]00            	cmp	word [configmsgflag],0
 33558                                  	;cmp	word [cs:configmsgflag],0
 33559 000028DB 7409                    	je	short no_error_line_msg
 33560                                  
 33561 000028DD E8DA05                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 33562                                  	; 11/12/2022
 33563                                  	; ds = cs
 33564                                  	;mov	word [cs:configmsgflag],0
 33565 000028E0 C706[8603]0000          	mov	word [configmsgflag],0	; set the default value again.
 33566                                  
 33567                                  no_error_line_msg:
 33568 000028E6 E99DFC                  	jmp	coff
 33569                                  
 33570                                  ;----------------------------------------------------------------------------
 33571                                  
 33572                                  was_device_com:
 33573                                  	; 14/12/2022
 33574                                  	; ds = cs
 33575 000028E9 A1[3F24]                	mov	ax,[DevBrkAddr+2]
 33576                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 33577 000028EC 3B06[3724]              	cmp	ax,[DevLoadEnd]
 33578                                  	;cmp	ax,[cs:DevLoadEnd]
 33579 000028F0 7605                    	jbe	short breakok
 33580                                  
 33581 000028F2 5E                      	pop	si
 33582 000028F3 07                      	pop	es
 33583 000028F4 E91AFF                  	jmp	BadFile
 33584                                  
 33585                                  breakok:
 33586                                  	; 14/12/2022
 33587                                  	; ds = cs
 33588 000028F7 C43E[6D02]              	les	di,[DOSINFO] 
 33589 000028FB C516[3924]              	lds	dx,[DevEntry]
 33590                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 33591 000028FF 89D6                    	mov	si,dx
 33592                                  
 33593                                  	; 14/11/2022
 33594                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 33595                                  
 33596                                  	; 14/12/2022
 33597                                  	; ds <> cs
 33598                                  	
 33599                                  	;mov	ax,[si+4]
 33600 00002901 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 33601                                  	; 12/12/2022
 33602 00002904 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 33603                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 33604 00002907 7426                    	jz	short isblock
 33605                                  
 33606                                  ;------ lets deal with character devices
 33607                                  
 33608 00002909 2E800E[6919]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 33609 0000290F E8F40D                  	call	DevSetBreak		;go ahead and alloc mem for device
 33610                                  jc_edd:
 33611 00002912 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 33612                                  
 33613                                  	; 12/12/2022
 33614 00002914 A801                    	test	al,ISCIN
 33615                                  	;test	ax,ISCIN ; 1		;is it a console in?
 33616 00002916 7408                    	jz	short tryclk
 33617                                  
 33618 00002918 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 33619 0000291C 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 33620                                  tryclk: 
 33621                                  	; 12/12/2022
 33622 00002920 A808                    	test	al,ISCLOCK
 33623                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 33624 00002922 7408                    	jz	short golink
 33625                                  
 33626 00002924 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 33627 00002928 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 33628                                  golink: 
 33629 0000292C E9DF00                  	jmp	linkit
 33630                                  
 33631                                  ;------ deal with block device drivers
 33632                                  
 33633                                  isblock:
 33634 0000292F 2EA0[7C03]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 33635 00002933 08C0                    	or	al,al
 33636 00002935 749B                    	jz	short erase_dev_do
 33637                                  	;mov	[si+10],al
 33638 00002937 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 33639                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33640                                  	;add	[cs:driver_units],al
 33641                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33642 0000293A 2E0006[6A19]            	add	[cs:driver_units],al	; keep total for all drivers in file
 33643                                  perdrv:
 33644 0000293F 98                      	cbw				; warning no device > 127 units
 33645 00002940 89C1                    	mov	cx,ax
 33646 00002942 88E6                    	mov	dh,ah
 33647                                  	;mov	dl,[es:di+32]
 33648 00002944 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 33649 00002948 88D4                    	mov	ah,dl
 33650 0000294A 00C4                    	add	ah,al			; check for too many devices
 33651 0000294C 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 33652 0000294F 7603                    	jbe	short ok_block
 33653 00002951 E976FF                  	jmp	badnumblock
 33654                                  
 33655                                  ok_block:
 33656 00002954 2E800E[6919]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 33657 0000295A E8A90D                  	call	DevSetBreak		; alloc the device
 33658 0000295D 72B3                    	jc	short jc_edd
 33659 0000295F 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 33660                                  
 33661 00002963 2E0006[8503]            	add	[cs:drivenumber],al	; remember amount for next device
 33662 00002968 2EC51E[8103]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 33663                                  perunit:
 33664 0000296D 2EC42E[6D02]            	les	bp,[cs:DOSINFO]
 33665                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 33666                                  	; 11/12/2022
 33667 00002972 26C46E00                	les	bp,[es:bp]
 33668                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33669                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 33670                                  scandpb:
 33671                                  	;cmp	word [es:bp+25],-1
 33672 00002976 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 33673 0000297B 7406                    	je	short foundpb
 33674                                  	;les	bp,[es:bp+25]
 33675 0000297D 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 33676 00002981 EBF3                    	jmp	short scandpb
 33677                                  foundpb:
 33678 00002983 2EA1[3D24]              	mov	ax,[cs:DevBrkAddr]
 33679 00002987 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 33680 0000298B 2EA1[3F24]              	mov	ax,[cs:DevBrkAddr+2]
 33681 0000298F 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 33682                                  
 33683 00002993 2EC42E[3D24]            	les	bp,[cs:DevBrkAddr]
 33684 00002998 2E8306[3D24]3D          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 33685                                  				; 08/09/2023
 33686                                  				; (61 in PCDOS 7.1 IBMBIO.COM)
 33687 0000299E E8440D                  	call	RoundBreakAddr
 33688                                  
 33689 000029A1 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 33690 000029A7 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 33691                                  
 33692 000029AC 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 33693 000029AE 43                      	inc	bx
 33694 000029AF 43                      	inc	bx			;point to next guy
 33695                                  	;mov	[es:bp+DPB.DRIVE],dx
 33696                                  	; 11/12/2022
 33697 000029B0 26895600                	mov	[es:bp],dx ; 13/05/2019
 33698                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33699                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 33700                                  
 33701                                  	; 13/04/2024 - Retro DOS v5.0
 33702                                  	; PCDOS 7.1 IBMBIO.COM
 33703                                  	;;;
 33704 000029B4 52                      	push	dx
 33705 000029B5 51                      	push	cx		; initialize FAT32 extended DPB parameters/fields
 33706 000029B6 BA5241                  	mov	dx,4152h	; 'AR' signature for FAT32 extended DPB
 33707 000029B9 31C9                    	xor	cx,cx	; 0
 33708                                  	;mov	[es:bp+1Dh],cx
 33709 000029BB 26894E1D                	mov	[es:bp+DPB.NEXT_FREE],cx ; last allocated cluster #
 33710                                  	;cmp	[si+0Bh],cx	; BPB.fatsecs16 
 33711 000029BF 394C0B                  	cmp	[si+A_BPB.SECTORSPERFAT],cx ; 0
 33712 000029C2 7514                    	jnz	short set_dpb	; FAT DPB (33 bytes)   -jnz-
 33713                                  				; FAT32 DPB (61 bytes) -jz-
 33714                                  	;mov	[es:bp+39h],cx
 33715 000029C4 26894E39                	mov	[es:bp+DPB.FAT32_NXTFREE],cx ; 0
 33716                                  	;mov	[es:bp+3Bh],cx
 33717 000029C8 26894E3B                	mov	[es:bp+DPB.FAT32_NXTFREE+2],cx ; 0
 33718 000029CC 49                      	dec	cx	; 0FFFFh ; -1
 33719                                  	;mov	[es:bp+1Fh],cx
 33720 000029CD 26894E1F                	mov	[es:bp+DPB.FREE_CNT],cx ; -1 = unknown
 33721                                  	;mov	[es:bp+21h],cx
 33722 000029D1 26894E21                	mov	[es:bp+DPB.FREE_CNT+2],cx ; -1 = unknown
 33723 000029D5 B95845                  	mov	cx,4558h       ; 'EX' signature for FAT32 extended DPB
 33724                                  set_dpb:
 33725                                  	;;;
 33726                                  
 33727 000029D8 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 33728 000029DA CD21                    	int	21h
 33729                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 33730                                  			; DS:SI -> BPB (BIOS Parameter Block)
 33731                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 33732                                  	; 13/04/2024
 33733                                  	;;;
 33734 000029DC 59                      	pop	cx
 33735 000029DD 5A                      	pop	dx
 33736                                  	;;;
 33737                                  
 33738                                  	;mov	ax,[es:bp+2]
 33739 000029DE 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 33740 000029E2 06                      	push	es
 33741 000029E3 2EC43E[6D02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 33742                                  	;cmp	ax,[es:di+10h]
 33743 000029E8 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 33744 000029EC 07                      	pop	es
 33745                                  	; 13/04/2024
 33746                                  	;jna	short iblk_1
 33747                                  	;jmp	bad_bpb_size_sector
 33748                                  	; 29/10/2022
 33749 000029ED 777F                    	ja	short bad_bpb_size_sector
 33750                                  iblk_1:
 33751 000029EF 1E                      	push	ds
 33752 000029F0 52                      	push	dx
 33753                                  
 33754 000029F1 2EC516[3924]            	lds	dx,[cs:DevEntry]
 33755                                  	;mov	[es:bp+13h],dx
 33756 000029F6 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 33757                                  	;mov	[es:bp+15h],ds
 33758 000029FA 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 33759                                  
 33760 000029FE 5A                      	pop	dx
 33761 000029FF 1F                      	pop	ds
 33762                                  
 33763 00002A00 42                      	inc	dx
 33764 00002A01 FEC6                    	inc	dh
 33765                                  	;loop	perunit
 33766                                  	; 13/04/2024
 33767                                  	;;;
 33768 00002A03 49                      	dec	cx		; cx = cx - 1
 33769                                  				; cx = remain count from [cs:unitcount]
 33770 00002A04 7403                    	jz	short iblk_2	; cx = 0 -> done
 33771 00002A06 E964FF                  	jmp	perunit		; loop until cx is 0
 33772                                  iblk_2:
 33773                                  	;;;
 33774                                  	
 33775 00002A09 0E                      	push	cs
 33776 00002A0A 1F                      	pop	ds
 33777                                  
 33778 00002A0B E895E3                  	call	TempCDS 		; set cds for new drives
 33779                                  	; 31/12/2022
 33780                                  	; ds <> cs
 33781                                  linkit:
 33782 00002A0E 2EC43E[6D02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 33783 00002A13 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 33784 00002A17 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 33785                                  
 33786 00002A1B 2EC536[3924]            	lds	si,[cs:DevEntry]	;ds:si = device location
 33787 00002A20 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 33788 00002A24 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 33789 00002A28 8B04                    	mov	ax,[si]			;get pointer to next device
 33790 00002A2A 2EA3[3924]              	mov	[cs:DevEntry],ax	;and save it
 33791                                  
 33792 00002A2E 890C                    	mov	[si],cx			;link in the driver
 33793 00002A30 895402                  	mov	[si+2],dx
 33794                                  enddev:
 33795 00002A33 5E                      	pop	si
 33796 00002A34 07                      	pop	es
 33797 00002A35 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 33798 00002A36 740B                    	jz	short coffj3
 33799                                  
 33800 00002A38 2EFE06[6619]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 33801 00002A3D E8E80C                  	call	DevBreak		; M009
 33802                                  	; 11/12/2022
 33803                                  	; ds = cs (DevBreak)
 33804                                  
 33805                                  	; 03/04/2019 - Retro DOS v4.0
 33806                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 33807 00002A40 E9EDFD                  	jmp	goodld			; otherwise pretend we loaded it in
 33808                                  coffj3: 
 33809                                  	; 18/12/2022
 33810                                  	; ax = 0
 33811 00002A43 2EA2[6619]              	mov	[cs:multdeviceflag],al ; 0
 33812                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 33813 00002A47 E8DE0C                  	call	DevBreak
 33814                                  	; 11/12/2022
 33815                                  	; ds = cs (DevBreak)
 33816                                  	
 33817                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33818                                  	; (SYSINIT:2919h)
 33819                                  	; 11/07/2023
 33820 00002A4A E80204                  	call	CheckProtmanArena
 33821                                  	
 33822                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 33823                                  	;;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 33824                                  ;					;  created a bogus arena to try
 33825                                  ;					;  to protect some of its resident-
 33826                                  ;					;  init code.
 33827                                  	; 13/04/2024 - Retro DOS v5.0
 33828                                  	; PCDOS 7.1 IBMBIO.COM
 33829                                  	;;call	CheckDoubleSpace
 33830                                  	;jmp	coff
 33831                                  
 33832                                  ;----------------------------------------------------------------------------
 33833                                  
 33834                                  	; 13/04/2024 - Retro DOS v5.0
 33835                                  	; PCDOS 7.1 IBMBIO.COM
 33836                                  	;;;
 33837                                  
 33838                                  CheckDoubleSpace:
 33839                                  
 33840                                  ;;	ifdef	dblspace_hooks
 33841                                  
 33842                                  ;	Now check for two special MagicDrv cases:
 33843                                  ;
 33844                                  ;       a) the last driver load was MagicDrv final placement:
 33845                                  ;	   -> add number of MagicDrv reserved drives to drivenumber
 33846                                  ;
 33847                                  ;       b) MagicDrv is currently in temporary home:
 33848                                  ;          -> call it to give it a chance to mount and shuffle drives
 33849                                  
 33850                                  	;cmp	byte [cs:MagicHomeFlag],0 ; already home?
 33851                                  	; 13/04/2024 (PCDOS 7.1 IBMBIO.COM)
 33852 00002A4D 2EF606[6724]01          	test	byte [cs:MagicHomeFlag],1 ; already home?
 33853 00002A53 7545                    	jnz	short no_more_magic_calls ;  nothing more to do if so
 33854                                  
 33855                                  ;	Now inquire of driver whether it is present, and final located
 33856                                  
 33857                                  	;mov	ax,multMagicdrv ; 4A11h
 33858                                  	;mov	bx,MD_VERSION ; 0
 33859                                  	;int	2fh			; ch = number of MagicDrv drive letters
 33860                                  	;or	ax,ax			; is it there?
 33861                                  	; 13/04/2024 (PCDOS 7.1 IBMBIO.COM)
 33862                                  	;;;
 33863 00002A55 E8FEEE                  	call	get_dblspace_version ; is it there?
 33864                                  	;jnz	short no_more_magic_calls ; done if not
 33865 00002A58 750B                    	jnz	short set_magichomeflag
 33866                                  	;;;
 33867                                  
 33868 00002A5A F7C20080                	test	dx,8000h		; is it final placed?
 33869 00002A5E 751C                    	jnz	short magic_not_yet_home ;  skip if not
 33870                                  
 33871                                  ;	Okay, now the driver is final placed!  Set the flag so we
 33872                                  ;	don't keep checking it, and add its number of drive letters
 33873                                  ;	to drivenumber.
 33874                                  
 33875                                  	; 13/04/2024 (PCDOS 7.1 IBMBIO.COM)
 33876                                  	;mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 33877 00002A60 2E002E[8503]            	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 33878                                  					;  the drive number we'll pass to the
 33879                                  					;  next loadable block device.
 33880                                  	;jmp	short no_more_magic_calls ; and finished.
 33881                                  
 33882                                  	;;;
 33883                                  set_magichomeflag:
 33884 00002A65 2EC606[6724]01          	mov	byte [cs:MagicHomeFlag],1 ; set the flag!
 33885 00002A6B E918FB                  	jmp	coff	
 33886                                  	;;;
 33887                                  
 33888                                  ; 03/04/2019 - Retro DOS v4.0
 33889                                  
 33890                                  bad_bpb_size_sector:
 33891 00002A6E 5E                      	pop	si
 33892 00002A6F 07                      	pop	es
 33893 00002A70 BA[9250]                	mov	dx,badsiz_pre
 33894 00002A73 BB[7050]                	mov	bx,crlfm
 33895 00002A76 E8B91F                  	call	prnerr
 33896                                  
 33897 00002A79 E90AFB                  	jmp	coff
 33898                                  
 33899                                  magic_not_yet_home:
 33900 00002A7C 06                      	push	es
 33901 00002A7D 56                      	push	si
 33902                                  
 33903 00002A7E 2E8B0E[6403]            	mov	cx,[cs:memhi]		; pass it a work buffer
 33904 00002A83 2E8B16[A502]            	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 33905 00002A88 29CA                    	sub	dx,cx			;   for len dx (paragraphs)
 33906                                  
 33907 00002A8A BB0200                  	mov	bx,2
 33908 00002A8D 2EA0[6A19]              	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 33909                                  					;   by this many units
 33910                                  
 33911                                  ;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 33912 00002A91 B455                    	mov	ah,55h			; backdoor won't shuffle unless it
 33913                                  					;  sees this, to prevent bad things
 33914                                  					;  from happening if people run the
 33915                                  					;  new driver with an old BIOS
 33916 00002A93 2EFF1E[9003]            	call	far [cs:MagicBackdoor]
 33917                                  
 33918 00002A98 5E                      	pop	si
 33919 00002A99 07                      	pop	es
 33920                                  
 33921                                  ;no_more_magic_calls:
 33922                                  ;
 33923                                  ;;	endif
 33924                                  ;	retn
 33925                                  
 33926                                  	; 13/04/2024
 33927                                  	;;;
 33928                                  no_more_magic_calls:
 33929 00002A9A E9E9FA                  	jmp	coff
 33930                                  	;;;
 33931                                  
 33932                                  ;------------------------------------------------------------------------------
 33933                                  ; country command
 33934                                  ;      the syntax is:
 33935                                  ;	country=country id {,codepage {,path}}
 33936                                  ;	country=country id {,,path}	:default codepage id in dos
 33937                                  ;------------------------------------------------------------------------------
 33938                                  
 33939                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33940                                  	; (SYSINIT:2663h)
 33941                                  tryq:
 33942 00002A9D 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 33943 00002AA0 7403                    	je	short tryq_cont
 33944                                  skip_it3:
 33945 00002AA2 E90D01                  	jmp	tryf
 33946                                  tryq_cont:
 33947                                  
 33948                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33949                                  ; (SYSINIT:297Eh)
 33950                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33951                                  ;%if 0
 33952                                  ;ifdef	MULTI_CONFIG
 33953 00002AA5 E8741B                  	call	query_user		; query the user if config_cmd
 33954 00002AA8 72F8                    	jc	short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 33955                                  ;endif
 33956                                  ;%endif ; 02/11/2022
 33957                                  
 33958                                  	; 31/12/2022
 33959                                  	;xor	bx,bx
 33960 00002AAA 31C9                    	xor	cx,cx
 33961                                  	; 14/12/2022
 33962                                  	; ds = cs
 33963                                  	; bx = 0
 33964                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 33965                                  	;mov	word [cs:p_code_page],0
 33966                                  	; 31/12/2022
 33967                                  	; cx = 0
 33968                                  	;mov	[cntry_drv],bl ; 0
 33969                                  	;mov	[p_code_page],bx ; 0
 33970 00002AAC 880E[DD4A]              	mov	[cntry_drv],cl ; 0
 33971 00002AB0 890E[7C22]              	mov	[p_code_page],cx ; 0	
 33972                                  
 33973 00002AB4 BF[4522]                	mov	di,cntry_parms
 33974                                  	;xor	cx,cx	; 31/12/2022
 33975                                  	; 03/01/2023
 33976                                  	;mov	dx,cx
 33977                                  do52:
 33978 00002AB7 E8AD03                  	call	sysinit_parse
 33979 00002ABA 730B                    	jnc	short if52		; parse error,check error code and
 33980                                  
 33981 00002ABC E8E000                  	call	cntry_error		; show message and end the search loop.
 33982                                  	; 14/12/2022
 33983                                  	; ds = cs
 33984 00002ABF C706[7A22]FFFF          	mov	word [p_cntry_code],-1
 33985                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 33986 00002AC5 EB34                    	jmp	short sr52
 33987                                  if52:
 33988 00002AC7 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 33989 00002ACA 742F                    	jz	short sr52		; then end the search loop
 33990                                  
 33991                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 33992                                  	; 14/12/2022
 33993                                  	; ds = cs
 33994 00002ACC 803E[1722]01            	cmp	byte [result_val],_$P_Number	
 33995                                  	;cmp	byte [cs:result_val],_$P_Number
 33996 00002AD1 7512                    	jnz	short if56
 33997                                  
 33998                                  	;;mov	ax,[cs:rw_dword]
 33999                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 34000                                  	; 14/12/2022
 34001 00002AD3 A1[1B22]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 34002 00002AD6 83F901                  	cmp	cx,1
 34003 00002AD9 7505                    	jne	short if57
 34004                                  
 34005                                  	;mov	[cs:p_cntry_code],ax
 34006                                  	; 14/12/2022
 34007 00002ADB A3[7A22]                	mov	[p_cntry_code],ax
 34008                                  
 34009                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34010                                  	;jmp	short en57
 34011                                  	; 12/12/2022
 34012                                  	;jmp	short en56
 34013 00002ADE EBD7                    	jmp	short do52
 34014                                  if57:
 34015                                  	;mov	[cs:p_code_page],ax
 34016                                  	; 14/12/2022
 34017                                  	; ds = cs
 34018 00002AE0 A3[7C22]                	mov	[p_code_page],ax
 34019                                  en57:
 34020                                  	;jmp	short en56		; path entered
 34021                                  	; 12/12/2022
 34022 00002AE3 EBD2                    	jmp	short do52
 34023                                  if56:
 34024 00002AE5 1E                      	push	ds
 34025 00002AE6 06                      	push	es
 34026 00002AE7 56                      	push	si
 34027 00002AE8 57                      	push	di
 34028                                  
 34029 00002AE9 0E                      	push	cs
 34030 00002AEA 07                      	pop	es
 34031                                  
 34032                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 34033                                  	; 14/12/2022
 34034 00002AEB C536[1B22]              	lds	si,[rv_dword]
 34035 00002AEF BF[DD4A]                	mov	di,cntry_drv
 34036 00002AF2 E82C1F                  	call	move_asciiz
 34037                                  
 34038 00002AF5 5F                      	pop	di
 34039 00002AF6 5E                      	pop	si
 34040 00002AF7 07                      	pop	es
 34041 00002AF8 1F                      	pop	ds
 34042                                  en56:
 34043 00002AF9 EBBC                    	jmp	short do52
 34044                                  sr52:
 34045                                  	; 14/12/2022
 34046                                  	; ds = cs
 34047 00002AFB 833E[7A22]FF            	cmp	word [p_cntry_code],-1
 34048                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 34049 00002B00 7509                    	jne	short tryq_open
 34050 00002B02 E981FA                  	jmp	coff
 34051                                  
 34052                                  tryqbad:				;"invalid country code or code page"
 34053 00002B05 F9                      	stc
 34054 00002B06 BA[D950]                	mov     dx,badcountry
 34055 00002B09 EB79                    	jmp     tryqchkerr
 34056                                  
 34057                                  tryq_open:
 34058                                  	; 14/12/2022
 34059                                  	; ds = cs
 34060 00002B0B 803E[DD4A]00            	cmp	byte [cntry_drv],0
 34061                                  	;cmp	byte [cs:cntry_drv],0
 34062 00002B10 7405                    	je	short tryq_def
 34063 00002B12 BA[DD4A]                	mov	dx,cntry_drv
 34064 00002B15 EB03                    	jmp	short tryq_openit
 34065                                  
 34066                                  tryq_def:
 34067 00002B17 BA[DF4A]                	mov	dx,cntry_root
 34068                                  tryq_openit:
 34069 00002B1A B8003D                  	mov	ax,3D00h		;open a file
 34070 00002B1D F9                      	stc
 34071 00002B1E CD21                    	int	21h
 34072 00002B20 7242                    	jc	short tryqfilebad	;open failure
 34073                                  
 34074                                  	; 14/12/2022
 34075                                  	; ds = cs
 34076 00002B22 A3[5C03]                	mov	[cntryfilehandle],ax
 34077                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 34078 00002B25 89C3                    	mov	bx,ax
 34079 00002B27 A1[7A22]                	mov	ax,[p_cntry_code]
 34080 00002B2A 8B16[7C22]              	mov	dx,[p_code_page]
 34081                                  	;mov	ax,[cs:p_cntry_code]
 34082                                  	;mov	dx,[cs:p_code_page]	;now,ax=country id,bx=filehandle
 34083                                  	;mov	cx,[cs:memhi]
 34084 00002B2E 8B0E[6403]              	mov	cx,[memhi]
 34085 00002B32 81C18001                	add	cx,384			;need 6k buffer to handle country.sys
 34086                                  					;M023
 34087                                  	; 14/12/2022
 34088                                  	; ds = cs
 34089 00002B36 3B0E[A502]              	cmp	cx,[ALLOCLIM]
 34090                                  	;cmp	cx,[cs:ALLOCLIM]
 34091 00002B3A 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 34092                                  
 34093 00002B3C BE[DD4A]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 34094 00002B3F 803C00                  	cmp	byte [si],0 		;default path?
 34095 00002B42 7502                    	jne	short tryq_set_for_dos
 34096                                  
 34097 00002B44 46                      	inc	si
 34098 00002B45 46                      	inc	si			;ds:si -> cntry_root
 34099                                  
 34100                                  tryq_set_for_dos:
 34101                                  	; 14/12/2022
 34102                                  	; ds = cs
 34103 00002B46 C43E[7902]              	les	di,[sysi_country]
 34104                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 34105 00002B4A 57                      	push	di			;save di
 34106                                  	;add	di,8
 34107 00002B4B 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 34108 00002B4E E8D01E                  	call	move_asciiz		;set the path to country.sys in dos.
 34109 00002B51 5F                      	pop	di			;es:di -> country info tab again.
 34110                                  
 34111                                  	; 14/12/2022	
 34112 00002B52 8B0E[6403]              	mov	cx,[memhi]
 34113                                  	;mov	cx,[cs:memhi]
 34114 00002B56 8ED9                    	mov	ds,cx
 34115 00002B58 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 34116 00002B5A E8601D                  	call	setdoscountryinfo	;now do the job!!!
 34117                                  	; ds <> cs ; 14/12/2022
 34118 00002B5D 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 34119                                  
 34120 00002B5F 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 34121 00002B62 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 34122                                  
 34123                                  tryqfilebad:
 34124 00002B64 0E                      	push	cs
 34125 00002B65 07                      	pop	es
 34126 00002B66 2E803E[DD4A]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 34127 00002B6C 7405                    	je	short tryqdefbad
 34128                                  
 34129 00002B6E BE[DD4A]                	mov	si,cntry_drv
 34130 00002B71 EB03                    	jmp	short tryqbadload
 34131                                  
 34132                                  tryqdefbad:				;default file has been used.
 34133 00002B73 BE[DF4A]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 34134                                  tryqbadload:
 34135 00002B76 E8B31E                  	call	badload 		;ds will be restored to sysinit_seg
 34136                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34137                                  	; (SYSINIT:2A69h)
 34138 00002B79 8B0E[A302]              	mov	cx,[CONFBOT] ; ds = cs (from badload)
 34139                                  	;mov	cx,[cs:CONFBOT]
 34140                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34141                                  	;mov	cx,[cs:top_of_cdss]
 34142                                  	; 11/12/2022
 34143                                  	; ds = cs
 34144                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 34145 00002B7D 8EC1                    	mov	es,cx			;restore es -> confbot.
 34146 00002B7F EB13                    	jmp	short coffj4
 34147                                  
 34148                                  tryqmemory:
 34149 00002B81 BA[1C51]                	mov	dx,insufmemory
 34150                                  tryqchkerr:
 34151                                  	;mov	cx,[cs:CONFBOT]
 34152                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34153                                  	;mov	cx,[cs:top_of_cdss]
 34154                                  	; 12/12/2022
 34155 00002B84 0E                      	push	cs
 34156 00002B85 1F                      	pop	ds
 34157                                  	; 31/12/2022 - Retro DOS v4.2
 34158 00002B86 8B0E[A302]              	mov	cx,[CONFBOT] ; (MSDOS 6.21 IO.SYS, SYSINIT)
 34159                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 34160 00002B8A 8EC1                    	mov	es,cx			;restore es -> confbot seg
 34161                                  	;push	cs
 34162                                  	;pop	ds			;restore ds to sysinit_seg
 34163 00002B8C 7306                    	jnc	short coffj4		;if no error,then exit
 34164                                  
 34165 00002B8E E8C31E                  	call	print			;else show error message
 34166 00002B91 E82603                  	call	error_line
 34167                                  coffj4:
 34168                                  	;mov	bx,[cs:cntryfilehandle]
 34169                                  	; 11/12/2022
 34170                                  	; ds = cs
 34171 00002B94 8B1E[5C03]              	mov	bx,[cntryfilehandle]
 34172 00002B98 B43E                    	mov	ah,3Eh
 34173 00002B9A CD21                    	int	21h			;close a file. don't care even if it fails.
 34174 00002B9C E9E7F9                  	jmp	coff
 34175                                  
 34176                                  ;--------------------------------------------
 34177                                  
 34178                                  cntry_error:
 34179                                  
 34180                                  ;function: show "invalid country code or code page" messages,or
 34181                                  ;		"error in country command" depending on the error code
 34182                                  ;		in ax returned by sysparse;
 34183                                  ;in:	ax - error code
 34184                                  ;	ds - sysinitseg
 34185                                  ;	es - confbot
 34186                                  ;out:	show message.  dx destroyed.
 34187                                  
 34188 00002B9F 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 34189 00002BA2 7505                    	jne	short if64
 34190 00002BA4 BA[D950]                	mov	dx,badcountry		;"invalid country code or code page"
 34191 00002BA7 EB03                    	jmp	short en64
 34192                                  if64:
 34193 00002BA9 BA[FF50]                	mov	dx,badcountrycom	;"error in contry command"
 34194                                  en64:
 34195 00002BAC E8A51E                  	call	print
 34196                                  	;call	error_line
 34197                                  	;retn
 34198                                  	; 11/12/2022
 34199 00002BAF E90803                  	jmp	error_line
 34200                                  
 34201                                  ;------------------------------------------------------------------------------
 34202                                  ; files command
 34203                                  ;------------------------------------------------------------------------------
 34204                                  
 34205                                  ;******************************************************************************
 34206                                  ; function: parse the parameters of files= command.			      *
 34207                                  ;									      *
 34208                                  ; input :								      *
 34209                                  ;	es:si -> parameters in command line.				      *
 34210                                  ; output:								      *
 34211                                  ;	variable files set.						      *
 34212                                  ;									      *
 34213                                  ; subroutines to be called:						      *
 34214                                  ;	sysinit_parse							      *
 34215                                  ; logic:								      *
 34216                                  ; {									      *
 34217                                  ;	set di points to files_parms;					      *
 34218                                  ;	set dx,cx to 0; 						      *
 34219                                  ;	while (end of command line)					      *
 34220                                  ;	{ sysinit_parse;						      *
 34221                                  ;	  if (no error) then						      *
 34222                                  ;	     files = result_val._$P_picked_val				      *
 34223                                  ;	  else								      *
 34224                                  ;	     error exit;						      *
 34225                                  ;	};								      *
 34226                                  ; };									      *
 34227                                  ;									      *
 34228                                  ;******************************************************************************
 34229                                  
 34230                                  tryf:
 34231 00002BB2 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 34232 00002BB5 7528                    	jne	short tryl
 34233                                  
 34234                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34235                                  ; (SYSINIT:2AABh)
 34236                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34237                                  ;%if 0
 34238                                  ;ifdef	MULTI_CONFIG
 34239 00002BB7 E8621A                  	call	query_user              ; query the user if config_cmd
 34240 00002BBA 7223                    	jc	short tryl		; has the CONFIG_OPTION_QUERY bit set
 34241                                  ;endif
 34242                                  ;%endif ; 30/10/2022
 34243                                  
 34244                                  	; 14/12/2022
 34245                                  	; ds = cs
 34246                                  
 34247 00002BBC BF[7E22]                	mov	di,files_parms
 34248 00002BBF 31C9                    	xor	cx,cx
 34249                                  	; 03/01/2023
 34250                                  	;mov	dx,cx
 34251                                  do67:
 34252 00002BC1 E8A302                  	call	sysinit_parse
 34253 00002BC4 7303                    	jnc	short if67		; parse error
 34254                                  	;call	badparm_p		;  and show messages and end the search loop.
 34255                                  	;jmp	short sr67
 34256                                  	; 03/01/2023
 34257 00002BC6 E98D01                  	jmp	badparm_p_coff
 34258                                  if67:
 34259 00002BC9 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 34260 00002BCC 7408                    	je	short en67		; then end the $endloop
 34261                                  
 34262                                  	; 14/12/2022
 34263                                  	; ds = cs
 34264                                  	;;mov	al,[cs:rv_dword]
 34265                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 34266                                  	;mov	[cs:p_files],al		; save it temporarily
 34267                                  	;mov	al,[rv_dword]
 34268 00002BCE A0[1B22]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 34269 00002BD1 A2[9D22]                	mov	[p_files],al
 34270                                  
 34271 00002BD4 EBEB                    	jmp	short do67
 34272                                  en67:
 34273                                  	; 14/12/2022
 34274                                  	; ds = cs
 34275 00002BD6 A0[9D22]                	mov	al,[p_files]
 34276 00002BD9 A2[9F02]                	mov	[FILES],al	
 34277                                  	;mov	al,[cs:p_files]
 34278                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 34279                                  sr67:
 34280 00002BDC E9A7F9                  	jmp	coff
 34281                                  
 34282                                  ; 04/04/2019 - Retro DOS v4.0
 34283                                  
 34284                                  ;------------------------------------------------------------------------------
 34285                                  ; lastdrive command
 34286                                  ;------------------------------------------------------------------------------
 34287                                  
 34288                                  ;******************************************************************************
 34289                                  ; function: parse the parameters of lastdrive= command. 		      *
 34290                                  ;									      *
 34291                                  ; input :								      *
 34292                                  ;	es:si -> parameters in command line.				      *
 34293                                  ; output:								      *
 34294                                  ;	set the variable num_cds.					      *
 34295                                  ;									      *
 34296                                  ; subroutines to be called:						      *
 34297                                  ;	sysinit_parse							      *
 34298                                  ; logic:								      *
 34299                                  ; {									      *
 34300                                  ;	set di points to ldrv_parms;					      *
 34301                                  ;	set dx,cx to 0; 						      *
 34302                                  ;	while (end of command line)					      *
 34303                                  ;	{ sysinit_parse;						      *
 34304                                  ;	  if (no error) then						      *
 34305                                  ;	     set num_cds to the returned value; 			      *
 34306                                  ;	  else	/*error exit*/						      *
 34307                                  ;	     error exit;						      *
 34308                                  ;	};								      *
 34309                                  ; };									      *
 34310                                  ;									      *
 34311                                  ;******************************************************************************
 34312                                  
 34313                                  tryl:
 34314 00002BDF 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 34315 00002BE2 7528                    	jne	short tryp
 34316                                  
 34317                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34318                                  ; (SYSINIT:2AE0h)
 34319                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34320                                  ;%if 0
 34321 00002BE4 E8351A                  	call	query_user      ; query the user if config_cmd
 34322 00002BE7 7223                    	jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 34323                                  ;endif
 34324                                  ;%endif ; 30/10/2022
 34325                                  
 34326                                  	; 14/12/2022
 34327                                  	; ds = cs
 34328                                  
 34329 00002BE9 BF[D522]                	mov	di,ldrv_parms
 34330 00002BEC 31C9                    	xor	cx,cx
 34331                                  	; 03/01/2023
 34332                                  	;mov	dx,cx
 34333                                  do73:
 34334 00002BEE E87602                  	call	sysinit_parse
 34335 00002BF1 7303                    	jnc	short if73	; parse error
 34336                                  	;call	badparm_p	;  and show messages and end the search loop.
 34337                                  	;jmp	short sr73
 34338                                  	; 03/01/2023
 34339 00002BF3 E96001                  	jmp	badparm_p_coff
 34340                                  if73:
 34341 00002BF6 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 34342 00002BF9 7408                    	je	short en73	; then end the $endloop
 34343                                  
 34344                                  	; 14/12/2022
 34345                                  	; ds = cs
 34346                                  	;;mov	al,[cs:rv_dword]
 34347                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 34348                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 34349                                  
 34350                                  	;mov	al,[rv_dword]
 34351 00002BFB A0[1B22]                	mov	al,[rv_byte]
 34352 00002BFE A2[E922]                	mov	[p_ldrv],al
 34353                                  
 34354 00002C01 EBEB                    	jmp	short do73
 34355                                  en73:
 34356                                  	; 14/12/2022
 34357                                  	; ds = cs
 34358 00002C03 A0[E922]                	mov	al,[p_ldrv]
 34359 00002C06 A2[A202]                	mov	[NUM_CDS],al
 34360                                  	;mov	al,[cs:p_ldrv]
 34361                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 34362                                  sr73:
 34363 00002C09 E97AF9                  	jmp	coff
 34364                                  
 34365                                  ;--------------------------------------------------------------------------
 34366                                  ; setting drive parameters
 34367                                  ;--------------------------------------------------------------------------
 34368                                  
 34369                                  tryp:
 34370 00002C0C 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 34371 00002C0F 7516                    	jne	short tryk
 34372                                  
 34373                                  ; 31/12/2022 - Retro DOS v4.2
 34374                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34375                                  ;%if 0
 34376                                  ;ifdef	MULTI_CONFIG
 34377 00002C11 E8081A                  	call	query_user      ; query the user if config_cmd
 34378 00002C14 7211                    	jc	short tryk	; has the CONFIG_OPTION_QUERY bit set
 34379                                  ;endif
 34380                                  ;%endif ; 30/10/2022
 34381                                  
 34382 00002C16 E8EC0E                  	call	parseline
 34383 00002C19 7209                    	jc	short trypbad
 34384 00002C1B E8050E                  	call	setparms
 34385 00002C1E E8470E                  	call	diddleback
 34386                                  
 34387                                  ; No error check here, because setparms and diddleback have no error 
 34388                                  ; returns, and setparms as coded now can return with carry set. 
 34389                                  ;       jc	short trypbad
 34390                                  
 34391                                  	; 12/12/2022
 34392                                  	; cf = 0
 34393                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34394                                  	;jc	short trypbad
 34395                                  	
 34396 00002C21 E962F9                  	jmp	coff
 34397                                  trypbad:
 34398 00002C24 E95F02                  	jmp	badop
 34399                                  
 34400                                  ;--------------------------------------------------------------------------
 34401                                  ; setting internal stack parameters
 34402                                  ; stacks=m,n where
 34403                                  ;	m is the number of stacks (range 8 to 64,default 9)
 34404                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 34405                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 34406                                  ;	any combinations that are not within the specified limits will
 34407                                  ;	result in "unrecognized command" error.
 34408                                  ;--------------------------------------------------------------------------
 34409                                  
 34410                                  ;**************************************************************************
 34411                                  ;									  *
 34412                                  ; function: parse the parameters of stacks= command.			  *
 34413                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 34414                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 34415                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 34416                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 34417                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 34418                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 34419                                  ;	    (or if "0,0" pair has been entered.)			  *
 34420                                  ; input :								  *
 34421                                  ;	es:si -> parameters in command line.				  *
 34422                                  ; output:								  *
 34423                                  ;	set the variables stack_count,stack_size.			  *
 34424                                  ;									  *
 34425                                  ; subroutines to be called:						  *
 34426                                  ;	sysinit_parse							  *
 34427                                  ; logic:								  *
 34428                                  ; {									  *
 34429                                  ;	set di points to stks_parms;					  *
 34430                                  ;	set dx,cx to 0; 						  *
 34431                                  ;	while (end of command line)					  *
 34432                                  ;	{ sysinit_parse;						  *
 34433                                  ;	  if (no error) then						  *
 34434                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 34435                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 34436                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 34437                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 34438                                  ;	     }								  *
 34439                                  ;	  else	/*error exit*/						  *
 34440                                  ;	     error exit;						  *
 34441                                  ;	};								  *
 34442                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 34443                                  ;	if o.k.,then set stack_count,stack_size;			  *
 34444                                  ;	 else error_exit;						  *
 34445                                  ; };									  *
 34446                                  ;**************************************************************************
 34447                                  
 34448                                  tryk:
 34449                                          ;if      stacksw
 34450                                  
 34451 00002C27 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 34452 00002C2A 7402                    	je	short do_tryk
 34453                                  skip_it4:
 34454 00002C2C EB79                    	jmp	short trys	; 15/12/2022
 34455                                  do_tryk:
 34456                                  
 34457                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34458                                  ; (SYSINIT:2B33h)
 34459                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34460                                  ;%if 0
 34461                                  ;ifdef	MULTI_CONFIG
 34462 00002C2E E8EB19                         call	query_user              ; query the user if config_cmd
 34463 00002C31 72F9                           jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 34464                                  ;endif
 34465                                  ;%endif	; 30/10/2022
 34466                                  
 34467                                  	; 14/12/2022
 34468                                  	; ds = cs
 34469                                  
 34470 00002C33 BF[EA22]                	mov	di,stks_parms
 34471 00002C36 31C9                    	xor	cx,cx
 34472                                  	; 03/01/2023
 34473                                  	;mov	dx,cx
 34474                                  do79:
 34475 00002C38 E82C02                  	call	sysinit_parse
 34476 00002C3B 730B                    	jnc	short if79		; parse error
 34477                                  
 34478 00002C3D BA[8B51]                	mov	dx,badstack		; "invalid stack parameter"
 34479 00002C40 E8111E                  	call	print			;  and show messages and end the search loop.
 34480 00002C43 E87402                  	call	error_line
 34481                                  	;jmp	sr79
 34482                                  	; 11/12/2022
 34483 00002C46 EB39                    	jmp	short sr79
 34484                                  if79:
 34485 00002C48 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 34486 00002C4B 7412                    	je	short en79		; then end the $endloop
 34487                                  
 34488                                  	; 14/12/2022
 34489                                  	; ds = cs
 34490                                  
 34491                                  	;;mov	ax,[cs:rv_dword]
 34492                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 34493                                  	;mov	ax,[rv_dword]
 34494 00002C4D A1[1B22]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 34495                                  
 34496 00002C50 83F901                  	cmp	cx,1
 34497 00002C53 7505                    	jne	short if83
 34498                                  
 34499                                  	; 14/12/2022
 34500                                  	;mov	[cs:p_stack_count],ax
 34501                                  	;jmp	short en83
 34502 00002C55 A3[1F23]                	mov	[p_stack_count],ax
 34503 00002C58 EBDE                    	jmp	short do79
 34504                                  if83:
 34505                                  	; 14/12/2022
 34506                                  	;mov	[cs:p_stack_size],ax
 34507 00002C5A A3[2123]                	mov	[p_stack_size],ax
 34508                                  en83:
 34509 00002C5D EBD9                    	jmp	short do79
 34510                                  en79:
 34511                                  	; 14/12/2022
 34512                                  	; ds = cs
 34513 00002C5F A1[1F23]                	mov	ax,[p_stack_count]
 34514 00002C62 09C0                    	or	ax,ax
 34515 00002C64 741E                    	jz	short if87		
 34516                                  
 34517                                  	; 14/12/2022
 34518                                  	;cmp	word [p_stack_count],0
 34519                                  	;;cmp	word [cs:p_stack_count],0
 34520                                  	;je	short if87
 34521                                  
 34522                                  	; 14/12/2022
 34523 00002C66 83F808                  	cmp	ax, mincount ; 8
 34524                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 34525                                  	; 15/12/2022
 34526 00002C69 721F                    	jb	short en87
 34527 00002C6B 833E[2123]20            	cmp	word [p_stack_size],minsize ; 32
 34528                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 34529                                  	; 15/12/2022
 34530 00002C70 7218                    	jb	short en87
 34531                                  if94:
 34532                                  	; 14/12/2022
 34533                                  	; ds = cs
 34534                                  	; ax = [p_stack_count]
 34535                                  	;mov	ax,[p_stack_count]
 34536                                  	;;mov	ax,[cs:p_stack_count]
 34537 00002C72 A3[8C02]                	mov	[stack_count],ax
 34538                                  	;mov	[cs:stack_count],ax
 34539                                  	;mov	ax,[cs:p_stack_size]
 34540 00002C75 A1[2123]                	mov	ax,[p_stack_size]
 34541                                  	;mov	[cs:stack_size],ax
 34542 00002C78 A3[8E02]                	mov	[stack_size],ax
 34543                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 34544 00002C7B C706[9002]FFFF          	mov	word [stack_addr],-1
 34545                                  sr79:
 34546 00002C81 E902F9                  	jmp	coff
 34547                                  
 34548                                  if87:
 34549                                  	; 14/12/2022
 34550 00002C84 3906[2123]              	cmp	[p_stack_size],ax ; 0
 34551 00002C88 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 34552                                  	;cmp	word [cs:p_stack_size],0
 34553                                  	;je	short if94
 34554                                  en87:
 34555                                  	; 15/12/2022
 34556                                  	; ([p_stack_count] is invalid, use default values)
 34557                                  	; 14/12/2022
 34558                                  	; ds = cs
 34559 00002C8A C706[8C02]0900          	mov	word [stack_count],defaultcount ; 9
 34560 00002C90 C706[8E02]8000          	mov	word [stack_size],defaultsize ; 128
 34561 00002C96 C706[9002]0000          	mov	word [stack_addr],0
 34562                                  	;mov	word [cs:stack_count],defaultcount ; 9
 34563                                  	;				; reset to default value.
 34564                                  	;mov	word [cs:stack_size],defaultsize ; 128
 34565                                  	;mov	word [cs:stack_addr],0
 34566                                  
 34567 00002C9C BA[8B51]                	mov	dx,badstack
 34568 00002C9F E8B21D                  	call	print
 34569 00002CA2 E81502                  	call	error_line
 34570 00002CA5 EBDA                    	jmp	short sr79
 34571                                  
 34572                                  ; 15/12/2022
 34573                                  %if 0
 34574                                  	mov	di,stks_parms
 34575                                  	xor	cx,cx
 34576                                  	; 03/01/2023
 34577                                  	;mov	dx,cx
 34578                                  do79:
 34579                                  	call	sysinit_parse
 34580                                  	jnc	short if79		; parse error
 34581                                  
 34582                                  	mov	dx,badstack		; "invalid stack parameter"
 34583                                  	call	print			;  and show messages and end the search loop.
 34584                                  	call	error_line
 34585                                  	;jmp	sr79
 34586                                  	; 11/12/2022
 34587                                  	jmp	short sr79
 34588                                  if79:
 34589                                  	cmp	ax,_$P_RC_EOL		; end of line?
 34590                                  	je	short en79		; then end the $endloop
 34591                                  
 34592                                  	;mov	ax,[cs:rv_dword]
 34593                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 34594                                  	cmp	cx,1
 34595                                  	jne	short if83
 34596                                  
 34597                                  	mov	[cs:p_stack_count],ax
 34598                                  	jmp	short en83
 34599                                  if83:
 34600                                  	mov	[cs:p_stack_size],ax
 34601                                  en83:
 34602                                  	jmp	short do79
 34603                                  en79:
 34604                                  	cmp	word [cs:p_stack_count],0
 34605                                  	je	short if87
 34606                                  
 34607                                  	cmp	word [cs:p_stack_count],mincount ; 8
 34608                                  	jb	short ll88
 34609                                  	cmp	word [cs:p_stack_size],minsize ; 32
 34610                                  	jnb	short if88
 34611                                  ll88:
 34612                                  	mov	word [cs:p_stack_count],-1 ; invalid
 34613                                  if88:
 34614                                  	jmp	short en87
 34615                                  
 34616                                  	; 11/12/2022
 34617                                  if94:
 34618                                  	mov	ax,[cs:p_stack_count]
 34619                                  	mov	[cs:stack_count],ax
 34620                                  	mov	ax,[cs:p_stack_size]
 34621                                  	mov	[cs:stack_size],ax
 34622                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 34623                                  sr79:
 34624                                  	jmp	coff
 34625                                  
 34626                                  if87:
 34627                                  	cmp	word [cs:p_stack_size],0
 34628                                  	je	short en87
 34629                                  	mov	word [cs:p_stack_count],-1 ; invalid
 34630                                  en87:
 34631                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 34632                                  	jne	short if94
 34633                                  
 34634                                  	mov	word [cs:stack_count],defaultcount ; 9
 34635                                  					; reset to default value.
 34636                                  	mov	word [cs:stack_size],defaultsize ; 128
 34637                                  	mov	word [cs:stack_addr],0
 34638                                  
 34639                                  	mov	dx,badstack
 34640                                  	call	print
 34641                                  	call	error_line
 34642                                  	jmp	short sr79
 34643                                  
 34644                                  %endif
 34645                                  
 34646                                  ; 11/12/2022
 34647                                  %if 0 
 34648                                  if94:
 34649                                  	mov	ax,[cs:p_stack_count]
 34650                                  	mov	[cs:stack_count],ax
 34651                                  	mov	ax,[cs:p_stack_size]
 34652                                  	mov	[cs:stack_size],ax
 34653                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 34654                                  sr79:
 34655                                  	jmp	coff
 34656                                  %endif
 34657                                  	;endif
 34658                                  
 34659                                  ;------------------------------------------------------------------------
 34660                                  ; shell command
 34661                                  ;------------------------------------------------------------------------
 34662                                  
 34663                                  trys:
 34664 00002CA7 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 34665 00002CAA 755A                    	jne	short tryx
 34666                                  
 34667                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34668                                  ; (SYSINIT:2BE1h)
 34669                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34670                                  ;%if 0
 34671                                  ;ifdef	MULTI_CONFIG
 34672 00002CAC E86D19                  	call	query_user              ; query the user if config_cmd
 34673 00002CAF 7255                    	jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 34674                                  	; 14/04/2024
 34675                                  	; ds = cs
 34676                                  	;mov	byte [cs:newcmd],1
 34677 00002CB1 C606[2A4B]01            	mov	byte [newcmd],1
 34678                                  ;endif
 34679                                  ;%endif ; 30/10/2022
 34680                                  
 34681                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 34682                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34683                                  	;mov	byte [cs:command_line+1],0
 34684                                  	; 15/12/2022
 34685                                  	; ds = cs
 34686                                  	; 08/09/2023
 34687                                  	;mov	byte [command_line+1],0
 34688 00002CB6 C706[BB4B]0000          	mov	word [command_line],0	; zap length,first byte of command-line
 34689                                  
 34690 00002CBC BF[2E4B]                        mov     di,commnd+1		; we already have the first char
 34691 00002CBF 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 34692                                  storeshell:
 34693 00002CC2 E8EA1A                  	call	getchr
 34694 00002CC5 08C0                            or      al,al                   ; this is the normal case: "organize"
 34695 00002CC7 741C                            jz	short getshparms	; put a ZERO right after the filename
 34696                                  
 34697 00002CC9 3C20                            cmp     al," "                  ; this may happen if there are no args
 34698 00002CCB 7209                            jb	short endofshell	; I suppose...
 34699 00002CCD 8805                    	mov	[di],al
 34700 00002CCF 47                      	inc	di
 34701                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 34702                                          ;jb	short storeshell	; commnd (the filename)
 34703                                          ;jmp	short endofshell
 34704                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34705                                  	;jmp	short storeshell
 34706                                  	; 03/01/2023
 34707 00002CD0 81FF[6C4B]              	cmp	di,commnd+63		; this makes sure we don't overflow
 34708 00002CD4 72EC                            jb	short storeshell	; commnd (the filename)
 34709                                  	;jmp	short endofshell
 34710                                  
 34711                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34712                                  ;getshparms:
 34713                                  ;	mov     byte [di],0		; zero-terminate the filename
 34714                                  ;	mov     di,command_line+1	; prepare to process the command-line
 34715                                  ;
 34716                                  ;parmloop:
 34717                                  ;	call	getchr
 34718                                  ;	cmp	al," "
 34719                                  ;	jb	short endofparms
 34720                                  ;	mov	[di],al
 34721                                  ;	inc	di
 34722                                  ;	cmp     di,command_line+126
 34723                                  ;	jb	short parmloop
 34724                                  ;endofparms:
 34725                                  ;	mov     cx,di
 34726                                  ;	sub     cx,command_line+1
 34727                                  ;	mov     [cs:command_line],cl
 34728                                  ;
 34729                                  ;endofshell:
 34730                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 34731                                  ;					; the command-line as the case may be)
 34732                                  ;skipline:
 34733                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 34734                                  ;       je	short endofline		; the line: watch for ever-present LF
 34735                                  ;call	getchr
 34736                                  ;       jnc	short skipline		; keep it up as long as there are chars
 34737                                  ;
 34738                                  ;endofline:
 34739                                  ;       jmp     conflp
 34740                                  
 34741                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34742                                  endofshell:
 34743 00002CD6 C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 34744                                  					; the command-line as the case may be)
 34745                                  	; 11/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 34746                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 34747                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:314Eh
 34748                                  	;call	getchr
 34749                                  skipline:		; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 34750 00002CD9 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 34751 00002CDB 7405                    	je	short endofline		; the line: watch for ever-present LF
 34752 00002CDD E8CF1A                  	call	getchr
 34753                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.1 IO.SYS)
 34754                                  	; (SYSINIT:2C3Ah)
 34755 00002CE0 73F7                    	jnb	short skipline
 34756                                  	
 34757                                  endofline:
 34758 00002CE2 E94AF8                  	jmp     conflp
 34759                                  
 34760                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34761                                  getshparms:
 34762                                  	; 18/12/2022
 34763                                  	; al = 0
 34764 00002CE5 8805                    	mov	[di],al ; 0
 34765                                  	;mov	byte [di],0		; zero-terminate the filename
 34766 00002CE7 BF[BC4B]                	mov     di,command_line+1	; prepare to process the command-line
 34767                                  parmloop:
 34768 00002CEA E8C21A                  	call	getchr
 34769 00002CED 3C20                    	cmp	al," " ; 20h
 34770                                  	;jb	short endofshell
 34771                                  	; 03/01/2023
 34772 00002CEF 7209                    	jb	short endofparms
 34773                                  
 34774 00002CF1 8805                    	mov	[di],al
 34775 00002CF3 47                      	inc	di
 34776                                  	;jmp	short parmloop
 34777                                  	; 03/01/2023 - Retro DOS v4.2
 34778 00002CF4 81FF[394C]              	cmp     di,command_line+126
 34779 00002CF8 72F0                    	jb	short parmloop
 34780                                  
 34781                                  	; 03/01/2023 - Retro DOS v4.2
 34782                                  endofparms:
 34783 00002CFA 89F9                    	mov	cx,di
 34784 00002CFC 81E9[BC4B]              	sub	cx,command_line+1
 34785                                  	;mov	[cs:command_line],cl
 34786                                  	; 03/01/2023
 34787 00002D00 880E[BB4B]              	mov	[command_line],cl
 34788 00002D04 EBD0                    	jmp	short endofshell
 34789                                  
 34790                                  ;------------------------------------------------------------------------
 34791                                  ; fcbs command
 34792                                  ;------------------------------------------------------------------------
 34793                                  
 34794                                  ;************************************************************************
 34795                                  ; function: parse the parameters of fcbs= command.			*
 34796                                  ;									*
 34797                                  ; input :								*
 34798                                  ;	es:si -> parameters in command line.				*
 34799                                  ; output:								*
 34800                                  ;	set the variables fcbs,keep.					*
 34801                                  ;									*
 34802                                  ; subroutines to be called:						*
 34803                                  ;	sysinit_parse							*
 34804                                  ; logic:								*
 34805                                  ; {									*
 34806                                  ;	set di points to fcbs_parms;					*
 34807                                  ;	set dx,cx to 0; 						*
 34808                                  ;	while (end of command line)					*
 34809                                  ;	{ sysparse;							*
 34810                                  ;	  if (no error) then						*
 34811                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 34812                                  ;		   fcbs = result_val._$P_picked_val;			*
 34813                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 34814                                  ;		   keep = result_val._$P_picked_val;			*
 34815                                  ;	     }								*
 34816                                  ;	  else	/*error exit*/						*
 34817                                  ;	     error exit;						*
 34818                                  ;	};								*
 34819                                  ; };									*
 34820                                  ;************************************************************************
 34821                                  
 34822                                  tryx:
 34823 00002D06 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 34824                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34825 00002D09 7534                    	jne	short try1
 34826                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34827                                  	;jne	short tryy	; comment command
 34828                                  
 34829                                  ; 31/12/2022 - Retro DOS v4.2
 34830                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34831                                  ;%if 0
 34832                                  ;ifdef	MULTI_CONFIG
 34833 00002D0B E80E19                  	call	query_user      ; query the user if config_cmd
 34834 00002D0E 722F                    	jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 34835                                  ;endif
 34836                                  ;%endif ; 30/10/2022
 34837                                  
 34838 00002D10 BF[9E22]                	mov	di,fcbs_parms
 34839 00002D13 31C9                    	xor	cx,cx
 34840                                  	; 03/01/2023
 34841                                  	;mov	dx,cx
 34842                                  do98:
 34843 00002D15 E84F01                  	call	sysinit_parse
 34844                                          ; 03/01/2023
 34845                                  	;jnc	short if98	; parse error
 34846                                          ;call	badparm_p	;  and show messages and end the search loop.
 34847                                  	;jmp	short sr98
 34848                                  	;------------------------
 34849                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34850 00002D18 723C                    	jc	short badparm_p_coff
 34851                                  if98:
 34852 00002D1A 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 34853 00002D1D 7412                    	je	short en98	; then end the $endloop
 34854                                  
 34855                                  	;;mov	al,[cs:rv_dword]
 34856                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 34857                                  	; 15/12/2022
 34858                                  	; ds = cs
 34859 00002D1F A0[1B22]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 34860 00002D22 83F901                  	cmp	cx,1		; the first positional?
 34861 00002D25 7505                    	jne	short if102
 34862                                  	;mov	[cs:p_fcbs],al
 34863                                  	; 15/12/2022
 34864 00002D27 A2[D322]                	mov	[p_fcbs],al
 34865                                  	;jmp	short en102
 34866 00002D2A EBE9                    	jmp	short do98
 34867                                  if102:
 34868                                  	;mov	[cs:p_keep],al
 34869                                  	; 15/12/2022
 34870 00002D2C A2[D422]                	mov	[p_keep],al
 34871                                  en102:
 34872 00002D2F EBE4                    	jmp	short do98
 34873                                  en98:
 34874                                  	; 15/12/2022
 34875                                  	; ds = cs
 34876 00002D31 A0[D322]                	mov	al,[p_fcbs]
 34877 00002D34 A2[A002]                	mov	[FCBS],al
 34878 00002D37 C606[A102]00            	mov	byte [KEEP],0
 34879                                  	;mov	al,[cs:p_fcbs]	 ; M017
 34880                                  	;mov	[cs:FCBS],al	 ; M017
 34881                                  	;mov	byte [cs:KEEP],0 ; M017
 34882                                  sr98:
 34883 00002D3C E947F8                  	jmp	coff
 34884                                  
 34885                                  ; 31/12/2022 - Retro DOS v4.2
 34886                                  %if 0
 34887                                  
 34888                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34889                                  ;-------------------------------------------------------------------------
 34890                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 34891                                  ;		line number
 34892                                  ;-------------------------------------------------------------------------
 34893                                  
 34894                                  tryy:
 34895                                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 34896                                  	jne	short try0
 34897                                  
 34898                                  donothing:
 34899                                  	; 15/12/2022
 34900                                  	; ds = cs
 34901                                  	dec	word [chrptr]
 34902                                  	inc	word [count]
 34903                                  	; 02/11/2022
 34904                                  	;dec	word [cs:chrptr]
 34905                                  	;inc	word [cs:count]
 34906                                  
 34907                                  	jmp	coff
 34908                                  
 34909                                  ;------------------------------------------------------------------------
 34910                                  ; rem command
 34911                                  ;------------------------------------------------------------------------
 34912                                  
 34913                                  try0:				; do nothing with this line.
 34914                                  	cmp     ah,CONFIG_REM ; '0'
 34915                                  	je	short donothing
 34916                                  
 34917                                  %endif
 34918                                  
 34919                                  ; 07/04/2019 - Retro DOS v4.0
 34920                                  
 34921                                  ;-----------------------------------------------------------------------
 34922                                  ; switches command
 34923                                  ;-----------------------------------------------------------------------
 34924                                  
 34925                                  ;***********************************************************************
 34926                                  ;								       *
 34927                                  ; function: parse the option switches specified.		       *
 34928                                  ; note - this command is intended for the future use also.	       *
 34929                                  ; when we need to set system data flag,use this command.	       *
 34930                                  ;								       *
 34931                                  ; input :							       *
 34932                                  ;	es:si -> parameters in command line.			       *
 34933                                  ; output:							       *
 34934                                  ;	p_swit_k set if /k option chosen.			       *
 34935                                  ;								       *
 34936                                  ; subroutines to be called:					       *
 34937                                  ;	sysinit_parse						       *
 34938                                  ; logic:							       *
 34939                                  ; {								       *
 34940                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 34941                                  ;	set dx,cx to 0; 					       *
 34942                                  ;	while (end of command line)				       *
 34943                                  ;	{ sysinit_parse;					       *
 34944                                  ;	  if (no error) then					       *
 34945                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 34946                                  ;		    p_swit_k = 1				       *
 34947                                  ;	       endif						       *
 34948                                  ;	  else {show error message;error exit}			       *
 34949                                  ;	};							       *
 34950                                  ; };								       *
 34951                                  ;								       *
 34952                                  ;***********************************************************************
 34953                                  
 34954                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 34955                                  
 34956                                  try1:
 34957 00002D3F 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 34958 00002D42 7403                    	je	short do_try1	; switches= command entered?
 34959                                  skip_it5:
 34960                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34961                                  	; (SYSINIT:2C8Ah)
 34962 00002D44 E98E00                  	jmp	tryv
 34963                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34964                                  	;jmp	tryz
 34965                                  
 34966                                  do_try1:
 34967                                  
 34968                                  ; 31/12/2022 - Retro DOS v4.2
 34969                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34970                                  ;%if 0
 34971                                  ;ifdef	MULTI_CONFIG
 34972 00002D47 E8D218                  	call	query_user      ; query the user if config_cmd
 34973 00002D4A 72F8                    	jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 34974                                  ;endif
 34975                                  ;%endif ; 30/10/2022
 34976                                  
 34977 00002D4C BF[3823]                	mov	di,swit_parms
 34978 00002D4F 31C9                    	xor	cx,cx
 34979                                  	; 03/01/2023
 34980                                  	;mov	dx,cx
 34981                                  do110:
 34982 00002D51 E81301                  	call	sysinit_parse
 34983 00002D54 7306                    	jnc	short if110	; parse error
 34984                                  	;call	badparm_p	;  and show messages and end the search loop.
 34985                                  	;jmp	short sr110
 34986                                  	; -----------------------
 34987                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34988                                  badparm_p_coff:
 34989 00002D56 E83901                  	call	badparm_p
 34990 00002D59 E92AF8                  	jmp	coff
 34991                                  	;------------------------
 34992                                  if110:
 34993 00002D5C 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 34994 00002D5F 743C                    	je	short en110	; then jmp to $endloop for semantic check
 34995                                  
 34996                                  	; 15/12/2022
 34997                                  	; ds = cs
 34998                                  	;;cmp	word [cs:result_val_swoff],swit_k
 34999                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 35000 00002D61 813E[1922][5623]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 35001 00002D67 7507                    	jne	short if115	;				;M059
 35002                                  	; 15/12/2022
 35003 00002D69 C606[9523]01            	mov	byte [p_swit_k],1
 35004                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 35005 00002D6E EBE1                    	jmp	short do110
 35006                                  if115:	
 35007                                  	; 15/12/2022							;M059
 35008                                  	;;cmp	word [cs:result_val_swoff],swit_t
 35009                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 35010 00002D70 813E[1922][7A23]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 35011                                  	;jne	short if116					;M059 M063
 35012                                  	; 14/04/2024
 35013                                  	;;;
 35014 00002D76 7507                    	jne	short if118  ; (PCDOS 7.1 IBMBIO.COM)
 35015                                  	;;; 
 35016                                  	; 15/12/2022
 35017 00002D78 C606[9623]01            	mov	byte [p_swit_t],1
 35018                                  	;mov	byte [cs:p_swit_t],1				;M059
 35019 00002D7D EBD2                    	jmp	short do110					;M059
 35020                                  
 35021                                  	; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 35022                                  	;;;
 35023                                  if118:
 35024                                  	;;cmp	word [cs:result_val_swoff],swit_i ; offset "/I"
 35025                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_i
 35026 00002D7F 813E[1922][9223]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_i
 35027 00002D85 7507                    	jne	short if116
 35028                                  	;mov	byte [cs:p_swit_i],1	; set the flag
 35029 00002D87 C606[9823]01            	mov	byte [p_swit_i],1
 35030 00002D8C EBC3                    	jmp     short do110
 35031                                  	;;;
 35032                                  if116:
 35033                                  	; 15/12/2022
 35034                                  	;;cmp	word [cs:result_val_swoff],swit_w
 35035                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 35036 00002D8E 813E[1922][8623]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 35037 00002D94 75BB                    	jne	short do110					;M063
 35038                                  	; 15/12/2022
 35039 00002D96 C606[9723]01            	mov	byte [p_swit_w],1
 35040                                  	;mov	byte [cs:p_swit_w],1				;M063
 35041 00002D9B EBB4                    	jmp	short do110					;M063
 35042                                  en110:
 35043                                  	; 15/12/2022
 35044                                  	; ds = cs
 35045 00002D9D 803E[9523]01            	cmp	byte [p_swit_k],1
 35046                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 35047 00002DA2 1E                      	push	ds
 35048                                  	;;mov	ax,Bios_Data
 35049                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 35050                                  	; 21/10/2022
 35051 00002DA3 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 35052 00002DA6 8ED8                    	mov	ds,ax
 35053 00002DA8 750A                    	jne	short if117
 35054                                  	; 14/04/2024
 35055 00002DAA C606[7E04]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 35056                                  				; BIOSDATA:047Eh for PCDOS 7.1 IBMBIO.COM
 35057 00002DAF C606[7F04]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 35058                                  				; BIOSDATA:047Fh for PCDOS 7.1 IBMBIO.COM
 35059                                  if117:
 35060                                  	; 15/12/2022
 35061                                  	; ds <> cs
 35062 00002DB4 2EA0[9623]              	mov	al,[cs:p_swit_t]				;M059
 35063 00002DB8 A2[8B04]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 35064                                  		; 14/04/2024	; BIOSDATA:048Bh for PCDOS 7.1 IBMBIO.COM
 35065 00002DBB 2E803E[9723]00          	cmp	byte [cs:p_swit_w],0				;M063
 35066 00002DC1 740E                    	je	short skip_dos_flag				;M063
 35067 00002DC3 06                      	push	es
 35068 00002DC4 53                      	push	bx
 35069 00002DC5 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 35070 00002DC7 CD21                    	int	21h						;M063
 35071                                  			; DOS - 2+ internal - GET LIST OF LISTS
 35072                                  			; Return: ES:BX -> DOS list of lists
 35073                                  	;or	bytes [es:86h],2
 35074 00002DC9 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 35075 00002DCF 5B                      	pop	bx
 35076 00002DD0 07                      	pop	es
 35077                                  skip_dos_flag:							;M063
 35078 00002DD1 1F                      	pop	ds
 35079                                  sr110:
 35080 00002DD2 E9B1F7                  	jmp	coff
 35081                                  
 35082                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35083                                  ; (SYSINIT:2D14h)
 35084                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35085                                  ;%if 0
 35086                                  
 35087                                  tryv:
 35088                                  
 35089                                  ;ifdef	MULTI_CONFIG
 35090                                  ;------------------------------------------------------------------------
 35091                                  ; set command (as in "set var=value<cr/lf>")
 35092                                  ;------------------------------------------------------------------------
 35093                                  
 35094 00002DD5 80FC56                  	cmp	ah,CONFIG_SET  ; 'V'
 35095 00002DD8 750F                    	jne	short tryn
 35096 00002DDA E83F18                  	call	query_user      ; query the user if config_cmd
 35097 00002DDD 720A                    	jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 35098 00002DDF E83614                  	call	copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 35099 00002DE2 73EE                    	jnc	short sr110	; no error
 35100                                  err:    
 35101 00002DE4 E8D300                  	call	error_line      ; whoops, display error in line XXX
 35102 00002DE7 EBE9                    	jmp	short sr110     ; jump to coff (to skip to next line)
 35103                                  
 35104                                  ;------------------------------------------------------------------------
 35105                                  ; numlock command (as in "numlock=on|off")
 35106                                  ;------------------------------------------------------------------------
 35107                                  tryn:
 35108 00002DE9 80FC4E                  	cmp	ah,CONFIG_NUMLOCK  ;'N'
 35109                                  	;jne	short tryy
 35110                                  	; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 35111 00002DEC 750C                    	jne	short tryt
 35112                                  
 35113 00002DEE E82B18                  	call	query_user      ; query the user if config_cmd
 35114 00002DF1 7238                    	jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 35115 00002DF3 E8B710                  	call	set_numlock
 35116 00002DF6 72EC                    	jc	short err
 35117 00002DF8 EBD8                    	jmp	short sr110	; all done
 35118                                  
 35119                                  ;endif	;MULTI_CONFIG
 35120                                  
 35121                                  ; 14/04/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 35122                                  ;------------------------------------------------------------------------
 35123                                  ; dosdata command
 35124                                  ;------------------------------------------------------------------------
 35125                                  tryt:
 35126                                  	;cmp	ah,54h ; 'T'
 35127 00002DFA 80FC54                  	cmp	ah,CONFIG_DOSDATA ; 'T' ; PCDOS 7 new config cmd
 35128 00002DFD 752C                    	jne	short tryy
 35129                                  
 35130 00002DFF E81A18                  	call	query_user
 35131 00002E02 7227                    	jc	short tryy
 35132                                  
 35133 00002E04 BF[C823]                	mov	di,dosdata_parms
 35134 00002E07 31C9                    	xor	cx,cx
 35135                                  	; 14/04/2024 - Retro DOS v5.0
 35136                                  	;mov	dx,cx ; 0
 35137                                  do120:
 35138 00002E09 E85B00                  	call	sysinit_parse
 35139 00002E0C 7303                    	jnc	short if120
 35140                                  
 35141                                  	;call	badparm_p
 35142                                  	;jmp	short en120
 35143                                  	; 14/04/2024 - Retro DOS v5.0
 35144 00002E0E E945FF                  	jmp	badparm_p_coff
 35145                                  if120:
 35146                                  	;cmp	ax,0FFFFh
 35147 00002E11 83F8FF                  	cmp	ax,_$P_RC_EOL ; -1 ; end of line?
 35148 00002E14 7422                    	jz	short en120
 35149 00002E16 803E[1822]01            	cmp	byte [result_val_itag],1 ; tag 1 (UMB)
 35150                                  				; [result_val+_$P_Result_Blk.Item_Tag]
 35151 00002E1B 7507                     	jnz	short if121
 35152 00002E1D C606[6E03]01            	mov	byte [dosdata_umb],1 ; DOSDATA=UMB (1) NOUMB (0)
 35153                                  	;jmp	short sr120
 35154                                  	; 14/04/2024
 35155 00002E22 EBE5                    	jmp	short do120
 35156                                  if121:
 35157 00002E24 C606[6E03]00            	mov	byte [dosdata_umb],0 ; DOSDATA=UMB (1) NOUMB (0)
 35158                                  sr120:
 35159 00002E29 EBDE                    	jmp	short do120
 35160                                  	; 14/04/2024
 35161                                  ;en120:
 35162                                  	;jmp	coff
 35163                                  
 35164                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35165                                  ;-------------------------------------------------------------------------
 35166                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 35167                                  ;		line number
 35168                                  ;-------------------------------------------------------------------------
 35169                                  
 35170                                  	; 31/12/2022
 35171                                  tryy:
 35172 00002E2B 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 35173 00002E2E 750B                    	jne	short try0
 35174                                  
 35175                                  donothing:
 35176                                  	; 15/12/2022
 35177                                  	; ds = cs
 35178 00002E30 FF0E[5A03]              	dec	word [chrptr]
 35179 00002E34 FF06[5603]              	inc	word [count]
 35180                                  	; 02/11/2022
 35181                                  	;dec	word [cs:chrptr]
 35182                                  	;inc	word [cs:count]
 35183                                  en120:		; 14/04/2024
 35184 00002E38 E94BF7                  	jmp	coff
 35185                                  
 35186                                  ;------------------------------------------------------------------------
 35187                                  ; rem command
 35188                                  ;------------------------------------------------------------------------
 35189                                  
 35190                                  try0:				; do nothing with this line.
 35191 00002E3B 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 35192 00002E3E 74F0                    	je	short donothing
 35193                                  
 35194                                  ;%endif	; 30/10/2022
 35195                                  
 35196                                  ; 30/10/2022
 35197                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 35198                                  
 35199                                  ;------------------------------------------------------------------------
 35200                                  ; bogus command
 35201                                  ;------------------------------------------------------------------------
 35202                                  
 35203                                  tryz:
 35204 00002E40 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 35205                                  	; 31/12/2022
 35206 00002E43 74EB                    	je	short donothing
 35207                                  	; 02/11/2022
 35208                                  	;je	short tryz_donothing
 35209                                  
 35210 00002E45 FF0E[5A03]              	dec	word [chrptr]
 35211 00002E49 FF06[5603]              	inc	word [count]
 35212 00002E4D EB37                    	jmp	short badop
 35213                                  
 35214                                  ; 31/12/2022
 35215                                  ;	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 35216                                  ;tryz_donothing:
 35217                                  ;	jmp	donothing
 35218                                  
 35219                                  ; 07/04/2019 - Retro DOS v4.0
 35220                                  
 35221                                  ;------------------------------------------------------------------------------
 35222                                  
 35223                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35224                                  ; (SYSINIT:2D5Dh)
 35225                                  
 35226                                  ; 11/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 35227                                  
 35228                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35229                                  ;
 35230                                  ;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 35231                                  ;
 35232                                  ;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 35233                                  ;
 35234                                  CheckProtmanArena:
 35235                                  	; 08/09/2023
 35236                                  	; ds = cs
 35237 00002E4F 06                      	push	es
 35238                                  	;mov	ax,[cs:area]	; get our arena header
 35239 00002E50 A1[6803]                	mov	ax,[area] ; 08/09/2023
 35240 00002E53 48                      	dec	ax
 35241 00002E54 8EC0                    	mov	es,ax
 35242                                  	;add	ax,[es:ARENA.SIZE]
 35243 00002E56 2603060300              	add	ax,[es:3]	; find end of arena
 35244 00002E5B 40                      	inc	ax
 35245                                  	; 08/09/2023
 35246 00002E5C 3B06[A502]              	cmp	ax,[ALLOCLIM]
 35247                                  	;cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 35248 00002E60 7703                    	ja	short CheckProtmanDone
 35249                                  
 35250                                  	;mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 35251                                  	; 08/09/2023
 35252 00002E62 A3[A502]                	mov	[ALLOCLIM],ax
 35253                                  CheckProtmanDone:
 35254 00002E65 07                      	pop	es
 35255 00002E66 C3                      	retn
 35256                                  
 35257                                  ;------------------------------------------------------------------------------
 35258                                  
 35259                                  sysinit_parse:
 35260                                  
 35261                                  ;------------------------------------------------------------------------------
 35262                                  ;set up registers for sysparse
 35263                                  ;in)	es:si -> command line in confbot
 35264                                  ;	di -> offset of the parse control definition.
 35265                                  ;
 35266                                  ;out)	calls sysparse.
 35267                                  ;	carry will set if parse error.
 35268                                  ;	*** the caller should check the eol condition by looking at ax
 35269                                  ;	*** after each call.
 35270                                  ;	*** if no parameters are found,then ax will contain a error code.
 35271                                  ;	*** if the caller needs to look at the synomym@ of the result,
 35272                                  ;	***  the caller should use cs:@ instead of es:@.
 35273                                  ;	cx register should be set to 0 at the first time the caller calls this
 35274                                  ;	 procedure.
 35275                                  ;	ax - exit code
 35276                                  ;	bl - terminated delimeter code
 35277                                  ;	cx - new positional ordinal
 35278                                  ;	si - set to pase scanned operand
 35279                                  ;	dx - selected result buffer
 35280                                  ;------------------------------------------------------------------------------
 35281                                  
 35282                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35283                                  	; (SYSINIT:2D78h)
 35284                                  
 35285                                  	; 14/04/2024 - Retro DOS v5.0
 35286                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:32F3h)
 35287                                  
 35288                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 35289                                  	; ds = cs
 35290 00002E67 8C06[6D19]              	mov	[badparm_seg],es	;save the pointer to the parm
 35291 00002E6B 8936[6B19]              	mov	[badparm_off],si	;we are about to parse for badparm msg.
 35292                                  
 35293                                  	; 24/10/2022
 35294 00002E6F 06                      	push	es			;save es,ds
 35295 00002E70 1E                      	push	ds
 35296                                  
 35297 00002E71 06                      	push	es
 35298 00002E72 1F                      	pop	ds			;now ds:si -> command line
 35299                                  
 35300 00002E73 0E                      	push	cs
 35301 00002E74 07                      	pop	es			;now es:di -> control definition
 35302                                  
 35303                                  	; 09/09/2023
 35304                                  	;mov	[cs:badparm_seg],ds	;save the pointer to the parm
 35305                                  	;mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 35306                                  	
 35307                                  	;mov	dx,0
 35308                                  	; 04/01/2023
 35309 00002E75 29D2                    	sub	dx,dx ; 0
 35310 00002E77 E89BEB                  	call	SysParse
 35311                                  	;cmp	ax,_$P_No_Error	; 0	;no error
 35312                                  	; 06/09/2023
 35313 00002E7A 21C0                    	and	ax,ax
 35314                                  
 35315                                  ;**cas note: when zero true after cmp, carry clear
 35316                                  
 35317                                  	;je	short ll4
 35318                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 35319                                  	; 12/12/2022
 35320 00002E7C 7405                    	je	short en4 ; cf=0
 35321 00002E7E 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 35322                                  	;jne	short if4
 35323                                  	; 12/12/2022
 35324 00002E81 7400                    	je	short en4 ; cf=0
 35325                                  	; 06/09/2023
 35326                                  	; cf=1
 35327                                  
 35328                                  ; 12/12/2022
 35329                                  ;ll4:
 35330                                  ;	; 12/12/2022
 35331                                  ;	; cf=0
 35332                                  ;	;clc
 35333                                  ;	jmp	short en4
 35334                                  
 35335                                  if4:
 35336                                  	; 24/10/2022
 35337                                  	; 06/09/2023 (cf=1)
 35338                                  	;stc
 35339                                  en4:
 35340 00002E83 1F                      	pop	ds
 35341 00002E84 07                      	pop	es
 35342 00002E85 C3                      	retn
 35343                                  
 35344                                  ; 11/12/2022
 35345                                  %if 0
 35346                                  
 35347                                  ;----------------------------------------------------------------------------
 35348                                  ;
 35349                                  ; procedure : badop_p
 35350                                  ;
 35351                                  ;             same thing as badop,but will make sure to set ds register back
 35352                                  ;             to sysinitseg and return back to the caller.
 35353                                  ;
 35354                                  ;----------------------------------------------------------------------------
 35355                                  
 35356                                  badop_p:
 35357                                  	push	cs
 35358                                  	pop	ds		;set ds to configsys seg.
 35359                                  	mov	dx,badopm
 35360                                  	call	print
 35361                                          ;call	error_line
 35362                                  	;retn
 35363                                  	; 11/12/2022
 35364                                  	jmp	error_line
 35365                                  
 35366                                  %endif
 35367                                  
 35368                                  ;----------------------------------------------------------------------------
 35369                                  ;
 35370                                  ; label : badop
 35371                                  ;
 35372                                  ;----------------------------------------------------------------------------
 35373                                  
 35374                                  badop:	
 35375 00002E86 BA[4C50]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 35376 00002E89 E8C81B                  	call	print
 35377 00002E8C E82B00                  	call	error_line	;show "error in config.sys ..." .
 35378 00002E8F E9F4F6                  	jmp	coff
 35379                                  
 35380                                  ;----------------------------------------------------------------------------
 35381                                  ;
 35382                                  ; procedure : badparm_p
 35383                                  ;
 35384                                  ;             show "bad command or parameters - xxxxxx"
 35385                                  ;             in badparm_seg,badparm_off -> xxxxx
 35386                                  ;
 35387                                  ;----------------------------------------------------------------------------
 35388                                  
 35389                                  	; 24/10/2022
 35390                                  badparm_p:
 35391                                  	; 11/12/2022
 35392                                  	; ds = cs
 35393                                  	; 11/12/2022
 35394                                  	;push	ds ; *
 35395 00002E92 52                      	push	dx
 35396 00002E93 56                      	push	si
 35397                                  
 35398                                  	; 11/12/2022
 35399                                  	; ds = cs
 35400                                  	;push	cs
 35401                                  	;pop	ds
 35402                                  
 35403 00002E94 BA[7350]                	mov	dx,badparm
 35404 00002E97 E8BA1B                  	call	print			; "bad command or parameters - "
 35405 00002E9A C536[6B19]              	lds	si,[badparm_ptr]
 35406                                  
 35407                                  ;	print "xxxx" until cr.
 35408                                  
 35409                                  do1:
 35410 00002E9E 8A14                    	mov	dl,[si]			; get next character
 35411 00002EA0 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 35412 00002EA3 7407                    	je	short en1		; exit loop if so
 35413                                  
 35414 00002EA5 B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 35415 00002EA7 CD21                    	int	21h			; display character
 35416 00002EA9 46                      	inc	si			; next character
 35417 00002EAA EBF2                    	jmp	short do1
 35418                                  en1:
 35419 00002EAC 0E                      	push	cs
 35420 00002EAD 1F                      	pop	ds
 35421                                  
 35422 00002EAE BA[7050]                	mov	dx,crlfm
 35423 00002EB1 E8A01B                  	call	print
 35424 00002EB4 E80300                  	call	error_line
 35425                                  
 35426 00002EB7 5E                      	pop	si
 35427 00002EB8 5A                      	pop	dx
 35428                                  	; 11/12/2022
 35429                                  	;pop	ds ; *
 35430                                  badparmp_ret:
 35431 00002EB9 C3                      	retn
 35432                                  
 35433                                  ; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 35434                                  %if 0
 35435                                  
 35436                                  ;----------------------------------------------------------------------------
 35437                                  ;
 35438                                  ; procedure : getchr
 35439                                  ;
 35440                                  ;----------------------------------------------------------------------------
 35441                                  
 35442                                  	; 24/10/2022
 35443                                  getchr:
 35444                                  	; 12/12/2022
 35445                                  	;push	cx
 35446                                  	;mov	cx,[count]
 35447                                  	;jcxz	nochar
 35448                                  	; 12/12/2022
 35449                                  	cmp	word [count],1 
 35450                                  	jb	short nochar ; cf=1 ([count] = 0)
 35451                                  	
 35452                                  	mov	si,[chrptr]
 35453                                  	mov	al,[es:si]
 35454                                  	dec	word [count]
 35455                                  	inc	word [chrptr]
 35456                                  	; 12/12/202
 35457                                  	; cf=0
 35458                                  	;clc
 35459                                  ;get_ret:
 35460                                  	;pop	cx
 35461                                  	;retn
 35462                                  nochar: 
 35463                                  	; 12/12/2022
 35464                                  	; cf=1
 35465                                  	;stc
 35466                                  	;jmp	short get_ret
 35467                                  	
 35468                                  	retn
 35469                                  %endif
 35470                                  
 35471                                  ; 11/12/2022
 35472                                  %if 0
 35473                                  
 35474                                  ;----------------------------------------------------------------------------
 35475                                  ;
 35476                                  ; procedure : incorrect_order
 35477                                  ;
 35478                                  ;             show "incorrect order in config.sys ..." message.
 35479                                  ;
 35480                                  ;----------------------------------------------------------------------------
 35481                                  
 35482                                  incorrect_order:
 35483                                  	mov	dx,badorder
 35484                                  	call	print
 35485                                  	call	showlinenum
 35486                                  	retn
 35487                                  
 35488                                  %endif
 35489                                  
 35490                                  ;----------------------------------------------------------------------------
 35491                                  ;
 35492                                  ; procedure : error_line
 35493                                  ;
 35494                                  ;             show "error in config.sys ..." message.
 35495                                  ;
 35496                                  ;----------------------------------------------------------------------------
 35497                                  
 35498                                  	; 11/12/2022
 35499                                  	; 24/10/2022
 35500                                  error_line:
 35501                                  	; 11/12/2022
 35502                                  	; ds = cs
 35503                                  	;push	cs
 35504                                  	;pop	ds
 35505                                  
 35506 00002EBA BA[A851]                	mov	dx,errorcmd
 35507 00002EBD E8941B                  	call	print
 35508                                  	;call	showlinenum
 35509                                  	;retn
 35510                                  	; 11/12/2022
 35511                                  	;jmp	short shortlinemum
 35512                                  
 35513                                  ;----------------------------------------------------------------------------
 35514                                  ;
 35515                                  ; procedure : showlinenum
 35516                                  ;
 35517                                  ; convert the binary linecount to decimal ascii string in showcount
 35518                                  ; and display showcount at the current curser position.
 35519                                  ; in.) linecount
 35520                                  ;
 35521                                  ; out) the number is printed.
 35522                                  ;
 35523                                  ;----------------------------------------------------------------------------
 35524                                  
 35525                                  	; 11/12/2022
 35526                                  	; ds = cs
 35527                                  	; 24/10/2022
 35528                                  showlinenum:
 35529 00002EC0 06                      	push	es
 35530                                  	; 11/12/2022
 35531                                  	;push	ds
 35532 00002EC1 57                      	push	di
 35533                                  
 35534 00002EC2 0E                      	push	cs
 35535 00002EC3 07                      	pop	es		; es=cs
 35536                                  
 35537                                  	; 11/12/2022
 35538                                  	;push	cs
 35539                                  	;pop	ds
 35540                                  
 35541 00002EC4 BF[B502]                	mov	di,showcount+4	; di -> the least significant decimal field.
 35542 00002EC7 B90A00                  	mov	cx,10		; decimal divide factor
 35543                                  	;mov	ax,[cs:linecount]
 35544                                  	; 11/12/2022
 35545 00002ECA A1[AF02]                	mov	ax,[linecount]
 35546                                  sln_loop:
 35547                                  	; 11/12/2022
 35548 00002ECD 39C8                    	cmp	ax,cx ; < 10 ?
 35549                                  	;cmp	ax,10		; < 10?
 35550 00002ECF 720C                    	jb	short sln_last
 35551                                  
 35552 00002ED1 31D2                    	xor	dx,dx
 35553 00002ED3 F7F1                    	div	cx	; cx = 10
 35554 00002ED5 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 35555 00002ED8 8815                    	mov	[di],dl
 35556 00002EDA 4F                      	dec	di
 35557 00002EDB EBF0                    	jmp	short sln_loop
 35558                                  
 35559                                  sln_last:
 35560 00002EDD 0C30                    	or	al,30h	; "0"
 35561 00002EDF 8805                    	mov	[di],al
 35562 00002EE1 89FA                    	mov	dx,di
 35563 00002EE3 E86E1B                  	call	print		; show it.
 35564 00002EE6 5F                      	pop	di
 35565                                  	; 11/12/2022
 35566                                  	;pop	ds
 35567 00002EE7 07                      	pop	es
 35568 00002EE8 C3                      	retn
 35569                                  
 35570                                  ; 07/04/2019 - Retro DOS v4.0
 35571                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 35572                                  
 35573                                  ;----------------------------------------------------------------------------
 35574                                  ;
 35575                                  ; procedure : ProcDOS
 35576                                  ;
 35577                                  ;	Process the result of DOS= parsing
 35578                                  ;
 35579                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 35580                                  ;				= 2 for DOS=LOW
 35581                                  ;				= 3 for DOS=UMB
 35582                                  ;				= 4 for DOS=NOUMB
 35583                                  ;----------------------------------------------------------------------------
 35584                                  
 35585                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 35586                                  	; (SYTSINIT:2AB5h)
 35587                                  ProcDOS:
 35588                                  	; 01/01/2023
 35589                                  	; ds = cs
 35590 00002EE9 30E4                    	xor	ah,ah
 35591                                  	;;mov	al,[cs:result_val_itag]
 35592                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 35593                                  	; 01/01/2023
 35594 00002EEB A0[1822]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 35595 00002EEE 48                      	dec	ax
 35596 00002EEF 7415                    	jz	short pd_hi
 35597 00002EF1 48                      	dec	ax
 35598 00002EF2 740E                    	jz	short pd_lo
 35599 00002EF4 48                      	dec	ax
 35600 00002EF5 7405                    	jz	short pd_umb
 35601                                  	;;mov	byte [cs:DevUMB],0
 35602                                  	; 18/12/2022
 35603                                  	;mov	byte [cs:DevUMB],ah ; 0
 35604                                  	; 01/01/2023
 35605 00002EF7 8826[4224]              	mov	byte [DevUMB],ah ; 0
 35606 00002EFB C3                      	retn
 35607                                  pd_umb:
 35608                                  	; 01/01/2023
 35609 00002EFC C606[4224]FF            	mov	byte [DevUMB],0FFh
 35610                                  	;mov	byte [cs:DevUMB],0FFh
 35611 00002F01 C3                      	retn
 35612                                  pd_lo:
 35613                                  	; 01/01/2023
 35614 00002F02 A2[6C02]                	mov	[runhigh],al ; 0
 35615                                  	; 18/12/2022
 35616                                  	;mov	[cs:runhigh],al ; 0
 35617                                  	;;mov	byte [cs:runhigh],0
 35618 00002F05 C3                      	retn
 35619                                  pd_hi:
 35620                                  	; 01/01/2023
 35621 00002F06 C606[6C02]FF            	mov	byte [runhigh],0FFh
 35622                                  	;mov	byte [cs:runhigh],0FFh
 35623                                  limx:	; 11/12/2022
 35624 00002F0B C3                      	retn
 35625                                  
 35626                                  ;----------------------------------------------------------------------------
 35627                                  ;
 35628                                  ; procedure : LieInt12Mem
 35629                                  ;
 35630                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 35631                                  ;		alloclim set to the limit of low memory.
 35632                                  ;
 35633                                  ;	Output : none
 35634                                  ;
 35635                                  ;	Changes the ROM BIOS variable which stores the total low memory
 35636                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 35637                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 35638                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 35639                                  ;	converted into Ks and stored in 40:13h
 35640                                  ;
 35641                                  ;----------------------------------------------------------------------------
 35642                                  
 35643                                  LieInt12Mem:
 35644                                  	; 11/12/2022
 35645                                  	; ds = cs
 35646 00002F0C A1[A502]                	mov	ax,[ALLOCLIM]
 35647                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 35648                                  					; assuming that it is 3Com
 35649 00002F0F E84200                  	call	IsIt3Com		; Is it 3Com driver?
 35650 00002F12 740A                    	jz	short lim_set		; yes, lie to him differently
 35651                                  	; 13/05/2019
 35652                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 35653                                  	;je	short limx		; no, don't lie
 35654                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 35655                                  	; 11/12/2022
 35656                                  	; ds = cs
 35657 00002F14 803E[5124]00            	cmp	byte [DeviceHi],0
 35658 00002F19 74F0                    	je	short limx
 35659 00002F1B A1[3724]                	mov	ax,[DevLoadEnd]
 35660                                  lim_set:
 35661                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35662                                  	; 11/12/2022
 35663                                  	;call	SetInt12Mem
 35664                                  ;limx:
 35665                                  	;retn
 35666                                  	
 35667                                  	;jmp	short SetInt12Mem 
 35668                                  
 35669                                  ;----------------------------------------------------------------------------
 35670                                  ;
 35671                                  ; procedure : SetInt12Mem
 35672                                  ;
 35673                                  ;	Input : AX = Memory size to be set (in paras)
 35674                                  ;	Output : none
 35675                                  ;
 35676                                  ;	Sets the variable 40:13 to the memory size passed in AX
 35677                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 35678                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 35679                                  ;	restoring the value of 40:13
 35680                                  ;
 35681                                  ;----------------------------------------------------------------------------
 35682                                  
 35683                                  	; 01/11/2022
 35684                                  SetInt12Mem:
 35685 00002F1E 1E                      	push	ds
 35686 00002F1F BB4000                  	mov	bx,40h
 35687 00002F22 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 35688 00002F24 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 35689                                  	;mov	[cs:OldInt12Mem],bx	; save it
 35690 00002F28 B106                    	mov	cl,6
 35691 00002F2A D3E8                    	shr	ax,cl			; convert paras into Ks
 35692 00002F2C A31300                  	mov	[13h],ax		; Lie
 35693                                  	;mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 35694 00002F2F 1F                      	pop	ds
 35695                                  	; 14/04/2024
 35696                                  	; ds = cs
 35697 00002F30 891E[5524]              	mov	[OldInt12Mem],bx
 35698 00002F34 C606[5424]FF            	mov	byte [Int12Lied],0FFh
 35699                                  ;limx:
 35700 00002F39 C3                      	retn
 35701                                  
 35702                                  ;----------------------------------------------------------------------------
 35703                                  ;
 35704                                  ; procedure : TrueInt12Mem
 35705                                  ;
 35706                                  ;	Input : Int12Lied = 0 if we are not lying currently
 35707                                  ;			  = 0ffh if we are lying
 35708                                  ;		OldInt12Mem = Saved value of 40:13h
 35709                                  ;
 35710                                  ;	Output : none
 35711                                  ;
 35712                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 35713                                  ;	and resets the flag which indicates that we were lying
 35714                                  ;
 35715                                  ;----------------------------------------------------------------------------
 35716                                  
 35717                                  TrueInt12Mem:
 35718                                  	; 11/12/2022
 35719                                  	; ds = cs
 35720 00002F3A 803E[5424]00            	cmp	byte [Int12Lied],0
 35721                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 35722                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 35723                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 35724 00002F3F 7412                    	je	short timx		; no, we weren't
 35725                                  	; 18/12/2022
 35726 00002F41 B84000                  	mov	ax,40h
 35727 00002F44 8826[5424]              	mov	[Int12Lied],ah ; 0
 35728                                  	;mov	byte [Int12Lied],0
 35729                                  	;mov	byte [cs:Int12Lied],0
 35730 00002F48 1E                      	push	ds
 35731                                  	;mov	ax,40h
 35732 00002F49 8ED8                    	mov	ds,ax
 35733 00002F4B 2EA1[5524]              	mov	ax,[cs:OldInt12Mem]
 35734 00002F4F A31300                  	mov	[13h],ax		; restore INT 12 memory
 35735 00002F52 1F                      	pop	ds
 35736                                  timx:
 35737 00002F53 C3                      	retn
 35738                                  
 35739                                  ;----------------------------------------------------------------------------
 35740                                  ;
 35741                                  ; procedure : IsIt3Com?
 35742                                  ;
 35743                                  ;	Input : DevEntry = Seg:0 of device driver
 35744                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 35745                                  ;		 else Zero flag is reset
 35746                                  ;
 35747                                  ;----------------------------------------------------------------------------
 35748                                  
 35749                                  IsIt3Com:
 35750                                  	; 11/12/2022
 35751                                  	; ds = cs
 35752 00002F54 1E                      	push	ds
 35753 00002F55 06                      	push	es
 35754 00002F56 56                      	push	si
 35755                                  	; 11/12/2022
 35756 00002F57 C536[3924]              	lds	si,[DevEntry]
 35757                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 35758 00002F5B 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 35759 00002F5E 0E                      	push	cs
 35760 00002F5F 07                      	pop	es
 35761 00002F60 BF[5724]                	mov	di,ThreeComName
 35762 00002F63 B90800                  	mov	cx,8			; name length
 35763 00002F66 F3A6                    	rep	cmpsb
 35764 00002F68 5E                      	pop	si
 35765 00002F69 07                      	pop	es
 35766 00002F6A 1F                      	pop	ds
 35767 00002F6B C3                      	retn
 35768                                  
 35769                                  ;M020 : BEGIN
 35770                                  ;----------------------------------------------------------------------------
 35771                                  
 35772                                  UpdatePDB:
 35773 00002F6C 1E                      	push	ds
 35774 00002F6D B462                    	mov	ah,62h
 35775 00002F6F CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 35776 00002F71 8EDB                    	mov	ds,bx
 35777 00002F73 2E8B1E[A502]            	mov	bx,[cs:ALLOCLIM]
 35778                                  	;mov	[2],bx
 35779 00002F78 891E0200                	mov	[PDB.BLOCK_LEN],bx
 35780 00002F7C 1F                      	pop	ds
 35781 00002F7D C3                      	retn
 35782                                  
 35783                                  ; M020 : END
 35784                                  
 35785                                  ;----------------------------------------------------------------------------
 35786                                  
 35787                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35788                                  ;%if 0
 35789                                  
 35790                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35791                                  ; (SYSINIT:2EEEh)
 35792                                  
 35793                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 35794                                  ;include highexit.inc	; umb's, etc
 35795                                  
 35796                                  ; ----------------------------------------------------------------------
 35797                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 35798                                  ; ----------------------------------------------------------------------
 35799                                  ; 07/04/2019 - Retro DOS v4.0
 35800                                  
 35801                                  ;******************************************************************************
 35802                                  ;
 35803                                  ; This file contains routines needed to parse and implement user-given
 35804                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 35805                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 35806                                  ; the variables in highvar.inc, for use by the rest of the routines.
 35807                                  ;
 35808                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 35809                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 35810                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 35811                                  ;    DH/LH module opts
 35812                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 35813                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 35814                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 35815                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 35816                                  ; available during the load.
 35817                                  ;
 35818                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 35819                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 35820                                  ; upper-memory block which was not specified by the user... in addition, if
 35821                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 35822                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 35823                                  ; allocated. After the load, the function UnHideUMBs() (in highexit.inc) will
 35824                                  ; free any UMBs so allocated.
 35825                                  ;
 35826                                  ; When a device driver loads, there is the additional problem of allocating its
 35827                                  ; initial load site; this should be restricted to the first UMB specified on
 35828                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 35829                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 35830                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 35831                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 35832                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 35833                                  ;
 35834                                  ;******************************************************************************
 35835                                  
 35836                                  SWTCH	equ	'/'		; Switch character
 35837                                  
 35838                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 35839                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 35840                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 35841                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 35842                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 35843                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 35844                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 35845                                  
 35846                                  CR	equ	0Dh		; Carriage Return
 35847                                  LF	equ	0Ah		; Line Feed
 35848                                  TAB	equ	09h		; Tab character (^I)
 35849                                  
 35850                                  ; -----------------------------------------------------------------------------
 35851                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 35852                                  ; -----------------------------------------------------------------------------
 35853                                  ; ENTRY:       None
 35854                                  ; EXIT:        Variables listed in highvar.inc are initialized
 35855                                  ; ERROR EXIT:  None
 35856                                  ; USES:        Flags, variables in highvar.inc
 35857                                  ; -----------------------------------------------------------------------------
 35858                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1. Its contents
 35859                                  ; are largely ignored, but it is initialized nonetheless.
 35860                                  ; -----------------------------------------------------------------------------
 35861                                  
 35862                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35863                                  ; (SYSINIT:2EEEh)
 35864                                  
 35865                                  InitVar:
 35866                                  	; 01/01/2023
 35867                                  	; ds = cs
 35868                                  
 35869                                  	;pushreg <ax, cx, di, es>
 35870                                  	; 03/01/2023
 35871                                  	;push	ax
 35872                                  	;push	cx
 35873                                  	;push	di
 35874 00002F7E 06                      	push	es
 35875                                  
 35876                                  	;dataseg es			;Point ES into appropriate data segment
 35877 00002F7F 0E                      	push	cs
 35878 00002F80 07                      	pop	es
 35879                                  
 35880 00002F81 31C0                    	xor	ax,ax
 35881                                  	;mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 35882                                  	;mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 35883                                  	;mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 35884                                  	;mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 35885                                  	;				;Later is the # of the 1st spec'd UMB
 35886                                  	;mov	[es:fm_argc], al	;Start with zero args having been read
 35887                                  
 35888                                  	; 01/01/2023
 35889                                  	; ds = cs
 35890 00002F83 A2[FC23]                	mov	[fUmbTiny],al		;Shrink UMBs? (made 1 if /S given)
 35891 00002F86 A2[FB23]                	mov	[fInHigh],al		;Set to 1 when DH/LH has been called
 35892 00002F89 A3[FD23]                	mov	[SegLoad],ax		;Load Address (seg), used for DH only
 35893 00002F8C C606[FF23]FF            	mov	byte [UmbLoad],UNSPECIFIED ; 0FFh
 35894                                  					;Later is the # of the 1st spec'd UMB
 35895 00002F91 A2[3224]                	mov	[fm_argc], al		;Start with zero args having been read
 35896                                  
 35897 00002F94 FC                      	cld
 35898                                  
 35899 00002F95 B91000                  	mov	cx,MAXUMB ; 16		;For each entry
 35900 00002F98 BF[0024]                	mov	di,UmbUsed		;on the UmbUsed array,
 35901 00002F9B F3AA                    	rep	stosb			;	Store 0
 35902                                  
 35903                                  	;mov	cx,MAXUMB ; 16		;Okay... for each entry
 35904                                  	; 01/01/2033
 35905 00002F9D B110                    	mov	cl,MAXUMB ; 16
 35906 00002F9F BF[1024]                	mov	di,UmbSize		;on the UmbSize array,
 35907 00002FA2 F3AB                    	rep	stosw			;	Store 0
 35908                                  
 35909                                  	;normseg es			; Return ES
 35910                                  
 35911                                  	;popreg	<es, di, cx, ax>
 35912 00002FA4 07                      	pop	es
 35913                                  	; 03/01/2023
 35914                                  	;pop	di
 35915                                  	;pop	cx
 35916                                  	;pop	ax	 	
 35917                                  
 35918 00002FA5 C3                      	retn
 35919                                  
 35920                                  ; -----------------------------------------------------------------------------
 35921                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 35922                                  ; -----------------------------------------------------------------------------
 35923                                  ; ENTRY   : None
 35924                                  ; EXIT    : None
 35925                                  ; ERROR   : None
 35926                                  ; USES    : Flags, fm_umb, fm_strat
 35927                                  ; -----------------------------------------------------------------------------
 35928                                  
 35929                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35930                                  	; (SYSINIT:2F22h)
 35931                                  FixMem:
 35932                                  	; 01/01/2023
 35933                                  	;push	ax
 35934                                  	;push	bx
 35935                                  	;push	cx
 35936                                  	;push	dx
 35937 00002FA6 06                      	push	es
 35938                                  
 35939 00002FA7 E84900                  	call	fm_link		; Link in UMBs
 35940                                  
 35941 00002FAA E80002                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 35942 00002FAD 723F                    	jc	short fmX	; (if couldn't get it, leave now).
 35943                                  
 35944 00002FAF 8EC0                    	mov	es,ax		; It returns in AX, so move it to ES.
 35945                                  
 35946                                  ; - Walk MCB Chain ------------------------------------------------------------
 35947                                  
 35948 00002FB1 31D2                    	xor	dx,dx		; We're keeping the address of the last MCB
 35949 00002FB3 89D1                    	mov 	cx,dx		; in CX... and the last owner
 35950 00002FB5 42                      	inc	dx		; in dx as we go through the loop:
 35951                                  
 35952                                  ; ------------------------------------------
 35953                                  ; FM10--DX  = last MCB's owner's PSP address
 35954                                  ;       CX  = last MCB's address (segment)
 35955                                  ; ------------------------------------------
 35956                                  
 35957 00002FB6 26A00000                fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 35958 00002FBA 268B1E0100              	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 35959 00002FBF 09D3                    	or	bx,dx			; dx was owner of previous MCB
 35960 00002FC1 7516                    	jnz	short fm30		; If not both zero, don't cat.
 35961                                  
 35962                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 35963                                  
 35964 00002FC3 268B1E0300              fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 35965 00002FC8 8EC1                    	mov	es,cx			; Go back to prev MCB's address
 35966 00002FCA 26A20000                	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 35967                                  
 35968 00002FCE 26031E0300              	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 35969                                  	;add	bx,1			; And add one for the header
 35970                                  	; 11/07/2023
 35971 00002FD3 43                      	inc	bx
 35972 00002FD4 26891E0300              	mov	[es:ARENA.SIZE],bx	; Write the size
 35973                                  
 35974                                  	; ---------------------------------------------------------------------
 35975                                  
 35976 00002FD9 8CC1                    fm30:	mov	cx,es			; Put this address on the stack
 35977 00002FDB 268B160100              	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 35978                                  
 35979 00002FE0 8CC3                    	mov	bx,es			; Move to the next MCB
 35980 00002FE2 26031E0300              	add	bx,[es:ARENA.SIZE]
 35981 00002FE7 43                      	inc	bx
 35982 00002FE8 8EC3                    	mov	es,bx
 35983                                  
 35984                                  	;cmp	al,'Z'
 35985 00002FEA 3C5A                    	cmp	al,arena_signature_end
 35986 00002FEC 75C8                    	jne	short fm10		; If signature != 'Z', there are more.
 35987                                  fmX:	
 35988 00002FEE E81300                  	call	fm_unlink		; Unlink UMBs
 35989                                  
 35990 00002FF1 07                      	pop	es
 35991                                  	; 01/01/2023
 35992                                  	;pop	dx
 35993                                  	;pop	cx
 35994                                  	;pop	bx
 35995                                  	;pop	ax
 35996                                  
 35997 00002FF2 C3                      	retn
 35998                                  
 35999                                  ; -----------------------------------------------------------------------------
 36000                                  ;*** fm_link - links UMBs not already linked in
 36001                                  ; -----------------------------------------------------------------------------
 36002                                  ; ENTRY:    None
 36003                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 36004                                  ; ERROR:    None
 36005                                  ; USES:     AX, BX, fm_umb
 36006                                  ; -----------------------------------------------------------------------------
 36007                                  
 36008                                  	; 01/01/2023 - Retro DOS v4.2
 36009                                  fm_link:
 36010 00002FF3 B80258                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 36011 00002FF6 CD21                    	int	21h			; Current link-state is now in al
 36012                                  
 36013                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 36014                                  	;
 36015                                  	;push	es
 36016                                  	;push	cs
 36017                                  	;pop	es
 36018                                  	;mov	[es:fm_umb],al
 36019                                  	;pop	es
 36020                                  	
 36021                                  	; 01/01/2023
 36022                                  	; ds = cs
 36023                                  	;mov	[cs:fm_umb],al
 36024 00002FF8 A2[3024]                	mov	[fm_umb],al
 36025                                  
 36026 00002FFB B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 36027 00002FFE BB0100                  	mov	bx,1
 36028 00003001 CD21                    	int	21h
 36029 00003003 C3                      	retn
 36030                                  
 36031                                  ; -----------------------------------------------------------------------------
 36032                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 36033                                  ; -----------------------------------------------------------------------------
 36034                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 36035                                  ; EXIT:     None
 36036                                  ; ERROR:    None
 36037                                  ; USES:     AX, BX
 36038                                  ; -----------------------------------------------------------------------------
 36039                                  
 36040                                  	; 01/01/2023 - Retro DOS v4.2
 36041                                  fm_unlink:
 36042 00003004 31DB                    	xor	bx,bx
 36043                                  	
 36044                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 36045                                  	;
 36046                                  	;push	ds
 36047                                  	;push	cs
 36048                                  	;pop	ds
 36049                                  	;mov	bl,[fm_umb]	
 36050                                  	;pop	ds
 36051                                  	
 36052                                  	; 01/01/2023
 36053                                  	; ds = cs
 36054                                  	;mov	bl,[cs:fm_umb]
 36055 00003006 8A1E[3024]              	mov	bl,[fm_umb]
 36056                                  
 36057 0000300A B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 36058 0000300D CD21                    	int	21h			; so just use that, and call int 21h
 36059 0000300F C3                      	retn
 36060                                  
 36061                                  ; 08/04/2019 - Retro DOS v4.0
 36062                                  
 36063                                  ; -----------------------------------------------------------------------------
 36064                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 36065                                  ; laid out in highvar.inc
 36066                                  ; -----------------------------------------------------------------------------
 36067                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 36068                                  ; EXIT:     ES:SI points to first character in child program name
 36069                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 36070                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 36071                                  ; -----------------------------------------------------------------------------
 36072                                  ; Error codes (in AX if carry set on return):
 36073                                  ;
 36074                                  PV_InvArg	equ	1	; Invalid argument passed
 36075                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 36076                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 36077                                  ;
 36078                                  ; This routine exects ES:SI to point to a string much like the following:
 36079                                  ;    "/S/L:1,200;2 module options"
 36080                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 36081                                  ; required, though that's what this routine is supposed to parse.
 36082                                  ;
 36083                                  optS		equ	'S'	; /S
 36084                                  optL		equ	'L'	; /L:...
 36085                                  ;
 36086                                  ; -----------------------------------------------------------------------------
 36087                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 36088                                  ; a command-line for spawning a child process. For a typical LH command, say,
 36089                                  ;     lh /l:1,1000;2 print/d:lpt2
 36090                                  ; the arguments would look like (one per line):
 36091                                  ;     lh
 36092                                  ;     /l
 36093                                  ;     1
 36094                                  ;     1000
 36095                                  ;     2
 36096                                  ;     print
 36097                                  ;     /d
 36098                                  ;     :lpt2
 36099                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 36100                                  ; arg was the filename. So, inside this routine, we keep a running counter
 36101                                  ; of the number of arguments LH will need to skip in order to get to the
 36102                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 36103                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 36104                                  ; for:
 36105                                  ;    Each /L
 36106                                  ;    Each /S (there should be only one)
 36107                                  ;    Each UMB number (they follow ":" or ";")
 36108                                  ;    Each UMB size   (they follow ",")
 36109                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 36110                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 36111                                  ; -----------------------------------------------------------------------------
 36112                                  
 36113                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36114                                  	; (SYSINIT:2F9Fh)
 36115                                  
 36116                                  ParseVar:
 36117                                  	;pushreg <di, ds, es>
 36118                                  	; 01/01/2023
 36119                                  	;push	di ; * ; (not required) ; 01/01/2023
 36120 00003010 1E                      	push	ds
 36121 00003011 06                      	push	es
 36122                                  
 36123 00003012 06                      	push	es		; Make DS:SI point to it, as well as ES:SI
 36124 00003013 1F                      	pop	ds		; (regardless if we're in devhigh or loadhigh)
 36125 00003014 FC                      	cld
 36126                                  
 36127                                  ; ------------------------------------------------
 36128                                  ; PV10--ES:SI = any whitespace on the command-line
 36129                                  ; ------------------------------------------------
 36130                                  
 36131 00003015 AC                      pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 36132 00003016 E8A200                  	call	isWhite
 36133 00003019 74FA                    	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 36134                                  	;cmp	al,'/'
 36135 0000301B 3C2F                    	cmp	al,SWTCH
 36136 0000301D 7404                    	je	short pv20	;       ES:SI=="/L..."--go process a switch
 36137                                  
 36138 0000301F 4E                      	dec	si		; Backup--it's now "odule options", and we need
 36139 00003020 F8                      	clc			; that "m" we just read (or whatever it is).
 36140 00003021 EB2B                    	jmp	short pvX	; Then return with carry clear == we're done.
 36141                                  
 36142 00003023 AC                      pv20:	lodsb			; Just read 'S' or 'L', hopefully
 36143                                  	;toUpper al		; So we make it upper-case, and...
 36144 00003024 24DF                    	and	al,0DFh
 36145                                  	;cmp	al,'S'
 36146 00003026 3C53                    	cmp	al,optS		; just read 'S'?
 36147 00003028 750D                    	jne	short pv30
 36148                                  
 36149                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 36150 0000302A 2EFE06[3224]            	inc	byte [cs:fm_argc] ; 19/04/2019
 36151                                  
 36152                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 36153                                  	;
 36154                                  	;push	es
 36155                                  	;push	cs
 36156                                  	;pop	es
 36157                                  	;mov	[es:fUmbTiny],1	
 36158                                  	;pop	es
 36159                                  
 36160 0000302F 2EC606[FC23]01          	mov	byte [cs:fUmbTiny],1
 36161                                  
 36162 00003035 EBDE                    	jmp	short pv10	; possibly even "/L...".
 36163                                  
 36164                                  pv30:	;cmp	al,'L'
 36165 00003037 3C4C                    	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 36166 00003039 750D                    	jne	short pvE1		; switch!
 36167                                  
 36168                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 36169 0000303B 2EFE06[3224]            	inc	byte [cs:fm_argc] ; 19/04/2019
 36170                                  
 36171 00003040 E80E00                  	call	parseL
 36172 00003043 73D0                    	jnc	short pv10	; If no carry, go back and look for more
 36173                                  
 36174 00003045 4E                      	dec	si		; Else, back up and exit.
 36175 00003046 EB03                    	jmp	short pvErr	; AX has already been set by parseL
 36176                                  
 36177                                  pvE1:	;mov	ax,3
 36178 00003048 B80300                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 36179 0000304B 4E                      pvErr:	dec	si
 36180 0000304C 4E                      	dec	si
 36181 0000304D F9                      	stc
 36182                                  pvX:	;popreg	<es, ds, di>
 36183 0000304E 07                      	pop	es
 36184 0000304F 1F                      	pop	ds
 36185                                  	; 01/01/2023
 36186                                  	;pop	di ; * ; (not required) ; 01/01/2023
 36187 00003050 C3                      	retn
 36188                                  
 36189                                  ; -----------------------------------------------------------------------------
 36190                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 36191                                  ; -----------------------------------------------------------------------------
 36192                                  ; ENTRY:    ES:SI points to colon
 36193                                  ; EXIT:     ES:SI points to first character not parsed
 36194                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 36195                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 36196                                  ; -----------------------------------------------------------------------------
 36197                                  ; If the string here is terminated with anything other than whitespace or a
 36198                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 36199                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 36200                                  ; makes sure the app /L: is reported as being the culprit.
 36201                                  ; -----------------------------------------------------------------------------
 36202                                  
 36203                                  parseL:
 36204 00003051 AC                      	lodsb
 36205 00003052 3C3A                    	cmp	al,':'		; Make sure they did /L:
 36206 00003054 754E                    	jne	short plE1	; If they didn't, return with carry set.
 36207                                  
 36208                                  ; ------------------------------------------
 36209                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 36210                                  ; ------------------------------------------
 36211                                  
 36212 00003056 E8DB00                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 36213 00003059 724F                    	jc	short plE2	; And error if it's a bad number.
 36214 0000305B E89D01                  	call	convUMB		; Convert any address to a UMB number
 36215                                  
 36216 0000305E 88C1                    	mov	cl,al		; Remember the UMB number
 36217 00003060 E87600                  	call	stowUMB		; Mark this UMB # as used;
 36218 00003063 7245                    	jc	short plE2	; If it was already marked, it'll error
 36219                                  
 36220                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 36221 00003065 2EFE06[3224]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 36222                                  
 36223 0000306A AC                      	lodsb
 36224 0000306B 3C3B                    	cmp	al,';'		; Did "umb;" ?
 36225 0000306D 74E7                    	je	short pl10	; Yep: go back and get another UMB.
 36226                                  
 36227 0000306F E84900                  	call	isWhite		; Did "umb " ?
 36228 00003072 743B                    	jz	short plX	; Yep: return (it'll go back to whitespace)
 36229                                  
 36230 00003074 E83900                  	call	isEOL		; Did "umb" ?
 36231 00003077 7435                    	jz	short plSwX	; If so, backup and exit like everything's ok
 36232                                  
 36233                                  	;cmp	al,'/'
 36234 00003079 3C2F                    	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 36235 0000307B 7431                    	je	short plSwX	; If so, back up ES:SI one character and return
 36236                                  
 36237 0000307D 3C2C                    	cmp	al,','		; Did "umb," ?
 36238 0000307F 7523                    	jne	short plE1	; Just what the heck DID they do? Return error.
 36239                                  
 36240                                  ; --- Read a size -------------------------------------------------------------
 36241                                  
 36242 00003081 E8B000                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 36243 00003084 721E                    	jc	short plE1	; And error if it's a bad size.
 36244                                  
 36245 00003086 E81601                  	call	toPara		; Convert from bytes to paragraphs
 36246                                  
 36247 00003089 E8CE01                  	call	stowSiz		; CL still has the UMB number for this routine
 36248                                  
 36249                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 36250 0000308C 2EFE06[3224]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 36251                                  
 36252 00003091 AC                      	lodsb
 36253 00003092 3C3B                    	cmp	al,';'		; They did "umb,size;", so get another UMB.
 36254 00003094 74C0                    	je	short pl10	;
 36255                                  
 36256 00003096 E82200                  	call	isWhite		; Did it end with whitespace?
 36257 00003099 7414                    	jz	short plX	; If so, we're done here--go back.
 36258                                  
 36259 0000309B E81200                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 36260 0000309E 740E                    	jz	short plSwX	; If so, backup and exit like everything's ok
 36261                                  
 36262                                  	;cmp	al,'/'
 36263 000030A0 3C2F                    	cmp	al,SWTCH	; Did they do "umb,size/" ?
 36264 000030A2 740A                    	je	short plSwX	; If so, again, we're done here.
 36265                                  plE1:	
 36266                                  	;mov	ax,1
 36267 000030A4 B80100                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 36268 000030A7 4E                      	dec	si
 36269 000030A8 F9                      	stc
 36270 000030A9 C3                      	retn
 36271                                  
 36272                                  plE2:	;mov	ax,2
 36273 000030AA B80200                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 36274                                  	; 12/12/2022
 36275                                  	; cf=1
 36276                                  	;stc
 36277 000030AD C3                      	retn
 36278                                  plSwX:	
 36279 000030AE 4E                      	dec	si		; If we hit a '/' character, back up one char
 36280                                  				; so the whitespace checker will see it too.
 36281                                  plX:	; 12/12/2022
 36282                                  	; cf=0
 36283                                  	;clc			; Then just return with carry clear, so
 36284 000030AF C3                      	retn			; ParseVar will go about its business.
 36285                                  
 36286                                  ; -----------------------------------------------------------------------------
 36287                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 36288                                  ; -----------------------------------------------------------------------------
 36289                                  ; ENTRY:    None
 36290                                  ; EXIT:     None
 36291                                  ; ERROR:    None
 36292                                  ; USES:     fm_argc, flags
 36293                                  ; -----------------------------------------------------------------------------
 36294                                  
 36295                                  ;incArgc:
 36296                                  	;push	ax
 36297                                  
 36298                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 36299                                  
 36300                                  	;mov	al,[cs:fm_argc]
 36301                                  
 36302                                  	;inc	al		; Increment it,
 36303                                  
 36304                                  	;;putdata fm_argc, al	; And store it right back.
 36305                                  
 36306                                  	;mov	[cs:fm_argc],al
 36307                                  
 36308                                  	;pop	ax
 36309                                  	;retn
 36310                                  
 36311                                  ; -----------------------------------------------------------------------------
 36312                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 36313                                  ; -----------------------------------------------------------------------------
 36314                                  ; ENTRY:    AL contains character to test
 36315                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 36316                                  ; ERROR:    None
 36317                                  ; USES:     ZF
 36318                                  ; -----------------------------------------------------------------------------
 36319                                  
 36320                                  isEOL:
 36321 000030B0 3C00                    	cmp	al,0		; Null-terminator
 36322 000030B2 7406                    	je	short ieX
 36323 000030B4 3C0D                    	cmp	al,CR ; 0Dh	; Carriage Return
 36324 000030B6 7402                    	je	short ieX
 36325 000030B8 3C0A                    	cmp	al,LF ; 0Ah	; LineFeed
 36326                                  ieX:	
 36327 000030BA C3                      	retn
 36328                                  
 36329                                  ; -----------------------------------------------------------------------------
 36330                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 36331                                  ; -----------------------------------------------------------------------------
 36332                                  ; ENTRY:    AL contains character to test
 36333                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 36334                                  ; ERROR:    None
 36335                                  ; USES:     ZF
 36336                                  ; -----------------------------------------------------------------------------
 36337                                  
 36338                                  isWhite:
 36339 000030BB 3C20                    	cmp	al,' '		; Space
 36340 000030BD 7406                    	je	short iwX
 36341 000030BF 3C3D                    	cmp	al,'='		; Equals (treat as whitespace)
 36342 000030C1 7402                    	je	short iwX
 36343 000030C3 3C09                    	cmp	al,tab ; 9	; Tab
 36344                                  iwX:	
 36345 000030C5 C3                      	retn
 36346                                  
 36347                                  ; -----------------------------------------------------------------------------
 36348                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 36349                                  ; -----------------------------------------------------------------------------
 36350                                  ; ENTRY:    AL contains UMB number
 36351                                  ; EXIT:     None
 36352                                  ; ERROR:    None
 36353                                  ; USES:     Flags, variables in highvar.inc
 36354                                  ; -----------------------------------------------------------------------------
 36355                                  
 36356                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36357                                  
 36358                                  unMarkUMB:
 36359                                  	; 02/01/2023
 36360                                  	;push	ax
 36361                                  	;push	bx
 36362                                  	;push	di
 36363                                  	;push	es
 36364                                  	;
 36365                                  	;push	cs
 36366                                  	;pop	es
 36367                                  
 36368 000030C6 30E4                    	xor	ah,ah
 36369 000030C8 89C3                    	mov	bx,ax
 36370                                  
 36371                                  	; 19/04/2019
 36372                                  	
 36373                                  	;;mov	byte [es:bx+UmbUsed],0
 36374                                  	;mov	[es:bx+UmbUsed],ah ; 0
 36375                                  	; 02/01/2023
 36376                                  	; ds= cs
 36377                                  	;mov	[cs:bx+UmbUsed],ah ; 0
 36378 000030CA 88A7[0024]              	mov	[bx+UmbUsed],ah ; 0
 36379                                  
 36380 000030CE 3806[FF23]              	cmp	[UmbLoad],al
 36381                                  	;cmp	[cs:UmbLoad],al
 36382                                  	;;cmp	[es:UmbLoad],al
 36383 000030D2 7504                    	jne	short umu10
 36384                                  
 36385                                  	;;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 36386                                  	;mov	[es:UmbLoad],ah ; 0
 36387                                  	; 02/01/2023
 36388                                  	; ds = cs
 36389                                  	;mov	[cs:UmbLoad],ah ; 0
 36390 000030D4 8826[FF23]              	mov	[UmbLoad],ah ; 0
 36391                                  umu10:	
 36392                                  	;pop	es
 36393                                  	;pop	di
 36394                                  	;pop	bx
 36395                                  	;pop	ax
 36396 000030D8 C3                      	retn
 36397                                  
 36398                                  ; -----------------------------------------------------------------------------
 36399                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 36400                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 36401                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 36402                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 36403                                  ; -----------------------------------------------------------------------------
 36404                                  ; ENTRY:    AL contains UMB number, as specified by the user
 36405                                  ; EXIT:     None
 36406                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 36407                                  ; USES:     AX, Flags, variables in highvar.inc
 36408                                  ; -----------------------------------------------------------------------------
 36409                                  
 36410                                  	; 01/01/2023 - Retro DOS v4.2
 36411                                  stowUMB:
 36412 000030D9 3C10                    	cmp	al,MAXUMB ; 16
 36413 000030DB 7202                    	jb	short su10
 36414 000030DD F9                      	stc
 36415 000030DE C3                      	retn			; Ooops-- UMB>=MAXUMB
 36416                                  su10:	
 36417                                  	; 01/01/2023
 36418                                  	;push	bx
 36419                                  	;push	di
 36420                                  	;push	si
 36421                                  	;push	ds
 36422                                  	;push	es
 36423                                  	;push	cs
 36424                                  	;pop	es
 36425                                  	;push	cs
 36426                                  	;pop	ds
 36427                                  
 36428                                  	; 01/01/2023
 36429                                  	; ds <> cs
 36430                                  	;cmp	byte [cs:UmbLoad],0FFh
 36431 000030DF 2E803E[FF23]FF          	cmp	byte [cs:UmbLoad],UNSPECIFIED
 36432                                  				; If this, we haven't been here before
 36433 000030E5 7504                    	jne	short su20
 36434 000030E7 2EA2[FF23]              	mov	[cs:UmbLoad],al	; So remember this UMB as the load UMB slot.
 36435                                  
 36436                                  	;;cmp	byte [UmbLoad],0FFh
 36437                                  	;cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 36438                                  	;jne	short su20
 36439                                  	;mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 36440                                  su20:	
 36441 000030EB 08C0                    	or	al,al		; If they gave UMB 0, there's really nothing
 36442 000030ED 740E                    	jz	short su30	; that we should do here.
 36443                                  
 36444                                  	;mov	bl,al
 36445                                  	;xor	bh,bh
 36446                                  	;mov	ax,1		; Now, AX = 1, and BX = UMB Number
 36447                                  	; 01/01/2023
 36448 000030EF 30E4                    	xor	ah,ah
 36449 000030F1 89C3                    	mov	bx,ax
 36450 000030F3 B001                    	mov	al,1
 36451                                  
 36452                                  	;xchg	[es:bx+UmbUsed],al
 36453                                  	; 01/01/2023
 36454 000030F5 2E8687[0024]            	xchg	[cs:bx+UmbUsed],al
 36455                                  
 36456                                  	;or	al,al		; If it was already 1, then al==1... and that
 36457                                  	;jz	short su30	; means an error.
 36458                                  	;
 36459                                  	;stc			; OOOPS!  This one's been used before.  :(
 36460                                  	
 36461                                  	; 01/01/2023
 36462 000030FA 3C01                    	cmp	al,1
 36463 000030FC F5                      	cmc 	; if al > 0 -> cf = 1
 36464                                  su30:	
 36465                                  	; 01/01/2023
 36466                                  	;pop	es
 36467                                  	;pop	ds
 36468                                  	;pop	si
 36469                                  	;pop	di
 36470                                  	;pop	bx
 36471 000030FD C3                      	retn
 36472                                  
 36473                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36474                                  %if 0
 36475                                  ; -----------------------------------------------------------------------------
 36476                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 36477                                  ; -----------------------------------------------------------------------------
 36478                                  ; ENTRY:    CL contains UMB number, AX contains size
 36479                                  ; EXIT:     None
 36480                                  ; ERROR:    None
 36481                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 36482                                  ; -----------------------------------------------------------------------------
 36483                                  
 36484                                  ; 13/05/2019
 36485                                  
 36486                                  	; 01/01/2023 - Retro DOS v4.2
 36487                                  stowSiz:
 36488                                  	; 01/01/2023
 36489                                  	;push	bx
 36490                                  	;;push	di ; ?
 36491                                  	;push	es
 36492                                  
 36493                                  	;push	cs
 36494                                  	;pop	es	
 36495                                  
 36496                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 36497                                  	mov	bh,0			;     bx==UMB number, AX==size
 36498                                  	shl	bl,1			;     bx==offset into array, AX=size
 36499                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 36500                                  	; 01/01/2023
 36501                                  	mov	[cs:bx+UmbSize],ax	; Store the size
 36502                                  
 36503                                  	; 01/01/2023
 36504                                  	;pop	es
 36505                                  	;;pop	di ; ?
 36506                                  	;pop	bx
 36507                                  
 36508                                  	retn
 36509                                  %endif
 36510                                  
 36511                                  ; -----------------------------------------------------------------------------
 36512                                  ;*** toDigit - converts a character-digit to its binary counterpart
 36513                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 36514                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 36515                                  ; A-F are considered valid iff gnradix is 16.
 36516                                  ; -----------------------------------------------------------------------------
 36517                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 36518                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 36519                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 36520                                  ; USES:     CL, Flags
 36521                                  ; -----------------------------------------------------------------------------
 36522                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 36523                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 36524                                  ; will be 10 or 16.
 36525                                  ; -----------------------------------------------------------------------------
 36526                                  
 36527                                  gnradix:
 36528 000030FE 0000                    	dw	0		; Must be a word--16x16 multiplication
 36529                                  
 36530                                  toDigit:
 36531 00003100 2E833E[FE30]10          	cmp	word [cs:gnradix],16
 36532 00003106 751C                    	jne	short td20	; Don't check hex digits if radix isn't 16
 36533                                  
 36534                                  toDigit_hex:
 36535 00003108 80F961                  	cmp	cl,'a'	; 61h
 36536 0000310B 7209                    	jb	short td10
 36537 0000310D 80F966                  	cmp	cl,'f'	; 66h
 36538 00003110 7720                    	ja	short tdE	; Nothing valid above 'z' at all...
 36539 00003112 80E957                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 36540                                  	;clc			; <- CLC is implicit from last SUB
 36541 00003115 C3                      	retn
 36542                                  td10:	
 36543 00003116 80F941                  	cmp	cl,'A'  ; 41h
 36544 00003119 7209                    	jb	short td20	; Below 'A'?  Not a letter...
 36545 0000311B 80F946                  	cmp	cl,'F'	; 46h
 36546 0000311E 7712                    	ja	short tdE	; Above 'F'?  Not a digit.
 36547 00003120 80E937                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 36548                                  	;clc			; <- CLC is implicit from last SUB
 36549 00003123 C3                      	retn
 36550                                  toDigit_dec:
 36551                                  td20:	
 36552 00003124 80F930                  	cmp	cl,'0'		; If less than zero,
 36553                                  	;jb	short tdE	; Done.
 36554 00003127 720A                    	jb	short tdEr ; 08/04/2019
 36555 00003129 80F939                  	cmp	cl,'9'		; Or, if greater than nine,
 36556 0000312C 7704                    	ja	short tdE	; Done.
 36557 0000312E 80E930                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 36558                                  	;clc			; <- CLC is implicit from last SUB
 36559 00003131 C3                      	retn
 36560                                  tdE:	
 36561 00003132 F9                      	stc
 36562                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 36563 00003133 C3                      	retn
 36564                                  
 36565                                  ; -----------------------------------------------------------------------------
 36566                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 36567                                  ; -----------------------------------------------------------------------------
 36568                                  ; ENTRY:    ES:SI points to an ascii string to scan
 36569                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 36570                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 36571                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 36572                                  ; -----------------------------------------------------------------------------
 36573                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 36574                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 36575                                  ; will be 10 or 16.
 36576                                  ; -----------------------------------------------------------------------------
 36577                                  
 36578                                  ; 08/04/2019 - Retro DOS v4.0
 36579                                  
 36580                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36581                                  ; (SYSINIT:3109h)
 36582                                  
 36583                                  GetXNum:
 36584                                  	;pushreg <bx, cx, ds>
 36585                                  	; 01/01/2023
 36586                                  	;push	bx
 36587 00003134 51                      	push	cx ; *
 36588                                  	;push	ds
 36589                                  
 36590 00003135 FC                      	cld
 36591 00003136 31C0                    	xor	ax,ax
 36592 00003138 31DB                    	xor	bx,bx
 36593 0000313A 31C9                    	xor	cx,cx
 36594 0000313C 31D2                    	xor	dx,dx			; Start with 0 (makes sense)
 36595                                  
 36596 0000313E 2EC706[FE30]0A00        	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 36597                                  
 36598 00003145 268A0C                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 36599                                  	;call	toDigit
 36600 00003148 E8D9FF                  	call	toDigit_dec
 36601                                  	;jc	short gxnE		; If it's not a digit, leave now.
 36602                                  	; 01/01/2023
 36603 0000314B 7233                    	jc	short gxnX
 36604                                  
 36605 0000314D 08C9                    	or	cl,cl
 36606 0000314F 7517                    	jnz	short gxn20		; Doesn't have '0x'
 36607 00003151 268A4C01                	mov	cl,[es:si+1]
 36608 00003155 80F978                  	cmp	cl,'x'			; Either 'x'...
 36609 00003158 7405                    	je	short gxn10
 36610 0000315A 80F958                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 36611 0000315D 7509                    	jne	short gxn20
 36612                                  
 36613                                  gxn10:	
 36614 0000315F 2EC706[FE30]1000        	mov	word [cs:gnradix], 16
 36615 00003166 46                      	inc	si			; Since we read "0x", march over it.
 36616 00003167 46                      	inc	si
 36617                                  
 36618                                  ; ------------------------------------------------------
 36619                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 36620                                  ;        DX:AX = current total
 36621                                  ;        BX    = 0
 36622                                  ;        CH    = 0
 36623                                  ; ------------------------------------------------------
 36624                                  
 36625                                  gxn20:	
 36626 00003168 268A0C                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 36627 0000316B 46                      	inc	si
 36628                                  
 36629 0000316C E891FF                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 36630 0000316F 720D                    	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 36631                                  
 36632 00003171 E80E00                  	call	mul32		; Multiply DX:AX by gnradix
 36633 00003174 720A                    	jc	short gxnX	; (if it's too big, error out)
 36634                                  
 36635 00003176 01C8                    	add	ax,cx		; Add the digit
 36636 00003178 11DA                    	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 36637                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 36638                                  	;jmp	short gxn20
 36639 0000317A 73EC                    	jnc	short gxn20
 36640                                  gxnE:	
 36641                                  	;stc			; In this case, we need to set the carry
 36642 0000317C EB02                    	jmp	short gxnX	; and leave--there were no digits given.
 36643                                  gxnQ:	
 36644 0000317E 4E                      	dec	si		; Don't read in the offensive character.
 36645 0000317F F8                      	clc			; And clear carry, so they know it's okay.
 36646                                  gxnX:	
 36647                                  	; 01/01/2023
 36648                                  	;pop	ds
 36649 00003180 59                      	pop	cx ; *
 36650                                  	;pop	bx
 36651 00003181 C3                      	retn
 36652                                  
 36653                                  ; -----------------------------------------------------------------------------
 36654                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 36655                                  ; -----------------------------------------------------------------------------
 36656                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 36657                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 36658                                  ; ERROR:   Carry set if number was too large
 36659                                  ; USES:    Flags, AX, DX
 36660                                  ; -----------------------------------------------------------------------------
 36661                                  
 36662                                  mul32:
 36663 00003182 50                      	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 36664 00003183 89D0                    	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 36665 00003185 2EF726[FE30]            	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 36666 0000318A 7211                    	jc	short m32E	; Too big?
 36667                                  
 36668 0000318C 89C2                    	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 36669 0000318E 58                      	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 36670                                  
 36671 0000318F 87D3                    	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 36672 00003191 2EF726[FE30]            	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 36673 00003196 87D3                    	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 36674 00003198 01DA                    	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 36675 0000319A 31DB                    	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 36676 0000319C C3                      	retn
 36677                                  m32E:	
 36678 0000319D 58                      	pop	ax
 36679 0000319E C3                      	retn
 36680                                  
 36681                                  ; -----------------------------------------------------------------------------
 36682                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 36683                                  ; -----------------------------------------------------------------------------
 36684                                  ; ENTRY:   DX:AX = the number to be divided
 36685                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 36686                                  ; ERROR:   None
 36687                                  ; USES:    Flags, AX, DX
 36688                                  ; -----------------------------------------------------------------------------
 36689                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 36690                                  ;       can't ensure a 386 host machine. Sorry.
 36691                                  ; -----------------------------------------------------------------------------
 36692                                  
 36693                                  	; 01/01/2023 - Retro DOS v4.2
 36694                                  toPara:
 36695 0000319F 51                      	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 36696                                  
 36697 000031A0 B104                    	mov	cl,4		;
 36698 000031A2 D3E8                    	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 36699 000031A4 92                      	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 36700 000031A5 B10C                    	mov	cl,12
 36701 000031A7 D3E0                    	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 36702 000031A9 09D0                    	or	ax,dx		;    AX=hhhh LLLL llll llll
 36703                                  
 36704 000031AB 59                      	pop	cx
 36705 000031AC C3                      	retn
 36706                                  
 36707                                  ; -----------------------------------------------------------------------------
 36708                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 36709                                  ; -----------------------------------------------------------------------------
 36710                                  ; ENTRY:  Nothing
 36711                                  ; EXIT:   AX contains 0x9FFF for most systems
 36712                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 36713                                  ; USES:   Flags, AX
 36714                                  ; -----------------------------------------------------------------------------
 36715                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 36716                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 36717                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 36718                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 36719                                  ; -----------------------------------------------------------------------------
 36720                                  
 36721                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36722                                  UmbHead:
 36723                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 36724                                  
 36725                                  	;push	si ; ?
 36726                                  	;push	ds ; ? 
 36727                                  	;push	es
 36728                                  	;push	bx ; *	
 36729                                  
 36730                                  	; 09/04/2019
 36731                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 36732                                  
 36733 000031AD B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 36734 000031AF CD21                    	int	21h
 36735                                  
 36736 000031B1 26A18C00                	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 36737                                  	
 36738                                  	; 01/01/2023
 36739 000031B5 83F8FF                  	cmp	ax,0FFFFh
 36740 000031B8 F5                      	cmc
 36741                                  	; if AX=0FFFFh -> CF=1
 36742 000031B9 C3                      	retn
 36743                                  
 36744                                  ; 01/01/2023
 36745                                  ;%if 0
 36746                                  ;	cmp	ax,0FFFFh
 36747                                  ;	je	short uhE		; If it's 0xFFFF, it's an error...
 36748                                  ;
 36749                                  ;	clc				; Else, it isn't (CLC done by prev cmp)
 36750                                  ;	;jmp	short uhX
 36751                                  ;	; 12/12/2022
 36752                                  ;	retn
 36753                                  ;uhE:	
 36754                                  ;	stc
 36755                                  ;uhX:	
 36756                                  ;	;pop	bx ; *
 36757                                  ;	;pop	es
 36758                                  ;	;pop	ds ; ?
 36759                                  ;	;pop	si ; ?
 36760                                  ;	retn
 36761                                  ;%endif
 36762                                  
 36763                                  ; -----------------------------------------------------------------------------
 36764                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 36765                                  ; -----------------------------------------------------------------------------
 36766                                  ; ENTRY:  ES:0 should point to a valid MCB
 36767                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 36768                                  ; USES:   Flags
 36769                                  ; -----------------------------------------------------------------------------
 36770                                  
 36771                                  isSysMCB:
 36772                                  	;push	ax
 36773                                  
 36774                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 36775                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 36776                                  	;je	short ism10
 36777                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 36778                                  	;;je	short ism10
 36779                                  	;;jmp	short ismX		; Anything else isn't.
 36780                                  	;jne	short ismX
 36781 000031BA 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 36782 000031C0 7507                    	jne	short ismX 
 36783                                  ism10:	
 36784                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 36785                                  	;cmp	ax,'SC' ; 4353h
 36786 000031C2 26813E08005343          	cmp	word [es:ARENA.NAME],'SC'
 36787                                  ismX:	
 36788                                  	;pop	ax
 36789 000031C9 C3                      	retn
 36790                                  
 36791                                  ; 09/04/2019 - Retro DOS v4.0
 36792                                  
 36793                                  ; -----------------------------------------------------------------------------
 36794                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 36795                                  ; -----------------------------------------------------------------------------
 36796                                  ; ENTRY:  AX contains a segment address
 36797                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 36798                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 36799                                  ; USES:   Flags, AX
 36800                                  ; -----------------------------------------------------------------------------
 36801                                  ; An address in the following areas is treated as:
 36802                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 36803                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 36804                                  ;      ...
 36805                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 36806                                  ; -----------------------------------------------------------------------------
 36807                                  
 36808                                  	; 01/01/2023 - Retro DOS v4.2
 36809                                  AddrToUmb:
 36810                                  	; 01/01/2023
 36811                                  	;push	cx
 36812                                  	;push	dx
 36813 000031CA 06                      	push	es
 36814                                  
 36815 000031CB 89C2                    	mov	dx,ax		; DX = address to search for
 36816                                  
 36817 000031CD E8DDFF                  	call	UmbHead		; AX = first segment
 36818 000031D0 7222                    	jc	short atuE	; If it couldn't get it, error out.
 36819                                  
 36820                                  	; 22/07/2023
 36821                                  	;mov	es,ax ; *	; ES = first UMB segment
 36822 000031D2 31C9                    	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 36823                                  
 36824                                  	; 22/07/2023
 36825                                  atu10:
 36826 000031D4 8EC0                    	mov	es,ax ; * ; ** ; 22/07/2023
 36827                                  ; ----------------------------------------
 36828                                  ; ATU10--ES - Current MCB address
 36829                                  ;        DX - Address given for conversion
 36830                                  ;        CX - Current UMB #
 36831                                  ; ----------------------------------------
 36832                                  
 36833                                  ;atu10:	
 36834                                  	;mov	ax,es ; * ; 18/07/2023
 36835 000031D6 39D0                            cmp	ax,dx		; Present segment >= given segment?
 36836 000031D8 731D                    	jae	short atuX	; Yep--done.
 36837                                  
 36838 000031DA E8DDFF                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 36839 000031DD 7501                    	jnz	short atu20
 36840                                  
 36841 000031DF 41                      	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 36842                                  atu20:	
 36843                                  	;mov	al,[es:ARENA.SIGNATURE]
 36844                                  	;cmp	al,arena_signature_end  ; 'Z'
 36845                                  	; 22/07/2023
 36846                                  	; ax = es
 36847                                  	;mov	ax,es ; **
 36848 000031E0 2603060300              	add	ax,[es:ARENA.SIZE]
 36849 000031E5 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 36850 000031EB 7403                    	je	short atu30		; 'Z' means this was the last MCB... that's it.
 36851                                  
 36852                                  	;NextMCB es,ax
 36853                                  
 36854                                  	;mov	ax,es ; **
 36855                                  	;;add	ax,[es:3]
 36856                                  	;add	ax,[es:ARENA.SIZE]
 36857 000031ED 40                      	inc	ax
 36858                                  	; 22/07/2023
 36859                                  	;mov	es,ax ; *
 36860 000031EE EBE4                    	jmp	short atu10
 36861                                  
 36862                                  ; -----------------------------------------------------------------------------
 36863                                  ; if we get to atu30, they specified a number that was past the last MCB.
 36864                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 36865                                  ; -----------------------------------------------------------------------------
 36866                                  
 36867                                  atu30:	
 36868                                  	; 22/07/2023
 36869                                  	; ax = es + [es:ARENA.SIZE] 
 36870                                  	;mov	ax,es ; **
 36871                                  	;add	ax,[es:ARENA.SIZE] ; **
 36872 000031F0 39D0                    	cmp	ax,dx		; Present >= given?
 36873 000031F2 7303                    	jae	short atuX	; Yep! It _was_ inside.
 36874                                  atuE:	
 36875 000031F4 31C9                    	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 36876 000031F6 49                      	dec	cx		; (that makes it return 0xFFFF and sets CF)
 36877                                  atuX:	
 36878 000031F7 89C8                    	mov	ax,cx		; Return the UMB number in AX
 36879                                  	
 36880 000031F9 07                      	pop	es	
 36881                                  	; 01/01/2023
 36882                                  	;pop	dx
 36883                                  	;pop	cx
 36884 000031FA C3                      	retn
 36885                                  
 36886                                  ; -----------------------------------------------------------------------------
 36887                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 36888                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 36889                                  ; address rather than a UMB number... and use that address to look up a UMB.
 36890                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 36891                                  ; -----------------------------------------------------------------------------
 36892                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 36893                                  ; EXIT:   AX will contain a UMB number
 36894                                  ; ERROR:  None
 36895                                  ; USES:   Flags, AX
 36896                                  ; -----------------------------------------------------------------------------
 36897                                  
 36898                                  	; 01/01/2023 - Retro DOS v4.2
 36899                                  convUMB:
 36900 000031FB 2E833E[FE30]10          	cmp	word [cs:gnradix],16
 36901 00003201 7507                    	jne	short cu10	; If it didn't read in hex, it's not an address
 36902 00003203 E8C4FF                  	call	AddrToUmb	; Else, convert the address to a UMB number
 36903                                  	;cmp	ax,0FFFFh
 36904                                  	;jne	short cu10
 36905                                  	;inc	ax		; If too high, ignore it (make it conventional)
 36906                                  	; 01/01/2023
 36907 00003206 40                      	inc	ax
 36908 00003207 7401                    	jz	short cu10	; If too high, ignore it (make it conventional)
 36909 00003209 48                      	dec	ax
 36910                                  cu10:	
 36911 0000320A C3                      	retn
 36912                                  
 36913                                  ; 01/01/2023 - Retro DOS v4.2
 36914                                  ;%if 0
 36915                                  ;
 36916                                  ;; -----------------------------------------------------------------------------
 36917                                  ;;*** setUMBs - links umbs and sets allocation strategy for a load
 36918                                  ;;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 36919                                  ;; of the usual HIGH_FIRST. See the code.
 36920                                  ;; -----------------------------------------------------------------------------
 36921                                  ;; ENTRY:  None
 36922                                  ;; EXIT:   None
 36923                                  ;; ERROR:  None
 36924                                  ;; USES:   Flags, fm_umb, fm_strat
 36925                                  ;; -----------------------------------------------------------------------------
 36926                                  ;
 36927                                  ;setUMBs:
 36928                                  ;	push	ax
 36929                                  ;	push	bx
 36930                                  ;	call	fm_link
 36931                                  ;	pop	bx
 36932                                  ;	pop	ax
 36933                                  ;	retn
 36934                                  ;
 36935                                  ;%endif
 36936                                  
 36937                                  ; 18/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36938                                  ; loadLow subroutine is not used anywhere of IO.SYS 6.22 (& 5.0)
 36939                                  %if 0
 36940                                  
 36941                                  ; -----------------------------------------------------------------------------
 36942                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 36943                                  ; -----------------------------------------------------------------------------
 36944                                  ; ENTRY:  None
 36945                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 36946                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 36947                                  ; ERROR:  None
 36948                                  ; USES:   Flags, fm_strat, fm_umb
 36949                                  ; -----------------------------------------------------------------------------
 36950                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 36951                                  ; load UMB, and it is 0. That 0 can be either from the user having _specified_
 36952                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 36953                                  ; such that the load UMB is too small, and shouldn't be used.
 36954                                  ; -----------------------------------------------------------------------------
 36955                                  
 36956                                  loadLow:
 36957                                  	;push	ds
 36958                                  	;push	cs		; Point DS into appropriate data segment
 36959                                  	;pop	ds	
 36960                                  
 36961                                  	;mov	al,[UmbLoad]
 36962                                  	mov	al,[cs:UmbLoad]
 36963                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 36964                                  	jne	short ll10
 36965                                  
 36966                                  	stc
 36967                                  ll15:
 36968                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 36969                                  	;stc
 36970                                  	;jmp	short llX
 36971                                  	retn
 36972                                  ll10:	
 36973                                  	or	al,al		; AL=the load UMB: Is it == 0?
 36974                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 36975                                  
 36976                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 36977                                  	retn
 36978                                  
 36979                                  	;mov	al,1
 36980                                  	;clc
 36981                                  ;llX:
 36982                                  	;pop	ds		; Return DS to where it was
 36983                                  	;retn
 36984                                  
 36985                                  %endif
 36986                                  
 36987                                  ; -----------------------------------------------------------------------------
 36988                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 36989                                  ; -----------------------------------------------------------------------------
 36990                                  ; ENTRY:  None
 36991                                  ; EXIT:   None
 36992                                  ; ERROR:  None
 36993                                  ; USES:   Flags, fm_strat, fm_umb
 36994                                  ; -----------------------------------------------------------------------------
 36995                                  
 36996                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36997                                  	; (SYSINIT:322Fh)
 36998                                  HideUMBs:
 36999                                  	; 01/01/2023
 37000                                  	;push	ax
 37001                                  	;push	cx
 37002                                  	;push	ds
 37003 0000320B 06                      	push	es
 37004                                  
 37005                                  	; 01/01/2023
 37006                                  	; ds = cs
 37007                                  
 37008 0000320C E86E02                  	call	UmbTest		; See if we REALLY linked in anything...
 37009 0000320F 7232                    	jc	short husX	; ...if not, there's nothing for us to do.
 37010                                  
 37011 00003211 E892FD                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 37012                                  	
 37013                                  	;call	setUMBs		; Link UMBs and set memory-allocation strategy
 37014                                  	; 01/01/2023
 37015 00003214 E8DCFD                  	call	fm_link
 37016                                  
 37017                                  	;putdata fInHigh,1	; Remember that we're now running high
 37018                                  	;mov	byte [cs:fInHigh],1
 37019                                  	; 01/01/2023
 37020 00003217 C606[FB23]01            	mov	byte [fInHigh],1
 37021                                  
 37022                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 37023                                  	;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 37024                                  	; 01/01/2023
 37025 0000321C A0[FF23]                	mov	al,[UmbLoad]
 37026                                  
 37027 0000321F 3CFF                    	cmp	al,UNSPECIFIED	; If they didn't,
 37028 00003221 7420                    	je	short husX	; then we shouldn't do this loop:
 37029                                  
 37030 00003223 31C9                    	xor	cx,cx
 37031                                  
 37032                                  ; -----------------------------------------------
 37033                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 37034                                  ; -----------------------------------------------
 37035                                  
 37036 00003225 41                      hus10:	inc	cx		; For each UMB:
 37037                                  	; 01/01/2023
 37038 00003226 80F910                  	cmp	cl,MAXUMB
 37039                                  	;cmp	cx,MAXUMB ; 16
 37040 00003229 730E                    	jae	short hus20
 37041                                  
 37042 0000322B 88C8                    	mov	al,cl		; (stopping as soon as we're outside of the
 37043 0000322D 06                      	push	es
 37044 0000322E E8A200                  	call	findUMB		; valid range of UMBs)
 37045 00003231 07                      	pop	es		; push/pop: trash what findumb finds. :-)
 37046 00003232 7205                    	jc	short hus20
 37047                                  	
 37048                                  	; 02/01/2023
 37049                                  	;push	cx ; *
 37050 00003234 E84F01                  	call	_hideUMB_	; hide what we need to hide.
 37051                                  	;pop	cx ; *
 37052                                  
 37053 00003237 EBEC                    	jmp	short hus10
 37054                                  hus20:	
 37055                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 37056                                  	; 01/01/2023
 37057                                  	; ds = cs
 37058                                  	;mov	al,[UmbLoad]
 37059                                  	;;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 37060 00003239 800E[FF23]00            	or	byte [UmbLoad],0
 37061                                  	;or	al,al		; --Is the load UMB 0? (-1==unspecified)
 37062 0000323E 7503                    	jnz	short husX	; If not, we're done.
 37063                                  
 37064 00003240 E86802                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 37065                                  husX:	
 37066 00003243 07                      	pop	es
 37067                                  	; 01/01/2023
 37068                                  	;pop	ds
 37069                                  	;pop	cx
 37070                                  	;pop	ax
 37071 00003244 C3                      	retn
 37072                                  
 37073                                  ; -----------------------------------------------------------------------------
 37074                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 37075                                  ; -----------------------------------------------------------------------------
 37076                                  ; ENTRY:  None
 37077                                  ; EXIT:   AL == load UMB
 37078                                  ; ERROR:  None
 37079                                  ; USES:   Flags, AX
 37080                                  ; -----------------------------------------------------------------------------
 37081                                  
 37082                                  ;GetLoadUMB:
 37083                                  ;	;getdata al, UmbLoad
 37084                                  ;	push	ds
 37085                                  ;	push	cs
 37086                                  ;	pop	ds
 37087                                  ;	mov	al,[UmLoad]
 37088                                  ;	pop	ds
 37089                                  ;	retn
 37090                                  
 37091                                  ; -----------------------------------------------------------------------------
 37092                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 37093                                  ; -----------------------------------------------------------------------------
 37094                                  ; ENTRY:  None
 37095                                  ; EXIT:   AX == load UMB minimum size
 37096                                  ; ERROR:  None
 37097                                  ; USES:   Flags, AX
 37098                                  ; -----------------------------------------------------------------------------
 37099                                  
 37100                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 37101                                  %if 0
 37102                                  	; 01/01/2023 - Retro DOS v4.2
 37103                                  GetLoadSize:
 37104                                  	; 09/04/2019 - Retro DOS v4.0
 37105                                  	;mov	al,[cs:UmbLoad]
 37106                                  	; 01/01/2023
 37107                                  	; ds = cs
 37108                                  	mov	al,[UmbLoad] 
 37109                                  	;jmp	short GetSize
 37110                                  
 37111                                  	;push	bx
 37112                                  	;;push	si
 37113                                  	;push	ds
 37114                                  	;push	cs
 37115                                  	;pop	ds
 37116                                  
 37117                                  	;mov	al,[UmbLoad]
 37118                                  
 37119                                  	;xor	ah,ah			;    ax==UMB
 37120                                  	;mov	bx,UmbSize		;    bx==array
 37121                                  	;shl	al,1	                ;    ax==offset
 37122                                  	;;add	ax,bx			;    ax==element index
 37123                                  	;;mov	si,ax			; ds:si==element index
 37124                                  
 37125                                  	;;lodsw				;    hh
 37126                                  
 37127                                  	;add	bx,ax
 37128                                  	;mov	ax,[bx]
 37129                                  
 37130                                  	;pop	ds
 37131                                  	;;pop	si
 37132                                  	;pop	bx
 37133                                  	;retn
 37134                                  %endif
 37135                                  
 37136                                  ; -----------------------------------------------------------------------------
 37137                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 37138                                  ; -----------------------------------------------------------------------------
 37139                                  ; ENTRY:  AL == a UMB number
 37140                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 37141                                  ; ERROR:  None
 37142                                  ; USES:   Flags, AX
 37143                                  ; -----------------------------------------------------------------------------
 37144                                  
 37145                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 37146                                  GetLoadSize:
 37147                                  	; ds = cs
 37148                                  	;mov	al,[UmbLoad]
 37149                                  	; al = [UmbLoad] 
 37150                                  	; ....
 37151                                  
 37152                                  	; 01/01/2023 - Retro DOS v4.2
 37153                                  GetSize:
 37154                                  	; 09/04/2019 - Retro DOS v4.0
 37155                                  
 37156                                  	;push	bx ; 01/01/2023
 37157                                  	;push	si
 37158                                  	;push	ds
 37159                                  	;push	cs
 37160                                  	;pop	ds
 37161                                  
 37162 00003245 30E4                    	xor	ah,ah			;    ax==UMB
 37163 00003247 BB[1024]                	mov	bx,UmbSize		;    bx==array
 37164 0000324A D0E0                    	shl	al,1	                ;    ax==offset
 37165                                  	;add	ax,bx			;    ax==element index
 37166                                  	;mov	si,ax			; ds:si==element index
 37167                                  
 37168                                  	;lodsw				;    ax==size
 37169                                  
 37170 0000324C 01C3                    	add	bx,ax
 37171                                  	; 01/01/2023
 37172                                  	; ds = cs
 37173 0000324E 8B07                    	mov	ax,[bx]
 37174                                  	;mov	ax,[cs:bx]
 37175                                  
 37176                                  	;pop	ds
 37177                                  	;pop	si
 37178                                  	;pop	bx ; 01/01/2023
 37179                                  sls10:	; 08/09/2023
 37180 00003250 C3                      	retn
 37181                                  
 37182                                  ; -----------------------------------------------------------------------------
 37183                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 37184                                  ; -----------------------------------------------------------------------------
 37185                                  ; ENTRY:   AL == new load UMB
 37186                                  ; EXIT:    None
 37187                                  ; ERROR:   None
 37188                                  ; USES:    Flags, AX
 37189                                  ; -----------------------------------------------------------------------------
 37190                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 37191                                  ;          time you would ever need this, so that's okay.
 37192                                  ; -----------------------------------------------------------------------------
 37193                                  
 37194                                  ; StoLoadUMB subroutine is not used anywhere
 37195                                  ; of PCDOS 7.1 IBMBIO.COM (& MSDOS 6.21 IO.SYS)
 37196                                  ; Erdogan Tan - 18/07/2023
 37197                                  
 37198                                  ;StoLoadUMB:
 37199                                  ;	;putdata UmbLoad, al
 37200                                  ;	push	es
 37201                                  ;	push	cs
 37202                                  ;	pop	es		; mov [cs:UmbLoad], al !!!! ; 08/09/2023
 37203                                  ;	mov	[es:UmbLoad],al
 37204                                  ;	pop	es
 37205                                  ;	retn
 37206                                  
 37207                                  ; -----------------------------------------------------------------------------
 37208                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 37209                                  ; -----------------------------------------------------------------------------
 37210                                  ; ENTRY:  AL == new load size
 37211                                  ; EXIT:   None
 37212                                  ; ERROR:  None
 37213                                  ; USES:   Flags, AX
 37214                                  ; -----------------------------------------------------------------------------
 37215                                  	; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization) 
 37216                                  	; 01/01/2023 - Retro DOS v4.2
 37217                                  StoLoadSize:
 37218                                  	; 01/01/2023
 37219                                  	;push	dx
 37220                                  
 37221                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 37222                                  	;
 37223                                  	;push	ds
 37224                                  	;push	cs
 37225                                  	;pop	ds
 37226                                  	;mov	dl,[UmbLoad]
 37227                                  	;pop	ds	
 37228                                  
 37229                                  	; 08/09/2023
 37230                                  	; MSDOS 6.21 IO.SYS - SYSINIT:32B6h
 37231                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:3831h
 37232                                  
 37233                                  	;;mov	dl,[UmbLoad]		; BUG ! CL would/must be used here
 37234                                  					; instead of DL (*) ; 18/07/2023
 37235                                  	;mov	dl,[cs:UmbLoad] ; Retro DOS v4.0, v4.1, v4.2
 37236                                  	;cmp	dl,UNSPECIFIED ; 0FFh
 37237                                  	;je	short sls10
 37238                                  			
 37239                                  		; BUG ! stowSiz uses CL instead of DL !
 37240                                  		; (CL is set in ParseL which calls stowSiz)
 37241                                  		; (This BUG existing in PCDOS 7.1 IBMBIO.COM also)
 37242                                  		; Erdogan Tan - 18/07/2023
 37243                                  
 37244                                  	; 08/09/2023 (BugFix)
 37245                                  	;mov	cl,[cs:UmbLoad]
 37246                                  	; 08/09/2023 
 37247                                  	; ds = cs
 37248 00003251 8A0E[FF23]              	mov	cl,[UmbLoad]
 37249 00003255 80F9FF                  	cmp	cl,UNSPECIFIED ; 0FFh
 37250 00003258 74F6                    	je	short sls10 
 37251                                  
 37252                                  	; 08/09/2023
 37253                                  ;	call	stowSiz			; We've got a function to do just this
 37254                                  ;sls10:	
 37255                                  ;	; 01/01/2023
 37256                                  ;	;pop	dx
 37257                                  ;	retn
 37258                                  	
 37259                                  	; 08/09/2023
 37260                                  	;;jmp	stowSiz
 37261                                  	;jmp	short stowSiz
 37262                                  
 37263                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 37264                                  %if 1
 37265                                  ; -----------------------------------------------------------------------------
 37266                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 37267                                  ; -----------------------------------------------------------------------------
 37268                                  ; ENTRY:    CL contains UMB number, AX contains size
 37269                                  ; EXIT:     None
 37270                                  ; ERROR:    None
 37271                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 37272                                  ; -----------------------------------------------------------------------------
 37273                                  
 37274                                  ; 13/05/2019
 37275                                  
 37276                                  	; 01/01/2023 - Retro DOS v4.2
 37277                                  stowSiz:
 37278                                  	; 01/01/2023
 37279                                  	;push	bx
 37280                                  	;;push	di ; ?
 37281                                  	;push	es
 37282                                  
 37283                                  	;push	cs
 37284                                  	;pop	es	
 37285                                  
 37286 0000325A 88CB                    	mov	bl,cl			; Now bl==UMB number, AX==size
 37287 0000325C B700                    	mov	bh,0			;     bx==UMB number, AX==size
 37288 0000325E D0E3                    	shl	bl,1			;     bx==offset into array, AX=size
 37289                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 37290                                  	; 01/01/2023
 37291 00003260 2E8987[1024]            	mov	[cs:bx+UmbSize],ax	; Store the size
 37292                                  
 37293                                  	; 01/01/2023
 37294                                  	;pop	es
 37295                                  	;;pop	di ; ?
 37296                                  	;pop	bx
 37297                                  
 37298 00003265 C3                      	retn
 37299                                  %endif
 37300                                  
 37301                                  ; -----------------------------------------------------------------------------
 37302                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 37303                                  ; -----------------------------------------------------------------------------
 37304                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 37305                                  ; EXIT:     None; free elements in UMB marked as hidden
 37306                                  ; ERROR:    None
 37307                                  ; USES:     Flags
 37308                                  ; -----------------------------------------------------------------------------
 37309                                  
 37310                                  	; 01/01/2023 - Retro DOS v4.2
 37311                                  hideUMB:
 37312                                  	; 02/01/2023
 37313 00003266 52                      	push	dx ; (*)
 37314                                  	; 01/01/2023
 37315                                  	;push	ax
 37316 00003267 06                      	push	es
 37317                                  
 37318 00003268 E86800                  	call	findUMB	; (*)	; Returns with carry if err, else ES == MCB
 37319 0000326B 7224                    	jc	short huX
 37320                                  
 37321                                  ; ------------------------------------------------
 37322                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 37323                                  ;            we're not in the same UMB, so exit.
 37324                                  ; ------------------------------------------------
 37325                                  
 37326 0000326D E84AFF                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 37327 00003270 741F                    	jz	short huX	; If it is, we've finished the UMB.
 37328                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 37329 00003272 26830E010000            	or	word [es:ARENA.OWNER],0
 37330 00003278 7503                    	jnz	short hu20
 37331                                  
 37332 0000327A E81700                  	call	hideMCB
 37333                                  hu20:	
 37334                                  	;mov	al,[es:ARENA.SIGNATURE]
 37335                                  	;cmp	al,arena_signature_end  ;'Z'
 37336                                  	; 19/07/2023
 37337 0000327D 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],'Z'
 37338 00003283 740C                    	jz	short huX	; 'Z' means this was the last MCB... that's it.
 37339                                  
 37340                                  	;NextMCB es,ax		; Go on forward.
 37341 00003285 8CC0                    	mov     ax,es
 37342                                  	;add	ax,[es:3]
 37343 00003287 2603060300              	add     ax,[es:ARENA.SIZE]
 37344 0000328C 40                      	inc     ax
 37345 0000328D 8EC0                    	mov     es,ax
 37346                                  
 37347 0000328F EBDC                    	jmp	short hu10
 37348                                  huX:	
 37349 00003291 07                      	pop	es
 37350                                  	; 01/01/2023
 37351                                  	;pop	ax
 37352                                  	; 02/01/2023
 37353 00003292 5A                      	pop	dx ; (*)
 37354 00003293 C3                      	retn
 37355                                  
 37356                                  ; 02/01/2023
 37357                                  %if 0
 37358                                  
 37359                                  ; -----------------------------------------------------------------------------
 37360                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 37361                                  ; -----------------------------------------------------------------------------
 37362                                  ; ENTRY:    None
 37363                                  ; EXIT:     ZF set if user DIDN'T specify /S
 37364                                  ; ERROR:    None
 37365                                  ; USES:     Flags
 37366                                  ; -----------------------------------------------------------------------------
 37367                                  
 37368                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37369                                  isTiny:
 37370                                  	; 02/01/2023
 37371                                  	;push	ax
 37372                                  
 37373                                  	;getdata al,fUmbTiny
 37374                                  	;
 37375                                  	;push	ds
 37376                                  	;push	cs
 37377                                  	;pop	ds
 37378                                  	;mov	al,[fUmbTiny]
 37379                                  	;pop	ds
 37380                                  
 37381                                  	; 09/09/2023
 37382                                  	;mov	al,[cs:fUmbTiny]
 37383                                  	; 02/01/2023
 37384                                  	; ds = cs
 37385                                  	mov	al,[fUmbTiny]
 37386                                  
 37387                                  	or	al,al
 37388                                  	; 02/01/2023
 37389                                  	;pop	ax
 37390                                  	retn
 37391                                  
 37392                                  %endif
 37393                                  
 37394                                  ; -----------------------------------------------------------------------------
 37395                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 37396                                  ; -----------------------------------------------------------------------------
 37397                                  ; ENTRY:    ES:0 should point to an MCB
 37398                                  ; EXIT:     ZF set if MCB is free, else !ZF
 37399                                  ; ERROR:    None
 37400                                  ; USES:     Flags
 37401                                  ; -----------------------------------------------------------------------------
 37402                                  
 37403                                  ;isFreeMCB:
 37404                                  ;	or	word [es:ARENA.OWNER],0
 37405                                  ;	retn
 37406                                  
 37407                                  ; -----------------------------------------------------------------------------
 37408                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 37409                                  ; -----------------------------------------------------------------------------
 37410                                  ; ENTRY:    ES:0 should point to an MCB
 37411                                  ; EXIT:     None; MCB marked as HIDDEN
 37412                                  ; ERROR:    None
 37413                                  ; USES:     None
 37414                                  ; -----------------------------------------------------------------------------
 37415                                  
 37416                                  hideMCB:
 37417 00003294 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 37418 0000329B 26C70608004849          	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 37419 000032A2 26C7060A004444          	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 37420 000032A9 26C7060C00454E          	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 37421 000032B0 26C7060E002020          	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 37422 000032B7 C3                      	retn
 37423                                  
 37424                                  ; -----------------------------------------------------------------------------
 37425                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 37426                                  ; -----------------------------------------------------------------------------
 37427                                  ; ENTRY:    ES:0 should point to an MCB
 37428                                  ; EXIT:     None; MCB marked as FREE
 37429                                  ; ERROR:    None
 37430                                  ; USES:     None
 37431                                  ; -----------------------------------------------------------------------------
 37432                                  
 37433                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37434                                  
 37435                                  unHideMCB:
 37436                                  	; 03/01/2023
 37437                                  	;push	ax
 37438 000032B8 26C70601000000          	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 37439 000032BF B82020                  	mov	ax,'  ' ; 2020h
 37440 000032C2 26A30800                	mov	[es:ARENA.NAME+0],ax
 37441 000032C6 26A30A00                	mov	[es:ARENA.NAME+2],ax
 37442 000032CA 26A30C00                	mov	[es:ARENA.NAME+4],ax
 37443 000032CE 26A30E00                	mov	[es:ARENA.NAME+6],ax
 37444                                  	; 03/01/2023
 37445                                  	;pop	ax
 37446 000032D2 C3                      	retn
 37447                                  
 37448                                  ; -----------------------------------------------------------------------------
 37449                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 37450                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 37451                                  ; -----------------------------------------------------------------------------
 37452                                  ; ENTRY:    AL should be to a valid UMB number
 37453                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 37454                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 37455                                  ; USES:     Flags, ES
 37456                                  ; -----------------------------------------------------------------------------
 37457                                  
 37458                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37459                                  	; (SYSINIT:3344h)
 37460                                  findUMB:
 37461                                  	; 01/01/2023
 37462                                  	;push	ax
 37463                                  	; 02/01/2023
 37464 000032D3 51                      	push	cx ; *
 37465                                  	;push	dx
 37466                                  
 37467 000032D4 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 37468                                  
 37469 000032D6 89C2                    	mov	dx,ax		; Store the to-be-found UMB number in DX
 37470                                  
 37471 000032D8 E8D2FE                  	call	UmbHead		; Returns first UMB segment in AX
 37472                                  	; 22/07/2023
 37473                                  	;mov	es,ax ; *
 37474 000032DB 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 37475                                  
 37476                                  	; 22/07/2023
 37477                                  fu10:
 37478 000032DD 8EC0                    	mov	es,ax ; * ; **
 37479                                  ; ---------------------------------------------
 37480                                  ; FU10--CX - This UMB number; 0 == conventional
 37481                                  ;       DX - The UMB number they're looking for
 37482                                  ;       ES - The current MCB address
 37483                                  ; ---------------------------------------------
 37484                                  
 37485                                  ;fu10:	
 37486 000032DF 39D1                    	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 37487 000032E1 7417                    	je	short fuX	; searching for--so exit.
 37488                                  
 37489 000032E3 E8D4FE                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 37490 000032E6 7501                    	jnz	short fu20
 37491                                  
 37492 000032E8 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 37493                                  fu20:	
 37494                                  	;mov	al,[es:ARENA.SIGNATURE]
 37495                                  	;cmp	al,arena_signature_end ; 'Z'
 37496                                  	; 19/07/2023
 37497 000032E9 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end 
 37498 000032EF 7408                    	je	short fuE	; 'Z' means this was the last MCB... that's it.
 37499                                  
 37500                                  	;NextMCB es,ax		; Go on forward.
 37501                                  	; 22/07/2023
 37502                                  	; ax = es
 37503                                  	;mov	ax,es ; * ; 22/07/2023
 37504                                  	;add	ax,[es:3]
 37505 000032F1 2603060300              	add	ax,[es:ARENA.SIZE]
 37506 000032F6 40                      	inc	ax
 37507                                  	; 22/07/2023
 37508                                  	;mov	es,ax ; **
 37509 000032F7 EBE4                    	jmp	short fu10
 37510                                  fuE:	
 37511 000032F9 F9                      	stc
 37512                                  fuX:
 37513                                  	; 01/01/2023
 37514                                  	;pop	dx
 37515                                  	; 02/01/2023
 37516 000032FA 59                      	pop	cx ; *
 37517                                  	;pop	ax		; The address is already in ES.
 37518 000032FB C3                      	retn
 37519                                  
 37520                                  ; -----------------------------------------------------------------------------
 37521                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 37522                                  ; -----------------------------------------------------------------------------
 37523                                  ; ENTRY:    AL should be to a valid UMB number
 37524                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 37525                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 37526                                  ; USES:     Flags, ES
 37527                                  ; -----------------------------------------------------------------------------
 37528                                  
 37529                                  	; 01/01/2023 - Retro DOS v4.2
 37530                                  BigFree:
 37531                                  	; 01/01/2023
 37532                                  	;push	bx
 37533 000032FC 51                      	push	cx
 37534                                  
 37535 000032FD E8D3FF                  	call	findUMB			; Returns with CF if err, else ES==MCB
 37536 00003300 723A                    	jc	short bfX		; (would be "jc bfE"; it just does stc)
 37537                                  
 37538 00003302 31DB                    	xor	bx,bx			; Segment address of largest free MCB
 37539 00003304 31C9                    	xor	cx,cx			; Size of largest free MCB
 37540                                  
 37541                                  ; ---------------------------------------------
 37542                                  ; BF10--ES - Current MCB address
 37543                                  ;       BX - Address of largest free MCB so far
 37544                                  ;       CX - Size of largest free MCB so far
 37545                                  ; ---------------------------------------------
 37546                                  
 37547                                  bf10:	
 37548 00003306 E8B1FE                  	call	isSysMCB		; If we've left the MCB, we're done.
 37549 00003309 7428                    	jz	short bf30
 37550                                  
 37551                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 37552 0000330B 26830E010000            	or	word [es:ARENA.OWNER],0
 37553 00003311 750C                    	jnz	short bf20
 37554                                  
 37555 00003313 26A10300                	mov	ax,[es:ARENA.SIZE]
 37556                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 37557 00003317 39C1                    	cmp	cx,ax
 37558                                  	;jg	short bf20		; Unless we're bigger,
 37559                                  	; 19/07/2023
 37560 00003319 7D04                    	jge	short bf20
 37561                                  
 37562 0000331B 8CC3                    	mov	bx,es			; Store this new element's address,
 37563                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 37564 0000331D 89C1                    	mov	cx,ax
 37565                                  
 37566                                  bf20:	
 37567                                  	;mov	al,[es:ARENA.SIGNATURE]
 37568                                  	;cmp	al,arena_signature_end	; 'Z'
 37569                                  	; 19/07/2023
 37570                                  	;cmp	byte [es:0],'Z'
 37571 0000331F 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 37572 00003325 740C                    	jz	short bf30		; 'Z' means this was the last MCB.
 37573                                  
 37574                                  	;NextMCB es,ax			; Go on forward.
 37575 00003327 8CC0                    	mov     ax,es
 37576                                  	;add	ax,[es:3]
 37577 00003329 2603060300              	add     ax,[es:ARENA.SIZE]
 37578 0000332E 40                      	inc     ax
 37579 0000332F 8EC0                    	mov     es,ax
 37580                                  
 37581 00003331 EBD3                    	jmp	short bf10
 37582                                  
 37583 00003333 8EC3                    bf30:	mov	es,bx			; Return the address
 37584 00003335 89C8                    	mov	ax,cx			; Return the size
 37585 00003337 09DB                    	or	bx,bx
 37586 00003339 7501                    	jnz	short bfX		; (if size==0, there's nothing free)
 37587                                  bfE:	
 37588 0000333B F9                      	stc
 37589                                  bfX:
 37590 0000333C 59                      	pop	cx
 37591                                  	; 01/01/2023
 37592                                  	;pop	bx
 37593 0000333D C3                      	retn
 37594                                  
 37595                                  ; -----------------------------------------------------------------------------
 37596                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 37597                                  ; -----------------------------------------------------------------------------
 37598                                  ; ENTRY:    AL should be to a valid UMB number
 37599                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 37600                                  ; ERROR:    None
 37601                                  ; USES:     Flags
 37602                                  ; -----------------------------------------------------------------------------
 37603                                  
 37604                                  	; 02/01/2023 - Retro DOS v4.2
 37605                                  
 37606                                  isSpecified:
 37607                                  	; 02/01/2023
 37608                                  	;push	ax
 37609                                  
 37610 0000333E 30FF                    	xor	bh,bh
 37611 00003340 88C3                    	mov	bl,al
 37612                                  
 37613                                  	;getdata al,DS:UmbUsed[bx]
 37614                                  	;
 37615                                  	;push	ds
 37616                                  	;push	cs
 37617                                  	;pop	ds
 37618                                  	;mov	al,[bx+UmbUsed]
 37619                                  	;pop	ds
 37620                                  	
 37621                                  	;mov	al,[cs:bx+UmbUsed]
 37622                                  	; 02/01/2023
 37623                                  	; ds = cs
 37624 00003342 8A87[0024]              	mov	al,[bx+UmbUsed]
 37625                                  
 37626 00003346 08C0                    	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 37627                                  
 37628                                  	; 09/09/2023
 37629                                  	; 02/01/2023
 37630                                  	;pop	ax
 37631                                  
 37632 00003348 C3                      	retn
 37633                                  
 37634                                  ; -----------------------------------------------------------------------------
 37635                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 37636                                  ; -----------------------------------------------------------------------------
 37637                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 37638                                  ; EXIT:     None; MCB broken if carry clear
 37639                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 37640                                  ; USES:     Flags
 37641                                  ; -----------------------------------------------------------------------------
 37642                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 37643                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 37644                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 37645                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 37646                                  ; minimum for performing a split.
 37647                                  ; -----------------------------------------------------------------------------
 37648                                  
 37649                                  MIN_SPLIT_SIZE	equ	20h
 37650                                  
 37651                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37652                                  
 37653                                  shrinkMCB:
 37654                                  	;pushreg <bx,cx,es>
 37655                                  	; 02/01/2023
 37656                                  	;push	bx
 37657 00003349 51                      	push	cx
 37658 0000334A 06                      	push	es
 37659                                  
 37660 0000334B 89C3                    	mov	bx,ax			; Move things around... and
 37661                                  	; 02/01/2023
 37662                                  	;mov	ax,es			; save this one for later.
 37663                                  
 37664 0000334D 268B0E0300              	mov	cx,[es:ARENA.SIZE]
 37665                                  	; 02/01/2023
 37666 00003352 89C8                    	mov	ax,cx 
 37667                                  
 37668 00003354 83E820                  	sub	ax,MIN_SPLIT_SIZE ; 32
 37669                                  	;sub	cx,MIN_SPLIT_SIZE ; 32
 37670                                  	;;cmp	bx,cx			; {New size} vs {Current Size-20h}
 37671                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 37672                                  	; 18/12/2022
 37673                                  	;cmp	cx,bx
 37674                                  	; 02/01/2023
 37675 00003357 39D8                    	cmp	ax,bx
 37676 00003359 7228                    	jb	short smE ; (*)
 37677                                  
 37678 0000335B 268A160000              	mov	dl,[es:ARENA.SIGNATURE]
 37679                                  	
 37680                                  	;mov	cx,[es:ARENA.SIZE]
 37681                                  	; 02/01/2023
 37682 00003360 8CC0                    	mov	ax,es
 37683                                  
 37684 00003362 26891E0300              	mov	[es:ARENA.SIZE],bx
 37685 00003367 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],'M'
 37686                                  
 37687 0000336D 01D8                    	add	ax,bx
 37688 0000336F 40                      	inc	ax
 37689 00003370 8EC0                    	mov	es,ax			; Move to new arena area
 37690                                  
 37691 00003372 89C8                    	mov	ax,cx
 37692 00003374 29D8                    	sub	ax,bx
 37693                                  	; 12/12/2022
 37694                                  	; ax > 0
 37695 00003376 48                      	dec	ax			; And prepare the new size
 37696                                  
 37697                                  	; 18/12/2022
 37698 00003377 2688160000              	mov	[es:ARENA.SIGNATURE],dl
 37699                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 37700 0000337C 26A30300                	mov	[es:ARENA.SIZE],ax
 37701                                  	;mov	ax,'  ' ; 2020h
 37702                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 37703                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 37704                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 37705                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 37706                                  
 37707                                  	; 18/12/2022
 37708 00003380 E8A801                  	call	freeMCB	; (**)
 37709                                  
 37710                                  	; 12/12/2022
 37711                                  	; cf=0
 37712                                  	;clc
 37713                                  	; 18/12/2022
 37714                                  	;jmp	short smX
 37715                                  smE:	
 37716                                  	; 18/12/2022
 37717                                  	; cf=1 (*)
 37718                                  	;stc
 37719                                  smX:	
 37720                                  	;popreg	<es,cx,bx>
 37721 00003383 07                      	pop	es
 37722 00003384 59                      	pop	cx
 37723                                  	; 02/01/2023
 37724                                  	;pop	bx
 37725 00003385 C3                      	retn
 37726                                  
 37727                                  ; -----------------------------------------------------------------------------
 37728                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 37729                                  ; -----------------------------------------------------------------------------
 37730                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 37731                                  ; EXIT:     None; UMB is hidden as necessary
 37732                                  ; ERROR:    None
 37733                                  ; USES:     Flags, AX, CX
 37734                                  ; -----------------------------------------------------------------------------
 37735                                  ; PRIMARY LOGIC:
 37736                                  ;
 37737                                  ; If the UMB is specified in the DH/LH statement, then:
 37738                                  ;    If the largest free segment is too small (check specified size), then:
 37739                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 37740                                  ;    Else, if largest free segment is LARGER than specified size, then:
 37741                                  ;       If /S was given on the command-line, then:
 37742                                  ;          Break that element into two pieces
 37743                                  ;          Set a flag that we're shrinking
 37744                                  ;       Endif
 37745                                  ;    Endif
 37746                                  ; Endif
 37747                                  ; If the UMB is NOT specified (or was removed by the above):
 37748                                  ;    Hide all free elements in the UMB
 37749                                  ;    If the flag that we're shrinking was set, then:
 37750                                  ;       UN-hide the lower portion of the shrunken UMB
 37751                                  ;    ENDIF
 37752                                  ; ENDIF
 37753                                  ; -----------------------------------------------------------------------------
 37754                                  
 37755                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37756                                  	; (SYSINIT:3426h)
 37757                                  _hideUMB_:
 37758                                  	; 02/01/2023
 37759                                  	; ds = cs
 37760                                  
 37761                                  	; 01/01/2023
 37762                                  	;push	bx
 37763                                  	;push	dx
 37764 00003386 06                      	push	es
 37765                                  
 37766 00003387 88C8                    	mov	al,cl
 37767 00003389 E8B2FF                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 37768 0000338C 742D                    	jz	short hu_20
 37769                                  
 37770 0000338E 88C8                    	mov	al,cl		; Retrieve the size of the largest
 37771 00003390 E869FF                  	call	BigFree		; free element in AX; put its address in ES
 37772 00003393 7226                    	jc	short hu_20	; Oops. Errors mean skip this part.
 37773                                  
 37774 00003395 50                      	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 37775 00003396 88C8                    	mov	al,cl		; Retrieve the user's specified
 37776 00003398 E8AAFE                  	call	GetSize		; minimum size for this umb (into AX)
 37777 0000339B 5B                      	pop	bx		; Now BX==BigFree, AX==Specified Size
 37778                                  
 37779 0000339C 09C0                    	or	ax,ax		; If they didn't specify one,
 37780 0000339E 741B                    	jz	short hu_20	; Skip over all this.
 37781                                  
 37782 000033A0 39D8                    	cmp	ax,bx		; Ah... if (specified > max free)
 37783 000033A2 7607                    	jbe	short hu_10
 37784                                  
 37785 000033A4 88C8                    	mov	al,cl		;  Then mark that UMB as unused. Nya nya.
 37786 000033A6 E81DFD                  	call	unMarkUMB
 37787 000033A9 EB10                    	jmp	short hu_20
 37788                                  hu_10:	
 37789                                  	;call	isTiny		; Returns ZF clear if user specified /S
 37790                                  	;jz	short hu_20
 37791                                  	; 02/01/2023
 37792                                  ;isTiny:
 37793                                  	;mov	al,[fUmbTiny] ; ds = cs
 37794                                  	;or	al,al
 37795 000033AB 800E[FC23]00            	or	byte [fUmbTiny],0
 37796 000033B0 7409                    	jz	short hu_20
 37797                                  
 37798 000033B2 E894FF                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 37799 000033B5 7204                    	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 37800                                  
 37801 000033B7 8CC2                    	mov	dx,es
 37802 000033B9 EB09                    	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 37803                                  
 37804 000033BB 89C8                    hu_20:	mov	ax,cx
 37805 000033BD E87EFF                  	call	isSpecified	; If they specified this UMB, we're done...
 37806 000033C0 7510                    	jnz	short hu_X	; so leave.
 37807                                  
 37808 000033C2 31D2                    	xor	dx,dx
 37809                                  hu_30:	
 37810 000033C4 88C8                    	mov	al,cl
 37811                                  
 37812 000033C6 E89DFE                  	call	hideUMB		; Hides everything in UMB #al
 37813                                  
 37814 000033C9 09D2                    	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 37815 000033CB 7405                    	jz	short hu_X	; So we should leave.
 37816                                  
 37817 000033CD 8EC2                    	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 37818 000033CF E8E6FE                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 37819                                  hu_X:	
 37820 000033D2 07                      	pop	es
 37821                                  	; 01/01/2023
 37822                                  	;pop	dx
 37823                                  	;pop	bx
 37824 000033D3 C3                      	retn
 37825                                  
 37826                                  ; -----------------------------------------------------------------------------
 37827                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 37828                                  ; -----------------------------------------------------------------------------
 37829                                  ; Entry:  None
 37830                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 37831                                  ; Error:  None
 37832                                  ; Uses:   Flags
 37833                                  ; -----------------------------------------------------------------------------
 37834                                  
 37835                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37836                                  UnFreeze:
 37837                                  	; 03/01/2023
 37838                                  	;push	ax
 37839 000033D4 06                      	push	es
 37840                                  
 37841 000033D5 E8D5FD                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 37842 000033D8 721C                    	jc	short ufX
 37843                                  
 37844                                  	; 22/07/2023
 37845                                  uf10:
 37846 000033DA 8EC0                    	mov	es,ax ; *
 37847                                  
 37848                                  ; ------------------------------
 37849                                  ; UF10--ES - Current MCB address
 37850                                  ; ------------------------------
 37851                                  
 37852                                  ;uf10:	
 37853 000033DC E81900                  	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 37854 000033DF 7505                    	jnz	short uf20
 37855 000033E1 E8D4FE                  	call	unHideMCB
 37856                                  	; 09/09/2023
 37857                                  	; ax <> es
 37858 000033E4 8CC0                    	mov	ax,es ; *
 37859                                  uf20:	
 37860                                  	;mov	al,[es:ARENA.SIGNATURE]
 37861                                  	;cmp	al,arena_signature_end ; 'Z'
 37862                                  	; 22/07/2023
 37863 000033E6 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37864 000033EC 7408                    	jz	short ufX	; 'Z' means this was the last MCB.. that's it.
 37865                                  
 37866                                  	;NextMCB es,ax		; Go on forward.
 37867                                  	; 22/07/2023
 37868                                  	; ax = es
 37869                                  	;mov	ax,es ; *
 37870                                  	;add	ax,[es:3]
 37871 000033EE 2603060300              	add	ax,[es:ARENA.SIZE]
 37872 000033F3 40                      	inc	ax
 37873                                  	; 22/07/2023
 37874                                  	;mov	es,ax
 37875 000033F4 EBE4                    	jmp	short uf10
 37876                                  ufX:	
 37877 000033F6 07                      	pop	es
 37878                                  	; 03/01/2023
 37879                                  	;pop	ax
 37880 000033F7 C3                      	retn
 37881                                  
 37882                                  ; -----------------------------------------------------------------------------
 37883                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 37884                                  ; -----------------------------------------------------------------------------
 37885                                  ; ENTRY:    ES:0 should point to an MCB
 37886                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 37887                                  ; ERROR:    None
 37888                                  ; USES:     Flags
 37889                                  ; -----------------------------------------------------------------------------
 37890                                  
 37891                                  isFrozMCB:
 37892                                  	;push	ax
 37893                                  
 37894                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 37895                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 37896 000033F8 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 37897 000033FE 7522                    	jne	short ifmX
 37898                                  
 37899                                  	;mov	ax,[es:ARENA.NAME+0]
 37900                                  	;cmp	ax,'FR' ; 5246h
 37901 00003400 26813E08004652          	cmp	word [es:ARENA.NAME+0],'FR'
 37902 00003407 7519                    	jne	short ifmX
 37903                                  	;mov	ax,[es:ARENA.NAME+2]
 37904                                  	;cmp	ax,'OZ' ; 5A4Fh
 37905 00003409 26813E0A004F5A          	cmp	word [es:ARENA.NAME+2],'OZ'
 37906 00003410 7510                    	jne	short ifmX
 37907                                  	;mov	ax,[es:ARENA.NAME+4]
 37908                                  	;cmp	ax,'EN' ; 4E45h
 37909 00003412 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 37910 00003419 7507                    	jne	short ifmX
 37911                                  	;mov	ax,[es:ARENA.NAME+6]
 37912                                  	;cmp	ax,'  ' ; 2020h
 37913 0000341B 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 37914                                  ifmX:	
 37915                                  	;pop	ax
 37916 00003422 C3                      	retn
 37917                                  
 37918                                  ; -----------------------------------------------------------------------------
 37919                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 37920                                  ; -----------------------------------------------------------------------------
 37921                                  ; ENTRY:    ES:0 should point to an MCB
 37922                                  ; EXIT:     None; MCB frozen
 37923                                  ; ERROR:    None
 37924                                  ; USES:     None
 37925                                  ; -----------------------------------------------------------------------------
 37926                                  
 37927                                  frezMCB:
 37928 00003423 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 37929 0000342A 26C70608004652          	mov	word [es:ARENA.NAME+0],'FR'
 37930 00003431 26C7060A004F5A          	mov	word [es:ARENA.NAME+2],'OZ'
 37931 00003438 26C7060C00454E          	mov	word [es:ARENA.NAME+4],'EN'
 37932 0000343F 26C7060E002020          	mov	word [es:ARENA.NAME+6],'  '
 37933 00003446 C3                      	retn
 37934                                  
 37935                                  ; -----------------------------------------------------------------------------
 37936                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 37937                                  ; -----------------------------------------------------------------------------
 37938                                  ; Entry:  None
 37939                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 37940                                  ; Error:  None
 37941                                  ; Uses:   Flags
 37942                                  ; -----------------------------------------------------------------------------
 37943                                  
 37944                                  	; 01/01/2023 - Retro DOS v4.2  
 37945                                  FreezeUM:
 37946                                  	; 01/01/2023
 37947                                  	;push	ax
 37948                                  	;push	cx
 37949                                  	;push	dx
 37950 00003447 06                      	push	es
 37951                                  
 37952                                  	;;call	GetLoadUMB
 37953                                  	; 01/01/2023
 37954                                  	; ds = cs
 37955                                  	;mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 37956 00003448 A0[FF23]                	mov	al,[UmbLoad] 	
 37957                                  
 37958 0000344B 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 37959 0000344D 89C2                    	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 37960                                  
 37961 0000344F E85BFD                  	call	UmbHead		; Returns first UMB segment in AX
 37962                                  	; 22/07/2023
 37963                                  	;mov	es,ax ; *
 37964 00003452 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 37965                                  
 37966                                  	; 22/07/2023
 37967                                  fum10:
 37968 00003454 8EC0                    	mov	es,ax ; *
 37969                                  
 37970                                  ; -----------------------------------------
 37971                                  ; FUM10--ES - Current MCB address
 37972                                  ;        CX - Current UMB number
 37973                                  ;        DX - UMB number to skip (load UMB)
 37974                                  ; -----------------------------------------
 37975                                  
 37976                                  ;fum10:	
 37977 00003456 E861FD                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 37978 00003459 7501                    	jnz	short fum20
 37979                                  
 37980 0000345B 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 37981                                  fum20:	
 37982 0000345C 39D1                    	cmp	cx,dx		; If this is the load UMB, we don't want to
 37983 0000345E 740B                    	je	short fum30	; freeze anything... so skip that section.
 37984                                  
 37985                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 37986 00003460 26830E010000            	or	word [es:ARENA.OWNER],0
 37987 00003466 7503                    	jnz	short fum30	; either.
 37988                                  
 37989 00003468 E8B8FF                  	call	frezMCB
 37990                                  fum30:	
 37991                                  	;mov	al,[es:ARENA.SIGNATURE]
 37992                                  	;cmp	al,arena_signature_end ; 'Z'
 37993                                  	; 22/07/2023
 37994 0000346B 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37995 00003471 7408                    	je	short fumX	; 'Z' means this was the last MCB.. that's it.
 37996                                  
 37997                                  	;NextMCB es, ax		; Go on forward.
 37998                                  	; 22/07/2023
 37999                                  	; ax = es
 38000                                  	;mov	ax,es
 38001                                  	;add	ax,[es:3]
 38002 00003473 2603060300              	add	ax,[es:ARENA.SIZE]
 38003 00003478 40                      	inc	ax
 38004                                  	; 22/07/2023
 38005                                  	;mov	es,ax ; *
 38006 00003479 EBD9                    	jmp	short fum10
 38007                                  
 38008 0000347B 07                      fumX:	pop	es
 38009                                  	; 01/01/2023
 38010                                  	;pop	dx
 38011                                  	;pop	cx
 38012                                  	;pop	ax
 38013 0000347C C3                      	retn
 38014                                  
 38015                                  ; -----------------------------------------------------------------------------
 38016                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 38017                                  ; -----------------------------------------------------------------------------
 38018                                  ; ENTRY:    None
 38019                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 38020                                  ; ERROR:    None
 38021                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 38022                                  ; -----------------------------------------------------------------------------
 38023                                  
 38024                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38025                                  UmbTest:
 38026                                  	; 01/01/2023
 38027                                  	;push	ax
 38028 0000347D 53                      	push	bx ; *
 38029                                  	;push	ds
 38030 0000347E 06                      	push	es ; **
 38031                                  
 38032                                  	; 01/01/2023
 38033                                  	; ds = cs
 38034                                  
 38035 0000347F E871FB                  	call	fm_link			; Link in UMBs (if not already linked)
 38036 00003482 E80800                  	call	WalkMem			; Check to see if they're really linked
 38037 00003485 9C                      	pushf				; And remember what we found out
 38038 00003486 E87BFB                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 38039 00003489 9D                      	popf				; And restore what we found out.
 38040                                  
 38041 0000348A 07                      	pop	es ; **
 38042                                  	; 01/01/2023
 38043                                  	;pop	ds
 38044 0000348B 5B                      	pop	bx ; *
 38045                                  	;pop	ax
 38046 0000348C C3                      	retn
 38047                                  
 38048                                  ; -----------------------------------------------------------------------------
 38049                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 38050                                  ; -----------------------------------------------------------------------------
 38051                                  ; ENTRY:    None
 38052                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 38053                                  ; ERROR:    None
 38054                                  ; USES:     Flags
 38055                                  ; -----------------------------------------------------------------------------
 38056                                  
 38057                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38058                                  	; (SYSINIT:3541h)
 38059                                  
 38060                                  WalkMem:
 38061                                  	;push	ax ; ?
 38062                                  	;push	bx ; ?
 38063                                  	;;push	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:352Fh)
 38064                                  	;push	es ; ? no need to save contents of these registers ?
 38065                                  		   	
 38066 0000348D B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 38067 0000348F CD21                    	int	21h
 38068                                  
 38069 00003491 268B47FE                	mov	ax,[es:bx-2]
 38070                                  	; 22/07/2023
 38071                                  um10:
 38072 00003495 8EC0                    	mov	es,ax ; * ; **
 38073                                  
 38074                                  ; ------------------------------
 38075                                  ; UM10: ES = Current MCB pointer
 38076                                  ; ------------------------------
 38077                                  
 38078                                  ;um10:
 38079                                  	;mov	al,[es:ARENA.SIGNATURE]
 38080                                  	;cmp	al,arena_signature_end ; 'Z'
 38081                                  	; 22/07/2023
 38082 00003497 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 38083 0000349D 7408                    	je	short um20		; If signature == 'Z', hay no more.
 38084                                  
 38085                                  	;NextMCB es,bx			; Move to the next MCB
 38086                                  
 38087                                  	;mov	bx,es
 38088                                  	;;add	bx,[es:3]
 38089                                  	;add	bx,[es:ARENA.SIZE]
 38090                                  	;inc	bx
 38091                                  	;mov	es,bx
 38092                                  	; 22/07/2023
 38093                                  	; ax = es
 38094                                  	;mov	ax,es ; *
 38095 0000349F 2603060300              	add	ax,[es:ARENA.SIZE]
 38096 000034A4 40                      	inc	ax
 38097                                  	;mov	es,ax ; **
 38098                                  	
 38099 000034A5 EBEE                    	jmp	short um10		; And restart the loop.
 38100                                  um20:	
 38101                                  	; 22/07/2023
 38102                                  	; ax = es
 38103                                  	;mov	ax,es
 38104                                  
 38105 000034A7 3DFF9F                  	cmp	ax,9FFFh		; This sets CF if ax < 9FFF.
 38106                                  
 38107                                  	;pop	es ; ?
 38108                                  	;;pop	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:353Dh)
 38109                                  	;pop	bx ; ?
 38110                                  	;pop	ax ; ?
 38111                                  	
 38112 000034AA C3                      	retn
 38113                                  
 38114                                  ; -----------------------------------------------------------------------------
 38115                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 38116                                  ; -----------------------------------------------------------------------------
 38117                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 38118                                  ; EXIT:     None
 38119                                  ; ERROR:    None
 38120                                  ; USES:     AX, BX
 38121                                  ; -----------------------------------------------------------------------------
 38122                                  
 38123                                  	; 01/01/2023 - Retro DOS v4.2
 38124                                  hl_unlink:
 38125 000034AB 30FF                    	xor	bh,bh
 38126                                  
 38127                                  	;getdata bl,fm_umb		; Restore original link-state
 38128                                  	;
 38129                                  	;push	ds
 38130                                  	;push	cs
 38131                                  	;pop	ds
 38132                                  	;mov	bl,[fm_umb]
 38133                                  	;pop	ds
 38134                                  
 38135                                  	; 01/01/2023
 38136                                  	; ds = cs
 38137                                  	;mov	bl,[cs:fm_umb]
 38138 000034AD 8A1E[3024]              	mov	bl,[fm_umb]
 38139                                  
 38140 000034B1 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 38141 000034B4 CD21                    	int	21h
 38142 000034B6 C3                      	retn
 38143                                  
 38144                                  ; ----------------------------------------------------------------------
 38145                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 38146                                  ; ----------------------------------------------------------------------
 38147                                  ; 09/04/2019 - Retro DOS v4.0
 38148                                  
 38149                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 38150                                  ;   Date:     May 14, 1992
 38151                                  
 38152                                  ;   Modification log:
 38153                                  ;
 38154                                  ;     DATE    WHO      DESCRIPTION
 38155                                  ;   --------  -------  --------------------------------------------------------
 38156                                  ;   05/14/92  t-richj  Original
 38157                                  ;   06/21/92  t-richj  Final revisions before check-in
 38158                                  
 38159                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 38160                                  
 38161                                  ; -----------------------------------------------------------------------------
 38162                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 38163                                  ; -----------------------------------------------------------------------------
 38164                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 38165                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 38166                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 38167                                  ; ERROR:  None
 38168                                  ; USES:   fInHigh (from highvar.inc), carry flag
 38169                                  ; -----------------------------------------------------------------------------
 38170                                  
 38171                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38172                                  	; (SYSINIT:357Bh)
 38173                                  
 38174                                  UnHideUMBs:
 38175 000034B7 50                      	push	ax		; Save ax for what we're about to do
 38176                                  
 38177                                  ; -----------------------------------------------------------------------------
 38178                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 38179                                  ;    length of time. Those six constitute a check of whether or not we should
 38180                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 38181                                  ;    will destroy the current link-state and memory-allocation strategy after
 38182                                  ;    every command execution.
 38183                                  ; -----------------------------------------------------------------------------
 38184                                  
 38185                                  	;getdata al,fInHigh	; Get InHigh from data segment
 38186                                  	;
 38187                                  	;push	ds
 38188                                  	;push	cs
 38189                                  	;pop	ds
 38190                                  	;mov	al,[fInHigh]
 38191                                  	;pop	ds	
 38192                                  
 38193                                  	;mov	al,[cs:fInHigh]
 38194                                  	; 31/12/2022
 38195                                  	; ds = cs
 38196 000034B8 A0[FB23]                	mov	al,[fInHigh]	
 38197                                  
 38198 000034BB 08C0                    	or	al,al
 38199 000034BD 7503                    	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 38200                                  
 38201 000034BF 58                      	pop	ax		; then there's nothing to do here... so
 38202 000034C0 F9                      	stc			; restore everything and return. Just like
 38203 000034C1 C3                      	retn			; that.
 38204                                  uhu10:	
 38205 000034C2 E88E00                  	call	linkumb		; Make sure UMBs are linked in.
 38206 000034C5 E81200                  	call	FreeUMBs
 38207                                  
 38208                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 38209                                  	;
 38210                                  	;push	es
 38211                                  	;push	cs
 38212                                  	;pop	es
 38213                                  	;mov	byte [es:fInHigh],0
 38214                                  	;pop	ds
 38215                                  
 38216                                  	; 31/12/2022
 38217                                  	; ds = cs	
 38218                                  	;mov	byte [cs:fInHigh],0
 38219 000034C8 C606[FB23]00            	mov	byte [fInHigh],0
 38220                                  
 38221                                  	;call	he_unlink	; Unlink UMBs
 38222                                  	; 31/12/2022
 38223                                  ;;he_unlink:
 38224 000034CD 30FF                    	xor	bh,bh
 38225                                  
 38226                                  	;getdata bl,fm_umb	; Restore original link-state
 38227                                  	;mov	bl,[cs:fm_umb]	
 38228 000034CF 8A1E[3024]              	mov	bl,[fm_umb]
 38229                                  
 38230 000034D3 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 38231 000034D6 CD21                    	int	21h
 38232                                  	;;retn
 38233                                  
 38234 000034D8 58                      	pop	ax
 38235                                  	; 12/12/2022
 38236                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 38237 000034D9 C3                      	retn
 38238                                  
 38239                                  ; 31/12/2022
 38240                                  ;%if 0
 38241                                  ;
 38242                                  ;; -----------------------------------------------------------------------------
 38243                                  ;;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 38244                                  ;; -----------------------------------------------------------------------------
 38245                                  ;; ENTRY:    fm_umb == 1 : leave linked, else unlink
 38246                                  ;; EXIT:     None
 38247                                  ;; ERROR:    None
 38248                                  ;; USES:     AX, BX
 38249                                  ;; -----------------------------------------------------------------------------
 38250                                  ;
 38251                                  ;he_unlink:
 38252                                  ;	xor	bh, bh
 38253                                  ;
 38254                                  ;	;getdata bl, fm_umb	; Restore original link-state
 38255                                  ;	mov	bl,[cs:fm_umb]	
 38256                                  ;
 38257                                  ;	mov	ax,DOS_SET_UMBLINK ; 5803h
 38258                                  ;	int	21h
 38259                                  ;	retn
 38260                                  ;
 38261                                  ;%endif
 38262                                  
 38263                                  ; -----------------------------------------------------------------------------
 38264                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 38265                                  ; -----------------------------------------------------------------------------
 38266                                  ; ENTRY:    None
 38267                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 38268                                  ; ERROR:    None (ignore CF)
 38269                                  ; USES:     Flags
 38270                                  ; -----------------------------------------------------------------------------
 38271                                  
 38272                                  FreeUMBs:
 38273 000034DA 50                      	push	ax
 38274 000034DB 06                      	push	es
 38275                                  
 38276 000034DC E86700                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 38277 000034DF 721C                    	jc	short fusX
 38278                                  fus10:
 38279 000034E1 8EC0                    	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 38280                                  ;fus10:	
 38281 000034E3 E81A00                  	call	isHideMCB	; Returns with ZF set if owner is 0
 38282 000034E6 7505                    	jnz	short fus20
 38283 000034E8 E84000                  	call	freeMCB
 38284                                  	; 09/09/2023
 38285                                  	; ax <> es
 38286 000034EB 8CC0                    	mov	ax,es
 38287                                  fus20:	   
 38288                                  	;mov	al,[es:ARENA.SIGNATURE]
 38289                                  	;cmp	al,arena_signature_end ; 'Z'
 38290                                  	; 22/07/2023
 38291 000034ED 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 38292 000034F3 7408                    	jz	short fusX	; That means this was the last MCB--that's it.
 38293                                  	
 38294                                  	; 22/07/2023
 38295                                  	; ax = es
 38296                                  	;mov	ax,es
 38297 000034F5 2603060300              	add	ax,[es:ARENA.SIZE]
 38298 000034FA 40                      	inc	ax
 38299                                  	; 22/07/2023
 38300                                  	;mov	es,ax
 38301 000034FB EBE4                    	jmp	short fus10	; Go on forward.
 38302                                  fusX:	
 38303 000034FD 07                      	pop	es
 38304 000034FE 58                      	pop	ax
 38305 000034FF C3                      	retn
 38306                                  
 38307                                  ; -----------------------------------------------------------------------------
 38308                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 38309                                  ; -----------------------------------------------------------------------------
 38310                                  ; ENTRY:    ES:0 should point to an MCB
 38311                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 38312                                  ; ERROR:    None
 38313                                  ; USES:     Flags
 38314                                  ; -----------------------------------------------------------------------------
 38315                                  
 38316                                  isHideMCB:
 38317                                  	;push	ax
 38318                                  
 38319 00003500 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 38320 00003506 7522                    	jne	short ihm_x				; then check for HIDDEN
 38321                                  
 38322                                  	;mov	ax,[es:ARENA.NAME]
 38323                                  	;cmp	ax,'HI' ; 4948h
 38324 00003508 26813E08004849          	cmp	word [es:ARENA.NAME+0],'HI'
 38325 0000350F 7519                    	jne	short ihm_x
 38326                                  	;mov	ax,[es:ARENA.NAME+2]
 38327                                  	;cmp	ax,'DD' ; 4444h
 38328 00003511 26813E0A004444          	cmp	word [es:ARENA.NAME+2],'DD'
 38329 00003518 7510                    	jne	short ihm_x
 38330                                  	;mov	ax,[es:ARENA.NAME+4]
 38331                                  	;cmp	ax,'EN' ; 4E45h
 38332 0000351A 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 38333 00003521 7507                    	jne	short ihm_x
 38334                                  	;mov	ax,[es:ARENA.NAME+6]
 38335                                  	;cmp	ax,'  ' ; 2020h
 38336 00003523 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 38337                                  ihm_x:	
 38338                                  	;pop	ax
 38339 0000352A C3                      	retn
 38340                                  
 38341                                  ; -----------------------------------------------------------------------------
 38342                                  ;*** freeMCB - marks as free the MCB at ES:0
 38343                                  ; -----------------------------------------------------------------------------
 38344                                  ; ENTRY:    ES:0 should point to an MCB
 38345                                  ; EXIT:     None; MCB free'd
 38346                                  ; ERROR:    None
 38347                                  ; USES:     AX
 38348                                  ; -----------------------------------------------------------------------------
 38349                                  
 38350                                  freeMCB:
 38351 0000352B 26C70601000000          	mov	word [es:ARENA.OWNER],0
 38352 00003532 B82020                  	mov	ax,'  ' ; mov ax,2020h ; 31/12/2022
 38353 00003535 26A30800                	mov	[es:ARENA.NAME+0],ax
 38354 00003539 26A30A00                	mov	[es:ARENA.NAME+2],ax
 38355 0000353D 26A30C00                	mov	[es:ARENA.NAME+4],ax
 38356 00003541 26A30E00                	mov	[es:ARENA.NAME+6],ax
 38357 00003545 C3                      	retn
 38358                                  
 38359                                  ; -----------------------------------------------------------------------------
 38360                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 38361                                  ; -----------------------------------------------------------------------------
 38362                                  ; ENTRY:  Nothing
 38363                                  ; EXIT:   AX contains 0x9FFF for most systems
 38364                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 38365                                  ; USES:   Flags, AX
 38366                                  ; -----------------------------------------------------------------------------
 38367                                  
 38368                                  HeadUmb:
 38369                                  	; 13/05/2019
 38370                                  
 38371                                  	;push	si ; ?
 38372                                  	;push	ds ; ?
 38373                                  	;push	es
 38374                                  	;push	bx ; *
 38375                                  
 38376                                  	; 09/04/2019
 38377                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 38378                                  
 38379 00003546 B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 38380 00003548 CD21                    	int	21h
 38381                                  			; DOS - 2+ internal - GET LIST OF LISTS
 38382                                  			; Return: ES:BX -> DOS list of lists
 38383                                  	;mov	ax,[es:8Ch]
 38384 0000354A 26A18C00                	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 38385 0000354E 83F8FF                  	cmp	ax,0FFFFh
 38386                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 38387                                  
 38388                                  	;clc				; Else, it isn't.
 38389                                  	;jmp	short xhu_x
 38390                                  xhu_e:	
 38391                                  	;stc
 38392 00003551 F5                      	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 38393                                  xhu_x:	
 38394                                  	;pop	bx ; *
 38395                                  	;pop	es	
 38396                                  	;pop	ds ; ?
 38397                                  	;pop	si ; ?
 38398 00003552 C3                      	retn
 38399                                  
 38400                                  ; -----------------------------------------------------------------------------
 38401                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 38402                                  ; -----------------------------------------------------------------------------
 38403                                  ; ENTRY:    None
 38404                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 38405                                  ; ERROR:    None
 38406                                  ; USES:     AX, BX, fm_umb
 38407                                  ; -----------------------------------------------------------------------------
 38408                                  
 38409                                  linkumb:
 38410 00003553 B80258                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 38411 00003556 CD21                    	int	21h			; Current link-state is now in al
 38412                                  
 38413 00003558 08C0                    	or	al,al			; BUGBUG: proper check?
 38414 0000355A 7508                    	jnz	short lumbX		; Jumps if UMBs already linked in
 38415                                  
 38416 0000355C B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 38417 0000355F BB0100                  	mov	bx,1
 38418 00003562 CD21                    	int	21h
 38419                                  lumbX:
 38420 00003564 C3                      	retn
 38421                                  
 38422                                  ;%endif
 38423                                  
 38424                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38425                                  ; (SYSINIT:2B5Fh)
 38426                                  
 38427                                  ; ----------------------------------------------------------------------
 38428                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 38429                                  ; ----------------------------------------------------------------------
 38430                                  ; 09/04/2019 - Retro DOS v4.0
 38431                                  
 38432                                  ;----------------------------------------------------------------------------
 38433                                  ;
 38434                                  ; procedure : InitDevLoad
 38435                                  ;
 38436                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 38437                                  ;			 = 1 indicates load in UMB:
 38438                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 38439                                  ;		                    = 1 indicates a DOS 5-style load
 38440                                  ;		DevSize  = Size of the device driver file in paras
 38441                                  ;
 38442                                  ;	Output : none
 38443                                  ;
 38444                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 38445                                  ;	Also sets up a header for the Device driver entry for mem utility
 38446                                  ;
 38447                                  ;----------------------------------------------------------------------------
 38448                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 38449                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 38450                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 38451                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 38452                                  ;----------------------------------------------------------------------------
 38453                                  
 38454                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38455                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38456                                  	; (SYSINIT:364Ah)
 38457                                  InitDevLoad:
 38458                                  	; 01/01/2023
 38459                                  	;push	es ; *
 38460                                  
 38461                                  	; 11/12/2022
 38462                                  	; ds = cs
 38463 00003565 803E[5124]00            	cmp	byte [DeviceHi],0
 38464                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 38465                                  	;je	short InitForLo		; no, init for lo mem
 38466 0000356A 7439                    	je	short initforlo_x ; 09/04/2019
 38467                                  
 38468                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38469                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38470                                  ; %if 0
 38471                                  	; 01/01/2023
 38472 0000356C 803E[4124]01            	cmp	byte [ConvLoad],1	; Are we loading as per DOS 5?
 38473                                  	;cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 38474 00003571 7413                    	je	short InitForConv
 38475                                  
 38476                                  ; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 38477                                  ; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 38478                                  ; any areas left in upper-memory, except for elements in the load UMB...
 38479                                  ; we then malloc space as per Dos-5 style, and mark as free any spaces which
 38480                                  ; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 38481                                  ; and UnHideUMBs later on marks all 8+HIDDEN as free.
 38482                                  
 38483 00003573 E85904                  	call	ShrinkUMB		; Stop using the old device arena
 38484                                  
 38485 00003576 E892FC                  	call	HideUMBs		; Mark up the UM area as we see fit
 38486 00003579 E8CBFE                  	call	FreezeUM		; Hide everything BUT the load area
 38487 0000357C E85700                  	call	GetUMBForDev		; And grab that load area as needed
 38488 0000357F 9C                      	pushf
 38489 00003580 E851FE                  	call	UnFreeze		; Then unhide everything frozen
 38490 00003583 9D                      	popf
 38491                                  	;jc	short InitForLo		; (if carry, it's loading low)
 38492                                  	;jmp	short InitForHi
 38493                                  	; 06/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 38494 00003584 EB0B                    	jmp	short idl0
 38495                                  
 38496                                  ;%endif ; 01/11/2022
 38497                                  
 38498                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38499                                  	; (SYSINIT:2B67h)
 38500                                  InitForConv:
 38501                                  	; 11/12/2022
 38502                                  	; ds = cs
 38503 00003586 E83700                  	call	SpaceInUMB		; Do we have space left in the
 38504                                  					;  current UMB ?
 38505 00003589 7308                    	jnc	short InitForHi		; yes, we have
 38506 0000358B E84104                  	call	ShrinkUMB		; shrink the current UMB in use
 38507 0000358E E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 38508                                  idl0: ; 06/07/2023
 38509 00003591 720D                    	jc	short InitForLo		; we didn't succeed, so load
 38510                                  					;  in low memory
 38511                                  InitForHi:
 38512                                  	; 11/12/2022
 38513                                  	; ds = cs
 38514                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 38515                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 38516                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 38517 00003593 A1[4724]                	mov	ax,[DevUMBFree]
 38518 00003596 8B16[4324]              	mov	dx,[DevUMBAddr]
 38519 0000359A 0316[4524]              	add	dx,[DevUMBSize]
 38520 0000359E EB0C                    	jmp	short idl1
 38521                                  
 38522                                  InitForLo:
 38523                                  	; 11/12/2022
 38524                                  	; ds = cs
 38525                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 38526 000035A0 C606[5124]00            	mov	byte [DeviceHi],0
 38527                                  initforlo_x:
 38528                                  	; 11/12/2022
 38529                                  	; ds = cs
 38530                                  					;  into UMB indicate that
 38531                                  					;  we are loading low
 38532                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 38533                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 38534 000035A5 A1[6403]                	mov	ax,[memhi]
 38535 000035A8 8B16[A502]              	mov	dx,[ALLOCLIM]
 38536                                  idl1:
 38537 000035AC E86600                  	call	DevSetMark		; setup a sub-arena for DD
 38538                                  	; 11/12/2022
 38539                                  	; ds = cs
 38540                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 38541                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 38542                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 38543                                  	;mov	[cs:DevEntry+2],ax
 38544 000035AF A3[3524]                	mov	[DevLoadAddr],ax
 38545 000035B2 8916[3724]              	mov	[DevLoadEnd],dx
 38546 000035B6 C706[3924]0000          	mov	word [DevEntry],0
 38547 000035BC A3[3B24]                	mov	[DevEntry+2],ax
 38548                                  	; 01/01/2023
 38549                                  	;pop	es ; *
 38550 000035BF C3                      	retn
 38551                                  
 38552                                  ;----------------------------------------------------------------------------
 38553                                  ;
 38554                                  ; procedure : SpaceInUMB?
 38555                                  ;
 38556                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 38557                                  ;	Output : Carry set if no space in UMB
 38558                                  ;		 Carry clear if Space is available for the device in
 38559                                  ;		   current UMB
 38560                                  ;
 38561                                  ;----------------------------------------------------------------------------
 38562                                  
 38563                                  SpaceInUMB:
 38564                                  	; 11/12/2022
 38565                                  	; ds = cs
 38566                                  	;mov	ax,[cs:DevUMBSize]
 38567                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 38568                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 38569 000035C0 A1[4524]                	mov	ax,[DevUMBSize]
 38570 000035C3 0306[4324]              	add	ax,[DevUMBAddr]		; End of UMB
 38571 000035C7 2B06[4724]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 38572                                  	; 11/12/2022
 38573                                  	;or	ax,ax			; Nospace ?
 38574                                  	;jnz	short spcinumb1
 38575                                  	;stc
 38576                                  	;retn
 38577                                  	; 11/12/2022
 38578 000035CB 83F801                  	cmp	ax,1
 38579 000035CE 7205                    	jb	short spcinumb2	; cf=1
 38580                                  spcinumb1:
 38581 000035D0 48                      	dec	ax			; space for sub-arena
 38582                                  	; 11/12/2022
 38583                                  	; ds = cs
 38584 000035D1 3B06[3324]              	cmp	ax,[DevSize]
 38585                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 38586                                  spcinumb2:
 38587 000035D5 C3                      	retn
 38588                                  
 38589                                  ;----------------------------------------------------------------------------
 38590                                  ;
 38591                                  ; procedure : PrepareMark
 38592                                  ;
 38593                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 38594                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 38595                                  ;
 38596                                  ;----------------------------------------------------------------------------
 38597                                  
 38598                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38599                                  ;
 38600                                  ;PrepareMark:
 38601                                  ;	push	ds
 38602                                  ;	mov	ds,ax
 38603                                  ;	mov	word [ARENA.OWNER],8
 38604                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 38605                                  ;	pop	ds
 38606                                  ;
 38607                                  ;	inc	ax
 38608                                  ;	mov	[cs:DevUMBAddr],ax
 38609                                  ;	mov	[cs:DevUMBFree],ax
 38610                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 38611                                  ;	retn
 38612                                  
 38613                                  ;----------------------------------------------------------------------------
 38614                                  ;
 38615                                  ; procedure : GetUMBForDev
 38616                                  ;
 38617                                  ;	Input : DevSize
 38618                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 38619                                  ;		 the device.
 38620                                  ;		 If success carry clear
 38621                                  ;
 38622                                  ;	Allocates the biggest UMB for loading devices and updates
 38623                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 38624                                  ;	UMB.
 38625                                  ;
 38626                                  ;	This routine relies on the fact that all of the low memory
 38627                                  ;	is allocated, and any DOS alloc calls should return memory
 38628                                  ;	from the UMB pool.
 38629                                  ;
 38630                                  ;----------------------------------------------------------------------------
 38631                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38632                                  	; (SYSINIT:2BC6h)
 38633                                  
 38634                                  GetUMBForDev:
 38635                                  	; 11/12/2022
 38636                                  	; ds = cs
 38637 000035D6 BBFFFF                  	mov	bx,0FFFFh
 38638 000035D9 B80048                  	mov	ax,4800h
 38639 000035DC CD21                    	int	21h
 38640                                  		; DOS - 2+ - ALLOCATE MEMORY
 38641                                  		; BX = number of 16-byte paragraphs desired
 38642                                  
 38643 000035DE 09DB                    	or	bx,bx
 38644                                  	;jz	short gufd_err
 38645                                  	; 09/09/2023
 38646 000035E0 742E                    	jz	short gufd_error ; bx = 0
 38647                                  
 38648 000035E2 4B                      	dec	bx
 38649                                  	; 11/12/2022
 38650                                  	; ds = cs
 38651 000035E3 391E[3324]              	cmp	[DevSize],bx
 38652                                  	;cmp	[cs:DevSize],bx
 38653 000035E7 7725                    	ja	short gufd_err
 38654                                  
 38655 000035E9 43                      	inc	bx
 38656                                  
 38657 000035EA B80048                  	mov	ax,4800h
 38658 000035ED CD21                    	int	21h
 38659 000035EF 721D                    	jc	short gufd_err
 38660                                  
 38661                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38662                                  	;dec	ax
 38663                                  	;call	PrepareMark
 38664                                  	;
 38665                                  PrepareMark:
 38666 000035F1 1E                      	push	ds
 38667 000035F2 48                      	dec	ax
 38668 000035F3 8ED8                    	mov	ds,ax
 38669 000035F5 C70601000800            	mov	word [ARENA.OWNER],8
 38670 000035FB C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 38671 00003601 40                      	inc	ax
 38672 00003602 1F                      	pop	ds
 38673                                  	; 11/12/2022
 38674                                  	; ds = cs
 38675                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 38676                                  	;mov	[cs:DevUMBAddr],ax
 38677                                  	;mov	[cs:DevUMBFree],ax
 38678                                  gufd_x:		; 09/09/2023
 38679 00003603 891E[4524]              	mov	[DevUMBSize],bx		; update the UMB Variables
 38680 00003607 A3[4324]                	mov	[DevUMBAddr],ax
 38681 0000360A A3[4724]                	mov	[DevUMBFree],ax
 38682                                  	;
 38683                                  	; 11/12/2022
 38684                                  	; cf=0
 38685                                  	;clc				; mark no error
 38686 0000360D C3                      	retn
 38687                                  
 38688                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38689                                  %if 1
 38690                                  gufd_err:
 38691 0000360E 31DB                    	xor	bx,bx ; 0
 38692                                  gufd_error:
 38693 00003610 31C0                    	xor	ax,ax ; 0
 38694 00003612 F9                      	stc	; cf=1
 38695 00003613 EBEE                    	jmp	short gufd_x	
 38696                                  %endif
 38697                                  
 38698                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38699                                  %if 0
 38700                                  gufd_err:
 38701                                  	xor	ax,ax ; 0
 38702                                  	; 11/12/2022
 38703                                  	; ds = cs
 38704                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 38705                                  	;mov	[cs:DevUMBAddr],ax
 38706                                  	;mov	[cs:DevUMBFree],ax
 38707                                  	mov	[DevUMBSize],ax		; erase the previous values
 38708                                  	mov	[DevUMBAddr],ax
 38709                                  	mov	[DevUMBFree],ax
 38710                                  	stc
 38711                                  	retn
 38712                                  %endif
 38713                                  
 38714                                  ;----------------------------------------------------------------------------
 38715                                  ;
 38716                                  ; procedure : DevSetMark
 38717                                  ;
 38718                                  ;	Input : AX - Free segment were device is going to be loaded
 38719                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 38720                                  ;
 38721                                  ;	Creates a sub-arena for the device driver
 38722                                  ;	puts 'D' marker in the sub-arena
 38723                                  ;	Put the owner of the sub-arena as (AX+1)
 38724                                  ;	Copies the file name into sub-arena name field
 38725                                  ;
 38726                                  ;	Size field of the sub-arena will be set only at succesful
 38727                                  ;	completion of Device load.
 38728                                  ;
 38729                                  ;----------------------------------------------------------------------------
 38730                                  
 38731                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38732                                  	; (SYSINIT:2C13h)
 38733                                  
 38734                                  DevSetMark:
 38735 00003615 06                      	push	es
 38736                                  	; 03/01/2023
 38737                                  	;push	di
 38738 00003616 1E                      	push	ds
 38739 00003617 56                      	push	si
 38740 00003618 8EC0                    	mov	es,ax
 38741 0000361A 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 38742 00003620 40                      	inc	ax
 38743 00003621 26A30100                	mov	[es:devmark.seg],ax
 38744                                  
 38745                                  ;-------------- Copy file name
 38746                                  
 38747 00003625 50                      	push	ax			; save load addr
 38748                                  
 38749                                  	; 09/09/2023
 38750                                  	; ds = cs
 38751                                  	;lds	si,[cs:bpb_addr]	; command line is still there
 38752 00003626 C536[8103]              	lds	si,[bpb_addr]
 38753                                  
 38754 0000362A 89F7                    	mov	di,si
 38755 0000362C FC                      	cld
 38756                                  dsm_again:
 38757 0000362D AC                      	lodsb
 38758 0000362E 3C3A                    	cmp	al,':'
 38759 00003630 7504                    	jne	short isit_slash
 38760 00003632 89F7                    	mov	di,si
 38761 00003634 EBF7                    	jmp	short dsm_again
 38762                                  isit_slash:
 38763 00003636 3C5C                    	cmp	al, '\'
 38764 00003638 7504                    	jne	short isit_null
 38765 0000363A 89F7                    	mov	di,si
 38766 0000363C EBEF                    	jmp	short dsm_again
 38767                                  isit_null:
 38768 0000363E 08C0                    	or	al,al
 38769 00003640 75EB                    	jnz	short dsm_again
 38770 00003642 89FE                    	mov	si,di
 38771                                  
 38772 00003644 BF0800                  	mov	di,devmark.filename ; 8
 38773 00003647 B90800                  	mov	cx,8			; maximum 8 characters
 38774                                  dsm_next_char:
 38775 0000364A AC                      	lodsb
 38776 0000364B 08C0                    	or	al, al
 38777 0000364D 7407                    	jz	short blankout
 38778 0000364F 3C2E                    	cmp	al, '.'
 38779 00003651 7403                    	je	short blankout
 38780 00003653 AA                      	stosb
 38781 00003654 E2F4                    	loop	dsm_next_char
 38782                                  blankout:
 38783 00003656 E304                    	jcxz	dsm_exit
 38784 00003658 B020                    	mov	al, ' '
 38785 0000365A F3AA                    	rep	stosb			; blank out the rest
 38786                                  dsm_exit:
 38787 0000365C 58                      	pop	ax			; restore load addr
 38788 0000365D 5E                      	pop	si
 38789 0000365E 1F                      	pop	ds
 38790                                  	; 03/01/2023
 38791                                  	;pop	di
 38792 0000365F 07                      	pop	es
 38793 00003660 C3                      	retn
 38794                                  
 38795                                  ;----------------------------------------------------------------------------
 38796                                  ;
 38797                                  ; procedure : SizeDevice
 38798                                  ;
 38799                                  ;	Input : ES:SI - points to device file to be sized
 38800                                  ;
 38801                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 38802                                  ;
 38803                                  ;	Calculates the size of the device file in paras and stores it
 38804                                  ;	in DevSize
 38805                                  ;
 38806                                  ;----------------------------------------------------------------------------
 38807                                  
 38808                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38809                                  SizeDevice:
 38810                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38811                                  	; 11/12/2022 ; *
 38812 00003661 1E                      	push	ds ; *
 38813 00003662 06                      	push	es
 38814 00003663 1F                      	pop	ds
 38815 00003664 89F2                    	mov	dx,si			; ds:dx -> file name
 38816 00003666 B8003D                  	mov	ax,3D00h		; open
 38817 00003669 CD21                    	int	21h
 38818 0000366B 7237                    	jc	short sd_err		; open failed
 38819                                  
 38820 0000366D 89C3                    	mov	bx,ax			; BX - file handle
 38821 0000366F B80242                  	mov	ax,4202h		; seek
 38822 00003672 31C9                    	xor	cx,cx
 38823 00003674 89CA                    	mov	dx,cx			; to end of file
 38824 00003676 CD21                    	int	21h
 38825 00003678 7223                    	jc	short sd_close		; did seek fail (impossible)
 38826 0000367A 83C00F                  	add	ax,15			; para convert
 38827 0000367D 83D200                  	adc	dx,0
 38828 00003680 F7C2F0FF                	test	dx,0FFF0h		; size > 0ffffh paras ?
 38829                                  	;jz	short szdev1		; no
 38830                                  	; 22/07/2023
 38831 00003684 7409                    	jz	short sd_ctp
 38832 00003686 2EC706[3324]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 38833                                  					; assuming that we fail later
 38834 0000368D EB0E                    	jmp	short sd_close
 38835                                  sd_ctp:	
 38836                                  	; 22/07/2023
 38837                                  ;szdev1:
 38838 0000368F B104                    	mov	cl,4			; convert it to paras
 38839 00003691 D3E8                    	shr	ax,cl
 38840 00003693 B10C                    	mov	cl,12
 38841 00003695 D3E2                    	shl	dx,cl
 38842 00003697 09D0                    	or	ax,dx ; * ; cf=0
 38843                                  	;
 38844                                  	; 22/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 38845                                  	; MSDOS 6.21 IO.SYS - SYSINIT:37A6h 
 38846                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38847                                  	;cmp	ax,[cs:DevSizeOption]
 38848                                  	;ja	short szdev2
 38849                                  	;mov	ax,[cs:DevSizeOption]
 38850                                  	; 12/12/2022
 38851                                  	;clc
 38852                                  ;szdev2:
 38853 00003699 2EA3[3324]              	mov	[cs:DevSize],ax		; save file size (in paragraps)
 38854                                  	; 22/07/2023
 38855                                  	;clc ; cf=0 ; *	; CLC is not needed here
 38856                                  			; (OR instruction clears CF) - E.TAN 22/07/2023
 38857                                  
 38858                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38859                                  	; 12/12/2022
 38860                                  	; cf=0
 38861                                  	;clc
 38862                                  sd_close:
 38863 0000369D 9C                      	pushf				; let close not spoil our
 38864                                  					;  carry flag
 38865 0000369E B8003E                  	mov	ax,3E00h		; close
 38866 000036A1 CD21                    	int	21h			; we are not checking for err
 38867 000036A3 9D                      	popf
 38868                                  sd_err:
 38869                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38870                                  	; 11/12/2022 ; *
 38871 000036A4 1F                      	pop     ds ; *
 38872 000036A5 C3                      	retn
 38873                                  
 38874                                  ;----------------------------------------------------------------------------
 38875                                  ;
 38876                                  ; procedure : ExecDev
 38877                                  ;
 38878                                  ;	Input : ds:dx -> device to be executed
 38879                                  ;		DevLoadAddr - contains where device has to be loaded
 38880                                  ;
 38881                                  ;	Output : Carry if error
 38882                                  ;		 Carry clear if no error
 38883                                  ;
 38884                                  ;	Loads a device driver using the 4b03h function call
 38885                                  ;
 38886                                  ;----------------------------------------------------------------------------
 38887                                  
 38888                                  	; 01/11/2022
 38889                                  ExecDev:
 38890 000036A6 2E8B1E[3524]            	mov	bx,[cs:DevLoadAddr]
 38891 000036AB 2E891E[4D24]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 38892                                  					;  block for exec with
 38893                                  					;  load address
 38894 000036B0 2E891E[4F24]            	mov	[cs:DevExecReloc],bx
 38895 000036B5 8CCB                    	mov	bx,cs
 38896 000036B7 8EC3                    	mov	es,bx
 38897 000036B9 BB[4D24]                	mov	bx,DevExecAddr		; es:bx points to parameters
 38898                                  	;mov	al,3	; (load program only)
 38899                                  	;mov	ah,EXEC ; 4Bh
 38900                                  	; 04/07/2023
 38901 000036BC B8034B                  	mov	ax,(EXEC<<8)|03h
 38902 000036BF CD21                    	int	21h			; load in the device driver
 38903                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 38904                                  		; DS:DX -> ASCIZ filename
 38905                                  		; ES:BX -> parameter block
 38906                                  		; AL = subfunction 
 38907 000036C1 C3                      	retn
 38908                                  
 38909                                  ;----------------------------------------------------------------------------
 38910                                  ;
 38911                                  ; procedure : RetFromUM
 38912                                  ;
 38913                                  ;	Input : None
 38914                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 38915                                  ;		 ConvLoad clear if did.
 38916                                  ;
 38917                                  ;	Prepares memory for more devices after returning from loading one
 38918                                  ;	using the DOS 6 options (/L:... etc).
 38919                                  ;
 38920                                  ;----------------------------------------------------------------------------
 38921                                  
 38922                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38923                                  ;  (SYSINIT:37D1h)
 38924                                  
 38925                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38926                                  ;%if 0
 38927                                  RetFromUM:
 38928                                  	; 31/12/2022
 38929                                  	; ds = cs
 38930 000036C2 9C                      	pushf
 38931                                  	;mov	byte [cs:ConvLoad],1
 38932 000036C3 C606[4124]01            	mov	byte [ConvLoad],1
 38933 000036C8 E8ECFD                  	call	UnHideUMBs
 38934 000036CB 7204                    	jc	short rfUM1		; Skip this if didn't HideUMBs
 38935                                  	; 31/12/2022
 38936                                  	; ds = cs
 38937                                  	;;mov	byte [cs:ConvLoad],0
 38938                                  	;mov	byte [ConvLoad],0
 38939                                  	; 09/09/2023
 38940 000036CD FE0E[4124]              	dec	byte [ConvLoad] ; -> 0
 38941                                  rfUM1:	
 38942 000036D1 9D                      	popf
 38943 000036D2 C3                      	retn
 38944                                  
 38945                                  ;%endif ; 01/11/2022
 38946                                  
 38947                                  ;----------------------------------------------------------------------------
 38948                                  ;
 38949                                  ; procedure : RemoveNull
 38950                                  ;
 38951                                  ;	Input : ES:SI points to a null terminated string
 38952                                  ;
 38953                                  ;	Output : none
 38954                                  ;
 38955                                  ;	Replaces the null at the end of a string with blank
 38956                                  ;
 38957                                  ;----------------------------------------------------------------------------
 38958                                  
 38959                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38960                                  	; (SYSINIT:2CCEh)
 38961                                  RemoveNull:
 38962                                  	; 11/12/2022
 38963                                  	; ds = cs
 38964                                  rn_next:
 38965 000036D3 268A1C                  	mov	bl,[es:si]
 38966 000036D6 08DB                    	or	bl,bl			; null ?
 38967 000036D8 7403                    	jz	short rn_gotnull
 38968 000036DA 46                      	inc	si			; advance the pointer
 38969 000036DB EBF6                    	jmp	short rn_next
 38970                                  rn_gotnull:
 38971                                  	; 11/12/2022
 38972 000036DD 8A1E[6624]              	mov	bl,[DevSavedDelim]
 38973                                  	;mov	bl,[cs:DevSavedDelim]
 38974 000036E1 26881C                  	mov	[es:si],bl		; replace null with blank
 38975                                  	; 02/11/2022
 38976                                  ; 11/12/2022
 38977                                  rba_ok:		; 10/04/2019
 38978 000036E4 C3                      	retn
 38979                                  
 38980                                  ;----------------------------------------------------------------------------
 38981                                  ;
 38982                                  ; procedure : RoundBreakAddr
 38983                                  ;
 38984                                  ;	Input : DevBrkAddr
 38985                                  ;	Output : DevBrkAddr
 38986                                  ;
 38987                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 38988                                  ;
 38989                                  ;----------------------------------------------------------------------------
 38990                                  
 38991                                  RoundBreakAddr:
 38992 000036E5 2EA1[3D24]              	mov	ax,[cs:DevBrkAddr]
 38993 000036E9 E829DC                  	call	ParaRound
 38994 000036EC 2E0106[3F24]            	add	[cs:DevBrkAddr+2],ax
 38995 000036F1 2EC706[3D24]0000        	mov	word [cs:DevBrkAddr],0
 38996 000036F8 2EA1[3724]              	mov	ax,[cs:DevLoadEnd]
 38997 000036FC 2E3906[3F24]            	cmp	[cs:DevBrkAddr+2],ax
 38998 00003701 76E1                    	jbe	short rba_ok
 38999 00003703 E92911                  	jmp	mem_err
 39000                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39001                                  	; 11/12/2022
 39002                                  ;rba_ok:
 39003                                  ;	retn
 39004                                  
 39005                                  ;----------------------------------------------------------------------------
 39006                                  ;
 39007                                  ; procedure : DevSetBreak
 39008                                  ;
 39009                                  ;	Input : DevBrkAddr
 39010                                  ;	Output : Carry set if Device returned Init failed
 39011                                  ;		 Else carry clear
 39012                                  ;
 39013                                  ;----------------------------------------------------------------------------
 39014                                  
 39015                                  DevSetBreak:
 39016 00003706 50                      	push	ax
 39017                                  
 39018 00003707 2EA1[3F24]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 39019 0000370B 2E803E[6619]00          	cmp	byte [cs:multdeviceflag],0
 39020 00003711 750F                    	jne	short set_break_continue ;do not check it.
 39021 00003713 2E3B06[3524]            	cmp	ax,[cs:DevLoadAddr]
 39022 00003718 7508                    	jne	short set_break_continue ;if not same, then o.k.
 39023                                  
 39024                                  	;cmp	word [cs:DevBrkAddr],0
 39025                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 39026                                  	; 12/12/2022
 39027 0000371A 2E833E[3D24]01          	cmp	word [cs:DevBrkAddr],1
 39028 00003720 7204                    	jb	short break_failed
 39029                                  
 39030                                  set_break_continue:
 39031 00003722 E8C0FF                  	call	RoundBreakAddr
 39032                                  	; 12/12/2022
 39033 00003725 F8                      	clc
 39034                                  break_failed:
 39035 00003726 58                      	pop	ax
 39036                                  	;clc
 39037 00003727 C3                      	retn
 39038                                  
 39039                                  	; 12/12/2022
 39040                                  ;break_failed:
 39041                                  	;pop	ax
 39042                                  	;stc
 39043                                  	;retn
 39044                                  
 39045                                  ;----------------------------------------------------------------------------
 39046                                  ;
 39047                                  ; procedure : DevBreak
 39048                                  ;
 39049                                  ;	Input : DevLoadAddr & DevBrkAddr
 39050                                  ;	Output : none
 39051                                  ;
 39052                                  ;	Marks a succesful install of a device driver
 39053                                  ;	Sets device size field in sub-arena &
 39054                                  ;	Updates Free ptr in UMB or adjusts memhi
 39055                                  ;
 39056                                  ;----------------------------------------------------------------------------
 39057                                  
 39058                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39059                                  DevBreak:
 39060                                  	;push	ds ; 11/12/2022
 39061                                  
 39062                                  	; 11/12/2022
 39063 00003728 0E                      	push	cs
 39064 00003729 1F                      	pop	ds
 39065                                  	;mov	ax,[cs:DevLoadAddr]
 39066                                  	;mov	bx,[cs:DevBrkAddr+2]
 39067 0000372A A1[3524]                	mov	ax,[DevLoadAddr]
 39068 0000372D 8B1E[3F24]              	mov	bx,[DevBrkAddr+2]
 39069                                  	; 11/12/2022
 39070 00003731 1E                      	push	ds
 39071                                  
 39072 00003732 48                      	dec	ax			; seg of sub-arena
 39073 00003733 8ED8                    	mov	ds,ax
 39074 00003735 40                      	inc	ax			; Back to Device segment
 39075 00003736 29D8                    	sub	ax,bx
 39076 00003738 F7D8                    	neg	ax			; size of device in paras
 39077 0000373A A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 39078                                  	
 39079                                  	; 11/12/2022
 39080 0000373D 1F                      	pop	ds
 39081                                  	; ds = cs
 39082                                   	
 39083 0000373E 803E[5124]00            	cmp	byte [DeviceHi],0
 39084                                  	;cmp	byte [cs:DeviceHi],0
 39085 00003743 7405                    	je	short db_lo
 39086                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 39087                                  	;jmp	short db_exit
 39088                                  	; 11/12/2022
 39089 00003745 891E[4724]              	mov	[DevUMBFree],bx
 39090 00003749 C3                      	retn	
 39091                                  db_lo:
 39092                                  	; 11/12/2022
 39093                                  	; ds = cs
 39094                                  	;mov	[cs:memhi],bx
 39095                                  	;mov	word [cs:memlo],0
 39096 0000374A 891E[6403]              	mov	[memhi],bx
 39097 0000374E C706[6203]0000          	mov	word [memlo],0 ; 18/12/2022
 39098                                  db_exit:
 39099                                  	;pop	ds ; 11/12/2022
 39100                                  sd_ret:		; 09/09/2023
 39101 00003754 C3                      	retn
 39102                                  
 39103                                  ; 10/04/2019 - Retro DOS v4.0
 39104                                  
 39105                                  ;----------------------------------------------------------------------------
 39106                                  ;
 39107                                  ; procedure : ParseSize
 39108                                  ;
 39109                                  ;	Parses the command line for SIZE= command
 39110                                  ;
 39111                                  ;	ES:SI = command line to parsed
 39112                                  ;
 39113                                  ;	returns ptr to command line after SIZE= option in ES:SI
 39114                                  ;	updates the DevSizeOption variable with value supplied
 39115                                  ;	in SIZE=option
 39116                                  ;	Returns carry if the SIZE option was invalid
 39117                                  ;
 39118                                  ;----------------------------------------------------------------------------
 39119                                  
 39120                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39121                                  	; (SYSINIT:2D5Ah)
 39122                                  
 39123                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization) ((&BugFix))
 39124                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:3871h) - Retro DOS v4.2 -
 39125                                  	; (PCDOS 7.1 IO.SYS - SYSINIT:3D6Eh)  - Retro DOS v5.0 -
 39126                                  ParseSize:
 39127                                  	;push	bx
 39128                                  	;mov	bx,si
 39129                                  
 39130                                  	; 09/09/2023
 39131 00003755 56                      	push	si ; * ; mov bx,si
 39132                                  
 39133                                  	; 11/12/2022
 39134                                  	; ds = cs
 39135                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 39136                                  	;mov	[cs:DevCmdLine],si
 39137                                  	;mov	[cs:DevCmdLine+2],es
 39138 00003756 C706[5224]0000          	mov	word [DevSizeOption],0 ; init the value
 39139 0000375C 8936[6224]              	mov	[DevCmdLine],si
 39140 00003760 8C06[6424]              	mov	[DevCmdLine+2],es	
 39141 00003764 E82400                  	call	SkipDelim
 39142 00003767 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 39143 0000376C 7528                    	jne	short ps_no_size
 39144 0000376E 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 39145 00003774 7520                    	jne	short ps_no_size
 39146 00003776 268A4404                	mov	al,[es:si+4]
 39147 0000377A E80D10                  	call	delim
 39148                                  	;jne	short ps_no_size
 39149                                  	; 22/07/2023
 39150 0000377D 7518                    	jne	short ps_no_size_2 ; cf=0 here
 39151 0000377F 83C605                  	add	si,5
 39152 00003782 E81400                  	call	GetHexNum
 39153 00003785 7210                    	jc	short ps_err
 39154                                  	; 11/12/2022
 39155                                  	; ds = cs
 39156                                  	;mov	[cs:DevSizeOption],ax
 39157 00003787 A3[5224]                	mov	[DevSizeOption],ax
 39158                                  	
 39159                                  	; 09/09/2023
 39160 0000378A 58                      	pop	ax  ; * (discard previous si value on top of stack)
 39161                                  
 39162                                  ;	call	SkipDelim ; **
 39163                                  ;	
 39164                                  ;	; 22/07/2023
 39165                                  ;;ps_no_size_2:
 39166                                  ;	; cf = 0
 39167                                  ;	retn
 39168                                  
 39169                                  	; 09/09/2023
 39170                                  	;jmp	short SkipDelim
 39171                                  
 39172                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 39173                                  %if 1
 39174                                  	; 01/11/2022
 39175                                  SkipDelim:
 39176                                  sd_next_char:
 39177 0000378B 268A04                  	mov	al,[es:si]
 39178 0000378E E8F90F                  	call	delim
 39179 00003791 75C1                    	jnz	short sd_ret ; cf=0 ; 09/09/2023
 39180 00003793 46                      	inc	si
 39181 00003794 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 39182                                  	; 11/12/2022
 39183                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39184                                  ;sd_ret:
 39185                                  	;retn
 39186                                  %endif
 39187                                  
 39188                                  	;;;call	SkipDelim ; **
 39189                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39190                                  	;mov	bx,si
 39191                                  ps_no_size:
 39192                                  	;mov	si,bx
 39193                                  	;pop	bx
 39194 00003796 F8                      	clc	; cf=0
 39195                                  	;retn
 39196                                  	; 11/12/2022
 39197                                  ps_err:		; cf=1
 39198                                  ps_no_size_2:	; 09/09/2023 (cf=0)
 39199                                  	; 09/09/2023
 39200 00003797 5E                      	pop	si ; * ; mov si,bx
 39201                                  ;sd_ret:	; cf=?
 39202 00003798 C3                      	retn
 39203                                  
 39204                                  ;ps_err:
 39205                                  	; 02/11/2022
 39206                                  	;pop	bx
 39207                                  	;stc
 39208                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39209                                  	; 11/12/2022
 39210                                  	; cf=1
 39211                                  	;stc
 39212                                  	; 11/12/2022
 39213                                  ;sd_ret: 
 39214                                  	; 22/07/2023
 39215                                  	; 12/04/2019
 39216                                  	;retn
 39217                                  
 39218                                  ; 12/04/2019 - Retro DOS v4.0
 39219                                  
 39220                                  ;----------------------------------------------------------------------------
 39221                                  ;
 39222                                  ; procedure : SkipDelim
 39223                                  ;
 39224                                  ;	Skips delimiters in the string pointed to by ES:SI
 39225                                  ;	Returns ptr to first non-delimiter character in ES:SI
 39226                                  ;
 39227                                  ;----------------------------------------------------------------------------
 39228                                  
 39229                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 39230                                  %if 0
 39231                                  	; 01/11/2022
 39232                                  SkipDelim:
 39233                                  sd_next_char:
 39234                                  	mov	al,[es:si]
 39235                                  	call	delim
 39236                                  	jnz	short sd_ret
 39237                                  	inc	si
 39238                                  	jmp	short sd_next_char ; 01/11/2022
 39239                                  	; 11/12/2022
 39240                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39241                                  ;sd_ret:
 39242                                  	;retn
 39243                                  %endif
 39244                                  
 39245                                  ;----------------------------------------------------------------------------
 39246                                  ;
 39247                                  ; procedure : GetHexNum
 39248                                  ;
 39249                                  ;	Converts an ascii string terminated by a delimiter into binary.
 39250                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 39251                                  ;
 39252                                  ;	Returns in AX the number number of paras equivalent to the
 39253                                  ;	hex number of bytes specified by the hexadecimal string.
 39254                                  ;
 39255                                  ;	Returns carry in case it encountered a non-hex character or
 39256                                  ;	if it encountered crlf
 39257                                  ;
 39258                                  ;----------------------------------------------------------------------------
 39259                                  
 39260                                  ; 13/05/2019
 39261                                  
 39262                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 39263                                  	; (SYSINIT:38C5h)
 39264                                  
 39265                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39266                                  	; (SYSINIT:2DA5h)
 39267                                  GetHexNum:
 39268 00003799 31C0                    	xor	ax,ax
 39269 0000379B 31D2                    	xor	dx,dx
 39270                                  ghn_next:
 39271 0000379D 268A1C                  	mov	bl,[es:si]
 39272 000037A0 80FB0D                  	cmp	bl,cr  ; 0Dh
 39273 000037A3 7436                    	je	short ghn_err
 39274 000037A5 80FB0A                  	cmp	bl,lf  ; 0Ah
 39275 000037A8 7431                    	je	short ghn_err
 39276 000037AA 50                      	push	ax
 39277 000037AB 88D8                    	mov	al,bl
 39278 000037AD E8DA0F                  	call	delim
 39279 000037B0 58                      	pop	ax
 39280                                  	; 03/01/2023
 39281 000037B1 B90400                  	mov	cx,4
 39282 000037B4 7410                    	jz	short ghn_into_paras
 39283 000037B6 E82400                  	call	GetNibble
 39284                                  	;jc	short ghn_err
 39285                                  	; 11/12/2022
 39286 000037B9 7221                    	jc	short ghn_ret ; cf=1
 39287                                  	; 03/01/2023
 39288                                  	;mov	cx,4
 39289                                  ghn_shift1:
 39290 000037BB D1E0                    	shl	ax,1
 39291 000037BD D1D2                    	rcl	dx,1
 39292 000037BF E2FA                    	loop	ghn_shift1
 39293 000037C1 08D8                    	or	al,bl
 39294 000037C3 46                      	inc	si
 39295 000037C4 EBD7                    	jmp	short ghn_next
 39296                                  ghn_into_paras:
 39297 000037C6 83C00F                  	add	ax,15
 39298 000037C9 83D200                  	adc	dx,0
 39299 000037CC F7C2F0FF                	test	dx,0FFF0h
 39300 000037D0 7509                    	jnz	short ghn_err
 39301                                  	; 03/01/2023
 39302                                  	;mov	cx,4
 39303                                  ghn_shift2:
 39304 000037D2 F8                      	clc
 39305 000037D3 D1DA                    	rcr	dx,1
 39306 000037D5 D1D8                    	rcr	ax,1
 39307 000037D7 E2F9                    	loop	ghn_shift2
 39308 000037D9 F8                      	clc
 39309 000037DA C3                      	retn
 39310                                  	; 11/12/2022
 39311                                  ghn_err:
 39312                                  gnib_err:
 39313 000037DB F9                      	stc
 39314                                  ghn_ret:
 39315                                  gnib_ret:
 39316 000037DC C3                      	retn
 39317                                  
 39318                                  ;----------------------------------------------------------------------------
 39319                                  ;
 39320                                  ; procedure : GetNibble
 39321                                  ;
 39322                                  ;	Convert one nibble (hex digit) in BL into binary
 39323                                  ;
 39324                                  ;	Returns binary value in BL
 39325                                  ;
 39326                                  ;	Returns carry if BL contains non-hex digit
 39327                                  ;
 39328                                  ;----------------------------------------------------------------------------
 39329                                  
 39330                                  GetNibble:
 39331 000037DD 80FB30                  	cmp	bl,'0'
 39332                                  	;jb	short gnib_err
 39333                                  	; 11/12/2022
 39334 000037E0 72FA                    	jb	short gnib_ret ; cf=1
 39335 000037E2 80FB39                  	cmp	bl,'9'
 39336 000037E5 7704                    	ja	short is_it_hex
 39337 000037E7 80EB30                  	sub	bl,'0'		; clc
 39338 000037EA C3                      	retn
 39339                                  is_it_hex:
 39340 000037EB 80FB41                  	cmp	bl,'A'
 39341                                  	;jb	short gnib_err
 39342                                  	; 11/12/2022
 39343 000037EE 72EC                    	jb	short gnib_ret ; cf=1
 39344 000037F0 80FB46                  	cmp	bl,'F'
 39345 000037F3 77E6                    	ja	short gnib_err ; 11/12/2022
 39346 000037F5 80EB37                  	sub	bl,'A'- 10	; clc
 39347 000037F8 C3                      	retn
 39348                                  
 39349                                  	; 11/12/2022
 39350                                  ;gnib_err:
 39351                                  ;	stc
 39352                                  ;gnib_ret:
 39353                                  ;	retn
 39354                                  
 39355                                  ;============================================================================
 39356                                  
 39357                                  ; 12/04/2019 - Retro DOS v4.0
 39358                                  
 39359                                  ; umb.inc (MSDOS 6.0, 1991)
 39360                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 39361                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 39362                                  
 39363                                  XMM_REQUEST_UMB	equ 10h
 39364                                  XMM_RELEASE_UMB	equ 11h
 39365                                  
 39366                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 39367                                  
 39368                                  ;---------------------------------------------------------------------------
 39369                                  ;
 39370                                  ; Procedure Name	: umb_insert
 39371                                  ;
 39372                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 39373                                  ;			: BX = seg address of UMB to be linked in
 39374                                  ;			: DX = size of UMB to be linked in paras
 39375                                  ;			; DS = data
 39376                                  ;
 39377                                  ; Outputs		: links the UMB into the arena chain
 39378                                  ;
 39379                                  ; Uses			: AX, CX, ES, DX, BX
 39380                                  ;
 39381                                  ;---------------------------------------------------------------------------
 39382                                  
 39383                                  umb_insert:
 39384 000037F9 1E                      	push	ds
 39385                                  
 39386                                  	; 31/12/2022
 39387                                  	; ds = cs
 39388                                  
 39389                                  	;mov	ds,[cs:DevDOSData]
 39390 000037FA 8E1E[6024]              	mov	ds,[DevDOSData] ; 31/12/2022 
 39391                                  	;mov	ds,[8Ch]
 39392 000037FE 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 39393 00003802 8CD8                    	mov	ax,ds
 39394 00003804 8EC0                    	mov	es,ax
 39395                                  ui_next:
 39396 00003806 39D8                    	cmp	ax,bx			; Q: is current block above
 39397                                  					;    new block
 39398 00003808 770F                    	ja	short ui_insert		; Y: insert it
 39399                                  					; Q: is current block the
 39400                                  					;    last
 39401 0000380A 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39402 00003810 745C                    	je	short ui_append		; Y: append new block to chain
 39403                                  					; N: get next block
 39404 00003812 8ED8                    	mov	ds,ax			; M005
 39405                                  	;call	get_next		; ax = es = next block
 39406 00003814 E83B01                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 39407 00003817 EBED                    	jmp	short ui_next
 39408                                  
 39409                                  ui_insert:
 39410 00003819 8CD9                    	mov	cx,ds			; ds = previous arena
 39411 0000381B 41                      	inc	cx			; top of previous block
 39412                                  
 39413 0000381C 29D9                    	sub	cx,bx
 39414 0000381E F7D9                    	neg	cx			; cx = size of used block
 39415                                  	;mov	byte [0],'M'
 39416 00003820 C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 39417                                  	;mov	word [1],8
 39418 00003825 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 39419                                  	;mov	[3],cx
 39420 0000382B 890E0300                	mov	[ARENA.SIZE],cx	
 39421                                  	;mov	word [8],4353h ; 'SC'
 39422 0000382F C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 39423                                  
 39424                                  ; prepare the arena at start of new block
 39425                                  
 39426 00003835 8EC3                    	mov	es,bx
 39427 00003837 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 39428 0000383D 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 39429                                  					; mark as free
 39430 00003844 83EA02                  	sub	dx,2			; make room for arena at
 39431                                  					; start & end of new block
 39432 00003847 2689160300              	mov	[es:ARENA.SIZE],dx
 39433                                  
 39434                                  ; prepare arena at end of new block
 39435                                  	
 39436 0000384C 01D3                    	add	bx,dx
 39437 0000384E 43                      	inc	bx
 39438 0000384F 8EC3                    	mov	es,bx			; es=arena at top of new block
 39439 00003851 43                      	inc	bx			; bx=top of new block
 39440                                  
 39441                                  					; ax contains arena just above
 39442                                  					; this block
 39443 00003852 29D8                    	sub	ax,bx			; ax = size of used block
 39444                                  	
 39445 00003854 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 39446 0000385A 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 39447 00003861 26A30300                	mov	[es:ARENA.SIZE],ax	
 39448 00003865 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 39449                                  
 39450 0000386C EB47                    	jmp	short ui_done
 39451                                  
 39452                                  ui_append:
 39453                                  					; es = arena of last block	
 39454 0000386E 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 39455 00003873 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 39456                                  					; going to rsrv on top of this 
 39457                                  					; block for the next arena.
 39458                                  	; 13/05/2019
 39459 00003879 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 39460                                  
 39461 0000387F 89C1                    	mov	cx,ax			; cx=top of prev block-1
 39462 00003881 40                      	inc	ax
 39463 00003882 29D8                    	sub	ax,bx			; ax=top of prev block - 
 39464                                  					;    seg. address of new block
 39465 00003884 F7D8                    	neg	ax
 39466                                  
 39467 00003886 8EC1                    	mov	es,cx			; ds = arena of unused block
 39468                                  
 39469 00003888 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 39470 0000388E 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 39471 00003895 26A30300                	mov	[es:ARENA.SIZE],ax	
 39472 00003899 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 39473                                  
 39474                                  ; prepare the arena at start of new block
 39475 000038A0 8EC3                    	mov	es,bx
 39476 000038A2 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 39477 000038A8 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 39478                                  					; mark as free
 39479 000038AF 4A                      	dec	dx			; make room for arena
 39480 000038B0 2689160300              	mov	[es:ARENA.SIZE],dx	
 39481                                  ui_done:
 39482                                  uc_done: ; 31/12/2022 ; *!
 39483 000038B5 1F                      	pop	ds
 39484                                  	; ds = cs ; 31/12/2022
 39485                                  ;uc_done:	; 18/12/2022
 39486                                  au_exit:	; 09/09/2023
 39487 000038B6 C3                      	retn
 39488                                  
 39489                                  ;----------------------------------------------------------------------------
 39490                                  ;
 39491                                  ; procedure : AllocUMB
 39492                                  ;
 39493                                  ;	Allocate all UMBs and link it to DOS arena chain
 39494                                  ;
 39495                                  ;----------------------------------------------------------------------------
 39496                                  
 39497                                  AllocUMB:
 39498                                  	; 31/12/2022
 39499                                  	; ds = cs
 39500 000038B7 E84700                  	call	InitAllocUMB		; link in the first UMB
 39501 000038BA 72FA                    	jc	short au_exit		; quit on error
 39502                                  au_next:
 39503 000038BC E87000                  	call	umb_allocate		; allocate
 39504 000038BF 7205                    	jc	short au_coalesce
 39505 000038C1 E835FF                  	call	umb_insert		; & insert till no UMBs
 39506 000038C4 EBF6                    	jmp	short au_next
 39507                                  au_coalesce:
 39508                                  	; 09/09/2023
 39509                                  ;	call	umb_coalesce		; coalesce all UMBs
 39510                                  ;au_exit:
 39511                                  ;	; 31/12/2022
 39512                                  ;	; ds = cs
 39513                                  ;	retn
 39514                                  
 39515                                  	; 09/09/2023
 39516                                  	;jmp	short umb_coalesce
 39517                                  
 39518                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 39519                                  
 39520                                  ; 13/04/2019 - Retro DOS v4.0
 39521                                  
 39522                                  ;----------------------------------------------------------------------------
 39523                                  ;
 39524                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 39525                                  ;
 39526                                  ;	Coalesce adds the block following the argument to the argument block,
 39527                                  ;	if it's free. Coalesce is usually used to join free blocks, but
 39528                                  ;	some callers (such as $setblock) use it to join a free block to it's
 39529                                  ;	preceeding allocated block.
 39530                                  ;
 39531                                  ;	EXIT	'C' clear if OK
 39532                                  ;		  (ds) unchanged, this block updated
 39533                                  ;		  (ax) = address of next block, IF not at end
 39534                                  ;		'C' set if arena trashed
 39535                                  ;	USES	cx, di, ds, es
 39536                                  ;
 39537                                  ;----------------------------------------------------------------------------
 39538                                  
 39539                                  umb_coalesce:
 39540                                  	; 31/12/2022
 39541                                  	; ds = cs
 39542 000038C6 1E                      	push	ds ; *!
 39543                                  
 39544 000038C7 31FF                    	xor	di, di
 39545                                  
 39546                                  	;mov	es,[cs:DevDOSData]
 39547                                  	; 31/12/2022
 39548 000038C9 8E06[6024]              	mov	es,[DevDOSData]
 39549 000038CD 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 39550                                  uc_nextfree:
 39551 000038D2 8CC0                    	mov	ax,es
 39552 000038D4 8ED8                    	mov	ds,ax
 39553                                  	;cmp	[es:1],di
 39554 000038D6 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 39555 000038DB 7407                    	je	short uc_again		; Y: try to coalesce with next block
 39556                                  					; N: get next arena
 39557 000038DD E86B00                  	call	get_next		; es, ax = next arena
 39558 000038E0 72D3                    	jc	short uc_done	; *!
 39559 000038E2 EBEE                    	jmp	short uc_nextfree
 39560                                  uc_again:
 39561 000038E4 E86400                  	call	get_next		; es, ax = next arena
 39562 000038E7 72CC                    	jc	short uc_done	; *!
 39563                                  uc_check:
 39564 000038E9 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 39565 000038EE 75E2                    	jne	short uc_nextfree	; N: get next free arena
 39566                                  					; Y: coalesce
 39567 000038F0 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 39568 000038F5 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 39569                                  	;add	[3],cx
 39570 000038F6 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 39571 000038FA 268A0D                  	mov     cl,[es:di]              ; move up signature
 39572 000038FD 880D                    	mov     [di],cl
 39573 000038FF EBE3                    	jmp     short uc_again		; try again
 39574                                  
 39575                                  	; 18/12/2022
 39576                                  ;uc_done:
 39577                                  	;retn
 39578                                  
 39579                                  ;----------------------------------------------------------------------------
 39580                                  ;
 39581                                  ; procedure : InitAllocUMB
 39582                                  ;
 39583                                  ;----------------------------------------------------------------------------
 39584                                  
 39585                                  InitAllocUMB:
 39586                                  	; 31/12/2022
 39587                                  	; ds = cs
 39588 00003901 E8D6D2                  	call	IsXMSLoaded
 39589 00003904 7527                    	jnz	short iau_err		; quit on no XMS driver
 39590 00003906 B452                    	mov	ah,52h
 39591 00003908 CD21                    	int	21h			; get DOS DATA seg
 39592                                  	; 31/12/2022
 39593                                  	; ds = cs
 39594                                  	;mov	[cs:DevDOSData],es	; & save it for later
 39595 0000390A 8C06[6024]              	mov	[DevDOSData],es		; & save it for later
 39596 0000390E B81043                  	mov	ax,4310h
 39597 00003911 CD2F                    	int	2Fh
 39598                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 39599                                  	;mov	[cs:DevXMSAddr+2],es
 39600 00003913 891E[4924]              	mov	[DevXMSAddr],bx		; get XMS driver address
 39601 00003917 8C06[4B24]              	mov	[DevXMSAddr+2],es	
 39602                                  	; 31/12/2022
 39603 0000391B 803E[5F24]00            	cmp	byte [FirstUMBLinked],0 
 39604                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 39605                                  	;jne	short ia_1		; quit if we already did it
 39606                                  	; 12/12/2022
 39607 00003920 770A                    	ja	short ia_1 ; cf=0
 39608 00003922 E83900                  	call	LinkFirstUMB		; else link the first UMB
 39609                                  	;jc	short iau_err
 39610                                  	; 12/12/2022
 39611 00003925 7207                    	jc	short iau_err2  ; cf=1
 39612                                  	; 31/12/2022
 39613                                  	; ds = cs
 39614 00003927 C606[5F24]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 39615                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 39616                                  ia_1:
 39617                                  	; 12/12/2022
 39618                                  	; cf=0
 39619                                  	;clc
 39620 0000392C C3                      	retn
 39621                                  iau_err:
 39622 0000392D F9                      	stc
 39623                                  iau_err2:
 39624 0000392E C3                      	retn
 39625                                  
 39626                                  ;-------------------------------------------------------------------------
 39627                                  ;
 39628                                  ; Procedure Name	: umb_allocate
 39629                                  ;
 39630                                  ; Inputs		: DS = data
 39631                                  ;
 39632                                  ; Outputs		: if UMB available
 39633                                  ;				Allocates the largest available UMB and 
 39634                                  ;			  	BX = segment of allocated block
 39635                                  ;				DX = size of allocated block
 39636                                  ;				NC
 39637                                  ;			  else 
 39638                                  ;				CY
 39639                                  ;
 39640                                  ; Uses			: BX, DX
 39641                                  ;
 39642                                  ;-------------------------------------------------------------------------
 39643                                  
 39644                                  umb_allocate:
 39645                                  	; 31/12/2022
 39646                                  	; ds = cs
 39647 0000392F 50                      	push	ax
 39648 00003930 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 39649 00003932 BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 39650                                  					;   possible
 39651                                  	; 31/12/2022
 39652 00003935 FF1E[4924]              	call	far [DevXMSAddr]
 39653                                  	;call	far [cs:DevXMSAddr]
 39654                                  					; dx now contains the size of
 39655                                  					; the largest UMB
 39656 00003939 09D2                    	or	dx,dx
 39657 0000393B 740B                    	jz	short ua_err
 39658                                  	
 39659 0000393D B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 39660                                  
 39661                                  	; 31/12/2022
 39662 0000393F FF1E[4924]              	call	far [DevXMSAddr]
 39663                                  	;call	far [cs:DevXMSAddr]
 39664                                  
 39665 00003943 83F801                  	cmp	ax,1			; Q: was the reqst successful
 39666                                  	;jne	short ua_err		; N: error
 39667                                  	; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 39668 00003946 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 39669                                  ua_err:
 39670 00003948 F9                      	stc	
 39671                                  
 39672                                  	;clc
 39673                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39674                                  	; 12/12/2022
 39675                                  	; cf=0
 39676                                  	;clc 
 39677                                  ua_done:
 39678 00003949 58                      	pop	ax
 39679 0000394A C3                      	retn
 39680                                  	; 27/07/2023
 39681                                  ;ua_err:
 39682                                  	;stc
 39683                                  	;jmp	short ua_done
 39684                                  
 39685                                  ;----------------------------------------------------------------------------
 39686                                  ;
 39687                                  ;**	get_next - Find Next item in Arena
 39688                                  ;
 39689                                  ;	ENTRY	dS - pointer to block head
 39690                                  ;	EXIT	AX,ES - pointers to next head
 39691                                  ;		'C' set if arena damaged
 39692                                  ;
 39693                                  ;----------------------------------------------------------------------------
 39694                                  
 39695                                  	; 01/11/2022
 39696                                  get_next:
 39697 0000394B 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 39698 00003950 740A                    	je	short gn_err
 39699                                  _get_next_:
 39700 00003952 8CD8                    	mov     ax,ds                   ; ax=current block
 39701 00003954 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 39702 00003958 40                      	inc     ax                      ; remember that header!
 39703 00003959 8EC0                    	mov	es,ax
 39704                                  	;clc
 39705                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39706                                  	; 11/12/2022
 39707                                  	; cf=0
 39708                                  	;clc
 39709 0000395B C3                      	retn
 39710                                  gn_err:
 39711 0000395C F9                      	stc
 39712                                  	; 11/12/2022	
 39713                                  lfu_err:	 ; cf=1
 39714 0000395D C3                      	retn
 39715                                  
 39716                                  ;----------------------------------------------------------------------------
 39717                                  ;
 39718                                  ; procedure : LinkFirstUMB
 39719                                  ;
 39720                                  ;----------------------------------------------------------------------------
 39721                                  
 39722                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39723                                  	; (SYSINIT:2F81h)
 39724                                  LinkFirstUMB:
 39725                                  	; 31/12/2022
 39726                                  	; ds = cs
 39727 0000395E E8CEFF                  	call	umb_allocate
 39728 00003961 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 39729                                  
 39730                                  ; bx = segment of allocated UMB
 39731                                  ; dx = size of UMB
 39732                                  
 39733                                  	; 31/12/2022
 39734                                  	; ds = cs
 39735                                  
 39736 00003963 CD12                    	int	12h			; ax = size of memory
 39737 00003965 B106                    	mov	cl,6
 39738 00003967 D3E0                    	shl	ax,cl			; ax = size in paragraphs
 39739                                  
 39740 00003969 89C1                    	mov	cx,ax			; cx = size in paras
 39741 0000396B 29D8                    	sub	ax,bx			; ax = - size of unused block
 39742                                  
 39743 0000396D F7D8                    	neg	ax
 39744                                  
 39745                                  	;sub	cx,1			; cx = first umb_arena
 39746                                  	; 09/09/2023
 39747 0000396F 49                      	dec	cx
 39748 00003970 8EC1                    	mov	es,cx			; es = first umb_arena
 39749                                  	
 39750 00003972 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 39751 00003978 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 39752                                  					
 39753 0000397F 26A30300                	mov	[es:ARENA.SIZE],ax	
 39754 00003983 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 39755                                  
 39756                                  ; put in the arena for the first UMB
 39757                                  
 39758 0000398A 8EC3                    	mov	es,bx			; es has first free umb seg
 39759 0000398C 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39760 00003992 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 39761                                  					; mark as free 
 39762 00003999 4A                      	dec	dx			; make room for arena
 39763 0000399A 2689160300              	mov	[es:ARENA.SIZE],dx	
 39764                                  
 39765                                  	;mov	es,[cs:DevDOSData]
 39766                                  	; 31/12/2022
 39767 0000399F 8E06[6024]              	mov	es,[DevDOSData] ; ds = cs
 39768 000039A3 BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 39769 000039A6 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 39770                                  					;  data segment with the arena
 39771                                  					;  just below Top of Mem
 39772                                  
 39773                                  ; we must now scan the arena chain and update the size of the last arena
 39774                                  
 39775 000039A9 BF2400                  	mov	di,DOS_ARENA ; 24h
 39776 000039AC 268E05                  	mov	es,[es:di]		; es = start arena
 39777 000039AF 31FF                    	xor	di,di
 39778                                  ;scan_next
 39779                                  ; 09/12/2022
 39780                                  scannext:
 39781 000039B1 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 39782 000039B5 740C                    	je	short got_last
 39783                                  	
 39784 000039B7 8CC0                    	mov	ax,es
 39785 000039B9 2603060300              	add	ax,[es:ARENA.SIZE]
 39786 000039BE 40                      	inc	ax
 39787 000039BF 8EC0                    	mov	es,ax
 39788                                  	;jmp	short scan_next
 39789                                  	; 09/12/2022
 39790 000039C1 EBEE                    	jmp	short scannext
 39791                                  got_last:
 39792                                  	;sub	word [es:ARENA.SIZE],1
 39793                                  	; 09/09/2023
 39794 000039C3 26FF0E0300              	dec	word [es:ARENA.SIZE]
 39795                                  
 39796 000039C8 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 39797                                  	;clc
 39798                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39799                                  	; 11/12/2022
 39800                                  	; cf=0
 39801                                  	;clc
 39802 000039CE C3                      	retn
 39803                                  
 39804                                  ; 11/12/2022
 39805                                  ;;lfu_err:
 39806                                  ;	;stc
 39807                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39808                                  ;	; 11/12/2022
 39809                                  ;	; cf=1
 39810                                  ;	;stc
 39811                                  ;	retn
 39812                                  
 39813                                  ;----------------------------------------------------------------------------
 39814                                  ;
 39815                                  ; procedure : ShrinkUMB
 39816                                  ;
 39817                                  ;	Shrinks the current UMB in use, so that the unused portions
 39818                                  ;	of the UMB is given back to the DOS free mem pool
 39819                                  ;
 39820                                  ;----------------------------------------------------------------------------
 39821                                  
 39822                                  ShrinkUMB:
 39823                                  	; 12/12/2022
 39824                                  	; ds = cs
 39825 000039CF 833E[4324]00            	cmp	word [DevUMBAddr],0
 39826                                  	;cmp	word [cs:DevUMBAddr],0
 39827 000039D4 741F                    	je	short su_exit
 39828 000039D6 06                      	push	es
 39829                                  	; 01/01/2023
 39830                                  	;push	bx
 39831                                  	; 12/12/2022
 39832                                  	;mov	bx,[cs:DevUMBFree]
 39833                                  	;sub	bx,[cs:DevUMBAddr]
 39834                                  	;mov	es,[cs:DevUMBAddr]
 39835 000039D7 8B1E[4724]              	mov	bx,[DevUMBFree]
 39836 000039DB 2B1E[4324]              	sub	bx,[DevUMBAddr]
 39837 000039DF 8E06[4324]              	mov	es,[DevUMBAddr]
 39838                                  	
 39839 000039E3 B8004A                  	mov	ax,4A00h
 39840 000039E6 CD21                    	int	21h
 39841                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 39842                                  		; ES = segment address of block to change
 39843                                  		; BX = new size in paragraphs
 39844 000039E8 8CC0                    	mov	ax,es
 39845 000039EA 48                      	dec	ax
 39846 000039EB 8EC0                    	mov	es,ax
 39847 000039ED 26C70601000800          	mov	word [es:ARENA.OWNER],8
 39848                                  	; 01/01/2023
 39849                                  	;pop	bx
 39850 000039F4 07                      	pop	es
 39851                                  su_exit:
 39852 000039F5 C3                      	retn
 39853                                  
 39854                                  ;----------------------------------------------------------------------------
 39855                                  ;
 39856                                  ; procedure : UnlinkUMB
 39857                                  ;
 39858                                  ;	Unlinks the UMBs from the DOS arena chain
 39859                                  ;
 39860                                  ;----------------------------------------------------------------------------
 39861                                  
 39862                                  UnlinkUMB:
 39863                                  	; 12/12/2022
 39864                                  	; ds = cs
 39865 000039F6 1E                      	push	ds
 39866 000039F7 06                      	push	es
 39867                                  	; 12/12/2022
 39868 000039F8 803E[5F24]00            	cmp	byte [FirstUMBLinked],0
 39869                                  	;cmp	byte [cs:FirstUMBLinked],0
 39870 000039FD 7420                    	je	short ulu_x		; nothing to unlink
 39871                                  	; 12/12/2022
 39872 000039FF 8E06[6024]              	mov	es,[DevDOSData]
 39873                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 39874 00003A03 268E1E2400              	mov	ds,[es:DOS_ARENA]
 39875 00003A08 268B3E8C00              	mov	di,[es:UMB_ARENA]
 39876                                  ulu_next:
 39877 00003A0D E83BFF                  	call	get_next
 39878 00003A10 720D                    	jc	short ulu_x
 39879 00003A12 39C7                    	cmp	di,ax			; is the next one UMB ?
 39880 00003A14 7404                    	je	short ulu_found
 39881 00003A16 8ED8                    	mov	ds,ax
 39882 00003A18 EBF3                    	jmp	short ulu_next
 39883                                  ulu_found:
 39884                                  	;mov	byte [0],'Z'
 39885 00003A1A C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39886                                  ulu_x:
 39887 00003A1F 07                      	pop	es
 39888 00003A20 1F                      	pop	ds
 39889 00003A21 C3                      	retn
 39890                                  
 39891                                  ; ----------------------------------------------------------------------
 39892                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 39893                                  ; ----------------------------------------------------------------------
 39894                                  ; 14/04/2019 - Retro DOS v4.0
 39895                                  
 39896                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 39897                                  ;
 39898                                  ; Summary:
 39899                                  ;
 39900                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 39901                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 39902                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 39903                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 39904                                  ;   and/or config.inc for the full list.
 39905                                  ;
 39906                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 39907                                  ;   configuration support. blockname is either MENU, which contains one
 39908                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 39909                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 39910                                  ;   INCLUDE allows the current block to name another block for inclusion
 39911                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 39912                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 39913                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 39914                                  ;
 39915                                  ; Example:
 39916                                  ;
 39917                                  ;   [menu]
 39918                                  ;   menuitem=misc,Miscellaneous
 39919                                  ;   menuitem=network,Network Configuration
 39920                                  ;   menudefault=network,15
 39921                                  ;
 39922                                  ;   [network]
 39923                                  ;   include misc
 39924                                  ;   device=foo
 39925                                  ;
 39926                                  ;   [misc]
 39927                                  ;   device=bar
 39928                                  ;   include alternate
 39929                                  ;
 39930                                  ;   [alternate]
 39931                                  ;   device=tar
 39932                                  ;
 39933                                  ;
 39934                                  ;   When the menu is displayed
 39935                                  ;
 39936                                  ;    1. Miscellaneous
 39937                                  ;    2. Network Configuration
 39938                                  ;
 39939                                  ;   #2 is highlighted as the default option, and will be automatically
 39940                                  ;   selected after 15 seconds. It will invoke the following lines in the
 39941                                  ;   following order:
 39942                                  ;
 39943                                  ;       DEVICE=BAR
 39944                                  ;       DEVICE=TAR
 39945                                  ;       DEVICE=FOO
 39946                                  ;
 39947                                  
 39948                                  ;MULTI_CONFIG equ 1
 39949                                  
 39950                                  ; the following depend on the positions of the various letters in switchlist
 39951                                  
 39952                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 39953                                  
 39954                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 39955                                  flagdrive	equ 00001000b ; 8 
 39956                                  flagcyln	equ 00010000b ; 16
 39957                                  flagseclim	equ 00100000b ; 32
 39958                                  flagheads	equ 01000000b ; 64
 39959                                  flagff		equ 10000000b ; 128
 39960                                  
 39961                                  ;----------------------------------------------------------------------------
 39962                                  ; 19/04/2019 - Retro DOS v4.0
 39963                                  
 39964                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 39965                                  
 39966                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39967                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 39968                                  
 39969 00003A22 00                      insert_blank:	db 	0
 39970                                  
 39971                                  ;----------------------------------------------------------------------------
 39972                                  ;
 39973                                  ; procedure : setparms
 39974                                  ;
 39975                                  ; the following set of routines is used to parse the drivparm = command in
 39976                                  ; the config.sys file to change the default drive parameters.
 39977                                  ;
 39978                                  ;----------------------------------------------------------------------------
 39979                                  
 39980                                  setparms:
 39981 00003A23 1E                      	push	ds
 39982 00003A24 50                      	push	ax
 39983 00003A25 53                      	push	bx
 39984 00003A26 51                      	push	cx
 39985 00003A27 52                      	push	dx
 39986                                  
 39987 00003A28 0E                      	push	cs
 39988 00003A29 1F                      	pop	ds
 39989                                  
 39990 00003A2A 31DB                    	xor	bx,bx
 39991 00003A2C 8A1E[1D4F]              	mov	bl,[drive]
 39992                                  	; 18/12/2022
 39993 00003A30 43                      	inc	bx
 39994                                  	;inc	bl			; get it correct for ioctl call
 39995                                  					; (1=a,2=b...)
 39996 00003A31 BA[BF4D]                	mov	dx,deviceparameters
 39997                                  	;mov	ah,IOCTL ; 44h
 39998                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 39999                                  	; 04/07/2023
 40000 00003A34 B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 40001                                  	;mov	ch,RAWIO ; 8
 40002                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 40003                                  	; 04/07/2023
 40004 00003A37 B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 40005 00003A3A CD21                    	int	21h
 40006                                  
 40007                                  ; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 40008 00003A3C 8A26[1E4F]              	mov	ah,[switches]
 40009                                  	;mov	al,[deviceparameters+20]
 40010 00003A40 A0[D34D]                	mov	al,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 40011 00003A43 8A0E[1D4F]              	mov	cl,[drive]
 40012                                  ;
 40013                                  ;; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40014                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 40015                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 40016                                  ;	; 21/10/2022
 40017                                  ;	;mov	ax,DOSBIODATASEG ; 0070h	
 40018                                  ;	;mov	ds,ax			; set Bios_Data segment
 40019                                  ;
 40020                                  ;	; 27/07/2023
 40021                                  ;	;;test	word [cs:switches],flagec35 ; 4
 40022                                  ;	;test	byte [cs:switches],flagec35
 40023                                  ;	;jz	short not_ec35
 40024                                  ;
 40025                                  ;	; 27/07/2023
 40026                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40027                                  ;	;;test	word [switches],flagec35 ; 4
 40028                                  ;	; 12/12/2022
 40029                                  ;	;test	byte [switches],flagec35 ; 4
 40030                                  ;	;jz	short eot_ok
 40031                                  ;	
 40032                                  	;mov	cl,[cs:drive]		; which drive was this for?
 40033                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40034                                  	;mov	cl,[drive]
 40035                                  	; 27/07/2023
 40036                                  	;mov	ax,DOSBIODATASEG ; 0070h	
 40037                                  	;mov	ds,ax
 40038                                  
 40039 00003A47 BA7000                  	mov	dx,DOSBIODATASEG
 40040 00003A4A 8EDA                    	mov	ds,dx
 40041                                  
 40042 00003A4C F6C404                  	test	ah,flagec35	; test byte [cs:switches],flagec35
 40043 00003A4F 7408                    	jz	short not_ec35
 40044                                  
 40045                                  	;mov	al,1			; assume drive 0
 40046                                  	;shl	al,cl			; set proper bit depending on drive
 40047                                  	;;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 40048                                  	;or	[ec35_flag],al		; set the bit in the permanent flags
 40049                                  	; 27/07/2023
 40050 00003A51 B401                    	mov	ah,1
 40051 00003A53 D2E4                    	shl	ah,cl
 40052 00003A55 0826[A204]              	or	[ec35_flag],ah
 40053                                  
 40054                                  ; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 40055                                  ;	MSDOS 6.21 IO.SYS - SYINIT:3EB0h	
 40056                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40057                                  not_ec35:
 40058                                  ;	Now adjust the BIOS's EOT variable if our new drive has more
 40059                                  ;	sectors per track than any old ones.
 40060                                  
 40061                                  	; 27/07/2023
 40062                                  	;;mov	al,[cs:deviceparameters+20]
 40063                                  	;mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 40064                                  	
 40065                                  	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 40066 00003A59 3A06[2C01]              	cmp	al,[eot]
 40067 00003A5D 7603                    	jbe	short eot_ok
 40068 00003A5F A2[2C01]                	mov	[eot],al
 40069                                  eot_ok:
 40070 00003A62 5A                      	pop	dx			; fix up all the registers
 40071 00003A63 59                      	pop	cx
 40072 00003A64 5B                      	pop	bx
 40073 00003A65 58                      	pop	ax
 40074 00003A66 1F                      	pop	ds ; 13/05/2019
 40075 00003A67 C3                      	retn
 40076                                  
 40077                                  ;----------------------------------------------------------------------------
 40078                                  ;
 40079                                  ; procedure : diddleback
 40080                                  ;
 40081                                  ; replace default values for further drivparm commands
 40082                                  ;
 40083                                  ;----------------------------------------------------------------------------
 40084                                  
 40085                                  diddleback:
 40086 00003A68 1E                      	push	ds
 40087 00003A69 0E                      	push	cs
 40088 00003A6A 1F                      	pop	ds
 40089                                  	;mov	word [deviceparameters+4],80
 40090 00003A6B C706[C34D]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 40091                                  	;mov	byte [deviceparameters+1],2
 40092 00003A71 C606[C04D]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 40093                                  	;mov	word [deviceparameters+2],0
 40094 00003A76 C706[C14D]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 40095 00003A7C C706[1E4F]0000          	mov	word [switches],0	    ; zero all switches
 40096 00003A82 1F                      	pop	ds
 40097 00003A83 C3                      	retn
 40098                                  
 40099                                  ; 03/01/2023
 40100                                  %if 0
 40101                                  
 40102                                  ; 15/04/2019 - Retro DOS v4.0
 40103                                  
 40104                                  ;----------------------------------------------------------------------------
 40105                                  ;
 40106                                  ; procedure : parseline
 40107                                  ;
 40108                                  ; entry point is parseline. al contains the first character in command line.
 40109                                  ;
 40110                                  ;----------------------------------------------------------------------------
 40111                                  
 40112                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40113                                  	; (SYSINIT:3EDFh)
 40114                                  
 40115                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 40116                                  	; (SYSINIT:30ACh)
 40117                                  parseline:
 40118                                  	; 03/01/2023
 40119                                  	; ds = cs ; *
 40120                                  
 40121                                  	;push	ds ; *
 40122                                  
 40123                                  	;push	cs ; *
 40124                                  	;pop	ds ; *
 40125                                  
 40126                                  nextswtch:
 40127                                  	cmp	al,cr			; carriage return?
 40128                                  	je	short done_line
 40129                                  	cmp	al,lf			; linefeed?
 40130                                  	je	short put_back		; put it back and done
 40131                                  
 40132                                  ; anything less or equal to a space is ignored.
 40133                                  
 40134                                  	cmp	al,' '                  ; space?
 40135                                  	jbe	short getnext		; skip over space
 40136                                  	cmp	al,'/'
 40137                                  	je	short getparm
 40138                                  	stc				; mark error invalid-character-in-input
 40139                                  	;jmp	short exitpl
 40140                                  	; 03/01/2023
 40141                                  swterr:
 40142                                  	retn
 40143                                  
 40144                                  getparm:
 40145                                  	call	check_switch
 40146                                  	mov	[switches],bx		; save switches read so far
 40147                                  	jc	short swterr
 40148                                  getnext:
 40149                                  	call	getchr
 40150                                  	;jc	short done_line
 40151                                  	;jmp	short nextswtch
 40152                                  	; 03/01/2023
 40153                                  	jnc	short nextswtch
 40154                                  ;swterr:
 40155                                  	;jmp	short exitpl		; exit if error
 40156                                  
 40157                                  done_line:
 40158                                  	; 12/12/2022
 40159                                  	test	byte [switches],flagdrive ; 8
 40160                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 40161                                  	jnz	short okay
 40162                                  	stc				; mark error no-drive-specified
 40163                                  	;jmp	short exitpl
 40164                                  	; 03/01/2023
 40165                                  	retn
 40166                                  
 40167                                  okay:
 40168                                  	mov	ax,[switches]
 40169                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 40170                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 40171                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 40172                                  	;clc			    ; everything is fine
 40173                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40174                                  	; 12/12/2022
 40175                                  	; cf=0
 40176                                  	;clc
 40177                                  	;call	setdeviceparameters
 40178                                  	; 03/01/2023
 40179                                  	jmp	setdeviceparameters
 40180                                  ;exitpl:
 40181                                  	; 03/01/2023
 40182                                  	; ds = cs
 40183                                  	;pop	ds ; *
 40184                                  	retn
 40185                                  put_back:
 40186                                  	inc	word [count]		; one more char to scan
 40187                                  	dec	word [chrptr]		; back up over linefeed
 40188                                  	jmp	short done_line
 40189                                  
 40190                                  %endif
 40191                                  
 40192                                  ;----------------------------------------------------------------------------
 40193                                  ;
 40194                                  ; procedure : check_switch
 40195                                  ;
 40196                                  ; processes a switch in the input. it ensures that the switch is valid, and
 40197                                  ; gets the number, if any required, following the switch. the switch and the
 40198                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 40199                                  ; error.
 40200                                  ;
 40201                                  ;----------------------------------------------------------------------------
 40202                                  
 40203                                  ; 09/09/2023
 40204                                  
 40205                                  err_swtch:
 40206 00003A84 31CB                    	xor	bx,cx			; remove this switch from the records
 40207                                  err_check:
 40208 00003A86 F9                      	stc
 40209                                  err_chk:
 40210                                  done_swtch:	; 09/09/2023 (cf=0)
 40211 00003A87 C3                      	retn
 40212                                  
 40213                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 40214                                  
 40215                                  check_switch:
 40216 00003A88 E8240D                  	call	getchr
 40217                                  	;jc	short err_check
 40218 00003A8B 72FA                    	jc	short err_chk
 40219 00003A8D 24DF                            and     al,0DFh                 ; convert it to upper case
 40220 00003A8F 3C41                    	cmp	al,'A'
 40221                                  	;jb	short err_check
 40222 00003A91 72F4                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 40223 00003A93 3C5A                    	cmp	al,'Z'
 40224 00003A95 77EF                    	ja	short err_check
 40225                                  
 40226 00003A97 06                      	push	es
 40227                                  
 40228 00003A98 0E                      	push	cs
 40229 00003A99 07                      	pop	es
 40230                                  
 40231                                  	;mov	cl,[switchlist]		; get number of valid switches
 40232                                  	;mov	ch,0
 40233                                  	;mov	di,1+switchlist		; point to string of valid switches
 40234                                  	; 09/09/2023
 40235 00003A9A BF[4250]                	mov	di,switchlist
 40236 00003A9D 8A0D                    	mov	cl,[di]
 40237 00003A9F B500                    	mov	ch,0
 40238 00003AA1 47                      	inc	di	; 1+switchlist
 40239                                  
 40240 00003AA2 F2AE                    	repne	scasb
 40241                                  
 40242 00003AA4 07                      	pop	es
 40243 00003AA5 75DF                    	jnz	short err_check
 40244                                  
 40245 00003AA7 B80100                  	mov	ax,1
 40246 00003AAA D3E0                    	shl	ax,cl			; set bit to indicate switch
 40247 00003AAC 8B1E[1E4F]              	mov	bx,[switches]		; get switches so far
 40248 00003AB0 09C3                    	or	bx,ax			; save this with other switches
 40249 00003AB2 89C1                    	mov	cx,ax
 40250                                  	; 12/12/2022
 40251 00003AB4 A8F8                    	test	al,switchnum ; 0F8h
 40252                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 40253 00003AB6 74CF                    	jz	short done_swtch
 40254                                  
 40255 00003AB8 E8F40C                  	call	getchr
 40256 00003ABB 72C7                    	jc	short err_swtch
 40257                                  
 40258 00003ABD 3C3A                    	cmp	al,':'
 40259 00003ABF 75C3                    	jne	short err_swtch
 40260                                  
 40261 00003AC1 E8EB0C                  	call	getchr
 40262 00003AC4 53                      	push	bx			; preserve switches
 40263                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40264                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 40265                                  	; 12/12/2022
 40266                                  	; ds = cs
 40267 00003AC5 C606[AE02]20            	mov	byte [sepchr],' '
 40268 00003ACA E8980D                  	call	getnum
 40269                                  	;mov	byte [cs:sepchr],0
 40270                                  	; 12/12/2022
 40271 00003ACD C606[AE02]00            	mov	byte [sepchr],0
 40272 00003AD2 5B                      	pop	bx			; restore switches
 40273                                  
 40274                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 40275                                  ; not check for carry set here. if there is an error, it will be detected
 40276                                  ; further on (hopefully).
 40277                                  
 40278                                  	; 09/09/2023
 40279                                  	;call	process_num
 40280                                  	;jmp	short process_num
 40281                                  
 40282                                  ;done_swtch:
 40283                                  ;	;clc
 40284                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40285                                  ;	; 12/12/2022
 40286                                  ;	; cf=0
 40287                                  ;	;clc
 40288                                  ;	retn
 40289                                  
 40290                                  ;----------------------------------------------------------------------------
 40291                                  ;
 40292                                  ; procedure : process_num
 40293                                  ;
 40294                                  ; this routine takes the switch just input, and the number following (if any),
 40295                                  ; and sets the value in the appropriate variable. if the number input is zero
 40296                                  ; then it does nothing - it assumes the default value that is present in the
 40297                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 40298                                  ;
 40299                                  ;----------------------------------------------------------------------------
 40300                                  
 40301                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 40302                                  	; (SYSINIT:3156h)
 40303                                  process_num:
 40304 00003AD3 850E[1E4F]              	test	[switches],cx		; if this switch has been done before,
 40305 00003AD7 752B                    	jnz	short done_ret		; ignore this one.
 40306                                  	; 12/12/2022
 40307 00003AD9 F6C108                  	test	cl,flagdrive ; 8
 40308                                  	;test	cx,flagdrive ; 8
 40309 00003ADC 7404                    	jz	short try_f
 40310 00003ADE A2[1D4F]                	mov	byte [drive],al
 40311                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40312                                  	;jmp	short done_ret
 40313                                  	; 12/12/2022
 40314                                  	; cf=0
 40315 00003AE1 C3                      	retn	; 13/05/2019
 40316                                  try_f:
 40317                                  	; 12/12/2022
 40318 00003AE2 F6C180                  	test	cl,flagff ; 80h
 40319                                  	;test	cx,flagff ; 80h
 40320 00003AE5 7404                    	jz	short try_t
 40321                                  
 40322                                  ; ensure that we do not get bogus form factors that are not supported
 40323                                  
 40324                                  	;mov	[deviceparameters+1],al
 40325 00003AE7 A2[C04D]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 40326                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40327                                  	;jmp	short done_ret
 40328                                  	; 12/12/2022
 40329                                  	; cf=0
 40330 00003AEA C3                      	retn	; 13/05/2019
 40331                                  try_t:
 40332 00003AEB 09C0                    	or	ax,ax
 40333 00003AED 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 40334                                  	; 12/12/2022
 40335 00003AEF F6C110                  	test	cl,flagcyln ; 10h
 40336                                  	;test	cx,flagcyln ; 10h
 40337 00003AF2 7404                    	jz	short try_s
 40338                                  
 40339                                  	;mov	[deviceparameters+4],ax
 40340 00003AF4 A3[C34D]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 40341                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40342                                  	;jmp	short done_ret
 40343                                  	; 12/12/2022
 40344                                  	; cf=0
 40345 00003AF7 C3                      	retn	; 13/05/2019
 40346                                  try_s:
 40347                                  	; 12/12/2022
 40348 00003AF8 F6C120                  	test	cl,flagseclim ; 20h
 40349                                  	;test	cx,flagseclim ; 20h
 40350 00003AFB 7404                    	jz	short try_h
 40351 00003AFD A3[1B4F]                	mov	[slim],ax
 40352                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40353                                  	;jmp	short done_ret
 40354                                  	; 12/12/2022
 40355                                  	; cf=0
 40356 00003B00 C3                      	retn	; 13/05/2019
 40357                                  
 40358                                  ; must be for number of heads
 40359                                  
 40360                                  try_h:
 40361 00003B01 A3[194F]                	mov	[hlim],ax
 40362                                  done_ret:
 40363                                  	;clc
 40364                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40365                                  	; 12/12/2022
 40366                                  	; cf=0 (test instruction resets cf)
 40367                                  	;clc
 40368 00003B04 C3                      	retn
 40369                                  
 40370                                  
 40371                                  ; 16/04/2024 - Retro DOS v5.0
 40372                                  ; 03/01/2023 - Retro DOS v4.2
 40373                                  %if 1
 40374                                  
 40375                                  ; 15/04/2019 - Retro DOS v4.0
 40376                                  
 40377                                  ;----------------------------------------------------------------------------
 40378                                  ;
 40379                                  ; procedure : parseline
 40380                                  ;
 40381                                  ; entry point is parseline. al contains the first character in command line.
 40382                                  ;
 40383                                  ;----------------------------------------------------------------------------
 40384                                  
 40385                                  	; 16/04/2024 - Retrodos v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 40386                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4151h)
 40387                                  
 40388                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40389                                  	; (SYSINIT:3EDFh)
 40390                                  
 40391                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 40392                                  	; (SYSINIT:30ACh)
 40393                                  
 40394                                  parseline:
 40395                                  	; 03/01/2023
 40396                                  	; ds = cs ; *
 40397                                  
 40398                                  	;push	ds ; *
 40399                                  
 40400                                  	;push	cs ; *
 40401                                  	;pop	ds ; *
 40402                                  
 40403                                  nextswtch:
 40404 00003B05 3C0D                    	cmp	al,cr			; carriage return?
 40405 00003B07 741C                    	je	short done_line
 40406 00003B09 3C0A                    	cmp	al,lf			; linefeed?
 40407 00003B0B 7421                    	je	short put_back		; put it back and done
 40408                                  
 40409                                  ; anything less or equal to a space is ignored.
 40410                                  
 40411 00003B0D 3C20                    	cmp	al,' '                  ; space?
 40412 00003B0F 760F                    	jbe	short getnext		; skip over space
 40413 00003B11 3C2F                    	cmp	al,'/'
 40414 00003B13 7402                    	je	short getparm
 40415 00003B15 F9                      	stc				; mark error invalid-character-in-input
 40416                                  	;jmp	short exitpl
 40417                                  	; 03/01/2023
 40418                                  swterr:
 40419 00003B16 C3                      	retn
 40420                                  
 40421                                  getparm:
 40422 00003B17 E86EFF                  	call	check_switch
 40423 00003B1A 891E[1E4F]              	mov	[switches],bx		; save switches read so far
 40424 00003B1E 72F6                    	jc	short swterr
 40425                                  getnext:
 40426 00003B20 E88C0C                  	call	getchr
 40427                                  	;jc	short done_line
 40428                                  	;jmp	short nextswtch
 40429                                  	; 03/01/2023
 40430 00003B23 73E0                    	jnc	short nextswtch
 40431                                  ;swterr:
 40432                                  	;jmp	short exitpl		; exit if error
 40433                                  
 40434                                  done_line:
 40435                                  	; 12/12/2022
 40436 00003B25 F606[1E4F]08            	test	byte [switches],flagdrive ; 8
 40437                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 40438 00003B2A 750C                    	jnz	short okay
 40439 00003B2C F9                      	stc				; mark error no-drive-specified
 40440                                  	;jmp	short exitpl
 40441                                  	; 03/01/2023
 40442 00003B2D C3                      	retn
 40443                                  
 40444                                  ;exitpl:
 40445                                  	; 03/01/2023
 40446                                  	; ds = cs
 40447                                  	;;pop	ds ; *
 40448                                  	;retn
 40449                                  
 40450                                  put_back:
 40451 00003B2E FF06[5603]              	inc	word [count]		; one more char to scan
 40452 00003B32 FF0E[5A03]              	dec	word [chrptr]		; back up over linefeed
 40453 00003B36 EBED                    	jmp	short done_line
 40454                                  
 40455                                  okay:
 40456 00003B38 A1[1E4F]                	mov	ax,[switches]
 40457 00003B3B 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 40458 00003B3E A3[C14D]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 40459                                  	; 16/04/2024
 40460                                  	;mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 40461                                  	;;;
 40462 00003B41 C706[1B4E]0000          	mov	word [deviceparameters+92],0 ; PCDOS 7.1 IBMBIO.COM	
 40463                                  	;;;
 40464                                  	;clc			    ; everything is fine
 40465                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40466                                  	; 12/12/2022
 40467                                  	; cf=0
 40468                                  	;clc
 40469                                  	;call	setdeviceparameters
 40470                                  	; 03/01/2023
 40471                                  	;jmp	short setdeviceparameters
 40472                                  
 40473                                  %endif
 40474                                  
 40475                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 40476                                  
 40477                                  ;----------------------------------------------------------------------------
 40478                                  ;
 40479                                  ; procedure : setdeviceparameters
 40480                                  ;
 40481                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 40482                                  ; system based on the form factor. it is assumed that the bpbs for the
 40483                                  ; various form factors are present in the bpbtable. for hard files,
 40484                                  ; the recommended bpb is the same as the bpb on the drive.
 40485                                  ; no attempt is made to preserve registers since we are going to jump to
 40486                                  ; sysinit straight after this routine.
 40487                                  ;
 40488                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 40489                                  ;	  we always return no carry
 40490                                  ;
 40491                                  ;	note:  there is a routine by the same name in msdioctl.asm
 40492                                  ;
 40493                                  ;----------------------------------------------------------------------------
 40494                                  
 40495                                  ; 15/04/2019 - Retro DOS v4.0
 40496                                  
 40497                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 40498                                  
 40499                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 40500                                  	; (SYSINIT:3FC4h)
 40501                                  
 40502                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 40503                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4236h)
 40504                                  
 40505                                  setdeviceparameters:
 40506                                  	; 03/01/2023
 40507                                  	; ds = cs
 40508                                  
 40509 00003B47 06                      	push	es
 40510                                  
 40511 00003B48 0E                      	push	cs
 40512 00003B49 07                      	pop	es
 40513                                  
 40514 00003B4A 31DB                    	xor	bx,bx
 40515 00003B4C 8A1E[C04D]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 40516 00003B50 80FB00                  	cmp	bl,DEV_5INCH ; 0
 40517 00003B53 7506                    	jne	short got_80
 40518                                  
 40519 00003B55 C706[C34D]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 40520                                  							; 48 tpi=40 cyl
 40521                                  got_80:
 40522 00003B5B D1E3                    	shl	bx,1			; get index into bpb table
 40523 00003B5D 8BB7[2E50]              	mov	si,[bpbtable+bx]	; get address of bpb
 40524                                  
 40525                                  	;mov	di,deviceparameters+7	
 40526                                  	; 02/11/2022
 40527 00003B61 BF[C64D]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 40528 00003B64 B93B00                  	mov	cx,A_BPB.size ; 31
 40529                                  	; 09/09/2023
 40530                                  	;mov	cx,59 ; PCDOS 7.1 IBMBIO.COM A_BPB.size
 40531 00003B67 FC                      	cld
 40532                                  	;repe	movsb
 40533                                  	; 02/11/2022
 40534 00003B68 F3A4                    	rep	movsb
 40535                                  
 40536 00003B6A 07                      	pop	es
 40537                                  
 40538                                  	; 12/12/2022
 40539 00003B6B F606[1E4F]20            	test	byte [switches],flagseclim ; 20h
 40540                                  	;test	word [switches],flagseclim ; 20h
 40541 00003B70 7406                    	jz	short see_heads
 40542                                  
 40543 00003B72 A1[1B4F]                	mov	ax,[slim]
 40544                                  	;mov	[deviceparameters+20],ax
 40545 00003B75 A3[D34D]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],ax
 40546                                  
 40547                                  see_heads:
 40548                                  	; 12/12/2022
 40549 00003B78 F606[1E4F]40            	test	byte [switches],flagheads ; 40h
 40550                                  	;test	word [switches],flagheads ; 40h
 40551 00003B7D 7406                    	jz	short heads_not_altered
 40552                                  
 40553 00003B7F A1[194F]                	mov	ax,[hlim]
 40554                                  	;mov	[deviceparameters+22],ax	
 40555 00003B82 A3[D54D]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],ax
 40556                                  
 40557                                  heads_not_altered:
 40558                                  
 40559                                  ; set up correct media descriptor byte and sectors/cluster
 40560                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 40561                                  
 40562                                  	;mov	byte [deviceparameters+9],2
 40563                                  	; 02/11/2022
 40564                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],2
 40565                                  	; 03/01/2023
 40566 00003B85 B80200                  	mov	ax,2	
 40567 00003B88 A2[C84D]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],al ; 2
 40568                                  
 40569 00003B8B B3F0                    	mov	bl,0F0h			; get default mediabyte
 40570                                  
 40571                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 40572                                  
 40573                                  	;mov	bh,[deviceparameters+17]
 40574                                  	; 02/11/2022
 40575 00003B8D 8A3E[D04D]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR]
 40576                                  	
 40577                                  	; 03/01/2023
 40578                                  	; ax = 2
 40579 00003B91 3906[D54D]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],ax ; >2 heads?
 40580                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS],2 ; >2 heads?
 40581 00003B95 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 40582                                  
 40583 00003B97 7524                    	jne	short only_one_head	; one head, do one head stuff
 40584                                  
 40585                                  ;	two head drives will use the mediadescriptor from the bpb
 40586                                  
 40587 00003B99 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 40588                                  
 40589                                  ;	two sided drives have two special cases to look for. One is
 40590                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 40591                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 40592                                  ;	   one sector/cluster.
 40593                                  
 40594                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 40595                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 40596                                  ;	   type of 2 headed drive is all set.
 40597                                  
 40598 00003B9B 833E[D34D]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],18
 40599 00003BA0 7509                    	jne	short not_144m
 40600 00003BA2 833E[C34D]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 40601 00003BA7 7502                    	jne	short not_144m
 40602                                  
 40603                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 40604                                  
 40605 00003BA9 EB24                    	jmp	short got_one_secperclus_drive
 40606                                  
 40607                                  ;	check for 320K
 40608                                  
 40609                                  not_144m:
 40610 00003BAB 833E[C34D]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 40611 00003BB0 7521                    	jne	short got_correct_mediad
 40612 00003BB2 833E[D34D]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],8
 40613 00003BB7 751A                    	jne	short got_correct_mediad
 40614                                  
 40615 00003BB9 B3FC                    	mov	bl,0FCh
 40616 00003BBB EB16                    	jmp	short got_correct_mediad
 40617                                  
 40618                                  only_one_head:
 40619                                  
 40620                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 40621                                  
 40622 00003BBD 803E[C04D]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 40623 00003BC2 740B                    	je	short got_one_secperclus_drive
 40624                                  
 40625                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 40626                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 40627                                  ;	  besides 8 will be considered 0fch
 40628                                  
 40629 00003BC4 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 40630 00003BC6 833E[D34D]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK],8
 40631                                  	; 12/12/2022
 40632 00003BCB 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 40633                                  
 40634 00003BCD B3FE                    	mov	bl,0FEh			; 160K mediaid
 40635                                  
 40636                                  ;	we've either got a one sided drive, or a 1.44M drive
 40637                                  ;	  either case we'll use 1 sector per cluster instead of 2
 40638                                  
 40639                                  got_one_secperclus_drive:
 40640                                  	; 03/01/2023
 40641                                  	; ax = 2
 40642 00003BCF 48                      	dec	ax  ; ax = 1
 40643 00003BD0 A2[C84D]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],al ; 1
 40644                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER],1
 40645                                  
 40646                                  got_correct_mediad:
 40647 00003BD3 881E[D04D]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR],bl
 40648                                  
 40649                                  ;	 Calculate the correct number of Total Sectors on medium
 40650                                  
 40651 00003BD7 A1[C34D]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 40652 00003BDA F726[D54D]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS]
 40653 00003BDE F726[D34D]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK]
 40654 00003BE2 A3[CE4D]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS],ax
 40655 00003BE5 F8                      	clc				; we currently return no errors
 40656                                  
 40657 00003BE6 C3                      	retn
 40658                                  
 40659                                  ;	M047 -- end rewritten routine
 40660                                  
 40661                                  ;----------------------------------------------------------------------------
 40662                                  ;
 40663                                  ; procedure : organize
 40664                                  ;
 40665                                  ;----------------------------------------------------------------------------
 40666                                  
 40667                                  ; 09/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 40668                                  %if 1
 40669                                  end_commd_line:
 40670 00003BE7 AA                      	stosb				; store line feed char in buffer for the linecount.
 40671                                  	;mov	byte [cs:com_level],0	; reset the command level.
 40672                                  	; 03/01/2023
 40673                                  	; ds = cs
 40674                                  	;mov	byte [com_level],0
 40675                                  	;jmp	short org1
 40676                                  	; 09/09/2023
 40677 00003BE8 EB0E                    	jmp	short org0
 40678                                  nochar1:
 40679 00003BEA F9                      	stc
 40680 00003BEB C3                      	retn
 40681                                  %endif
 40682                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 40683                                  	; (SYSINIT:3234h)
 40684                                  
 40685                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40686                                  	; (SYSINIT:4067h)
 40687                                  
 40688                                  	; 09/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 40689                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:42D9h)
 40690                                  
 40691                                  organize:
 40692                                  	; 03/01/2023
 40693                                  	; ds = cs
 40694 00003BEC 8B0E[5603]              	mov	cx,[count]
 40695                                  	;mov	cx,[cs:count]
 40696 00003BF0 E3F8                    	jcxz	nochar1
 40697                                  
 40698                                  ;ifndef	MULTI_CONFIG
 40699                                  ;
 40700                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 40701                                  ;;   because we the case of values in SET commands preserved
 40702                                  ;
 40703                                  ;	call	mapcase
 40704                                  ;endif
 40705                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40706                                  	; 03/01/2023 - Retro DOS v4.2
 40707                                  	;call	mapcase
 40708                                  
 40709 00003BF2 31F6                    	xor	si,si
 40710 00003BF4 89F7                    	mov	di,si
 40711 00003BF6 31C0                    	xor	ax,ax
 40712                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 40713                                  	;;mov	byte [cs:com_level],0
 40714                                  	; 12/12/2022
 40715                                  	;mov	[cs:com_level],al ; 0
 40716                                  	; 03/01/2023
 40717                                  	; ds = cs
 40718                                  	; 09/09/2023
 40719                                  	;mov	[com_level],al ; 0
 40720                                  org0:
 40721 00003BF8 C606[5003]00            	mov	byte [com_level],0 ; 09/09/2023
 40722                                  org1:
 40723 00003BFD E8EF01                  	call	skip_comment
 40724 00003C00 74E5                    	jz	short end_commd_line	; found a comment string and skipped.
 40725 00003C02 E8D001                  	call	get2			; not a comment string. then get a char.
 40726 00003C05 3C0A                    	cmp	al,lf ; 0Ah
 40727 00003C07 74DE                    	je	short end_commd_line	; starts with a blank line.
 40728 00003C09 3C20                    	cmp	al,' ' ; 20h
 40729 00003C0B 76F0                    	jbe	short org1		; skip leading control characters
 40730                                  	; 09/09/2023
 40731                                  	;jmp	short findit
 40732                                  
 40733                                  ; 09/09/2023
 40734                                  %if 0
 40735                                  end_commd_line:
 40736                                  	stosb				; store line feed char in buffer for the linecount.
 40737                                  	;mov	byte [cs:com_level],0	; reset the command level.
 40738                                  	; 03/01/2023
 40739                                  	; ds = cs
 40740                                  	mov	byte [com_level],0
 40741                                  	jmp	short org1
 40742                                  
 40743                                  nochar1:
 40744                                  	stc
 40745                                  	retn
 40746                                  %endif
 40747                                  
 40748                                  findit:
 40749 00003C0D 51                      	push	cx
 40750 00003C0E 56                      	push	si
 40751 00003C0F 57                      	push	di
 40752 00003C10 89F5                    	mov	bp,si
 40753 00003C12 4D                      	dec	bp
 40754 00003C13 BE[D24C]                        mov     si,comtab		; prepare to search command table
 40755 00003C16 B500                    	mov	ch,0
 40756                                  findcom:
 40757 00003C18 89EF                    	mov	di,bp
 40758 00003C1A 8A0C                    	mov	cl,[si]
 40759 00003C1C 46                      	inc	si
 40760 00003C1D E345                    	jcxz	nocom
 40761                                  
 40762                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40763                                  
 40764                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40765                                  
 40766                                  ;ifdef	MULTI_CONFIG
 40767                                  
 40768                                  ;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 40769                                  ;   time skip the upcoming delimiter test (since ";" need not be followed by
 40770                                  ;   anything in particular)
 40771                                  
 40772 00003C1F 26803D3B                	cmp	byte [es:di],CONFIG_SEMICOLON  ; ';'
 40773 00003C23 7430                    	je	short semicolon
 40774                                  loopcom:
 40775                                  	;mov	al,[es:di]
 40776                                  	;inc	di
 40777                                  	;and	al,~20h ; 0DFh		; force upper case
 40778                                  	;inc	si                      ; compare to byte @es:di
 40779                                  	;cmp	al,[si-1]
 40780                                  	; 28/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 40781 00003C25 268A25                  	mov	ah,[es:di]
 40782 00003C28 47                      	inc	di
 40783 00003C29 80E4DF                  	and	ah,~20h ; 0DFh		
 40784 00003C2C AC                      	lodsb			; mov al,[si]
 40785                                  				; inc si
 40786                                  	;cmp	al,ah
 40787                                  	;loope	loopcom
 40788                                  	; 28/07/2023
 40789 00003C2D 30C4                    	xor	ah,al		; result: ah = 0 (*) if ah = al
 40790 00003C2F E1F4                    	loopz	loopcom
 40791                                  ;else
 40792                                  ;	repe	cmpsb
 40793                                  ;endif
 40794                                  	; 02/11/2022
 40795                                  	; 03/01/2023 - Retro DOS v4.2
 40796                                  	;repe	cmpsb
 40797                                  
 40798                                  	; 28/07/2023
 40799                                  	;lahf
 40800 00003C31 01CE                            add     si,cx                   ; bump to next position without affecting flags
 40801                                  	;sahf
 40802 00003C33 AC                              lodsb                           ; get indicator letter
 40803                                  	;jnz	short findcom
 40804                                          ; 28/07/2023
 40805 00003C34 08E4                    	or	ah,ah			; (*)
 40806 00003C36 75E0                    	jnz	short findcom		
 40807                                  	
 40808 00003C38 26803D0D                	cmp     byte [es:di],cr		; the next char might be cr,lf
 40809 00003C3C 7421                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 40810 00003C3E 26803D0A                	cmp	byte [es:di],lf
 40811 00003C42 741B                    	je	short gotcom0
 40812                                  
 40813                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40814                                  
 40815                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40816                                  
 40817                                  ;ifdef	MULTI_CONFIG
 40818                                  
 40819                                  ; Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 40820                                  
 40821 00003C44 3C5B                    	cmp	al,CONFIG_BEGIN  ; '['
 40822 00003C46 7417                    	je	short gotcom0
 40823                                  ;endif
 40824 00003C48 50                      	push	ax
 40825 00003C49 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 40826                                  
 40827                                  ;ifdef	MULTI_CONFIG
 40828                                  
 40829                                  ;   If keyword is *immediately* followed by a question mark (?), then
 40830                                  ;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 40831                                  ;   stored in the CONFIG.SYS memory image.
 40832                                  
 40833 00003C4C 3C3F                    	cmp	al,'?'                  ; explicit interactive command?
 40834 00003C4E 7509                    	jne	short no_query		; no
 40835 00003C50 58                      	pop	ax                      ; yes, so retrieve the original code
 40836                                  	;or	al,80h ; 03/01/2023
 40837 00003C51 0C80                    	or	al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 40838 00003C53 EB0A                    	jmp	short gotcom0           ;
 40839                                  semicolon:
 40840 00003C55 B030                    	mov	al,CONFIG_REM ; '0'
 40841 00003C57 EB06                    	jmp	short gotcom0
 40842                                  no_query:
 40843                                  ;endif  ;MULTI_CONFIG
 40844                                  
 40845                                  	; 02/11/2022
 40846                                  	; 03/01/2023 - Retro DOS v4.2
 40847                                  	;push	ax
 40848                                  	;mov	al,[es:di]		; now the next char. should be a delim.
 40849                                  
 40850 00003C59 E82E0B                  	call	delim
 40851                                  no_delim:
 40852 00003C5C 58                      	pop	ax
 40853 00003C5D 75B9                    	jnz	short findcom
 40854                                  gotcom0:
 40855 00003C5F 5F                      	pop	di
 40856 00003C60 5E                      	pop	si
 40857 00003C61 59                      	pop	cx
 40858 00003C62 EB10                    	jmp	short gotcom
 40859                                  nocom:
 40860 00003C64 5F                      	pop	di
 40861 00003C65 5E                      	pop	si
 40862 00003C66 59                      	pop	cx
 40863 00003C67 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 40864 00003C69 AA                      	stosb				; save indicator char.
 40865                                  _skipline:
 40866 00003C6A E86801                  	call	get2
 40867 00003C6D 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 40868 00003C6F 75F9                            jne     short _skipline
 40869                                  	;jmp	short end_commd_line	; handle next command line
 40870                                  	; 09/09/2023
 40871 00003C71 E973FF                  	jmp	end_commd_line
 40872                                  gotcom:
 40873 00003C74 AA                              stosb                           ; save indicator char in buffer
 40874                                  
 40875                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40876                                  
 40877                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40878                                  
 40879                                  ;ifdef	MULTI_CONFIG
 40880                                  
 40881                                  ;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 40882                                  ;   it screws up the direct comparisons below.
 40883                                  
 40884 00003C75 247F                    	and	al,~CONFIG_OPTION_QUERY ; 7Fh
 40885                                  ;endif
 40886                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 40887                                  	; 03/01/2023
 40888                                  	; ds = cs
 40889 00003C77 A2[5403]                	mov	[cmd_indicator],al	; save it for the future use.
 40890                                  
 40891                                  ;ifdef	MULTI_CONFIG
 40892                                  
 40893                                  ;   There is no whitespace/delimiter between the "begin block" character
 40894                                  ;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 40895                                  ;   skipping code
 40896                                  
 40897 00003C7A 3C5B                    	cmp	al,CONFIG_BEGIN
 40898 00003C7C 7455                    	je	short org31
 40899 00003C7E 3C4F                    	cmp	al,CONFIG_SUBMENU ; 'O'
 40900 00003C80 740F                    	je	short no_mapcase
 40901 00003C82 3C45                    	cmp	al,CONFIG_MENUITEM ; 'E'
 40902 00003C84 740B                    	je	short no_mapcase
 40903 00003C86 3C41                    	cmp	al,CONFIG_MENUDEFAULT ; 'A'
 40904 00003C88 7407                    	je	short no_mapcase
 40905 00003C8A 3C4A                    	cmp	al,CONFIG_INCLUDE ; 'J'
 40906 00003C8C 7403                    	je	short no_mapcase
 40907 00003C8E E8350B                  	call	mapcase			; map case of rest of line to UPPER
 40908                                  no_mapcase:
 40909                                  ;endif
 40910                                  	;; 02/11/2022
 40911                                  	;;mov	[cs:cmd_indicator],al	; save it for the future use.
 40912                                  	;; 03/01/2023
 40913                                  	;; ds = cs
 40914                                  	;mov	[cmd_indicator],al
 40915                                  org2:	
 40916 00003C91 E84101                  	call    get2                    ; skip the command name until delimiter
 40917 00003C94 3C0A                            cmp     al,lf 	    ; 0Ah
 40918 00003C96 740F                    	je	short org21
 40919 00003C98 3C0D                    	cmp	al,cr 	    ; 0Dh	
 40920 00003C9A 740B                    	je	short org21
 40921                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40922                                  	; 03/01/2023 - Retro DOS v4.2
 40923 00003C9C 3C2F                    	cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 40924 00003C9E 7407                    	je	short org21		; T-RICHJ: to be parsed properly.
 40925                                  
 40926 00003CA0 E8E70A                  	call	delim
 40927 00003CA3 75EC                            jnz	short org2
 40928 00003CA5 EB02                    	jmp	short org3
 40929                                  org21:					;if cr or lf then
 40930 00003CA7 4E                      	dec	si			; undo si, cx register
 40931 00003CA8 41                      	inc	cx			;  and continue
 40932                                  org3:	
 40933                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 40934                                  	;je	short get_cmt_token
 40935                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40936                                  	; 03/01/2023 - Retro DOS v4.2	
 40937                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 40938                                  	;je	short org_file
 40939                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 40940                                  	;je	short org_file
 40941                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 40942                                  	;je	short org_file
 40943                                  	; 02/11/2022
 40944                                  	; 03/01/2023 - Retro DOS v4.2
 40945                                  	;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 40946                                  	;;je	short org_file
 40947                                  	;cmp	byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 40948                                  	;je	short org_file
 40949                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 40950                                  	;je	short org_switch
 40951                                  
 40952                                  	; 03/01/2023
 40953                                  	; ds = cs
 40954                                  
 40955 00003CA9 803E[5403]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 40956 00003CAE 745D                    	je	short get_cmt_token
 40957                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40958                                  	; 03/01/2023 - Retro DOS v4.2	
 40959 00003CB0 803E[5403]44            	cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 40960 00003CB5 7430                    	je	short org_file
 40961 00003CB7 803E[5403]49            	cmp	byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 40962 00003CBC 7429                    	je	short org_file
 40963 00003CBE 803E[5403]57            	cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 40964 00003CC3 7422                    	je	short org_file
 40965                                  	; 02/11/2022
 40966                                  	; 03/01/2023 - Retro DOS v4.2
 40967                                  	;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 40968                                  	;je	short org_file
 40969 00003CC5 803E[5403]53                    cmp	byte [cmd_indicator],CONFIG_SHELL ; 'S'
 40970 00003CCA 741B                    	je	short org_file
 40971 00003CCC 803E[5403]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 40972 00003CD1 7403                    	je	short org_switch
 40973                                  	
 40974                                  org31:
 40975 00003CD3 E99500                  	jmp	org4
 40976                                  
 40977                                  org_switch:
 40978 00003CD6 E81601                  	call	skip_comment
 40979 00003CD9 7472                    	jz	short end_commd_line_brdg
 40980                                  
 40981 00003CDB E8F700                  	call	get2
 40982 00003CDE E8B10A                  	call	org_delim
 40983 00003CE1 74F3                    	jz	short org_switch
 40984                                  
 40985 00003CE3 AA                      	stosb
 40986 00003CE4 E99300                  	jmp	org5
 40987                                  
 40988                                  org_file:			; get the filename and put 0 at end
 40989 00003CE7 E80501                  	call	skip_comment
 40990 00003CEA 7464                    	jz	short org_put_zero
 40991                                  
 40992 00003CEC E8E600                  	call	get2		; not a comment
 40993 00003CEF E8980A                  	call	delim
 40994 00003CF2 74F3                    	jz	short org_file	; skip the possible delimiters
 40995                                  
 40996 00003CF4 AA                      	stosb			; copy the first non delim char found in buffer
 40997                                  
 40998                                  org_copy_file:
 40999 00003CF5 E8F700                  	call	skip_comment	; comment char in the filename?
 41000 00003CF8 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 41001                                  
 41002 00003CFA E8D800                  	call	get2
 41003 00003CFD 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 41004 00003CFF 7457                    	je	short end_file_slash ; this will be the special case.
 41005                                  
 41006 00003D01 AA                      	stosb			; save the char. in buffer
 41007 00003D02 E8850A                  	call	delim
 41008 00003D05 7459                    	jz	short end_copy_file
 41009                                  
 41010 00003D07 3C20                    	cmp	al, ' '
 41011 00003D09 77EA                    	ja	short org_copy_file ; keep copying
 41012 00003D0B EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 41013                                  
 41014                                  get_cmt_token:			; get the token. just max. 2 char.
 41015 00003D0D E8C500                  	call	get2
 41016 00003D10 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 41017 00003D12 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 41018 00003D14 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 41019 00003D16 74F5                    	je	short get_cmt_token ;  character.)
 41020 00003D18 3C3D                    	cmp	al,'='		; = is special in this case.
 41021 00003D1A 74F1                    	je	short get_cmt_token
 41022 00003D1C 3C0D                    	cmp	al,cr
 41023 00003D1E 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 41024 00003D20 3C0A                    	cmp	al,lf
 41025 00003D22 7422                    	je	short get_cmt_end
 41026                                  
 41027                                  	; 03/01/2023
 41028                                  	; ds = cs
 41029                                  	;mov	[cs:cmmt1],al	; store it
 41030                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 41031 00003D24 A2[5203]                	mov	[cmmt1],al	; store it
 41032 00003D27 C606[5103]01            	mov	byte [cmmt],1	; 1 char. so far.
 41033 00003D2C E8A600                  	call	get2
 41034 00003D2F 3C20                    	cmp	al,' ' ; 20h
 41035 00003D31 7413                    	je	short get_cmt_end
 41036 00003D33 3C09                    	cmp	al,tab ; 9
 41037 00003D35 740F                    	je	short get_cmt_end
 41038 00003D37 3C0D                    	cmp	al,cr  ; 0Dh
 41039 00003D39 740B                    	je	short get_cmt_end
 41040 00003D3B 3C0A                    	cmp	al,lf  ; 0Ah
 41041 00003D3D 740E                    	je	short end_commd_line_brdg
 41042                                  
 41043                                  	;mov	[cs:cmmt2],al
 41044                                  	;inc	byte [cs:cmmt]
 41045                                  	; 03/01/2023
 41046 00003D3F A2[5303]                	mov	[cmmt2],al
 41047 00003D42 FE06[5103]              	inc	byte [cmmt]
 41048                                  
 41049                                  get_cmt_end:
 41050 00003D46 E88C00                  	call	get2
 41051 00003D49 3C0A                    	cmp	al,lf
 41052 00003D4B 75F9                    	jne	short get_cmt_end	; skip it.
 41053                                  end_commd_line_brdg: 
 41054 00003D4D E997FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 41055                                  
 41056                                  org_put_zero:				; make the filename in front of
 41057 00003D50 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 41058 00003D54 47                      	inc	di
 41059 00003D55 E98FFE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 41060                                  
 41061                                  end_file_slash: 			; al = "/" option char.
 41062 00003D58 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 41063 00003D5C 47                      	inc	di			; and
 41064 00003D5D AA                      	stosb				; store "/" after that.
 41065 00003D5E EB1A                    	jmp	short org5		; continue with the rest of the line
 41066                                  
 41067                                  end_copy_file:
 41068 00003D60 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 41069 00003D65 3C0A                    	cmp	al,lf
 41070 00003D67 74E4                    	je	short end_commd_line_brdg
 41071 00003D69 EB0F                    	jmp	short org5
 41072                                  
 41073                                  org4:					; org4 skips all delimiters after the command name except for '/'
 41074 00003D6B E88100                  	call	skip_comment
 41075 00003D6E 74DD                    	jz	short end_commd_line_brdg
 41076                                  
 41077 00003D70 E86200                  	call	get2
 41078 00003D73 E81C0A                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 41079 00003D76 74F3                    	jz	short org4
 41080 00003D78 EB08                    	jmp	short org51
 41081                                  
 41082                                  org5:					; rest of the line
 41083 00003D7A E87200                  	call	skip_comment		; comment?
 41084 00003D7D 74CE                    	jz	short end_commd_line_brdg
 41085 00003D7F E85300                  	call	get2			; not a comment.
 41086                                  
 41087                                  org51:
 41088 00003D82 AA                      	stosb				; copy the character
 41089 00003D83 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 41090 00003D85 743A                    	je	short at_quote
 41091 00003D87 3C20                    	cmp	al,' '  ; 20h
 41092 00003D89 77EF                    	ja	short org5
 41093                                  
 41094                                  	; 09/09/2023
 41095                                  	; (Note: PCDOS 7.1 IBMBIO.COM does not contain M051 modification)
 41096                                  
 41097                                  					; M051 - Start
 41098                                  	; 03/01/2023
 41099                                  	; ds = cs
 41100 00003D8B 803E[5403]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 41101                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 41102 00003D90 7514                    	jne	short not_dh		; N: 
 41103 00003D92 3C0A                    	cmp	al,lf			; Q: is this line feed
 41104 00003D94 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 41105 00003D96 3C0D                    	cmp	al,cr			; Q: is this a cr
 41106 00003D98 75E0                    	jne	short org5		; N: 
 41107 00003D9A 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 41108 00003D9F AA                      	stosb				; put cr after blank
 41109 00003DA0 FE06[223A]              	inc	byte [insert_blank]
 41110                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 41111                                  					; inserted
 41112 00003DA4 EBD4                    	jmp	short org5
 41113                                  not_dh:					; M051 - End
 41114                                  
 41115 00003DA6 3C0A                    	cmp	al,lf			; line feed?
 41116 00003DA8 740F                    	je	short org1_brdg		; handles the next command line.
 41117 00003DAA EBCE                    	jmp	short org5		; handles next char in this line.
 41118                                  
 41119                                  org_dhlf:				; M051 - Start
 41120                                  	; 03/01/2023
 41121                                  	; ds = cs
 41122 00003DAC 803E[223A]01            	cmp	byte [insert_blank],1
 41123                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 41124 00003DB1 7406                    	je	short org1_brdg		; Y:
 41125 00003DB3 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 41126 00003DB8 AA                      	stosb				; put lf after blank
 41127                                  					; M051 - End
 41128                                  org1_brdg:
 41129 00003DB9 C606[223A]00            	mov	byte [insert_blank],0 
 41130                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 41131                                  					; M051: devicehigh
 41132 00003DBE E93CFE                  	jmp	org1
 41133                                  
 41134                                  at_quote:
 41135 00003DC1 803E[5003]00            	cmp	byte [com_level],0
 41136                                  	;cmp	byte [cs:com_level],0
 41137 00003DC6 7407                    	je	short up_level
 41138                                  	;mov	byte [cs:com_level],0	; reset it.
 41139 00003DC8 C606[5003]00            	mov	byte [com_level],0
 41140 00003DCD EBAB                    	jmp	short org5
 41141                                  
 41142                                  up_level:
 41143                                  	;inc	byte [cs:com_level]	; set it.
 41144 00003DCF FE06[5003]              	inc	byte [com_level]
 41145 00003DD3 EBA5                    	jmp	short org5
 41146                                  
 41147                                  ;----------------------------------------------------------------------------
 41148                                  ;
 41149                                  ; procedure : get2
 41150                                  ;
 41151                                  ;----------------------------------------------------------------------------
 41152                                  
 41153                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 41154                                  	; (SYSINIT:33FAh)
 41155                                  
 41156                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41157                                  	; (SYSINIT:4270h)
 41158                                  get2:
 41159 00003DD5 E304                    	jcxz	noget
 41160                                  	;
 41161                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41162                                  	;;lods	byte ptr es:[si]
 41163                                  	; 12/12/2022
 41164 00003DD7 26                      	es	
 41165 00003DD8 AC                      	lodsb
 41166                                  	;mov	al, [es:si]
 41167                                  	;inc	si
 41168                                  	;
 41169 00003DD9 49                      	dec	cx
 41170 00003DDA C3                      	retn
 41171                                  noget:
 41172 00003DDB 59                      	pop	cx
 41173                                  	; 03/01/2023
 41174                                  	; ds = cs
 41175                                  	;mov	[cs:count],di ; 13/05/2019
 41176                                  	;mov	[cs:org_count],di
 41177 00003DDC 893E[5603]              	mov	[count],di
 41178 00003DE0 893E[5803]              	mov	[org_count],di
 41179 00003DE4 31F6                    	xor	si,si
 41180                                  	;mov	[cs:chrptr],si
 41181 00003DE6 8936[5A03]              	mov	[chrptr],si
 41182                                  
 41183                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41184                                  
 41185                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41186                                  
 41187                                  ;ifndef MULTI_CONFIG
 41188                                  ;	retn
 41189                                  ;else
 41190                                  
 41191                                  ;   This was the rather kludgy way out of procedure "organize", but instead
 41192                                  ;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 41193                                  ;   and the new boot menu stuff...
 41194                                  
 41195 00003DEA 89F9                    	mov     cx,di
 41196 00003DEC E9E300                  	jmp     menu_check
 41197                                  
 41198                                  ;endif
 41199                                  	; 02/11/2022
 41200                                  	; 03/01/2023 - Retro DOS v4.2
 41201                                  	;retn
 41202                                  
 41203                                  ;----------------------------------------------------------------------------
 41204                                  ;
 41205                                  ; procedure : skip_comment
 41206                                  ;
 41207                                  ;skip the commented string until lf, if current es:si-> a comment string.
 41208                                  ;in) es:si-> string
 41209                                  ;	 cx -> length.
 41210                                  ;out) zero flag not set if not found a comment string.
 41211                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 41212                                  ;	  the line feed character at this moment when return.
 41213                                  ;	  ax register destroyed.
 41214                                  ;	  if found, si, cx register adjusted accordingly.
 41215                                  ;
 41216                                  ;----------------------------------------------------------------------------
 41217                                  
 41218                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41219                                  	; (SYSINIT:428Dh)
 41220                                  
 41221                                  skip_comment:
 41222 00003DEF E3EA                    	jcxz	noget		; get out of the organize routine.
 41223                                  
 41224                                  	; 03/01/2023
 41225                                  	; ds = cs	
 41226                                  
 41227 00003DF1 803E[5003]00            	cmp	byte [com_level],0
 41228                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 41229 00003DF6 752C                    	jne	short no_commt	 ; (not inside quotations)
 41230                                  
 41231 00003DF8 803E[5103]01            	cmp	byte [cmmt],1
 41232                                  	;cmp	byte [cs:cmmt],1
 41233 00003DFD 7225                    	jb	short no_commt
 41234                                  
 41235 00003DFF 268A04                  	mov	al,[es:si]
 41236                                  	
 41237 00003E02 3806[5203]              	cmp	[cmmt1],al
 41238                                  	;cmp	[cs:cmmt1],al
 41239 00003E06 751C                    	jne	short no_commt
 41240                                  
 41241 00003E08 803E[5103]02            	cmp	byte [cmmt],2
 41242                                  	;cmp	byte [cs:cmmt],2
 41243 00003E0D 750A                    	jne	short skip_cmmt
 41244                                  
 41245 00003E0F 268A4401                	mov	al,[es:si+1]
 41246                                  	
 41247 00003E13 3806[5303]              	cmp	[cmmt2],al
 41248                                  	;cmp	[cs:cmmt2],al
 41249 00003E17 750B                    	jne	short no_commt
 41250                                  skip_cmmt:
 41251 00003E19 E3C0                    	jcxz	noget		; get out of organize routine.
 41252 00003E1B 268A04                  	mov	al,[es:si]
 41253 00003E1E 46                      	inc	si
 41254 00003E1F 49                      	dec	cx
 41255 00003E20 3C0A                    	cmp	al,lf		; line feed?
 41256 00003E22 75F5                    	jne	short skip_cmmt
 41257                                  no_commt:
 41258 00003E24 C3                      	retn
 41259                                  
 41260                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 41261                                  ; (SYSINIT:42C8h)
 41262                                  
 41263                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 41264                                  ;%if 0
 41265                                  
 41266                                  ;ifdef	MULTI_CONFIG
 41267                                  
 41268                                  ;----------------------------------------------------------------------------
 41269                                  ;
 41270                                  ;   kbd_read: wait for keystroke
 41271                                  ;
 41272                                  ;   INPUT
 41273                                  ;       DS == CS == sysinitseg
 41274                                  ;
 41275                                  ;   OUTPUT
 41276                                  ;       Carry SET to clean boot, CLEAR otherwise
 41277                                  ;
 41278                                  ;   OTHER REGS USED
 41279                                  ;       All
 41280                                  ;
 41281                                  ;   HISTORY
 41282                                  ;       Created 16-Nov-1992 by JeffPar
 41283                                  ;
 41284                                  ;----------------------------------------------------------------------------
 41285                                  
 41286                                  kbd_read:
 41287 00003E25 F606[814C]02                    test    byte [bDisableUI],2
 41288 00003E2A 7520                            jnz     short kbd_nodelay
 41289                                  
 41290 00003E2C 1E                              push    ds              ; the bios timer tick count is incremented
 41291 00003E2D 29C0                            sub     ax,ax           ; 18.2 times per second;
 41292 00003E2F 8ED8                            mov     ds,ax           ; watch the timer tick count for 37 transitions
 41293                                  	;mov	dx,[046Ch]	; get initial value
 41294                                  kbd_loop:
 41295 00003E31 B401                            mov     ah,1            ;
 41296 00003E33 CD16                            int     16h             ; peek the keyboard
 41297 00003E35 7514                            jnz	short kbd_loopdone ; something's there, get out
 41298 00003E37 B402                            mov     ah,2            ; peek the shift states
 41299 00003E39 CD16                            int     16h             ;
 41300 00003E3B A803                            test    al,03h          ; either right or left shift key bits set?
 41301 00003E3D 750C                            jnz	short kbd_loopdone ; yes
 41302 00003E3F A16C04                          mov     ax,[046Ch]	;
 41303                                  	;sub	ax,dx           ; get difference
 41304                                  	; 15/04/2019 - Retro DOS v4.0
 41305 00003E42 2E2B06[8C03]            	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 41306                                  
 41307 00003E47 3C25                    	cmp     al,37           ; reached limit?  ; (2 seconds)
 41308 00003E49 72E6                            jb	short kbd_loop	; not yet
 41309                                  kbd_loopdone:
 41310 00003E4B 1F                              pop     ds              ; delay complete!
 41311                                  kbd_nodelay:
 41312 00003E4C 29DB                            sub     bx,bx           ; assume clean boot
 41313 00003E4E B402                            mov     ah,2            ; peek the shift states
 41314 00003E50 CD16                            int     16h             ;
 41315 00003E52 A803                            test    al,03h          ; either right or left shift key bits set?
 41316 00003E54 7407                            jz      short kbd_notshift ; no
 41317 00003E56 43                              inc     bx              ; yes
 41318 00003E57 43                              inc     bx
 41319                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 41320 00003E58 800E[854C]04            	or	byte [bQueryOpt],4
 41321                                  kbd_notshift:                   ;
 41322 00003E5D B401                            mov     ah,1            ; peek the keyboard
 41323 00003E5F CD16                            int     16h             ;
 41324 00003E61 743E                            jz	short kbd_test	; no key present
 41325 00003E63 08C0                            or      al,al           ; is it a function key?
 41326 00003E65 753A                            jnz	short kbd_test	; no
 41327                                  
 41328                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 41329 00003E67 80FC62                          cmp     ah,62h          ; CTRL F5
 41330 00003E6A 7405                            je	short kbd_cfg_bypass
 41331                                  	
 41332 00003E6C 80FC3F                          cmp     ah,3Fh          ; F5 function key?
 41333 00003E6F 750D                            jne	short kbd_notf5	; no
 41334                                  kbd_cfg_bypass:
 41335 00003E71 BA[FC51]                        mov     dx,_$CleanMsg
 41336 00003E74 E8DD0B                          call    print
 41337                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 41338 00003E77 800E[854C]04            	or	byte [bQueryOpt],4 
 41339 00003E7C EB16                            jmp     short kbd_eat   ; yes, clean boot selected
 41340                                  kbd_notf5:
 41341                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 41342 00003E7E 80FC65                          cmp     ah,65h          ; CTRL F8
 41343 00003E81 7405                            je	short kbd_cfg_confirm
 41344                                  
 41345 00003E83 80FC42                          cmp     ah,42h          ; F8 function key?
 41346 00003E86 7523                            jne	short kbd_exit	; no
 41347                                  kbd_cfg_confirm:
 41348 00003E88 BA[3A52]                        mov     dx,_$InterMsg
 41349 00003E8B E8C60B                          call    print           ;
 41350 00003E8E B301                            mov     bl,1            ; yes, interactive-boot option enabled
 41351 00003E90 881E[854C]                      mov     [bQueryOpt],bl  ; change default setting
 41352                                  kbd_eat:                        ;
 41353 00003E94 B400                            mov     ah,0            ;
 41354 00003E96 CD16                            int     16h             ; eat the key we assumed was a signal
 41355 00003E98 C606[8B4C]FF                    mov	byte [secElapsed],-1
 41356 00003E9D 09DB                            or      bx,bx           ;
 41357 00003E9F 7405                            jz	short kbd_clean	;
 41358                                  kbd_test:                       ;
 41359 00003EA1 80FB02                          cmp     bl,2            ;
 41360 00003EA4 7205                            jb	short kbd_exit	;
 41361                                  kbd_clean:                      ;
 41362 00003EA6 E86E08                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 41363 00003EA9 F9                              stc                     ; set carry to indicate abort
 41364 00003EAA C3                              retn			;
 41365                                  kbd_exit:                       ;
 41366 00003EAB F8                              clc                     ; clear carry to indicate success
 41367 00003EAC C3                              retn			;
 41368                                  
 41369                                  ;----------------------------------------------------------------------------
 41370                                  ;
 41371                                  ;   set_numlock: set numlock LED
 41372                                  ;
 41373                                  ;   INPUT
 41374                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 41375                                  ;
 41376                                  ;   OUTPUT
 41377                                  ;       None
 41378                                  ;
 41379                                  ;   OTHER REGS USED
 41380                                  ;       None
 41381                                  ;
 41382                                  ;   HISTORY
 41383                                  ;       Created 16-Nov-1992 by JeffPar
 41384                                  ;
 41385                                  ;----------------------------------------------------------------------------
 41386                                  
 41387                                  	; 04/01/2023 - Retro DOS v4.2
 41388                                  
 41389                                  set_numlock:
 41390                                          ; 04/01/2023
 41391                                  	;push	ax
 41392 00003EAD 1E                              push    ds
 41393 00003EAE 29C0                            sub     ax,ax
 41394 00003EB0 8ED8                            mov     ds,ax
 41395 00003EB2 268B04                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 41396 00003EB5 2E3B06[C451]                    cmp     ax,[cs:OnOff+2]	; should we turn it off?
 41397 00003EBA 7507                            jne	short not_off	; no
 41398 00003EBC 80261704DF                      and     byte [0417h],~20h ; 0DFh
 41399 00003EC1 EB0D                            jmp     short set_done
 41400                                  not_off:
 41401 00003EC3 2E3B06[C251]                    cmp     ax,[cs:OnOff]	; should we turn it on?
 41402 00003EC8 F9                              stc
 41403 00003EC9 7505                            jne	short set_done	; no
 41404 00003ECB 800E170420                      or      byte [0417h],20h
 41405                                  set_done:
 41406 00003ED0 1F                              pop     ds
 41407                                  	; 04/01/2023
 41408                                  	;pop	ax
 41409 00003ED1 C3                              retn
 41410                                  
 41411                                  ; 16/04/2019 - Retro DOS v4.0
 41412                                  
 41413                                  ;----------------------------------------------------------------------------
 41414                                  ;
 41415                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 41416                                  ;
 41417                                  ;   INPUT
 41418                                  ;       CX == "organized" config.sys memory image length
 41419                                  ;    ES:SI -> "organized" config.sys memory image
 41420                                  ;       DS == CS == sysinitseg
 41421                                  ;
 41422                                  ;   OUTPUT
 41423                                  ;       Same as above; the idea is that menu_check simply transforms
 41424                                  ;       a block-structured config.sys image into a conventional image,
 41425                                  ;       based on the user's block selection and any other boot-time options
 41426                                  ;       the user may have employed...
 41427                                  ;
 41428                                  ;   OTHER REGS USED
 41429                                  ;       All
 41430                                  ;
 41431                                  ;   NOTES
 41432                                  ;       [count] and [org_count] are set to the new config.sys image length
 41433                                  ;
 41434                                  ;   HISTORY
 41435                                  ;       Created 16-Mar-1992 by JeffPar
 41436                                  ;
 41437                                  ;----------------------------------------------------------------------------
 41438                                  
 41439                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41440                                  	; (SYSINIT:4378h)
 41441                                  
 41442                                  menu_check:
 41443                                  
 41444                                  ;   Search for SWITCHES, determine if /N or /F are present; if so, then
 41445                                  ;   disable clean/interactive boot options
 41446                                  
 41447 00003ED2 51                              push    cx              ;
 41448 00003ED3 56                              push    si              ;
 41449 00003ED4 29DB                            sub     bx,bx           ; remains ZERO until first block
 41450                                  swchk_loop:                     ;
 41451 00003ED6 E83507                          call    get_char        ; get first char of current line
 41452 00003ED9 724C                            jc	short swchk_end	; hit eof
 41453 00003EDB 3C5B                            cmp     al,CONFIG_BEGIN ; '['
 41454 00003EDD 7503                            jne	short swchk_next1 ;
 41455 00003EDF 43                              inc     bx              ; remember that we've seen a block
 41456 00003EE0 EB40                            jmp     short swchk_nextline
 41457                                  swchk_next1:                    ;
 41458 00003EE2 3C4E                            cmp     al,CONFIG_NUMLOCK
 41459 00003EE4 750E                            jne	short swchk_next2 ;
 41460 00003EE6 09DB                            or      bx,bx           ; only do NUMLOCK commands that exist
 41461 00003EE8 7538                            jnz	short swchk_nextline ; before the first block
 41462 00003EEA E8C0FF                          call    set_numlock     ; REM it out so we don't act on it later, too
 41463 00003EED 26C644FF30                      mov     byte [es:si-1],CONFIG_REM
 41464 00003EF2 EB2E                            jmp     short swchk_nextline
 41465                                  swchk_next2:                    ;
 41466 00003EF4 3C31                            cmp     al,CONFIG_SWITCHES
 41467 00003EF6 752A                            jne	short swchk_nextline ; this line ain't it
 41468                                  swchk_scan:                     ;
 41469 00003EF8 E81307                          call    get_char        ; look for /N or /F
 41470                                  swchk_scan1:                    ;
 41471 00003EFB 3C0A                            cmp     al,LF           ; end of line?
 41472 00003EFD 7423                            je	short swchk_nextline ; yes
 41473 00003EFF 3C2F                            cmp     al,'/'          ; switch-char?
 41474 00003F01 75F5                            jne	short swchk_scan ; no
 41475 00003F03 E80807                          call    get_char        ;
 41476 00003F06 24DF                            and     al,~20h ; 0DFh	; convert to upper case
 41477 00003F08 3A06[6323]                      cmp     al,[swit_n+1]	; 'N'
 41478 00003F0C 7507                            jne	short swchk_scan2 ; no
 41479 00003F0E 800E[814C]01                    or      byte [bDisableUI],1
 41480 00003F13 EBE3                            jmp	short swchk_scan ; continue looking for switches of interest
 41481                                  swchk_scan2:                    ;
 41482 00003F15 3A06[6F23]                      cmp     al,[swit_f+1]	; 'F'
 41483 00003F19 75E0                            jne	short swchk_scan1 ; no
 41484 00003F1B 800E[814C]02                    or      byte [bDisableUI],2
 41485 00003F20 EBD6                            jmp     short swchk_scan ; continue looking for switches of interest
 41486                                  swchk_nextline:                 ;
 41487 00003F22 E8C306                          call    skip_opt_line   ;
 41488 00003F25 EBAF                            jmp     short swchk_loop ;
 41489                                  swchk_end:                      ;
 41490 00003F27 5E                              pop     si              ;
 41491 00003F28 59                              pop     cx              ;
 41492                                  
 41493                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 41494                                  ;   the DisableUI flag is still clear
 41495                                  
 41496 00003F29 F606[814C]01                    test    byte [bDisableUI],1
 41497 00003F2E 7508                            jnz	short menu_search
 41498                                  ;
 41499                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 41500                                  ;   there is anything at all in the keyboard buffer
 41501                                  ;
 41502 00003F30 E8F2FE                          call    kbd_read
 41503 00003F33 7303                            jnc	short menu_search
 41504 00003F35 E9EE01                          jmp	menu_abort
 41505                                  
 41506                                  ;   Search for MENU block; it is allowed to be anywhere in config.sys
 41507                                  
 41508                                  menu_search:
 41509 00003F38 29DB                            sub     bx,bx           ; if no MENU, default to zero for no_selection
 41510 00003F3A BF[C64C]                        mov     di,szMenu	;
 41511 00003F3D E80304                          call    find_block      ; find the MENU block
 41512 00003F40 7337                            jnc	short menu_found ;
 41513 00003F42 C606[BE4C]00                    mov     byte [szBoot],0
 41514 00003F47 E90C02                          jmp	no_selection ; not found
 41515                                  
 41516                                  ;   Process the requested menu color(s)
 41517                                  
 41518                                  menu_color:
 41519 00003F4A 51                      	push	cx              ;
 41520 00003F4B 52                      	push	dx              ;
 41521                                  	;;mov	dx,0007h        ; default color setting
 41522                                  	; 10/09/2023
 41523                                  	;mov	dl,7 ; !*!
 41524 00003F4C E89E06                  	call	get_number	; get first number
 41525 00003F4F 80E30F                  	and	bl,0Fh  ; !**!	; first # is foreground color (for low nibble)
 41526 00003F52 88DD                    	mov	ch,bl           ; save it in CH
 41527                                  	; 01/08/2023 - Retro DOS v4.2 IO.SYS (optimization) by Erdogan Tan 
 41528                                  	; (high nibble of dl is 0)
 41529                                  	;and	dl,0F0h	; !*!	; (low nibble of dl would be zero)
 41530                                  	;or	dl,bl		; (low nibble of dl is 7) ! 14/08/2023
 41531 00003F54 88DA                    	mov	dl,bl	; 14/08/2023
 41532 00003F56 E83108                  	call	delim           ; did we hit a delimiter
 41533 00003F59 750E                    	jne	short check_color ; no, all done
 41534 00003F5B E88F06                  	call	get_number	; get next number
 41535 00003F5E 80E30F                  	and	bl,0Fh		; second # is background color (for high nibble)
 41536 00003F61 88DE                    	mov	dh,bl           ; save it in DH
 41537                                  	; 10/09/2023
 41538                                  	;and	dl,0Fh	; !**!	;
 41539 00003F63 B104                    	mov	cl,4            ;
 41540 00003F65 D2E3                    	shl	bl,cl           ;
 41541 00003F67 08DA                    	or	dl,bl           ;
 41542                                  check_color:
 41543 00003F69 38F5                    	cmp	ch,dh           ; are foreground/background the same?
 41544 00003F6B 7503                    	jne	short set_color	; no
 41545 00003F6D 80F208                  	xor	dl,08h          ; yes, so modify the fgnd intensity
 41546                                  set_color:
 41547 00003F70 8816[7C4C]              	mov	[bMenuColor],dl ;
 41548 00003F74 5A                      	pop	dx              ;
 41549 00003F75 59                      	pop	cx              ;
 41550 00003F76 E9A900                  	jmp	menu_nextitem
 41551                                  
 41552                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 41553                                  ;   above is there simply to alleviate short jump problems)
 41554                                  
 41555                                  menu_found:
 41556 00003F79 C606[864C]01                    mov     byte [bDefBlock],1
 41557                                          ;mov	word [offDefBlock],0
 41558 00003F7E C606[8A4C]FF                    mov     byte [secTimeOut],-1
 41559 00003F83 8026[854C]FD                    and     byte [bQueryOpt],~2 ; 0FDh
 41560                                  	; 10/09/2023
 41561 00003F88 29D2                    	sub	dx,dx
 41562 00003F8A 8916[884C]              	mov	[offDefBlock],dx ; 0
 41563                                  
 41564 00003F8E E85706                          call    skip_opt_line   ; skip to next line
 41565                                  	; 10/09/2023
 41566                                  	;sub	dx,dx		; initialize total block count (0 => none yet)
 41567                                  
 41568                                  ;   Process the menu block now
 41569                                  
 41570                                  menu_process:
 41571 00003F91 E87A06                          call    get_char        ; get first char of current line
 41572 00003F94 722E                            jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 41573 00003F96 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 41574 00003F98 3C5B                            cmp     al,CONFIG_BEGIN ; BEGIN implies END
 41575 00003F9A 7428                            je	short to_menu_getdefault
 41576 00003F9C 3C4F                            cmp     al,CONFIG_SUBMENU
 41577 00003F9E 744D                            je	short menu_item	; go process sub-menu
 41578 00003FA0 3C45                            cmp     al,CONFIG_MENUITEM
 41579 00003FA2 7449                            je	short menu_item	; go process menu item
 41580 00003FA4 3C41                            cmp     al,CONFIG_MENUDEFAULT
 41581 00003FA6 741E                            je	short menu_default ; go process menu default
 41582 00003FA8 3C52                            cmp     al,CONFIG_MENUCOLOR
 41583 00003FAA 749E                            je	short menu_color ; go process menu color
 41584 00003FAC 3C4E                            cmp     al,CONFIG_NUMLOCK
 41585 00003FAE 740F                            je	short menu_numlock ;
 41586 00003FB0 3C30                            cmp     al,CONFIG_REM   ; allow remarks in menu block
 41587 00003FB2 746E                            je	short menu_nextitem ;
 41588 00003FB4 E8C307                          call    any_delim       ; allow blank lines and such
 41589 00003FB7 7469                            je	short menu_nextitem ;
 41590 00003FB9 F9                              stc                     ;
 41591 00003FBA E82607                          call    print_error     ; non-MENU command!
 41592 00003FBD EB63                            jmp     short menu_nextitem
 41593                                  menu_numlock:
 41594 00003FBF E8EBFE                          call    set_numlock
 41595 00003FC2 EB5E                            jmp     short menu_nextitem
 41596                                  to_menu_getdefault:
 41597 00003FC4 EB62                            jmp     short menu_getdefault
 41598                                  
 41599                                  ;   Save the offset of the default block name, we'll need it later
 41600                                  
 41601                                  menu_default:
 41602 00003FC6 8936[884C]                      mov     [offDefBlock],si; save address of default block name
 41603 00003FCA 803E[8B4C]00                    cmp     byte [secElapsed],0
 41604 00003FCF 751A                            jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 41605 00003FD1 E8EA05                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 41606 00003FD4 724C                            jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 41607 00003FD6 E8FB05                          call    skip_delim      ; something is typed
 41608 00003FD9 7247                            jc	short menu_nextitem ;
 41609 00003FDB 89DE                            mov     si,bx           ;
 41610 00003FDD E80D06                          call    get_number      ; get number (of seconds for timeout)
 41611 00003FE0 80FB5A                          cmp     bl,90           ; limit it to a reasonable number
 41612                                  	;jb	short timeout_ok ; (besides, 99 is the largest # my simple
 41613 00003FE3 7602                            jna	short timeout_ok ; 01/08/2023
 41614 00003FE5 B35A                    	mov     bl,90           ;  display function can handle)
 41615                                  timeout_ok:                    ;
 41616 00003FE7 881E[8A4C]                      mov     [secTimeOut],bl ;
 41617                                  timeout_skip:
 41618 00003FEB EB35                            jmp     short menu_nextitem
 41619                                  
 41620                                  ;   Verify that this is a valid menu item by searching for the named block
 41621                                  
 41622                                  menu_item:
 41623                                  	;cmp	dl,9	; 04/01/2023
 41624 00003FED 80FA09                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 41625 00003FF0 7330                            jae	short menu_nextitem ;
 41626 00003FF2 89F7                            mov     di,si           ; DS:DI -> block name to search for
 41627 00003FF4 E83303                          call    srch_block      ;
 41628 00003FF7 7406                            je	short menu_itemfound ;
 41629 00003FF9 F9                              stc                     ;
 41630 00003FFA E8E606                          call    print_error     ; print error and pause
 41631 00003FFD EB23                            jmp     short menu_nextitem ; if not found, ignore this menu item
 41632                                  
 41633                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 41634                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 41635                                  ;   and CX are unmodified
 41636                                  
 41637                                  menu_itemfound:
 41638 00003FFF 42                              inc     dx              ; otherwise, increment total block count
 41639 00004000 89D3                            mov     bx,dx           ; and use it to index the arrays of offsets
 41640 00004002 8887[8C4C]                      mov	[abBlockType+bx],al
 41641 00004006 01DB                            add     bx,bx           ; of recorded block names and descriptions
 41642                                  
 41643                                  ;   There should be a description immediately following the block name on
 41644                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 41645                                  ;   description...
 41646                                  
 41647 00004008 89B7[964C]                      mov     [aoffBlockName+bx],si
 41648 0000400C 89B7[AA4C]                      mov     [aoffBlockDesc+bx],si
 41649 00004010 89DF                            mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 41650 00004012 E8A905                          call    skip_token      ;
 41651 00004015 720B                            jc	short menu_nextitem ; hit eol/eof
 41652 00004017 E8BA05                          call    skip_delim      ;
 41653 0000401A 7206                            jc	short menu_nextitem ; hit eol/eof
 41654 0000401C 87DF                            xchg    bx,di           ;
 41655 0000401E 89BF[AA4C]                      mov     [aoffBlockDesc+bx],di
 41656                                  
 41657                                  menu_nextitem:
 41658 00004022 E8C305                          call    skip_opt_line   ;
 41659 00004025 E969FF                          jmp     menu_process    ; go back for more lines
 41660                                  
 41661                                  ;   Display menu items now, after determining which one is default
 41662                                  
 41663                                  menu_getdefault:
 41664 00004028 08D2                            or      dl,dl           ; where there any valid blocks at all?
 41665 0000402A 7505                            jnz	short menu_valid ; yes
 41666 0000402C 29DB                            sub     bx,bx           ; no, so force autoselect of 0
 41667 0000402E E9ED00                          jmp     menu_autoselect ; (meaning: process common blocks only)
 41668                                  menu_valid:
 41669 00004031 29DB                            sub     bx,bx           ;
 41670 00004033 8816[874C]                      mov     [bMaxBlock],dl  ; first, record how many blocks we found
 41671 00004037 8B3E[884C]                      mov     di,[offDefBlock];
 41672 0000403B 09FF                            or      di,di           ; does a default block exist?
 41673 0000403D 741C                            jz	short menu_nodefault ; no
 41674 0000403F 43                              inc     bx              ; yes, walk name table, looking for default
 41675                                  menu_chkdefault:
 41676 00004040 53                              push    bx              ;
 41677 00004041 01DB                            add     bx,bx           ;
 41678 00004043 8BB7[964C]                      mov     si,[aoffBlockName+bx]
 41679 00004047 B98000                          mov     cx,128          ; arbitrary maximum length of a name
 41680 0000404A 1E                              push    ds              ;
 41681 0000404B 06                              push    es              ;
 41682 0000404C 1F                              pop     ds              ;
 41683 0000404D E81A03                          call    comp_names      ; is this block the same as the default?
 41684 00004050 1F                              pop     ds              ;
 41685 00004051 5B                              pop     bx              ;
 41686 00004052 7409                            je	short menu_setdefault ; yes
 41687 00004054 43                              inc     bx              ;
 41688 00004055 3A1E[874C]                      cmp     bl,[bMaxBlock]  ; all done searching?
 41689 00004059 76E5                            jbe	short menu_chkdefault ; not yet
 41690                                  menu_nodefault:
 41691 0000405B B301                            mov     bl,1            ; if no default, force default to #1
 41692                                  menu_setdefault:
 41693 0000405D 881E[864C]                      mov     [bDefBlock],bl  ; yes, this will be the initial current block
 41694                                  
 41695                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 41696                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 41697                                  ;   supposed to skip menu display and run with the specified default block;
 41698                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 41699                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 41700                                  ;   with no timeout)
 41701                                  
 41702 00004061 803E[8A4C]00                    cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 41703 00004066 750A                            jne	short menu_display ; no
 41704 00004068 F606[854C]01                    test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 41705 0000406D 7503                            jnz	short menu_display ; yes, so *don't* assume default after all
 41706 0000406F E9C700                          jmp     not_topmenu	;
 41707                                  
 41708                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 41709                                  
 41710                                  menu_display:
 41711 00004072 B40F                            mov     ah,0Fh          ; get current video mode
 41712 00004074 CD10                            int     10h             ;
 41713 00004076 B400                            mov     ah,00h          ; just re-select that mode
 41714 00004078 CD10                            int     10h             ;
 41715 0000407A 06                              push    es              ;
 41716 0000407B B84000                          mov     ax,40h          ; reach down into the ROM BIOS data area
 41717 0000407E 8EC0                            mov     es,ax           ; and save the current (default) video page
 41718 00004080 26A14E00                        mov     ax,[es:004Eh]   ; start address and page #, in case the
 41719 00004084 A3[834C]                        mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 41720 00004087 26A06200                        mov     al,[es:0062h]   ;
 41721 0000408B A2[824C]                        mov     [bCRTPage],al   ;
 41722 0000408E A1[7D4C]                        mov     ax,[bMenuPage]	; select new page for menu
 41723 00004091 CD10                            int     10h             ;
 41724 00004093 B80006                          mov     ax,0600h        ; clear entire screen
 41725 00004096 8A3E[7C4C]                      mov     bh,[bMenuColor] ; using this color
 41726 0000409A 29C9                            sub     cx,cx           ; upper left row/col
 41727                                          ;mov	dl,[es:CRT_Cols] 
 41728 0000409C 268A164A00                      mov	dl,[es:4Ah]
 41729 000040A1 FECA                    	dec     dl              ;
 41730                                          ;mov	dh,[es:CRT_Rows];
 41731 000040A3 268A368400                      mov	dh,[es:84h]
 41732 000040A8 08F6                    	or      dh,dh           ; # of rows valid?
 41733 000040AA 7504                            jnz	short menu_clear ; hopefully
 41734 000040AC 8A36[804C]                      mov     dh,[bLastRow]   ; no, use a default
 41735                                  menu_clear:
 41736 000040B0 CD10                            int     10h             ; clear the screen using the req. attribute
 41737 000040B2 07                              pop     es              ;
 41738 000040B3 8836[804C]                      mov     [bLastRow],dh   ; save DH
 41739 000040B7 BA[7752]                        mov     dx,_$MenuHeader
 41740 000040BA E89709                          call    print           ; cursor now on row 3 (numbered from 0)
 41741                                  
 41742 000040BD F606[814C]01                    test    byte [bDisableUI],1
 41743 000040C2 751F                            jnz     short menu_nostatus
 41744 000040C4 8A3E[7D4C]                      mov     bh,[bMenuPage]  ;
 41745 000040C8 8A36[804C]                      mov     dh,[bLastRow]   ; restore DH
 41746 000040CC B200                            mov     dl,0            ; print the status line on row DH, col 0,
 41747 000040CE B402                            mov     ah,02h          ; now that we can trash the cursor position
 41748 000040D0 CD10                            int     10h             ;
 41749 000040D2 BA[C352]                        mov     dx,_$StatusLine
 41750 000040D5 E87C09                          call    print           ;
 41751 000040D8 B403                            mov     ah,3            ; get cursor position
 41752 000040DA CD10                            int     10h             ;
 41753 000040DC 80EA02                          sub     dl,2            ;
 41754 000040DF 8816[7F4C]                      mov     [bLastCol],dl   ; save column where status char will go
 41755                                  
 41756                                  menu_nostatus:
 41757 000040E3 BB0100                          mov     bx,1            ; now prepare to display all the menu items
 41758                                  menu_disploop:
 41759 000040E6 E8B002                          call    print_item	; print item #BL
 41760 000040E9 43                              inc     bx              ; why "inc bx"? because it's a 1-byte opcode
 41761 000040EA 3A1E[874C]                      cmp     bl,[bMaxBlock]  ; all done?
 41762 000040EE 76F6                            jbe	short menu_disploop ; not yet
 41763                                  
 41764                                  ;   Set cursor position to just below the menu items
 41765                                  
 41766 000040F0 B200                            mov     dl,0            ; select column
 41767 000040F2 88DE                            mov     dh,bl           ;
 41768 000040F4 80C604                          add     dh,4            ; select row below menu
 41769 000040F7 8A3E[7D4C]                      mov     bh,[bMenuPage]  ;
 41770 000040FB B402                            mov     ah,02h          ; set cursor position beneath the block list
 41771 000040FD CD10                            int     10h             ;
 41772                                  
 41773 000040FF BA[B052]                        mov     dx,_$MenuPrmpt
 41774 00004102 E84F09                          call    print           ;
 41775 00004105 E82903                          call    select_item     ; make a selection, return # in BX
 41776 00004108 BA[7050]                        mov     dx,crlfm	
 41777 0000410B E84609                          call    print           ;
 41778 0000410E FF36[814C]                      push    word [bDisableUI]
 41779 00004112 800E[814C]01                    or      byte [bDisableUI],1
 41780 00004117 E86704                          call    show_status     ; clear the status line now
 41781 0000411A 8F06[814C]                      pop     word [bDisableUI]
 41782                                  
 41783                                  ;   Now begins the "re-organization" process...
 41784                                  
 41785                                  menu_autoselect:
 41786 0000411E 83FBFF                          cmp     bx,-1 ; 0FFFFh	; clean boot requested?
 41787 00004121 7508                            jne	short normal_boot ; no
 41788 00004123 E8F105                          call    disable_autoexec; basically, add a /D to the command.com line
 41789                                  menu_abort:
 41790 00004126 29C9                            sub     cx,cx           ; then immediately exit with 0 config.sys image
 41791 00004128 E9E400                          jmp	menu_exit	;
 41792                                  
 41793                                  normal_boot:
 41794 0000412B 83FBFE                          cmp     bx,-2 ; 0FFFEh	; back to top-level menu?
 41795 0000412E 7509                            jne	short not_topmenu ; no
 41796 00004130 8B0E[5603]                      mov     cx,[count]      ; yes, start all over
 41797 00004134 29F6                            sub     si,si           ;
 41798 00004136 E9FFFD                          jmp     menu_search
 41799                                  
 41800                                  not_topmenu:
 41801 00004139 80BF[8C4C]4F                    cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 41802 0000413E 7510                            jne	short not_submenu
 41803 00004140 01DB                            add     bx,bx           ;
 41804 00004142 8BBF[964C]                      mov     di,[aoffBlockName+bx]
 41805 00004146 E8E101                          call    srch_block      ; THIS CANNOT FAIL!
 41806 00004149 89FE                            mov     si,di           ;
 41807 0000414B 89D9                            mov     cx,bx           ; ES:SI and CX are ready for another round
 41808 0000414D E929FE                          jmp     menu_found
 41809                                  
 41810                                  not_submenu:
 41811 00004150 01DB                            add     bx,bx           ; get BX -> name of selected block
 41812 00004152 8B9F[964C]                      mov     bx,[aoffBlockName+bx]
 41813                                  
 41814                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 41815                                  ;   the offset relative to ES of the block name to be processed (along with
 41816                                  ;   all the "common" lines of course)
 41817                                  
 41818                                  no_selection:
 41819 00004156 891E[884C]                      mov     [offDefBlock],bx; save selection
 41820 0000415A 8B0E[5603]                      mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 41821 0000415E 29F6                            sub     si,si           ;
 41822 00004160 1E                              push    ds              ;
 41823 00004161 8E1E[6219]                      mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 41824 00004165 29FF                            sub     di,di           ;
 41825                                  
 41826                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 41827                                  ;
 41828                                  ;   Work our way through the config.sys image again, this time copying
 41829                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 41830                                  ;   within the requested block. Lines inside INCLUDEd blocks are transparently
 41831                                  ;   copied by copy_block in a recursive fashion; the amount of recursion is
 41832                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 41833                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 41834                                  ;
 41835                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 41836                                  ;   stack we're running on, then we should check it inside copy_block
 41837                                  
 41838                                  copyblock_loop:
 41839 00004167 53                              push    bx              ; save selected block name
 41840 00004168 E82F01                          call    copy_block      ; process (named or common) block
 41841 0000416B 5B                              pop     bx              ;
 41842 0000416C 7232                            jc	short move_config ; hit eof
 41843                                  
 41844                                  ;   copy_block can only return for two reasons: it hit eof or a new block
 41845                                  
 41846                                  copyblock_begin:
 41847                                  
 41848                                  ; 10/09/2023
 41849                                  %if 0
 41850                                          push    ax              ;
 41851                                          push    cx              ;
 41852                                          push    si              ;
 41853                                          push    di              ; always do "common" blocks
 41854                                          mov     di,szCommon
 41855                                          push    ds              ;
 41856                                          push    cs              ;
 41857                                          pop     ds              ;
 41858                                          call    comp_names      ;
 41859                                          pop     ds              ;
 41860                                          pop     di              ;
 41861                                          pop     si              ;
 41862                                          pop     cx              ;
 41863                                          pop     ax              ;
 41864                                          je	short copyblock_check
 41865                                  %endif
 41866                                  	; 10/09/2023
 41867 0000416E 57                      	push	di
 41868 0000416F BF[CB4C]                	mov	di,szCommon	; always do "common" blocks
 41869 00004172 E81602                  	call	comp_names_x	; (comp_names_safe)
 41870 00004175 5F                      	pop	di
 41871 00004176 740F                    	je	short copyblock_check
 41872                                  
 41873 00004178 09DB                            or      bx,bx           ; is there a block name to check?
 41874 0000417A 7414                            jz	short copyblock_skip ; no
 41875 0000417C 57                              push    di              ;
 41876 0000417D 89DF                            mov     di,bx           ; check block against given block name
 41877 0000417F 1E                              push    ds              ;
 41878 00004180 06                              push    es              ;
 41879 00004181 1F                              pop     ds              ;
 41880 00004182 E8E501                          call    comp_names      ; is this the block we really want to do?
 41881 00004185 1F                              pop     ds              ;
 41882 00004186 5F                              pop     di              ;
 41883                                  copyblock_check:
 41884 00004187 7217                            jc	short move_config ; hit eof
 41885 00004189 7505                            jne	short copyblock_skip ;
 41886 0000418B E85A04                          call    skip_opt_line   ;
 41887 0000418E EBD7                            jmp	short copyblock_loop
 41888                                  
 41889                                  copyblock_skip:                 ;
 41890 00004190 E85504                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 41891 00004193 E87804                          call    get_char        ;
 41892 00004196 7208                            jc	short move_config ; hit eof
 41893 00004198 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 41894 0000419A 3C5B                            cmp     al,CONFIG_BEGIN ;
 41895 0000419C 74D0                            je	short copyblock_begin
 41896 0000419E EBF0                            jmp     short copyblock_skip ; anything else is just skipped
 41897                                  ;
 41898                                  ;   To create as little risk to the rest of SysInit as little as possible,
 41899                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 41900                                  ;   copy the new config.sys image to "confbot"
 41901                                  ;
 41902                                  move_config:
 41903 000041A0 89F9                            mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 41904 000041A2 51                              push    cx              ;
 41905                                  ;
 41906                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 41907                                  ;   since the configuration name only currently exists in the "confbot" area
 41908                                  ;
 41909                                   	;mov	cx,7
 41910 000041A3 B90700                  	mov     cx,szMenu-szBoot-1
 41911 000041A6 BE[BE4C]                        mov     si,szBoot	; first copy the CONFIG= part
 41912 000041A9 47                              inc     di              ; skip a byte, in case absolutely nothing
 41913                                                                  ; was copied to the workspace, because we always
 41914                                                                  ; zero the first byte of the workspace (below)
 41915                                  copy_boot: 
 41916                                  	;lods    byte ptr cs:[si];
 41917 000041AA 2E                              cs
 41918 000041AB AC                      	lodsb
 41919 000041AC 8805                    	mov     [di],al         ;
 41920 000041AE 47                              inc     di              ;
 41921 000041AF E2F9                            loop    copy_boot       ;
 41922                                  
 41923 000041B1 06                              push    es              ; then copy the configuration name
 41924                                          ;mov	cx,128-7	; put an upper limit on the name, to be safe
 41925                                  	; 04/01/2023
 41926 000041B2 B179                    	mov	cl,128-7
 41927 000041B4 2E8B36[884C]            	mov     si,[cs:offDefBlock]; ES:SI -> default block name
 41928 000041B9 09F6                            or      si,si           ; valid?
 41929 000041BB 7505                            jnz	short l1	; yes
 41930 000041BD 0E                              push    cs              ;
 41931 000041BE 07                              pop     es              ;
 41932 000041BF BE[CB4C]                        mov     si,szCommon
 41933 000041C2 268A04                  l1:     mov     al,[es:si]      ;
 41934 000041C5 E8B205                          call    any_delim       ;
 41935 000041C8 7406                            je	short l2	;
 41936 000041CA 8805                            mov     [di],al         ;
 41937 000041CC 46                              inc     si              ;
 41938 000041CD 47                              inc     di              ;
 41939 000041CE E2F2                            loop    l1              ;
 41940 000041D0 C6050A                  l2:     mov     byte [di],lf	; terminate the configuration string
 41941 000041D3 07                              pop     es              ;
 41942                                  
 41943                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 41944                                  
 41945 000041D4 29FF                            sub     di,di           ;
 41946 000041D6 2E893E[6019]                    mov     [cs:config_envlen],di
 41947 000041DB 29F6                            sub     si,si           ;
 41948 000041DD 59                              pop     cx              ; recover the size of "config_wrkseg"
 41949                                  
 41950 000041DE 51                              push    cx              ;
 41951 000041DF F3A4                            rep     movsb           ; moved!
 41952 000041E1 59                              pop     cx              ;
 41953 000041E2 8CD8                            mov     ax,ds           ;
 41954 000041E4 1F                              pop     ds              ;
 41955                                  
 41956                                  ;   Now that the config_wrkseg is available once again, we shall
 41957                                  ;   use it to create an environment. The first thing to go in will be
 41958                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 41959                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 41960                                  ;   is empty.
 41961                                  
 41962 000041E5 06                              push    es              ;
 41963 000041E6 8EC0                            mov     es,ax           ;
 41964 000041E8 46                              inc     si              ; ES:SI -> "CONFIG=configuration"
 41965 000041E9 26C606000000                    mov     byte [es:0],0	;empty the environment block
 41966 000041EF E82600                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 41967 000041F2 07                              pop     es
 41968                                  
 41969                                  ;   Before returning, restore the default video page setting but do NOT
 41970                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 41971                                  ;   displayed on a different page, then it's because we don't want to see
 41972                                  ;   all the device driver/TSR goop (which goes to the default page)
 41973                                  
 41974                                  menu_done:
 41975 000041F3 803E[7D4C]00                    cmp     byte [bMenuPage],0
 41976 000041F8 7415                            je	short menu_exit	;
 41977 000041FA 06                              push    es              ;
 41978 000041FB B84000                          mov     ax,40h          ;
 41979 000041FE 8EC0                            mov     es,ax           ;
 41980 00004200 A1[834C]                        mov     ax,[wCRTStart]  ;
 41981 00004203 26A34E00                        mov     [es:004Eh],ax   ;
 41982 00004207 A0[824C]                        mov     al,[bCRTPage]   ;
 41983 0000420A 26A26200                        mov     [es:0062h],al   ;
 41984 0000420E 07                              pop     es              ;
 41985                                  menu_exit:
 41986 0000420F 890E[5603]                      mov     [count],cx      ; set new counts
 41987 00004213 890E[5803]                      mov     [org_count],cx  ;
 41988                                          ; 10/09/2023 (*) - Erdogan Tan
 41989                                  	; MSDOS 6.21 IO.SYS - SYSINIT:46D3h
 41990                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:491Ah
 41991                                  	;sub	si,si           ; always return ES:SI pointing to config.sys
 41992 00004217 C3                      	retn
 41993                                  
 41994                                  ; (*) NOTE: MSDOS 6.0 source code (SYSINIT2.ASM) contains 'sub si,si' at this
 41995                                  ;	position (then 'retn' just after it)
 41996                                  ;	but MSDOS 6.21 and PCDOS 7.1 SYSINITs contain only 'retn' here.
 41997                                  
 41998                                  ;----------------------------------------------------------------------------
 41999                                  ;
 42000                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 42001                                  ;
 42002                                  ;   INPUT
 42003                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 42004                                  ;
 42005                                  ;   OUTPUT
 42006                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 42007                                  ;       carry set if error (eg, missing =); clear otherwise
 42008                                  ;
 42009                                  ;   OTHER REGS USED
 42010                                  ;       None
 42011                                  ;
 42012                                  ;   NOTES
 42013                                  ;       None
 42014                                  ;
 42015                                  ;   HISTORY
 42016                                  ;       Created 29-Mar-1992 by JeffPar
 42017                                  ;
 42018                                  ;----------------------------------------------------------------------------
 42019                                  
 42020                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 42021                                  	; (SYSINIT:46D4h)
 42022                                  
 42023                                  copy_envvar:
 42024 00004218 51                              push    cx              ;
 42025 00004219 56                              push    si              ;
 42026 0000421A 1E                              push    ds              ;
 42027 0000421B 06                              push    es              ;
 42028 0000421C 06                              push    es              ;
 42029 0000421D 8E06[6219]                      mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 42030 00004221 1F                              pop     ds                 ; DS:SI to point to envvar
 42031                                  
 42032                                  ;   Have to calculate the length of the variable name (and if we hit
 42033                                  ;   the end of the line before we hit '=', then it's curtains for this
 42034                                  ;   config.sys line)
 42035                                  ;
 42036                                  ;   The check for NULL is important because copy_envvar is also used to copy
 42037                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 42038                                  ;   menu block existed (in order to prevent the creation of an environment)
 42039                                  
 42040 00004222 29C9                            sub     cx,cx           ;
 42041                                  copy_varlen:                    ;
 42042 00004224 AC                              lodsb                   ;
 42043 00004225 08C0                            or      al,al           ; NULL?
 42044                                          ;stc	; 10/09/2023 (x)
 42045 00004227 746B                            jz	short copy_envexit ; yes, abort
 42046 00004229 3C0D                            cmp     al,cr           ;
 42047                                          ;stc	; 10/09/2023 (x)
 42048 0000422B 7467                            je	short copy_envexit
 42049 0000422D 3C0A                            cmp     al,lf           ;
 42050                                          ;stc	; 10/09/2023 (x)
 42051 0000422F 7463                            je	short copy_envexit
 42052 00004231 41                              inc     cx              ;
 42053 00004232 3C3D                            cmp     al,'='          ;
 42054 00004234 75EE                            jne	short copy_varlen
 42055 00004236 B000                            mov     al,0            ;
 42056 00004238 8A24                            mov     ah,[si]         ; save char after '='
 42057 0000423A 29CE                            sub     si,cx           ; back up to given varname
 42058 0000423C 49                              dec     cx              ; CX == # of bytes in varname
 42059 0000423D 29FF                            sub     di,di           ; start looking for DS:SI at ES:0
 42060                                  copy_varsrch:
 42061 0000423F 263805                          cmp     byte [es:di],al
 42062 00004242 7425                            je	short copy_envprep ; search failed, just copy var
 42063 00004244 89FB                            mov     bx,di           ; ES:BX -> start of this varname
 42064 00004246 51                              push    cx              ;
 42065 00004247 56                              push    si              ;
 42066 00004248 F3A6                            repe    cmpsb           ;
 42067 0000424A 5E                              pop     si              ;
 42068 0000424B 59                              pop     cx              ;
 42069 0000424C 7531                            jne	short copy_varnext ; no match, skip to next varname
 42070 0000424E 26803D3D                        cmp     byte [es:di],'='
 42071 00004252 752B                            jne     short copy_varnext ; no match, there's more characters
 42072                                  
 42073                                  ;   Previous occurrence of variable has been found; determine the
 42074                                  ;   entire length and then destroy it
 42075                                  
 42076 00004254 B9FFFF                          mov     cx,-1           ;
 42077 00004257 F2AE                            repne   scasb           ; guaranteed to get null (since we put it there)
 42078 00004259 56                              push    si              ;
 42079 0000425A 89FE                            mov     si,di           ;
 42080 0000425C 89DF                            mov     di,bx           ;
 42081 0000425E 2E8B0E[6019]                    mov     cx,[cs:config_envlen]
 42082 00004263 29F1                            sub     cx,si           ; destroy variable now
 42083                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 42084                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO.SYS - SYSINIT:4724h
 42085                                  
 42086 00004265 F3                      	rep	; 0F3h
 42087 00004266 26                      	es	; 26h
 42088 00004267 A4                      	movsb	; 0A4h
 42089                                  
 42090 00004268 5E                      	pop     si
 42091                                  copy_envprep:
 42092 00004269 80FC0D                          cmp     ah,cr          ; if there is nothing after the '='
 42093 0000426C 741D                            je	short copy_envdel ; then just exit with variable deleted
 42094 0000426E 80FC0A                          cmp     ah,lf           ;
 42095 00004271 7418                            je	short copy_envdel
 42096                                          ;jmp	short copy_envloop
 42097                                  	; 04/01/2023
 42098                                  copy_envloop:                  ;
 42099 00004273 AC                      	lodsb                   ;
 42100 00004274 3C0D                    	cmp	al,cr           ;
 42101 00004276 7410                    	je	short copy_envdone
 42102 00004278 3C0A                    	cmp	al,lf           ;
 42103 0000427A 740C                    	je	short copy_envdone
 42104 0000427C AA                      	stosb                   ;
 42105 0000427D EBF4                    	jmp	short copy_envloop
 42106                                  
 42107                                  copy_varnext:                   ;
 42108 0000427F 51                              push    cx              ;
 42109 00004280 B9FFFF                          mov     cx,-1           ;
 42110 00004283 F2AE                            repne   scasb           ;
 42111 00004285 59                              pop     cx              ;
 42112 00004286 EBB7                            jmp	short copy_varsrch
 42113                                  
 42114                                  	; 04/01/2023
 42115                                  ;copy_envloop:                  ;
 42116                                  ;	lodsb                   ;
 42117                                  ;	cmp	al,cr           ;
 42118                                  ;	je	short copy_envdone
 42119                                  ;	cmp	al,lf           ;
 42120                                  ;	je	short copy_envdone
 42121                                  ;	stosb                   ;
 42122                                  ;	jmp	short copy_envloop
 42123                                  
 42124                                  copy_envdone:                   ;
 42125 00004288 28C0                            sub     al,al           ; do SUB to clear carry as well
 42126 0000428A AA                              stosb                   ; always null-terminate these puppies
 42127                                  copy_envdel:                    ;
 42128 0000428B 268805                          mov     [es:di],al      ; and stick another null to terminate the env.
 42129 0000428E 2E893E[6019]                    mov     [cs:config_envlen],di
 42130                                  	; 10/09/2023 (x) - Erdogan Tan
 42131 00004293 F9                      	stc ; in order to clear carry flag via cmc (compact code trick!)
 42132                                  copy_envexit:                   ;
 42133 00004294 F5                      	cmc ; (x) ; reverse carry flag status (je -> cf=1)
 42134 00004295 07                              pop     es              ;
 42135 00004296 1F                              pop     ds              ;
 42136 00004297 5E                              pop     si              ;
 42137 00004298 59                              pop     cx              ;
 42138                                  
 42139                                  copy_done:	; 18/12/2022
 42140 00004299 C3                              retn
 42141                                  
 42142                                  ;----------------------------------------------------------------------------
 42143                                  ;
 42144                                  ;   copy_block:  copy the current block to the new config.sys workspace
 42145                                  ;
 42146                                  ;   INPUT
 42147                                  ;       CX == remaining bytes in "organized" config.sys memory image
 42148                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 42149                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 42150                                  ;             config.sys image) where the current block is to be copied
 42151                                  ;
 42152                                  ;   OUTPUT
 42153                                  ;       Same as above
 42154                                  ;       AL also equals the last character read from the organized image
 42155                                  ;
 42156                                  ;   OTHER REGS USED
 42157                                  ;       All
 42158                                  ;
 42159                                  ;   NOTES
 42160                                  ;       None
 42161                                  ;
 42162                                  ;   HISTORY
 42163                                  ;       Created 16-Mar-1992 by JeffPar
 42164                                  ;
 42165                                  ;----------------------------------------------------------------------------
 42166                                  
 42167                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 42168                                  	; (SYSINIT:4759h)
 42169                                  
 42170                                  copy_block:
 42171 0000429A E87103                          call    get_char        ; check for include
 42172 0000429D 72FA                            jc	short copy_done	;
 42173 0000429F 247F                    	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 42174 000042A1 3C5B                    	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 42175 000042A3 74F4                            je	short copy_done ;
 42176                                  
 42177 000042A5 3C4A                            cmp     al,CONFIG_INCLUDE ; 'J'
 42178 000042A7 88E0                            mov     al,ah           ; AL == the original line code
 42179 000042A9 753A                            jne	short copy_line	; not an "include" line
 42180                                  
 42181                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 42182                                  ;   never try to include the block again (no infinite include loops please),
 42183                                  ;   then search for the named block and call copy_block again.
 42184                                  
 42185 000042AB 26C644FF30                      mov     byte [es:si-1],CONFIG_REM ; '0'
 42186 000042B0 57                              push    di              ;
 42187                                  
 42188 000042B1 BF[C64C]                        mov     di,szMenu
 42189 000042B4 E8D400                          call    comp_names_safe ; don't allow INCLUDE MENU
 42190 000042B7 7426                            je	short copy_skip	;
 42191                                  
 42192 000042B9 BF[CB4C]                        mov     di,szCommon
 42193 000042BC E8CC00                          call    comp_names_safe ; don't allow INCLUDE COMMON
 42194 000042BF 741E                            je	short copy_skip	;
 42195                                  
 42196 000042C1 89F7                            mov     di,si           ; try to find the block
 42197 000042C3 E86400                          call    srch_block      ;
 42198 000042C6 89FA                            mov     dx,di           ;
 42199                                  	; 10/09/2023
 42200                                  	;pop    di              ;
 42201 000042C8 7514                            jne	short copy_error ; no such block
 42202 000042CA 5F                      	pop	di  ; 10/09/2023
 42203 000042CB 51                              push    cx              ;
 42204 000042CC 89D9                            mov     cx,bx           ;
 42205 000042CE 56                              push    si              ;
 42206 000042CF 4A                              dec     dx              ;
 42207 000042D0 89D6                            mov     si,dx           ;
 42208 000042D2 E80E03                          call    skip_line       ; skip the rest of the "block name" line
 42209 000042D5 E8C2FF                          call    copy_block      ; and copy in the rest of that block
 42210 000042D8 5E                              pop     si              ;
 42211 000042D9 59                              pop     cx              ;
 42212 000042DA 28C0                            sub     al,al           ; force skip_opt_line to skip...
 42213 000042DC EB2B                            jmp     short copy_nextline
 42214                                  
 42215                                  copy_error:
 42216                                  	; 10/09/2023
 42217 000042DE F8                      	clc
 42218                                  copy_skip:
 42219 000042DF 5F                              pop     di
 42220                                  ;copy_error:
 42221                                  	; 10/09/2023 (cf=0)
 42222                                  	;clc                    ;
 42223 000042E0 E80004                          call    print_error     ; note that carry is clear, no pause
 42224 000042E3 EB24                            jmp     short copy_nextline
 42225                                  
 42226                                  ;   Copy the line at ES:SI to the current location at DS:DI
 42227                                  
 42228                                  copy_line:
 42229 000042E5 8805                            mov     [di],al         ;
 42230 000042E7 47                              inc     di              ;
 42231 000042E8 3C20                            cmp     al,' '          ; is this is a "real" line with a "real" code?
 42232 000042EA 721D                            jb	short copy_nextline ; no
 42233 000042EC 2E803E[6519]00                  cmp     byte [cs:config_multi],0
 42234 000042F2 7409                            je	short copy_loop	; not a multi-config config.sys, don't embed #s
 42235 000042F4 E81700                          call    get_linenum	; BX == line # of line @ES:SI
 42236 000042F7 891D                            mov     [di],bx         ; stash it immediately following the line code
 42237 000042F9 47                              inc     di              ;
 42238 000042FA 47                              inc     di              ;
 42239 000042FB EB08                            jmp     short copy_next ;
 42240                                  copy_loop:                      ;
 42241 000042FD E80E03                          call    get_char        ;
 42242 00004300 7297                            jc	short copy_done ; end of file
 42243 00004302 8805                            mov     [di],al         ;
 42244 00004304 47                              inc     di              ;
 42245                                  copy_next:
 42246 00004305 3C0A                            cmp     al,lf ; 0Ah	; done with line?
 42247 00004307 75F4                            jne	short copy_loop	; nope
 42248                                  
 42249                                  copy_nextline:
 42250 00004309 E8DC02                          call    skip_opt_line   ;
 42251 0000430C EB8C                            jmp     short copy_block
 42252                                  
 42253                                  	; 18/12/2022
 42254                                  ;copy_done:
 42255                                          ;retn
 42256                                  
 42257                                  ;----------------------------------------------------------------------------
 42258                                  ;
 42259                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 42260                                  ;
 42261                                  ;   INPUT
 42262                                  ;    ES:SI -> some line in the config.sys memory image
 42263                                  ;
 42264                                  ;   OUTPUT
 42265                                  ;       BX == line # (relative to 1)
 42266                                  ;
 42267                                  ;   OTHER REGS USED
 42268                                  ;       DX
 42269                                  ;
 42270                                  ;   NOTES
 42271                                  ;       None
 42272                                  ;
 42273                                  ;   HISTORY
 42274                                  ;       Created 16-Mar-1992 by JeffPar
 42275                                  ;
 42276                                  ;----------------------------------------------------------------------------
 42277                                  
 42278                                  get_linenum:
 42279 0000430E 50                              push    ax              ;
 42280 0000430F 29DB                            sub     bx,bx           ; BX == line # (to be returned)
 42281 00004311 51                              push    cx              ;
 42282 00004312 89F2                            mov     dx,si           ; DX == the offset we're looking for
 42283 00004314 56                              push    si              ;
 42284 00004315 2E8B0E[5603]                    mov     cx,[cs:count]   ;
 42285 0000431A 29F6                            sub     si,si           ; prepare to scan entire file
 42286                                  get_linenum_loop:               ;
 42287 0000431C E8C402                          call    skip_line       ;
 42288 0000431F 7205                            jc	short get_linenum_done
 42289 00004321 43                              inc     bx              ;
 42290 00004322 39D6                            cmp     si,dx           ; have we exceeded the desired offset yet?
 42291 00004324 72F6                            jb	short get_linenum_loop ; no
 42292                                  get_linenum_done:               ;
 42293 00004326 5E                              pop     si              ;
 42294 00004327 59                              pop     cx              ;
 42295 00004328 58                              pop     ax              ;
 42296 00004329 C3                              retn
 42297                                  
 42298                                  ;----------------------------------------------------------------------------
 42299                                  ;
 42300                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 42301                                  ;
 42302                                  ;   INPUT
 42303                                  ;       ES -> config.sys image
 42304                                  ;    ES:DI -> block name to find
 42305                                  ;
 42306                                  ;   OUTPUT
 42307                                  ;       ZF flag set, if found
 42308                                  ;    ES:DI -> just past the name in the block heading, if found
 42309                                  ;       BX == # bytes remaining from that point, if found
 42310                                  ;
 42311                                  ;   OTHER REGS USED
 42312                                  ;       None
 42313                                  ;
 42314                                  ;   NOTES
 42315                                  ;       This differs from "find_block" in that it searches the ENTIRE
 42316                                  ;       config.sys image, not merely the remaining portion, and that it
 42317                                  ;       takes a pointer to block name that is *elsewhere* in the image
 42318                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 42319                                  ;
 42320                                  ;   HISTORY
 42321                                  ;       Created 16-Mar-1992 by JeffPar
 42322                                  ;
 42323                                  ;----------------------------------------------------------------------------
 42324                                  
 42325                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 42326 0000432A 50                              push    ax              ;
 42327 0000432B 51                              push    cx              ;
 42328 0000432C 2E8B0E[5603]                    mov     cx,[cs:count]   ;
 42329 00004331 56                              push    si              ;
 42330 00004332 29F6                            sub     si,si           ;
 42331 00004334 1E                              push    ds              ;
 42332 00004335 06                              push    es              ;
 42333 00004336 1F                              pop     ds              ;
 42334 00004337 E80900                          call    find_block      ;
 42335 0000433A 89F7                            mov     di,si           ;
 42336 0000433C 89CB                            mov     bx,cx           ;
 42337 0000433E 1F                              pop     ds              ;
 42338 0000433F 5E                              pop     si              ;
 42339 00004340 59                              pop     cx              ;
 42340 00004341 58                              pop     ax              ;
 42341                                  find_exit: ; 16/04/2019
 42342 00004342 C3                              retn			;
 42343                                  
 42344                                  ;----------------------------------------------------------------------------
 42345                                  ;
 42346                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 42347                                  ;
 42348                                  ;   INPUT
 42349                                  ;    DS:DI -> block name to find
 42350                                  ;    ES:SI -> remainder of config.sys image
 42351                                  ;       CX == remaining size of config.sys image
 42352                                  ;
 42353                                  ;   OUTPUT
 42354                                  ;       ZF flag set, if found (also, CF set if EOF)
 42355                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 42356                                  ;       CX == # bytes remaining from that point
 42357                                  ;
 42358                                  ;   OTHER REGS USED
 42359                                  ;       AX
 42360                                  ;
 42361                                  ;   NOTES
 42362                                  ;       This differs from "srch_block" in that it searches only the
 42363                                  ;       remaining portion of the config.sys image and leaves SI and CX
 42364                                  ;       pointing to where the search left off, and that it takes a pointer
 42365                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 42366                                  ;
 42367                                  ;   HISTORY
 42368                                  ;       Created 16-Mar-1992 by JeffPar
 42369                                  ;
 42370                                  ;----------------------------------------------------------------------------
 42371                                  
 42372                                  find_block:
 42373 00004343 E8C802                          call    get_char        ; get line code
 42374 00004346 72FA                            jc	short find_exit	; end of file
 42375 00004348 247F                            and     al,~CONFIG_OPTION_QUERY
 42376 0000434A 3C5B                            cmp     al,CONFIG_BEGIN ; beginning of a block?
 42377 0000434C 740C                            je	short check_line ; no
 42378 0000434E 3C4A                            cmp     al,CONFIG_INCLUDE
 42379 00004350 7513                            jne	short next_line	;
 42380 00004352 2E800E[6519]01                  or	byte [cs:config_multi],1
 42381 00004358 EB0B                            jmp     short next_line ;
 42382                                  check_line:
 42383 0000435A 2E800E[6519]01                  or      byte [cs:config_multi],1
 42384 00004360 E80700                          call    comp_names      ; compare block names
 42385 00004363 76DD                            jbe	short find_exit	; end of file, or names matched
 42386                                  next_line:
 42387 00004365 E88002                          call    skip_opt_line   ; no, so skip to next line
 42388 00004368 EBD9                            jmp	short find_block  ;
 42389                                  ;find_exit:
 42390                                  ;	retn
 42391                                  
 42392                                  ;----------------------------------------------------------------------------
 42393                                  ;
 42394                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 42395                                  ;
 42396                                  ;   INPUT
 42397                                  ;    DS:DI -> keyword to compare
 42398                                  ;    ES:SI -> position in config.sys
 42399                                  ;       CX == remaining bytes in config.sys
 42400                                  ;
 42401                                  ;   OUTPUT
 42402                                  ;       ZF flag set, if match (also, CF set if EOF)
 42403                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 42404                                  ;       CX == # bytes remaining from that point
 42405                                  ;
 42406                                  ;   OTHER REGS USED
 42407                                  ;       AX
 42408                                  ;
 42409                                  ;   NOTES
 42410                                  ;       None
 42411                                  ;
 42412                                  ;   HISTORY
 42413                                  ;       Created 16-Mar-1992 by JeffPar
 42414                                  ;
 42415                                  ;----------------------------------------------------------------------------
 42416                                  
 42417                                  comp_names:
 42418 0000436A 57                              push    di              ;
 42419                                  comp_loop:                      ;
 42420 0000436B E8A002                          call    get_char        ;
 42421 0000436E 7210                            jc	short comp_exit	;
 42422 00004370 E80704                          call    any_delim       ; is next character a delimiter?
 42423 00004373 8A25                            mov     ah,[di]         ; (get next character we're supposed to match)
 42424 00004375 740B                            je	short comp_almost ; yes, it *could* be a match
 42425 00004377 47                              inc     di              ;
 42426 00004378 25DFDF                          and     ax,~2020h ; 0DFDFh 
 42427                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 42428 0000437B 38E0                            cmp     al,ah           ; match?
 42429 0000437D 74EC                            je	short comp_loop ; yes, keep looking at the characters
 42430 0000437F F8                              clc                     ; prevent erroneous eof indication: clear carry
 42431                                  comp_exit:                      ;
 42432 00004380 5F                              pop     di              ;
 42433 00004381 C3                              retn			;
 42434                                  comp_almost:                    ;
 42435 00004382 86C4                            xchg    al,ah           ; we don't know for sure if it's a match
 42436 00004384 E8F303                          call    any_delim       ; until we verify that the second string has
 42437 00004387 86C4                            xchg    al,ah           ; been exhausted also...
 42438 00004389 EBF5                            jmp     short comp_exit ; if we are, this call to any_delim will tell...
 42439                                  
 42440                                  ;----------------------------------------------------------------------------
 42441                                  
 42442                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 42443                                  comp_names_x:
 42444                                  	;
 42445                                  comp_names_safe:
 42446 0000438B 50                              push    ax
 42447 0000438C 51                              push    cx
 42448 0000438D 56                              push	si
 42449 0000438E 1E                              push    ds
 42450 0000438F 0E                              push    cs
 42451 00004390 1F                              pop     ds
 42452 00004391 E8D6FF                          call    comp_names
 42453 00004394 1F                              pop     ds
 42454 00004395 5E                      	pop	si
 42455 00004396 59                              pop     cx
 42456 00004397 58                              pop     ax
 42457 00004398 C3                              retn
 42458                                  
 42459                                  ;----------------------------------------------------------------------------
 42460                                  ;
 42461                                  ;   print_item:  display menu item #BL
 42462                                  ;
 42463                                  ;   INPUT
 42464                                  ;       BL == menu item # to display
 42465                                  ;
 42466                                  ;   OUTPUT
 42467                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 42468                                  ;
 42469                                  ;   OTHER REGS USED
 42470                                  ;       None
 42471                                  ;
 42472                                  ;   NOTES
 42473                                  ;       This function saves/restores the current cursor position, so you
 42474                                  ;       needn't worry about it.
 42475                                  ;
 42476                                  ;   HISTORY
 42477                                  ;       Created 16-Mar-1992 by JeffPar
 42478                                  ;
 42479                                  ;----------------------------------------------------------------------------
 42480                                  
 42481                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 42482                                  	; (SYSINIT:485Ah)
 42483                                  
 42484                                  print_item:		; prints menu item #BL (1 to N)
 42485 00004399 50                              push    ax              ;
 42486 0000439A 53                              push    bx              ;
 42487 0000439B 51                              push    cx              ;
 42488 0000439C 52                              push    dx              ;
 42489 0000439D 56                              push    si              ;
 42490 0000439E B403                            mov     ah,03h          ; get cursor position
 42491 000043A0 8A3E[7D4C]                      mov     bh,[bMenuPage]  ; always page zero
 42492 000043A4 CD10                            int     10h             ; DH/DL = row/column
 42493 000043A6 52                              push    dx              ; save it
 42494 000043A7 B402                            mov     ah,02h          ; set cursor position
 42495 000043A9 88DE                            mov     dh,bl           ;
 42496 000043AB 80C603                          add     dh,3            ;
 42497 000043AE B205                            mov     dl,5            ;
 42498 000043B0 CD10                            int     10h             ; set cursor position for correct row/col
 42499 000043B2 88D8                            mov     al,bl           ;
 42500 000043B4 0430                            add     al,'0'          ; convert menu item # to ASCII digit
 42501 000043B6 8A26[7C4C]                      mov     ah,[bMenuColor] ; normal attribute
 42502 000043BA 3A1E[864C]                      cmp     bl,[bDefBlock]  ; are we printing the current block?
 42503 000043BE 7510                            jne	short print_other ; no
 42504 000043C0 80CC70                          or      ah,70h          ; yes, set bgnd color to white
 42505 000043C3 88E5                            mov     ch,ah           ;
 42506 000043C5 B104                            mov     cl,4            ;
 42507 000043C7 D2C5                            rol     ch,cl           ;
 42508 000043C9 38E5                            cmp     ch,ah           ; are fgnd/bgnd the same?
 42509 000043CB 7503                            jne	short print_other ; no
 42510 000043CD 80F408                          xor     ah,08h          ; yes, so modify the fgnd intensity
 42511                                  print_other:                    ;
 42512 000043D0 B700                            mov     bh,0            ;
 42513 000043D2 01DB                            add     bx,bx           ;
 42514 000043D4 8BBF[AA4C]                      mov     di,[aoffBlockDesc+bx]
 42515 000043D8 88E3                            mov     bl,ah           ; put the attribute in the correct register now
 42516 000043DA 8A3E[7D4C]                      mov     bh,[bMenuPage]  ; get correct video page #
 42517 000043DE B409                            mov     ah,09h          ; write char/attr
 42518 000043E0 B90100                          mov     cx,1            ;
 42519 000043E3 CD10                            int     10h             ;
 42520 000043E5 FEC2                            inc     dl              ; increment column
 42521 000043E7 B402                            mov     ah,02h          ;
 42522 000043E9 CD10                            int     10h             ;
 42523                                          ;mov	ax,0900h+'.'    ;
 42524 000043EB B82E09                          mov	ax,092Eh
 42525 000043EE CD10                    	int     10h             ; display '.'
 42526 000043F0 FEC2                            inc     dl              ; increment column
 42527 000043F2 B402                            mov     ah,02h          ;
 42528 000043F4 CD10                            int     10h             ;
 42529                                          ;mov	ax,0900h+' '    ;
 42530 000043F6 B82009                          mov	ax,0920h
 42531 000043F9 CD10                    	int     10h             ; display ' '
 42532 000043FB FEC2                            inc     dl              ; increment column
 42533 000043FD B402                            mov     ah,02h          ;
 42534 000043FF CD10                            int     10h             ;
 42535 00004401 06                              push    es              ;
 42536                                  print_loop:                     ;
 42537 00004402 268A05                          mov     al,[es:di]	; get a character of the description
 42538 00004405 47                              inc     di              ;
 42539 00004406 3C09                            cmp     al,TAB ; 9	; substitute spaces for tabs
 42540 00004408 7502                            jne	short print_nontab ;
 42541 0000440A B020                            mov     al,' '          ;
 42542                                  print_nontab:                   ;
 42543 0000440C 3C20                            cmp     al,' '          ;
 42544 0000440E 7215                            jb	short print_done ; stop at the 1st character < space
 42545 00004410 3C24                            cmp     al,'$'          ;
 42546 00004412 7411                            je	short print_done ; also stop on $
 42547 00004414 B409                            mov     ah,09h          ; display function #
 42548 00004416 CD10                            int     10h             ;
 42549 00004418 FEC2                            inc     dl              ; increment column
 42550 0000441A 80FA4E                          cmp     dl,78           ; far enough?
 42551 0000441D 7306                            jae	short print_done ; yes
 42552 0000441F B402                            mov     ah,02h          ;
 42553 00004421 CD10                            int     10h             ;
 42554 00004423 EBDD                            jmp	short  print_loop
 42555                                  print_done:                     ;
 42556 00004425 07                              pop     es              ;
 42557 00004426 5A                              pop     dx              ;
 42558 00004427 B402                            mov     ah,02h          ;
 42559 00004429 CD10                            int     10h             ; restore previous row/col
 42560 0000442B 5E                              pop     si              ;
 42561 0000442C 5A                              pop     dx              ;
 42562 0000442D 59                              pop     cx              ;
 42563 0000442E 5B                              pop     bx              ;
 42564 0000442F 58                              pop     ax              ;
 42565 00004430 C3                              retn			;
 42566                                  
 42567                                  ;----------------------------------------------------------------------------
 42568                                  ;
 42569                                  ;   select_item:  wait for user to select menu item, with time-out
 42570                                  ;
 42571                                  ;   INPUT
 42572                                  ;       None
 42573                                  ;
 42574                                  ;   OUTPUT
 42575                                  ;       BX == menu item # (1-N), or -1 for clean boot
 42576                                  ;       Selected menu item highlighted
 42577                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 42578                                  ;
 42579                                  ;   OTHER REGS USED
 42580                                  ;       None
 42581                                  ;
 42582                                  ;   NOTES
 42583                                  ;       None
 42584                                  ;
 42585                                  ;   HISTORY
 42586                                  ;       Created 16-Mar-1992 by JeffPar
 42587                                  ;
 42588                                  ;----------------------------------------------------------------------------
 42589                                  
 42590                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 42591 00004431 8A1E[864C]                      mov     bl,[bDefBlock]  ; BL will be the default block #
 42592 00004435 88D8                            mov     al,bl           ;
 42593 00004437 E83701                          call    disp_num        ;
 42594 0000443A E84401                          call    show_status     ; display current interactive status
 42595 0000443D 803E[8A4C]FF                    cmp     byte [secTimeOut],-1
 42596 00004442 7452                            je	short input_key	; no time-out, just go to input
 42597 00004444 B42C                            mov     ah,GET_TIME ; 2Ch
 42598 00004446 CD21                            int     21h             ;
 42599 00004448 88F7                            mov     bh,dh           ; BH = initial # of seconds
 42600                                  check_time:
 42601 0000444A A0[8A4C]                        mov     al,[secTimeOut] ;
 42602 0000444D 2A06[8B4C]                      sub     al,[secElapsed] ;
 42603 00004451 730D                            jae	short show_time	;
 42604 00004453 800E[854C]02                    or      byte [bQueryOpt],2  ; disable all further prompting
 42605 00004458 C606[8B4C]00                    mov     byte [secElapsed],0
 42606 0000445D E9F600                          jmp	select_done	; time's up!
 42607                                  show_time:
 42608 00004460 53                              push    bx              ;
 42609 00004461 88C3                            mov     bl,al           ; save # in BL
 42610 00004463 8A3E[7D4C]                      mov     bh,[bMenuPage]  ;
 42611 00004467 B403                            mov     ah,03h          ; get cursor position
 42612 00004469 CD10                            int     10h             ;
 42613 0000446B 52                              push    dx              ;
 42614 0000446C 80C208                  	add	dl,8		; move cursor to the right
 42615 0000446F B402                            mov     ah,02h          ; set cursor position
 42616 00004471 CD10                            int     10h             ;
 42617 00004473 BA[2753]                        mov     dx,_$TimeOut
 42618 00004476 E8DB05                          call    print           ; print the "Time remaining: " prompt
 42619 00004479 88D8                            mov     al,bl           ; recover # from BL
 42620 0000447B 98                              cbw                     ; this works because AL is always <= 90
 42621 0000447C B10A                            mov     cl,10           ;
 42622 0000447E F6F1                            div     cl              ; AL = tens digit, AH = ones digit
 42623 00004480 88E1                            mov     cl,ah           ;
 42624 00004482 0430                            add     al,'0'          ;
 42625 00004484 B40E                            mov     ah,0Eh          ;
 42626 00004486 CD10                            int     10h             ; write TTY tens digit
 42627 00004488 88C8                            mov     al,cl           ;
 42628 0000448A 0430                            add     al,'0'          ;
 42629 0000448C B40E                            mov     ah,0Eh          ;
 42630 0000448E CD10                            int     10h             ; write TTY ones digit
 42631 00004490 5A                              pop     dx
 42632 00004491 B402                            mov     ah,02h          ; set cursor position back to where it was
 42633 00004493 CD10                            int     10h             ;
 42634 00004495 5B                              pop     bx              ;
 42635                                  input_key:
 42636 00004496 B406                            mov     ah,RAW_CON_IO ; 6
 42637 00004498 B2FF                            mov     dl,0FFh         ; input request
 42638 0000449A CD21                            int     21h             ;
 42639 0000449C 751F                            jnz	short got_key	;
 42640 0000449E 803E[8A4C]FF                    cmp     byte [secTimeOut],-1; is there a time-out?
 42641 000044A3 74F1                            je	short input_key	; no, just go back to input
 42642 000044A5 B42C                            mov     ah,GET_TIME     ;
 42643 000044A7 CD21                            int     21h             ; DH = seconds
 42644 000044A9 88F4                            mov     ah,dh           ;
 42645 000044AB 28FE                            sub     dh,bh           ; should generally be zero or one
 42646 000044AD 88E7                            mov     bh,ah           ;
 42647 000044AF 7302                            jnc	short got_time	;
 42648 000044B1 B601                            mov     dh,1            ; it wrapped back to zero, so assume one
 42649                                  got_time:
 42650 000044B3 08F6                            or      dh,dh           ; any change?
 42651 000044B5 74DF                            jz	short input_key	; no
 42652 000044B7 0036[8B4C]                      add     [secElapsed],dh ;
 42653 000044BB EB8D                            jmp	short check_time ;
 42654                                  got_key:
 42655 000044BD 50                              push    ax              ;
 42656 000044BE B8FFFF                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 42657 000044C1 8706[8A4C]                      xchg    [secTimeOut],ax
 42658 000044C5 3CFF                            cmp     al,-1           ; was time-out already disabled?
 42659 000044C7 740E                            je	short timeout_disabled ; yes
 42660 000044C9 53                              push    bx              ; let's disable # seconds display
 42661 000044CA B8200A                          mov     ax,0A20h        ; write multiple spaces
 42662 000044CD 8B1E[7C4C]                      mov     bx,[bMenuColor]
 42663 000044D1 B95000                          mov     cx,80           ; 80 of them, to be safe
 42664 000044D4 CD10                            int     10h             ; to completely obliterate # seconds display
 42665 000044D6 5B                              pop     bx   		;
 42666                                  
 42667                                  timeout_disabled:
 42668 000044D7 58                              pop     ax              ;
 42669 000044D8 08C0                            or      al,al           ; extended key pressed?
 42670 000044DA 755A                            jnz	short normal_key ; no
 42671 000044DC CD21                            int     21h             ; get the next part of the key then
 42672 000044DE 74B6                            jz	short input_key	; hmmm, what happened to the second part?
 42673                                  
 42674 000044E0 3C48                            cmp     al,48h          ; up arrow?
 42675 000044E2 7510                            jne	short not_up	; no
 42676 000044E4 80FB01                          cmp     bl,1            ; are we as up as up can get?
 42677 000044E7 76AD                            jbe	short input_key	; yes, ignore it
 42678 000044E9 FE0E[864C]                      dec     byte [bDefBlock] ;
 42679 000044ED E8A9FE                          call    print_item      ; re-print the current item
 42680 000044F0 FECB                            dec     bl              ; and then print the new current item
 42681 000044F2 EB12                            jmp     short print1
 42682                                  not_up:
 42683 000044F4 3C50                            cmp     al,50h          ; down arrow?
 42684 000044F6 7518                            jne	short not_down	; no
 42685 000044F8 3A1E[874C]                      cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 42686 000044FC 7310                            jae	short to_input_key ; yes, ignore it
 42687 000044FE FE06[864C]                      inc     byte [bDefBlock] ;
 42688 00004502 E894FE                          call    print_item      ; re-print the current item
 42689 00004505 43                              inc     bx              ; and then print the new current item
 42690                                  print1: 
 42691 00004506 88D8                    	mov     al,bl           ;
 42692                                  print2: 
 42693 00004508 E88EFE                  	call    print_item      ;
 42694 0000450B E86300                          call    disp_num        ;
 42695                                  to_input_key:
 42696 0000450E EB86                            jmp	short input_key ; 10/09/2023
 42697                                  not_down:
 42698 00004510 F606[814C]01                    test    byte [bDisableUI],1
 42699 00004515 75F7                            jnz	short to_input_key ; don't allow F8 or F5
 42700 00004517 3C42                            cmp     al,42h          ; F8 function key?
 42701 00004519 750B                            jne	short not_f8	; no
 42702 0000451B 8036[854C]01                    xor     byte [bQueryOpt],1
 42703 00004520 E85E00                          call    show_status     ;
 42704 00004523 E970FF                          jmp     input_key	;
 42705                                  not_f8:
 42706 00004526 3C3F                            cmp     al,3Fh          ; F5 function key?
 42707 00004528 75E4                            jne	short to_input_key ; no
 42708                                  	; 02/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42709                                  	; MSDOS 6.21 IO.SYS - SYSINIT:49EBh
 42710                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4C32h)
 42711 0000452A 800E[854C]04            	or	byte [bQueryOpt],4 ; no more queries
 42712 0000452F BBFFFF                          mov     bx,-1           ; special return code (-1) indicating clean boot
 42713 00004532 B020                            mov     al,' '          ; don't want to display anything really;
 42714 00004534 EB26                            jmp     short disp_input ; just want to display the cr/lf sequence...
 42715                                  
 42716                                  normal_key:
 42717 00004536 3C0D                            cmp     al,0Dh          ; Enter?
 42718 00004538 741C                            je	short select_done ; yes
 42719 0000453A 3C08                            cmp     al,08h          ; backspace?
 42720 0000453C 7504                            jne	short not_backspace ; no
 42721 0000453E BBFEFF                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 42722 00004541 C3                              retn			;
 42723                                  not_backspace:
 42724 00004542 2C30                            sub     al,'0'          ; is greater than '0'?
 42725 00004544 76C8                            jbe	short to_input_key ; no
 42726 00004546 3A06[874C]                      cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 42727 0000454A 77C2                            ja	short to_input_key ; no
 42728 0000454C A2[864C]                        mov	[bDefBlock],al  ;
 42729 0000454F E847FE                          call    print_item      ; redisplay the current selection
 42730 00004552 88C3                            mov     bl,al           ; set new selection
 42731 00004554 EBB2                            jmp	short print2
 42732                                  
 42733                                  select_done:
 42734 00004556 B700                            mov     bh,0            ; return a full 16-bit value (for indexing)
 42735 00004558 88D8                            mov     al,bl           ;
 42736 0000455A 0430                            add     al,'0'          ; convert it into a digit, then display it
 42737                                  
 42738                                  	; fall into disp_input
 42739                                  
 42740                                  ; 16/04/2019 - Retro DOS v4.0
 42741                                  
 42742                                  ;----------------------------------------------------------------------------
 42743                                  ;
 42744                                  ;   disp_input:  display a single character + cr/lf
 42745                                  ;
 42746                                  ;   INPUT
 42747                                  ;       AL == character to display
 42748                                  ;
 42749                                  ;   OUTPUT
 42750                                  ;       None
 42751                                  ;
 42752                                  ;   OTHER REGS USED
 42753                                  ;       None
 42754                                  ;
 42755                                  ;   NOTES
 42756                                  ;       This function is used not only for the menu input selection but
 42757                                  ;       also for the interactive line prompting (the y/n/a thing).
 42758                                  ;
 42759                                  ;   HISTORY
 42760                                  ;       Created 16-Mar-1992 by JeffPar
 42761                                  ;
 42762                                  ;----------------------------------------------------------------------------
 42763                                  
 42764                                  
 42765                                  disp_input:
 42766 0000455C 50                      	push	ax
 42767                                  	;cmp	al,' '
 42768                                  	;jae	short disp_ok
 42769                                  	;mov	al,' '
 42770                                  	; 10/09/2023 - Retro DOS v4.2 IO:SYS (Optimization)
 42771 0000455D B220                    	mov	dl,' ' ; 20h
 42772 0000455F 38D0                    	cmp	al,dl
 42773 00004561 7602                    	jna	short disp_input_ok
 42774                                  disp_ok:
 42775 00004563 88C2                    	mov	dl,al
 42776                                  disp_input_ok:
 42777 00004565 B402                    	mov	ah,STD_CON_OUTPUT ; 2
 42778 00004567 CD21                    	int	21h
 42779 00004569 BA[7050]                	mov	dx,crlfm
 42780 0000456C E8E504                  	call	print
 42781 0000456F 58                      	pop	ax
 42782 00004570 C3                      	retn
 42783                                  
 42784                                  ;----------------------------------------------------------------------------
 42785                                  
 42786                                  disp_num:
 42787 00004571 53                              push    bx
 42788 00004572 0430                            add     al,'0'
 42789 00004574 B40A                            mov     ah,0Ah
 42790 00004576 8B1E[7C4C]                      mov     bx,[bMenuColor]
 42791 0000457A B90100                          mov     cx,1
 42792 0000457D CD10                            int     10h
 42793 0000457F 5B                              pop     bx
 42794 00004580 C3                              retn
 42795                                  
 42796                                  ;----------------------------------------------------------------------------
 42797                                  ;
 42798                                  ;   show_status:  display current interactive mode setting (on/off/none)
 42799                                  ;
 42800                                  ;   INPUT
 42801                                  ;       None
 42802                                  ;
 42803                                  ;   OUTPUT
 42804                                  ;       None
 42805                                  ;
 42806                                  ;   OTHER REGS USED
 42807                                  ;       None
 42808                                  ;
 42809                                  ;   NOTES
 42810                                  ;       None
 42811                                  ;
 42812                                  ;   HISTORY
 42813                                  ;       Created 16-Mar-1992 by JeffPar
 42814                                  ;
 42815                                  ;----------------------------------------------------------------------------
 42816                                  
 42817                                  show_status:
 42818 00004581 53                              push    bx              ; BL = video page #
 42819 00004582 8B1E[7C4C]                      mov     bx,[bMenuColor]
 42820 00004586 B403                            mov     ah,03h          ; get cursor position
 42821 00004588 CD10                            int     10h             ;
 42822 0000458A 52                              push    dx              ; save it
 42823 0000458B B402                            mov     ah,02h          ; set cursor position
 42824 0000458D 8B16[7F4C]                      mov     dx,[bLastCol]   ; set correct row/col
 42825 00004591 F606[814C]01                    test    byte [bDisableUI],1
 42826 00004596 740C                            jz	short show_onoff ; just show on/off
 42827 00004598 B200                            mov     dl,0            ;
 42828 0000459A CD10                            int     10h             ;
 42829 0000459C B8200A                          mov     ax,0A20h        ; write multiple spaces
 42830 0000459F B95000                          mov     cx,80           ; 80 of them, to be exact
 42831                                  	; 10/09/2023
 42832                                  	;int	10h             ; to obliterate the status line
 42833 000045A2 EB11                            jmp     short show_done ;
 42834                                  show_onoff: 
 42835 000045A4 CD10                            int     10h
 42836                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 42837                                  		; AL = character, BH = display page - alpha mode
 42838                                  		; BL = color of character (graphics mode, PCjr only)
 42839                                  		; CX = number of times to write character
 42840                                  
 42841 000045A6 A0[2353]                        mov     al,[_$NO]	; assume OFF
 42842 000045A9 803E[854C]01                    cmp     byte [bQueryOpt],1 ; is interactive mode on?
 42843 000045AE 7503                            jne	short show_noton ; no
 42844 000045B0 A0[1F53]                        mov     al,[_$YES]	; yes
 42845                                  show_noton:                     ;
 42846 000045B3 B40E                            mov     ah,0Eh          ; write TTY
 42847                                  show_done:	; 10/09/2023
 42848 000045B5 CD10                            int     10h             ;
 42849                                  ;show_done:                     ;
 42850 000045B7 5A                              pop     dx              ;
 42851 000045B8 B402                            mov     ah,02h          ;
 42852 000045BA CD10                            int     10h             ; restore original cursor position
 42853 000045BC 5B                              pop     bx              ;
 42854 000045BD C3                              retn			;
 42855                                  
 42856                                  ; 16/04/2019 - Retro DOS v4.0
 42857                                  
 42858                                  ;----------------------------------------------------------------------------
 42859                                  ;
 42860                                  ;   skip_token: advances ES:SI/CX past the current token
 42861                                  ;
 42862                                  ;   INPUT
 42863                                  ;    ES:SI -> position in config.sys
 42864                                  ;       CX == remaining bytes in config.sys
 42865                                  ;
 42866                                  ;   OUTPUT
 42867                                  ;       CF set if EOL/EOF hit
 42868                                  ;       AL == 1st char of delimiter
 42869                                  ;    ES:SI -> just past the delimiter
 42870                                  ;       CX == # bytes remaining from that point
 42871                                  ;
 42872                                  ;   OTHER REGS USED
 42873                                  ;       AX
 42874                                  ;
 42875                                  ;   NOTES
 42876                                  ;       None
 42877                                  ;
 42878                                  ;   HISTORY
 42879                                  ;       Created 16-Mar-1992 by JeffPar
 42880                                  ;
 42881                                  ;----------------------------------------------------------------------------
 42882                                  
 42883                                  skip_token:
 42884 000045BE E84D00                          call    get_char
 42885 000045C1 7210                            jc	short skip_token_done
 42886 000045C3 E8B401                          call    any_delim
 42887 000045C6 75F6                            jne	short skip_token
 42888                                  skip_check_eol:
 42889 000045C8 3C0D                            cmp     al,cr ; 0Dh
 42890 000045CA 7406                            je	short skip_token_eol
 42891 000045CC 3C0A                            cmp     al,lf ; 0Ah
 42892 000045CE 7402                            je	short skip_token_eol
 42893 000045D0 F8                              clc
 42894                                          ;jmp	short skip_token_done
 42895 000045D1 C3                      	retn
 42896                                  skip_token_eol:
 42897 000045D2 F9                              stc
 42898                                  skip_token_done:
 42899 000045D3 C3                              retn
 42900                                  
 42901                                  ;----------------------------------------------------------------------------
 42902                                  ;
 42903                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 42904                                  ;
 42905                                  ;   INPUT
 42906                                  ;    ES:SI -> position in config.sys
 42907                                  ;       CX == remaining bytes in config.sys
 42908                                  ;
 42909                                  ;   OUTPUT
 42910                                  ;       CF set if EOF hit
 42911                                  ;       AL == 1st char of token
 42912                                  ;    ES:SI -> just past the token
 42913                                  ;       CX == # bytes remaining from that point
 42914                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 42915                                  ;
 42916                                  ;   OTHER REGS USED
 42917                                  ;       AX
 42918                                  ;
 42919                                  ;   NOTES
 42920                                  ;       None
 42921                                  ;
 42922                                  ;   HISTORY
 42923                                  ;       Created 16-Mar-1992 by JeffPar
 42924                                  ;
 42925                                  ;----------------------------------------------------------------------------
 42926                                  
 42927                                  skip_delim:	; returns carry set if eol/eof
 42928 000045D4 E83700                          call    get_char        ;
 42929 000045D7 8D5CFF                          lea     bx,[si-1]       ; also returns BX -> next token
 42930 000045DA 72F7                            jc	short skip_token_done ;
 42931 000045DC E8AB01                          call    delim           ;
 42932 000045DF 74F3                            je	short skip_delim ;
 42933 000045E1 EBE5                            jmp	short skip_check_eol  ; 13/05/2019
 42934                                  
 42935                                  ;----------------------------------------------------------------------------
 42936                                  ;
 42937                                  ;   skip_opt_line: same as skip_line provided AL != LF
 42938                                  ;
 42939                                  ;   INPUT
 42940                                  ;       AL == last character read
 42941                                  ;    ES:SI -> position in config.sys
 42942                                  ;       CX == remaining bytes in config.sys
 42943                                  ;
 42944                                  ;   OUTPUT
 42945                                  ;       CF set if EOF hit
 42946                                  ;       AL == 1st char of new line
 42947                                  ;    ES:SI -> just past 1st char of new line
 42948                                  ;       CX == # bytes remaining from that point
 42949                                  ;
 42950                                  ;   OTHER REGS USED
 42951                                  ;       AX
 42952                                  ;
 42953                                  ;   NOTES
 42954                                  ;       In other words, the purpose here is to skip to the next line,
 42955                                  ;       unless ES:SI is already sitting at the front of the next line (which
 42956                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 42957                                  ;
 42958                                  ;   HISTORY
 42959                                  ;       Created 16-Mar-1992 by JeffPar
 42960                                  ;
 42961                                  ;----------------------------------------------------------------------------
 42962                                  
 42963                                  ; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42964                                  ;skip_opt_line:
 42965                                  ;	cmp     al,lf ; 0Ah
 42966                                  ;	je	short skip_line_done
 42967                                       
 42968                                  	; fall into skip_line
 42969                                  
 42970                                  ;----------------------------------------------------------------------------
 42971                                  ;
 42972                                  ;   skip_line: skip to the next line
 42973                                  ;
 42974                                  ;   INPUT
 42975                                  ;    ES:SI -> position in config.sys
 42976                                  ;       CX == remaining bytes in config.sys
 42977                                  ;
 42978                                  ;   OUTPUT
 42979                                  ;       CF set if EOF hit
 42980                                  ;    ES:SI -> just past 1st char of new line
 42981                                  ;       CX == # bytes remaining from that point
 42982                                  ;
 42983                                  ;   OTHER REGS USED
 42984                                  ;       AX
 42985                                  ;
 42986                                  ;   NOTES
 42987                                  ;       None
 42988                                  ;
 42989                                  ;   HISTORY
 42990                                  ;       Created 16-Mar-1992 by JeffPar
 42991                                  ;
 42992                                  ;----------------------------------------------------------------------------
 42993                                  
 42994                                  skip_line:
 42995 000045E3 E82800                          call    get_char
 42996 000045E6 7204                            jc	short skip_line_done
 42997                                  skip_opt_line:	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42998 000045E8 3C0A                            cmp     al,lf ; 0Ah
 42999 000045EA 75F7                            jne	short skip_line
 43000                                  skip_line_done:
 43001                                  num_done:	; 18/12/2022
 43002 000045EC C3                              retn
 43003                                  
 43004                                  ;----------------------------------------------------------------------------
 43005                                  ;
 43006                                  ;   get_number: return binary equivalent of numeric string
 43007                                  ;
 43008                                  ;   INPUT
 43009                                  ;    ES:SI -> position in config.sys
 43010                                  ;       CX == remaining bytes in config.sys
 43011                                  ;
 43012                                  ;   OUTPUT
 43013                                  ;       AL == non-digit encountered
 43014                                  ;       BX == binary #
 43015                                  ;    ES:SI -> just past 1st non-digit
 43016                                  ;       CX == # bytes remaining from that point
 43017                                  ;
 43018                                  ;   OTHER REGS USED
 43019                                  ;       AX
 43020                                  ;
 43021                                  ;   NOTES
 43022                                  ;       None
 43023                                  ;
 43024                                  ;   HISTORY
 43025                                  ;       Created 16-Mar-1992 by JeffPar
 43026                                  ;
 43027                                  ;----------------------------------------------------------------------------
 43028                                  
 43029                                  ; 13/05/2019
 43030                                  
 43031                                  get_number:
 43032 000045ED 29DB                            sub     bx,bx           ; BX = result
 43033                                  num_loop:
 43034 000045EF E81C00                          call    get_char        ;
 43035 000045F2 72F8                            jc	short num_done	;
 43036 000045F4 3C30                            cmp     al,'0'          ; convert to value
 43037 000045F6 72F4                            jb	short num_done	; no more number
 43038 000045F8 3C39                            cmp     al,'9'          ;
 43039 000045FA 77F0                            ja	short num_done	;
 43040 000045FC 50                              push    ax              ;
 43041 000045FD B80A00                          mov     ax,10           ;
 43042 00004600 52                              push    dx              ;
 43043 00004601 F7E3                            mul     bx              ;
 43044 00004603 5A                              pop     dx              ;
 43045 00004604 89C3                            mov     bx,ax           ;
 43046 00004606 58                              pop     ax              ;
 43047 00004607 2C30                            sub     al,'0'          ;
 43048 00004609 98                              cbw                     ;
 43049 0000460A 01C3                            add     bx,ax           ;
 43050 0000460C EBE1                            jmp	short num_loop	;
 43051                                  
 43052                                  	; 18/12/2022
 43053                                  ;num_done:
 43054                                          ;retn
 43055                                  
 43056                                  ;----------------------------------------------------------------------------
 43057                                  ;
 43058                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 43059                                  ;
 43060                                  ;   INPUT
 43061                                  ;    ES:SI -> position in config.sys
 43062                                  ;       CX == remaining bytes in config.sys
 43063                                  ;
 43064                                  ;   OUTPUT
 43065                                  ;       AL == next character
 43066                                  ;    ES:SI -> just past next character
 43067                                  ;       CX == # bytes remaining from that point
 43068                                  ;
 43069                                  ;   OTHER REGS USED
 43070                                  ;       AX
 43071                                  ;
 43072                                  ;   NOTES
 43073                                  ;       None
 43074                                  ;
 43075                                  ;   HISTORY
 43076                                  ;       Created 16-Mar-1992 by JeffPar
 43077                                  ;
 43078                                  ;----------------------------------------------------------------------------
 43079                                  
 43080                                  get_char:
 43081 0000460E 83E901                          sub     cx,1            ; use SUB to set carry,zero
 43082 00004611 7205                            jb	short get_fail	; out of data
 43083                                          ;lods	byte ptr es:[si] ;
 43084 00004613 26                      	es	
 43085 00004614 AC                      	lodsb
 43086 00004615 88C4                            mov     ah,al           ;
 43087 00004617 C3                              retn			;
 43088                                  get_fail:                       ; restore CX to zero
 43089 00004618 B90000                          mov     cx,0            ; leave carry set, zero not set
 43090                                  nearby_ret:
 43091 0000461B C3                              retn
 43092                                  
 43093                                  ;----------------------------------------------------------------------------
 43094                                  ;
 43095                                  ;   query_user: ask user whether to execute current config.sys command
 43096                                  ;
 43097                                  ;   INPUT
 43098                                  ;       AL == current command code
 43099                                  ;    ES:SI -> current command line in config.sys
 43100                                  ;    config_cmd == current command code, but with QUERY bit intact
 43101                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 43102                                  ;
 43103                                  ;   OUTPUT
 43104                                  ;       CF set if command should be ignored (it is also REM'ed out)
 43105                                  ;
 43106                                  ;   OTHER REGS USED
 43107                                  ;       BX, CX, DX, DI
 43108                                  ;
 43109                                  ;   NOTES
 43110                                  ;       None
 43111                                  ;
 43112                                  ;   HISTORY
 43113                                  ;       Created 16-Mar-1992 by JeffPar
 43114                                  ;
 43115                                  ;----------------------------------------------------------------------------
 43116                                  
 43117                                  	; 31/12/2022 - Retro UNIX 386 v4.2 (Modified MSDOS 6.21 IO.SYS)
 43118                                  	; (SYSINIT:4AE5h)
 43119                                  
 43120                                  	; 12/12/2022
 43121                                  query_user:
 43122 0000461C F606[854C]04                    test    byte [bQueryOpt],4	; answer no to everything?
 43123                                  	; 01/01/2023
 43124 00004621 7403                    	jz	short qu_1		;
 43125 00004623 E9B900                  	jmp	skip_all
 43126                                  	; 12/12/2022
 43127                                  	;;jmp	short skip_all		;
 43128                                  	;jnz	short skip_all
 43129                                  qu_1:
 43130 00004626 F606[854C]02            	test    byte [bQueryOpt],2	; answer yes to everything?
 43131 0000462B 75EE                            jnz	short nearby_ret	; yes (and return carry clear!)
 43132 0000462D 50                              push    ax                      ;
 43133 0000462E A0[6419]                        mov     al,[config_cmd]         ;
 43134 00004631 F606[854C]01                    test    byte [bQueryOpt],1	; query every command?
 43135 00004636 7506                            jnz	short query_all		; yes
 43136 00004638 A880                            test    al,CONFIG_OPTION_QUERY  ;
 43137                                  	; 01/01/2023
 43138 0000463A 7502                    	jnz	short query_all		;
 43139                                  	; 12/12/2022
 43140                                  	;;jmp	short do_cmd		;
 43141                                  	;jz	short do_cmd ; cf=0
 43142                                  
 43143                                  	; 01/01/2023
 43144 0000463C 58                      	pop	ax
 43145 0000463D C3                      	retn
 43146                                  
 43147                                  query_all:
 43148                                  
 43149                                  ;   Search for the command code (AL) in "comtab", and then print
 43150                                  ;   out the corresponding keyword, followed by the rest of the actual
 43151                                  ;   line pointed to by ES:SI
 43152                                  
 43153 0000463E 56                              push    si                      ; save pointer to rest of CONFIG.SYS line
 43154 0000463F BA[8253]                        mov     dx,_$AutoPrmpt    	;
 43155 00004642 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 43156 00004644 7450                            jz	short generic_prompt	; config_cmd must have been 0
 43157                                  
 43158 00004646 88C6                            mov     dh,al                   ; save config_cmd in DH
 43159 00004648 29DB                            sub     bx,bx                   ;
 43160 0000464A BF[D24C]                        mov     di,comtab		;
 43161                                  find_match:                             ;
 43162 0000464D 8A1D                            mov     bl,[di]                 ; get size of current keyword
 43163 0000464F 08DB                            or      bl,bl                   ;
 43164 00004651 7425                            jz	short line_print	; end of table
 43165 00004653 47                              inc     di                      ;
 43166 00004654 3A01                            cmp     al,[di+bx]              ; match?
 43167 00004656 7405                            je	short cmd_match		; yes
 43168 00004658 8D7901                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 43169                                  	; 13/05/2019	
 43170 0000465B EBF0                            jmp	short find_match	; loop
 43171                                  cmd_match:                              ;
 43172 0000465D 8A4DFF                          mov     cl,[di-1]               ;
 43173 00004660 B500                            mov	ch,0                    ;
 43174 00004662 B402                            mov     ah,STD_CON_OUTPUT ; 2
 43175                                  cmd_print:                              ;
 43176 00004664 8A05                            mov     al,[di]                 ;
 43177 00004666 47                              inc     di                      ;
 43178 00004667 88C2                            mov     dl,al                   ;
 43179 00004669 CD21                            int     21h                     ;
 43180 0000466B E2F7                            loop    cmd_print               ;
 43181 0000466D B23D                            mov     dl,'='                  ;
 43182 0000466F 80FE56                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 43183 00004672 7502                            jne	short cmd_notset	;
 43184 00004674 B220                            mov     dl,' '                  ;
 43185                                  cmd_notset:
 43186 00004676 CD21                            int     21h                     ; '=' looks funny on SET commands
 43187                                  line_print:                             ;
 43188                                  	;lods	byte ptr es:[si]        ;
 43189 00004678 26                              es
 43190 00004679 AC                      	lodsb
 43191 0000467A 08C0                    	or      al,al                   ;
 43192 0000467C 7502                            jnz	short non_null		;
 43193 0000467E B020                            mov     al,' '                  ;
 43194                                  non_null:                               ;
 43195 00004680 3C20                            cmp     al,' '                  ; control code?
 43196 00004682 720F                            jb	short prompt_user	; yes, assume end of line
 43197 00004684 7505                            jne	short non_space		;
 43198                                          ; 10/09/2023
 43199 00004686 263804                  	cmp	[es:si],al ; 20h
 43200                                  	;cmp	byte [es:si],' '	;
 43201 00004689 7208                            jb	short prompt_user	;
 43202                                  non_space:                              ;
 43203 0000468B 88C2                            mov     dl,al                   ;
 43204 0000468D B402                            mov     ah,STD_CON_OUTPUT ; 2	;
 43205 0000468F CD21                            int     21h                     ;
 43206 00004691 EBE5                            jmp	short line_print	;
 43207                                  
 43208                                  prompt_user:                            ;
 43209 00004693 BA[1353]                        mov     dx,_$InterPrmpt		;
 43210                                  
 43211                                  generic_prompt:
 43212 00004696 E8BB03                          call    print                   ;
 43213                                  input_loop:                             ;
 43214 00004699 B400                            mov     ah,0                    ; read a key
 43215 0000469B CD16                            int     16h                     ;
 43216 0000469D 08C0                            or      al,al                   ; is it a function key?
 43217 0000469F 750F                            jnz	short not_func		; no
 43218 000046A1 80FC3F                          cmp     ah,3Fh                  ; F5 function key?
 43219 000046A4 75F3                            jne	short input_loop	; no
 43220 000046A6 A0[2353]                        mov     al,[_$NO]                  ;
 43221 000046A9 800E[854C]04                    or      byte [bQueryOpt],4	; no more queries
 43222 000046AE EB21                            jmp     short legal_char        ;
 43223                                  not_func:
 43224 000046B0 24DF                            and     al,~20h ; 0DFh		; converting to upper case
 43225 000046B2 3A06[2353]                      cmp     al,[_$NO]		; verify character is legal
 43226 000046B6 7419                            je	short legal_char	;
 43227 000046B8 3A06[1F53]                      cmp     al,[_$YES]		;
 43228 000046BC 7413                            je	short legal_char	;
 43229 000046BE 803E[6419]00                    cmp     byte [config_cmd],0	;
 43230 000046C3 74D4                            je	short input_loop	; don't allow Esc on this query
 43231 000046C5 3C1B                            cmp     al,1Bh                  ; Esc?
 43232 000046C7 75D0                            jne	short input_loop	;
 43233 000046C9 800E[854C]02                    or      byte [bQueryOpt],2	; no more interactive boot prompts
 43234 000046CE A0[1F53]                        mov     al,[_$YES]
 43235                                  legal_char:                             ;
 43236 000046D1 E888FE                          call    disp_input              ;
 43237 000046D4 5E                              pop     si                      ; restore pointer to rest of CONFIG.SYS line
 43238                                  
 43239 000046D5 3A06[2353]                      cmp     al,[_$NO]		; process line?
 43240 000046D9 7403                            je	short skip_cmd		; no
 43241                                  	; 12/12/2022
 43242 000046DB F8                      	clc
 43243                                  do_cmd:
 43244 000046DC 58                      	pop     ax			;
 43245                                  	; 12/12/2022
 43246                                  	; cf=0
 43247                                  	;clc				; just do the command
 43248 000046DD C3                      	retn
 43249                                  
 43250                                  skip_cmd:
 43251 000046DE 58                      	pop     ax			;
 43252                                  skip_all:
 43253 000046DF B430                    	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 43254 000046E1 F9                      	stc
 43255 000046E2 C3                      	retn
 43256                                  
 43257                                  ;----------------------------------------------------------------------------
 43258                                  ;
 43259                                  ;   print_error: displays multi-config error conditions
 43260                                  ;
 43261                                  ;   INPUT
 43262                                  ;    Carry set to pause, clear to not
 43263                                  ;    ES:SI -> current command line in config.sys
 43264                                  ;
 43265                                  ;   OUTPUT
 43266                                  ;       None
 43267                                  ;
 43268                                  ;   OTHER REGS USED
 43269                                  ;       None
 43270                                  ;
 43271                                  ;   NOTES
 43272                                  ;       None
 43273                                  ;
 43274                                  ;   HISTORY
 43275                                  ;       Created 16-Mar-1992 by JeffPar
 43276                                  ;
 43277                                  ;----------------------------------------------------------------------------
 43278                                  
 43279                                  print_error:
 43280 000046E3 50                              push    ax
 43281 000046E4 53                              push    bx
 43282 000046E5 51                              push    cx
 43283 000046E6 52                              push    dx
 43284 000046E7 1E                              push    ds
 43285 000046E8 0E                              push    cs
 43286 000046E9 1F                              pop     ds
 43287 000046EA 9C                              pushf
 43288 000046EB E820FC                          call    get_linenum
 43289 000046EE 891E[AF02]                      mov     [linecount],bx
 43290 000046F2 E8C5E7                          call    error_line
 43291 000046F5 9D                              popf
 43292 000046F6 7319                            jnc	short pe_ret
 43293 000046F8 BA[DD51]                        mov     dx,_$PauseMsg
 43294 000046FB E85603                          call    print
 43295 000046FE B8070C                          mov     ax,0C07h		; flush input buffer, then wait for key
 43296 00004701 CD21                            int     21h			; wait for a key
 43297 00004703 08C0                            or      al,al			; extended key?
 43298 00004705 7504                            jnz	short pe_1		; no
 43299 00004707 B407                            mov     ah,07h			; yes
 43300 00004709 CD21                            int     21h			; eat it too
 43301                                  pe_1:     
 43302 0000470B BA[7050]                	mov     dx,crlfm
 43303 0000470E E84303                          call    print
 43304                                  pe_ret: 
 43305 00004711 1F                      	pop     ds
 43306 00004712 5A                              pop     dx
 43307 00004713 59                              pop     cx
 43308 00004714 5B                              pop     bx
 43309 00004715 58                              pop     ax
 43310 00004716 C3                      	retn
 43311                                  
 43312                                  ;----------------------------------------------------------------------------
 43313                                  
 43314                                  ;   This function is very simple: it merely prepends a "/D" to the
 43315                                  ;   command-line for the shell; this (undocumented) switch disables
 43316                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 43317                                  ;   displayed when there's no AUTOEXEC.BAT.
 43318                                  
 43319                                  disable_autoexec:
 43320                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 43321                                  	; 17/04/2019 - Retro DOS v4.0
 43322                                  
 43323 00004717 F606[854C]04            	test	byte [bQueryOpt],4
 43324 0000471C 7443                    	jz	short disable_exit
 43325 0000471E F606[7B4C]01            	test	byte [dae_flag],1
 43326 00004723 753C                    	jnz	short disable_exit
 43327 00004725 800E[7B4C]01            	or	byte [dae_flag],1
 43328                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 43329 0000472A 810E[854C]0201          	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 43330 00004730 BA4420                  	mov     dx,'D ' ; 2044h
 43331                                  dae_1:
 43332                                  	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 43333 00004733 A0[BA4B]                        mov	al,[def_swchr]
 43334                                  	;mov	al,[command_line-1]     ; get default switchchar
 43335 00004736 08C0                            or      al,al                   ; anything there?
 43336 00004738 7427                            jz	short disable_exit	; no, disable_autoexec already called
 43337 0000473A 8A1E[BB4B]                      mov     bl,[command_line]       ;
 43338 0000473E B700                            mov     bh,0                    ; BX == command-line length
 43339 00004740 89D9                            mov     cx,bx                   ;
 43340 00004742 80C303                          add     bl,3                    ;
 43341 00004745 80FB7E                          cmp     bl,126                  ;
 43342 00004748 7717                            ja	short disable_exit	;
 43343 0000474A 881E[BB4B]                      mov     [command_line],bl       ; update length
 43344 0000474E 81C3[BC4B]                      add     bx,command_line+1	; make sure we move the NULL too
 43345 00004752 41                              inc     cx                      ; (just for consistency sake)
 43346                                  disable_loop:                           ;
 43347 00004753 8A67FD                          mov     ah,[bx-3]               ;
 43348 00004756 8827                            mov     [bx],ah                 ;
 43349 00004758 4B                              dec     bx                      ;
 43350 00004759 E2F8                            loop    disable_loop            ;
 43351 0000475B 8847FE                          mov     [bx-2],al               ;
 43352                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 43353 0000475E 8957FF                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 43354                                          ;mov	byte [command_line-1],0 ;
 43355                                  disable_exit:                           ;
 43356 00004761 C3                              retn
 43357                                  
 43358                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 43359 00004762 803E[854C]01            	cmp     byte [bQueryOpt],1
 43360 00004767 75F8                    	jnz     short disable_exit
 43361 00004769 F606[7B4C]02            	test	byte [dae_flag],2
 43362 0000476E 75F1                    	jnz     short disable_exit
 43363 00004770 800E[7B4C]02            	or      byte [dae_flag],2
 43364                                  	;mov	dx,' Y' ; (MASM syntax) ; 2059h
 43365                                  	; 10/09/2023 (BugFix)
 43366 00004775 BA5920                  	mov	dx,'Y ' ; (NASM syntax) ; 2059h
 43367 00004778 EBB9                    	jmp     short dae_1
 43368                                  
 43369                                  ;endif  ;MULTI_CONFIG
 43370                                  
 43371                                  ;%endif	; 02/11/2022
 43372                                  
 43373                                  
 43374                                  ; 19/04/2019 - Retro DOS v4.0
 43375                                  
 43376                                  ;----------------------------------------------------------------------------
 43377                                  ;
 43378                                  ; procedure : delim
 43379                                  ;
 43380                                  ;----------------------------------------------------------------------------
 43381                                  
 43382                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 43383                                  ; (SYSINIT:4C45h)
 43384                                  
 43385                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43386                                  ;%if 0
 43387                                  ;;ifdef	MULTI_CONFIG
 43388                                  ;
 43389                                  any_delim:
 43390 0000477A 3C0D                    	cmp	al,cr
 43391 0000477C 7427                    	je	short delim_ret
 43392 0000477E 3C0A                    	cmp	al,lf
 43393 00004780 7423                    	je	short delim_ret
 43394 00004782 3C5B                    	cmp	al,'['
 43395 00004784 741F                    	je	short delim_ret
 43396 00004786 3C5D                    	cmp	al,']'
 43397 00004788 741B                    	je	short delim_ret
 43398                                  ;
 43399                                  ;;endif ;MULTI_CONFIG
 43400                                  ;%endif ; 02/11/2022
 43401                                  
 43402                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 43403                                  	; (SYSINIT:3450h)	
 43404                                  delim:
 43405 0000478A 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 43406 0000478C 7417                    	je	short delim_ret
 43407                                  
 43408 0000478E 3C00                    	cmp	al,0		; special case for sysinit!!!
 43409 00004790 7413                    	je	short delim_ret
 43410                                  
 43411                                  org_delim:			; used by organize routine except for getting
 43412 00004792 3C20                    	cmp	al,' '          ; the filename.
 43413 00004794 740F                    	je	short delim_ret
 43414 00004796 3C09                            cmp     al,tab ; 9
 43415 00004798 740B                    	je	short delim_ret
 43416 0000479A 3C3D                    	cmp	al,'='
 43417 0000479C 7407                    	je	short delim_ret
 43418 0000479E 3C2C                    	cmp	al,','
 43419 000047A0 7403                    	je	short delim_ret
 43420 000047A2 3C3B                    	cmp	al,';'
 43421                                  
 43422                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43423                                  
 43424                                  ; 04/01/2023 - Retro DOS v4.2
 43425                                  ;ifdef	MULTI_CONFIG
 43426                                  ;   Make sure there's no chance of a false EOF indication
 43427 000047A4 F8                      	clc
 43428                                  ;endif
 43429                                  	; 02/11/2022
 43430                                  delim_ret:
 43431                                  	; 04/01/2023
 43432                                  	; cf = 0
 43433                                  nl_ret:	; 10/09/2023
 43434 000047A5 C3                      	retn
 43435                                  
 43436                                  ;----------------------------------------------------------------------------
 43437                                  ;
 43438                                  ; procedure : newline
 43439                                  ;
 43440                                  ;  newline returns with first character of next line
 43441                                  ;
 43442                                  ;----------------------------------------------------------------------------
 43443                                  
 43444                                  newline:
 43445 000047A6 E80600                  	call	getchr			;skip non-control characters
 43446 000047A9 72FA                    	jc	short nl_ret
 43447 000047AB 3C0A                    	cmp	al,lf			;look for line feed
 43448 000047AD 75F7                    	jne	short newline
 43449                                  
 43450                                  	; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 43451                                  	;call	getchr
 43452                                  ;nl_ret:
 43453                                  	;retn
 43454                                  	; 10/09/2023
 43455                                  	;jmp	short getchr
 43456                                  
 43457                                  ; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 43458                                  %if 1
 43459                                  
 43460                                  ;----------------------------------------------------------------------------
 43461                                  ;
 43462                                  ; procedure : getchr
 43463                                  ;
 43464                                  ;----------------------------------------------------------------------------
 43465                                  
 43466                                  	; 24/10/2022
 43467                                  getchr:
 43468                                  	; 12/12/2022
 43469                                  	;push	cx
 43470                                  	;mov	cx,[count]
 43471                                  	;jcxz	nochar
 43472                                  	; 12/12/2022
 43473 000047AF 833E[5603]01            	cmp	word [count],1 
 43474 000047B4 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 43475                                  	
 43476 000047B6 8B36[5A03]              	mov	si,[chrptr]
 43477 000047BA 268A04                  	mov	al,[es:si]
 43478 000047BD FF0E[5603]              	dec	word [count]
 43479 000047C1 FF06[5A03]              	inc	word [chrptr]
 43480                                  	; 12/12/202
 43481                                  	; cf=0
 43482                                  	;clc
 43483                                  ;get_ret:
 43484                                  	;pop	cx
 43485                                  	;retn
 43486                                  nochar: 
 43487                                  	; 12/12/2022
 43488                                  	; cf=1
 43489                                  	;stc
 43490                                  	;jmp	short get_ret
 43491                                  	
 43492 000047C5 C3                      	retn
 43493                                  %endif
 43494                                  
 43495                                  ;----------------------------------------------------------------------------
 43496                                  ; 
 43497                                  ; procedure : mapcase
 43498                                  ;
 43499                                  ;----------------------------------------------------------------------------
 43500                                  
 43501                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 43502                                  
 43503                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 43504                                  	; (SYSINIT:4C7Eh)
 43505                                  mapcase:
 43506 000047C6 51                      	push	cx
 43507 000047C7 56                      	push	si
 43508 000047C8 1E                      	push	ds
 43509                                  
 43510 000047C9 06                      	push	es
 43511 000047CA 1F                      	pop	ds
 43512                                  
 43513                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43514                                  
 43515                                  ; 04/01/2023 - Retro DOS 4.2
 43516                                  
 43517                                  ;ifdef	MULTI_CONFIG
 43518 000047CB 88C3                    	mov	bl,al			; same cmd code this line
 43519                                  ;else
 43520                                  ;	xor	si,si
 43521                                  ;endif
 43522                                  	; 02/11/2022
 43523                                  	; 04/01/2023 - Retro DOS 4.2
 43524                                  	;xor	si, si
 43525                                  
 43526                                  convloop:
 43527 000047CD AC                      	lodsb
 43528 000047CE 3C61                    	cmp	al,'a'
 43529 000047D0 7209                    	jb	short noconv
 43530 000047D2 3C7A                    	cmp	al,'z'
 43531 000047D4 7705                    	ja	short noconv
 43532 000047D6 2C20                    	sub	al,20h
 43533 000047D8 8844FF                  	mov	[si-1],al
 43534                                  noconv:
 43535                                  
 43536                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43537                                  
 43538                                  ; 04/01/2023 - Retro DOS 4.2
 43539                                  ;ifdef	MULTI_CONFIG
 43540                                  
 43541                                  ;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 43542                                  ;   upper-case a line at a time, after we've been able to figure out whether
 43543                                  ;   the line is a SET command or not (since we don't want to upper-case
 43544                                  ;   anything after the "=" in a SET)
 43545                                  ;
 43546 000047DB 80FB56                  	cmp	bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 43547 000047DE 7504                    	jne	short check_eol		; no, just check for end-of-line
 43548 000047E0 3C3D                    	cmp	al,'='                  ; separator between SET var and value?
 43549 000047E2 740A                    	je	short convdone		; yes
 43550                                  check_eol:
 43551 000047E4 3C0D                    	cmp	al,cr
 43552 000047E6 7406                    	je	short convdone
 43553 000047E8 3C0A                    	cmp	al,lf
 43554 000047EA 7402                    	je	short convdone
 43555                                  ;endif
 43556                                  	; 02/11/2022
 43557 000047EC E2DF                    	loop	convloop
 43558                                  convdone:
 43559 000047EE 1F                      	pop	ds
 43560 000047EF 5E                      	pop	si
 43561 000047F0 59                      	pop	cx
 43562 000047F1 C3                      	retn
 43563                                  
 43564                                  ;----------------------------------------------------------------------------
 43565                                  ;
 43566                                  ; procedure : round
 43567                                  ;
 43568                                  ; round the values in memlo and memhi to paragraph boundary.
 43569                                  ; perform bounds check.
 43570                                  ;
 43571                                  ;----------------------------------------------------------------------------
 43572                                  
 43573                                  round:
 43574                                  	; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 43575 000047F2 1E                      	push	ds
 43576 000047F3 0E                      	push	cs
 43577 000047F4 1F                      	pop	ds
 43578                                  
 43579 000047F5 50                      	push	ax
 43580                                  	;mov	ax,[cs:memlo]
 43581 000047F6 A1[6203]                	mov	ax,[memlo]
 43582                                  
 43583 000047F9 E819CB                  	call	ParaRound		; para round up
 43584                                  
 43585                                  	;add	[cs:memhi],ax
 43586 000047FC 0106[6403]              	add	[memhi],ax
 43587                                  	;mov	word [cs:memlo],0
 43588 00004800 C706[6203]0000          	mov	word [memlo],0
 43589                                  	;mov	ax,[cs:memhi]		; ax = new memhi
 43590 00004806 A1[6403]                	mov	ax,[memhi]
 43591                                  	;cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 43592 00004809 3B06[A502]              	cmp	ax,[ALLOCLIM]
 43593                                  	;jae	short mem_err
 43594                                  	; 13/04/2024
 43595 0000480D 7322                    	jae	short mem_err2 ; ds = cs
 43596                                  	;test	byte [cs:setdevmarkflag],for_devmark ; 2
 43597 0000480F F606[6919]02            	test	byte [setdevmarkflag],for_devmark ; 2
 43598 00004814 7416                    	jz	short skip_set_devmarksize
 43599 00004816 06                      	push	es
 43600 00004817 56                      	push	si
 43601                                  	;mov	si,[cs:devmark_addr]
 43602 00004818 8B36[6719]              	mov	si,[devmark_addr]
 43603 0000481C 8EC6                    	mov	es,si
 43604 0000481E 29F0                    	sub	ax,si
 43605 00004820 48                      	dec	ax
 43606                                  	;mov	[es:3],ax
 43607 00004821 26A30300                	mov	[es:devmark.size],ax	; paragraph
 43608                                  	;and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 43609 00004825 8026[6919]FD            	and	byte [setdevmarkflag],not_for_devmark ; 0FDh
 43610 0000482A 5E                      	pop	si
 43611 0000482B 07                      	pop	es
 43612                                  skip_set_devmarksize:
 43613 0000482C 58                      	pop	ax
 43614                                  
 43615                                  	; 10/09/2023
 43616 0000482D 1F                      	pop	ds
 43617                                  
 43618                                  	; 11/12/2022
 43619                                  	; cf = 0
 43620                                  	; 02/11/2022
 43621                                  	;clc	; ? (not needed here)	; clear carry
 43622 0000482E C3                      	retn
 43623                                  
 43624                                  ;----------------------------------------------------------------------------
 43625                                  
 43626                                  mem_err:
 43627                                  	; 11/12/2022
 43628 0000482F 0E                      	push	cs
 43629 00004830 1F                      	pop	ds
 43630                                  mem_err2:
 43631 00004831 BA[4951]                	mov	dx,badmem
 43632                                  	;push	cs
 43633                                  	;pop	ds
 43634 00004834 E81D02                  	call	print
 43635 00004837 E914CB                  	jmp	stall
 43636                                  
 43637                                  ;----------------------------------------------------------------------------
 43638                                  ;
 43639                                  ; procedure : calldev
 43640                                  ;
 43641                                  ;----------------------------------------------------------------------------
 43642                                  
 43643                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 43644                                  	; (SYSINIT:34E0h)
 43645                                  
 43646                                  	; 13/04/2024 - Retrodos v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 43647                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4F3Eh)
 43648                                  
 43649                                  calldev:
 43650 0000483A 2E8E1E[3B24]            	mov	ds,[cs:DevEntry+2]
 43651 0000483F 2E031E[3924]            	add	bx,[cs:DevEntry]	; do a little relocation
 43652 00004844 8B07                    	mov	ax,[bx]
 43653                                  
 43654 00004846 2EFF36[3924]            	push	word [cs:DevEntry]
 43655 0000484B 2EA3[3924]              	mov	[cs:DevEntry],ax
 43656 0000484F BB[6F03]                	mov	bx,packet
 43657 00004852 2EFF1E[3924]            	call	far [cs:DevEntry]
 43658 00004857 2E8F06[3924]            	pop	word [cs:DevEntry]
 43659 0000485C C3                      	retn
 43660                                  
 43661                                  ;----------------------------------------------------------------------------
 43662                                  ;
 43663                                  ; procedure : todigit
 43664                                  ;
 43665                                  ;----------------------------------------------------------------------------
 43666                                  
 43667                                  todigit:
 43668 0000485D 2C30                    	sub	al,'0'
 43669                                  	;jb	short notdig  ; 02/11/2022
 43670                                  	; 12/12/2022
 43671 0000485F 7203                    	jb	short notdig2
 43672                                  	;cmp	al,9
 43673                                  	;ja	short notdig
 43674                                  	;clc
 43675                                  	;retn
 43676                                  	; 12/12/2022
 43677 00004861 3C0A                    	cmp	al,10
 43678 00004863 F5                      	cmc
 43679                                  notdig:
 43680                                  	;stc
 43681                                  notdig2:
 43682 00004864 C3                      	retn
 43683                                  
 43684                                  ;----------------------------------------------------------------------------
 43685                                  ;
 43686                                  ; procedure : getnum
 43687                                  ;
 43688                                  ; getnum parses a decimal number.
 43689                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 43690                                  ; error), if number is bad carry is set, zero is set, ax=0.
 43691                                  ;
 43692                                  ;----------------------------------------------------------------------------
 43693                                  
 43694                                  getnum:
 43695 00004865 53                      	push	bx
 43696 00004866 31DB                    	xor	bx,bx			; running count is zero
 43697                                  b2:
 43698 00004868 E8F2FF                  	call	todigit 		; do we have a digit ?
 43699 0000486B 7247                    	jc	short badnum		; no, bomb
 43700                                  
 43701 0000486D 93                      	xchg	ax,bx			; put total in ax
 43702 0000486E 53                      	push	bx			; save digit (0 to 9)
 43703                                  	;mov	bx,10			; base of arithmetic
 43704                                  	; 12/12/2022
 43705 0000486F B30A                    	mov	bl,10
 43706 00004871 F7E3                    	mul	bx			; shift by one decimal digit
 43707 00004873 5B                      	pop	bx			; get back digit (0 to 9)
 43708 00004874 00D8                    	add	al,bl			; get total
 43709 00004876 80D400                  	adc	ah,0			; make that 16 bits
 43710 00004879 7239                    	jc	short badnum		; too big a number
 43711                                  
 43712 0000487B 93                      	xchg	ax,bx			; stash total
 43713                                  
 43714 0000487C E830FF                  	call	getchr			;get next digit
 43715 0000487F 722D                    	jc	short b1		; no more characters
 43716 00004881 3C20                    	cmp	al,' ' 			; space?
 43717 00004883 741F                    	je	short b15		; then end of digits
 43718 00004885 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 43719 00004887 741B                    	je	short b15		; then end of digits.
 43720 00004889 3C09                    	cmp	al, tab ; 9		; tab
 43721 0000488B 7417                    	je	short b15
 43722 0000488D 2E3A06[AE02]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 43723 00004892 7410                    	je	short b15
 43724 00004894 3C2F                    	cmp	al,'/'			; see if another switch follows
 43725                                  	; 12/12/2022
 43726                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43727                                  	;nop				; cas - remnant of old bad code
 43728                                  	;nop
 43729 00004896 740C                    	je	short b15
 43730 00004898 3C0A                    	cmp	al,lf			; line-feed?
 43731 0000489A 7408                    	je	short b15
 43732 0000489C 3C0D                    	cmp	al,cr			; carriage return?
 43733 0000489E 7404                    	je	short b15
 43734 000048A0 08C0                    	or	al,al			; end of line separator?
 43735 000048A2 75C4                    	jnz	short b2		; no, try as a valid char...
 43736                                  b15:
 43737 000048A4 2EFF06[5603]            	inc	word [cs:count]		; one more character to s...
 43738 000048A9 2EFF0E[5A03]            	dec	word [cs:chrptr]	; back up over separator
 43739                                  b1:
 43740 000048AE 89D8                    	mov	ax,bx			; get proper count
 43741 000048B0 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 43742 000048B2 5B                      	pop	bx
 43743 000048B3 C3                      	retn
 43744                                  badnum:
 43745                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43746                                  	;mov	byte [cs:sepchr],0
 43747 000048B4 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 43748                                  	; 12 /12/2022
 43749 000048B6 2EA2[AE02]              	mov	[cs:sepchr],al ; 0
 43750 000048BA 5B                      	pop	bx
 43751 000048BB F9                      	stc				; and carry set
 43752 000048BC C3                      	retn
 43753                                  
 43754                                  ;****************************************************************************
 43755                                  
 43756                                  setdoscountryinfo:
 43757                                  
 43758                                  ;----------------------------------------------------------------------------
 43759                                  ;input: es:di -> pointer to dos_country_cdpg_info
 43760                                  ;	ds:0  -> buffer.
 43761                                  ;	si = 0
 43762                                  ;	ax = country id
 43763                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 43764                                  ;	bx = file handle
 43765                                  ;	this routine can handle maximum 438 country_data entries.
 43766                                  ;
 43767                                  ;output: dos_country_cdpg_info set.
 43768                                  ;	 carry set if any file read failure or wrong information in the file.
 43769                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 43770                                  ;	 codepage_id in the file.
 43771                                  ;----------------------------------------------------------------------------
 43772                                  
 43773                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43774                                  	; (SYSINIT:4D83h)
 43775                                  
 43776                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43777                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4FCAh)	
 43778                                  
 43779 000048BD 57                      	push	di
 43780 000048BE 50                      	push	ax
 43781 000048BF 52                      	push	dx
 43782                                  
 43783 000048C0 31C9                    	xor	cx,cx
 43784 000048C2 31D2                    	xor	dx,dx
 43785 000048C4 B80002                  	mov	ax,512			;read 512 bytes
 43786 000048C7 E84301                  	call	readincontrolbuffer	;read the file header
 43787 000048CA 724A                    	jc	short setdosdata_fail
 43788                                  
 43789 000048CC 06                      	push	es
 43790 000048CD 56                      	push	si
 43791                                  
 43792 000048CE 0E                      	push	cs
 43793 000048CF 07                      	pop	es
 43794                                  
 43795 000048D0 BF[204B]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 43796 000048D3 B90800                  	mov	cx,8			;length of the signature
 43797 000048D6 F3A6                    	repz	cmpsb
 43798                                  
 43799 000048D8 5E                      	pop	si
 43800 000048D9 07                      	pop	es
 43801 000048DA 753A                    	jnz	short setdosdata_fail 	;signature mismatch
 43802                                  
 43803 000048DC 83C612                  	add	si,18			;si -> county info type
 43804 000048DF 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 43805 000048E2 7532                    	jne	short setdosdata_fail 	;cannot proceed. error return
 43806                                  
 43807 000048E4 46                      	inc	si			;si -> file offset
 43808 000048E5 8B14                    	mov	dx,[si]			;get the info file offset.
 43809 000048E7 8B4C02                  	mov	cx,[si+2]
 43810 000048EA B80018                  	mov	ax,6144			;read 6144 bytes.
 43811 000048ED E81D01                  	call	readincontrolbuffer	;read info
 43812 000048F0 7224                    	jc	short setdosdata_fail
 43813                                  
 43814 000048F2 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 43815 000048F4 81F9B601                	cmp	cx,438			;cannot handle more than 438 entries.
 43816 000048F8 771C                    	ja	short setdosdata_fail
 43817                                  
 43818 000048FA 46                      	inc	si
 43819 000048FB 46                      	inc	si			;si -> entry information packet
 43820 000048FC 5A                      	pop	dx			;restore code page id
 43821 000048FD 58                      	pop	ax			;restore country id
 43822 000048FE 5F                      	pop	di
 43823                                  
 43824                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 43825 000048FF 3B4402                  	cmp	ax,[si+2]		;compare country_id
 43826 00004902 7509                    	jne	short setdoscntry_next
 43827                                  
 43828                                  	;cmp	dx,0			;no user specified code page ?
 43829                                  	;je	short setdoscntry_any_codepage ;then no need to match code page id.
 43830                                  	; 10/09/2023
 43831 00004904 09D2                    	or	dx,dx ; cmp dx,0
 43832 00004906 7413                    	jz	short setdoscntry_any_codepage
 43833 00004908 3B5404                  	cmp	dx,[si+4]		;compare code page id
 43834 0000490B 7411                    	je	short setdoscntry_got_it
 43835                                  
 43836                                  setdoscntry_next:
 43837 0000490D 0334                    	add	si,[si]			;next entry
 43838 0000490F 46                      	inc	si
 43839 00004910 46                      	inc	si			;take a word for size of entry itself
 43840 00004911 E2EC                    	loop	setdoscntry_find
 43841                                  
 43842                                  	;mov	cx,-1			;signals that bad country id entered.
 43843                                  	; 10/09/2023
 43844 00004913 49                      	dec	cx ; 0 -> -1
 43845                                  setdoscntry_fail:
 43846 00004914 F9                      	stc
 43847 00004915 C3                      	retn
 43848                                  
 43849                                  setdosdata_fail:
 43850 00004916 5E                      	pop	si
 43851 00004917 59                      	pop	cx
 43852 00004918 5F                      	pop	di
 43853 00004919 EBF9                    	jmp	short setdoscntry_fail
 43854                                  
 43855                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 43856 0000491B 8B5404                  	mov	dx,[si+4]
 43857                                  
 43858                                  setdoscntry_got_it:			;found the matching entry
 43859 0000491E 2E8916[284B]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 43860 00004923 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 43861 00004926 8B4C0C                  	mov	cx,[si+12]
 43862 00004929 B80002                  	mov	ax,512 			;read 512 bytes
 43863 0000492C E8DE00                  	call	readincontrolbuffer
 43864 0000492F 72E3                    	jc	short setdoscntry_fail
 43865                                  
 43866 00004931 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 43867 00004933 46                      	inc	si
 43868 00004934 46                      	inc	si			;si -> first entry
 43869                                  
 43870                                  setdoscntry_data:
 43871 00004935 57                      	push	di			;es:di -> dos_country_cdpg_info
 43872 00004936 51                      	push	cx			;save # of entry left
 43873 00004937 56                      	push	si			;si -> current entry in control buffer
 43874                                  
 43875 00004938 8A4402                  	mov	al,[si+2]		;get data entry id
 43876 0000493B E8A400                  	call	getcountrydestination	;get the address of destination in es:di
 43877 0000493E 727C                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 43878                                  
 43879 00004940 8B5404                  	mov	dx,[si+4]		;get offset of data
 43880 00004943 8B4C06                  	mov	cx,[si+6]
 43881 00004946 B80042                  	mov	ax,4200h
 43882 00004949 F9                      	stc
 43883 0000494A CD21                    	int	21h			;move pointer
 43884 0000494C 72C8                    	jc	short setdosdata_fail
 43885                                  
 43886 0000494E BA0002                  	mov	dx,512			;start of data buffer
 43887 00004951 B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 43888 00004954 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 43889 00004956 F9                      	stc
 43890 00004957 CD21                    	int	21h			;read the country.sys data
 43891 00004959 72BB                    	jc	short setdosdata_fail 	;read failure
 43892                                  
 43893 0000495B 39C8                    	cmp	ax,cx
 43894 0000495D 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 43895                                  
 43896 0000495F 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 43897 00004962 8B4C06                  	mov	cx,[si+6]
 43898 00004965 B80042                  	mov	ax,4200h
 43899 00004968 F9                      	stc
 43900 00004969 CD21                    	int	21h			;move pointer back again
 43901 0000496B 72A9                    	jc	short setdosdata_fail
 43902                                  
 43903 0000496D 56                      	push	si
 43904 0000496E BE0802                  	mov	si,(512+8)		;get length of the data from the file
 43905 00004971 8B0C                    	mov	cx,[si]
 43906 00004973 5E                      	pop	si
 43907 00004974 BA0002                  	mov	dx,512			;start of data buffer
 43908 00004977 83C10A                  	add	cx,10			;signature + a word for the length itself
 43909 0000497A B43F                    	mov	ah,3Fh			;read the data from the file.
 43910 0000497C F9                      	stc
 43911 0000497D CD21                    	int	21h
 43912 0000497F 7295                    	jc	short setdosdata_fail
 43913                                  
 43914 00004981 39C8                    	cmp	ax,cx
 43915 00004983 7591                    	jne	short setdosdata_fail
 43916                                  
 43917 00004985 8A4402                  	mov	al,[si+2]		;save data id for future use.
 43918 00004988 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 43919 0000498B 8B0C                    	mov	cx,[si]			;get the length of the file
 43920 0000498D 41                      	inc	cx			;take care of a word for lenght of tab
 43921 0000498E 41                      	inc	cx			;itself.
 43922 0000498F 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 43923 00004993 7781                    	ja	short setdosdata_fail
 43924                                  
 43925                                  	;if	bugfix
 43926 00004995 E83100                  	call	setdbcs_before_copy
 43927                                  	;endif
 43928                                  
 43929 00004998 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 43930 0000499A 7511                    	jne	short setdoscntry_mov 	;no, don't worry
 43931                                  
 43932 0000499C 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 43933                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 43934 000049A0 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 43935                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 43936                                  	
 43937 000049A4 57                      	push	di			;save di
 43938                                  
 43939                                  	;push	ax
 43940                                  	;mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 43941                                  	;mov	[si+4],ax		;use the saved one for this !!!!
 43942                                  	;pop	ax
 43943                                  	; 10/09/2023
 43944 000049A5 2EFF36[284B]            	push	word [cs:cntrycodepage_id]
 43945 000049AA 8F4404                  	pop	word [si+4]
 43946                                  
 43947                                  setdoscntry_mov:
 43948 000049AD F3A4                    	rep	movsb			;copy the table into dos
 43949 000049AF 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 43950 000049B1 7509                    	jne	short setdoscntry_data_next
 43951                                  
 43952 000049B3 5F                      	pop	di			;restore di
 43953 000049B4 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 43954                                  	;pop	word [es:di+26]		;restore
 43955 000049B8 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 43956                                  	;pop	word [es:di+24]
 43957                                  
 43958                                  setdoscntry_data_next:
 43959 000049BC 5E                      	pop	si			;restore control buffer pointer
 43960 000049BD 59                      	pop	cx			;restore # of entries left
 43961 000049BE 5F                      	pop	di			;restore pointer to dso_country_cdpg
 43962 000049BF 0334                    	add	si,[si]			;try to get the next entry
 43963 000049C1 46                      	inc	si
 43964 000049C2 46                      	inc	si			;take a word of entry length itself
 43965 000049C3 49                      	dec	cx
 43966                                  	; 10/09/2023
 43967 000049C4 741B                    	jz	short setdoscntry_ok 
 43968                                  	;cmp	cx,0
 43969                                  	;je	short setdoscntry_ok
 43970 000049C6 E96CFF                  	jmp	setdoscntry_data
 43971                                  
 43972                                  	; 18/12/2022
 43973                                  ;setdoscntry_ok:
 43974                                  	;retn
 43975                                  
 43976                                  ;----------------------------------------------------------------------------
 43977                                  	
 43978                                  	;if	bugfix
 43979                                  
 43980                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43981                                  
 43982                                  setdbcs_before_copy:
 43983 000049C9 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 43984 000049CB 7514                    	jne	short sdbcsbc		; jump if not
 43985                                  	
 43986                                  	; 10/09/2023
 43987 000049CD 50                      	push	ax
 43988 000049CE 31C0                    	xor	ax,ax
 43989 000049D0 263905                  	cmp	[es:di],ax ; 0
 43990 000049D3 740B                    	je	short sdbcsbc_pop
 43991                                  	
 43992                                  	;cmp	word [es:di],0		; zero byte data block?
 43993                                  	;je	short sdbcsbc		; jump if so
 43994                                  
 43995 000049D5 57                      	push	di
 43996                                  	; 10/09/2023
 43997                                  	;push	ax
 43998 000049D6 51                      	push	cx
 43999 000049D7 268B0D                  	mov	cx,[es:di]		; load block length
 44000                                  	;add	di,2			; points actual data
 44001 000049DA 47                      	inc	di
 44002 000049DB 47                      	inc	di
 44003                                  	;xor	al,al			; fill bytes
 44004 000049DC F3AA                    	rep	stosb			; clear data block
 44005 000049DE 59                      	pop	cx
 44006                                  	;pop	ax
 44007 000049DF 5F                      	pop	di
 44008                                  
 44009                                  sdbcsbc_pop:	; 10/09/2023
 44010 000049E0 58                      	pop	ax
 44011                                  sdbcsbc:
 44012                                  setdoscntry_ok:	; 18/12/2022
 44013 000049E1 C3                      	retn
 44014                                  
 44015                                  	;endif
 44016                                  
 44017                                  ;----------------------------------------------------------------------------
 44018                                  
 44019                                  getcountrydestination:
 44020                                  
 44021                                  ;----------------------------------------------------------------------------
 44022                                  ;get the destination address in the dos country info table.
 44023                                  ;
 44024                                  ;input: al - data id
 44025                                  ;	es:di -> dos_country_cdpg_info
 44026                                  ;on return:
 44027                                  ;	es:di -> destination address of the matching data id
 44028                                  ;	carry set if no matching data id found in dos.
 44029                                  ;----------------------------------------------------------------------------
 44030                                  
 44031                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 44032                                  	; (SYSINIT:4EB2h)
 44033                                  
 44034                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 44035                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:50F9h)
 44036                                  
 44037 000049E2 51                      	push	cx
 44038                                  	;add	di,74
 44039 000049E3 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 44040                                  					;skip the reserved area, syscodepage etc.
 44041 000049E6 268B0D                  	mov	cx,[es:di]		;get the number of entries
 44042 000049E9 47                      	inc	di
 44043 000049EA 47                      	inc	di			;si -> the first start entry id
 44044                                  
 44045                                  getcntrydest:
 44046 000049EB 263805                  	cmp	byte [es:di],al
 44047 000049EE 7413                    	je	short getcntrydest_ok
 44048                                  
 44049 000049F0 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 44050 000049F4 7405                    	je	short getcntrydest_1
 44051                                  
 44052 000049F6 83C705                  	add	di,5			;next data id
 44053 000049F9 EB03                    	jmp	short getcntrydest_loop
 44054                                  
 44055                                  getcntrydest_1:
 44056                                  	;add	di,41
 44057 000049FB 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 44058                                  getcntrydest_loop:
 44059 000049FE E2EB                    	loop	getcntrydest
 44060 00004A00 F9                      	stc
 44061                                  	;jmp	short getcntrydest_exit
 44062                                  getcntrydest_exit:
 44063                                  	; 10/09/2023
 44064 00004A01 59                      	pop	cx
 44065 00004A02 C3                      	retn
 44066                                  
 44067                                  getcntrydest_ok:
 44068                                  	; 10/09/2023
 44069 00004A03 47                      	inc	di
 44070                                  
 44071                                  ;	cmp	al,SetCountryInfo ; 1	;select country info?
 44072                                  ;	jne	short getcntrydest_ok1
 44073                                  ;
 44074                                  ;	;inc	di			;now di -> cccountryinfolen
 44075                                  ;	jmp	short getcntrydest_exit
 44076                                  
 44077                                  	; 10/09/2023
 44078 00004A04 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 44079 00004A06 74F9                    	je	short getcntrydest_exit
 44080                                  
 44081                                  getcntrydest_ok1:
 44082                                  	;les	di,[es:di+1]		;get the destination in es:di
 44083                                  	; 10/09/2023
 44084 00004A08 26C43D                  	les	di,[es:di]
 44085                                  ;getcntrydest_exit:
 44086 00004A0B 59                      	pop	cx
 44087 00004A0C C3                      	retn
 44088                                  
 44089                                  ;----------------------------------------------------------------------------
 44090                                  
 44091                                  readincontrolbuffer:
 44092                                  
 44093                                  ;----------------------------------------------------------------------------
 44094                                  ;move file pointer to cx:dx
 44095                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 44096                                  ;si will be set to 0 hence ds:si points to the control buffer.
 44097                                  ;
 44098                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 44099                                  ;	 be moved.
 44100                                  ;	 ax - # of bytes to read
 44101                                  ;	 bx - file handle
 44102                                  ;	 ds - buffer seg.
 44103                                  ;return: the control data information is read into ds:0 - ds:0200.
 44104                                  ;	 cx,dx value destroyed.
 44105                                  ;	 carry set if error in reading file.
 44106                                  ;----------------------------------------------------------------------------
 44107                                  
 44108 00004A0D 50                      	push	ax			;# of bytes to read
 44109 00004A0E B80042                  	mov	ax,4200h
 44110 00004A11 F9                      	stc
 44111 00004A12 CD21                    	int	21h			;move pointer
 44112 00004A14 59                      	pop	cx			;# of bytes to read
 44113 00004A15 7209                    	jc	short ricb_exit
 44114                                  
 44115 00004A17 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 44116 00004A19 31F6                    	xor	si,si
 44117 00004A1B B43F                    	mov	ah,3Fh			;read into the buffer
 44118 00004A1D F9                      	stc
 44119 00004A1E CD21                    	int	21h			;should be less than 1024 bytes.
 44120                                  ricb_exit:
 44121 00004A20 C3                      	retn
 44122                                  
 44123                                  ;----------------------------------------------------------------------------
 44124                                  
 44125                                  ;! set_country_path procedure is not called from anywhere !
 44126                                  ; Erdogan Tan - 04/08/2023
 44127                                  %if 0
 44128                                  
 44129                                  set_country_path:
 44130                                  
 44131                                  ;----------------------------------------------------------------------------
 44132                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 44133                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 44134                                  ;     assumes current directory is the root directory.
 44135                                  ;out: ds:di -> full path (cntry_drv).
 44136                                  ;     set the cntry_drv string from the country=,,path command.
 44137                                  ;     ds, es, si value saved.
 44138                                  ;----------------------------------------------------------------------------
 44139                                  
 44140                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 44141                                  	; (SYSINIT:4EF4h)
 44142                                  
 44143                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 44144                                  	; (Retrodos v5.0 Pre-Works)
 44145                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:513Bh)
 44146                                  
 44147                                  	push	si
 44148                                  
 44149                                  	push	ds			;switch ds, es
 44150                                  	push	es
 44151                                  	pop	ds
 44152                                  	pop	es			;now ds -> confbot, es -> sysinitseg
 44153                                  
 44154                                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 44155                                  	jc	short scp_default_drv 	;no, use current default drive.
 44156                                  
 44157                                  	mov	al,[si]
 44158                                  	inc	si
 44159                                  	inc	si			;si -> next char after ":"
 44160                                  	jmp	short scp_setdrv
 44161                                  
 44162                                  scp_default_drv:
 44163                                  	mov	ah,19h
 44164                                  	int	21h
 44165                                  	add	al,"A"			;convert it to a character.
 44166                                  
 44167                                  scp_setdrv:
 44168                                  	mov	[cs:cntry_drv],al	;set the drive letter.
 44169                                  	mov	di,cntry_path
 44170                                  	mov	al,[si]
 44171                                  	cmp	al, "\"
 44172                                  	je	short scp_root_dir
 44173                                  
 44174                                  	cmp	al,"/"			;let's accept "/" as an directory delim
 44175                                  	;je	short scp_root_dir
 44176                                  	;jmp	short scp_path
 44177                                  	; 04/01/2023
 44178                                  	jne	short scp_path
 44179                                  
 44180                                  scp_root_dir:
 44181                                  	dec	di			;di -> cntry_root
 44182                                  scp_path:
 44183                                  	call	move_asciiz		;copy it
 44184                                  
 44185                                  	mov	di,cntry_drv
 44186                                  scpath_exit:
 44187                                  
 44188                                  	push	ds			;switch ds, es
 44189                                  	push	es
 44190                                  	pop	ds
 44191                                  	pop	es			;ds, es value restored
 44192                                  
 44193                                  	pop	si
 44194                                  	retn
 44195                                  
 44196                                  ;----------------------------------------------------------------------------
 44197                                  
 44198                                  chk_drive_letter:
 44199                                  
 44200                                  ;check if ds:[si] is a drive letter followed by ":".
 44201                                  ;assume that every alpha character is already converted to upper case.
 44202                                  ;carry set if not.
 44203                                  
 44204                                  	; 04/01/2023 - Retrodos v4.2
 44205                                  
 44206                                  	push	ax
 44207                                  	cmp	byte [si],"A"
 44208                                  	;jb	short cdletter_no
 44209                                  	jb	short cdletter_exit
 44210                                  	cmp	byte [si],"Z"
 44211                                  	ja	short cdletter_no
 44212                                  	cmp	byte [si+1],":"
 44213                                  	;jne	short cdletter_no
 44214                                  	;jmp	short cdletter_exit
 44215                                  	; 04/01/2023
 44216                                  	je	short cdletter_exit
 44217                                  
 44218                                  cdletter_no:
 44219                                  	stc
 44220                                  cdletter_exit:
 44221                                  	pop	ax
 44222                                  	retn
 44223                                  
 44224                                  %endif
 44225                                  
 44226                                  ;----------------------------------------------------------------------------
 44227                                  
 44228                                  move_asciiz:
 44229                                  
 44230                                  ;in: ds:si -> source es:di -> target
 44231                                  ;out: copy the string until 0.
 44232                                  ;assumes there exists a 0.
 44233                                  
 44234                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 44235                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:4F40h)
 44236                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:5187h)
 44237                                  
 44238                                  masciiz_loop:
 44239                                  	; 10/09/2023
 44240 00004A21 F604FF                  	test	byte [si],0FFh
 44241 00004A24 A4                      	movsb
 44242                                  	;cmp	byte [si-1],0	; was it 0?
 44243                                  	;jne	short masciiz_loop
 44244 00004A25 75FA                    	jnz	short masciiz_loop ; 10/09/2023
 44245 00004A27 C3                      	retn
 44246                                  
 44247                                  ;----------------------------------------------------------------------------
 44248                                  
 44249                                  ;	ds:dx points to string to output (asciz)
 44250                                  ;
 44251                                  ;	prints <badld_pre> <string> <badld_post>
 44252                                  
 44253                                  badfil:
 44254 00004A28 0E                      	push	cs
 44255 00004A29 07                      	pop	es
 44256                                  
 44257 00004A2A 89D6                    	mov	si,dx
 44258                                  badload:
 44259 00004A2C BA[B350]                	mov	dx,badld_pre	; want to print config error
 44260 00004A2F BB[7050]                	mov	bx,crlfm
 44261                                  prnerr:
 44262 00004A32 0E                      	push	cs
 44263 00004A33 1F                      	pop	ds ; *
 44264 00004A34 E81D00                  	call	print
 44265                                  prn1:
 44266 00004A37 268A14                  	mov	dl,[es:si]
 44267 00004A3A 08D2                    	or	dl,dl
 44268 00004A3C 7407                    	jz	short prn2
 44269 00004A3E B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 44270 00004A40 CD21                    	int	21h
 44271 00004A42 46                      	inc	si
 44272 00004A43 EBF2                    	jmp	short prn1
 44273                                  prn2:
 44274 00004A45 89DA                    	mov	dx,bx
 44275 00004A47 E80A00                  	call	print
 44276                                  	; 11/12/2022
 44277                                  	; ds = cs ; *
 44278 00004A4A 803E[5503]01            	cmp	byte [donotshownum],1
 44279                                  				; suppress line number when handling command.com
 44280                                  	;cmp	byte [cs:donotshownum],1 
 44281 00004A4F 7407                    	je	short prnexit
 44282                                  	
 44283                                  	; 18/12/2022
 44284                                  	;call	error_line
 44285 00004A51 E966E4                  	jmp	error_line
 44286                                  ;prnexit:
 44287                                  	;retn
 44288                                  
 44289                                  ;----------------------------------------------------------------------------
 44290                                  
 44291                                  print:
 44292 00004A54 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 44293 00004A56 CD21                    	int	21h
 44294                                  prnexit:	; 18/12/2022
 44295 00004A58 C3                      	retn
 44296                                  
 44297                                  ;----------------------------------------------------------------------------
 44298                                  
 44299                                  ;  open device pointed to by dx, al has access code
 44300                                  ;   if unable to open do a device open null device instead
 44301                                  
 44302                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 44303                                  	; (SYSINIT:3764h)
 44304                                  open_dev:
 44305 00004A59 E80500                  	call	open_file
 44306 00004A5C 7309                    	jnc	short open_dev3
 44307                                  
 44308                                  open_dev1:
 44309 00004A5E BA[C14A]                	mov	dx,nuldev
 44310                                  	; 18/12/2022
 44311                                  	;call	open_file
 44312                                  ;of_retn:
 44313                                  	;retn
 44314                                  	; 18/12/2022
 44315                                  	;jmp	short open_file
 44316                                  open_file:
 44317 00004A61 B43D                    	mov	ah,OPEN	; 3Dh
 44318 00004A63 F9                      	stc
 44319 00004A64 CD21                    	int	21h
 44320                                  of_retn:	; 18/12/2022
 44321 00004A66 C3                      	retn
 44322                                  
 44323                                  open_dev3:
 44324 00004A67 89C3                    	mov	bx,ax			; handle from open to bx
 44325                                  	;;xor	ax,ax			; get device info
 44326                                  	;;mov	ah,IOCTL ; 44h
 44327                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 44328                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44329                                  	;xor	ax,ax
 44330                                  	;mov	ah,44h	; IOCTL
 44331                                  	; 11/12/2022
 44332 00004A69 B80044                  	mov	ax,4400h ; IOCTL<<8 
 44333                                  
 44334 00004A6C CD21                    	int	21h
 44335                                  
 44336 00004A6E F6C280                  	test	dl,10000000b ; 80h
 44337 00004A71 75F3                    	jnz	short of_retn
 44338                                  
 44339 00004A73 B43E                    	mov	ah,CLOSE ; 3Eh
 44340 00004A75 CD21                    	int	21h
 44341 00004A77 EBE5                    	jmp	short open_dev1
 44342                                  
 44343                                  ;----------------------------------------------------------------------------
 44344                                  
 44345                                  ; 18/12/2022
 44346                                  %if 0
 44347                                  open_file:
 44348                                  	mov	ah,OPEN	; 3Dh
 44349                                  	stc
 44350                                  	int	21h
 44351                                  	retn
 44352                                  %endif
 44353                                  
 44354                                  ;----------------------------------------------------------------------------
 44355                                  
 44356                                  ; test int24. return back to dos with the fake user response of "fail"
 44357                                  
 44358                                  int24:
 44359 00004A79 B003                    	mov	al,3			; fail the system call
 44360 00004A7B CF                      	iret				; return back to dos.
 44361                                  
 44362                                  ; 19/04/2019 - Retro DOS v4.0
 44363                                  
 44364                                  ;----------------------------------------------------------------------------
 44365                                  ; DATA
 44366                                  ;----------------------------------------------------------------------------
 44367                                  
 44368                                  ;include copyrigh.inc			; copyright statement
 44369                                  
 44370                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 44371                                  
 44372                                  ;MsDosVersion6Copyr:
 44373                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 44374                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 44375                                  
 44376                                  ; 22/10/2022
 44377                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 44378                                  
 44379                                  ; 28/12/2022
 44380                                  %if 0
 44381                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44382                                  MsDosVersion5Copyr:
 44383                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 44384                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 44385                                  %endif
 44386                                  
 44387                                  ; 13/04/2024 - Retro DOS v5.0
 44388                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:51EAh	(IBMBIO.COM offset 42266)
 44389                                  %if 0
 44390                                  IBMDOSV71COPYR:
 44391                                  	db 'IBM DOS Version 7.1 (C)Copyright 1981-2002 IBM Corporation '
 44392                                  	db 'Licensed Material - Property of IBM All rights reserved '
 44393                                  %endif
 44394                                  
 44395                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44396                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44397                                  ; 20/04/2019 - Retro DOS v4.0
 44398                                  ;BOOTMES:
 44399                                  ;	db      13
 44400                                  ;	db      10
 44401                                  ;	db      "MS-DOS version "
 44402                                  ;	db      MAJOR_VERSION + "0"
 44403                                  ;	db      "."
 44404                                  ;	db      (MINOR_VERSION / 10) + "0"
 44405                                  ;	db      (MINOR_VERSION % 10) + "0"
 44406                                  ;	db      13,10
 44407                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 44408                                  ;	; 22/10/2022
 44409                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 44410                                  ;	;
 44411                                  ;	db	0
 44412                                  
 44413                                  	; 01/01/2023 - Retro DOS v4.2
 44414                                  
 44415                                  	; 28/12/2022 - Retro DOS v4.1
 44416                                  ;MsDosVersion5Copyr:
 44417                                  ;  	db	13,10,"MS DOS Version 5.0"
 44418                                  ;	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
 44419                                  
 44420                                  	; 12/12/2022
 44421 00004A7C 00                      	db	0
 44422                                  ; 12/12/2022
 44423                                  BOOTMES:
 44424 00004A7D 0D0A                    	db	13,10
 44425                                  	;;;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 44426                                  	; 28/12/2022
 44427                                  	;;db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 44428                                  	; 01/01/2023
 44429                                  	;db 	"Retro DOS v4.2 (Modified MSDOS 6.22) "
 44430                                  	; 30/12/2023
 44431 00004A7F 526574726F20444F53-     	db 	"Retro DOS v5.0 (Modified PCDOS 7.1) "
 44431 00004A88 2076352E3020284D6F-
 44431 00004A91 646966696564205043-
 44431 00004A9A 444F5320372E312920 
 44432                                  	
 44433 00004AA3 0D0A                    	db	13,10
 44434 00004AA5 6279204572646F6761-     	db	"by Erdogan Tan [2024] " ; 01/01/2024
 44434 00004AAE 6E2054616E205B3230-
 44434 00004AB7 32345D20           
 44435 00004ABB 0D0A                    	db	13,10
 44436 00004ABD 0D0A2400                	db	13,10,"$",0
 44437                                  
 44438 00004AC1 4E554C00                nuldev:	db	"NUL",0
 44439 00004AC5 434F4E00                condev:	db	"CON",0
 44440 00004AC9 41555800                auxdev:	db	"AUX",0
 44441 00004ACD 50524E00                prndev:	db	"PRN",0
 44442                                  
 44443                                  ;IFDEF	CONFIGPROC
 44444 00004AD1 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 44444 00004ADA 595300             
 44445                                  
 44446 00004ADD 413A                    cntry_drv:  db	"A:"
 44447 00004ADF 5C                      cntry_root: db	"\"
 44448 00004AE0 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 44448 00004AE9 595300             
 44449                                  	    ;db	52 dup (0)
 44450 00004AEC 00<rep 34h>             	    times 52 db 0	
 44451                                  
 44452                                  country_file_signature:
 44453 00004B20 FF434F554E545259        	db	0FFh,'COUNTRY'
 44454                                  
 44455                                  cntrycodepage_id: 
 44456 00004B28 0000                    	dw	0 	
 44457                                  
 44458                                  ;ENDIF ; CONFIGPROC
 44459                                  
 44460                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44461                                  ; (SYSINIT:5081h)
 44462                                  
 44463                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44464                                  ;ifdef	MULTI_CONFIG
 44465 00004B2A 00                      newcmd:  db	0			; non-zero if non-std shell specified
 44466 00004B2B 40                      tmplate: db	64                      ; must precede commnd
 44467                                  ;endif
 44468                                  
 44469                                  ;ifdef ROMEXEC
 44470                                  ;	db      7                       ; size of commnd line (excl. null)
 44471                                  ;commnd: db	"COMMAND",0
 44472                                  ;	db	56 dup (0)
 44473                                  ;else
 44474                                  	; 02/11/2022
 44475 00004B2C 0C                      	db	12                      ; size of commnd line (excl. null)
 44476 00004B2D 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 44476 00004B36 434F4D00           
 44477                                  	;db	51 dup (0)
 44478 00004B3A 00<rep 33h>             	times	51 db 0
 44479                                  ;endif
 44480                                  
 44481                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44482                                  ;ifdef	MULTI_CONFIG
 44483 00004B6D 5C434F4D4D414E442E-     commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 44483 00004B76 434F4D00           
 44484 00004B7A 022F5000                	 db	2,"/P",0 		; followed by their respective alternate
 44485 00004B7E 5C4D53444F535C434F-     commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 44485 00004B87 4D4D414E442E434F4D-
 44485 00004B90 00                 
 44486 00004B91 0B413A5C4D53444F53-     	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 44486 00004B9A 202F5000           
 44487 00004B9E 5C444F535C434F4D4D-     commnd4: db	"\DOS\COMMAND.COM",0 	;
 44487 00004BA7 414E442E434F4D00   
 44488 00004BAF 09413A5C444F53202F-     	 db	9,"A:\DOS /P",0		;
 44488 00004BB8 5000               
 44489                                  def_swchr:	
 44490 00004BBA 00                      	 db	0			; default switchchar (referenced as command_line-1)
 44491                                  ;endif
 44492                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44493                                  command_line:
 44494 00004BBB 022F50                  	db	2,"/P"			; default command.com args
 44495                                  	;db	125 dup (0)
 44496 00004BBE 00<rep 7Dh>             	times	125 db 0
 44497                                  
 44498                                  pathstring:
 44499                                  	;db	64 dup (0)
 44500 00004C3B 00<rep 40h>             	times	64 db 0
 44501                                  
 44502                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44503                                  ; (SYSINIT:51D3h)
 44504                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44505                                  ;%if 0
 44506                                  
 44507                                  dae_flag:
 44508 00004C7B 00                      	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 44509                                  
 44510                                  ;ifdef	MULTI_CONFIG
 44511                                  
 44512                                  ; 04/03/2022- Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 44513                                  MAX_MULTI_CONFIG equ 9	; max # of multi-config menu items supported
 44514                                  
 44515                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 44516                                  
 44517 00004C7C 07                      bMenuColor:	db      07h ; 1Fh       ; default fgnd/bgnd color
 44518 00004C7D 00                      bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 44519 00004C7E 05                      		db      5               ; video page function # (KEEP AFTER bMenuPage)
 44520 00004C7F 00                      bLastCol:	db      0               ; ending column on status line
 44521 00004C80 18                      bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 44522 00004C81 00                      bDisableUI:	db      0               ; 1=disable clean/interactive
 44523                                                                          ; 2=disable default 2-second delay
 44524 00004C82 00                      bCRTPage:	db      0               ; value saved from BIOS data area
 44525 00004C83 0000                    wCRTStart:	dw      0               ; value saved from BIOS data area
 44526 00004C85 00                      bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 44527 00004C86 01                      bDefBlock:	db      1               ; default block #
 44528 00004C87 00                      bMaxBlock:	db      0               ; maxmimum block #
 44529 00004C88 0000                    offDefBlock:	dw      0               ; offset of name of default block (if any)
 44530 00004C8A FF                      secTimeOut:	db      -1 ; 0FFh       ; # of seconds for timeout (-1 == indefinite)
 44531 00004C8B 00                      secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 44532 00004C8C 00<rep Ah>              abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 44533 00004C96 0000<rep Ah>            aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 44534 00004CAA 0000<rep Ah>            aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 44535                                  
 44536 00004CBE 434F4E4649473D00        szBoot:		db      "CONFIG=",0
 44537 00004CC6 4D454E5500              szMenu:		db      "MENU",0
 44538 00004CCB 434F4D4D4F4E00          szCommon:	db      "COMMON",0
 44539                                  
 44540                                  ;endif	;MULTI_CONFIG
 44541                                  
 44542                                  	; 10/09/2023
 44543                                  	; MSDOS 6.21 IO.SYS - SYSINIT:5229h 	
 44544                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:546Eh)
 44545                                  
 44546                                  comtab:	 ; label byte
 44547                                  
 44548                                  ;            cmd len    command         cmd code
 44549                                  ;            -------    -------         --------
 44550                                  
 44551                                  ;ifdef MULTI_CONFIG
 44552 00004CD2 015B5B                          db      1,      "[",            CONFIG_BEGIN
 44553                                  ;endif
 44554 00004CD5 05425245414B43                  db      5,      "BREAK",        CONFIG_BREAK
 44555 00004CDC 074255464645525342              db      7,      "BUFFERS",      CONFIG_BUFFERS
 44556 00004CE5 07434F4D4D454E5459              db      7,      "COMMENT",      CONFIG_COMMENT
 44557 00004CEE 07434F554E54525951              db      7,      "COUNTRY",      CONFIG_COUNTRY
 44558 00004CF7 0644455649434544                db      6,      "DEVICE",       CONFIG_DEVICE
 44559 00004CFF 0A4445564943454849-             db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 44559 00004D08 474855             
 44560 00004D0B 03444F5348                      db      3,      "DOS",          CONFIG_DOS
 44561 00004D10 08445249565041524D-             db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 44561 00004D19 50                 
 44562 00004D1A 044643425358                    db      4,      "FCBS",         CONFIG_FCBS
 44563 00004D20 0546494C455346                  db      5,      "FILES",        CONFIG_FILES
 44564                                  ;ifdef MULTI_CONFIG
 44565 00004D27 07494E434C5544454A              db      7,      "INCLUDE",      CONFIG_INCLUDE
 44566                                  ;endif
 44567 00004D30 07494E5354414C4C49              db      7,      "INSTALL",      CONFIG_INSTALL
 44568 00004D39 0B494E5354414C4C48-             db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 44568 00004D42 49474857           
 44569 00004D46 094C41535444524956-             db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 44569 00004D4F 454C               
 44570                                  ;ifdef MULTI_CONFIG
 44571 00004D51 075355424D454E554F              db      7,      "SUBMENU",      CONFIG_SUBMENU
 44572 00004D5A 094D454E55434F4C4F-             db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 44572 00004D63 5252               
 44573 00004D65 0B4D454E5544454641-             db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 44573 00004D6E 554C5441           
 44574 00004D72 084D454E554954454D-             db      8,      "MENUITEM",     CONFIG_MENUITEM
 44574 00004D7B 45                 
 44575                                  ;endif
 44576 00004D7C 0A4D554C5449545241-             db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 44576 00004D85 434B4D             
 44577                                  ;ifdef MULTI_CONFIG
 44578 00004D88 074E554D4C4F434B4E              db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 44579                                  ;endif
 44580 00004D91 0352454D30                      db      3,      "REM",          CONFIG_REM
 44581                                  ;ifdef MULTI_CONFIG
 44582 00004D96 0353455456                      db      3,      "SET",          CONFIG_SET
 44583                                  ;endif
 44584 00004D9B 055348454C4C53                  db      5,      "SHELL",        CONFIG_SHELL
 44585                                  ;if    STACKSW
 44586 00004DA2 06535441434B534B                db      6,      "STACKS",       CONFIG_STACKS
 44587                                  ;endif
 44588 00004DAA 085357495443484553-             db      8,      "SWITCHES",     CONFIG_SWITCHES
 44588 00004DB3 31                 
 44589 00004DB4 00                      	db	0
 44590                                  
 44591                                  	; 10/09/2023
 44592                                  ;aDosdata:  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5550h
 44593                                  	; 13/04/2024 - Retro DOS v5.0
 44594 00004DB5 07444F534441544154      	db	7,	"DOSDATA",	CONFIG_DOSDATA ; 'T'
 44595 00004DBE 00                      	db	0
 44596                                  
 44597                                  ;%endif ; 02/11/2022
 44598                                  
 44599                                  ; 01/01/2023 - Retro DOS v4.2
 44600                                  %if 0
 44601                                  
 44602                                  comtab:
 44603                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44604                                  	; (SYSINIT:38EDh)
 44605                                  	db      7,      "BUFFERS",      CONFIG_BUFFERS
 44606                                  	db      5,      "BREAK",        CONFIG_BREAK
 44607                                  	db      6,      "DEVICE",       CONFIG_DEVICE
 44608                                  	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 44609                                  	db      5,      "FILES",        CONFIG_FILES
 44610                                  	db      4,      "FCBS",         CONFIG_FCBS
 44611                                  	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 44612                                  	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 44613                                  	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 44614                                  	db      6,      "STACKS",       CONFIG_STACKS
 44615                                  	db      7,      "COUNTRY",      CONFIG_COUNTRY
 44616                                  	db      5,      "SHELL",        CONFIG_SHELL
 44617                                  	db      7,      "INSTALL",      CONFIG_INSTALL
 44618                                  	db      7,      "COMMENT",      CONFIG_COMMENT
 44619                                  	db      3,      "REM",          CONFIG_REM
 44620                                  	db      8,      "SWITCHES",     CONFIG_SWITCHES
 44621                                  	db      3,      "DOS",          CONFIG_DOS
 44622                                  	db	0
 44623                                  
 44624                                  %endif
 44625                                  
 44626                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44627                                  ; (SYSINIT:530Ch)
 44628                                  
 44629                                  ; 13/04/2024 - Retro DOS v5.0
 44630                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:555Ah)
 44631                                  
 44632                                  deviceparameters:	
 44633                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 44634                                  devp.specialfunc:	; deviceparameters +
 44635 00004DBF 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 44636                                  devp.devtype:
 44637 00004DC0 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 44638                                  devp.devattr:
 44639 00004DC1 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 44640                                  devp.cylinders:
 44641 00004DC3 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 44642                                  
 44643                                  ; 04/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 44644                                  
 44645                                  	;times	286	db 0
 44646                                  devp.mediatype:		; A_DEVICEPARAMETERS.DP_MEDIATYPE
 44647 00004DC5 00                      	db	0
 44648                                  devp.bpb:		; A_DEVICEPARAMETERS.DP_BPB
 44649                                  devp.bps:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BYTESPERSECTOR
 44650 00004DC6 0000                    	dw	0
 44651                                  devp.secperclus:	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERCLUSTER	
 44652 00004DC8 00                      	db	0	
 44653 00004DC9 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.RESERVEDSECTORS
 44654 00004DCB 00                      	db	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.NUMBEROFFATS
 44655 00004DCC 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.ROOTENTRIES
 44656                                  devp.totalsecs:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.TOTALSECTORS
 44657 00004DCE 0000                    	dw	0
 44658                                  devp.mediaid:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.MEDIADESCRIPTOR
 44659 00004DD0 00                      	db	0
 44660 00004DD1 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERFAT
 44661                                  devp.spt:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.SECTORSPERTRACK
 44662 00004DD3 0000                    	dw	0
 44663                                  devp.heads:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.HEADS
 44664 00004DD5 0000                    	dw	0	
 44665                                  
 44666                                  	; 13/04/2024 - Retro DOS v5.0
 44667                                  	; (PCDOS 7.1 IBMBIO.COM)
 44668 00004DD7 00<rep 44h>             	times	68 db 0	; PCDOS 7.1 (FAT32 BPB)
 44669                                  	;;times	14 db 0	; MSDOS 6.21
 44670                                  	;dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.HIDDENSECTORS
 44671                                  	;dw	0
 44672                                  	;dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BIGTOTALSECTORS
 44673                                  	;dw	0
 44674                                  	;times	6 db 0	
 44675                                  
 44676                                  devp.trktblents:
 44677 00004E1B 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES
 44678                                  devp.sectbl:		; A_DEVICEPARAMETERS.DP_SECTORTABLE
 44679 00004E1D 00<rep FCh>             	times	252 db 0 ; MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 44680                                  			; 63*4 bytes
 44681                                  
 44682                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44683                                  ; (SYSINIT:5430h)
 44684                                  
 44685                                  ; 13/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44686                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:56B4h)
 44687                                  	
 44688 00004F19 0200                    hlim:	dw	2
 44689 00004F1B 0900                    slim:	dw	9
 44690                                  
 44691 00004F1D 00                      drive:	db	0
 44692                                  
 44693                                  switches:
 44694 00004F1E 0000                    	dw	0
 44695                                  
 44696                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44697                                  ; (SYSINIT:5437h)
 44698                                  
 44699                                  ; the following are the recommended bpbs for the media that
 44700                                  ; we know of so far.
 44701                                  
 44702                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44703                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 44704                                  
 44705                                  ; 27/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44706                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:56BBh	
 44707                                  
 44708                                  ; 48 tpi diskettes
 44709                                  
 44710 00004F20 0002                    bpb48t:	dw	512
 44711 00004F22 02                      	db	2
 44712 00004F23 0100                    	dw	1
 44713 00004F25 02                      	db	2
 44714 00004F26 7000                    	dw	112
 44715 00004F28 D002                    	dw	2*9*40 ; 720
 44716 00004F2A FD                      	db	0FDh
 44717 00004F2B 0200                    	dw	2
 44718 00004F2D 0900                    	dw	9
 44719 00004F2F 0200                    	dw	2
 44720 00004F31 00000000                	dd	0
 44721 00004F35 00000000                        dd      0
 44722                                  	; 27/12/2023
 44723 00004F39 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44724 00004F55 90                      	db	90h	
 44725                                  
 44726                                  ; 96tpi diskettes
 44727                                  
 44728 00004F56 0002                    bpb96t:	dw	512
 44729 00004F58 01                      	db	1
 44730 00004F59 0100                    	dw	1
 44731 00004F5B 02                      	db	2
 44732 00004F5C E000                    	dw	224
 44733 00004F5E 6009                    	dw	2*15*80 ; 2400
 44734 00004F60 F9                      	db	0F9h
 44735 00004F61 0700                    	dw	7
 44736 00004F63 0F00                    	dw	15
 44737 00004F65 0200                    	dw	2
 44738 00004F67 00000000                	dd	0
 44739 00004F6B 00000000                        dd      0
 44740                                  	; 27/12/2023
 44741 00004F6F 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44742 00004F8B 90                      	db	90h	
 44743                                  
 44744                                  ; 3 1/2 inch diskette bpb
 44745                                  
 44746 00004F8C 0002                    bpb35:	dw	512
 44747 00004F8E 02                      	db	2
 44748 00004F8F 0100                    	dw	1
 44749 00004F91 02                      	db	2
 44750 00004F92 7000                    	dw	112
 44751 00004F94 A005                    	dw	2*9*80 ; 1440
 44752 00004F96 F9                      	db	0F9h
 44753 00004F97 0300                    	dw	3
 44754 00004F99 0900                    	dw	9
 44755 00004F9B 0200                    	dw	2
 44756 00004F9D 00000000                	dd	0
 44757 00004FA1 00000000                        dd      0
 44758                                  	; 27/12/2023
 44759 00004FA5 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44760 00004FC1 90                      	db	90h
 44761                                        
 44762 00004FC2 0002                    bpb35h:	dw	512
 44763 00004FC4 01                      	db	1
 44764 00004FC5 0100                    	dw	1
 44765 00004FC7 02                      	db	2
 44766 00004FC8 E000                    	dw	224
 44767 00004FCA 400B                    	dw	2*18*80 ; 2880
 44768 00004FCC F0                      	db	0F0h
 44769 00004FCD 0900                    	dw	9
 44770 00004FCF 1200                    	dw	18
 44771 00004FD1 0200                    	dw	2
 44772 00004FD3 00000000                	dd	0
 44773 00004FD7 00000000                        dd      0
 44774                                  	; 27/12/2023
 44775 00004FDB 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44776 00004FF7 90                      	db	90h
 44777                                  
 44778                                  ; m037 - BEGIN
 44779                                  
 44780 00004FF8 0002                    bpb288:	dw	512
 44781 00004FFA 02                      	db	2
 44782 00004FFB 0100                    	dw	1
 44783 00004FFD 02                      	db	2
 44784 00004FFE F000                    	dw	240
 44785 00005000 8016                    	dw	2*36*80 ; 5760
 44786 00005002 F0                      	db	0F0h
 44787 00005003 0900                    	dw	9
 44788 00005005 2400                    	dw	36
 44789 00005007 0200                    	dw	2
 44790 00005009 00000000                	dd	0
 44791 0000500D 00000000                        dd      0
 44792                                  	; 27/12/2023
 44793 00005011 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44794 0000502D 90                      	db	90h
 44795                                  
 44796                                  ; m037 - END
 44797                                  
 44798                                  ; 12/05/2019
 44799                                  
 44800                                  align 2
 44801                                  
 44802                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44803                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 44804                                  
 44805                                  ; 13/04/2024 - Retro DOS v5.0
 44806                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:5738h)
 44807                                  
 44808 0000502E [204F]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 44809 00005030 [564F]                  	    dw	    bpb96t		; 96tpi drives
 44810 00005032 [8C4F]                  	    dw	    bpb35		; 3.5" drives
 44811                                  ; the following are not supported, so default to 3.5" media layout
 44812 00005034 [8C4F]                  	    dw	    bpb35		; not used - 8" drives
 44813 00005036 [8C4F]                  	    dw	    bpb35		; not used - 8" drives
 44814 00005038 [8C4F]                  	    dw	    bpb35		; not used - hard files
 44815 0000503A [8C4F]                  	    dw	    bpb35		; not used - tape drives
 44816 0000503C [C24F]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 44817 0000503E [8C4F]                  	    dw	    bpb35		; ERIMO				m037
 44818 00005040 [F84F]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 44819                                  
 44820                                  switchlist: 
 44821 00005042 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 44822                                  
 44823                                  ;----------------------------------------------------------------------------
 44824                                  ; Messages
 44825                                  ;----------------------------------------------------------------------------
 44826                                  
 44827                                  ; 19/04/2019 - Retro DOS v4.0
 44828                                  
 44829                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 44830                                  
 44831 0000504B 00                      	db 	0
 44832                                  
 44833                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44834                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 44835                                  
 44836                                  ; 13/04/2024
 44837                                  ; MSDOS 6.22 IO.SYS - SYSINIT:559Eh
 44838                                  
 44839                                  ; 13/04/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44840                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5756h
 44841                                  
 44842                                  badopm:
 44843 0000504C 0D0A                    	db	0Dh,0Ah 
 44844 0000504E 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 44844 00005057 7A656420636F6D6D61-
 44844 00005060 6E6420696E20434F4E-
 44844 00005069 4649472E535953     
 44845                                  crlfm:
 44846 00005070 0D0A24                  	db	0Dh,0Ah,'$'
 44847                                  badparm:
 44848 00005073 0D0A                    	db	0Dh,0Ah
 44849 00005075 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 44849 0000507E 6E64206F7220706172-
 44849 00005087 616D6574657273202D-
 44849 00005090 2024               
 44850                                  badsiz_pre:
 44851 00005092 0D0A                    	db	0Dh,0Ah
 44852 00005094 536563746F72207369-     	db	'Sector size too large in file $'
 44852 0000509D 7A6520746F6F206C61-
 44852 000050A6 72676520696E206669-
 44852 000050AF 6C652024           
 44853                                  badld_pre:
 44854 000050B3 0D0A                    	db	0Dh,0Ah
 44855 000050B5 426164206F72206D69-     	db	'Bad or missing $'
 44855 000050BE 7373696E672024     
 44856                                  badcom:
 44857 000050C5 436F6D6D616E642049-     	db	'Command Interpreter',0
 44857 000050CE 6E7465727072657465-
 44857 000050D7 7200               
 44858                                  badcountry:
 44859 000050D9 0D0A                    	db	0Dh,0Ah
 44860 000050DB 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 44860 000050E4 6F756E74727920636F-
 44860 000050ED 6465206F7220636F64-
 44860 000050F6 6520706167650D0A24 
 44861                                  badcountrycom:
 44862 000050FF 0D0A                    	db	0Dh,0Ah
 44863 00005101 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 44863 0000510A 434F554E5452592063-
 44863 00005113 6F6D6D616E640D0A24 
 44864                                  insufmemory:
 44865 0000511C 0D0A                    	db	0Dh,0Ah
 44866 0000511E 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 44866 00005127 656E74206D656D6F72-
 44866 00005130 7920666F7220434F55-
 44866 00005139 4E5452592E53595320-
 44866 00005142 66696C650D0A24     
 44867                                  badmem:
 44868 00005149 0D0A                    	db	0Dh,0Ah
 44869 0000514B 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 44869 00005154 74696F6E20746F6F20-
 44869 0000515D 6C6172676520666F72-
 44869 00005166 206D656D6F72790D0A-
 44869 0000516F 24                 
 44870                                  badblock:
 44871 00005170 0D0A                    	db	0Dh,0Ah
 44872 00005172 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 44872 0000517B 626C6F636B20646576-
 44872 00005184 696365730D0A24     
 44873                                  badstack:
 44874 0000518B 0D0A                    	db	0Dh,0Ah
 44875 0000518D 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 44875 00005196 5441434B2070617261-
 44875 0000519F 6D65746572730D0A24 
 44876                                  	; 18/12/2022
 44877                                  ;badorder:
 44878                                  	;db	0Dh,0Ah
 44879                                  	;db	'Incorrect order in CONFIG.SYS line $'
 44880                                  errorcmd:
 44881 000051A8 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 44881 000051B1 434F4E4649472E5359-
 44881 000051BA 53206C696E652024   
 44882                                  
 44883                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44884                                  ; (SYSINIT:566Eh)
 44885                                  
 44886                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44887                                  ;%if 0
 44888                                  
 44889 000051C2 4F4E                    OnOff:	db	'ON'
 44890 000051C4 4F4646                  OnOff2:	db	'OFF'
 44891                                  
 44892                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44893                                  	; (SYSINIT:5673h)
 44894                                  ;StartMsg:
 44895                                  ;	db	'Starting MS-DOS...',0Dh,0Ah
 44896                                  ;	db	0Ah,0
 44897                                  
 44898                                  	; 17/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44899                                  	; (SYSINIT:58F7h)
 44900                                  StartMsg:
 44901 000051C7 5374617274696E6720-     	db	'Starting PC DOS...',0Dh,0Ah
 44901 000051D0 504320444F532E2E2E-
 44901 000051D9 0D0A               
 44902 000051DB 0A00                    	db	0Ah,0
 44903                                  
 44904                                  _$PauseMsg:
 44905                                  	; 17/12/2023
 44906                                  	;db	'Press any key to continue . . .',0Dh,0Ah,'$'
 44907                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:590Dh)
 44908 000051DD 507265737320616E79-     	db	'Press any key to continue...',0Dh,0Ah,'$'
 44908 000051E6 206B657920746F2063-
 44908 000051EF 6F6E74696E75652E2E-
 44908 000051F8 2E0D0A24           
 44909                                  _$CleanMsg:
 44910                                  	;db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 44911                                  	; 17/12/2023
 44912 000051FC 504320444F53206973-     	db	'PC DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 44912 00005205 20627970617373696E-
 44912 0000520E 6720796F757220434F-
 44912 00005217 4E4649472E53595320-
 44912 00005220 616E64204155544F45-
 44912 00005229 5845432E4241542066-
 44912 00005232 696C65732E0D0A24   
 44913                                  _$InterMsg:
 44914                                  	;db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 44915                                  	; 17/12/2023
 44916 0000523A 504320444F53207769-     	db	'PC DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 44916 00005243 6C6C2070726F6D7074-
 44916 0000524C 20796F7520746F2063-
 44916 00005255 6F6E6669726D206561-
 44916 0000525E 636820434F4E464947-
 44916 00005267 2E53595320636F6D6D-
 44916 00005270 616E642E0D0A24     
 44917                                  _$MenuHeader:
 44918 00005277 0D0A                    	db	0Dh,0Ah
 44919                                  	; 17/12/2023
 44920                                  	;db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 44921                                  	;db	'  '
 44922                                  	;times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 44923                                  	;db 	0Dh,0Ah,'$'
 44924                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:59A7h)
 44925 00005279 2020504320444F5320-     	db	'  PC DOS 7.1 Startup Menu',0Dh,0Ah
 44925 00005282 372E31205374617274-
 44925 0000528B 7570204D656E750D0A 
 44926 00005294 2020                    	db	'  '
 44927 00005296 CD<rep 17h>             	times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 44928 000052AD 0D0A24                  	db 	0Dh,0Ah,'$'
 44929                                  _$MenuPrmpt:
 44930 000052B0 2020456E7465722061-     	db	'  Enter a choice: $'
 44930 000052B9 2063686F6963653A20-
 44930 000052C2 24                 
 44931                                  _$StatusLine:
 44932 000052C3 46353D427970617373-     	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS '
 44932 000052CC 207374617274757020-
 44932 000052D5 66696C65732046383D-
 44932 000052DE 436F6E6669726D2065-
 44932 000052E7 616368206C696E6520-
 44932 000052F0 6F6620434F4E464947-
 44932 000052F9 2E53595320         
 44933 000052FE 616E64204155544F45-     	db	'and AUTOEXEC.BAT [ ]$'
 44933 00005307 5845432E424154205B-
 44933 00005310 205D24             
 44934                                  _$InterPrmpt:
 44935                                  	;db	' [Y,N]?$'
 44936                                  	; 13/04/2024
 44937                                  	; 04/08/2023
 44938 00005313 205B592C4E2C455343-     	db	' [Y,N,ESC]?$' ; PCDOS 7.1 - IBMBIO.COM 
 44938 0000531C 5D3F24             
 44939 0000531F 59455324                _$YES:	db	'YES$'
 44940 00005323 4E4F2024                _$NO:	db	'NO $'
 44941                                  _$TimeOut:
 44942 00005327 54696D652072656D61-     	db	'Time remaining: $'
 44942 00005330 696E696E673A2024   
 44943                                  badcomprmpt:
 44944                                  	;db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 44945                                  	; 13/04/2024 (PCDOS 7.1 IBMBIO.COM)
 44946 00005338 456E74657220636F72-     	db	'Enter correct name of Command Interpreter (for example, C:\COMMAND.COM)'
 44946 00005341 72656374206E616D65-
 44946 0000534A 206F6620436F6D6D61-
 44946 00005353 6E6420496E74657270-
 44946 0000535C 72657465722028666F-
 44946 00005365 72206578616D706C65-
 44946 0000536E 2C20433A5C434F4D4D-
 44946 00005377 414E442E434F4D29   
 44947 0000537F 0D0A24                  	db	0Dh,0Ah,'$'
 44948                                  _$AutoPrmpt:
 44949 00005382 50726F636573732041-     	db	'Process AUTOEXEC.BAT [Y,N]?$'
 44949 0000538B 55544F455845432E42-
 44949 00005394 4154205B592C4E5D3F-
 44949 0000539D 24                 
 44950                                  
 44951                                  ;%endif ; 02/11/2022
 44952                                  
 44953                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44954                                  ; (SYSINIT:5840h)
 44955                                  
 44956                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44957                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 44958                                  
 44959                                  TooManyDrivesMsg:
 44960 0000539E 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 44960 000053A7 4C6F676963616C2064-
 44960 000053B0 726976657320706173-
 44960 000053B9 74205A3A2065786973-
 44960 000053C2 7420616E642077696C-
 44960 000053CB 6C2062652069676E6F-
 44960 000053D4 7265640D0A24       
 44961                                  
 44962                                  ; MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 44963                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 44964                                  	;db	7 dup(0)
 44965                                  
 44966                                  	;times	7 db 0
 44967                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44968                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 44969                                  	; 09/12/2022
 44970                                  	;times 4 db 0
 44971                                  
 44972                                  	; 08/04/2024 - Retro DOS v5.0
 44973                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5B0Bh
 44974                                  baddblspace:
 44975 000053DA 526571756972656420-     	db	'Required system component is not installed',0Dh,0Ah,'$',0
 44975 000053E3 73797374656D20636F-
 44975 000053EC 6D706F6E656E742069-
 44975 000053F5 73206E6F7420696E73-
 44975 000053FE 74616C6C65640D0A24-
 44975 00005407 00                 
 44976                                  	;db	7 dup(0)
 44977                                  
 44978                                  ;----------------------------------------------------------------------------
 44979                                  		; 09/12/2022
 44980                                  		;db 0
 44981                                  
 44982                                  number3div	equ ($-SYSINIT$)
 44983                                  number3mod	equ (number3div % 16)
 44984                                  
 44985                                  %if (number3mod>0) & (number3mod<16) ; 17/09/2023
 44986 00005408 00<rep 8h>              		times (16-number3mod) db 0
 44987                                  %endif
 44988                                  
 44989                                  ;---------------------------------------------------------------------------- 
 44990                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS 
 44991                                  ;---------------------------------------------------------------------------- 
 44992                                  
 44993                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 44994                                  
 44995                                  ;----------------------------------------------------------------------------
 44996                                  ; 20/04/2019 - Retro DOS v4.0
 44997                                  
 44998                                  ; 09/12/2022
 44999                                  ;
 45000                                  ;bss_start:
 45001                                  ;
 45002                                  ;ABSOLUTE bss_start
 45003                                  ;
 45004                                  ;alignb 16
 45005                                  
 45006                                  SI_end:  ; SI_end equ $
 45007                                  
 45008                                  ;----------------------------------------------------------------------------
 45009                                  
 45010                                  ;sysinitseg	ends
 45011                                  
 45012                                  ; ***************************************************************************
 45013                                  
 45014                                  ; 04/01/2023 - MSDOS 6.21 SYSINIT:SI_end = SYSINIT:58A0h (IOSYS:9F46h)
 45015                                  ; 09/12/2022 - MSDOS 5.0 SYSINIT:SI_end = SYSINIT:3D20h
 45016                                  
 45017                                  SYSINITSIZE	equ SI_end - SYSINIT$
 45018                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 45019                                  
 45020                                  ;----------------------------------------------------------------------------
 45021                                  ; End of Retro DOS v5.0 IBMBIO.COM (IO.SYS) source by Erdogan Tan (2023)
 45022                                  ;----------------------------------------------------------------------------
 45023                                  
 45024                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 45025                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 45026                                  ;----------------------------------------------------------------------------
 45027                                  ;----------------------------------------------------------------------------
 45028                                  
 45029                                  ; ----------------------------------------------------------------------------
 45030                                  ; START OF PCDOS 7.1 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 45031                                  ; ----------------------------------------------------------------------------
 45032                                  ; 02/10/2023 - Retro DOS v5.0
 45033                                  ; 04/01/2023 - Retro DOS v4.2
 45034                                  ; 29/12/2022 - Retro DOS v4.1
 45035                                  ; 18/03/2019 - Retro DOS v4.0 
 45036                                  ; 11/06/2018 - Retro DOS v3.0 
 45037                                  
 45038                                  ;MSDOS_BIN_OFFSET:
 45039                                  IBMDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 45040                                  		;; 28/06/2019 ('msdos6.s') 
 45041                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 45042                                  		
 45043                                  		; 29/12/2022
 45044                                  		;incbin	'MSDOS51.BIN' ; Retro DOS 4.1 - MSDOS 5.0+ KERNEL
 45045                                  
 45046                                  		; 29/09/2023 (PARASTART=3DE0h)
 45047                                  		; 27/09/2023 (BugFix) ((PARASTART=3DD0h))
 45048                                  		; 04/01/2023
 45049                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.2 - MSDOS 6.21+ KERNEL		
 45050                                  		
 45051                                  		; 14/04/2024
 45052                                  		; 02/10/2023 - Retro DOS v5.0 - PCDOS 7.1 KERNEL		 
 45053 00005410 <bin A646h>             		incbin	'IBMDOS7.BIN'
 45054                                  
 45055                                  		;; 28/12/2022 (BugFix)
 45056                                  		;; 22/12/2022
 45057                                  		;; 21/12/2022 ('msdos5.s')
 45058                                  		;incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 45059                                  
 45060                                  ; 28/09/2023	
 45061                                  ;msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 45062                                  
 45063                                  align 2
 45064                                  
 45065                                  ; 21/12/2022
 45066                                  ;;END_OF_KERNEL:
 45067                                  ;END_OF_KERNEL equ $
 45068                                  
 45069                                  ; 28/09/2023
 45070                                  S3SIZE equ $-$$
 45071                                  KERNEL_SIZE equ S1SIZE+S2SIZE+S3SIZE
 45072                                  
 45073                                  ;=============================================================================
 45074                                  ;	END
 45075                                  ;=============================================================================
 45076                                  ; Retro DOS v5.0 by Erdogan Tan (Redevelopment of PC-DOS 7.1 KERNEL via NASM)
 45077                                  ; ------------------------------
 45078                                  ; APRIL 2024, ISTANBUL - TURKIYE.
