     1                                  ; ****************************************************************************
     2                                  ; IBMBIO7.S (PCDOS 7.1 IBMBIO.COM) - RETRO DOS 5.0 by ERDOGAN TAN - 12/09/2023
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 27/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 26/12/2018 (Retro DOS 4.0), 01/10/2022 (Retro DOS 4.2)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm ibmbio7.s -l ibmbio7.txt -o IBMBIO.COM -Z error.txt))
    11                                  ;					   -o IBMBIO7.BIN 	
    12                                  ; ----------------------------------------------------------------------------
    13                                  
    14                                  ; 12/09/2023 - Retro DOS v5.0 Kernel -dosbios- ('ibmbio7.s')
    15                                  ; Modified from 'iosys6.s' (11/09/2023, Retro DOS v4.2 Kernel's IO.SYS) file
    16                                  ; as below:
    17                                  ;
    18                                  ;    1) Retro DOS v4.2 IO.SYS is based on disassembled source code
    19                                  ;	of MSDOS 6.21 IO.SYS, derived using MSDOS 6.0 source code.
    20                                  ;
    21                                  ;    2) Labels, names, comments, explanations and structure definitions
    22                                  ;	about procedures and code details are almost entirely taken from
    23                                  ;	the original MSDOS 6.0 source code, except for the details that
    24                                  ;	Erdogan Tan personally experienced. Some of them are incompatible
    25                                  ;	with PCDOS 7.1 code. But they have not been deleted to preserve
    26                                  ;	the originality of the descriptions.)
    27                                  ;
    28                                  ;    3)'ibmbio7.s' contains the BIOSLOADER (MSLOADER) section located in
    29                                  ;	the 1st 4 sectors of the IBMBIO.COM file on disk. This is a method
    30                                  ;	from older DOS versions (3 sectors for MSDOS 6.22).
    31                                  ;	The MSDOS/PCDOS boot sector code only reads these MSLOADER/BIOSLOADER
    32                                  ;	sectors and transfers control to the MSLOADER/BIOSLOADER code.
    33                                  ;	BUT!!! The Retro DOS v3 (& v5) boot sector code loads the entire
    34                                  ;	MSDOS.SYS/PCDOS.SYS -combined- kernel file into memory at once.
    35                                  ;	So, hence the Retro DOS boot sector code, 'retrodos5.s' file
    36                                  ;       contains slightly different IO.SYS/IBMBIO.COM INITialization code
    37                                  ;	than the original PCDOS/MSDOS. It does not include 
    38                                  ;	the MSLOADER/BIOSLOADER section. The 'retrodos5.s' and 'ibmbio7.s'
    39                                  ;	files are almost identical except their INIT codes.)
    40                                  ;
    41                                  ; ('iosys6.s' has been converted to 'ibmbio7.s' and 'retrodos42.s' has been
    42                                  ; converted to 'retrodos5.s'. 'ibmbio7.s' is IBMBIO.COM source code file
    43                                  ; while 'retrodos5.s' is source code of Retro DOS v5 kernel file 'PCDOS.SYS'.
    44                                  ; 'retrodos5.s' includes 'ibmdos7.bin' or IBMDOS.COM as binary file.)
    45                                  		
    46                                  ; ----------------------------------------------------------------------------
    47                                  
    48                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    49                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    50                                  
    51                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    52                                  ;     (as included binary, 'IOSYS5.BIN') 
    53                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    54                                  ;						        (except MSLOAD code)  
    55                                        
    56                                  ;---- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    57                                  ;     at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    58                                  ;     moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    59                                  ;     Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    60                                  ;     SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    61                                  ;     (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    62                                  
    63                                  ; ----------------------------------------------------------------------------
    64                                  
    65                                  ; ----------------------------------------------------------------------------
    66                                  ;
    67                                  ; +-------------------------------------------------------------------------+
    68                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
    69                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
    70                                  ; |			 Licensed to: Freeware version			    |
    71                                  ; +-------------------------------------------------------------------------+
    72                                  ;
    73                                  ; ----------------------------------------------------------------------------
    74                                  
    75                                  ;		.386
    76                                  ;		.model flat
    77                                  
    78                                  ; ============================================================================
    79                                  
    80                                  ; 12/09/2023 - Erdogan Tan - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
    81                                  
    82                                  ;-----------------------------------------------------------------------------
    83                                  
    84                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
    85                                  
    86                                  ;-----------------------------------------------------------------------------
    87                                  ; Start of (PCDOS 7.1) IBMBIO.COM
    88                                  ;-----------------------------------------------------------------------------
    89                                  
    90                                  		[ORG 0]			; segment 0x0070h
    91                                  
    92                                  ;=============================================================================
    93                                  ; IBMDOS.COM (IO.SYS) LOADER SECTION 
    94                                  ;=============================================================================
    95                                  ; 12/09/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
    96                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
    97                                  ;non-contiguous io.sys loader (msload) ((MSDOS 6.0 source: MSLOAD.ASM, 1991))
    98                                  
    99                                  section .MSLOAD ; vstart=0 ;; .BIOSLOAD 
   100                                  
   101                                  ; ===========================================================================
   102                                  
   103                                  ; 09/12/2022
   104                                  ; Comments are from MSDOS 6.0 MSLOAD.ASM (1991) & HEX-RAYS IDA disasm output
   105                                  
   106                                  ; ===========================================================================
   107                                  ;	NOTE: The boot loader should be verifying that the first
   108                                  ;	  block of io.sys is, in fact, at cluster 2. This would be saving
   109                                  ;	  a whole lot of time during system debugging.
   110                                  ;
   111                                  ;============================================================================
   112                                  ;
   113                                  ;     for dos 4.00, msload program has been changed to allow:
   114                                  ;	  1. 32 bit calculation,
   115                                  ;	  2. reading a fat sector when needed, instead of reading the whole
   116                                  ;	     fat sectors at once. this will make the boot time faster,
   117                                  ;	     and eliminate the memory size limitation problem,
   118                                  ;	  3. solving the limitation of the file size (29 kb) of io.sys0,
   119                                  ;	  4. adding the boot error message. show the same boot error message
   120                                  ;	     and do the same behavior when the read operation of io.sys
   121                                  ;	     fails as the msboot program, since msload program is the
   122                                  ;	     extention of msboot program.
   123                                  ;
   124                                  ; ===========================================================================
   125                                  
   126                                  ;----------------------------------------------------------------------------
   127                                  ;
   128                                  ; M056 : Added RPL support, so that RPL's fake INT 13 code can be safe from
   129                                  ;		SYSINIT & transient portion of COMMAND.COM
   130                                  ;
   131                                  ;----------------------------------------------------------------------------
   132                                  		
   133                                  		[ORG 0]			; segment 0x0070h
   134                                  
   135                                  START$:
   136 00000000 EB45                    		jmp	short SaveInputValues	; 13/09/2023
   137 00000002 90                      		nop	; 13/09/2023
   138                                  %if 0
   139                                  ; 20/12/2022
   140                                  ; 09/12/2022
   141                                  ; ---------------------------------------------------------------------------
   142                                  SysVersion:	dw 5			; expected_version	
   143                                  ;MyStacks:	db 256 dup(0)		; local stack
   144                                  ; 22/12/2022
   145                                  ; 20/12/2022
   146                                  ;MyStacks:	dw 102 dup(0)		; local stack
   147                                  NumHeads:	dw 0			; ...
   148                                  ClusterSize:	db 2 dup(0)		; ...
   149                                  StartSecL:	dw 0			; ...
   150                                  StartSecH:	dw 0			; ...
   151                                  TempH:		dw 0			; for 32 bit calculation
   152                                  TempCluster:	db 2 dup(0)		; temporary place for cluster number
   153                                  LastFatSector:	db 2 dup(0FFh)		; fat sec # start from 1st FAT entry
   154                                  SectorCount:	dw 0			; ...
   155                                  SecPerFat:	dw 0			; ...
   156                                  HiddenSectorsL:	dw 0			; ...
   157                                  HiddenSectorsH:	dw 0			; ...
   158                                  BytesPerSec:	dw 0			; ...
   159                                  ReservSectors:	db 2 dup(0)		; ...
   160                                  CurrentCluster:	db 2 dup(0)		; ...
   161                                  NextBioLocation: db 2 dup(0)		; ...
   162                                  FirstSectorL:	dw 0			; ...
   163                                  FirstSectorH:	dw 0			; ...
   164                                  TotalSectorsL:	dw 0			; max. number of sectors
   165                                  TotalSectorsH:	dw 0			; ...
   166                                  SecPerTrack:	db 2 dup(0)		; ...
   167                                  BootDrive:	db 0			; ...
   168                                  Fatsize:	db 0			; ...
   169                                  MediaByte:	db 0			; ...
   170                                  EndOfFile:	db 0			; ...
   171                                  OrgDasdPtr:	db 4 dup(0)		; ...
   172                                  FatSegment:	db 2 dup(0)		; ...
   173                                  SecPerCluster:	db 0			; ...
   174                                  ; ---------------------------------------------------------------------------
   175                                  %endif
   176                                  
   177                                  ; 13/09/2023 (Retro DOS v5)
   178                                  ; 24/12/2022 (Retro DOS v4)
   179                                  ; 23/12/2022
   180                                  ; 20/12/2022
   181                                  ; 09/12/2022
   182                                  ; ---------------------------------------------------------------------------
   183                                  ;SysVersion:	dw 5			; expected_version	
   184 00000003 07                      SysVersionMajor: db 7	; Retro DOS v5.0 (IBM PCDOS 7.1)
   185 00000004 0A                      SysVersionMinor: db 10
   186 00000005 0000                    ClusterSize:	dw 0
   187 00000007 0000                    StartSecL:	dw 0
   188 00000009 0000                    StartSecH:	dw 0
   189 0000000B 0000                    TempH:		dw 0			; for 32 bit calculation
   190                                  ;TempCluster:	dw 0
   191 0000000D FFFF                    LastFatSectorL:	dw 0FFFFh		; fat sec # start from 1st FAT entry
   192 0000000F FFFF                    LastFatSectorH:	dw 0FFFFh		; fat sec # start from 1st FAT entry
   193 00000011 0000                    SectorCount:	dw 0
   194                                  CurrentCluster:	
   195                                  		; 06/10/2023
   196                                  CurrentClusterL:
   197 00000013 0000                    		dw 0
   198                                  CurrentClusterH:
   199 00000015 0000                    		dw 0	; 13/09/2023 - HW of FAT32 cluster number
   200                                  		; 27/12/2023
   201                                  FirstCluster:	; 06/10/2023
   202 00000017 0000                    FirstClusterL:	dw 0
   203 00000019 0000                    FirstClusterH:	dw 0
   204                                  		;;
   205 0000001B 0000                    BytesPerSec:	dw 0
   206 0000001D 0000                    SecPerCluster:	dw 0
   207                                  		; 13/09/2023
   208 0000001F 0000                    ReservSectors:	dw 0
   209 00000021 0000                    NumFats:	dw 0
   210 00000023 0000                    RootEntCnt:	dw 0
   211 00000025 0000                    SecPerTrack:	dw 0
   212 00000027 0000                    NumHeads:	dw 0
   213 00000029 0000                    HiddenSectorsL:	dw 0			
   214 0000002B 0000                    HiddenSectorsH:	dw 0			
   215 0000002D 0000                    TotalSectorsL:	dw 0			; max. number of sectors
   216 0000002F 0000                    TotalSectorsH:	dw 0
   217 00000031 0000                    FATSectorsL:	dw 0
   218 00000033 0000                    FATSectorsH:	dw 0
   219 00000035 0000                    RootClusterL:	dw 0
   220 00000037 0000                    RootClusterH:	dw 0
   221                                  		;;
   222 00000039 0000                    FirstSectorL:	dw 0
   223 0000003B 0000                    FirstSectorH:	dw 0
   224 0000003D 00                      BootDrive:	db 0
   225 0000003E 00                      FatType:	db 0
   226 0000003F 00                      MediaByte:	db 0
   227 00000040 00                      EndOfFile:	db 0
   228 00000041 00000000                OrgDasdPtr:	dd 0
   229                                  		; 06/10/2023
   230                                  ;FatStartSecL:	dw 0
   231                                  ;FatStartSecH:	dw 0
   232 00000045 0000                    FatSegment:	dw 0
   233                                  		; 05/10/2023
   234                                  ;NextBioLocation:
   235                                  	; 05/10/2023 (bp register will be used instead of [NextBioLocation])
   236                                  		;dw 0
   237                                  
   238                                  		; 13/09/2023
   239                                  
   240                                  ; SaveInputValues
   241                                  ; ---------------------------------------------------------------------------
   242                                  ; INPUT:     none
   243                                  ;
   244                                  ;   dl = int 13 drive number we booted from
   245                                  ;   ch = media byte
   246                                  ;   bx = first data sector (low) on disk (0-based)
   247                                  ;   ds:si = original rom bios diskette parameter table.
   248                                  ;
   249                                  ; if an extended boot record, then ax will be the first data sector
   250                                  ; high word. save ax and set FirstSectorH according to ax if it is an
   251                                  ; extended boot record.
   252                                  ;
   253                                  ;   ax = first data sector (high) on disk ;
   254                                  ; OUTPUT:
   255                                  ;
   256                                  ;   bx = first data sector on disk
   257                                  ;
   258                                  ;   MediaByte = input ch
   259                                  ;   BootDrive = input dl
   260                                  ;   FirstSectorL = input bx
   261                                  ;   FirstSectorH = input ax, if an extended boot record.;j.k.
   262                                  ;   TotalSectorsL = maximum sector number in this media ;j.k.
   263                                  ;   TotalSectorsH = high word of the above
   264                                  ;   HiddenSectorsL = hidden secotrs
   265                                  ;   HiddenSectorsH
   266                                  ;   ReservSectors = reserved sectors
   267                                  ;   SecPerTrack = sectors/track
   268                                  ;   NumHeads = heads/cylinder
   269                                  ;
   270                                  ;   ds = 0
   271                                  ;   AX,DX,SI destroyed
   272                                  ;
   273                                  ; calls:     none
   274                                  ; ---------------------------------------------------------------------------
   275                                  ;FUNCTION:
   276                                  ; save input information and bpb informations from the boot record.
   277                                  ; ---------------------------------------------------------------------------
   278                                  
   279                                  Sec9 equ 522h
   280                                  ; 20/12/2022	
   281                                  DskAddr	equ 1Eh*4 ; 78h
   282                                  ; 22/12/2022
   283                                  ;StackPtr equ MyStacks+(NumHeads-MyStacks)
   284                                  
   285                                  ; ---------------------------------------------------------------------------
   286                                  
   287                                  		; 13/09/2023
   288                                  		; (registers from PCDOS 7.1 boot sector)
   289                                  		; ss = 0
   290                                  		; sp = 7BE4h
   291                                  		;	[0:7BE4h] = ss:bx = 0:78h (1Eh vector)
   292                                  		;	[0:7BE8h] = ds:si = DSK_PARMS (INT 1Eh) table address	
   293                                  		; bp = 7BECh
   294                                  		; ds = 0
   295                                  		; ax:bx = absolute disk address for cluster 2 (data start)
   296                                  		;	= dword/far ptr [0:7BFCh]
   297                                  		; es = ax	
   298                                  		; dl = [BootDrv] = [7C40h] ; !FAT32 BPB!
   299                                  		; ch = [MediaByte] = [7C15h]
   300                                  		; ds:si = rom bios disk(ette) params table address (INT 1Eh)
   301                                  		;	= [0:7BE8h] = 0:7BECh
   302                                  		;	(ds:si is also in stack, at [0:7BE8h])
   303                                  		; 0:500h = root dir buffer (1st sector of the root dir)
   304                                  		; [0:7Eh] = disk(ette) params table address = 0:7BECh
   305                                  		;	   (head settle time = 15ms) 
   306                                  
   307                                  SaveInputValues:
   308                                  		; 13/09/2023 (Retro DOS v5 MSLOADER/BIOSLOADER)
   309 00000047 8CDF                    		mov	di, ds ; DSK_PARMS (INT 1Eh) table segment
   310                                  
   311                                  		; 24/12/2022 (Retro DOS v4 MSLOADER)
   312 00000049 0E                      		push	cs
   313 0000004A 1F                      		pop	ds 
   314                                  		;mov	[cs:FirstSectorL], bx ; first data sector (low word)
   315                                  		;mov	[cs:MediaByte], ch
   316                                  		;mov	[cs:BootDrive], dl
   317                                  		; 13/09/2023
   318 0000004B 891E[3900]              		mov	[FirstSectorL], bx
   319 0000004F A3[3B00]                		mov	[FirstSectorH], ax
   320 00000052 891E[0700]              		mov	[StartSecL], bx ; **!**
   321 00000056 A3[0900]                		mov	[StartSecH], ax ; **!!**
   322 00000059 882E[3F00]              		mov	[MediaByte], ch
   323 0000005D 8816[3D00]              		mov	[BootDrive], dl
   324                                  
   325                                  		; 13/09/2023
   326                                  		; (PCDOS 7.1 MSLOAD:0058h)
   327                                  		;pop	si	
   328                                  		;pop	ds
   329                                  		;	; from BS code..
   330                                  		;	; ss:sp = 0:7BE4h, bp = 7BECh
   331                                  		;	; Clear stack and load disk parameters table in ds:si
   332                                  		;	;
   333                                  		;	; pop.. Original INT 1Eh vector address
   334                                  		;pop	si
   335                                  		;pop	ds
   336                                  		;	; pop.. Original INT 1Eh disk table address
   337                                  
   338                                  		; 13/09/2023
   339                                  		; Note: DS:SI -from BS- points to DSK_PARMS (INT 1Eh) tbl addr
   340                                  		; (no need to pop/take address from stack)
   341                                  
   342                                  		;mov	sp, bp ; sp = 7BECh
   343                                  
   344                                  		; sp = 7BE4h
   345                                  
   346                                  		; 13/09/2023
   347                                  		; Save original (ROMBIOS) DSK_PARMS table address 
   348 00000061 8936[4100]              		mov	[OrgDasdPtr], si   ; DSK_PARMS (INT 1Eh) tbl offset	
   349 00000065 893E[4300]              		mov	[OrgDasdPtr+2], di ; DSK_PARMS (INT 1Eh) tbl segment
   350                                  
   351 00000069 31C9                    		xor	cx, cx		; segment 0 (obviously)
   352 0000006B 8ED9                    		mov	ds, cx		; ZERO
   353                                  		; 13/09/2023
   354 0000006D 8EC1                    		mov	es, cx
   355 0000006F 57                      		push	di
   356 00000070 BF2205                  		mov	di, Sec9
   357 00000073 893E7800                		mov	[DskAddr], di	; mov [78h], di ; 522h
   358 00000077 890E7A00                		mov	[DskAddr+2], cx ; mov [7Ah], cx ; 0
   359 0000007B 1F                      		pop	ds
   360 0000007C B10E                    		mov	cl, 14		; (11+3 bytes for IBM rombios)
   361 0000007E FC                      		cld
   362 0000007F F3A4                    		rep movsb		; copy table
   363                                  		; 20/12/2022
   364 00000081 8ED9                    		mov	ds, cx ; 0
   365                                  		; 23/12/2022
   366                                  		; es = 0
   367                                  		; ds = 0
   368                                  		; ss = 0
   369                                  
   370                                  		; 13/09/2023
   371                                  		;mov	cx, [051Ah]	; LW of IBMBIO.COM (IO.SYS) first cluster
   372                                  		;mov	[cs:CurrentCluster], cx
   373                                  		;mov	cx, [0514h]	; HW of IBMBIO.COM (IO.SYS) first cluster
   374                                  		;mov	[cs:CurrentCluster+2], cx
   375                                  ; 24/12/2022
   376                                  %if 0
   377                                  		mov	cx, [7C0Bh] 	; BootSector.ext_boot_bpb.BPB_bytespersector
   378                                  		mov	[cs:BytesPerSec], cx
   379                                  		mov	cl, [7C0Dh]	; BootSector.ext_boot_bpb.BPB_sectorspercluster
   380                                  		mov	[cs:SecPerCluster], cl
   381                                  		mov	cx, [7C18h]	; BootSector.ext_boot_bpb.BPB_sectorspertrack	
   382                                  		mov	[cs:SecPerTrack], cx
   383                                  		mov	cx, [7C1Ah]	; BootSector.ext_boot_bpb.BPB_heads
   384                                  		mov	[cs:NumHeads], cx
   385                                  		;mov	cx, [7C16h]	; BootSector.ext_boot_bpb.BPB_sectorsperfat
   386                                  		;mov	[cs:SecPerFat], cx
   387                                  		; 13/09/2023
   388                                  		mov	dx, [7C16h]	; BootSector.ext_boot_bpb.BPB_sectorsperfat
   389                                  		;mov	[cs:FATSectorsL], dx
   390                                  		mov	bl, [7C26h]	; BS_BootSig ; (FAT12 and FAT16)
   391                                  		or	dx, dx ; **
   392                                  		jnz	short not_fat32
   393                                  		mov	bl, [7C42h]	; BS_BootSig ; (FAT32) 
   394                                  not_fat32:
   395                                  		mov	cl, [7C10h]	; BPB_NumFATs
   396                                  		mov	[cs:NumFats], cl
   397                                  		mov	cx, [7C11h]	; BPB_RootEntCnt
   398                                  		mov	[cs:RootEntCnt], cx
   399                                  		;
   400                                  		mov	cx, [7C0Eh]	; BootSector.ext_boot_bpb.BPB_reservedsectors	
   401                                  		mov	[cs:ReservSectors], cx
   402                                  		mov	cx, [7C1Ch]	; BootSector.ext_boot_bpb.BPB_hiddensectors
   403                                  		mov	[cs:HiddenSectorsL], cx
   404                                  		mov	cx, [7C13h]	; BootSector.ext_boot_bpb.BPB_totalsectors
   405                                  		mov	[cs:TotalSectorsL], cx
   406                                  
   407                                  		; First of all, check if it the boot record is an extended one.
   408                                  		; This is just a safe guard in case some user just "copy" the
   409                                  		; 4.00 iosys.com to a media with a conventional boot record.
   410                                  
   411                                  		; 22/12/2022
   412                                  		;cmp	byte [7C26h], 29h ; ext_boot_signature
   413                                  		; 13/09/2023
   414                                  		cmp	bl, 29h
   415                                  		jne	short Relocate	; old boot sector
   416                                  					; no need to copy high words
   417                                  		mov	[cs:FirstSectorH], ax ; Start sector # of data, high word
   418                                  		mov	ax, [7C1Eh]	; BPB_HiddSec+2
   419                                  		mov	[cs:HiddenSectorsH], ax
   420                                  		; 10/12/2022
   421                                  		or	cx, cx
   422                                  		;cmp	cx, 0		; cx set already before (=totalsectors)
   423                                  		; 22/12/2022
   424                                  		;jnz	short Relocate
   425                                  		; 13/09/2023
   426                                  		jnz	short not_big
   427                                  		mov	ax, [7C20h]	; BootSector.ext_boot_bpb.BPB_bigtotalsectors
   428                                  		mov	[cs:TotalSectorsL], ax
   429                                  		mov	ax, [7C22h]	; BootSector.ext_boot_bpb.BPB_bigtotalsectors+2
   430                                  		mov	[cs:TotalSectorsH], ax
   431                                  		; 13/09/2023
   432                                  not_big:	
   433                                  		;cmp	word [cs:FATsectorsL], 0
   434                                  		and	dx, dx ; **
   435                                  		jnz	short Relocate	; FAT12 or FAT16 fs
   436                                  
   437                                    		mov     cx, [7C24h]	; BPB_FATSz32 ; FAT32 fs
   438                                  		mov     [cs:FATSectorsL], cx
   439                                  		mov     cx, [7C26h]	; BPB_FATSz32+2
   440                                  		mov     [cs:FATSectorsH], cx
   441                                  		mov     cx, [7C2Ch]	; BPB_RootClus
   442                                  		mov     [cs:RootClusterL], cx
   443                                  		mov     cx, [7C2Eh]    ; BPB_RootClus+2
   444                                  		mov     [cs:RootClusterH], cx
   445                                  %endif
   446                                  		; 13/09/2023 - Erdogan Tan - Istanbul
   447                                  		;
   448                                  		; Note: Boot signature check has been removed because
   449                                  		;	it is not possible to start/run IBMBIO.COM
   450                                  		;	if it would not be a valid FAT32 (or compatible) boot sector
   451                                  		;	(input parameters and register contents would be wrong)
   452                                  
   453 00000083 0E                      		push	cs
   454 00000084 07                      		pop	es
   455                                  
   456                                  		; 13/09/2023
   457 00000085 BF[1700]                		mov	di, FirstCluster		
   458 00000088 A11A05                  		mov	ax, [051Ah]	; LW of IBMBIO.COM (IO.SYS) first cluster
   459 0000008B AB                      		stosw			;  Initialize to this cluster
   460 0000008C A11405                  		mov	ax, [0514h]	; HW of IBMBIO.COM (IO.SYS) first cluster
   461 0000008F AB                      		stosw
   462                                  
   463 00000090 BE0B7C                  		mov	si, 7C0Bh	; boot sector's bpb, BytesPerSector
   464                                  		;mov	di, BytesPerSec
   465 00000093 A5                      		movsw	; BytesPerSec
   466 00000094 A4                      		movsb	; SecPerCluster
   467 00000095 47                      		inc	di ; skip high byte of SecPerCluster word (it is 0)
   468 00000096 A5                      		movsw	; ReservSectors
   469                                  		; 13/09/2023
   470 00000097 A4                      		movsb	; NumFats
   471 00000098 47                      		inc	di ; skip high byte of NumFats word (it is 0)
   472 00000099 A5                      		movsw	; RootEntCnt
   473 0000009A AD                      		lodsw	; TotalSectorsL
   474 0000009B 50                      		push	ax	; save TotalSectorsL
   475 0000009C AC                      		lodsb	; skip MediaByte
   476                                  		; 13/09/2023
   477 0000009D AD                      		lodsw	; FATSectorsL (Retro DOS 5) - SecPerFat (Retro DOS 4)
   478 0000009E 89C2                    		mov	dx, ax ; save BPB_FATSz16 into dx (it is 0 for FAT32 fs)
   479 000000A0 A5                      		movsw 	; SecPerTrack
   480 000000A1 A5                      		movsw	; NumHeads
   481 000000A2 A5                      		movsw	; HiddenSectorsL
   482 000000A3 A5                      		movsw	; HiddenSectorsH
   483 000000A4 58                      		pop	ax	; restore TotalSectorsL
   484                                  		; si = 7C20h 
   485                                  		; di = offset TotalSectorsL
   486 000000A5 09C0                    		or	ax, ax	; 16 bit total sectors value
   487 000000A7 7403                    		jz	short big_total_sectors
   488 000000A9 AB                      		stosw	; TotalSectorsL
   489                                  			; TotalsectorsH = 0
   490 000000AA EB02                    		jmp	short chk_fatsz_16
   491                                  
   492                                  big_total_sectors:
   493                                  		; BigTotalSecs - 32 bit total sectors value
   494 000000AC A5                      		movsw 	; BPB_TotSec32 (lw) -> TotalSectorsL
   495 000000AD A5                      		movsw	; BPB_TotSec32 (hw) -> TotalSectorsH
   496                                  chk_fatsz_16:
   497                                  		; 13/09/2023
   498                                  		; si = 7C24h
   499 000000AE 09D2                    		or	dx, dx ; **
   500 000000B0 7405                    		jz	short fat32_bs	; FAT32 boot sector
   501                                  		; FAT (FAT12 or FAT16) boot sector
   502 000000B2 47                      		inc	di  ; skip TotalsectorsH
   503 000000B3 47                      		inc	di
   504 000000B4 92                      		xchg	ax, dx	; mov ax, dx
   505                                  		;stosw
   506 000000B5 EB06                    		jmp	short fat_bs
   507                                  
   508                                  fat32_bs:
   509                                  		; FAT32 boot sector
   510 000000B7 A5                      		movsw	; BPB_FATSz32 (lw) -> FATSectorsL
   511 000000B8 A5                      		movsw	; BPB_FATSz32 (hw) -> FATSectorsH
   512 000000B9 AD                      		lodsw	; skip BPB_ExtFlags
   513 000000BA AD                      		lodsw	; skip BPB_FSVer
   514 000000BB A5                      		movsw	; RootClusterL
   515 000000BC AD                      		lodsw	; RootClusterH
   516                                  fat_bs:
   517 000000BD AB                      		stosw	; 13/09/2023
   518                                  
   519                                  		; 13/09/2023
   520 000000BE 0E                      		push	cs
   521 000000BF 1F                      		pop	ds
   522                                  
   523                                  		; 13/09/2023
   524                                  		; (PCDOS 7.1 - IBMBIO.COM - MSLOAD:0151h)
   525                                  
   526                                  ; Relocate
   527                                  ; -------------------------------------------------------------------------
   528                                  ;
   529                                  ; NOTES:
   530                                  ;
   531                                  ;   Relocates the loader code to top-of-memory.
   532                                  ;
   533                                  ; INPUT:     none
   534                                  ;
   535                                  ; OUTPUT:    code and data relocated.
   536                                  ;	     AX,CX,SI,DI destroyed
   537                                  ;
   538                                  ; calls:     none
   539                                  ; -------------------------------------------------------------------------
   540                                  ;
   541                                  ; Determine the number of paragraphs (16 byte blocks) of memory.
   542                                  ; this involves invoking the memory size determination interrupt,
   543                                  ; which returns the number of 1k blocks of memory, and then
   544                                  ; converting this to the number of paragraphs.
   545                                  ; Find out whether RPL code is present at top of memory and modify the
   546                                  ; available amount of memory in AX
   547                                  ; leave the number of paragraphs of memory in ax.
   548                                  ;
   549                                  ; -------------------------------------------------------------------------
   550                                  ; copy code from start to top of memory.
   551                                  ;
   552                                  ; the length to copy is EndOfLoader
   553                                  ;
   554                                  ; jump to relocated code
   555                                  ; -------------------------------------------------------------------------
   556                                  
   557                                  		; 14/09/2023 - Retro DOS v5.0 BIOSLOADER/MSLOADER
   558                                  		;			      PCDOS 7.1
   559                                  Relocate:
   560                                  		; 24/12/2022 - Retro DOS v4 (4.0 & 4.1 & 4.2) MSLOADER
   561                                  		;			     MSDOS 5.0 & 5.0+ & 6.22 (6.21)
   562                                  		
   563                                  		;cld
   564                                  
   565 000000C0 31F6                    		xor	si, si
   566 000000C2 89F7                    		mov	di, si
   567 000000C4 CD12                    		int	12h		; MEMORY SIZE -
   568                                  					; Return: AX = number of contiguous 1K blocks of memory
   569 000000C6 B106                    		mov	cl, 6
   570 000000C8 D3E0                    		shl	ax, cl		; Memory size in paragraphs
   571                                  
   572                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
   573                                  
   574                                  		; 10/12/2022
   575                                  		; ds = 0
   576                                  		; 24/12/2022
   577                                  		; ds = cs
   578                                  		;xor	bx, bx
   579                                  		;mov	ds, bx		; ZERO
   580                                  		; 14/09/2023
   581 000000CA 8EDE                    		mov	ds, si ; 0		
   582                                  
   583                                  		; 10/12/2022
   584 000000CC 8B1EBC00                		mov	bx, [2Fh*4]	; (Int 2Fh)
   585 000000D0 8E1EBE00                		mov	ds, [2Fh*4+2]		
   586                                  
   587                                  		;cmp	word ptr [bx+3], 'PR'
   588                                  		; 09/12/2022
   589 000000D4 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
   590 000000D9 750F                    		jnz	short Skip_RPL
   591 000000DB 807F054C                		cmp	byte [bx+5], 'L'
   592 000000DF 7509                    		jnz	short Skip_RPL
   593 000000E1 89C2                    		mov	dx, ax		; get TOM into DX
   594 000000E3 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
   595 000000E6 CD2F                    		int	2Fh		; Get new TOM from any RPL
   596 000000E8 89D0                    		mov	ax, dx
   597                                  Skip_RPL:
   598                                  		; 24/12/2022
   599 000000EA 0E                      		push	cs
   600 000000EB 1F                      		pop	ds	; 25/12/2022
   601                                  
   602 000000EC B104                    		mov	cl, 4
   603 000000EE 8B16[1B00]              		mov	dx, [BytesPerSec] ; 24/12/2022
   604                                  		;mov	dx, [cs:BytesPerSec]
   605 000000F2 D3EA                    		shr	dx, cl
   606 000000F4 42                      		inc	dx
   607 000000F5 29D0                    		sub	ax, dx
   608 000000F7 A3[4500]                		mov	[FatSegment], ax ; 24/12/2022
   609                                  		;mov	[cs:FatSegment], ax ; This will be used for fat sector
   610                                  		; 14/09/2023
   611                                  		;mov	dx, 5F0h ; 1520 (for PCDOS 7.1 IBMBIO.COM)
   612 000000FA BA[8004]                		mov	dx, EndOfLoader ; loader size = 1520 
   613 000000FD D3EA                    		shr	dx, cl
   614 000000FF 42                      		inc	dx
   615 00000100 29D0                    		sub	ax, dx
   616 00000102 8EC0                    		mov	es, ax	; ES:DI -> place be relocated.
   617                                  		; 14/09/2023
   618                                  		; 22/12/2022
   619                                  		;dec	dx
   620                                  		;shl	dx, cl	; convert paragraphs to bytes (*)	
   621                                  				; (stack pointer will be set to this offset)
   622                                  		; 24/12/2022
   623                                  		;push	cs
   624                                  		;pop	ds		; DS:SI -> source
   625                                  		
   626                                  		; 14/09/2023
   627 00000104 B9[8004]                		mov	cx, EndOfLoader ; 1520 (for PCDOS 7.1 IBMBIO.COM)
   628 00000107 F3A4                    		rep movsb
   629                                  
   630 00000109 06                      		push	es		; Far jump to relocated MSLOAD code
   631                                  					; (via retf, far return)
   632 0000010A B8[0F01]                		mov	ax, SetupStack
   633 0000010D 50                      		push	ax		; Massage stack for destin of CS:IP
   634 0000010E CB                      		retf
   635                                  
   636                                  ; ---------------------------------------------------------------------------
   637                                  
   638                                  ; Start of relocated code
   639                                  ;----------------------------------------------------------------------------
   640                                  ;
   641                                  ; Move the stack to just under the boot record and relocation area (0:7c00h)
   642                                  ;
   643                                  
   644                                  SetupStack:
   645                                  		; 22/12/2022
   646                                  		;mov	ax, cs		; Start	of relocated code
   647                                  		;mov	ss, ax
   648                                  		;;mov	sp, NumHeads	; StackPtr offset
   649                                  		; 20/12/2022
   650                                  		;mov	sp, StackPtr	; StackPtr offset
   651                                  		
   652                                  ; 22/12/2022
   653                                  ; (set a temporary stack just above the relocated loader code)
   654                                  ; ((instead of using/reserving 256 bytes of stack space in 'IO.SYS' file))
   655                                  
   656                                  		; 22/12/2022
   657                                  		; cs = loader segment (relocated)
   658                                  		; dx = loader size + stack space (*) -paragraph aligned-
   659                                  
   660                                  		; 14/09/2023
   661                                  		;;cli
   662                                  		;mov	ax, cs
   663                                  		;mov	ds, ax	; 24/12/2022
   664                                  		;cli 
   665                                  		;mov	ss, ax
   666                                  		;;mov	sp, dx	; (*) 
   667                                  		;sti
   668                                  		
   669                                  		; 14/09/2023
   670                                  		; (PCDOS 7.1 IBMBIO.COM - MSLOAD:01A5h)
   671 0000010F 8CC8                    		mov	ax, cs
   672                                  		; 27/12/2023
   673 00000111 8ED8                    		mov	ds, ax
   674                                  		;
   675 00000113 83E840                  		sub	ax, 40h	; move ss to 400h backward for stack space
   676                                  				; then set sp to the end of this stack space
   677 00000116 8ED0                    		mov	ss, ax 		
   678 00000118 BC0004                  		mov	sp, 400h
   679                                  		;add	ax, 40h	; ax = cs
   680                                  		;mov	ds, ax
   681                                  
   682                                  ; FindClusterSize
   683                                  ; ---------------------------------------------------------------------------
   684                                  ;
   685                                  ; INPUT:     bpb information in loaded boot record at 0:7c00h
   686                                  ;
   687                                  ; OUTPUT:
   688                                  ;
   689                                  ;	ds = 0
   690                                  ;	ax = bytes/cluster
   691                                  ;	bx = sectors/cluster
   692                                  ;	si destroyed
   693                                  ; calls:     none
   694                                  ;----------------------------------------------------------------------------
   695                                  ;
   696                                  ; get bytes/sector from bpb
   697                                  ;
   698                                  ; get sectors/cluster from bpb
   699                                  ;
   700                                  ; bytes/cluster = bytes/sector * sector/cluster
   701                                  ; ---------------------------------------------------------------------------
   702                                  
   703                                  FindClusterSize:
   704                                  
   705                                  ;for the time being just ASSUME the boot record is valid and the bpb is there.
   706                                  
   707                                  		; 14/09/2023
   708                                  		; 24/12/2022
   709                                  		; ds = cs
   710 0000011B A1[1B00]                		mov	ax, [BytesPerSec]
   711                                  		;xor	bx, bx
   712                                  		;mov	bl, [SecPerCluster]	; get sectors/cluster
   713                                  		;mul	bx
   714 0000011E F726[1D00]              		mul	word [SecPerCluster]
   715                                  		; 14/09/2023
   716 00000122 09D2                    		or	dx, dx
   717 00000124 7403                    		jz	short CalcFatSize
   718 00000126 E98E01                  		jmp	ErrorOut
   719                                  
   720                                  ; CalcFatSize
   721                                  ; ---------------------------------------------------------------------------
   722                                  ;
   723                                  ; NOTES:
   724                                  ;
   725                                  ;   Determine if fat is 12 or 16 bit fat. 12 bit fat if floppy, read mbr
   726                                  ;   to find out what system id byte is.
   727                                  ;
   728                                  ; INPUT:
   729                                  ;
   730                                  ; OUTPUT:
   731                                  ;
   732                                  ;   CS:FatSize = FAT_12_BIT or FAT_16_BIT
   733                                  ;   all other registers destroyed
   734                                  ;
   735                                  ; ---------------------------------------------------------------------------
   736                                  
   737                                  CalcFatSize:
   738                                  		; 14/09/2023 (Retro DOS v5, PCDOS 7.1 IBMBIO.COM LOADER)
   739                                  		; 24/12/2022 (Retro DOS v4, MSDOS 5.0-6.22 IO.SYS LOADER)
   740                                  
   741 00000129 A3[0500]                		mov	[ClusterSize], ax ; cluster size in bytes
   742                                  
   743                                  		; 24/12/2022
   744                                  		; ds = cs
   745                                  		;mov	byte [Fatsize], 1; FAT_12_BIT (assume)
   746                                  		; 14/09/2023
   747 0000012C C606[3E00]01            		mov	byte [FatType],1 ; FAT12
   748                                  		
   749                                  		;mov	dx, [TotalSectorsH]
   750                                  		;mov	ax, [TotalSectorsL] ; DX:AX = total disk sectors
   751                                  		; 14/09/2023
   752 00000131 A1[2F00]                		mov	ax, [TotalSectorsH]
   753 00000134 8B1E[2D00]              		mov	bx, [TotalSectorsL] ; AX:BX = total disk sectors
   754                                  ; 14/09/2023
   755                                  %if 0
   756                                  		sub	ax, [ReservSectors]
   757                                  
   758                                  		sbb	dx, 0		; DX:AX	= Total	available sectors
   759                                  		
   760                                  		push	ax
   761                                  		push	dx
   762                                  
   763                                  		mov	bx, [FATSectorsL]
   764                                  		
   765                                  		;mov	cx, [FATSectorsH]
   766                                  		;push	ax
   767                                  		;push	dx
   768                                  		;;mov	al, [NumFats]
   769                                  		;;xor	ah, ah
   770                                  		;mov	ax, [NumFats]
   771                                  		;xchg	ax, cx
   772                                  		;mul	cx
   773                                  
   774                                  		mov	ax, [FATSectorsH]
   775                                  		mov	cx, [NumFats]	; calculate total FAT sectors
   776                                  		mul	cx
   777                                  		xchg	ax, cx
   778                                  		mul	bx
   779                                  		add	cx, dx
   780                                  		mov	bx, ax
   781                                  
   782                                  		pop	dx
   783                                  		pop	ax
   784                                  
   785                                  		sub	ax, bx
   786                                  		sbb	dx, cx		; DX:AX = Total sectors - FAT sectors
   787                                  		
   788                                  		mov	bx, [RootEntCnt] ; Root directory entry count
   789                                  		mov	cl, 4
   790                                  		shr	bx, cl		; BX = Total directory sectors
   791                                  		sub	ax, bx
   792                                  		sbb	dx, 0		; DX:AX	= Sectors in data area
   793                                  %endif
   794                                  		; 14/09/2023
   795 00000138 8B16[3900]              		mov	dx, [FirstSectorL]
   796 0000013C 8B0E[3B00]              		mov	cx, [FirstSectorH]
   797                                  		; 04/10/2023
   798 00000140 8916[0700]              		mov	[StartSecL], dx
   799 00000144 890E[0900]              		mov	[StartSecH], cx
   800                                  		;
   801                                  		; ! here, cx:dx includes hidden sectors (partition start address) !
   802 00000148 2B16[2900]              		sub	dx, [HiddenSectorsL]
   803 0000014C 1B0E[2B00]              		sbb	cx, [HiddenSectorsH] ; cx:dx = start of data from boot sector
   804                                  
   805                                  		; 14/09/2023
   806 00000150 29D3                    		sub	bx, dx	; total secs - start of data
   807 00000152 19C8                    		sbb	ax, cx
   808                                  				; AX:BX	= Sectors in data area
   809                                  		; 24/12/2022
   810 00000154 8B0E[1D00]              		mov	cx, [SecPerCluster] ; *#*
   811                                  		; 14/09/2023
   812                                  		; bx = lw of data sector count
   813                                  		; ax = hw of data sector count
   814 00000158 31D2                    		xor	dx, dx
   815 0000015A F7F1                    		div	cx  ; *#*
   816                                  		; 24/12/2022
   817                                  		;;mov	[cs:TempH], ax	; AX = Total number of clusters (hw)
   818                                  		;mov	[TempH], ax
   819                                  		; 14/09/2023
   820 0000015C 93                      		xchg	ax, bx	; ax = lw of data sector count ; 06/10/2023
   821                                  				; bx = hw of cluster count
   822 0000015D F7F1                    		div	cx  ; *#*
   823                                  		; 14/09/2023
   824                                  		;mov	dx, [FirstCluster+2]
   825 0000015F C606[3E00]0B            		mov	byte [FatType], 0Bh ; set FAT type to FAT32 (CHS type disk R/W)
   826                                  		;cmp	word [TempH], 0
   827                                  		;jne	short ReadInFirstCluster
   828 00000164 09DB                    		or	bx, bx	; is cluster count > 65535 ?
   829 00000166 7518                    		jnz	short ReadInFirstCluster ; yes, it is (it must be) FAT32 fs
   830                                  		; 06/10/2023
   831 00000168 83F8F6                  		cmp	ax, 0FFF6h	; FAT16 limit (65536-10)
   832 0000016B 7313                    		jnb	short ReadInFirstCluster ; FAT32
   833                                  		;
   834 0000016D 891E[1900]              		mov	[FirstCluster+2], bx ; 0 ; (clear HW of FirstCluster)
   835                                  		;xor	dx, dx
   836 00000171 C606[3E00]01            		mov	byte [FatType], 1 ; set FAT type to FAT12
   837                                  		; 06/10/2023
   838 00000176 3DF60F                  		cmp	ax, 0FF6h
   839                                  		;cmp	ax, 4086	; 4096-10
   840 00000179 7205                    		jb	short ReadInFirstCluster ; 12 bit FAT
   841 0000017B C606[3E00]04            		mov	byte [FatType], 4 ; set FAT type to FAT16
   842                                  
   843                                  ; ReadInFirstCluster
   844                                  ; ---------------------------------------------------------------------------
   845                                  ;
   846                                  ; NOTES: read the start of the clusters that covers at least IbmLoadSize
   847                                  ;	 fully.  for example, if sector/cluster = 2, and IbmLoadSize=3
   848                                  ;	 then we are going to re-read the second cluster to fully cover
   849                                  ;	 msload program in the cluster boundary.
   850                                  ;
   851                                  ; INPUT:
   852                                  ;   IbmLoadSize - make sure this value is the same as the one in
   853                                  ;		  msboot program when you build the new version!!!!!
   854                                  ;
   855                                  ;   SecPerCluster
   856                                  ;   ClusterSize
   857                                  ;   FirstSectorL
   858                                  ;   FirstSectorH
   859                                  ;
   860                                  ; OUTPUT: msload program is fully covered in a cluster boundary.
   861                                  ;	  ax = # of clusters we read in so far.
   862                                  ;
   863                                  ; calls:     ReadSectors
   864                                  ; logic:
   865                                  ;	ax; dx = IbmLoadSize / # of sector in a cluster.
   866                                  ;	if dx = 0 then ok. (msload is in a cluster boundary.)
   867                                  ;      else		   (has to read (ax+1)th cluster to cover msload)
   868                                  ;	read (ax+1)th cluster into the address after the clusters we
   869                                  ;	read in so far.
   870                                  ; ---------------------------------------------------------------------------
   871                                  
   872                                  ; 09/12/2022
   873                                  ; BiosStart equ 51Ah ; AX = IO.SYS starting cluster
   874                                  ; IbmLoadSize equ 3  ; AX = Number sectors in MSLOAD
   875                                  ; BiosOffset equ 700h ; Address where loader was read in
   876                                  	
   877                                  ReadInFirstCluster:
   878                                  		; 14/09/2023
   879 00000180 8B16[1900]              		mov	dx, [FirstCluster+2]
   880 00000184 A1[1700]                		mov	ax, [FirstCluster]
   881                                  					; IBMBIO.COM First Cluster
   882                                  					; Root dir buffer at 500h (segment=0)
   883                                  					; IBMBIO.COM first cluster ptr at 51Ah
   884                                  					; high word of cluster is at 514h
   885                                  		; 14/10/2023 (!*!)
   886                                  		;; a cluster number start from 2
   887                                  		;; convert it to (correct) cluster index number
   888                                  		;sub	ax, 2
   889                                  		;sbb	dx, 0
   890                                  		;	; DX:AX = zero based cluster number (cluster index)
   891                                  
   892 00000187 8916[1500]              		mov	[CurrentClusterH], dx
   893 0000018B A3[1300]                		mov	[CurrentClusterL], ax ; Initialize to this cluster
   894                                  
   895                                  		; 24/12/2022
   896                                  		; (PCDOS 7.1 IBMBIO.COM - MSLOAD:0255h) ; 04/10/2023 ('mov ax,3')
   897                                  		;;mov	ax, IbmLoadSize
   898                                  		;mov	ax, 3		; Load the 3rd and other IO.SYS	sectors
   899                                  		; 04/10/2023  ; **	 	
   900                                  		; (Windows ME IO.SYS - MSLOAD:01E4h)
   901 0000018E B80400                  		mov	ax, 4 ; **	; Load the 4rd and other IO.SYS	sectors	
   902                                  
   903                                  		; 14/09/2023
   904                                  		;div	byte [SecPerCluster]
   905 00000191 F6F1                    		div	cl ; *#*
   906                                  					; AL = total cluster read in
   907                                  					; AH = remaining sectors in last cluster
   908                                  		
   909                                  		; (Note: PCDOS 7.1 bs loads 1st 4 sectors of IBMBIO.COM)
   910                                  		; If cluster size > 3, al = 0, ah <> 0
   911                                  		; If cluster size = 2, al = 1, ah = 1
   912                                  		; If cluster size = 1, al = 3, ah = 0
   913                                  		; If ah = 0, nothing remaining in last cluster
   914                                  
   915                                  		; 14/10/2023
   916 00000193 BE7000                  		mov	si, 70h ; ++*
   917 00000196 8EC6                    		mov	es, si	; ++	; ES = BIOSDATA (IO.SYS DATA) segment
   918                                  
   919                                  		; 14/09/2023
   920                                  		;cmp	ah, 0
   921                                  		; 10/12/2022
   922 00000198 20E4                    		and	ah, ah
   923                                  		;cmp	ah, 0
   924 0000019A 742F                    		jz	short SetNextClusterNum	; next cluster
   925                                  			; 04/10/2023 ; **
   926                                  			; If AH=0
   927                                  			;    and if CL=1, AL=4
   928                                  			;    and if CL=2, AL=2 (?)
   929                                  			;    and if CL=4, AL=1
   930                                  			; If AH>0
   931                                  			;    AL=0 and AH=4		 	 	
   932                                  
   933                                  		; 04/10/2023	; **
   934                                  		; al = 0
   935                                  		;xor	ah, ah ; 0
   936                                  		;push	ax	; (*)	; AX = total clusters in the loader
   937                                  					; already read in
   938                                  ; 14/09/2023
   939                                  ; 24/12/2022
   940                                  %if 0		
   941                                  		mov	cx, [FirstSectorL]	; Put starting sector of disk data
   942                                  		mov	[StartSecL], cx	; area in StartSecH:StartSecL
   943                                  		mov	cx, [FirstSectorH]
   944                                  		mov	[StartSecH], cx
   945                                  		mul	byte [cs:SecPerCluster]
   946                                  		add	[StartSecL], ax	; Add number of sectors already loaded
   947                                  		adc	word [StartSecH], 0	; to start sector
   948                                  		;mov	dx, [FirstCluster+2]
   949                                  		;mov	ax, [FirstCluster]
   950                                  		;sub	ax, 2
   951                                  		;sbb	dx, 0
   952                                  		mov	dx, [CurrentClusterH]	; IBMBIO.COM 1st cluster (index)
   953                                  		mov	ax, [CurrentClusterL]	; (zero based cluster number)
   954                                  
   955                                  		xor	bx, bx
   956                                  		mov	bl, [SecPerCluster]
   957                                  		mul	bx		; DX:AX = logical start sector
   958                                  		add	[StartSecL], ax
   959                                  		adc	[StartSecH], dx
   960                                  					; abs start sector for next read of
   961                                  					; the rest of the last loader cluster
   962                                  		pop	ax	; (*) number of clusters already loaded
   963                                  				; (0 or 1)
   964                                  				; (Note: if al=0, the 1st 4 sectors of the 1st cluster
   965                                  				; will be loaded again! -PCDOS 7.1-)
   966                                  		push	ax
   967                                  		mul	word [ClusterSize]
   968                                  		;mov	di, BiosOffset
   969                                  		mov	di, 700h	; IBMBIO.COM (IO.SYS) loading addr (segment = 0)
   970                                  		add	di, ax
   971                                  		xor	ax, ax
   972                                  		mov	es, ax		; ES = segment 0
   973                                  		mov	al, [SecPerCluster] 
   974                                  					; Read in the entire last cluster
   975                                  		mov	[SectorCount], ax
   976                                  		call	ReadSectors
   977                                  		pop	ax		; AX = total clust read	by boot	loader
   978                                  		inc	ax		; AX = total clust read	in now
   979                                  SetNextClusterNum:			; ...
   980                                  		inc	ax		; AX = total clusters read in based 2
   981                                  		add	[CurrentClusterL], ax
   982                                  		adc	[CurrentClusterH], 0
   983                                  		dec	ax		; CurrentCluster = Last	cluster	read
   984                                  					; AX = number of clusters loaded
   985                                  %endif
   986                                  		; 04/10/2023 ; **
   987                                  		; ah=4 & al=0
   988 0000019C 88C8                    		mov	al, cl ; ** (SecPerCluster)
   989 0000019E 28E0                    		sub	al, ah ; ** (remain sectors to read in the cluster)
   990 000001A0 A2[1100]                		mov	[SectorCount], al ; ** (spc-4)
   991                                  
   992                                  		; 24/12/2022
   993                                  		; ds = cs
   994                                  		;mov	cx, [FirstSectorL] ; Put starting sector of disk data
   995                                  		;mov	[StartSecL], cx    ; area in StartSecH:StartSecL
   996                                  		;mov	cx, [cs:FirstSectorH]
   997                                  		;mov	[StartSecH], cx
   998                                  		; [StartSecL] = [FirstSectorL] ; **!**
   999                                  		; [StartSecH] = [FirstSectorH] ; **!**
  1000                                  		
  1001                                  		; 24/12/2022
  1002                                  		; cx = [SecPerCluster]  ; *#*
  1003                                  	
  1004                                  		; 04/10/2023
  1005                                  		;; ax = 0 (cluster size > 3) or ax = 1 (cluster size = 2)
  1006                                  		; al = 0 (cluster size > 4) and ah > 0  ; (as Win ME IO.SYS)
  1007                                  		; cx = sectors per cluster (ch = 0)
  1008                                  
  1009                                  		; 04/10/2023 ; **
  1010                                  		; cx = sectors per cluster (ch = 0)
  1011                                  
  1012                                  ;		;or	al, al ; *
  1013                                  ;		;jz	short rfc_1 ; al = 0 ; *
  1014                                  		; al = 1
  1015                                  
  1016                                  		;;mul	byte [SecPerCluster]
  1017                                  		;mul	cl ; *#*
  1018                                  		;add	[StartSecL], ax ; Add number of sectors already loaded
  1019                                  		;adc	word [StartSecH], 0 ; to start sector
  1020                                  		; 04/10/2023
  1021                                  		;add	[StartSecL], cx ; * (AL=1, CL*AL=CL, CH=0)
  1022                                  		;adc	word [StartSecH], 0 ; *
  1023                                  
  1024                                  ;rfc_1: ; *	; 04/10/2023
  1025                                  		;mov	ax, [51Ah] ; AX = [51Ah] = IO.SYS 1st clust
  1026                                  		;dec	ax
  1027                                  		;dec	ax
  1028                                  		; 14/10/2023
  1029                                  		;mov	ax, [CurrentClusterL] ; *##*
  1030                                  		;; ax = word [51Ah] - 2
  1031                                  		; 04/10/2023
  1032                                  		;mov	dx, [CurrentClusterH]
  1033 000001A3 A1[1500]                		mov	ax, [CurrentClusterH] ; *###*		
  1034                                  
  1035                                  		;;xor	bx, bx
  1036                                  		;;mov	bl, [SecPerCluster]
  1037                                  		;mov	bx, [SecPerCluster]
  1038                                  		;mul	bx		; DX:AX = logical start sector
  1039                                  		; 04/10/2023
  1040                                  		;mul	cx  ; [SecPerCluster]  ; *#*
  1041                                  		; 32 bit multiplication (HHLL*SPC)
  1042                                  		; 14/10/2023
  1043                                  		;push	ax ; Current Cluster LW
  1044                                  		;mov	ax, dx ; Current Cluster HW (HH) ; *###*
  1045                                  		
  1046 000001A6 F7E1                    		mul	cx ; (HH*SPC) ; (result: dx is -must be- zero)
  1047 000001A8 91                      		xchg	ax, cx
  1048                                  		; 14/10/2023
  1049                                  		;pop	dx ; Current Cluster LW	(LL)
  1050                                  		;mul	dx  ; LL*SPC	
  1051 000001A9 F726[1300]              		mul	word [CurrentClusterL] ; *##*
  1052 000001AD 01CA                    		add	dx, cx ; (add lw of HH*SPC)
  1053                                  
  1054                                  		; 04/10/2023 ; **
  1055 000001AF 83C004                  		add	ax, 4 ; ** ; IbmLoadSize (Win ME BS's IO.SYS read count)
  1056 000001B2 83D200                  		adc	dx, 0 ; **
  1057                                  
  1058 000001B5 0106[0700]              		add	[StartSecL], ax
  1059 000001B9 1116[0900]              		adc	[StartSecH], dx
  1060                                  					; abs start sector for next read of
  1061                                  					; the rest of the last loader cluster
  1062                                  		; 04/10/2023 ; **
  1063                                  		; (number of clusters already -complete- loaded = 0)
  1064                                  		;pop	ax	; (*) number of clusters already loaded
  1065                                  		;push	ax
  1066                                  
  1067                                  		; 04/10/2023 ; **		
  1068                                  		;;mul	word [ClusterSize]
  1069                                  		; 14/10/2023
  1070                                  		;mov	ax, [BytesPerSec]
  1071                                  		;shl	ax, 2 ; * 4 (4 sectors already loaded)
  1072                                  		
  1073                                  		;;mov	di, BiosOffset
  1074                                  		;mov	di, 700h	; IO.SYS offset	(segment = 0)
  1075                                  		;add	di, ax
  1076                                  		; 14/10/2023
  1077 000001BD 8B3E[1B00]              		mov	di, [BytesPerSec]
  1078 000001C1 C1E702                  		shl	di, 2 ; * 4 (4 sectors already loaded)
  1079                                  		;add	di, 700h ; ++
  1080                                  		; di = buffer offset		
  1081                                  
  1082                                  		; 04/10/2023 ; **
  1083                                  		;xor	ax, ax
  1084                                  		;mov	es, ax		; ES = segment 0
  1085                                  		;; dx = 0 ; **		
  1086                                  		;mov	es, dx ; 0
  1087                                  		; 14/10/2023
  1088                                  		; cx = 0
  1089                                  		;mov	es, cx ; 0 ; ++
  1090                                  		; es = buffer segment = 0 
  1091                                  
  1092                                  		; 14/10/2023
  1093                                  		; es = si = 70h ; ++*
  1094                                  		;mov	si, 70h ; ++
  1095                                  		;mov	es, si	; ++
  1096                                  		; es:di = 70h:800h
  1097                                  
  1098                                  		; 24/12/2022
  1099                                  		;mov	al, [SecPerCluster]
  1100                                  		;			; Read in the entire last cluster
  1101                                  		;mov	[SectorCount], ax
  1102                                  		; 14/10/2023 ; **
  1103                                  		;mov	[SectorCount], cx ; [SecPerCluster]  ; *#*
  1104                                  		
  1105 000001C4 E87F00                  		call	ReadSectors
  1106                                  
  1107                                  		; 04/10/2023 ; *
  1108                                  		;;pop	ax		; AX = total clust read	by boot	loader
  1109                                  		;;inc	ax		; AX = total clust read	in now
  1110                                  		; 04/10/2023
  1111                                  		;mov	ax, 1	; 1 cluster loaded
  1112                                  ;SetNextClusterNum:
  1113                                  		; 14/10/2023
  1114 000001C7 89F8                    		mov	ax, di  
  1115                                  		; ax = loaded (IBMBIO.COM or IO.SYS) byte count
  1116 000001C9 EB0F                    		jmp	short SaveLoadedBios2
  1117                                  SetNextClusterNum:
  1118                                  		; 14/10/2023 (!*!)
  1119                                  		;inc	ax
  1120 000001CB 48                      		dec	ax ; (4 clusters -> +3, 1 cluster -> +0)
  1121 000001CC 0106[1300]              		add	[CurrentClusterL], ax  ; ah = 0
  1122 000001D0 8316[1500]00            		adc	word [CurrentClusterH], 0
  1123                                  				; CurrentCluster = Last	cluster	(loaded)
  1124 000001D5 40                      		inc	ax 
  1125                                  		;dec	ax		
  1126                                  				; AX = number of clusters loaded
  1127                                  		
  1128                                  ; SaveLoadedBios
  1129                                  ; ---------------------------------------------------------------------------
  1130                                  ;
  1131                                  ; NOTES:
  1132                                  ;
  1133                                  ;   Determine how much of iosys was loaded in when the loader was loaded
  1134                                  ;   by the boot record (only the portion that is guaranteed to be contiguous)
  1135                                  ;
  1136                                  ; INPUT:
  1137                                  ;   AX:Total cluster already read in (loader & bios)
  1138                                  ;   CS:CurrentCluster = number of clusters used for loader+2
  1139                                  ;
  1140                                  ; OUTPUT:
  1141                                  ;	ES = 70h
  1142                                  ;	DI = next offset to load iosys code
  1143                                  ;	AX,BX,CX,DX,SI destroyed
  1144                                  ;
  1145                                  ;	CS:NextBioLocation = di on output
  1146                                  ;	CS:last_cluster = last cluster loaded
  1147                                  ;
  1148                                  ; calls:     none
  1149                                  ;
  1150                                  ; ---------------------------------------------------------------------------
  1151                                  ;
  1152                                  ; Multiply cluster * cluster size in bytes to get total loaded for msload
  1153                                  ;
  1154                                  ; Subtract total_loaded - (EndOfLoader) to get loaded io.sys in last cluster
  1155                                  ;
  1156                                  ; Relocate this piece of iosys down to 70:0
  1157                                  ;
  1158                                  ; ---------------------------------------------------------------------------
  1159                                  
  1160                                  SaveLoadedBios:
  1161                                  		; 14/10/2023
  1162                                  		;push	ds
  1163                                  		
  1164                                  		; 24/12/2022
  1165                                  		; ds = cs
  1166                                  		; ax = number of loaded clusters
  1167 000001D6 F726[0500]              		mul	word [ClusterSize]
  1168                                  		;mul	word [cs:ClusterSize]
  1169                                  					; Get total bytes loaded by
  1170                                  					; this is always < 64k, so
  1171                                  					; lower 16 bits ok
  1172                                  		; 14/10/2023
  1173                                  		; ax = [clusterSize] * (loaded cluster count)
  1174                                  SaveLoadedBios2:
  1175                                  		; 14/10/2023
  1176 000001DA 1E                      		push	ds
  1177                                  		
  1178                                  		; 14/10/2023
  1179                                  		;sub	ax, EndOfLoader ; (OFFSET EndOfLoader)-(OFFSET Start)
  1180 000001DB BE[8004]                		mov	si, EndOfLoader
  1181 000001DE 29F0                    		sub	ax, si
  1182 000001E0 89C1                    		mov	cx, ax
  1183                                  		
  1184                                  		; 14/10/2023
  1185                                  		;mov	ax, 70h		; Segment at 70h
  1186                                  		;mov	ds, ax
  1187                                  		;mov	es, ax
  1188                                  		; es = 70h
  1189 000001E2 06                      		push	es
  1190 000001E3 1F                      		pop	ds
  1191                                  		
  1192                                  		;mov	si, EndOfLoader
  1193 000001E4 31FF                    		xor	di, di
  1194 000001E6 F3A4                    		rep movsb		; Relocate this code to 0070h:0000h
  1195                                  		
  1196                                  		;mov	[NextBioLocation], di
  1197                                  		;;mov	[cs:NextBioLocation], di
  1198                                  		; 05/10/2023
  1199                                  		;mov	[NextBioLocation], di
  1200 000001E8 89FD                    		mov	bp, di
  1201                                  
  1202                                  		; es:di = (the next) buffer address for next read
  1203                                  
  1204 000001EA 1F                      		pop	ds		; Save where location for next read
  1205                                  
  1206                                  ; GetContigClusters
  1207                                  ; ---------------------------------------------------------------------------
  1208                                  ;
  1209                                  ; NOTES: go find clusters as long as they are contiguous
  1210                                  ;
  1211                                  ;
  1212                                  ; INPUT:
  1213                                  ;   CS:NextBioLocation
  1214                                  ;   CS:
  1215                                  ;
  1216                                  ; OUTPUT:
  1217                                  ;
  1218                                  ; calls: GetNextFatEntry
  1219                                  ; ---------------------------------------------------------------------------
  1220                                  ;
  1221                                  ;Set CS:SectorCount to sectors per cluster
  1222                                  ;
  1223                                  ;Call GetNextFatEntry to get next cluster in file
  1224                                  ;
  1225                                  ;Call check_for_eof
  1226                                  ;
  1227                                  ;if (nc returned)
  1228                                  ;
  1229                                  ;   {call GetNextFatEntry
  1230                                  ;
  1231                                  ;    if (new cluster is contig to old cluster)
  1232                                  ;	{add sectors per cluster to CS:SectorCount
  1233                                  ;
  1234                                  ;	 call check_for_eof
  1235                                  ;
  1236                                  ;	 if (nc returned)
  1237                                  ;
  1238                                  ; ---------------------------------------------------------------------------
  1239                                  
  1240                                  ; 09/12/2022
  1241                                  ; END_OF_FILE equ 0FFh
  1242                                  ; DosLoadSeg equ 70h
  1243                                  
  1244                                  GetContigClusters:
  1245                                  
  1246                                  ; 24/12/2022
  1247                                  %if 0	
  1248                                  		xor	ah, ah
  1249                                  		mov	al, [cs:SecPerCluster]	; Assume we will get one cluster
  1250                                  		mov	[cs:SectorCount], ax	; Sector count = sectors in 1 cluster
  1251                                  		push	word [cs:SectorCount]
  1252                                  		call	GetNextFatEntry		; Returns next cluster to read in AX	
  1253                                  		pop	word [cs:SectorCount]
  1254                                  		mov	word [cs:CurrentCluster], ax ; Update the last one found
  1255                                  		cmp	byte [cs:EndOfFile], 0FFh ; END_OF_FILE
  1256                                  		jz	short GoToBioInit
  1257                                  		xor	dx, dx
  1258                                  		;sub	ax, 2			; Zero base the cluster
  1259                                  		; 10/12/2022
  1260                                  		dec	ax
  1261                                  		dec	ax
  1262                                  		xor	ch, ch
  1263                                  		mov	cl, [cs:SecPerCluster]
  1264                                  		mul	cx			; How many sectors (before next cluster) 
  1265                                  		add	ax, [cs:FirstSectorL]	; See where the data sector starts
  1266                                  		adc	dx, [cs:FirstSectorH]
  1267                                  		mov	[cs:StartSecL], ax	; Save it (used by ReadSectors)
  1268                                  		mov	[cs:StartSecH], dx
  1269                                  		mov	di, [cs:NextBioLocation] ; Get where to put code
  1270                                  		push	word [cs:SectorCount]	; Save how many sectors
  1271                                  		;mov	ax, DosLoadSeg
  1272                                  		mov	ax, 70h
  1273                                  		mov	es, ax
  1274                                  		call	ReadSectors
  1275                                  		pop	ax			; Get back total sectors read in
  1276                                  		mul	word [cs:BytesPerSec]	; Get number of bytes we loaded
  1277                                  		add	[cs:NextBioLocation], ax ; Point to where to load next	
  1278                                  		jmp	short GetContigClusters
  1279                                  
  1280                                  %endif
  1281                                  		; 24/12/2022
  1282                                  		; ds = cs
  1283                                  
  1284 000001EB A1[1D00]                		mov	ax, [SecPerCluster]	; Assume we will get one cluster
  1285 000001EE A3[1100]                		mov	[SectorCount], ax	; Sector count = sectors in 1 cluster
  1286                                  		;push	word [SectorCount]
  1287 000001F1 50                      		push	ax
  1288                                  		
  1289 000001F2 E85401                  		call	GetNextFatEntry		; Returns next cluster to read in AX	
  1290                                  		
  1291                                  		;pop	word [SectorCount]
  1292                                  		; 05/10/2023
  1293 000001F5 59                      		pop	cx ; sc = spc
  1294                                  		
  1295 000001F6 A3[1300]                		mov	[CurrentClusterL], ax	; Update the last one found, lw
  1296 000001F9 893E[1500]              		mov	[CurrentClusterH], di	; hw
  1297                                  
  1298 000001FD 803E[4000]FF            		cmp	byte [EndOfFile], 0FFh	; END_OF_FILE
  1299 00000202 742A                    		je	short GoToBioInit ; 23/12/2022
  1300                                  
  1301                                  		; 22/12/2022
  1302                                  		;xor	dx, dx ; * (not required)
  1303                                  		; 10/12/2022
  1304                                  		;;sub	ax, 2			; Zero base the cluster
  1305                                  		;dec	ax
  1306                                  		;dec	ax
  1307                                  		; 14/10/2023
  1308                                  		;xor	dx, dx
  1309 00000204 83E802                  		sub	ax, 2			; Zero base the cluster (32 bit as di:ax)
  1310 00000207 83DF00                  		sbb	di, 0		
  1311                                  
  1312                                  		;; 24/12/2022
  1313                                  		;; ax = cluster index
  1314                                  		;;mov	cx, [SecPerCluster]
  1315                                  		;;mul	cx ; *			; How many sectors (before next cluster) 
  1316                                  		; 04/10/2023 
  1317                                  		;;mul	word [SecPerCluster]
  1318                                  		;mul	cx
  1319                                  		; 04/10/2023
  1320 0000020A 97                      		xchg	di, ax			; 32 bit multiplication
  1321 0000020B F7E1                    		mul	cx			; (dx:ax)*cx
  1322 0000020D 97                      		xchg	ax, di
  1323 0000020E F7E1                    		mul	cx
  1324 00000210 01FA                    		add	dx, di			
  1325                                  		
  1326 00000212 0306[3900]              		add	ax, [FirstSectorL]	; See where the data sector starts
  1327 00000216 1316[3B00]              		adc	dx, [FirstSectorH]
  1328 0000021A A3[0700]                		mov	[StartSecL], ax		; Save it (used by ReadSectors)
  1329 0000021D 8916[0900]              		mov	[StartSecH], dx
  1330                                  		
  1331                                  		; 05/10/2023
  1332                                  		;mov	di, [NextBioLocation]
  1333 00000221 89EF                    		mov	di, bp
  1334 00000223 890E[1100]              		mov	[SectorCount], cx
  1335                                  		; es = 70h
  1336                                  
  1337                                  		; es:di = (current) buffer address for (current) read
  1338                                  	
  1339 00000227 E81C00                  		call	ReadSectors
  1340                                  				; ES:DI = (the next) buffer address for next read
  1341                                  		; 05/10/2023
  1342                                  		;mov	[NextBioLocation], di
  1343 0000022A 89FD                    		mov	bp, di		
  1344                                  
  1345 0000022C EBBD                    		jmp	short GetContigClusters
  1346                                  
  1347                                  ; ---------------------------------------------------------------------------
  1348                                  
  1349                                  ; GoToBiosInit
  1350                                  ; ---------------------------------------------------------------------------
  1351                                  ;
  1352                                  ; NOTES:
  1353                                  ;
  1354                                  ;  Set up required registers for iosys, then jump to it (70:0)
  1355                                  ;
  1356                                  ; INPUT:     none
  1357                                  ;
  1358                                  ;   CS:MediaByte = media byte
  1359                                  ;   CS:BootDrive = int 13 drive number we booted from
  1360                                  ;   CS:FirstSectorL = first data sector on disk (low) (0-based)
  1361                                  ;   CS:FirstSectorH = first data sector on disk (high)
  1362                                  ;
  1363                                  ; OUTPUT:
  1364                                  ;
  1365                                  ;   required by msinit
  1366                                  ;   DL = int 13 drive number we booted from
  1367                                  ;   CH = media byte
  1368                                  ;   BX = first data sector on disk (0-based)
  1369                                  ;   AX = first data sector on disk (high)
  1370                                  ;   DI = sectors/fat for the boot media.
  1371                                  ;
  1372                                  ; calls:     none
  1373                                  ; ---------------------------------------------------------------------------
  1374                                  ;
  1375                                  ; set up registers for msinit then do far jmp
  1376                                  ;
  1377                                  ; ---------------------------------------------------------------------------
  1378                                  
  1379                                  GoToBioInit:
  1380                                  
  1381                                  ; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (PCDOS 7.1)
  1382                                  %if 0
  1383                                  		; 24/12/2022
  1384                                  		; ds = cs	
  1385                                  		;mov	ch, [cs:MediaByte]
  1386                                  		;mov	dl, [cs:BootDrive]
  1387                                  		;mov	bx, [cs:FirstSectorL]
  1388                                  		;mov	ax, [cs:FirstSectorH]
  1389                                  
  1390                                  		mov	ch, [MediaByte] ; Restore regs required for msint
  1391                                  		mov	dl, [BootDrive] ; Physical drv number we booted from.
  1392                                  		mov	bx, [FirstSectorL] ; AX:BX = first data sector of disk
  1393                                  		mov	ax, [FirstSectorH]
  1394                                  %endif
  1395                                  
  1396                                  ; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (PCDOS 7.1)
  1397                                  %if 1	
  1398                                  		; 05/10/2023
  1399                                  		; (PCDOS 7.1 IBMBIO.COM - MSLOAD:034Ah)
  1400 0000022E 8A2E[3F00]              		mov	ch, [MediaByte]	; Set up required registers for iosys,
  1401                                  					;  then jump to it (70:0)
  1402                                  					;
  1403                                  					; Restore regs required for msint
  1404 00000232 8A16[3D00]              		mov	dl, [BootDrive]	; Physical drv number we booted from
  1405 00000236 8B1E[3900]              		mov	bx, [FirstSectorL]
  1406 0000023A A1[3B00]                		mov     ax, [FirstSectorH]
  1407                                  					; bx:ax = first data sector of disk
  1408 0000023D C536[4100]              		lds	si, [OrgDasdPtr]
  1409                                  					; Set ds:si to Original INT 1Eh disk(ette)
  1410                                  					; table address and then push disk table 
  1411                                  					; address and INT 1Eh vector to stack
  1412                                  					; (set stack content just as at the start
  1413                                  					;  of MSLOAD)
  1414                                  		; 05/10/2023
  1415                                  		; following pushes are not necessary..
  1416                                  		; PCDOS 7.1 BIOSDATA init procedure does not pop the pushed
  1417                                  		; registers here and also it doesn't use the di value here
  1418                                  		; (but ds:si is used)
  1419                                  		;
  1420                                  		;push	ds              ; INT 1Eh original table segment
  1421                                  		;push	si              ; INT 1Eh original table offset
  1422                                  		;xor	di, di          ; 0
  1423                                  		;push	di		; INT 1Eh vector segment
  1424                                  		;mov	di, 78h         ; 1Eh*4 = 78h
  1425                                  		;push	di              ; INT 1Eh vector offset
  1426                                  %endif
  1427                                  		; 05/10/2023
  1428                                  		;mov	bp, sp	; not necessary
  1429                                  				; (BIOSDATA init doesn't use the bp value here)
  1430                                  
  1431 00000241 EA00007000              		jmp	70h:0	; Far jump to IoSysAddr	(DOSBIOS)
  1432                                  
  1433                                  ; =============== S U B	R O U T	I N E =======================================
  1434                                  
  1435                                  ; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1436                                  ; (PCDOS 7.1 IBMBIO.COm - MSLOAD:036Bh)
  1437                                  
  1438                                  %if 0
  1439                                  check_int13h_extensions:
  1440                                  		push	ax
  1441                                  		push	dx
  1442                                  		xor	ax, ax
  1443                                  		push	ax		; zero (buffer offset 24)
  1444                                  					; (bytes per sector)
  1445                                  		mov	bx, sp
  1446                                  		sub	sp, 20
  1447                                  		push	ax		; info flags
  1448                                  		mov	ax, 26		; Result buffer size
  1449                                  		push	ax
  1450                                  		mov	si, sp
  1451                                  		mov	dl, [BootDrive]
  1452                                  		mov	ah, 48h
  1453                                  		push	ds
  1454                                  		push	ss
  1455                                  		pop	ds
  1456                                  		cmp	dl, 0
  1457                                  		jge	short not_hard_disk
  1458                                  		int	13h	; DISK - IBM/MS Extension - GET DRIVE PARAMETERS
  1459                                  				; (DL - drive, DS:SI - buffer)
  1460                                  not_hard_disk:
  1461                                  		pop	ds
  1462                                  		mov	sp, bx
  1463                                  		pop	ax		; bytes per sector, buffer offset 24
  1464                                  		jc 	short int13h_ext_err
  1465                                  		cmp	ax, 512
  1466                                  		je	short int13_ext_ok
  1467                                  		stc
  1468                                  int13h_ext_err:
  1469                                  int13_ext_ok:
  1470                                  		pop	dx
  1471                                  		pop	ax
  1472                                  		retn
  1473                                  %endif
  1474                                  
  1475                                  ; =============== S U B	R O U T	I N E =======================================
  1476                                  
  1477                                  ; ReadSectors
  1478                                  ; ---------------------------------------------------------------------------
  1479                                  ; notES:
  1480                                  ;
  1481                                  ;  read in the CS:SectorCount number of sectors at ES:di
  1482                                  ;
  1483                                  ;
  1484                                  ; INPUT:
  1485                                  ;
  1486                                  ;   DI = OFFSET of start of read
  1487                                  ;   ES = segment of read
  1488                                  ;   CS:SectorCount = number of sectors to read
  1489                                  ;   CS:StartSecL = starting sector (low)
  1490                                  ;   CS:StartSecH = starting sector (high)
  1491                                  ;   following is bpb info that must be setup prior to call
  1492                                  ;   CS:NumHeads
  1493                                  ;   CS:number_of_sectors
  1494                                  ;   CS:BootDrive
  1495                                  ;   CS:SecPerTrack
  1496                                  ;
  1497                                  ; OUTPUT:
  1498                                  ;
  1499                                  ;   AX,BX,CX,DX,SI,DI destroyed
  1500                                  ; ---------------------------------------------------------------------------
  1501                                  ; divide start sector by sectors per track
  1502                                  ; the remainder is the actual sector number, 0 based
  1503                                  ;
  1504                                  ; increment actual sector number to get 1 based
  1505                                  ;
  1506                                  ; the quotient is the number of tracks - divide by heads to get the cyl
  1507                                  ;
  1508                                  ; the remainder is actual head, the quotient is cylinder
  1509                                  ;
  1510                                  ; figure the number of sectors in that track, set al to this
  1511                                  ;
  1512                                  ; do the read
  1513                                  ;
  1514                                  ; if error, do reset, then redo the int 13h
  1515                                  ;
  1516                                  ; if successful read, subtract # sectors read from SectorCount, add to logical
  1517                                  ; sector, add #sectors read * BytesPerSec to bx;
  1518                                  ;
  1519                                  ; if SectorCount <> 0 do next read
  1520                                  ; ---------------------------------------------------------------------------
  1521                                  
  1522                                  ; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1523                                  
  1524                                  		; 24/12/2022
  1525                                  		; 22/12/2022
  1526                                  ReadSectors:
  1527 00000246 B90500                  		mov	cx, 5			; 5 retries
  1528                                  
  1529                                  		; Convert a logical sector into track/sector/head. AX has the
  1530                                  		; logical sector number
  1531                                  TryRead:
  1532                                  		; 24/12/2022
  1533                                  		; ds = cs
  1534 00000249 51                      		push	cx		; (*)
  1535                                  		;mov	ax, [cs:StartSecL]	; Get starting sector
  1536                                  		;mov	dx, [cs:StartSecH]
  1537 0000024A A1[0700]                		mov	ax, [StartSecL]		; Get starting sector
  1538 0000024D 8B16[0900]              		mov	dx, [StartSecH]
  1539 00000251 50                      		push	ax		; (**)
  1540                                  		;;;
  1541                                  	
  1542                                  		; 05/10/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  1543                                  		;call	check_int13h_extensions
  1544                                  		;jc	short chs_read
  1545                                  		; ----------------------
  1546                                  		; 06/10/2023
  1547                                  check_int13h_extensions:
  1548 00000252 8A1E[3D00]              		mov	bl, [BootDrive]
  1549 00000256 08DB                    		or	bl, bl
  1550 00000258 7953                    		jns	short chs_read  ; not hard disk
  1551                                  		; bl >= 80h
  1552 0000025A 52                      		push	dx ; ***
  1553                                  		;mov	dl, [BootDrive]
  1554 0000025B 88DA                    		mov	dl, bl
  1555 0000025D 50                      		push	ax ; ****
  1556 0000025E 31C0                    		xor	ax, ax
  1557 00000260 50                      		push	ax		; zero (buffer offset 24)
  1558                                  					; (bytes per sector)
  1559 00000261 89E3                    		mov	bx, sp
  1560 00000263 83EC14                  		sub	sp, 20
  1561 00000266 50                      		push	ax		; info flags
  1562 00000267 B81A00                  		mov	ax, 26		; Result buffer size
  1563 0000026A 50                      		push	ax
  1564 0000026B 89E6                    		mov	si, sp
  1565 0000026D B448                    		mov	ah, 48h
  1566 0000026F 1E                      		push	ds
  1567 00000270 16                      		push	ss
  1568 00000271 1F                      		pop	ds
  1569 00000272 CD13                    		int	13h	; DISK - IBM/MS Extension - GET DRIVE PARAMETERS
  1570                                  				; (DL - drive, DS:SI - buffer)
  1571 00000274 1F                      		pop	ds
  1572 00000275 89DC                    		mov	sp, bx
  1573 00000277 58                      		pop	ax		; bytes per sector, buffer offset 24
  1574 00000278 7203                    		jc 	short int13h_ext_err
  1575 0000027A 3D0002                  		cmp	ax, 512
  1576                                  int13h_ext_err:
  1577 0000027D 58                      		pop	ax ; ****
  1578 0000027E 5A                      		pop	dx ; ***
  1579 0000027F 752C                    		jne	short chs_read
  1580                                  		; ----------------------
  1581                                  lba_read:		
  1582                                  		;xor	si, si		; LBA read
  1583                                  		;push	si		; 0
  1584                                  		;push	si		; 0
  1585 00000281 31DB                    		xor	bx, bx		; LBA read
  1586 00000283 53                      		push	bx		; 0
  1587 00000284 53                      		push	bx		; 0
  1588 00000285 52                      		push	dx
  1589 00000286 50                      		push	ax		; 0:0:dx:ax = start sector (8 bytes)
  1590 00000287 06                      		push	es
  1591 00000288 57                      		push	di 		; memory buffer address (seg:off)
  1592 00000289 FF36[1100]              		push	word [SectorCount]
  1593                                  					; number of sectors to read
  1594                                  		;mov	bx, 16		; size of DAP
  1595 0000028D B310                    		mov	bl, 16
  1596 0000028F 53                      		push	bx
  1597 00000290 89E6                    		mov	si, sp
  1598 00000292 B442                    		mov	ah, 42h
  1599 00000294 52                      		push	dx
  1600 00000295 8A16[3D00]              		mov	dl, [BootDrive]
  1601 00000299 1E                      		push	ds
  1602 0000029A 16                      		push	ss
  1603 0000029B 1F                      		pop	ds
  1604                                  		
  1605 0000029C CD13                    		int	13h	; DISK - IBM/MS Extension - EXTENDED READ
  1606                                  				; (DL - drive, DS:SI - disk address packet)
  1607 0000029E 1F                      		pop	ds
  1608 0000029F 5A                      		pop	dx		; sector number, hw
  1609 000002A0 7209                    		jc	short lba_read_err
  1610 000002A2 58                      		pop	ax		; size of DAP (disk address packet) = 16
  1611 000002A3 58                      		pop	ax		; number of sectors to read
  1612 000002A4 50                      		push	ax		; (**) discard ax on stack (StartSecL)
  1613 000002A5 01DC                    		add	sp, bx		; sp points to cx (*)
  1614 000002A7 59                      		pop	cx	; (*)	; remaining retry count value
  1615 000002A8 E98400                  		jmp	ReadOk
  1616                                  lba_read_err:
  1617 000002AB 01DC                    		add	sp, bx
  1618                                  		;;;
  1619                                  chs_read:
  1620 000002AD 89D0                    		mov	ax, dx		; start sector, hw
  1621 000002AF 31D2                    		xor	dx, dx ; 0
  1622                                  		;;;
  1623                                  		; 05/10/2023 - Retro DOS v5.0
  1624                                  		; (PCDOS 7.1 IBMBIO.COM - MSLOAD:03E3h
  1625 000002B1 3906[2500]              		cmp	[SecPerTrack], ax ; hw of disk (LBA) address
  1626 000002B5 7326                    		jnb	short DoDivide	; (must not be > sectors per track)
  1627                                  ErrorOut:
  1628                                  ReadError:		
  1629                                  		;push	cs
  1630                                  		;pop	ds
  1631                                  		; ds = cs
  1632 000002B7 BE[2904]                		mov	si, NonSystemDiskMsg ; "Non-System disk or disk error" ...
  1633                                  WriteTTY:
  1634 000002BA AC                      		lodsb
  1635 000002BB 08C0                    		or	al, al
  1636 000002BD 7408                    		jz	short wait_key_reboot
  1637 000002BF B40E                    		mov	ah, 0Eh
  1638 000002C1 B307                    		mov	bl, 7
  1639 000002C3 CD10                    		int	10h
  1640 000002C5 EBF3                    		jmp	short WriteTTY
  1641                                  wait_key_reboot:
  1642 000002C7 30E4                    		xor	ah, ah
  1643 000002C9 CD16                    		int	16h
  1644                                  		;xor	bx, bx
  1645                                  		;mov	ds, bx ; 0
  1646                                  		;les	bx, [cs:OrgDasdPtr]
  1647 000002CB C41E[4100]              		les	bx, [OrgDasdPtr] ; Restore ROMBIOS's INT 1Eh vector
  1648                                  		; 06/10/2023
  1649 000002CF 31F6                    		xor	si, si ; 0
  1650 000002D1 8EDE                    		mov	ds, si
  1651                                  
  1652 000002D3 BE7800                  		mov	si, 78h ; 1Eh*4 
  1653 000002D6 891C                    		mov	[si], bx
  1654 000002D8 8C4402                  		mov	[si+2], es
  1655 000002DB CD19                    		int	19h		; DISK BOOT
  1656                                  					; causes reboot of disk system
  1657                                  		;;;
  1658                                  DoDivide:
  1659                                  		;;div	word [cs:SecPerTrack]
  1660                                  		;div	word [SecPerTrack]	
  1661                                  		; 24/12/2022
  1662 000002DD 8B1E[2500]              		mov	bx, [SecPerTrack]
  1663 000002E1 F7F3                    		div	bx
  1664 000002E3 A3[0B00]                		mov	[TempH], ax
  1665                                  		;mov	[cs:TempH], ax
  1666 000002E6 58                      		pop	ax ; (**) ; 05/10/2023	; start sector, lw
  1667 000002E7 F7F3                    		div	bx
  1668                                  		;div	word [SecPerTrack]
  1669                                  		;;div	word [cs:SecPerTrack]	; [TempH]:ax = track,
  1670                                  						; dx = sector number
  1671                                  
  1672                                  		;mov	bx, [cs:SecPerTrack]	; Get number of sectors we can
  1673                                  						; read in this track
  1674 000002E9 29D3                    		sub	bx, dx		; dx = start sector on (same) track
  1675                                  		;mov	si, bx
  1676 000002EB 8B36[1100]              		mov	si, [SectorCount] ; sectors to read on (same) track (remain sectors)	
  1677                                  
  1678 000002EF 39DE                    		cmp	si, bx
  1679 000002F1 7602                    		jna	short GotLength
  1680                                  		;cmp	[SectorCount], si
  1681                                  		;;cmp	[cs:SectorCount], si	; Is possible sectors in track more
  1682                                  		;jnb	short GotLength		; than what we need to read?
  1683 000002F3 89DE                    		mov	si, bx
  1684                                  		;mov	si, [SectorCount]
  1685                                  		;;mov	si, [cs:SectorCount]	; Yes, only read what we need to
  1686                                  ;GotLength:
  1687                                  
  1688                                  		; 24/12/2022
  1689                                  		; IO.SYS < 40KB (segment override is not possible)
  1690                                  		; 700h+0F8FFh < 64KB address 
  1691                                  		;	(there is not an override risk up to 63743 bytes)
  1692                                  ; 24/12/2022
  1693                                  %if 0
  1694                                  		; 24/12/2022
  1695                                  		; dma boundary check for >64KB reads
  1696                                  		; Also, Segment Override risk !
  1697                                  		or	di, di
  1698                                  		jz	short dma_boundary_ok ; no problem for the 1st read
  1699                                  		;cmp	byte [BootDrive], 80h
  1700                                  		;;cmp	byte [cs:BootDrive], 80h
  1701                                  		;jnb	short dma_boundary_ok ; no problem for hard disks
  1702                                  dma_boundary_chk:
  1703                                  		cmp	si, 1
  1704                                  		jna	short dma_boundary_ok 
  1705                                  				; 1 sector read will not cause a boundary error			
  1706                                  		push	dx
  1707                                  		push	ax
  1708                                  		mov	ax, si
  1709                                  		sub	dx, dx
  1710                                  		mul	word [BytesPerSec]
  1711                                  		mov	bx, es
  1712                                  		mov	cl, 4
  1713                                  		shl	bx, cl	; convert paragraphs to bytes
  1714                                  		; bx = segment start position (for 64K memory sections)
  1715                                  		add	bx, ax	; byte count to read
  1716                                  		pop	ax
  1717                                  		pop	dx
  1718                                  		add	bx, di	; add current buffer offset to byte count
  1719                                  		jnc	short dma_boundary_ok
  1720                                  		
  1721                                  		; Sector count must be decreased to prevent
  1722                                  		; DMA boundary error or segment override risk!
  1723                                  		dec	si
  1724                                  		jmp	short dma_boundary_chk
  1725                                  dma_boundary_ok:
  1726                                  %endif
  1727                                  		; 24/12/2022
  1728                                  GotLength:
  1729                                  		;inc	dl			; Sector numbers are 1-based
  1730                                  		; 18/12/2022
  1731 000002F5 42                      		inc	dx
  1732 000002F6 88D3                    		mov	bl, dl			; Start sector in BL
  1733                                  		; 24/12/2022
  1734 000002F8 8B16[0B00]              		mov	dx, [TempH]		; DX:AX = Track
  1735                                  		;mov	dx, [cs:TempH]		; DX:AX = Track
  1736 000002FC 50                      		push	ax
  1737 000002FD 89D0                    		mov	ax, dx
  1738 000002FF 31D2                    		xor	dx, dx
  1739                                  		; 24/12/2022
  1740 00000301 F736[2700]              		div	word [NumHeads]
  1741                                  		;div	word [cs:NumHeads]	; Start cyl in AX, head in dl
  1742                                  		;mov	[TempH], ax
  1743                                  		;;mov	[cs:TempH], ax
  1744 00000305 58                      		pop	ax
  1745 00000306 F736[2700]              		div	word [NumHeads]
  1746                                  		;div	word [cs:NumHeads]	; [TempH]:AX = Cylinder, DX = Head
  1747                                  
  1748                                  			; At this moment, we assume that TempH = 0,
  1749                                  			; ax <= 1024, dx <= 255
  1750                                  
  1751 0000030A 88D6                    		mov	dh, dl
  1752                                  		
  1753 0000030C B106                    		mov	cl, 6
  1754 0000030E D2E4                    		shl	ah, cl			; Shift cyl high bits up
  1755 00000310 08DC                    		or	ah, bl			; Mix in with sector bits
  1756 00000312 88C5                    		mov	ch, al			; Setup cyl low
  1757 00000314 88E1                    		mov	cl, ah			; Setup cyl/high - sector
  1758 00000316 89FB                    		mov	bx, di			; Get back OFFSET
  1759                                  		; 24/12/2022
  1760 00000318 8A16[3D00]              		mov	dl, [BootDrive]		; Get drive
  1761                                  		;mov	dl, [cs:BootDrive]	; Get drive
  1762 0000031C 89F0                    		mov	ax, si			; Get number of sectors to read (al)
  1763 0000031E B402                    		mov	ah, 2			; Read sectors
  1764                                  		; 23/12/2022
  1765                                  		;push	ax
  1766                                  		;push	di
  1767                                  
  1768                                  			; Issue one read request. ES:BX have the transfer address,
  1769                                  			; AL is the number of sectors.	
  1770                                  
  1771 00000320 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  1772                                  					; AL = number of sectors to read, CH = track, CL = sector
  1773                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  1774                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  1775                                  		; 23/12/2022
  1776                                  		;pop	di
  1777                                  		;pop	ax
  1778                                  
  1779                                  		; 09/12/2023
  1780                                  		; 23/12/2022
  1781                                  		;mov	ah, 0
  1782                                  		
  1783 00000322 59                      		pop	cx ; (*)	; Get retry count back
  1784 00000323 730A                    		jnc	short ReadOk	; 23/12/2022
  1785                                  		
  1786                                  		; 23/12/2022
  1787                                  		;mov	bx, di		; Get offset
  1788                                  		; 12/12/2023
  1789 00000325 30E4                    		xor	ah, ah
  1790                                  		; ah = 0
  1791                                  		; 23/12/2022
  1792                                  		;push	cx
  1793                                  		; 24/12/2022
  1794                                  		;mov	dl, [BootDrive]
  1795                                  		;;mov	dl, [cs:BootDrive]
  1796                                  		; 23/12/2022
  1797                                  		;push	di
  1798 00000327 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
  1799                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
  1800                                  		; 23/12/2022
  1801                                  		;pop	di
  1802                                  		;pop	cx
  1803 00000329 49                      		dec	cx
  1804 0000032A 748B                    		jz	short ReadError
  1805 0000032C E91AFF                  		jmp	TryRead
  1806                                  ; ---------------------------------------------------------------------------
  1807                                  ; 05/10/2023
  1808                                  ;ReadError:				
  1809                                  ;		jmp	ErrorOut
  1810                                  ; ---------------------------------------------------------------------------
  1811                                  
  1812                                  ReadOk:
  1813                                  		; 09/12/2023
  1814                                  		; al = sectors per cluster or sectors per track
  1815                                  		; (al <= 64, sectors per cluster <= 64) ; (!!!)
  1816                                  		; ((128*512 = 65536 -> ax=0, dx=1 is unexpected result here!))
  1817                                  
  1818                                  		; 23/12/2022			
  1819                                  		; ah = 0
  1820                                  		; 22/12/2022
  1821                                  		;xor	ah, ah		; Mask out read command, just get # read
  1822                                  		; ch = 0
  1823 0000032F 88C1                    		mov	cl, al
  1824                                  		
  1825                                  		; 09/12/2023
  1826                                  		;; 22/12/2022
  1827                                  		;; cx = ax = read (sector) count	
  1828                                  		;;mov	bx, [cs:BytesPerSec]	; Bytes per sector
  1829                                  		;;mul	bx			; Get total bytes read	
  1830                                  		;; 24/12/2022
  1831                                  		;; ds = cs
  1832                                  		;mul	word [BytesPerSec]
  1833                                  		;;mul	word [cs:BytesPerSec]
  1834                                  		; 09/12/2023
  1835 00000331 A1[1B00]                		mov	ax, [BytesPerSec]
  1836 00000334 F7E1                    		mul	cx	; (!!!)	
  1837 00000336 01C7                    		add	di, ax		; Add it to OFFSET
  1838                                  		; 09/12/2023
  1839                                  		; dx = 0 (CL must be <= 64) ; (!!!) 
  1840                                  
  1841                                  		; 24/12/2022
  1842                                  		; IO.SYS < 40KB (segment override is not possible)
  1843                                  		; 700h+0F8FFh < 64KB address 
  1844                                  		;	(there is not an override risk up to 63743 bytes)
  1845                                  		;add	di, ax
  1846                                  		;jnc	short read_next_sector
  1847                                  		;mov	bx, es
  1848                                  		;;add	bx, 1000h
  1849                                  		;add	bh, 10h
  1850                                  		;mov	es, bx
  1851                                  ;read_next_sector:
  1852                                  
  1853                                  		; 24/12/2022
  1854                                  		; ds = cs
  1855                                  		; 22/12/2022
  1856 00000338 290E[1100]              		sub	[SectorCount], cx
  1857                                  		;sub	[cs:SectorCount], cx
  1858                                  		;;sub	[cs:SectorCount], ax	; Bump number down
  1859 0000033C 7464                    		jz	short EndRead
  1860 0000033E 010E[0700]              		add	[StartSecL], cx
  1861                                  		;add	[cs:StartSecL], cx
  1862                                  		;;add	[cs:StartSecL], ax	; Where to start next time
  1863                                  		;adc	word [StartSecH], 0
  1864                                  		; 09/12/2023
  1865 00000342 1116[0900]              		adc	[StartSecH], dx ; 0
  1866                                  		;;adc	word [cs:StartSecH], 0
  1867 00000346 E9FDFE                  		jmp	ReadSectors
  1868                                  ; ---------------------------------------------------------------------------
  1869                                  		
  1870                                  		; 09/12/2023
  1871                                  		; 06/10/2023
  1872                                  		; 24/12/2022
  1873                                  ;EndRead:				
  1874                                  ;		retn
  1875                                  
  1876                                  ; =============== S U B	R O U T	I N E =======================================
  1877                                  
  1878                                  ; GetNextFatEntry
  1879                                  ; ---------------------------------------------------------------------------
  1880                                  ;
  1881                                  ; NOTES:
  1882                                  ;
  1883                                  ;   given the last cluster found, this will return the next cluster of
  1884                                  ;   iosys. if the last cluster is (f)ff8 - (f)fff, then the final cluster
  1885                                  ;   of iosys has been loaded, and control is passed to goto_iosys
  1886                                  ;   msload can handle maximum fat area size of 128 kb.
  1887                                  ;
  1888                                  ; INPUT:
  1889                                  ;
  1890                                  ;    CS:CurrentCluster
  1891                                  ;    CS:FatSize
  1892                                  ;
  1893                                  ; OUTPUT:
  1894                                  ;
  1895                                  ;   CS:CurrentCluster (updated)
  1896                                  ;
  1897                                  ; calls:  GetFatSector
  1898                                  ; ---------------------------------------------------------------------------
  1899                                  ; get CurrentCluster
  1900                                  ;
  1901                                  ; if (16 bit fat)
  1902                                  ;    {if (CurrentCluster = fff8 - ffff)
  1903                                  ;	 {jmp goto_iosys}
  1904                                  ;     else
  1905                                  ;	{get OFFSET by multiply cluster by 2}
  1906                                  ;
  1907                                  ; else
  1908                                  ;    {if (CurrentCluster = ff8 - fff)
  1909                                  ;	 {jmp goto_iosys}
  1910                                  ;     else
  1911                                  ;	{get OFFSET by multiply cluster by 3
  1912                                  ;
  1913                                  ;	 rotate right to divide by 2
  1914                                  ;
  1915                                  ;	 if (cy set - means odd number)
  1916                                  ;	    {shr 4 times to keep high twelve bits}
  1917                                  ;
  1918                                  ;	 else
  1919                                  ;	    {and with 0fffh to keep low 12 bits}
  1920                                  ;	}
  1921                                  ;    }
  1922                                  ;
  1923                                  ; ---------------------------------------------------------------------------
  1924                                  
  1925                                  ; 09/12/2022
  1926                                  ; FAT_12_BIT equ 1
  1927                                  ; NOT_END_OF_FILE equ 0  ; ~END_OF_FILE ; END_OF_FILE equ 0FFh
  1928                                  
  1929                                  GetNextFatEntry:
  1930                                  		; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  1931                                  
  1932 00000349 06                      		push	es
  1933                                  		; 24/12/2022
  1934                                  		; ds = cs
  1935                                  		;mov	ax, [cs:FatSegment]
  1936 0000034A A1[4500]                		mov	ax, [FatSegment]
  1937 0000034D 8EC0                    		mov	es, ax		; ES-> FAT area segment
  1938                                  		; 09/12/2022
  1939                                  		;;mov	byte [cs:EndOfFile], END_OF_FILE
  1940                                  		;mov	byte [cs:EndOfFile], 0FFh ; Assume last cluster
  1941                                  		;mov	ax, [cs:CurrentCluster] ; Get last cluster
  1942                                  		; 24/12/2022
  1943                                  		; ds = cs
  1944 0000034F C606[4000]FF            		mov	byte [EndOfFile], 0FFh ; Assume last cluster
  1945                                  		;;;
  1946                                  		;mov	ax, [CurrentCluster] ; Get last cluster
  1947                                  		; 05/10/2023 - Retro DOS v5.0 (PCDOS 7.1)
  1948 00000354 A1[1300]                		mov	ax, [CurrentClusterL] ; Get last cluster
  1949                                  		; 06/10/2023
  1950                                  		;mov	di, [CurrentClusterH]
  1951                                  chk_fat32_type:
  1952                                  		; 05/10/2023
  1953 00000357 803E[3E00]0B            		cmp	byte [FatType], 0Bh  ; FAT32 (CHS) fs ?
  1954 0000035C 7520                    		jne	short chk_fat_type   ; no
  1955                                  Got32bit:
  1956 0000035E 8B3E[1500]              		mov	di, [CurrentClusterH]
  1957 00000362 01C0                    		add	ax, ax
  1958 00000364 11FF                    		adc	di, di
  1959 00000366 01C0                    		add	ax, ax
  1960 00000368 11FF                    		adc	di, di          ; Get the FAT offset (di:si)
  1961 0000036A 89C6                    		mov	si, ax
  1962 0000036C E86700                  		call	GetFatSector
  1963 0000036F 268B07                  		mov	ax, [es:bx]
  1964 00000372 268B7F02                		mov	di, [es:bx+2]
  1965                                  		; 06/10/2023
  1966                                  		;and	di, 0FFFh ; 28 bit cluster number
  1967 00000376 81FFFF0F                		cmp	di, 0FFFh       ; FAT32 cluster numbers are 28 bit numbers
  1968                                  					; (higher 4 bits are -must be- zero)
  1969                                  		;jne	short GotFAT32ClusterDone
  1970 0000037A 751E                    		jne	short GotClusterDoneJ
  1971                                  		; 06/10/2023
  1972                                  		;cmp	ax, 0FFF8h
  1973                                  ;GotFAT32ClusterDone:
  1974                                  		;jmp	short GotClusterDoneJ
  1975                                  		; 09/12/2023
  1976                                  		;mov	dx, 0FFF8h
  1977                                  		;jmp	short isitlastcluster
  1978 0000037C EB17                    		jmp	short isitlastcluster_16_32
  1979                                  		;;;
  1980                                  chk_fat_type:
  1981                                  		; 06/10/2023
  1982 0000037E 29FF                    		sub	di, di ; 0 ; hw of the cluster number must be 0
  1983                                  				   ; (if it is not FAT32 cluster) 
  1984                                  		; 05/10/2023
  1985 00000380 803E[3E00]01            		cmp	byte [FatType], 1
  1986                                  		;cmp	byte [Fatsize], 1
  1987                                  		;;;cmp	byte [cs:FatSize], FAT_12_BIT
  1988                                  		;;cmp	byte [cs:Fatsize], 1
  1989                                  		;jne	short Got16Bit	; 23/12/2022
  1990                                  		; 09/12/2023
  1991 00000385 741C                    		je	short Got12Bit
  1992                                  
  1993                                  ; ---------------------------------------------------------------------------
  1994                                  		
  1995                                  		; 09/12/2023
  1996                                  Got16Bit:
  1997                                  		; 23/12/2022
  1998                                  		;push	dx
  1999                                  		;xor	dx, dx
  2000                                  		; 05/10/2023
  2001                                  		;sub	dx, dx ; 23/12/2022
  2002                                  
  2003                                  		; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (MSLOAD)
  2004                                  		;shl	ax, 1			; Multiply cluster by 2
  2005                                  		;adc	dx, 0
  2006 00000387 D1E0                    		shl	ax, 1
  2007 00000389 11FF                    		adc	di, di	; di = 0 ; 06/10/2023	
  2008                                  
  2009 0000038B 89C6                    		mov	si, ax			; Get the final buffer OFFSET
  2010 0000038D E84600                  		call	GetFatSector
  2011                                  		; 23/12/2022
  2012                                  		;pop	dx
  2013                                  
  2014                                  		; 05/10/2023
  2015 00000390 31FF                    		xor	di, di		 ; HW of cluster number is 0
  2016                                  
  2017 00000392 268B07                  		mov	ax, [es:bx]
  2018                                  
  2019                                  		; 09/12/2023
  2020                                  isitlastcluster_16_32:
  2021                                  		; 06/10/2023
  2022 00000395 BAF8FF                  		mov	dx, 0FFF8h
  2023                                  		;jmp	short isitlastcluster
  2024                                  ; 09/12/2023
  2025                                  ; 06/10/2023
  2026                                  %if 1
  2027                                  isitlastcluster:
  2028 00000398 39D0                    		cmp	ax, dx
  2029                                  		;cmp	ax, 0FFF8h
  2030                                  GotClusterDoneJ:	; 05/10/2023
  2031 0000039A 7305                    		jnb	short GotClusterDone
  2032                                  NotLastCluster:	
  2033                                  		; 24/12/2022
  2034                                  		; ds = cs
  2035                                  		;;mov	byte [cs:EndOfFile], NOT_END_OF_FILE ; ~END_OF_FILE
  2036                                  		;mov	byte [cs:EndOfFile], 0	; Assume not last cluster
  2037 0000039C C606[4000]00            		mov	byte [EndOfFile], 0	; Assume not last cluster
  2038                                  GotClusterDone:
  2039 000003A1 07                      		pop	es
  2040                                  		; 24/12/2022
  2041                                  EndRead:
  2042 000003A2 C3                      		retn
  2043                                  %endif
  2044                                  
  2045                                  ; ---------------------------------------------------------------------------
  2046                                  
  2047                                  		; 09/12/2023
  2048                                  Got12Bit:
  2049 000003A3 89C6                    		mov	si, ax
  2050                                  		;shr	ax, 1
  2051                                  		;add	si, ax		; SI = AX * 1.5 = AX + AX/2
  2052                                  		; 05/10/2023
  2053                                  		;mov	dx, di
  2054                                  		;shr	dx, 1
  2055                                  		;rcr	ax, 1
  2056                                  		;add	si, ax
  2057                                  		;adc	di, dx		; di:si = dx:ax * 1.5 = dx:ax + dx:ax/2
  2058                                  		; 06/10/2023		
  2059 000003A5 D1E8                    		shr	ax, 1
  2060 000003A7 01C6                    		add	si, ax
  2061                                  		;sub	di, di ; 0 ; (di must be 0 for FAT12)
  2062                                  
  2063                                  		; 23/12/2022
  2064                                  		;push	dx
  2065                                  		;xor	dx, dx
  2066                                  		; 05/10/2023
  2067                                  		;sub	dx, dx ; 23/12/2022
  2068 000003A9 E82A00                  		call	GetFatSector
  2069                                  		; 23/12/2022
  2070                                  		;pop	dx
  2071 000003AC 7510                    		jnz	short ClusterOk
  2072 000003AE 268A07                  		mov	al, [es:bx]
  2073                                  		; 22/12/2022
  2074                                  		;mov	[cs:TempCluster], al
  2075                                  		; 06/10/2023
  2076 000003B1 50                      		push	ax ; (*)
  2077                                  		;inc	si
  2078                                  		;add	si, 1
  2079                                  		;adc	di, 0
  2080                                  		; 05/10/2023
  2081 000003B2 46                      		inc	si
  2082                                  		; 06/10/2023
  2083                                  		;jnz	short Got12Bit_rnfs
  2084                                  		;inc	di
  2085                                  ;Got12Bit_rnfs:
  2086                                  		; 23/12/2022
  2087                                  		;push	dx
  2088                                  		; 05/10/2023
  2089                                  		;xor	dx, dx
  2090 000003B3 E82000                  		call	GetFatSector	; Read next fat sector
  2091                                  		; 23/12/2022
  2092                                  		;pop	dx
  2093                                  		; 22/12/2022
  2094                                  		;mov	al, [es:0]
  2095                                  		;mov	[cs:TempCluster+1], al
  2096                                  		;mov	ax, [cs:TempCluster]
  2097                                  		; 06/10/2023
  2098                                  		; 22/12/2022
  2099 000003B6 58                      		pop	ax ; (*) 
  2100 000003B7 268A260000              		mov	ah, [es:0]
  2101 000003BC EB03                    		jmp	short EvenOdd
  2102                                  ; ---------------------------------------------------------------------------
  2103                                  
  2104                                  ClusterOk:				
  2105 000003BE 268B07                  		mov	ax, [es:bx]
  2106                                  EvenOdd:	
  2107                                  		; 24/12/2022
  2108                                  		; ds = cs
  2109                                  		;test	byte [CurrentCluster], 1
  2110                                  		; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (MSLOAD)
  2111 000003C1 F606[1300]01            		test	byte [CurrentClusterL], 1
  2112                                  		; 10/12/2022		
  2113                                  		;test	byte [cs:CurrentCluster], 1 ; 09/12/2022
  2114                                  		;;test	word [cs:CurrentCluster], 1 ; Was last cluster odd?
  2115 000003C6 7505                    		jnz	short OddResult		; If not zero it was odd
  2116 000003C8 25FF0F                  		and	ax, 0FFFh		; Keep low 12 bits
  2117 000003CB EB04                    		jmp	short TestEOF
  2118                                  ; ---------------------------------------------------------------------------
  2119                                  
  2120                                  OddResult:				
  2121 000003CD B104                    		mov	cl, 4			; Keep high 12 bits for odd
  2122 000003CF D3E8                    		shr	ax, cl
  2123                                  TestEOF:
  2124                                  		; 06/10/2023
  2125                                  		; di = 0
  2126                                  		;xor	di, di		 ; HW of cluster number is 0
  2127                                  		
  2128                                  		; 06/10/2023	
  2129                                  		;cmp	ax, 0FF8h		; Is it last cluster?
  2130                                  		;jnb	short GotClusterDone	; Yep, all done here
  2131                                  		;jmp	short NotLastCluster
  2132 000003D1 BAF80F                  		mov	dx, 0FF8h
  2133                                  		; 09/12/2023
  2134 000003D4 EBC2                    		jmp	short isitlastcluster
  2135                                  ; 09/12/2023
  2136                                  ; 06/10/2023
  2137                                  %if 0
  2138                                  isitlastcluster:
  2139                                  		; 06/10/2023
  2140                                  		cmp	ax, dx
  2141                                  GotClusterDoneJ:
  2142                                  		jnb	short GotClusterDone
  2143                                  NotLastCluster:	
  2144                                  		; 24/12/2022
  2145                                  		; ds = cs			
  2146                                  		;;mov	byte [cs:EndOfFile], NOT_END_OF_FILE ; ~END_OF_FILE
  2147                                  		;mov	byte [cs:EndOfFile], 0	; Assume not last cluster
  2148                                  		mov	byte [EndOfFile], 0	; Assume not last cluster
  2149                                  GotClusterDone:				
  2150                                  		pop	es
  2151                                  		; 06/10/2023
  2152                                  		; 24/12/2022
  2153                                  ;EndRead:
  2154                                  		retn
  2155                                  %endif
  2156                                  
  2157                                  ; =============== S U B	R O U T	I N E =======================================
  2158                                  
  2159                                  ; GetFatSector
  2160                                  ; ---------------------------------------------------------------------------
  2161                                  ;function: find and read the corresponding fat sector into ES:0
  2162                                  ;
  2163                                  ;in). SI = offset value (starting from fat entry 0) of fat entry to find.
  2164                                  ;     ES = fat sector segment
  2165                                  ;     CS:BytesPerSec
  2166                                  ;
  2167                                  ;out). corresponding fat sector read in.
  2168                                  ;      BX = offset value of the corresponding fat entry in the fat sector.
  2169                                  ;      CX destroyed.
  2170                                  ;      zero flag set if the fat entry is splitted, i.e. when 12 bit fat entry
  2171                                  ;      starts at the last byte of the fat sector. in this case, the caller
  2172                                  ;      should save this byte, and read the next fat sector to get the rest
  2173                                  ;      of the fat entry value. (this will only happen with the 12 bit fat).
  2174                                  ;
  2175                                  ; ---------------------------------------------------------------------------
  2176                                  
  2177                                  ; 09/12/2023
  2178                                  ; 06/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2179                                  ; (PCDOS 7.1 IBMBIO.COM - MSLOAD:054Ch)
  2180                                  
  2181                                  		; 24/12/2022
  2182                                  		; 22/12/2022
  2183                                  GetFatSector:
  2184                                  		;push	ax	; 06/10/2023
  2185 000003D6 56                      		push	si
  2186 000003D7 57                      		push	di		; di:si = byte offset in (entire) FAT
  2187                                  		;;;
  2188                                  		; 06/10/2023
  2189 000003D8 89F8                    		mov	ax, di		; 32 bit division (dx:ax/512)
  2190 000003DA 8B0E[1B00]              		mov     cx, [BytesPerSec]
  2191 000003DE 31D2                    		xor	dx, dx
  2192 000003E0 F7F1                    		div	cx
  2193 000003E2 89C3                    		mov	bx, ax
  2194                                  		;;;
  2195 000003E4 89F0                    		mov	ax, si
  2196                                  		; 24/12/2022
  2197                                  		; ds = cs
  2198                                  		;mov	cx, [cs:BytesPerSec]
  2199                                  		; 06/10/2023
  2200 000003E6 F7F1                    		div	cx			; AX = Sector number, DX = Offset
  2201                                  		;div	word [BytesPerSec]
  2202                                  			; dx = byte offset in the FAT sector
  2203                                  			; ax = low word of the FAT sector number
  2204                                  			; bx = high word of the FAT sector number  
  2205                                  		; 06/10/2023
  2206 000003E8 3B1E[0F00]              		cmp	bx, [LastFatSectorH]  ; FAT32 (32 bit cluster numbers)
  2207 000003EC 7506                    		jne	short not_same_fat_sector
  2208 000003EE 3B06[0D00]              		cmp	ax, [LastFatSectorL]
  2209                                  		;cmp	ax, [LastFatSector]
  2210                                  		;;cmp	ax, [cs:LastFatSector]	; The same fat sector?
  2211 000003F2 742D                    		je	short SplitChk		; Don't need to read it again.
  2212                                  not_same_fat_sector:
  2213                                  		; 06/10/2023
  2214 000003F4 A3[0D00]                		mov	[LastFatSectorL], ax
  2215 000003F7 891E[0F00]              		mov	[LastFatSectorH], bx
  2216                                  		;
  2217                                  		;mov	[LastFatSector], ax
  2218                                  		;;mov	[cs:LastFatSector], ax
  2219                                  		; 06/10/2023
  2220 000003FB 51                      		push	cx ; ** ; bytes per sector
  2221                                  		;
  2222 000003FC 52                      		push	dx ; *
  2223                                  		; 24/12/2022
  2224                                  		;xor	dx, dx
  2225                                  		; 06/10/2023
  2226 000003FD 89DA                    		mov	dx, bx
  2227                                  		;
  2228                                  		;add	ax, [cs:HiddenSectorsL]
  2229                                  		;adc	dx, [cs:HiddenSectorsH]
  2230                                  		;add	ax, [cs:ReservSectors]
  2231                                  		;adc	dx, 0
  2232                                  		; 24/12/2022
  2233                                  		; ds = cs
  2234                                  		; 06/10/2023 - Retro DOS v5.0 (PCDOS 7.1 IBVBIO.COM)
  2235                                  		;add	ax, [FatStartSecL]
  2236                                  		;adc	dx, [FatStartSecH]
  2237                                  		; 09/12/2023
  2238 000003FF 31FF                    		xor	di, di ; 0
  2239 00000401 0306[2900]              		add     ax, [HiddenSectorsL]
  2240 00000405 1316[2B00]              		adc	dx, [HiddenSectorsH]
  2241 00000409 0306[1F00]              		add	ax, [ReservSectors]
  2242                                  		;adc	dx, 0
  2243                                  		; 09/12/2023
  2244 0000040D 11FA                    		adc	dx, di ; 0
  2245                                  
  2246 0000040F A3[0700]                		mov	[StartSecL], ax
  2247 00000412 8916[0900]              		mov	[StartSecH], dx		; Set up for ReadSectors
  2248                                  		;mov	[cs:StartSecL], ax
  2249                                  		;mov	[cs:StartSecH], dx	; Set up for ReadSectors
  2250                                  		
  2251 00000416 C706[1100]0100          		mov	word [SectorCount], 1 ; 1 sector			
  2252                                  		;mov	word [cs:SectorCount], 1 ; 1 sector
  2253                                  		; 06/10/2023
  2254                                  		; di = 0
  2255                                  		;xor	di, di ; 0
  2256                                  		; es:di = FATSEGMENT:0000h
  2257 0000041C E827FE                  		call	ReadSectors
  2258 0000041F 5A                      		pop	dx ; *
  2259                                  		; 06/10/2023
  2260                                  		;mov	cx, [BytesPerSec]
  2261 00000420 59                      		pop	cx ; **
  2262                                  		; 24/12/2022
  2263                                  		;mov	cx, [cs:BytesPerSec]
  2264                                  SplitChk:
  2265                                  		; 06/10/2023
  2266                                  		; cx = bytes per sector
  2267                                  		; 24/12/2022
  2268                                  		;mov	cx, [BytesPerSec]				
  2269 00000421 49                      		dec	cx			; CX = SECTOR SIZE - 1
  2270 00000422 39CA                    		cmp	dx, cx			; If last byte of sector, splitted entry.
  2271 00000424 89D3                    		mov	bx, dx			; set bx to dx
  2272 00000426 5F                      		pop	di
  2273 00000427 5E                      		pop	si
  2274                                  		;pop	ax	; 06/10/2023
  2275                                  EndWrite:		; 10/12/2022
  2276 00000428 C3                      		retn
  2277                                  
  2278                                  ; ---------------------------------------------------------------------------
  2279                                  
  2280                                  ; 05/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2281                                  %if 0
  2282                                  
  2283                                  ErrorOut:
  2284                                  		; 24/12/2022
  2285                                  		; ds = cs
  2286                                  		;push	cs
  2287                                  		;pop	ds
  2288                                  		
  2289                                  		mov	si, NonSystemDiskMsg ; "\r\nNon-System disk or disk error\r\nRe"...
  2290                                  		call	WriteTTY
  2291                                  
  2292                                  		; Wait for a keypress on the keyboard.
  2293                                  		; Use the bios keyboard interrupt.
  2294                                  
  2295                                  		xor	ah, ah
  2296                                  		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  2297                                  					; Return: AH = scan code, AL = character
  2298                                  
  2299                                  		; We have to restore the address of the original rom disk
  2300                                  		; parameter table to the location at [0:DskAddr]. The address
  2301                                  		; of this original table has been saved previously in
  2302                                  		; 0:OrgDasdPtr and 0:OrgDasdPtr+2. After this table address
  2303                                  		; has been restored we can reboot by invoking the bootstrap
  2304                                  		; loader bios interrupt.
  2305                                  
  2306                                  		; 23/12/2022
  2307                                  		;xor	bx, bx
  2308                                  		;mov	ds, bx
  2309                                  		;les	bx, [OrgDasdPtr] ; Wrong DS segment !
  2310                                  					 ; (Erdogan Tan, 23/12/2022)
  2311                                  		les	bx, [OrgDasdPtr] ; Correct DS segment = CS
  2312                                  		
  2313                                  		; 23/12/2022
  2314                                  		push	ss ; 0
  2315                                  		pop	ds
  2316                                  		; ds = 0		
  2317                                  
  2318                                  		mov	si, DskAddr	; (Int 1Eh)
  2319                                  		mov	[si], bx	; restore offset		
  2320                                  		mov	[si+2], es	; restore segment
  2321                                  		int	19h		; reboot
  2322                                  
  2323                                  ; =============== S U B	R O U T	I N E =======================================
  2324                                  
  2325                                  ; WriteTTY
  2326                                  ; ---------------------------------------------------------------------------
  2327                                  ; in) DS:si -> asciiz string.
  2328                                  ;
  2329                                  ; WriteTTY the character in al to the screen.
  2330                                  ; use video service 'write teletype to active page' (ROM_TTY)
  2331                                  ; use normal character attribute
  2332                                  ; ---------------------------------------------------------------------------
  2333                                  
  2334                                  WriteTTY:
  2335                                  		lodsb
  2336                                  		or	al, al
  2337                                  		jz	short EndWrite
  2338                                  		;mov	AH, ROM_TTY	; 09/12/2022
  2339                                  		mov	ah, 0Eh
  2340                                  		mov	bl, 7	; "normal" attribute
  2341                                  		int	10h	; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  2342                                  				; AL = character, BH = display page (alpha modes)
  2343                                  				; BL = foreground color	(graphics modes)
  2344                                  		jmp	short WriteTTY
  2345                                  ; ---------------------------------------------------------------------------
  2346                                  
  2347                                  ; 10/12/2022	
  2348                                  ;EndWrite:
  2349                                  ;		retn
  2350                                  
  2351                                  %endif	; 05/10/2023
  2352                                  
  2353                                  ; ---------------------------------------------------------------------------
  2354                                  
  2355                                  ; 06/10/2023 - Retro DOS v5.0 IBMBOO.COM (IO.SYS) ((Modified PCDOS 7.1))
  2356                                  ; (PCDOS 7.1 IBMBIO.COM - MSLOAD:054Ch)
  2357                                  
  2358                                  ; 09/12/2022
  2359                                  ;include msbio.cl1
  2360                                  
  2361                                  		; 22/12/2022
  2362                                  		; 20/12/2022
  2363                                  		; 18/12/2022
  2364                                  		;db 0	; (word alignment)
  2365                                  NonSystemDiskMsg:
  2366 00000429 0D0A                    		db 0Dh,0Ah		; ...
  2367 0000042B 4E6F6E2D5379737465-     		db 'Non-System disk or disk error',0Dh,0Ah
  2367 00000434 6D206469736B206F72-
  2367 0000043D 206469736B20657272-
  2367 00000446 6F720D0A           
  2368 0000044A 5265706C6163652061-     		db 'Replace and press any key when ready',0Dh,0Ah,0
  2368 00000453 6E6420707265737320-
  2368 0000045C 616E79206B65792077-
  2368 00000465 68656E207265616479-
  2368 0000046E 0D0A00             
  2369                                  ; 25/12/2022
  2370 00000471 90<rep Fh>              align 16
  2371                                  
  2372                                  EndOfLoader:	; (PCDOS 7.1 IBMBIO.COM - MSLOAD:05F0h) ; 06/10/2023
  2373                                  		;dw 01A1h	; 10/12/2022
  2374                                  
  2375                                  ; ---------------------------------------------------------------------------
  2376                                  
  2377                                  ;=============================================================================
  2378                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
  2379                                  ;=============================================================================
  2380                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2381                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
  2382                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  2383                                  
  2384                                  section .BIOSDATA vstart=0
  2385                                  
  2386                                  ;--- DOSBIOS data segment ----------------------------------------------------
  2387                                  ;-----------------------------------------------------------------------------
  2388                                  
  2389                                  ;Bios_Data segment
  2390                                  
  2391                                  BData_start:				
  2392 00000000 E9921B                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
  2393                                  ; ----------------------------------------------------------------------------
  2394                                  
  2395 00000003 0000                    DosDataSg:	dw 0
  2396                                  
  2397                                  ; DOS's int 2f handler will exit via a jump through here.
  2398                                  ; This is how the BIOS hooks int2f
  2399                                  
  2400                                  ;BIOSDATA:0005h: ; 10/05/2023 (Note the 'bios_i2f equ 5' in 'msdos6.s')
  2401                                  			
  2402 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
  2403                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2404                                  		; PCDOS 7.1 IBMBIO.COM - BIODATA:0006h
  2405                                  		;dw int_2f
  2406                                  		;dw 70h			; BIOSDATA segment (KERNEL_SEGMENT)
  2407 00000006 [3116]                  		dw i2f_handler	
  2408                                  bios_i2f_seg:	; 10/08/2023
  2409 00000008 2D03                    		dw DOSBIOCODESEG	; 02CCh for MSDOS 6.21 IO.SYS (25Ch+070h)
  2410                                  					; 0364h PCDOS 7.1 IBMBIO.COM  (2F4h+070h)
  2411                                  
  2412 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
  2413                                  					; This is to maintain binary compatibility
  2414                                  					; with DISK based DOS 5.0
  2415                                  
  2416                                  ; This is a byte used for special key handling in the resident
  2417                                  ; console device driver. It must be here so that it can be included
  2418                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
  2419                                  
  2420 0000000C 00                      altah:		db 0			; special key handling
  2421                                  			
  2422 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
  2423 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
  2424                                  
  2425                                  ; PTRSAV - pointer save
  2426                                  ;
  2427                                  ; This variable holds the pointer to the Request Header passed by a program
  2428                                  ; wishing to use a device driver. When the strategy routine is called it 
  2429                                  ; puts the address of the Request header in this variable and returns.
  2430                                  		
  2431 00000012 00000000                ptrsav:		dd 0			
  2432                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
  2433 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
  2434 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
  2435 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
  2436 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
  2437 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
  2438 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
  2439                                  
  2440                                  ;-----------------------------------------------------------------------------
  2441                                  
  2442                                  res_dev_list:
  2443                                  
  2444                                  ; Device Header for the CON Device Driver
  2445                                  
  2446                                  CONHeader:				; HEADER FOR DEVICE "CON"
  2447 00000023 [3500]                  		dw auxdev2
  2448 00000025 7000                    		dw 70h	
  2449 00000027 1380                    word_727:	dw 8013h
  2450 00000029 [1506]                  		dw strategy
  2451 0000002B [2006]                  		dw con_entry
  2452 0000002D 434F4E2020202020        aCon:		db 'CON     '           
  2453 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
  2454 00000037 7000                    		dw 70h
  2455 00000039 0080                    		dw 8000h
  2456 0000003B [1506]                  		dw strategy
  2457 0000003D [4106]                  		dw aux0_entry
  2458 0000003F 4155582020202020        aAux:		db 'AUX     '
  2459 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
  2460 00000049 7000                    		dw 70h
  2461 0000004B C0A0                    word_74B:	dw 0A0C0h
  2462 0000004D [1506]                  		dw strategy
  2463 0000004F [2506]                  		dw prn0_entry
  2464 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
  2465 00000059 [6B00]                  timdev:		dw dskdev	
  2466 0000005B 7000                    		dw 70h
  2467 0000005D 0880                    		dw 8008h
  2468 0000005F [1506]                  		dw strategy
  2469 00000061 [5906]                  		dw tim_entry
  2470 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
  2471 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
  2472 0000006D 7000                    		dw 70h
  2473                                  		;dw 8C2h
  2474                                  		; 02/10/2023 - Retro DOS v5.0
  2475 0000006F C248                    		dw 48C2h		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:006Fh 
  2476                                  		;dw offset strategy
  2477                                  		;dw offset dsk_entry
  2478                                  		; 19/10/2022
  2479 00000071 [1506]                  		dw strategy
  2480 00000073 [5E06]                  		dw dsk_entry
  2481                                  
  2482                                  ; maximum number of drives
  2483                                  
  2484 00000075 04                      drvmax:		db 4			
  2485 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
  2486 00000077 00                      fhave96:	db 0			; flag to indicate presence of
  2487                                  					; 96tpi support		
  2488 00000078 00                      single:		db 0			; used to detect single drive systems		
  2489 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
  2490                                  					; used by console driver.			
  2491 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
  2492                                  					; drive. (examined by checksingle).
  2493                                  		
  2494 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
  2495 0000007D 7000                    		dw 70h
  2496 0000007F 0080                    		dw 8000h
  2497 00000081 [1506]                  		dw strategy
  2498 00000083 [4106]                  		dw aux0_entry
  2499 00000085 434F4D3120202020        aCom1:		db 'COM1    '
  2500 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
  2501 0000008F 7000                    		dw 70h
  2502 00000091 C0A0                    		dw 0A0C0h
  2503 00000093 [1506]                  		dw strategy
  2504 00000095 [2C06]                  		dw prn1_entry
  2505 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
  2506 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
  2507 000000A1 7000                    		dw 70h
  2508 000000A3 C0A0                    		dw 0A0C0h
  2509 000000A5 [1506]                  		dw strategy
  2510 000000A7 [3306]                  		dw prn2_entry
  2511 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
  2511 000000B2 0000               
  2512                                  
  2513                                  ;M058; Start of changes
  2514                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  2515                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  2516                                  ;cannot change for them to work. Even ProComm does this.
  2517                                  
  2518 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  2519                                  
  2520 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  2521 000000BA 7000                    		dw 70h
  2522 000000BC C0A0                    		dw 0A0C0h
  2523 000000BE [1506]                  		dw strategy
  2524 000000C0 [3A06]                  		dw prn3_entry
  2525 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  2526 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  2527 000000CC 7000                    		dw 70h
  2528 000000CE 0080                    		dw 8000h
  2529 000000D0 [1506]                  		dw strategy
  2530 000000D2 [4706]                  		dw aux1_entry
  2531                                  		; 19/10/2022
  2532 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  2533                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  2534 000000DC [EE00]                  		dw com4dev
  2535 000000DE 7000                    		dw 70h
  2536 000000E0 0080                    		dw 8000h
  2537                                  		;dw offset strategy
  2538                                  		;dw offset aux2_entry
  2539 000000E2 [1506]                  		dw strategy
  2540 000000E4 [4D06]                  		dw aux2_entry	
  2541 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  2542 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  2543 000000F0 7000                    		dw 70h
  2544 000000F2 0080                    		dw 8000h
  2545 000000F4 [1506]                  		dw strategy
  2546 000000F6 [5306]                  		dw aux3_entry
  2547 000000F8 434F4D3420202020        		db 'COM4    '
  2548                                  
  2549                                  ;-----------------------------------------------------------------------------
  2550                                  
  2551 00000100 10                      RomVectors:	db 10h			
  2552 00000101 00000000                Old10:		dd 0
  2553 00000105 13                      		db 13h
  2554 00000106 00000000                Old13:		dd 0			
  2555 0000010A 15                      		db 15h
  2556 0000010B 00000000                Old15:		dd 0			
  2557 0000010F 19                      		db 19h
  2558 00000110 00000000                Old19:		dd 0
  2559 00000114 1B                      		db 1Bh
  2560 00000115 00000000                Old1B:		dd 0
  2561                                  
  2562                                  ;EndRomVectors	equ $
  2563                                  
  2564                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  2565                                  
  2566                                  ;-----------------------------------------------------------------------------
  2567                                  
  2568 00000119 [5203]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  2569 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  2570                                  
  2571                                  ; (MSDOS 3.3) NOTE:
  2572                                  ; Some floppy drives do not have changeline support. The result is a
  2573                                  ; large amount of inefficiency in the code. A media-check always returns
  2574                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  2575                                  ; always discard any cached data.
  2576                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  2577                                  ; The following three items are used to do this. The logical door latch is
  2578                                  ; based on the premise that it is not physically possible to change floppy
  2579                                  ; disks in a drive in under two seconds (most people take about 10). The
  2580                                  ; logical door latch is implemented by saving the time of the last successful
  2581                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  2582                                  ; current time is compared to the saved time. If less than two seconds have
  2583                                  ; passed then the value "No Change" is returned. If more than two seconds
  2584                                  ; have passed the value "Don't Know" is returned.
  2585                                  ;    There is one complecation to this algorithm. Some programs change the
  2586                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  2587                                  ; This possibility is detected by counting the number of disk operations
  2588                                  ; which occur without any time passing. If this count exceeds the value of
  2589                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  2590                                  ; Know". The variable "AccessCount" is used to keep track of the number
  2591                                  ; of disk operation which occur without the time changing.
  2592                                  
  2593 0000011D 00                      accesscount:	db 0			
  2594 0000011E FF                      tim_drv:	db 0FFh			
  2595 0000011F 00                      medbyt:		db 0
  2596                                  wrtverify:	; 15/10/2022			
  2597 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  2598 00000121 00                      verify:		db 0			; 1 if verify after write
  2599 00000122 0000                    seccnt:		dw 0			
  2600 00000124 00                      		db 0			; -- pad where hardnum was
  2601 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  2602                                  
  2603                                  ; (MSDOS 3.3) NOTE:
  2604                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  2605                                  ; have to be made to read the diskette. Consequently a large head settle
  2606                                  ; time was always used in the I/O operations. To get around this problem
  2607                                  ; we need to continually adjust the head settle time. The following
  2608                                  ; algorithm is used:
  2609                                  ;
  2610                                  ;   Get the current head settle value.
  2611                                  ;   If it is 1, then
  2612                                  ;	set slow = 15
  2613                                  ;   else
  2614                                  ;	set slow = value
  2615                                  ;   ...
  2616                                  ;   if we are seeking and writing then
  2617                                  ;	use slow
  2618                                  ;   else
  2619                                  ;	use fast
  2620                                  ;   ...
  2621                                  ;   restore current head settle value
  2622                                  
  2623 00000126 00                      motorstartup:	db 0			; value from table
  2624 00000127 00                      settlecurrent:	db 0			; value from table
  2625 00000128 00                      settleslow:	db 0			; slow settle value
  2626 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  2627 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  2628 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  2629 0000012C 09                      eot:		db 9			
  2630 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table
  2631 00000131 00                      cursec:		db 0			; current sector
  2632 00000132 00                      curhd:		db 0			; current head
  2633 00000133 0000                    curtrk:		dw 0			; current track
  2634 00000135 0000                    spsav:		dw 0			; save the stack pointer
  2635 00000137 08                      formt_eot:	db 8			; eot used for format
  2636 00000138 00                      hdnum:		db 0			; head number
  2637 00000139 0000                    trknum:		dw 0			; track	being manipulated
  2638 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  2639                                  
  2640                                  ;-----------------------------------------------------------------------------
  2641                                  
  2642                                  ; disk errors returned from the IBM rom
  2643                                  
  2644 0000013C CC                      errin:		db 0CCh			; write fault (hard disk)
  2645 0000013D 80                      		db 80h			; write fault (hard disk)
  2646 0000013E 40                      		db 40h			; seek failed
  2647 0000013F 10                      		db 10h			; uncorrectable CRC or ECC error on read
  2648 00000140 08                      		db 8			; dma overrun
  2649 00000141 06                      		db 6			; disk changed (floppy)
  2650 00000142 04                      		db 4			; sector not found/read error
  2651 00000143 03                      		db 3			; disk write-protected
  2652                                  		; 02/10/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
  2653 00000144 01                      		db 1			; invalid function in AH or invalid parameter
  2654 00000145 B2                      		db 0B2h			; volume not removable	
  2655                                  		;
  2656 00000146 00                      lsterr:		db 0			; all other errors
  2657                                  
  2658                                  ; returned error codes corresponding to above
  2659                                  
  2660 00000147 0A                      errout:		db 10			; write	fault error
  2661 00000148 02                      		db 2			; no response (timeout)
  2662 00000149 06                      		db 6			; seek failure
  2663 0000014A 04                      		db 4			; bad crc
  2664 0000014B 04                      		db 4			; dma overrun
  2665 0000014C 0F                      		db 15			; invalid media	change
  2666 0000014D 08                      		db 8			; sector not found
  2667 0000014E 00                      		db 0			; write	attempt	to write-protect disk
  2668                                  		; 02/10/2023
  2669 0000014F 03                      		db 3			; unknown command error
  2670 00000150 03                      		db 3			; unknown command error
  2671                                  		;
  2672 00000151 0C                      		db 12			; general error
  2673                                  
  2674                                  ;-----------------------------------------------------------------------------
  2675                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0152h
  2676                                  
  2677                                  ; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  2678                                  %if 1
  2679                                  disksector:	;times 174 db 0
  2680                                  NUM174 equ 512-$
  2681 00000152 00<rep AEh>             		times NUM174 db 0
  2682                                  JB_sign	:	;dw 424Ah		; 'BJ' (nasm) ; 'JB' (masm)
  2683 00000200 4A                      		dec	dx
  2684 00000201 42                      		inc	dx	
  2685 00000202 E9FBFD                  		jmp	BData_start	; db 0E9h, 0FBh, 0FDh
  2686                                  
  2687 00000205 402349424D3A31322E-     IBMBIOCOM$:	db '@#IBM:12.01.2003.build_1.32#@ IBMBIO.COM(USA)',0
  2687 0000020E 30312E323030332E62-
  2687 00000217 75696C645F312E3332-
  2687 00000220 23402049424D42494F-
  2687 00000229 2E434F4D2855534129-
  2687 00000232 00                 
  2688                                  		
  2689                                  		;times 287 db 0
  2690 00000233 00<rep 11Fh>            		times (disksector+512-$) db 0  ; 287
  2691                                  %endif
  2692                                  
  2693                                  ;-----------------------------------------------------------------------------
  2694                                  
  2695                                  ; 30/12/2018 - Retro DOS v4.0
  2696                                  
  2697                                  ; read in boot sector here, read done in readboot.
  2698                                  ; also read sector for dma check for hard disk.
  2699                                  ;
  2700                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  2701                                  ; in them which causes the byte after the buffer to be trashed
  2702                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  2703                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  2704                                  ; makes that system more-or-less work.
  2705                                  
  2706                                  ; 02/10/2023
  2707                                  %if 0
  2708                                  
  2709                                  disksector:	;db 512 dup(0)		; read in boot sector here
  2710                                  		; 19/10/2022
  2711                                  		times 512 db 0
  2712                                  %endif
  2713                                  
  2714                                  ;-----------------------------------------------------------------------------
  2715                                  
  2716                                  ; 02/10/2023 - Retro DOS v5.0
  2717                                  ; 30/12/2018 - Retro DOS v4.0
  2718                                  ;-----------------------------------------------------------------------------
  2719                                  ; 25/05/2018 (04/04/2018)
  2720                                  ;*****************************************************************************
  2721                                  ;	"bds" contains information for each drive in the system.
  2722                                  ;	various values are patched whenever actions are performed.
  2723                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  2724                                  ;	the bpb has not been filled. link also set to -1 to signify end
  2725                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  2726                                  ;	that the parameters have not been set.
  2727                                  
  2728                                  bds1:		;dw offset bds2
  2729 00000352 [E803]                  		dw bds2	; 19/10/2022
  2730 00000354 7000                    		dw 70h			; dword	link to	next structure
  2731 00000356 00                      		db 0			; int 13h drive	number
  2732 00000357 00                      		db 0			; logical drive	letter
  2733 00000358 0002                    fdrive1:	dw 512			
  2734                                  					; physical sector size in bytes
  2735 0000035A FF                      		db 0FFh			; sectors/allocation unit
  2736 0000035B 0100                    		dw 1			; reserved sectors for dos
  2737 0000035D 02                      		db 2			; no of	file allocation	tables
  2738 0000035E 4000                    		dw 64			; number of root directory entries
  2739 00000360 6801                    		dw 360			; number sectors (at 512 bytes each)
  2740 00000362 00                      		db 0			; media	descriptor, initially 0
  2741 00000363 0200                    		dw 2			; number of fat	sectors
  2742 00000365 0900                    		dw 9			; sector limit (sectors	per track)
  2743 00000367 0100                    		dw 1			; head limit (number of	heads -	1)
  2744                                  		;
  2745                                  		; 02/10/2023
  2746                                  		; MSDOS 5.0-6.22 (& PCDOS 7.0)
  2747                                  		;dw 0			; hidden sector	count (low word)
  2748                                  		;dw 0			; hidden sector	(high)
  2749                                  		;dw 0			; number sectors (low)
  2750                                  		;dw 0			; number sectors (high)
  2751                                  		;db 0			; true => large	fats
  2752                                  		; 02/10/2023
  2753                                  		; PCDOS 7.1 (FAT32 support)
  2754 00000369 00000000                		dd 0			; hidden sector count
  2755 0000036D 00000000                		dd 0			; number of sectors (32 bit)
  2756 00000371 00000000                		dd 0			; BPB_FATSz32 ; FAT32 FAT size in sectors ; 4 bytes
  2757                                  					;   BS_DrvNum ; FAT INT 13h drive number ; 1 byte
  2758                                  					;   BS_Reserved1 ; FAT reserved byte = 0 ; 1 byte
  2759                                  					;   BS_BootSig ; FAT Extended boot signature = 29h ; 1 byte
  2760                                  					;   BS_VolID ; FAT Volume serial number ; 4 bytes
  2761 00000375 0000                    		dw 0			; BPB_ExtFlags ; FAT32 Extended Flags
  2762 00000377 0000                    		dw 0			; BPB_FSVer ; FAT32 fs/volume version
  2763 00000379 00000000                		dd 0			; BPB_RootClus ; FAT32 root directory's first cluster number
  2764 0000037D FFFF                    		dw 0FFFFh		; BPB_FSInfo ; FAT32 FSINFO sector number = -1 (initial)
  2765 0000037F FFFF                    		dw 0FFFFh		; BPB_BkBootSec ; FAT32 backup boot sector number = -1 (initial)
  2766 00000381 00<rep Ch>              		times 12 db 0		; BPB_Reserved  ; FAT32 reserved field = 0, 12 bytes
  2767 0000038D 00                      		db 0			; true => large	fats
  2768                                  		;
  2769 0000038E 0000                    		dw 0			; open ref. count
  2770 00000390 03                      		db 3			; form factor
  2771 00000391 2000                    		dw 20h			; various flags
  2772 00000393 2800                    		dw 40			; number of cylinders
  2773 00000395 0002                    recommended_bps: dw 512			; recommended bps for this drive
  2774 00000397 01                      		db 1
  2775 00000398 0100                    		dw 1
  2776 0000039A 02                      		db 2
  2777 0000039B E000                    		dw 224			; number of root directory entries
  2778 0000039D 6801                    		dw 360
  2779 0000039F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  2780 000003A0 0200                    		dw 2
  2781 000003A2 0900                    		dw 9
  2782 000003A4 0200                    		dw 2
  2783                                  		;
  2784                                  		; 02/10/2023
  2785                                  		;dw 0
  2786                                  		;dw 0
  2787                                  		;dw 0
  2788                                  		;dw 0
  2789                                  		;;db 6 dup(0)
  2790                                  		;times 6 db 0		; 19/10/2022
  2791 000003A6 00000000                		dd 0
  2792 000003AA 00000000                		dd 0
  2793 000003AE 00000000                		dd 0
  2794 000003B2 0000                    		dw 0
  2795 000003B4 0000                    		dw 0
  2796 000003B6 00000000                		dd 0
  2797 000003BA FFFF                    		dw 0FFFFh
  2798 000003BC FFFF                    		dw 0FFFFh	
  2799                                  		;db 12 dup(0)
  2800 000003BE 00<rep Ch>              		times 12 db 0		; 02/10/2023
  2801                                  		;
  2802 000003CA FF                      		db 0FFh			; last track accessed on this drive
  2803 000003CB FFFF                    		dw 0FFFFh		; keep these two contiguous (?)
  2804 000003CD FFFF                    		dw 0FFFFh
  2805 000003CF 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  2805 000003D8 202000             
  2806 000003DB 00000000                		dd 0			; current volume serial	from boot record
  2807 000003DF 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  2808                                  ; ----
  2809                                  
  2810                                  ; 02/10/2023
  2811                                  ; PCDOS 7.1
  2812                                  %if 1
  2813                                  
  2814                                  bds2:		; 02/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  2815 000003E8 FFFF                    		dw 0FFFFh ; -1
  2816 000003EA 7000                    		dw 70h
  2817 000003EC 00                      		db 0
  2818 000003ED 00                      		db 0
  2819 000003EE 0002                    fdrive2:	dw 512
  2820 000003F0 FF                      		db 0FFh
  2821 000003F1 0100                    		dw 1
  2822 000003F3 02                      		db 2
  2823 000003F4 4000                    		dw 64
  2824 000003F6 6801                    		dw 360
  2825 000003F8 00                      		db 0
  2826 000003F9 0200                    		dw 2
  2827 000003FB 0900                    		dw 9
  2828 000003FD 0100                    		dw 1
  2829 000003FF 00000000<rep 5h>        		times 5 dd 0
  2830 00000413 FFFFFFFF                		dd 0FFFFFFFFh
  2831 00000417 00000000<rep 3h>        		times 3 dd 0
  2832 00000423 00                      		db 0
  2833 00000424 0000                    		dw 0
  2834 00000426 03                      		db 3
  2835 00000427 2000                    		dw 20h
  2836 00000429 2800                    		dw 40
  2837                                  recbpb2:
  2838 0000042B 0002                    		dw 512
  2839 0000042D 01                                      db 1
  2840 0000042E 0100                                    dw 1
  2841 00000430 02                                      db 2
  2842 00000431 E000                                    dw 224
  2843 00000433 6801                                    dw 360
  2844 00000435 F0                                      db 0F0h
  2845 00000436 0200                                    dw 2
  2846 00000438 0900                                    dw 9
  2847 0000043A 0200                                    dw 2
  2848 0000043C 00000000<rep 5h>        		times 5 dd 0
  2849 00000450 FFFFFFFF                		dd 0FFFFFFFFh
  2850 00000454 00000000<rep 3h>                        times 3 dd 0
  2851 00000460 FF                                      db 0FFh
  2852 00000461 FFFFFFFF                                dd 0FFFFFFFFh
  2853 00000465 4E4F204E414D452020-                     db 'NO NAME    ',0
  2853 0000046E 202000             
  2854 00000471 00000000                                dd 0
  2855 00000475 464154313220202000                      db 'FAT12   ',0
  2856                                  %endif
  2857                                  
  2858                                  ; ----
  2859                                  
  2860                                  ; 02/10/2023
  2861                                  ; MSDOS 5.0 - 6.22 (& PCDOS 7.0)
  2862                                  %if 0
  2863                                  
  2864                                  bds2:		dw bds3		
  2865                                  		dw 70h
  2866                                  		db 0
  2867                                  		db 0
  2868                                  fdrive2:	dw 512			
  2869                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  2870                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  2871                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  2872                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  2873                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  2874                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  2875                                  		db 31h,	32h, 20h, 20h, 20h, 0
  2876                                  
  2877                                  bds3:		dw bds4		
  2878                                  		dw 70h
  2879                                  		db 0
  2880                                  		db 0
  2881                                  fdrive3:	dw 512			
  2882                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  2883                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  2884                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  2885                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  2886                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  2887                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  2888                                  		db 31h,	32h, 20h, 20h, 20h, 0
  2889                                  ; ----
  2890                                  
  2891                                  bds4:		dw 0FFFFh		
  2892                                  		dw 70h
  2893                                  		db 0
  2894                                  		db 0
  2895                                  fdrive4:	dw 512			
  2896                                  		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  2897                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  2898                                  		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  2899                                  		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  2900                                  		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  2901                                  		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  2902                                  		db 31h,	32h, 20h, 20h, 20h, 0
  2903                                  
  2904                                  ;-----------------------------------------------------------------------------
  2905                                  
  2906                                  sm92:		db 3			; .spf			
  2907                                  		db 9			; .spt
  2908                                  		db 112	; 70h		; .cdire
  2909                                  		dw 1440	; 2*9*80	; .csec
  2910                                  		db 2			; .spau
  2911                                  		db 2			; .chead
  2912                                  
  2913                                  %endif
  2914                                  
  2915 0000047E 00                      keyrd_func:	db 0			
  2916 0000047F 01                      keysts_func:	db 1			
  2917 00000480 00                      printdev:	db 0			; printer device index
  2918                                  
  2919                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  2920 00000481 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  2921                                  
  2922 00000489 0000                    daycnt:		dw 0			
  2923 0000048B 00                      t_switch:	db 0			; flag for updating daycnt
  2924 0000048C 00                      havecmosclock:	db 0			
  2925 0000048D 13                      base_century:	db 19			
  2926 0000048E 50                      base_year:	db 80			
  2927                                  
  2928 0000048F 1F                      month_tab:	db 31
  2929 00000490 1C                      february:	db 28 ; 08/08/2023
  2930 00000491 1F1E1F1E1F1F1E1F1E-     		db 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
  2930 0000049A 1F                 
  2931                                  
  2932                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  2933                                  %if 0  
  2934                                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  2935                                  		dw 70h ; 17/10/2022	
  2936                                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  2937                                  		dw 70h ; 17/10/2022
  2938                                  %endif
  2939                                  
  2940 0000049B 00                      set_id_flag:	db 0			; flag for getbp routine
  2941                                  
  2942                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  2943                                  ;fat_12_id:	db 'FAT12   ',0         
  2944                                  ;fat_16_id:	db 'FAT16   ',0         
  2945                                  ;vol_no_name:	db 'NO NAME    ',0      
  2946                                  ;temp_h:	dw 0			; temporary for	32 bit calculation
  2947                                  
  2948 0000049C 0000                    start_sec_h:	dw 0			; starting sector number high word
  2949 0000049E 0000                    saved_word:	dw 0			; tempory saving place for a word
  2950 000004A0 0000                    multrk_flag:	dw 0			
  2951 000004A2 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  2952 000004A3 0000                    vretry_cnt:	dw 0			
  2953 000004A5 0000                    soft_ecc_cnt:	dw 0			
  2954 000004A7 00                      multitrk_format_flag: db 0		; multi	track format request flag
  2955 000004A8 0000                    xfer_seg:	dw 0			; temp for transfer segment
  2956                                  
  2957                                  ; variables for msdioctl.asm module
  2958                                  
  2959                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  2960                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  2961                                  ;	n	bytes per sector
  2962                                  ;      ---	----------------
  2963                                  ;	0	      128
  2964                                  ;	1	      256
  2965                                  ;	2	      512
  2966                                  ;	3	     1024
  2967                                  
  2968                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  2969                                  ;					; we support (was 40 in dos 3.2)
  2970                                  
  2971 000004AA 2400                    sectorspertrack: dw 36			
  2972 000004AC 00000102                tracktable:	db 0, 0, 1, 2		
  2973 000004B0 00000202                		db 0, 0, 2, 2
  2974 000004B4 00000302                		db 0, 0, 3, 2
  2975 000004B8 00000402                		db 0, 0, 4, 2
  2976 000004BC 00000502                		db 0, 0, 5, 2
  2977 000004C0 00000602                		db 0, 0, 6, 2
  2978 000004C4 00000702                		db 0, 0, 7, 2
  2979 000004C8 00000802                		db 0, 0, 8, 2
  2980 000004CC 00000902                		db 0, 0, 9, 2
  2981 000004D0 00000A02                		db 0, 0, 10, 2
  2982 000004D4 00000B02                		db 0, 0, 11, 2
  2983 000004D8 00000C02                		db 0, 0, 12, 2
  2984 000004DC 00000D02                		db 0, 0, 13, 2
  2985 000004E0 00000E02                		db 0, 0, 14, 2
  2986 000004E4 00000F02                		db 0, 0, 15, 2
  2987 000004E8 00001002                		db 0, 0, 16, 2
  2988 000004EC 00001102                		db 0, 0, 17, 2
  2989 000004F0 00001202                		db 0, 0, 18, 2
  2990 000004F4 00001302                		db 0, 0, 19, 2
  2991 000004F8 00001402                		db 0, 0, 20, 2
  2992 000004FC 00001502                		db 0, 0, 21, 2
  2993 00000500 00001602                		db 0, 0, 22, 2
  2994 00000504 00001702                		db 0, 0, 23, 2
  2995 00000508 00001802                		db 0, 0, 24, 2
  2996 0000050C 00001902                		db 0, 0, 25, 2
  2997 00000510 00001A02                		db 0, 0, 26, 2
  2998 00000514 00001B02                		db 0, 0, 27, 2
  2999 00000518 00001C02                		db 0, 0, 28, 2
  3000 0000051C 00001D02                		db 0, 0, 29, 2
  3001 00000520 00001E02                		db 0, 0, 30, 2
  3002 00000524 00001F02                		db 0, 0, 31, 2
  3003 00000528 00002002                		db 0, 0, 32, 2
  3004 0000052C 00002102                		db 0, 0, 33, 2
  3005 00000530 00002202                		db 0, 0, 34, 2
  3006 00000534 00002302                		db 0, 0, 35, 2
  3007 00000538 00002402                		db 0, 0, 36, 2
  3008                                  
  3009                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  3010                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:053Ch
  3011                                  
  3012                                  		;times 108 db 0		; 19/10/2022
  3013                                  		;;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  3014                                  					; times	((4*63)	- 144) db 0
  3015                                  dskdrvs:	
  3016 0000053C [5803]                  		dw fdrive1
  3017 0000053E [EE03]                  		dw fdrive2 
  3018                                  	
  3019                                  		;dw 52 dup(0)
  3020 00000540 00<rep 68h>             		times 104 db 0		; times (((4*63)-144)-4) db 0
  3021                                  					; 4*max_sectors_curr_sup-($-tracktable)-4 dup (0)			
  3022                                  
  3023                                  ;-----------------------------------------------------------------------------
  3024                                  
  3025                                  ; this is a real ugly place to put this
  3026                                  ; it should really go in the bds
  3027                                  
  3028 000005A8 00                      mediatype:	db 0			
  3029 000005A9 00                      media_set_for_format: db 0		; 1 if we have done an int 13h set media
  3030                                  					; type for format call
  3031 000005AA 00                      had_format_error: db 0			; 1 if the previous format operation
  3032                                  					; failed.
  3033                                  
  3034                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  3035                                  ; the one passed by "new roms" before we perform a format operation. the old
  3036                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  3037                                  ; this table does not contain the previously saved dpt.
  3038                                  		
  3039 000005AB FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  3040 000005AF FF                      model_byte:	db 0FFh			; model	byte set at init time
  3041 000005B0 00                      secondary_model_byte: db 0
  3042                                  		
  3043 000005B1 00                      int19sem:	db 0			; indicate that all int 19h
  3044                                  					; initialization is complete
  3045                                  		
  3046                                  ;; we assume the following remain contiguous and their order doesn't change
  3047                                  ;i19_lst:
  3048                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  3049                                  ;	public	int19old&aa
  3050                                  ;		db	aa&h	; store the number as a byte
  3051                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  3052                                  ;	endm
  3053                                  
  3054                                  ; 21/10/2022
  3055                                  
  3056 000005B2 02                      i19_lst:	db 2			
  3057                                  					; Int19old&aa
  3058 000005B3 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  3059 000005B7 08                      		db 8
  3060 000005B8 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  3061 000005BC 09                      		db 9
  3062 000005BD FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  3063 000005C1 0A                      		db 0Ah
  3064 000005C2 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  3065 000005C6 0B                      		db 0Bh
  3066 000005C7 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  3067 000005CB 0C                      		db 0Ch
  3068 000005CC FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  3069 000005D0 0D                      		db 0Dh
  3070 000005D1 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  3071 000005D5 0E                      		db 0Eh
  3072 000005D6 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  3073 000005DA 70                      		db 70h
  3074 000005DB FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  3075 000005DF 72                      		db 72h
  3076 000005E0 FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  3077 000005E4 73                      		db 73h
  3078 000005E5 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  3079 000005E9 74                      		db 74h
  3080 000005EA FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  3081 000005EE 76                      		db 76h
  3082 000005EF FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  3083 000005F3 77                      		db 77h
  3084 000005F4 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  3085                                  
  3086                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  3087                                  
  3088                                  ;-----------------------------------------------------------------------------
  3089                                  
  3090                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  3091                                  ; 
  3092                                  ;dskdrvs:	dw fdrive1	
  3093                                  ;		dw fdrive2
  3094                                  ;		dw fdrive3
  3095                                  ;		dw fdrive4
  3096                                  ;
  3097                                  ;;M011 -- made all hard drive stuff variable
  3098                                  ;		;dw 22 dup(0)		; up to	26 drives for mini disks
  3099                                  ;		times 22 dw 0	; 19/10/2022
  3100                                  
  3101                                  ;-----------------------------------------------------------------------------
  3102                                  
  3103                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  3104                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  3105                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  3106                                  
  3107                                  ;variables for dynamic relocatable modules
  3108                                  ;these should be stay resident.
  3109                                  
  3110 000005F8 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  3111                                  					; for p12 machine
  3112                                  
  3113                                  ; data structures for real-time date and time
  3114                                  			
  3115 000005FC 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  3116                                  
  3117                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3118                                  %if 0
  3119                                  month_table:	dw 0			; january
  3120                                  		dw 31			; february
  3121                                  		dw 59
  3122                                  		dw 90
  3123                                  		dw 120
  3124                                  		dw 151
  3125                                  		dw 181
  3126                                  		dw 212
  3127                                  		dw 243
  3128                                  		dw 273
  3129                                  		dw 304
  3130                                  		dw 334			; december
  3131                                  %endif
  3132                                  
  3133 00000600 0000                    daycnt2:	dw 0			
  3134                                  ; 08/08/2023
  3135                                  ;feb29:		db 0			; february 29 in a leap	year flag
  3136                                  
  3137                                  ;-----------------------------------------------------------------------------
  3138                                  ;
  3139                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  3140                                  ; by Erdogan Tan (Istanbul) ! free source code !
  3141                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  3142                                  
  3143                                  ; ----------------------------------------------------------------------------
  3144                                  
  3145                                  ;************************************************************************
  3146                                  ;*									*
  3147                                  ;*	Entry points into Bios_Code routines. The segment values	*
  3148                                  ;*	  are plugged in by seg_reinit.					*
  3149                                  ;*									*
  3150                                  ;************************************************************************
  3151                                  
  3152                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  3153                                  ; BIOSCODE_SEGMENT equ 2C7h
  3154                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  3155                                  
  3156                                  ; 01/10/2022 - Erdogan Tan
  3157                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  3158                                  ;  addresses, they will be changed to table labels later)
  3159                                  
  3160                                  ; 09/12/2022
  3161                                  %if 0
  3162                                  cdev:		dw 43h,	2C7h		; chardev_entry
  3163                                  					; at 2C7h:43h =	70h:25B3h
  3164                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  3165                                  					; at 2C7h:396h = 70h:2906h
  3166                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  3167                                  					; at 2C7h:1302h	= 70h:3872h
  3168                                  i13x:		dw 154Bh, 2C7h		; i13z
  3169                                  					; at 2C7h:154Bh	= 70h:3ABBh
  3170                                  %endif
  3171                                  
  3172                                  ; 30/12/2022
  3173                                  ; (IOSYSCODESEG is 2CCh for MSDOS 6.21 IO.SYS)
  3174                                  
  3175                                  ; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  3176                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0602h
  3177                                  ; (IOSYSCODESEG is 364h for PCDOS 7.1 IBMBIO.COM)
  3178                                  
  3179                                  ; 09/12/2022
  3180 00000602 [4700]2D03              cdev:		dw chardev_entry, IOSYSCODESEG
  3181 00000606 [A003]2D03              ttticks:	dw time_to_ticks, IOSYSCODESEG
  3182                                  ; 07/08/2023
  3183                                  ;bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  3184 0000060A [5D18]2D03              i13x:		dw i13z, IOSYSCODESEG
  3185                                  
  3186                                  end_BC_entries:	; 15/10/2022
  3187                                  
  3188                                  ;************************************************************************
  3189                                  ;*									*
  3190                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  3191                                  ;*									*
  3192                                  ;************************************************************************
  3193                                  
  3194                                  cbreak:					
  3195 0000060E 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  3196                                  					; indicate break key set
  3197                                  intret:					
  3198 00000614 CF                      		iret
  3199                                  
  3200                                  ; =============== S U B	R O U T	I N E ========================================
  3201                                  
  3202                                  
  3203                                  ;************************************************************************
  3204                                  ;*									*
  3205                                  ;*	strategy - store es:bx (device driver request packet)		*
  3206                                  ;*		     away at [ptrsav] for next driver function call	*
  3207                                  ;*									*
  3208                                  ;************************************************************************
  3209                                  
  3210                                  strategy:	; proc far		
  3211 00000615 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  3212                                  					; away at [ptrsav] for next driver function call
  3213 0000061A 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  3214 0000061F CB                      		retf
  3215                                  
  3216                                  ; ----------------------------------------------------------------------------
  3217                                  
  3218                                  ;************************************************************************
  3219                                  ;*									*
  3220                                  ;*	device driver entry points. these are the initial		*
  3221                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  3222                                  ;*	  in the case of our resident drivers, they'll just		*
  3223                                  ;*	  stick a fake return address on the stack which		*
  3224                                  ;*	  points to dispatch tables and possibly some unit		*
  3225                                  ;*	  numbers, and then call through a common entry point		*
  3226                                  ;*	  which can take care of a20 switching				*
  3227                                  ;*									*
  3228                                  ;************************************************************************
  3229                                  
  3230                                  ; 01/10/2022 - Erdogan Tan
  3231                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  3232                                  ;  addresses, they will be changed to table labels later)
  3233                                  
  3234                                  ; 09/12/2022
  3235                                  
  3236                                  ; 02/10/2023 - Retro DOS v5.0
  3237                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:0620h, BIOSCODE = 0364h)
  3238                                  
  3239                                  con_entry:				
  3240 00000620 E84000                  		call	cdev_entry
  3241                                  ; ----------------------------------------------------------------------------
  3242                                  		;dw 0E4h		; con_table
  3243 00000623 [E400]                  		dw con_table		; 364h:0E4h (PCDOS 7.1)
  3244                                  					; 2C7h:0E4h = 70h:2654h
  3245                                  ; ----------------------------------------------------------------------------
  3246                                  
  3247                                  prn0_entry:				
  3248 00000625 E83B00                  		call	cdev_entry
  3249                                  ; ----------------------------------------------------------------------------
  3250                                  		;dw 0FBh		; prn_table
  3251 00000628 [FB00]                  		dw prn_table
  3252                                  					; 2C7h:0FBh = 70h:266Bh
  3253 0000062A 0000                    		db 0, 0
  3254                                  ; ----------------------------------------------------------------------------
  3255                                  
  3256                                  prn1_entry:				
  3257 0000062C E83400                  		call	cdev_entry
  3258                                  ; ----------------------------------------------------------------------------
  3259                                  		;dw 0FBh		; prn_table
  3260 0000062F [FB00]                  		dw prn_table
  3261                                  					; 2C7h:0FBh = 70h:266Bh
  3262 00000631 0001                    		db 0, 1
  3263                                  ; ----------------------------------------------------------------------------
  3264                                  
  3265                                  prn2_entry:				
  3266 00000633 E82D00                  		call	cdev_entry
  3267                                  ; ----------------------------------------------------------------------------
  3268                                  		;dw 0FBh		; prn_table
  3269 00000636 [FB00]                  		dw prn_table
  3270                                  					; 2C7h:0FBh = 70h:266Bh
  3271 00000638 0102                    		db 1, 2
  3272                                  ; ----------------------------------------------------------------------------
  3273                                  
  3274                                  prn3_entry:				
  3275 0000063A E82600                  		call	cdev_entry
  3276                                  ; ----------------------------------------------------------------------------
  3277                                  		;dw 0FBh		; prn_table
  3278 0000063D [FB00]                  		dw prn_table
  3279                                  					; 2C7h:0FBh = 70h:266Bh
  3280 0000063F 0203                    		db 2, 3
  3281                                  ; ----------------------------------------------------------------------------
  3282                                  
  3283                                  aux0_entry:				
  3284 00000641 E81F00                  		call	cdev_entry
  3285                                  ; ----------------------------------------------------------------------------
  3286                                  		;dw 130h		; aux_table
  3287 00000644 [3001]                  		dw aux_table
  3288                                  					; 2C7h:130h = 70h:26A0h
  3289 00000646 00                      		db 0
  3290                                  ; ----------------------------------------------------------------------------
  3291                                  
  3292                                  aux1_entry:				
  3293 00000647 E81900                  		call	cdev_entry
  3294                                  ; ----------------------------------------------------------------------------
  3295                                  		;dw 130h		; aux_table
  3296 0000064A [3001]                  		dw aux_table		; 364h:130h = 70h:3070h (PCDOS 7.1)
  3297                                  					; 2C7h:130h = 70h:26A0h
  3298 0000064C 01                      		db 1
  3299                                  ; ----------------------------------------------------------------------------
  3300                                  
  3301                                  aux2_entry:				
  3302 0000064D E81300                  		call	cdev_entry
  3303                                  ; ----------------------------------------------------------------------------
  3304                                  		;dw 130h		; aux_table
  3305 00000650 [3001]                  		dw aux_table
  3306                                  					; 2C7h:130h = 70h:26A0h
  3307 00000652 02                      		db 2
  3308                                  ; ----------------------------------------------------------------------------
  3309                                  
  3310                                  aux3_entry:				
  3311 00000653 E80D00                  		call	cdev_entry
  3312                                  ; ----------------------------------------------------------------------------
  3313                                  		;dw 130h		; aux_table
  3314 00000656 [3001]                  		dw aux_table
  3315                                  					; 2C7h:130h = 70h:26A0h
  3316 00000658 03                      		db 3
  3317                                  ; ----------------------------------------------------------------------------
  3318                                  
  3319                                  tim_entry:				
  3320 00000659 E80700                  		call	cdev_entry
  3321                                  ; ----------------------------------------------------------------------------
  3322                                  		;dw 147h		; tim_table
  3323 0000065C [4701]                  		dw tim_table		; 364h:147h = 70h:3087h (PCDOS 7.1)
  3324                                  					; 2C7h:147h = 70h:26B7h
  3325                                  ; ----------------------------------------------------------------------------
  3326                                  
  3327                                  ; 15/10/2022
  3328                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  3329                                  ; 09/12/2022
  3330                                  DSKTBL equ dsktbl
  3331                                  
  3332                                  dsk_entry:				
  3333 0000065E E80200                  		call	cdev_entry
  3334                                  ; ----------------------------------------------------------------------------
  3335                                  		;dw 4A2h		; dsktbl
  3336 00000661 [6F05]                  		dw DSKTBL		; 09/12/2022
  3337                                  					; 2C7h:4A2h = 70h:2A12h
  3338                                  					; 02/10/2023 (PCDOS 7.1 IBMBIO.COM)
  3339                                  					; 364h:579h = 70h:34B9h
  3340                                  
  3341                                  ; =============== S U B	R O U T	I N E ========================================
  3342                                  
  3343                                  ;************************************************************************
  3344                                  ;*									*
  3345                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  3346                                  ;*	This code assumes that if Segment of Device request packet is	*
  3347                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  3348                                  ;*	A20 is already on.						*
  3349                                  ;*									*
  3350                                  ;************************************************************************
  3351                                  
  3352                                  cdev_entry:	; proc near		
  3353 00000663 2E803E[0D00]00          		cmp	byte [cs:inHMA],0
  3354 00000669 740D                    		jz	short ce_enter_codeseg
  3355                                  				; optimized for DOS in HMA
  3356 0000066B 50                      		push	ax
  3357 0000066C 2EA1[0300]              		mov	ax,[cs:DosDataSg]
  3358 00000670 2E3906[1400]            		cmp	[cs:ptrsav+2],ax
  3359 00000675 58                      		pop	ax
  3360 00000676 7505                    		jnz	short not_from_dos
  3361                                  				; jump is coded this way to fall thru
  3362                                  				; in 99.99% of the cases
  3363                                  ce_enter_codeseg:
  3364 00000678 2EFF2E[0206]            		jmp	far [cs:cdev]			
  3365                                  		;jmp	dword ptr cs:cdev
  3366                                  ;-----------------------------------------------------------------------------
  3367                                  
  3368                                  not_from_dos:				
  3369 0000067D E8AA00                  		call	EnsureA20On
  3370 00000680 EBF6                    		jmp	short ce_enter_codeseg
  3371                                  
  3372                                  ;************************************************************************
  3373                                  ;*									*
  3374                                  ;*	outchr - this is our int 29h handler. it writes the		*
  3375                                  ;*	   character in al on the display using int 10h ttywrite	*
  3376                                  ;*									*
  3377                                  ;************************************************************************
  3378                                  
  3379                                  	; 02/10/2023
  3380                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0682h
  3381                                  outchr:					
  3382 00000682 50                      		push	ax		; int 29h handler
  3383 00000683 56                      		push	si
  3384 00000684 57                      		push	di
  3385 00000685 55                      		push	bp
  3386 00000686 53                      		push	bx
  3387                                  		;;;
  3388                                  		; 02/10/2023 - Retro DOS v5.0 (Modified POCDOS 7.1) 
  3389                                  		;mov	ah,0Eh
  3390                                  		;mov	bx,7
  3391                                  		;int	10h	; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  3392                                  		;		; AL = character, BH = display page (alpha modes)
  3393                                  		;		; BL = foreground color	(graphics modes)
  3394                                  		; 02/10/2023
  3395                                  		;push	ds ; *
  3396 00000687 31DB                    		xor	bx,bx ; 0
  3397 00000689 2E381E[1208]            		cmp	[cs:IsWin386], bl ; (are we in) Windows ?
  3398 0000068E 7510                    		jnz	short win_outchr ; *
  3399 00000690 1E                      		push	ds ; *
  3400 00000691 8EDB                    		mov	ds,bx ; 0
  3401 00000693 B40E                    		mov	ah,0Eh
  3402 00000695 B307                    		mov	bl,7
  3403                                  		;jnz	short win_outchr ; Running on Windows
  3404 00000697 9C                      		pushf			; far call (simulate INT)	
  3405 00000698 FA                      		cli	; disable interrupts
  3406 00000699 FF1E4000                		call	far [40h]	; far call to INT 10h vector
  3407 0000069D 1F                      		pop	ds ; *
  3408 0000069E EB02                    		jmp	short outchr_ok
  3409                                  win_outchr:
  3410 000006A0 CD10                    		int	10h
  3411                                  outchr_ok:
  3412                                  		;pop	ds ; *
  3413                                  		;;;
  3414 000006A2 5B                      		pop	bx
  3415 000006A3 5D                      		pop	bp
  3416 000006A4 5F                      		pop	di
  3417 000006A5 5E                      		pop	si
  3418 000006A6 58                      		pop	ax
  3419 000006A7 CF                      		iret
  3420                                  
  3421                                  ;-----------------------------------------------------------------------------
  3422                                  
  3423                                  	; 02/10/2023 - Retro DOS v5.0
  3424                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06A8h
  3425                                  
  3426 000006A8 50                      		db 50h ; P		; 'PCI' signature
  3427 000006A9 43                      		db 43h ; C
  3428 000006AA 49                      		db 49h ; I
  3429                                  
  3430 000006AB 00000000                Orig1A:		dd 0
  3431                                  
  3432                                  ; =============== S U B R O U T I N E =======================================
  3433                                  
  3434                                  	; 02/10/2023 - Retro DOS v5.0
  3435                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06AFh
  3436                                  
  3437                                  Int1A:
  3438 000006AF 80FC04                  		cmp	ah,4		; (Y2K-fix)
  3439 000006B2 7405                    		je	short int1a_1	; Read the date from the computer's real-time clock
  3440 000006B4 2EFF2E[AB06]            		jmp	far [cs:Orig1A]
  3441                                  int1a_1:
  3442 000006B9 55                      		push	bp
  3443                                  int1a_2:
  3444 000006BA 89E5                    		mov	bp,sp
  3445 000006BC 55                      		push	bp
  3446 000006BD 9C                      		pushf
  3447 000006BE 2EFF1E[AB06]            		call	far [cs:Orig1A]
  3448 000006C3 7220                    		jc	short int1a_4
  3449                                  
  3450                                  		;cmp	cl,0		; Year (BCD)
  3451                                  		; 02/10/2023
  3452 000006C5 08C9                    		or	cl,cl
  3453 000006C7 7515                    		jnz	short int1a_3
  3454 000006C9 80FD19                  		cmp	ch,19h		; Century (BCD)
  3455 000006CC 7510                    		jne	short int1a_3
  3456 000006CE B520                    		mov	ch,20h
  3457 000006D0 B405                    		mov	ah,5		; Set the date on the computer's real-time clock
  3458 000006D2 51                        		push	cx
  3459 000006D3 52                      		push	dx		; dh = Month (BCD), dl = Day (BCD)
  3460 000006D4 9C                      		pushf
  3461 000006D5 2EFF1E[AB06]            		call	far [cs:Orig1A]
  3462 000006DA 5A                      		pop	dx
  3463 000006DB 59                      		pop	cx
  3464 000006DC 7207                    		jc	short int1a_4
  3465                                  int1a_3:
  3466 000006DE 5D                      		pop	bp
  3467 000006DF 806606FE                		and	byte [bp+6],0FEh ; clear carry flag
  3468 000006E3 EB05                                    jmp	short int1a_5
  3469                                  int1a_4:
  3470 000006E5 5D                      		pop	bp
  3471 000006E6 804E0601                		or	byte [bp+6],1	; set carry flag
  3472                                  int1a_5:
  3473 000006EA 5D                      		pop	bp
  3474 000006EB CF                      		iret
  3475                                  
  3476                                  		; 02/10/2023
  3477 000006EC 90                      		nop	; (not necessary, i have used this 'nop' to locate 'block13:'
  3478                                  			; at BIOSDATA:06EDh, just as in the original PCDOS 7.1 IBMBIO.COM)
  3479                                  	
  3480                                  ;-----------------------------------------------------------------------------
  3481                                  
  3482                                  ;************************************************************************
  3483                                  ;*									*
  3484                                  ;*	block13 - our int13 hooker					*
  3485                                  ;*									*
  3486                                  ;************************************************************************
  3487                                  
  3488                                  	; 02/10/2023 - Retro DOS v5.0
  3489                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:06EDh
  3490                                  
  3491                                  block13:				
  3492 000006ED 2E803E[0D00]00          		cmp	byte [cs:inHMA],0
  3493 000006F3 7403                    		jz	short skipa20
  3494                                  		
  3495                                  		;call	IsA20Off	; A20 Off?
  3496                                  		;jnz	short skipa20
  3497                                  		;call	EnableA20	; assure a20 enabled
  3498                                  		; 02/10/2023 -  Retro DOS v5.0 (Modified PCDOS 7.1)
  3499 000006F5 E83200                  		call	EnsureA20On	; assure a20 enabled
  3500                                  skipa20:				
  3501 000006F8 2E8C1E[1C00]            		mov	[cs:i13_ds],ds	; save caller's ds for call-through
  3502 000006FD 9C                      		pushf			; fake interrupt
  3503 000006FE 2EFF1E[0A06]            		call	far [cs:i13x]
  3504                                  		;call	dword ptr cs:i13x
  3505                                  					; call through Bios_Code entry table
  3506 00000703 2E8E1E[1C00]            		mov	ds,[cs:i13_ds]
  3507 00000708 CA0200                  		retf	2
  3508                                  
  3509                                  ; =============== S U B	R O U T	I N E =======================================
  3510                                  
  3511                                  ; the int13 hook calls back here to call-through to the ROM
  3512                                  ; this is necessary because some people have extended their
  3513                                  ; ROM BIOSs to use ds as a parameter/result register and
  3514                                  ; our int13 hook relies heavily on ds to access Bios_Data
  3515                                  
  3516                                  call_orig13:	; proc far		
  3517 0000070B 8E1E[1C00]              		mov	ds,[i13_ds]	; get caller's ds register
  3518 0000070F 9C                      		pushf			; simulate an int13
  3519 00000710 2EFF1E[B400]            		call	far [cs:Orig13]
  3520                                  		;call	cs:Orig13
  3521 00000715 2E8C1E[1C00]            		mov	[cs:i13_ds],ds
  3522 0000071A 0E                      		push	cs
  3523 0000071B 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  3524                                  
  3525 0000071C 9C                      		pushf
  3526                                  		; 10/12/2022
  3527                                  		; ds = cs
  3528 0000071D 803E[0D00]00            		cmp	byte [inHMA],0	; 16/10/2022
  3529                                  		;cmp	byte [cs:inHMA],0
  3530 00000722 7403                    		jz	short corig13_popf_retf
  3531                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3532                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0725h	
  3533                                  		;call	IsA20Off
  3534                                  		;jnz	short corig13_popf_retf
  3535                                  		;call	EnableA20
  3536 00000724 E80300                  		call	EnsureA20On ; 07/08/2023
  3537                                  corig13_popf_retf:	
  3538 00000727 9D                      		popf
  3539                                  		; 20/09/2023
  3540                                  re_init:	; 07/08/2023
  3541 00000728 CB                      		retf
  3542                                  
  3543                                  		; 02/10/2023
  3544 00000729 90                      		nop	; (not necessary, i have used this 'nop' to locate 'EnsureA20On:'
  3545                                  			; at BIOSDATA:072Ah, just as in the original PCDOS 7.1 IBMBIO.COM)
  3546                                  
  3547                                  ;-----------------------------------------------------------------------------
  3548                                  
  3549                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  3550                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  3551                                  
  3552                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3553                                  ;HiMem:		dd 0FFFF0090h		
  3554                                  ;LoMem:		dd 80h
  3555                                  
  3556                                  ; ----------------------------------------------------------------------------			
  3557                                  
  3558                                  ; =============== S U B	R O U T	I N E ========================================
  3559                                  
  3560                                  
  3561                                  ;************************************************************************
  3562                                  ;*									*
  3563                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  3564                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  3565                                  ;*									*
  3566                                  ;************************************************************************
  3567                                  
  3568                                  EnsureA20On:	; proc near		
  3569 0000072A E80E00                  		call	IsA20Off
  3570                                  		;jz	short EnableA20
  3571                                  		;retn
  3572                                  		; 18/12/2022
  3573 0000072D 750B                    		jnz	short A20On_retn	
  3574                                  
  3575                                  ; =============== S U B	R O U T	I N E ========================================
  3576                                  
  3577                                  
  3578                                  EnableA20:	; proc near		
  3579 0000072F 50                      		push	ax
  3580 00000730 53                      		push	bx
  3581 00000731 B405                    		mov	ah,5	 ; local enable a20
  3582                                  		;call	cs:xms
  3583 00000733 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  3584 00000738 5B                      		pop	bx
  3585 00000739 58                      		pop	ax
  3586                                  A20On_retn:	; 18/12/2022	
  3587 0000073A C3                      		retn
  3588                                  
  3589                                  ; =============== S U B	R O U T	I N E ========================================
  3590                                  
  3591                                  
  3592                                  IsA20Off:	; proc near		
  3593 0000073B 1E                      		push	ds
  3594 0000073C 06                      		push	es
  3595 0000073D 51                      		push	cx
  3596 0000073E 56                      		push	si
  3597 0000073F 57                      		push	di
  3598                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3599                                  		;lds	si,[cs:HiMem]
  3600                                  		;les	di,[cs:LoMem]
  3601                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0740h
  3602 00000740 31FF                    		xor	di,di
  3603 00000742 8EC7                    		mov	es,di
  3604 00000744 4F                      		dec	di
  3605 00000745 BE9000                  		mov	si,90h	; 0FFFFh:0090h ; HiMem
  3606 00000748 8EDF                    		mov	ds,di
  3607 0000074A BF8000                  		mov	di,80h	; 0000h:0080h ; LoMem
  3608                                  		; 02/10/2023 - Retro DOS v5.0 IBMBIO.COM (PCDOS 7.1)
  3609                                  		; (following cpu instructions will be modified by 'SYSIN'
  3610                                  		; if the cpu is a 386/32bit, for checking A20 line faster) 
  3611                                  cpu386_cmpsd:
  3612 0000074D 90                      		nop
  3613 0000074E B90800                  		mov	cx,8
  3614 00000751 F3A7                    		repe cmpsw
  3615                                  				; zf = 0 -> A20 line is ON
  3616                                  				; zf = 1 -> A20 line is OFF
  3617 00000753 5F                      		pop	di
  3618 00000754 5E                      		pop	si
  3619 00000755 59                      		pop	cx
  3620 00000756 07                      		pop	es
  3621 00000757 1F                      		pop	ds
  3622 00000758 C3                      		retn
  3623                                  
  3624                                  ; ----------------------------------------------------------------------------
  3625                                  
  3626                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3627                                  %if 0
  3628                                  DisableA20:
  3629                                  		push	ax
  3630                                  		push	bx
  3631                                  		mov	ah,6		; local disable A20
  3632                                  		call	far [cs:xms]
  3633                                  		;call	cs:xms
  3634                                  		pop	bx
  3635                                  		pop	ax
  3636                                  		retn
  3637                                  %endif
  3638                                  
  3639                                  ; ----------------------------------------------------------------------------
  3640                                  
  3641                                  ;************************************************************************
  3642                                  ;*									*
  3643                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  3644                                  ;*	  interrupt vectors before resuming the original int19 code	*
  3645                                  ;*									*
  3646                                  ;************************************************************************
  3647                                  
  3648                                  		; 02/10/2023 - Retro DOS v5.0
  3649                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0759h
  3650                                  int19:
  3651 00000759 0E                      		push	cs
  3652 0000075A 1F                      		pop	ds
  3653                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3654                                  		;mov	es,[zeroseg]	; 16/10/2022
  3655                                  		;mov	cx,5		; NUMROMVECTORS
  3656 0000075B 31C9                    		xor	cx,cx
  3657 0000075D 8EC1                    		mov	es,cx
  3658 0000075F B105                    		mov	cl,5
  3659                                  		;mov	si,offset RomVectors
  3660 00000761 BE[0001]                		mov	si,RomVectors	; 19/10/2022
  3661                                  next_int:				
  3662 00000764 AC                      		lodsb			; get int number
  3663 00000765 98                      		cbw			; assume < 128
  3664 00000766 D1E0                    		shl	ax,1
  3665 00000768 D1E0                    		shl	ax,1		; int *	4
  3666                                  		; 07/08/2023
  3667                                  		;mov	di,ax
  3668                                  		;lodsw
  3669                                  		;stosw
  3670                                  		;lodsw
  3671                                  		;stosw			; install the saved vector
  3672                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:076Ah
  3673 0000076A 97                      		xchg	ax,di
  3674 0000076B A5                      		movsw
  3675 0000076C A5                      		movsw
  3676 0000076D E2F5                    		loop	next_int
  3677                                  		;cmp	byte [int19sem], 0 ; 19/10/2022
  3678 0000076F 380E[B105]              		cmp	[int19sem], cl ; 0 ; 07/08/2023
  3679 00000773 7419                    		jz	short doint19
  3680 00000775 BE[B205]                		mov	si,i19_lst	; stacks code has changed these hardware interrupt vectors
  3681                                  					; stkinit in sysinit1 will initialize int19oldxx values
  3682                                  		;mov	cx,14		; num_i19
  3683                                  		; 07/08/2023
  3684 00000778 B10E                    		mov	cl,14	
  3685                                  i19_restore_loop:			
  3686 0000077A AC                      		lodsb			; get interrupt	number
  3687 0000077B 98                      		cbw			; assume < 128
  3688                                  		;mov	di,ax
  3689                                  		;lodsw			; get original vector offset
  3690                                  		;mov	bx,ax		; save it
  3691                                  		;lodsw
  3692                                  		; 07/08/2023
  3693 0000077C 97                      		xchg	ax,di
  3694 0000077D AD                      		lodsw
  3695 0000077E 93                      		xchg	ax,bx
  3696 0000077F AD                      		lodsw
  3697                                  		;cmp	bx,0FFFFh	; check	for 0ffffh (unlikely segment)
  3698 00000780 43                      		inc	bx ; 07/08/2023
  3699 00000781 7409                    		jz	short i19_restor_1 ; opt no need to check selector too
  3700                                  		;cmp	ax,0FFFFh	; opt 0ffffh is	unlikely offset
  3701                                  		;jz	short i19_restor_1
  3702 00000783 4B                      		dec	bx ; 07/08/2023
  3703 00000784 01FF                    		add	di,di
  3704 00000786 01FF                    		add	di,di
  3705 00000788 93                      		xchg	ax,bx
  3706 00000789 AB                      		stosw
  3707 0000078A 93                      		xchg	ax,bx
  3708 0000078B AB                      		stosw			; put the vector back
  3709                                  
  3710                                  i19_restor_1:				
  3711 0000078C E2EC                    		loop	i19_restore_loop
  3712                                  
  3713                                  doint19:				
  3714                                  		;cmp	byte [inHMA],0	; ; Is dos running from	HMA
  3715 0000078E 380E[0D00]              		cmp	[inHMA],cl ; 0	; 07/08/2023
  3716 00000792 7403                    		jz	short SkipVDisk
  3717 00000794 E82A00                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  3718                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  3719                                  					; the memory above 1MB during a	warm boot.
  3720                                  SkipVDisk:				
  3721 00000797 CD19                    		int	19h		; DISK BOOT
  3722                                  					; causes reboot	of disk	system
  3723                                  
  3724                                  ; =============== S U B	R O U T	I N E ========================================
  3725                                  
  3726                                  ;-----------------------------------------------------------------------------
  3727                                  ;
  3728                                  ; procedure : int15
  3729                                  ;
  3730                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  3731                                  ;		If it recognizes ctrl-alt-del and if DOS was
  3732                                  ;		is running high, it Erases the VDISK header
  3733                                  ;		present at 1MB boundary
  3734                                  ;
  3735                                  ;-----------------------------------------------------------------------------
  3736                                  
  3737                                  ; 16/10/2022
  3738                                  ;DELKEY		equ	53h
  3739                                  ;ROMDATASEG	equ	40h
  3740                                  KBFLAG		equ	17h
  3741                                  ;CTRLSTATE	equ	04h
  3742                                  ;ALTSTATE	equ	08h
  3743                                  
  3744                                  		; 02/10/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  3745                                  Int15:		
  3746                                  		;cmp	ax,4F00h+DELKEY
  3747 00000799 3D534F                  		cmp	ax,4F53h	; del keystroke ?
  3748                                  		; 02/10/2023 - Retro DOS v5.0
  3749                                  		; 07/08/2023
  3750 0000079C 7405                    		jz	short int15_1
  3751                                  		;jnz	short Old15_j	; 07/08/2023 
  3752                                  Old15_j:
  3753 0000079E 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  3754                                  
  3755                                  ; ----------------------------------------------------------------------------
  3756                                  int15_1:				
  3757 000007A3 1E                      		push	ds
  3758 000007A4 50                      		push	ax
  3759                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3760                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07A5h
  3761                                  		;mov	ax,40h		; ROMDATASEG
  3762                                  		;mov	ds,ax
  3763                                  		;;mov	al,ds:17h	; [KBFLAG]
  3764                                  		;; 16/10/2022
  3765                                  		;mov	al,[KBFLAG]
  3766 000007A5 31C0                    		xor	ax,ax
  3767 000007A7 8ED8                    		mov	ds,ax
  3768 000007A9 A01704                  		mov	al,[0417h]	; KBFLAG = 0417h (PCDOS 7.1 IBMBIO.COM)
  3769 000007AC 240C                    		and	al,0Ch		; (CTRLSTATE | ALTSTATE)
  3770 000007AE 3C0C                    		cmp	al,0Ch		; (CTRLSTATE | ALTSTATE)
  3771 000007B0 750A                    		jnz	short int15_2
  3772                                  		; 07/08/2023
  3773                                  		;push	cs
  3774                                  		;pop	ds
  3775                                  		;cmp	byte [inHMA],0	; is DOS running from HMA
  3776 000007B2 2E3826[0D00]            		cmp	byte [cs:inHMA],ah ; 0
  3777 000007B7 7403                    		jz	short int15_2
  3778 000007B9 E80500                  		call	EraseVDiskHead
  3779                                  int15_2:				
  3780 000007BC 58                      		pop	ax
  3781 000007BD 1F                      		pop	ds
  3782 000007BE F9                      		stc
  3783                                  		; 02/10/2023 - Retro DOS v5.0
  3784 000007BF EBDD                    		jmp	short Old15_j
  3785                                  
  3786                                  		; 02/10/2023
  3787                                  ;Old15_j:	; 07/08/2023
  3788                                  ;		jmp	far [cs:Old15]	; 16/10/2022
  3789                                  ;		;jmp	cs:Old15
  3790                                  	
  3791                                  ; =============== S U B	R O U T	I N E ========================================
  3792                                  
  3793                                  ;-----------------------------------------------------------------------------
  3794                                  ;
  3795                                  ; procedure : EraseVDiskHead
  3796                                  ;
  3797                                  ;		Erases the VDisk Header present in the 1MB boundary
  3798                                  ;
  3799                                  ;-----------------------------------------------------------------------------
  3800                                  
  3801                                  EraseVDiskHead:	; proc near
  3802                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3803                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07C1h
  3804                                  		;push	ax
  3805 000007C1 51                      		push	cx
  3806 000007C2 57                      		push	di
  3807 000007C3 06                      		push	es
  3808 000007C4 E863FF                  		call	EnsureA20On
  3809                                  		;mov	ax,0FFFFh	; HMA seg
  3810                                  		;mov	es,ax
  3811                                  		; 03/10/2023 - Retro DOS v5.0
  3812 000007C7 6AFF                    		push	0FFFFh
  3813 000007C9 07                      		pop	es
  3814 000007CA BF1000                  		mov	di,10h		; point	to VDISK header
  3815                                  		; 07/08/2023
  3816                                  		;mov	cx,10h		; size of vdisk	header
  3817 000007CD 89F9                    		mov	cx,di ; 16
  3818                                  		; 03/10/2023
  3819 000007CF 31C0                    		xor	ax,ax
  3820                                  		;inc	ax ; ax = 0
  3821 000007D1 F3AB                    		rep stosw		; clear	it
  3822 000007D3 07                      		pop	es
  3823 000007D4 5F                      		pop	di
  3824 000007D5 59                      		pop	cx
  3825                                  		;pop	ax ; 07/08/2023
  3826 000007D6 C3                      		retn
  3827                                  
  3828                                  ; ----------------------------------------------------------------------------
  3829                                  
  3830                                  ; 03/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
  3831                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  3832                                  
  3833                                  ; 09/12/2022
  3834                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  3835                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  3836                                  ; (followings are in sysinit segment)
  3837                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  3838                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  3839                                  ;DEVICELIST	equ 273h
  3840                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  3841                                  ;MEMORYSIZE	equ 292h	
  3842                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  3843                                  ;DEFAULTDRIVE	equ 296h
  3844                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  3845                                  ;;currentdoslocation equ 271h
  3846                                  ;CURRENTDOSLOCATION equ 271h
  3847                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  3848                                  ;SYSINITSTART	equ 267h
  3849                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  3850                                  ; 18/10/2022
  3851                                  ;toomanydrivesflag equ 3FFh 
  3852                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  3853                                  
  3854                                  ; ----------------------------------------------------------------------------
  3855                                  
  3856                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  3857                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:07D7h
  3858                                  
  3859                                  %if 1
  3860                                  
  3861 000007D7 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  3862                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  3863                                  					; (procedure in	SYSINIT	segment)
  3864                                  ; 17/10/2022
  3865 000007D9 [C20A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  3866 000007DB 0505                    		dw SYSINITSEG		; 08/08/2023
  3867                                  					; 0544h for PCDOS 7.1 IBMBIO.COM
  3868                                  					; 0473h for MSDOS 6.21 IO.SYS
  3869                                  ;SR;
  3870                                  ; A communication block has been setup between the DOS and the BIOS. All
  3871                                  ;the data starting from SysinitPresent will be part of the data block. 
  3872                                  ;Right now, this is the only data being communicated. It can be expanded 
  3873                                  ;later to add more stuff
  3874                                  
  3875 000007DD 00                      SysinitPresent:	db 0
  3876                                  
  3877                                  %endif
  3878                                  
  3879                                  ; ----------------------------------------------------------------------------
  3880                                  
  3881                                  ;************************************************************************
  3882                                  ;*									*
  3883                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  3884                                  ;*	  it returns through one of the three functions that follow.	*
  3885                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  3886                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  3887                                  ;*									*
  3888                                  ;************************************************************************
  3889                                  
  3890                                  ; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  3891                                  %if 0	; 20/09/2023
  3892                                  int_2f:		
  3893                                  		jmp	far [cs:bcode_i2f] ; 16/10/2022
  3894                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  3895                                  
  3896                                  ; ----------------------------------------------------------------------------
  3897                                  
  3898                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  3899                                  ; note:  is it really necessary to transiton out and then back in?
  3900                                  ;	 It's not as if this is a really speed critical function.
  3901                                  ;	 might as well do whatever's most compact.
  3902                                  
  3903                                  i2f_dskentry:
  3904                                  		jmp	dsk_entry
  3905                                  
  3906                                  ; ----------------------------------------------------------------------------
  3907                                  
  3908                                  ;************************************************************************
  3909                                  ;*									*
  3910                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  3911                                  ;*		is done. presently does nothing. affects no		*
  3912                                  ;*		registers!						*
  3913                                  ;*									*
  3914                                  ;************************************************************************
  3915                                  
  3916                                  ; 09/12/2022
  3917                                  ; re_init_:
  3918                                  re_init:				; called back by sysinit after
  3919                                  		retf			; a bunch of stuff is done.
  3920                                  					; presently does nothing
  3921                                  %endif
  3922                                  
  3923                                  ; ----------------------------------------------------------------------------
  3924                                  
  3925                                  ;SR; WIN386 support
  3926                                  
  3927                                  ; WIN386 instance data structure
  3928                                  ;
  3929                                  ; Here is a Win386 startup info structure which we set up and to which
  3930                                  ; we return a pointer when Win386 initializes.
  3931                                  
  3932 000007DE 0300                    Win386_SI:	db 3,0			; SI_Version
  3933                                  					; Startup Info for Win386
  3934 000007E0 00000000                SI_Next:	dd 0			; pointer to next info structure
  3935 000007E4 00000000                		dd 0			; a field we don't need
  3936 000007E8 00000000                		dd 0			; another field	we don't need
  3937 000007EC [F007]                  SI_Instance:	dw Instance_Table
  3938 000007EE 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  3939                                  
  3940                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  3941                                  ; areas. Note that the address and size of the hardware stacks must
  3942                                  ; be calculated and inserted at boot time.
  3943                                  
  3944 000007F0 00005000                Instance_Table:	dw 0,50h		; print	screen status...
  3945 000007F4 0200                    		dw 2			; ... 2	bytes
  3946 000007F6 0E005000                		dw 0Eh,50h		; ROM Basic data...
  3947 000007FA 1400                    		dw 14h			; ... 14H bytes
  3948 000007FC [0C00]                  		dw altah		; a con	device buffer...
  3949 000007FE 7000                    		dw 70h			; Bios_Data segment
  3950 00000800 0100                    		dw 1			; ... 1 byte
  3951                                  
  3952                                  NextStack:
  3953                                  
  3954                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  3955                                  ;	instance items WILL NOT be filled in by SYSINIT.
  3956                                  ;	That's just fine as long as these are the last items
  3957                                  ;	in the instance list since the first item is initialized
  3958                                  ;	to 0000 at load time.
  3959                                  
  3960 00000802 00000000                		dw 0,0			; pointer to next stack	to be used...
  3961 00000806 0200                    		dw 2			; ... 2 bytes
  3962 00000808 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  3963 0000080C 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  3964 0000080E 00000000                		dd 0			; terminate the	instance table
  3965                                  
  3966                                  					;SR;
  3967 00000812 00                      IsWin386:	db 0			; Flag to indicate whether
  3968                                  					; Win386 is running or not
  3969                                  ;-----------------------------------------------------------------------------
  3970                                  
  3971                                  ; 09/12/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  3972                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:0813h
  3973                                  
  3974                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  3975                                  ;when we call it including checking of A20. The code being only about 
  3976                                  ;30 bytes, we might as well put it in BIOS_DATA
  3977                                  
  3978                                  V86_Crit_SetFocus:			
  3979 00000813 57                      		push	di
  3980 00000814 06                      		push	es
  3981 00000815 53                      		push	bx
  3982 00000816 50                      		push	ax
  3983 00000817 31FF                    		xor	di,di
  3984 00000819 8EC7                    		mov	es,di
  3985 0000081B BB1500                  		mov	bx,15h		; Device ID of DOSMGR device
  3986 0000081E B88416                  		mov	ax,1684h	; Get API entry	point
  3987 00000821 CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  3988                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  3989                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  3990 00000823 8CC0                    		mov	ax, es
  3991 00000825 09F8                    		or	ax, di
  3992 00000827 740A                    		jz	short Skip	; Here,	es:di is address of API	routine.
  3993                                  					; Set up stack frame to	simulate a call.
  3994 00000829 0E                      		push	cs
  3995                                  		;;mov	ax,offset Skip
  3996                                  		;mov	ax,Skip
  3997                                  		;push	ax
  3998                                  		; 03/10/2023 - Retro DOS v5.0
  3999 0000082A 68[3308]                		push	Skip
  4000 0000082D 06                      		push	es
  4001 0000082E 57                      		push	di		; API far call address
  4002 0000082F B80100                  		mov	ax,1		; SetFocus function number
  4003 00000832 CB                      		retf			; do the call
  4004                                  ;-----------------------------------------------------------------------------
  4005                                  
  4006                                  Skip:					
  4007 00000833 58                      		pop	ax
  4008 00000834 5B                      		pop	bx
  4009 00000835 07                      		pop	es
  4010 00000836 5F                      		pop	di
  4011 00000837 CB                      		retf
  4012                                  
  4013                                  ;End WIN386 support
  4014                                  
  4015                                  ; ----------------------------------------------------------------------------
  4016                                  
  4017                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  4018                                  %if 0
  4019                                  
  4020                                  FreeHMAPtr:	dw 0FFFFh		
  4021                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  4022                                  					; (procedure in	SYSINIT	segment)
  4023                                  ; 17/10/2022
  4024                                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  4025                                  		dw SYSINITSEG		; 08/08/2023
  4026                                  					; 0544h for PCDOS 7.1 IBMBIO.COM
  4027                                  					; 0473h for MSDOS 6.21 IO.SYS
  4028                                  ;SR;
  4029                                  ; A communication block has been setup between the DOS and the BIOS. All
  4030                                  ;the data starting from SysinitPresent will be part of the data block. 
  4031                                  ;Right now, this is the only data being communicated. It can be expanded 
  4032                                  ;later to add more stuff
  4033                                  
  4034                                  SysinitPresent:	db 0
  4035                                  		
  4036                                  endfloppy:	db 0, 0
  4037                                  
  4038                                  %endif
  4039                                  	
  4040                                  	; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM
  4041                                  
  4042                                  	endfloppy:
  4043 00000838 00                      		db 0
  4044                                  
  4045                                  	; 03/10/2023
  4046                                  
  4047                                  numxdiv	equ ($-BData_start)
  4048                                  numxmod	equ (numxdiv % 16)
  4049                                  
  4050                                  %if (numxmod>0) & (numxmod<16)
  4051 00000839 00<rep 7h>              		times (16-numxmod) db 0
  4052                                  %endif
  4053                                  
  4054                                  ; ----------------------------------------------------------------------------			
  4055                                  
  4056                                  ; Bios_Data ends
  4057                                  	
  4058                                  ; Possibly disposable BIOS data
  4059                                  ; This data follows the	regular	BIOS data,
  4060                                  ; and is part of the same group.
  4061                                  
  4062                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM
  4063                                  ;nul_vid:	db 'NO NAME    ',0 	; null volume id
  4064                                  ;tmp_vid:	db 'NO NAME    ',0	; vid scratch buffer
  4065                                  
  4066                                  ; 03/10/2023
  4067 00000840 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    '
  4067 00000849 2020               
  4068                                  
  4069 0000084B 80                      harddrv:	db 80h			
  4070                                  
  4071                                  end96tpi:
  4072                                  
  4073                                  ; 03/10/2023 - Retro DOS v5.0 IBMBIO.COM (Modified PCDOS 7.1)
  4074                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:084Ch ('bdss:' address)
  4075                                  
  4076                                  ;;*********************************************************************
  4077                                  ;;memory allocation for bdss
  4078                                  ;;*********************************************************************
  4079                                  ;
  4080                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  4081                                  ;
  4082                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  4083                                  ;
  4084                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  4085                                  
  4086                                  
  4087                                  ; 09/12/2023
  4088                                  %if 1
  4089                                  ; Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM BDS structure (FAT32 adaptation)
  4090                                  
  4091 0000084C FFFF                    bdss:		dw 0FFFFh		; ...
  4092                                  					; max_mini_dsk_num equ 23
  4093                                  					; BDS_STRUC (2+max_mini_dsk_num) dup (<>)
  4094                                  					; currently max. 25
  4095                                  					; (MSDOS 6 BDS structure size = 100 bytes)
  4096                                  					; (PCDOS 7.1 BDS structure size = 150 bytes)
  4097                                  					; BDS.link
  4098 0000084E 0000                    		dw 0
  4099 00000850 50                      		db 80			; BDS.drivenum
  4100 00000851 03                      		db 3			; BDS.drivelet
  4101 00000852 0002                    		dw 512			; BDS.BPB (BDS offset 6)
  4102                                  					; 53 bytes BPB for FAT32 fs
  4103                                  					; 25 bytes BPB for FAT16 and FAT12 fs
  4104                                  					; .bytespersec
  4105 00000854 01                      		db 1			; .secperclus
  4106 00000855 0100                    		dw 1			; .resectors
  4107 00000857 02                      		db 2			; .fats
  4108 00000858 1000                    		dw 16			; .direntries
  4109 0000085A 0000                    		dw 0			; .totalsec16
  4110 0000085C F8                      		db 0F8h			; .media
  4111 0000085D 0100                    		dw 1			; .fatsecs16
  4112 0000085F 0000                    		dw 0			; .secpertrack
  4113 00000861 0000                    		dw 0			; .heads
  4114 00000863 00000000                		dd 0			; .hiddensectors
  4115 00000867 00000000                		dd 0			; .totalsecs32
  4116                                  					; (End of FAT12/FAT16 BPB)
  4117                                  					;
  4118                                  					; FAT32 extensions to BDS
  4119 0000086B 00000000                		dd 0			; .fatsecs32 ; BPB_FATSz32 (BDS offset 31)
  4120 0000086F 0000                    		dw 0			; .extflags ; BPB_ExtFlags
  4121 00000871 0000                    		dw 0			; .fsver ; BPB_FSVer
  4122 00000873 00000000                		dd 0			; .rootdirclust ; BPB_RootClus (BDS offset 39)
  4123 00000877 FFFF                    		dw 0FFFFh		; .fsinfo ; BPB_FSInfo ; initialized to -1
  4124 00000879 FFFF                    		dw 0FFFFh		; .bkbootsec ; BPB_BkBootSec ; initialized to -1
  4125 0000087B 00<rep Ch>              		times 12 db 0		; .reserved ; BPB_Reserved (12 zero bytes)
  4126 00000887 00                      		db 0			; BDS.fatsiz (BDS offset 59)
  4127 00000888 0000                    		dw 0			; BDS.opcnt
  4128 0000088A 03                      		db 3
  4129 0000088B 2000                    		dw 20h			; BDS.flags (BDS offset 63)
  4130 0000088D 2800                    		dw 40
  4131 0000088F 00<rep 25h>             		times 37 db 0
  4132 000008B4 FFFFFFFF                		dd 0FFFFFFFFh
  4133 000008B8 00<rep Ch>              		times 12 db 0
  4134 000008C4 FF                      		db -1			; BDS.track (BDS offset 120)
  4135 000008C5 0100                    		dw 1			; BDS.tim_lo ; BDS.bdsm_ismini
  4136 000008C7 0000                    		dw 0			; BDS.tim_hi
  4137 000008C9 4E4F204E414D452020-     		db 'NO NAME    ',0	; BDS.volid
  4137 000008D2 202000             
  4138 000008D5 00000000                		dd 0			; BDS.vol_serial (BDS offset 137)
  4139 000008D9 464154313220202000      		db 'FAT12   ',0		; BDS.filesys_id
  4140 000008E2 FFFF                    bds_1:		dw 0FFFFh
  4141 000008E4 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4141 000008ED 0210000000F8       
  4142 000008F3 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4142 000008FC 000000000000000000 
  4143 00000905 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4143 0000090E FFFFFF0000         
  4144 00000913 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4144 0000091C 0000000003200028   
  4145 00000924 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4145 0000092D 000000000000000000 
  4146 00000936 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4146 0000093F 000000000000000000 
  4147 00000948 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4147 00000951 0000000000         
  4148 00000956 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4148 0000095F 4E4F204E41         
  4149 00000964 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4149 0000096D 00004641           
  4150 00000971 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4151 00000978 FFFF                    bds_2:		dw 0FFFFh
  4152 0000097A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4152 00000983 0210000000F8       
  4153 00000989 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4153 00000992 000000000000000000 
  4154 0000099B 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4154 000009A4 FFFFFF0000         
  4155 000009A9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4155 000009B2 0000000003200028   
  4156 000009BA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4156 000009C3 000000000000000000 
  4157 000009CC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4157 000009D5 000000000000000000 
  4158 000009DE 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4158 000009E7 0000000000         
  4159 000009EC 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4159 000009F5 4E4F204E41         
  4160 000009FA 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4160 00000A03 00004641           
  4161 00000A07 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4162 00000A0E FFFF                    bds_3:		dw 0FFFFh
  4163 00000A10 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4163 00000A19 0210000000F8       
  4164 00000A1F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4164 00000A28 000000000000000000 
  4165 00000A31 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4165 00000A3A FFFFFF0000         
  4166 00000A3F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4166 00000A48 0000000003200028   
  4167 00000A50 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4167 00000A59 000000000000000000 
  4168 00000A62 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4168 00000A6B 000000000000000000 
  4169 00000A74 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4169 00000A7D 0000000000         
  4170 00000A82 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4170 00000A8B 4E4F204E41         
  4171 00000A90 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4171 00000A99 00004641           
  4172 00000A9D 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4173 00000AA4 FFFF                    bds_4:		dw 0FFFFh
  4174 00000AA6 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4174 00000AAF 0210000000F8       
  4175 00000AB5 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4175 00000ABE 000000000000000000 
  4176 00000AC7 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4176 00000AD0 FFFFFF0000         
  4177 00000AD5 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4177 00000ADE 0000000003200028   
  4178 00000AE6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4178 00000AEF 000000000000000000 
  4179 00000AF8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4179 00000B01 000000000000000000 
  4180 00000B0A 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4180 00000B13 0000000000         
  4181 00000B18 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4181 00000B21 4E4F204E41         
  4182 00000B26 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4182 00000B2F 00004641           
  4183 00000B33 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4184 00000B3A FFFF                    		dw 0FFFFh
  4185 00000B3C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4185 00000B45 0210000000F8       
  4186 00000B4B 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4186 00000B54 000000000000000000 
  4187 00000B5D 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4187 00000B66 FFFFFF0000         
  4188 00000B6B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4188 00000B74 0000000003200028   
  4189 00000B7C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4189 00000B85 000000000000000000 
  4190 00000B8E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4190 00000B97 000000000000000000 
  4191 00000BA0 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4191 00000BA9 0000000000         
  4192 00000BAE 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4192 00000BB7 4E4F204E41         
  4193 00000BBC 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4193 00000BC5 00004641           
  4194 00000BC9 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4195 00000BD0 FFFF                    		dw 0FFFFh
  4196 00000BD2 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4196 00000BDB 0210000000F8       
  4197 00000BE1 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4197 00000BEA 000000000000000000 
  4198 00000BF3 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4198 00000BFC FFFFFF0000         
  4199 00000C01 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4199 00000C0A 0000000003200028   
  4200 00000C12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4200 00000C1B 000000000000000000 
  4201 00000C24 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4201 00000C2D 000000000000000000 
  4202 00000C36 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4202 00000C3F 0000000000         
  4203 00000C44 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4203 00000C4D 4E4F204E41         
  4204 00000C52 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4204 00000C5B 00004641           
  4205 00000C5F 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4206 00000C66 FFFF                    		dw 0FFFFh
  4207 00000C68 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4207 00000C71 0210000000F8       
  4208 00000C77 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4208 00000C80 000000000000000000 
  4209 00000C89 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4209 00000C92 FFFFFF0000         
  4210 00000C97 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4210 00000CA0 0000000003200028   
  4211 00000CA8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4211 00000CB1 000000000000000000 
  4212 00000CBA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4212 00000CC3 000000000000000000 
  4213 00000CCC 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4213 00000CD5 0000000000         
  4214 00000CDA 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4214 00000CE3 4E4F204E41         
  4215 00000CE8 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4215 00000CF1 00004641           
  4216 00000CF5 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4217 00000CFC FFFF                    		dw 0FFFFh
  4218 00000CFE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4218 00000D07 0210000000F8       
  4219 00000D0D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4219 00000D16 000000000000000000 
  4220 00000D1F 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4220 00000D28 FFFFFF0000         
  4221 00000D2D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4221 00000D36 0000000003200028   
  4222 00000D3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4222 00000D47 000000000000000000 
  4223 00000D50 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4223 00000D59 000000000000000000 
  4224 00000D62 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4224 00000D6B 0000000000         
  4225 00000D70 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4225 00000D79 4E4F204E41         
  4226 00000D7E 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4226 00000D87 00004641           
  4227 00000D8B 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4228 00000D92 FFFF                    		dw 0FFFFh
  4229 00000D94 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4229 00000D9D 0210000000F8       
  4230 00000DA3 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4230 00000DAC 000000000000000000 
  4231 00000DB5 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4231 00000DBE FFFFFF0000         
  4232 00000DC3 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4232 00000DCC 0000000003200028   
  4233 00000DD4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4233 00000DDD 000000000000000000 
  4234 00000DE6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4234 00000DEF 000000000000000000 
  4235 00000DF8 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4235 00000E01 0000000000         
  4236 00000E06 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4236 00000E0F 4E4F204E41         
  4237 00000E14 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4237 00000E1D 00004641           
  4238 00000E21 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4239 00000E28 FFFF                    		dw 0FFFFh
  4240 00000E2A 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4240 00000E33 0210000000F8       
  4241 00000E39 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4241 00000E42 000000000000000000 
  4242 00000E4B 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4242 00000E54 FFFFFF0000         
  4243 00000E59 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4243 00000E62 0000000003200028   
  4244 00000E6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4244 00000E73 000000000000000000 
  4245 00000E7C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4245 00000E85 000000000000000000 
  4246 00000E8E 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4246 00000E97 0000000000         
  4247 00000E9C 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4247 00000EA5 4E4F204E41         
  4248 00000EAA 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4248 00000EB3 00004641           
  4249 00000EB7 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4250 00000EBE FFFF                    		dw 0FFFFh
  4251 00000EC0 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4251 00000EC9 0210000000F8       
  4252 00000ECF 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4252 00000ED8 000000000000000000 
  4253 00000EE1 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4253 00000EEA FFFFFF0000         
  4254 00000EEF 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4254 00000EF8 0000000003200028   
  4255 00000F00 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4255 00000F09 000000000000000000 
  4256 00000F12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4256 00000F1B 000000000000000000 
  4257 00000F24 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4257 00000F2D 0000000000         
  4258 00000F32 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4258 00000F3B 4E4F204E41         
  4259 00000F40 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4259 00000F49 00004641           
  4260 00000F4D 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4261 00000F54 FFFF                    		dw 0FFFFh
  4262 00000F56 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4262 00000F5F 0210000000F8       
  4263 00000F65 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4263 00000F6E 000000000000000000 
  4264 00000F77 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4264 00000F80 FFFFFF0000         
  4265 00000F85 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4265 00000F8E 0000000003200028   
  4266 00000F96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4266 00000F9F 000000000000000000 
  4267 00000FA8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4267 00000FB1 000000000000000000 
  4268 00000FBA 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4268 00000FC3 0000000000         
  4269 00000FC8 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4269 00000FD1 4E4F204E41         
  4270 00000FD6 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4270 00000FDF 00004641           
  4271 00000FE3 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4272 00000FEA FFFF                    		dw 0FFFFh
  4273 00000FEC 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4273 00000FF5 0210000000F8       
  4274 00000FFB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4274 00001004 000000000000000000 
  4275 0000100D 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4275 00001016 FFFFFF0000         
  4276 0000101B 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4276 00001024 0000000003200028   
  4277 0000102C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4277 00001035 000000000000000000 
  4278 0000103E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4278 00001047 000000000000000000 
  4279 00001050 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4279 00001059 0000000000         
  4280 0000105E 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4280 00001067 4E4F204E41         
  4281 0000106C 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4281 00001075 00004641           
  4282 00001079 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4283 00001080 FFFF                    		dw 0FFFFh
  4284 00001082 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4284 0000108B 0210000000F8       
  4285 00001091 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4285 0000109A 000000000000000000 
  4286 000010A3 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4286 000010AC FFFFFF0000         
  4287 000010B1 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4287 000010BA 0000000003200028   
  4288 000010C2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4288 000010CB 000000000000000000 
  4289 000010D4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4289 000010DD 000000000000000000 
  4290 000010E6 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4290 000010EF 0000000000         
  4291 000010F4 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4291 000010FD 4E4F204E41         
  4292 00001102 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4292 0000110B 00004641           
  4293 0000110F 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4294 00001116 FFFF                    		dw 0FFFFh
  4295 00001118 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4295 00001121 0210000000F8       
  4296 00001127 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4296 00001130 000000000000000000 
  4297 00001139 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4297 00001142 FFFFFF0000         
  4298 00001147 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4298 00001150 0000000003200028   
  4299 00001158 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4299 00001161 000000000000000000 
  4300 0000116A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4300 00001173 000000000000000000 
  4301 0000117C 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4301 00001185 0000000000         
  4302 0000118A 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4302 00001193 4E4F204E41         
  4303 00001198 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4303 000011A1 00004641           
  4304 000011A5 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4305 000011AC FFFF                    		dw 0FFFFh
  4306 000011AE 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4306 000011B7 0210000000F8       
  4307 000011BD 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4307 000011C6 000000000000000000 
  4308 000011CF 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4308 000011D8 FFFFFF0000         
  4309 000011DD 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4309 000011E6 0000000003200028   
  4310 000011EE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4310 000011F7 000000000000000000 
  4311 00001200 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4311 00001209 000000000000000000 
  4312 00001212 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4312 0000121B 0000000000         
  4313 00001220 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4313 00001229 4E4F204E41         
  4314 0000122E 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4314 00001237 00004641           
  4315 0000123B 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4316 00001242 FFFF                    		dw 0FFFFh
  4317 00001244 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4317 0000124D 0210000000F8       
  4318 00001253 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4318 0000125C 000000000000000000 
  4319 00001265 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4319 0000126E FFFFFF0000         
  4320 00001273 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4320 0000127C 0000000003200028   
  4321 00001284 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4321 0000128D 000000000000000000 
  4322 00001296 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4322 0000129F 000000000000000000 
  4323 000012A8 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4323 000012B1 0000000000         
  4324 000012B6 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4324 000012BF 4E4F204E41         
  4325 000012C4 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4325 000012CD 00004641           
  4326 000012D1 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4327 000012D8 FFFF                    		dw 0FFFFh
  4328 000012DA 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4328 000012E3 0210000000F8       
  4329 000012E9 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4329 000012F2 000000000000000000 
  4330 000012FB 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4330 00001304 FFFFFF0000         
  4331 00001309 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4331 00001312 0000000003200028   
  4332 0000131A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4332 00001323 000000000000000000 
  4333 0000132C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4333 00001335 000000000000000000 
  4334 0000133E 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4334 00001347 0000000000         
  4335 0000134C 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4335 00001355 4E4F204E41         
  4336 0000135A 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4336 00001363 00004641           
  4337 00001367 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4338 0000136E FFFF                    		dw 0FFFFh
  4339 00001370 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4339 00001379 0210000000F8       
  4340 0000137F 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4340 00001388 000000000000000000 
  4341 00001391 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4341 0000139A FFFFFF0000         
  4342 0000139F 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4342 000013A8 0000000003200028   
  4343 000013B0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4343 000013B9 000000000000000000 
  4344 000013C2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4344 000013CB 000000000000000000 
  4345 000013D4 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4345 000013DD 0000000000         
  4346 000013E2 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4346 000013EB 4E4F204E41         
  4347 000013F0 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4347 000013F9 00004641           
  4348 000013FD 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4349 00001404 FFFF                    		dw 0FFFFh
  4350 00001406 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4350 0000140F 0210000000F8       
  4351 00001415 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4351 0000141E 000000000000000000 
  4352 00001427 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4352 00001430 FFFFFF0000         
  4353 00001435 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4353 0000143E 0000000003200028   
  4354 00001446 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4354 0000144F 000000000000000000 
  4355 00001458 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4355 00001461 000000000000000000 
  4356 0000146A 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4356 00001473 0000000000         
  4357 00001478 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4357 00001481 4E4F204E41         
  4358 00001486 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4358 0000148F 00004641           
  4359 00001493 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4360 0000149A FFFF                    		dw 0FFFFh
  4361 0000149C 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4361 000014A5 0210000000F8       
  4362 000014AB 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4362 000014B4 000000000000000000 
  4363 000014BD 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4363 000014C6 FFFFFF0000         
  4364 000014CB 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4364 000014D4 0000000003200028   
  4365 000014DC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4365 000014E5 000000000000000000 
  4366 000014EE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4366 000014F7 000000000000000000 
  4367 00001500 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4367 00001509 0000000000         
  4368 0000150E 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4368 00001517 4E4F204E41         
  4369 0000151C 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4369 00001525 00004641           
  4370 00001529 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4371 00001530 FFFF                    		dw 0FFFFh
  4372 00001532 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4372 0000153B 0210000000F8       
  4373 00001541 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4373 0000154A 000000000000000000 
  4374 00001553 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4374 0000155C FFFFFF0000         
  4375 00001561 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4375 0000156A 0000000003200028   
  4376 00001572 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4376 0000157B 000000000000000000 
  4377 00001584 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4377 0000158D 000000000000000000 
  4378 00001596 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4378 0000159F 0000000000         
  4379 000015A4 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4379 000015AD 4E4F204E41         
  4380 000015B2 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4380 000015BB 00004641           
  4381 000015BF 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4382 000015C6 FFFF                    		dw 0FFFFh
  4383 000015C8 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4383 000015D1 0210000000F8       
  4384 000015D7 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4384 000015E0 000000000000000000 
  4385 000015E9 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4385 000015F2 FFFFFF0000         
  4386 000015F7 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4386 00001600 0000000003200028   
  4387 00001608 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4387 00001611 000000000000000000 
  4388 0000161A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4388 00001623 000000000000000000 
  4389 0000162C 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4389 00001635 0000000000         
  4390 0000163A 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4390 00001643 4E4F204E41         
  4391 00001648 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4391 00001651 00004641           
  4392 00001655 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4393 0000165C FFFF                    bds_24:		dw 0FFFFh
  4394 0000165E 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0, 2, 10h, 0, 0, 0, 0F8h
  4394 00001667 0210000000F8       
  4395 0000166D 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4395 00001676 000000000000000000 
  4396 0000167F 0000000000000000FF-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0
  4396 00001688 FFFFFF0000         
  4397 0000168D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 20h, 0, 28h
  4397 00001696 0000000003200028   
  4398 0000169E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4398 000016A7 000000000000000000 
  4399 000016B0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  4399 000016B9 000000000000000000 
  4400 000016C2 0000FFFFFFFF000000-     		db 0, 0, 0FFh, 0FFh, 0FFh, 0FFh, 0, 0, 0, 0, 0, 0, 0, 0
  4400 000016CB 0000000000         
  4401 000016D0 00000000FF01000000-     		db 0, 0, 0, 0, 0FFh, 1, 0, 0, 0, 4Eh, 4Fh, 20h, 4Eh, 41h
  4401 000016D9 4E4F204E41         
  4402 000016DE 4D4520202020000000-     		db 4Dh, 45h, 20h, 20h, 20h, 20h, 0, 0, 0, 0, 0, 46h, 41h
  4402 000016E7 00004641           
  4403 000016EB 54313220202000          		db 54h, 31h, 32h, 20h, 20h, 20h, 0
  4404                                  
  4405                                  %endif
  4406                                  
  4407                                  ; 09/12/2023
  4408                                  %if 0
  4409                                  ; Retro DOS v4.2 (MSDOS 6.22) IO.SYS BDS structure
  4410                                  
  4411                                  bdss:		dw 0FFFFh		
  4412                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4413                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4414                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4415                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4416                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4417                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4418                                  		db 32h,	20h, 20h, 20h, 0
  4419                                  		dw 0FFFFh
  4420                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4421                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4422                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4423                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4424                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4425                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4426                                  		db 32h,	20h, 20h, 20h, 0
  4427                                  		dw 0FFFFh
  4428                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4429                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4430                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4431                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4432                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4433                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4434                                  		db 32h,	20h, 20h, 20h, 0
  4435                                  		dw 0FFFFh
  4436                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4437                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4438                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4439                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4440                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4441                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4442                                  		db 32h,	20h, 20h, 20h, 0
  4443                                  		dw 0FFFFh
  4444                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4445                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4446                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4447                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4448                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4449                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4450                                  		db 32h,	20h, 20h, 20h, 0
  4451                                  		dw 0FFFFh
  4452                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4453                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4454                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4455                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4456                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4457                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4458                                  		db 32h,	20h, 20h, 20h, 0
  4459                                  		dw 0FFFFh
  4460                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4461                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4462                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4463                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4464                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4465                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4466                                  		db 32h,	20h, 20h, 20h, 0
  4467                                  		dw 0FFFFh
  4468                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4469                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4470                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4471                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4472                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4473                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4474                                  		db 32h,	20h, 20h, 20h, 0
  4475                                  		dw 0FFFFh
  4476                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4477                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4478                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4479                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4480                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4481                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4482                                  		db 32h,	20h, 20h, 20h, 0
  4483                                  		dw 0FFFFh
  4484                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4485                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4486                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4487                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4488                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4489                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4490                                  		db 32h,	20h, 20h, 20h, 0
  4491                                  		dw 0FFFFh
  4492                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4493                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4494                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4495                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4496                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4497                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4498                                  		db 32h,	20h, 20h, 20h, 0
  4499                                  		dw 0FFFFh
  4500                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4501                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4502                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4503                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4504                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4505                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4506                                  		db 32h,	20h, 20h, 20h, 0
  4507                                  		dw 0FFFFh
  4508                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4509                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4510                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4511                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4512                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4513                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4514                                  		db 32h,	20h, 20h, 20h, 0
  4515                                  		dw 0FFFFh
  4516                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4517                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4518                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4519                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4520                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4521                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4522                                  		db 32h,	20h, 20h, 20h, 0
  4523                                  		dw 0FFFFh
  4524                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4525                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4526                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4527                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4528                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4529                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4530                                  		db 32h,	20h, 20h, 20h, 0
  4531                                  		dw 0FFFFh
  4532                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4533                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4534                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4535                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4536                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4537                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4538                                  		db 32h,	20h, 20h, 20h, 0
  4539                                  		dw 0FFFFh
  4540                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4541                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4542                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4543                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4544                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4545                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4546                                  		db 32h,	20h, 20h, 20h, 0
  4547                                  		dw 0FFFFh
  4548                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4549                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4550                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4551                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4552                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4553                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4554                                  		db 32h,	20h, 20h, 20h, 0
  4555                                  		dw 0FFFFh
  4556                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4557                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4558                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4559                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4560                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4561                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4562                                  		db 32h,	20h, 20h, 20h, 0
  4563                                  		dw 0FFFFh
  4564                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4565                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4566                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4567                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4568                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4569                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4570                                  		db 32h,	20h, 20h, 20h, 0
  4571                                  		dw 0FFFFh
  4572                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4573                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4574                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4575                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4576                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4577                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4578                                  		db 32h,	20h, 20h, 20h, 0
  4579                                  		dw 0FFFFh
  4580                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4581                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4582                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4583                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4584                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4585                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4586                                  		db 32h,	20h, 20h, 20h, 0
  4587                                  		dw 0FFFFh
  4588                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4589                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4590                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4591                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4592                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4593                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4594                                  		db 32h,	20h, 20h, 20h, 0
  4595                                  		dw 0FFFFh
  4596                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4597                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4598                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4599                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4600                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4601                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4602                                  		db 32h,	20h, 20h, 20h, 0
  4603                                  		dw 0FFFFh
  4604                                  		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  4605                                  		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  4606                                  		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  4607                                  		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  4608                                  		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  4609                                  		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  4610                                  		db 32h,	20h, 20h, 20h, 0
  4611                                  		db 0
  4612                                  %endif
  4613                                  
  4614                                  ;---------------------------------------------------------------------------
  4615                                  ; Possibly disposable data, goes at end of data group
  4616                                  ;***************************************************************************
  4617                                  
  4618                                  ; Possibly disposable data, goes at end of data group
  4619                                  
  4620                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  4621                                  ;
  4622                                  ;	entry:	(ah) = function, 02 or 0a for read.
  4623                                  ;		(dl) = drive number (80h or 81h).
  4624                                  ;		(dh) = head number.
  4625                                  ;		(ch) = cylinder number.
  4626                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  4627                                  ;		(al) = number of sectors.
  4628                                  ;		(es:bx) = address of read buffer.
  4629                                  ;		for more on register contents see rom bios listing.
  4630                                  ;		stack set up for return by an iret.
  4631                                  ;
  4632                                  ;	exit:	(ah) = status of current operation.
  4633                                  ;		(cy) = 1 if failed, 0 if successful.
  4634                                  ;		for other register contents see rom bios listing.
  4635                                  ;
  4636                                  ;	uses:	
  4637                                  ;
  4638                                  ;
  4639                                  ;	warning: uses old13 vector for non-read calls.
  4640                                  ;		does direct calls to the at rom.
  4641                                  ;		does segment arithmatic.
  4642                                  ;
  4643                                  ;	effects: performs disk i/o operation.
  4644                                  
  4645                                  ; 16/10/2022
  4646                                  ; 28/05/2019
  4647                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  4648                                  
  4649                                  ;* offsets into cmd_block for registers
  4650                                  
  4651                                  pre_comp equ 0	;write pre-compensation
  4652                                  sec_cnt	 equ 1	;sector count
  4653                                  sec_num	 equ 2	;sector number
  4654                                  cyl_low	 equ 3	;cylinder number, low part
  4655                                  cyl_high equ 4	;cylinder number, high part
  4656                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  4657                                  		;            bit 4 = drive number, bits 3-0 have head number)
  4658                                  cmd_reg  equ 6	;command register
  4659                                  
  4660                                  ; 01/10/2022
  4661                                  disk_status1	equ 74h
  4662                                  hf_num		equ 75h
  4663                                  control_byte	equ 76h
  4664                                  
  4665                                  ibm_disk_io:				
  4666 000016F2 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  4667 000016F5 720A                    		jb	short atd1	; pass through floppy disk calls. 
  4668 000016F7 80FC02                  		cmp	ah, 2
  4669 000016FA 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  4670 000016FC 80FC0A                  		cmp	ah, 0Ah
  4671 000016FF 7405                    		jz	short atd2	; and call 0Ah (read long).
  4672                                  atd1:
  4673 00001701 2EFF2E[0601]            		jmp	far [cs:Old13]					
  4674                                  		;jmp	cs:Old13	; use rom int 13h handler
  4675                                  ;-----------------------------------------------------------------------------
  4676                                  
  4677                                  atd2:					
  4678 00001706 53                      		push	bx
  4679 00001707 51                      		push	cx
  4680 00001708 52                      		push	dx
  4681 00001709 57                      		push	di
  4682 0000170A 1E                      		push	ds
  4683 0000170B 06                      		push	es
  4684 0000170C 50                      		push	ax
  4685 0000170D B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  4686                                  					; establish bios segment addressing
  4687 00001710 8ED8                    		mov	ds, ax
  4688                                  		; 16/10/2022
  4689 00001712 C606740000              		mov	byte [disk_status1], 0
  4690                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  4691                                  					; initially no error code.
  4692 00001717 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  4693 0000171A 3A167500                		cmp	dl, [hf_num]
  4694                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  4695 0000171E 7207                    		jb	short atd3	; disk number in range
  4696                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  4697 00001720 C606740001              		mov	byte [disk_status1], 1
  4698 00001725 EB20                    		jmp	short atd4	; disk number out of range error,
  4699                                  					; return
  4700                                  ; ----------------------------------------------------------------------------
  4701                                  
  4702                                  atd3:					
  4703 00001727 53                      		push	bx
  4704 00001728 8CC0                    		mov	ax, es
  4705 0000172A C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  4706 0000172D 01D8                    		add	ax, bx
  4707 0000172F 8EC0                    		mov	es, ax
  4708 00001731 5B                      		pop	bx
  4709 00001732 83E30F                  		and	bx, 0Fh
  4710 00001735 0E                      		push	cs
  4711 00001736 E8DF00                  		call	check_dma
  4712 00001739 720C                    		jb	short atd4	; abort if dma across segment boundary
  4713 0000173B 58                      		pop	ax
  4714 0000173C 50                      		push	ax
  4715 0000173D E81A00                  		call	setcmd		; set up command block for disk op
  4716 00001740 BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  4717 00001743 EE                      		out	dx, al		; write out command modifier
  4718 00001744 E86B00                  		call	docmd		; carry out command
  4719                                  ; ----------------------------------------------------------------------------
  4720                                  
  4721                                  atd4:	
  4722                                  
  4723                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  4724                                  ;	      and save a couple bytes while were at it.
  4725                                  				
  4726 00001747 58                      		pop	ax
  4727                                  		;mov	ah, ds:74h	; [disk_status1]
  4728 00001748 8A267400                		mov	ah, [disk_status1]
  4729 0000174C 08E4                    		or	ah, ah
  4730 0000174E 7401                    		jz	short atd5
  4731 00001750 F9                      		stc
  4732                                  atd5:					
  4733 00001751 07                      		pop	es
  4734 00001752 1F                      		pop	ds
  4735 00001753 5F                      		pop	di
  4736 00001754 5A                      		pop	dx
  4737 00001755 59                      		pop	cx
  4738 00001756 5B                      		pop	bx
  4739 00001757 CA0200                  		retf	2		; far return, dropping flags
  4740                                  
  4741                                  ; =============== S U B	R O U T	I N E ========================================
  4742                                  
  4743                                  ;***	setcmd - set up cmd_block for the disk operation
  4744                                  ;
  4745                                  ;	entry:	(ds) = bios data segment.
  4746                                  ;		(es:bx) in seg:000x form.
  4747                                  ;		other registers as in int 13h call
  4748                                  ;	
  4749                                  ;	exit:	cmd_block set up for disk read call.
  4750                                  ;		control_byte set up for disk operation.
  4751                                  ;		(al) = control byte modifier
  4752                                  ;
  4753                                  ;	sets the fields of cmd_block using the register contents
  4754                                  ;	and the contents of the disk parameter block for the given drive.
  4755                                  ;
  4756                                  ;	warning: (ax) destroyed.
  4757                                  ;		does direct calls to the at rom.
  4758                                  
  4759                                  setcmd:		; proc near		
  4760                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  4761                                  		; 16/10/2022
  4762 0000175A A24300                  		mov	[cmd_block+sec_cnt], al
  4763                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  4764 0000175D C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  4765 00001762 80FC02                  		cmp	ah, 2
  4766 00001765 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  4767 00001767 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  4768                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  4769                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  4770                                  setc1:					
  4771 0000176C 88C8                    		mov	al, cl
  4772 0000176E 243F                    		and	al, 3Fh		; mask sector number
  4773                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  4774                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  4775 00001770 A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  4776 00001773 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  4777 00001777 88C8                    		mov	al, cl
  4778 00001779 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  4779                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  4780 0000177C A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  4781 0000177F 89D0                    		mov	ax, dx
  4782 00001781 C0E004                  		shl	al, 4		; drive	number
  4783 00001784 80E40F                  		and	ah, 0Fh
  4784 00001787 08E0                    		or	al, ah		; head number
  4785 00001789 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  4786                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  4787 0000178B A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  4788 0000178E 06                      		push	es
  4789 0000178F 53                      		push	bx
  4790 00001790 0E                      		push	cs
  4791 00001791 E85C00                  		call	get_vec
  4792 00001794 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  4793                                  			 		; write pre-comp from disk parameters
  4794 00001798 C1E802                  		shr	ax, 2
  4795                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  4796 0000179B A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  4797                                  					; only use low part
  4798 0000179E 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  4799                                  					; control byte modifier
  4800 000017A2 5B                      		pop	bx
  4801 000017A3 07                      		pop	es
  4802                                  		;mov	ah, ds:76h	; [control_byte]
  4803 000017A4 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  4804 000017A8 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  4805 000017AB 08C4                    		or	ah, al
  4806                                  		;mov	ds:76h,	ah
  4807 000017AD 88267600                		mov	[control_byte], ah ; mov [76h],al
  4808 000017B1 C3                      		retn
  4809                                  
  4810                                  ; =============== S U B	R O U T	I N E ========================================
  4811                                  
  4812                                  ;***	docmd - carry out read operation to at hard disk
  4813                                  ;
  4814                                  ;	entry:	(es:bx) = address for read in data.
  4815                                  ;		cmd_block set up for disk read.
  4816                                  ;
  4817                                  ;	exit:	buffer at (es:bx) contains data read.
  4818                                  ;		disk_status1 set to error code (0 if success).
  4819                                  ;
  4820                                  ;	
  4821                                  ;
  4822                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  4823                                  ;		no check is made for dma boundary overrun.
  4824                                  ;
  4825                                  ;	effects: programs disk controller.
  4826                                  ;		performs disk input.
  4827                                  
  4828                                  docmd:		; proc near		
  4829 000017B2 89DF                    		mov	di, bx
  4830 000017B4 0E                      		push	cs
  4831 000017B5 E84000                  		call	command
  4832 000017B8 7535                    		jnz	short doc3
  4833                                  doc1:					
  4834 000017BA 0E                      		push	cs
  4835 000017BB E84200                  		call	waitt		; wait for controller to complete read
  4836 000017BE 752F                    		jnz	short doc3
  4837 000017C0 B90001                  		mov	cx, 256		; 256 words per sector
  4838 000017C3 BAF001                  		mov	dx, 1F0h	; hf_port
  4839 000017C6 FC                      		cld			; string op goes up
  4840 000017C7 FA                      		cli			; disable interrupts
  4841                                  					; (bug was forgetting this)
  4842                                  
  4843                                  ;	M062 -- some of these old machines have intermittent failures
  4844                                  ;		when the read is done at full speed. Instead of using
  4845                                  ;		a string rep instruction, we'll use a loop. There is
  4846                                  ;		a slight performance hit, but it only affects these
  4847                                  ;		very old machines with an exact date code match, and
  4848                                  ;		it makes said machines more reliable
  4849                                  ;
  4850                                  ;M062	repz	insw		;read in sector
  4851                                  
  4852                                  rsct_loop:				
  4853 000017C8 6D                      		insw
  4854 000017C9 E2FD                    		loop	rsct_loop
  4855 000017CB FB                      		sti
  4856                                  		; 16/10/2022
  4857 000017CC F606480002              		test	byte [cmd_block+cmd_reg], 02h
  4858                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  4859                                  					; (ds =	40h)
  4860 000017D1 7410                    		jz	short doc2	; no ecc bytes to read.
  4861 000017D3 0E                      		push	cs
  4862 000017D4 E83100                  		call	wait_drq	; wait for controller to complete read
  4863 000017D7 7216                    		jb	short doc3
  4864 000017D9 B90400                  		mov	cx, 4		; 4 bytes of ecc
  4865 000017DC BAF001                  		mov	dx, 1F0h	; hf_port
  4866 000017DF FA                      		cli
  4867 000017E0 F36C                    		rep insb		; read in ecc
  4868 000017E2 FB                      		sti
  4869                                  doc2:					
  4870 000017E3 0E                      		push	cs
  4871 000017E4 E82900                  		call	check_status
  4872 000017E7 7506                    		jnz	short doc3	; operation failed
  4873                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  4874 000017E9 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  4875 000017ED 75CB                    		jnz	short doc1	; loop while more sectors to read
  4876                                  doc3:					
  4877 000017EF C3                      		retn
  4878                                  
  4879                                  ; =============== S U B	R O U T	I N E ========================================
  4880                                  
  4881                                  ;***	define where the rom routines are actually located
  4882                                  ;	   in the buggy old AT BIOS that we might need to
  4883                                  ;	   install a special level of int13 handler for
  4884                                  
  4885                                  ; 16/10/2022
  4886                                  
  4887                                  romsegment 	equ 0F000h  ; segment
  4888                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  4889                                  romwait		equ 2E7Fh   ; offset in romsegment
  4890                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  4891                                  romcheck_status equ 2EF8h   ; offset in romsegment
  4892                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  4893                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  4894                                  romfret		equ 0FF65h  ; far return in rom	
  4895                                  
  4896                                  ;***	get_vec - get pointer to hard disk parameters.
  4897                                  ;
  4898                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  4899                                  ;
  4900                                  ;	exit:	(es:bx) = address of disk parameters table.
  4901                                  ;
  4902                                  ;	uses:	ax for segment computation.
  4903                                  ;
  4904                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  4905                                  ;	or 70h (disk 1).
  4906                                  ;	
  4907                                  ;	warning: (ax) destroyed.
  4908                                  ;		this does a direct call to the at rom.
  4909                                  
  4910                                  get_vec:	; proc near		
  4911                                  		;push	0FF65h		; romfret ; far	return in rom
  4912                                  		;jmp	far ptr	0F000h:2F8Eh
  4913                                  		; 16/10/2022
  4914 000017F0 6865FF                  		push	romfret		; far return in rom
  4915 000017F3 EA8E2F00F0              		jmp	romsegment:romget_vec
  4916                                  
  4917                                  ; =============== S U B	R O U T	I N E ========================================
  4918                                  
  4919                                  ;***	command - send contents of cmd_block to disk controller.
  4920                                  ;
  4921                                  ;	entry:	control_byte 
  4922                                  ;		cmd_block - set up with values for hard disk controller.
  4923                                  ;
  4924                                  ;	exit:	disk_status1 = error code.
  4925                                  ;		nz if error, zr for no error.
  4926                                  ;
  4927                                  ;
  4928                                  ;	warning: (ax), (cx), (dx) destroyed.
  4929                                  ;		does a direct call to the at rom.
  4930                                  ;
  4931                                  ;	effects: programs disk controller.
  4932                                  
  4933                                  command:	; proc near		
  4934                                  		;push	0FF65h		; romfret ; far	return in rom
  4935                                  		;jmp	far ptr	0F000h:2E1Eh
  4936                                  		; 16/10/2022
  4937 000017F8 6865FF                  		push	romfret		; far return in rom
  4938 000017FB EA1E2E00F0              		jmp	romsegment:romcommand
  4939                                  
  4940                                  ; =============== S U B	R O U T	I N E ========================================
  4941                                  
  4942                                  ;***	waitt - wait for disk interrupt
  4943                                  ;
  4944                                  ;	entry:	nothing.
  4945                                  ;
  4946                                  ;	exit:	disk_status1 = error code.
  4947                                  ;		nz if error, zr if no error.
  4948                                  ;
  4949                                  ;
  4950                                  ;	warning: (ax), (bl), (cx) destroyed.
  4951                                  ;		does a direct call to the at rom.
  4952                                  ;		
  4953                                  ;	effects: calls int 15h, function 9000h.
  4954                                  
  4955                                  waitt:		; proc near		
  4956                                  		;push	0FF65h		; romfret ; far	return in rom
  4957                                  		;jmp	far ptr	0F000h:2E7Fh
  4958                                  		; 16/10/2022
  4959 00001800 6865FF                  		push	romfret		; far return in rom
  4960 00001803 EA7F2E00F0              		jmp	romsegment:romwait
  4961                                  
  4962                                  ; =============== S U B	R O U T	I N E ========================================
  4963                                  
  4964                                  ;***	wait_drq - wait for data request.
  4965                                  ;
  4966                                  ;	entry:	nothing.
  4967                                  ;
  4968                                  ;	exit:	disk_status1 = error code.
  4969                                  ;		cy if error, nc if no error.
  4970                                  ;
  4971                                  ;	warning: (al), (cx), (dx) destroyed.
  4972                                  ;		does a direct call to the at rom.
  4973                                  
  4974                                  wait_drq:	; proc near		
  4975                                  		;push	0FF65h		; romfret ; far	return in rom
  4976                                  		;jmp	far ptr	0F000h:2EE2h
  4977                                  		; 16/10/2022
  4978 00001808 6865FF                  		push	romfret		; far return in rom
  4979 0000180B EAE22E00F0              		jmp	romsegment:romwait_drq
  4980                                  
  4981                                  ; =============== S U B	R O U T	I N E ========================================
  4982                                  
  4983                                  ;***	check_status - check hard disk status.
  4984                                  ;
  4985                                  ;	entry:	nothing.
  4986                                  ;
  4987                                  ;	exit:	disk_status1 = error code.
  4988                                  ;		nz if error, zr if no error.
  4989                                  ;
  4990                                  ;	warning: (ax), (cx), (dx) destroyed.
  4991                                  ;		does a direct call to the at rom.
  4992                                  
  4993                                  check_status:	; proc near		
  4994                                  		;push	0FF65h		; romfret ; far	return in rom
  4995                                  		;jmp	far ptr	0F000h:2EF8h
  4996                                  		; 16/10/2022
  4997 00001810 6865FF                  		push	romfret		; far return in rom
  4998 00001813 EAF82E00F0              		jmp	romsegment:romcheck_status
  4999                                  
  5000                                  ; =============== S U B	R O U T	I N E ========================================
  5001                                  
  5002                                  ;***	check_dma - check for dma overrun 64k segment.
  5003                                  ;
  5004                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  5005                                  ;		cmd_block set up for operation.
  5006                                  ;
  5007                                  ;	exit:	disk_status1 - error code.
  5008                                  ;		cy if error, nc if no error.
  5009                                  ;
  5010                                  ;	warning: does a direct call to the at rom.
  5011                                  
  5012                                  check_dma:	; proc near		
  5013                                  		;push	0FF65h		; romfret ; far	return in rom
  5014                                  		;jmp	far ptr	0F000h:2F69h
  5015                                  		; 16/10/2022
  5016 00001818 6865FF                  		push	romfret		; far return in rom
  5017 0000181B EA692F00F0              		jmp	romsegment:romcheck_dma
  5018                                  
  5019                                  ;-----------------------------------------------------------------------------
  5020                                  
  5021                                  endatrom:
  5022                                  
  5023                                  ; ----------------------------------------------------------------------------
  5024                                  
  5025                                  ;; M015 -- begin changes
  5026                                  ;;
  5027                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  5028                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  5029                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  5030                                  ;; If our init code detects this error, it will install this
  5031                                  ;; special Int13 hook through the same mechanism that was set
  5032                                  ;; up for the IBM patch above. This code is also dynamically
  5033                                  ;; relocated by MSINIT.
  5034                                  
  5035                                  compaq_disk_io:
  5036 00001820 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  5037                                  					;
  5038                                  					; the following	label defines the end of the at	rom patch.
  5039                                  					; this is used at configuration	time.
  5040                                  					;
  5041                                  					; warning!!!
  5042                                  					; this code will be dynamically	relocated by msinit
  5043 00001823 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  5044                                  no_hookit:				
  5045                                  		;jmp	cs:Old13
  5046                                  		; 16/10/2022
  5047 00001825 2EFF2E[0601]            		jmp	far [cs:Old13]
  5048                                  
  5049                                  ; ----------------------------------------------------------------------------
  5050                                  
  5051                                  mebbe_hookit:
  5052 0000182A 80FA80                  		cmp	dl, 80h
  5053 0000182D 72F6                    		jb	short no_hookit
  5054 0000182F 1E                      		push	ds
  5055                                  		
  5056                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5057                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1830h
  5058                                  		;push	ax
  5059                                  		;mov	ax, 40h
  5060                                  		;mov	ds, ax
  5061                                  		;pop	ax
  5062 00001830 6A40                    		push	40h
  5063 00001832 1F                      		pop	ds
  5064                                  
  5065 00001833 9C                      		pushf
  5066                                  		;call	cs:Old13
  5067                                  		; 16/10/2022
  5068 00001834 2EFF1E[0601]            		call	far [cs:Old13]
  5069 00001839 1F                      		pop	ds
  5070 0000183A CA0200                  		retf	2
  5071                                  
  5072                                  ; ----------------------------------------------------------------------------
  5073                                  
  5074 0000183D 00                      end_compaq_i13hook: db 0			
  5075                                  
  5076                                  ; =============== S U B	R O U T	I N E ========================================
  5077                                  
  5078                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5079                                  %if 0  
  5080                                  
  5081                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  5082                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  5083                                  
  5084                                  daycnt_to_day:	; proc far
  5085                                  
  5086                                  ; entry: [daycnt] = number of days since 1-1-80
  5087                                  ;
  5088                                  ; return: ch - century in bcd
  5089                                  ;	  cl - year in bcd
  5090                                  ;	  dh - month in bcd
  5091                                  ;	  dl - day in bcd
  5092                                  
  5093                                  		; 16/10/2022		
  5094                                  		push	word [cs:daycnt] ; save daycnt
  5095                                  		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  5096                                  					; # days from 1-1-1980 to 1-1-2000
  5097                                  		jnb	short century20
  5098                                  		mov	byte [cs:base_century], 19
  5099                                  		mov	byte [cs:base_year], 80
  5100                                  		jmp	short years
  5101                                  ; ----------------------------------------------------------------------------
  5102                                  		
  5103                                  century20:				
  5104                                  		mov	byte [cs:base_century], 20
  5105                                  		mov	byte [cs:base_year], 0
  5106                                  		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  5107                                  					; adjust daycnt
  5108                                  years:					
  5109                                  		xor	dx, dx
  5110                                  		mov	ax, [cs:daycnt]
  5111                                  		mov	bx, 1461	; (366+365*3)
  5112                                  					; # of days in a Leap year block
  5113                                  		div	bx		; AX = # of leap block,	DX = daycnt
  5114                                  		mov	[cs:daycnt], dx	; save daycnt left
  5115                                  		mov	bl, 4
  5116                                  		mul	bl		; AX = # of years. Less	than 100
  5117                                  		add	[cs:base_year], al ; So, ah = 0. Adjust year
  5118                                  		inc	word [cs:daycnt]	; set daycnt to	1 base
  5119                                  		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  5120                                  		jbe	short leapyear	; within 366+355+355+355 days.
  5121                                  		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  5122                                  		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  5123                                  		mov	cx, 3		; And next three years are normal
  5124                                  regularyear:				
  5125                                  		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  5126                                  		jbe	short yeardone	; {if (daycnt >	365)
  5127                                  		inc	byte [cs:base_year]	;   { daycnt -=	365
  5128                                  		sub	word [cs:daycnt], 365	;   }
  5129                                  		loop	regularyear	; }
  5130                                  					;
  5131                                  					; should never fall through loop
  5132                                  leapyear:				
  5133                                  		mov	byte [cs:month_tab+1], 29 ; leap year.
  5134                                  					; change month table.
  5135                                  yeardone:				
  5136                                  		xor	bx, bx
  5137                                  		xor	dx, dx
  5138                                  		mov	ax, [cs:daycnt]
  5139                                  		;mov	si, offset month_tab
  5140                                  		mov	si, month_tab	; 19/10/2022
  5141                                  		mov	cx, 12
  5142                                  months:					
  5143                                  		inc	bl
  5144                                  
  5145                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  5146                                  		;mov	dl, [cs:si]
  5147                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  5148                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  5149                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  5150                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  5151                                  		
  5152                                  		mov	dl, [si] ; ?	; mov dl, [cs:si]
  5153                                  		cmp	ax, dx		; cmp daycnt for each month till fit
  5154                                  					; dh=0
  5155                                  		jbe	short month_done
  5156                                  		inc	si		; next month
  5157                                  		sub	ax, dx		; adjust daycnt
  5158                                  		loop	months		;
  5159                                  					; should never fall through loop
  5160                                  month_done:				
  5161                                  		mov	byte [cs:month_tab+1], 28
  5162                                  					; restore month table value
  5163                                  		mov	dl, bl
  5164                                  		mov	dh, [cs:base_year]
  5165                                  		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  5166                                  		call	far [cs:bintobcd]
  5167                                  		;call	cs:bintobcd	; convert "day"	to bcd
  5168                                  					; dl = bcd day,	al = month
  5169                                  		xchg	dl, al
  5170                                  		call	far [cs:bintobcd]
  5171                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  5172                                  		xchg	dh, al
  5173                                  		call	far [cs:bintobcd]
  5174                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  5175                                  		xchg	cl, al
  5176                                  		call	far [cs:bintobcd]
  5177                                  		;call	cs:bintobcd	; ch = bcd century
  5178                                  		mov	ch, al
  5179                                  		pop	word [cs:daycnt] ; restore original value
  5180                                  		retf
  5181                                  
  5182                                  enddaycnttoday:	
  5183                                  
  5184                                  %endif
  5185                                  
  5186                                  ; =============== S U B	R O U T	I N E ========================================
  5187                                  
  5188                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5189                                  %if 0  
  5190                                  
  5191                                  bin_to_bcd:	; proc far		; real time clock support
  5192                                  
  5193                                  ;convert a binary input in al (less than 63h or 99 decimal)
  5194                                  ;into a bcd value in al. ah destroyed.	
  5195                                  		
  5196                                  		push	cx		
  5197                                  		aam			; al=high digit	bcd, ah=low digit bcd
  5198                                  		mov	cl, 4
  5199                                  		shl	ah, cl		; mov the high digit to	high nibble
  5200                                  		or	al, ah
  5201                                  		pop	cx
  5202                                  		retf
  5203                                  %endif
  5204                                  
  5205                                  ; ----------------------------------------------------------------------------
  5206                                  
  5207                                  ; the k09 requires the routines for reading the clock because of the suspend/
  5208                                  ; resume facility. the system clock needs to be reset after resume.
  5209                                  
  5210                                  ; the following routine is executed at resume time when the system
  5211                                  ; powered on after suspension. it reads the real time clock and
  5212                                  ; resets the system time and date, and then irets.
  5213                                  
  5214                                  ; warning!!! this code will be dynamically relocated by msinit.
  5215                                  
  5216                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5217                                  	; PCDOS 7.1 IBMBIO.COM - BIOSDATA:183Eh
  5218                                  int_6Ch:
  5219 0000183E 0E                      		push	cs
  5220 0000183F 1F                      		pop	ds
  5221                                  		;cmp	byte [cs:inHMA], 0  
  5222 00001840 803E[0D00]00            		cmp	byte [inHMA], 0
  5223 00001845 7405                    		jz      short int6c
  5224 00001847 BB[2A07]                		mov     bx, EnsureA20On
  5225 0000184A FFD3                    		call    bx
  5226                                  int6c:					
  5227                                  		;push	cs
  5228                                  		;pop	ds
  5229 0000184C 8F06[F805]              		pop	word [int6c_ret_addr]	; pop off return address
  5230 00001850 8F06[FA05]              		pop	word [int6c_ret_addr+2]
  5231 00001854 9D                      		popf
  5232 00001855 E81300                  		call	read_real_date	; get the date from the clock
  5233 00001858 FA                      		cli
  5234 00001859 8936[8904]              		mov	[daycnt], si	; update dos copy of date
  5235 0000185D FB                      		sti
  5236 0000185E E8B900                  		call	read_real_time	; get the time from the	rtc
  5237 00001861 FA                      		cli
  5238 00001862 B401                    		mov	ah, 1
  5239 00001864 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  5240                                  					; CX:DX	= clock	count
  5241                                  					; Return: time of day set
  5242 00001866 FB                      		sti
  5243                                  		;jmp	int6c_ret_addr	; long jump
  5244                                  		; 16/10/2022
  5245 00001867 FF2E[F805]              		jmp	far [int6c_ret_addr] ; long jump
  5246                                  
  5247                                  ; =============== S U B	R O U T	I N E ========================================
  5248                                  
  5249                                  ;   read_real_date reads real-time clock for date and returns the number
  5250                                  ;   of days elapsed since 1-1-80 in si
  5251                                  
  5252                                  read_real_date:	; proc near		
  5253 0000186B 50                      		push	ax
  5254 0000186C 51                      		push	cx
  5255 0000186D 52                      		push	dx
  5256 0000186E 30E4                    		xor	ah, ah		; throw	away clock roll	over
  5257 00001870 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  5258                                  					; Return: CX:DX	= clock	count
  5259                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  5260                                  					; midnight
  5261                                  					; Otherwise, AL	> 0
  5262 00001872 5A                      		pop	dx
  5263 00001873 59                      		pop	cx
  5264 00001874 58                      		pop	ax
  5265 00001875 50                      		push	ax
  5266 00001876 53                      		push	bx
  5267 00001877 51                      		push	cx
  5268 00001878 52                      		push	dx
  5269                                  		;mov	word [cs:daycnt2], 1
  5270                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5271                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:187Ah
  5272 00001879 C706[0006]0100          		mov	word [daycnt2], 1
  5273                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  5274 0000187F B404                    		mov	ah, 4
  5275 00001881 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  5276                                  					; Return: DL = day in BCD
  5277                                  					; DH = month in	BCD
  5278                                  					; CL = year in BCD
  5279                                  					; CH = century (19h or 20h)
  5280 00001883 7303                    		jnb	short read_ok
  5281 00001885 E98300                  		jmp	r_d_ret
  5282                                  ;-----------------------------------------------------------------------------
  5283                                  
  5284                                  read_ok:
  5285 00001888 882E[FC05]              		mov	[bin_date_time], ch
  5286 0000188C 880E[FD05]              		mov	[bin_date_time+1], cl
  5287 00001890 8836[FE05]              		mov	[bin_date_time+2], dh
  5288 00001894 8816[FF05]              		mov	[bin_date_time+3], dl
  5289                                  		;mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  5290                                  		; 08/08/2023
  5291                                  		;mov	byte [daycnt2], 2
  5292 00001898 FE06[0006]              		inc	byte [daycnt2] ; 2
  5293 0000189C E83401                  		call	bcd_verify	; verify bcd values in range
  5294 0000189F 726A                    		jb	short r_d_ret	; some value out of range
  5295                                  		;mov	word [cs:daycnt2], 3
  5296                                  		; 08/08/2023
  5297                                  		;mov	byte [daycnt2], 3
  5298 000018A1 FE06[0006]              		inc	byte [daycnt2] ; 3
  5299 000018A5 E8DB00                  		call	date_verify
  5300 000018A8 7261                    		jb	short r_d_ret
  5301                                  		;mov	word [cs:daycnt2], 0
  5302                                  		; 08/08/2023
  5303 000018AA C606[0006]00            		mov	byte [daycnt2], 0
  5304 000018AF E8A100                  		call	in_bin
  5305 000018B2 A0[FD05]                		mov	al, [bin_date_time+1]
  5306 000018B5 98                      		cbw
  5307 000018B6 803E[FC05]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  5308 000018BB 7503                    		jnz	short century_19 ; no
  5309 000018BD 83C064                  		add	ax, 100		; add in a century
  5310                                  century_19:				
  5311 000018C0 83E850                  		sub	ax, 80		; subtract off 1-1-80
  5312 000018C3 B104                    		mov	cl, 4		; leap year every 4
  5313 000018C5 F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  5314 000018C7 88E3                    		mov	bl, ah		; save odd years
  5315 000018C9 98                      		cbw			; zero ah
  5316 000018CA B9B505                  		mov	cx, 1461	; 366+(3*365)
  5317                                  					; # of days in leap year blocks
  5318 000018CD F7E1                    		mul	cx
  5319                                  		;mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  5320                                  		; 08/08/2023
  5321 000018CF A3[0006]                		mov	[daycnt2], ax
  5322 000018D2 88D8                    		mov	al, bl		; get odd years	count
  5323 000018D4 98                      		cbw
  5324 000018D5 09C0                    		or	ax, ax
  5325 000018D7 740B                    		jz	short leap_year
  5326 000018D9 B96D01                  		mov	cx, 365		; days in year
  5327 000018DC F7E1                    		mul	cx
  5328                                  		;add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  5329                                  		; 08/08/2023
  5330 000018DE 0106[0006]              		add	[daycnt2], ax
  5331 000018E2 EB07                    		jmp	short leap_adjustment ;	account	for leap year
  5332                                  					; possibly account for a leap day
  5333                                  ;-----------------------------------------------------------------------------
  5334                                  
  5335                                  leap_year:
  5336 000018E4 803E[FE05]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  5337 000018E9 7604                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  5338                                  leap_adjustment:
  5339                                  		;inc	word [cs:daycnt2] ; account for leap day
  5340                                  		; 08/08/2023
  5341 000018EB FF06[0006]              		inc	word [daycnt2]
  5342                                  no_leap_adjustment:			
  5343 000018EF 8A0E[FF05]              		mov	cl, [bin_date_time+3] ; get days of month
  5344 000018F3 30ED                    		xor	ch, ch
  5345 000018F5 49                      		dec	cx		; because of offset from day 1,	not day	0
  5346                                  		;add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  5347                                  		; 08/08/2023
  5348 000018F6 010E[0006]              		add	[daycnt2], cx
  5349 000018FA 8A0E[FE05]              		mov	cl, [bin_date_time+2] ; get month
  5350                                  		; 08/08/2023
  5351                                  		;xor	ch, ch
  5352 000018FE 49                      		dec	cx		; january starts at offset 0
  5353                                  		
  5354                                  		; 08/08/2023
  5355                                  		;shl	cx, 1		; word offset
  5356                                  		;;mov	si, month_table
  5357                                  		;add	si, cx
  5358                                  		;; 16/10/2022
  5359                                  		;; ds must be same with cs here, if so..
  5360                                  		;; what for cs: prefixes are used !?)
  5361                                  		;; mov	ax, [cs:si]
  5362                                  		;; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  5363                                  		;mov	ax, [si]	; mov ax, [cs:si]
  5364                                  		;			; get #	days in	previous months
  5365                                  		;add	[cs:daycnt2], ax
  5366                                  
  5367                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  5368                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:1907h
  5369 000018FF B400                    		mov	ah, 0
  5370 00001901 BE[8F04]                		mov	si, month_tab
  5371                                  r_d_sum_loop:
  5372 00001904 AC                      		lodsb
  5373 00001905 0106[0006]              		add	[daycnt2], ax
  5374 00001909 E2F9                    		loop	r_d_sum_loop
  5375                                  r_d_ret:
  5376                                  		;mov	si, [cs:daycnt2]
  5377                                  		; 08/08/2023
  5378 0000190B 8B36[0006]              		mov	si, [daycnt2]
  5379 0000190F 5A                      		pop	dx
  5380 00001910 59                      		pop	cx
  5381 00001911 5B                      		pop	bx
  5382 00001912 58                      		pop	ax
  5383 00001913 C3                      		retn
  5384                                  
  5385                                  ;-----------------------------------------------------------------------------
  5386                                  
  5387                                  r_t_retj:				
  5388 00001914 31C9                    		xor	cx, cx
  5389 00001916 31D2                    		xor	dx, dx
  5390 00001918 EB38                    		jmp	short r_t_ret
  5391                                  
  5392                                  ; =============== S U B	R O U T	I N E ========================================
  5393                                  
  5394                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  5395                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  5396                                  
  5397                                  read_real_time:	; proc near		
  5398 0000191A B402                    		mov	ah, 2
  5399 0000191C CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  5400                                  					; Return: CH = hours in	BCD
  5401                                  					; CL = minutes in BCD
  5402                                  					; DH = seconds in BCD
  5403 0000191E 72F4                    		jb	short r_t_retj
  5404 00001920 882E[FC05]              		mov	[bin_date_time], ch ; hours
  5405 00001924 880E[FD05]              		mov	[bin_date_time+1], cl ; minutes
  5406 00001928 8836[FE05]              		mov	[bin_date_time+2], dh ; seconds
  5407 0000192C C606[FF05]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  5408 00001931 E89F00                  		call	bcd_verify
  5409 00001934 72DE                    		jb	short r_t_retj
  5410 00001936 E88500                  		call	time_verify
  5411 00001939 72D9                    		jb	short r_t_retj
  5412 0000193B E81500                  		call	in_bin		; from bcd to bin
  5413 0000193E 8A2E[FC05]              		mov	ch, [bin_date_time]
  5414 00001942 8A0E[FD05]              		mov	cl, [bin_date_time+1]
  5415 00001946 8A36[FE05]              		mov	dh, [bin_date_time+2]
  5416 0000194A 8A16[FF05]              		mov	dl, [bin_date_time+3]
  5417                                  		; 16/10/2022
  5418                                  		; 17/09/2022
  5419                                  		; 31/05/2019
  5420 0000194E FF1E[0606]              		call	far [ttticks] 
  5421                                  		;call	dword ptr ttticks ; note: indirect far call
  5422                                  					; cx:dx	= number of ticks
  5423                                  					; (at 18.2 ticks per sec.)
  5424                                  r_t_ret:				
  5425 00001952 C3                      		retn
  5426                                  
  5427                                  ; =============== S U B	R O U T	I N E =======================================
  5428                                  
  5429                                  ;   in_bin converts bin_date_time values from bcd to bin
  5430                                  
  5431                                  in_bin:		; proc near
  5432 00001953 A0[FC05]                		mov	al, [bin_date_time] ; century or hours
  5433 00001956 E81F00                  		call	bcd_to_bin
  5434 00001959 A2[FC05]                		mov	[bin_date_time], al
  5435 0000195C A0[FD05]                		mov	al, [bin_date_time+1] ; years or minutes
  5436 0000195F E81600                  		call	bcd_to_bin
  5437 00001962 A2[FD05]                		mov	[bin_date_time+1], al
  5438 00001965 A0[FE05]                		mov	al, [bin_date_time+2] ; months or seconds
  5439 00001968 E80D00                  		call	bcd_to_bin
  5440 0000196B A2[FE05]                		mov	[bin_date_time+2], al
  5441 0000196E A0[FF05]                		mov	al, [bin_date_time+3] ; days (not used for time)
  5442 00001971 E80400                  		call	bcd_to_bin
  5443 00001974 A2[FF05]                		mov	[bin_date_time+3], al
  5444 00001977 C3                      		retn
  5445                                  
  5446                                  ; =============== S U B	R O U T	I N E =======================================
  5447                                  
  5448                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  5449                                  ;   a binary representation in al
  5450                                  ;   ah is destroyed
  5451                                  
  5452                                  bcd_to_bin:	; proc near
  5453 00001978 88C4                    		mov	ah, al
  5454 0000197A 240F                    		and	al, 0Fh
  5455 0000197C B104                    		mov	cl, 4
  5456 0000197E D2EC                    		shr	ah, cl
  5457 00001980 D50A                    		aad
  5458 00001982 C3                      		retn
  5459                                  
  5460                                  ; =============== S U B	R O U T	I N E ========================================
  5461                                  
  5462                                  ;   date_verify loosely checks bcd date values to be in range
  5463                                  ;   in bin_date_time
  5464                                  
  5465                                  date_verify:	; proc near
  5466 00001983 803E[FC05]20            		cmp	byte [bin_date_time], 20h ; century check
  5467 00001988 7732                    		ja	short date_error
  5468 0000198A 740E                    		jz	short century_20 ; jmp in 21th century
  5469 0000198C 803E[FC05]19            		cmp	byte [bin_date_time], 19h ; century check
  5470                                  		;jb	short date_error
  5471                                  		; 12/12/2022
  5472 00001991 722A                    		jb	short date_err2
  5473 00001993 803E[FD05]80            		cmp	byte [bin_date_time+1], 80h ; year check
  5474                                  		;jb	short date_error
  5475                                  		; 12/12/2022
  5476 00001998 7223                    		jb	short date_err2
  5477                                  century_20:
  5478 0000199A 803E[FD05]99            		cmp	byte [bin_date_time+1], 99h ; year check
  5479 0000199F 771B                    		ja	short date_error
  5480 000019A1 803E[FE05]12            		cmp	byte [bin_date_time+2], 12h ; month check
  5481 000019A6 7714                    		ja	short date_error
  5482 000019A8 803E[FE05]00            		cmp	byte [bin_date_time+2], 0
  5483                                  		;jbe	short date_error
  5484 000019AD 760D                    		jna	short date_error
  5485 000019AF 803E[FF05]31            		cmp	byte [bin_date_time+3], 31h ; day check
  5486 000019B4 7706                    		ja	short date_error
  5487                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  5488                                  		;;jbe	short date_error
  5489                                  		;jna	short date_error
  5490                                  		; 12/12/2022
  5491                                  		; cf=0
  5492                                  		;clc
  5493                                  		; 12/12/2022
  5494 000019B6 803E[FF05]01            		cmp	byte [bin_date_time+3], 1 ; day check
  5495 000019BB C3                      		retn
  5496                                  ;-----------------------------------------------------------------------------
  5497                                  
  5498                                  date_error:
  5499 000019BC F9                      		stc
  5500                                  date_err2:
  5501 000019BD C3                      		retn
  5502                                  
  5503                                  ; =============== S U B	R O U T	I N E ========================================
  5504                                  
  5505                                  ; time_verify very loosely checks bcd date values to be in range
  5506                                  ; in bin_date_time
  5507                                  
  5508                                  time_verify:	; proc near
  5509 000019BE 803E[FC05]24            		cmp	byte [bin_date_time], 24h ; hour check
  5510 000019C3 770C                    		ja	short time_error
  5511 000019C5 803E[FD05]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  5512 000019CA 7705                    		ja	short time_error
  5513                                  		; 12/12/2022h
  5514                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  5515                                  		;ja	short time_error
  5516                                  		;clc
  5517                                  		;retn
  5518                                  		; 12/12/2022
  5519 000019CC 803E[FE05]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  5520                                  time_error:
  5521                                  bv_error:
  5522 000019D1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  5523 000019D2 C3                      		retn
  5524                                  
  5525                                  ; ----------------------------------------------------------------------------
  5526                                  
  5527                                  ;time_error:				
  5528                                  		;stc
  5529                                  		;retn
  5530                                  
  5531                                  ; =============== S U B	R O U T	I N E ========================================
  5532                                  
  5533                                  ;   bcd_verify checks values in bin_date_time to be valid
  5534                                  ;   bcd numerals.  carry set if any nibble out of range
  5535                                  
  5536                                  bcd_verify:	; proc near
  5537 000019D3 B90400                  		mov	cx, 4		; 4 bytes to check
  5538 000019D6 BB[FC05]                		mov	bx, bin_date_time
  5539                                  bv_loop:
  5540 000019D9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  5541 000019DB 88C4                    		mov	ah, al
  5542 000019DD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  5543                                  					; is 1's place in range?
  5544 000019E0 3C0A                    		cmp	al, 10
  5545 000019E2 77ED                    		ja	short bv_error	; jmp out of range
  5546 000019E4 D0EC                    		shr	ah, 1
  5547 000019E6 D0EC                    		shr	ah, 1
  5548 000019E8 D0EC                    		shr	ah, 1
  5549 000019EA D0EC                    		shr	ah, 1
  5550 000019EC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  5551 000019EF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  5552 000019F2 77DD                    		ja	short bv_error	; jmp out of range
  5553 000019F4 43                      		inc	bx		; next byte
  5554 000019F5 49                      		dec	cx
  5555 000019F6 75E1                    		jnz	short bv_loop
  5556 000019F8 F8                      		clc			; set success flag
  5557 000019F9 C3                      		retn
  5558                                  ; ----------------------------------------------------------------------------
  5559                                  
  5560                                  		; 12/12/2022
  5561                                  ;bv_error:
  5562                                  		;stc			; set error flag
  5563                                  		;retn
  5564                                  
  5565                                  ; ----------------------------------------------------------------------------
  5566                                  
  5567                                  endk09:
  5568                                  
  5569                                  ; ----------------------------------------------------------------------------
  5570                                  
  5571                                  ;------------------------------------------------------------------------
  5572                                  ;									:
  5573                                  ;	System initialization						:
  5574                                  ;									:
  5575                                  ;	The entry conditions are established by the bootstrap		:
  5576                                  ;	loader and are considered unknown. The following jobs		:
  5577                                  ;	will be performed by this module:				:
  5578                                  ;									:
  5579                                  ;	1.	All device initialization is performed			:
  5580                                  ;	2.	A local stack is set up and DS:SI are set		:
  5581                                  ;		to point to an initialization table. Then		:
  5582                                  ;		an inter-segment call is made to the first		:
  5583                                  ;		byte of the dos 					:
  5584                                  ;	3.	Once the dos returns from this call the ds		:
  5585                                  ;		register has been set up to point to the start		:
  5586                                  ;		of free memory. The initialization will then		:
  5587                                  ;		load the command program into this area 		:
  5588                                  ;		beginning at 100 hex and transfer control to		:
  5589                                  ;		this program.						:
  5590                                  ;									:
  5591                                  ;------------------------------------------------------------------------
  5592                                  
  5593                                  ; 01/10/2022
  5594                                  ; 08/01/2018 - Retro DOS v4.0
  5595                                  
  5596                                  ; drvfat must be the first location of freeable space!
  5597                                  
  5598                                  align 2
  5599                                  		;db 90h
  5600                                  
  5601                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM 7.1)
  5602                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A0Ch)
  5603                                  
  5604                                  ; 30/12/2022
  5605                                  ; (MSDOS 6.21 IO.SYS, BIOSDATA:16D6h)
  5606                                  	
  5607 000019FA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  5608                                  ; 09/12/2023
  5609                                  ;bios_l:	dw 0			; first	sector of data (low word)
  5610                                  ;bios_h:	dw 0			; first	sector of data (high word)
  5611                                  First_Data_Sector:
  5612 000019FC 0000                    		dw 0
  5613 000019FE 0000                    		dw 0
  5614 00001A00 0000                    doscnt:		dw 0			; how many sectors to read
  5615                                  ;fbigfat:	db 0			; flags	for drive
  5616 00001A02 0000                    fatloc:		dw 0			; seg addr of fat sector
  5617 00001A04 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  5618                                  ; 09/12/2023
  5619 00001A06 00                      fbigfat:	db 0			; flags	for drive
  5620 00001A07 80                      rom_drv_num:	db 80h			; rom drive number
  5621 00001A08 0002                    md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  5622                                  ; 12/12/2023
  5623                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  5624 00001A0A FFFF                    last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  5625                                  
  5626                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  5627                                  ; call to determine drive parameters.
  5628                                  
  5629 00001A0C 02                      num_heads:	db 2	; dw 2		; number of heads returned by rom
  5630 00001A0D 00                      		db 0	; 09/12/2023
  5631                                  ;sec_trk:	db 9			; sec/trk returned by rom
  5632 00001A0E 28                      num_cyln:	db 40	; dw 40		; number of cylinders returned by rom
  5633 00001A0F 00                      		db 0	; 09/12/2023
  5634                                  ; 09/12/2023
  5635 00001A10 09                      sec_trk:	db 9			; sec/trk returned by rom
  5636 00001A11 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  5637                                  
  5638                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  5639                                  Orig_Int1Eh_Table:
  5640 00001A12 0000                    		dw 0
  5641 00001A14 0000                    		dw 0
  5642                                  
  5643                                  ; ----------------------------------------------------------------------------
  5644                                  
  5645                                  ; 09/12/2023
  5646                                  %if 0
  5647                                  
  5648                                  disktable:	dw 512,	0100h, 64, 0	; warning !!! old values
  5649                                  		dw 2048, 0201h, 112, 0
  5650                                  		dw 8192, 0402h, 256, 0
  5651                                  		dw 32680, 0803h, 512, 0	; warning !!! old values
  5652                                  		dw 65535, 1004h, 1024, 0
  5653                                  					; default disktable under
  5654                                  					; the assumption of total fat size <= 128 kb,
  5655                                  					; and the maximum size of fat entry = 16 bit.
  5656                                  %endif
  5657                                  
  5658                                  ; 09/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM 7.1)
  5659                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A2Ah)
  5660                                  
  5661                                  		; 09/12/2023
  5662                                  		; 08/08/2023
  5663                                  		; disktable.totalsectors: resw 1 ; high word
  5664                                  		;			  resw 1 ; low word
  5665                                  		; disktable.shiftcount:   resb 1
  5666                                  		; disktable.secperclus:   resb 1
  5667                                  		; disktable.rdirentries:  resw 1
  5668                                  		; disktable.bigflag:      resw 1
  5669 00001A16 0000A87F0308000200-     disktable2:	dw 0, 32680, 0803h, 512, 0 ; for compatibility.
  5669 00001A1F 00                 
  5670                                  					   ; (32680 sectors, 16340 KB)
  5671 00001A20 040000000204000240-     		dw 4, 0, 0402h, 512, 40h   ; covers upto 134 mb media.
  5671 00001A29 00                 
  5672                                  					   ; fbig = 40h  ; (40000h sectors = 128 MB)
  5673 00001A2A 080000000308000240-     		dw 8, 0, 0803h, 512, 40h   ; upto 268 mb ; (80000h sectors = 256 MB)
  5673 00001A33 00                 
  5674 00001A34 100000000410000240-     		dw 16, 0, 1004h, 512, 40h  ; upto 536 mb ; (100000h sectors = 512 MB)
  5674 00001A3D 00                 
  5675 00001A3E 200000000520000240-     		dw 32, 0, 2005h, 512, 40h  ; upto 1072 mb ; (200000h sectors = 1024 MB)
  5675 00001A47 00                 
  5676 00001A48 400000000640000240-     		dw 64, 0, 4006h, 512, 40h  ; upto 2144 mb ; (400000h sectors = 2048 MB)
  5676 00001A51 00                 
  5677                                  		; 09/12/2023
  5678                                  		;dw 128, 0, 8007h, 512, 40h ; upto 4288 mb ; (800000h sectors = 4096 MB)
  5679 00001A52 FFFFFFFF0308000060-     		dw 0FFFFh, 0FFFFh, 0803h, 0, 60h ; FAT32 (> 2144MB)
  5679 00001A5B 00                 
  5680                                  					   ; (fbig and fbigbig flags are set)			
  5681                                  			
  5682                                  ; ----------------------------------------------------------------------------
  5683                                  
  5684                                  ;******************************************************
  5685                                  ;variables for mini disk initialization
  5686                                  ;******************************************************
  5687                                  
  5688                                  ; 01/10/2022
  5689                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  5690                                  
  5691 00001A5C 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  5692 00001A5D 00                      hnum:		db 0			; real number of hardfiles
  5693 00001A5E [3C05]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  5694 00001A60 [4C08]                  end_of_bdss:	dw bdss			; offset value of the ending address
  5695                                  					; of bds table. needed to figure out
  5696                                  					; the dosdatasg address.
  5697 00001A62 0000                    mini_hdlim:	dw 0			
  5698 00001A64 0000                    mini_seclim:	dw 0
  5699                                  
  5700                                  ; 19/12/2023
  5701                                  ; 09/12/2023
  5702                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A7Ah)
  5703                                  ;ld_p_number:	dw 2BADh		; (for 'find_mini_partition' proc)
  5704                                  
  5705                                  ;end of mini disk init variables **********************
  5706                                  
  5707                                  ; ----------------------------------------------------------------------------
  5708                                  			
  5709 00001A66 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  5710                                  
  5711                                  ; 13/12/2022
  5712                                  %if 0
  5713                                  
  5714                                  ;align 2
  5715                                  		db  90h	
  5716                                  
  5717                                  ; the following are the recommended bpbs for the media that we know of so far.
  5718                                  
  5719                                  ;struc bpbx
  5720                                  ;   resw 1 ; 512
  5721                                  ;   resb 1
  5722                                  ;   resw 1 ; 1
  5723                                  ;   resb 1 ; 2
  5724                                  ;   resw 1
  5725                                  ;   resw 1
  5726                                  ;   resb 1
  5727                                  ;   resw 1
  5728                                  ;   resw 1
  5729                                  ;   resw 1 ; 2
  5730                                  ;   resw 1
  5731                                  ;   resw 1 ; hidden sector high
  5732                                  ;   resd 1 ; extended total sectors
  5733                                  ;.size:
  5734                                  ;endstruc
  5735                                  
  5736                                  ; 08/01/2019 - Retro DOS v4.0
  5737                                  
  5738                                  ; 20/04/2019
  5739                                  
  5740                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  5741                                  
  5742                                  ; 09/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  5743                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1A86h)
  5744                                  
  5745                                  ; 09/12/2022
  5746                                  BPB48T:
  5747                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  5748                                  		; 48 tpi diskettes	;
  5749                                  		dw	512		; physical sector size in bytes
  5750                                  		db	2		; sectors/allocation unit
  5751                                  		dw	1		; reserved sectors for dos
  5752                                  		db	2		; number of allocation tables
  5753                                  		dw	112		; number of directory entries
  5754                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  5755                                  		db	0FDh		; media descriptor
  5756                                  		dw	2		; number of fat sectors
  5757                                  		dw	9		; sectors per track
  5758                                  		dw	2		; heads
  5759                                  		dw	0		; hidden sector count (low word)
  5760                                  		dw	0		; hidden sector (high)
  5761                                  		dw	0		; number of sectors (low)
  5762                                  		dw	0		; number of sectors (high)
  5763                                  		; 09/12/2023
  5764                                  		; FAT32 extensions (to BDS)
  5765                                  		times	28 db 0
  5766                                  		;
  5767                                  		db 90h
  5768                                  ;align 2
  5769                                  BPB96T:
  5770                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  5771                                  		; 96 tpi diskettes	;
  5772                                  		dw	512		; physical sector size in bytes
  5773                                  		db	1		; sectors/allocation unit
  5774                                  		dw	1		; reserved sectors for dos
  5775                                  		db	2		; number of allocation tables
  5776                                  		dw	224		; number of directory entries
  5777                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  5778                                  		db	0F9h		; media descriptor
  5779                                  		dw	7		; number of fat sectors
  5780                                  		dw	15		; sectors per track
  5781                                  		dw	2		; heads
  5782                                  		dw	0		; hidden sector count (low word)
  5783                                  		dw	0		; hidden sector (high)
  5784                                  		dw	0		; number of sectors (low)
  5785                                  		dw	0		; number of sectors (high)
  5786                                  		; 09/12/2023
  5787                                  		; FAT32 extensions (to BDS)
  5788                                  		times	28 db 0
  5789                                  		;
  5790                                  		db 90h
  5791                                  ;align 2
  5792                                  BPB35:
  5793                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  5794                                  		; 3.5" diskettes - 720 KB ;		
  5795                                  		dw	512		; physical sector size in bytes
  5796                                  		db	2		; sectors/allocation unit
  5797                                  		dw	1		; reserved sectors for dos
  5798                                  		db	2		; number of allocation tables
  5799                                  		dw	112		; number of directory entries
  5800                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  5801                                  		db	0F9h		; media descriptor
  5802                                  		dw	3		; number of fat sectors
  5803                                  		dw	9		; sectors per track
  5804                                  		dw	2		; heads
  5805                                  		dw	0		; hidden sector count (low word)
  5806                                  		dw	0		; hidden sector (high)
  5807                                  		dw	0		; number of sectors (low)
  5808                                  		dw	0		; number of sectors (high)
  5809                                  		; 09/12/2023
  5810                                  		; FAT32 extensions (to BDS)
  5811                                  		times	28 db 0
  5812                                  		;
  5813                                  		db 90h
  5814                                  ;align 2
  5815                                  
  5816                                  ;align 2
  5817                                  ;BPB144:
  5818                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  5819                                  ;
  5820                                  ;		dw	512		; physical sector size in bytes
  5821                                  ;		db	1		; sectors/allocation unit
  5822                                  ;		dw	1		; reserved sectors for dos
  5823                                  ;		db	2		; number of allocation tables
  5824                                  ;		dw	224		; number of directory entries
  5825                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  5826                                  ;		db	0F0h		; media descriptor
  5827                                  ;		dw	9		; number of fat sectors
  5828                                  ;		dw	18		; sectors per track
  5829                                  ;		dw	2		; heads
  5830                                  ;		dw	0		; hidden sector count (low word)
  5831                                  ;		dw	0		; hidden sector (high)
  5832                                  ;		dw	0		; number of sectors (low)
  5833                                  ;		dw	0		; number of sectors (high)
  5834                                  ;
  5835                                  ;		db 90h
  5836                                  ;align 2
  5837                                  
  5838                                  BPB288:
  5839                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  5840                                  		; 3.5" diskettes - 2.88 MB ;	 
  5841                                  		dw	512		; physical sector size in bytes
  5842                                  		db	2		; sectors/allocation unit
  5843                                  		dw	1		; reserved sectors for dos
  5844                                  		db	2		; number of allocation tables
  5845                                  		dw	240		; number of directory entries
  5846                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  5847                                  		db	0F0h		; media descriptor
  5848                                  		dw	3		; number of fat sectors
  5849                                  		dw	9		; sectors per track
  5850                                  		dw	2		; heads
  5851                                  		dw	0		; hidden sector count (low word)
  5852                                  		dw	0		; hidden sector (high)
  5853                                  		dw	0		; number of sectors (low)
  5854                                  		dw	0		; number of sectors (high)
  5855                                  		; 09/12/2023
  5856                                  		; FAT32 extensions (to BDS)
  5857                                  		times	28 db 0
  5858                                  		;
  5859                                  		db 90h
  5860                                  ;align 2
  5861                                  
  5862                                  %endif
  5863                                  
  5864                                  ; ----------------------------------------------------------------------------
  5865                                  					; align	2
  5866                                  ; 09/12/2022
  5867                                  %if 0
  5868                                  bpbtable:	dw bpb48t		; 48tpi	drives
  5869                                  		dw bpb96t		; 96tpi	drives
  5870                                  		dw bpb35		; 3.5" drives
  5871                                  		dw bpb35		; unused 8" diskette
  5872                                  		dw bpb35		; unused 8" diskette
  5873                                  		dw bpb35		; used for hard	disk
  5874                                  		dw bpb35		; used for tape	drive
  5875                                  		dw bpb35		; FFOTHER
  5876                                  		dw bpb35		; ERIMO
  5877                                  		dw bpb288		; 2.88MB drive
  5878                                  		;
  5879                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  5880                                  %endif
  5881                                  
  5882                                  ; 13/12/2022
  5883                                  %if 0
  5884                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  5885                                  		dw BPB96T		; 96tpi	drives
  5886                                  		dw BPB35		; 3.5" drives
  5887                                  		dw BPB35		; unused 8" diskette
  5888                                  		dw BPB35		; unused 8" diskette
  5889                                  		dw BPB35		; used for hard	disk
  5890                                  		dw BPB35		; used for tape	drive
  5891                                  		dw BPB35		; FFOTHER
  5892                                  		dw BPB35		; ERIMO
  5893                                  		dw BPB288		; 2.88MB drive
  5894                                  		;
  5895                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  5896                                  
  5897                                  %endif
  5898                                  
  5899                                  ; ----------------------------------------------------------------------------
  5900                                  
  5901                                  ;	entry point to call utility functions in Bios_Code. At this time,
  5902                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  5903                                  ;	  will not yet be moved to its final resting place, so we know
  5904                                  ;	  it'll be low.
  5905                                  ;
  5906                                  ;	to use this function, do a "push cs" and load bp with the offset of
  5907                                  ;	  the function you want to call in Bios_Code. This routine will
  5908                                  ;	  push the address of a retf in Bios_Code onto the stack which
  5909                                  ;	  will get executed when the utility function finishes. It will
  5910                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  5911                                  ;	  and a retf
  5912                                  
  5913                                  ; 16/10/2022
  5914                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  5915                                  ; 09/12/2022
  5916                                  BC_RETF equ bc_retf
  5917                                  
  5918                                  ; 09/12/2023
  5919                                  ;PCDOS 7.1 IBMBIO.COM bc_retf offset = 0CAh (in BIOSCODE segment = 364h)
  5920                                  
  5921                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  5922                                  					; 2C7h:0C8h = 70h:2638h
  5923                                  					; 09/12/2023
  5924                                  					; 364h:0CAh = 70h:300Ah ; PCDOS 7.1
  5925 00001A6F [CA00]                  		dw BC_RETF		; dw 0CAh
  5926                                  
  5927                                  ; ----------------------------------------------------------------------------
  5928                                  
  5929                                  call_bios_code:	; proc far			
  5930 00001A71 2EFF36[6F1A]            		push	word [cs:addr_of_bcretf] 
  5931                                  					; set up near return to far return
  5932 00001A76 2EFF36[0406]            		push	word [cs:cdev+2] ; push Bios_Code segment
  5933 00001A7B 55                      		push	bp		; save offset of utility function
  5934 00001A7C CB                      		retf			; far jump to (DOS)BIOS code
  5935                                  
  5936                                  ; ----------------------------------------------------------------------------
  5937                                  
  5938                                  		; 09/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  5939                                  		; 20/12/2022
  5940 00001A7D 00                      flp_drvs:	db 0
  5941                                  		; 11/12/2023
  5942                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:1B81h)
  5943                                  firstcluster_hw: 
  5944 00001A7E 00                      		db 0
  5945 00001A7F 00                      Boot_Drv:	db 0
  5946                                  
  5947                                  ; ----------------------------------------------------------------------------
  5948                                  
  5949                                  ; 09/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  5950                                  ;-----------------------------------------------------------------------------
  5951                                  ; PCDOS 7.1 CD BOOT option code 
  5952                                  ;-----------------------------------------------------------------------------
  5953                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1B84h)
  5954                                  
  5955                                  cd_boot_option:
  5956 00001A80 50                      		push	ax
  5957 00001A81 1E                      		push	ds
  5958 00001A82 06                      		push	es
  5959 00001A83 52                      		push	dx
  5960                                  cdbo_1:
  5961 00001A84 B401                    		mov	ah, 1
  5962 00001A86 CD16                    		int	16h			; KEYBOARD - status
  5963 00001A88 7406                    		jz	short cdbo_2
  5964 00001A8A 30E4                    		xor	ah,ah
  5965 00001A8C CD16                    		int	16h			; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  5966                                  						; Return: AH = scan code, AL = character
  5967 00001A8E EBF4                    		jmp	short cdbo_1
  5968                                  cdbo_2:
  5969 00001A90 0E                      		push	cs
  5970 00001A91 1F                      		pop	ds
  5971 00001A92 BE[6A1B]                		mov	si, cd_boot_msg		; "Press the ENTER key to boot from CD"...
  5972 00001A95 AC                      		lodsb
  5973                                  cdbo_3:
  5974 00001A96 BB0700                  		mov	bx, 7
  5975 00001A99 B40E                    		mov	ah, 0Eh
  5976 00001A9B CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  5977                                  						; AL = character, BH = display page (alpha modes)
  5978                                  						; BL = foreground color (graphics modes)
  5979 00001A9D AC                      		lodsb
  5980 00001A9E 08C0                    		or	al, al
  5981 00001AA0 75F4                    		jnz	short cdbo_3
  5982 00001AA2 B84000                  		mov	ax, 40h
  5983 00001AA5 8ED8                    		mov	ds, ax
  5984                                  		;mov	bx, [6Ch]		; 0:46Ch = Daily timer counter (4 bytes)
  5985                                  		; 09/12/2023
  5986 00001AA7 8B166C00                		mov	dx, [6Ch]
  5987 00001AAB 8B366E00                		mov	si, [6Eh]
  5988                                  wait_for_key:
  5989                                  		;push	bx
  5990                                  		;mov	bx, 7
  5991                                  		; bx = 7
  5992 00001AAF B8080E                  		mov	ax, 0E08h
  5993 00001AB2 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  5994                                  						; AL = character, BH = display page (alpha modes)
  5995                                  						; BL = foreground color (graphics modes)
  5996 00001AB4 B8200E                  		mov	ax, 0E20h
  5997 00001AB7 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  5998                                  						; AL = character, BH = display page (alpha modes)
  5999                                  						; BL = foreground color (graphics modes)
  6000 00001AB9 B8080E                  		mov	ax, 0E08h
  6001 00001ABC CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  6002                                  						; AL = character, BH = display page (alpha modes)
  6003                                  						; BL = foreground color (graphics modes)
  6004                                  		;pop	bx
  6005                                  		;add	bx, 18			; 18.2 ticks per second
  6006                                  		; 09/12/2023
  6007 00001ABE 83C212                  		add	dx, 18
  6008 00001AC1 83D600                  		adc	si, 0			; next second (if carry flag is 1)
  6009                                  continue_to_wait:
  6010 00001AC4 B401                    		mov	ah, 1
  6011 00001AC6 CD16                    		int	16h			; KEYBOARD - status
  6012 00001AC8 741B                    		jz	short cdbo_5
  6013 00001ACA B400                    		mov	ah, 0
  6014 00001ACC CD16                    		int	16h			; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  6015                                  						; Return: AH = scan code, AL = character
  6016                                  
  6017                                  		; 09/12/2023
  6018                                  		;cmp	ax, 11Bh ; ESC key
  6019                                  		;jz	short cdb0_7
  6020                                  ;cdbo_4:
  6021                                  		;push	ax ; *
  6022 00001ACE 89C2                    		mov	dx, ax ; *
  6023                                  
  6024                                  		; CRLF (next line)
  6025                                  		;mov	bx, 7
  6026                                  		; bx = 7
  6027 00001AD0 B80D0E                  		mov	ax, 0E0Dh
  6028 00001AD3 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  6029                                  						; AL = character, BH = display page (alpha modes)
  6030                                  						; BL = foreground color (graphics modes)
  6031 00001AD5 B80A0E                  		mov	ax, 0E0Ah
  6032 00001AD8 CD10                    		int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  6033                                  						; AL = character, BH = display page (alpha modes)
  6034                                  						; BL = foreground color (graphics modes)
  6035                                  		; 09/12/2023
  6036                                  		;pop	ax ; *
  6037                                  			
  6038 00001ADA 81FA1B01                		cmp	dx, 11Bh
  6039                                  		;cmp	ax, 11Bh ; ESC key (to cancel CD/DVD boot)
  6040 00001ADE 7418                    		je	short cdbo_7
  6041                                  
  6042                                  cdbo_4:		; 10/12/2023
  6043 00001AE0 5A                      		pop	dx
  6044 00001AE1 07                      		pop	es
  6045 00001AE2 1F                      		pop	ds
  6046 00001AE3 58                      		pop	ax
  6047 00001AE4 C3                      		retn
  6048                                  cdbo_5:
  6049 00001AE5 3B366E00                		cmp	si, [6Eh]
  6050 00001AE9 7504                    		jnz	short cdbo_6
  6051                                  		; 09/12/2023
  6052 00001AEB 3B166C00                		cmp	dx, [6Ch]
  6053                                  		;cmp	bx, [6Ch]
  6054                                  cdbo_6:
  6055 00001AEF 73D3                    		jnb	short continue_to_wait
  6056 00001AF1 2EFE0E[691B]            		dec	byte [cs:time_counter]
  6057 00001AF6 75B7                    		jnz	short wait_for_key
  6058                                  cdbo_7:
  6059                                  		; 09/12/2023
  6060                                  		; CRLF (next line)
  6061                                  		;
  6062                                  		;mov	bx, 7
  6063                                  		;mov	ax, 0E0Dh
  6064                                  		;int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  6065                                  		;				; AL = character, BH = display page (alpha modes)
  6066                                  		;				; BL = foreground color (graphics modes)
  6067                                  		;mov	ax, 0E0Ah
  6068                                  		;int	10h			; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  6069                                  		;				; AL = character, BH = display page (alpha modes)
  6070                                  		;				; BL = foreground color (graphics modes)
  6071                                  		
  6072 00001AF8 0E                      		push	cs
  6073 00001AF9 1F                      		pop	ds
  6074                                  		; 09/12/2023
  6075 00001AFA 1E                      		push	ds
  6076 00001AFB 07                      		pop	es
  6077                                  		; es = ds = cs
  6078                                  
  6079 00001AFC B8004B                  		mov	ax, 4B00h
  6080                                  		;xor	dl, dl
  6081                                  		; 09/12/2023
  6082 00001AFF 31D2                    		xor	dx, dx
  6083                                  		; dl = disk drive = 0  ; fd
  6084                                  		;mov	si, 1C93h
  6085 00001B01 BE[561B]                		mov	si, empty_dap_buff
  6086 00001B04 CD13                    		int	13h			; DISK - Bootable CD-ROM - AL = TERMINATE DISK EMULATION
  6087                                  		; DS:SI = Specification packet filled		
  6088                                  
  6089                                  		;mov	dx, 80h
  6090                                  		;xor	ax, ax
  6091                                  		; 09/12/2023
  6092 00001B06 B81300                  		mov	ax, 19
  6093 00001B09 89F7                    		mov	di, si	
  6094                                  		;mov	byte [si], 13h
  6095                                  		;mov	[si+1], al
  6096 00001B0B AB                      		stosw	
  6097                                  		;mov	[si+2], dx
  6098 00001B0C B080                    		mov	al, 80h
  6099 00001B0E AB                      		stosw
  6100 00001B0F 89C2                    		mov	dx, ax
  6101                                  		;mov	[si+4], ax
  6102                                  		;mov	[si+6], ax
  6103                                  		;mov	[si+8], ax
  6104                                  		;mov	[si+0Ah], ax
  6105                                  		;mov	[si+0Ch], ax
  6106                                  		;mov	[si+0Eh], ax
  6107                                  		;mov	[si+10h], al
  6108                                  		;mov	[si+11h], al
  6109                                  		;mov	[si+12h], al
  6110 00001B11 B90F00                  		mov	cx, 15
  6111 00001B14 F3AA                    		rep	stosb
  6112                                  		; dl = disk drive = 80h ; hd
  6113 00001B16 B8004B                  		mov	ax, 4B00h
  6114 00001B19 CD13                    		int	13h			; DISK - Bootable CD-ROM - AL = TERMINATE DISK EMULATION
  6115 00001B1B 31C0                    		xor	ax, ax
  6116                                  		; 09/12/2023
  6117                                  		;mov	dx, 80h
  6118                                  		; dx = 80h
  6119 00001B1D CD13                    		int	13h			; DISK - RESET DISK SYSTEM
  6120                                  						; DL = drive (if bit 7 is set both hard disks and floppy disks reset)
  6121                                  		; 09/12/2023
  6122                                  		;push	cs
  6123                                  		;pop	es
  6124                                  		; es = ds = cs		
  6125                                  
  6126 00001B1F B80102                  		mov	ax, 201h
  6127                                  		;mov	bx, 152h
  6128 00001B22 BB[5201]                		mov	bx, disksector
  6129                                  		;mov	cx, 1
  6130                                  		; 09/12/2023
  6131 00001B25 41                      		inc	cx ; cx = 1
  6132                                  		;mov	dx, 80h
  6133                                  		; dx = 80h
  6134 00001B26 CD13                    		int	13h			; DISK - READ SECTORS INTO MEMORY
  6135                                  						; AL = number of sectors to read, CH = track, CL = sector
  6136                                  						; DH = head, DL = drive, ES:BX -> buffer to fill
  6137                                  						; Return: CF set on error, AH = status, AL = number of sectors read
  6138                                  		;jc	short cdbo_8
  6139                                  		; 10/12/2023
  6140 00001B28 72B6                    		jc	short cdbo_4
  6141                                  
  6142 00001B2A 2681BFFE0155AA          		cmp	word [es:bx+1FEh], 0AA55h
  6143                                  		;jz 	short cdbo_9
  6144                                  		; 10/12/2023
  6145 00001B31 75AD                    		jnz	short cdbo_4
  6146                                  ;cdbo_8:
  6147                                  		;jmp	short cdbo_4
  6148                                  ;cdbo_9:
  6149                                  		; 10/12/2023
  6150                                  		; (stack clearing -pop- is not necessary here, 
  6151                                  		;  PCDOS 7.1 boot sector will set stack pointer again)
  6152                                  		;pop	ax ; near call return address
  6153                                  		;pop	cx ; +++ ; ch = [MediaByte]
  6154                                  
  6155                                  		; 09/12/2023
  6156                                  		;push	cs
  6157                                  		;pop	ds
  6158                                  		; ds = cs
  6159 00001B33 31C0                    		xor	ax, ax	; 0
  6160 00001B35 BF007C                  		mov	di, 7C00h
  6161 00001B38 8EC0                    		mov	es, ax
  6162 00001B3A 89DE                    		mov	si, bx
  6163 00001B3C 06                      		push	es
  6164 00001B3D 57                      		push	di
  6165 00001B3E B90001                  		mov	cx, 100h ; 256
  6166                                  		; 10/12/2023
  6167                                  		;cld	; not necessary (direction flag is already cleared) 
  6168 00001B41 F3A5                    		rep movsw
  6169 00001B43 8ED8                    		mov	ds, ax
  6170 00001B45 BE7800                  		mov	si, 78h
  6171 00001B48 2EA1[121A]              		mov	ax, [cs:Orig_Int1Eh_Table]
  6172 00001B4C 8904                    		mov	[si], ax
  6173 00001B4E 2EA1[141A]              		mov	ax, [cs:Orig_Int1Eh_Table+2]
  6174 00001B52 894402                  		mov	[si+2], ax
  6175 00001B55 CB                      		retf
  6176                                  
  6177                                  ; ---------------------------------------------------------------------------
  6178                                  dap_buffer: ; 16/12/2023
  6179                                  
  6180 00001B56 13                      empty_dap_buff:	db 19
  6181                                  		;db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0  ; db 18 dup(0)
  6182 00001B57 00<rep 12h>             		times 18 db 0
  6183 00001B69 05                      time_counter:	db 5	; 5 seconds
  6184 00001B6A 0D0A                    cd_boot_msg:	db 0Dh,0Ah
  6185                                  		;db 'Press the ENTER key to boot from CD or DVD......',0
  6186                                  		; 09/12/2023
  6187 00001B6C 507265737320616E79-     		db 'Press any key to boot from CD or DVD ...',0
  6187 00001B75 206B657920746F2062-
  6187 00001B7E 6F6F742066726F6D20-
  6187 00001B87 4344206F7220445644-
  6187 00001B90 202E2E2E00         
  6188                                  
  6189                                  ; ----------------------------------------------------------------------------
  6190                                  
  6191                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0)
  6192                                  
  6193                                  ; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1)
  6194                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1CDAh)
  6195                                  
  6196                                  ;-----------------------------------------------------------------------------
  6197                                  ; entry point from boot sector
  6198                                  ;-----------------------------------------------------------------------------
  6199                                  
  6200                                  init:		; 27/12/2018
  6201                                  		; MSDOS 6.0 (MSINIT.ASM)
  6202                                  		;=============================================================
  6203                                  		;
  6204                                  		; entry from boot sector. the register contents are:
  6205                                  		;
  6206                                  		;   dl = int 13 drive number we booted from
  6207                                  		;   ch = media byte
  6208                                  		;   bx = first data sector on disk.
  6209                                  		;   ax = first data sector (high)
  6210                                  		;   di = sectors/fat for the boot media.
  6211                                  
  6212                                  		; 07/04/2018
  6213                                  		;=============================================================
  6214                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  6215                                                  ; DL = [bsDriveNumber]
  6216                                  		; DH = [bsMedia]
  6217                                  		; AX = [bsSectors] ; Total sectors
  6218                                  		; DS = 0, SS = 0
  6219                                  		; BP = 7C00h
  6220                                  
  6221                                  		; 10/12/2023
  6222                                  		; Retro DOS v5.0 (IBMBIO.COM)
  6223                                  		;=============================================================
  6224                                  		; PCDOS 7.1 IBMBIO.COM - registers from MSLOAD section
  6225                                                  ; DL = [BootDrive]
  6226                                  		; CH = [MediaByte]
  6227                                  		; AX:BX = First data Sector
  6228                                  		; DS:SI = Original INT 1Eh table address
  6229                                  		;
  6230                                  		; Stack: INT 1Eh vector (0:78h) !not used! (dword [sp])
  6231                                  		;	 INT 1Eh table address !not used! (dword [sp+4])
  6232                                  		; DI = 78h !not used!
  6233                                   
  6234                                  		; 11/12/2023
  6235                                  		;cli	; not necessary at this stage
  6236                                  
  6237                                  		; 10/12/2023
  6238                                  		;mov	[cs:Orig_Int1Eh_Table+2], ds
  6239                                  		;mov	[cs:Orig_Int1Eh_Table], si
  6240 00001B95 1E                      		push	ds
  6241 00001B96 07                      		pop	es
  6242 00001B97 0E                      		push	cs
  6243 00001B98 1F                      		pop	ds
  6244 00001B99 8C06[141A]              		mov	[Orig_Int1Eh_Table+2], es
  6245 00001B9D 8936[121A]              		mov	[Orig_Int1Eh_Table], si
  6246                                  
  6247                                  		; 21/12/2022
  6248                                  		; ds = 0 (?)
  6249                                  		;push	ax
  6250                                  		;xor	ax, ax
  6251                                  		;mov	ds, ax
  6252                                  		;pop	ax
  6253                                  
  6254                                  ; 02/10/2022
  6255                                  ; ------------------------------------------------------------------------------
  6256                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  6257                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  6258                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  6259                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  6260                                  ;	moves kernel to segment 070h at first, then sets diskette parameters
  6261                                  ;	at segment 50h (while MSDOS 5.0 boot sector sets this).
  6262                                  ; ------------------------------------------------------------------------------
  6263                                  
  6264                                  ; msload will check the extended boot record and set ax, bx accordingly.
  6265                                  
  6266                                  ;	msload passes a 32 bit sector number hi word in ax and low in bx
  6267                                  ;	save this in cs:bios_h and cs:bios_l. this is for the start of
  6268                                  ;	data sector of the bios.
  6269                                  
  6270                                  		;mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  6271                                  		;mov	[cs:bios_l], bx
  6272                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  6273                                  		;mov	[cs:First_Data_Sector+2], ax
  6274                                  		;mov	[cs:First_Data_Sector], bx
  6275                                  		;mov	[cs:Boot_Drv], dl
  6276                                  		; ds = cs
  6277 00001BA1 A3[FE19]                		mov	[First_Data_Sector+2], ax
  6278 00001BA4 891E[FC19]              		mov	[First_Data_Sector], bx
  6279 00001BA8 8816[7F1A]              		mov	[Boot_Drv], dl
  6280                                  	
  6281                                  ; with the following information from msload, we don't need the
  6282                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  6283                                  ;     limitation of msbio.com file.
  6284                                  
  6285 00001BAC 0E                      		push	cs		; Save a peck of interrupt vectors...
  6286 00001BAD 07                      		pop	es
  6287                                  		
  6288 00001BAE 51                      		push	cx ; +++ ; ch = [MediaByte]
  6289                                  		;push	di ; *! (not necessary) ; 10/12/2023
  6290                                  
  6291                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  6292 00001BAF FC                      		cld	; (may not be necessary)
  6293                                  		
  6294 00001BB0 31C0                    		xor	ax, ax
  6295 00001BB2 8ED8                    		mov	ds, ax	; ds = 0
  6296                                  
  6297                                  		;mov	ax, 544h	; SYSINIT segment
  6298 00001BB4 B80505                  		mov	ax, SYSINITSEG
  6299                                  
  6300                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1D06h)
  6301                                  
  6302                                  		; check (1st sector) of the root directory -of BOOT CD-
  6303                                  		; for special names (as boot option signature)
  6304                                  
  6305 00001BB7 BE4005                  		mov	si, 540h  ; ROOT DIRECTORY BUFFER offset 40h 
  6306                                  				  ; (BOOT DRV's root directory the 3rd entry)
  6307                                  chk_boot_hdnoz:
  6308 00001BBA 803C00                  		cmp	byte [si], 0
  6309 00001BBD 7436                    		jz	short chk_no_logo_noz
  6310 00001BBF 813C5F42                		cmp	word [si], 425Fh ; '_BOOT_HDNOZ'
  6311 00001BC3 7527                    		jnz	short chk_next_1
  6312 00001BC5 817C024F4F              		cmp	word [si+2], 4F4Fh ; 'OO'
  6313 00001BCA 7520                    		jnz	short chk_next_1
  6314 00001BCC 817C04545F              		cmp	word [si+4], 5F54h
  6315 00001BD1 7519                    		jnz	short chk_next_1
  6316 00001BD3 817C064844              		cmp	word [si+6], 4448h ; 'HD'
  6317 00001BD8 7512                    		jnz	short chk_next_1
  6318 00001BDA 817C084E4F              		cmp	word [si+8], 4F4Eh
  6319 00001BDF 750B                    		jnz	short chk_next_1
  6320 00001BE1 807C0A5A                		cmp	byte [si+0Ah], 5Ah ; 'Z'
  6321 00001BE5 7505                    		jnz	short chk_next_1
  6322 00001BE7 E896FE                  		call	cd_boot_option
  6323 00001BEA EB09                    		jmp	short chk_no_logo_noz
  6324                                  chk_next_1:
  6325 00001BEC 83C620                  		add	si, 32	; (next entry)
  6326 00001BEF 81FE0007                		cmp	si, 700h
  6327 00001BF3 72C5                    		jb	short chk_boot_hdnoz
  6328                                  chk_no_logo_noz:
  6329 00001BF5 BE4005                  		mov	si, 540h  ; (BOOT DRV's root directory the 3rd entry)
  6330                                  chk_no_logo_noz2_nxt:
  6331 00001BF8 803C00                  		cmp	byte [si], 0
  6332 00001BFB 7431                    		jz	short write_start_msg
  6333 00001BFD 813C4E4F                		cmp	word [si], 4F4Eh ; 'NO_LOGO NOZ'
  6334 00001C01 7522                    		jnz	short chk_next_2
  6335 00001C03 817C025F4C              		cmp	word [si+2], 4C5Fh
  6336 00001C08 751B                    		jnz	short chk_next_2
  6337 00001C0A 817C044F47              		cmp	word [si+4], 474Fh
  6338 00001C0F 7514                    		jnz	short chk_next_2
  6339 00001C11 817C064F20              		cmp	word [si+6], 204Fh
  6340 00001C16 750D                    		jnz	short chk_next_2
  6341 00001C18 817C084E4F              		cmp	word [si+8], 4F4Eh
  6342 00001C1D 7506                    		jnz	short chk_next_2
  6343 00001C1F 807C0A5A                		cmp	byte [si+0Ah], 5Ah
  6344 00001C23 741C                    		jz      short startmsg_ok
  6345                                  chk_next_2:
  6346 00001C25 83C620                  		add	si, 32	; (next entry)
  6347 00001C28 81FE0007                		cmp	si, 700h
  6348 00001C2C 72CA                    		jb	short chk_no_logo_noz2_nxt
  6349                                  write_start_msg:
  6350 00001C2E 8ED8                    		mov	ds, ax	; SYSINIT segment
  6351 00001C30 BE[1D4C]                		mov	si, StartMsg	; "Starting PC DOS...\r\n\n"
  6352                                  startmsg_nxt_chr:
  6353 00001C33 AC                      		lodsb
  6354 00001C34 08C0                    		or	al, al
  6355 00001C36 7409                    		jz	short startmsg_ok
  6356 00001C38 B40E                    		mov     ah, 0Eh
  6357 00001C3A BB0700                  		mov	bx, 7
  6358 00001C3D CD10                    		int	10h             ; - VIDEO - WRITE CHARACTER AND ADVANCE CURSOR (TTY WRITE)
  6359                                  					; AL = character, BH = display page (alpha modes)
  6360                                  					; BL = foreground color (graphics modes)
  6361 00001C3F EBF2                    		jmp	short startmsg_nxt_chr
  6362                                  startmsg_ok:
  6363                                  		; 10/12/2023
  6364                                  		; ds = 0
  6365                                  
  6366                                  		; 21/12/2022
  6367                                  		; ds = 0 (?)
  6368                                  		; 24/12/2022
  6369                                  		; ds = cs
  6370                                  		;xor	cx, cx
  6371                                  		;mov	ds, cx
  6372                                  		; ds = 0
  6373                                  
  6374                                  		;mov	cl, 5
  6375                                  		; 10/12/2023
  6376 00001C41 B90500                  		mov	cx, 5		; NUMROMVECTORS
  6377                                  					; no. of rom vectors to	be saved
  6378                                  		;mov	si, offset RomVectors ; point to list of int vectors
  6379 00001C44 BE[0001]                		mov	si, RomVectors
  6380                                  
  6381                                  		; 10/12/2023
  6382 00001C47 FA                      		cli
  6383                                  next_int_:		
  6384 00001C48 2E                      		cs	; 16/10/2022
  6385 00001C49 AC                      		lodsb		
  6386                                  		;lods	byte ptr cs:[si] ; cs lodsb
  6387 00001C4A 98                      		cbw			; ax = interrupt number
  6388 00001C4B D1E0                    		shl	ax, 1
  6389 00001C4D D1E0                    		shl	ax, 1		; int no * 4
  6390 00001C4F 89C7                    		mov	di, ax		; interrupt vector address
  6391 00001C51 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  6392                                  					; saving address in di
  6393 00001C53 AD                      		lodsw			; movsw
  6394 00001C54 AB                      		stosw
  6395 00001C55 AD                      		lodsw			; movsw
  6396 00001C56 AB                      		stosw			; save the vector
  6397 00001C57 87F7                    		xchg	si, di
  6398 00001C59 E2ED                    		loop	next_int_
  6399                                  		
  6400                                  		; 10/12/2023
  6401                                  		;pop	di  ; *!
  6402                                  		;pop	cx ; +++ ; ch = [MediaByte]
  6403                                  
  6404                                  ; we need to save int13 in two places in case we are running on an at.
  6405                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  6406                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  6407                                  ; rom int13 routine, we must have that rom address also stored away.
  6408                                  
  6409                                  		; 21/12/2022
  6410                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  6411                                  		;mov	[cs:Orig13], ax
  6412                                  		;mov	ax, [cs:Old13+2]
  6413                                  		;mov	[cs:Orig13+2], ax
  6414                                  
  6415                                  		; 16/10/2022
  6416 00001C5B C7064C00[ED06]          		mov	word [13h*4], block13
  6417                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  6418                                  					; set up int 13	for new	action
  6419 00001C61 8C0E4E00                		mov	[13h*4+2], cs
  6420                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  6421 00001C65 C7065400[9907]          		mov	word [15h*4], Int15
  6422                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  6423                                  					; set up int 15	for new	action
  6424 00001C6B 8C0E5600                		mov	[15h*4+2], cs
  6425                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  6426 00001C6F C7066400[5907]          		mov	word [19h*4], int19
  6427                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  6428                                  					; set up int 19	for new	action
  6429 00001C75 8C0E6600                		mov	[19h*4+2], cs
  6430                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  6431                                  
  6432                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  6433 00001C79 A16800                  		mov	ax, [68h]	 ; 1Ah*4
  6434 00001C7C 8B3E6A00                		mov	di, [6Ah]	 ; 1Ah*4+2
  6435 00001C80 C7066800[AF06]          		mov	word [68h], Int1A
  6436 00001C86 8C0E6A00                		mov	[6Ah], cs
  6437                                  
  6438                                  		; 21/12/2022
  6439 00001C8A 0E                      		push	cs
  6440 00001C8B 1F                      		pop	ds
  6441                                  
  6442                                  		; 10/12/2023
  6443 00001C8C A3[AB06]                		mov	[Orig1A], ax
  6444 00001C8F 893E[AD06]              		mov	[Orig1A+2], di
  6445                                  
  6446 00001C93 A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  6447 00001C96 A3[B400]                		mov	[Orig13], ax
  6448 00001C99 A1[0801]                		mov	ax, [Old13+2]
  6449 00001C9C A3[B600]                		mov	[Orig13+2], ax
  6450                                  					; ;
  6451 00001C9F FB                      		sti
  6452 00001CA0 CD11                    		int	11h		; EQUIPMENT DETERMINATION
  6453                                  					; Return: AX = equipment flag bits
  6454                                  		; 10/12/2023
  6455                                  		;jmp	short chk_fd_count
  6456                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSDATA:1DF7h) ; *!!*
  6457                                  		; ((signature))
  6458                                  		;push	dx		; 52h ; 'R'
  6459                                  		;push	ax		; 50h ; 'P'
  6460                                  		;push	bx		; 53h ; 'S'
  6461                                  
  6462                                  ; we have to support a system that does not have any diskette
  6463                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  6464                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  6465                                  ; otherwise, the system has only hardfiles.
  6466                                  ;
  6467                                  ; important thing is that still, for compatibility reason, the drive letter
  6468                                  ; for the hardfiles start from "c". so, we still need to allocate dummy bds
  6469                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  6470                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  6471                                  ; drives will get "invalid drive letter ..." message. we are going to
  6472                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  6473                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  6474                                  
  6475                                  ; check the register returned by the equipment determination interrupt
  6476                                  ; we have to handle the case of no diskettes in the system by faking
  6477                                  ; two dummy drives.
  6478                                  ;
  6479                                  ; if the register indicates that we do have floppy drives we don't need
  6480                                  ; to do anything special.
  6481                                  ;
  6482                                  ; if the register indicates that we don't have any floppy drives then
  6483                                  ; what we need to do is set the fakefloppydrv variable, change the
  6484                                  ; register to say that we do have floppy drives and then go to execute
  6485                                  ; the code which starts at notsingle. this is because we can skip the
  6486                                  ; code given below which tries to find if there are one or two drives
  6487                                  ; since we already know about this.
  6488                                  
  6489                                  chk_fd_count:	; 10/12/2023
  6490                                  		;or	ax, 1	; *!!*
  6491                                  		
  6492                                  		; 12/12/2022
  6493 00001CA2 A801                    		test	al, 1
  6494                                  		;test	ax, 1		; floppy drives	present	?
  6495 00001CA4 7525                    		jnz	short normalfloppydrv ;	yes.
  6496                                  
  6497                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  6498                                  ; whether it is an old ROM BIOS or a new one
  6499                                  ;
  6500                                  ; WARNING !!!
  6501                                  ;
  6502                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  6503                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  6504                                  
  6505                                  		; 10/12/2023
  6506                                  		; ((cx is already on top of the stack))
  6507                                  		;push	cx	; +++ ; ch = [MediaByte]
  6508                                  		;push	bx	; not necessary
  6509 00001CA6 50                      		push	ax
  6510 00001CA7 52                      		push	dx
  6511                                  		;push	di	; not necessary
  6512 00001CA8 06                      		push	es
  6513                                  
  6514 00001CA9 B408                    		mov	ah, 8
  6515 00001CAB B200                    		mov	dl, 0
  6516 00001CAD CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6517                                  					; DL = drive number
  6518                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6519                                  					; DL = number of consecutive drives
  6520                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6521 00001CAF 7204                    		jc	short _gdskp_error
  6522                                  		;mov	[cs:flp_drvs], dl
  6523                                  		; 21/12/2022
  6524                                  		; ds = cs
  6525 00001CB1 8816[7D1A]              		mov	[flp_drvs], dl
  6526                                  _gdskp_error:	
  6527                                  		; 10/12/2023
  6528 00001CB5 07                      		pop	es
  6529                                  		;pop	di
  6530 00001CB6 5A                      		pop	dx
  6531 00001CB7 58                      		pop	ax
  6532                                  		;pop	bx
  6533 00001CB8 59                      		pop	cx	; +++ ; ch = [MediaByte]
  6534 00001CB9 7210                    		jc	short normalfloppydrv
  6535                                  					; if error it is an old ROM BIOS
  6536                                  					; so, lets assume that ROM BIOS lied
  6537                                  		; 21/12/2022
  6538                                  		;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  6539                                  		;jz	short _set_fake_flpdrv
  6540                                  		;mov	al, [cs:flp_drvs]
  6541 00001CBB A0[7D1A]                		mov	al, [flp_drvs]
  6542 00001CBE 08C0                    		or	al, al		; number of drvs == 0?
  6543 00001CC0 7403                    		jz	short _set_fake_flpdrv
  6544                                  
  6545                                  		;dec	al		; make it zero based
  6546                                  		; 18/12/2022
  6547 00001CC2 48                      		dec	ax
  6548 00001CC3 EB0A                    		jmp	short got_num_flp_drvs
  6549                                  ; ----------------------------------------------------------------------------
  6550                                  
  6551                                  _set_fake_flpdrv:
  6552                                  		; 21/12/2022
  6553                                  		;mov	ax, 1
  6554                                  		; 10/12/2023
  6555 00001CC5 40                      		inc	ax ; al = 1
  6556 00001CC6 A2[111A]                		mov	[fakefloppydrv], al ; 1
  6557                                  		;mov	byte [cs:fakefloppydrv], 1
  6558                                  		;			; we don't have any floppy drives.
  6559                                  		;mov	ax, 1
  6560 00001CC9 EB09                    		jmp	short settwodrive ; well then set it for two drives!
  6561                                  ; ----------------------------------------------------------------------------
  6562                                  
  6563                                  normalfloppydrv:			; yes, bit 0 is 1.			
  6564 00001CCB D0C0                    		rol	al, 1		; there	exist floppy drives.
  6565 00001CCD D0C0                    		rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  6566                                  got_num_flp_drvs:			
  6567                                  		;and	ax, 3		; only look at bits 0 &	1
  6568                                  		; 18/12/2022
  6569 00001CCF 2403                    		and	al, 3
  6570 00001CD1 7505                    		jnz	short notsingle	; zero means single drive system
  6571 00001CD3 40                      		inc	ax		; pretend it's a two drive system
  6572                                  settwodrive:				; set this to two fakedrives
  6573                                  		; 21/12/2022
  6574                                  		; ds = cs
  6575 00001CD4 FE06[7800]              		inc	byte [single]
  6576                                  		;inc	byte [cs:single] ; remember this
  6577                                  notsingle:				
  6578 00001CD8 40                      		inc	ax		; ax has number	of drives, 2-4
  6579                                  					; is also 0 indexed boot drive if we
  6580                                  					; booted off hard file
  6581 00001CD9 88C1                    		mov	cl, al		; ch is	fat id,	cl # floppies
  6582                                  
  6583                                  ; 16/10/2022
  6584                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  6585                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  6586                                  BRKADR	EQU	1BH * 4	; 6CH, 1BH break vector address
  6587                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  6588                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  6589                                  SEC9	EQU	522h	; address of disk parameters
  6590                                  CHROUT	EQU	29h
  6591                                  LSTDRV	EQU     504h
  6592                                  
  6593                                  ; determine whether we booted from floppy or hard disk...
  6594                                  
  6595 00001CDB F6C280                  		test	dl, 80h		; boot from floppy ?
  6596 00001CDE 7505                    		jnz	short gothrd	; no.
  6597 00001CE0 31C0                    		xor	ax, ax		; indicate boot	from drive a
  6598                                  		; 10/12/2023
  6599 00001CE2 A2[7F1A]                		mov     [Boot_Drv], al
  6600                                  gothrd:					
  6601 00001CE5 31D2                    		xor	dx, dx ; 0	; ax = 0-based drive we	booted from
  6602                                  					; bios_l, bios_h set.
  6603                                  					; cl = number of floppies including fake one
  6604                                  					; ch = media byte
  6605 00001CE7 FA                      		cli
  6606 00001CE8 8ED2                    		mov	ss, dx		; set stack segment and stack pointer
  6607 00001CEA BC0007                  		mov	sp, 700h
  6608 00001CED FB                      		sti
  6609                                  
  6610 00001CEE 51                      		push	cx ; *		; save number of floppies and media byte
  6611 00001CEF 88EC                    		mov	ah, ch		; FAT ID to AH
  6612 00001CF1 50                      		push	ax ; **		; save boot drive number and media byte
  6613                                  		
  6614                                  ; let model_byte, secondary_model_byte be set here!!!
  6615                                  
  6616 00001CF2 B4C0                    		mov	ah, 0C0h
  6617 00001CF4 CD15                    		int	15h		; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  6618 00001CF6 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  6619 00001CF8 80FC00                  		cmp	ah, 0
  6620 00001CFB 7510                    		jnz	short no_rom_system_conf
  6621                                  
  6622                                  		; 21/12/2022
  6623                                  		; ds = cs
  6624 00001CFD 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  6625 00001D01 A2[AF05]                		mov	[model_byte], al
  6626                                  		;mov	[cs:model_byte], al
  6627                                  					; get/save model byte
  6628 00001D04 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  6629 00001D08 A2[B005]                		mov	[secondary_model_byte], al
  6630                                  		;mov	[cs:secondary_model_byte], al
  6631                                  					; get/save secondary model byte
  6632 00001D0B EB0C                    		jmp	short turn_timer_on
  6633                                  ;-----------------------------------------------------------------------------
  6634                                  
  6635                                  no_rom_system_conf:			
  6636 00001D0D BEFFFF                  		mov	si, 0FFFFh
  6637 00001D10 8EC6                    		mov	es, si
  6638                                  		; 21/12/2022
  6639 00001D12 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  6640 00001D16 A2[AF05]                		mov	[model_byte], al
  6641                                  		;mov	[cs:model_byte], al ; save model byte
  6642                                  turn_timer_on:				
  6643 00001D19 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  6644 00001D1B E620                    		out	20h, al		; Interrupt controller,	8259A.
  6645                                  					; AKPORT
  6646                                  
  6647                                  ; some olivetti m24 machines have an 8530 serial communications
  6648                                  ; chip installed at io address 50h and 52h. if we're running
  6649                                  ; on one of those, we must inhibit the normal aux port initialization
  6650                                  
  6651                                  		; 21/12/2022
  6652                                  		; ds = cs
  6653 00001D1D 803E[AF05]00            		cmp	byte [model_byte], 0
  6654                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  6655 00001D22 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  6656                                  					; (except olivetti m24)
  6657 00001D24 E466                    		in	al, 66h		; is 8530 installed?
  6658 00001D26 A820                    		test	al, 20h
  6659 00001D28 740A                    		jz	short not_olivetti_m24 ; we're done if not
  6660 00001D2A B00F                    		mov	al, 0Fh		; double check
  6661 00001D2C E650                    		out	50h, al
  6662 00001D2E E450                    		in	al, 50h
  6663 00001D30 A801                    		test	al, 1		; this test was	copied from olivetti
  6664 00001D32 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  6665                                  
  6666                                  not_olivetti_m24:			
  6667 00001D34 B003                    		mov	al, 3		; init com4
  6668 00001D36 E8EC0A                  		call	aux_init
  6669 00001D39 B002                    		mov	al, 2		; init com3
  6670 00001D3B E8E70A                  		call	aux_init
  6671 00001D3E B001                    		mov	al, 1		; init com2
  6672 00001D40 E8E20A                  		call	aux_init
  6673 00001D43 30C0                    		xor	al, al		; init com1
  6674 00001D45 E8DD0A                  		call	aux_init
  6675                                  
  6676                                  skip_aux_port_init:			
  6677 00001D48 B002                    		mov	al, 2		; init lpt3
  6678 00001D4A E8D00A                  		call	print_init
  6679 00001D4D B001                    		mov	al, 1		; init lpt2
  6680 00001D4F E8CB0A                  		call	print_init
  6681 00001D52 30C0                    		xor	al, al		; init lpt1
  6682 00001D54 E8C60A                  		call	print_init
  6683                                  		
  6684                                  		; 11/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  6685 00001D57 BF3405                  		mov	di, 534h	; offset INITSPOT
  6686                                  		;mov	di, INITSPOT	; 0534h
  6687                                  					; IBMDOS.COM's first cluster - high word
  6688                                  					; 520h (the 2nd entry of root dir) + 14h
  6689 00001D5A 8B05                    		mov	ax, [di]
  6690 00001D5C A3[7E1A]                		mov	[firstcluster_hw], ax
  6691                                  	
  6692 00001D5F 31D2                    		xor	dx, dx ; 0
  6693 00001D61 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  6694 00001D63 8EC2                    		mov	es, dx
  6695 00001D65 31C0                    		xor	ax, ax
  6696                                  		; 11/12/2023
  6697                                  		; 16/10/2022
  6698                                  		;mov	di, INITSPOT	; 0534h
  6699                                  		;;mov	di, 534h	; INITSPOT (0000h:0534h)
  6700                                  					; IBM wants 4 zeros here
  6701 00001D67 AB                      		stosw
  6702 00001D68 AB                      		stosw
  6703 00001D69 8CC8                    		mov	ax, cs		; fetch	segment
  6704 00001D6B C7066C00[0E06]          		mov	word [BRKADR], cbreak
  6705                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  6706                                  					; break	entry point
  6707 00001D71 A36E00                  		mov	[BRKADR+2], ax		
  6708                                  		;mov	ds:6Eh,	ax	; vector for break
  6709 00001D74 C706A400[8206]          		mov	word [CHROUT*4], outchr
  6710                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  6711 00001D7A A3A600                  		mov	[CHROUT*4+2], ax
  6712                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  6713 00001D7D BF0400                  		mov	di, 4
  6714 00001D80 BB[1406]                		mov	bx, intret ; 19/10/2022
  6715                                  		;mov	bx, offset intret ; intret (cs:intret)
  6716                                  					; will initialize rest of interrupts
  6717 00001D83 93                      		xchg	ax, bx
  6718 00001D84 AB                      		stosw			; location 4
  6719 00001D85 93                      		xchg	ax, bx		; cs:
  6720 00001D86 AB                      		stosw			; int 1	; location 6
  6721 00001D87 83C704                  		add	di, 4		; skip int 2
  6722 00001D8A 93                      		xchg	ax, bx
  6723 00001D8B AB                      		stosw			; location 12
  6724 00001D8C 93                      		xchg	ax, bx		; cs:
  6725 00001D8D AB                      		stosw			; int 3	; location 14
  6726 00001D8E 93                      		xchg	ax, bx
  6727 00001D8F AB                      		stosw			; location 16
  6728 00001D90 93                      		xchg	ax, bx		; cs:
  6729 00001D91 AB                      		stosw			; int 4	; location 18
  6730 00001D92 89160005                		mov	[0500h], dx
  6731                                  		;mov	ds:500h, dx	; set print screen & break = 0
  6732 00001D96 89160405                		mov	[LSTDRV], dx	; [0504h]
  6733                                  		;mov	ds:504h, dx	; clean	out last drive spec
  6734                                  
  6735                                  ; we need to initalize the cs:motorstartup variable from the disk
  6736                                  ; parameter table at sec9. the offsets in this table are defined in
  6737                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  6738                                  
  6739 00001D9A A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  6740                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  6741                                  					; [522h+0Ah]
  6742                                  		; 21/12/2022
  6743                                  		; ds = 0
  6744                                  
  6745 00001D9D 2EA2[2601]              		mov	[cs:motorstartup], al
  6746 00001DA1 2E803E[AF05]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  6747 00001DA7 720B                    		jb	short no_diddle	; no
  6748 00001DA9 C7062B050F02            		mov	word [SEC9+09h], 20Fh
  6749                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  6750                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  6751 00001DAF C6062205DF              		mov	byte [SEC9+0], 0DFh
  6752                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  6753                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  6754                                  no_diddle:				
  6755 00001DB4 CD12                    		int	12h		; MEMORY SIZE -
  6756                                  					; Return: AX = number of contiguous 1K blocks of memory
  6757 00001DB6 B106                    		mov	cl, 6
  6758 00001DB8 D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  6759                                  		
  6760                                  		; 21/12/2022
  6761                                  		;pop	cx
  6762                                  		;mov	[cs:drvfat], cx ; save drive to load dos, and fat id
  6763                                  		
  6764 00001DBA 50                      		push	ax ; ***	; save real top	of memory
  6765                                  
  6766                                  ;M068 - BEGIN
  6767                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  6768                                  
  6769                                  		; 21/12/2022
  6770                                  		; ds = 0
  6771                                  		;push	ds
  6772                                  		;push	bx		; pushes not required but since this
  6773                                  		;			; happens to be a last minute change
  6774                                  		;			; & since it is only init code.
  6775                                  		;xor	bx, bx
  6776                                  		;mov	ds, bx
  6777                                  
  6778                                  		;mov	bx, ds:0BCh	; [2Fh*4]
  6779 00001DBB 8B1EBC00                		mov	bx, [2Fh*4]
  6780                                  		;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  6781 00001DBF 8E1EBE00                		mov	ds, [2Fh*4+2]
  6782 00001DC3 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  6783                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  6784 00001DC8 750F                    		jnz	short SkipRPL
  6785 00001DCA 807F054C                		cmp	byte [bx+5], 'L'
  6786                                  		;cmp	byte ptr [bx+5], 'L'
  6787 00001DCE 7509                    		jnz	short SkipRPL
  6788 00001DD0 89C2                    		mov	dx, ax		; get TOM into DX
  6789 00001DD2 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  6790 00001DD5 CD2F                    		int	2Fh		; Get new TOM from any RPL
  6791 00001DD7 89D0                    		mov	ax, dx
  6792                                  SkipRPL:
  6793                                  		; 21/12/2022				
  6794                                  		;pop	bx
  6795                                  		;pop	ds
  6796                                  ;M068 - END
  6797                                  		; 21/12/2022
  6798 00001DD9 0E                      		push	cs
  6799 00001DDA 1F                      		pop	ds
  6800                                  
  6801 00001DDB 83E840                  		sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  6802                                  		; 21/12/2022
  6803 00001DDE A3[021A]                		mov	[fatloc], ax
  6804                                  		;mov	[cs:fatloc], ax	; location to read fat
  6805                                  		
  6806 00001DE1 83E840                  		sub	ax, 64
  6807 00001DE4 A3[041A]                		mov	[init_bootseg], ax ; 21/12/2022
  6808                                  		;mov	[cs:init_bootseg], ax
  6809 00001DE7 58                      		pop	ax ; ***	; get back real top of memory for
  6810                                  
  6811                                  		; 21/12/2022
  6812 00001DE8 59                      		pop	cx ; **
  6813 00001DE9 890E[FA19]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  6814                                  
  6815                                  		;;mov	dx, 46Dh	; SYSINIT segment
  6816                                  		;mov	dx, 544h	; 10/12/2023 (PCDOS 7.1 IBMBIO.COM)	
  6817 00001DED BA0505                  		mov	dx, SYSINITSEG	; 17/10/2022
  6818 00001DF0 8EDA                    		mov	ds, dx
  6819                                  
  6820                                  ; set pointer to resident device driver chain
  6821                                  
  6822                                  		; 17/10/2022
  6823 00001DF2 C706[7502][2300]        		mov	word [DEVICELIST], res_dev_list
  6824                                  		;mov	word [273h], res_dev_list
  6825                                  		;;mov	word ptr ds:273h, offset res_dev_list
  6826                                  					; [SYSINIT+DEVICE_LIST]
  6827 00001DF8 8C0E[7702]              		mov	[DEVICELIST+2], cs		
  6828                                  		;mov	[275h], cs
  6829                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  6830                                  
  6831 00001DFC A3[9402]                		mov	[MEMORYSIZE], ax
  6832                                  		;mov	[292h], ax
  6833                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  6834                                  
  6835 00001DFF FEC1                    		inc	cl
  6836 00001E01 880E[9802]              		mov	[DEFAULTDRIVE], cl
  6837                                  		;mov	[296h], cl
  6838                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  6839                                  
  6840                                  		;mov	word [CURRENTDOSLOCATION], 0AF8h ; 10/12/2023
  6841 00001E05 C706[7302]E809          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  6842                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  6843                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  6844                                  					; dos_load_seg
  6845                                  
  6846                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  6847                                  ; printer cards. we initialize this value to point to an iret only if
  6848                                  ;
  6849                                  ; 1) the original segment points to storage inside valid ram.
  6850                                  ;
  6851                                  ; 2) the original segment is 0F000:xxxx
  6852                                  
  6853                                  		;;;mov	ax, 46Dh	; SYSINIT segment
  6854                                  		;;mov	ax, 544h	; 10/12/2023
  6855                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  6856                                  		;mov	es, ax
  6857                                  		; 21/12/2022
  6858 00001E0B 8EC2                    		mov	es, dx ; SYSINITSEG
  6859 00001E0D 31C9                    		xor	cx, cx ; 0
  6860 00001E0F 8ED9                    		mov	ds, cx		; segment 0
  6861                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  6862 00001E11 A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  6863                                  		; 18/10/2022
  6864 00001E14 263B06[9402]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  6865                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  6866 00001E19 7605                    		jbe	short resetintf
  6867 00001E1B 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  6868 00001E1E 750A                    		jnz	short keepintf
  6869                                  resetintf:	
  6870 00001E20 C7063C00[1406]          		mov	word [0Fh*4], intret			
  6871                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  6872 00001E26 8C0E3E00                		mov	word [0Fh*4+2], cs
  6873                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  6874                                  keepintf:				
  6875                                  ; end important
  6876                                  
  6877                                  ; 17/10/2022
  6878                                  ; 28/12/2018 - Retro DOS v4.0
  6879                                  
  6880                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  6881                                  ;
  6882                                  ; we will check if the system has ibm extended keyboard by
  6883                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  6884                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  6885                                  ; for the extended keyboard function. use cx as the temporary register.
  6886                                  
  6887                                  		; 21/12/2022
  6888                                  		; ds = 0, cx = 0
  6889                                  		;xor	cx, cx
  6890                                  		;mov	ds, cx
  6891                                  		
  6892 00001E2A 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  6893                                  
  6894                                  		; 21/12/2022
  6895 00001E2E 0E                      		push	cs
  6896 00001E2F 1F                      		pop	ds
  6897                                  
  6898 00001E30 F6C110                  		test	cl, 10h		; extended keyboard ?
  6899 00001E33 740A                    		jz	short org_key	; no, original keyboard
  6900                                  
  6901                                  		; 21/12/2022
  6902                                  		; ds = cs
  6903 00001E35 C606[7E04]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  6904 00001E3A C606[7F04]11            		mov	byte [keysts_func], 11h
  6905                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  6906                                  		;mov	byte [cs:keysts_func], 11h
  6907                                  					; change for extended keyboard functions
  6908                                  org_key:
  6909                                  
  6910                                  ; 02/06/2018 - Retro DOS v3.0
  6911                                  
  6912                                  ;**************************************************************
  6913                                  ;	will initialize the number of drives
  6914                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  6915                                  ;	the indications are as follows:
  6916                                  ;
  6917                                  ;	bits	7	6	drives
  6918                                  ;		0	0	1
  6919                                  ;		0	1	2
  6920                                  ;		1	0	3
  6921                                  ;		1	1	4
  6922                                  ;**************************************************************
  6923                                  				
  6924                                  		; 21/12/2022
  6925                                  		; ds = cs
  6926                                  		;push	cs
  6927                                  		;pop	ds
  6928                                  		;push	cs
  6929                                  		;pop	es
  6930                                  		
  6931 00001E3F E8C40B                  		call	cmos_clock_read	; If cmos clock	exists,
  6932                                  					; then set the system time according to	that.
  6933                                  					; also,	reset the cmos clock rate.
  6934                                  		; 18/10/2022
  6935                                  		;mov	word ptr BData_start, offset harddrv ;
  6936                                  					; set up pointer to hdrive
  6937                                  		; 02/10/2022
  6938 00001E42 C706[0000][4B08]        		mov	word [hdrv_pat], harddrv 
  6939                                  					
  6940 00001E48 58                      		pop	ax ; *		; number of floppies and FAT ID
  6941 00001E49 30E4                    		xor	ah, ah		; chuck	fat id byte
  6942 00001E4B A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  6943 00001E4E A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  6944 00001E51 D1E0                    		shl	ax, 1
  6945 00001E53 0106[5E1A]              		add	[last_dskdrv_table], ax
  6946                                  
  6947                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM)
  6948                                  		; ((MSDOS 6.22 IO.SYS & PCDOS 7.1 IBMBIO.COM))
  6949                                  		; ........
  6950 00001E57 1E                      		push    ds
  6951 00001E58 B800F0                  		mov     ax, 0F000h
  6952 00001E5B 8ED8                    		mov     ds, ax
  6953                                  
  6954 00001E5D 813EEAFF434F            		cmp	word [0FFEAh], 'CO' ; 'COMPAQ'
  6955 00001E63 751F                    		jne	short skip_mode2
  6956 00001E65 813EECFF4D50            		cmp	word [0FFECh], 'MP'
  6957 00001E6B 7517                    		jne	short skip_mode2
  6958 00001E6D 813EEEFF4151            		cmp	word [0FFEEh], 'AQ'
  6959 00001E73 750F                    		jne	short skip_mode2
  6960                                  
  6961 00001E75 B800E4                  		mov	ax, 0E400h	; get advanced system info (COMPAQ ROMBIOS)
  6962 00001E78 CD15                    		int	15h
  6963 00001E7A 7208                    		jc	short skip_mode2
  6964                                  		; 10/12/2023
  6965                                  		; PCDOS 7.1 IBMBIO.COM
  6966                                  		;or	bx, 0           ; or bx,40h ; enable mode 2
  6967                                  					; (MSDOS 6.0)
  6968                                  		; MSDOS 6.22 IO.SYS
  6969 00001E7C 83CB40                  		or	bx, 40h		; enable mode 2 (dual harddisk controller)
  6970 00001E7F B880E4                  		mov	ax, 0E480h      ; set advanced system info (COMPAQ ROMBIOS)
  6971 00001E82 CD15                    		int	15h
  6972                                  skip_mode2:
  6973 00001E84 1F                      		pop	ds
  6974                                  		; ........
  6975                                  
  6976 00001E85 B280                    		mov	dl, 80h
  6977 00001E87 B408                    		mov	ah, 8
  6978 00001E89 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6979                                  					; DL = drive number
  6980                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6981                                  					; DL = number of consecutive drives
  6982                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6983 00001E8B 7204                    		jc	short enddrv
  6984 00001E8D 8816[5D1A]              		mov	[hnum], dl
  6985                                  enddrv:
  6986                                  		; 21/12/2022
  6987 00001E91 0E                      		push	cs
  6988 00001E92 07                      		pop	es
  6989                                  
  6990                                  ; scan the list of drives to determine their type. we have three flavors of
  6991                                  ; diskette drives:
  6992                                  ;
  6993                                  ;   48tpi drives    we do nothing special for them
  6994                                  ;   96tpi drives    mark the fact that they have changeline support.
  6995                                  ;   3.5"  drives    mark changeline support and small.
  6996                                  ;
  6997                                  ; the following code uses registers for certain values:
  6998                                  ;
  6999                                  ;   dl - physical drive
  7000                                  ;   ds:di - points to current bds
  7001                                  ;   cx - flag bits for bds
  7002                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  7003                                  					
  7004 00001E93 30D2                    		xor	dl, dl
  7005                                  
  7006                                  		; 21/12/2022
  7007                                  		; ds = cs
  7008                                  		;push	cs
  7009                                  		;pop	ds
  7010                                  
  7011 00001E95 C606[2C01]09            		mov	byte [eot], 9
  7012 00001E9A BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  7013                                  					; to set aside two bdss	for the	two fake floppy	drives
  7014                                  
  7015                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  7016                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  7017                                  
  7018                                  ; check to see if we are faking floppy drives. if not we don't
  7019                                  ; do anything special. if we are faking floppy drives we need
  7020                                  ; to set aside two bdss for the two fake floppy drives. we
  7021                                  ; don't need to initalise any fields though. so starting at start_bds
  7022                                  ; use the link field in the bds structure to go to the second bds
  7023                                  ; in the list and initalise it's link field to -1 to set the end of
  7024                                  ; the list. then jump to the routine at dohard to allocate/initialise
  7025                                  ; the bds for harddrives.
  7026                                  
  7027 00001E9D 803E[111A]01            		cmp	byte [fakefloppydrv], 1
  7028 00001EA2 750B                    		jnz	short loop_drive
  7029 00001EA4 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7030                                  					; di <-	first bds link
  7031 00001EA6 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7032                                  					; di <-	second bds link
  7033 00001EA8 C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  7034 00001EAC E98801                  		jmp	dohard		; allocate/initialise bds for harddrives
  7035                                  ;-----------------------------------------------------------------------------
  7036                                  
  7037                                  loop_drive:				
  7038 00001EAF 3A16[7500]              		cmp	dl, [drvmax]
  7039 00001EB3 7203                    		jb	short got_more
  7040 00001EB5 E97B01                  		jmp	done_drives
  7041                                  ;-----------------------------------------------------------------------------
  7042                                  
  7043                                  got_more:	
  7044                                  		; 10/12/2023			
  7045                                  		;xor	cx, cx		; zero all flags
  7046 00001EB8 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7047                                  					; get next bds
  7048                                  		; ........
  7049                                  		; 10/12/2023 - Retro DOS v5.0
  7050                                  		; (PCDOS 7.1 IBMBIO.COM BIOSDATA:2046h) 
  7051 00001EBA 83FFFF                  		cmp	di, 0FFFFh      ; end of link ?
  7052 00001EBD 7516                    		jne	short not_last_bds
  7053 00001EBF 88D0                    		mov	al, dl          ; drive number (0 based)
  7054 00001EC1 98                      		cbw
  7055 00001EC2 01C0                    		add	ax, ax
  7056 00001EC4 05[3C05]                		add	ax, dskdrvs
  7057 00001EC7 A3[5E1A]                		mov	[last_dskdrv_table], ax
  7058 00001ECA 8B3E[601A]              		mov	di, [end_of_bdss]
  7059 00001ECE E8FF0A                  		call	xinstall_bds
  7060 00001ED1 FE0E[7500]              		dec	byte [drvmax]
  7061                                  not_last_bds:
  7062                                  		; ........
  7063                                  
  7064 00001ED5 B600                    		mov	dh, 0		; ff48tpi
  7065                                  					; set form factor to 48	tpi
  7066 00001ED7 C606[0E1A]28            		mov	byte [num_cyln], 40 ; 40 tracks per side
  7067                                  		
  7068                                  		; 21/12/2022
  7069                                  		;push	ds
  7070 00001EDC 57                      		push	di
  7071 00001EDD 52                      		push	dx
  7072                                  		;push	cx ; not necessary (10/12/2023)
  7073 00001EDE 06                      		push	es ; es=cs=ds ; 21/12/2022
  7074                                  
  7075                                  		; ...........
  7076                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  7077                                  		;xor	bx, bx
  7078                                  		;xor	cx, cx
  7079 00001EDF 52                      		push	dx  ; dl = drive number
  7080                                  
  7081 00001EE0 B408                    		mov	ah, 8
  7082 00001EE2 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  7083                                  					; DL = drive number
  7084                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  7085                                  					; DL = number of consecutive drives
  7086                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  7087                                  		;jc	short noparmsfromrom
  7088                                  		; 10/12/2023
  7089 00001EE4 58                      		pop	ax  ; al = drive number
  7090 00001EE5 7303                    		jnc	short chk_drv_type
  7091 00001EE7 E9E600                  		jmp	noparmsfromrom
  7092                                  
  7093                                  chk_drv_type:
  7094                                  		; 10/12/2023
  7095                                  		; ch = low eight bits of maximum cylinder number
  7096                                  		; cl = maximum sector number (bits 5-0)
  7097                                  		;      high two bits of maximum cylinder number (bits 7-6)
  7098                                  		;
  7099 00001EEA 80FB10                  		cmp	bl, 10h		; ATAPI Removable Media Device
  7100 00001EED 7554                    		jne	short not_atapi_removable
  7101                                  		
  7102                                  		; save ds:si
  7103 00001EEF 1E                      		push	ds
  7104                                  		;push	si	; not necessary (10/12/2023)
  7105                                  		
  7106 00001EF0 88C2                    		mov	dl, al
  7107 00001EF2 83EC1A                  		sub	sp, 26
  7108 00001EF5 31C0                    		xor	ax, ax ; 0
  7109 00001EF7 50                      		push	ax
  7110 00001EF8 B81E00                  		mov	ax, 30
  7111 00001EFB 50                      		push	ax
  7112 00001EFC 89E6                    		mov	si, sp		; DS:SI = segment:offset pointer to Result Buffer
  7113 00001EFE 16                      		push	ss
  7114 00001EFF 1F                      		pop	ds
  7115 00001F00 B448                    		mov	ah, 48h
  7116 00001F02 CD13                    		int	13h		; DISK - IBM/MS Extension
  7117                                  					; GET DRIVE PARAMETERS (DL - drive, DS:SI - buffer)
  7118 00001F04 7239                    		jb	short ext_gdp_err
  7119 00001F06 8B4408                  		mov	ax, [si+8]	; physical number of heads
  7120 00001F09 A3[0C1A]                		mov	[num_heads], ax
  7121 00001F0C 8B4404                  		mov	ax, [si+4]	; physical number of cylinders
  7122 00001F0F A3[0E1A]                		mov	[num_cyln], ax
  7123 00001F12 8A440C                  		mov	al, [si+0Ch]	; physical number of sectors per track
  7124 00001F15 A2[101A]                		mov	[sec_trk], al
  7125 00001F18 3A06[2C01]              		cmp	al, [eot]
  7126 00001F1C 7603                    		jbe	short _eotok
  7127 00001F1E A2[2C01]                		mov	[eot], al
  7128                                  
  7129                                  _eotok:		; 10/12/2023
  7130                                  		;xor	al, al
  7131 00001F21 31C9                    		xor	cx, cx ; 0
  7132 00001F23 F6440210                		test	byte [si+2], 10h ; information flags
  7133                                  					; bit 4 = Device has change line support
  7134 00001F27 7403                    		jz	short not_chgline_sup
  7135                                  		;or	al, 2		; change line support
  7136 00001F29 80C902                  		or	cl, 2
  7137                                  not_chgline_sup:
  7138 00001F2C 83C41E                  		add	sp, 30
  7139                                  		;pop	si	; (10/12/2023)
  7140 00001F2F 1F                      		pop	ds
  7141                                  		;
  7142 00001F30 07                      		pop	es	; es=cs=ds (21/12/2022)
  7143                                  		;pop	cx	; (10/12/2023)
  7144 00001F31 5A                      		pop	dx
  7145 00001F32 5F                      		pop	di
  7146                                  		;pop	ds	; (21/12/2022)
  7147                                  
  7148                                  		; 10/12/2023
  7149 00001F33 F6C102                  		test	cl, 2
  7150                                  		;test	al, 2
  7151                                  		;jz	short gotother_j
  7152 00001F36 7450                    		jz	short gotother
  7153                                  		;or	cl, al
  7154 00001F38 C606[7700]01            		mov	byte [fhave96], 1 ; Device has change line support
  7155                                  gotother_j:
  7156 00001F3D EB49                    		jmp	short gotother
  7157                                  ext_gdp_err:
  7158 00001F3F 83C41E                  		add	sp, 30
  7159                                  		;pop	si	; (10/12/2023)
  7160 00001F42 1F                      		pop	ds
  7161                                  
  7162                                  		; 10/12/2023
  7163                                  not_atapi_removable:
  7164                                  		; ...........
  7165                                  
  7166                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  7167                                  ; in this case, we are going to put bogus informations to bds table.
  7168                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  7169                                  ; they are calculated at the later time. this is just for the diagnostic
  7170                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  7171                                  ; this should only happen with drive b.
  7172                                  
  7173 00001F43 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  7174 00001F46 7505                    		jnz	short pfr_ok
  7175                                  		
  7176                                  		;mov	ch, 39		; rom gave wrong info.
  7177                                  		;mov	cl, 9		; let's default to 360k.
  7178                                  		; 21/12/2022
  7179 00001F48 B90927                  		mov	cx, 2709h
  7180 00001F4B B601                    		mov	dh, 1
  7181                                  pfr_ok:					
  7182                                  		;inc	dh		; make number of heads 1-based
  7183                                  		;mov	[num_heads], dh	; save parms returned by rom
  7184                                  		; 10/12/2023
  7185 00001F4D 86D6                    		xchg	dl, dh
  7186 00001F4F 30F6                    		xor	dh, dh
  7187 00001F51 42                      		inc	dx		; make number of heads 1-based
  7188 00001F52 8916[0C1A]              		mov	[num_heads], dx
  7189                                  
  7190                                  		;inc	ch		; make number of cylinders 1-based
  7191                                  		;and	cl, 3Fh
  7192                                  		;mov	[sec_trk], cl
  7193                                  		;mov	[num_cyln], ch	; assume less than 256 cylinders!!
  7194                                  		; 10/12/2023
  7195 00001F56 88CA                    		mov	dl, cl
  7196 00001F58 80E23F                  		and	dl, 3Fh
  7197 00001F5B 8816[101A]              		mov	[sec_trk], dl
  7198 00001F5F 86CD                    		xchg	cl, ch
  7199 00001F61 D0C5                    		rol	ch, 1
  7200 00001F63 D0C5                    		rol	ch, 1
  7201 00001F65 80E503                  		and	ch, 3
  7202 00001F68 41                      		inc	cx		; make number of cylinders 1-based
  7203 00001F69 890E[0E1A]              		mov	[num_cyln], cx
  7204                                  		
  7205                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  7206                                  
  7207                                  		;mov	cl, [sec_trk] ; 10/12/2023
  7208                                  		;cmp	cl, [eot]	; may set carry
  7209                                  		;;jbe	short eot_ok
  7210                                  		;; 09/12/2022
  7211                                  		;;jne	short eotok  ; wrong ! 14/08/2023
  7212                                  		;; 14/08/2023
  7213                                  		;jbe	short eotok
  7214                                  		;mov	[eot], cl
  7215                                  		; 10/12/2023
  7216 00001F6D 3A16[2C01]              		cmp	dl, [eot] ; dl = [sec_trk]
  7217 00001F71 7604                    		jbe	short eotok
  7218 00001F73 8816[2C01]              		mov	[eot], dl
  7219                                  ;eot_ok:
  7220                                  eotok:
  7221                                  		; 10/12/2023
  7222                                  		; !!!
  7223                                  		; (following pops are moved to 'chk_changeline' procedure)
  7224                                  		;pop	es ; es=cs=ds ; 21/12/2022
  7225                                  		;;pop	cx	; (10/12/2023)
  7226                                  		;pop	dx
  7227                                  		;pop	di
  7228                                  
  7229                                  		; 21/12/2022
  7230                                  		;pop	ds
  7231                                  
  7232                                  ; Check	for presence of	changeline
  7233                                  
  7234                                  ; 10/12/2023
  7235                                  %if 0
  7236                                  		; 10/12/2023
  7237                                  		;xor	cx, cx	; 0
  7238                                  		;push	cx
  7239                                  		push	dx
  7240                                  
  7241                                  		mov	ah, 15h
  7242                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  7243                                  					; DL = drive ID
  7244                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  7245                                  					; CX:DX	= number of sectors on the media
  7246                                  		; 10/12/2023
  7247                                  		pop	dx
  7248                                  		;pop	cx
  7249                                  		mov	cx, 0 ; 12/12/2023
  7250                                  		jc	short changeline_done
  7251                                  		cmp	ah, 2		; check	for presence of	changeline
  7252                                  		jnz	short changeline_done
  7253                                  
  7254                                  ; we have a drive with change line support.
  7255                                  
  7256                                  		or	cl, 2		; fchangeline
  7257                                  					; signal type
  7258                                  		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  7259                                  %endif
  7260                                  		; 10/12/2023
  7261 00001F77 E83800                  		call	chk_changeline
  7262                                  		;jc	short changeline_done
  7263                                  		
  7264                                  ; we now try to set up the form factor for the types of media that we know
  7265                                  ; and can recognise. for the rest, we set the form factor as "other".
  7266                                  
  7267                                  changeline_done:
  7268 00001F7A 803E[0E1A]28            		cmp	byte [num_cyln], 40
  7269 00001F7F 750B                    		jnz	short try_80
  7270 00001F81 803E[101A]09            		cmp	byte [sec_trk], 9
  7271 00001F86 765F                    		jbe	short nextdrive
  7272                                  gotother:	
  7273                                  		; 10/12/2023
  7274                                  		; ch = 0, cl = 2 or 0		
  7275                                  		
  7276 00001F88 B607                    		mov	dh, 7		; ffOther
  7277                                  					; we have a "strange" medium
  7278 00001F8A EB5B                    		jmp	short nextdrive
  7279                                  ;-----------------------------------------------------------------------------
  7280                                  
  7281                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  7282                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  7283                                  
  7284                                  try_80:					
  7285 00001F8C 803E[0E1A]50            		cmp	byte [num_cyln], 80
  7286 00001F91 75F5                    		jnz	short gotother
  7287 00001F93 B609                    		mov	dh, 9		; ff288
  7288                                  					; assume 2.88 MB drive
  7289 00001F95 803E[101A]24            		cmp	byte [sec_trk], 36 ; is it	?
  7290 00001F9A 744B                    		jz	short nextdrive	; yeah,	go update
  7291                                  
  7292                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  7293                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  7294                                  		;mov	dh, ff144
  7295                                  		;cmp	byte [sec_trk], 18
  7296                                  		;je	short nextdrive
  7297                                  
  7298 00001F9C 803E[101A]0F            		cmp	byte [sec_trk], 15
  7299 00001FA1 740B                    		jz	short got96
  7300                                  		
  7301 00001FA3 803E[101A]09            		cmp	byte [sec_trk], 9
  7302 00001FA8 75DE                    		jnz	short gotother
  7303                                  		
  7304 00001FAA B602                    		mov	dh, 2		; ffSmall
  7305 00001FAC EB39                    		jmp	short nextdrive
  7306                                  ; ----------------------------------------------------------------------------
  7307                                  
  7308                                  got96:					
  7309 00001FAE B601                    		mov	dh, 1		; ff96tpi
  7310 00001FB0 EB35                    		jmp	short nextdrive
  7311                                  
  7312                                  ; ----------------------------------------------------------------------------
  7313                                  		
  7314                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  7315                                  		; check change line feature (and set fhave96 if there is)
  7316                                  		; (common procedure for 'eotok:' and 'noparmsfromrom:')
  7317                                  chk_changeline:
  7318 00001FB2 59                      		pop	cx ; near call return address
  7319                                  
  7320                                  		; (pop es, dx, di for 'eotok' and 'noparmsfromrom' procs)
  7321 00001FB3 07                      		pop	es ; es=cs=ds ; 21/12/2022
  7322                                  		;pop	cx	; (10/12/2023)
  7323 00001FB4 5A                      		pop	dx
  7324 00001FB5 5F                      		pop	di ; BDS address/offset
  7325                                  		
  7326 00001FB6 51                      		push	cx ; near call return address
  7327                                  
  7328                                  		;xor	cx, cx ; 0
  7329                                  		;push	cx
  7330 00001FB7 52                      		push	dx
  7331                                  
  7332 00001FB8 B415                    		mov	ah, 15h
  7333 00001FBA CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  7334                                  					; DL = drive ID
  7335                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  7336                                  					; CX:DX	= number of sectors on the media
  7337 00001FBC 5A                      		pop	dx
  7338                                  		;pop	cx
  7339 00001FBD B90000                  		mov	cx, 0
  7340 00001FC0 720D                    		jc	short chk_chgl_1
  7341                                  
  7342 00001FC2 80FC02                  		cmp	ah, 2		; is there changeline?
  7343 00001FC5 7508                    		jne	short chk_chgl_2 ; *
  7344                                  
  7345 00001FC7 80C902                  		or	cl, 2
  7346                                  		;or	cl, ah ; 2
  7347 00001FCA C606[7700]01            		mov	byte [fhave96], 1 ; fchangeline
  7348                                  		; cf = 0
  7349                                  chk_chgl_1:
  7350                                  chk_chgl_2:
  7351 00001FCF C3                      		retn
  7352                                  
  7353                                  ;chk_chgl_2:	; *
  7354                                  ;		; 10/12/2023
  7355                                  ;		; ah = 1 ; harddisk type (ah = 3) return not possible here for floppies 
  7356                                  ;		;stc
  7357                                  ;		; cf = 1
  7358                                  ;		retn
  7359                                  
  7360                                  ; ----------------------------------------------------------------------------
  7361                                  
  7362                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  7363                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  7364                                  
  7365                                  noparmsfromrom:
  7366                                  		; 10/12/2023
  7367                                  		; !!!
  7368                                  		; (following pops are moved to 'chk_changeline' procedure)
  7369                                  		;pop	es ; es=cs=ds ; 21/12/2022
  7370                                  		;;pop	cx	; (10/12/2023)
  7371                                  		;pop	dx
  7372                                  		;pop	di	
  7373                                  
  7374                                  		; 21/12/2022
  7375                                  		;pop	ds
  7376                                  ; 10/12/2023
  7377                                  %if 0
  7378                                  		; 10/12/2023
  7379                                  		;xor	cx, cx ; 0
  7380                                  		;push	cx
  7381                                  		push	dx
  7382                                  
  7383                                  
  7384                                  		mov	ah, 15h
  7385                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  7386                                  					; DL = drive ID
  7387                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  7388                                  					; CX:DX	= number of sectors on the media
  7389                                  		; 10/12/2023
  7390                                  		pop	dx
  7391                                  		;pop	cx
  7392                                  		mov	cx, 0 ; 12/12/2023
  7393                                  		jc	short nextdrive
  7394                                  
  7395                                  		cmp	ah, 2		; is there changeline?
  7396                                  		jnz	short nextdrive
  7397                                  
  7398                                  		or	cl, 2
  7399                                  		mov	byte [fhave96], 1 ; fchangeline
  7400                                  %endif
  7401                                  		; 10/12/2023
  7402 00001FD0 E8DFFF                  		call	chk_changeline
  7403 00001FD3 7212                    		jc	short nextdrive
  7404                                  		
  7405                                  		; change line support, [fhave96] = 1
  7406                                  		
  7407 00001FD5 C606[0E1A]50            		mov	byte [num_cyln], 80
  7408 00001FDA B601                    		mov	dh, 1		; ff96tpi
  7409 00001FDC B00F                    		mov	al, 15
  7410 00001FDE 3A06[2C01]              		cmp	al, [eot]
  7411 00001FE2 7603                    		jbe	short nextdrive
  7412 00001FE4 A2[2C01]                		mov	[eot], al
  7413                                  ; ----------------------------------------------------------------------------
  7414                                  
  7415                                  nextdrive:
  7416                                  		; 10/12/2023
  7417                                  		; ch = 0, cl = 2 or 0
  7418                                  		
  7419 00001FE7 80C920                  		or	cl, 20h		; fi_own_physical
  7420                                  					; set this true	for all	drives
  7421 00001FEA 88D7                    		mov	bh, dl		; save int13 drive number
  7422                                  
  7423                                  ; we need to do special things if we have a single drive system and are setting
  7424                                  ; up a logical drive. it needs to have the same int13 drive number as its
  7425                                  ; counterpart, but the next drive letter. also reset ownership flag.
  7426                                  ; we detect the presence of this situation by examining the flag single for the
  7427                                  ; value 2.
  7428 00001FEC 803E[7800]02            		cmp	byte [single], 2
  7429 00001FF1 7505                    		jnz	short not_special
  7430 00001FF3 FECF                    		dec	bh		; int13	drive number same for logical drive
  7431 00001FF5 80F120                  		xor	cl, 20h		; reset	ownership flag for logical drive
  7432                                  not_special:
  7433                                  
  7434                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  7435                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  7436                                  ; form factor is of type "ffother".
  7437                                  				
  7438                                  		;xor	ax, ax		; fill BDS for drive
  7439                                  		;mov	al, [num_heads]
  7440                                  		; 10/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM) ; *
  7441 00001FF8 A1[0C1A]                		mov	ax, [num_heads]
  7442                                  		;mov	[di+36h], ax	; [di+BDS.rheads]
  7443 00001FFB 894552                  		mov	[di+52h], ax	; [di+BDS.rheads] ; *
  7444 00001FFE 31C0                    		xor	ax, ax		; *
  7445 00002000 A0[101A]                		mov	al, [sec_trk]
  7446                                  		;mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  7447 00002003 894550                  		mov	[di+50h], ax	; [di+BDS.rsecpertrack] ; *
  7448                                  		;mov	[di+23h], cx	; [di+BDS.flags]
  7449 00002006 894D3F                  		mov	[di+3Fh], cx	; [di+BDS.flags] ; *
  7450                                  		;mov	[di+22h], dh	; [di+BDS.formfactor]
  7451 00002009 88753E                  		mov	[di+3Eh], dh	; [di+BDS.formfactor] ; *
  7452 0000200C 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  7453 0000200F 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  7454                                  		;mov	bl, [num_cyln]
  7455                                  		;mov	[di+25h], bl	; [di+BDS.cylinders]
  7456                                  		; 10/12/2023
  7457 00002012 A1[0E1A]                		mov	ax, [num_cyln]
  7458 00002015 894541                  		mov	[di+41h], ax	; [di+BDS.cylinders] ; *
  7459                                  
  7460 00002018 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  7461 0000201D 7510                    		jnz	short no_single
  7462                                  		;mov	byte [single], 2 ; Don't forget we have
  7463                                  					; single drive system
  7464                                  		; 10/12/2023
  7465 0000201F FE06[7800]              		inc	byte [single]	; [single] = 2
  7466                                  		; 18/12/2022
  7467 00002023 80C910                  		or	cl, 10h
  7468                                  		;or	cx, 10h		; fi_am_mult
  7469                                  					; set that this	is one of several drives
  7470                                  		;or	[di+23h], cx	; [di+BDS.flags]
  7471 00002026 094D3F                  		or	[di+3Fh], cx	; [di+BDS.flags] ; *
  7472                                  					; save flags
  7473 00002029 8B3D                    		mov	di, [di]	; [di+BDS.link]
  7474                                  					; move to next BDS in list
  7475 0000202B FEC2                    		inc	dl		; add a	number
  7476 0000202D EBB8                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  7477                                  ; ----------------------------------------------------------------------------
  7478                                  
  7479                                  no_single:				
  7480                                  		;inc	dl
  7481                                  		; 18/12/2022
  7482 0000202F 42                      		inc	dx
  7483 00002030 E97CFE                  		jmp	loop_drive
  7484                                  ; ----------------------------------------------------------------------------
  7485                                  
  7486                                  		; 11/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  7487                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:21E8h)
  7488                                  done_drives:	
  7489                                  		;mov	word [di+BDS.link], -1			
  7490 00002033 C705FFFF                		mov	word [di], -1	; set link to null
  7491                                  
  7492                                  ; set up all the hard drives in	the system
  7493                                  
  7494                                  dohard:					
  7495 00002037 8A36[5D1A]              		mov	dh, [hnum]
  7496 0000203B 08F6                    		or	dh, dh		; done if no hardfiles
  7497 0000203D 7459                    		jz	short static_configure
  7498 0000203F B280                    		mov	dl, 80h
  7499                                  dohard1:				
  7500 00002041 52                      		push	dx
  7501 00002042 8B3E[601A]              		mov	di, [end_of_bdss]
  7502 00002046 8A1E[7500]              		mov	bl, [drvmax]
  7503 0000204A B700                    		mov	bh, 0		; first	primary	partition (or active)
  7504 0000204C E89E02                  		call	sethard
  7505 0000204F 7208                    		jc	short hardfile_err
  7506 00002051 E86709                  		call	dmax_check	; error	if already 26 drives
  7507 00002054 7303                    		jnb	short hardfile_err
  7508 00002056 E87709                  		call	xinstall_bds	; insert new bds into linked list
  7509                                  hardfile_err:				
  7510 00002059 5A                      		pop	dx
  7511                                  		;inc	dl		; next hard drive
  7512                                  		; 12/12/2023
  7513 0000205A 42                      		inc	dx
  7514 0000205B FECE                    		dec	dh
  7515 0000205D 75E2                    		jnz	short dohard1
  7516                                  
  7517                                  ; end of physical drive	initialization
  7518                                  
  7519                                  ; *** do not change the position of the following statement.
  7520                                  ; *** domini routine will use [drvmax] value for the start of the logical
  7521                                  ; *** drive number of mini disk(s).
  7522                                  					
  7523 0000205F E8CC07                  		call	domini		; for setting up mini disks, if found
  7524                                  
  7525                                  ; -- begin added section
  7526                                  
  7527 00002062 8A36[5D1A]              		mov	dh, [hnum]	; we already know this is >0
  7528 00002066 B280                    		mov	dl, 80h
  7529                                  dohardx1:				
  7530 00002068 B701                    		mov	bh, 1		; do all subsequent primary partitions
  7531                                  dohardx2:				
  7532 0000206A 52                      		push	dx
  7533 0000206B 53                      		push	bx
  7534 0000206C 8B3E[601A]              		mov	di, [end_of_bdss]
  7535 00002070 8A1E[7500]              		mov	bl, [drvmax]
  7536 00002074 E87602                  		call	sethard
  7537 00002077 720E                    		jc	short dohardx4	; move to next hardfile	if error
  7538 00002079 E83F09                  		call	dmax_check	; make sure <=26 drives
  7539 0000207C 7309                    		jnb	short dohardx4	; skip if error
  7540 0000207E E84F09                  		call	xinstall_bds	; insert new bds into linked list
  7541 00002081 5B                      		pop	bx		; get partition	number
  7542 00002082 5A                      		pop	dx		; restore physical drive counts
  7543 00002083 FEC7                    		inc	bh
  7544 00002085 EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  7545                                  ; ----------------------------------------------------------------------------
  7546                                  
  7547                                  dohardx4:				
  7548 00002087 5B                      		pop	bx		; unjunk partition number from stack
  7549 00002088 5A                      		pop	dx		; restore physical drive counts
  7550                                  		;inc	dl		; next hard drive
  7551                                  		; 12/12/2023
  7552 00002089 42                      		inc	dx
  7553 0000208A FECE                    		dec	dh
  7554 0000208C 75DA                    		jnz	short dohardx1
  7555                                  
  7556                                  ; -- end changed section
  7557                                  
  7558                                  ;******************************************************************************
  7559                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  7560                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  7561                                  ; than two diskette drives
  7562                                  ;
  7563                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  7564                                  ;		as usual and then rescan the bds chain to adjust the  drive
  7565                                  ;		letters. to do this, scan for disk drives and assign logical
  7566                                  ;		drive number starting from 2 and then rescan diskette drives
  7567                                  ;		and assign next to the last logical drive number of last disk
  7568                                  ;		drive to the 3rd and 4th diskette drives.
  7569                                  ;******************************************************************************
  7570                                  
  7571 0000208E 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  7572                                  		;jbe	short static_configure ; no - no need for remapping
  7573 00002093 7603                    		jbe	short no_remap
  7574 00002095 E8D901                  		call	remap		; remap	bds chain to adjust driver letters
  7575                                  no_remap:
  7576                                  
  7577                                  ; End of drive initialization.
  7578                                  
  7579                                  ; ----------------------------------------------------------------------------
  7580                                  
  7581                                  ;we now decide, based on the configurations available so far, what
  7582                                  ;code or data we need to keep as a stay resident code. the following table
  7583                                  ;shows the configurations under consideration. they are listed in the order
  7584                                  ;of their current position memory.
  7585                                  ;
  7586                                  ;configuration will be done in two ways:
  7587                                  ;
  7588                                  ;first, we are going to set "static configuration". static configuration will
  7589                                  ;consider from basic configuration to endof96tpi configuration. the result
  7590                                  ;of static configuration will be the address the dynamic configuration will
  7591                                  ;use to start with.
  7592                                  ;
  7593                                  ;secondly, "dynamic cofiguration" will be performed. dynamic configuration
  7594                                  ;involves possible relocation of code or data. dynamic configuration routine
  7595                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  7596                                  ;code individually. after these operation, [dosdatasg] will be set.
  7597                                  ;this will be the place sysinit routine will relocate msdos module for good.
  7598                                  
  7599                                  ; -- begin changed section
  7600                                  ;
  7601                                  ;   1.	 basic configuration for msbio (endfloppy)
  7602                                  ;   2.   end96tpi	; a system that supports "change line error"
  7603                                  ;   3.	 end of bdss	; end of bdss for hard disks
  7604                                  ;   4.	 endatrom	;some of at rom fix module.
  7605                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  7606                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  7607                                  ;
  7608                                  
  7609                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  7610                                  
  7611                                  static_configure:			
  7612 00002098 8B3E[601A]              		mov	di, [end_of_bdss]
  7613 0000209C 81FF[4C08]              		cmp	di, bdss	; 19/10/2022
  7614                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  7615 000020A0 750D                    		jnz	short dynamic_configure	; that's the end, then
  7616                                  		; 18/10/2022
  7617 000020A2 BF[4C08]                		mov	di, end96tpi
  7618                                  		;mov	di, offset harddrv ; end96tpi
  7619                                  					; keep everything up to	end96tpi
  7620 000020A5 803E[7700]00            		cmp	byte [fhave96], 0
  7621 000020AA 7503                    		jnz	short dynamic_configure
  7622                                  		
  7623 000020AC BF[3808]                		mov	di, endfloppy
  7624                                  dynamic_configure:			
  7625                                  		; 20/12/2022
  7626                                  		;push	cs
  7627                                  		;pop	es
  7628                                  		
  7629                                  		; 10/12/2023
  7630                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2268h)
  7631                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1C34h)
  7632 000020AF FC                      		cld	; clear direction flag is not necessary here !?
  7633                                  			; because there will not be a running program
  7634                                  			; which will set direction flag as backward (std)
  7635                                  
  7636                                  ; -- end changed section
  7637                                  
  7638                                  		; 21/12/2022
  7639                                  		; ds = cs <> es
  7640                                  		; ss = 0
  7641                                  		; sp = 700h
  7642                                  
  7643                                  		; 13/12/2023
  7644 000020B0 BE00F0                  		mov	si, 0F000h
  7645 000020B3 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  7646                                  
  7647 000020B5 803E[AF05]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  7648                                  		;jnz	short checkcmosclock
  7649                                  		; 10/12/2023
  7650 000020BA 751E                    		jnz	short checkcompaqbug ; no
  7651 000020BC 803E[5D1A]00            		cmp	byte [hnum], 0	; No hard file?
  7652                                  		;jz	short checkcmosclock
  7653 000020C1 7417                    		jz	short checkcompaqbug
  7654 000020C3 97                      		xchg	ax, di		; save allocation pointer in ax
  7655                                  		; 13/12/2023
  7656                                  		;mov	si, 0F000h
  7657                                  		;mov	es, si		; ES ->	ROM BIOS segment
  7658 000020C4 BE[661A]                		mov	si, bios_date	; "01/10/84"
  7659 000020C7 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  7660 000020CA B90900                  		mov	cx, 9		; bdate_l
  7661                                  					; Only patch ROM for bios 01/10/84
  7662 000020CD F3A6                    		repe cmpsb		; check	for date + zero	on end
  7663 000020CF 97                      		xchg	ax, di		; restore allocation pointer
  7664                                  
  7665                                  ; M015 -- begin changes
  7666                                  
  7667                                  		;jnz	short checkcmosclock
  7668                                  		; 02/10/2022
  7669 000020D0 7508                    		jnz	short checkcompaqbug
  7670                                  
  7671                                  ; install at rom fix
  7672                                  
  7673                                  		; 19/10/2022
  7674                                  		;mov	cx, offset endatrom
  7675 000020D2 B9[2018]                		mov	cx, endatrom
  7676                                  		;mov	si, offset ibm_disk_io
  7677 000020D5 BE[F216]                		mov	si, ibm_disk_io
  7678 000020D8 EB46                    		jmp	short install_int13_patch
  7679                                  ; ----------------------------------------------------------------------------
  7680                                  
  7681                                  ; M065 -- begin changes
  7682                                  ;
  7683                                  ; On certain systems with Western Digital disk controllers, the
  7684                                  ; following detection scheme caused an unpredictable and serious
  7685                                  ; failure. In particular, they've implemented a nonstandard
  7686                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  7687                                  ; what happens to be at es:[bx] and other memory locations indexed
  7688                                  ; off of it.
  7689                                  ;
  7690                                  ; Compaq was unable to tell us exactly which kind of systems have
  7691                                  ; the bug, except that they guarantee that the bug was fixed in
  7692                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  7693                                  ; string, and then look for date codes before 08/04/86 to decide
  7694                                  ; when to install the hook.
  7695                                  
  7696                                  ;checkcmosclock:
  7697                                  ; 02/10/2022				
  7698                                  checkcompaqbug:
  7699                                  		; 21/12/2022
  7700                                  		; es = 0F000h
  7701                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  7702                                  		;mov	es, ax
  7703                                  
  7704                                  		; 19/10/2022
  7705 000020DA 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  7706                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  7707 000020E1 754B                    		jnz	short not_compaq_patch
  7708 000020E3 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  7709                                  		;cmp	word ptr es:0FFECh, 'PM'
  7710 000020EA 7542                    		jnz	short not_compaq_patch
  7711 000020EC 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  7712                                  		;cmp	word ptr es:0FFEEh, 'QA'
  7713 000020F3 7539                    		jnz	short not_compaq_patch
  7714                                  
  7715                                  ; We're running on a COMPAQ. Now look at the date code.
  7716                                  
  7717 000020F5 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  7718 000020F9 86E0                    		xchg	ah, al
  7719                                  
  7720                                  ; 11/12/2023
  7721                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:22B9h)
  7722                                  %if 0
  7723                                  		cmp	ax, 3836h       ; '68' (NASM syntax) (('86' in MASM syntax))
  7724                                  		ja	short checkk09
  7725                                  		jz	short chkcompaqbug1
  7726                                  		cmp	ax, 3739h       ; '97'
  7727                                  		jbe	short not_compaq_patch
  7728                                  		stc
  7729                                  chkcompaqbug1:
  7730                                  		jb	short do_compaq_patch
  7731                                  		mov	ax, [es:0FFF5h]
  7732                                  		xchg	ah, al
  7733                                  		cmp	ax, 3038h       ; '80'
  7734                                  		ja	short not_compaq_patch
  7735                                  		jb	short do_compaq_patch
  7736                                  		mov	ax, [es:0FFF8h]
  7737                                  		xchg	ah, al
  7738                                  		cmp	ax, 3034h       ; '40'
  7739                                  		jnb	short not_compaq_patch
  7740                                  do_compaq_patch:
  7741                                  %endif
  7742                                  		; 11/12/2023
  7743                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1C85h)
  7744                                  
  7745 000020FB 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  7746                                  		;cmp	ax, '86'        ; 3836h
  7747                                  					; is it	86?
  7748 000020FE 772E                    		ja	short not_compaq_patch
  7749 00002100 7218                    		jb	short do_compaq_patch
  7750 00002102 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  7751 00002106 86E0                    		xchg	ah, al
  7752 00002108 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  7753                                  		;cmp	ax, '08'        ; 3038h
  7754                                  					; is it	08?
  7755 0000210B 7721                    		ja	short not_compaq_patch
  7756 0000210D 720B                    		jb	short do_compaq_patch
  7757 0000210F 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  7758 00002113 86E0                    		xchg	ah, al
  7759 00002115 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  7760                                  		;cmp	ax, '04'        ; 3034h
  7761                                  					; is it	04?
  7762 00002118 7314                    		jnb	short not_compaq_patch
  7763                                  
  7764                                  do_compaq_patch:			
  7765 0000211A B9[3D18]                		mov	cx, end_compaq_i13hook
  7766                                  		;mov	si, endatrom
  7767                                  		; 11/12/2023
  7768 0000211D BE[2018]                		mov	si, compaq_disk_io ; endatrom
  7769                                  
  7770                                  install_int13_patch:			
  7771 00002120 0E                      		push	cs
  7772 00002121 07                      		pop	es
  7773                                  		; 18/10/2022
  7774 00002122 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  7775 00002126 8C0E[B600]              		mov	[Orig13+2], cs
  7776 0000212A 29F1                    		sub	cx, si		; size of rom fix module
  7777 0000212C F3A4                    		rep movsb		; relocate it
  7778                                  
  7779                                  ; M065 -- end changes
  7780                                  
  7781                                  ; ----------------------------------------------------------------------------
  7782                                  not_compaq_patch:			; M065
  7783                                  		; 17/10/2022
  7784                                  checkcmosclock:	
  7785                                  		; 18/10/2022		
  7786 0000212E 0E                      		push	cs
  7787 0000212F 07                      		pop	es
  7788                                  
  7789                                  		; 21/12/2022
  7790                                  		; ds = cs = es
  7791                                  		; ss = 0
  7792                                  		; sp = 700h
  7793                                  
  7794                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  7795                                  %if 0
  7796                                  		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  7797                                  		jnz	short checkk09	; no
  7798                                  
  7799                                  		mov	word [daycnttoday], di
  7800                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  7801                                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  7802                                  		mov	si, daycnt_to_day
  7803                                  		rep movsb
  7804                                  		mov	word [bintobcd], di
  7805                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  7806                                  					; let original segment stay
  7807                                  		;mov	cx, 11	; endcmosclockset - bin_to_bcd
  7808                                  		; 08/08/2023
  7809                                  		mov	cl, 11
  7810                                  		mov	si, bin_to_bcd
  7811                                  		rep movsb
  7812                                  %endif
  7813                                  
  7814                                  ; 09/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  7815                                  ; PCDOS 7.1 IBMBIO.COM - BIOSDATA:22F4h
  7816                                  		;push	cs
  7817                                  		;pop	es
  7818                                  checkk09:				
  7819 00002130 57                      		push	di ; ? ; save ? ; 21/12/2022
  7820                                  
  7821                                  ; 13/12/2023 - Retro DOS v4.2 IO.SYS
  7822                                  ; (MSDOS 6.22 IO.SYS - BIOSDATA:1CDAh)
  7823                                  %if 0		
  7824                                  
  7825                                  		mov	ax, 4101h	; wait for bh=es:[di]
  7826                                  		mov	bl, 1		; wait for 1 clock tick
  7827                                  		mov	bh, [es:di]
  7828                                  		stc			; Assume we will fail
  7829                                  		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  7830                                  					; AL = condition type, BH = condition compare or mask value
  7831                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  7832                                  					; DX = I/O port	address	if AL bit 4 set
  7833                                  					; 11/12/2023
  7834                                  					; ES:DI = user byte if AL bit 4 clear
  7835                                  %endif
  7836                                  		; 13/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  7837                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:1CDAh)
  7838                                  	
  7839                                  		; ........
  7840                                  
  7841 00002131 B80041                  		mov	ax, 4100h	; wait for any external event (al=0)
  7842 00002134 B304                    		mov	bl, 4		; wait for 4 clock ticks
  7843 00002136 F9                      		stc			; Assume we will fail
  7844 00002137 CD15                    		int	15h		; SYSTEM - WAIT ON EXTERNAL EVENT (CONVERTIBLE)
  7845                                  					; AL = condition type, BH = condition compare or mask value
  7846                                  					; BL = timeout value times 55 milliseconds, 00h means no timeout
  7847                                  					; DX = I/O port address if AL bit 4 set
  7848                                  		; ........
  7849                                  
  7850 00002139 5F                      		pop	di ; ?
  7851 0000213A 721B                    		jc	short configdone ; 21/12/2022
  7852                                  
  7853 0000213C C606[7900]01            		mov	byte [fhavek09], 1
  7854                                  					; remember we have a k09 type
  7855 00002141 1E                      		push	ds
  7856 00002142 31C0                    		xor	ax, ax
  7857 00002144 8ED8                    		mov	ds, ax
  7858                                  		
  7859 00002146 893EB001                		mov	[6Ch*4], di
  7860                                  		;mov	ds:1B0h, di	; [6Ch*4]
  7861                                  					; new int 6Ch handler
  7862                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  7863 0000214A 8C0EB201                		mov	word [6Ch*4+2], cs
  7864 0000214E 1F                      		pop	ds
  7865                                  		; 20/12/2022
  7866                                  		; ds = cs = es
  7867                                  		;mov	si, int6c
  7868                                  		;mov	cx, endk09-int6c ; 459
  7869                                  		;;mov	cx, 459		; endk09 - int6c
  7870                                  					; size of k09 routine
  7871                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  7872                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2315h
  7873 0000214F BE[3E18]                		mov	si, int_6Ch
  7874 00002152 B9BC01                  		mov	cx, endk09-int_6Ch ; 461 in PCDOS 7.1 IBMBIO.COM
  7875 00002155 F3A4                    		rep movsb		;
  7876                                  					; set up config	stuff for sysinit
  7877                                  ; ----------------------------------------------------------------------------
  7878                                  ; Set up config stuff for SYSINIT
  7879                                  
  7880                                  ; 17/10/2022
  7881                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  7882                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  7883                                  ; 09/12/2022
  7884                                  SETDRIVE equ SetDrive
  7885                                  GETBP equ GetBp
  7886                                  		
  7887                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7888                                  configdone:				
  7889 00002157 0E                      		push	cs		; di is	final ending address of	msbio.
  7890 00002158 1F                      		pop	ds
  7891 00002159 83C70F                  		add	di, 15		; round	(up) to	paragraph
  7892                                  		; 10/12/2022
  7893                                  		;shr	di, 1
  7894                                  		;shr	di, 1
  7895                                  		;shr	di, 1
  7896                                  		;shr	di, 1
  7897 0000215C B104                    		mov	cl, 4
  7898 0000215E D3EF                    		shr	di, cl		
  7899                                  		; 10/12/2022
  7900 00002160 83C770                  		add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  7901                                  		; 19/10/2022 - Temporary !
  7902                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  7903 00002163 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  7904                                  
  7905                                  ; 11/12/2023 - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  7906                                  ; ----------------------------------------------------------------------------
  7907                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2332h)
  7908                                  ; ---------------------------------------
  7909                                  ; ("IBMDOS.COM" kernel file reading code here, below...)	
  7910                                  
  7911 00002167 A1[FA19]                		mov	ax, [drvfat]	; get drive and	fat id
  7912                                  		; 22/12/2022
  7913                                  		; Note: SETDRIVES uses AL (drive number) only
  7914 0000216A BD[A405]                		mov	bp, SETDRIVE
  7915                                  		;mov	bp, 5AEh ; 11/12/2023 (PCDOS 7.1 IBMBIO.COM)
  7916                                  		;;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  7917                                  					; at 2C7h:4D7h = 70h:2A47h
  7918 0000216D 0E                      		push	cs		; simulate far call
  7919 0000216E E800F9                  		call	call_bios_code	; get bds for drive
  7920 00002171 BD[D606]                		mov	bp, GETBP	; ensure valid bpb is present
  7921                                  		;mov	bp, 6E4h ; 11/12/2023 (PCDOS 7.1 IBMBIO.COM)
  7922                                  		;;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h)
  7923 00002174 0E                      		push	cs
  7924 00002175 E8F9F8                  		call	call_bios_code
  7925                                  
  7926                                  	; resort to funky old segment definitions for now
  7927                                  
  7928                                  		; 22/12/2022
  7929                                  		;push	es		; copy bds to ds:di
  7930                                  		;pop	ds
  7931                                  
  7932                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  7933                                  	;
  7934                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  7935                                  	;	  back. Apparently it was what actually setup es: for the following
  7936                                  	; cas----
  7937                                  
  7938                                  		; 22/12/2022
  7939                                  		;xor	di, di
  7940                                  		;mov	al, [es:di]	; get fat id byte
  7941                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  7942                                  		;mov	[es:drvfat+1], al
  7943                                  		;mov	ax, [es:drvfat]
  7944                                  		
  7945                                  		; 22/12/2022
  7946                                  		; ds = cs
  7947                                  	;;;	mov	al, [drvfat]
  7948                                  
  7949                                  	; cas -- why do a SECOND setdrive here???
  7950                                  
  7951                                  		; 22/12/2022
  7952                                  		;push	es		; save whatever's in es
  7953                                  		;push	ds		; copy bds to es:di
  7954                                  		;pop	es
  7955                                  		;push	cs		; copy Bios_Data to ds
  7956                                  		;pop	ds
  7957                                  	
  7958                                  	; 22/12/2022
  7959                                  	;;;	mov	bp, SETDRIVE
  7960                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  7961                                  	;;;	push	cs		; simulate far call
  7962                                  	;;;	call	call_bios_code	; get correct bds for this drive
  7963                                  	
  7964                                  		; 22/12/2022
  7965                                  		;push	es		; copy bds back to ds:di
  7966                                  		;pop	ds
  7967                                  		;pop	es		; pop whatever was in es
  7968                                  
  7969                                  	; Now we load in the MSDOS.SYS file
  7970                                  
  7971                                  	; 22/12/2022
  7972                                  	; -----
  7973                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  7974                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  7975                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  7976                                  	;				; get size of fat on media
  7977                                  	;	;mov	es:16DEh, bl
  7978                                  	;	mov	[es:fbigfat], bl
  7979                                  	;	mov	cl, [di+8]
  7980                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  7981                                  	;	;sub	es:16D8h, ax
  7982                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  7983                                  	;				; need a logical sector number that will
  7984                                  	;				; be used by getclus(diskrd procedure)
  7985                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  7986                                  	;	;sbb	es:16DAh, ax
  7987                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  7988                                  	; -----
  7989                                  		
  7990                                  		; 11/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  7991                                  	; -----	; 22/12/2022
  7992 00002178 268B5D06                		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  7993 0000217C 891E[081A]              		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  7994                                  		; 11/12/2023 ; *
  7995 00002180 268A5D3B                		mov	bl, [es:di+3Bh]	; [di+BDS.fatsiz] ; *
  7996                                  		;mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  7997                                  					; get size of fat on media
  7998 00002184 881E[061A]              		mov	[fbigfat], bl
  7999 00002188 268A4D08                		mov	cl, [es:di+8]
  8000 0000218C 268B4517                		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  8001 00002190 2906[FC19]              		sub	[First_Data_Sector], ax ; *
  8002                                  		;sub	[bios_l], ax	; subtract hidden sectors since we
  8003                                  					; need a logical sector number that will
  8004                                  					; be used by getclus(diskrd procedure)
  8005 00002194 268B4519                		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  8006 00002198 1906[FE19]              		sbb	[First_Data_Sector+2], ax ; *
  8007                                  		;sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  8008                                  	; ------
  8009                                  
  8010 0000219C 30ED                    		xor	ch, ch	 ; cx = sectors/cluster
  8011                                  
  8012                                  	; the boot program has left the directory at 0:500h
  8013                                  
  8014                                  		; 11/12/2023 - - Retro DOS v5.0 IBMBIO.COM/IO.SYS
  8015                                  		;push	di
  8016 0000219E 1E                      		push	ds
  8017                                  		;xor	di, di
  8018                                  		;mov	ds, di
  8019 0000219F 31DB                    		xor	bx, bx ; 0
  8020 000021A1 8EDB                    		mov	ds, bx
  8021 000021A3 8B1E3A05                		mov	bx, [53Ah]
  8022                                  		;mov	bx, ds:53Ah    	; (First cluster of the 2nd dir entry
  8023                                  				   	; of root directory in the buffer at 500h)
  8024 000021A7 1F                      		pop	ds
  8025 000021A8 8B36[7E1A]              		mov     si, [firstcluster_hw] ; 11/12/2023 
  8026                                  				   	; (32 bit cluster number for FAT32 fs)
  8027                                  		;pop	ds
  8028                                  		;pop	di
  8029                                  
  8030                                  		; 12/12/2023
  8031                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2397h)
  8032                                  		; ...........
  8033                                  		; ds = cs
  8034 000021AC A0[061A]                		mov	al, [fbigfat]
  8035 000021AF 50                      		push	ax              ; (*) save fbigfat flags
  8036 000021B0 A0[FA19]                		mov	al, [drvfat]
  8037 000021B3 0A06[7F1A]              		or	al, [Boot_Drv]
  8038 000021B7 757D                    		jnz	short boot_drv_fixed ; hard disk
  8039                                  boot_drv_removable:			; calculate cluster count and set fbig or fbigbig flag
  8040 000021B9 53                      		push	bx              ; for removable drives
  8041 000021BA 51                      		push	cx
  8042 000021BB 52                      		push	dx
  8043                                  	
  8044                                  		; 12/12/2023
  8045 000021BC 06                      		push	es
  8046 000021BD 1F                      		pop	ds
  8047                                  
  8048 000021BE 8B450E                  		mov	ax, [di+0Eh]    ; [di+BDS.totalsecs16]
  8049 000021C1 31D2                    		xor	dx, dx
  8050 000021C3 09C0                    		or	ax, ax
  8051 000021C5 7506                    		jnz	short prep_totalsecs_ok
  8052 000021C7 8B451B                  		mov	ax, [di+1Bh]    ; [di+BDS.totalsecs32]
  8053 000021CA 8B551D                  		mov	dx, [di+1Dh]
  8054                                  prep_totalsecs_ok:
  8055 000021CD 2B4509                  		sub	ax, [di+9]      ; [di+BDS.resectors]
  8056 000021D0 83DA00                  		sbb	dx, 0
  8057 000021D3 50                      		push	ax
  8058 000021D4 52                      		push	dx
  8059 000021D5 8B5D11                  		mov	bx, [di+11h]    ; [di+BDS.fatsecs16]
  8060 000021D8 31C0                    		xor	ax, ax
  8061 000021DA 09DB                    		or	bx, bx
  8062 000021DC 7506                    		jnz	short prep_fatsecs_ok
  8063 000021DE 8B5D1F                  		mov	bx, [di+1Fh]    ; [di+BDS.fatsecs32]
  8064 000021E1 8B4521                  		mov	ax, [di+21h]
  8065                                  prep_fatsecs_ok:
  8066 000021E4 8A4D0B                  		mov	cl, [di+0Bh]    ; ax:bx = 32 bit count of FAT sectors
  8067                                  				        ; [di+BDS.fats]
  8068 000021E7 30ED                    		xor	ch, ch
  8069 000021E9 F7E1                    		mul	cx
  8070 000021EB 91                      		xchg	ax, cx
  8071 000021EC F7E3                    		mul	bx
  8072 000021EE 01D1                    		add	cx, dx
  8073 000021F0 89C3                    		mov	bx, ax          ; cx:bx = total (2*) fat sectors
  8074 000021F2 5A                      		pop	dx
  8075 000021F3 58                      		pop	ax              ; dx:ax = totals sectors - reserved sectors
  8076 000021F4 29D8                    		sub	ax, bx
  8077 000021F6 19CA                    		sbb	dx, cx          ; dx:ax = data sectors (includes root dir sectors)
  8078 000021F8 8B5D0C                  		mov	bx, [di+0Ch]    ; [di+BDS.direntries]
  8079 000021FB 83C30F                  		add	bx, 15          ; 16 directory entries per sector
  8080                                  				        ; (round up sector count by adding 15)
  8081 000021FE B104                    		mov	cl, 4           ; (rounded) dir entries / 16
  8082 00002200 D3EB                    		shr	bx, cl
  8083 00002202 31C9                    		xor	cx, cx
  8084 00002204 29D8                    		sub	ax, bx
  8085 00002206 19CA                    		sbb	dx, cx          ; dx:ax = data sectors (except root directory sectors)
  8086                                  					; (will be used for cluster count calculation)
  8087 00002208 8A4D08                  		mov	cl, [di+8]      ; [di+BDS.secperclus]
  8088                                  
  8089                                  		; 12/12/2023
  8090 0000220B 0E                      		push	cs
  8091 0000220C 1F                      		pop	ds
  8092                                  
  8093 0000220D 50                      		push	ax              ; 32 bit division (data sectors / sector per cluster)
  8094 0000220E 89D0                    		mov	ax, dx
  8095 00002210 31D2                    		xor	dx, dx
  8096 00002212 F7F1                    		div	cx
  8097 00002214 89C3                    		mov	bx, ax
  8098 00002216 58                      		pop	ax
  8099 00002217 F7F1                    		div	cx
  8100 00002219 09DB                    		or	bx, bx          ; 32 bit cluster count if bx > 0
  8101 0000221B 7505                    		jnz	short set_fbigbig_flag ; too big cluster number
  8102 0000221D 83F8F6                  		cmp	ax, 0FFF6h
  8103 00002220 7207                    		jb	short set_fbig_flag
  8104                                  set_fbigbig_flag:
  8105 00002222 800E[061A]20            		or	byte [fbigfat], 20h ; FAT32 ; fbigbig
  8106 00002227 EB0A                    		jmp	short set_fbig_flag_ok
  8107                                  ; ---------------------------------------------------------------------------
  8108                                  
  8109                                  set_fbig_flag:
  8110 00002229 3DF60F                  		cmp	ax, 0FF6h       ; 4096-10
  8111                                  				        ; is this 16-bit fat?
  8112 0000222C 7205                    		jb	short set_fbig_flag_ok ; no, small fat
  8113 0000222E 800E[061A]40            		or	byte [fbigfat], 40h ; FAT16 ; fbig
  8114                                  set_fbig_flag_ok:
  8115 00002233 5A                      		pop	dx
  8116 00002234 59                      		pop	cx
  8117 00002235 5B                      		pop	bx
  8118                                  boot_drv_fixed:
  8119 00002236 31FF                    		xor	di, di
  8120                                  		; ...........
  8121                                  loadit:
  8122 00002238 B80505                  		mov	ax, SYSINITSEG	; 46Dh
  8123                                  		;mov	ax, 544h	; 11/12/2023 - PCDOS 7.1 IBMBIO.COM
  8124                                  		;;mov	ax, 46Dh	; sysinit segment
  8125 0000223B 8EC0                    		mov	es, ax
  8126 0000223D 268E06[7302]            		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  8127                                  		;mov	es, [es:271h]
  8128                                  
  8129 00002242 E85A08                  		call	getclus		; read cluster at ES:DI (DI is updated)
  8130                                  
  8131                                  ; ----------------------------------------------------------------------------
  8132                                  
  8133                                  		; 13/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8134                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2431h)
  8135                                  
  8136                                  		;test	byte [cs:fbigfat], 20h ; fbigbig ; FAT32 fs flag
  8137 00002245 F606[061A]20            		test	byte [fbigfat], 20h ; fbigbig ; FAT32 fs flag
  8138 0000224A 740B                    		jz	short iseof
  8139                                  
  8140                                  eofbigbig:	; si:bx = 32 bit cluster number
  8141 0000224C 81FEFF0F                		cmp	si, 0FFFh
  8142 00002250 7515                    		jnz	short iseofx
  8143 00002252 83FBF7                  		cmp	bx, 0FFF7h
  8144 00002255 EB10                    		jmp	short iseofx
  8145                                  
  8146                                  ; ----------------------------------------------------------------------------
  8147                                  		; 13/12/2023
  8148                                  iseof:
  8149                                  		;;test	byte [cs:fbigfat], fbig
  8150                                  		;test	byte [cs:fbigfat], 40h ; fbig
  8151                                  		; 12/12/2023
  8152                                  		; ds = cs
  8153 00002257 F606[061A]40            		test	byte [fbigfat], 40h ; fbig
  8154 0000225C 7506                    		jnz	short eofbig
  8155 0000225E 81FBF70F                		cmp	bx, 0FF7h
  8156 00002262 EB03                    		jmp	short iseofx
  8157                                  ; ----------------------------------------------------------------------------
  8158                                  
  8159                                  eofbig:
  8160 00002264 83FBF7                  		cmp	bx, 0FFF7h
  8161                                  iseofx:
  8162 00002267 72CF                    		jb	short loadit	; keep loading until cluster = eof
  8163                                  ; ----------------------------------------------------------------------------
  8164                                  		
  8165 00002269 E8FC04                  		call	setdrvparms	; 
  8166                                  
  8167                                  		;;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  8168                                  		;;jmp	far 46Dh:267h
  8169                                  		; 12/12/2023
  8170                                  		;jmp	far 544h:269h	; (PCDOS 7.1 IBMBIO.COM)
  8171                                  
  8172 0000226C EA[6902]0505            		jmp	SYSINITSEG:SYSINITSTART
  8173                                  
  8174                                  ; =============== S U B	R O U T	I N E ========================================
  8175                                  
  8176                                  ; Following are subroutines to support resident device driver initialization
  8177                                  ;
  8178                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  8179                                  
  8180                                  ;	M035 -- begin changed section
  8181                                  
  8182                                  ;******************************************************************************
  8183                                  ; module name: remap
  8184                                  ;
  8185                                  ; descriptive name: all the code for himem that could be separated from msbio
  8186                                  ;
  8187                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  8188                                  ;	     letters) if more than two diskette drives on the system.
  8189                                  ;
  8190                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  8191                                  ;	       as usual and then rescan the bds chain to adjust the drive
  8192                                  ;	       letters. to do this, scan for disk drives and assign logical
  8193                                  ;	       drive number starting from 2 and then rescan diskette drives
  8194                                  ;	       and assign next to the last logical drive number of last disk
  8195                                  ;	       drive to the 3rd and 4th diskette drives.
  8196                                  
  8197                                  ; input:       none
  8198                                  ; exit:	drive letters have been remapped in bds chain
  8199                                  ; exit error:  none
  8200                                  ; called from: msinit
  8201                                  ;
  8202                                  ; notes:  this function  will be called only if more than 2 diskettes are
  8203                                  ;	  found in the system
  8204                                  ;	  this function assumes that there are no more than 26 drives assigned
  8205                                  ;	    this is guaranteed by the code that creates bdss for partitions
  8206                                  ;	  this function assumes that the first entries in the chain are
  8207                                  ;	   floppy drives, and all the rest are hard drives
  8208                                  ;	  will alter the boot drive if necessary to reflect remapping
  8209                                  ;
  8210                                  ;******************************************************************************
  8211                                  
  8212                                  ; 17/10/2022
  8213                                  ; 02/10/2022
  8214                                  		; 15/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8215                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2464h)
  8216                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1D9Eh)
  8217                                  
  8218                                  remap:		; proc near
  8219                                  
  8220                                  		; 15/12/2023
  8221                                  		; ds = cs
  8222                                  		;mov	di, [cs:start_bds] ; get first bds
  8223 00002271 8B3E[1901]              		mov	di, [start_bds]
  8224                                  
  8225                                  ; search for 1st fixed disk physical drive num
  8226                                  
  8227                                  drive_loop:
  8228 00002275 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  8229                                  					; first	hard disk??
  8230 00002279 7409                    		jz	short fdrv_found ; yes,	continue
  8231 0000227B 8B3D                    		mov	di, [di]	; [di+BDS.link]
  8232                                  					; get next bds,	assume segment
  8233 0000227D 83FFFF                  		cmp	di, -1 ; 0FFFFh	; last bds?
  8234 00002280 75F3                    		jnz	short drive_loop ; loop	if not
  8235 00002282 EB49                    		jmp	short rmap_exit	; yes, no hard drive on	system
  8236                                  
  8237                                  ;------------------------------------------------------------------------------
  8238                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  8239                                  ;logical drive nums to 3, 4, 5 etc.
  8240                                  ;------------------------------------------------------------------------------
  8241                                  
  8242                                  fdrv_found:
  8243 00002284 B002                    		mov	al, 2		; start	with logical drv num=2
  8244                                  fdrv_loop:
  8245 00002286 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  8246 00002289 8B3D                    		mov	di, [di]	; [di+BDS.link]
  8247                                  					; ds:di--> next	bds
  8248                                  		;inc	al		; set num for next drive
  8249                                  		; 18/12/2022
  8250 0000228B 40                      		inc	ax
  8251 0000228C 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ?
  8252 0000228F 75F5                    		jnz	short fdrv_loop	; no - assign more disk drives
  8253                                  
  8254                                  ;------------------------------------------------------------------------------
  8255                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  8256                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  8257                                  ; any more.
  8258                                  ;------------------------------------------------------------------------------
  8259                                  
  8260                                  		;mov	di, [cs:start_bds] ; [start_bds]
  8261                                  		; 15/12/2023
  8262 00002291 8B3E[1901]              		mov	di, [start_bds]	; get first bds
  8263 00002295 8B3D                    		mov	di, [di]	; [di+BDS.link]
  8264                                  					; ds:di-->bds2
  8265                                  		;mov	ah, [cs:dsktnum] ; get number of floppies to remap
  8266 00002297 8A26[2501]              		mov	ah, [dsktnum]
  8267 0000229B 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  8268                                  remap_loop1:
  8269 0000229E 8B3D                    		mov	di, [di]	; [di+BDS.link]
  8270                                  					; set new num to next floppy
  8271 000022A0 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  8272 000022A3 FEC0                    		inc	al		; new number for next floppy
  8273 000022A5 FECC                    		dec	ah		; count down extra floppies
  8274 000022A7 75F5                    		jnz	short remap_loop1
  8275                                  
  8276                                  ; now we've got to adjust the boot drive if we reassigned it
  8277                                  
  8278                                  		; 15/12/2023
  8279                                  		;mov	al, [cs:drvfat]
  8280 000022A9 A0[FA19]                		mov	al, [drvfat]
  8281 000022AC 3C02                    		cmp	al, 2		; is it	a: or b: ?
  8282 000022AE 721D                    		jb	short rmap_exit
  8283                                  		;sub	al, [cs:dsktnum]
  8284 000022B0 2A06[2501]              		sub	al, [dsktnum]	; is it one of the other floppies?
  8285 000022B4 7204                    		jb	short remap_boot_flop ;	brif so
  8286                                  
  8287                                  ; we've got to remap the boot hard drive
  8288                                  ; subtract the number of EXTRA floppies from it
  8289                                  
  8290 000022B6 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  8291 000022B8 EB04                    		jmp	short remap_change_boot_drv
  8292                                  ; ---------------------------------------------------------------------------
  8293                                  
  8294                                  ; we've got to remap the boot floppy.
  8295                                  ; add the number of hard drive partitions to it
  8296                                  
  8297                                  remap_boot_flop:
  8298                                  		;add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  8299                                  		; 15/12/2023
  8300 000022BA 0206[7500]              		add	al, [drvmax]
  8301                                  remap_change_boot_drv:			
  8302                                  		;mov	[cs:drvfat], al ; alter msdos.sys load drive
  8303 000022BE A2[FA19]                		mov	[drvfat], al
  8304 000022C1 FEC0                    		inc	al
  8305 000022C3 1E                      		push	ds
  8306 000022C4 BF0505                  		mov	di, SYSINITSEG	; 46Dh
  8307                                  		;mov	di, 544h	; PCDOS 7.1 IBMBIO.COM
  8308                                  		;;mov	di, 46Dh	; SYSINIT segment
  8309 000022C7 8EDF                    		mov	ds, di
  8310 000022C9 A2[9802]                		mov	[DEFAULTDRIVE], al
  8311                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  8312                                  					; pass it to sysinit as	well
  8313 000022CC 1F                      		pop	ds ; ds = cs
  8314                                  rmap_exit:
  8315 000022CD C3                      		retn
  8316                                  
  8317                                  ; =============== S U B	R O U T	I N E =======================================
  8318                                  
  8319                                  ; 17/10/2022
  8320                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  8321                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  8322                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  8323                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  8324                                  ;**************************************************
  8325                                  ; getboot - get the boot sector for a hard disk
  8326                                  ;
  8327                                  ; Reads the boot sector from a specified drive into
  8328                                  ; a buffer at the top of memory.
  8329                                  ;
  8330                                  ; dl = int13 drive number to read boot sector for
  8331                                  ;**************************************************
  8332                                  
  8333                                  ; 17/10/2022
  8334                                  bootbias equ 200h
  8335                                  
  8336                                  getboot:	; proc near
  8337                                  
  8338                                  		; 15/12/2023 - Retro DOS v5.0 
  8339                                  		;	 (Modified PCDOS 7.1) IBMBIO.COM/IO.SYS
  8340                                  		; ds = cs
  8341                                  		
  8342                                  		; 08/04/2018
  8343                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  8344                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  8345                                  		; 02/10/2022 - Retro DOS v4.0
  8346                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  8347                                  
  8348                                  		;mov	ax, [cs:init_bootseg] ; 17/10/2022
  8349                                  		; 15/12/2023
  8350 000022CE A1[041A]                		mov	ax, [init_bootseg]
  8351 000022D1 8EC0                    		mov	es, ax
  8352                                  
  8353                                  		; 17/10/2022
  8354 000022D3 BB0002                  		mov	bx, bootbias ; 200h
  8355                                  		;mov	bx, 200h	; bootbias
  8356                                  					; load BX, ES:BX is where sector goes
  8357 000022D6 B80102                  		mov	ax, 201h
  8358 000022D9 30F6                    		xor	dh, dh
  8359 000022DB B90100                  		mov	cx, 1
  8360 000022DE CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  8361                                  					; AL = number of sectors to read, CH = track, CL = sector
  8362                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  8363                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  8364 000022E0 7209                    		jc	short erret
  8365                                  		; 17/10/2022
  8366 000022E2 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  8367                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  8368                                  					; Dave Litton magic word?
  8369 000022E9 7401                    		jz	short norm_ret	; yes
  8370                                  erret:
  8371 000022EB F9                      		stc
  8372                                  norm_ret:
  8373 000022EC C3                      		retn
  8374                                  
  8375                                  ; =============== S U B	R O U T	I N E =======================================
  8376                                  
  8377                                  ; 28/12/2018 - Retro DOS v4.0 
  8378                                  
  8379                                  ;***************************************************************************
  8380                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  8381                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  8382                                  ;   our own logical sectors start. we also read in our boot sector to
  8383                                  ;   determine version number
  8384                                  ;
  8385                                  ;   inputs:	dl is rom drive number (80...)
  8386                                  ;		bh is partition number (0....) 
  8387                                  ;		ds:di points to bds
  8388                                  ;   outputs:	carry clear -> bpb is filled in
  8389                                  ;		carry set   -> bpb is left uninitialized due to error
  8390                                  ;	trashes (at least) si, cx
  8391                                  ;	MUST PRESERVE ES:!!!!
  8392                                  ;***************************************************************************
  8393                                  
  8394                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8395                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:24E9h)
  8396                                  
  8397                                  sethard:	; proc near
  8398                                  		; 12/08/2023
  8399                                  		; ds = cs = BIOSDATA
  8400 000022ED 57                      		push	di
  8401 000022EE 53                      		push	bx
  8402                                  		;push	ds  ; ds = cs = BIOSDATA ; 12/08/2023
  8403 000022EF 06                      		push	es
  8404 000022F0 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  8405 000022F3 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  8406                                  		; 16/12/2023
  8407 000022F6 804D3F01                		or	byte [di+3Fh], 1 ; PCDOS 7.1
  8408                                  		;or	byte [di+23h], 1 ; [di+BDS.flags]
  8409                                  					; fnon_removable
  8410 000022FA C6453E05                		mov	byte [di+3Eh], 5 ; PCDOS 7.1
  8411                                  		;mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  8412                                  					; ffHardFile
  8413 000022FE C606[061A]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  8414 00002303 88FE                    		mov	dh, bh		; partition number
  8415 00002305 52                      		push	dx
  8416 00002306 B408                    		mov	ah, 8
  8417 00002308 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  8418                                  					; DL = drive number
  8419                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  8420                                  					; DL = number of consecutive drives
  8421                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  8422                                  		;inc	dh
  8423                                  		; 16/12/2023 - Retro DOS v5.0
  8424 0000230A 88F2                    		mov	dl, dh
  8425 0000230C B600                    		mov	dh, 0
  8426 0000230E 42                      		inc	dx
  8427                                  		;mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  8428 0000230F 895515                  		mov	[di+15h], dx
  8429 00002312 5A                      		pop	dx
  8430 00002313 7253                    		jc	short setret	; error	if no hard disk
  8431                                  		; 16/12/2023
  8432                                  		;jc	short setret_j
  8433                                  		
  8434 00002315 80E13F                  		and	cl, 3Fh
  8435 00002318 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  8436 0000231B 52                      		push	dx		; save partition number
  8437 0000231C E8AFFF                  		call	getboot
  8438 0000231F 5A                      		pop	dx		; restore partition number
  8439 00002320 7246                    		jc	short setret
  8440                                  		; 16/12/2023
  8441                                  		;jnc	short chk_act_part
  8442                                  ;setret_j:
  8443                                  		;jmp	setret
  8444                                  
  8445                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8446                                  chk_act_part:
  8447 00002322 31DB                    		xor	bx, bx ; 0
  8448                                  		;;mov	[cs:ep_start_sector], bx
  8449                                  		;;mov	[cs:ep_start_sector+2], bx
  8450                                  		;mov	[cs:ep_hidden_secs], bx
  8451                                  		;mov	[cs:ep_hidden_secs+2], bx
  8452                                  		; 16/12/2023
  8453                                  		; ds = cs
  8454                                  		; 20/12/2023
  8455                                  		;mov	[ep_start_sector], bx
  8456                                  		;mov	[ep_start_sector+2], bx
  8457 00002324 891E[8A23]              		mov	[ep_hidden_secs], bx
  8458 00002328 891E[8C23]              		mov	[ep_hidden_secs+2], bx
  8459                                  		
  8460 0000232C BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  8461                                  
  8462                                  ; The first 'active' partition is 00, the second is 01....
  8463                                  ;   then the remainder of the 'primary' but non-active partitions
  8464                                  
  8465                                  act_part:
  8466 0000232F 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  8467 00002334 740B                    		jz	short no_act	; no
  8468                                  ; 16/12/2023
  8469                                  %if 0		
  8470                                  		; 16/12/2023
  8471                                  		; reject if partitiontype != 1, 4, 6, 0Bh, 0Ch, 0Eh
  8472                                  		cmp	byte [es:bx], 1 ; FAT12
  8473                                  		jz	short got_good_act
  8474                                  		cmp	byte [es:bx], 4	; FAT16 CHS (<= 32MB)
  8475                                  		jz	short got_good_act
  8476                                  		
  8477                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8478                                  		cmp	byte [es:bx], 0Bh ; FAT32 CHS
  8479                                  		jz	short got_good_act
  8480                                  		cmp	byte [es:bx], 0Ch ; FAT32 LBA
  8481                                  		jz	short got_good_act
  8482                                  		cmp	byte [es:bx], 0Eh ; FAT16 LBA
  8483                                  		jz	short got_good_act
  8484                                  
  8485                                  		cmp	byte [es:bx], 6	; FAT16 BIG CHS (> 32MB)
  8486                                  		jnz	short no_act
  8487                                  ;%else
  8488                                  		; 16/12/2023
  8489                                  		mov	al, [es:bx]	 ; partition type
  8490                                  
  8491                                  		; reject if partitiontype != 1, 4, 6, 0Bh, 0Ch, 0Eh
  8492                                  		cmp	al, 1		; FAT12
  8493                                  		je	short got_good_act
  8494                                  		cmp	al, 4		; FAT16 CHS (<= 32MB)
  8495                                  		je	short got_good_act
  8496                                  		
  8497                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8498                                  		cmp	al, 0Bh		; FAT32 CHS
  8499                                  		je	short got_good_act
  8500                                  		cmp	al, 0Ch		; FAT32 LBA
  8501                                  		je	short got_good_act
  8502                                  		cmp	al, 0Eh		; FAT16 LBA
  8503                                  		je	short got_good_act
  8504                                  
  8505                                  		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  8506                                  		jne	short no_act
  8507                                  %endif		
  8508                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  8509                                  		; check if it is a primary dos partition
  8510                                  
  8511 00002336 E83300                  		call	chk_partition_type
  8512 00002339 7506                    		jne	short no_act
  8513                                  
  8514                                  got_good_act:				; 11/08/2023
  8515 0000233B 08F6                    		or	dh, dh		; is this our target partition #?
  8516                                  					; (0 = first primary dos or active partition)
  8517 0000233D 744F                    		jz	short set2	; WE GOT THE ONE WANTED!!
  8518 0000233F FECE                    		dec	dh		; count	down
  8519                                  no_act:					
  8520 00002341 83C310                  		add	bx, 16
  8521 00002344 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  8522                                  					; last entry done?
  8523 00002348 75E5                    		jnz	short act_part	; no, process next entry
  8524                                  
  8525 0000234A BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  8526                                  					; restore original value of bx
  8527                                  
  8528                                  ; Now scan the non-active partitions
  8529                                  
  8530                                  get_primary:
  8531 0000234D 26F647FC80              		test	byte [es:bx-4], 80h
  8532 00002352 750B                    		jnz	short not_prim	; we've already scanned
  8533                                  					; the ACTIVE ones
  8534                                  ; 16/12/2023
  8535                                  %if 0
  8536                                  		; 16/12/2023
  8537                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  8538                                  		cmp	byte [es:bx], 1	; FAT12
  8539                                  		jz	short got_prim
  8540                                  		cmp	byte [es:bx], 4	; FAT16 CHS (<= 32MB)
  8541                                  		jz	short got_prim
  8542                                  
  8543                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8544                                  		cmp	byte [es:bx], 0Bh ; FAT32 CHS
  8545                                  		jz	short got_prim
  8546                                  		cmp	byte [es:bx], 0Ch ; FAT32 LBA
  8547                                  		jz	short got_prim
  8548                                  		cmp	byte [es:bx], 0Eh ; FAT16 LBA
  8549                                  		jz	short got_prim
  8550                                  
  8551                                  		cmp	byte [es:bx], 6	; FAT16 BIG CHS (> 32MB)
  8552                                  		jnz	short not_prim
  8553                                  ;%else
  8554                                  		; 16/12/2023
  8555                                  		mov	al, [es:bx]	 ; partition type
  8556                                  
  8557                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  8558                                  		cmp	al, 1		; FAT12
  8559                                  		je	short got_prim
  8560                                  		cmp	al, 4		; FAT16 CHS (<= 32MB)
  8561                                  		je	short got_prim
  8562                                  		
  8563                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8564                                  		cmp	al, 0Bh		; FAT32 CHS
  8565                                  		je	short got_prim
  8566                                  		cmp	al, 0Ch		; FAT32 LBA
  8567                                  		je	short got_prim
  8568                                  		cmp	al, 0Eh		; FAT16 LBA
  8569                                  		je	short got_prim
  8570                                  
  8571                                  		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  8572                                  		jne	short not_prim
  8573                                  %endif
  8574                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  8575                                  		; check if it is a primary dos partition
  8576                                  
  8577 00002354 E81500                  		call	chk_partition_type
  8578 00002357 7506                    		jne	short not_prim
  8579                                  
  8580                                  got_prim:
  8581 00002359 08F6                    		or	dh, dh		; is this our target partition?
  8582 0000235B 7431                    		jz	short set2
  8583 0000235D FECE                    		dec	dh
  8584                                  not_prim:
  8585 0000235F 83C310                  		add	bx, 16
  8586 00002362 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  8587 00002366 75E5                    		jnz	short get_primary ; loop till we've gone through table
  8588                                  setret:					
  8589 00002368 F9                      		stc			; error	return
  8590 00002369 E9C503                  		jmp	ret_hard_err
  8591                                  
  8592                                  ; ---------------------------------------------------------------------------
  8593                                  		
  8594                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  8595                                  
  8596                                  chk_partition_type:
  8597                                  		; 16/12/2023
  8598 0000236C 268A07                  		mov	al, [es:bx]	 ; partition type
  8599                                  
  8600                                  		; see if partitiontype == 1, 4, 6, 0Bh, 0Ch, 0Eh
  8601 0000236F 3C01                    		cmp	al, 1		; FAT12
  8602 00002371 7412                    		je	short chk_ptype_retn
  8603 00002373 3C04                    		cmp	al, 4		; FAT16 CHS (<= 32MB)
  8604 00002375 740E                    		je	short chk_ptype_retn
  8605                                  		
  8606                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8607 00002377 3C0B                    		cmp	al, 0Bh		; FAT32 CHS
  8608 00002379 740A                    		je	short chk_ptype_retn
  8609 0000237B 3C0C                    		cmp	al, 0Ch		; FAT32 LBA
  8610 0000237D 7406                    		je	short chk_ptype_retn
  8611 0000237F 3C0E                    		cmp	al, 0Eh		; FAT16 LBA
  8612 00002381 7402                    		je	short chk_ptype_retn
  8613                                  
  8614 00002383 3C06                    		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  8615                                  chk_ptype_retn:
  8616                                  		; zf = 1 -> primary DOS partition
  8617                                  		; zf = 0 -> not a primary DOS partition
  8618 00002385 C3                      		retn
  8619                                  
  8620                                  ; ---------------------------------------------------------------------------
  8621                                  
  8622                                  		; 16/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
  8623                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:25B6h)
  8624                                  ep_start_sector:
  8625 00002386 00000000                		dd 0
  8626 0000238A 00000000                ep_hidden_secs:	dd 0
  8627                                  
  8628                                  ; ---------------------------------------------------------------------------
  8629                                  
  8630                                  ;  until we get the real logical boot record and get the bpb,
  8631                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  8632                                  ;  for the convenience of the computation.
  8633                                  ;
  8634                                  ;  at the end of this procedure, if a bpb information is gotten from
  8635                                  ;  the valid boot record, then we are going to use those bpb information
  8636                                  ;  without change.
  8637                                  ;
  8638                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  8639                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  8640                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  8641                                  
  8642                                  set2:		
  8643                                  		; 12/08/2023
  8644                                  		; ds = cs = BIOSDATA segment (0070h)
  8645 0000238E 8816[071A]              		mov	[rom_drv_num], dl
  8646                                  		;mov	[cs:rom_drv_num], dl
  8647                                  			; save the rom bios drive number we are handling now.
  8648 00002392 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  8649 00002396 268B5706                		mov	dx, [es:bx+6]
  8650                                  
  8651                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  8652                                  ; sectors should be allowed	
  8653                                  
  8654 0000239A 83E801                  		sub	ax, 1
  8655 0000239D 83DA00                  		sbb	dx, 0
  8656 000023A0 26034708                		add	ax, [es:bx+8]	; sectors in partition
  8657 000023A4 2613570A                		adc	dx, [es:bx+10]
  8658 000023A8 7305                    		jnc	short okdrive
  8659 000023AA 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  8660                                  
  8661                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8662                                  		;;;
  8663                                  okdrive:
  8664                                  		;add	ax, [cs:ep_hidden_secs]
  8665                                  		;adc	dx, [cs:ep_hidden_secs+2]
  8666                                  		; ds = cs
  8667 000023AF 0306[8A23]              		add	ax, [ep_hidden_secs]
  8668 000023B3 1316[8C23]              		adc	dx, [ep_hidden_secs+2]
  8669 000023B7 7305                    		jnc	short okdrive_1
  8670 000023B9 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  8671                                  okdrive_1:
  8672 000023BE 26803F0C                		cmp	byte [es:bx], 0Ch ; FAT32 LBA partition ID
  8673 000023C2 7418                    		je	short set_lba_flag
  8674 000023C4 26803F0E                		cmp	byte [es:bx], 0Eh ; FAT16 LBA partition ID
  8675 000023C8 7412                    		je	short set_lba_flag
  8676 000023CA 3B5513                  		cmp	dx, [di+13h]	; if dx > [di+BDS.secpertrack] then
  8677 000023CD 730D                    		jnb	short set_lba_flag ; set LBA r/w flag
  8678 000023CF F77513                  		div	word [di+13h]
  8679 000023D2 31D2                    		xor	dx, dx
  8680 000023D4 F77515                  		div	word [di+15h]
  8681 000023D7 3D0004                  		cmp	ax, 400h	; if ax (cylinder number) >= 1024
  8682                                  					;  set LBA r/w flag
  8683 000023DA 7204                     		jb	short set3
  8684                                  set_lba_flag:
  8685 000023DC 804D4004                                or	byte [di+40h], 4 ; fLBArw ; LBA r/w flag
  8686                                  		;;;
  8687                                  ;okdrive:
  8688                                  		; 16/12/2023
  8689                                  set3:		
  8690                                  		;mov	ax, [es:bx+4]
  8691                                  		;mov	[di+17h], ax	; [di+BDS.hiddensecs]
  8692                                  		;			; BPB_HIDDENSECTORS = p->partitionbegin
  8693                                  		;mov	ax, [es:bx+6]
  8694                                  		;mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  8695                                  
  8696                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8697                                  		;;;
  8698 000023E0 268B4704                		mov	ax, [es:bx+4]	; start sector (LBA) of the partition
  8699 000023E4 268B5706                		mov	dx, [es:bx+6]
  8700                                  		;add	ax, [cs:ep_hidden_secs]
  8701                                  		;adc	dx, [cs:ep_hidden_secs+2]
  8702                                  		; ds = cs
  8703 000023E8 0306[8A23]              		add	ax, [ep_hidden_secs]
  8704                                  					; + hidden secs of the extd dos partion
  8705 000023EC 1316[8C23]              		adc	dx, [ep_hidden_secs+2]
  8706 000023F0 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  8707 000023F3 895519                  		mov	[di+19h], dx	; [di+BDS.hiddensecs+2]
  8708 000023F6 31C0                    		xor	ax, ax ; 0
  8709 000023F8 89457B                  		mov	[di+7Bh], ax	; [di+BDS.bdsm_hidden_trks]
  8710 000023FB 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsec16]	
  8711                                  		;;;
  8712                                  
  8713 000023FE 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  8714 00002402 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  8715 00002406 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  8716 00002409 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  8717                                  					; bpb->maxsec =	p->partitionlength
  8718                                  		;cmp	dx, 0
  8719                                  		;ja	short okdrive_1
  8720                                  		; 16/12/2023
  8721 0000240C 09D2                    		or	dx, dx
  8722 0000240E 7505                    		jnz	short set3_read
  8723 00002410 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  8724                                  		;jb	short setret	; return -1;
  8725 00002413 7264                    		jb	short set3_err
  8726                                  ;okdrive_1:
  8727                                  		; 16/12/2023
  8728                                  set3_read:
  8729 00002415 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  8730 00002418 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  8731 0000241B 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  8732                                  					; usually equal	to the # of sec/trk.
  8733 0000241D 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  8734 00002420 50                      		push	ax
  8735 00002421 89D0                    		mov	ax, dx
  8736 00002423 31D2                    		xor	dx, dx
  8737 00002425 F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  8738                                  					; (track)temp_h:ax + (sector)dx
  8739                                  ; 16/12/2023
  8740                                  %if 0
  8741                                  		; 17/10/2022
  8742                                  		;mov	[cs:temp_h], ax
  8743                                  		; 12/08/2023 (ds=cs)
  8744                                  		mov	[temp_h], ax
  8745                                  		pop	ax
  8746                                  		div	bx
  8747                                  		mov	cl, dl
  8748                                  		inc	cl
  8749                                  		xor	bx, bx
  8750                                  		mov	bl, [di+15h]	; [di+BDS.heads]
  8751                                  		push	ax
  8752                                  		xor	dx, dx
  8753                                  		;mov	ax, [cs:temp_h]
  8754                                  		mov	ax, [temp_h] ; 12/08/2023
  8755                                  		div	bx
  8756                                  		;mov	[cs:temp_h], ax
  8757                                  		mov	[temp_h], ax ; 12/08/2023
  8758                                  		pop	ax
  8759                                  		div	bx		; dl is head, ax is cylinder
  8760                                  		; 12/08/2023 (ds=cs)
  8761                                  		cmp	word [temp_h], 0
  8762                                  		;cmp	word [cs:temp_h], 0
  8763                                  		ja	short setret_brdg ; exceeds the	limit of int 13h
  8764                                  		cmp	ax, 1024
  8765                                  		ja	short setret_brdg ; exceeds the	limit of int 13h
  8766                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  8767                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  8768                                  			; ('ja' must be 'jnb')
  8769                                  okdrive_2:
  8770                                   		; 28/07/2019
  8771                                  ; dl is head.
  8772                                  ; ax is cylinder
  8773                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  8774                                  
  8775                                  ;*** for mini disks ***
  8776                                  
  8777                                  		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  8778                                  					; check for mini disk
  8779                                  		jnz	short oknotmini	; not mini disk.
  8780                                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  8781                                  					; set the physical track number
  8782                                  oknotmini:
  8783                                  %endif
  8784                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  8785                                  		;;;
  8786                                  		;mov	[cs:saved_word], ax
  8787 00002427 A3[9E04]                		mov	[saved_word], ax
  8788 0000242A 58                      		pop	ax
  8789 0000242B F7F3                    		div	bx
  8790 0000242D 88D1                    		mov	cl, dl
  8791 0000242F FEC1                    		inc	cl
  8792 00002431 8B5D15                  		mov	bx, [di+15h]	; [di+BDS.heads]
  8793 00002434 50                      		push	ax
  8794 00002435 31D2                    		xor	dx, dx
  8795                                  		;mov	ax, [cs:saved_word]
  8796 00002437 A1[9E04]                		mov	ax, [saved_word]
  8797 0000243A F7F3                    		div	bx
  8798                                  		;mov	[cs:saved_word], ax
  8799 0000243C A3[9E04]                		mov	[saved_word], ax ; not necessary !? (ax must be 0)
  8800 0000243F 58                      		pop	ax
  8801 00002440 F7F3                    		div	bx		; dl is head, ax is cylinder
  8802                                  		; 16/12/2023
  8803 00002442 0E                      		push	cs
  8804 00002443 07                      		pop	es ; (*)
  8805 00002444 BB[5201]                		mov	bx, disksector ; (**)
  8806                                  		;
  8807 00002447 F6454004                		test	byte [di+40h], 4 ; fLBArw ; LBA read/write flag
  8808 0000244B 742F                    		jz	short set3_chs_read
  8809                                  set3_lba_read:
  8810                                  
  8811                                  ; 16/12/2023
  8812                                  %if 0
  8813                                  		;push	cs
  8814                                  		;pop	es ; (*)
  8815                                  		;mov	bx, disksector ; (**)
  8816                                  
  8817                                  		;push	ds
  8818                                  		;push	si
  8819                                  		xor	ax, ax	; 0
  8820                                  		push	ax
  8821                                  		push	ax
  8822                                  		mov	ax, [di+19h]	; [di+BDS.hiddensectors+2]
  8823                                  		push	ax
  8824                                  		mov	ax, [di+17h]	; [di+BDS.hiddensectors]
  8825                                  		push	ax
  8826                                  		push	es		; buffer address
  8827                                  		push	bx
  8828                                  		mov	ax, 1		; sector (read) count
  8829                                  		push	ax
  8830                                  		;mov	ax, 16		; DAP size
  8831                                  		mov	al, 16
  8832                                  		push	ax
  8833                                  		mov	dl, [rom_drv_num] ; ds = cs
  8834                                  		mov	ax, ss
  8835                                  		mov	ds, ax ; ds = ss
  8836                                  		mov	si, sp
  8837                                  		;mov	dl, [cs:rom_drv_num]
  8838                                  		mov	ah, 42h
  8839                                  		int	13h		; DISK - IBM/MS Extension
  8840                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  8841                                  		;pop	si
  8842                                  		;pop	ds
  8843                                  		jnc	short set3_lba_read_ok
  8844                                  		add	sp, 16
  8845                                  		;pop	si
  8846                                  		;pop	ds
  8847                                  set3_err:
  8848                                  		;jmp	setret
  8849                                  		jmp	ret_hard_err
  8850                                  
  8851                                  set3_lba_read_ok
  8852                                  		add	sp, 16
  8853                                  		;pop	si
  8854                                  		;pop	ds
  8855                                  		jmp	short set3_read_ok
  8856                                  %else
  8857                                  		; 16/12/2023
  8858                                  		;push	si ; * ; (not necessary)
  8859                                  		;mov	si, empty_dap_buff ; dap_buffer
  8860 0000244D BE[561B]                		mov	si, dap_buffer ; empty_dap_buff 
  8861 00002450 56                      		push	si
  8862 00002451 87F7                    		xchg	si, di
  8863                                  		; si = BDS
  8864                                  		; di = DAP buffer
  8865 00002453 B81000                  		mov	ax, 16
  8866 00002456 AB                      		stosw		; DAP size
  8867 00002457 B001                    		mov	al, 1
  8868 00002459 AB                      		stosw		; sector (read) count
  8869                                  		; buffer address
  8870 0000245A 89D8                    		mov	ax, bx	; offset disksector
  8871 0000245C AB                      		stosw
  8872 0000245D 8CC0                    		mov	ax, es	; es=ds=cs = BIOSDATA segment
  8873 0000245F AB                      		stosw
  8874                                  		; sector address (bits 0 to 31)	
  8875 00002460 8B4417                  		mov	ax, [si+17h] ; [di+BDS.hiddensectors]
  8876 00002463 AB                      		stosw
  8877 00002464 8B4419                  		mov	ax, [si+19h] ; [di+BDS.hiddensectors+2]
  8878 00002467 AB                      		stosw
  8879                                  		; sector address bits 32 to 63 (0)
  8880 00002468 31C0                    		xor	ax, ax ; 0
  8881 0000246A AB                      		stosw
  8882 0000246B AB                      		stosw
  8883                                  		;xchg	di, si
  8884 0000246C 89F7                    		mov	di, si
  8885                                  		; di = BDS
  8886 0000246E 5E                      		pop	si ; DAP buffer address	
  8887                                  		
  8888 0000246F 8A16[071A]              		mov	dl, [rom_drv_num] ; ds = cs
  8889 00002473 B442                    		mov	ah, 42h
  8890 00002475 CD13                    		int	13h		; DISK - IBM/MS Extension
  8891                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
  8892                                  		;pop	si ; *
  8893 00002477 7324                    		jnc	short set3_read_ok
  8894                                  set3_err:
  8895                                  		;jmp	setret
  8896 00002479 E9B502                  		jmp	ret_hard_err
  8897                                  %endif
  8898                                  
  8899                                  set3_chs_read:
  8900 0000247C 837D7901                		cmp	word [di+79h], 1 ; [di+BDS.bdsm_ismini] ; check for mini disk
  8901 00002480 7503                    		jnz	short oknotmini
  8902 00002482 03457B                  		add	ax, [di+7Bh]	; [di+BDS.bdsm_hidden_trks]
  8903                                  		;;;
  8904                                  
  8905                                  oknotmini:
  8906                                  ;*** end of added logic for mini disk
  8907                                  				
  8908 00002485 D0CC                    		ror	ah, 1		; move high two bits of cyl to high
  8909 00002487 D0CC                    		ror	ah, 1		; two bits of upper byte
  8910 00002489 80E4C0                  		and	ah, 0C0h	; turn off remainder of bits
  8911 0000248C 08E1                    		or	cl, ah		; move two bits to correct spot
  8912 0000248E 88C5                    		mov	ch, al		; ch iscylinder (low 8 bits)
  8913                                  					; cl is sector + 2 high bits of cylinder
  8914 00002490 88D6                    		mov	dh, dl		; dh is	head
  8915                                  		
  8916                                  		; 12/08/2023 (ds=cs)
  8917 00002492 8A16[071A]              		mov	dl, [rom_drv_num]
  8918                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  8919                                  
  8920                                  ; cl is sector + 2 high bits of cylinder
  8921                                  ; ch is low 8 bits of cylinder
  8922                                  ; dh is head
  8923                                  ; dl is drive
  8924                                  
  8925                                  ; for convenience, we are going to read the logical boot sector
  8926                                  ; into cs:disksector area.
  8927                                  
  8928                                  ; read in boot sector using bios disk interrupt. the buffer where it
  8929                                  ; is to be read in is cs:disksector.
  8930                                  
  8931                                  		; 16/12/2023
  8932                                  		; es=ds=cs = BIOSDATA segment
  8933                                  		; bx = disksector ; (**)
  8934                                  
  8935                                  		;push	cs
  8936                                  		;pop	es ; (*)
  8937                                  		
  8938                                  		;mov	bx, disksector	; for convenience,
  8939                                  					; we are going to read the logical boot sector
  8940                                  					; into cs:disksector area.
  8941 00002496 B80102                  		mov	ax, 201h
  8942 00002499 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  8943                                  					; AL = number of sectors to read, CH = track, CL = sector
  8944                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  8945                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  8946                                  		; 16/12/2023
  8947 0000249B 72DC                    		jc	short set3_err
  8948                                  
  8949                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  8950                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  8951                                  ; media if we recognize the version number.
  8952                                  
  8953                                  set3_read_ok:
  8954                                  		; 11/08/2023
  8955                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  8956                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  8957                                  		; 18/12/2023
  8958                                  		;push	bx ; +
  8959                                  		;push	ax ; (not necessary)
  8960                                  
  8961                                  		; 16/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  8962                                  		;;;
  8963 0000249D 81BFFE0155AA            		cmp	word [bx+1FEh], 0AA55h
  8964 000024A3 7541                    		jne	short invalid_boot_record
  8965                                  		; 16/12/2023
  8966                                  		; 12/08/2023
  8967                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  8968 000024A5 803FE9                  		cmp	byte [bx], 0E9h	; is it a near jump?
  8969 000024A8 740B                    		je	short check_1_ok ; yes
  8970 000024AA 803FEB                  		cmp	byte [bx], 0EBh	; is it a short jump?
  8971 000024AD 7537                    		jne	short invalid_boot_record ; no
  8972 000024AF 807F0290                		cmp	byte [bx+2], 90h ; yes, is the next one a nop?
  8973 000024B3 7531                    		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  8974                                  check_1_ok:
  8975 000024B5 837F1600                		cmp     word [bx+16h], 0 ; [bx+BPB_FATSz16]
  8976                                  		;jz	short check_1	; 16 bit FAT size is 0 if it is FAT32 bs
  8977                                  		; 16/12/2023
  8978 000024B9 740E                    		jz	short check_2	; FAT32 bs
  8979                                  
  8980                                  		; FAT16 or FAT12 bs
  8981                                  
  8982                                  		;push	ds
  8983                                  		;push	si  ; (not necessary)
  8984 000024BB 57                      		push	di
  8985                                  		; es=ds=cs = BIOSDATA segment
  8986                                  		;push	es
  8987                                  		;pop	ds
  8988                                  
  8989                                  		;mov	cx, 28
  8990 000024BC B90E00                  		mov	cx, 14 ; *
  8991 000024BF 8D7724                  		lea	si, [bx+24h]	; move offset 36 to 63
  8992                                  					;      to offset 64 (28 bytes)
  8993 000024C2 8D7F40                  		lea	di, [bx+40h]	; boot sector offset 64
  8994 000024C5 FC                      		cld	; (not necessary, 'std' is not used before here)
  8995                                  		;rep movsb
  8996 000024C6 F3A5                    		rep movsw ; *
  8997 000024C8 5F                      		pop	di
  8998                                  		;pop	si
  8999                                  		;pop	ds
  9000                                  		;;;
  9001                                  ; 16/12/2023
  9002                                  %if 0
  9003                                  ;check_1:
  9004                                  		; 12/08/2023
  9005                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  9006                                  		cmp	byte [bx], 0E9h
  9007                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  9008                                  		je	short check_1_ok ; yes
  9009                                  		cmp	byte [bx], 0EBh
  9010                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  9011                                  		jne	short invalid_boot_record ; no
  9012                                  		cmp	byte [bx+2], 90h
  9013                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  9014                                  		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  9015                                  check_1_ok:
  9016                                  %endif
  9017                                  
  9018                                  ; 18/12/2023
  9019                                  %if 0
  9020                                  		; 14/08/2023
  9021                                  check_2:
  9022                                  		mov	bx, disksector+11 ; disksector+EXT_BOOT.BPB
  9023                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  9024                                  					; point to the bpb in the boot record
  9025                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  9026                                  		mov	al, [bx+10] ; 12/08/2023 
  9027                                  					; get the mediadescriptor byte
  9028                                  		and	al, 0F0h	; mask off low nibble
  9029                                  		cmp	al, 0F0h	; is high nibble = 0Fh?
  9030                                  		jne	short invalid_boot_record ; no, invalid boot record
  9031                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  9032                                  		cmp	word [bx], 512 ; 12/08/2023
  9033                                  		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  9034                                  
  9035                                  check2_ok:				; yes, mediadescriptor ok.
  9036                                  		mov	al, [bx+2] ; 12/08/2023
  9037                                  		;mov	al, [cs:bx+2]	; now make sure that
  9038                                  					; the sectorspercluster is
  9039                                  					; a power of 2
  9040                                  					;
  9041                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  9042                                  					; get the sectorspercluster
  9043                                  %endif
  9044                                  		;;;
  9045                                  check_2:
  9046                                  		; 18/12/2023
  9047                                  		; bx = disksector
  9048 000024C9 8A4715                  		mov	al, [bx+21]	; [bx+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9049                                  					; get the mediadescriptor byte
  9050 000024CC 24F0                    		and	al, 0F0h	; mask off low nibble
  9051 000024CE 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  9052 000024D0 7514                    		jne	short invalid_boot_record ; no, invalid boot record
  9053 000024D2 817F0B0002              		cmp	word [bx+11], 512 ; [bx+EXT_BOOT.BPB+EBPB.BYTESPERSECTOR]
  9054 000024D7 750D                    		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  9055                                  
  9056                                  check2_ok:	; yes, mediadescriptor ok.
  9057 000024D9 8A470D                  		mov	al, [bx+13]	; now make sure that
  9058                                  					; the sectorspercluster is
  9059                                  					; a power of 2
  9060                                  					;
  9061                                  					; [bx++EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9062                                  					; get the sectorspercluster
  9063                                  		;;;
  9064                                  
  9065 000024DC 08C0                    		or	al, al		; is it zero?
  9066 000024DE 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  9067                                  
  9068                                  ck_power_of_two:
  9069 000024E0 D0E8                    		shr	al, 1		; shift until first bit emerges
  9070 000024E2 73FC                    		jnc	short ck_power_of_two
  9071 000024E4 7406                    		jz	short valid_boot_record
  9072                                  
  9073                                  invalid_boot_record:
  9074                                  		; 18/12/2023
  9075                                  		;pop	ax
  9076                                  		;pop	bx ; +
  9077 000024E6 E95E01                  		jmp	unknown		; jump to invalid boot record
  9078                                  					; unformatted or illegal media.
  9079                                  ; 16/12/2023
  9080                                  ; ---------------------------------------------------------------------------
  9081                                  ;	; 12/08/2023
  9082                                  ;setret_brdg:
  9083                                  ;		jmp	setret
  9084                                  ; ---------------------------------------------------------------------------
  9085                                  
  9086                                  unknown3_0_j:
  9087 000024E9 E95F01                  		jmp	unknown3_0	; legally formatted media,
  9088                                  					; although, content might be bad.
  9089                                  ; ---------------------------------------------------------------------------
  9090                                  
  9091                                  valid_boot_record:
  9092                                  		; 18/12/2023
  9093                                  		;pop	ax
  9094                                  		;pop	bx ; +
  9095                                  		
  9096                                  		; 18/12/2023
  9097                                  		; bx = offset disksector ; +
  9098                                  
  9099                                  ; Signature found. Now check version.
  9100                                  
  9101                                  		; 14/08/2023
  9102 000024EC 817F08322E              		cmp	word [bx+8], '2.'
  9103                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  9104                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  9105 000024F1 7506                    		jne	short try5
  9106 000024F3 807F0A30                		cmp	byte [bx+10], '0'
  9107                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  9108                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  9109                                  		; 12/08/2023
  9110                                  		;jnz	short try5
  9111                                  		;jmp	short copybpb
  9112 000024F7 7425                    		je	short copybpb
  9113                                  
  9114                                  ;; --------------------------------------------------------------------------
  9115                                  ;;	; 12/08/2023
  9116                                  ;;setret_brdg:
  9117                                  ;;		jmp	setret
  9118                                  ;; --------------------------------------------------------------------------
  9119                                  ;
  9120                                  ;unknown3_0_j:
  9121                                  ;		jmp	unknown3_0	; legally formatted media,
  9122                                  ;					; although, content might be bad.
  9123                                  ; ---------------------------------------------------------------------------
  9124                                  
  9125                                  try5:
  9126 000024F9 E83902                  		call	cover_fdisk_bug
  9127                                  
  9128                                  ; see if it is an os2 signature
  9129                                  
  9130                                  		; 12/08/2023
  9131                                  		; ds = cs = BIOSDATA segment
  9132 000024FC 817F08302E              		cmp	word [bx+8], '0.'
  9133                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  9134                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  9135 00002501 750C                    		jne	short no_os2
  9136 00002503 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  9137                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  9138 00002506 2C31                    		sub	al, '1'
  9139                                  		;sub	al, 31h		; '1'
  9140 00002508 24FE                    		and	al, 0FEh
  9141 0000250A 7412                    		jz	short copybpb	; accept either	'1' or '2'
  9142 0000250C E93801                  		jmp	unknown
  9143                                  ; ---------------------------------------------------------------------------
  9144                                  
  9145                                  ; no os2 signature, this is to check for real dos versions
  9146                                  
  9147                                  no_os2:
  9148                                  		; 12/08/2023
  9149                                  		; ds = cs = BIOSDATA
  9150 0000250F 817F08332E              		cmp	word [bx+8], '3.'			
  9151                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  9152                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  9153 00002514 72D3                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  9154                                  					; do not trust it, but still legal.
  9155 00002516 7506                    		jnz	short copybpb	; honor	os2 boot record
  9156                                  					; or dos 4.0 version
  9157 00002518 807F0A31                		cmp	byte [bx+10], '1' ; 12/08/2023
  9158                                  		;cmp	byte [cs:bx+10], '1'
  9159                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  9160 0000251C 72CB                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  9161                                  copybpb:
  9162                                  
  9163                                  ; 03/10/2022
  9164                                  
  9165                                  ; we have a valid boot sector. use the bpb in it to build the
  9166                                  ; bpb in bios. it is assumed that only
  9167                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  9168                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  9169                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  9170                                  ; need to be set (all other values in already). fbigfat is also set.
  9171                                  
  9172                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  9173                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  9174                                  ; and system id according to the boot record.
  9175                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  9176                                  
  9177                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
  9178                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2787h)
  9179                                  		;;;
  9180                                  		; 17/12/2023
  9181 0000251E BE[5D01]                		mov	si, disksector+11
  9182                                  		;sub	ch, ch ; ; (ch may be > 0)
  9183 00002521 29C9                    		sub	cx, cx ; 0 
  9184                                  		;mov	cl, [disksector+16] ; BPB_NumFATs
  9185 00002523 8A4C05                  		mov	cl, [si+5] ; number of FATs
  9186                                  
  9187                                  		; NOTE: This check is not proper for FAT32 boot sector (standard spec)
  9188                                  		; (after PCDOS 7.1). So, it is not existing in Windows ME IO.SYS
  9189                                  		; Erdogan Tan - 01/09/2023 ((IBMBIO.COM 7.1 disassembly note))
  9190                                  
  9191                                  		;;cmp	word ptr cs:disksector+4Dh, 0 ; ???
  9192                                  		;cmp	word [disksector+4Dh], 0
  9193                                  		;jnz	short check_3
  9194                                  
  9195                                  		; 17/12/2023
  9196                                  		; check extended boot signature (0x29)
  9197                                  		;
  9198                                  		; (***) NOTE: 28 bytes of FAT16/FAT12 boot sector from offset 36
  9199                                  		; have been moved to offset 64 (see label 'check_1_ok:' above) 
  9200                                  		; ((now, BS_BootSig is at offset 66 even if it was at offset 38))
  9201                                  		
  9202                                  		;cmp	cs:disksector+42h, 29h	; BS_BootSig (FAT32)
  9203 00002526 803E[9401]29            		cmp	byte [disksector+42h], 29h ; BS_BootSig (***)
  9204                                  		;jmp	short check_4
  9205                                  check_3:
  9206                                  		;;cmp	cs:disksector+26h, 29h	; BS_BootSig (FAT16/FAT12)
  9207                                  		;cmp	byte [disksector+26h], 29h ; (***)
  9208                                  check_4:
  9209 0000252B 7538                    		jnz	short copybpb_fat	; conventional fat system
  9210                                  
  9211                                  ; 17/12/2023
  9212                                  %if 0
  9213                                  		; 10/12/2022
  9214                                  		; (number of FATs optimization)
  9215                                  		mov	si, disksector+11 ; disksector+0Bh
  9216                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  9217                                  		;mov	cl, [cs:si+05h]
  9218                                  		; 12/08/2023
  9219                                  		; ds = cs = BIOSDATA segment (0070h)
  9220                                  		mov	cl, [si+05h] ; number of FATs
  9221                                  
  9222                                  		cmp	byte [si+1Bh], 29h ; 12/08/2023
  9223                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  9224                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  9225                                  					; [disksector+EXT_BOOT.SIG]
  9226                                  					; EXT_BOOT_SIGNATURE
  9227                                  		jnz	short copybpb_fat ; conventional fat system
  9228                                  
  9229                                  		; 03/10/2022
  9230                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  9231                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  9232                                  		;	     number of FATs must be 2 ; =*?=
  9233                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  9234                                  		;
  9235                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  9236                                  
  9237                                  		; 10/12/2022
  9238                                  		;cmp	byte [cs:disksector+10h], 0
  9239                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  9240                                  		;jnz	short copybpb_fat ; a fat system.
  9241                                  		or	cl, cl	 ; [cs:disksector+10h]
  9242                                  		jnz	short copybpb_fat ; a fat system.
  9243                                  %endif
  9244                                  
  9245                                  		; 17/12/2023 - Retro DOS v5.0
  9246                                  		;;cmp	byte [cs:disksector+10h], 0 ; BPB.fats
  9247                                  		;cmp	byte [disksector+10h], 0 ; BPB_NUmFATs
  9248                                  		;jnz	short copybpb_fat ; a fat system
  9249                                  		; 17/12/2023
  9250                                  		; cl = [disksector+10h]
  9251 0000252D 20C9                    		and	cl, cl ; 0 ?
  9252 0000252F 7534                    		jnz	short copybpb_fat ; a fat system
  9253                                  
  9254                                  ; non fat based	media.
  9255                                  
  9256 00002531 57                      		push	di  ; BDS
  9257                                  		; 12/08/2023
  9258                                  		;push	ds  ; ds = cs = BIOSDATA segment
  9259                                  		
  9260                                  		; 17/12/2023
  9261                                  		; es = ds = cs
  9262                                  		;push	ds
  9263                                  		;pop	es
  9264                                  
  9265                                  		; 12/08/2023
  9266                                  		; ds = cs
  9267                                  		;push	cs
  9268                                  		;pop	ds
  9269                                  
  9270                                  		; 10/12/2022
  9271                                  		; (number of FATs optimization)
  9272                                  		; SI = disksector+11
  9273                                  		; 17/10/2022
  9274                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  9275                                  		;mov	si, disksector+11
  9276 00002532 83C706                  		add	di, 6		; add di,BDS.BPB
  9277                                  
  9278                                  ; just for completeness, we'll make sure that total_sectors and
  9279                                  ; big_total_sectors aren't both zero. I've seen examples of
  9280                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  9281                                  ; got that way. If it occurs, then use the values from the
  9282                                  ; partition table.
  9283                                  
  9284                                  		; 17/12/2023
  9285                                  		; cx = 0
  9286                                  		; 18/12/2022
  9287                                  		;sub	cx, cx
  9288                                  
  9289                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  9290                                  		;jnz	short already_nonz 
  9291                                  		;			; how about big_total?
  9292                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  9293                                  		;jnz	short already_nonz ; we're okay if any are != 0
  9294                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  9295                                  		;jnz	short already_nonz
  9296                                  
  9297                                  		; 12/08/2023
  9298                                  		; ds = cs = BIOSDATA segment (0070h)
  9299                                  
  9300                                  		; 17/12/2023
  9301                                  		; 12/08/2023
  9302 00002535 394C08                  		cmp	[si+8], cx ; 0		; [si+EBPB.TOTALSECTORS]
  9303 00002538 751C                    		jnz	short already_nonz
  9304                                  				    	; how about big_total?
  9305 0000253A 394C15                  		cmp	[si+15h], cx ; 0	; [si+EBPB.BIGTOTALSECTORS]
  9306 0000253D 7517                    		jnz	short already_nonz ; we're okay if any are != 0
  9307 0000253F 394C17                  		cmp	[si+17h], cx ; 0	; [si+EBPB.BIGTOTALSECTORS+2]
  9308 00002542 7512                    		jnz	short already_nonz
  9309                                  
  9310                                  ; now let's copy the values from the partition table (now in the BDS)
  9311                                  ; into the BPB in the boot sector buffer, before they get copied back.
  9312                                  
  9313 00002544 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  9314                                  		; 12/08/2023
  9315                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  9316 00002547 894408                  		mov	[si+8], ax
  9317 0000254A 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  9318                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  9319 0000254D 894415                  		mov	[si+15h], ax
  9320 00002550 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  9321                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  9322 00002553 894417                  		mov	[si+17h], ax
  9323                                  
  9324                                  already_nonz:
  9325                                  		; 18/12/2022
  9326                                  		; cx = 0
  9327                                  		;mov	cl, 25
  9328                                  		;;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  9329                                  		; 17/12/2023 - Retro DOS v5.0
  9330 00002556 B135                    		mov	cl, 53	; PCDOS 7.1 IBMBIO.COM
  9331                                  				; BDS.BPB size (25 + 28 for FAT32 parms)
  9332 00002558 F3A4                    		rep movsb
  9333                                  		;pop	ds
  9334                                  		; 12/08/2023
  9335                                  		; ds = cs
  9336                                  		;pop	bp  ; ds (on top of stack) = BIOSDATA
  9337 0000255A 5F                      		pop	di  ; BDS
  9338                                  		;push	es
  9339                                  		;push	ds
  9340                                  		;pop	es
  9341                                  		;push	cs
  9342                                  		;pop	ds
  9343                                  		; 12/08/2023
  9344                                  		;mov	es, bp
  9345                                  		; ds = cs = es
  9346                                  		
  9347                                  		; 14/08/2023
  9348 0000255B BD[5108]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  9349                                  		; 18/12/2022
  9350                                  		;mov	bp, mov_media_ids
  9351                                  		;;mov	bp, 751h	; mov_media_ids
  9352                                  					; at 2C7h:751h = 70h:2CC1h
  9353                                  					; set volume id, systemid, serial.
  9354 0000255E 0E                      		push	cs		; simulate far call
  9355 0000255F E80FF5                  		call	call_bios_code
  9356                                  		; 12/08/2023
  9357                                  		; ds = cs = es
  9358                                  		;push	es
  9359                                  		;pop	ds
  9360                                  		;pop	es
  9361 00002562 E9C501                  		jmp	goodret
  9362                                  
  9363                                  ; ---------------------------------------------------------------------------
  9364                                  
  9365                                  ; ****** cas ---
  9366                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  9367                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  9368                                  ; happens with some frequency -- perhaps through some OS/2 setup
  9369                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  9370                                  ; from the boot sector into the DPB anyway, we've just been using
  9371                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  9372                                  ; we'll go ahead and copy it into the DPB, except in the case
  9373                                  ; that it equals zero, in which case we just use the values in
  9374                                  ; the DPB from the partition table.
  9375                                  
  9376                                  ; 17/10/2022
  9377                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  9378                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  9379                                  ; 09/12/2022
  9380                                  MOVMEDIAIDS equ mov_media_ids
  9381                                  CLEARIDS equ clear_ids
  9382                                  ; 11/09/2023
  9383                                  CLEARIDS_X equ clear_ids_x
  9384                                  
  9385                                  copybpb_fat:
  9386                                  		; 17/12/2023
  9387                                  		; ch = 0, cl = number of FATs
  9388                                  		; 10/12/2022
  9389                                  		; (number of FATs optimization)
  9390                                  		; SI = disksector+11
  9391                                  		; 17/10/2022
  9392                                  		;mov	si, disksector+11
  9393                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  9394                                  					; cs:si	-> bpb in boot
  9395                                  		; 17/12/2023
  9396                                  		; dx = 0
  9397                                  		;xor	dx, dx
  9398                                  
  9399                                  		; 12/08/2023
  9400                                  		; ds = cs = BIOSDATA segment (0070h)
  9401 00002565 8B4408                  		mov	ax, [si+8]
  9402                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  9403                                  					; get totsec from boot sec
  9404 00002568 09C0                    		or	ax, ax
  9405 0000256A 7514                    		jnz	short copy_totsec ; if non zero, use that
  9406 0000256C 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  9407                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  9408                                  					; get the big version
  9409                                  					; (32 bit total	sectors)
  9410 0000256F 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  9411                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  9412                                  		; 10/12/2022
  9413                                  		; (number of FATs optimization)
  9414                                  		; CL = number of FATs (2 or 1) 
  9415 00002572 89D3                    		mov	bx, dx		; see if it is a big zero
  9416 00002574 09C3                    		or	bx, ax
  9417 00002576 7508                    		jnz	short copy_totsec
  9418                                  			; screw it. it was bogus.
  9419 00002578 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  9420 0000257B 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  9421 0000257E EB06                    		jmp	short fat_big_small
  9422                                  
  9423                                  		;mov	cx, dx
  9424                                  		;or	cx, ax		; see if it is a big zero
  9425                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  9426                                  copy_totsec:				
  9427 00002580 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  9428                                  					; make DPB match boot sec
  9429 00002583 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  9430                                  
  9431                                  		; 10/12/2022
  9432                                  ;totsec_already_set:			
  9433                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  9434                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  9435                                  
  9436                                  ; determine fat entry size.
  9437                                  
  9438                                  fat_big_small:
  9439                                  
  9440                                  ;at this moment dx;ax = total sector number
  9441                                  
  9442                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  9443                                  ;from the BPB on the disk
  9444                                  		
  9445                                  		; 12/08/2023
  9446                                  		; ds = cs = BIOSDATA segment (0070h)
  9447                                  				
  9448 00002586 8B5C03                  		mov	bx, [si+3]
  9449                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  9450                                  					; get #reserved_sectors	from BPB
  9451 00002589 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  9452                                  					; update BDS field
  9453 0000258C 29D8                    		sub	ax, bx
  9454 0000258E 83DA00                  		sbb	dx, 0		; update the count
  9455                                  		; 12/08/2023
  9456 00002591 8B5C0B                  		mov	bx, [si+0Bh]
  9457                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  9458                                  					; bx = sectors/fat
  9459 00002594 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  9460                                  					; set in bds bpb
  9461                                  		; 17/12/2023 - Retro DOS v5.0
  9462                                  		;	      (PCDOS 7.1 IBMBIO.COM)
  9463 00002597 53                      		push	bx ; FAT sectors
  9464 00002598 09DB                    		or	bx, bx
  9465 0000259A 753A                    		jnz	short fat_16bit	
  9466                                  
  9467                                  ; 17/12/2023
  9468                                  %if 0		
  9469                                  		sub	ax, [si+19h]	; FAT32 file system (PCDOS 7.1 BUG!)
  9470                                  					; BPB.FATSz32
  9471                                  		sbb	dx, [si+1Bh]	; BPB.FATSz32+2 (PCDOS 7.1 BUG!)
  9472                                  		; dx:ax = partition size - (one FAT sectors + reserved sects)  
  9473                                  		mov	bx, [si+19h]	; BPB.FATSz32
  9474                                  		mov	[di+1Fh], bx	; [di+BDS.fatsecs32]
  9475                                  		mov	bx, [si+1Bh]	; BPB.FATSz32+2
  9476                                  		mov	[di+21h], bx	; [di+BDS.fatsecs32+2]
  9477                                  		mov	bx, [si+1Dh]	; BPB.BPB_ExtFlags
  9478                                  		mov	[di+23h], bx	; [di+BDS.extflags]
  9479                                  		mov	bx, [si+1Fh]	; BPB.FSVer
  9480                                  		mov	[di+25h], bx	; [di+BDS.fsver]
  9481                                  		mov	bx, [si+21h]	; BPB.RootClus
  9482                                  		mov	[di+27h], bx	; [di+BDS.rootdirclust]
  9483                                  		mov	bx, [si+23h]	; BPB.RootClus+2
  9484                                  		mov	[di+29h], bx	; [di+BDS.rootdirclust+2]
  9485                                  		mov	bx, [si+25h]	; BPB.FSInfo
  9486                                  		mov	[di+2Bh], bx	; [di+BDS.fsinfo]
  9487                                  		mov	bx, [si+27h]	; BPB.FSInfo+2
  9488                                  		mov	[di+2Dh], bx	; [di+BDS.fsinfo+2]
  9489                                  		jmp	short fat_32bit	; PCDOS 7.1 BUG! Erdogan Tan - 8/8/2023
  9490                                  					; correct code (would be):
  9491                                  					;   mov cl, [cs:si+05h] ; BPB_NumFATs
  9492                                  					; sub_fat32_size:
  9493                                  					;   sub ax, [cs:si+19h] ; BPB_FATSz32
  9494                                  					;   sbb dx, [cs:si+1Bh] ; BPB_FATSz32+2
  9495                                  					;   dec cl
  9496                                  					;   jg short sub_fat32_size
  9497                                  					;   jmp short fat_32bit
  9498                                  %endif
  9499                                  		; 17/12/2023
  9500                                  		; cl = BPB_NumFATs (2 or 1)
  9501                                  		; ch = 0
  9502 0000259C 8B5C19                  		mov	bx, [si+19h]	; BPB.FATSz32
  9503                                  sub_fat32_size:
  9504 0000259F 29D8                    		sub	ax, bx
  9505 000025A1 1B541B                  		sbb	dx, [si+1Bh]	; BPB.FATSz32+2
  9506                                  		;dec	cl
  9507 000025A4 49                      		dec	cx
  9508 000025A5 7FF8                    		jg	short sub_fat32_size
  9509                                  
  9510 000025A7 895D1F                  		mov	[di+1Fh], bx	; [di+BDS.fatsecs32]
  9511 000025AA 8B5C1B                  		mov	bx, [si+1Bh]	; BPB.FATSz32+2
  9512 000025AD 895D21                  		mov	[di+21h], bx	; [di+BDS.fatsecs32+2]
  9513                                  
  9514 000025B0 8B5C1D                  		mov	bx, [si+1Dh]	; BPB.BPB_ExtFlags
  9515 000025B3 895D23                  		mov	[di+23h], bx	; [di+BDS.extflags]
  9516 000025B6 8B5C1F                  		mov	bx, [si+1Fh]	; BPB.FSVer
  9517 000025B9 895D25                  		mov	[di+25h], bx	; [di+BDS.fsver]
  9518 000025BC 8B5C21                  		mov	bx, [si+21h]	; BPB.RootClus
  9519 000025BF 895D27                  		mov	[di+27h], bx	; [di+BDS.rootdirclust]
  9520 000025C2 8B5C23                  		mov	bx, [si+23h]	; BPB.RootClus+2
  9521 000025C5 895D29                  		mov	[di+29h], bx	; [di+BDS.rootdirclust+2]
  9522 000025C8 8B5C25                  		mov	bx, [si+25h]	; BPB.FSInfo
  9523 000025CB 895D2B                  		mov	[di+2Bh], bx	; [di+BDS.fsinfo]
  9524 000025CE 8B5C27                  		mov	bx, [si+27h]	; BPB.FSInfo+2
  9525 000025D1 895D2D                  		mov	[di+2Dh], bx	; [di+BDS.fsinfo+2]
  9526 000025D4 EB08                    		jmp	short fat_32bit
  9527                                  		
  9528                                  fat_16bit:
  9529                                  		; 17/12/2023 - Retro DOS v5.0
  9530                                  		;	      (PCDOS 7.1 IBMBIO.COM)
  9531                                  		; 10/12/2022
  9532                                  		; (number of FATs optimization)
  9533                                  		; CL = number of FATs (2 or 1)
  9534                                  		; CH = 0 ; 17/12/2023 
  9535                                  		;dec	cl ; *
  9536                                  		; 18/12/2022
  9537 000025D6 49                      		dec	cx ; *
  9538 000025D7 D3E3                    		shl	bx, cl
  9539                                  		;shl	bx, 1	; =*?=	; always 2 fats
  9540                                  		
  9541 000025D9 29D8                    		sub	ax, bx		; sub #	fat sectors
  9542 000025DB 83DA00                  		sbb	dx, 0
  9543                                  fat_32bit:	
  9544                                  		; 17/12/2023
  9545 000025DE 8B5C06                  		mov	bx, [si+6] ; 12/08/2023
  9546                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  9547                                  					; # root entries
  9548 000025E1 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  9549                                  					; set in bds bpb
  9550 000025E4 B104                    		mov	cl, 4
  9551 000025E6 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  9552 000025E8 29D8                    		sub	ax, bx		; sub #	dir sectors
  9553 000025EA 83DA00                  		sbb	dx, 0		;
  9554                                  					; dx:ax	now contains the
  9555                                  					; # of data sectors
  9556                                  		; 17/12/2023
  9557                                  		; ch = 0
  9558                                  		;xor	cx, cx ; *
  9559 000025ED 8A4C02                  		mov	cl, [si+2] ; 12/08/2023
  9560                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  9561                                  					; sectors per cluster
  9562 000025F0 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  9563                                  					; set in bios bpb
  9564 000025F3 50                      		push	ax
  9565 000025F4 89D0                    		mov	ax, dx
  9566 000025F6 31D2                    		xor	dx, dx
  9567 000025F8 F7F1                    		div	cx		; cx = sectors per cluster
  9568                                  		; 12/08/2023 (ds=cs)
  9569                                  		;mov	[temp_h], ax
  9570                                  		;;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  9571                                  					; # clusters.
  9572                                  		; 17/12/2023
  9573 000025FA A3[9E04]                		mov	[saved_word], ax ; hw of cluster number
  9574 000025FD 58                      		pop	ax
  9575 000025FE F7F1                    		div	cx
  9576                                  		; 17/12/2023
  9577                                  		;;cmp	word [cs:temp_h], 0
  9578                                  		;cmp	word [temp_h], 0  ; 12/08/2023
  9579                                  		;cmp	word [saved_word], 0 ; (*)
  9580                                  		;ja	short toobig_ret ; too big cluster number
  9581                                  
  9582                                  		; 17/12/2023
  9583                                  		;;;
  9584 00002600 5B                      		pop	bx ; FAT sectors (16 bit)
  9585                                  		;and	bx, bx ; 0 ?
  9586 00002601 09DB                    		or	bx, bx ; 0 ?
  9587 00002603 751F                    		jnz	short chk_clnum_hw
  9588                                  				 ; 16 bit fat sectors > 0 ; FAT12 or FAT16 fs
  9589                                  
  9590 00002605 813E[9E04]FF0F          		cmp	word [saved_word], 0FFFh 
  9591 0000260B 7503                    		jne	short fat32_clust_limit
  9592 0000260D 83F8F6                  		cmp	ax, 0FFF6h	; FAT32 cluster number limit: 0FFFFFF6h
  9593                                  fat32_clust_limit:
  9594 00002610 772D                    		ja	short short toobig_ret ; too big cluster number
  9595 00002612 391E[9E04]              		cmp	[saved_word], bx ; 0 ?
  9596                                  	 	;jnz	short fat16_clust_limit
  9597 00002616 7505                    		jnz	short set_bigbig_flag ; 17/12/2023
  9598                                  fat16_clust_limit:	; 17/12/2023
  9599 00002618 83F8F6                  		cmp	ax, 0FFF6h	; FAT16 cluster number limit: 0FFF6h
  9600                                  ;fat16_clust_limit:
  9601 0000261B 760E                    		jna     short fat12_clust_limit ; jbe
  9602                                  set_bigbig_flag:	; 17/12/2023
  9603 0000261D 800E[061A]20            		or	byte [fbigfat], 20h ; fbigbig ; FAT32 fs
  9604 00002622 EB11                    		jmp	short copymediaid
  9605                                  chk_clnum_hw:
  9606 00002624 833E[9E04]00            		cmp	word [saved_word], 0 ; (*)
  9607 00002629 7714                    		ja	short toobig_ret ; too big cluster number
  9608                                  		;;;
  9609                                  fat12_clust_limit:
  9610 0000262B 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  9611                                  					; is this 16-bit fat?
  9612 0000262E 7205                    		jb	short copymediaid ; no,	small fat
  9613                                  		; 17/10/2022
  9614 00002630 800E[061A]40            		or	byte [fbigfat], 40h ; fbig ; FAT16 fs
  9615                                  		;or	ds:fbigfat, 40h	; fbig
  9616                                  					; 16 bit fat
  9617                                  copymediaid:
  9618                                  		; 17/12/2023
  9619                                  		; es = ds = cs
  9620                                  		
  9621                                  		;push	es
  9622                                  		;push	ds
  9623                                  		;pop	es
  9624                                  		
  9625                                  		; 12/08/2023
  9626                                  		; ds = cs = BIOSDATA
  9627                                  		;push	cs
  9628                                  		;pop	ds
  9629                                  		; 17/10/2022
  9630 00002635 BD[5108]                		mov	bp, MOVMEDIAIDS
  9631                                  		;mov	bp, 865h	; (PCDOS 7.1 IBMBIO.COM)
  9632                                  		;;mov	bp, 751h	; mov_media_ids
  9633                                  					; at 2C7h:751h = 70h:2CC1h
  9634                                  					; copy filesys_id, volume label
  9635 00002638 0E                      		push	cs		; simulate far call
  9636 00002639 E835F4                  		call	call_bios_code
  9637                                  
  9638                                  		; 12/08/2023
  9639                                  		;push	es
  9640                                  		;pop	ds
  9641                                  		; 17/12/2023
  9642                                  		;pop	es
  9643                                  
  9644 0000263C E9CD00                  		jmp	massage_bpb	; now final check for bpb info
  9645                                  					; and return.
  9646                                  ; ---------------------------------------------------------------------------
  9647                                  
  9648                                  toobig_ret:
  9649                                  		; 12/08/2023 (ds=cs=BIOSDATA)
  9650 0000263F 800E[061A]80            		or	byte [fbigfat], 80h ; ftoobig
  9651                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  9652                                  					; too big (32 bit clust #) for FAT16
  9653 00002644 E9E300                  		jmp	goodret		; still	drive letter is	assigned
  9654                                  					; but useless. to big for
  9655                                  					; current pc dos fat file system
  9656                                  ; ---------------------------------------------------------------------------
  9657                                  
  9658                                  unknown:
  9659                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9660 00002647 804D4002                		or	byte [di+40h], 2 ; [di+BDS.flags+1]
  9661                                  					 ; unformatted_media
  9662                                  		; 12/12/2022
  9663                                  		;or	byte [di+24h], 02h
  9664                                  		;;or	word [di+23h], 200h ; [di+BDS.flags]
  9665                                  					; unformatted_media
  9666                                  					; Set unformatted media	flag.
  9667                                  
  9668                                  ; the boot signature may not be	recognizable,
  9669                                  ; but we should	try and	read it	anyway.
  9670                                  
  9671                                  unknown3_0:
  9672 0000264B 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  9673                                  					; [di+BDS.totalsecs32+2]
  9674 0000264E 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  9675 00002651 BE[161A]                		mov	si, disktable2
  9676                                  scan:					; 08/08/2023
  9677                                  		;cmp	dx, [cs:si]	; total sectors hw
  9678                                  		; 12/08/2023 (ds=cs)
  9679 00002654 3B14                    		cmp	dx, [si] 
  9680 00002656 720C                     		jb	short gotparm
  9681 00002658 7705                    		ja	short scan_next
  9682                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  9683 0000265A 3B4402                  		cmp	ax, [si+2]
  9684 0000265D 7605                    		jbe	short gotparm
  9685                                  scan_next:				
  9686 0000265F 83C60A                  		add	si, 10		; 5*2
  9687 00002662 EBF0                    		jmp	short scan	; covers upto 512 mb media
  9688                                  ; ---------------------------------------------------------------------------
  9689                                  
  9690                                  gotparm:
  9691 00002664 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  9692                                  		;or	ds:fbigfat, cl
  9693                                  		; 17/10/2022
  9694 00002667 080E[061A]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  9695                                  		; 12/08/2023
  9696                                  		; ds = cs = BIOSDATA
  9697 0000266B 8B4C04                  		mov	cx, [si+4]
  9698                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  9699                                  					; cl = log base 2 of ch
  9700 0000266E 8B5406                  		mov	dx, [si+6]
  9701                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  9702                                  
  9703                                  ; now calculate size of fat table
  9704                                  
  9705 00002671 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  9706                                  					; save number of (root)	dir entries
  9707 00002674 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  9708 00002677 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  9709 0000267A 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  9710                                  					; save sectors per cluster
  9711                                  		
  9712                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9713 0000267D F606[061A]60            		test	byte [fbigfat], 60h ; fbig+fbigbig ; FAT16 or FAT32
  9714                                  		; 11/09/2023
  9715                                  		; 17/10/2022
  9716                                  		;test	byte [fbigfat], 40h
  9717                                  		;;test	ds:fbigfat, 40h	; fbig
  9718                                  					; if (fbigfat)
  9719 00002682 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  9720                                  
  9721                                  ; we don't need to change "small fat" logic since it is guaranteed
  9722                                  ; that double word total sector will not use 12 bit fat (unless
  9723                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  9724                                  ; so in this case we assume dx = 0 !!
  9725                                  
  9726 00002684 31DB                    		xor	bx, bx		; 12 bit fat (FAT12 fs)
  9727 00002686 88EB                    		mov	bl, ch
  9728 00002688 4B                      		dec	bx
  9729 00002689 01C3                    		add	bx, ax		; dx=0
  9730 0000268B D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  9731 0000268D 43                      		inc	bx		; BDS.secperclus
  9732 0000268E 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  9733 00002691 89DE                    		mov	si, bx
  9734 00002693 D1EB                    		shr	bx, 1
  9735 00002695 01F3                    		add	bx, si		; number of FAT bytes ; 08/08/2023
  9736 00002697 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  9737 0000269B D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  9738 0000269D 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  9739                                  					; save number of fat sectors
  9740 000026A0 EB6A                    		jmp	short massage_bpb
  9741                                  ; ---------------------------------------------------------------------------
  9742                                  
  9743                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  9744                                  
  9745                                  dobig:					
  9746 000026A2 B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  9747 000026A4 52                      		push	dx		; save total sectors (high)
  9748 000026A5 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  9749 000026A8 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  9750 000026AA 29D0                    		sub	ax, dx
  9751 000026AC 5A                      		pop	dx
  9752 000026AD 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  9753 000026B0 83E801                  		sub	ax, 1
  9754 000026B3 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  9755                                  					; total	secs - reserved	secs - root dir	secs
  9756 000026B6 B302                    		mov	bl, 2
  9757 000026B8 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  9758                                  					; bx = 256 * BDS.secperclus + 2
  9759                                  
  9760                                  ; I don't understand why to add bx here!!!
  9761                                  
  9762                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  9763                                  		; 27/09/2022
  9764                                  		; (Microsoft FAT32 File	System Specification,
  9765                                  		; December 2000, Page 21)
  9766                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  9767                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  9768                                  		; 8/8/2023 (Retro DOS v5.0)
  9769                                  		; If(FATType == FAT32)
  9770                                  		;   TmpVal2 = TmpVal2 / 2;
  9771                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  9772                                  		; 8/8/2023 (Retro DOS v5.0)
  9773                                  		; If(FATType == FAT32) {
  9774                                  		;   BPB_FATSz16 = 0;
  9775                                  		;   BPB_FATSz32 = FATSz;
  9776                                  		;} else {
  9777                                  		;   BPB_FATSz16 = LOWORD(FATSz);
  9778                                  		;/* there is no BPB_FATSz32 in a FAT16 BPB */
  9779                                  		;}
  9780                                  					; dx:ax = TmpVal1, bx = TmpVal2
  9781 000026BB 01D8                    		add	ax, bx		; 
  9782 000026BD 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  9783 000026C0 83E801                  		sub	ax, 1		
  9784 000026C3 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  9785                                  
  9786                                  		;;;
  9787                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9788 000026C6 F606[061A]20            		test	byte [fbigfat], 20h ; fbigbig (FAT32) flag
  9789 000026CB 740D                    		jz      short dobig1
  9790                                  
  9791 000026CD D1EB                    		shr	bx, 1           ; TmpVal2 = TmpVal2 / 2
  9792                                  					; dx:ax = TmpVal1+(2*TmpVal2)-1
  9793 000026CF 83E81F                  		sub	ax, 31          ; reserved sectors = 32 (for FAT32 fs) /// 1+31 = 32
  9794 000026D2 83DA00                  		sbb	dx, 0
  9795 000026D5 29D8                    		sub	ax, bx
  9796 000026D7 83DA00                  		sbb	dx, 0           ; dx:ax = TmpVal1+(2*TmpVal2)-TmpVal2-1
  9797                                  					;       = TmpVal1+(TmpVal2-1)
  9798                                  dobig1:
  9799 000026DA 50                      		push	ax		; save lw of dividend
  9800 000026DB 89D0                    		mov	ax, dx		; divide hw of dx:ax at first (as 1st stage)
  9801 000026DD 31D2                    		xor	dx, dx
  9802 000026DF F7F3                    		div	bx		; 32 bit division, dx:ax/bx
  9803                                  					; remainder in dx is hw of 2nd stage dividend
  9804 000026E1 89C5                    		mov	bp, ax		; hw of quotient
  9805 000026E3 58                      		pop	ax		; restore lw of dividend (of 1st stage)
  9806                                  		;;;
  9807                                  
  9808                                  ; assuming dx in the table will never be bigger than bx.
  9809                                  
  9810 000026E4 F7F3                    		div	bx		; BDS.fatsecs =
  9811                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  9812 000026E6 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  9813                                  					; number of fat	sectors
  9814                                  		;;;
  9815                                  		
  9816                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9817 000026E9 8A1E[061A]              		mov	bl, [fbigfat]
  9818 000026ED 885D3B                  		mov	[di+3Bh], bl	; [di+BDS.fatsiz] ; fat size flag
  9819                                  		
  9820 000026F0 F6C320                  		test	bl, 20h		; fbigbig (FAT32) flag
  9821 000026F3 7410                    		jz	short dobig2	; not FAT32
  9822                                  
  9823 000026F5 89451F                  		mov	[di+1Fh], ax	; [di+BDS.fatsecs32]
  9824 000026F8 896D21                  		mov	[di+21h], bp	; [di+BDS.fatsecs32+2]
  9825 000026FB C745110000              		mov	word [di+11h], 0 ; [di+BDS.fatsecs] = 0
  9826                                  					; clear 16 bit FAT size field
  9827 00002700 C745092000              		mov	word [di+9], 32	; [di+BDS.resectors]
  9828                                  					; set reserved sectors to 32 (FAT32 de facto)
  9829                                  dobig2:
  9830                                  		;;;
  9831                                  
  9832                                  ; now, set the default filesys_id, volume label, serial number
  9833                                  
  9834                                  		; 05/08/2023
  9835                                  		; [di+1Fh] = [fbigfat]
  9836                                  		;
  9837                                  		;;mov	bl, ds:fbigfat
  9838                                  		;; 17/10/2022
  9839                                  		;mov	bl, [fbigfat]
  9840                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  9841                                  
  9842                                  		; 12/08/2023
  9843                                  		;push	ds ; ds = cs = BIOSDATA
  9844                                  		
  9845                                  		; 17/12/2023
  9846                                  		; es = ds = cs
  9847                                  		;push	ds
  9848                                  		;pop	es
  9849                                  
  9850                                  		; 12/08/2023 
  9851                                  		; ds = cs = BIOSDATA
  9852                                  		;push	cs
  9853                                  		;pop	ds
  9854                                  
  9855                                  		; 18/12/2023 - Retro DOS v5.0
  9856                                  		; bl = [fbigfat] (clear_ids_x uses bl value here)
  9857                                  		; 11/09/2023
  9858                                  		;mov	al, [fbigfat]
  9859 00002705 BD[A106]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  9860                                  		; 17/10/2022
  9861                                  		;mov	bp, CLEARIDS
  9862                                  		;;mov	bp, 5D9h	; clear_ids
  9863                                  					; at 2C7h:5D9h = 70h:2B49h
  9864                                  					; at BIOSCODE:06ABh
  9865                                  					;	in PCDOS 7.1 IBMBIO.COM
  9866 00002708 0E                      		push	cs
  9867 00002709 E865F3                  		call	call_bios_code
  9868                                  
  9869                                  		; 12/08/2023
  9870                                  		;pop	ds ; ds = cs = BIOSDATA
  9871                                  
  9872                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  9873                                  ; set according to the partition information. we are going to
  9874                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  9875                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  9876                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  9877                                  ; we don't do this for the bpb information from the boot record. we
  9878                                  ; are not going to change the bpb information from the boot record.
  9879                                  
  9880                                  massage_bpb:
  9881                                  		; 05/08/2023
  9882                                  		; [di+1Fh] = [fbigfat]
  9883                                  		;
  9884                                  		;; 12/12/2022
  9885                                  		;mov	bl, [fbigfat]
  9886                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  9887                                  		;			; set size of fat on media
  9888                                  		;
  9889 0000270C 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  9890 0000270F 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  9891                                  		; 11/09/2023
  9892 00002712 09D2                    		or	dx, dx
  9893 00002714 7514                    		jnz	short goodret	
  9894                                  		;cmp	dx, 0		; double word total sectors?
  9895                                  		;;ja	short goodret	; don't have to change it.
  9896                                  		;; 12/12/2022
  9897                                  		;ja	short short goodret2
  9898                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  9899                                  		;ja	short goodret	; don't have to change it.
  9900                                  		; 12/12/2022
  9901 00002716 395519                  		cmp	[di+19h], dx ; 0
  9902                                  		;ja	short goodret2
  9903 00002719 770F                    		ja	short goodret	; 11/09/2023
  9904 0000271B 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  9905                                  		;jb	short goodret
  9906                                  		; 12/12/2022
  9907                                  		;jc	short goodret
  9908 0000271E 7209                    		jc	short goodret_clc ; 11/09/2023
  9909 00002720 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  9910 00002723 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  9911                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  9912                                  		; 12/12/2022
  9913 00002726 89551B                  		mov	[di+1Bh], dx ; 0
  9914                                  goodret_clc:
  9915                                  		; 11/09/2023
  9916 00002729 F8                      		clc 
  9917                                  goodret:
  9918                                  		;mov	bl, ds:fbigfat
  9919                                  		; 11/09/2023
  9920                                  		; 12/12/2022
  9921                                  		; 17/10/2022
  9922 0000272A 8A1E[061A]              		mov	bl, [fbigfat]
  9923                                  		; 17/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9924 0000272E 885D3B                  		mov	[di+3Bh], bl	; [di+BDS.fatsiz]
  9925                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  9926                                  					; set size of fat on media
  9927                                  		; 11/09/2023
  9928                                  		;clc
  9929                                  ret_hard_err:
  9930                                  		; 12/12/2022
  9931                                  goodret2:
  9932 00002731 07                      		pop	es
  9933                                  		;pop	ds	; ds = cs = BIOSDATA ; 14/08/2023
  9934 00002732 5B                      		pop	bx
  9935 00002733 5F                      		pop	di
  9936 00002734 C3                      		retn
  9937                                  
  9938                                  ; =============== S U B	R O U T	I N E =======================================
  9939                                  
  9940                                  ; 15/10/2022
  9941                                  
  9942                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  9943                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  9944                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  9945                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  9946                                  ;then subtract 1 from BPB_TOTALSECTORS.
  9947                                  
  9948                                  		; 17/10/2022
  9949                                  cover_fdisk_bug:
  9950                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9951                                  		; ds = cs
  9952                                  
  9953                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
  9954                                  		; (optimization)
  9955                                  		;push	ax
  9956                                  		;push	dx
  9957                                  		;push	si
  9958                                  
  9959                                  		; 18/12/2023
  9960                                  		; bx = offset disksector
  9961                                  
  9962                                  		; 18/12/2023
  9963 00002735 807F2629                		cmp	byte [bx+26h], 29h
  9964                                  		; 12/08/2023
  9965                                  		;cmp	byte [disksector+26h], 29h
  9966                                  		;;cmp	byte [cs:disksector+26h], 29h
  9967                                  					; [disksector+EXT_BOOT.SIG],
  9968                                  					; EXT_BOOT_SIGNATURE
  9969 00002739 7426                    		je	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  9970                                  		
  9971 0000273B 817F073130              		cmp	word [bx+7], 3031h
  9972                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  9973 00002740 7506                    		jne	short cfb_chk_totalsecs ; 11/08/2023
  9974 00002742 807F0A30                		cmp	byte [bx+10], '0'
  9975                                  		;cmp	byte [cs:bx+10], '0'
  9976 00002746 7519                    		jne	short cfb_retit
  9977                                  
  9978                                  cfb_chk_totalsecs:
  9979                                  		; 11/08/2023
  9980                                  ; 18/12/2023
  9981                                  %if 0
  9982                                  		; 17/10/2022		
  9983                                  		mov	si, disksector+11 ; 14Eh+0Bh
  9984                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  9985                                  		; 12/08/2023
  9986                                  		cmp	word [si+8], 0
  9987                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  9988                                  					; just to make sure.
  9989                                  		jz	short cfb_retit
  9990                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  9991                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  9992                                  		; 12/08/2023
  9993                                  		mov	ax, [si+8]
  9994                                  		add	ax, [si+11h]
  9995                                  
  9996                                  		jnb	short cfb_retit
  9997                                  		jnz	short cfb_retit
  9998                                  					; if carry set and ax=0
  9999                                  		dec	word [si+8]
 10000                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
 10001                                  					; then decrease	BPB_TOTALSECTORS by 1
 10002                                  %endif
 10003                                  		; 18/12/2023
 10004                                  		;cmp	word [bx+19], 0
 10005 00002748 8B4713                  		mov	ax, [bx+19]	; [bx+EBPB.TOTALSECTORS]
 10006 0000274B 21C0                    		and	ax, ax ; 0 ?
 10007 0000274D 7412                    		jz	short cfb_retit
 10008                                  
 10009                                  		;mov	ax, [bx+19]
 10010 0000274F 03471C                  		add	ax, [bx+28]	; [bx+EBPB.HIDDENSECTORS]
 10011 00002752 730D                    		jnc	short cfb_retit
 10012 00002754 750B                    		jnz	short cfb_retit
 10013                                  		; ax = 0		; 0 -> 0FFFFh
 10014 00002756 FF4F13                  		dec	word [bx+19]	; then decrease	BPB_TOTALSECTORS by 1
 10015                                  
 10016 00002759 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
 10017 0000275D 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
 10018                                  cfb_retit:	
 10019                                  		; 18/12/2023
 10020                                  		;pop	si
 10021                                  		;pop	dx
 10022                                  		;pop	ax
 10023                                  		
 10024 00002761 C3                      		retn
 10025                                  
 10026                                  ; ---------------------------------------------------------------------------
 10027                                  		
 10028                                  		; 18/12/2023 - Retro DOS v5.0 
 10029                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2A3Dh)
 10030                                  		; ((MSDOS 6.22 IO.SYS - BIOSDATA:21DCh))
 10031                                  
 10032 00002762 0200                    word2:		dw 2
 10033 00002764 0300                    word3:		dw 3
 10034 00002766 0002                    word512:	dw 512
 10035                                  
 10036                                  ; =============== S U B	R O U T	I N E =======================================
 10037                                  
 10038                                  ; 15/10/2022
 10039                                  
 10040                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
 10041                                  ; the form factor. it is assumed that the bpbs for the various form factors
 10042                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
 10043                                  ; as the bpb on the drive.
 10044                                  ;
 10045                                  ; no attempt is made to preserve registers since we are going to jump to
 10046                                  ; sysinit straight after this routine.
 10047                                  
 10048                                  		; 18/12/2023 - Retro DOS v5.0 
 10049                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2A43h)
 10050                                  setdrvparms:
 10051                                  		; 12/12/2023
 10052                                  		; ds = cs
 10053 00002768 31DB                    		xor	bx, bx
 10054                                  		; 18/10/2022
 10055 0000276A C43E[1901]              		les	di, [start_bds] ; get first bds in list
 10056                                  _next_bds:
 10057 0000276E 06                      		push	es
 10058 0000276F 57                      		push	di
 10059                                  
 10060                                  		; 18/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 10061 00002770 268A5D3E                		mov	bl, [es:di+3Eh]	; [es:di+BDS.formfactor]
 10062                                  		;mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
 10063                                  
 10064 00002774 80FB05                  		cmp	bl, 5		; ffHardFile
 10065 00002777 753A                    		jnz	short nothardff
 10066 00002779 31D2                    		xor	dx, dx
 10067 0000277B 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 10068 0000277F 09C0                    		or	ax, ax
 10069 00002781 7508                    		jnz	short get_ccyl
 10070 00002783 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10071 00002787 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10072                                  get_ccyl:
 10073 0000278B 52                      		push	dx
 10074 0000278C 50                      		push	ax
 10075 0000278D 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
 10076 00002791 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10077                                  					; assume sectors per cyl. < 64k.
 10078 00002795 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
 10079 00002797 58                      		pop	ax
 10080 00002798 5A                      		pop	dx		; dx:ax	= total	sectors
 10081 00002799 50                      		push	ax
 10082 0000279A 89D0                    		mov	ax, dx
 10083 0000279C 31D2                    		xor	dx, dx
 10084 0000279E F7F1                    		div	cx
 10085                                  		; 12/12/2023  ; !*!
 10086                                  		; (data segment may not be same with code segment here)
 10087                                  		;mov	[cs:temp_h], ax	; ax be	0 here.
 10088                                  		; 18/12/2023 - Retro DOS v5.0
 10089                                  		;mov	[cs:saved_word], ax
 10090 000027A0 58                      		pop	ax
 10091 000027A1 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
 10092 000027A3 09D2                    		or	dx, dx
 10093 000027A5 7401                    		jz	short no_cyl_rnd ; came out even
 10094 000027A7 40                      		inc	ax		; round	up
 10095                                  no_cyl_rnd:
 10096                                  		; 18/12/2023 - Retro DOS v5.0
 10097 000027A8 26894541                		mov	[es:di+41h], ax	; [es:di+BDS.cylinders]
 10098                                  		;mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
 10099                                  		
 10100 000027AC 06                      		push	es
 10101 000027AD 1F                      		pop	ds  ; !*! ; 12/12/2023
 10102                                  
 10103 000027AE 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
 10104                                  					; ds:si	-> bpb for hard	file
 10105 000027B1 EB55                    		jmp	short set_recbpb
 10106                                  ; ---------------------------------------------------------------------------
 10107                                  
 10108                                  nothardff:				
 10109 000027B3 0E                      		push	cs
 10110 000027B4 1F                      		pop	ds
 10111                                  
 10112                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
 10113                                  ; we can just go and deal with the next bds at label go_to_next_bds.
 10114                                  
 10115                                  		; 10/12/2022
 10116                                  		; ds = cs
 10117                                  		; 17/10/2022 (ds=cs)
 10118 000027B5 803E[111A]01            		cmp	byte [fakefloppydrv], 1
 10119                                  		;cmp	byte [cs:fakefloppydrv], 1
 10120 000027BA 7454                    		jz	short go_to_next_bds
 10121 000027BC 80FB07                  		cmp	bl, 7		; ffother
 10122                                  					; special case "other" type of medium
 10123 000027BF 753D                    		jnz	short not_process_other
 10124                                  process_other:
 10125 000027C1 31D2                    		xor	dx, dx
 10126                                  
 10127                                  		;mov	ax, [di+25h]	; [di+BDS.cylinders]
 10128                                  		;mul	word [di+36h]	; [di+BDS.rheads]
 10129                                  		;mul	word [di+34h]	; [di+BDS.rsecpertrack]
 10130                                  		;mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
 10131                                  		;			; have the total number of sectors
 10132                                  		; 18/12/2023 - Retro DOS v5.0
 10133 000027C3 8B4541                  		mov	ax, [di+41h]	; [di+BDS.cylinders]
 10134 000027C6 F76552                  		mul	word [di+52h]	; [di+BDS.rheads]
 10135 000027C9 F76550                  		mul	word [di+50h]	; [di+BDS.rsecpertrack]
 10136 000027CC 89454B                  		mov	[di+4Bh], ax	; [di+BDS.rtotalsecs16]
 10137                                  					; have the total number of sectors
 10138 000027CF 48                      		dec	ax
 10139 000027D0 B201                    		mov	dl, 1
 10140                                  _again:					
 10141 000027D2 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
 10142 000027D5 7206                    		jb	short _@@
 10143 000027D7 D1E8                    		shr	ax, 1
 10144 000027D9 D0E2                    		shl	dl, 1
 10145 000027DB EBF5                    		jmp	short _again
 10146                                  ; ---------------------------------------------------------------------------
 10147                                  
 10148                                  _@@:
 10149 000027DD 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
 10150 000027E0 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
 10151                                  
 10152                                  		; 18/12/2023 - Retro DOS v5.0
 10153 000027E2 C74549F000              		mov	word [di+49h], 240 ; [di+BDS.rdirentries]
 10154                                  		;mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
 10155                                  __@@:
 10156                                  		; 18/12/2023 - Retro DOS v5.0
 10157 000027E7 885545                  		mov	[di+45h], dl	; [di+BDS.rsecperclus]
 10158                                  		;mov	[di+29h], dl	; [di+BDS.rsecperclus]
 10159                                  
 10160                                  ; logic to get the sectors/fat area.
 10161                                  ; fat entry is assumed to be 1.5 bytes!!!
 10162                                  
 10163                                  		; 10/12/2022
 10164                                  		; ds = cs
 10165                                  		; 17/10/2022 (ds=cs)
 10166 000027EA F726[6427]              		mul	word [word3]	; * 3
 10167 000027EE F736[6227]              		div	word [word2]	; / 2
 10168 000027F2 31D2                    		xor	dx, dx
 10169 000027F4 F736[6627]              		div	word [word512]	; / 512
 10170                                  		;
 10171                                  		; 10/12/2022
 10172                                  		;mul	word [cs:word3]	; * 3
 10173                                  		;div	word [cs:word2]	; / 2
 10174                                  		;xor	dx, dx
 10175                                  		;div	word [cs:word512] ; / 512
 10176                                  		;
 10177 000027F8 40                      		inc	ax		; + 1
 10178                                  no_round_up:
 10179                                  		; 18/12/2023 - Retro DOS v5.0
 10180 000027F9 89454E                  		mov	[di+4Eh], ax	; [di+BDS.rfatsecs]
 10181                                  		;mov	[di+32h], ax	; [di+BDS.rfatsecs]
 10182                                  
 10183 000027FC EB12                    		jmp	short go_to_next_bds
 10184                                  ; ---------------------------------------------------------------------------
 10185                                  
 10186                                  not_process_other:
 10187 000027FE D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
 10188                                  		
 10189                                  		;mov	si, bpbtable
 10190                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
 10191                                  		; 09/12/2022
 10192                                  		;mov	si, BPBTABLE
 10193                                  		;mov	si, [bx+si]	; get address of bpb
 10194                                  		; 10/12/2022
 10195                                  		;mov	si, [BPBTABLE+bx]
 10196                                  		; 13/12/2022
 10197                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
 10198                                  		
 10199                                  		; 14/08/2023
 10200                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
 10201                                  							; correct offset
 10202 00002800 8BB7[D493]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
 10203                                  		
 10204                                  		; 18/12/2023 
 10205                                  		; si = address of the requested disk(ette) parameter block
 10206                                  		;	! as offset from SYSINIT segment !
 10207                                  
 10208                                  		; 28/08/2023
 10209 00002804 81C65049                		add	si, SYSINIT_OFFSET
 10210                                  			; + displacement from BIOSDATA segment ; 18/12/2023
 10211                                  set_recbpb:
 10212                                  		; 18/12/2023
 10213                                  		;lea	di, [di+27h]	; [di+BDS.R_BPB]
 10214                                  		;			; es:di	-> recbpb
 10215                                  		;mov	cx, 25		; bpbx.size
 10216                                  		;rep movsb		; move (size bpbx) bytes
 10217                                  		
 10218                                  		; 18/12/2023 - Retro DOS v5.0
 10219 00002808 8D7D43                  		lea	di, [di+43h]	; [di+BDS.R_BPB]
 10220                                  					; es:di	-> recbpb
 10221 0000280B B93500                  		mov	cx, 53		; bpbx.size
 10222 0000280E F3A4                    		rep movsb		; move (size bpbx) byte
 10223                                  go_to_next_bds:
 10224 00002810 5F                      		pop	di
 10225 00002811 07                      		pop	es		; restore pointer to bds
 10226 00002812 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 10227 00002815 83FFFF                  		cmp	di, 0FFFFh	; -1
 10228 00002818 740A                    		jz	short got_end_of_bds_chain
 10229 0000281A E951FF                  		jmp	_next_bds
 10230                                  
 10231                                  ; ---------------------------------------------------------------------------
 10232                                  
 10233                                  		; 18/12/2022
 10234                                  ;got_end_of_bds_chain:
 10235                                  		;retn
 10236                                  
 10237                                  ; =============== S U B	R O U T	I N E =======================================
 10238                                  
 10239                                  ; 15/10/2022
 10240                                  ; 30/12/2018 - Retro DOS v4.0
 10241                                  
 10242                                  ; al = device number
 10243                                  
 10244                                  print_init:	
 10245 0000281D 98                      		cbw
 10246 0000281E 89C2                    		mov	dx, ax
 10247 00002820 B401                    		mov	ah, 1
 10248 00002822 CD17                    		int	17h		; PRINTER - INITIALIZE
 10249                                  					; DX = printer port (0-3)
 10250                                  					; Return: AH = status
 10251                                  got_end_of_bds_chain:	; 18/12/2022
 10252 00002824 C3                      		retn
 10253                                  
 10254                                  ; =============== S U B	R O U T	I N E =======================================
 10255                                  
 10256                                  ; al = device number
 10257                                  
 10258                                  aux_init:
 10259 00002825 98                      		cbw
 10260 00002826 89C2                    		mov	dx, ax
 10261                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
 10262                                  					; 2400,n,1,8 (msequ.inc)
 10263                                  		;mov	ah, 0
 10264                                  		; 10/12/2022
 10265 00002828 B8A300                  		mov	ax, 00A3h
 10266 0000282B CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
 10267                                  					; 	AL = initializing parameters,
 10268                                  					;	DX = port number (0-3)
 10269                                  					; Return: AH = RS-232 status code bits,
 10270                                  					;	  AL = modem status bits
 10271 0000282D C3                      		retn
 10272                                  
 10273                                  ; =============== S U B	R O U T	I N E =======================================
 10274                                  
 10275                                  ; 18/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 10276                                  ; 08/08/2023 - Retro DOS v4.2 (Modified MSDOS 6.22 IO.SYS)
 10277                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS) -Retro DOS v4 2022- (MSDOS 5.0-6.21)
 10278                                  ; 30/12/2018 - Retro DOS v4.0
 10279                                  ; 03/06/2018 - Retro DOS v3.0
 10280                                  ; (19/03/2018 - Retro DOS v2.0)
 10281                                  
 10282                                  ; domini **********************************************************************
 10283                                  ;
 10284                                  ;mini disk initialization routine. called right after dohard
 10285                                  ;modified for >2 hardfile support
 10286                                  ;
 10287                                  ; **cs=ds=es=datagrp
 10288                                  ;
 10289                                  ; **domini will search for every extended partition in the system, and
 10290                                  ;   initialize it.
 10291                                  ;
 10292                                  ; **bdsm stands for bds table for mini disk and located right after the label
 10293                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
 10294                                  ;   address of bdsm table.
 10295                                  ;
 10296                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
 10297                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
 10298                                  ;   right now, they are called as ismini, hidden_trks respectively.
 10299                                  ;
 10300                                  ; **domini will use the same routine in sethard routine after label set2 to
 10301                                  ;   save coding.
 10302                                  ;
 10303                                  ; **drvmax determined in dohard routine will be used for the next
 10304                                  ;   available logical mini disk drive number.
 10305                                  ;
 10306                                  ; input: drvmax, dskdrvs
 10307                                  ;
 10308                                  ; output: minidisk installed. bdsm table established and installed to bds.
 10309                                  ;	  end_of_bdsm - ending offset address of bdsm.
 10310                                  ;
 10311                                  ; called modules:
 10312                                  ;		  getboot
 10313                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
 10314                                  ;
 10315                                  ;		  setmini (new, it will use set2 routine)
 10316                                  ;
 10317                                  ; variables used: end_of_bdsm
 10318                                  ;		  rom_minidisk_num
 10319                                  ;		  mini_hdlim, mini_seclim
 10320                                  ;		  BDS_STRUC, start_bds
 10321                                  ;
 10322                                  ;******************************************************************************
 10323                                  
 10324                                  		; 18/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
 10325                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B10h)
 10326                                  
 10327                                  		; 19/10/2022
 10328                                  domini:
 10329 0000282E 8A36[5D1A]              		mov	dh, [hnum]	; get number of hardfiles
 10330                                  		; 10/12/2022
 10331 00002832 20F6                    		and	dh, dh
 10332                                  		;cmp	dh, 0
 10333 00002834 743C                    		jz	short dominiret	; no hard file?	then exit.
 10334 00002836 B280                    		mov	dl, 80h		; start	with hardfile 80h
 10335                                  domini_loop:
 10336                                  		; 18/12/2023 - Retro DOS v5.0
 10337 00002838 31C0                    		xor	ax, ax ; 0
 10338                                  		; ds = cs
 10339                                  		;mov	[cs:ep_start_sector], ax
 10340                                  		;mov	[cs:ep_start_sector+2], ax
 10341                                  		;mov	[cs:ep_hidden_secs], ax
 10342                                  		;mov	[cs:ep_hidden_secs+2], ax
 10343 0000283A A3[8623]                		mov	[ep_start_sector], ax
 10344 0000283D A3[8823]                		mov	[ep_start_sector+2], ax
 10345 00002840 A3[8A23]                		mov	[ep_hidden_secs], ax
 10346 00002843 A3[8C23]                		mov	[ep_hidden_secs+2], ax
 10347                                  		;
 10348 00002846 52                      		push	dx
 10349 00002847 8816[5C1A]              		mov	[rom_minidisk_num], dl
 10350 0000284B B408                    		mov	ah, 8
 10351 0000284D CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
 10352                                  					; DL = drive number
 10353                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
 10354                                  					; DL = number of consecutive drives
 10355                                  					; DH = maximum value for head number, ES:DI -> drive parameter
 10356                                  		
 10357                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 10358                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2B36h
 10359                                  		;inc	dh
 10360                                  		;xor	ax, ax
 10361                                  		;mov	al, dh
 10362 0000284F 31C0                    		xor	ax, ax
 10363 00002851 88F0                    		mov	al, dh	; <= 255
 10364 00002853 40                      		inc	ax	; (0FFh -> 100h)
 10365 00002854 A3[621A]                		mov	[mini_hdlim], ax ; # of heads
 10366                                  		;and	cl, 3Fh
 10367                                  		;mov	al, cl
 10368                                  		; 08/08/2023
 10369 00002857 88C8                    		mov	al, cl
 10370 00002859 83E03F                  		and	ax, 3Fh
 10371 0000285C A3[641A]                		mov	[mini_seclim], ax ; # of sectors/track
 10372                                  		
 10373                                  		; 18/12/2023
 10374                                  		;push	es ; * ; not necessary
 10375 0000285F 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
 10376 00002863 E868FA                  		call	getboot		; read master boot record into
 10377                                  					; initbootsegment:bootbias
 10378 00002866 7203                    		jc	short domininext
 10379 00002868 E80800                  		call	find_mini_partition
 10380                                  domininext:
 10381                                  		;pop	es ; *
 10382 0000286B 5A                      		pop	dx
 10383 0000286C FEC2                    		inc	dl		; next hard file
 10384 0000286E FECE                    		dec	dh
 10385 00002870 75C6                    		jnz	short domini_loop
 10386                                  dominiret:
 10387 00002872 C3                      		retn
 10388                                  
 10389                                  ; =============== S U B	R O U T	I N E =======================================
 10390                                  
 10391                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
 10392                                  ; 30/12/2018 - Retro DOS v4.0
 10393                                  
 10394                                  ;find_mini_partition tries to find every extended partition on a disk.
 10395                                  ;at entry:	di -> bdsm entry
 10396                                  ;		es:bx -> 07c0:bootbias - master boot record
 10397                                  ;		rom_minidisk_num - rom drive number
 10398                                  ;		drvmax - logical drive number
 10399                                  ;		mini_hdlim, mini_seclim
 10400                                  ;
 10401                                  ;called routine: setmini which uses set2 (in sethard routine)
 10402                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
 10403                                  
 10404                                  		; 19/12/2023 - Retro DOS v5.0 
 10405                                  		;	(Modified PCDOS 7.1 IBMBIO.COM)
 10406                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSADATA:2BFCh)
 10407                                  
 10408                                  find_mini_partition:	
 10409 00002873 81C3C201                		add	bx, 1C2h	; bx ->	file system id
 10410                                  
 10411                                  		; 19/12/2023
 10412                                  		; PCDOS 7.1 IBMBIO.COM
 10413                                  		;mov	word [ld_p_number], 26
 10414                                  fmpnext:
 10415                                  		;add	word [ld_p_number], 16
 10416                                  		;cmp	word [ld_p_number], 4122
 10417                                  		;		; 64 logical disk partitions (64 EBRs)
 10418                                  		;		; (64*4 = 256 pte's, 256*16 = 4096, + 26 = 4122)
 10419                                  		;jg	short fmpnextfound
 10420                                  				
 10421 00002877 26803F05                		cmp	byte [es:bx], 5 ; 05h = extended partition id.
 10422 0000287B 7410                    		je	short fmpgot ; Extended DOS CHS
 10423                                  		
 10424                                  		; 19/12/2023 - Retro DOS v5.0
 10425 0000287D 26803F0F                		cmp     byte [es:bx], 0Fh ; Extended DOS LBA
 10426 00002881 740A                    		je	short fmpgot
 10427                                  
 10428 00002883 83C310                  		add	bx, 16
 10429 00002886 81FB0204                		cmp	bx, 402h	; 202h+bootbias
 10430 0000288A 75EB                    		jne	short fmpnext
 10431                                  		;jmp	short fmpnextfound ; extended partition	not found
 10432                                  		; 18/12/2022
 10433                                  fmpnextfound:
 10434 0000288C C3                      		retn
 10435                                  
 10436                                  ;		; 30/07/2019 - Retro DOS v3.2
 10437                                  ;		jb	short fmpnext
 10438                                  ;fmpret:
 10439                                  ;		retn	; 29/05/2019
 10440                                  
 10441                                  ; ---------------------------------------------------------------------------
 10442                                  
 10443                                  		; 19/10/2022
 10444                                  fmpgot:					; found my partition.
 10445 0000288D E82B01                  		call	dmax_check	; check	for drvmax already 26
 10446 00002890 73FA                    		jnb	short fmpnextfound ; done if too many
 10447                                  
 10448 00002892 8B3E[601A]              		mov	di, [end_of_bdss] ; get next free bds
 10449                                  
 10450                                  		; 19/12/2023
 10451                                  		;mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
 10452                                  		;; 10/12/2022
 10453                                  		;or	byte [di+23h], 1
 10454                                  		;;or	word [di+23h], 1 ; [di+BDS.flags]
 10455                                  		;			; fNon_Removable
 10456                                  		;mov	byte [di+22h], 5 ; [di+BDS.formfactor]
 10457                                  		;			; ffHardFile
 10458                                  		; 19/12/2023 - Retro DOS v5.0
 10459 00002896 C745790100              		mov	word [di+79h], 1 ; [di+BDS.bdsm_ismini]
 10460 0000289B 804D3F01                		or	byte [di+3Fh], 1 ; [di+BDS.flags], fNon_Removable
 10461 0000289F C6453E05                		mov	byte [di+3Eh], 5 ; [di+BDS.formfactor], ffHardFile 
 10462                                  
 10463 000028A3 C606[061A]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
 10464 000028A8 A1[621A]                		mov	ax, [mini_hdlim]
 10465 000028AB 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
 10466 000028AE A1[641A]                		mov	ax, [mini_seclim]
 10467 000028B1 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
 10468 000028B4 A0[5C1A]                		mov	al, [rom_minidisk_num]
 10469 000028B7 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
 10470                                  					; set physical number
 10471 000028BA A0[7500]                		mov	al, [drvmax]
 10472 000028BD 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
 10473                                  					; set logical number
 10474 000028C0 26837F0A00              		cmp	word [es:bx+10], 0
 10475                                  		;ja	short fmpgot_cont
 10476 000028C5 7707                    		ja	short fmpgot1	; 19/12/2023
 10477 000028C7 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
 10478                                  					; only lower word is meaningful.
 10479 000028CC 72BE                    		jb	short fmpnextfound
 10480                                  					; should be bigger than 64 sectors at least
 10481                                  fmpgot1:	; 19/12/2023
 10482                                  ;fmpgot_cont:				
 10483 000028CE 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
 10484 000028D1 268A7702                		mov	dh, [es:bx+2]	; cylinder
 10485 000028D5 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
 10486 000028D8 D0C6                    		rol	dh, 1
 10487 000028DA D0C6                    		rol	dh, 1
 10488 000028DC 268A5703                		mov	dl, [es:bx+3]	; cyl byte
 10489                                  		; 19/12/2023 - Retro DOS v5.0
 10490 000028E0 89557B                  		mov	[di+7Bh], dx	; [di+BDS.bdsm_hidden_trks]
 10491                                  		;mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
 10492                                  					; set hidden trks
 10493                                  		; 19/12/2023
 10494                                  		;push	bx ; * ; PCDOS 7.1	
 10495                                  		;;;
 10496 000028E3 268B4F08                		mov	cx, [es:bx+8]	; partition size, lw
 10497 000028E7 268B470A                		mov	ax, [es:bx+10]	; partition size, hw
 10498 000028EB 030E[8623]              		add	cx, [ep_start_sector]
 10499 000028EF 1306[8823]              		adc	ax, [ep_start_sector+2]
 10500 000028F3 31D2                    		xor	dx, dx ; 19/12/2023
 10501 000028F5 3916[8623]              		cmp	[ep_start_sector], dx ; 0
 10502                                  		;cmp	word [ep_start_sector], 0
 10503 000028F9 750D                    		jnz	short fmpgot2
 10504 000028FB 3916[8823]              		cmp	[ep_start_sector+2], dx ; 0
 10505                                  		;cmp	word [ep_start_sector+2], 0
 10506 000028FF 7507                    		jnz	short fmpgot2
 10507 00002901 890E[8623]              		mov	[ep_start_sector], cx
 10508 00002905 A3[8823]                		mov	[ep_start_sector+2], ax
 10509                                  fmpgot2:
 10510 00002908 890E[8A23]              		mov	[ep_hidden_secs], cx
 10511 0000290C A3[8C23]                		mov	[ep_hidden_secs+2], ax
 10512                                  		
 10513                                  		; convert start sector address to CHS
 10514                                  	
 10515                                  		; 19/12/2023
 10516                                  		; dx = 0
 10517                                  		;push	bx ; * ; not necessary
 10518                                  
 10519                                  		;mov	bx, [di+13h]	; [di+BDS.secpertrack]
 10520 0000290F 8B7513                  		mov	si, [di+13h]	; [di+BDS.secpertrack]
 10521                                  		;xor	dx, dx  ; dx = 0
 10522                                  		;div	bx
 10523 00002912 F7F6                    		div	si
 10524 00002914 91                      		xchg	ax, cx
 10525                                  		;div	bx
 10526 00002915 F7F6                    		div	si
 10527 00002917 8B5D15                  		mov	bx, [di+15h]	; [di+BDS.heads]
 10528 0000291A 91                      		xchg	ax, cx
 10529 0000291B 31D2                    		xor	dx, dx
 10530                                  		;div	bx
 10531 0000291D F7F6                    		div	si
 10532 0000291F 91                      		xchg	ax, cx
 10533                                  		;div	bx
 10534 00002920 F7F6                    		div	si
 10535                                  
 10536                                  		;pop	bx ; *
 10537                                  
 10538 00002922 09C9                    		or	cx, cx
 10539 00002924 7505                    		jnz	short fmpgot_lba_rd
 10540 00002926 3D0004                  		cmp	ax, 1024	; cylinder number < 1024, CHS read is proper
 10541 00002929 7235                    		jb	short fmpgot_chs_rd
 10542                                  fmpgot_lba_rd:
 10543 0000292B 804D4004                		or	byte [di+40h], 4 ; set fLBArw flag ; LBA read/write ok/ready
 10544 0000292F 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
 10545 00002933 1E                      		push	ds
 10546                                  		; 19/12/2023
 10547                                  		;push	si ; ** ; not necessary 
 10548 00002934 31C0                    		xor	ax, ax		; push bp
 10549                                  				        ; mov bp, sp ; (*)
 10550 00002936 50                      		push	ax ; 0
 10551 00002937 50                      		push	ax ; 0
 10552 00002938 FF36[8C23]              		push	word [ep_hidden_secs+2]
 10553 0000293C FF36[8A23]              		push	word [ep_hidden_secs]
 10554 00002940 B80002                  		mov	ax, bootbias ; 200h	
 10555                                  		;mov	ax, 200h	; bootbias (buffer offset)
 10556 00002943 06                      		push	es		; buffer segment
 10557 00002944 50                      		push	ax
 10558 00002945 B80100                  		mov	ax, 1
 10559 00002948 50                      		push	ax		; read count
 10560 00002949 B81000                  		mov	ax, 10h		; DAP size = 16
 10561 0000294C 50                      		push	ax
 10562 0000294D 8CD0                    		mov	ax, ss
 10563 0000294F 8ED8                    		mov	ds, ax
 10564 00002951 89E6                    		mov	si, sp		; ds:si = Disk Address Packet
 10565                                  		
 10566 00002953 B442                    		mov	ah, 42h		; LBA read
 10567 00002955 CD13                    		int	13h		; DISK - IBM/MS Extension
 10568                                  					; EXTENDED READ (DL - drive, DS:SI - disk address packet)
 10569                                  		; 19/12/2023	
 10570                                  		;pushf		; PCDOS 7.1 IBMBIO.COM BUG! Erdogan Tan - 08/08/2023
 10571                                  		;add	sp, 16
 10572                                  		;popf		; BUG!
 10573                                  					; mov sp, bp ; (*)
 10574                                  					; pop bp
 10575                                  		; 19/12/2023
 10576 00002957 9F                      		lahf		; load status flags into AH
 10577 00002958 83C410                  		add	sp, 16
 10578 0000295B 9E                      		sahf		; store AH into flags
 10579                                  		
 10580                                  		;pop	si ; ** ; 19/12/2023
 10581 0000295C 1F                      		pop	ds
 10582 0000295D 7317                    		jnc	short fmpgot3
 10583                                  fmpnotfound:	; 19/12/2023
 10584 0000295F C3                      		retn
 10585                                  		;jmp	short fmpgot3 
 10586                                  		;;;
 10587                                  
 10588                                  		; 19/12/2023
 10589                                  fmpgot_chs_rd:
 10590 00002960 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
 10591 00002964 268A7701                		mov	dh, [es:bx+1]	; head
 10592 00002968 8A16[5C1A]              		mov	dl, [rom_minidisk_num]
 10593 0000296C BB0002                  		mov	bx, 200h	; bootbias
 10594 0000296F B80102                  		mov	ax, 201h
 10595 00002972 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 10596                                  					; AL = number of sectors to read, CH = track, CL = sector
 10597                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 10598                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 10599                                  ;fmpgot3:	; 19/12/2023
 10600                                  		;jc	short fmpnextfound
 10601 00002974 72E9                    		jc	short fmpnotfound
 10602                                  fmpgot3:	
 10603 00002976 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
 10604                                  
 10605                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 10606                                  		; PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C7Ch
 10607 00002979 26817F3C55AA            		cmp	word [es:bx+3Ch], 0AA55h ; 03C2h+03Ch = 3FEh
 10608                                  		;jne	short fmpnextfound ; not a valid boot sector !
 10609                                  		; 19/12/2023
 10610 0000297F 75DE                    		jne	short fmpnotfound ; not a valid boot sector !
 10611                                  
 10612                                  		; 13/08/2023
 10613                                  		;push	es
 10614 00002981 E80800                  		call	setmini		; install a mini disk.
 10615                                  					; bx value saved.
 10616                                  		;pop	es  ; 13/08/2023
 10617 00002984 7203                    		jc	short fmpnextchain
 10618 00002986 E84700                  		call	xinstall_bds	; -- install the bdsm into table
 10619                                  fmpnextchain:
 10620 00002989 E9EBFE                  		jmp	fmpnext		; let's find out
 10621                                  					; if we	have any chained partition
 10622                                  ; ---------------------------------------------------------------------------
 10623                                  
 10624                                  		; 18/12/2022
 10625                                  ;fmpnextfound:
 10626                                  		;retn
 10627                                  
 10628                                  ; =============== S U B	R O U T	I N E =======================================
 10629                                  
 10630                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10631                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
 10632                                  
 10633                                  ; 19/12/2022 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 10634                                  ; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2C92h)
 10635                                  
 10636                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
 10637                                  	
 10638 0000298C 57                      		push	di
 10639 0000298D 53                      		push	bx
 10640                                  		; 12/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 10641                                  		; ds = cs = BIOSDATA segment
 10642                                  		;push	ds
 10643 0000298E 06                      		push	es
 10644                                  setmini_1:
 10645                                  		;cmp	byte [es:bx], 1 ; FAT12 partition
 10646                                  		;je	short setmini_2
 10647                                  		;cmp	byte [es:bx], 4 ; FAT16 (CHS) partition
 10648                                  		;je	short setmini_2
 10649                                  		;cmp	byte [es:bx], 6 ; FAT16 BIG (CHS) partition
 10650                                  		;je	short setmini_2
 10651                                  		;
 10652                                  		; 19/12/2023 - Retro DOS v5.0
 10653                                  		;cmp	byte [es:bx], 0Bh ; FAT32 (CHS) partition
 10654                                  		;je	short setmini_2
 10655                                  		;cmp	byte [es:bx], 0Ch ; FAT32 (LBA) partition
 10656                                  		;je	short setmini_2
 10657                                  		;cmp	byte [es:bx], 0Eh ; FAT16 (LBA) partition
 10658                                  		;je	short setmini_2
 10659                                  
 10660                                  		; 19/12/2023
 10661 0000298F 268A07                  		mov 	al, [es:bx]
 10662 00002992 3C01                    		cmp	al, 1 		; FAT12 partition
 10663 00002994 7422                    		je	short setmini_2
 10664 00002996 3C04                    		cmp	al, 4 		; FAT16 (CHS) partition
 10665 00002998 741E                    		je	short setmini_2
 10666 0000299A 3C06                    		cmp	al, 6 		; FAT16 BIG (CHS) partition
 10667 0000299C 741A                    		je	short setmini_2
 10668 0000299E 3C0B                    		cmp	al, 0Bh 	; FAT32 (CHS) partition
 10669 000029A0 7416                    		je	short setmini_2
 10670 000029A2 3C0C                    		cmp	al, 0Ch 	; FAT32 (LBA) partition
 10671 000029A4 7412                    		je	short setmini_2
 10672 000029A6 3C0E                    		cmp	al, 0Eh 	; FAT16 (LBA) partition
 10673 000029A8 740E                    		je	short setmini_2
 10674                                  
 10675 000029AA 83C310                  		add	bx, 16
 10676 000029AD 81FB0204                		cmp	bx, 402h	; 202h+bootbias
 10677                                  		;jne	short setmini_1
 10678 000029B1 72DC                    		jb	short setmini_1 ; 19/12/2023
 10679 000029B3 F9                      		stc
 10680 000029B4 07                      		pop	es
 10681                                  		; 12/08/2023
 10682                                  		;pop	ds
 10683 000029B5 5B                      		pop	bx
 10684 000029B6 5F                      		pop	di
 10685 000029B7 C3                      		retn
 10686                                  
 10687                                  ; ---------------------------------------------------------------------------
 10688                                  setmini_2:
 10689 000029B8 E9D3F9                  		jmp	set2		; branch into middle of sethard
 10690                                  
 10691                                  ; =============== S U B	R O U T	I N E =======================================
 10692                                  
 10693                                  ; 30/12/2022 - Retro DOS v4.2
 10694                                  ; (SYSINITSEG is 473h for MSDOS 6.21 IO.SYS)
 10695                                  
 10696                                  ; 15/10/2022
 10697                                  ; 28/12/2018 - Retro DOS v4.0
 10698                                  ;
 10699                                  ; dmax_check -- call this when we want to install a new drive.
 10700                                  ;		it checks for drvmax < 26 to see if there is
 10701                                  ;		a drive letter left.
 10702                                  ;
 10703                                  ;	drvmax < 26 : carry SET!
 10704                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
 10705                                  ;			trash ax
 10706                                  
 10707                                  		; 19/12/2023 - Retro DOS v5.0
 10708                                  dmax_check:
 10709 000029BB 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
 10710 000029C0 720D                    		jb	short dmax_ok	; return with carry if okay
 10711 000029C2 06                      		push	es
 10712                                  		;;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
 10713                                  		;mov	ax, 544h	; 19/12/2023 (PCDOS 7.1)
 10714 000029C3 B80505                  		mov	ax, SYSINITSEG	; 17/10/2022	
 10715 000029C6 8EC0                    		mov	es, ax
 10716                                  		; 18/10/2022
 10717 000029C8 26C606[8303]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
 10718                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
 10719                                  					; set message flag
 10720                                  					; [SYSINIT+toomanydrivesflag]
 10721 000029CE 07                      		pop	es
 10722                                  
 10723                                  		;;push	es
 10724                                  		;;mov	ax,SYSINIT_SEG
 10725                                  		;;mov	es,ax
 10726                                  		;;mov	byte [es:toomanydrivesflag],1
 10727                                  					; set message flag
 10728                                  		;;pop	es
 10729                                  		;
 10730                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
 10731                                  dmax_ok:
 10732 000029CF C3                      		retn
 10733                                  
 10734                                  ; =============== S U B	R O U T	I N E =======================================
 10735                                  
 10736                                  ; 18/10/2022
 10737                                  ; 15/10/2022
 10738                                  ; 28/12/2018 - Retro DOS v4.0
 10739                                  ;
 10740                                  ;	link next bds (at ds:di) into the chain. assume that the
 10741                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
 10742                                  ;	  dskdrv_table, and end_of_bdss.	
 10743                                  
 10744                                  		; 19/12/2023 - Retro DOS v5.0
 10745                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2CE1h)
 10746                                  xinstall_bds:
 10747 000029D0 56                      		push	si
 10748 000029D1 53                      		push	bx
 10749 000029D2 8B36[1901]              		mov	si, [start_bds]	; get first bds
 10750                                  xinstall_bds_1:
 10751 000029D6 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
 10752 000029D9 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
 10753                                  		;mov	si, [si+BDS.link]
 10754 000029DB 8B34                    		mov	si, [si]	; chain	through	list
 10755 000029DD EBF7                    		jmp	short xinstall_bds_1
 10756                                  
 10757                                  xinstall_bds_2:
 10758                                  		;mov	[si+BDS.link], di
 10759 000029DF 893C                    		mov	[si], di
 10760                                  		;mov	[si+BDS.link+2], ds
 10761 000029E1 8C5C02                  		mov	[si+2], ds
 10762                                  		;mov	word [di+BDS.link], -1
 10763 000029E4 C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
 10764                                  		;mov	[di+BDS.link+2], ds
 10765 000029E8 8C5D02                  		mov	[di+2], ds ; might as well plug segment
 10766                                  		; 20/03/2019 - Retro DOS v4.0
 10767                                  		;lea	bx, [di+BDS.BPB]
 10768 000029EB 8D5D06                  		lea	bx, [di+6]
 10769 000029EE 8B36[5E1A]              		mov	si, [last_dskdrv_table]
 10770 000029F2 891C                    		mov	[si], bx
 10771 000029F4 8306[5E1A]02            		add	word [last_dskdrv_table], 2
 10772 000029F9 FE06[7500]              		inc	byte [drvmax]
 10773                                  		;add	word [end_of_bdss], 100 ; BDS.size = 100
 10774                                  		; 19/12/2023 - Retro DOS v5.0
 10775 000029FD 8106[601A]9600          		add	word [end_of_bdss], 150 ; BDS.size = 150
 10776 00002A03 5B                      		pop	bx
 10777 00002A04 5E                      		pop	si
 10778 00002A05 C3                      		retn
 10779                                  
 10780                                  ; =============== S U B	R O U T	I N E =======================================
 10781                                  
 10782                                  ; 17/10/2022
 10783                                  ; 15/10/2022
 10784                                  ; 28/12/2018 - Retro DOS v4.0
 10785                                  ; 03/06/2018 - Retro DOS v3.0
 10786                                  
 10787                                  		; 19/12/2023 - Retro DOS v5.0
 10788                                  cmos_clock_read:
 10789 00002A06 50                      		push	ax
 10790 00002A07 51                      		push	cx
 10791 00002A08 52                      		push	dx
 10792 00002A09 55                      		push	bp
 10793 00002A0A 31ED                    		xor	bp, bp
 10794                                  loop_clock:
 10795 00002A0C 31C9                    		xor	cx, cx
 10796 00002A0E 31D2                    		xor	dx, dx
 10797 00002A10 B402                    		mov	ah, 2
 10798 00002A12 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
 10799                                  					; Return: CH = hours in	BCD
 10800                                  					; CL = minutes in BCD
 10801                                  					; DH = seconds in BCD
 10802                                  		; 19/12/2023
 10803                                  		;cmp	cx, 0
 10804 00002A14 21C9                    		and	cx, cx
 10805 00002A16 750F                    		jnz	short clock_present
 10806                                  		;cmp	dx, 0
 10807 00002A18 09D2                    		or	dx, dx
 10808 00002A1A 750B                    		jnz	short clock_present
 10809                                  		;cmp	bp, 1		; read again after a slight delay, in case clock
 10810                                  		;je	short no_readdate ; was	at zero	setting.
 10811 00002A1C 21ED                    		and	bp, bp
 10812 00002A1E 751A                    		jnz	short no_readdate
 10813 00002A20 45                      		inc	bp		; only perform delay once.
 10814                                  		;mov	cx, 4000h	; 16384
 10815                                  		; 19/12/2023
 10816 00002A21 B540                    		mov	ch, 40h ; cx = 4000h ; 16384
 10817                                  delay:					
 10818 00002A23 E2FE                    		loop	delay
 10819 00002A25 EBE5                    		jmp	short loop_clock
 10820                                  ; ---------------------------------------------------------------------------
 10821                                  
 10822                                  clock_present:
 10823                                  		;mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
 10824                                  		; 19/12/2023
 10825                                  		; ds = cs
 10826 00002A27 C606[8C04]01            		mov	byte [havecmosclock], 1 ; set the flag for cmos clock
 10827                                  		
 10828 00002A2C E81000                  		call	cmosck		; reset	cmos clock rate	that may be
 10829                                  					; possibly destroyed by	cp dos and
 10830                                  					; post routine did not restore that.
 10831 00002A2F 56                      		push	si
 10832 00002A30 E838EE                  		call	read_real_date	; read real-time clock for date
 10833 00002A33 FA                      		cli
 10834                                  		;mov	ds:daycnt, si	; set system date
 10835 00002A34 8936[8904]              		mov	[daycnt], si
 10836 00002A38 FB                      		sti
 10837 00002A39 5E                      		pop	si
 10838                                  no_readdate:
 10839 00002A3A 5D                      		pop	bp
 10840 00002A3B 5A                      		pop	dx
 10841 00002A3C 59                      		pop	cx
 10842 00002A3D 58                      		pop	ax
 10843                                  cmosck9:	; 19/12/2023
 10844 00002A3E C3                      		retn
 10845                                  
 10846                                  ; ---------------------------------------------------------------------------
 10847                                  
 10848                                  ; the following code is written by jack gulley in engineering group.
 10849                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
 10850                                  ; and if the use cold boot the system to use pc dos while running cp dos,
 10851                                  ; the cmos clock rate are still slow which slow down disk operations
 10852                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
 10853                                  ; to fix this problem at the request of cp dos.
 10854                                  ;
 10855                                  ; the program is modified to be run on msinit. equates are defined
 10856                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
 10857                                  ;
 10858                                  ;  the following code cmosck is used to insure that the cmos has not
 10859                                  ;	had its rate controls left in an invalid state on older at's.
 10860                                  ;
 10861                                  ;	it checks for an at model byte "fc" with a submodel type of
 10862                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
 10863                                  ;	bits in case post has not done it. this initialization routine
 10864                                  ;	is only needed once when dos loads. it should be run as soon
 10865                                  ;	as possible to prevent slow diskette access.
 10866                                  ;
 10867                                  ;	this code exposes one to dos clearing cmos setup done by a
 10868                                  ;	resident program that hides and re-boots the system.
 10869                                  
 10870                                  cmosck:					; check and reset rtc rate bits
 10871                                  
 10872                                  ;model byte and submodel byte were already determined in msinit.
 10873                                  
 10874                                  	; 16/06/2018 - Retro DOS v3.0
 10875                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
 10876                                  
 10877                                  	; 19/12/2023 - Retro DOS v5.0
 10878                                  	
 10879                                  		; 19/12/2023
 10880                                  		; ds = cs
 10881                                  		;push	ax ; not necessary ; 19/12/2023
 10882                                  		;
 10883 00002A3F 803E[AF05]FC            		cmp	byte [model_byte], 0FCh
 10884                                  		;cmp	byte [cs:model_byte], 0FCh
 10885 00002A44 75F8                    		jnz	short cmosck9	; Exit if not an AT model
 10886 00002A46 2E803E[B005]06          		cmp	byte [cs:secondary_model_byte], 6
 10887                                  		;cmp	byte [cs:secondary_model_byte], 6
 10888                                  					; Is it 06 for the industral AT ?
 10889 00002A4C 7407                    		jz	short cmosck4	; Go reset CMOS periodic rate if 06
 10890 00002A4E 803E[B005]04            		cmp	byte [secondary_model_byte], 4
 10891                                  		;cmp	byte [cs:secondary_model_byte], 4
 10892                                  					; Is it 00, 01, 02, or 03 ?
 10893 00002A53 73E9                    		jnb	short cmosck9	; EXIT if problem fixed by POST
 10894                                  					; Also,Secondary_model_byte = 0
 10895                                  					;   when AH=0C0h, int 15h failed.
 10896                                  					;	RESET THE CMOS PERIODIC RATE
 10897                                  					;  Model=FC submodel=00,01,02,03 or 06
 10898                                  cmosck4:
 10899 00002A55 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
 10900                                  					; NMI disabled on return
 10901 00002A57 B426                    		mov	ah, 26h		; 00100110b
 10902                                  					; Set divider & rate selection
 10903 00002A59 E80B00                  		call	cmos_write
 10904 00002A5C B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
 10905                                  					; NMI disabled on return
 10906 00002A5E E82000                  		call	cmos_read
 10907 00002A61 2407                    		and	al, 7		; 00000111b
 10908                                  					; clear SET,PIE,AIE,UIE,SQWE
 10909 00002A63 88C4                    		mov	ah, al
 10910 00002A65 B00B                    		mov	al, 0Bh		; cmos_reg_b
 10911                                  					; NMI enabled on return
 10912                                  		; 19/12/2023
 10913                                  		;call	cmos_write
 10914                                  ;cmosck9:
 10915                                  		;pop	ax ; 19/12/2023
 10916                                  		;retn
 10917                                  
 10918                                  		; 19/12/2023
 10919                                  		;jmp	short cmos_write
 10920                                  
 10921                                  ; =============== S U B	R O U T	I N E =======================================
 10922                                  
 10923                                  ;--- cmos_write ----------------------------------------------------------------
 10924                                  ;		write byte to cmos system clock configuration table	       :
 10925                                  ;									       :
 10926                                  ; input: (al)=	cmos table address to be written to			       :
 10927                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
 10928                                  ;		bits 6-0 = address of table location to write		       :
 10929                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
 10930                                  ;									       :
 10931                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
 10932                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
 10933                                  ;		normal interrupts are disabled to protect cmos data integrity. :
 10934                                  ;		the cmos address register is pointed to a default value and    :
 10935                                  ;		the interrupt flag restored to the entry state on return.      :
 10936                                  ;		only the cmos location and the nmi state is changed.	       :
 10937                                  ;-------------------------------------------------------------------------------
 10938                                  
 10939                                  cmos_write:				; write (ah) to location (al)
 10940 00002A67 9C                      		pushf			;
 10941 00002A68 50                      		push	ax		; save work register values
 10942 00002A69 FA                      		cli
 10943 00002A6A 50                      		push	ax		; save user nmi	state
 10944 00002A6B 0C80                    		or	al, 80h		; disable nmi for us
 10945 00002A6D E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 10946                                  					; RTC Seconds
 10947 00002A6F 90                      		nop
 10948 00002A70 88E0                    		mov	al, ah
 10949 00002A72 E671                    		out	71h, al		; CMOS Memory/RTC Data Register
 10950 00002A74 58                      		pop	ax		; get user nmi
 10951 00002A75 2480                    		and	al, 80h
 10952 00002A77 0C0F                    		or	al, 0Fh
 10953 00002A79 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 10954                                  					; RTC Seconds
 10955 00002A7B 90                      		nop
 10956 00002A7C E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 10957 00002A7E 58                      		pop	ax		; restore work registers
 10958                                  
 10959                                  		; 19/12/2023
 10960                                  		;push	cs		; *place code segment in stack and
 10961                                  		;call	cmos_popf	; *handle popf for b- level 80286
 10962                                  		;retn
 10963 00002A7F EB18                    		jmp	short cmos_rw_popf
 10964                                  
 10965                                  ; =============== S U B	R O U T	I N E =======================================
 10966                                  
 10967                                  ;--- CMOS_READ -----------------------------------------------------------------
 10968                                  ;		read byte from cmos system clock configuration table	       :
 10969                                  ;									       :
 10970                                  ; input: (al)=	cmos table address to be read				       :
 10971                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
 10972                                  ;		bits 6-0 = address of table location to read		       :
 10973                                  ;									       :
 10974                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
 10975                                  ;		on then nmi left disabled. during the cmos read both nmi and   :
 10976                                  ;		normal interrupts are disabled to protect cmos data integrity. :
 10977                                  ;		the cmos address register is pointed to a default value and    :
 10978                                  ;		the interrupt flag restored to the entry state on return.      :
 10979                                  ;		only the (al) register and the nmi state is changed.	       :
 10980                                  ;-------------------------------------------------------------------------------
 10981                                  
 10982                                  cmos_read:				; read location (al) into (al)
 10983 00002A81 9C                      		pushf
 10984 00002A82 FA                      		cli
 10985 00002A83 53                      		push	bx
 10986                                  		;push	ax ; *		; AL = cmos table address to be read
 10987                                  		; 19/12/2023
 10988 00002A84 89C3                    		mov	bx, ax ; * ; input
 10989 00002A86 0C80                    		or	al, 80h
 10990 00002A88 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 10991                                  					; RTC Seconds
 10992 00002A8A 90                      		nop			; (undocumented delay needed)
 10993 00002A8B E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 10994                                  		
 10995                                  		;mov	bx, ax ; output
 10996                                  		;pop	ax ; * ; input
 10997                                  
 10998                                  		; 19/12/2023
 10999                                  		; al = output, bl = input
 11000 00002A8D 93                      		xchg	ax, bx ; *
 11001                                  		; bl = output, al = input
 11002                                  	
 11003 00002A8E 2480                    		and	al, 80h
 11004 00002A90 0C0F                    		or	al, 0Fh
 11005 00002A92 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
 11006                                  					; RTC Seconds
 11007 00002A94 90                      		nop
 11008 00002A95 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
 11009                                  		;mov	ax, bx ; * ; output
 11010                                  		; 19/12/2023
 11011 00002A97 93                      		xchg	ax, bx
 11012 00002A98 5B                      		pop	bx
 11013                                  
 11014                                  		; 19/12/2023
 11015                                  cmos_rw_popf:
 11016 00002A99 0E                      		push	cs		; *place code segment in stack and
 11017 00002A9A E80100                  		call	cmos_popf	; *handle popf for b- level 80286
 11018 00002A9D C3                      		retn			; return with flags restored
 11019                                  
 11020                                  ; ---------------------------------------------------------------------------
 11021                                  
 11022                                  cmos_popf:				
 11023 00002A9E CF                      		iret			; popf for level b- parts
 11024                                  					; return far and restore flags
 11025                                  
 11026                                  ; ---------------------------------------------------------------------------
 11027                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
 11028                                  ; ---------------------------------------------------------------------------
 11029                                  ; The following routines provide support for reading in the file MSDOS.SYS.
 11030                                  ; ---------------------------------------------------------------------------
 11031                                  
 11032                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11033                                  ;
 11034                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
 11035                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
 11036                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
 11037                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.)
 11038                                  
 11039                                  ; 20/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 11040                                  ; --------------------------------------------------------------------------- 
 11041                                  
 11042                                  ;ClusterH:	dw 0  ; 20/12/2023
 11043                                  
 11044                                  ; =============== S U B	R O U T	I N E =======================================
 11045                                  
 11046                                  ; GetClus, read in a cluster at a specified address
 11047                                  ;
 11048                                  ;  bx = cluster to read
 11049                                  ;  cx = sectors per cluster
 11050                                  ;  es:di = load location
 11051                                  
 11052                                  ; 17/10/2022
 11053                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
 11054                                  ; 09/12/2022
 11055                                  DISKRD equ diskrd
 11056                                  
 11057                                  		; 20/12/2023 - Retro DOS v5.0
 11058                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2DC4h)
 11059                                  
 11060                                  		; si:bx = (32 bit) cluster to read
 11061                                  		; cx = sectors per cluster
 11062                                  		; es:di = load location
 11063                                  
 11064                                  		; 17/10/2022
 11065                                  getclus:
 11066                                  		; 12/12/2023
 11067                                  		; ds = cs
 11068                                  		
 11069 00002A9F 51                      		push	cx ; 1*
 11070 00002AA0 57                      		push	di ; 2*
 11071                                  		;mov	[cs:doscnt], cx
 11072 00002AA1 890E[001A]              		mov	[doscnt], cx ; 12/12/2023
 11073                                  
 11074                                  		; 20/12/2023
 11075                                  		;;mov	[cs:ClusterH], si ; high word of cluster number
 11076                                  		;mov	[ClusterH], si ; high word of cluster number
 11077 00002AA5 89F5                    		mov	bp, si
 11078                                  
 11079 00002AA7 89D8                    		mov	ax, bx
 11080                                  
 11081                                  		;dec	ax
 11082                                  		;dec	ax
 11083                                  		; 20/12/2023
 11084 00002AA9 83E802                  		sub	ax, 2
 11085                                  
 11086                                  		;;sbb	[cs:ClusterH], 0
 11087                                  		;sbb	[ClusterH], 0
 11088 00002AAC 83DD00                  		sbb	bp, 0		
 11089                                  
 11090                                  		; 20/12/2023
 11091                                  		;;xchg	ax, [cs:ClusterH]
 11092                                  		;xchg	ax, [ClusterH]
 11093 00002AAF 95                      		xchg	ax, bp
 11094                                  
 11095 00002AB0 F7E1                    		mul	cx
 11096                                  
 11097                                  		;;xchg	ax, [cs:ClusterH]
 11098                                  		;xchg	ax, [ClusterH]
 11099 00002AB2 95                      		xchg	ax, bp ; (+)
 11100                                  		;
 11101 00002AB3 F7E1                    		mul	cx		;; convert to logical sector
 11102                                  					;; dx:ax = matching logical sector number
 11103                                  					;;	  starting from the data sector
 11104                                  		;;add	ax, [cs:bios_l]
 11105                                  		;;adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
 11106                                  		; 12/12/2023
 11107                                  		;add	ax, [bios_l]
 11108                                  		;adc	dx, [bios_h]	; dx:ax	= first	logical	sector to read
 11109                                  
 11110                                  		; 20/12/2023
 11111                                  		;;add	dx, [cs:ClusterH]
 11112                                  		;add	ax, [cs:First_Data_Sector]
 11113                                  		;adc	dx, [cs:First_Data_Sector+2]
 11114 00002AB5 01EA                    		add	dx, bp ; (+)
 11115                                  		;add	dx, [ClusterH]	; convert to logical sector
 11116                                  					; dx:ax	= matching logical sector number
 11117                                  					;	  starting from the data sector
 11118 00002AB7 0306[FC19]              		add	ax, [First_Data_Sector]
 11119 00002ABB 1316[FE19]              		adc	dx, [First_Data_Sector+2]
 11120                                  					; dx:ax = first logical sector to read
 11121                                  unpack:
 11122                                  		; 20/12/2023			
 11123 00002ABF 1E                      		push	ds ; 3* ; ds = cs ; 12/12/2023
 11124 00002AC0 52                      		push	dx ; 4* ; * ; 12/12/2023
 11125 00002AC1 50                      		push	ax ; 5*
 11126 00002AC2 53                      		push	bx ; 6*
 11127 00002AC3 56                      		push	si ; 7* ; 20/12/2023
 11128                                  
 11129                                  		;;mov	si, [cs:fatloc]
 11130                                  		;mov	si, [fatloc] ; 12/12/2023
 11131                                  		;mov	ds, si
 11132                                  		; 20/12/2023
 11133                                  		;mov	ax, [fatloc]
 11134                                  		;mov	ds, ax
 11135 00002AC4 53                      		push	bx ; 8*
 11136 00002AC5 FF36[021A]              		push	word [fatloc] ; 9*
 11137                                  
 11138                                  		;test	byte [cs:fbigfat], 20h
 11139 00002AC9 F606[061A]20            		test	byte [fbigfat], 20h	; fbigbig FAT32 ?
 11140 00002ACE 1F                      		pop	ds ; 9* ; ds = [fatloc]
 11141 00002ACF 7415                    		jz      short not_32bit_cluster ; no
 11142                                  unpack32:
 11143                                  		;push	dx
 11144 00002AD1 89F2                    		mov	dx, si
 11145                                  		;mov	si, bx
 11146 00002AD3 5E                      		pop	si ; 8* ; si = bx
 11147 00002AD4 01F6                    		add	si, si
 11148 00002AD6 11D2                    		adc	dx, dx
 11149 00002AD8 01F6                    		add	si, si
 11150 00002ADA 11D2                    		adc	dx, dx 
 11151                                  			; dx:si = 4*(si:bx) ; clust num offset from FAT entry 0
 11152 00002ADC E89B00                  		call	get_fat_sector
 11153 00002ADF 8B7702                  		mov	si, [bx+2]	; high word of the FAT32 cluster number
 11154 00002AE2 8B1F                    		mov	bx, [bx]	; low word of the FAT32 cluster number
 11155                                  		;pop	dx
 11156 00002AE4 EB45                    		jmp	short getcl1
 11157                                  
 11158                                  not_32bit_cluster:
 11159                                  		;mov	si, bx		; next cluster
 11160 00002AE6 5E                      		pop	si ; 8* ; si = bx
 11161 00002AE7 2EF606[061A]40          		test	byte [cs:fbigfat], 40h	; fbig
 11162                                  					; 16 bit fat?
 11163 00002AED 752F                    		jnz	short unpack16	; yes
 11164                                  unpack12:
 11165 00002AEF D1EE                    		shr	si, 1		; 12 bit fat. si = si/2
 11166                                  					; si = clus + clus/2
 11167 00002AF1 01DE                    		add	si, bx		;
 11168                                  					; (si =	byte offset of the cluster in the FAT)
 11169                                  		;push	dx ; 12/12/2023
 11170 00002AF3 31D2                    		xor	dx, dx
 11171                                  		; 12/12/2023
 11172                                  		; ds = FAT buffer segment
 11173 00002AF5 E88200                  		call	get_fat_sector
 11174                                  		;pop	dx ; 12/12/2023
 11175                                  
 11176 00002AF8 8B07                    		mov	ax, [bx]	; save it into ax
 11177 00002AFA 750C                    		jnz	short even_odd	; if not a splitted fat, check even-odd.
 11178                                  		; 25/06/2023
 11179                                  		;mov	al, [bx]	; splitted fat
 11180                                  		
 11181                                  		; 12/12/2023
 11182                                  		;mov	[cs:temp_cluster], al
 11183 00002AFC 50                      		push	ax ; **	; al = low 8 bits of 12 bits cluster number
 11184                                  
 11185 00002AFD 46                       		inc	si		; (next	byte)
 11186                                  
 11187                                  		;push	dx ; 12/12/2023
 11188 00002AFE 31D2                    		xor	dx, dx
 11189 00002B00 E87700                  		call	get_fat_sector
 11190                                  		;pop	dx ; 12/12/2023
 11191                                  
 11192                                  		;mov	al, ds:0
 11193                                  		; 12/12/2023
 11194                                  		; ds = FAT buffer segment
 11195                                  		;mov	al, [0] ; 19/10/2022
 11196                                  		;mov	[cs:temp_cluster+1], al
 11197                                  		;mov	ax, [cs:temp_cluster]
 11198                                  		; 12/12/2023
 11199                                  		;mov	al, [cs:temp_cluster]
 11200 00002B03 58                      		pop	ax  ; ** ; al = low 8 bits of 12 bits cluster number
 11201 00002B04 8A260000                		mov	ah, [0] ; high 4 bits (bits 7 to 11) of 12 bits cluster num
 11202                                  even_odd:
 11203 00002B08 5B                      		pop	bx		; restore old fat entry	value
 11204 00002B09 53                      		push	bx		; save it right	away.	
 11205 00002B0A D1EB                    		shr	bx, 1		; was it even or odd?
 11206 00002B0C 7308                    		jnb	short havclus	; it was even.
 11207 00002B0E D1E8                    		shr	ax, 1		; odd. massage fat value and keep
 11208                                  					; the highest 12 bits.
 11209 00002B10 D1E8                    		shr	ax, 1
 11210 00002B12 D1E8                    		shr	ax, 1
 11211 00002B14 D1E8                    		shr	ax, 1
 11212                                  havclus:
 11213 00002B16 89C3                    		mov	bx, ax		; now bx = new fat entry.
 11214 00002B18 81E3FF0F                		and	bx, 0FFFh	; keep low 12 bits.
 11215 00002B1C EB0B                    		jmp	short unpackx
 11216                                  ; ---------------------------------------------------------------------------
 11217                                  
 11218                                  unpack16:
 11219                                  		;push	dx	; 12/12/2023
 11220 00002B1E 31D2                    		xor	dx, dx ; 0
 11221 00002B20 D1E6                    		shl	si, 1		; extend to 32 bit offset
 11222                                  		;adc	dx, 0
 11223                                  		; 12/12/2023
 11224 00002B22 D1D2                    		rcl	dx, 1
 11225                                  
 11226                                  		; 12/12/2023
 11227                                  		; ds = FAT buffer segment
 11228 00002B24 E85300                  		call	get_fat_sector
 11229                                  		;pop	dx	; 12/12/2023
 11230 00002B27 8B1F                    		mov	bx, [bx]	;
 11231                                  					; bx = new fat entry.
 11232                                  unpackx:
 11233                                  		; 20/12/2023
 11234 00002B29 31F6                    		xor	si, si		; high word of cluster number = 0
 11235                                  					; (FAT12 or FAT16)
 11236                                  getcl1:	
 11237                                  		; 20/12/2023
 11238                                  		;pop	word [cs:ClusterH]
 11239 00002B2B 5A                      		pop	dx	; 7* - cluster number hw
 11240                                  		;pop	si		; restore old bx value into si
 11241 00002B2C 58                      		pop	ax	; 6* - cluster number lw
 11242                                  
 11243                                  		; 20/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 11244                                  		; (this is a fast kernel loading method by the MSDOS programmer)
 11245                                  		; ((consequtive clusters --> consequtive sectors))
 11246                                  
 11247 00002B2D 29D8                    		sub	ax, bx	; previous - current (or current - new)	
 11248                                  		;sbb	[cs:ClusterH], si
 11249 00002B2F 19F2                    		sbb	dx, si
 11250                                  		;cmp	[cs:ClusterH], -1 ; one apart? (current = previous+1)
 11251 00002B31 83FAFF                  		cmp	dx, -1
 11252 00002B34 7503                    		jnz	short not_consequental
 11253 00002B36 83F8FF                  		cmp	ax, -1		; 0FFFFh ; is [ClusterH]:ax = -1 ?
 11254                                  
 11255                                  not_consequental:
 11256 00002B39 58                      		pop	ax ; 5* 	; restore logical sector (low)
 11257 00002B3A 5A                      		pop	dx ; 4* ; * ; 12/12/2023
 11258 00002B3B 1F                      		pop	ds ; 3*
 11259                                  
 11260                                  		;; 12/12/2023
 11261                                  		;; (this is a fast kernel loading method by the MSDOS programmer)
 11262                                  		;; ((consequtive clusters --> consequtive sectors))
 11263                                  		;; ds = cs
 11264                                  		;sub	si, bx
 11265                                  		;cmp	si, -1		; one apart? (consequtive?)
 11266                                  		;			; (current = previous+1)
 11267                                  
 11268 00002B3C 7507                    		jnz	short getcl2	; no, read [doscnt] sectors 
 11269                                  
 11270                                  		;add	[cs:doscnt], cx ; (cx = sectors per cluster)
 11271 00002B3E 010E[001A]              		add	[doscnt], cx ; 12/12/2023 ; add to read count
 11272 00002B42 E97AFF                  		jmp	unpack
 11273                                  ; ---------------------------------------------------------------------------
 11274                                  
 11275                                  getcl2:
 11276 00002B45 56                      		push	si ; 20/12/2023
 11277 00002B46 53                      		push	bx	
 11278                                  		; bx = low word of the new cluster number
 11279                                  		; 20/12/2023 - Retro DOS v5.0 (32 bit cluster numbers)
 11280                                  		; si = high word of the new cluster number
 11281 00002B47 52                      		push	dx		; sector to read (high word)
 11282 00002B48 50                      		push	ax		; sector to read (low word)
 11283                                  		
 11284                                  		; 12/12/2023
 11285                                  		; ds = cs
 11286                                  		;mov	ax, [cs:drvfat]	; get drive and	fat spec
 11287                                  		;mov	cx, [cs:doscnt]
 11288 00002B49 A1[FA19]                		mov	ax, [drvfat]	; get drive and	fat spec
 11289                                  
 11290                                  		;;;
 11291                                  		; 20/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 11292                                  		;
 11293                                  		; dma and segment (64K boundary) overrun precaution
 11294                                  		; (sector count will be decreased if it is required)
 11295 00002B4C 89F9                     		mov	cx, di
 11296 00002B4E F7D1                    		not	cx		; cx = 65535 - cx
 11297 00002B50 D1E9                    		shr	cx, 1		; cx = cx/2
 11298 00002B52 30C9                    		xor	cl, cl
 11299 00002B54 86CD                    		xchg	cl, ch		; cx = cx/256
 11300                                  		
 11301                                  		;cmp	cx, [cs:doscnt]	
 11302                                  				; if sector read count > cx, decrease it to cx
 11303 00002B56 3B0E[001A]              		cmp	cx, [doscnt]
 11304 00002B5A 7604                    		jbe	short getcl3
 11305                                  		;;;
 11306                                  		;mov	cx, [cs:doscnt]
 11307 00002B5C 8B0E[001A]              		mov	cx, [doscnt]
 11308                                  getcl3:
 11309 00002B60 5A                      		pop	dx		; sector to read for diskrd (low)
 11310                                  		;pop	word [cs:start_sec_h]
 11311                                  		; 12/12/2023
 11312 00002B61 8F06[9C04]              		pop	word [start_sec_h]
 11313                                  					; sector to read for diskrd (high)
 11314                                  		; 12/12/2023
 11315                                  		; ds = cs
 11316                                  		;push	ds
 11317                                  		;push	cs
 11318                                  		;pop	ds
 11319                                  		
 11320 00002B65 0E                      		push	cs		; simulate far call
 11321                                  		; 17/10/2022
 11322 00002B66 BD[0E0A]                		mov	bp, DISKRD	; 8E5h
 11323                                  		;mov	bp, 8E5h	; offset diskrd
 11324                                  					; 2C7h:8E5h = 70h:2E55h
 11325 00002B69 E805EF                  		call	call_bios_code	; read the clusters
 11326                                  		
 11327                                  		;pop	ds
 11328                                  		; 12/12/2023
 11329                                  		; ds = cs
 11330 00002B6C 5B                      		pop	bx		; lw of the new cluster number
 11331 00002B6D 5E                      		pop	si ; 20/12/2023 ; hw of the new cluster number
 11332                                  
 11333 00002B6E 5F                      		pop	di ; 2* - (kernel) load location (es:di)
 11334                                  
 11335                                  		;mov	ax, [cs:doscnt]	; get number of	sectors	read
 11336                                  		; 12/12/2023
 11337 00002B6F A1[001A]                		mov	ax, [doscnt]
 11338 00002B72 86E0                    		xchg	ah, al		; multiply by 256
 11339 00002B74 D1E0                    		shl	ax, 1		; times	2 equal	512
 11340 00002B76 01C7                    		add	di, ax		; update load location
 11341                                  
 11342 00002B78 59                      		pop	cx ; 1*		; restore sectors/cluster
 11343                                  
 11344 00002B79 C3                      		retn
 11345                                  
 11346                                  ; =============== S U B	R O U T	I N E =======================================
 11347                                  
 11348                                  ;function: find and read the corresponding fat sector into ds:0
 11349                                  ;
 11350                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
 11351                                  ;     ds - fatloc segment
 11352                                  ;     cs:drvfat - logical drive number, fat id
 11353                                  ;     cs:md_sectorsize
 11354                                  ;     cs:last_fat_secnum - last fat sector number read in.
 11355                                  ;
 11356                                  ;out). corresponding fat sector read in.
 11357                                  ;      bx = offset value from fatlog segment.
 11358                                  ;      other registers are saved.
 11359                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
 11360                                  ;      starts at the last byte of the fat sector. in this case, the caller
 11361                                  ;      should save this byte, and read the next fat sector to get the rest
 11362                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
 11363                                  
 11364                                  		; 17/10/2022
 11365                                  get_fat_sector:	
 11366                                  		; 20/12/2023
 11367                                  		; 12/12/2023
 11368                                  		; ds = fat buffer segment
 11369                                  
 11370                                  		; 12/12/2023
 11371                                  		;push	ax ; (not necessary)
 11372 00002B7A 51                      		push	cx ; read count (sectors per cluster)
 11373 00002B7B 57                      		push	di ; IBMDOS.COM/MSDOS.SYS load offset
 11374 00002B7C 56                      		push	si ; FAT offset value (from fat entry 0)
 11375 00002B7D 06                      		push	es ; IBMDOS.COM/MSDOS.SYS load segment
 11376 00002B7E 1E                      		push	ds ; FAT buffer segment
 11377                                  
 11378                                  		; 12/12/2023
 11379 00002B7F 0E                      		push	cs
 11380 00002B80 1F                      		pop	ds
 11381                                  	
 11382 00002B81 89F0                    		mov	ax, si
 11383                                  		;;mov	cx, [cs:md_sectorsize] ; 512
 11384                                  		; 12/12/2023
 11385                                  		;mov	cx, [md_sectorsize] ; 512
 11386                                  		;div	cx		; ax = sector number, dx = offset
 11387                                  		; 12/12/2023
 11388                                  		;nop
 11389                                  
 11390                                  		; 12/12/2023
 11391 00002B83 F736[081A]              		div	word [md_sectorsize] ; 512
 11392                                  
 11393                                  		; ax = FAT sector (sequence/index) number
 11394                                  		; dx = cluster number offset
 11395                                  
 11396                                  		; Get rid of the assumption that
 11397                                  		; there	is only	one reserved sector
 11398                                  
 11399                                  		; 12/12/2023 ; *
 11400                                  		;push	es ; *
 11401                                  		;push	ds ; *
 11402                                  		;push	di ; *
 11403 00002B87 50                      		push	ax
 11404                                  		;push	cs ; *
 11405                                  		;pop	ds ; *
 11406                                  
 11407                                  		;mov	ax, [cs:drvfat]	; get drive # and FAT id
 11408                                  		; 12/12/2023
 11409 00002B88 A1[FA19]                		mov	ax, [drvfat]	; get drive # and FAT id 
 11410 00002B8B BD[A405]                		mov	bp, SETDRIVE
 11411                                  		;mov	bp, 5AEh  ; PCDOS 7.1 IBMBIO.COM
 11412                                  		;;mov	bp, 4D7h	; setdrive
 11413                                  					; at 2C7h:4D7h = 70h:2A47h
 11414 00002B8E 0E                      		push	cs		; simulate far call
 11415 00002B8F E8DFEE                  		call	call_bios_code	; get bds for drive
 11416 00002B92 58                      		pop	ax		; (sector number -without reserved and hidden sectors-)
 11417 00002B93 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 11418                                  					; add #reserved_sectors
 11419                                  		; 12/12/2023
 11420                                  		;pop	di ; *
 11421                                  		;pop	ds ; *
 11422                                  		;pop	es ; *
 11423                                  
 11424                                  		; 12/12/2023
 11425                                  		; ds = cs
 11426 00002B97 3B06[0A1A]              		cmp	ax, [last_fat_sec_num]
 11427                                  		;cmp	ax, [cs:last_fat_sec_num]
 11428 00002B9B 741C                    		jz	short gfs_split_chk ; don't need to read it again.
 11429 00002B9D A3[0A1A]                		mov	[last_fat_sec_num], ax
 11430                                  		;mov	[cs:last_fat_sec_num], ax
 11431                                  					; sector number
 11432                                  					; (in the partition, without hidden sectors)
 11433                                  		; 13/12/2023
 11434 00002BA0 07                      		pop	es ; FAT buffer segment (DS on top of the stack)
 11435 00002BA1 06                      		push	es ; (put it on top of the stack again)
 11436                                  
 11437 00002BA2 52                      		push	dx ; cluster number offset
 11438                                  
 11439                                  		; 12/12/2023
 11440 00002BA3 31C9                    		xor	cx, cx
 11441 00002BA5 890E[9C04]              		mov	[start_sec_h], cx ;0 
 11442                                  		;mov	word [cs:start_sec_h], 0 
 11443                                  					; prepare to read the fat sector
 11444                                  					; start_sec_h is always	0 for fat sector.
 11445 00002BA9 89C2                    		mov	dx, ax
 11446                                  		; 12/12/2023
 11447 00002BAB 41                      		inc	cx ; cx = 1
 11448                                  		;mov	cx, 1		; 1 sector read
 11449                                  		;mov	ax, [cs:drvfat]
 11450 00002BAC A1[FA19]                		mov	ax, [drvfat]
 11451                                  		;push	ds
 11452                                  		;pop	es
 11453                                  
 11454 00002BAF 31FF                    		xor	di, di	; 0	; es:di	-> fatloc segment:0
 11455                                  		
 11456                                  		; 12/12/2023
 11457                                  		;push	ds
 11458                                  		;push	cs
 11459                                  		;pop	ds
 11460                                  		
 11461 00002BB1 0E                      		push	cs		; simulate far call
 11462                                  
 11463                                  		; 20/12/2023
 11464                                  		; 17/10/2022
 11465 00002BB2 BD[0E0A]                		mov	bp, DISKRD	; offset diskrd
 11466                                  		;mov	bp, 0A2Bh	; 20/12/2023
 11467                                  		;	(PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A2Bh ; 364h:0A2Bh)
 11468                                  		;mov	bp, 8E5h	; 17/10/2022
 11469                                  					; 2C7h:8E5h = 70h:2E55h
 11470                                  
 11471 00002BB5 E8B9EE                  		call	call_bios_code	; read the clusters
 11472                                  
 11473                                  		; 12/12/2023
 11474                                  		;pop	ds
 11475                                  		; ds = cs = biosdata segment
 11476                                  
 11477 00002BB8 5A                      		pop	dx ; cluster number offset 
 11478                                  
 11479                                  gfs_split_chk:
 11480                                  		; 13/12/2023
 11481                                  		;mov	cx, [cs:md_sectorsize] ; 512
 11482 00002BB9 8B0E[081A]              		mov	cx, [md_sectorsize]
 11483                                  ;gfs_split_chk:					
 11484 00002BBD 49                      		dec	cx		; 511
 11485 00002BBE 39CA                    		cmp	dx, cx		; if offset points to the
 11486                                  					; last byte of this sector,
 11487                                  					; then splitted	entry.
 11488 00002BC0 89D3                    		mov	bx, dx		; set bx to dx
 11489                                  		
 11490                                  		; 12/12/2023
 11491                                  		; bx = dx = cluster number offset in the FAT buffer
 11492 00002BC2 1F                      		pop	ds ; FAT buffer segment
 11493 00002BC3 07                      		pop	es ; IBMDOS.COM/MSDOS.SYS load segment
 11494 00002BC4 5E                      		pop	si ; FAT offset value (from fat entry 0)
 11495 00002BC5 5F                      		pop	di ; IBMDOS.COM/MSDOS.SYS load offset
 11496 00002BC6 59                      		pop	cx ; read count (sectors per cluster)
 11497                                  		;pop	ax
 11498                                  
 11499 00002BC7 C3                      		retn
 11500                                  ; 15/10/2022
 11501                                  ;Bios_Data_Init	ends
 11502                                  
 11503                                  ; ---------------------------------------------------------------------------
 11504                                  
 11505                                  		; 09/12/2022
 11506                                  		;db 0
 11507                                  
 11508                                  numbertodiv	equ ($-BData_start)
 11509                                  numbertomod	equ (numbertodiv % 16)
 11510                                  
 11511                                  %if numbertomod>0 & numbertomod<16
 11512 00002BC8 00<rep 8h>              		times (16-numbertomod) db 0
 11513                                  %endif
 11514                                  
 11515                                  ;align 16
 11516                                  
 11517                                  ; 09/12/2022
 11518                                  IOSYSCODESEGOFF	equ $ - BData_start
 11519                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
 11520                                  
 11521                                  ;--- End of DOSBIOS data segment --------------------------------------------
 11522                                  ; ---------------------------------------------------------------------------
 11523                                  		;db 4 dup(0)
 11524                                  ; 09/12/2022		
 11525                                  ;		times 4 db 0	; 19/10/2022
 11526                                  ; ---------------------------------------------------------------------------
 11527                                  
 11528                                  ;============================================================================
 11529                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
 11530                                  ;============================================================================
 11531                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11532                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 11533                                  
 11534                                  section .BIOSCODE vstart=0 
 11535                                  
 11536                                  ; 30/12/2022
 11537                                  ; (BIOSCODE SEGMENT is 2CCh for MSDOS 6.21 IO.SYS)  -- ((25C0h+700h)>>4) --
 11538                                  
 11539                                  BCode_start:	 ; 09/12/2022
 11540                                   
 11541                                  ; 02/10/2022
 11542                                  
 11543                                  ;--- DOSBIOS code segment ---------------------------------------------------
 11544                                  ;----------------------------------------------------------------------------
 11545                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
 11546                                  ;----------------------------------------------------------------------------
 11547                                  
 11548                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
 11549 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
 11550 00000030 7000                    BiosDataWord:	dw 70h
 11551                                  
 11552                                  ; 15/10/2022
 11553                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
 11554                                  ; 09/12/2022
 11555                                  BIOSDATAWORD	equ BiosDataWord
 11556                                  
 11557                                  ; ---------------------------------------------------------------------------
 11558                                  
 11559                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11560                                  ; 20/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 11561                                  
 11562                                  ;************************************************************************
 11563                                  ;*									*
 11564                                  ;*	seg_reinit is called with ax = our new code segment value,	*
 11565                                  ;*	  trashes di, cx, es						*
 11566                                  ;*									*
 11567                                  ;*	cas -- should be made disposable!				*
 11568                                  ;*									*
 11569                                  ;************************************************************************
 11570                                  
 11571                                  	; 20/09/2023	
 11572                                  	; 10/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 11573                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0032h 
 11574                                  
 11575                                  _seg_reinit:
 11576 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11577                                  					; at 2C7h:30h or 70h:25A0h
 11578                                  		;mov	di, (offset cdev+2)
 11579 00000037 BF[0406]                		mov	di, cdev+2	; 19/10/2022
 11580                                  		;mov	cx, 4		; (end_BC_entries - cdev)/4
 11581                                  		; 10/08/2023
 11582 0000003A B90300                  		mov	cx, 3 ; (PCDOS 7.1)
 11583                                  _seg_reinit_1:
 11584 0000003D AB                      		stosw			; modify Bios_Code entry points
 11585 0000003E 47                      		inc	di
 11586 0000003F 47                      		inc	di
 11587 00000040 E2FB                    		loop	_seg_reinit_1
 11588                                  		; 10/08/2023 (PCDOS 7.1)
 11589                                  		; (direct jump to i2f_handler from BIOSDATA:bios_i2f)
 11590                                  		; (instead of 'bcode_i2f: dw i2f_handler, IOSYSCODESEG')
 11591 00000042 26A3[0800]              		mov     [es:bios_i2f_seg], ax ; actual BIOSCODE segment
 11592 00000046 CB                      		retf
 11593                                  
 11594                                  ; ---------------------------------------------------------------------------
 11595                                  
 11596                                  ; 15/10/2022
 11597                                  
 11598                                  ;************************************************************************
 11599                                  ;*									*
 11600                                  ;*	chardev_entry - main device driver dispatch routine		*
 11601                                  ;*	   called with a dummy parameter block on the stack		*
 11602                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
 11603                                  ;*									*
 11604                                  ;*	will eventually take care of doing the transitions in		*
 11605                                  ;*	   out of Bios_Code						*
 11606                                  ;*									*
 11607                                  ;************************************************************************
 11608                                  
 11609                                  		; 20/09/2023
 11610                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
 11611 00000047 56                      		push	si
 11612 00000048 50                      		push	ax
 11613 00000049 51                      		push	cx
 11614 0000004A 52                      		push	dx
 11615 0000004B 57                      		push	di
 11616 0000004C 55                      		push	bp
 11617 0000004D 1E                      		push	ds
 11618 0000004E 06                      		push	es
 11619 0000004F 53                      		push	bx
 11620 00000050 89E5                    		mov	bp, sp
 11621 00000052 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
 11622                                  		;;mov	ds, word [cs:0030h]
 11623                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 11624 00000055 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 11625                                  		; 20/09/2023 (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:005Ah)
 11626 0000005A C434                    		les	si, [si]
 11627                                  		;mov	ax, [si+2]	; get the device number	if present
 11628 0000005C 8CC0                    		mov	ax, es
 11629 0000005E A2[2100]                		mov	[auxnum], al
 11630 00000061 8826[8004]              		mov	[printdev], ah
 11631                                  		;mov	si, [si]	; point	to the device dispatch table
 11632 00000065 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
 11633 00000069 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
 11634 0000006D 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
 11635 00000071 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
 11636 00000075 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
 11637                                  		; 17/10/2022
 11638 00000079 81FE[6F05]              		cmp	si, DSKTBL
 11639                                  		;;cmp	si, 579h	; (PCDOS 7.1 IBMBIO.COM)
 11640                                  		;cmp	si, 4A2h	; dsktbl
 11641                                  					; at 2C7h:4A2h = 70h:2A12h
 11642 0000007D 7517                    		jnz	short no_sector32_mapping
 11643                                  
 11644                                  ; Special case for 32-bit start sector number:
 11645                                  ;   if (si==dsktbl) /* if this is a disk device call */
 11646                                  ;      set high 16 bits of secnum to 0
 11647                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
 11648                                  ;
 11649                                  ; pass high word of sector number in start_sec_h, low word in dx
 11650                                  ;
 11651                                  ; note: start_l and start_h are the offsets within the io_request packet
 11652                                  ;	  which contain the low and hi words of the 32 bit start sector if
 11653                                  ;	  it has been used.
 11654                                  ;
 11655                                  ; note: remember not to destroy the registers which have been set up before
 11656                                  
 11657                                  		; 20/09/2023
 11658                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
 11659 0000007F C706[9C04]0000          		mov	word [start_sec_h], 0
 11660 00000085 83FAFF                  		cmp	dx, 0FFFFh
 11661 00000088 750C                    		jnz	short no_sector32_mapping
 11662 0000008A 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
 11663                                  					; 32 bits dsk req
 11664                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
 11665 0000008E 8916[9C04]              		mov	[start_sec_h], dx
 11666 00000092 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
 11667                                  					; dx = packet.start_l
 11668                                  no_sector32_mapping:
 11669 00000096 97                      		xchg	ax, di
 11670 00000097 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
 11671 0000009B 2E3A04                  		cmp	al, [cs:si]
 11672 0000009E 732B                    		jnb	short command_error
 11673 000000A0 98                      		cbw			; note that al <= 15 means ok
 11674 000000A1 D1E0                    		shl	ax, 1
 11675 000000A3 01C6                    		add	si, ax
 11676 000000A5 97                      		xchg	ax, di
 11677 000000A6 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
 11678 000000AA FC                      		cld
 11679                                  		; 17/10/2022
 11680 000000AB 2EFF5401                		call	near [cs:si+1]
 11681                                  		;call	word ptr cs:si+1
 11682 000000AF 7202                    		jb	short already_got_ah_status
 11683 000000B1 B401                    		mov	ah, 1
 11684                                  already_got_ah_status:
 11685                                  		;;mov	ds, [cs:0030h]	; 15/10/2022
 11686                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 11687                                  					; cas note: shouldn't be needed!
 11688 000000B3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 11689                                  		;lds	bx, ds:ptrsav
 11690 000000B8 C51E[1200]              		lds	bx, [ptrsav]
 11691 000000BC 894703                  		mov	[bx+3],	ax	; [bx+status]
 11692                                  					; mark operation complete
 11693 000000BF 5B                      		pop	bx
 11694 000000C0 07                      		pop	es
 11695 000000C1 1F                      		pop	ds
 11696 000000C2 5D                      		pop	bp
 11697 000000C3 5F                      		pop	di
 11698 000000C4 5A                      		pop	dx
 11699 000000C5 59                      		pop	cx
 11700 000000C6 58                      		pop	ax
 11701 000000C7 5E                      		pop	si
 11702                                  		;add	sp, 2		; get rid of fake return address
 11703                                  		; 20/09/2023 (PCDOS 7.1	- IBMBIO.COM - BIOSCODE:00C8h)
 11704 000000C8 44                      		inc	sp
 11705 000000C9 44                      		inc	sp	
 11706                                  
 11707                                  		; fall through into bc_retf
 11708                                  ; ---------------------------------------------------------------------------	
 11709                                  bc_retf:
 11710 000000CA CB                      		retf
 11711                                  ; ---------------------------------------------------------------------------
 11712                                  
 11713                                  command_error:				
 11714 000000CB E80700                  		call	bc_cmderr
 11715 000000CE EBE3                    		jmp	short already_got_ah_status
 11716                                  ; 15/10/2022
 11717                                  ; 01/05/2019
 11718                                  
 11719                                  ;----------------------------------------------------------------------------
 11720                                  ; The following piece of hack is for supporting CP/M compatibility
 11721                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
 11722                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
 11723                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
 11724                                  ; high.
 11725                                  ;----------------------------------------------------------------------------
 11726                                  
 11727                                  		;db 7 dup(0)
 11728                                  
 11729                                  		; 20/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 11730                                  		; (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:0D0h)
 11731                                  		; 15/10/2022
 11732                                  		;dw 0		; pad to bring offset to 0D0h
 11733                                  
 11734 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
 11735                                  				;  which is the CP/M call 5 entry point
 11736                                  		
 11737                                  
 11738                                  ; ---------------------------------------------------------------------------
 11739                                  
 11740                                  ;	exit - all routines return through this path
 11741                                  
 11742                                  bc_cmderr:				
 11743 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
 11744                                  					; unknown command error
 11745                                  
 11746                                  ; =============== S U B	R O U T	I N E =======================================
 11747                                  
 11748                                  ;	now zero the count field by subtracting its current value,
 11749                                  ;	  which is still in cx, from itself.
 11750                                  
 11751                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
 11752                                  ;	  in order to return the number actually complete
 11753                                  
 11754                                  bc_err_cnt:	
 11755                                  		;les	bx, ds:ptrsav
 11756                                  		; 19/10/2022
 11757 000000D7 C41E[1200]              		les	bx, [ptrsav]
 11758 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
 11759                                  					; # of successful i/o's
 11760 000000DF B481                    		mov	ah, 81h		; mark error return
 11761 000000E1 F9                      		stc			; indicate abnormal end
 11762 000000E2 C3                      		retn
 11763                                  
 11764                                  ; 15/10/2022
 11765                                  
 11766                                  ;Bios_Code ends
 11767                                  
 11768                                  ;----------------------------------------------------------------------------
 11769                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
 11770                                  ;----------------------------------------------------------------------------
 11771                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11772                                  ; 10/01/2019 - Retro DOS v4.0
 11773                                  
 11774                                  ; 30/04/2019
 11775                                  
 11776                                  ;title	mschar - character and clock devices
 11777                                  
 11778                                  ;MODE_CTRLBRK	equ	0FFh
 11779                                  
 11780                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
 11781                                  
 11782                                  ;************************************************************************
 11783                                  ;*									*
 11784                                  ;*	device driver dispatch tables					*
 11785                                  ;*									*
 11786                                  ;*	each table starts with a byte which lists the number of		*
 11787                                  ;*	legal functions, followed by that number of words. Each		*
 11788                                  ;*	word represents an offset of a routine in Bios_Code which	*
 11789                                  ;*	handles the function. The functions are terminated with		*
 11790                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
 11791                                  ;*	to the caller. If carry is set, the ah/al registers are		*
 11792                                  ;*	returned as abnormal completion status. Notice that ds		*
 11793                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
 11794                                  ;*									*
 11795                                  ;************************************************************************
 11796                                  
 11797                                  		; 20/09/2023
 11798                                  		; (PCDOS 7.1 - IBMBIO.COM - BIOSCODE:00E3h)
 11799                                  		; 13/12/2022
 11800 000000E3 00                      		db 0
 11801                                  
 11802                                  		; 13/12/2022
 11803 000000E4 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
 11804                                  					; 2C7h:0E4h = 70h:2654h
 11805 000000E5 [FA01]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
 11806                                  					; 00 init
 11807 000000E7 [FA01]                  		dw bc_exvec  ; 1FBh	; 01
 11808 000000E9 [FA01]                  		dw bc_exvec  ; 1FBh	; 02
 11809 000000EB [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
 11810                                  					; 03
 11811 000000ED [5C01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
 11812                                  					; 04
 11813 000000EF [9F01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
 11814                                  					; 05
 11815 000000F1 [FA01]                  		dw bc_exvec  ; 1FBh	; 06
 11816 000000F3 [0802]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
 11817                                  					; 07
 11818 000000F5 [FC01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
 11819                                  					; 08
 11820 000000F7 [FC01]                  		dw con_writ  ; 1FDh	; 09
 11821 000000F9 [FA01]                  		dw bc_exvec  ; 1FBh	; 0A
 11822                                  con_table_end:
 11823 000000FB 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
 11824                                  					; 2C7h:0FBh = 70h:266Bh
 11825 000000FC [FA01]                  		dw bc_exvec   ; 1FBh	; bc_exvec
 11826 000000FE [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 11827 00000100 [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 11828 00000102 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
 11829 00000104 [1902]                  		dw prn_input  ;	21Ah	; prn_input
 11830                                  					; 04 indicate zero chars read
 11831 00000106 [C701]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
 11832                                  					; 05 read non-destructive
 11833 00000108 [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 11834 0000010A [FA01]                  		dw bc_exvec   ; 1FBh	; 07
 11835 0000010C [1E02]                  		dw prn_writ   ;	21Fh	; prn_writ
 11836 0000010E [1E02]                  		dw prn_writ   ; 21Fh	; 09
 11837 00000110 [4F02]                  		dw prn_stat   ; 251h	; prn_stat
 11838 00000112 [FA01]                  		dw bc_exvec   ; 1FBh	; 0B
 11839 00000114 [FA01]                  		dw bc_exvec   ; 1FBh	; 0C
 11840 00000116 [FA01]                  		dw bc_exvec   ; 1FBh	; 0D
 11841 00000118 [FA01]                  		dw bc_exvec   ; 1FBh	; 0E
 11842 0000011A [FA01]                  		dw bc_exvec   ; 1FBh	; 0F
 11843 0000011C [9402]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
 11844 0000011E [FA01]                  		dw bc_exvec   ; 1FBh	; 11
 11845 00000120 [FA01]                  		dw bc_exvec   ; 1FBh	; 12
 11846 00000122 [C202]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
 11847 00000124 [FA01]                  		dw bc_exvec   ; 1FBh	; 14
 11848 00000126 [FA01]                  		dw bc_exvec   ; 1FBh	; 15
 11849 00000128 [FA01]                  		dw bc_exvec   ; 1FBh	; 16
 11850 0000012A [FA01]                  		dw bc_exvec   ; 1FBh	; 17
 11851 0000012C [FA01]                  		dw bc_exvec   ; 1FBh	; 18
 11852 0000012E [F702]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
 11853                                  prn_table_end:
 11854 00000130 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
 11855                                  					; 2C7h:130h = 70h:26A0h
 11856 00000131 [FA01]                  		dw bc_exvec   ; 1FBh	; 00 - init
 11857 00000133 [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 11858 00000135 [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 11859 00000137 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
 11860 00000139 [1203]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
 11861 0000013B [3703]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
 11862 0000013D [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 11863 0000013F [7803]                  		dw aux_flsh   ;	36Ch	; aux_flsh
 11864 00000141 [7F03]                  		dw aux_writ   ;	374h	; aux_writ
 11865 00000143 [7F03]                  		dw aux_writ   ;	374h	; 09
 11866 00000145 [5703]                  		dw aux_wrst   ;	355h	; aux_wrst
 11867                                  aux_table_end:
 11868 00000147 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
 11869                                  					; 2C7h:147h = 70h:26B7h
 11870 00000148 [FA01]                  		dw bc_exvec   ; 1FBh	; 00
 11871 0000014A [FA01]                  		dw bc_exvec   ; 1FBh	; 01
 11872 0000014C [FA01]                  		dw bc_exvec   ; 1FBh	; 02
 11873 0000014E [D500]                  		dw bc_cmderr  ;	0D5h	; 03
 11874 00000150 [E404]                  		dw tim_read   ;	435h	; tim_read
 11875 00000152 [C701]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
 11876 00000154 [FA01]                  		dw bc_exvec   ; 1FBh	; 06
 11877 00000156 [FA01]                  		dw bc_exvec   ; 1FBh	; 07
 11878 00000158 [E503]                  		dw tim_writ   ; 3DBh	; tim_writ
 11879 0000015A [E503]                  		dw tim_writ   ; 3DBh	; 09
 11880                                  tim_table_end:
 11881                                  
 11882                                  ; ---------------------------------------------------------------------------
 11883                                  
 11884                                  ;************************************************************************
 11885                                  ;*									*
 11886                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
 11887                                  ;*									*
 11888                                  ;************************************************************************
 11889                                  
 11890                                  con_read:				; 2C7h:15Ch = 70h:26CCh
 11891                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
 11892 0000015C E306                    		jcxz	con_exit	; 19/10/2022
 11893                                  con_loop:				
 11894 0000015E E80500                  		call	chrin		; get char in al
 11895 00000161 AA                      		stosb			; store	char at	es:di
 11896 00000162 E2FA                    		loop	con_loop
 11897                                  con_exit:				
 11898 00000164 F8                      		clc
 11899 00000165 C3                      		retn
 11900                                  
 11901                                  ; =============== S U B	R O U T	I N E =======================================
 11902                                  
 11903                                  ;************************************************************************
 11904                                  ;*									*
 11905                                  ;*	chrin - input single char from keyboard into al			*
 11906                                  ;*									*
 11907                                  ;*	  we are going to issue extended keyboard function, if		*
 11908                                  ;*	  supported. the returning value of the extended keystroke	*
 11909                                  ;*	  of the extended keyboard function uses 0E0h in al		*
 11910                                  ;*	  instead of 00h as in the conventional keyboard function.	*
 11911                                  ;*	  this creates a conflict when the user entered real		*
 11912                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
 11913                                  ;*	  keystroke and the greek alpha. this case will be handled	*
 11914                                  ;*	  in the following manner:					*
 11915                                  ;*									*
 11916                                  ;*	      ah = 16h							*
 11917                                  ;*	      int 16h							*
 11918                                  ;*	      if al == 0, then extended code (in ah)			*
 11919                                  ;*	      else if al == 0E0h, then					*
 11920                                  ;*	      if ah <> 0, then extended code (in ah)			*
 11921                                  ;*		else greek_alpha character.				*
 11922                                  ;*									*
 11923                                  ;*	also, for compatibility reason, if an extended code is		*
 11924                                  ;*	  detected, then we are going to change the value in al		*
 11925                                  ;*	  from 0E0h to 00h.						*
 11926                                  ;*									*
 11927                                  ;************************************************************************
 11928                                  
 11929                                  		; 19/10/2022
 11930                                  chrin:		
 11931 00000166 8A26[7E04]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
 11932 0000016A 30C0                    		xor	al, al
 11933 0000016C 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
 11934 00000170 08C0                    		or	al, al
 11935 00000172 752A                    		jnz	short keyret
 11936 00000174 CD16                    		int	16h		; KEYBOARD -
 11937 00000176 09C0                    		or	ax, ax
 11938 00000178 74EC                    		jz	short chrin
 11939 0000017A 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
 11940 0000017D 7504                    		jnz	short alt_ext_chk
 11941 0000017F B010                    		mov	al, 10h
 11942 00000181 EB1B                    		jmp	short keyret
 11943                                  ; ---------------------------------------------------------------------------
 11944                                  
 11945                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
 11946                                  ;    if character read was 0E0h then
 11947                                  ;      if extended byte was zero (i.e. ah == 0) then
 11948                                  ;	 goto keyret
 11949                                  ;      else
 11950                                  ;	 set al to zero
 11951                                  ;	 goto alt_save
 11952                                  ;      endif
 11953                                  ;    endif
 11954                                  ;  endif
 11955                                  
 11956                                  alt_ext_chk:
 11957 00000183 803E[7E04]00            		cmp	byte [keyrd_func], 0
 11958 00000188 740C                    		jz	short not_ext
 11959 0000018A 3CE0                    		cmp	al, 0E0h
 11960 0000018C 7508                    		jnz	short not_ext
 11961 0000018E 08E4                    		or	ah, ah
 11962 00000190 740C                    		jz	short keyret
 11963 00000192 30C0                    		xor	al, al
 11964 00000194 EB04                    		jmp	short alt_save
 11965                                  ; ---------------------------------------------------------------------------
 11966                                  
 11967                                  not_ext:				
 11968 00000196 08C0                    		or	al, al		; special case?
 11969 00000198 7504                    		jnz	short keyret
 11970                                  alt_save:				
 11971 0000019A 8826[0C00]              		mov	[altah], ah	; store	special	key
 11972                                  keyret:					
 11973 0000019E C3                      		retn
 11974                                  
 11975                                  ; ---------------------------------------------------------------------------
 11976                                  
 11977                                  ;************************************************************************
 11978                                  ;*									*
 11979                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
 11980                                  ;*									*
 11981                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
 11982                                  ;*	in the status word of the request packet, and there is no	*
 11983                                  ;*	character in the input buffer, the driver issues a system	*
 11984                                  ;*	wait request to the rom. on return from the rom, it returns	*
 11985                                  ;*	a 'char-not-found' to the dos.					*
 11986                                  ;*									*
 11987                                  ;************************************************************************
 11988                                  
 11989                                  		; 19/10/2022
 11990                                  con_rdnd:				
 11991 0000019F A0[0C00]                		mov	al, [altah]
 11992 000001A2 08C0                    		or	al, al
 11993 000001A4 754C                    		jnz	short rdexit
 11994 000001A6 8A26[7F04]              		mov	ah, [keysts_func]
 11995 000001AA CD16                    		int	16h		; KEYBOARD -
 11996 000001AC 751D                    		jnz	short gotchr
 11997 000001AE 803E[7900]00            		cmp	byte [fhavek09], 0
 11998 000001B3 7412                    		jz	short z_bus_exit
 11999 000001B5 C41E[1200]              		les	bx, [ptrsav]
 12000                                  		; 12/12/2022
 12001 000001B9 26F6470404              		test	byte [es:bx+4], 04h
 12002                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
 12003 000001BE 7407                    		jz	short z_bus_exit
 12004 000001C0 B80041                  		mov	ax, 4100h
 12005 000001C3 30DB                    		xor	bl, bl
 12006 000001C5 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
 12007                                  					; AL = condition type, BH = condition compare or mask value
 12008                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
 12009                                  					; DX = I/O port	address	if AL bit 4 set
 12010                                  z_bus_exit:				
 12011 000001C7 F9                      		stc			; 2C7h:1C8h = 70h:2738h
 12012 000001C8 B403                    		mov	ah, 3		; indicate busy	status
 12013 000001CA C3                      		retn
 12014                                  ; ---------------------------------------------------------------------------
 12015                                  
 12016                                  gotchr:					
 12017 000001CB 09C0                    		or	ax, ax
 12018 000001CD 7508                    		jnz	short notbrk	; check	for null after break
 12019 000001CF 8A26[7E04]              		mov	ah, [keyrd_func] ; issue keyboard read function
 12020 000001D3 CD16                    		int	16h		; KEYBOARD -
 12021 000001D5 EBC8                    		jmp	short con_rdnd	; get a	real status
 12022                                  ; ---------------------------------------------------------------------------
 12023                                  
 12024                                  notbrk:					
 12025 000001D7 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
 12026 000001DA 7504                    		jnz	short rd_ext_chk
 12027 000001DC B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
 12028 000001DE EB12                    		jmp	short rdexit
 12029                                  ; ---------------------------------------------------------------------------
 12030                                  
 12031                                  rd_ext_chk:				
 12032 000001E0 803E[7E04]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
 12033 000001E5 740B                    		jz	short rdexit
 12034 000001E7 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
 12035 000001E9 7507                    		jnz	short rdexit
 12036 000001EB 80FC00                  		cmp	ah, 0		; scan code exist?
 12037 000001EE 7402                    		jz	short rdexit	; yes. greek alpha char.
 12038 000001F0 B000                    		mov	al, 0		; no. extended key stroke.
 12039                                  					; change it for	compatibility
 12040                                  rdexit:					
 12041 000001F2 C41E[1200]              		les	bx, [ptrsav]
 12042 000001F6 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
 12043                                  					; return keyboard character here
 12044                                  bc_exvec:				
 12045 000001FA F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
 12046                                  					; indicate normal termination
 12047 000001FB C3                      		retn
 12048                                  ; ---------------------------------------------------------------------------
 12049                                  
 12050                                  ;************************************************************************
 12051                                  ;*									*
 12052                                  ;*	con_write - console write routine				*
 12053                                  ;*									*
 12054                                  ;*	entry:	es:di -> buffer						*
 12055                                  ;*		cx    =  count						*
 12056                                  ;*									*
 12057                                  ;************************************************************************
 12058                                  
 12059                                  con_writ:
 12060                                  		;jcxz	short bc_exvec
 12061 000001FC E3FC                    		jcxz	bc_exvec	; 19/10/2022
 12062                                  		; 12/12/2022
 12063                                  		;jcxz	cc_ret
 12064                                  con_lp:					
 12065 000001FE 268A05                  		mov	al, [es:di]
 12066 00000201 47                      		inc	di
 12067 00000202 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 12068                                  					; AL = character to display
 12069 00000204 E2F8                    		loop	con_lp
 12070                                  cc_ret:					
 12071 00000206 F8                      		clc
 12072 00000207 C3                      		retn
 12073                                  
 12074                                  ; =============== S U B	R O U T	I N E =======================================
 12075                                  
 12076                                  ;************************************************************************
 12077                                  ;*									*
 12078                                  ;*	con_flush - flush out keyboard queue				*
 12079                                  ;*									*
 12080                                  ;************************************************************************
 12081                                  
 12082                                  con_flush:
 12083 00000208 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
 12084                                  flloop:					; while	(charavail()) charread();	
 12085 0000020D B401                    		mov	ah, 1
 12086 0000020F CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
 12087                                  					; Return: ZF clear if character	in buffer
 12088                                  					; AH = scan code, AL = character
 12089                                  					; ZF set if no character in buffer
 12090 00000211 74F3                    		jz	short cc_ret
 12091 00000213 30E4                    		xor	ah, ah
 12092 00000215 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 12093                                  					; Return: AH = scan code, AL = character
 12094 00000217 EBF4                    		jmp	short flloop
 12095                                  
 12096                                  ; ---------------------------------------------------------------------------
 12097                                  
 12098                                  ; 15/10/2022
 12099                                  
 12100                                  ;************************************************************************
 12101                                  ;*									*
 12102                                  ;*	some equates for rom bios printer i/o				*
 12103                                  ;*									*
 12104                                  ;************************************************************************
 12105                                  
 12106                                  ; ibm rom status bits (i don't trust them, neither should you)
 12107                                  ; warning!!! the ibm rom does not return just one bit. it returns a
 12108                                  ; whole slew of bits, only one of which is correct.
 12109                                  
 12110                                  ;notbusystatus	equ 10000000b		; not busy
 12111                                  ;nopaperstatus	equ 00100000b		; no more paper
 12112                                  ;prnselected	equ 00010000b		; printer selected
 12113                                  ;ioerrstatus	equ 00001000b		; some kinda error
 12114                                  ;timeoutstatus	equ 00000001b		; time out.
 12115                                  ;
 12116                                  ;noprinter	equ 00110000b		; no printer attached
 12117                                  
 12118                                  ; 18/03/2019 - Retro DOS v4.0
 12119                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
 12120                                  
 12121                                  ; ---------------------------------------------------------------------------
 12122                                  
 12123                                  ;************************************************************************
 12124                                  ;*									*
 12125                                  ;*	prn_input - return with no error but zero chars read		*
 12126                                  ;*									*
 12127                                  ;*	enter with cx = number of characters requested			*
 12128                                  ;*									*
 12129                                  ;************************************************************************
 12130                                  
 12131                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
 12132 00000219 E8BBFE                  		call	bc_err_cnt	; reset	count to zero
 12133                                  					; (sub reqpkt.count,cx)
 12134                                  		; 12/12/2022
 12135                                  prn_done:
 12136 0000021C F8                      		clc			; but return with carry	reset for no error
 12137 0000021D C3                      		retn
 12138                                  ; ---------------------------------------------------------------------------
 12139                                  
 12140                                  ;************************************************************************
 12141                                  ;*									*
 12142                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
 12143                                  ;*									*
 12144                                  ;*	auxnum has printer number					*
 12145                                  ;*									*
 12146                                  ;************************************************************************
 12147                                  
 12148                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
 12149                                  		;jcxz	short prn_done	; no chars to output
 12150 0000021E E3FC                    		jcxz	prn_done	; 19/10/2022
 12151                                  prn_loop:				
 12152 00000220 BB0200                  		mov	bx, 2		; retry	count
 12153                                  prn_out:				
 12154 00000223 E83600                  		call	prnstat		; get status
 12155 00000226 751D                    		jnz	short TestPrnError
 12156 00000228 268A05                  		mov	al, [es:di]	; get character	to print
 12157 0000022B 30E4                    		xor	ah, ah
 12158 0000022D E82E00                  		call	prnop		; print	to printer
 12159 00000230 7419                    		jz	short prn_con	; no error - continue
 12160 00000232 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
 12161 00000235 7509                    		jnz	short _prnwf
 12162 00000237 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
 12163 00000239 C606[0C00]00            		mov	byte [altah], 0
 12164 0000023E EB08                    		jmp	short pmessg
 12165                                  ; ---------------------------------------------------------------------------
 12166                                  
 12167                                  _prnwf:					
 12168 00000240 F6C401                  		test	ah, 1		; timeoutstatus
 12169 00000243 7406                    		jz	short prn_con
 12170                                  TestPrnError:				
 12171 00000245 4B                      		dec	bx		; retry	until count is exhausted.
 12172 00000246 75DB                    		jnz	short prn_out
 12173                                  pmessg:					
 12174 00000248 E98CFE                  		jmp	bc_err_cnt
 12175                                  ; ---------------------------------------------------------------------------
 12176                                  
 12177                                  prn_con:				
 12178 0000024B 47                      		inc	di		; point	to next	char and continue
 12179 0000024C E2D2                    		loop	prn_loop
 12180                                  ;prn_done:				
 12181                                  		; 12/12/2022
 12182                                  prn_done2:
 12183                                  		;clc
 12184                                  		; cf=0
 12185 0000024E C3                      		retn
 12186                                  ; ---------------------------------------------------------------------------
 12187                                  
 12188                                  ;************************************************************************
 12189                                  ;*									*
 12190                                  ;*	prn_stat - device driver entry to return printer status		*
 12191                                  ;*									*
 12192                                  ;************************************************************************
 12193                                  
 12194                                  prn_stat:				; 2C7h:251h = 70h:27C1h
 12195 0000024F E80A00                  		call	prnstat		; device in dx
 12196 00000252 75F4                    		jnz	short pmessg
 12197 00000254 F6C480                  		test	ah, 80h		; notbusystatus
 12198                                  		;jnz	short prn_done
 12199                                  		; 12/12/2022
 12200 00000257 75F5                    		jnz	short prn_done2 ; cf=0
 12201 00000259 E96BFF                  		jmp	z_bus_exit
 12202                                  ; ---------------------------------------------------------------------------
 12203                                  
 12204                                  ;************************************************************************
 12205                                  ;*									*
 12206                                  ;*	prnstat - utility function to call ROM BIOS to check		*
 12207                                  ;*		 printer status. Return meaningful error code		*
 12208                                  ;*									*
 12209                                  ;************************************************************************
 12210                                  
 12211                                  prnstat:				
 12212 0000025C B402                    		mov	ah, 2		; set command for get status
 12213                                  					; PRINTER - GET	STATUS
 12214                                  					; DX = printer port (0-3)
 12215                                  					; Return: AH = status
 12216                                  
 12217                                  ; =============== S U B	R O U T	I N E =======================================
 12218                                  
 12219                                  ;************************************************************************
 12220                                  ;*									*
 12221                                  ;*	prnop - call ROM BIOS printer function in ah			*
 12222                                  ;*		return zero true if no error				*
 12223                                  ;*		return zero false if error, al = error code		*
 12224                                  ;*									*
 12225                                  ;************************************************************************
 12226                                  
 12227                                  prnop:
 12228                                  		; 20/12/2023 - Retro DOS v5.0
 12229                                  		; PCDOS 7.1 IBMBIO.COM
 12230                                  		
 12231                                  		;mov	dx, [auxnum]	; get printer number
 12232                                  		;int	17h
 12233                                  
 12234 0000025E 1E                      		push	ds
 12235 0000025F FF36[2100]              		push	word [auxnum]
 12236 00000263 31D2                    		xor	dx, dx ; 0
 12237 00000265 8EDA                    		mov	ds, dx
 12238 00000267 5A                      		pop	dx
 12239 00000268 9C                      		pushf			; simulate int 17h
 12240 00000269 FA                      		cli
 12241                                  		;call	dword ptr ds:5ghghCh
 12242 0000026A FF1E5C00                		call	far [17h*4]	; 0:5Ch = INT 17h vector
 12243 0000026E 1F                      		pop	ds
 12244                                  
 12245                                  	; This check was added to see if this is a case of no
 12246                                  	; printer being installed. This tests checks to be sure
 12247                                  	; the error is noprinter (30h)
 12248                                  
 12249 0000026F 50                      		push	ax
 12250 00000270 80E430                  		and	ah, 30h
 12251 00000273 80FC30                  		cmp	ah, 30h		; noprinter
 12252 00000276 58                      		pop	ax
 12253 00000277 7506                    		jnz	short NextTest
 12254 00000279 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
 12255 0000027C 80CC08                  		or	ah, 8		; ioerrstatus
 12256                                  
 12257                                  ; examine the status bits to see if an error occurred. unfortunately, several
 12258                                  ; of the bits are set so we have to pick and choose. we must be extremely
 12259                                  ; careful about breaking basic.
 12260                                  
 12261                                  NextTest:				
 12262 0000027F F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
 12263                                  					; i/o error?
 12264 00000282 740A                    		jz	short checknotready ; no, try not ready
 12265                                  
 12266                                  ; at this point, we know we have an error. the converse is not true
 12267                                  
 12268 00000284 B009                    		mov	al, 9		; error_I24_out_of_paper
 12269                                  					; first, assume	out of paper
 12270 00000286 F6C420                  		test	ah, 20h		; out of paper set?
 12271 00000289 7502                    		jnz	short ret1	; yes, error is	set
 12272 0000028B FEC0                    		inc	al		; return al=10 (i/o error)
 12273                                  ret1:					
 12274 0000028D C3                      		retn
 12275                                  ; ---------------------------------------------------------------------------
 12276                                  
 12277                                  checknotready:				
 12278 0000028E B002                    		mov	al, 2		; assume not-ready
 12279 00000290 F6C401                  		test	ah, 1
 12280 00000293 C3                      		retn
 12281                                  
 12282                                  ; ---------------------------------------------------------------------------
 12283                                  
 12284                                  ;************************************************************************
 12285                                  ;*									*
 12286                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
 12287                                  ;*		     this entry point should never block waiting for	*
 12288                                  ;*		     device to come ready.				*
 12289                                  ;*									*
 12290                                  ;*	inputs:	cx = count, es:di -> buffer				*
 12291                                  ;*	outputs: set the number of bytes transferred in the		*
 12292                                  ;*		 device driver request packet				*
 12293                                  ;*									*
 12294                                  ;************************************************************************
 12295                                  
 12296                                  		; 19/10/2022
 12297                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
 12298 00000294 89FE                    		mov	si, di		; everything is	set for	lodsb
 12299                                  prn_tilbloop:				
 12300 00000296 51                      		push	cx
 12301 00000297 53                      		push	bx
 12302 00000298 30FF                    		xor	bh, bh
 12303 0000029A 8A1E[8004]              		mov	bl, [printdev]
 12304 0000029E D1E3                    		shl	bx, 1
 12305                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
 12306 000002A0 8B8F[8104]              		mov	cx, [wait_count+bx]
 12307 000002A4 5B                      		pop	bx
 12308                                  prn_getstat:				
 12309 000002A5 E8B4FF                  		call	prnstat		; get status
 12310 000002A8 7514                    		jnz	short prn_bperr	; error
 12311 000002AA F6C480                  		test	ah, 80h		; ready	yet?
 12312 000002AD E1F6                    		loope	prn_getstat	; no, go for more
 12313 000002AF 59                      		pop	cx		; get original count
 12314 000002B0 740D                    		jz	short prn_berr	; still	not ready => done
 12315 000002B2 26                      		es
 12316 000002B3 AC                      		lodsb
 12317                                  		;lods	byte ptr es:[si] ; es
 12318                                  					; lodsb
 12319 000002B4 30E4                    		xor	ah, ah
 12320 000002B6 E8A5FF                  		call	prnop
 12321 000002B9 7504                    		jnz	short prn_berr	; error
 12322 000002BB E2D9                    		loop	prn_tilbloop
 12323                                  		; 12/12/2022
 12324                                  		; cf=0 (prnop)
 12325                                  		;clc			; normal no-error return
 12326 000002BD C3                      		retn			;   from device driver
 12327                                  
 12328                                  ; ---------------------------------------------------------------------------
 12329                                  
 12330                                  prn_bperr:				
 12331 000002BE 59                      		pop	cx		; restore transfer count from stack
 12332                                  prn_berr:				
 12333 000002BF E915FE                  		jmp	bc_err_cnt
 12334                                  ; ---------------------------------------------------------------------------
 12335                                  
 12336                                  ; 15/10/2022
 12337                                  
 12338                                  ;************************************************************************
 12339                                  ;*									*
 12340                                  ;*	prn_genioctl - get/set printer retry count			*
 12341                                  ;*									*
 12342                                  ;************************************************************************
 12343                                  
 12344                                  ; IOCTL.INC (MSDOS 6.0, 1991)
 12345                                  ; 11/01/2019
 12346                                  
 12347                                  ;********************************;*
 12348                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
 12349                                  ;********************************;*
 12350                                  
 12351                                  ;;RAWIO SUB-FUNCTIONS
 12352                                  ;;get_retry_count equ 65h
 12353                                  ;;set_retry_count equ 45h
 12354                                  
 12355                                  ;;struc A_RETRYCOUNT
 12356                                  ;;.rc_count: resw 1
 12357                                  ;;endstruc
 12358                                  
 12359                                  ;ioc_pc equ 5
 12360                                  
 12361                                  ; ---------------------------------------------------------------------------
 12362                                  
 12363                                  		; 19/10/2022
 12364                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
 12365 000002C2 C43E[1200]              		les	di, [ptrsav]
 12366 000002C6 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
 12367                                  					; ioc_pc
 12368 000002CB 7403                    		jz	short prnfunc_ok
 12369                                  
 12370                                  prnfuncerr:				
 12371 000002CD E905FE                  		jmp	bc_cmderr
 12372                                  ; ---------------------------------------------------------------------------
 12373                                  
 12374                                  prnfunc_ok:				
 12375 000002D0 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 12376 000002D4 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
 12377 000002D8 30FF                    		xor	bh, bh
 12378                                  		;mov	bl, ds:printdev	; get index into retry counts
 12379 000002DA 8A1E[8004]              		mov	bl, [printdev]
 12380 000002DE D1E3                    		shl	bx, 1
 12381                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
 12382 000002E0 8B8F[8104]              		mov	cx, [wait_count+bx]
 12383 000002E4 3C65                    		cmp	al, 65h		; get_retry_count
 12384 000002E6 7407                    		jz	short prngetcount
 12385 000002E8 3C45                    		cmp	al, 45h		; set_retry_count
 12386 000002EA 75E1                    		jnz	short prnfuncerr
 12387 000002EC 268B0D                  		mov	cx, [es:di]
 12388                                  prngetcount:				
 12389                                  		;mov	ds:wait_count[bx], cx
 12390 000002EF 898F[8104]              		mov	[wait_count+bx], cx
 12391 000002F3 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
 12392                                  					; return current retry count
 12393                                  		; 12/12/2022
 12394                                  		; cf=0
 12395                                  		;clc
 12396 000002F6 C3                      		retn
 12397                                  ; ---------------------------------------------------------------------------
 12398                                  
 12399                                  ;************************************************************************
 12400                                  ;*									*
 12401                                  ;*  prn_ioctl_query							*
 12402                                  ;*									*
 12403                                  ;*  Added for 5.00							*
 12404                                  ;************************************************************************
 12405                                  
 12406                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
 12407 000002F7 C43E[1200]              		les	di, [ptrsav]
 12408 000002FB 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
 12409                                  					; ioc_pc
 12410 00000300 750D                    		jnz	short prn_query_err
 12411 00000302 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 12412 00000306 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
 12413 00000308 7404                    		jz	short IOCtlSupported
 12414 0000030A 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
 12415 0000030C 7501                    		jnz	short prn_query_err
 12416                                  IOCtlSupported:	
 12417                                  		; 12/12/2022
 12418                                  		; cf=0		
 12419                                  		;clc
 12420 0000030E C3                      		retn
 12421                                  ; ---------------------------------------------------------------------------
 12422                                  
 12423                                  prn_query_err:
 12424                                  		; 12/12/2022				
 12425                                  		;stc
 12426 0000030F E9C3FD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
 12427                                  ; ---------------------------------------------------------------------------
 12428                                  
 12429                                  ;************************************************************************
 12430                                  ;*									*
 12431                                  ;*	aux port driver code -- "aux" == "com1"				*
 12432                                  ;*									*
 12433                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
 12434                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
 12435                                  ;*									*
 12436                                  ;************************************************************************
 12437                                  
 12438                                  ;	values in ah, requesting function of int 14h in rom bios
 12439                                  
 12440                                  ;auxfunc_send	 equ	1	;transmit
 12441                                  ;auxfunc_receive equ	2	;read
 12442                                  ;auxfunc_status	 equ	3	;request status
 12443                                  
 12444                                  ;	error flags, reported by int 14h, reported in ah:
 12445                                  
 12446                                  ;flag_data_ready equ	01h	;data ready
 12447                                  ;flag_overrun	 equ	02h	;overrun error
 12448                                  ;flag_parity	 equ	04h	;parity error
 12449                                  ;flag_frame	 equ	08h	;framing error
 12450                                  ;flag_break	 equ	10h	;break detect
 12451                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
 12452                                  ;flag_timeout	 equ	80h	;timeout
 12453                                  
 12454                                  ;	these flags reported in al:
 12455                                  
 12456                                  ;flag_cts	 equ	10h	;clear to send
 12457                                  ;flag_dsr	 equ	20h	;data set ready
 12458                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
 12459                                  
 12460                                  ; ---------------------------------------------------------------------------
 12461                                  
 12462                                  ;************************************************************************
 12463                                  ;*									*
 12464                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
 12465                                  ;*		   at es:di						*
 12466                                  ;*									*
 12467                                  ;************************************************************************
 12468                                  
 12469                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
 12470                                  		;jcxz	short exvec2
 12471 00000312 E311                    		jcxz	exvec2		; 19/10/2022
 12472 00000314 E88000                  		call	getbx		; put address of auxbuf	in bx
 12473 00000317 30C0                    		xor	al, al
 12474 00000319 8607                    		xchg	al, [bx]
 12475 0000031B 08C0                    		or	al, al
 12476 0000031D 7503                    		jnz	short aux2
 12477                                  aux1:					
 12478 0000031F E80500                  		call	auxin		; get character	from port
 12479                                  					; won't return if error
 12480                                  aux2:					
 12481 00000322 AA                      		stosb
 12482 00000323 E2FA                    		loop	aux1		; if more characters, go around	again
 12483                                  exvec2:					
 12484 00000325 F8                      		clc			; all done, successful exit
 12485                                  auxin_retn:	; 18/12/2022
 12486 00000326 C3                      		retn
 12487                                  ; ---------------------------------------------------------------------------
 12488                                  
 12489                                  ;************************************************************************
 12490                                  ;*									*
 12491                                  ;*	auxin - call rom bios to read character from aux port		*
 12492                                  ;*		if error occurs, map the error and return one		*
 12493                                  ;*		level up to device driver exit code, setting		*
 12494                                  ;*		the number of bytes transferred appropriately		*
 12495                                  ;*									*
 12496                                  ;************************************************************************
 12497                                  
 12498                                  auxin:					
 12499 00000327 B402                    		mov	ah, 2		; auxfunc_receive
 12500 00000329 E83A00                  		call	auxop
 12501 0000032C F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
 12502                                  		;jnz	short arbad	; skip if any error bits set
 12503                                  		;retn
 12504                                  		; 25/06/2023 (BugFix)
 12505 0000032F 74F5                    		jz	short auxin_retn
 12506                                  ; ---------------------------------------------------------------------------
 12507                                  
 12508                                  arbad:					
 12509 00000331 58                      		pop	ax		; remove return	address	(near call)
 12510                                  		;xor	al, al
 12511                                  		;or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
 12512                                  		; 11/08/2023
 12513 00000332 B0B0                    		mov	al, 0B0h	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0334h
 12514 00000334 E9A0FD                  		jmp	bc_err_cnt
 12515                                  
 12516                                  ; ---------------------------------------------------------------------------
 12517                                  
 12518                                  ;************************************************************************
 12519                                  ;*									*
 12520                                  ;*	aux_rdnd - non-destructive aux port read			*
 12521                                  ;*									*
 12522                                  ;************************************************************************
 12523                                  
 12524                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
 12525 00000337 E85D00                  		call	getbx
 12526 0000033A 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
 12527 0000033C 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
 12528 0000033E 7511                    		jnz	short auxdrx	; then return character
 12529 00000340 E82100                  		call	auxstat		; if not, get status of	aux device
 12530 00000343 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
 12531 00000346 740C                    		jz	short auxbus	; then device is busy (not ready)
 12532 00000348 A820                    		test	al, 20h		; flag_dsr - test data set ready
 12533 0000034A 7408                    		jz	short auxbus	; then device is busy (not ready)
 12534 0000034C E8D8FF                  		call	auxin		; else aux is ready, get character
 12535 0000034F 8807                    		mov	[bx], al
 12536                                  auxdrx:					
 12537 00000351 E99EFE                  		jmp	rdexit		; return busy status
 12538                                  ; ---------------------------------------------------------------------------
 12539                                  
 12540                                  auxbus:					
 12541 00000354 E970FE                  		jmp	z_bus_exit
 12542                                  ; ---------------------------------------------------------------------------
 12543                                  
 12544                                  ;************************************************************************
 12545                                  ;*									*
 12546                                  ;*	aux_wrst - return aux port write status				*
 12547                                  ;*									*
 12548                                  ;************************************************************************
 12549                                  
 12550                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
 12551 00000357 E80A00                  		call	auxstat		; get status of	aux in ax
 12552 0000035A A820                    		test	al, 20h		; test data set	ready
 12553 0000035C 74F6                    		jz	short auxbus	; then device is busy (not ready)
 12554 0000035E F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
 12555 00000361 74F1                    		jz	short auxbus	; then device is busy (not ready)
 12556                                  		; 12/12/2022
 12557                                  		; cf=0	; (test instruction resets cf)
 12558                                  		;clc
 12559 00000363 C3                      		retn
 12560                                  ; ---------------------------------------------------------------------------
 12561                                  
 12562                                  ;************************************************************************
 12563                                  ;*									*
 12564                                  ;*	auxstat - call rom bios to determine aux port status		*
 12565                                  ;*									*
 12566                                  ;*	exit:	ax = status						*
 12567                                  ;*		dx = [auxnum]						*
 12568                                  ;*									*
 12569                                  ;************************************************************************
 12570                                  
 12571                                  auxstat:				
 12572 00000364 B403                    		mov	ah, 3		; auxfunc_status
 12573                                  
 12574                                  		; fall into auxop
 12575                                  
 12576                                  ; =============== S U B	R O U T	I N E =======================================
 12577                                  
 12578                                  ;************************************************************************
 12579                                  ;*									*
 12580                                  ;*	auxop - perform rom-biox aux port interrupt			*
 12581                                  ;*									*
 12582                                  ;*	entry:	ah = int 14h function number				*
 12583                                  ;*	exit:	ax = results						*
 12584                                  ;*		dx = [auxnum]						*
 12585                                  ;*									*
 12586                                  ;************************************************************************
 12587                                  
 12588                                  auxop:		; proc near
 12589                                  		; 20/12/2023 - Retro DOS v5.0
 12590                                  		;mov	dx, [auxnum]	; ah=function code
 12591                                  		;			; 0=init, 1=send, 2=receive, 3=status
 12592                                  		;			; get port number
 12593                                  		;
 12594                                  		;int	14h		; SERIAL I/O - GET USART STATUS
 12595                                  		;			; DX = port number (0-3)
 12596                                  		;			; Return: AX = port status code
 12597                                  		; (PCDOS 7.1 IBMBIO.COM)
 12598 00000366 1E                      		push	ds
 12599 00000367 FF36[2100]              		push	word [auxnum]
 12600 0000036B 31D2                    		xor	dx, dx ; 0
 12601 0000036D 8EDA                    		mov	ds, dx
 12602 0000036F 5A                      		pop	dx
 12603 00000370 9C                      		pushf			; simulate INT 14h
 12604 00000371 FA                      		cli
 12605                                  		;call	dword ptr ds:50h
 12606 00000372 FF1E5000                		call	far [14h*4]	; INT 14h vector (14h*4 = 50h)
 12607 00000376 1F                      		pop	ds
 12608 00000377 C3                      		retn
 12609                                  
 12610                                  ; ---------------------------------------------------------------------------
 12611                                  
 12612                                  ;************************************************************************
 12613                                  ;*									*
 12614                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
 12615                                  ;*		   auxbuf [auxnum] to zero				*
 12616                                  ;*									*
 12617                                  ;*	cas - shouldn't this code call the rom bios input function	*
 12618                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
 12619                                  ;*	      pending serial input queue if there's a tsr like MODE	*
 12620                                  ;*	      which is providing interrupt-buffering of aux port?	*
 12621                                  ;*									*
 12622                                  ;************************************************************************
 12623                                  
 12624                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
 12625 00000378 E81C00                  		call	getbx		; flush	aux input buffer
 12626 0000037B C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
 12627                                  					; zero out buffer
 12628                                  		;clc			; all done, successful return
 12629                                  		; 12/12/2022
 12630                                  		; cf=0 ('add' instruction in 'getbx')
 12631 0000037E C3                      		retn
 12632                                  ; ---------------------------------------------------------------------------
 12633                                  
 12634                                  ;************************************************************************
 12635                                  ;*									*
 12636                                  ;*	aux_writ - write to aux device					*
 12637                                  ;*									*
 12638                                  ;************************************************************************
 12639                                  
 12640                                  aux_writ:				; 2C7h:374h = 70h:28E4h
 12641                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
 12642 0000037F E3A4                    		jcxz	exvec2		; 19/10/2022
 12643                                  aux_loop:				
 12644 00000381 268A05                  		mov	al, [es:di]	; get character	to be written
 12645                                  					; move di pointer to next character
 12646 00000384 47                      		inc	di
 12647 00000385 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
 12648 00000387 E8DCFF                  		call	auxop		; send character over aux port
 12649 0000038A F6C480                  		test	ah, 80h		; check	for error
 12650 0000038D 7405                    		jz	short awok	; then no error
 12651 0000038F B00A                    		mov	al, 10		; else indicate	write fault
 12652 00000391 E943FD                  		jmp	bc_err_cnt	; call error routines
 12653                                  ; ---------------------------------------------------------------------------
 12654                                  
 12655                                  awok:					
 12656 00000394 E2EB                    		loop	aux_loop	; if cx	is non-zero,
 12657                                  					; still	more character to print
 12658                                  		;clc			; all done, successful return
 12659                                  		; 12/12/2022
 12660                                  		; cf=0 (test instruction above)	
 12661 00000396 C3                      		retn
 12662                                  
 12663                                  ; =============== S U B	R O U T	I N E =======================================
 12664                                  
 12665                                  ;************************************************************************
 12666                                  ;*									*
 12667                                  ;*	getbx - return bx -> single byte input buffer for		*
 12668                                  ;*		selected aux port ([auxnum])				*
 12669                                  ;*									*
 12670                                  ;************************************************************************
 12671                                  
 12672                                  getbx:	
 12673 00000397 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
 12674                                  					; for selected aux port	([auxnum])
 12675                                  		;add	bx, offset auxbuf
 12676 0000039B 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
 12677                                  		; 12/12/2022
 12678                                  		; cf=0 (if [auxnum] is valid number) 
 12679 0000039F C3                      		retn
 12680                                  
 12681                                  ; ---------------------------------------------------------------------------
 12682                                  
 12683                                  ; 15/10/2022
 12684                                  
 12685                                  ;----------------------------------------------------------------
 12686                                  ;								:
 12687                                  ;		    clock device driver 			:
 12688                                  ;								:
 12689                                  ;								:
 12690                                  ;   this file contains the clock device driver. 		:
 12691                                  ;								:
 12692                                  ;   the routines in this files are:				:
 12693                                  ;								:
 12694                                  ;	routine 		function			:
 12695                                  ;	------- 		--------			:
 12696                                  ;	tim_writ		set the current time		:
 12697                                  ;	tim_read		read the current time		:
 12698                                  ;	time_to_ticks		convert time to corresponding	:
 12699                                  ;				  number of clock ticks 	:
 12700                                  ;								:
 12701                                  ; the clock ticks at the rate of:				:
 12702                                  ;								:
 12703                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
 12704                                  ; see each routine for information on the use.			:
 12705                                  ;								:
 12706                                  ;----------------------------------------------------------------
 12707                                  
 12708                                  ; convert time to ticks
 12709                                  ; input : time in cx and dx
 12710                                  ; ticks returned in cx:dx
 12711                                  
 12712                                  ;19/07/2019
 12713                                  ;09/03/2019
 12714                                  
 12715                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
 12716                                  
 12717                                  ; first convert from hour,min,sec,hund. to
 12718                                  ; total number of 100th of seconds
 12719                                  
 12720 000003A0 B03C                    		mov	al, 60
 12721 000003A2 F6E5                    		mul	ch		; hours	to minutes
 12722 000003A4 B500                    		mov	ch, 0
 12723 000003A6 01C8                    		add	ax, cx		; total	minutes
 12724 000003A8 B97017                  		mov	cx, 6000	; 60*100
 12725 000003AB 89D3                    		mov	bx, dx		; get out of the way of	the multiply
 12726 000003AD F7E1                    		mul	cx		; convert to 1/100 sec
 12727 000003AF 89C1                    		mov	cx, ax
 12728 000003B1 B064                    		mov	al, 100
 12729 000003B3 F6E7                    		mul	bh		; convert seconds to 1/100 sec
 12730 000003B5 01C1                    		add	cx, ax		; combine seconds with hours and min
 12731 000003B7 83D200                  		adc	dx, 0		; ripple carry
 12732 000003BA B700                    		mov	bh, 0
 12733 000003BC 01D9                    		add	cx, bx		; combine 1/100	sec
 12734 000003BE 83D200                  		adc	dx, 0
 12735                                  
 12736                                  	; dx:cx is time in 1/100 sec
 12737                                  
 12738 000003C1 92                      		xchg	ax, dx
 12739 000003C2 91                      		xchg	ax, cx		; now time is in cx:ax
 12740 000003C3 BB0BE9                  		mov	bx, 59659
 12741 000003C6 F7E3                    		mul	bx		; multiply low half
 12742 000003C8 87D1                    		xchg	dx, cx
 12743 000003CA 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
 12744 000003CB F7E3                    		mul	bx		; multiply high	half
 12745 000003CD 01C8                    		add	ax, cx		; combine overlapping products
 12746 000003CF 83D200                  		adc	dx, 0
 12747 000003D2 92                      		xchg	ax, dx		; ax:dx=time*59659
 12748 000003D3 BB0500                  		mov	bx, 5
 12749 000003D6 F6F3                    		div	bl		; divide high half by 5
 12750 000003D8 88C1                    		mov	cl, al
 12751 000003DA B500                    		mov	ch, 0
 12752 000003DC 88E0                    		mov	al, ah		; remainder of divide-by-5
 12753 000003DE 98                      		cbw
 12754 000003DF 92                      		xchg	ax, dx		; use it to extend low half
 12755 000003E0 F7F3                    		div	bx		; divide low half by 5
 12756 000003E2 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
 12757 000003E4 CB                      		retf			; far return
 12758                                  
 12759                                  ; ---------------------------------------------------------------------------
 12760                                  
 12761                                  ; 17/10/2022
 12762                                  ; 15/10/2022
 12763                                  
 12764                                  ;--------------------------------------------------------------------
 12765                                  ;
 12766                                  ; tim_writ sets the current time
 12767                                  ;
 12768                                  ; on entry es:[di] has the current time:
 12769                                  ;
 12770                                  ;	number of days since 1-1-80	(word)
 12771                                  ;	minutes (0-59)			(byte)
 12772                                  ;	hours (0-23)			(byte)
 12773                                  ;	hundredths of seconds (0-99)	(byte)
 12774                                  ;	seconds (0-59)			(byte)
 12775                                  ;
 12776                                  ; each number has been checked for the correct range.
 12777                                  ;
 12778                                  ;	NOTE: Any changes in this routine probably require corresponding
 12779                                  ;	changes in the version that is built with the power manager driver.
 12780                                  ;	See ptime.asm.
 12781                                  ;
 12782                                  ;--------------------------------------------------------------------
 12783                                  
 12784                                  	; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 12785                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:03EAh
 12786                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
 12787 000003E5 268B05                  		mov	ax, [es:di]
 12788 000003E8 50                      		push	ax		; daycnt. we need to set this at the very
 12789                                  					; end to avoid tick windows.
 12790 000003E9 803E[8C04]00            		cmp	byte [havecmosclock], 0
 12791                                  		;cmp	ds:havecmosclock, 0
 12792 000003EE 7423                    		jz	short no_cmos_1
 12793 000003F0 268A4503                		mov	al, [es:di+3]	; near indirect	calls
 12794                                  					; get binary hours
 12795                                  					; convert to bcd
 12796                                  		;call	far [bintobcd]
 12797                                  		;;call	ds:bintobcd	; call far [bintobcd]
 12798                                  		; 08/08/2023
 12799 000003F4 E8E800                  		call	bintobcd
 12800 000003F7 88C5                    		mov	ch, al		; ch = bcd hours
 12801 000003F9 268A4502                		mov	al, [es:di+2]	; get binary minutes
 12802                                  		;call	far [bintobcd]
 12803                                  		;;call	ds:bintobcd	; convert to bcd
 12804 000003FD E8DF00                  		call	bintobcd
 12805 00000400 88C1                    		mov	cl, al		; cl = bcd minutes
 12806 00000402 268A4505                		mov	al, [es:di+5]	; get binary seconds
 12807                                  		;call	far [bintobcd]
 12808                                  		;;call	ds:bintobcd
 12809 00000406 E8D600                  		call	bintobcd
 12810                                  
 12811 00000409 88C6                    		mov	dh, al		; dh = bcd seconds
 12812 0000040B B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
 12813 0000040D FA                      		cli
 12814 0000040E B403                    		mov	ah, 3
 12815 00000410 CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
 12816                                  					; CH = hours in	BCD, CL	= minutes in BCD
 12817                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
 12818                                  					; Return: CMOS clock set
 12819 00000412 FB                      		sti
 12820                                  no_cmos_1:				
 12821 00000413 268B4D02                		mov	cx, [es:di+2]
 12822 00000417 268B5504                		mov	dx, [es:di+4]
 12823                                  		; 17/10/2022
 12824 0000041B FF1E[0606]              		call	far [ttticks]
 12825                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
 12826                                  					; convert time to ticks
 12827                                  					; cx:dx	now has	time in	ticks
 12828 0000041F FA                      		cli			; turn off timer
 12829 00000420 B401                    		mov	ah, 1
 12830 00000422 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
 12831                                  					; CX:DX	= clock	count
 12832                                  					; Return: time of day set
 12833                                  		;pop	ds:daycnt
 12834 00000424 8F06[8904]              		pop	word [daycnt]
 12835 00000428 FB                      		sti
 12836                                  		;cmp	ds:havecmosclock, 0
 12837 00000429 803E[8C04]00            		cmp	byte [havecmosclock], 0
 12838 0000042E 7409                    		jz	short no_cmos_2
 12839                                  
 12840                                  		; 08/08/2023
 12841                                  		;call	far [daycnttoday]
 12842                                  		;;call	ds:daycnttoday	; call far [daycnttoday]
 12843                                  					; convert to bcd format
 12844 00000430 E80700                  		call	daycnttoday
 12845                                  
 12846 00000433 FA                      		cli
 12847 00000434 B405                    		mov	ah, 5
 12848 00000436 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
 12849                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
 12850                                  					; CH = century (19h or 20h)
 12851                                  					; Return: CMOS clock set
 12852 00000438 FB                      		sti
 12853                                  no_cmos_2:
 12854                                  		; 12/12/2022
 12855                                  		; cf=0
 12856                                  		;clc
 12857 00000439 C3                      		retn
 12858                                  
 12859                                  ; ---------------------------------------------------------------------------
 12860                                  
 12861                                  ; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 12862                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0440h
 12863                                  %if 1 
 12864                                  
 12865                                  ; CMOS Clock setting support routines used by MSCLOCK.
 12866                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
 12867                                  
 12868                                  daycnttoday:	; proc near
 12869                                  
 12870                                  ; entry: [daycnt] = number of days since 1-1-80
 12871                                  ;
 12872                                  ; return: ch - century in bcd
 12873                                  ;	  cl - year in bcd
 12874                                  ;	  dh - month in bcd
 12875                                  ;	  dl - day in bcd
 12876                                  
 12877                                  		; 20/12/2023 - Retro DOS v5.0
 12878                                  
 12879                                  		; 08/08/2023 (ds:) (near proc)
 12880                                  		; 16/10/2022 (cs:) (far proc)		
 12881 0000043A FF36[8904]              		push	word [daycnt] ; save daycnt
 12882 0000043E 813E[8904]891C          		cmp	word [daycnt], 7305 ; (365*20+(20/4))
 12883                                  					; # days from 1-1-1980 to 1-1-2000
 12884 00000444 7308                    		jnb	short century20
 12885                                  		;mov	byte [base_century], 19
 12886                                  		;mov	byte [base_year], 80
 12887                                  		; 08/08/2023
 12888 00000446 C706[8D04]1350          		mov	word [base_century], 5013h
 12889 0000044C EB0C                    		jmp	short years
 12890                                  ; ----------------------------------------------------------------------------
 12891                                  		
 12892                                  century20:				
 12893                                  		;mov	byte [base_century], 20
 12894                                  		;mov	byte [base_year], 0
 12895                                  		; 08/08/2023
 12896 0000044E C706[8D04]1400          		mov	word [base_century], 20
 12897 00000454 812E[8904]891C          		sub	word [daycnt], 7305 ; (365*20+(20/4))
 12898                                  					; adjust daycnt
 12899                                  years:					
 12900 0000045A 31D2                    		xor	dx, dx
 12901 0000045C A1[8904]                		mov	ax, [daycnt]
 12902 0000045F BBB505                  		mov	bx, 1461	; (366+365*3)
 12903                                  					; # of days in a Leap year block
 12904 00000462 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
 12905 00000464 8916[8904]              		mov	[daycnt], dx	; save daycnt left
 12906 00000468 B304                    		mov	bl, 4
 12907 0000046A F6E3                    		mul	bl		; AX = # of years. Less	than 100
 12908 0000046C 0006[8E04]              		add	[base_year], al ; So, ah = 0. Adjust year
 12909 00000470 FF06[8904]              		inc	word [daycnt]	; set daycnt to	1 base
 12910                                  		; 08/08/2023
 12911 00000474 BB6E01                  		mov	bx, 366
 12912 00000477 B90300                  		mov	cx, 3
 12913                                  		;cmp	word [daycnt], 366 ; daycnt=remainder of leap year
 12914 0000047A 391E[8904]              		cmp	[daycnt], bx ; 366
 12915 0000047E 7619                    		jbe	short leapyear	; within 366+355+355+355 days.
 12916 00000480 FE06[8E04]              		inc	byte [base_year] ; if daycnt <= 366, then leap year
 12917                                  		;sub	word [daycnt], 366 ; else daycnt--, base_year++ ;
 12918 00000484 291E[8904]              		sub	[daycnt], bx ; 366 ; 08/08/2023
 12919                                  		;mov	cx, 3		; And next three years are normal
 12920                                  		; 08/08/2023
 12921 00000488 4B                      		dec	bx ; 365
 12922                                  regularyear:	; 20/12/2023
 12923                                  		;cmp	word [daycnt], 365 ; for(i=1; i>3 or daycnt <=365; i++)
 12924 00000489 391E[8904]              		cmp	[daycnt], bx ; 365 ; 08/08/2023
 12925 0000048D 760F                    		jbe	short yeardone	; {if (daycnt >	365)
 12926 0000048F FE06[8E04]              		inc	byte [base_year] ; { daycnt -=	365
 12927                                  		;sub	word [daycnt], 365 ; }
 12928 00000493 291E[8904]              		sub	[daycnt], bx ; 365 ; 08/08/2023
 12929 00000497 E2F0                    		loop	regularyear	; }
 12930                                  					;
 12931                                  					; should never fall through loop
 12932                                  leapyear:	
 12933 00000499 C606[9004]1D            		mov	byte [february], 29 ; 08/08/2023			
 12934                                  		;mov	byte [month_tab+1], 29 ; leap year.
 12935                                  					; change month table.
 12936                                  yeardone:				
 12937 0000049E 31DB                    		xor	bx, bx
 12938 000004A0 31D2                    		xor	dx, dx
 12939 000004A2 A1[8904]                		mov	ax, [daycnt]
 12940                                  		;mov	si, offset month_tab
 12941 000004A5 BE[8F04]                		mov	si, month_tab	; 19/10/2022
 12942                                  		;mov	cx, 12
 12943                                  		; 08/08/2023
 12944 000004A8 B10C                    		mov	cl, 12
 12945                                  months:					
 12946 000004AA FEC3                    		inc	bl
 12947                                  		; 08/08/2023
 12948 000004AC 8A14                    		mov	dl, [si]	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:04B7h
 12949 000004AE 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
 12950                                  					; dh=0
 12951 000004B0 7605                    		jbe	short month_done
 12952 000004B2 46                      		inc	si		; next month
 12953 000004B3 29D0                    		sub	ax, dx		; adjust daycnt
 12954 000004B5 E2F3                    		loop	months		;
 12955                                  					; should never fall through loop
 12956                                  month_done:	
 12957 000004B7 C606[9004]1C            		mov	byte [february], 28 ; 08/08/2023
 12958                                  		;mov	byte [month_tab+1], 28
 12959                                  					; restore month table value
 12960 000004BC 88DA                    		mov	dl, bl
 12961 000004BE 8A36[8E04]              		mov	dh, [base_year]
 12962 000004C2 8A0E[8D04]              		mov	cl, [base_century] ; al=day,dl=month,dh=year,cl=cntry
 12963 000004C6 E81600                  		call	bintobcd	; convert "day"	to bcd
 12964                                  					; dl = bcd day,	al = month
 12965 000004C9 86D0                    		xchg	dl, al
 12966 000004CB E81100                  		call	bintobcd	; dh = bcd month, al = year
 12967 000004CE 86F0                    		xchg	dh, al
 12968 000004D0 E80C00                  		call	bintobcd	; cl = bcd year, al = century
 12969 000004D3 86C8                    		xchg	cl, al
 12970 000004D5 E80700                  		call	bintobcd	; ch = bcd century
 12971 000004D8 88C5                    		mov	ch, al
 12972 000004DA 8F06[8904]              		pop	word [daycnt] ; restore original value
 12973 000004DE C3                      		retn
 12974                                  
 12975                                  ;----------------------------------------------------------------------------
 12976                                  
 12977                                  bintobcd:	; proc near		; real time clock support
 12978                                  
 12979                                  ;convert a binary input in al (less than 63h or 99 decimal)
 12980                                  ;into a bcd value in al. ah destroyed.	
 12981                                  		
 12982 000004DF D40A                    		aam			; AH = AL/10, AL = AL MOD 10
 12983 000004E1 D510                    		aad     10h             ; db 0D5h,10h
 12984                                  					; AL = (AH*10H)+AL, AH = 0
 12985 000004E3 C3                      		retn
 12986                                  %endif
 12987                                  
 12988                                  ;----------------------------------------------------------------------------
 12989                                  
 12990                                  ; 15/10/2022
 12991                                  
 12992                                  ;----------------------------------------------------------------------------
 12993                                  ; gettime reads date and time
 12994                                  ; and returns the following information:
 12995                                  ;
 12996                                  ;	es:[di]  =count of days since 1-1-80
 12997                                  ;	es:[di+2]=hours
 12998                                  ;	es:[di+3]=minutes
 12999                                  ;	es:[di+4]=seconds
 13000                                  ;	es:[di+5]=hundredths of seconds
 13001                                  ;
 13002                                  ;	NOTE: Any changes in this routine probably require corresponding
 13003                                  ;	changes in the version that is built with the power manager driver.
 13004                                  ;	See ptime.asm.
 13005                                  ;----------------------------------------------------------------------------
 13006                                  
 13007                                  tim_read:				; 2C7h:435h = 70h:29A5h
 13008 000004E4 E84A00                  		call	GetTickCnt
 13009 000004E7 8B36[8904]              		mov	si, [daycnt]
 13010                                  
 13011                                  ; we now need to convert the time in tick to the time in 100th of
 13012                                  ; seconds. the relation between tick and seconds is:
 13013                                  ;
 13014                                  ;		 65,536 seconds
 13015                                  ;	       ----------------
 13016                                  ;		1,193,180 tick
 13017                                  ;
 13018                                  ; to get to 100th of second we need to multiply by 100. the equation is:
 13019                                  ;
 13020                                  ;	ticks from clock  * 65,536 * 100
 13021                                  ;      --------------------------------- = time in 100th of seconds
 13022                                  ;		1,193,180
 13023                                  ;
 13024                                  ; fortunately this formula simplifies to:
 13025                                  ;
 13026                                  ;	ticks from clock * 5 * 65,536
 13027                                  ;      --------------------------------- = time in 100th of seconds
 13028                                  ;		59,659
 13029                                  ;
 13030                                  ; the calculation is done by first multipling tick by 5. next we divide by
 13031                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
 13032                                  ; my 16 bits to the left.
 13033                                  ;
 13034                                  ; start with ticks in cx:dx
 13035                                  ; multiply by 5
 13036                                  
 13037 000004EB 89C8                    		mov	ax, cx
 13038 000004ED 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
 13039                                  					; multiply by 5
 13040 000004EF D1E2                    		shl	dx, 1
 13041 000004F1 D1D1                    		rcl	cx, 1		; times	2
 13042 000004F3 D1E2                    		shl	dx, 1
 13043 000004F5 D1D1                    		rcl	cx, 1		; times	4
 13044 000004F7 01DA                    		add	dx, bx
 13045 000004F9 11C8                    		adc	ax, cx		; times	5
 13046 000004FB 92                      		xchg	ax, dx
 13047                                  
 13048                                  ; now have ticks * 5 in	dx:ax
 13049                                  ; we now need to multiply by 65536 and divide by 59659 d.
 13050                                  
 13051 000004FC B90BE9                  		mov	cx, 59659	; get divisor
 13052 000004FF F7F1                    		div	cx		; dx now has remainder
 13053                                  					; ax has high word of final quotient
 13054                                  
 13055                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 13056                                  		;mov	bx, ax		; put high word	in safe	place
 13057 00000501 93                      		xchg	bx, ax
 13058 00000502 31C0                    		xor	ax, ax		; this is the multiply by 65536
 13059 00000504 F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
 13060                                  
 13061                                  ; rounding based on the	remainder may be added here
 13062                                  ; the result in	bx:ax is time in 1/100 second.
 13063                                  
 13064 00000506 89DA                    		mov	dx, bx		
 13065 00000508 B9C800                  		mov	cx, 200		; extract 1/100's
 13066                                  
 13067                                  ; division by 200 is necessary to ensure no overflow--max result
 13068                                  ; is number of seconds in a day/2 = 43200.
 13069                                  
 13070 0000050B F7F1                    		div	cx
 13071 0000050D 80FA64                  		cmp	dl, 100		; remainder over 100?
 13072 00000510 7203                    		jb	short noadj
 13073 00000512 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
 13074                                  noadj:					
 13075 00000515 F5                      		cmc			; if we	subtracted 100,	carry is now set
 13076 00000516 88D3                    		mov	bl, dl		; save 1/100's
 13077                                  
 13078                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
 13079                                  ; by two, shifting a one in if the remainder had exceeded 100.
 13080                                  
 13081 00000518 D1D0                    		rcl	ax, 1		
 13082 0000051A B200                    		mov	dl, 0
 13083 0000051C D1D2                    		rcl	dx, 1
 13084                                  		;mov	cx, 60		; divide out seconds
 13085                                  		; 20/12/2023
 13086 0000051E B13C                    		mov	cl, 60
 13087 00000520 F7F1                    		div	cx
 13088 00000522 88D7                    		mov	bh, dl		; save the seconds
 13089 00000524 F6F1                    		div	cl		; break	into hours and minutes
 13090 00000526 86C4                    		xchg	al, ah
 13091                                  
 13092                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
 13093                                  
 13094                                  		; 08/08/2023
 13095                                  		;push	ax
 13096                                  		;mov	ax, si		; daycnt
 13097 00000528 96                      		xchg	ax, si
 13098 00000529 AB                      		stosw
 13099                                  		;pop	ax
 13100 0000052A 96                      		xchg	ax, si		; al = hours, ah = minutes
 13101 0000052B AB                      		stosw
 13102 0000052C 89D8                    		mov	ax, bx
 13103 0000052E AB                      		stosw
 13104 0000052F F8                      		clc			; [es:di] = count of days since 1-1-80
 13105                                  					;   [es:di+2] = hours
 13106                                  					;   [es:di+3] = minutes
 13107                                  					;   [es:di+4] = seconds
 13108                                  					;   [es:di+5] = hundredths of seconds
 13109 00000530 C3                      		retn
 13110                                  
 13111                                  ; =============== S U B	R O U T	I N E =======================================
 13112                                  
 13113                                  ; 15/10/2022
 13114                                  
 13115                                  ;----------------------------------------------------------------------------
 13116                                  ;
 13117                                  ; procedure : GetTickCnt
 13118                                  ;
 13119                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
 13120                                  ;		of rollover [except when power management driver is in use]. 
 13121                                  ;		Uses the following logic for updating Daycnt
 13122                                  ;
 13123                                  ;		if ( rollover ) {
 13124                                  ;			if ( t_switch )
 13125                                  ;				daycnt++ ;
 13126                                  ;			else
 13127                                  ;				daycnt += rollover ;
 13128                                  ;		}
 13129                                  ;
 13130                                  ; USES : AX
 13131                                  ;
 13132                                  ; RETURNS : CX:DX - tick count
 13133                                  ; MODIFIES : daycnt
 13134                                  ;
 13135                                  ;----------------------------------------------------------------------------
 13136                                  
 13137                                  		; 17/10/2022
 13138                                  GetTickCnt:
 13139 00000531 30E4                    		xor	ah, ah
 13140 00000533 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
 13141                                  					; Return: CX:DX	= clock	count
 13142                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
 13143                                  					; midnight
 13144                                  					; Otherwise, AL	> 0
 13145                                  		; 20/12/2023
 13146 00000535 30E4                    		xor	ah, ah
 13147 00000537 3826[8B04]              		cmp	byte [t_switch], ah ; 0
 13148                                  		;cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
 13149 0000053B 7505                    		jnz	short inc_case	; old method assumes that Int 1Ah returns rollover flag
 13150                                  		;xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
 13151                                  					; and not flag
 13152 0000053D 0106[8904]              		add	[daycnt], ax
 13153 00000541 C3                      		retn
 13154                                  ; ---------------------------------------------------------------------------
 13155                                  
 13156                                  inc_case:
 13157 00000542 08C0                    		or	al, al
 13158 00000544 7404                    		jz	short no_rollover
 13159 00000546 FF06[8904]              		inc	word [daycnt]
 13160                                  no_rollover:
 13161 0000054A C3                      		retn
 13162                                  
 13163                                  ; ---------------------------------------------------------------------------
 13164                                  ; ---------------------------------------------------------------------------
 13165                                  ; 03/10/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 13166                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0556h
 13167                                  
 13168                                  %if 1
 13169                                  
 13170 0000054B 4641543132202020        fat_12_id:	db 'FAT12   '
 13171 00000553 4641543136202020        fat_16_id:	db 'FAT16   '
 13172 0000055B 4641543332202020        fat_32_id:	db 'FAT32   '
 13173 00000563 4E4F204E414D452020-     nul_vid:	db 'NO NAME    '
 13173 0000056C 2020               
 13174                                  
 13175                                  %endif
 13176                                  
 13177                                  ;----------------------------------------------------------------------------
 13178                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
 13179                                  ;----------------------------------------------------------------------------
 13180                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13181                                  ; 09/03/2019 - Retro DOS v4.0
 13182                                  
 13183                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
 13184                                  ; 26/05/2018 - Retro DOS v3.0
 13185                                  ; 23/03/2018 - Retro DOS v2.0
 13186                                  
 13187                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
 13188                                  
 13189                                  ;struc BPB_TYPE
 13190                                  ;.SECSIZE:	resw 1
 13191                                  ;.SECALL:	resb 1
 13192                                  ;.RESNUM:	resw 1
 13193                                  ;.FATNUM:	resb 1
 13194                                  ;.DIRNUM:	resw 1
 13195                                  ;.SECNUM:	resw 1
 13196                                  ;.FATID:	resb 1
 13197                                  ;.FATSIZE:	resw 1
 13198                                  ;.SLIM:		resw 1
 13199                                  ;.HLIM:		resw 1
 13200                                  ;.HIDDEN:	resw 1
 13201                                  ;.size:
 13202                                  ;endstruc
 13203                                  
 13204                                  ;-----------------------------------------------------------------
 13205                                  ;	disk interface routines
 13206                                  ;-----------------------------------------------------------------
 13207                                  
 13208                                  ; device attribute bits:
 13209                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
 13210                                  
 13211                                  ;MAXERR		equ	5
 13212                                  ;MAX_HD_FMT_ERR	equ	2
 13213                                  
 13214                                  ;LSTDRV	equ 504h
 13215                                  
 13216                                  ; some floppies do not have changeline. as a result, media-check would
 13217                                  ; normally return i-don't-know, the dos would continually reread the fat and
 13218                                  ; discard cached data. we optimize this by implementing a logical door-latch:
 13219                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
 13220                                  ; the time of the last successful disk operation and compare it with the current
 13221                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
 13222                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
 13223                                  ; since we cannot trust the timer to be always available, we record the number 
 13224                                  ; of media checks that have occurred when no apparent time has elapsed. while
 13225                                  ; this number is < a given threshold, we say no change. when it exceeds that
 13226                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
 13227                                  ; the time of last successful access, if we see that time has passed too,
 13228                                  ; we reset the counter.
 13229                                  
 13230                                  accessmax	equ	5
 13231                                  
 13232                                  ; due to various bogosities, we need to continually adjust what the head
 13233                                  ; settle time is.  the following algorithm is used:
 13234                                  ;
 13235                                  ;   get the current head settle value.
 13236                                  ;   if it is 0, then
 13237                                  ;	set slow = 15
 13238                                  ;   else
 13239                                  ;	set slow = value
 13240                                  ;   ...
 13241                                  ;*********************************************
 13242                                  ;************ old algorithm ******************
 13243                                  ;*   if we are seeking and writing then
 13244                                  ;*	 use slow
 13245                                  ;*   else
 13246                                  ;*	 use fast
 13247                                  ;*********************************************
 13248                                  ;*********** ibm's requested logic ***********
 13249                                  ;   if we are seeking and writing and not on an at then
 13250                                  ;	use slow
 13251                                  ;   else
 13252                                  ;	use fast
 13253                                  ;   ...
 13254                                  ;   restore current head settle value
 13255                                  ;
 13256                                  ;
 13257                                  ;---------------------------------------
 13258                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
 13259                                  					; it on after handling config.sys file as a
 13260                                  					; default value, if multrk_flag = multrk_off1.
 13261                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
 13262                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
 13263                                  
 13264                                  ; close data segment, open Bios_Code segment
 13265                                  
 13266                                  ; 15/10/2022
 13267                                  
 13268                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
 13269                                  
 13270                                  ;-----------------------------------------------------------------
 13271                                  ;	command jump table
 13272                                  ;-----------------------------------------------------------------
 13273                                  
 13274 0000056E 00                      		db 0
 13275                                  
 13276                                  ; 11/12/2022
 13277                                  %if 0
 13278                                  
 13279                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
 13280                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
 13281                                  		dw 1742h		; dsk_init
 13282                                  		dw 4EBh			; media_chk
 13283                                  		dw 592h			; get_bpb
 13284                                  		dw 0D5h			; bc_cmderr
 13285                                  		dw 857h			; dsk_read
 13286                                  		dw 83Dh			; x_bus_exit
 13287                                  		dw 558h			; ret_carry_clear
 13288                                  		dw 558h			; ret_carry_clear
 13289                                  		dw 849h			; dsk_writ
 13290                                  		dw 841h			; dsk_writv
 13291                                  		dw 558h			; ret_carry_clear
 13292                                  		dw 558h			; ret_carry_clear
 13293                                  		dw 0D5h			; bc_cmderr
 13294                                  		dw 80Ah			; dsk_open
 13295                                  		dw 81Ah			; dsk_close
 13296                                  		dw 831h			; dsk_rem
 13297                                  		dw 558h			; ret_carry_clear
 13298                                  		dw 558h			; ret_carry_clear
 13299                                  		dw 558h			; ret_carry_clear
 13300                                  		dw 0C6Bh		; do_generic_ioctl
 13301                                  		dw 558h			; ret_carry_clear
 13302                                  		dw 558h			; ret_carry_clear
 13303                                  		dw 558h			; ret_carry_clear
 13304                                  		dw 1124h		; ioctl_getown
 13305                                  		dw 1142h		; ioctl_setown
 13306                                  		dw 129Ah		; ioctl_support_query
 13307                                  
 13308                                  ;dtbl_siz equ $-dsktbl
 13309                                  
 13310                                  %endif
 13311                                  
 13312                                  ; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 13313                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0579h		
 13314                                  
 13315                                  		; 21/12/2023 - Retro DOS v5.0
 13316                                  		; 11/12/2022
 13317 0000056F 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
 13318 00000570 [501A]                  		dw dsk_init
 13319 00000572 [B805]                  		dw media_chk
 13320 00000574 [5706]                  		dw get_bpb
 13321                                  		;dw bc_cmderr
 13322 00000576 [4B0E]                  		dw ioctl_input ; PCDOS 7 ; 21/12/2023
 13323 00000578 [7409]                  		dw dsk_read
 13324 0000057A [5A09]                  		dw x_bus_exit
 13325 0000057C [2206]                  		dw ret_carry_clear
 13326 0000057E [2206]                  		dw ret_carry_clear
 13327 00000580 [6609]                  		dw dsk_writ
 13328 00000582 [5E09]                  		dw dsk_writv
 13329 00000584 [2206]                  		dw ret_carry_clear
 13330 00000586 [2206]                  		dw ret_carry_clear
 13331                                  		;dw bc_cmderr
 13332 00000588 [F80D]                  		dw ioctl_output ; PCDOS 7 ; 21/12/2023
 13333 0000058A [2B09]                  		dw dsk_open
 13334 0000058C [3A09]                  		dw dsk_close
 13335 0000058E [5009]                  		dw dsk_rem
 13336 00000590 [2206]                  		dw ret_carry_clear
 13337 00000592 [2206]                  		dw ret_carry_clear
 13338 00000594 [2206]                  		dw ret_carry_clear
 13339 00000596 [CD0E]                  		dw do_generic_ioctl
 13340 00000598 [2206]                  		dw ret_carry_clear
 13341 0000059A [2206]                  		dw ret_carry_clear
 13342 0000059C [2206]                  		dw ret_carry_clear
 13343 0000059E [A813]                  		dw ioctl_getown
 13344 000005A0 [C513]                  		dw ioctl_setown
 13345 000005A2 [2215]                  		dw ioctl_support_query
 13346                                  
 13347                                  dtbl_siz equ $-dsktbl
 13348                                  
 13349                                  ; =============== S U B	R O U T	I N E =======================================
 13350                                  
 13351                                  ; ---------------------------------------------------------------------------
 13352                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
 13353                                  ; the one that belongs to the drive specified. carry is set if none exists
 13354                                  ; for the drive. Pointer is returned in es:[di]
 13355                                  ;
 13356                                  ;  AL contains the logical drive number.
 13357                                  ; ---------------------------------------------------------------------------
 13358                                  
 13359                                  SetDrive:
 13360                                  		;les	di, dword ptr ds:start_bds ; Point es:di to first bds
 13361 000005A4 C43E[1901]              		les	di, [start_bds] ; 19/10/2022
 13362                                  X_Scan_Loop:
 13363 000005A8 26384505                		cmp	[es:di+5], al	
 13364 000005AC 7409                    		jz	short X_SetDrv
 13365 000005AE 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
 13366 000005B1 83FFFF                  		cmp	di, 0FFFFh
 13367 000005B4 75F2                    		jnz	short X_Scan_Loop
 13368 000005B6 F9                      		stc
 13369                                  X_SetDrv:
 13370 000005B7 C3                      		retn
 13371                                  
 13372                                  ; ---------------------------------------------------------------------------
 13373                                  
 13374                                  ; 15/10/2022
 13375                                  
 13376                                  	; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 13377                                  	; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05C2h
 13378                                  
 13379                                  ; ---------------------------------------------------------------------
 13380                                  ; if id is f9, have a 96tpi disk else
 13381                                  ; if bit 2 is 0 then media is not removable and could not have changed
 13382                                  ;  otherwise if within 2 secs of last disk operation media could not
 13383                                  ;    have changed, otherwise dont know if media has changed
 13384                                  ; ---------------------------------------------------------------------
 13385                                  
 13386                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
 13387 000005B8 E8E9FF                  		call	SetDrive
 13388 000005BB BE0100                  		mov	si, 1
 13389                                  		; 21/12/2023
 13390 000005BE 26F6454001              		test	byte [es:di+40h], 1
 13391                                  		;test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
 13392                                  					; fchanged_by_format
 13393 000005C3 7415                    		jz	short WeAreNotFakingIt
 13394                                  		; 21/12/2023
 13395 000005C5 26806540FE              		and	byte [es:di+40h], 0FEh
 13396                                  		; 12/12/2022
 13397                                  		;and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
 13398                                  		;;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
 13399                                  					; ~fchanged_by_format ;	reset flag
 13400 000005CA C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
 13401                                  					; Ensure that we ask the rom if media has changed
 13402                                  		; 21/12/2023
 13403 000005CF 26F6453F01              		test	byte [es:di+3Fh], 1
 13404                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 13405                                  					; fnon_removable
 13406 000005D4 740B                    		jz	short wehaveafloppy
 13407                                  		;mov	si, 0FFFFh	; Indicate media changed
 13408                                  		; 11/08/2023
 13409 000005D6 F7DE                    		neg	si		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05E0h
 13410 000005D8 EB2B                    		jmp	short Media_Done ; Media_Done
 13411                                  ; ---------------------------------------------------------------------------
 13412                                  
 13413                                  WeAreNotFakingIt:
 13414                                  		; 21/12/2023
 13415 000005DA 26F6453F01              		test	byte [es:di+3Fh], 1
 13416                                  		;test	byte [es:di+BDS.flags], fnon_removable			
 13417                                  		;test	byte [es:di+23h], 1
 13418 000005DF 7524                    		jnz	short Media_Done
 13419                                  wehaveafloppy:
 13420                                  		;xor	si, si ; 0	; Presume "I don't know"
 13421                                  		; 11/08/2023
 13422 000005E1 4E                      		dec	si ; 0 		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:05EBh
 13423                                  
 13424                                  		; If we have a floppy with changeline support, we ask the ROM
 13425                                  		; to determine if media has changed. We do not perform the
 13426                                  		; 2 second check for these drives.
 13427                                  
 13428 000005E2 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
 13429 000005E7 740A                    		jz	short mChk_NoChangeLine	; Brif not
 13430 000005E9 E83C15                  		call	mediacheck	;  Call	into removable routine
 13431 000005EC 7236                    		jb	short err_exitj
 13432 000005EE E8A016                  		call	haschange
 13433 000005F1 7512                    		jnz	short Media_Done
 13434                                  mChk_NoChangeLine:
 13435                                  		; If we come here, we have a floppy with no changeline support
 13436                                  			
 13437 000005F3 BE0100                  		mov	si, 1		; Presume no change
 13438 000005F6 A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
 13439 000005F9 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
 13440                                  					; Is drive of last access the same?
 13441 000005FD 7505                    		jnz	short Media_Unk	; No, then "i don't know"
 13442 000005FF E82800                  		call	Check_Time_Of_Access
 13443 00000602 EB01                    		jmp	short Media_Done
 13444                                  ; ---------------------------------------------------------------------------
 13445                                  
 13446                                  Media_Unk:
 13447 00000604 4E                      		dec	si		; ; Return "I don't know"
 13448                                  
 13449                                  		; SI now contains the correct value for media change.
 13450                                  		; Clean up the left overs
 13451                                  Media_Done:
 13452                                  		; 19/10/2022
 13453 00000605 06                      		push	es
 13454 00000606 C41E[1200]              		les	bx, [ptrsav]
 13455 0000060A 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
 13456 0000060E 07                      		pop	es
 13457 0000060F 09F6                    		or	si, si
 13458 00000611 790F                    		jns	short ret_carry_clear ;	volidok
 13459 00000613 803E[7700]00            		cmp	byte [fhave96], 0
 13460 00000618 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
 13461 0000061A E80616                  		call	media_set_vid
 13462                                  mChk1_NoChangeLine:
 13463 0000061D C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
 13464                                  					; Make sure we ask rom for media check
 13465                                  ret_carry_clear:			
 13466 00000622 F8                      		clc			; volidok
 13467 00000623 C3                      		retn
 13468                                  ; ---------------------------------------------------------------------------
 13469                                  
 13470                                  err_exitj:
 13471 00000624 E88307                  		call	maperror	; guaranteed to	set carry
 13472                                  ret81:					
 13473 00000627 B481                    		mov	ah, 81h		; return error status
 13474 00000629 C3                      		retn			; return with carry set
 13475                                  
 13476                                  ; =============== S U B	R O U T	I N E =======================================
 13477                                  
 13478                                  ; ---------------------------------------------------------------------------
 13479                                  ; perform a check on the time passed since the last access for this physical
 13480                                  ; drive.
 13481                                  ; we are accessing the same drive. if the time of last successful access was
 13482                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
 13483                                  ; returns in si:
 13484                                  ;	0 - if time of last access was >= 2 seconds
 13485                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
 13486                                  ; registers affected ax,cx,dx, flags.
 13487                                  ;
 13488                                  ;	assume es:di -> bds, ds->Bios_Data
 13489                                  ; ---------------------------------------------------------------------------
 13490                                  
 13491                                  		; 21/12/2023 - Retro DOS v5.0 IBMBIO.COM
 13492                                  		; 19/10/2022
 13493                                  Check_Time_Of_Access:
 13494 0000062A BE0100                  		mov	si, 1		; presume no change.
 13495 0000062D E801FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
 13496                                  		; 21/12/2023
 13497 00000630 268B4579                		mov	ax, [es:di+79h]
 13498                                  		;mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
 13499                                  					; get stored time
 13500 00000634 29C2                    		sub	dx, ax
 13501                                  		; 21/12/2023
 13502 00000636 268B457B                		mov	ax, [es:di+7Bh]
 13503                                  		;mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
 13504 0000063A 19C1                    		sbb	cx, ax
 13505                                  		; 11/08/2023
 13506                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0646h
 13507                                  		;mov	al, [accesscount]
 13508 0000063C 7515                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
 13509 0000063E 09D2                    		or	dx, dx		; time must pass
 13510 00000640 750C                    		jnz	short timepassed ; yes, examine max value
 13511                                  		; 11/08/2023
 13512                                  		;inc	al
 13513                                  		;cmp	al, 5
 13514                                  		;;inc	byte [accesscount]
 13515                                  		;;cmp	byte [accesscount], 5
 13516                                  		;			; if count is less than threshold, ok
 13517                                  		;jb	short timecheck_ret
 13518                                  		;;dec	byte [accesscount] ; don't let the count wrap
 13519                                  		; 11/08/2023
 13520                                  		;dec	al
 13521                                  		;jmp	short timecheck_unk ; "i don't know" if media changed
 13522                                  		; 11/08/2023
 13523 00000642 803E[1D01]04            		cmp	byte [accesscount], 4
 13524 00000647 730A                    		jnb	short timecheck_unk
 13525 00000649 FE06[1D01]              		inc	byte [accesscount]
 13526 0000064D C3                      		retn
 13527                                  
 13528                                  ; ---------------------------------------------------------------------------
 13529                                  
 13530                                  timepassed:
 13531 0000064E 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
 13532                                  					; min elapsed time? (2 seconds)
 13533 00000651 7601                    		jbe	short timecheck_ret ; yes, presume no change
 13534                                  
 13535                                  		; everything indicates that we do not know what has happened.
 13536                                  timecheck_unk:
 13537 00000653 4E                      		dec	si		; presume i don't know
 13538                                  timecheck_ret:
 13539                                  		; 11/08/2023
 13540                                  		;mov	[accesscount], al
 13541 00000654 C3                      		retn
 13542                                  
 13543                                  ; ---------------------------------------------------------------------------
 13544                                  ; 15/10/2022
 13545                                  Err_Exitj2:
 13546 00000655 EBCD                    		jmp	short err_exitj
 13547                                  
 13548                                  ; ---------------------------------------------------------------------------
 13549                                  
 13550                                  ; 15/10/2022
 13551                                  
 13552                                  ; ==========================================================================
 13553                                  ; Build a valid bpb for the disk in the drive.
 13554                                  ; ==========================================================================
 13555                                  
 13556                                  		; 21/12/2023 - Retro DOS v5.0 IBMBIO.COM
 13557                                  		; 19/10/2022
 13558                                  get_bpb:				; 2C7h:592h = 70h:2B02h
 13559 00000657 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
 13560 0000065A E847FF                  		call	SetDrive	; get the correct bds for the drive
 13561                                  		; 21/12/2023
 13562 0000065D 26F6453F01              		test	byte [es:di+3Fh], 1
 13563                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 13564                                  					; fnon_removable
 13565 00000662 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
 13566                                  
 13567                                  		; let's set the default value for volid,vol_serial,
 13568                                  		; filesys_id in bds table
 13569                                  
 13570 00000664 E83600                  		call	clear_ids
 13571                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
 13572 00000667 C606[9B04]01            		mov	byte [set_id_flag], 1
 13573 0000066C E86700                  		call	GetBp		; build	a bpb if necessary
 13574 0000066F 72B6                    		jb	short ret81
 13575                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
 13576 00000671 803E[9B04]02            		cmp	byte [set_id_flag], 2
 13577                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
 13578 00000676 C606[9B04]00            		mov	byte [set_id_flag], 0
 13579 0000067B 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
 13580                                  					; otherwise, conventional boot record
 13581                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
 13582 0000067D 803E[7700]00            		cmp	byte [fhave96], 0
 13583 00000682 7403                    		jz	short already_gotbpb ; brif not
 13584 00000684 E81016                  		call	set_volume_id
 13585                                  already_gotbpb:
 13586 00000687 83C706                  		add	di, 6		; BDS.BPB
 13587                                  					; return the bpb from the current bds
 13588                                  
 13589                                  ;		fall into setptrsav, es:di -> result
 13590                                  
 13591                                  ; ---------------------------------------------------------------------------
 13592                                  
 13593                                  ; 15/10/2022
 13594                                  
 13595                                  ; ==========================================================================
 13596                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
 13597                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
 13598                                  ;Note that this works in most cases because most pointers are in Bios_Data.
 13599                                  ;It fails, for instance, when we install an external drive using driver.sys
 13600                                  ;because then the BDS segment is no longer Bios_Data. 
 13601                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
 13602                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
 13603                                  ;restored before returning to the caller.
 13604                                  ; ==========================================================================
 13605                                  
 13606                                  ; 21/12/2023
 13607                                  %if 0
 13608                                  		; 19/10/2022
 13609                                  SetPtrSav:	; return point for dsk_init
 13610                                  		mov	cx, es		; save es
 13611                                  		;les	bx, ds:ptrsav
 13612                                  		les	bx, [ptrsav]
 13613                                  		mov	[es:bx+0Dh], ah	; [es:bx+media]
 13614                                  		mov	[es:bx+12h], di	; [es:bx+count]
 13615                                  		mov	[es:bx+14h], cx	; [es:bx+count+2]
 13616                                  		clc
 13617                                  		retn
 13618                                  %endif
 13619                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 13620                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0698h
 13621                                  SetPtrSav:	
 13622                                  		; return point for dsk_init
 13623 0000068A 1E                      		push	ds
 13624                                  		;lds	bx, ds:ptrsav
 13625 0000068B C51E[1200]              		lds	bx, [ptrsav]
 13626 0000068F 88670D                  		mov	[bx+0Dh], ah	; [bx+media]
 13627 00000692 897F12                  		mov	[bx+12h], di	; [bx+count]
 13628 00000695 8C4714                  		mov	[bx+14h], es	; [bx+count+2]
 13629 00000698 1E                      		push	ds
 13630 00000699 07                      		pop	es
 13631 0000069A 1F                      		pop	ds
 13632 0000069B F8                      		clc
 13633 0000069C C3                      		retn
 13634                                  
 13635                                  ; =============== S U B	R O U T	I N E =======================================
 13636                                  
 13637                                  ; 15/10/2022
 13638                                  
 13639                                  ; -----------------------------------------------------
 13640                                  ; clear ids in bds table. only applied for floppies.
 13641                                  ;input:  es:di -> bds table
 13642                                  ;	assumes ds: -> Bios_Data
 13643                                  ;output: volid set to "NO NAME    "
 13644                                  ;	 vol_serial set to 0.
 13645                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
 13646                                  ;	   depending on the flag fatsize in bds.
 13647                                  ;
 13648                                  ;	trashes si, cx
 13649                                  ; -----------------------------------------------------
 13650                                  
 13651                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
 13652                                  ;size_of_EXT_SYSTEM_ID equ 8
 13653                                  
 13654                                  ; 11/09/2023
 13655                                  ; 14/08/2023
 13656                                  ;BDS.fatsiz equ 1Fh
 13657                                  ; 21/12/2023
 13658                                  ;BDS.fatsiz equ 59
 13659                                  
 13660                                  		; 22/12/2023
 13661                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 13662                                  clear_ids:
 13663                                  		;mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
 13664                                  		; 21/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM BugFix)
 13665 0000069D 268A5D3B                		mov	bl, [es:di+3Bh] ; mov bl,[es:di+BDS.fatsiz]; *+
 13666                                  clear_ids_x:
 13667                                  		; 21/12/2023 
 13668                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:06ABh)
 13669                                  		; 11/09/2023		
 13670                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
 13671 000006A1 57                      		push	di
 13672 000006A2 31C9                    		xor	cx, cx		; no serial number
 13673                                  		; 21/12/2023
 13674 000006A4 26898D8900              		mov	[es:di+89h], cx	; [es:di+BDS.vol_serial]
 13675 000006A9 26898D8B00              		mov	[es:di+8Bh], cx	; [es:di+BDS.vol_serial+2]
 13676                                  		;mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 13677                                  		;mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 13678                                  
 13679                                  		; BUGBUG - there's a lot in common here and with
 13680                                  		; mov_media_ids.. see if we can save some space by
 13681                                  		; merging them... jgl
 13682                                  
 13683                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 13684                                  		; 10/12/2022
 13685 000006AE B10B                    		mov	cl, 11 ; cx = 11
 13686                                  
 13687                                  		;;mov	si, offset vol_no_name ; "NO NAME    "
 13688                                  		;mov	si, vol_no_name	; 19/10/2022
 13689                                  		; 22/12/2023
 13690                                  		;mov	si, offset nul_vid ; "NO NAME    "
 13691 000006B0 BE[6305]                		mov	si, nul_vid
 13692                                  
 13693                                  		; 21/12/2023
 13694 000006B3 83C77D                  		add	di, 125
 13695                                  		;add	di, 75		; BDS.volid
 13696                                  		
 13697                                  		;rep movsb
 13698                                  		; 21/12/2023
 13699                                  		;rep movs byte ptr es:[di], byte ptr cs:[si] ; cs rep movsb
 13700                                  		; 26/12/2023
 13701                                  		;cs	; vol_no_name is in BIOSCODE segment
 13702                                  		;rep movsb
 13703 000006B6 F3                      		rep
 13704 000006B7 2E                      		cs
 13705 000006B8 A4                      		movsb
 13706                                  
 13707                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
 13708                                  		;;test	byte [es:di+BDS.fatsiz], fbig
 13709                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
 13710                                  		;test	byte [es:di+1Fh], 40h
 13711                                  		; 21/12/2023 - Retro DOS v5.0
 13712                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h)
 13713                                  		;test	byte [es:di+59], 20h 
 13714                                  			; (here, es:di points to the BDS offset +136)
 13715                                  			; purpose: test byte [es:di+BDS.fatsiz], fbigbig
 13716                                  			; applied: test byte [es:BDS.fatsiz+136], fbigbig -BUG!-
 13717                                  
 13718                                  			; (PCDOS 7.1 BUG note: 26/06/2023 - Erdogan Tan)
 13719                                  			;; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
 13720                                  			; Microsoft/IBM code has a bug here because the BDS's
 13721                                  			; .volid and .filesys_id fields will be reset
 13722                                  			; (to their default text) according to 'BDS.fatsiz' flags
 13723                                  			; at the BDS offset 59 but current (this) code checks flags
 13724                                  			; at ES:DI+59 while DI points the BDS offset 136!? ; (PCDOS 7.1)
 13725                                  			;; at the BDS offset 31 but current (this) code checks flags
 13726                                  			;; at ES:DI+31 while DI points the BDS offset 86!? ; (MSDOS 6.22)
 13727                                  			;
 13728                                  			; Correct Code:
 13729                                  			; ;test byte [ES:59],20h or [ES:BDS.fatsiz],fbigbig  ; (PCDOS 7.1)	
 13730                                  			; ;;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig  ; (MSDOS 6.22)
 13731                                  			; 11/09/2023
 13732                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
 13733                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
 13734                                  			;
 13735                                  			; Same BUG is existing in MSDOS 6.22 IO.SYS - BIOSCODE:05EFh
 13736                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
 13737                                  
 13738                                  			;
 13739                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
 13740                                  			; 'clear_ids' is used for floppy disks only and the default
 13741                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
 13742                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
 13743                                  
 13744                                  		; 21/12/2023 - Retro DOS v5.0
 13745                                  		;mov	si, offset fat_32_id ; "FAT32   "
 13746 000006B9 BE[5B05]                		mov	si, fat_32_id	
 13747                                  
 13748                                  		; 21/12/2023
 13749                                  		; BugFix (of the PCDOS 7.1 IBMBIO.COM BUG) ; *+
 13750                                  		;test	bl, fbigbig ; FAT32 flag
 13751 000006BC F6C320                  		test	bl, 20h ; * ; BL = [es:BDS.fatsiz] = [es:59]
 13752 000006BF 750B                    		jnz	short ci_bigfat
 13753                                  
 13754                                  		;mov	si, offset fat_16_id ; "FAT16	"
 13755 000006C1 BE[5305]                		mov	si, fat_16_id	; 19/10/2022
 13756                                  		
 13757                                  		; 21/12/2023
 13758                                  		; !BUG! (PCDOS 7.1 IBMBIO.COM BIOSCODE:06CDh)
 13759                                  		;test	byte [es:di+59], 40h ; [es:di+BDS.fatsiz], fbig
 13760                                  		; BugFix ; *+
 13761                                  		;test	bl, fbig ; FAT16 flag
 13762 000006C4 F6C340                  		test	bl, 40h ; * ; Retro DOS v5.0
 13763                                  		;;test	al, 40h ; * ; Retro DOS v4.2
 13764 000006C7 7503                    		jnz	short ci_bigfat
 13765                                  
 13766                                  		;mov	si, offset fat_12_id ; "FAT12	"
 13767 000006C9 BE[4B05]                		mov	si, fat_12_id	; 19/10/2022
 13768                                  ci_bigfat:
 13769                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 13770                                  		; 10/12/2022
 13771 000006CC B108                    		mov	cl, 8 ; cx = 8 
 13772 000006CE 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 13773                                  					; filesys_id field
 13774                                  		;rep movsb
 13775                                  		; 21/12/2023 - Retro DOS v5.0
 13776                                  		;rep movs byte ptr es:[di], byte ptr cs:[si] ; 0F3h,2Eh,0A4h
 13777                                  		; 26/12/2023
 13778                                  		;cs	; fat32_id, fat16_id and fat12_id are in BIOSCODE segment
 13779                                  		;rep movsb
 13780 000006D1 F3                      		rep
 13781 000006D2 2E                      		cs
 13782 000006D3 A4                      		movsb
 13783                                  
 13784 000006D4 5F                      		pop	di		; restore bds pointer
 13785                                  getret_exit:		; 21/12/2023
 13786 000006D5 C3                      		retn
 13787                                  
 13788                                  ; =============== S U B	R O U T	I N E =======================================
 13789                                  
 13790                                  ; 15/10/2022
 13791                                  
 13792                                  ; ---------------------------------------------------------------------------
 13793                                  ;	getbp - return bpb from the drive specified by the bds.
 13794                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
 13795                                  ;	    note that we never come here for fixed disks.
 13796                                  ;	    for all other cases,
 13797                                  ;	      - it reads boot sector to pull out the bpb
 13798                                  ;	      - if no valid bpb is found, it then reads the fat sector,
 13799                                  ;		to get the fat id byte to build the bpb from there.
 13800                                  ;
 13801                                  ;   inputs:	es:di point to correct bds.
 13802                                  ;
 13803                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
 13804                                  ;		carry set, and al=7 if invalid disk.
 13805                                  ;		carry set and error code in al if other error.
 13806                                  ;		if failed to recognize the boot record, then will set the
 13807                                  ;		set_id_flag to 0.
 13808                                  ;		this routine will only work for a floppy diskette.
 13809                                  ;		     for a fixed disk, it will just return.
 13810                                  ;
 13811                                  ;	****** Note: getbp is a clone of getbp which uses the newer
 13812                                  ;	  segment definitions. It should be migrated towards.
 13813                                  ;	   now es:di has the bds, ds: has Bios_Data
 13814                                  ; ---------------------------------------------------------------------------
 13815                                  
 13816                                  		; 21/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 13817                                  GetBp:
 13818                                  		; if returning fake bpb then return bpb as is.
 13819                                  		; 21/12/2023
 13820 000006D6 26F6453F05              		test	byte [es:di+3Fh], 5 ; PCDOS 7.1
 13821                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
 13822                                  		;test	byte [es:di+23h], 5 ; MSDOS 6.22 (& MSDOS 5.0)
 13823                                  		;jz	short getbp1	; getbp1
 13824                                  		;jmp	getret_exit
 13825                                  		; 21/12/2023
 13826 000006DB 75F8                    		jnz	short getret_exit
 13827                                  ; ---------------------------------------------------------------------------
 13828                                  getbp1:	
 13829 000006DD 51                      		push	cx
 13830 000006DE 52                      		push	dx
 13831 000006DF 53                      		push	bx
 13832                                  
 13833                                  		; attempt to read in boot sector and determine bpb.
 13834                                  		; we assume that the 2.x and greater dos disks all
 13835                                  		; have a valid boot sector.
 13836                                  
 13837 000006E0 E8D200                  		call	readbootsec
 13838 000006E3 720A                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
 13839 000006E5 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
 13840 000006E7 7509                    		jnz	short dofatbpb
 13841 000006E9 E81701                  		call	movbpb		; move bpb into	registers
 13842                                  		;jmp	short Has1
 13843                                  		; 21/12/2023 - Retro DOS v5.0 (PCDOS 7.1) IBMBIO.COM
 13844 000006EC E9B800                  		jmp	getret
 13845                                  ; ---------------------------------------------------------------------------
 13846                                  
 13847                                  getbp_err_ret_brdg:
 13848 000006EF E9B900                  		jmp	getbp_err_ret
 13849                                  ; ---------------------------------------------------------------------------
 13850                                  
 13851                                  		; we have a 1.x diskette. In this case read in the fat ID byte
 13852                                  		; and fill in bpb from there.
 13853                                  dofatbpb:				
 13854 000006F2 E8B601                  		call	readfat		; puts media descriptor	byte in	ah
 13855 000006F5 72F8                    		jb	short getbp_err_ret_brdg
 13856                                  		;cmp	ds:fhave96, 0	;  changeline support available?
 13857 000006F7 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
 13858 000006FC 7403                    		jz	short bpb_nochangeline ; brif not
 13859 000006FE E83715                  		call	hidensity	; may not return! May add sp, 2	and
 13860                                  					; jump to has1!!!!!! or	has720K
 13861                                  bpb_nochangeline:		; test for a valid 3.5" medium			
 13862                                  		; 21/12/2023 - Retro DOS v5.0
 13863 00000701 26807D3E02              		cmp	byte [es:di+3Eh], 2
 13864                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 13865                                  					; ffSmall
 13866 00000706 7512                    		jnz	short is_floppy
 13867 00000708 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
 13868 0000070B 7512                    		jnz	short got_unknown_medium
 13869                                  Has720K:
 13870                                  		; 21/12/2023
 13871                                  		;;mov	bx, offset sm92 ; pointer to correct bpb
 13872                                  		;mov	bx, sm92	; 19/10/2022
 13873                                  
 13874                                  		; es points to segment of bds. the following should be modified
 13875                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
 13876                                  		; driver.sys is loaded since the bds is inside the driver.sys.
 13877                                  
 13878                                  		; 21/12/2023
 13879                                  		;; 10/12/2022
 13880                                  		;;mov	al, [bx+0]	; [bx+bpbtype.spf]
 13881                                  		;; 21/12/2022
 13882                                  		;mov	al, [bx]
 13883                                  		;mov	cx, [bx+3]	; [bx+bpbtype.csec]
 13884                                  		;mov	dx, [bx+5]	; [bx+bpbtype.spau]
 13885                                  		;mov	bx, [bx+1]	; [bx+bpbtype.spt]
 13886                                  		;; 19/10/2022 - Temporary !
 13887                                  		;;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
 13888                                  		;;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
 13889                                  		;;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
 13890                                  		;;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]
 13891                                  
 13892                                  		; 21/12/2023 - Retro DOS v5.0
 13893 0000070D B003                    		mov	al, 3		; bpbtype.sbf = 3
 13894 0000070F B9A005                  		mov	cx, 1440	; bpbtype.csec = 1440
 13895 00000712 BA0202                  		mov	dx, 202h	; dl = bpbtype.spau = 2
 13896                                  					; dh = bpbtype.chead = 2
 13897 00000715 BB0970                  		mov	bx, 7009h	; bl = bpbtype.spt = 9
 13898                                  					; bh = bpbtype.dire = 112
 13899 00000718 EB33                    		jmp	short Has1
 13900                                  ; ---------------------------------------------------------------------------
 13901                                  
 13902                                  is_floppy:			; must be a 5.25" floppy if we come here
 13903 0000071A 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
 13904                                  		;jb	short got_unknown_medium
 13905                                  		; 21/12/2023
 13906 0000071D 730A                    		jnb	short chk_160K
 13907                                  ; ---------------------------------------------------------------------------
 13908                                  		; 21/12/2023
 13909                                  		; we have a 3.5" diskette for which we cannot build a bpb.
 13910                                  		; we do	not assume any type of bpb for this medium.
 13911                                  got_unknown_medium:
 13912                                  		;mov	ds:set_id_flag,	0
 13913 0000071F C606[9B04]00            		mov	byte [set_id_flag], 0
 13914 00000724 B007                    		mov	al, 7
 13915 00000726 F9                      		stc
 13916 00000727 EB7E                    		jmp	short getret
 13917                                  ; ---------------------------------------------------------------------------
 13918                                  chk_160K:
 13919 00000729 B001                    		mov	al, 1		; set number of	fat sectors
 13920 0000072B BB0840                  		mov	bx, 16392	; 64*256+8
 13921                                  					; set dir entries and sector max
 13922 0000072E B94001                  		mov	cx, 320		; 40*8
 13923                                  					; set size of drive
 13924 00000731 BA0101                  		mov	dx, 257		; 01*256+1
 13925                                  					; set head limit and sec/all unit
 13926                                  		; 21/12/2023
 13927                                  		;mov	al, 1		; bpbtype.sbf = 1
 13928                                  		;mov	bx, 4008h	; bl = bpbtype.spt = 8
 13929                                  		;			; bh = bpbtype.dire = 64
 13930                                  		;mov	cx, 140h	; bpbtype.csec = 320
 13931                                  		;mov	dx, 101h	; dl = bpbtype.spau = 1
 13932                                  		;			; dh = bpbtype.chead = 1
 13933                                  
 13934 00000734 F6C402                  		test	ah, 2		; test for 8 or	9 sector
 13935 00000737 7507                    		jnz	short has8	; nz = has 8 sectors
 13936 00000739 FEC0                    		inc	al	; 2 	; inc number of	fat sectors
 13937 0000073B FEC3                    		inc	bl	; 9	; inc sector max
 13938                                  		;add	cx, 40		; increase size	(to 360)
 13939                                  		; 18/12/2022
 13940 0000073D 80C128                  		add	cl, 40	; 28h	; 180K (360 sectors)
 13941                                  has8:
 13942 00000740 F6C401                  		test	ah, 1		; test for 1 or	2 heads
 13943 00000743 7408                    		jz	short Has1	; jz = 1 head
 13944 00000745 01C9                    		add	cx, cx		; double size of disk
 13945 00000747 B770                    		mov	bh, 112		; increase number of directory entries
 13946 00000749 FEC6                    		inc	dh	; 2	; inc sec/all unit
 13947 0000074B FEC2                    		inc	dl	; 2	; inc head limit
 13948                                  Has1:
 13949                                  		; 02/09/2023 (PCDOS 7.1, IBMBIO.COM - BIOSCODE:0754h)
 13950 0000074D 1E                      		push	ds
 13951 0000074E 06                      		push	es
 13952 0000074F 1F                      		pop	ds
 13953                                  
 13954                                  		;mov	[es:di+8], dh	; [es:di+BDS.secperclus]
 13955                                  		;mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
 13956                                  		;mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
 13957                                  		;mov	[es:di+10h], ah	; [es:di+BDS.media]
 13958                                  		;mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
 13959                                  		;mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
 13960                                  		;mov	[es:di+15h], dl	; [es:di+BDS.heads]
 13961                                  
 13962 00000750 887508                  		mov	[di+8], dh	; [di+BDS.secperclus]
 13963 00000753 30F6                    		xor	dh, dh
 13964 00000755 895515                  		mov	[di+15h], dx	; [di+BDS.heads]
 13965 00000758 88FA                    		mov	dl, bh
 13966 0000075A 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
 13967 0000075D 894D0E                  		mov	[di+0Eh], cx	; [di+BDS.totalsecs16]
 13968 00000760 894D1B                  		mov	[di+1Bh], cx	; [di+BDS.totalsecs32]
 13969 00000763 886510                  		mov	[di+10h], ah	; [di+BDS.media]
 13970 00000766 88C2                    		mov	dl, al
 13971 00000768 895511                  		mov	[di+11h], dx	; [di+BDS.fatsecs]
 13972 0000076B 88DA                    		mov	dl, bl
 13973 0000076D 895513                  		mov	[di+13h], dx	; [di+BDS.secpertrack]
 13974                                  
 13975                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
 13976                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
 13977                                  		; to 0 since this code is for floppies
 13978                                  
 13979                                  		; 18/12/2022
 13980                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
 13981                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
 13982                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
 13983                                  		; 18/12/2022
 13984 00000770 29C9                    		sub	cx, cx ; 0
 13985                                  		;mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
 13986                                  		;mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
 13987                                  		;mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
 13988                                  		
 13989                                  		; 02/09/2023
 13990 00000772 894D19                  		mov	[di+19h], cx ; 0 ; [di+BDS.hiddensecs+2]
 13991 00000775 894D17                  		mov	[di+17h], cx ; 0 ; [di+BDS.hiddensecs]
 13992 00000778 894D1D                  		mov	[di+1Dh], cx ; 0 ; [di+BDS.totalsecs32+2]
 13993                                  
 13994                                  		; 21/12/2023 - Retro DOS v5.0
 13995 0000077B 894D1F                  		mov     [di+1Fh], cx    ; [di+BDS.fatsecs32] ; BPB_FATSz32
 13996 0000077E 894D21                  		mov     [di+21h], cx    ; [di+BDS.fatsecs32+2]
 13997 00000781 894D27                  		mov     [di+27h], cx    ; [di+BDS.rootdirclust]
 13998 00000784 894D29                  		mov     [di+29h], cx    ; [di+BDS.rootdirclust+2]
 13999 00000787 894D2F                  		mov     [di+2Fh], cx    ; [di+BDS.reserved]
 14000                                  					;     BPB_Reserved (12 zero bytes)
 14001 0000078A 894D31                  		mov     [di+31h], cx
 14002 0000078D 894D33                  		mov     [di+33h], cx
 14003 00000790 894D35                  		mov     [di+35h], cx
 14004 00000793 894D37                  		mov     [di+37h], cx
 14005 00000796 894D39                  		mov     [di+39h], cx
 14006 00000799 894D23                  		mov     [di+23h], cx    ; [di+BDS.extflags] ; BPB_ExtFlags
 14007 0000079C 894D25                  		mov     [di+25h], cx    ; [di+BDS.fsver] ; BPB_FSVer
 14008                                  
 14009 0000079F 49                      		dec     cx              ; -1 ; 0FFFFFFFFh
 14010 000007A0 894D2B                  		mov     [di+2Bh], cx    ; [di+BDS.fsinfo] ; BPB_FSInfo
 14011 000007A3 894D2D                  		mov     [di+2Dh], cx    ; [di+BDS.bkbootsec] ; BPB_BkBootSec
 14012                                  		
 14013 000007A6 1F                      		pop	ds ; 02/09/2023
 14014                                  getret:
 14015 000007A7 5B                      		pop	bx
 14016 000007A8 5A                      		pop	dx
 14017 000007A9 59                      		pop	cx
 14018                                  ;getret_exit:		; 21/12/2023
 14019 000007AA C3                      		retn
 14020                                  ; ---------------------------------------------------------------------------
 14021                                  
 14022                                  getbp_err_ret:	; before doing anything else, set set_id_flag to 0.
 14023                                  		;mov	ds:set_id_flag,	0
 14024                                  		; 19/10/2022
 14025 000007AB C606[9B04]00            		mov	byte [set_id_flag], 0
 14026 000007B0 E8F705                  		call	maperror
 14027 000007B3 EBF2                    		jmp	short getret
 14028                                  ; ---------------------------------------------------------------------------
 14029                                  ; 21/12/2023
 14030                                  ;		; we have a 3.5" diskette for which we cannot build a bpb.
 14031                                  ;		; we do	not assume any type of bpb for this medium.
 14032                                  ;
 14033                                  ;got_unknown_medium:
 14034                                  ;		;mov	ds:set_id_flag,	0
 14035                                  ;		mov	byte [set_id_flag], 0
 14036                                  ;		mov	al, 7
 14037                                  ;		stc
 14038                                  ;		jmp	short getret
 14039                                  
 14040                                  ; =============== S U B	R O U T	I N E =======================================
 14041                                  
 14042                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 14043                                  
 14044                                  ; ----------------------------------------------------------------
 14045                                  ; read in the boot sector. set carry if error in reading sector.
 14046                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
 14047                                  ;
 14048                                  ;	assumes es:di -> bds, ds-> Bios_Data
 14049                                  ; ----------------------------------------------------------------
 14050                                  
 14051                                  ; 10/03/2019 - Retro DOS v4.0
 14052                                  
 14053                                  ; 30/12/2022 - Retro DOS v4.2
 14054                                  ; (MSDOS 6.21 IO.SYS, BIOSCODE:06C3h)
 14055                                  ; ((MSDOS 6.22 IO.SYS, BIOSCODE:06C3h)) ; 22/12/2023
 14056                                  
 14057                                  ; 22/12/2023 - Retro DOS v5.0
 14058                                  ; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:07C6h)
 14059                                  
 14060                                  readbootsec:	
 14061 000007B5 B600                    		mov	dh, 0		; head 0
 14062 000007B7 B90100                  		mov	cx, 1		; cylinder 0, sector 1
 14063 000007BA E8FB00                  		call	read_sector
 14064 000007BD 7243                    		jb	short err_ret
 14065 000007BF 31DB                    		xor	bx, bx		; assume valid boot sector
 14066                                  
 14067                                  		; put a sanity check for the boot sector in here to detect
 14068                                  		; boot sectors that do not have valid bpbs. we examine the
 14069                                  		; first two bytes - they must contain a long jump (69h) or a
 14070                                  		; short jump (EBh) followed by a nop (90h), or a short jump
 14071                                  		; (E9h). if this test is passed, we further check by examining
 14072                                  		; the signature at the end of the boot sector for the word
 14073                                  		; AA55h. if the signature is not present, we examine the media
 14074                                  		; descriptor byte to see if it is valid. for dos 3.3, this
 14075                                  		; logic is modified a little bit. we are not going to check
 14076                                  		; signature. instead we are going to sanity check the media
 14077                                  		; byte in bpb regardless of the validity of signature. this is
 14078                                  		; to save the already developed commercial products that have
 14079                                  		; good jump instruction and signature but with the false bpb
 14080                                  		; informations
 14081                                  
 14082                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
 14083                                  
 14084                                  		; 02/09/2023
 14085                                  		; 19/10/2022
 14086                                  		;cmp	byte [disksector], 69h ; is it a direct jump?
 14087                                  		;jz	short check_bpb_mediabyte ; don't need to find a nop
 14088                                  		;cmp	byte [disksector], 0E9h ; dos 2.0 jump?
 14089                                  		;jz	short check_bpb_mediabyte ; no need for	nop
 14090                                  		;cmp	byte [disksector], 0EBh ; how about a short jump?
 14091                                  		;jnz	short invalidbootsec
 14092                                  		;cmp	byte [disksector+2], 90h ; is next one a nop?
 14093                                  		;jnz	short invalidbootsec
 14094                                  
 14095                                  		; 02/09/2023 (PCDOS 7.1)
 14096 000007C1 A0[5201]                		mov	al, [disksector]
 14097 000007C4 3C69                    		cmp	al, 69h		; is it a direct jump?
 14098 000007C6 740F                    		je	short check_bpb_mediabyte
 14099                                  					; don't need to find a nop
 14100 000007C8 3CE9                    		cmp	al, 0E9h	; dos 2.0 jump?
 14101 000007CA 740B                    		je	short check_bpb_mediabyte
 14102                                  					; no need for nop
 14103 000007CC 3CEB                    		cmp	al, 0EBh	; how about a short jump?
 14104 000007CE 7530                    		jne	short invalidbootsec
 14105 000007D0 803E[5401]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
 14106 000007D5 7529                    		jne	short invalidbootsec
 14107                                  
 14108                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14109                                  ;
 14110                                  ;; 10/03/2019
 14111                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
 14112                                  ;;
 14113                                  ;; Don't have to perform the following signature check since
 14114                                  ;; we need to check the media byte even with the good signatured diskette.
 14115                                  ;;
 14116                                  ;;check_signature:
 14117                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
 14118                                  ;;							 ; disk or 1.x media.
 14119                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
 14120                                  ;;					       ; may need some special handling
 14121                                  
 14122                                  ; check for non-ibm disks which do not have the signature AA55h at the
 14123                                  ; end of the boot sector, but still have a valid boot sector. this is done
 14124                                  ; by examining the media descriptor in the boot sector.
 14125                                  
 14126                                  		; 19/10/2022
 14127                                  check_bpb_mediabyte:
 14128 000007D7 A0[6701]                		mov	al, [disksector+15h]
 14129                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 14130 000007DA 50                      		push	ax ; 02/09/2023
 14131 000007DB 24F0                    		and	al, 0F0h
 14132 000007DD 3CF0                    		cmp	al, 0F0h	; allow	for strange media
 14133 000007DF 58                      		pop	ax ; 02/09/2023
 14134 000007E0 751E                    		jnz	short invalidbootsec
 14135                                  
 14136                                  ; there were some (apparently a lot of them) diskettes that had been formatted
 14137                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
 14138                                  ; sectors. these are specifically diskettes that were formatted in drives
 14139                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
 14140                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
 14141                                  ; in dos. in order to support them, we have to introduce a "hack" that will
 14142                                  ; help our build bpb routine to recognise these specific cases, and to
 14143                                  ; set up out copy of the bpb accordingly.
 14144                                  ; we do this by checking to see if the boot sector is off a diskette that
 14145                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
 14146                                  ; sec/clus field to 1. if not, we carry on as normal.
 14147                                  
 14148                                  checksinglesided:
 14149                                  		;mov	al, [disksector+15h]
 14150                                  		; 02/09/2023
 14151                                  		; al = [disksector+15h]
 14152 000007E2 3CF0                    		cmp	al, 0F0h
 14153 000007E4 741B                    		jz	short gooddsk
 14154 000007E6 A801                    		test	al, 1
 14155 000007E8 7517                    		jnz	short gooddsk
 14156 000007EA 813E[5A01]332E          		cmp	word [disksector+8], 2E33h ; "3."
 14157 000007F0 7507                    		jnz	short mustbeearlier
 14158 000007F2 803E[5C01]32            		cmp	byte [disksector+0Ah], 32h ; "2"
 14159 000007F7 7308                    		jnb	short gooddsk
 14160                                  
 14161                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
 14162                                  
 14163                                  mustbeearlier:				
 14164 000007F9 C606[5F01]01            		mov	byte [disksector+0Dh], 1
 14165                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 14166 000007FE EB01                    		jmp	short gooddsk
 14167                                  ; ---------------------------------------------------------------------------
 14168                                  
 14169                                  invalidbootsec:				
 14170 00000800 43                      		inc	bx		; indicate that boot sector invalid
 14171                                  		; 10/12/2022
 14172                                  movbpb_ret:
 14173                                  gooddsk:				
 14174 00000801 F8                      		clc
 14175                                  err_ret:
 14176 00000802 C3                      		retn
 14177                                  ; ---------------------------------------------------------------------------
 14178                                  
 14179                                  		; 10/12/2022
 14180                                  ;err_ret:				
 14181                                  		;retn
 14182                                  
 14183                                  ; =============== S U B	R O U T	I N E =======================================
 14184                                  
 14185                                  ; 15/10/2022
 14186                                  ; ---------------------------------------------------------------------------
 14187                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
 14188                                  ; getbp routine at has1
 14189                                  ;
 14190                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
 14191                                  ; serial number, volume label, file system id in bds according to
 14192                                  ; the boot record. after that, this routine will set the set_id_flag to 2
 14193                                  ; to signal that volume label is set already from the extended boot record
 14194                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
 14195                                  ; the volume label in the root directory.)
 14196                                  ; ---------------------------------------------------------------------------
 14197                                  
 14198                                  ; 10/03/2019 - Retro DOS v4.0
 14199                                  
 14200                                  ; 22/12/2023
 14201                                  %if 0
 14202                                  		; 19/10/2022
 14203                                  movbpb:
 14204                                  		mov	dh, [disksector+0Dh]
 14205                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 14206                                  					; sectors per unit
 14207                                  		mov	bh, [disksector+11h]
 14208                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
 14209                                  					; number of directory entries
 14210                                  		mov	cx, [disksector+13h]
 14211                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
 14212                                  					; size of drive
 14213                                  		mov	ah, [disksector+15h]
 14214                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 14215                                  					; media	descriptor
 14216                                  		mov	al, [disksector+16h];
 14217                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
 14218                                  					; number of fat	sectors
 14219                                  		mov	bl, [disksector+18h]
 14220                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
 14221                                  					; sectors per track
 14222                                  		mov	dl, [disksector+1Ah]
 14223                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
 14224                                  					; number of heads
 14225                                  %else
 14226                                  		; 22/12/2023 - Retro DOS v5.0
 14227                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:0814h)
 14228                                  		;;;
 14229                                  movbpb:
 14230 00000803 57                      		push	di
 14231 00000804 83C706                  		add	di, 6		; BDS+6 = BDS.BPB
 14232 00000807 8D36[5D01]              		lea	si, [disksector+0Bh]
 14233 0000080B B93500                  		mov	cx, 53		; copy bios parameters block
 14234                                  					; from BPB_BytsPerSec to (FAT32) BS_DrvNum (excluded)
 14235 0000080E FC                      		cld
 14236 0000080F F3A4                    		rep movsb
 14237 00000811 8B4CD3                  		mov	cx, [si-45]	; si = disksector+64 -> 64-45 = 19
 14238                                  					; disksektor+19 = BPB_TotSec16
 14239 00000814 31C0                    		xor	ax, ax
 14240 00000816 E308                    		jcxz	movbpb_bigdisk
 14241 00000818 26894DE0                		mov	[es:di-32], cx	; write 16 bit total sectors
 14242                                  					; to 32 bit total sectors field
 14243 0000081C 268945E2                		mov	[es:di-30], ax	; BPB_TotalSec32+2 (BDS offset 29, BPB offset 23)
 14244                                  movbpb_bigdisk:
 14245 00000820 3944D6                  		cmp	[si-42], ax     ; BPB_FATSz16 = disksector+22
 14246 00000823 740F                    		jz	short movbpb_fat32
 14247                                  movbpb_fat:
 14248 00000825 83EF1C                  		sub	di, 28		; di = BDS offset 31 (BPB offset 25)
 14249 00000828 B10C                    		mov	cl, 12
 14250                                  		;mov	cx, 12	; clear 12 byte extended BDS (FAT32) fields
 14251                                  					; (which are used only for FAT32 disks)
 14252 0000082A F3AA                    		rep stosb
 14253 0000082C 48                      		dec	ax		; -1 ; 0FFFFh
 14254 0000082D AB                      		stosw			; set BDS offset 43 (dword) to -1
 14255                                  					; dword [BDS.BPB_FSInfo] = 0FFFFFFFFh
 14256 0000082E AB                      		stosw
 14257 0000082F 40                      		inc	ax		; ax = 0
 14258 00000830 B10C                    		mov	cl, 12		
 14259                                  		;mov	cx, 12		; clear BDS offset 47 to 59
 14260                                  					; (BPB offset 41 to 53) (disksector offset 52 to 64)
 14261 00000832 F3AA                    		rep stosb
 14262                                  movbpb_fat32:
 14263 00000834 5F                      		pop	di
 14264                                  %endif
 14265                                  		;;;
 14266                                  
 14267 00000835 803E[9B04]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
 14268 0000083A 75C5                    		jnz	short movbpb_ret
 14269 0000083C E81200                  		call	mov_media_ids
 14270 0000083F 7205                    		jb	short movbpb_conv ; conventional boot record?
 14271 00000841 C606[9B04]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
 14272                                  movbpb_conv:
 14273 00000846 803E[7700]01            		cmp	byte [fhave96], 1
 14274 0000084B 75B4                    		jnz	short movbpb_ret
 14275 0000084D E83B14                  		call	resetchanged	; reset	flags in bds to	not fchanged.
 14276                                  		; 10/12/2022
 14277                                  		; cf = 0
 14278                                  ;movbpb_ret:
 14279                                  		;clc
 14280 00000850 C3                      		retn
 14281                                  		
 14282                                  ; =============== S U B	R O U T	I N E =======================================
 14283                                  
 14284                                  ;copy the boot_serial number, volume id, and filesystem id from the
 14285                                  ;***extended boot record*** in ds:disksector to the bds table pointed
 14286                                  ;by es:di.
 14287                                  
 14288                                  ;in.) es:di -> bds
 14289                                  ;     ds:disksector = valid extended boot record.
 14290                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
 14291                                  ;      the boot record information.
 14292                                  ;     carry flag set if not an extended bpb.
 14293                                  ;     all registers saved except the flag.
 14294                                  
 14295                                  ; 22/12/2023
 14296                                  %if 0
 14297                                  		; 19/10/2022
 14298                                  mov_media_ids:		
 14299                                  		cmp	byte [disksector+26h], 29h
 14300                                  					; [disksector+EXT_BOOT.SIG],
 14301                                  					; EXT_BOOT_SIGNATURE
 14302                                  		jnz	short mmi_not_ext
 14303                                  		push	cx
 14304                                  		mov	cx, [disksector+27h]
 14305                                  					; [disksector+EXT_BOOT.SERIAL]
 14306                                  		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 14307                                  		mov	cx, [disksector+29h]
 14308                                  					; [disksector+EXT_BOOT.SERIAL+2]
 14309                                  		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 14310                                  		push	di
 14311                                  		push	si
 14312                                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 14313                                  		mov	si, disksector+2Bh
 14314                                  		;mov	si, (offset disksector+2Bh) ;
 14315                                  					; disksector+EXT_BOOT.VOL_LABEL
 14316                                  		add	di, 75		; BDS.volid
 14317                                  		rep movsb
 14318                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 14319                                  		; 10/12/2022
 14320                                  		mov	cl, 8 ; cx = 8
 14321                                  		mov	si, disksector+36h
 14322                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
 14323                                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 14324                                  		rep movsb
 14325                                  		pop	si
 14326                                  		pop	di
 14327                                  		pop	cx
 14328                                  		; 10/12/2022
 14329                                  		; cf = 0
 14330                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
 14331                                  				; (20/09/2022)
 14332                                  		retn
 14333                                  %else
 14334                                  		; 22/12/2023 - Retro DOS v5.0
 14335                                  		; (PCDOS 7.1 IBMBIO.COM, BIOSCODE:0865h)
 14336                                  		;;;		
 14337                                  mov_media_ids:
 14338 00000851 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 14339 00000856 7507                    		jnz	short mmi_chk_fat
 14340 00000858 803E[9401]29            		cmp	byte [disksector+42h], 29h
 14341                                  					; [disksector+FAT32_EXT_BOOT.SIG],
 14342                                  					; EXT_BOOT_SIGNATURE
 14343 0000085D EB05                    		jmp	short mmi_chk_fat32
 14344                                  mmi_chk_fat:
 14345 0000085F 803E[7801]29            		cmp	byte [disksector+26h], 29h
 14346                                  					; [disksector+EXT_BOOT.SIG],EXT_BOOT_SIGNATURE
 14347                                  mmi_chk_fat32:
 14348 00000864 7543                    		jnz	short mmi_not_ext
 14349 00000866 51                      		push	cx
 14350 00000867 50                      		push	ax
 14351 00000868 57                      		push	di
 14352 00000869 56                      		push	si
 14353 0000086A 1E                      		push	ds
 14354 0000086B 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 14355 00000870 750C                    		jnz	short mmi_fat
 14356                                  
 14357                                  mmi_fat32:				; FAT32 file system
 14358                                  		;lds	cx, dword ptr ds:disksector+43h
 14359 00000872 C50E[9501]              		lds	cx, [disksector+43h]	; BS_FAT32_VolID
 14360 00000876 BE[9901]                		mov	si, disksector+47h	; BS_FAT32_VolLab
 14361 00000879 B8[A401]                		mov	ax, disksector+52h	; BS_FAT32_FilSysType
 14362 0000087C EB0A                    		jmp	short mmi_do
 14363                                  
 14364                                  mmi_fat:
 14365                                  		;lds	cx, dword ptr ds:disksector+27h
 14366 0000087E C50E[7901]              		lds	cx, [disksector+27h]	; BS_VolID
 14367 00000882 BE[7D01]                		mov	si, disksector+2Bh	; BS_VolLab
 14368 00000885 B8[8801]                		mov	ax, disksector+36h	; BS_FilSysType
 14369                                  mmi_do:
 14370 00000888 26898D8900              		mov	[es:di+89h], cx	; [es:di+BDS.vol_serial]
 14371                                  					; (BDS offset 137)
 14372 0000088D 268C9D8B00              		mov	[es:di+8Bh], ds	; [es:di+BDS.vol_serial+2]
 14373 00000892 1F                      		pop	ds
 14374 00000893 B90B00                  		mov	cx, 11
 14375 00000896 83C77D                  		add	di, 125		; di = di+125 = BDS.volid
 14376 00000899 F3A4                    		rep movsb
 14377 0000089B B108                    		mov	cl, 8		; di = di+136
 14378 0000089D 89C6                    		mov	si, ax		; BS_FilSysType or BS_FAT32_FilSysType
 14379 0000089F 83C705                  		add	di, 5		; di = di+141 = BDS.filesys_id
 14380 000008A2 F3A4                    		rep movsb
 14381 000008A4 5E                      		pop	si
 14382 000008A5 5F                      		pop	di
 14383 000008A6 58                      		pop	ax
 14384 000008A7 59                      		pop	cx
 14385                                  		;clc	; this clc is not required (16/06/2019 - Erdogan Tan)
 14386                                  			; (20/09/2022 - 27/06/2023) MSDOS 6.21 .. PCDOS 7.1
 14387 000008A8 C3                      		retn
 14388                                  %endif
 14389                                  		;;;
 14390                                  	
 14391                                  ; ---------------------------------------------------------------------------
 14392                                  
 14393                                  mmi_not_ext:				
 14394 000008A9 F9                      		stc
 14395 000008AA C3                      		retn
 14396                                  
 14397                                  ; =============== S U B	R O U T	I N E =======================================
 14398                                  
 14399                                  ; 15/10/2022
 14400                                  ; --------------------------------------------------------------
 14401                                  ; read in the fat sector and get the media byte from it.
 14402                                  ; input : es:di -> bds
 14403                                  ; output:
 14404                                  ;	  carry set if an error occurs, ax contains error code.
 14405                                  ;	  otherwise, ah contains media byte on exit
 14406                                  ; --------------------------------------------------------------
 14407                                  
 14408                                  readfat:	
 14409                                  		;mov	dh, 0
 14410                                  		; 10/12/2022
 14411 000008AB 30F6                    		xor	dh, dh
 14412 000008AD B90200                  		mov	cx, 2		; head 0
 14413                                  					; cylinder 0, sector 2
 14414 000008B0 E80500                  		call	read_sector
 14415 000008B3 7202                    		jb	short bad_fat_ret
 14416 000008B5 8A27                    		mov	ah, [bx]	; media	byte
 14417                                  bad_fat_ret:				
 14418 000008B7 C3                      		retn
 14419                                  
 14420                                  ; =============== S U B	R O U T	I N E =======================================
 14421                                  
 14422                                  ; 15/10/2022
 14423                                  
 14424                                  ; ---------------------------------------------------------------------------
 14425                                  ; read a single sector into the temp buffer.
 14426                                  ; perform three retries in case of error.
 14427                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
 14428                                  ;		cx has sector and cylinder
 14429                                  ;		dh has head
 14430                                  ;		es:di has bds
 14431                                  ;		ds has Bios_Data
 14432                                  ;
 14433                                  ;   outputs:	carry clear
 14434                                  ;		    Bios_Data:bx point to sector
 14435                                  ;		       (note: some callers assume location of buffer)
 14436                                  ;
 14437                                  ;		carry set
 14438                                  ;		    ax has rom error code
 14439                                  ;
 14440                                  ; register bp is preserved.
 14441                                  ; ---------------------------------------------------------------------------
 14442                                  
 14443                                  ; 10/03/2019 - Retro DOS v4.0
 14444                                  ; 22/12/2023 - Retro DOS v5.0
 14445                                  
 14446                                  		; 19/10/2022
 14447                                  read_sector:
 14448 000008B8 55                      		push	bp
 14449 000008B9 BD0300                  		mov	bp, 3		; make 3 attempts
 14450 000008BC 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14451 000008C0 BB[5201]                		mov	bx, disksector	; get es:bx to point to	buffer
 14452                                  rd_ret:
 14453 000008C3 06                      		push	es
 14454 000008C4 1E                      		push	ds
 14455 000008C5 07                      		pop	es
 14456 000008C6 B80102                  		mov	ax, 201h
 14457 000008C9 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 14458                                  					; AL = number of sectors to read, CH = track, CL = sector
 14459                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 14460                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 14461 000008CB 07                      		pop	es
 14462 000008CC 734A                    		jnb	short okret2
 14463                                  rd_rty:
 14464 000008CE E81105                  		call	again		; reset	disk, decrement	bp, preserve ax
 14465 000008D1 7442                    		jz	short err_rd_ret
 14466                                  
 14467                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14468 000008D3 26F6453F01              		test	byte [es:di+3Fh], 1
 14469                                  		;test	byte [es:di+23h], 1
 14470                                  		;;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
 14471                                  					; fnon_removable
 14472 000008D8 75E9                    		jnz	short rd_ret
 14473 000008DA 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14474 000008DF 7510                    		jnz	short rd_skip1_dpt
 14475 000008E1 50                      		push	ax
 14476 000008E2 1E                      		push	ds		; for retry, set the head settle time to 0Fh
 14477 000008E3 C536[2D01]              		lds	si, [dpt]
 14478                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 14479                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
 14480                                  		;			; NORMSETTLE
 14481                                  		; 12/12/2022
 14482 000008E7 B00F                    		mov	al, 15
 14483 000008E9 864409                  		xchg	al, [si+9]
 14484                                  		; 
 14485 000008EC 1F                      		pop	ds
 14486 000008ED A2[2A01]                		mov	[save_head_sttl], al
 14487 000008F0 58                      		pop	ax
 14488                                  rd_skip1_dpt:
 14489 000008F1 06                      		push	es
 14490 000008F2 1E                      		push	ds
 14491 000008F3 07                      		pop	es
 14492 000008F4 B80102                  		mov	ax, 201h
 14493 000008F7 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 14494                                  					; AL = number of sectors to read, CH = track, CL = sector
 14495                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 14496                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 14497 000008F9 07                      		pop	es
 14498 000008FA 9C                      		pushf
 14499 000008FB 803E[A905]00            		cmp	byte [media_set_for_format], 0
 14500 00000900 750E                    		jnz	short rd_skip2_dpt
 14501 00000902 50                      		push	ax
 14502 00000903 A0[2A01]                		mov	al, [save_head_sttl]
 14503 00000906 1E                      		push	ds
 14504 00000907 C536[2D01]              		lds	si, [dpt]
 14505 0000090B 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
 14506 0000090E 1F                      		pop	ds
 14507 0000090F 58                      		pop	ax
 14508                                  rd_skip2_dpt:
 14509 00000910 9D                      		popf
 14510 00000911 7305                    		jnb	short okret2
 14511 00000913 EBB9                    		jmp	short rd_rty
 14512                                  ; ---------------------------------------------------------------------------
 14513                                  
 14514                                  err_rd_ret:
 14515 00000915 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
 14516                                  					; return error
 14517 00000917 F9                      		stc
 14518                                  
 14519                                  ; update information pertaining to last drive accessed, time of access, last
 14520                                  ; track accessed in that drive.
 14521                                  
 14522                                  okret2:
 14523 00000918 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
 14524 0000091C 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
 14525                                  		
 14526                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14527 00000920 26886D78                		mov	[es:di+78h], ch
 14528                                  		;mov	[es:di+46h], ch	; [es:di+BDS.track]
 14529                                  					; save last track accessed on this drive
 14530                                  					; preserve flags in case error occurred
 14531 00000924 9C                      		pushf
 14532 00000925 E89A04                  		call	set_tim
 14533 00000928 9D                      		popf			; restore flags
 14534 00000929 5D                      		pop	bp
 14535 0000092A C3                      		retn
 14536                                  
 14537                                  ;----------------------------------------------------------------------------
 14538                                  ;	disk open/close routines
 14539                                  ;----------------------------------------------------------------------------
 14540                                  
 14541                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
 14542 0000092B 803E[7700]00            		cmp	byte [fhave96], 0
 14543 00000930 7407                    		jz	short dsk_open_exit ; done if no changeline support
 14544 00000932 E86FFC                  		call	SetDrive	; get bds for drive
 14545                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14546 00000935 26FF453C                		inc	word [es:di+3Ch] ; [es:di+BDS.opcnt] ; BDS offset 60
 14547                                  		;inc	word [es:di+20h] ; [es:di+BDS.opcnt]
 14548                                  dsk_open_exit:
 14549                                  		; 10/12/2022
 14550                                  		; cf = 0			
 14551                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 14552                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 14553 00000939 C3                      		retn
 14554                                  ; ---------------------------------------------------------------------------
 14555                                  
 14556                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
 14557 0000093A 803E[7700]00            		cmp	byte [fhave96], 0
 14558 0000093F 740E                    		jz	short exitjx	; done if no changeline	support
 14559 00000941 E860FC                  		call	SetDrive	; get bds for drive
 14560                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14561 00000944 26837D3C00              		cmp	word [es:di+3Ch], 0 ; [es:di+BDS.opcnt] ; BDS off 60
 14562                                  		;cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 14563 00000949 7404                    		jz	short exitjx	; watch	out for	wrap
 14564                                  		; 22/12/2023
 14565 0000094B 26FF4D3C                		dec	word [es:di+3Ch]
 14566                                  		;dec	word [es:di+20h]
 14567                                  exitjx:
 14568                                  		; 10/12/2022
 14569                                  		; cf = 0
 14570                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 14571                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 14572 0000094F C3                      		retn
 14573                                  
 14574                                  ;----------------------------------------------------------------------------
 14575                                  ;		disk removable routine
 14576                                  ;----------------------------------------------------------------------------
 14577                                  
 14578                                  		; al is	unit #
 14579                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
 14580 00000950 E851FC                  		call	SetDrive	; get bds for this drive
 14581                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14582                                  		;test	byte [es:di+BDS.flags], fnon_removable
 14583 00000953 26F6453F01              		test	byte [es:di+3Fh], 1 ; [es:di+BDS.flags], fnon_removable
 14584 00000958 74F5                    		jz	short exitjx
 14585                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags], fnon_removable
 14586                                  		;;jnz	short x_bus_exit ; non_rem
 14587                                  		;jnz	short non_rem	; 15/10/2022
 14588                                  		;; 10/12/2022
 14589                                  		;; cf = 0
 14590                                  		;;clc			; CF is already ZERO here
 14591                                  		;			; 15/10/2022
 14592                                  		;retn
 14593                                  ; ---------------------------------------------------------------------------
 14594                                  
 14595                                  non_rem:
 14596                                  x_bus_exit:
 14597 0000095A B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
 14598                                  					; return busy status
 14599 0000095C F9                      		stc
 14600                                  dsk_ret:
 14601 0000095D C3                      		retn
 14602                                  
 14603                                  ;----------------------------------------------------------------------------
 14604                                  ;		disk i/o routines
 14605                                  ;----------------------------------------------------------------------------
 14606                                  
 14607                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
 14608                                  		;mov	word [wrtverify], 103h
 14609                                  		; 19/10/2022
 14610 0000095E C706[2001]0301          		mov	word [rflag], 103h
 14611                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
 14612 00000964 EB06                    		jmp	short dsk_cl
 14613                                  ; ---------------------------------------------------------------------------
 14614                                  
 14615                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
 14616                                  		;mov	word [wrtverify], 3
 14617                                  		; 19/10/2022
 14618 00000966 C706[2001]0300          		mov	word [rflag], 3
 14619                                  		;mov	word ptr ds:rflag, 3 ; romwrite
 14620                                  dsk_cl:
 14621 0000096C E8A400                  		call	diskio		; romwrite
 14622                                  ; ---------------------------------------------------------------------------
 14623                                  
 14624                                  dsk_io:
 14625 0000096F 73EC                    		jnb	short dsk_ret
 14626 00000971 E963F7                  		jmp	bc_err_cnt
 14627                                  ; ---------------------------------------------------------------------------
 14628                                  
 14629                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
 14630 00000974 E89700                  		call	diskrd
 14631 00000977 EBF6                    		jmp	short dsk_io
 14632                                  
 14633                                  ; =============== S U B	R O U T	I N E =======================================
 14634                                  
 14635                                  ; 15/10/2022
 14636                                  ; 10/03/2019 - Retro DOS v4.0
 14637                                  ; 22/12/2023 - Retro DOS v5.0
 14638                                  
 14639                                  ;-----------------------------------------------------------
 14640                                  ; miscellaneous odd jump routines. 
 14641                                  ; moved out of mainline for speed.
 14642                                  
 14643                                  ; if we have a system where we have virtual drives, we need 
 14644                                  ; to prompt the user to place the correct disk in the drive.
 14645                                  ;
 14646                                  ;	assume es:di -> bds, ds:->Bios_Data
 14647                                  ;-----------------------------------------------------------
 14648                                  
 14649                                  		; 19/10/2022
 14650                                  checksingle:
 14651 00000979 50                      		push	ax
 14652 0000097A 53                      		push	bx
 14653                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14654 0000097B 268B5D3F                		mov	bx, [es:di+3Fh]	; [es:di+BDS.flags]
 14655                                  		;mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 14656                                  
 14657                                  ; if hard drive, cannot change disk.
 14658                                  ; if current owner of physical drive, no need to change diskette.
 14659                                  
 14660 0000097F F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 14661 00000982 7573                    		jnz	short singleret
 14662 00000984 F6C310                  		test	bl, 10h		; fi_am_mult
 14663                                  					; is there a drive sharing this	physical drive?
 14664 00000987 746E                    		jz	short singleret
 14665                                  
 14666                                  ; look for the previous owner of this physical drive
 14667                                  ; and reset its ownership flag.
 14668                                  
 14669 00000989 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 14670                                  					; get physical drive number
 14671 0000098D 06                      		push	es		; preserve pointer to current bds
 14672 0000098E 57                      		push	di
 14673 0000098F C43E[1901]              		les	di, [start_bds] ; get first bds
 14674                                  scan_list:
 14675 00000993 26384504                		cmp	[es:di+4], al
 14676 00000997 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 14677 00000999 B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 14678                                  		; 22/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 14679 0000099B 26845D3F                		test	[es:di+3Fh], bl	; [es:di+BDS.flags]
 14680                                  		;test	[es:di+23h], bl
 14681 0000099F 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 14682 000009A1 26305D3F                		xor	[es:di+3Fh], bl
 14683                                  		;xor	[es:di+23h], bl	; reset	ownership flag
 14684 000009A5 5F                      		pop	di		; restore pointer to current bds
 14685 000009A6 07                      		pop	es
 14686 000009A7 26085D3F                		or	[es:di+3Fh], bl
 14687                                  		;or	[es:di+23h], bl	; ; set	ownership flag
 14688                                  
 14689                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 14690                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 14691                                  ; in this case.
 14692 000009AB 803E[7A00]01            		cmp	byte [fsetowner], 1
 14693 000009B0 7517                    		jnz	short not_fsetowner
 14694                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 14695 000009B2 26807D0400              		cmp	byte [es:di+4], 0
 14696 000009B7 753E                    		jnz	short singleret
 14697 000009B9 268A4505                		mov	al, [es:di+5]
 14698                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 14699                                  					; get the DOS drive letter
 14700 000009BD 06                      		push	es
 14701 000009BE 8E06[1A00]              		mov	es, [zeroseg]
 14702 000009C2 26A20405                		mov	[es:LSTDRV], al
 14703                                  		;mov	es:504h, al	; [es:LSTDRV]
 14704                                  					; set up sdsb
 14705 000009C6 07                      		pop	es		; restore bds pointer
 14706 000009C7 EB2E                    		jmp	short singleret
 14707                                  ; ---------------------------------------------------------------------------
 14708                                  
 14709                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 14710                                  ; we now check to see if we are in a single drive system and the application
 14711                                  ; has "cleverly" diddled the sdsb
 14712                                  
 14713                                  not_fsetowner:
 14714 000009C9 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 14715 000009CE 7517                    		jnz	short ignore_sdsb
 14716 000009D0 50                      		push	ax
 14717 000009D1 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 14718 000009D5 88C4                    		mov	ah, al
 14719 000009D7 06                      		push	es
 14720 000009D8 8E06[1A00]              		mov	es, [zeroseg]
 14721 000009DC 2686060405              		xchg	al, [es:LSTDRV]
 14722                                  		;xchg	al, es:504h	; [es:LSTDRV]
 14723                                  					; then swap(curr_drv,req_drv)
 14724 000009E1 07                      		pop	es
 14725 000009E2 38C4                    		cmp	ah, al		; else
 14726 000009E4 58                      		pop	ax		; swap(curr_drv,req_drv)
 14727 000009E5 7410                    		jz	short singleret	; issue	swap_dsk_msg
 14728                                  ignore_sdsb:
 14729 000009E7 E8B710                  		call	swpdsk
 14730 000009EA EB0B                    		jmp	short singleret
 14731                                  ; ---------------------------------------------------------------------------
 14732                                  
 14733                                  scan_skip:
 14734 000009EC 26C43D                  		les	di, [es:di]
 14735                                  		;les	di, es:[di]	; [es:di+BDS.link]
 14736                                  					; go to	next bds
 14737 000009EF 83FFFF                  		cmp	di, 0FFFFh ; -1	; end of list?
 14738 000009F2 759F                    		jnz	short scan_list	; continue until hit end of list
 14739 000009F4 F9                      		stc
 14740 000009F5 5F                      		pop	di		; restore current bds
 14741 000009F6 07                      		pop	es
 14742                                  singleret:
 14743 000009F7 5B                      		pop	bx
 14744 000009F8 58                      		pop	ax
 14745 000009F9 C3                      		retn
 14746                                  
 14747                                  ; 22/12/2023
 14748                                  %if 0
 14749                                  ; ---------------------------------------------------------------------------
 14750                                  
 14751                                  baddrive:
 14752                                  		mov	al, 8		; sector not found
 14753                                  		jmp	short baddrive_ret
 14754                                  %endif
 14755                                  
 14756                                  ; ---------------------------------------------------------------------------
 14757                                  
 14758                                  unformatteddrive:
 14759 000009FA B007                    		mov	al, 7		; unknown media
 14760                                  ;baddrive_ret:
 14761 000009FC F9                      		stc
 14762                                  ; ---------------------------------------------------------------------------
 14763                                  
 14764                                  ioret:
 14765 000009FD C3                      		retn
 14766                                  
 14767                                  ; ---------------------------------------------------------------------------
 14768                                  		
 14769                                  		; 22/12/2023 - Retro DOS v5.0
 14770                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A1Bh
 14771                                  
 14772 000009FE 10                      LBA_Packet:	db 16			; ...
 14773                                  					; DAP buffer
 14774 000009FF 00                                      db 0
 14775 00000A00 0000                    dap_block_cnt:	dw 0			; ...
 14776 00000A02 00000000                dap_trans_buf:	dd 0			; ...
 14777 00000A06 00000000                dap_lba_value:	dd 0			; ...
 14778 00000A0A 00000000                		dd 0
 14779                                  
 14780                                  ; ---------------------------------------------------------------------------
 14781                                  
 14782                                  ; 15/10/2022
 14783                                  
 14784                                  ; ---------------------------------------------------------------------------
 14785                                  ;	disk i/o handler
 14786                                  ;
 14787                                  ;	al = drive number (0-6)
 14788                                  ;	ah = media descriptor
 14789                                  ;	cx = sector count
 14790                                  ;	dx = first sector (low)
 14791                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 14792                                  ;	ds = cs
 14793                                  ;	es:di = transfer address
 14794                                  ;	[rflag]=operation (2=read, 3=write)
 14795                                  ;	[verify]=1 for verify after write
 14796                                  ;
 14797                                  ;	if successful carry flag = 0
 14798                                  ;	  else cf=1 and al contains error code
 14799                                  ; ---------------------------------------------------------------------------
 14800                                  
 14801                                  		; 12/12/2023
 14802                                  		; ds = biosdata segment (cs = bioscode segment)
 14803                                  diskrd:	
 14804                                  		;mov	ds:rflag, 2	; romread
 14805                                  		; 19/10/2022
 14806 00000A0E C606[2001]02            		mov	byte [rflag], 2 ; romread
 14807                                  
 14808                                  ; =============== S U B	R O U T	I N E =======================================
 14809                                  
 14810                                  		; 22/12/2023 - Retro DOS v5.0
 14811                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:0A30h
 14812                                  ; 22/12/2023
 14813                                  %if 0
 14814                                  		; 19/10/2022
 14815                                  diskio:
 14816                                  		mov	bx, di		; es:bx	= transfer address
 14817                                  		mov	[xfer_seg], es	; save transfer	segment
 14818                                  		call	SetDrive
 14819                                  		mov	al, [es:di+10h]	; [es:di+BDS.media]
 14820                                  		mov	[medbyt], al
 14821                                  		;jcxz	short ioret
 14822                                  		jcxz	ioret
 14823                                  
 14824                                  ; see if the media is formatted or not by checking the flags field in
 14825                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 14826                                  ; go to the error exit at label unformatteddrive.
 14827                                  
 14828                                  		test	byte [es:di+24h], 2
 14829                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 14830                                  					; unformatted_media
 14831                                  		jnz	short unformatteddrive
 14832                                  		mov	[seccnt], cx	; save sector count
 14833                                  		mov	[spsav], sp	; save sp
 14834                                  
 14835                                  ; ensure that we are trying to access valid sectors on the drive
 14836                                  
 14837                                  		mov	ax, dx
 14838                                  		xor	si, si ; 0
 14839                                  		add	dx, cx
 14840                                  		;adc	si, 0
 14841                                  		; 02/09/2023 (PCDOS 7.1)
 14842                                  		rcl	si, 1
 14843                                  		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 14844                                  					; 32 bit sector ?
 14845                                  		jz	short sanity32
 14846                                  		;cmp	si, 0
 14847                                  		; 02/09/2023
 14848                                  		or	si, si
 14849                                  		jnz	short baddrive
 14850                                  		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 14851                                  		ja	short baddrive
 14852                                  		jmp	short sanityok
 14853                                  ; ---------------------------------------------------------------------------
 14854                                  
 14855                                  sanity32:
 14856                                  		add	si, [start_sec_h]
 14857                                  		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 14858                                  		jb	short sanityok
 14859                                  		ja	short baddrive
 14860                                  		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 14861                                  		ja	short baddrive
 14862                                  sanityok:
 14863                                  		mov	dx, [start_sec_h]
 14864                                  		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 14865                                  		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 14866                                  
 14867                                  ; now dx;ax have the physical first sector.
 14868                                  ; since the following procedures is going to destroy ax, let's
 14869                                  ; save it temporarily to saved_word.
 14870                                  
 14871                                  		mov	[saved_word], ax ; save the sector number (low)
 14872                                  
 14873                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 14874                                  ; will do it because we will skip the set up stuff with hard disks.
 14875                                  
 14876                                  		push	es
 14877                                  		;mov	es, [zeroseg]
 14878                                  		; 02/09/2023
 14879                                  		xor	si, si ; 0
 14880                                  		mov	es, si
 14881                                  		les	si, [es:DSKADR]
 14882                                  		;les	si, es:78h	; [es:DSKADR]
 14883                                  					; current disk parm table
 14884                                  		mov	[dpt], si
 14885                                  		mov	[dpt+2], es
 14886                                  		pop	es
 14887                                  		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 14888                                  					; fnon_removable
 14889                                  		jnz	short skip_setup
 14890                                  		call	checksingle
 14891                                  
 14892                                  ; check to see if we have previously noted a change line. the routine
 14893                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 14894                                  ; the proper error code.
 14895                                  
 14896                                  		cmp	byte [fhave96], 0 ; do we have changeline support?
 14897                                  		jz	short diskio_nochangeline ; brif not
 14898                                  		call	checklatchio	; will do a sneaky pop stack return
 14899                                  					; if a disk error occurs
 14900                                  diskio_nochangeline:			
 14901                                  		call	iosetup		; set up tables	and variables for i/o
 14902                                  
 14903                                  ; now the settle values are correct for the following code
 14904                                  
 14905                                  skip_setup:
 14906                                  
 14907                                  ; 32 bit sector calculation.
 14908                                  ; dx:[saved_word] = starting sector number.
 14909                                  				
 14910                                  		mov	ax, dx
 14911                                  		xor	dx, dx
 14912                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 14913                                  					 ; divide by sec per track
 14914                                  		; 02/09/2023
 14915                                  		mov	cx, [es:di+13h]
 14916                                  		div	cx
 14917                                  		mov	[temp_h], ax
 14918                                  		mov	ax, [saved_word]
 14919                                  		div	cx ; 02/09/2023
 14920                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 14921                                  					; now, [temp_h]:ax = track #, dx = sector
 14922                                  		;inc	dl		; sector number	is 1 based.
 14923                                  		; 18/12/2022
 14924                                  		inc	dx
 14925                                  		mov	[cursec], dl	; save current sector
 14926                                  		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 14927                                  					; get number of	heads
 14928                                  		push	ax
 14929                                  		xor	dx, dx
 14930                                  		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 14931                                  		div	cx
 14932                                  		mov	[temp_h], ax
 14933                                  		pop	ax
 14934                                  		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 14935                                  		cmp	word [temp_h], 0
 14936                                  		ja	short baddrive_brdg
 14937                                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 14938                                  		ja	short baddrive_brdg
 14939                                  		mov	[curhd], dl	; save current head
 14940                                  		mov	[curtrk], ax	; save current track
 14941                                  
 14942                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 14943                                  ; violations here. not true. we perform the operation as if everything is
 14944                                  ; symmetric; let the int 13 handler worry about the dma violations.
 14945                                  
 14946                                  		mov	ax, [seccnt]
 14947                                  		call	block		; (cas - call/ret)
 14948                                  		;call	done
 14949                                  		;retn
 14950                                  		; 18/12/2022
 14951                                  		jmp	done
 14952                                  %else
 14953                                  		;;;	; 22/12/2023
 14954                                  diskio:
 14955 00000A13 89FB                    		mov	bx, di		; al = drive number
 14956                                  					; cx = sector count
 14957                                  					; dx = first sector (low)
 14958                                  					; [start_sec_h] = first sector (high)
 14959                                  					;
 14960                                  					; es:bx = transfer address
 14961 00000A15 8C06[A804]              		mov	[xfer_seg], es	; save transfer segment
 14962 00000A19 E888FB                  		call	SetDrive
 14963 00000A1C 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 14964 00000A20 A2[1F01]                		mov	[medbyt], al
 14965 00000A23 E3D8                    		jcxz	ioret
 14966                                  
 14967                                  ; see if the media is formatted or not by checking the flags field in
 14968                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 14969                                  ; go to the error exit at label unformatteddrive.
 14970                                  
 14971 00000A25 26F6454002              		test	byte [es:di+40h], 2 ; [es:di+BDS.flags+1]
 14972                                  					; unformatted_media
 14973 00000A2A 75CE                    		jnz	short unformatteddrive
 14974 00000A2C 890E[2201]              		mov	[seccnt], cx	; save sector count
 14975 00000A30 8926[3501]              		mov	[spsav], sp	; save sp
 14976                                  
 14977                                  ; ensure that we are trying to access valid sectors on the drive
 14978                                  
 14979 00000A34 89D0                    		mov	ax, dx
 14980 00000A36 31F6                    		xor	si, si ; 0
 14981 00000A38 01CA                    		add	dx, cx
 14982 00000A3A D1D6                    		rcl	si, 1
 14983 00000A3C 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 14984                                  					; > 32 bit sector ?
 14985 00000A41 740E                    		jz	short sanity32
 14986 00000A43 09F6                    		or	si, si
 14987 00000A45 7506                    		jnz	short baddrive
 14988 00000A47 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 14989                                  		;ja	short baddrive
 14990                                  		;jmp	short sanityok
 14991                                  		; 22/12/2023
 14992 00000A4B 7616                    		jna	short sanityok
 14993                                  ; 22/12/2023
 14994                                  %if 1
 14995                                  ; ---------------------------------------------------------------------------
 14996                                  
 14997                                  baddrive:
 14998 00000A4D B008                    		mov	al, 8		; sector not found
 14999                                  		;jmp	short baddrive_ret
 15000                                  ; ---------------------------------------------------------------------------
 15001                                  ;unformatteddrive:
 15002                                  		;mov	al, 7		; unknown media
 15003                                  baddrive_ret:
 15004 00000A4F F9                      		stc
 15005                                  ;ioret:
 15006 00000A50 C3                      		retn
 15007                                  %endif
 15008                                  
 15009                                  ; ---------------------------------------------------------------------------
 15010                                  
 15011                                  sanity32:
 15012 00000A51 0336[9C04]              		add	si, [start_sec_h]
 15013 00000A55 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 15014 00000A59 7208                    		jb	short sanityok
 15015 00000A5B 77F0                    		ja	short baddrive
 15016 00000A5D 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 15017 00000A61 77EA                    		ja	short baddrive
 15018                                  sanityok:
 15019 00000A63 8B16[9C04]              		mov	dx, [start_sec_h]
 15020 00000A67 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 15021 00000A6B 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 15022                                  
 15023                                  ; now dx;ax have the physical first sector.
 15024                                  ; since the following procedures is going to destroy ax, let's
 15025                                  ; save it temporarily to saved_word.
 15026                                  
 15027 00000A6F A3[9E04]                		mov	[saved_word], ax ; save the sector number (low)
 15028                                  
 15029                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 15030                                  ; will do it because we will skip the set up stuff with hard disks.
 15031                                  
 15032 00000A72 06                      		push	es
 15033 00000A73 31F6                    		xor	si, si ; 0
 15034 00000A75 8EC6                    		mov	es, si
 15035                                  		;les	si, dword ptr es:78h
 15036 00000A77 26C4367800              		les	si, [es:78h]	; INT 1Eh vector address
 15037                                  					; [es:DSKADR] - current disk parm table
 15038 00000A7C 8936[2D01]              		mov	[dpt], si
 15039 00000A80 8C06[2F01]              		mov	[dpt+2], es
 15040 00000A84 07                      		pop	es
 15041 00000A85 26F6453F01              		test	byte [es:di+3Fh], 1 ; [es:di+BDS.flags], fnon_removable
 15042 00000A8A 7510                    		jnz	short chk_13h_ext_flag
 15043 00000A8C E8EAFE                  		call	checksingle
 15044                                  
 15045                                  ; check to see if we have previously noted a change line. the routine
 15046                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 15047                                  ; the proper error code.
 15048                                  
 15049 00000A8F 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 15050 00000A94 7403                    		jz	short diskio_nochangeline ; brif not
 15051 00000A96 E8D610                  		call	checklatchio	; will do a sneaky pop stack return
 15052                                  					; if a disk error occurs
 15053                                  diskio_nochangeline:
 15054 00000A99 E8E000                  		call	iosetup		; set up tables and variables for i/o
 15055                                  
 15056                                  chk_13h_ext_flag:
 15057 00000A9C 26F6454004              		test	byte [es:di+40h], 4 ; [es:di+BDS.flags+1], fLBArw
 15058                                  					; LBA read/write flag
 15059 00000AA1 7539                    		jnz	short set_lbarw_1
 15060                                  		;jmp	skip_setup
 15061                                  		; 22/12/2023
 15062                                  ; ---------------------------------------------------------------------------
 15063                                  
 15064                                  ; now the settle values are correct for the following code
 15065                                  
 15066                                  skip_setup:
 15067                                  
 15068                                  ; 32 bit sector calculation.
 15069                                  ; dx:[saved_word] = starting sector number.
 15070                                  
 15071                                  		;push	bp ; ! (not necessary) ; 22/12/2023
 15072 00000AA3 92                      		xchg	ax, dx ; mov ax,dx
 15073 00000AA4 31D2                    		xor	dx, dx
 15074 00000AA6 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 15075                                  					; divide by sec per track
 15076 00000AAA F7F1                    		div	cx
 15077 00000AAC 95                      		xchg	ax, bp ; mov bp,ax
 15078 00000AAD A1[9E04]                		mov	ax, [saved_word]
 15079 00000AB0 F7F1                    		div	cx		; [es:di+BDS.secpertrack]
 15080                                  					; now, bp:ax = track #, dx = sector
 15081                                  					; sector number is 1 based.
 15082 00000AB2 42                      		inc	dx
 15083 00000AB3 8816[3101]              		mov	[cursec], dl	; save current sector
 15084 00000AB7 268B4D15                		mov	cx, [es:di+15h] ; [es:di+BDS.heads]
 15085                                  					; get number of heads
 15086                                  		; 22/12/2023
 15087                                  		;push	ax ; *
 15088 00000ABB 31D2                    		xor	dx, dx
 15089 00000ABD 95                      		xchg	ax, bp ; bp = *	; divide tracks by heads per cylinder
 15090 00000ABE F7F1                    		div	cx
 15091 00000AC0 95                      		xchg	ax, bp ; ax = *, bp = **
 15092                                  		;pop	ax ; *
 15093 00000AC1 F7F1                    		div	cx		; now, bp:ax = cylinder #, dx = head
 15094 00000AC3 09ED                    		or	bp, bp ; ** = 0 ?
 15095                                  		;pop	bp ; ! ; 22/12/2023
 15096                                  		;jnz	short baddrive_brdg
 15097                                  		; 22/12/2023
 15098 00000AC5 7586                    		jnz	short baddrive
 15099                                  
 15100                                  		;cmp	ax, 1024	; 2^10 currently maximum for track #.
 15101                                  		;jnb	short baddrive_brdg
 15102                                  		; 22/12/2023
 15103 00000AC7 80FC04                  		cmp	ah, 4	; if ax >= 4*256 (1024) 
 15104 00000ACA 7381                    		jnb	short baddrive 
 15105                                  
 15106 00000ACC 8816[3201]              		mov	[curhd], dl	; save current head
 15107 00000AD0 A3[3301]                		mov	[curtrk], ax	; save current track
 15108                                  
 15109                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 15110                                  ; violations here. not true. we perform the operation as if everything is
 15111                                  ; symmetric; let the int 13 handler worry about the dma violations.
 15112                                  
 15113 00000AD3 A1[2201]                		mov	ax, [seccnt]
 15114 00000AD6 E82101                  		call	block
 15115                                  		;call	done
 15116                                  		;retn
 15117                                  		; 22/12/2023
 15118 00000AD9 E9E700                  		jmp	done
 15119                                  		
 15120                                  ; ---------------------------------------------------------------------------
 15121                                  
 15122                                  set_lbarw_1:
 15123 00000ADC A1[9E04]                		mov	ax, [saved_word] ; check for mini disk
 15124                                  					 ; (logical dos drive/partition)
 15125 00000ADF 26837D7901              		cmp	word [es:di+79h], 1 ; [di+BDS.bdsm_ismini]
 15126                                  					    ; logical dos partition
 15127 00000AE4 750F                    		jnz	short set_lbarw_2 ; not a logical dos partition/drive
 15128 00000AE6 26837D7B00              		cmp	word [es:di+7Bh], 0 ; [di+BDS.bdsm_hidden_trks] (> 0)
 15129 00000AEB 7408                    		jz	short set_lbarw_2
 15130 00000AED 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 15131 00000AF1 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 15132                                  
 15133                                  set_lbarw_2:
 15134 00000AF5 2EA3[060A]              		mov	[cs:dap_lba_value], ax
 15135 00000AF9 2E8916[080A]            		mov	[cs:dap_lba_value+2], dx
 15136 00000AFE 2E891E[020A]            		mov	[cs:dap_trans_buf], bx
 15137 00000B03 A1[A804]                		mov	ax, [xfer_seg]
 15138 00000B06 2EA3[040A]              		mov	[cs:dap_trans_buf+2], ax
 15139 00000B0A A1[2201]                		mov	ax, [seccnt]
 15140 00000B0D 2EA3[000A]              		mov	[cs:dap_block_cnt], ax
 15141 00000B11 BD0500                  		mov	bp, 5
 15142 00000B14 892E[A304]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 15143 00000B18 892E[A504]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count
 15144                                  
 15145                                  set_lbarw_3:
 15146 00000B1C 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 15147 00000B20 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 15148 00000B24 80C440                  		add	ah, 40h
 15149 00000B27 30C0                    		xor	al, al
 15150 00000B29 1E                      		push	ds
 15151 00000B2A 0E                      		push	cs
 15152 00000B2B 1F                      		pop	ds
 15153 00000B2C BE[FE09]                		mov	si, LBA_Packet
 15154 00000B2F CD13                    		int	13h		; LBA read/write
 15155 00000B31 1F                      		pop	ds
 15156 00000B32 731A                    		jnc	short set_lbarw_7
 15157 00000B34 E8AB02                  		call	again
 15158                                  set_lbarw_9:
 15159 00000B37 7503                    		jnz	short set_lbarw_4
 15160 00000B39 E92A02                  		jmp	harderr
 15161                                  ; ---------------------------------------------------------------------------
 15162                                  
 15163                                  set_lbarw_4:
 15164                                  ;set_lbarw_9:	; 22/12/2023
 15165 00000B3C 80FCCC                  		cmp	ah, 0CCh	; Write fault (hard disk)
 15166 00000B3F 7505                    		jnz	short set_lbarw_5
 15167 00000B41 BD0100                  		mov	bp, 1
 15168 00000B44 EB06                    		jmp	short set_lbarw_6
 15169                                  ; ---------------------------------------------------------------------------
 15170                                  
 15171                                  set_lbarw_5:
 15172                                  set_lbarw_10:	; 22/12/2023
 15173 00000B46 C706[A504]0500          		mov	word [soft_ecc_cnt], 5 ; soft ecc error retry count
 15174                                  set_lbarw_6:
 15175                                  set_lbarw_11:
 15176 00000B4C EBCE                    		jmp	short set_lbarw_3
 15177                                  ; ---------------------------------------------------------------------------
 15178                                  
 15179                                  set_lbarw_7:
 15180 00000B4E 813E[2001]0301          		cmp	word [rflag], 103h
 15181 00000B54 7523                    		jnz	short set_lbarw_12
 15182 00000B56 B444                    		mov	ah, 44h
 15183 00000B58 1E                      		push	ds
 15184 00000B59 0E                      		push	cs
 15185 00000B5A 1F                      		pop	ds
 15186 00000B5B CD13                    		int	13h		; DISK - IBM/MS Extension - VERIFY SECTORS
 15187                                  					;  (DL - drive, [SI - disk address packet)
 15188 00000B5D 1F                      		pop	ds
 15189 00000B5E 7319                    		jnc	short set_lbarw_12
 15190 00000B60 80FC11                  		cmp	ah, 11h		; ECC corrected data error (soft error - retried OK )
 15191 00000B63 7506                    		jnz	short set_lbarw_8
 15192 00000B65 FF0E[A504]              		dec	word [soft_ecc_cnt]
 15193                                  ;set_lbarw_8:
 15194 00000B69 740E                    		jz	short set_lbarw_12
 15195                                  set_lbarw_8:
 15196 00000B6B E8CE07                  		call	ResetDisk
 15197 00000B6E 80FC11                  		cmp	ah, 11h
 15198 00000B71 74D9                    		jz	short set_lbarw_11
 15199 00000B73 FF0E[A304]              		dec	word [vretry_cnt]
 15200                                  		;jnz	short set_lbarw_9
 15201                                  		;jmp	harderr
 15202                                  		; 22/12/2023
 15203 00000B77 EBBE                    		jmp	short set_lbarw_9
 15204                                  
 15205                                  ; ---------------------------------------------------------------------------
 15206                                  ;		; 22/12/2023
 15207                                  ;set_lbarw_9:
 15208                                  ;		cmp	ah, 0CCh
 15209                                  ;		jnz	short set_lbarw_10
 15210                                  ;		mov	bp, 1
 15211                                  ;		jmp	short set_lbarw_11
 15212                                  ; ---------------------------------------------------------------------------
 15213                                  ;		; 22/12/2023
 15214                                  ;set_lbarw_10:
 15215                                  ;		mov	word [soft_ecc_cnt], 5 ; soft ecc error retry count
 15216                                  ;set_lbarw_11:
 15217                                  ;		jmp	short set_lbarw_3
 15218                                  ; ---------------------------------------------------------------------------
 15219                                  
 15220                                  set_lbarw_12:
 15221 00000B79 31C0                    		xor	ax, ax
 15222                                  skip_dpt_setting:	; 23/12/2023
 15223 00000B7B C3                      		retn
 15224                                  		;;;	; 22/12/2023
 15225                                  %endif
 15226                                  
 15227                                  ; ---------------------------------------------------------------------------
 15228                                  
 15229                                  		; 22/12/2023
 15230                                  ;baddrive_brdg:
 15231                                  		;jmp	baddrive
 15232                                  
 15233                                  ; =============== S U B	R O U T	I N E =======================================
 15234                                  
 15235                                  ;--------------------------------------------------------------
 15236                                  ; set the drive-last-accessed flag for diskette only.
 15237                                  ; we know that the hard disk will not be removed.
 15238                                  ; es:di -> current bds.
 15239                                  ; ds -> Bios_Data
 15240                                  ; ax,cx,si are destroyed.
 15241                                  ;--------------------------------------------------------------
 15242                                  
 15243                                  		; 23/12/2023 - Retro DOS v5.0
 15244                                  
 15245                                  		; 19/10/2022
 15246                                  iosetup:
 15247 00000B7C 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 15248 00000B80 A2[1E01]                		mov	[tim_drv], al	; save drive letter
 15249                                  
 15250                                  ; determine proper head settle values
 15251                                  
 15252 00000B83 803E[A905]00            		cmp	byte [media_set_for_format], 0
 15253 00000B88 75F1                    		jnz	short skip_dpt_setting
 15254 00000B8A A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 15255 00000B8D 1E                      		push	ds
 15256 00000B8E C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 15257 00000B92 884404                  		mov	[si+4],	al
 15258                                  		; 23/12/2023
 15259 00000B95 88C4                    		mov	ah, al
 15260 00000B97 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 15261                                  		;mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 15262 00000B9A 1F                      		pop	ds
 15263 00000B9B A2[2601]                		mov	[motorstartup], al
 15264 00000B9E 8826[2B01]              		mov	[save_eot], ah
 15265                                  
 15266                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 15267                                  ; motor start time to 4. this checking for every i/o is going to affect
 15268                                  ; performance across the board, but is necessary!!
 15269                                  
 15270 00000BA2 1E                      		push	ds
 15271 00000BA3 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 15272                                  		; 23/12/2023  - Retro DOS v5.0
 15273 00000BA7 26807D3E02              		cmp	byte [es:di+3Eh], 2 ; (PCDOS 7.1 IBMBIO.COM)
 15274                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 15275                                  					; ffSmall
 15276 00000BAC 7505                    		jnz	short motor_start_ok
 15277 00000BAE B004                    		mov	al, 4
 15278 00000BB0 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 15279                                  motor_start_ok:
 15280                                  
 15281                                  ; ds:si now points to disk parameter table.
 15282                                  ; get current settle and set fast settle
 15283                                  
 15284                                  		;xor	al, al
 15285                                  		;inc	al		; ibm wants fast settle	to be 1
 15286                                  		; 18/12/2022
 15287 00000BB3 31C0                    		xor	ax, ax
 15288 00000BB5 40                      		inc	ax
 15289 00000BB6 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 15290                                  					; get settle and set up	for fast
 15291 00000BB9 1F                      		pop	ds
 15292 00000BBA A2[2701]                		mov	[settlecurrent], al
 15293 00000BBD B00F                    		mov	al, 15		; NORMSETTLE
 15294                                  					; someone has diddled the settle
 15295 00000BBF A2[2801]                		mov	[settleslow], al
 15296                                  		; 23/12/2023
 15297                                  ;skip_dpt_setting:
 15298 00000BC2 C3                      		retn
 15299                                  
 15300                                  ; =============== S U B	R O U T	I N E =======================================
 15301                                  
 15302                                  ;--------------------------------------------------------------
 15303                                  ; set time of last access, and reset default values in the dpt.
 15304                                  ;
 15305                                  ;	  note: trashes (at least) si
 15306                                  ;--------------------------------------------------------------
 15307                                  
 15308                                  		; 23/12/2023 - Retro DOS v5.0
 15309                                  
 15310                                  		; 19/10/2022
 15311                                  done:		
 15312                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 15313                                  					; fnon_removable
 15314                                  		; 23/12/2023
 15315 00000BC3 26F6453F01              		test	byte [es:di+3Fh], 1 ; (PCDOS 7.1 IBMBIO.COM)
 15316 00000BC8 752F                    		jnz	short ddbx	; do not set for non-removable media
 15317 00000BCA E8F501                  		call	set_tim
 15318                                  ;diddleback:
 15319                                  ; 09/12/2022
 15320                                  diddle_back:
 15321 00000BCD 9C                      		pushf
 15322 00000BCE 803E[A905]00            		cmp	byte [media_set_for_format], 0
 15323 00000BD3 7523                    		jnz	short nodiddleback
 15324 00000BD5 50                      		push	ax
 15325 00000BD6 06                      		push	es
 15326 00000BD7 C436[2D01]              		les	si, [dpt]
 15327 00000BDB A0[2B01]                		mov	al, [save_eot]
 15328 00000BDE 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 15329 00000BE2 A0[2701]                		mov	al, [settlecurrent]
 15330 00000BE5 8A26[2601]              		mov	ah, [motorstartup]
 15331 00000BE9 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 15332 00000BED 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 15333 00000BF2 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 15334 00000BF6 07                      		pop	es
 15335 00000BF7 58                      		pop	ax
 15336                                  nodiddleback:
 15337 00000BF8 9D                      		popf
 15338                                  ddbx:
 15339 00000BF9 C3                      		retn
 15340                                  
 15341                                  ; =============== S U B	R O U T	I N E =======================================
 15342                                  
 15343                                  ;--------------------------------------------------------------
 15344                                  ;read the number of sectors specified in ax,
 15345                                  ;handling track boundaries
 15346                                  ;es:di -> bds for this drive
 15347                                  ;--------------------------------------------------------------
 15348                                  
 15349                                  		; 23/12/2023 - Retro DOS v5.0
 15350                                  
 15351                                  		; 19/10/2022
 15352                                  block:	
 15353 00000BFA 09C0                    		or	ax, ax
 15354 00000BFC 74FB                    		jz	short ddbx
 15355                                  		; 23/12/2023
 15356 00000BFE 26F6453F01              		test	byte [es:di+3Fh], 1 ; (PCDOS 7.1 IBMBIO.COM)
 15357                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 15358                                  					    ; fnon_removable
 15359 00000C03 740D                    		jz	short block_floppy
 15360                                  
 15361                                  ; check	to see if multi	track operation	is allowed. if not
 15362                                  ; we have to go	to the block_floppy below to break up the operation.
 15363                                  
 15364 00000C05 F606[A004]80            		test	byte [multrk_flag], 80h
 15365                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 15366 00000C0A 7406                    		jz	short block_floppy
 15367 00000C0C E82800                  		call	Disk
 15368 00000C0F 31C0                    		xor	ax, ax
 15369 00000C11 C3                      		retn
 15370                                  ; ---------------------------------------------------------------------------
 15371                                  
 15372                                  block_floppy:
 15373                                  
 15374                                  ; read at most 1 track worth. perform minimization at sector / track
 15375                                  
 15376 00000C12 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 15377                                  		;inc	cl
 15378                                  		; 23/12/2023
 15379 00000C16 41                      		inc	cx
 15380 00000C17 2A0E[3101]              		sub	cl, [cursec]
 15381 00000C1B 30ED                    		xor	ch, ch
 15382 00000C1D 39C8                    		cmp	ax, cx
 15383 00000C1F 7302                    		jnb	short gotmin
 15384 00000C21 89C1                    		mov	cx, ax
 15385                                  gotmin:
 15386                                  
 15387                                  ; ax is the requested number of sectors to read
 15388                                  ; cx is the number that we can do on this track
 15389                                  
 15390 00000C23 50                      		push	ax
 15391 00000C24 51                      		push	cx
 15392 00000C25 89C8                    		mov	ax, cx
 15393 00000C27 E80D00                  		call	Disk
 15394 00000C2A 59                      		pop	cx
 15395 00000C2B 58                      		pop	ax
 15396                                  
 15397                                  ; cx is the number of sectors just transferred
 15398                                  
 15399 00000C2C 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 15400 00000C2E D0E1                    		shl	cl, 1
 15401 00000C30 00CF                    		add	bh, cl		; adjust transfer address
 15402 00000C32 EBC6                    		jmp	short block
 15403                                  dskerr_brdg:
 15404 00000C34 E9F100                  		jmp	dskerr
 15405                                  
 15406                                  ; =============== S U B	R O U T	I N E =======================================
 15407                                  
 15408                                  ; 15/10/2022
 15409                                  
 15410                                  ;--------------------------------------------------------------
 15411                                  ;perform disk i/o with retries
 15412                                  ; al = number of sectors (1-8, all on one track)
 15413                                  ; es:di point to drive parameters
 15414                                  ; xfer_seg:bx = transfer address 
 15415                                  ;		(must not cross a 64k physical boundary)
 15416                                  ; [rflag] = 2 if read, 3 if write
 15417                                  ; [verify] = 0 for normal, 1 for verify after write
 15418                                  ;--------------------------------------------------------------
 15419                                  
 15420                                  		; 23/12/2023 - Retro DOS v5.0
 15421                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0C74h)
 15422                                  
 15423                                  		; 19/10/2022
 15424                                  Disk:
 15425                                  
 15426                                  ; Check for hard disk format and
 15427                                  ; if TRUE then set max error count to 2
 15428                                  
 15429 00000C37 BD0500                  		mov	bp, 5		; MAXERR
 15430                                  					; set up retry count
 15431                                  		; 23/12/2023
 15432 00000C3A 268A4D3F                		mov	cl, [es:di+3Fh]
 15433 00000C3E 83E101                  		and	cx, 1
 15434                                  		;test	byte [es:di+3Fh], 1
 15435                                  		;;test	byte [es:di+23h], 1 
 15436                                  					; [es:di+BDS.flags], fnon_removable
 15437 00000C41 7408                    		jz	short GetRdWrInd
 15438 00000C43 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 15439 00000C46 7403                    		jz	short GetRdWrInd
 15440 00000C48 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 15441                                  GetRdWrInd:				
 15442 00000C4B 892E[A304]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 15443 00000C4F 892E[A504]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 15444 00000C53 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 15445                                  ;retry:
 15446                                  ; 09/12/2022
 15447                                  _retry:
 15448 00000C57 50                      		push	ax
 15449 00000C58 8B16[3301]              		mov	dx, [curtrk]
 15450                                  		; 23/12/2023
 15451 00000C5C E30B                    		jcxz	disk_not_mini
 15452                                  		;test	byte [es:di+3Fh], 1
 15453                                  		;;test	byte [es:di+23h], 1
 15454                                  		;jz	short disk_not_mini
 15455                                  
 15456                                  		; 23/12/2023
 15457 00000C5E 26837D7901              		cmp	word [es:di+79h], 1
 15458                                  		;cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 15459                                  					; is this a mini disk? ((logical dos partition))
 15460 00000C63 7504                    		jnz	short disk_not_mini ; no. continue to next.
 15461                                  		; 23/12/2023
 15462 00000C65 2603557B                		add     dx, [es:di+7Bh]
 15463                                  		;add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 15464                                  					; add hidden trks.
 15465                                  disk_not_mini:
 15466 00000C69 D0CE                    		ror	dh, 1
 15467 00000C6B D0CE                    		ror	dh, 1
 15468 00000C6D 0A36[3101]              		or	dh, [cursec]
 15469 00000C71 89D1                    		mov	cx, dx
 15470 00000C73 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 15471 00000C75 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 15472 00000C79 268A5504                		mov	dl, [es:di+4]	; physical drive number
 15473                                  					; [es:di+BDS.drivenum]
 15474                                  		; 23/12/2023
 15475 00000C7D 26807D3E05              		cmp	byte [es:di+3Eh], 5 
 15476                                  		;cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 15477 00000C82 7411                    		jz	short do_fast	; hard files use fast speed
 15478                                  
 15479                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 15480                                  ; this helps when we have just done a reset disk operation and the head has
 15481                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 15482                                  
 15483 00000C84 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 15484                                  		;jz	short do_writej
 15485                                  		; 23/12/2023
 15486 00000C89 746A                    		jz	short do_write
 15487 00000C8B 80FC02                  		cmp	ah, 2		; romread
 15488 00000C8E 7405                    		jz	short do_fast
 15489 00000C90 80FC04                  		cmp	ah, 4		; romverify
 15490                                  		;jz	short do_fast
 15491                                  		; 23/12/2023
 15492 00000C93 7560                    		jnz	short do_write
 15493                                  ;do_writej:
 15494                                  
 15495                                  ; reads always fast, unless we have just done a disk reset operation
 15496                                  			
 15497                                  		;jmp	short do_write	; reads	always fast
 15498                                  ; ---------------------------------------------------------------------------
 15499                                  
 15500                                  do_fast:
 15501 00000C95 E80501                  		call	fastspeed	; change settle	mode
 15502                                  testerr:
 15503 00000C98 729A                    		jb	short dskerr_brdg
 15504                                  
 15505                                  		; 23/12/2023 Retro DOS v5.0
 15506                                  		; (PCDOS 7.1 IBMBIO.COM)
 15507 00000C9A 83FD05                  		cmp	bp, 5		; is there retry ?
 15508 00000C9D 7505                    		jnz	short testerror	; yes
 15509 00000C9F 80FCBB                  		cmp	ah, 0BBh	; Undefined error (hard disk)
 15510 00000CA2 7490                    		jz	short dskerr_brdg
 15511                                  testerror:
 15512                                  
 15513                                  ; set drive and track of last access
 15514                                  
 15515 00000CA4 8816[7600]              		mov	[step_drv], dl
 15516                                  		; 23/12/2023
 15517 00000CA8 26886D78                		mov	[es:di+78h], ch
 15518                                  		;mov	[es:di+46h], ch	; [es:di+BDS.track]
 15519                                  no_set:
 15520                                  		;cmp	word [wrtverify], 103h
 15521 00000CAC 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 15522 00000CB2 7452                    		jz	short doverify
 15523                                  noverify:
 15524 00000CB4 58                      		pop	ax
 15525                                  
 15526                                  ; check the flags word in the bds to see if the drive is non removable
 15527                                  ; if not we needn't do anything special
 15528                                  ; if it is a hard disk then check to see if multi-track operation
 15529                                  ; is specified. if specified we don't have to calculate for the next
 15530                                  ; track since we are already done. so we can go to the exit of this routine.
 15531                                  
 15532                                  		; 23/12/2023
 15533 00000CB5 26F6453F01              		test	byte [es:di+3Fh], 1
 15534                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 15535                                  					; fnon_removable
 15536 00000CBA 7407                    		jz	short its_removable
 15537 00000CBC F606[A004]80            		test	byte [multrk_flag], 80h ; multrk_on
 15538 00000CC1 7530                    		jnz	short disk_ret
 15539                                  its_removable:
 15540 00000CC3 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 15541 00000CC6 30E4                    		xor	ah, ah
 15542 00000CC8 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 15543 00000CCC 00C1                    		add	cl, al
 15544 00000CCE 880E[3101]              		mov	[cursec], cl
 15545 00000CD2 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 15546                                  					; see if sector/track limit reached
 15547 00000CD6 761B                    		jbe	short disk_ret
 15548 00000CD8 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 15549 00000CDD 8A36[3201]              		mov	dh, [curhd]
 15550 00000CE1 FEC6                    		inc	dh
 15551 00000CE3 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 15552 00000CE7 7206                    		jb	short noxor
 15553 00000CE9 30F6                    		xor	dh, dh
 15554 00000CEB FF06[3301]              		inc	word [curtrk]
 15555                                  noxor:
 15556 00000CEF 8836[3201]              		mov	[curhd], dh
 15557                                  disk_ret:
 15558 00000CF3 F8                      		clc
 15559 00000CF4 C3                      		retn
 15560                                  ; ---------------------------------------------------------------------------
 15561                                  
 15562                                  ; 15/10/2022
 15563                                  
 15564                                  ; 24/12/2023 - Retro DOS v5.0
 15565                                  
 15566                                  ;--------------------------------------------------------------
 15567                                  ; the request is for write. determine if we are talking about
 15568                                  ; the same track and drive. if so, use the fast speed.
 15569                                  ;--------------------------------------------------------------
 15570                                  
 15571                                  do_write:
 15572 00000CF5 3A16[7600]              		cmp	dl, [step_drv]
 15573 00000CF9 7506                    		jnz	short do_norm	; we have changed drives
 15574                                  		; 24/12/2023
 15575 00000CFB 263A6D78                		cmp	ch, [es:di+78h]
 15576                                  		;cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 15577 00000CFF 7494                    		jz	short do_fast	; we are still on the same track
 15578                                  do_norm:
 15579 00000D01 E87500                  		call	normspeed
 15580 00000D04 EB92                    		jmp	short testerr
 15581                                  ; ---------------------------------------------------------------------------
 15582                                  
 15583                                  ;--------------------------------------------------------------
 15584                                  ; we have a verify request also. get state info and go verify
 15585                                  ;--------------------------------------------------------------
 15586                                  
 15587                                  doverify:
 15588 00000D06 58                      		pop	ax
 15589 00000D07 50                      		push	ax
 15590 00000D08 B404                    		mov	ah, 4
 15591 00000D0A E89000                  		call	fastspeed
 15592 00000D0D 73A5                    		jnb	short noverify
 15593                                  
 15594                                  ; check the error returned in ah to see if it is a soft ecc error.
 15595                                  ; if it is not we needn't do anything special. if it is a soft
 15596                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 15597                                  ; this retry count becomes 0 then we just ignore the error and go to
 15598                                  ; no_verify but if we can still try then we call the routine to reset
 15599                                  ; the disk and go to dskerr1 to retry the operation.
 15600                                  
 15601 00000D0F 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 15602 00000D12 750B                    		jnz	short not_softecc_err
 15603 00000D14 FF0E[A504]              		dec	word [soft_ecc_cnt]
 15604 00000D18 749A                    		jz	short noverify	; no more retry
 15605 00000D1A E81F06                  		call	ResetDisk	; reset	disk
 15606 00000D1D EB3E                    		jmp	short dskerr1	; retry
 15607                                  ; ---------------------------------------------------------------------------
 15608                                  
 15609                                  not_softecc_err:			; other error.
 15610 00000D1F E81A06                  		call	ResetDisk
 15611 00000D22 FF0E[A304]              		dec	word [vretry_cnt]
 15612 00000D26 EB1C                    		jmp	short dskerr0
 15613                                  ; ---------------------------------------------------------------------------
 15614                                  
 15615                                  ;--------------------------------------------------------------
 15616                                  ; need to special case the change-line error ah=06h.
 15617                                  ; if we get this, we need to return it.
 15618                                  ;--------------------------------------------------------------
 15619                                  
 15620                                  dskerr:
 15621 00000D28 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 15622 00000D2D 7403                    		jz	short dskerr_nochangeline ; brif not
 15623 00000D2F E8C30E                  		call	checkio
 15624                                  dskerr_nochangeline:
 15625 00000D32 803E[A704]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 15626 00000D37 7508                    		jnz	short dochkagain ; no more retry.
 15627 00000D39 BD0100                  		mov	bp, 1
 15628 00000D3C C606[A704]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 15629                                  dochkagain:
 15630 00000D41 E89E00                  		call	again
 15631                                  dskerr0:
 15632 00000D44 7420                    		jz	short harderr
 15633                                  		; 24/12/2023
 15634 00000D46 26F6453F01              		test	byte [es:di+3Fh], 1
 15635                                  		;test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 15636                                  					; fnon_removable
 15637 00000D4B 7505                    		jnz	short skip_timeout_chk
 15638 00000D4D 80FC80                  		cmp	ah, 80h		; timeout?
 15639 00000D50 7414                    		jz	short harderr
 15640                                  skip_timeout_chk:
 15641 00000D52 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 15642 00000D55 740A                    		jz	short write_fault_err ;	then, don't retry.
 15643 00000D57 C706[A504]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 15644                                  					; set soft_ecc_cnt back	to maxerr
 15645                                  dskerr1:
 15646 00000D5D 58                      		pop	ax		; restore sector count
 15647                                  		;jmp	retry
 15648                                  		; 09/12/2022
 15649 00000D5E E9F6FE                  		jmp	_retry
 15650                                  ; ---------------------------------------------------------------------------
 15651                                  
 15652                                  write_fault_err:
 15653 00000D61 BD0100                  		mov	bp, 1		; just retry only once
 15654                                  					; for write fault error.
 15655 00000D64 EBF7                    		jmp	short dskerr1
 15656                                  
 15657                                  		; fall into harderr
 15658                                  ; ---------------------------------------------------------------------------
 15659                                  
 15660                                  ; entry point for routines that call maperror themselves
 15661                                  
 15662                                  harderr:
 15663 00000D66 E84100                  		call	maperror
 15664                                  harderr2:
 15665 00000D69 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 15666                                  					; force a media check through rom
 15667 00000D6E 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 15668 00000D72 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 15669                                  
 15670                                  ; since we are performing a non-local goto, restore the disk parameters
 15671                                  
 15672                                  		;jmp	diddleback
 15673                                  		; 09/12/2022
 15674 00000D76 E954FE                  		jmp	diddle_back
 15675                                  
 15676                                  ; =============== S U B	R O U T	I N E =======================================
 15677                                  
 15678                                  ; change settle value from settlecurrent to whatever is appropriate
 15679                                  ; note that this routine is never called for a fixed disk.
 15680                                  
 15681                                  		; 19/10/2022
 15682                                  normspeed:
 15683 00000D79 803E[A905]00            		cmp	byte [media_set_for_format], 0
 15684 00000D7E 751D                    		jnz	short fastspeed
 15685 00000D80 06                      		push	es
 15686 00000D81 50                      		push	ax
 15687 00000D82 A0[2801]                		mov	al, [settleslow]
 15688 00000D85 C436[2D01]              		les	si, [dpt]	; current disk parm table
 15689 00000D89 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 15690 00000D8D 58                      		pop	ax
 15691 00000D8E 07                      		pop	es
 15692 00000D8F E80B00                  		call	fastspeed
 15693                                  		; 24/12/2023
 15694                                  		;push	es
 15695                                  		;les	si, [dpt]
 15696                                  		;mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 15697                                  		;			; 1 is fast settle value
 15698                                  		;pop	es
 15699 00000D92 1E                      		push	ds
 15700 00000D93 C536[2D01]              		lds	si, [dpt]
 15701 00000D97 C6440901                		mov	byte [si+9], 1
 15702 00000D9B 1F                      		pop	ds
 15703                                  
 15704 00000D9C C3                      		retn
 15705                                  
 15706                                  ; =============== S U B	R O U T	I N E =======================================
 15707                                  
 15708                                  ; if the drive has been marked as too big (i.e. starting sector of the
 15709                                  ; partition is > 16 bits, then always return drive not ready.
 15710                                  
 15711                                  		; 24/12/2023 - Retro DOS v5.0
 15712                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0DDDh)
 15713                                  fastspeed:
 15714                                  		;;test	byte [es:di+3Bh], 80h ; [es:di+BDS.fatsiz]
 15715                                  		;test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 15716                                  		;			; ftoobig
 15717                                  		;jnz	short notready
 15718 00000D9D 06                      		push	es
 15719 00000D9E 8E06[A804]              		mov	es, [xfer_seg]
 15720 00000DA2 CD13                    		int	13h		; DISK -
 15721 00000DA4 8C06[A804]              		mov	[xfer_seg], es
 15722 00000DA8 07                      		pop	es
 15723 00000DA9 C3                      		retn
 15724                                  ; ---------------------------------------------------------------------------
 15725                                  ;		; 24/12/2023
 15726                                  ;notready:
 15727                                  		;stc
 15728                                  		;mov	ah, 80h
 15729                                  		;retn
 15730                                  
 15731                                  ; =============== S U B	R O U T	I N E =======================================
 15732                                  
 15733                                  ; map error returned by rom in ah into corresponding code to be returned to
 15734                                  ; dos in al. trashes di. guaranteed to set carry.
 15735                                  
 15736                                  maperror:
 15737 00000DAA 51                      		push	cx
 15738 00000DAB 06                      		push	es
 15739 00000DAC 1E                      		push	ds		; set es=Bios_Data
 15740 00000DAD 07                      		pop	es
 15741 00000DAE 88E0                    		mov	al, ah		; put error code in al
 15742 00000DB0 A2[4601]                		mov	[lsterr], al	; terminate list with error code
 15743                                  		; 24/12/2023
 15744 00000DB3 B90B00                  		mov	cx, 11 ; PCDOS 7.1 ; 02/09/2023
 15745                                  		;mov	cx, 9		; numerr (= errout-errin)
 15746                                  					; number of possible error conditions
 15747 00000DB6 BF[3C01]                		mov	di, errin	; point to error conditions
 15748 00000DB9 F2AE                    		repne scasb
 15749                                  
 15750                                  		; 24/12/2023
 15751                                  		; 02/09/2023
 15752 00000DBB 8A450A                  		mov	al, [di+10] ; PCDOS 7.1 IBMBIO.COM
 15753                                  		; 10/12/2022
 15754                                  		;mov	al, [di+8]	; [di+numerr-1]
 15755                                  					; get translation
 15756                                  		; 19/10/2022 - Temporary ! 
 15757                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 15758 00000DBE 07                      		pop	es
 15759 00000DBF 59                      		pop	cx
 15760 00000DC0 F9                      		stc			; flag error condition
 15761 00000DC1 C3                      		retn
 15762                                  
 15763                                  ; =============== S U B	R O U T	I N E =======================================
 15764                                  
 15765                                  ; set the time of last access for this drive.
 15766                                  ; this is done only for removable media. es:di -> bds
 15767                                  
 15768                                  set_tim:
 15769 00000DC2 50                      		push	ax
 15770 00000DC3 E86BF7                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 15771                                  
 15772                                  ; we have the new time. if we see that the time has passed,
 15773                                  ; then we reset the threshold counter...
 15774                                  
 15775                                  		; 24/12/2023 - Retro DOS v5.0
 15776 00000DC6 263B5579                		cmp	dx, [es:di+79h]	; PCDOS 7.1 IBMBIO.COM
 15777                                  		;cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 15778 00000DCA 7506                    		jne	short setaccess
 15779                                  		; 24/12/2023
 15780 00000DCC 263B4D7B                		cmp	cx, [es:di+7Bh]	; PCDOS 7.1 IBMBIO.COM
 15781                                  		;cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 15782                                  		;jz	short done_set
 15783                                  		; 12/12/2022
 15784 00000DD0 740E                    		je	short done_set2
 15785                                  setaccess:
 15786 00000DD2 C606[1D01]00            		mov	byte [accesscount], 0
 15787                                  		
 15788                                  		; 24/12/2023 - Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 15789 00000DD7 26895579                		mov	[es:di+79h], dx
 15790 00000DDB 26894D7B                		mov	[es:di+7Bh], cx
 15791                                  		;mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 15792                                  		;mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 15793                                  done_set:
 15794 00000DDF F8                      		clc
 15795                                  done_set2:		; 12/12/2022
 15796 00000DE0 58                      		pop	ax
 15797 00000DE1 C3                      		retn
 15798                                  
 15799                                  ; =============== S U B	R O U T	I N E =======================================
 15800                                  
 15801                                  ; this routine is called if an error occurs while formatting or verifying.
 15802                                  ; it resets the drive,and decrements the retry count.
 15803                                  ; on entry - ds:di - points to bds for the drive
 15804                                  ;	     bp    - contains retry count
 15805                                  ; on exit    flags indicate result of decrementing retry count
 15806                                  
 15807                                  again:
 15808 00000DE2 E85705                  		call	ResetDisk
 15809 00000DE5 80FC06                  		cmp	ah, 6
 15810 00000DE8 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 15811                                  					; do not decrement retry count.
 15812 00000DEA 4D                      		dec	bp		; decrement retry count
 15813 00000DEB C3                      		retn
 15814                                  ; ---------------------------------------------------------------------------
 15815                                  
 15816                                  dont_dec_retry_count:
 15817 00000DEC 08E4                    		or	ah, ah
 15818 00000DEE C3                      		retn
 15819                                  
 15820                                  ;----------------------------------------------------------------------------
 15821                                  ; Retro DOS v5.0 - PCDOS 7.1 IBMBIO.COM - BIOSCODE:0E30h
 15822                                  ;----------------------------------------------------------------------------
 15823                                  ; 24/12/2023 - Retro DOS v5.0
 15824                                  ;;;;
 15825                                  
 15826 00000DEF 00                      ioctl_drvnum:	db 0
 15827                                  
 15828                                  		; 24/12/2023
 15829                                  
 15830                                  ; =============== S U B R O U T I N E =======================================
 15831                                  
 15832                                  get_phy_drv_num:
 15833 00000DF0 E8B1F7                  		call	SetDrive	; get physical drive number
 15834                                  					; INPUT: al = logical drive number (BDS.drivelet)
 15835                                  					; OUTPUT: physical drive number (BDS.drivenum)
 15836 00000DF3 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 15837 00000DF7 C3                      		retn
 15838                                  
 15839                                  ; =============== S U B R O U T I N E =======================================
 15840                                  
 15841                                  		; 24/12/2023
 15842                                  ioctl_output:
 15843 00000DF8 E8F5FF                  		call	get_phy_drv_num
 15844 00000DFB 2E8816[EF0D]            		mov	[cs:ioctl_drvnum], dl
 15845 00000E00 B441                    		mov	ah, 41h
 15846 00000E02 BBAA55                  		mov	bx, 55AAh
 15847 00000E05 CD13                    		int	13h		; DISK - Check for INT 13h Extensions
 15848                                  					; BX = 55AAh, DL = drive number
 15849                                  					; Return: CF set if not supported
 15850                                  					; AH = extensions version
 15851                                  					; BX = AA55h
 15852                                  					; CX = Interface support bit map
 15853 00000E07 7235                    		jc	short int13h_exts_err
 15854                                  ioctl_input_1:
 15855 00000E09 C43E[1200]              		les	di, [ptrsav]
 15856 00000E0D 26C47D0E                		les	di, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
 15857 00000E11 723E                    		jc	short ioctl_input_2
 15858 00000E13 B80046                  		mov	ax, 4600h	; Eject removable media
 15859 00000E16 263805                  		cmp	[es:di], al	; al = 0 ; disk ioctl function = 0
 15860 00000E19 7417                    		je	short ioctl_output_1
 15861 00000E1B 26803D01                		cmp	byte [es:di], 1 ; al = 1 ; disk ioctl function = 1
 15862 00000E1F 751B                    		jne	short ioctl_output_2
 15863 00000E21 B80145                  		mov	ax, 4501h	; Lock/unlock media
 15864                                  					; (al, 0 = lock, 1 = unlock)
 15865 00000E24 26807D0100              		cmp	byte [es:di+1], 0 ; unlock (reverse of INT 13h ah=45h)
 15866 00000E29 7407                    		jz	short ioctl_output_1
 15867 00000E2B 26384501                		cmp	[es:di+1], al	; lock (reverse of INT 13h ah=45h)
 15868 00000E2F 750B                    		jne	short ioctl_output_2
 15869 00000E31 48                      		dec	ax
 15870                                  ioctl_output_1:
 15871 00000E32 2E8A16[EF0D]            		mov	dl, [cs:ioctl_drvnum]
 15872 00000E37 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE (DL - drive, [SI - disk address packet)
 15873 00000E39 7203                    		jc	short int13h_exts_err
 15874                                  ioctl_lock_err:
 15875                                  		; cf=0
 15876                                  ioctl_output_ret:
 15877                                  		;clc
 15878 00000E3B C3                      		retn
 15879                                  ; ---------------------------------------------------------------------------
 15880                                  
 15881                                  ioctl_output_2:
 15882 00000E3C B401                    		mov	ah, 1
 15883                                  int13h_exts_err:
 15884 00000E3E 80FCB0                  		cmp	ah, 0B0h	; volume not locked in drive
 15885 00000E41 74F8                    		je	short ioctl_lock_err
 15886 00000E43 80FCB4                  		cmp	ah, 0B4h	; lock count exceeded
 15887 00000E46 74F3                    		je	short ioctl_lock_err
 15888 00000E48 E9D9F7                  		jmp	err_exitj
 15889                                  
 15890                                  ; =============== S U B R O U T I N E =======================================
 15891                                  
 15892                                  		; 24/12/2023
 15893                                  ioctl_input:
 15894 00000E4B E8A2FF                  		call	get_phy_drv_num
 15895 00000E4E F9                      		stc
 15896 00000E4F EBB8                    		jmp	short ioctl_input_1
 15897                                  ioctl_input_2:
 15898 00000E51 26803D06                		cmp	byte [es:di], 6	; disk ioctl function = 6
 15899 00000E55 75E5                    		jne	short ioctl_output_2
 15900 00000E57 B80245                  		mov	ax, 4502h	; get lock status
 15901 00000E5A CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE (DL - drive, [SI - disk address packet)
 15902 00000E5C 72E0                    		jc	short int13h_exts_err
 15903 00000E5E BB0C00                  		mov	bx, 0Ch		; bit 1 lock bit
 15904 00000E61 3C00                    		cmp	al, 0		; not locked
 15905 00000E63 7402                    		jz	short ioctl_input_3
 15906 00000E65 B30E                    		mov	bl, 0Eh
 15907                                  ioctl_input_3:
 15908 00000E67 53                      		push	bx
 15909 00000E68 B404                    		mov	ah, 4
 15910 00000E6A B90101                  		mov	cx, 101h
 15911 00000E6D B601                    		mov	dh, 1
 15912 00000E6F CD13                    		int	13h		; DISK - VERIFY SECTORS
 15913                                  					; AL = number of sectors to verify, CH = track, CL = sector
 15914                                  					; DH = head, DL = drive
 15915                                  					; Return: CF set on error, AH = status
 15916                                  					; AL = number of sectors verified
 15917 00000E71 5B                      		pop	bx
 15918 00000E72 80FC31                  		cmp	ah, 31h		; no media in drive (IBM/MS INT 13 extensions)
 15919 00000E75 740B                    		je	short ioctl_input_5
 15920 00000E77 80FC80                  		cmp	ah, 80h		; timeout (not ready)
 15921 00000E7A 7406                    		je	short ioctl_input_5
 15922                                  ioctl_input_4:
 15923 00000E7C 26895D01                		mov	[es:di+1], bx
 15924 00000E80 EBB9                    		jmp	short ioctl_lock_err
 15925                                  ioctl_input_5:
 15926 00000E82 81CB0108                		or	bx, 801h	; bit 0 error bit (1 = error, 31h or 80h)
 15927                                  					; bit 11 (not ready -removable media error- bit)
 15928                                  					; if bit 11 = 0, another error (except 31h and 80h)
 15929 00000E86 EBF4                    		jmp	short ioctl_input_4
 15930                                  
 15931                                  ; ---------------------------------------------------------------------------
 15932                                  ;;;;
 15933                                  
 15934                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 15935                                  
 15936                                  ;----------------------------------------------------------------------------
 15937                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 15938                                  ;----------------------------------------------------------------------------
 15939                                  ; 11/03/2019 - Retro DOS v4.0
 15940                                  
 15941                                  ; 18/03/2019
 15942                                  
 15943                                  ; ==========================================================================
 15944                                  ;
 15945                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 15946                                  ;
 15947                                  ;      This function is intended to give the user to control the
 15948                                  ;      bds table flags of unformatted_media bit.
 15949                                  ;      GetAccessFlag will show the status -
 15950                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 15951                                  ;						1 disk i/o allowed
 15952                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 15953                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 15954                                  ;						1 disallow disk i/o
 15955                                  ; ==========================================================================
 15956                                  
 15957                                  		; generic ioctl dispatch tables
 15958                                  
 15959                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 15960                                  
 15961                                  ; 24/12/2023
 15962                                  ; BIOSCODE:0ECAh (PCDOS 7.1, IBMBIO.COM)
 15963                                  
 15964                                  ; ---------------------------------------------------------------------------
 15965                                  		; 24/12/2023
 15966                                  		;db 0
 15967                                  ; 09/12/2022 
 15968                                  %if 0
 15969                                  
 15970                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 15971                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 15972                                  		dw 0EE8h	; 61h	;gh ReadTrack
 15973                                  		dw 0E86h	; 62h	; VerifyTrack
 15974                                  		dw 0CA3h	 	; Cmd_Error_Proc
 15975                                  		dw 0CA3h		; Cmd_Error_Proc
 15976                                  		dw 0CA3h		; Cmd_Error_Proc
 15977                                  		dw 119Ah	; 66h	; GetMediaId
 15978                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 15979                                  		dw 12C1h	; 68h	; SenseMediaType
 15980                                  
 15981                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 15982                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 15983                                  		dw 0EEFh	; 41h	; WriteTrack
 15984                                  		dw 0DC1h	; 42h	; FormatTrack
 15985                                  		dw 0CA3h		; Cmd_Error_Proc
 15986                                  		dw 0CA3h		; Cmd_Error_Proc
 15987                                  		dw 0CA3h		; Cmd_Error_Proc
 15988                                  		dw 11D2h	; 46h	; SetMediaId
 15989                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 15990                                  
 15991                                  %endif
 15992                                  		; 24/12/2023 - Retro DOS v5.0
 15993                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0ECAh)
 15994                                  
 15995                                  		; 09/12/2022
 15996                                  IoReadJumpTable:
 15997 00000E88 10                      		db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 15
 15998 00000E89 [1B0F]                  		dw GetDeviceParameters	; 60h
 15999 00000E8B [9411]                  		dw ReadTrack		; 61h
 16000 00000E8D [3411]                  		dw VerifyTrack		; 62h
 16001 00000E8F [170F]                  		dw Cmd_Error_Proc
 16002 00000E91 [170F]                  		dw Cmd_Error_Proc
 16003 00000E93 [170F]                  		dw Cmd_Error_Proc
 16004 00000E95 [1314]                  		dw GetMediaId		; 66h
 16005 00000E97 [F014]                  		dw GetAccessFlag	; 67h ; unpublished function
 16006 00000E99 [4A15]                  		dw SenseMediaType	; 68h
 16007                                  		; 24/12/2023
 16008                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 16009 00000E9B [170F]                  		dw Cmd_Error_Proc	; 69h
 16010 00000E9D [170F]                  		dw Cmd_Error_Proc	; 6Ah
 16011 00000E9F [170F]                  		dw Cmd_Error_Proc
 16012 00000EA1 [170F]                  		dw Cmd_Error_Proc
 16013 00000EA3 [170F]                  		dw Cmd_Error_Proc
 16014 00000EA5 [170F]                  		dw Cmd_Error_Proc	; 6Eh
 16015 00000EA7 [CE15]                  		dw GetDrvMapInfo	; 6Fh
 16016                                  
 16017                                  IoWriteJumpTable:
 16018 00000EA9 0A                      		db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 9
 16019 00000EAA [7B0F]                  		dw SetDeviceParameters	; 40h
 16020 00000EAC [9B11]                  		dw WriteTrack		; 41h
 16021 00000EAE [6E10]                  		dw FormatTrack		; 42h
 16022 00000EB0 [170F]                  		dw Cmd_Error_Proc
 16023 00000EB2 [170F]                  		dw Cmd_Error_Proc
 16024 00000EB4 [170F]                  		dw Cmd_Error_Proc
 16025 00000EB6 [5314]                  		dw SetMediaId		; 46h
 16026 00000EB8 [0515]                  		dw SetAccessFlag	; 47h ; unpublished function
 16027                                  		; 24/12/2023
 16028                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 16029 00000EBA [8715]                  		dw SetLockState		; 48h
 16030 00000EBC [9E15]                  		dw EjectMedia		; 49h	
 16031                                  		
 16032                                  ; ==========================================================================
 16033                                  ; IOC_DC_Table
 16034                                  ;
 16035                                  ; This table contains all of the valid generic IOCtl Minor codes for
 16036                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 16037                                  ; Added for 5.00
 16038                                  ; ==========================================================================
 16039                                  
 16040                                  		; 24/12/2023 - Retro DOS v5.0
 16041                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F00h)
 16042                                  
 16043 00000EBE 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 16044 00000EBF 40                      		db 40h			; SET_DEVICE_PARAMETERS
 16045 00000EC0 61                      		db 61h			; READ_TRACK
 16046 00000EC1 41                      		db 41h			; WRITE_TRACK
 16047 00000EC2 62                      		db 62h			; VERIFY_TRACK
 16048 00000EC3 42                      		db 42h			; FORMAT_TRACK
 16049 00000EC4 66                      		db 66h			; GET_MEDIA_ID
 16050 00000EC5 46                      		db 46h			; SET_MEDIA_ID
 16051 00000EC6 67                      		db 67h			; GET_ACCESS_FLAG
 16052 00000EC7 47                      		db 47h			; SET_ACCESS_FLAG
 16053 00000EC8 68                      		db 68h			; SENSE_MEDIA_TYPE
 16054                                  		; 24/12/2023
 16055                                  		; Retro DOS v5.0 (PCDOS 7.1 IBMBIO.COM)
 16056 00000EC9 48                      		db 48h			; SET_LOCK_STATE
 16057 00000ECA 49                      		db 49h			; EJECT_MEDIA
 16058 00000ECB 6F                      		db 6Fh			; GET_DRV_MAP_INFO
 16059                                  
 16060                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 16061                                  
 16062                                  		; 24/12/2023 - Retro DOS v5.0
 16063                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F0Eh)
 16064                                  
 16065 00000ECC 00                      new_genioctl:	db 0
 16066                                  
 16067                                  ; ---------------------------------------------------------------------------
 16068                                  
 16069                                  ; 16/10/2022
 16070                                  
 16071                                  ; ==========================================================================
 16072                                  ; Do_Generic_IOCtl: perform generic ioctl request
 16073                                  ;
 16074                                  ;    input: AL contains logical drive
 16075                                  ;
 16076                                  ;	functions are dispatched through a call. On return, carry indicates
 16077                                  ;	error code in al. Note::bES:b& ds undefined on return from
 16078                                  ;	subfunctions.
 16079                                  ;
 16080                                  ; ==========================================================================
 16081                                  
 16082                                  ; 11/03/2019
 16083                                  		; 24/12/2023 - Retro DOS v5.0
 16084                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F0Fh)
 16085                                  
 16086                                  		; 19/10/2022
 16087                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 16088 00000ECD E8D4F6                  		call	SetDrive	; ES:DI	Points to bds for drive
 16089                                  		
 16090                                  		; 24/12/2023
 16091                                  		;;;
 16092 00000ED0 2EC606[CC0E]00          		mov	byte [cs:new_genioctl], 0
 16093                                  					; 0, old generic ioctl function
 16094 00000ED6 06                      		push	es
 16095 00000ED7 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 16096 00000EDB 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 16097                                  					; RAWIO
 16098                                  		; 24/12/2023
 16099                                  		;mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 16100                                  		;pop	es
 16101                                  		;jnz	short IoctlFuncErr
 16102 00000EE0 740A                    		jz	short chk_genioctl_minor
 16103 00000EE2 2EFE06[CC0E]            		inc	byte [cs:new_genioctl]
 16104                                  					; 1, new generic ioctl function (FAT32)
 16105 00000EE7 26807F0D48              		cmp	byte [es:bx+0Dh], 48h ; Generic IOCtl Request support
 16106                                  				; (called only if bit 6 of attribute is set to 1)
 16107                                  chk_genioctl_minor:
 16108 00000EEC 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 16109 00000EF0 07                      		pop	es
 16110 00000EF1 7525                    		jnz	short IoctlFuncErr
 16111                                  		;;;
 16112                                  
 16113                                  		; cas note: Could do the above two blocks in reverse order.
 16114                                  		; Would have to preserve al for SetDrive
 16115                                  
 16116                                  		; 10/12/2022
 16117 00000EF3 BE[880E]                		mov	si, IoReadJumpTable
 16118                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 16119                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 16120 00000EF6 A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 16121 00000EF8 7503                    		jnz	short NotGenericWrite ; function is a read.
 16122                                  		; 10/12/2022
 16123 00000EFA BE[A90E]                		mov	si, IoWriteJumpTable
 16124                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 16125                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 16126                                  NotGenericWrite:
 16127 00000EFD 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 16128 00000EFF 2C40                    		sub	al, 40h		; offset for base function
 16129 00000F01 2E3A04                  		cmp	al, [cs:si]
 16130 00000F04 7712                    		ja	short IoctlFuncErr
 16131 00000F06 98                      		cbw
 16132                                  		; 24/12/2023
 16133                                  		;shl	ax, 1
 16134 00000F07 01C0                    		add	ax, ax
 16135 00000F09 46                      		inc	si
 16136 00000F0A 01C6                    		add	si, ax
 16137 00000F0C 2EFF14                  		call	near [cs:si]
 16138                                  		;call	word ptr cs:[si]
 16139 00000F0F 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16140                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16141                                  					; 2C7h:30h = 70h:25A0h
 16142 00000F14 B481                    		mov	ah, 81h		; Return this status in	case of	carry
 16143 00000F16 C3                      		retn			; Pass carry flag through to exit code
 16144                                  ; ---------------------------------------------------------------------------
 16145                                  
 16146                                  		; Cmd_Error_Proc is called as a procedure and also use
 16147                                  		; as a fall through from above
 16148                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 16149 00000F17 5A                      		pop	dx
 16150                                  IoctlFuncErr:
 16151 00000F18 E9BAF1                  		jmp	bc_cmderr
 16152                                  ; ---------------------------------------------------------------------------
 16153                                  
 16154                                  ; 16/10/2022
 16155                                  
 16156                                  ; ==========================================================================
 16157                                  ;**	GetDeviceParameters:
 16158                                  ;
 16159                                  ;	GetDeviceParameters implements the generic ioctl function:
 16160                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 16161                                  ;
 16162                                  ;	ENTRY	(ES:di) = BDS for drive
 16163                                  ;		PtrSav = long pointer to request header
 16164                                  ;	EXIT	??? BUGBUG
 16165                                  ;	USES	??? BUGBUG
 16166                                  ; ==========================================================================
 16167                                  
 16168                                  		; 24/12/2023 - Retro DOS v5.0
 16169                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0F5Dh)
 16170                                  
 16171                                  		; 19/10/2022
 16172                                  GetDeviceParameters:
 16173                                  		; Copy info from bds to the device parameters packet
 16174                                  
 16175 00000F1B C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 16176 00000F1F C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16177                                  					; (DS:BX) = return buffer
 16178                                  		; 24/12/2023
 16179 00000F22 268A453E                		mov	al, [es:di+3Eh]
 16180                                  		;mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 16181 00000F26 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 16182                                  		; 24/12/2023
 16183 00000F29 268B453F                		mov	ax, [es:di+3Fh]
 16184                                  		;mov	ax, [es:di+35]	; [es:di+BDS.flags]
 16185 00000F2D 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 16186                                  					; Mask off other bits
 16187 00000F30 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 16188                                  		; 24/12/2023
 16189 00000F33 268B4541                		mov     ax, [es:di+41h]
 16190                                  		;mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 16191 00000F37 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 16192 00000F3A 30C0                    		xor	al, al		; Set media type to default
 16193 00000F3C 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 16194                                  					
 16195                                  		; copy recommended bpb
 16196                                  
 16197                                  		; 24/12/2023
 16198 00000F3F 8D7543                  		lea     si, [di+43h]
 16199                                  		;lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 16200 00000F42 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 16201                                  					; BUILD_DEVICE_BPB
 16202 00000F45 7412                    		jz	short UseBpbPresent
 16203 00000F47 1E                      		push	ds		; Save request packet segment
 16204 00000F48 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16205                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16206                                  					; 2C7h:30h = 70h:25A0h
 16207                                  					; Point back to Bios_Data
 16208 00000F4D E829FA                  		call	checksingle
 16209 00000F50 E883F7                  		call	GetBp		; Build	the bpb	from scratch
 16210 00000F53 1F                      		pop	ds		; Restore request packet segment
 16211 00000F54 7224                    		jb	short GetParmRet
 16212 00000F56 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 16213                                  					; Use this subfield of bds instead
 16214                                  UseBpbPresent:				
 16215 00000F59 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 16216                                  					; This is where	the result goes
 16217                                  		; 24/12/2023
 16218 00000F5C 31D2                    		xor	dx, dx ; 0
 16219                                  		
 16220                                  		; 24/12/2023
 16221 00000F5E B91F00                  		mov	cx, 31		; A_BPB.size = 31
 16222                                  		;mov	cx, 25		; A_BPB.size - 6
 16223                                  					; For now use 'small' bpb
 16224                                  		; 24/12/2023
 16225                                  		;;;
 16226 00000F61 2E3816[CC0E]            		cmp	[cs:new_genioctl], dl ; 0 ? ; *
 16227 00000F66 7404                    		jz	short gdp_1	; old type (FAT12 & FAT16) structure
 16228                                  		;mov	cx, 53		; FAT32 BPB size
 16229                                  		;mov	dx, 32		; 53+32 = 85 bytes (A_BPB_FAT32.size)
 16230 00000F68 B135                    		mov	cl, 53
 16231 00000F6A B220                    		mov	dl, 32
 16232                                  gdp_1:
 16233                                  		;;;
 16234 00000F6C 1E                      		push	ds		; reverse segments for copy
 16235 00000F6D 06                      		push	es
 16236 00000F6E 1F                      		pop	ds
 16237 00000F6F 07                      		pop	es
 16238 00000F70 F3A4                    		rep movsb
 16239                                  
 16240                                  		; 24/12/2023
 16241                                  		;;;
 16242 00000F72 89D1                    		mov	cx, dx		; 0 or 32
 16243 00000F74 E304                    		jcxz	gdp_2
 16244 00000F76 30C0                    		xor	al, al		; 32 zeros
 16245 00000F78 F3AA                    		rep stosb
 16246                                  gdp_2:
 16247                                  		;clc	; cf is already 0 ; * ; 24/12/2023
 16248                                  		;;;		
 16249                                  		
 16250                                  		; 12/12/2022
 16251                                  		; cf=0 (test instruction -above- resets cf) 	
 16252                                  		;clc
 16253                                  GetParmRet:				
 16254 00000F7A C3                      		retn
 16255                                  ; ---------------------------------------------------------------------------
 16256                                  
 16257                                  ; 17/10/2022
 16258                                  ; 16/10/2022
 16259                                  
 16260                                  ; ==========================================================================
 16261                                  ; SetDeviceParameters:
 16262                                  ;
 16263                                  ; input: ES:di points to bds for drive
 16264                                  ; ==========================================================================
 16265                                  
 16266                                  		; 24/12/2023 - Retro DOS v5.0
 16267                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:0FC0h)
 16268                                  
 16269                                  		; 19/10/2022
 16270                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 16271 00000F7B C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 16272 00000F7F C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16273                                  		; 24/12/2023
 16274 00000F82 26814D3F4001            		or	word [es:di+3Fh], 140h
 16275                                  		;or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 16276                                  					; fchanged_by_format|fchanged
 16277 00000F88 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 16278                                  					; ONLY_SET_TRACKLAYOUT
 16279                                  		;jnz	short setTrackTable
 16280                                  		; 24/12/2023
 16281 00000F8B 7403                    		jz	short sdp_1
 16282 00000F8D E98000                  		jmp	setTrackTable
 16283                                  sdp_1:	
 16284 00000F90 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 16285                                  		; 24/12/2023
 16286 00000F93 2688453E                		mov	[es:di+3Eh], al
 16287                                  		;mov	[es:di+34], al	; [es:di+BDS.formfactor]
 16288 00000F97 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 16289                                  		; 24/12/2023
 16290 00000F9A 26894541                		mov	[es:di+41h], ax
 16291                                  		;mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 16292 00000F9E 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 16293 00000FA1 1E                      		push	ds
 16294                                  		; 17/10/2022
 16295 00000FA2 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16296                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16297                                  					; 2C7h:30h = 70h:25A0h
 16298                                  		;cmp	byte [fhave96], 0
 16299 00000FA7 803E[7700]00            		cmp	byte [fhave96], 0
 16300 00000FAC 1F                      		pop	ds
 16301 00000FAD 7502                    		jnz	short HaveChange ; we have changeline support
 16302                                  		; 10/12/2022
 16303 00000FAF 24FD                    		and	al, 0FDh
 16304                                  		;and	ax, 0FFFDh	; ~fchangeline
 16305                                  
 16306                                  		; Ignore all bits except non_removable and changeline
 16307                                  HaveChange:
 16308 00000FB1 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 16309                                  		; 24/12/2023
 16310 00000FB4 268B4D3F                		mov	cx, [es:di+3Fh]
 16311                                  		;mov	cx, [es:di+35]	; [es:di+BDS.flags]
 16312 00000FB8 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 16313 00000FBC 09C8                    		or	ax, cx
 16314                                  		; 24/12/2023
 16315 00000FBE 2689453F                		mov	[es:di+3Fh], ax
 16316                                  		;mov	[es:di+35], ax	; [es:di+BDS.flags]
 16317 00000FC2 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 16318                                  					; Set media type
 16319 00000FC5 1E                      		push	ds
 16320 00000FC6 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16321                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16322 00000FCB A2[A805]                		mov	[mediatype], al
 16323                                  		;mov	ds:mediatype, al
 16324                                  
 16325                                  		; 24/12/2023
 16326                                  		;;;
 16327 00000FCE B93500                  		mov	cx, 53		; FAT32 BPB size
 16328 00000FD1 2E803E[CC0E]00          		cmp	byte [cs:new_genioctl], 0
 16329 00000FD7 7502                    		jnz	short sdp_2	; new type (FAT32) structure
 16330                                  		;mov	cx, 31		; A_BPB.size = 31
 16331 00000FD9 B11F                    		mov	cl, 31
 16332                                  sdp_2:
 16333                                  		;;;	
 16334 00000FDB 1F                      		pop	ds
 16335                                  
 16336                                  		; The media changed (maybe) so we will have to do a set dasd
 16337                                  		; the next time we format a track
 16338                                  
 16339                                  		; 24/12/2023
 16340 00000FDC 26804D3F80              		or	byte [es:di+3Fh], 80h
 16341                                  		; 10/12/2022
 16342                                  		;or	byte [es:di+35], 80h
 16343                                  		;;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 16344                                  					; set_dasd_true
 16345 00000FE1 57                      		push	di		; Save bds pointer
 16346                                  
 16347                                  		; Figure out what we are supposed to do with the bpb
 16348                                  		; were we asked to install a fake bpb?
 16349                                  
 16350 00000FE2 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 16351                                  					; INSTALL_FAKE_BPB
 16352 00000FE5 7511                    		jnz	short InstallFakeBpb
 16353                                  
 16354                                  		; were we returning a fake bpb when asked to build a bpb?
 16355                                  
 16356                                  		; 24/12/2023
 16357 00000FE7 26F6453F04              		test	byte [es:di+3Fh], 4
 16358                                  		; 10/12/2022
 16359                                  		;test	byte [es:di+35], 4
 16360                                  		;;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 16361                                  					; return_fake_bpb
 16362 00000FEC 7405                    		jz	short InstallRecommendedBpb
 16363                                  
 16364                                  		; we were returning a fake bpb but we can stop now
 16365                                  
 16366                                  		; 24/12/2023
 16367 00000FEE 2680653FFB              		and	byte [es:di+3Fh], 0FBh
 16368                                  		; 10/12/2022
 16369                                  		;and	byte [es:di+35], 0FBh
 16370                                  		;;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 16371                                  					; ~return_fake_bpb
 16372                                  InstallRecommendedBpb:
 16373                                  		; 24/12/2023
 16374                                  		;mov	cx, 31		; A_BPB.size
 16375                                  		;lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 16376                                  		; cx = 53 or 31
 16377 00000FF3 8D7D43                  		lea	di, [di+43h]	; (PCDOS 7.1 IBMBIO.COM)
 16378 00000FF6 EB08                    		jmp	short CopyTheBpb
 16379                                  ; ---------------------------------------------------------------------------
 16380                                  
 16381                                  InstallFakeBpb:
 16382                                  		; 24/12/2023
 16383 00000FF8 26804D3F04              		or	byte [es:di+3Fh], 4
 16384                                  		; 10/12/2022
 16385                                  		;or	byte [es:di+35], 4
 16386                                  		;;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 16387                                  					; return_fake_bpb
 16388                                  		; 24/12/2023
 16389                                  		; cx = 53 or 31
 16390                                  		;mov	cx, 25		; A_BPB.size - 6
 16391                                  					; move 'smaller' bpb
 16392 00000FFD 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 16393                                  CopyTheBpb:				
 16394 00001000 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 16395 00001003 F3A4                    		rep movsb
 16396 00001005 1E                      		push	ds		; Save packet segment
 16397                                  		; 17/10/2022
 16398 00001006 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16399                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16400                                  					; Setup	for ds -> Bios_Data
 16401 0000100B E8DD03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 16402 0000100E 1F                      		pop	ds		; Restore packet segment
 16403 0000100F 5F                      		pop	di		; Restore bds pointer
 16404                                  setTrackTable:	
 16405                                  		; 24/12/2023
 16406                                  		;mov	cx, [bx+38]	; [bx+26h]
 16407                                  		;;;
 16408 00001010 8B4F5C                  		mov	cx, [bx+5Ch]	; [bx+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES]
 16409                                  					; offset 85+7 (A_BPB.size+7) (FAT32)
 16410 00001013 2E803E[CC0E]00          		cmp	byte [cs:new_genioctl], 0
 16411 00001019 7503                    		jnz	short sdp_3	; new type (FAT32) structure
 16412 0000101B 8B4F26                  		mov	cx, [bx+26h]	; [bx+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES]
 16413                                  					; offset 31+7 (A_BPB.size+7)
 16414                                  sdp_3:
 16415                                  		;;;
 16416                                  
 16417 0000101E 1E                      		push	ds
 16418 0000101F 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16419 00001024 890E[AA04]              		mov	[sectorspertrack], cx
 16420 00001028 1F                      		pop	ds
 16421                                  		
 16422                                  		; 24/12/2023
 16423 00001029 2680653FF7              		and	byte [es:di+3Fh], 0F7h
 16424                                  		; 10/12/2022
 16425                                  		;and	byte [es:di+35], 0F7h
 16426                                  		;;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 16427                                  					; ~good_tracklayout
 16428 0000102E F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 16429                                  					; TRACKLAYOUT_IS_GOOD
 16430 00001031 7405                    		jz	short UglyTrackLayOut
 16431                                  		; 24/12/2023
 16432 00001033 26804D3F08              		or	byte [es:di+3Fh], 8
 16433                                  		; 10/12/2022
 16434                                  		;or	byte [es:di+35], 8
 16435                                  		;;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 16436                                  					; good_tracklayout
 16437                                  UglyTrackLayOut:
 16438 00001038 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 16439 0000103B 772D                    		ja	short TooManyPerTrack
 16440                                  		;jcxz	short SectorInfoSaved
 16441 0000103D E329                    		jcxz	SectorInfoSaved	; 19/10/2022
 16442                                  		
 16443 0000103F BF[AC04]                		mov	di, tracktable
 16444                                  
 16445                                  		; 24/12/2023
 16446                                  		;lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 16447                                  		;;;
 16448 00001042 8D775E                  		lea	si, [bx+5Eh]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 16449                                  					; offset 85+9 (A_BPB.size+9) (FAT32)
 16450 00001045 2E803E[CC0E]00          		cmp	byte [cs:new_genioctl], 0
 16451 0000104B 7503                    		jnz	short sdp_4	; new type (FAT32) structure
 16452 0000104D 8D7728                  		lea	si, [bx+28h]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 16453                                  					; offset 31+9 (A_BPB.size+9)
 16454                                  sdp_4:
 16455                                  		;;;
 16456                                  
 16457                                  		; 17/10/2022
 16458 00001050 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 16459                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16460                                  					; Trash	our bds	pointer
 16461                                  StoreSectorInfo:
 16462 00001055 47                      		inc	di
 16463 00001056 47                      		inc	di		; Skip over cylinder and head
 16464 00001057 AD                      		lodsw			; Get sector id
 16465 00001058 AA                      		stosb			; Copy it
 16466 00001059 AD                      		lodsw			; Get sector size
 16467                                  		
 16468                                  		; 24/12/2023
 16469                                  		; 02/09/2023 (PCDOS 7.1)
 16470                                  		;call	SectSizeToSectIndex
 16471 0000105A 80FC03                  		cmp	ah, 3 ; 02/09/2023
 16472                                  		;cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 16473                                  					; examine upper	byte only
 16474 0000105D 7704                    		ja	short OneK
 16475 0000105F 88E0                    		mov	al, ah		; value	in AH is the index!
 16476 00001061 EB02                    		jmp	short sdp_s
 16477                                  OneK:
 16478 00001063 B003                    		mov	al, 3		; 1024 bytes per sector
 16479                                  sdp_s:
 16480 00001065 AA                      		stosb			; Store	sector SIZE index
 16481 00001066 E2ED                    		loop	StoreSectorInfo
 16482                                  SectorInfoSaved:
 16483 00001068 F8                      		clc
 16484 00001069 C3                      		retn
 16485                                  ; ---------------------------------------------------------------------------
 16486                                  
 16487                                  TooManyPerTrack:
 16488 0000106A B00C                    		mov	al, 0Ch
 16489 0000106C F9                      		stc
 16490 0000106D C3                      		retn
 16491                                  ; ---------------------------------------------------------------------------
 16492                                  
 16493                                  ; 16/10/2022
 16494                                  
 16495                                  ; ==========================================================================
 16496                                  ; FormatTrack:
 16497                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 16498                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 16499                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 16500                                  ;
 16501                                  ; input: ES:di points to bds for drive
 16502                                  ;
 16503                                  ; output:
 16504                                  ;	for status call:
 16505                                  ;	specialfunction byte set to:
 16506                                  ;		0 - rom support + legal combination
 16507                                  ;		1 - no rom support
 16508                                  ;		2 - illegal combination
 16509                                  ;		3 - no media present
 16510                                  ;	carry cleared.
 16511                                  ;
 16512                                  ;	for format track:
 16513                                  ;		carry set if error
 16514                                  ;
 16515                                  ; ==========================================================================
 16516                                  
 16517                                  ; 16/03/2019
 16518                                  		; 24/12/2023 - Retro DOS 5.0
 16519                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:10B7h)
 16520                                  
 16521                                  		; 19/10/2022
 16522                                  FormatTrack:
 16523 0000106E C51E[1200]              		lds	bx, [ptrsav]
 16524 00001072 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 16525 00001075 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 16526                                  					; STATUS_FOR_FORMAT
 16527 00001078 740E                    		jz	short DoFormatTrack
 16528 0000107A 1E                      		push	ds
 16529                                  		; 17/10/2022
 16530 0000107B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16531                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16532 00001080 E82502                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 16533 00001083 1F                      		pop	ds
 16534 00001084 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 16535 00001086 F8                      		clc
 16536 00001087 C3                      		retn
 16537                                  ; ---------------------------------------------------------------------------
 16538                                  
 16539                                  DoFormatTrack:
 16540                                  		; 24/12/2023 - Retro DOS 5.0
 16541 00001088 26807D3E05              		cmp	byte [es:di+3Eh], 5				
 16542                                  		;cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 16543                                  					; DEV_HARDDISK
 16544 0000108D 7508                    		jnz	short DoFormatDiskette
 16545                                  		; 17/10/2022
 16546 0000108F 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16547                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16548                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 16549 00001094 E99D00                  		jmp	VerifyTrack
 16550                                  ; ---------------------------------------------------------------------------
 16551                                  
 16552                                  DoFormatDiskette:
 16553 00001097 8B4F01                  		mov	cx, [bx+1]
 16554 0000109A 8B5703                  		mov	dx, [bx+3]
 16555 0000109D F60702                  		test	byte [bx], 2
 16556                                  		; 17/10/2022
 16557 000010A0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 16558                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 16559                                  					; Setup	ds-> Bios_Data for verify
 16560 000010A5 7403                    		jz	short DoFormatDiskette_1
 16561 000010A7 E9E500                  		jmp	VerifyTrack_Err
 16562                                  ; ---------------------------------------------------------------------------
 16563                                  
 16564                                  DoFormatDiskette_1:
 16565 000010AA E8FB01                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 16566 000010AD 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 16567 000010AF 7406                    		jz	short NeedToSetDasd ; Old rom
 16568 000010B1 3C03                    		cmp	al, 3		; Time out error?
 16569 000010B3 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 16570                                  					; about	the illegal combination)
 16571 000010B5 EB68                    		jmp	short FormatFailed
 16572                                  ; ---------------------------------------------------------------------------
 16573                                  
 16574                                  NeedToSetDasd:
 16575 000010B7 52                      		push	dx
 16576 000010B8 E89001                  		call	SetDasd		; INT 13h, AH=17h
 16577 000010BB 5A                      		pop	dx
 16578                                  NoSetDasd:
 16579 000010BC E8BAF8                  		call	checksingle	; Do any needed	diskette swapping
 16580 000010BF 89D0                    		mov	ax, dx		; Get track from packet
 16581 000010C1 A3[3901]                		mov	[trknum], ax
 16582 000010C4 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 16583 000010C8 88CC                    		mov	ah, cl
 16584 000010CA BB[AC04]                		mov	bx, tracktable
 16585 000010CD 8B0E[AA04]              		mov	cx, [sectorspertrack]
 16586                                  		; 24/12/2023 - Retro DOS 5.0
 16587 000010D1 E307                    		jcxz	set_fmt_retry_count
 16588                                  StoreCylinderHead:
 16589 000010D3 8907                    		mov	[bx], ax	; Store	into TrackTable
 16590 000010D5 83C304                  		add	bx, 4		; Skip to next sector field
 16591 000010D8 E2F9                    		loop	StoreCylinderHead
 16592                                  set_fmt_retry_count:	; 24/12/2023
 16593                                  		;mov	cx, 5		; MAXERR - Set up retry	count
 16594                                  		; 02/09/2023
 16595 000010DA B105                    		mov	cl, 5
 16596                                  FormatRetry:
 16597 000010DC 51                      		push	cx
 16598 000010DD BB[AC04]                		mov	bx, tracktable
 16599 000010E0 A0[AA04]                		mov	al, [sectorspertrack]
 16600 000010E3 B405                    		mov	ah, 5		; romformat
 16601 000010E5 8C1E[A804]              		mov	[xfer_seg], ds
 16602 000010E9 E86602                  		call	ToRom
 16603 000010EC 59                      		pop	cx
 16604 000010ED 7216                    		jb	short FormatError
 16605 000010EF 51                      		push	cx		; Now verify the sectors just formatted.
 16606                                  					; NOTE:	because	of bug in some BIOSes we have to
 16607                                  					;	set ES:BX to 00:00
 16608 000010F0 53                      		push	bx
 16609 000010F1 31DB                    		xor	bx, bx
 16610 000010F3 891E[A804]              		mov	[xfer_seg], bx
 16611 000010F7 A0[AA04]                		mov	al, [sectorspertrack]
 16612 000010FA B404                    		mov	ah, 4		; romverify
 16613 000010FC B101                    		mov	cl, 1
 16614 000010FE E85102                  		call	ToRom
 16615 00001101 5B                      		pop	bx
 16616 00001102 59                      		pop	cx
 16617 00001103 7329                    		jnb	short FormatOk
 16618                                  FormatError:
 16619 00001105 E83402                  		call	ResetDisk
 16620 00001108 C606[AA05]01            		mov	byte [had_format_error], 1
 16621 0000110D 50                      		push	ax
 16622 0000110E 51                      		push	cx
 16623 0000110F 52                      		push	dx
 16624 00001110 E89501                  		call	SetMediaForFormat
 16625 00001113 3C01                    		cmp	al, 1
 16626 00001115 7503                    		jnz	short WhileErr
 16627 00001117 E83101                  		call	SetDasd
 16628                                  WhileErr:
 16629 0000111A 5A                      		pop	dx
 16630 0000111B 59                      		pop	cx
 16631 0000111C 58                      		pop	ax
 16632 0000111D E2BD                    		loop	FormatRetry
 16633                                  FormatFailed:
 16634 0000111F C606[AA05]01            		mov	byte [had_format_error], 1
 16635                                  					; Set the format error flag
 16636 00001124 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 16637 00001127 7502                    		jnz	short DoMapIt	; Error	to time	out error
 16638 00001129 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 16639                                  DoMapIt:
 16640 0000112B E97CFC                  		jmp	maperror
 16641                                  ; ---------------------------------------------------------------------------
 16642                                  
 16643                                  FormatOk:
 16644 0000112E C606[AA05]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 16645 00001133 C3                      		retn
 16646                                  ; ---------------------------------------------------------------------------
 16647                                  
 16648                                  ; 16/10/2022
 16649                                  
 16650                                  ; ==========================================================================
 16651                                  ;
 16652                                  ; VerifyTrack:
 16653                                  ;
 16654                                  ; input: ES:di points to bds for drive
 16655                                  ; ==========================================================================
 16656                                  
 16657                                  		; 24/12/2023 - Retro DOS 5.0
 16658                                  VerifyTrack:
 16659 00001134 1E                      		push	ds
 16660 00001135 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 16661 00001139 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16662                                  
 16663                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 16664                                  
 16665 0000113C 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 16666 0000113F 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 16667 00001142 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 16668 00001145 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 16669                                  					; Get option flag word
 16670 00001147 1F                      		pop	ds
 16671 00001148 C606[2001]04            		mov	byte [rflag], 4	; romverify
 16672 0000114D 890E[3301]              		mov	[curtrk], cx
 16673 00001151 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 16674 00001154 8B0E[AA04]              		mov	cx, [sectorspertrack]
 16675                                  
 16676                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 16677                                  		; specified if not we should go to the normal track verification
 16678                                  		; routine. If fast format has been specified we should get the
 16679                                  		; number of tracks to be verified and check it to see if it is
 16680                                  		; > 255. If it is then it is an error and we should go to
 16681                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 16682                                  		; sectors per track to get the total number of sectors to be
 16683                                  		; verified. This should also be less than equal to 255
 16684                                  		; otherwise we go to same error exit. If everything is okay
 16685                                  		; we initalise cx to the total sectors. use ax as a temporary
 16686                                  		; register.
 16687                                  
 16688                                  					; Special function requested?	
 16689 00001158 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 16690 0000115B 7421                    		jz	short NormVerifyTrack
 16691 0000115D 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 16692 0000115F 08E4                    		or	ah, ah
 16693 00001161 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 16694 00001163 F6E1                    		mul	cl
 16695 00001165 08E4                    		or	ah, ah
 16696 00001167 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 16697 00001169 89C1                    		mov	cx, ax
 16698                                  		; 24/12/2023
 16699 0000116B 26F6453F01              		test	byte [es:di+3Fh], 1 ; PCDOS 7.1 IBMBIO.COM
 16700                                  		; 10/12/2022
 16701                                  		;test	byte [es:di+35], 1
 16702                                  		;;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 16703                                  					; fnon_removable
 16704 00001170 740C                    		jz	short NormVerifyTrack
 16705                                  					; Multitrack operation = on?
 16706                                  		; 10/12/2022
 16707                                  		; 19/10/2022
 16708 00001172 F606[A004]80            		test	byte [multrk_flag], 80h
 16709                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 16710                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 16711 00001177 7405                    		jz	short NormVerifyTrack
 16712 00001179 C606[A704]01            		mov	byte [multitrk_format_flag], 1
 16713                                  NormVerifyTrack:
 16714 0000117E 31C0                    		xor	ax, ax		; 1st sector
 16715 00001180 31DB                    		xor	bx, bx
 16716 00001182 891E[A804]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 16717 00001186 E83F00                  		call	TrackIo
 16718 00001189 C606[A704]00            		mov	byte [multitrk_format_flag], 0
 16719 0000118E C3                      		retn
 16720                                  ; ---------------------------------------------------------------------------
 16721                                  
 16722                                  VerifyTrack_Err:
 16723 0000118F B401                    		mov	ah, 1
 16724 00001191 E916FC                  		jmp	maperror
 16725                                  ; ---------------------------------------------------------------------------
 16726                                  
 16727                                  ; 16/10/2022
 16728                                  
 16729                                  ; ==========================================================================
 16730                                  ;
 16731                                  ; ReadTrack:
 16732                                  ;
 16733                                  ; input: ES:di points to bds for drive
 16734                                  ;
 16735                                  ; ==========================================================================
 16736                                  
 16737                                  ReadTrack:
 16738 00001194 C606[2001]02            		mov	byte [rflag], 2	; romread
 16739 00001199 EB05                    		jmp	short ReadWriteTrack
 16740                                  ; ---------------------------------------------------------------------------
 16741                                  
 16742                                  WriteTrack:
 16743                                  
 16744                                  ; ==========================================================================
 16745                                  ;
 16746                                  ; WriteTrack:
 16747                                  ;
 16748                                  ; input: ES:di points to bds for drive
 16749                                  ;
 16750                                  ; ==========================================================================
 16751                                  				
 16752 0000119B C606[2001]03            		mov	byte [rflag], 3	; romwrite
 16753                                  
 16754                                  		; Fall into ReadWriteTrack
 16755                                  
 16756                                  ; ==========================================================================
 16757                                  ;
 16758                                  ; readWriteTrack:
 16759                                  ;
 16760                                  ; input:
 16761                                  ;    ES:di points to bds for drive
 16762                                  ;    rFlag - 2 for read,3 for write
 16763                                  ;
 16764                                  ; ==========================================================================
 16765                                  
 16766                                  ReadWriteTrack:	
 16767                                  		; save bds pointer segment so we can use it to access
 16768                                  		; our packet. Notice that this is not the standard register
 16769                                  		; assignment for accessing packets
 16770                                  		
 16771                                  		; 19/10/2022
 16772 000011A0 06                      		push	es
 16773 000011A1 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 16774 000011A5 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 16775 000011A9 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 16776 000011AD A3[3301]                		mov	[curtrk], ax
 16777 000011B0 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 16778 000011B4 A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 16779 000011B7 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 16780 000011BB 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 16781 000011BF 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 16782                                  					; Get transfer address
 16783                                  
 16784                                  		; we just trashed our packet address, but we no longer care
 16785                                  
 16786 000011C3 8C06[A804]              		mov	[xfer_seg], es	; Pass transfer	segment
 16787 000011C7 07                      		pop	es
 16788                                  
 16789                                  		; Fall into TrackIo
 16790                                  
 16791                                  ; =============== S U B	R O U T	I N E =======================================
 16792                                  
 16793                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16794                                  
 16795                                  ; ==========================================================================
 16796                                  ;
 16797                                  ; TrackIo:
 16798                                  ;    performs track read/write/verify
 16799                                  ;
 16800                                  ;   input:
 16801                                  ;      rFlag	- 2 = read
 16802                                  ;		  3 = write
 16803                                  ;		  4 = verify
 16804                                  ;      AX	- Index into track table of first sector to io
 16805                                  ;      CX	- Number of sectors to io
 16806                                  ;      Xfer_Seg:BX - Transfer address
 16807                                  ;      ES:DI	- Pointer to bds
 16808                                  ;      CurTrk	- Current cylinder
 16809                                  ;      CurHd	- Current head
 16810                                  ;
 16811                                  ; ==========================================================================
 16812                                  
 16813                                  ; 16/03/2019 - Retro DOS v4.0
 16814                                  
 16815                                  		; 24/12/2023 - Retro DOS 5.0		
 16816                                  
 16817                                  		; 19/10/2022
 16818                                  TrackIo:
 16819                                  					; Procedure `disk' will pop stack to
 16820 000011C8 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 16821 000011CC E8AAF7                  		call	checksingle	; Ensure correct disk is in drv
 16822 000011CF 803E[A905]01            		cmp	byte [media_set_for_format], 1
 16823                                  					; See if we have already set	disk
 16824 000011D4 7407                    		jz	short Dptalreadyset ; base table
 16825 000011D6 50                      		push	ax		; set up tables	and variables for i/o
 16826 000011D7 51                      		push	cx
 16827 000011D8 E8A1F9                  		call	iosetup
 16828 000011DB 59                      		pop	cx
 16829 000011DC 58                      		pop	ax
 16830                                  Dptalreadyset:				; Point si at the table entry of the			
 16831 000011DD BE[AC04]                		mov	si, tracktable	; first sector to be io'd
 16832                                  		; 24/12/2023
 16833                                  		;add	ax, ax		; PCDOS 7.1 IBMBIO.COM
 16834                                  		;add	ax, ax
 16835 000011E0 D1E0                    		shl	ax, 1
 16836 000011E2 D1E0                    		shl	ax, 1
 16837 000011E4 01C6                    		add	si, ax
 16838                                  
 16839                                  		; WE WANT:
 16840                                  		; CX to	be the number of times we have to loop
 16841                                  		; DX to	be the number of sectors we read on each iteration
 16842                                  		
 16843 000011E6 BA0100                  		mov	dx, 1
 16844                                  
 16845                                  		; 24/12/2023
 16846 000011E9 26F6453F08              		test	byte [es:di+3Fh], 8 ; PCDOS 7.1 IBMBIO.COM
 16847                                  		; 12/12/2022
 16848                                  		;test	byte [es:di+23h], 8
 16849                                  		;;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 16850                                  					; good_tracklayout
 16851 000011EE 7402                    		jz	short ionextsector
 16852                                  		
 16853 000011F0 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 16854                                  ionextsector:
 16855 000011F2 51                      		push	cx
 16856 000011F3 52                      		push	dx
 16857 000011F4 46                      		inc	si
 16858 000011F5 46                      		inc	si		; Skip over the	cylinder and head in
 16859                                  					; the track table
 16860 000011F6 AC                      		lodsb			; Get sector ID	from track table
 16861 000011F7 A2[3101]                		mov	[cursec], al
 16862                                  
 16863                                  		; assumptions for a fixed disk multi-track disk	i/o
 16864                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 16865                                  		;     only CL is valid.
 16866                                  		; 2). Sector size should be set	to 512 bytes.
 16867                                  		; 3). Good track layout
 16868                                  		
 16869                                  		; 24/12/2023
 16870 000011FA 26F6453F01              		test	byte [es:di+3Fh], 1 ; PCDOS 7.1 IBMBIO.COM
 16871                                  		; 12/12/2022
 16872                                  		;test	byte [es:di+23h], 1
 16873                                  		;;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 16874                                  					; fnon_removable ; Fixed disk?
 16875 000011FF 7414                    		jz	short IoRemovable ; No
 16876                                  
 16877                                  		; 12/12/2022
 16878 00001201 F606[A004]80            		test	byte [multrk_flag], 80h
 16879                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 16880                                  						; Allow multi-track operation?
 16881 00001206 740D                    		jz	short IoRemovable ; No,don't do that.
 16882 00001208 8916[2201]              		mov	[seccnt], dx
 16883 0000120C 89D0                    		mov	ax, dx
 16884 0000120E E826FA                  		call	Disk
 16885 00001211 5A                      		pop	dx
 16886 00001212 59                      		pop	cx
 16887 00001213 F8                      		clc
 16888 00001214 C3                      		retn
 16889                                  ; ---------------------------------------------------------------------------
 16890                                  
 16891                                  IoRemovable:
 16892 00001215 AC                      		lodsb			; Get sector size index	from track
 16893                                  					; table	and save it
 16894 00001216 50                      		push	ax
 16895 00001217 56                      		push	si
 16896 00001218 1E                      		push	ds		; Save Bios_Data
 16897 00001219 50                      		push	ax
 16898 0000121A 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 16899                                  					; Fetch	EOT while ds-> Bios_Data
 16900 0000121E C536[2D01]              		lds	si, [dpt]
 16901 00001222 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 16902 00001225 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 16903 00001228 58                      		pop	ax
 16904 00001229 1F                      		pop	ds
 16905 0000122A 88D0                    		mov	al, dl
 16906 0000122C A3[2201]                		mov	[seccnt], ax
 16907 0000122F E805FA                  		call	Disk
 16908 00001232 5E                      		pop	si		; Advance buffer pointer by adding
 16909                                  					; sector size
 16910                                  		;pop	ax
 16911                                  		; 24/12/2023
 16912 00001233 59                      		pop	cx
 16913                                  
 16914                                  		; 02/09/2023 (PCDOS 7.1)
 16915                                  		;call	SectorSizeIndexToSectorSize
 16916                                  		;mov	cl, al	; 24/12/2023
 16917 00001234 B88000                  		mov	ax, 128
 16918 00001237 D3E0                    		shl	ax, cl
 16919                                  
 16920 00001239 01C3                    		add	bx, ax
 16921 0000123B 5A                      		pop	dx
 16922 0000123C 59                      		pop	cx
 16923 0000123D E2B3                    		loop	ionextsector
 16924 0000123F 803E[A905]01            		cmp	byte [media_set_for_format], 1
 16925                                  		;jz	short NoNeedDone
 16926                                  		; 12/12/2022
 16927 00001244 7404                    		je	short NoNeedDone2
 16928 00001246 E87AF9                  		call	done		; set time of last access, and reset
 16929                                  					; entries in Dpt.
 16930                                  NoNeedDone:
 16931 00001249 F8                      		clc	; not necessary ('done' clears cf) ; 24/12/2023
 16932                                  NoNeedDone2:
 16933 0000124A C3                      		retn
 16934                                  
 16935                                  ; =============== S U B	R O U T	I N E =======================================
 16936                                  
 16937                                  ; ---------------------------------------------------------------------------
 16938                                  ;
 16939                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 16940                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 16941                                  ; are permissible.
 16942                                  ;
 16943                                  ; On Input   AX contains sector size in bytes
 16944                                  ; On Output  AL Contains index
 16945                                  ; All other registers preserved
 16946                                  ;
 16947                                  ; ---------------------------------------------------------------------------
 16948                                  
 16949                                  ; 02/09/2023
 16950                                  ;SectSizeToSectIndex:
 16951                                  ;		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 16952                                  ;					; examine upper	byte only
 16953                                  ;		ja	short OneK
 16954                                  ;		mov	al, ah		; value	in AH is the index!
 16955                                  ;		retn
 16956                                  
 16957                                  ; ---------------------------------------------------------------------------
 16958                                  ;
 16959                                  ;OneK:
 16960                                  ;		mov	al, 3
 16961                                  ;		retn
 16962                                  
 16963                                  ; =============== S U B	R O U T	I N E =======================================
 16964                                  
 16965                                  ; 02/09/2023
 16966                                  ;SectorSizeIndexToSectorSize:
 16967                                  ;		mov	cl, al
 16968                                  ;		mov	ax, 128
 16969                                  ;		shl	ax, cl
 16970                                  ;		retn
 16971                                  
 16972                                  ; =============== S U B	R O U T	I N E =======================================
 16973                                  
 16974                                  ; 16/10/2022
 16975                                  
 16976                                  ; ---------------------------------------------------------------------------
 16977                                  ;
 16978                                  ; SetDASD
 16979                                  ;
 16980                                  ; Set up the rom for formatting.
 16981                                  ; we have to tell the rom bios what type of disk is in the drive.
 16982                                  ;
 16983                                  ; On Input   - ES:di - Points to bds
 16984                                  ;
 16985                                  ; ---------------------------------------------------------------------------
 16986                                  
 16987                                  		; 24/12/2023 - Retro DOS 5.0
 16988                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:129Bh)
 16989                                  
 16990                                  		; 19/10/2022
 16991                                  SetDasd:
 16992 0000124B 803E[AA05]01            		cmp	byte [had_format_error], 1 ;
 16993                                  					; See if we've previously set dasd type
 16994 00001250 740C                    		jz	short DoSetDasd
 16995                                  		; 24/12/2023
 16996 00001252 26F6453F80              		test	byte [es:di+3Fh], 80h
 16997                                  		; 10/12/2022
 16998                                  		;test	byte [es:di+23h], 80h
 16999                                  		;;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 17000                                  					; set_dasd_true
 17001 00001257 7446                    		jz	short DasdHasBeenSet
 17002                                  		; 24/12/2023
 17003 00001259 2680653F7F              		and	byte [es:di+3Fh], 7Fh
 17004                                  		; 10/12/2022
 17005                                  		;and	byte [es:di+23h], 7Fh
 17006                                  		;;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 17007                                  					; ~set_dasd_true
 17008                                  DoSetDasd:
 17009 0000125E C606[AA05]00            		mov	byte [had_format_error], 0 ; Reset it
 17010 00001263 C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 17011 00001268 B004                    		mov	al, 4
 17012                                  		; 24/12/2023
 17013 0000126A 268A653E                		mov	ah, [es:di+3Eh]
 17014                                  		; 02/09/2023
 17015                                  		;mov	ah, [es:di+22h] ; [es:di+BDS.formfactor]
 17016 0000126E 80FC02                  		cmp	ah, 2
 17017                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 17018                                  					; DEV_3INCH720KB
 17019 00001271 7414                    		jz	short DoSet
 17020                                  		; 24/12/2023
 17021 00001273 B001                    		mov	al, 1
 17022                                  		;cmp	ah, 1
 17023 00001275 38C4                    		cmp	ah, al	; 1
 17024                                  		;cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 17025                                  					; DEV_5INCH96TPI
 17026                                  		;jz	short GotBig
 17027                                  		; 24/12/2023
 17028                                  		;mov	al, 1
 17029                                  		;jmp	short DoSet
 17030                                  		; 02/09/2023
 17031 00001277 750E                    		jnz	short DoSet
 17032                                  GotBig:
 17033                                  		;mov	al, 2		; 160/320k in a	1.2 meg	drive
 17034                                  		; 02/09/2023
 17035 00001279 40                      		inc	ax  ; mov al, 2
 17036 0000127A 803E[A805]00            		cmp	byte [mediatype], 0
 17037 0000127F 7506                    		jnz	short DoSet
 17038                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 17039                                  		; 10/12/2022
 17040                                  		;inc	al  ; al = 3
 17041                                  		; 18/12/2022
 17042 00001281 40                      		inc	ax  ; al = 3
 17043 00001282 C606[3B01]54            		mov	byte [gap_patch], 54h
 17044                                  DoSet:
 17045 00001287 1E                      		push	ds
 17046 00001288 56                      		push	si
 17047                                  
 17048                                  		;mov	ds, [zeroseg]	; Point	to interrupt vectors
 17049                                  		; 02/09/2023
 17050 00001289 31F6                    		xor	si, si
 17051 0000128B 8EDE                    		mov	ds, si	; 0
 17052                                  
 17053 0000128D C5367800                		lds	si, [DSKADR]
 17054                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 17055                                  		;;lds	si, ds:78h
 17056                                  
 17057 00001291 C644090F                		mov	byte [si+9], 0Fh ;
 17058                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 17059 00001295 5E                      		pop	si
 17060 00001296 1F                      		pop	ds
 17061 00001297 B417                    		mov	ah, 17h
 17062 00001299 268A5504                		mov	dl, [es:di+4]
 17063 0000129D CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 17064                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 17065                                  DasdHasBeenSet:
 17066 0000129F 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 17067 000012A3 8826[3701]              		mov	[formt_eot], ah
 17068 000012A7 C3                      		retn
 17069                                  
 17070                                  ; =============== S U B	R O U T	I N E =======================================
 17071                                  
 17072                                  ; 16/10/2022
 17073                                  
 17074                                  ; ---------------------------------------------------------------------------
 17075                                  ;
 17076                                  ; Set Media Type for Format
 17077                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 17078                                  ; BPB area in the BDS can be handled by the rom.
 17079                                  ; On Input, ES:DI -> current BDS.
 17080                                  ; The status of the operation is returned in AL
 17081                                  ;
 17082                                  ;	- 0 - if the support is available,and the combination is valid.
 17083                                  ;	- 1 - no rom support
 17084                                  ;	- 2 - illegal combination
 17085                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 17086                                  ;
 17087                                  ; Flags also may be altered. All other registers preserved.
 17088                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 17089                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 17090                                  ; to the one returned. the original pointer to the disk base table is stored
 17091                                  ; in TempDpt, until it is restored.
 17092                                  ;
 17093                                  ; ---------------------------------------------------------------------------
 17094                                  
 17095                                  		; 24/12/2023 - Retro DOS 5.0
 17096                                  
 17097                                  		; 19/10/2022
 17098                                  SetMediaForFormat:	
 17099 000012A8 51                      		push	cx
 17100 000012A9 52                      		push	dx
 17101                                  
 17102                                  		; If we have a format error, then do not change Dpt, TempDpt.
 17103                                  		; but we need to call int 13h, ah=18h again.
 17104                                  
 17105 000012AA 803E[AA05]01            		cmp	byte [had_format_error], 1
 17106 000012AF 7425                    		jz	short SkipSaveDskAdr
 17107 000012B1 30C0                    		xor	al, al		; If already done return 0
 17108 000012B3 803E[A905]01            		cmp	byte [media_set_for_format], 1
 17109 000012B8 7502                    		jnz	short DoSetMediaForFormat
 17110 000012BA EB7D                    		jmp	SetMediaRet	; Media	already	set
 17111                                  ; ---------------------------------------------------------------------------
 17112                                  
 17113                                  DoSetMediaForFormat:
 17114 000012BC 06                      		push	es
 17115 000012BD 56                      		push	si
 17116                                  
 17117                                  		; 02/09/2023
 17118                                  		;mov	es, [zeroseg]	; Point to interrupt vectors
 17119 000012BE 31F6                    		xor	si, si ; 0
 17120 000012C0 8EC6                    		mov	es, si
 17121                                  
 17122 000012C2 26C4367800              		les	si, [es:DSKADR]
 17123                                  		;les	si, es:78h	; [es:DSKADR]
 17124                                  					; Get pointer to disk base table
 17125 000012C7 8936[2D01]              		mov	[dpt], si
 17126 000012CB 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 17127                                  
 17128                                  		; Initialize the head settle time to 0Fh. See the offsets
 17129                                  		; given in dskprm.inc.
 17130                                  
 17131 000012CF 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 17132 000012D4 5E                      		pop	si
 17133 000012D5 07                      		pop	es
 17134                                  SkipSaveDskAdr:
 17135                                  		; 24/12/2023
 17136 000012D6 268B4D41                		mov	cx, [es:di+41h]	; (PCDOS 7.1 IBMBIO.COM)
 17137                                  		;mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 17138 000012DA 49                      		dec	cx
 17139 000012DB 80E503                  		and	ch, 3
 17140 000012DE D0CD                    		ror	ch, 1
 17141 000012E0 D0CD                    		ror	ch, 1
 17142 000012E2 86E9                    		xchg	ch, cl
 17143 000012E4 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 17144 000012E8 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17145 000012EC 06                      		push	es
 17146 000012ED 1E                      		push	ds
 17147 000012EE 56                      		push	si
 17148 000012EF 57                      		push	di
 17149 000012F0 B418                    		mov	ah, 18h
 17150 000012F2 CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 17151                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 17152 000012F4 7231                    		jc	short FormaStatErr
 17153 000012F6 803E[AA05]01            		cmp	byte [had_format_error], 1
 17154 000012FB 7423                    		jz	short skip_disk_base_setting
 17155 000012FD 06                      		push	es		; Save segment returned	by the rom
 17156                                  
 17157                                  		; 02/09/2023
 17158                                  		;mov	es, [zeroseg]	; Point	to interrupt vector segment
 17159 000012FE 31F6                    		xor	si, si
 17160 00001300 8EC6                    		mov	es, si ; 0
 17161 00001302 06                      		push	es ; * ; 02/09/2023
 17162                                  
 17163 00001303 26C4367800              		les	si, [es:DSKADR]
 17164                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 17165                                  					; Get current disk base	table
 17166 00001308 8936[AB05]              		mov	[tempdpt], si
 17167 0000130C 8C06[AD05]              		mov	[tempdpt+2], es ; Save it
 17168                                  
 17169                                  		; 02/09/2023
 17170                                  		;;mov	es, [zeroseg]
 17171                                  		;xor	si, si ; 0
 17172                                  		;mov	es, si
 17173 00001310 07                      		pop	es ; * ; 02/09/2023
 17174                                  
 17175                                  		;mov	es:78h,	di
 17176 00001311 26893E7800              		mov	[es:DSKADR], di
 17177                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 17178 00001316 268F067A00              		pop	word [es:DSKADR+2]
 17179 0000131B C606[A905]01            		mov	byte [media_set_for_format], 1
 17180                                  skip_disk_base_setting:
 17181 00001320 30C0                    		xor	al, al		; Legal	combination + rom support code
 17182                                  		;mov	ds:had_format_error, al	; Reset	the flag
 17183 00001322 A2[AA05]                		mov	[had_format_error], al
 17184 00001325 EB0E                    		jmp	short PopStatRet
 17185                                  ; ---------------------------------------------------------------------------
 17186                                  
 17187                                  FormaStatErr:
 17188                                  		; 10/12/2022
 17189 00001327 B003                    		mov	al, 3
 17190                                  
 17191 00001329 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 17192                                  					; Illegal combination =	0Ch
 17193 0000132C 7406                    		jz	short FormatStatIllegalComb
 17194 0000132E 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 17195 00001331 7402                    		jz	short FormatStatTimeOut
 17196                                  		; 10/12/2022
 17197                                  		;dec	al
 17198                                  		; 18/12/2022
 17199 00001333 48                      		dec	ax
 17200                                  		; al = 2
 17201                                  		;mov	al, 1		; Function not supported.
 17202                                  		;jmp	short PopStatRet
 17203                                  ; ---------------------------------------------------------------------------
 17204                                  
 17205                                  FormatStatIllegalComb:
 17206                                  		; 10/12/2022
 17207                                  		;dec	al	; 3 -> 2 or 2 -> 1
 17208                                  		; 18/12/2022
 17209 00001334 48                      		dec	ax
 17210                                  		; al = 2
 17211                                  		;mov	al, 2		; Function supported, but
 17212                                  					; Illegal sect/trk,trk combination.
 17213                                  		; 10/12/2022
 17214                                  		;jmp	short PopStatRet
 17215                                  ; ---------------------------------------------------------------------------
 17216                                  
 17217                                  FormatStatTimeOut:
 17218                                  		; 10/12/2022
 17219                                  		; al = 3
 17220                                  		;mov	al, 3		; Function supported, but
 17221                                  					; Media	not present.
 17222                                  PopStatRet:
 17223 00001335 5F                      		pop	di
 17224 00001336 5E                      		pop	si
 17225 00001337 1F                      		pop	ds
 17226 00001338 07                      		pop	es
 17227                                  SetMediaRet:
 17228 00001339 5A                      		pop	dx
 17229 0000133A 59                      		pop	cx
 17230 0000133B C3                      		retn
 17231                                  
 17232                                  ; =============== S U B	R O U T	I N E =======================================
 17233                                  
 17234                                  ; 16/10/2022
 17235                                  
 17236                                  ; ---------------------------------------------------------------------------
 17237                                  ;
 17238                                  ; RESET THE DRIVE
 17239                                  ;
 17240                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 17241                                  ; slow head settle time for the next operation. this is because the reset
 17242                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 17243                                  ; time around - there is a problem with 3.5" drives in that the head does
 17244                                  ; not settle down in time,even for read operations!!
 17245                                  ;
 17246                                  ; ---------------------------------------------------------------------------
 17247                                  
 17248                                  ResetDisk:
 17249 0000133C 50                      		push	ax
 17250                                  
 17251                                  		; 02/09/2023
 17252 0000133D B80100                  		mov	ax, 1 ; PCDOS 7.1
 17253 00001340 3806[A905]              		cmp	[media_set_for_format], al ; 1
 17254                                  		;cmp	byte [media_set_for_format], 1
 17255                                  					; Reset while formatting?
 17256 00001344 7503                    		jnz	short ResetDisk_cont
 17257                                  					; Then verify operation in "fmt & vrfy"
 17258                                  		;mov	byte [had_format_error], 1 ; Might have failed.
 17259 00001346 A2[AA05]                		mov	[had_format_error], al ; 1
 17260                                  ResetDisk_cont:
 17261                                  		; 02/09/2023 (ah=0)
 17262                                  		;xor	ah, ah		; So signals that we had a format error
 17263 00001349 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 17264                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 17265 0000134B C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 17266                                  					; Zap up the speed
 17267 00001350 58                      		pop	ax
 17268 00001351 C3                      		retn
 17269                                  
 17270                                  ; =============== S U B	R O U T	I N E =======================================
 17271                                  
 17272                                  ; 16/10/2022
 17273                                  
 17274                                  ; ---------------------------------------------------------------------------
 17275                                  ;
 17276                                  ; This routine sets up the drive parameter table with the values needed for
 17277                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 17278                                  ;
 17279                                  ; on entry  -	ES:DI - points to bds for the drive
 17280                                  ;		Xfer_Seg:BX - points to trkbuf
 17281                                  ;		AL    - number of sectors
 17282                                  ;		AH    - int 13 function code
 17283                                  ;		CL    - sector number for verify
 17284                                  ;		DS    - Bios_Data
 17285                                  ;
 17286                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 17287                                  ;		AX and flags are the results of the int 13
 17288                                  ;
 17289                                  ; ---------------------------------------------------------------------------
 17290                                  
 17291                                  		; 24/12/2023 - Retro DOS 5.0
 17292                                  
 17293                                  		; 19/10/2022
 17294                                  ToRom:
 17295 00001352 53                      		push	bx
 17296 00001353 56                      		push	si
 17297                                  
 17298                                  		; Compaq bug fix - check whether we are using new ROM
 17299                                  		; functionality to set up format, not merely if it exists.
 17300                                  		; This was formerly a check against [new_rom]
 17301                                  
 17302 00001354 F606[A905]01            		test	byte [media_set_for_format], 1
 17303 00001359 7534                    		jnz	short GotValidDpt
 17304 0000135B 50                      		push	ax
 17305 0000135C 06                      		push	es		; Save bds segment
 17306                                  		; 24/12/2023
 17307 0000135D 26807D3E02              		cmp	byte [es:di+3Eh], 2
 17308                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 17309                                  					; ffSmall ; is it a 3.5" drive?
 17310                                  		; 24/12/2023
 17311                                  		;pushf	; not necessary	; (Save	the cmp	result)
 17312 00001362 8E06[1A00]              		mov	es, [zeroseg]
 17313                                  		;les	si, es:78h	; Get pointer to disk base table
 17314 00001366 26C4367800              		les	si, [es:DSKADR]
 17315                                  		;mov	word ptr ds:dpt, si
 17316                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 17317 0000136B 8936[2D01]              		mov	[dpt], si
 17318 0000136F 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 17319                                  		
 17320 00001373 A0[3701]                		mov	al, [formt_eot]
 17321 00001376 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 17322 0000137A A0[3B01]                		mov	al, [gap_patch]
 17323 0000137D 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 17324                                  					; Important for	format
 17325 00001381 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 17326                                  					; Assume we are	doing a	seek operation
 17327                                  					; Setup	motor start correctly for 3.5" drives
 17328                                  		; 24/12/2023
 17329                                  		;popf			; Get result of	earlier	cmp
 17330 00001386 7505                    		jnz	short MotorStrtOK
 17331 00001388 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 17332                                  MotorStrtOK:
 17333 0000138D 07                      		pop	es		; Restore bds segment
 17334 0000138E 58                      		pop	ax
 17335                                  GotValidDpt:
 17336 0000138F 8B16[3901]              		mov	dx, [trknum]	; Set track number
 17337 00001393 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 17338 00001395 268A5504                		mov	dl, [es:di+4]	; Set drive number
 17339 00001399 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 17340 0000139D 06                      		push	es		; Save bds segment
 17341 0000139E 8E06[A804]              		mov	es, [xfer_seg]
 17342 000013A2 CD13                    		int	13h		; DISK -
 17343 000013A4 07                      		pop	es		; Restore bds segment
 17344 000013A5 5E                      		pop	si
 17345 000013A6 5B                      		pop	bx
 17346 000013A7 C3                      		retn
 17347                                  
 17348                                  ; ---------------------------------------------------------------------------
 17349                                  
 17350                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17351                                  ; 24/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 17352                                  
 17353                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 17354                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1404h
 17355                                  
 17356                                  ; ==========================================================================
 17357                                  ;
 17358                                  ; get the owner of the physical drive represented by the logical drive in al.
 17359                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 17360                                  ; if this is not the case, the system may hang, just following the linked list.
 17361                                  ;
 17362                                  ; ==========================================================================
 17363                                  
 17364                                  		; 24/12/2023 - Retro DOS 5.0
 17365                                  
 17366                                  		; 19/10/2022
 17367                                  ioctl_getown:
 17368 000013A8 E8F9F1                  		call	SetDrive
 17369 000013AB 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 17370                                  					; Get physical drive number
 17371 000013AF C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 17372                                  ownloop:
 17373 000013B3 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 17374 000013B7 7507                    		jnz	short getnextBDS
 17375                                  		; 24/12/2023
 17376 000013B9 26F6453F20              		test	byte [es:di+3Fh], 20h ; (PCDOS 7.1 IBMBIO.COM)
 17377                                  		; 10/12/2022
 17378                                  		;test	byte [es:di+23h], 20h
 17379                                  		;;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 17380                                  					; fi_own_physical
 17381 000013BE 7514                    		jnz	short exitown
 17382                                  getnextBDS:
 17383 000013C0 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 17384 000013C3 EBEE                    		jmp	short ownloop
 17385                                  ; ---------------------------------------------------------------------------
 17386                                  
 17387                                  ; ==========================================================================
 17388                                  ;
 17389                                  ; set the ownership of the physical drive represented by the logical drive
 17390                                  ; in al to al.
 17391                                  ;
 17392                                  ; ==========================================================================
 17393                                  
 17394                                  		; 24/12/2023 - Retro DOS 5.0
 17395                                  
 17396                                  		; 19/10/2022
 17397                                  ioctl_setown:
 17398 000013C5 E8DCF1                  		call	SetDrive
 17399 000013C8 C606[7A00]01            		mov	byte [fsetowner], 1
 17400                                  					; set flag for CheckSingle to look at.
 17401 000013CD E8A9F5                  		call	checksingle
 17402                                  		; 02/09/2023
 17403 000013D0 FE0E[7A00]              		dec	byte [fsetowner] ; 0
 17404                                  		;mov	byte [fsetowner], 0
 17405                                  					; set ownership	of drive reset flag
 17406                                  		; Fall into ExitOwn
 17407                                  
 17408                                  ; ==========================================================================
 17409                                  ;
 17410                                  ; if there is only one logical drive assigned to this physical drive, return
 17411                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 17412                                  ;
 17413                                  ; ==========================================================================
 17414                                  
 17415                                  		; 24/12/2023 - Retro DOS 5.0
 17416                                  exitown:
 17417 000013D4 30C9                    		xor	cl, cl
 17418                                  		; 24/12/2023
 17419 000013D6 26F6453F10              		test	byte [es:di+3Fh], 10h ; (PCDOS 7.1 IBMBIO.COM)
 17420                                  		; 12/12/2022
 17421                                  		;test	byte [es:di+23h], 10h
 17422                                  		;;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 17423                                  					; fi_am_mult
 17424 000013DB 7406                    		jz	short exitnomult
 17425 000013DD 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 17426                                  					; Get logical drive number
 17427                                  					; Get it 1-based
 17428 000013E1 FEC1                    		inc	cl
 17429                                  exitnomult:
 17430 000013E3 C51E[1200]              		lds	bx, [ptrsav]
 17431 000013E7 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 17432                                  					; Exit normal termination
 17433                                  		; 12/12/2022
 17434                                  		; cf=0
 17435                                  		;clc
 17436 000013EA C3                      		retn
 17437                                  
 17438                                  ; =============== S U B	R O U T	I N E =======================================
 17439                                  
 17440                                  ; 16/10/2022
 17441                                  
 17442                                  ; ---------------------------------------------------------------------------
 17443                                  ;
 17444                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 17445                                  ; only if the first byte of TempDpt is not -1.
 17446                                  ; all registers (including flags) are preserved.
 17447                                  ;
 17448                                  ; ---------------------------------------------------------------------------
 17449                                  
 17450                                  		; 24/12/2023
 17451                                  		; 19/10/2022
 17452                                  RestoreOldDpt:
 17453                                  		; if we have already restored the disk base table earlier,
 17454                                  		; do not do it again.
 17455                                  
 17456 000013EB 50                      		push	ax
 17457 000013EC 30C0                    		xor	al, al
 17458 000013EE A2[AA05]                		mov	[had_format_error], al	; Reset flag and 
 17459 000013F1 8606[A905]              		xchg	al, [media_set_for_format] ; get current flag setting
 17460 000013F5 08C0                    		or	al, al
 17461 000013F7 7418                    		jz	short DontRestore
 17462 000013F9 56                      		push	si
 17463 000013FA 1E                      		push	ds
 17464 000013FB 06                      		push	es
 17465 000013FC C536[AB05]              		lds	si, [tempdpt]
 17466                                  
 17467                                  		; 17/10/2022
 17468                                  		;mov	es, [cs:BIOSDATAWORD]
 17469                                  		;;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 17470                                  		;mov	es, [es:zeroseg]
 17471                                  		;;mov	es, es:zeroseg	; CAS -- bleeeech!
 17472                                  
 17473                                  		; 24/12/2023
 17474 00001400 31C0                    		xor	ax, ax
 17475 00001402 8EC0                    		mov	es, ax ; 0
 17476                                  
 17477                                  		;mov	es:78h,	si	; [es:DSKADR]  (Int 1Eh)
 17478 00001404 2689367800              		mov	[es:DSKADR], si
 17479                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 17480 00001409 268C1E7A00              		mov	[es:DSKADR+2], ds
 17481 0000140E 07                      		pop	es
 17482 0000140F 1F                      		pop	ds
 17483 00001410 5E                      		pop	si
 17484                                  DontRestore:
 17485 00001411 58                      		pop	ax
 17486                                  		; 12/12/2022
 17487                                  		; cf=0
 17488                                  		;clc			;  Clear carry
 17489 00001412 C3                      		retn
 17490                                  
 17491                                  ; ---------------------------------------------------------------------------
 17492                                  
 17493                                  ; 16/10/2022
 17494                                  
 17495                                  ; ==========================================================================
 17496                                  ;	get media id
 17497                                  ; ==========================================================================
 17498                                  ;
 17499                                  ; FUNCTION: get the volume label,the system id and the serial number from
 17500                                  ;	    the media that has the extended boot record.
 17501                                  ;	    for the conventional media,this routine will return "unknown
 17502                                  ;	    media type" error to dos.
 17503                                  ;
 17504                                  ; INPUT :   ES:di -> bds table for this drive.
 17505                                  ;
 17506                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 17507                                  ;	    if carry set,then al contains the device driver error number
 17508                                  ;	    that will be returned to dos.
 17509                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 17510                                  ;
 17511                                  ; SUBROUTINES TO BE CALLED:
 17512                                  ;	BootIo:NEAR
 17513                                  ;
 17514                                  ; LOGIC:
 17515                                  ;	to recognize the extended boot record,this logic will actually
 17516                                  ;	access the boot sector even if it is a hard disk.
 17517                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 17518                                  ;	field of bpb and the extended boot signature.
 17519                                  ;
 17520                                  ; {
 17521                                  ;	get logical drive number from bds table;
 17522                                  ;	rFlag = read operation;
 17523                                  ;	BootIo;		 /*get the media boot record into the buffer
 17524                                  ;	if (no error) then
 17525                                  ;	     if (extended boot record) then
 17526                                  ;		{ set volume label,volume serial number and system id
 17527                                  ;		  of the request packet to those of the boot record;
 17528                                  ;		};
 17529                                  ;	     else		  /*not an extended bpb */
 17530                                  ;		{ set register al to "unknown media.." error code;
 17531                                  ;		  set carry bit;
 17532                                  ;		};
 17533                                  ;	else
 17534                                  ;	     ret;	/*already error code is set in the register al
 17535                                  ;
 17536                                  ; ==========================================================================
 17537                                  
 17538                                  ;size_of_EXT_BOOT_SERIAL equ 4
 17539                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 17540                                  ;;size_of_EXT_SYSTEM_ID equ 8
 17541                                  
 17542                                  		; 24/12/2023 - Retro DOS 5.0
 17543                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:1478h)
 17544                                  
 17545                                  		; 19/10/2022
 17546                                  GetMediaId:
 17547 00001413 E8B000                  		call	ChangeLineChk
 17548 00001416 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 17549 0000141A C606[2001]02            		mov	byte [rflag], 2	; Read operation
 17550 0000141F E88C00                  		call	BootIo		; Read boot sector into	DiskSector
 17551 00001422 722E                    		jb	short IOCtl_If1
 17552                                  					; Valid? (0F0h-0FFh?)
 17553 00001424 803E[6701]F0            		cmp	byte [disksector+15h], 0F0h
 17554                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 17555                                  		;jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 17556                                  		; 24/12/2023
 17557 00001429 7225                    		jb	short IOCtl_If7		
 17558                                  
 17559                                  		; 24/12/2023
 17560                                  		; 10/12/2022
 17561                                  		;mov	si, disksector+26h
 17562                                  		;;;
 17563                                  		; 24/12/2023
 17564                                  		;mov	si, disksector+43h ; BS_FAT32_VolID
 17565 0000142B BE[9401]                		mov	si, disksector+42h ; BS_FAT32_BootSig ; 24/12/2023
 17566 0000142E 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 17567 00001433 7403                    		jz	short IOCtl_If3 ; FAT32 fs
 17568 00001435 83EE1C                  		sub	si, 1Ch         ; FAT (12-16) fs ; 43h-1Ch = 27h ; BS_VolID
 17569                                  		; si = disksector+26h = BS_BootSig ; 24/12/2023
 17570                                  IOCtl_If3:
 17571                                  		;cmp	byte [si-1], 29h ; BS_BootSig or BS_FAT32_BootSig
 17572                                  		;;;
 17573 00001438 803C29                  		cmp	byte [si], 29h
 17574                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 17575                                  					; EXT_BOOT_SIGNATURE
 17576 0000143B 7512                    		jne	short IOCtl_If2	; not extended boot record
 17577 0000143D C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 17578 00001441 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17579                                  		; 10/12/2022
 17580                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 17581 00001445 46                      		inc	si
 17582                                  		; 24/12/2023
 17583                                  		; si = disksector+27h (BS_VolID)
 17584                                  		;      or disksector+43h (BS_FAT32_VolID)
 17585                                  
 17586 00001446 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 17587                                  IOCtl_If4:		; 24/12/2023
 17588 00001449 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 17589                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 17590                                  					; +size_of_EXT_SYSTEM_ID
 17591 0000144C F3A4                    		rep movsb		; Move from Bios_Data into request packet
 17592                                  	
 17593                                  		; 10/12/2022
 17594                                  		; cf = 0
 17595                                  		;clc
 17596                                  
 17597 0000144E C3                      		retn
 17598                                  ; ---------------------------------------------------------------------------
 17599                                  
 17600                                  		; 24/12/2023
 17601                                  IOCtl_If2:
 17602 0000144F F9                      		stc	
 17603                                  IOCtl_If7:
 17604 00001450 B007                    		mov	al, 7		; error_unknown_media
 17605                                  		;stc
 17606                                  IOCtl_If6:
 17607                                  IOCtl_If1:
 17608 00001452 C3                      		retn
 17609                                  ; ---------------------------------------------------------------------------
 17610                                  
 17611                                  ; 16/10/2022
 17612                                  
 17613                                  ; ==========================================================================
 17614                                  ;  set media id
 17615                                  ; ==========================================================================
 17616                                  
 17617                                  ; function: set the volume label, the system id and the serial number of
 17618                                  ;	    the media that has the extended boot record.
 17619                                  ;	    for the conventional media, this routine will return "unknown
 17620                                  ;	    media.." error to dos.
 17621                                  ;	    this routine will also set the corresponding informations in
 17622                                  ;	    the bds table.
 17623                                  ;
 17624                                  ; input :   ES:di -> bds table for this drive.
 17625                                  ;
 17626                                  ; output:   the extended boot record in the media will be set according to
 17627                                  ;	    the request packet.
 17628                                  ;	    if carry set, then al contains the device driver error number
 17629                                  ;	    that will be returned to dos.
 17630                                  ;
 17631                                  ; subroutines to be called:
 17632                                  ;	BootIo:NEAR
 17633                                  ;
 17634                                  ; logic:
 17635                                  ;
 17636                                  ; {
 17637                                  ;	get drive_number from bds;
 17638                                  ;	rFlag = "read operation";
 17639                                  ;	BootIo;
 17640                                  ;	if (no error) then
 17641                                  ;	     if (extended boot record) then
 17642                                  ;		{ set volume label,volume serial number and system id
 17643                                  ;		  of the boot record to those of the request packet;
 17644                                  ;		  rFlag = "write operation";
 17645                                  ;		  get drive number from bds;
 17646                                  ;		  BootIo;	  /*write it back*/
 17647                                  ;		};
 17648                                  ;	     else		  /*not an extended bpb */
 17649                                  ;		{ set register al to "unknown media.." error code;
 17650                                  ;		  set carry bit;
 17651                                  ;		  ret;	 /*return back to caller */
 17652                                  ;		};
 17653                                  ;	else
 17654                                  ;	     ret;		 /*already error code is set */
 17655                                  ;
 17656                                  ; ==========================================================================
 17657                                  
 17658                                  		; 24/12/2023 - Retro DOS 5.0
 17659                                  
 17660                                  		; 19/10/2022
 17661                                  SetMediaId:
 17662 00001453 E87000                  		call	ChangeLineChk
 17663 00001456 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 17664                                  					; Logical drive	number
 17665 0000145A 88C2                    		mov	dl, al
 17666 0000145C C606[2001]02            		mov	byte [rflag], 2	; romread
 17667 00001461 52                      		push	dx
 17668 00001462 E84900                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 17669 00001465 5A                      		pop	dx
 17670 00001466 72EA                    		jb	short IOCtl_If6
 17671                                  					; Valid? (0F0h-0FFh?)
 17672 00001468 803E[6701]F0            		cmp	byte [disksector+15h], 0F0h
 17673                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 17674 0000146D 72E1                    		jb	short IOCtl_If7	; Brif not
 17675                                  
 17676                                  		; 24/12/2023
 17677                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 17678                                  		;			; EXT_BOOT_SIGNATURE
 17679                                  		;jnz	short IOCtl_If7	; not extended boot record
 17680                                  		
 17681 0000146F 06                      		push	es		; Save BDS pointer
 17682 00001470 57                      		push	di
 17683 00001471 1E                      		push	ds		; Point	ES To boot record
 17684 00001472 07                      		pop	es
 17685                                  
 17686                                  		; 24/12/2023
 17687                                  		;;;
 17688                                  		;mov	di, disksector+43h ; disksector+EXT_BOOT.SERIAL
 17689 00001473 BF[9401]                		mov	di, disksector+42h ; BS_FAT32_BootSig ; 24/12/2023 
 17690 00001476 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB.FATSz16
 17691 0000147B 7403                    		jz      short IOCtl_If5	; FAT32 fs
 17692 0000147D 83EF1C                  		sub	di, 1Ch		; 67-28 ; offset disksektor+27h
 17693                                  		; di = disksector+26h = BS_BootSig ; 24/12/2023
 17694                                  IOCtl_If5:
 17695                                  		;cmp	byte [di-1], 29h ; BS_BootSig or BS_FAT32_BootSig
 17696 00001480 803D29                  		cmp	byte [di], 29h
 17697 00001483 7404                    		je	short IOCtl_If8
 17698 00001485 5F                      		pop	di		; not extended boot record
 17699 00001486 07                      		pop	es
 17700                                  		;jmp	short IOCtl_If7
 17701                                  		; 24/12/2023
 17702 00001487 EBC6                    		jmp	short IOCtl_If2
 17703                                  IOCtl_If8:
 17704                                  		;;;
 17705                                  		; 24/12/2023
 17706                                  		;mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 17707 00001489 47                      		inc	di
 17708                                  		; di = disksector+27h (BS_VolID)
 17709                                  		;      or disksector+43h (BS_FAT32_VolID)
 17710                                  
 17711 0000148A C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 17712 0000148E C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 17713 00001491 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 17714                                  		
 17715                                  		; 24/12/2023
 17716                                  		;mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 17717                                  		;			; +size_of_EXT_BOOT_VOL_LABEL
 17718                                  		;			; +size_of_EXT_SYSTEM_ID
 17719                                  		;rep movsb
 17720 00001494 E8B2FF                  		call	IOCtl_If4       ; copy volume serial, label and system id
 17721                                  
 17722 00001497 06                      		push	es		; point	ds back	to Bios_Data
 17723 00001498 1F                      		pop	ds
 17724 00001499 5F                      		pop	di		; restore bds pointer
 17725 0000149A 07                      		pop	es
 17726 0000149B E8B3F3                  		call	mov_media_ids	; update the bds media id info.
 17727 0000149E 88D0                    		mov	al, dl
 17728 000014A0 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 17729 000014A5 E80600                  		call	BootIo		; write	it back.
 17730 000014A8 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 17731                                  					; make sure chk_media check the driver
 17732                                  					; return with error code from BootIo
 17733 000014AD C3                      		retn
 17734                                  ; ---------------------------------------------------------------------------
 17735                                  
 17736                                  		; 24/12/2023
 17737                                  ;IOCtl_If7:
 17738                                  ;		mov	al, 7		; error_unknown_media
 17739                                  ;		stc
 17740                                  ;IOCtl_If6:
 17741                                  ;		retn
 17742                                  
 17743                                  ; =============== S U B	R O U T	I N E =======================================
 17744                                  
 17745                                  ; 16/10/2022
 17746                                  
 17747                                  ; ---------------------------------------------------------------------------
 17748                                  ;	BootIo
 17749                                  ; ---------------------------------------------------------------------------
 17750                                  ;
 17751                                  ; function: read/write the boot record into boot sector.
 17752                                  ;
 17753                                  ; input :
 17754                                  ;	    al=logical drive number
 17755                                  ;	    rFlag = operation (read/write)
 17756                                  ;
 17757                                  ; output:   for read operation,the boot record of the drive specified in bds
 17758                                  ;	    be read into the DiskSector buffer.
 17759                                  ;	    for write operation,the DiskSector buffer image will be written
 17760                                  ;	    to the drive specified in bds.
 17761                                  ;	    if carry set,then al contains the device driver error number
 17762                                  ;	    that will be returned to dos.
 17763                                  ;	    AX,CX,DX register destroyed.
 17764                                  ;	    if carry set,then al will contain the error code from DiskIO.
 17765                                  ;
 17766                                  ; subroutines to be called:
 17767                                  ;	DiskIO:NEAR
 17768                                  ;
 17769                                  ; logic:
 17770                                  ;
 17771                                  ; {
 17772                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 17773                                  ;	sectorcount = 1;	 /*read 1 sector only */
 17774                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 17775                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 17776                                  ; }
 17777                                  ; ==========================================================================
 17778                                  
 17779                                  		; 19/10/2022
 17780                                  BootIo:	
 17781 000014AE 06                      		push	es
 17782 000014AF 57                      		push	di
 17783 000014B0 53                      		push	bx
 17784 000014B1 1E                      		push	ds
 17785 000014B2 07                      		pop	es		; Point ES: to Bios_Data
 17786                                  
 17787                                  		; Call DiskIO to read/write the boot sec. The parameters which
 17788                                  		; need to be initialized for this subroutine out here are
 17789                                  		; - Transfer address to Bios_Data:DiskSector
 17790                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 17791                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 17792                                  		; - Number of sectors <-- 1
 17793                                  
 17794 000014B3 BF[5201]                		mov	di, disksector	; es:di -> transfer address
 17795 000014B6 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 17796 000014B8 8916[9C04]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 17797 000014BC B90100                  		mov	cx, 1
 17798 000014BF E851F5                  		call	diskio
 17799 000014C2 5B                      		pop	bx
 17800 000014C3 5F                      		pop	di
 17801 000014C4 07                      		pop	es
 17802 000014C5 C3                      		retn
 17803                                  
 17804                                  ; =============== S U B	R O U T	I N E =======================================
 17805                                  
 17806                                  ; 16/10/2022
 17807                                  
 17808                                  ; ---------------------------------------------------------------------------
 17809                                  ;	ChangeLineChk
 17810                                  ; ---------------------------------------------------------------------------
 17811                                  ;
 17812                                  ; when the user calls get/set media id call before dos establishes the media
 17813                                  ; by calling "media_chk",the change line activity of the drive is going to be
 17814                                  ; lost.	this routine will check the change line activity and will save the
 17815                                  ; history in the flags.
 17816                                  ;
 17817                                  ; FUNCTION: check the change line error activity
 17818                                  ;
 17819                                  ; INPUT :  ES:di -> bds table.
 17820                                  ;
 17821                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 17822                                  ;
 17823                                  ; SUBROUTINES TO BE CALLED:
 17824                                  ;	Set_Changed_DL
 17825                                  ;
 17826                                  ; ---------------------------------------------------------------------------
 17827                                  
 17828                                  		; 24/12/2023 - Retro DOS 5.0
 17829                                  ChangeLineChk:	
 17830 000014C6 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 17831 000014CA 08D2                    		or	dl, dl		; Fixed	disk?
 17832 000014CC 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 17833                                  		; 24/12/2023
 17834 000014CE 26F6453F04              		test	byte [es:di+3Fh], 4 ; [es:di+BDS.flags] ; PCDOS 7.1
 17835                                  		; 12/12/2022
 17836                                  		;test	byte [es:di+23h], 4
 17837                                  		;;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 17838                                  					; return_fake_bpb
 17839 000014D3 751A                    		jnz	short ChangeLnChkRet
 17840 000014D5 803E[7700]01            		cmp	byte [fhave96], 1   ; This rom support change line?
 17841 000014DA 7513                    		jnz	short ChangeLnChkRet
 17842 000014DC E8B207                  		call	haschange	; This drive support change line?
 17843 000014DF 740E                    		jz	short ChangeLnChkRet ; Do nothing
 17844                                  
 17845                                  		; Execute the rom disk interrupt to check changeline activity.
 17846                                  
 17847 000014E1 B416                    		mov	ah, 16h
 17848 000014E3 CD13                    		int	13h	; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 17849                                  				; DL = drive to	check
 17850                                  				; Return: AH = disk change status
 17851 000014E5 7308                    		jnb	short ChangeLnChkRet
 17852 000014E7 53                      		push	bx
 17853 000014E8 BB4000                  		mov	bx, 40h		; fchanged
 17854                                  					; Update flag in BDS for this
 17855                                  					; physical drive
 17856 000014EB E87C07                  		call	set_changed_dl
 17857 000014EE 5B                      		pop	bx
 17858                                  ChangeLnChkRet:				
 17859 000014EF C3                      		retn
 17860                                  
 17861                                  ; ---------------------------------------------------------------------------
 17862                                  
 17863                                  ; 16/10/2022
 17864                                  
 17865                                  ; ==========================================================================
 17866                                  ;	GetAccessFlag
 17867                                  ; ==========================================================================
 17868                                  ;
 17869                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 17870                                  ;
 17871                                  ; INPUT :
 17872                                  ;	    ES:di -> bds table
 17873                                  ;
 17874                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 17875                                  ;						 = 1 if disk i/o allowed.
 17876                                  ; ==========================================================================
 17877                                  
 17878                                  		; 24/12/2023 - Retro DOS 5.0
 17879                                  
 17880                                  		; 19/10/2022
 17881                                  GetAccessFlag:				
 17882 000014F0 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 17883 000014F4 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17884                                  		;mov	al, 0		; Assume result	is unformatted
 17885                                  		; 10/12/2022
 17886 000014F7 28C0                    		sub	al, al
 17887                                  		; 24/12/2023
 17888 000014F9 26F6454002              		test	byte [es:di+40h], 02h ; (PCDOS 7.1 IBMBIO.COM)
 17889                                  		;test	word ptr es:[di+3Fh], 200h
 17890                                  		; 10/12/2022
 17891                                  		;test	byte [es:di+36], 02h
 17892                                  		;;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 17893                                  					; unformatted_media
 17894 000014FE 7501                    		jnz	short GafDone	; Done if unformatted
 17895                                  		;inc	al		; Return true for formatted
 17896                                  		; 24/12/2023
 17897 00001500 40                      		inc	ax
 17898                                  GafDone:				
 17899 00001501 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 17900 00001504 C3                      		retn
 17901                                  ; ---------------------------------------------------------------------------
 17902                                  
 17903                                  ; 16/10/2022
 17904                                  
 17905                                  ; ==========================================================================
 17906                                  ;	SetAccessFlag
 17907                                  ; ==========================================================================
 17908                                  ;
 17909                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 17910                                  ;
 17911                                  ; input :
 17912                                  ;	    ES:di -> bds table
 17913                                  ;
 17914                                  ; output:   unformtted_media bit modified according to the user request
 17915                                  ; ==========================================================================
 17916                                  
 17917                                  		; 24/12/2023 - Retro DOS 5.0
 17918                                  
 17919                                  		; 19/10/2022
 17920                                  SetAccessFlag:				
 17921 00001505 C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 17922 00001509 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 17923                                  		; 24/12/2023
 17924 0000150C 26806540FD              		and	byte [es:di+40h], 0FDh ; (PCDOS 7.1 IBMBIO.COM)
 17925                                  		;and	word ptr es:[di+3Fh], 0FDFFh
 17926                                  		; 10/12/2022
 17927                                  		;and	byte [es:di+36], 0FDh
 17928                                  		;;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 17929                                  					; ~unformatted_media
 17930 00001511 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 17931 00001515 750A                    		jnz	short saf_Done
 17932                                  		; 24/12/2023
 17933 00001517 26804D4002              		or	byte [es:di+40h], 02h ; (PCDOS 7.1 IBMBIO.COM)
 17934                                  		;or	word ptr es:[di+3Fh], 200h
 17935                                  		; 10/12/2022
 17936 0000151C 26804D2402              		or	byte [es:di+36], 02h
 17937                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 17938                                  					; unformatted_media
 17939                                  saf_Done:				
 17940 00001521 C3                      		retn
 17941                                  ; ---------------------------------------------------------------------------
 17942                                  
 17943                                  ; 16/10/2022
 17944                                  
 17945                                  ; ==========================================================================
 17946                                  ; Ioctl_Support_Query
 17947                                  ; ==========================================================================
 17948                                  ;
 17949                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 17950                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 17951                                  ; device attributes specifies if this function is supported.
 17952                                  ;
 17953                                  ; ==========================================================================
 17954                                  
 17955                                  		; 24/12/2023 - Retro DOS 5.0
 17956                                  
 17957                                  		; 19/10/2022
 17958                                  ioctl_support_query:
 17959 00001522 06                      		push	es
 17960 00001523 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 17961 00001527 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 17962                                  					; AL ==	Major, AH == Minor
 17963                                  		; 24/12/2023
 17964                                  		; 02/09/2023 (PCDOS 7.1)
 17965 0000152B 3C48                    		cmp	al, 48h		; IOC_NEW_DC (PCDOS 7.1)
 17966                                  					; new generic ioctl function (FAT32)
 17967 0000152D 7404                    		je	short ioctl_support
 17968                                  
 17969 0000152F 3C08                    		cmp	al, 8		; IOC_DC
 17970                                  					; See if major code is 8
 17971 00001531 7513                    		jne	short nosupport
 17972                                  ioctl_support:
 17973 00001533 0E                      		push	cs
 17974 00001534 07                      		pop	es
 17975                                  		; 24/12/2023
 17976                                  		; 02/09/2023
 17977 00001535 B90E00                  		mov	cx, 14          ; (PCDOS 7.1) IOC_DC_TABLE_LEN
 17978                                  		;mov	cx, 11		; IOC_DC_TABLE_LEN
 17979                                  		; 10/12/2022
 17980 00001538 BF[BE0E]                		mov	di, IOC_DC_Table
 17981                                  		;mov	di, 0C60h	; IOC_DC_Table
 17982                                  					; at 2C7h:0C60h	= 70h:31D0h
 17983 0000153B 86C4                    		xchg	al, ah		; Put minor code in AL
 17984 0000153D F2AE                    		repne scasb		; Scan for minor code in AL
 17985 0000153F 7505                    		jnz	short nosupport	; it was not found
 17986 00001541 B80001                  		mov	ax, 100h
 17987                                  		; 10/12/2022
 17988                                  		; (jump to ioctlsupexit is not required)
 17989                                  		;jmp	short $+2	; ioctlsupexit
 17990                                  					; Signal ioctl is supported
 17991                                  		;;jmp	short ioctlsupexit
 17992                                  ; ---------------------------------------------------------------------------
 17993                                  ioctlsupexit:
 17994 00001544 07                      		pop	es
 17995                                  		; 10/12/2022
 17996                                  		; cf = 0
 17997                                  		;clc
 17998 00001545 C3                      		retn
 17999                                  ; ---------------------------------------------------------------------------
 18000                                  nosupport:
 18001 00001546 07                      		pop	es
 18002 00001547 E98BEB                  		jmp	bc_cmderr
 18003                                  ; ---------------------------------------------------------------------------
 18004                                  
 18005                                  ; 16/10/2022
 18006                                  
 18007                                  ; ==========================================================================
 18008                                  ;	GetMediaSenseStatus
 18009                                  ; ==========================================================================
 18010                                  ;
 18011                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 18012                                  ;	    diskette drive and whether the media is the default type
 18013                                  ;	    for that drive. (default type means the max size for that
 18014                                  ;	    drive)
 18015                                  ;
 18016                                  ; INPUT :   ES:DI -> BDS table
 18017                                  ; OUTPUT:   If carry clear
 18018                                  ;	    DS:BX -> Updated IOCtlPacket
 18019                                  ;
 18020                                  ;			 Special Function at offset 0:
 18021                                  ;				0	- Media detected is not default type
 18022                                  ;				1	- Media detected is default type
 18023                                  ;
 18024                                  ;			 Device Type at offset 1:
 18025                                  ;				2       - 720K 3.5" 80 tracks
 18026                                  ;				7	- 1.44M 3.5" 80 tracks
 18027                                  ;				9	- 2.88M 3.5" 80 tracks
 18028                                  ;
 18029                                  ; Error Codes returned in AX if carry set:
 18030                                  ;
 18031                                  ; 8102 - Drive not ready	- No disk is in the drive.
 18032                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 18033                                  ;				  the media is really unkown, any error
 18034                                  ;				  other than "media not present"
 18035                                  ; 
 18036                                  ; ==========================================================================
 18037                                  
 18038                                  		; 19/10/2022
 18039                                  SenseMediaType:
 18040 0000154A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 18041 0000154E C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 18042                                  		; 10/10/2022
 18043                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 18044 00001551 31D2                    		xor	dx, dx
 18045 00001553 8917                    		mov	[bx], dx ; 0
 18046                                  		;
 18047 00001555 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 18048                                  					; Get int 13h drive number from	BDS
 18049                                  		; 10/12/2022
 18050                                  		;xor	dh, dh		; DX = physical	drive number
 18051 00001559 B420                    		mov	ah, 20h		; Get Media Type function
 18052                                  					; If no	carry media type in AL
 18053 0000155B CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 18054 0000155D 7216                    		jc	short MediaSenseEr ; error code	in AH
 18055 0000155F FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 18056                                  DetermineMediaType:
 18057 00001561 FEC8                    		dec	al
 18058 00001563 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 18059 00001565 740A                    		jz	short GotMediaType
 18060 00001567 0404                    		add	al, 4
 18061 00001569 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 18062 0000156B 7404                    		jz	short GotMediaType
 18063 0000156D 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 18064 0000156F 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 18065                                  GotMediaType:
 18066 00001571 884701                  		mov	[bx+1],	al	; Save the return value
 18067                                  		; 10/12/2022
 18068                                  		; cf = 0
 18069                                  		;clc			; Signal success
 18070 00001574 C3                      		retn
 18071                                  ; ---------------------------------------------------------------------------
 18072                                  
 18073                                  MediaSenseEr:
 18074 00001575 80FC32                  		cmp	ah, 32h		; See if not default media error
 18075 00001578 74E7                    		jz	short DetermineMediaType ; Not really an error
 18076 0000157A B002                    		mov	al, 2		; Now assume drive not ready
 18077 0000157C 80FC31                  		cmp	ah, 31h		; See if media was present
 18078 0000157F 7402                    		jz	short SenseErrExit ; Return drive not ready
 18079                                  UnknownMediaType:
 18080 00001581 B007                    		mov	al, 7		; Just don't know the media type
 18081                                  SenseErrExit:
 18082 00001583 B481                    		mov	ah, 81h		; Signal error return
 18083 00001585 F9                      		stc
 18084 00001586 C3                      		retn
 18085                                  
 18086                                  ; ----------------------------------------------------------------------------
 18087                                  		; 10/12/2022
 18088                                  		;db    0
 18089                                  ; ----------------------------------------------------------------------------
 18090                                  
 18091                                  ;-----------------------------------------------------------------------------
 18092                                  ; PCDOS 7.1 IBMBIO.COM - BIOSCODE:15F2h
 18093                                  ;-----------------------------------------------------------------------------
 18094                                  ; 26/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1)
 18095                                  
 18096                                  ; =============== S U B R O U T I N E =======================================
 18097                                  
 18098                                  SetLockState:
 18099 00001587 C51E[1200]              		lds	bx, [ptrsav]	; set media lock state
 18100 0000158B C55F13                  		lds	bx, [bx+13h]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 18101                                  		;mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 18102                                  		;call	check_int13h_exts_present
 18103                                  		; 26/12/2023
 18104 0000158E E82100                  		call	check_int13h_exts_p
 18105                                  		;mov	al, 3		; unknown command error
 18106 00001591 721C                    		jc	short setlockst_ret
 18107 00001593 8A07                    		mov	al, [bx]	; [bx+A_LOCKSTATE_CONTROL.LOCKSTATE_FUNCTIONS]
 18108 00001595 B445                    		mov	ah, 45h
 18109 00001597 CD13                    		int	13h		; DISK - IBM/MS Extension - LOCK/UNLOCK DRIVE
 18110                                  		; (DL - drive, [SI - disk address packet)
 18111 00001599 884701                  		mov	[bx+1], al	; 1 = locked, 0 = not locked
 18112                                  		; [bx+A_LOCKSTATE_CONTROL.LOCKSTATE_FLAG]
 18113                                  		
 18114                                  		; 26/12/2023
 18115 0000159C EB0A                    		jmp	short sls_em
 18116                                  
 18117                                  ;		jnc	short setlockst_ret
 18118                                  ;		mov	al, ah
 18119                                  ;		call	maperror
 18120                                  ;setlockst_ret:
 18121                                  ;		mov	ah, 81h		; Return this status in case of carry
 18122                                  ;		retn
 18123                                  
 18124                                  ; =============== S U B R O U T I N E =======================================
 18125                                  
 18126                                  EjectMedia:
 18127                                  		;mov	dl, [es:di+4]	; eject media in drive
 18128                                  		;			; [es:di+BDS.drivenum]
 18129                                  		;call	check_int13h_exts_present
 18130                                  		; 26/12/2023
 18131 0000159E E81100                  		call	check_int13h_exts_p
 18132                                  		;mov	al, 3		; unknown command error
 18133 000015A1 720C                    		jc	short ejectm_ret
 18134 000015A3 B80046                  		mov	ax, 4600h
 18135 000015A6 CD13                    		int	13h		; DISK - IBM/MS Extension - EJECT MEDIA
 18136                                  		; (DL - drive)
 18137                                  sls_em:			; 26/12/2023
 18138 000015A8 7305                    		jnc	short ejectm_ret
 18139 000015AA 88E0                    		mov	al, ah
 18140 000015AC E8FBF7                  		call	maperror
 18141                                  setlockst_ret:		; 26/12/2023
 18142                                  ejectm_ret:
 18143 000015AF B481                    		mov	ah, 81h		; Return this status in case of carry
 18144 000015B1 C3                      		retn
 18145                                  
 18146                                  ; =============== S U B R O U T I N E =======================================
 18147                                  
 18148                                  		; 26/12/2023
 18149                                  check_int13h_exts_p:
 18150 000015B2 268A5504                		mov	dl, [es:di+4]
 18151                                  
 18152                                  check_int13h_exts_present:
 18153 000015B6 B441                    		mov	ah, 41h
 18154 000015B8 53                      		push	bx
 18155 000015B9 BBAA55                  		mov	bx, 55AAh
 18156 000015BC CD13                    		int	13h		; DISK - Check for INT 13h Extensions
 18157                                  					; BX = 55AAh, DL = drive number
 18158                                  					; Return: CF set if not supported
 18159                                  					; AH = extensions version
 18160                                  					; BX = AA55h
 18161                                  					; CX = Interface support bit map
 18162 000015BE 81FB55AA                		cmp	bx, 0AA55h
 18163 000015C2 5B                      		pop	bx
 18164 000015C3 7505                    		jnz	short exts_notsupported
 18165 000015C5 F6C102                  		test	cl, 2		; bit 1 - drive locking and ejecting subset
 18166 000015C8 7503                    		jnz	short exts_supported
 18167                                  exts_notsupported:
 18168                                  		; 26/12/2023
 18169 000015CA B003                    		mov	al, 3
 18170                                  		;
 18171 000015CC F9                      		stc
 18172                                  exts_supported:
 18173 000015CD C3                      		retn
 18174                                  
 18175                                  ; =============== S U B R O U T I N E =======================================
 18176                                  
 18177                                  GetDrvMapInfo:
 18178 000015CE 8CD9                    		mov	cx, ds		; get drive map information
 18179                                  					;
 18180                                  					; es:di points to BDS which belongs to
 18181                                  					;	  the requested logical/dos drive number
 18182                                  					;
 18183                                  					; Format of parameter block:
 18184                                  					; Offset  Description (Table 01570)
 18185                                  					;  00h    (call) length of this buffer (in bytes)
 18186                                  					;  01h    (ret) number of bytes in parameter block
 18187                                  					;	    actually used
 18188                                  					;  02h    (ret) drive flags
 18189                                  					;  03h    (ret) physical drive number
 18190                                  					;	    00h-7Fh floppy
 18191                                  					;	    80h-FEh hard
 18192                                  					;	    FFh no physical drive
 18193                                  					;  04h    (ret) bitmap of logical drives associated with
 18194                                  					;	    physical drive
 18195                                  					;	    bit 0 = drive A:, etc.
 18196                                  					;  08h    (ret) relative block address of partition start
 18197                                  					;	    qword
 18198                                  					;
 18199                                  					; Ref: Ralf Brown's Interrupt List, INTERRUP.G
 18200 000015D0 C51E[1200]              		lds	bx, [ptrsav]
 18201 000015D4 C55F13                  		lds	bx, [bx+13h]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 18202 000015D7 B80381                  		mov	ax, 8103h	; ah = generic ioctl error code (81h)
 18203                                  					; al = unknown command error (03h)
 18204 000015DA 803F10                  		cmp	byte [bx], 10h	; parameter buffer length = 16 bytes
 18205 000015DD 7251                    		jb	short gdmi_4
 18206 000015DF 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 18207 000015E3 885703                  		mov	[bx+3], dl	; parameter block - offset 3 - physical drive number
 18208 000015E6 C6470110                		mov	byte [bx+1], 10h ; parameter block - actually used length
 18209 000015EA 268B4517                		mov	ax, [es:di+17h]	; [es:di+BDS.hiddensectors]
 18210 000015EE 894708                  		mov	[bx+8], ax	; parameter block - offset 8 - partition start LBA
 18211 000015F1 268B4519                		mov	ax, [es:di+19h]	; [es:di+BDS.hiddensectors+2]
 18212 000015F5 89470A                  		mov	[bx+0Ah], ax	; parameter block - offset 10
 18213 000015F8 31C0                    		xor	ax, ax ; 0
 18214 000015FA 884702                  		mov	[bx+2], al	; drive flags = 0 (protected mode flags etc.)
 18215 000015FD 89470C                  		mov	[bx+0Ch], ax	; high dword of partition start address (LBA) is 0
 18216 00001600 89470E                  		mov	[bx+0Eh], ax
 18217 00001603 894704                  		mov	[bx+4], ax	; logical drive bitmap of same physical drive
 18218                                  					; initialized as 0
 18219 00001606 894706                  		mov	[bx+6], ax ; 0
 18220 00001609 8EC1                    		mov	es, cx
 18221                                  		;les	di, dword ptr es:start_bds ; 1st BDS
 18222 0000160B 26C43E[1901]            		les	di, [es:start_bds]
 18223 00001610 B90100                  		mov	cx, 1		; bit 0 (drive A:)
 18224                                  gdmi_1:
 18225 00001613 83FFFF                  		cmp	di, 0FFFFh	; last BDS ?
 18226 00001616 7415                    		jz	short gdmi_3	; yes
 18227 00001618 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum], dl
 18228                                  					; is it same physical drive ?
 18229 0000161C 7506                    		jnz	short gdmi_2	; no
 18230 0000161E 094F04                  		or	[bx+4], cx	; set bit for logical drive index of this BDS
 18231                                  					; (previously) shifted bit (which is 1/ON) is in ax:cx
 18232 00001621 094706                  		or	[bx+6], ax
 18233                                  gdmi_2:
 18234 00001624 D1E1                    		shl	cx, 1		; shift one left for setting the next drive's bit
 18235 00001626 D1D0                    		rcl	ax, 1		; set high word of the bit select (set) value
 18236 00001628 26C43D                  		les	di, [es:di]	; next BDS
 18237 0000162B EBE6                    		jmp	short gdmi_1	; loop until di = -1 (last BDS sign)
 18238                                  gdmi_3:
 18239 0000162D B80001                  		mov	ax, 100h	; success
 18240                                  gdmi_4:
 18241 00001630 C3                      		retn
 18242                                  
 18243                                  ;-----------------------------------------------------------------------------
 18244                                  
 18245                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18246                                  ; 26/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 18247                                  
 18248                                  ;-----------------------------------------------------------------------------
 18249                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 18250                                  ;-----------------------------------------------------------------------------
 18251                                  ; 16/03/2019 - Retro DOS v4.0
 18252                                  
 18253                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 18254                                  ;	after booting. this allows testing and implementation of custom int_13
 18255                                  ;	handlers, without giving up ms-dos error recovery
 18256                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 18257                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 18258                                  ;	exit:	orig13	== address of new int_13 handler
 18259                                  ;		ds:dx	== old orig13 value
 18260                                  ;		es:bx	== old old13  value
 18261                                  ;
 18262                                  ; int 2f handler for external block drivers to communicate with the internal
 18263                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 18264                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 18265                                  ; dsk_entry, the entry point for all disk requests.
 18266                                  ;
 18267                                  ; on exit from this driver, we will return to the external driver
 18268                                  ; that issued this int 2f, and can then remove the flags from the stack.
 18269                                  ; this scheme allows us to have a small external device driver, and makes
 18270                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 18271                                  ; since we only need to make changes in one place (most of the time).
 18272                                  ;
 18273                                  ;   ax=800h - check for installed handler - reserved
 18274                                  ;   ax=801h - install the bds into the linked list
 18275                                  ;   ax=802h - dos request
 18276                                  ;   ax=803h - return bds table starting pointer in ds:di
 18277                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 18278                                  ;	    problem. bds table is going to be used to get head/sector
 18279                                  ;	    informations without calling generic ioctl get device parm call.)
 18280                                  
 18281                                  ;BIOSSEGMENT equ 70h
 18282                                  DOSBIOSSEG equ 0070h ; 17/10/2022
 18283                                  
 18284                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 18285                                  ;BIOSCODE:16AAh (PCDOS 7.1, IBMBIO.COM) ; 26/12/2023
 18286                                  
 18287                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 18288 00001631 80FC13                  		cmp	ah, 13h
 18289 00001634 7413                    		jz	short int2f_replace_int13
 18290 00001636 80FC08                  		cmp	ah, 8
 18291 00001639 7432                    		jz	short mine
 18292                                  
 18293                                  ; Check for WIN386 startup and return the BIOS instance data
 18294                                  
 18295 0000163B 80FC16                  		cmp	ah, 16h		; MultWin386
 18296 0000163E 746D                    		jz	short win386call
 18297 00001640 80FC4A                  		cmp	ah, 4Ah		; multMULT
 18298 00001643 7503                    		jnz	short i2f_handler_iret
 18299 00001645 E99800                  		jmp	handle_multmult
 18300                                  ; ---------------------------------------------------------------------------
 18301                                  
 18302                                  i2f_handler_iret:			
 18303 00001648 CF                      		iret
 18304                                  ; ---------------------------------------------------------------------------
 18305                                  
 18306                                  int2f_replace_int13:
 18307 00001649 FA                      		cli	; 26/12/2023
 18308 0000164A 50                      		push	ax	; free up a register for caller's ds
 18309 0000164B 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 18310                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 18311                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 18312                                  					; = [02C7h:0030h] = [0070h:25A0h]
 18313 0000164D 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 18314                                  		; 19/10/2022
 18315                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 18316                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 18317                                  		;push	word ptr ds:Old13	; return them to caller
 18318                                  		;push	word ptr ds:Old13+2
 18319                                  		
 18320                                  		; 02/09/2023 (PCDOS 7.1)
 18321                                  		;push	word [Orig13]
 18322 00001652 FF36[B600]              		push	word [Orig13+2]
 18323                                  		;push	word [Old13]
 18324 00001656 FF36[0801]              		push	word [Old13+2]
 18325                                  
 18326                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 18327                                  		;mov	word ptr ds:Orig13+2, ax
 18328                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 18329                                  		;mov	word ptr ds:Old13+2, es
 18330                                  		
 18331                                  		;mov	[Orig13], dx
 18332                                  		; 02/09/2023
 18333 0000165A 8716[B400]              		xchg	dx, [Orig13]
 18334 0000165E A3[B600]                		mov	[Orig13+2], ax
 18335                                  		;mov	[Old13], bx
 18336                                  		; 02/09/2023
 18337 00001661 871E[0601]              		xchg	bx, [Old13]
 18338 00001665 8C06[0801]              		mov	[Old13+2], es
 18339                                  
 18340 00001669 07                      		pop	es			; es:bx := old old13 vector
 18341                                  		; 02/09/2023
 18342                                  		;pop	bx
 18343 0000166A 1F                      		pop	ds			; ds:dx := old orig13 vector
 18344                                  		;pop	dx ; 02/09/2023
 18345 0000166B 58                      		pop	ax
 18346                                  i2f_iret:
 18347 0000166C CF                      		iret
 18348                                  ; ---------------------------------------------------------------------------
 18349                                  
 18350                                  mine:
 18351 0000166D 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 18352 0000166F 73FB                    		jnb	short i2f_iret
 18353 00001671 08C0                    		or	al, al			; a get installed state request?
 18354 00001673 7503                    		jnz	short disp_func
 18355 00001675 B0FF                    		mov	al, 0FFh
 18356                                  		;jmp	short i2f_iret
 18357                                  		; 02/09/2023
 18358 00001677 CF                      		iret
 18359                                  ; ---------------------------------------------------------------------------
 18360                                  
 18361                                  disp_func:
 18362 00001678 3C01                    		cmp	al, 1			; request for installing bds?
 18363 0000167A 7418                    		jz	short do_subfun_01
 18364 0000167C 3C03                    		cmp	al, 3			; get bds vector?
 18365 0000167E 7423                    		jz	short do_get_bds_vector
 18366                                  
 18367                                  ; set up pointer to request packet
 18368                                  
 18369 00001680 1E                      		push	ds
 18370 00001681 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 18371                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 18372                                  					; = [0070h:25A0h] = [02C7h:0030h]
 18373                                  		; 19/10/2022
 18374                                  		;mov	word ptr ds:ptrsav, bx
 18375                                  		;mov	word ptr ds:ptrsav+2, es
 18376 00001686 891E[1200]              		mov	[ptrsav], bx
 18377 0000168A 8C06[1400]              		mov	[ptrsav+2], es
 18378 0000168E 1F                      		pop	ds
 18379                                  		;jmp	far ptr	i2f_dskentry
 18380                                  		; 07/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 18381                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1708h
 18382 0000168F EA[5E06]7000            		jmp	DOSBIOSSEG:dsk_entry ; BIOSDATA:dsk_entry
 18383                                  		;; 17/10/2022
 18384                                  		;;jmp	far DOSBIOSSEG:dsk_entry
 18385                                  		;jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 18386                                  					; NOTE: jump to a FAR function, not an
 18387                                  					;  IRET type function. Callers of
 18388                                  					;  this int2f subfunction will have
 18389                                  					;  to be careful to do a popf
 18390                                  
 18391                                  ; ---------------------------------------------------------------------------
 18392                                  
 18393                                  do_subfun_01:
 18394 00001694 06                      		push	es
 18395 00001695 1E                      		push	ds
 18396 00001696 1E                      		push	ds
 18397 00001697 07                      		pop	es
 18398                                  		; 17/10/2022
 18399 00001698 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 18400                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 18401                                  					; point	ds: -> Bios_Data
 18402 0000169D E8BC03                  		call	install_bds
 18403 000016A0 1F                      		pop	ds
 18404 000016A1 07                      		pop	es
 18405                                  		;jmp	short i2f_iret
 18406                                  		; 02/09/2023
 18407 000016A2 CF                      		iret
 18408                                  ; ---------------------------------------------------------------------------
 18409                                  
 18410                                  do_get_bds_vector:
 18411                                  		; 17/10/2022
 18412 000016A3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 18413                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 18414 000016A8 C53E[1901]              		lds	di, [start_bds]
 18415                                  		;lds	di, ds:start_bds
 18416                                  ;ii2f_iret:	; 10/12/2022
 18417                                  		;jmp	short i2f_iret
 18418                                  		; 02/09/2023
 18419 000016AC CF                      		iret
 18420                                  ; ---------------------------------------------------------------------------
 18421                                  
 18422                                  ; 17/10/2022
 18423                                  ; 16/10/2022
 18424                                  
 18425                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 18426                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 18427                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 18428                                  
 18429                                  win386call:
 18430 000016AD 1E                      		push	ds
 18431 000016AE 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 18432                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 18433                                  					; at 2C7h:30h =	70h:25A0h
 18434 000016B3 3C05                    		cmp	al, 5		; Win386_Init
 18435                                  					; is it	win386 initializing?
 18436 000016B5 7410                    		jz	short Win386Init
 18437 000016B7 3C06                    		cmp	al, 6		; Win386_Exit
 18438                                  					; is it	win386 exiting?
 18439 000016B9 7523                    		jnz	short win_iret	; if not, continue int2f chain
 18440                                  		; 12/12/2022
 18441 000016BB F6C201                  		test	dl, 1
 18442                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 18443 000016BE 751E                    		jnz	short win_iret	; if not win386, then continue
 18444                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 18445 000016C0 8026[1208]00            		and	byte [IsWin386], 0 
 18446 000016C5 EB17                    		jmp	short win_iret
 18447                                  ; ---------------------------------------------------------------------------
 18448                                  
 18449                                  Win386Init:
 18450                                  		; 12/12/2022
 18451 000016C7 F6C201                  		test	dl, 1
 18452                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 18453 000016CA 7512                    		jnz	short win_iret	; if not win386, then continue
 18454                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 18455 000016CC 800E[1208]01            		or	byte [IsWin386], 1
 18456                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 18457                                  		;mov	word ptr ds:SI_Next+2, es
 18458 000016D1 891E[E007]              		mov	[SI_Next], bx
 18459 000016D5 8C06[E207]              		mov	[SI_Next+2], es
 18460                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 18461 000016D9 BB[DE07]                		mov	bx, Win386_SI	; 19/10/2022
 18462 000016DC 1E                      		push	ds
 18463 000016DD 07                      		pop	es
 18464                                  win_iret:
 18465 000016DE 1F                      		pop	ds
 18466                                  ii2f_iret:	; 10/12/2022
 18467                                  		;jmp	short i2f_iret	; return back up the chain
 18468                                  		; 02/09/2023
 18469 000016DF CF                      		iret
 18470                                  ; ---------------------------------------------------------------------------
 18471                                  
 18472                                  handle_multmult:
 18473 000016E0 3C01                    		cmp	al, 1
 18474 000016E2 7514                    		jnz	short try_2
 18475 000016E4 1E                      		push	ds
 18476 000016E5 E84500                  		call	HMAPtr		; get offset of free HMA
 18477                                  		; 10/12/2022
 18478                                  		;xor	bx, bx
 18479                                  		;dec	bx
 18480 000016E8 BBFFFF                  		mov	bx, 0FFFFh
 18481 000016EB 8EC3                    		mov	es, bx		; seg of HMA
 18482 000016ED 89FB                    		mov	bx, di
 18483 000016EF F7D3                    		not	bx
 18484 000016F1 09DB                    		or	bx, bx
 18485 000016F3 7401                    		jz	short try_1
 18486 000016F5 43                      		inc	bx
 18487                                  try_1:
 18488 000016F6 1F                      		pop	ds
 18489                                  		;jmp	short ii2f_iret
 18490                                  		; 02/09/2023
 18491 000016F7 CF                      		iret
 18492                                  ; ---------------------------------------------------------------------------
 18493                                  
 18494                                  try_2:
 18495 000016F8 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 18496 000016FA 7530                    		jnz	short try_3
 18497 000016FC 1E                      		push	ds
 18498                                  		; 10/12/2022
 18499                                  		;xor	di, di
 18500                                  		;dec	di
 18501 000016FD BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 18502 00001700 8EC7                    		mov	es, di
 18503 00001702 E82800                  		call	HMAPtr		; get offset of free HMA
 18504 00001705 83FFFF                  		cmp	di, 0FFFFh
 18505 00001708 7421                    		jz	short InsuffHMA
 18506 0000170A F7DF                    		neg	di		; free space in HMA
 18507 0000170C 39FB                    		cmp	bx, di
 18508 0000170E 7605                    		jbe	short try_4
 18509                                  		; 10/12/2022
 18510                                  		;sub	di, di
 18511                                  		;dec	di
 18512 00001710 BFFFFF                  		mov	di, 0FFFFh
 18513                                  		;jmp	short InsuffHMA
 18514                                  		; 02/09/2023
 18515 00001713 1F                      		pop	ds
 18516 00001714 CF                      		iret
 18517                                  ; ---------------------------------------------------------------------------
 18518                                  
 18519                                  try_4:
 18520                                  		;mov	di, ds:FreeHMAPtr
 18521 00001715 8B3E[D707]              		mov	di, [FreeHMAPtr]
 18522 00001719 83C30F                  		add	bx, 15
 18523                                  		;and	bx, 0FFF0h
 18524                                  		; 10/12/2022
 18525 0000171C 80E3F0                  		and	bl, 0F0h
 18526                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer
 18527 0000171F 011E[D707]              		add	[FreeHMAPtr], bx
 18528 00001723 7506                    		jnz	short InsuffHMA
 18529 00001725 C706[D707]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 18530                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 18531                                  					; no more HMA if we have wrapped
 18532                                  InsuffHMA:
 18533 0000172B 1F                      		pop	ds
 18534                                  		; 10/12/2022
 18535                                  try_3:
 18536                                  		;jmp	short ii2f_iret
 18537                                  		; 02/09/2023
 18538 0000172C CF                      		iret
 18539                                  ; ---------------------------------------------------------------------------
 18540                                  
 18541                                  		; 10/12/2022
 18542                                  ;try_3:
 18543                                  		;jmp	ii2f_iret
 18544                                  
 18545                                  ; =============== S U B	R O U T	I N E =======================================
 18546                                  
 18547                                  ; 16/10/2022
 18548                                  
 18549                                  ;--------------------------------------------------------------------------
 18550                                  ;
 18551                                  ; procedure : HMAPtr
 18552                                  ;
 18553                                  ;		Gets the offset of the free HMA area ( with respect to
 18554                                  ;							seg ffff )
 18555                                  ;		If DOS has not moved high, tries to move DOS high.
 18556                                  ;		In the course of doing this, it will allocate all the HMA
 18557                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 18558                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 18559                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 18560                                  ;
 18561                                  ;	RETURNS : offset of free HMA in DI
 18562                                  ;		  BIOS_DATA, seg in DS
 18563                                  ;
 18564                                  ;--------------------------------------------------------------------------
 18565                                  
 18566                                  		; 17/10/2022
 18567                                  HMAPtr:
 18568 0000172D 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 18569                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 18570 00001732 8B3E[D707]              		mov	di, [FreeHMAPtr]
 18571                                  		;mov	di, ds:FreeHMAPtr
 18572 00001736 83FFFF                  		cmp	di, 0FFFFh
 18573 00001739 750F                    		jnz	short HMAPtr_retn
 18574 0000173B 803E[DD07]00            		cmp	byte [SysinitPresent], 0
 18575                                  		;cmp	ds:SysinitPresent, 0
 18576 00001740 7408                    		jz	short HMAPtr_retn
 18577 00001742 FF1E[D907]              		call	far [MoveDOSIntoHMA]
 18578                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 18579 00001746 8B3E[D707]              		mov	di, [FreeHMAPtr]
 18580                                  		;mov	di, ds:FreeHMAPtr
 18581                                  HMAPtr_retn:
 18582 0000174A C3                      		retn
 18583                                  
 18584                                  ; =============== S U B	R O U T	I N E =======================================
 18585                                  
 18586                                  ; 16/10/2022
 18587                                  
 18588                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 18589                                  ; but go ahead and update direction flag, si, & di
 18590                                  
 18591                                  move_sector:
 18592                                  
 18593                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 18594                                  ; any segment to be a fault. Theoretically, this could be handled
 18595                                  ; by the fault handler and the behavior of an 8086 could be emulated
 18596                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 18597                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 18598                                  ; also handles the fault incorrectly in their ROM BIOS for real
 18599                                  ; mode. Their fault handler was only designed to deal with one
 18600                                  ; special case which occurred in a magazine benchmark, but didn't
 18601                                  ; handle the general case worth beans.
 18602                                  ;
 18603                                  ; Simply changing this code to do a byte loop would work okay but
 18604                                  ; would involve a general case performance hit. Therefore, we'll
 18605                                  ; check for either source or destination offsets being within one
 18606                                  ; sector of the end of their segments and only in that case fall
 18607                                  ; back to a byte move.
 18608                                  
 18609 0000174B FC                      		cld
 18610 0000174C 51                      		push	cx
 18611 0000174D B90001                  		mov	cx, 256
 18612 00001750 81FE00FE                		cmp	si, 0FE00h
 18613 00001754 770A                    		ja	short movsec_bytes
 18614 00001756 81FF00FE                		cmp	di, 0FE00h
 18615 0000175A 7704                    		ja	short movsec_bytes
 18616 0000175C F3A5                    		rep movsw
 18617 0000175E 59                      		pop	cx
 18618 0000175F C3                      		retn
 18619                                  ; ---------------------------------------------------------------------------
 18620                                  
 18621                                  movsec_bytes:
 18622 00001760 D1E1                    		shl	cx, 1
 18623 00001762 F3A4                    		rep movsb
 18624 00001764 59                      		pop	cx
 18625 00001765 C3                      		retn
 18626                                  
 18627                                  ; =============== S U B	R O U T	I N E =======================================
 18628                                  
 18629                                  ; 16/10/2022
 18630                                  
 18631                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 18632                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 18633                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 18634                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 18635                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 18636                                  ; but we break down a request when we get an ecc or dma error into several
 18637                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 18638                                  ; number of sectors on a track on the medium, and the request would fail.
 18639                                  ;
 18640                                  ; input conditions:
 18641                                  ;	all registers set up for an int 13 request.
 18642                                  ;
 18643                                  ; output:
 18644                                  ;	dh - contains starting head number for request
 18645                                  ;	cx - contains starting sector and cylinder numbers
 18646                                  ;	(the above may or may not have been changed, and are 0-based)
 18647                                  ;	all other registers preserved.
 18648                                  
 18649                                  		; 26/12/2023 - Retro DOS 5.0
 18650                                  check_wrap:	
 18651 00001766 50                      		push	ax
 18652 00001767 53                      		push	bx
 18653 00001768 06                      		push	es
 18654 00001769 57                      		push	di
 18655 0000176A E86C00                  		call	find_bds	; get pointer to bds for drive in dl
 18656 0000176D 725E                    		jb	short no_wrap	; finished if DOS doesn't use it
 18657                                  		; 26/12/2023
 18658 0000176F 26F6453F01              		test	byte [es:di+3Fh], 1
 18659                                  		; 12/12/2022
 18660                                  		;test	byte [es:di+23h], 1
 18661                                  		;;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 18662 00001774 7457                    		jz	short no_wrap	; no wrapping for removable media
 18663 00001776 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 18664 0000177A 89C8                    		mov	ax, cx
 18665 0000177C 83E03F                  		and	ax, 3Fh		; extract sector number
 18666 0000177F 39D8                    		cmp	ax, bx		; are we going to wrap?
 18667 00001781 764A                    		jbe	short no_wrap
 18668 00001783 F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 18669                                  
 18670                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 18671                                  ; last sector on that track.
 18672                                  
 18673 00001785 08E4                    		or	ah, ah
 18674 00001787 7503                    		jnz	short not_on_bound
 18675                                  		; 18/12/2022
 18676 00001789 48                      		dec	ax ; *
 18677 0000178A 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 18678                                  					; if on	boundary
 18679                                  		;dec	al ; *		; also decrement # of head wraps
 18680                                  not_on_bound:
 18681 0000178C 80E1C0                  		and	cl, 0C0h	; zero out sector #
 18682 0000178F 08E1                    		or	cl, ah		; or in	new sector #
 18683 00001791 30E4                    		xor	ah, ah		; ax = # of head wraps
 18684 00001793 40                      		inc	ax
 18685 00001794 00F0                    		add	al, dh		; add in starting head #
 18686 00001796 80D400                  		adc	ah, 0		; catch	any carry
 18687                                  		; 02/09/2023
 18688 00001799 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 18689 0000179D 39D8                    		cmp	ax, bx
 18690                                  		;cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 18691                                  					; are we going to wrap around a	head?
 18692 0000179F 7632                    		jbe	short no_wrap_head ; do	not lose new head number!!
 18693 000017A1 52                      		push	dx		; preserve drive number and head number
 18694 000017A2 31D2                    		xor	dx, dx
 18695                                  		;mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 18696 000017A4 F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 18697                                  
 18698                                  ; careful here! if new head # is 0, then we are on the last head.
 18699                                  
 18700 000017A6 09D2                    		or	dx, dx
 18701 000017A8 7507                    		jnz	short no_head_bound
 18702 000017AA 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 18703                                  
 18704                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 18705                                  
 18706 000017AC 09C0                    		or	ax, ax
 18707 000017AE 7401                    		jz	short no_head_bound
 18708 000017B0 48                      		dec	ax		; reduce number	of cylinder wraps
 18709                                  no_head_bound:				
 18710 000017B1 88D7                    		mov	bh, dl		; bh has new head number
 18711 000017B3 5A                      		pop	dx		; restore drive number and head number
 18712 000017B4 FECF                    		dec	bh		; get it 0-based
 18713 000017B6 88FE                    		mov	dh, bh		; set up new head number in dh
 18714 000017B8 88CF                    		mov	bh, cl
 18715 000017BA 80E73F                  		and	bh, 3Fh		; preserve sector number
 18716 000017BD B306                    		mov	bl, 6
 18717 000017BF 86CB                    		xchg	cl, bl
 18718 000017C1 D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 18719 000017C3 00C5                    		add	ch, al		; add in cylinder wrap
 18720 000017C5 10E3                    		adc	bl, ah		; add in high byte
 18721 000017C7 D2E3                    		shl	bl, cl		; move up to ms	end
 18722 000017C9 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 18723 000017CB 08F9                    		or	cl, bh		; or in	sector number
 18724                                  no_wrap:				
 18725 000017CD F8                      		clc
 18726 000017CE 5F                      		pop	di
 18727 000017CF 07                      		pop	es
 18728 000017D0 5B                      		pop	bx
 18729 000017D1 58                      		pop	ax
 18730 000017D2 C3                      		retn
 18731                                  ; ---------------------------------------------------------------------------
 18732                                  
 18733                                  no_wrap_head:				
 18734 000017D3 88C6                    		mov	dh, al		; do not lose new head number
 18735 000017D5 FECE                    		dec	dh		; get it 0-based
 18736 000017D7 EBF4                    		jmp	short no_wrap
 18737                                  
 18738                                  ; =============== S U B	R O U T	I N E =======================================
 18739                                  
 18740                                  ; 16/10/2022
 18741                                  
 18742                                  ; this is a special version of the bds lookup code which is
 18743                                  ; based on physical drives rather than the usual logical drives
 18744                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 18745                                  ; otherwise carry is clear
 18746                                  ;
 18747                                  ; guaranteed to trash no registers except es:di
 18748                                  
 18749                                  		; 19/10/2022
 18750                                  find_bds:	
 18751 000017D9 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 18752                                  fbds_1:					
 18753 000017DD 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 18754 000017E1 7409                    		jz	short fdbs_2
 18755 000017E3 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 18756                                  					; go to next bds
 18757 000017E6 83FFFF                  		cmp	di, 0FFFFh
 18758 000017E9 75F2                    		jnz	short fbds_1
 18759 000017EB F9                      		stc
 18760                                  fdbs_2:					
 18761 000017EC C3                      		retn
 18762                                  
 18763                                  ; =============== S U B	R O U T	I N E =======================================
 18764                                  
 18765                                  ; 16/10/2022
 18766                                  		; 17/10/2022
 18767                                  doint:
 18768                                  		; 10/12/2022
 18769 000017ED 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 18770                                  					; get physical drive number
 18771                                  		; 19/10/2022 - Temporary !
 18772                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 18773                                  		
 18774 000017F0 30E4                    		xor	ah, ah
 18775 000017F2 08C0                    		or	al, al
 18776 000017F4 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 18777                                  		; 10/12/2022
 18778 000017F6 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 18779                                  					; get request code
 18780                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 18781 000017F9 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 18782                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 18783 000017FC 9D                      		popf
 18784                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 18785                                  		; 17/10/2022
 18786 000017FD 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18787                                  		;;call	call_orig13	; call far 70h:797h
 18788                                  					; call far KERNEL_SEGMENT:call_orig13
 18789 00001802 9C                      		pushf
 18790                                  		; 10/12/2022
 18791 00001803 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 18792                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 18793                                  dointdone:				
 18794 00001806 C3                      		retn
 18795                                  
 18796                                  ;----------------------------------------------------------------------------
 18797                                  
 18798                                  ; 16/10/2022
 18799                                  
 18800                                  ; this is the true int 13 handler. we parse the request to see if there is
 18801                                  ; a dma violation. if so, depending on the function, we:
 18802                                  ;   read/write break the request into three pieces and move the middle one
 18803                                  ;	       into our internal buffer.
 18804                                  ;
 18805                                  ;   format     copy the format table into the buffer
 18806                                  ;   verify     point the transfer address into the buffer
 18807                                  ;
 18808                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 18809                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 18810                                  ; the offending sector into the buffer below and do the i/o from there.
 18811                                  
 18812                                  ;struc INT13FRAME
 18813                                  ;.oldbp: resw
 18814                                  ;.oldax: resw 
 18815                                  ;.oldbx: resw
 18816                                  ;.oldcx: resw
 18817                                  ;.olddx: resw
 18818                                  ;.oldds: resw	; now we save caller's ds, too
 18819                                  ;.olddd: resd
 18820                                  ;.oldf:	resw
 18821                                  ;end struc
 18822                                  
 18823                                  ;----------------------------------------------------------------------------
 18824                                  
 18825                                  ;   entry conditions:
 18826                                  ;	ah = function
 18827                                  ;	al = number of sectors
 18828                                  ;	es:bx = dma address
 18829                                  ;	cx = packed track and sector
 18830                                  ;	dx = head and drive
 18831                                  ;   output conditions:
 18832                                  ;	no dma violation.
 18833                                  
 18834                                  ;	use extreme caution when working with this code. In general,
 18835                                  ;	  all registers are hot at all times.
 18836                                  ;
 18837                                  ;	question:  does this code handle cases where dma errors
 18838                                  ;	  occur during ecc retries, and where ecc errors occur during
 18839                                  ;	  dma breakdowns???? Hmmmmm.
 18840                                  
 18841                                  ;----------------------------------------------------------------------------
 18842                                  
 18843                                  ; ---------------------------------------------------------------------------
 18844                                  
 18845                                  		; 26/12/2023 - Retro DOS v5.0
 18846                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1889h
 18847                                  dtype_array:
 18848 00001807 90004000                		dd 400090h		; 40h:90h is drive type array addr
 18849                                  
 18850                                  ; 17/10/2022
 18851                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 18852                                  ; 09/12/2022
 18853                                  DTYPEARRAY equ dtype_array
 18854                                  
 18855                                  ; ---------------------------------------------------------------------------
 18856                                  
 18857                                  ; stick some special stuff out of mainline
 18858                                  
 18859                                  ; we know we're doing a format command. if we have changeline
 18860                                  ; support, then flag some special changed stuff and set changed
 18861                                  ; by format bit for all logical drives using this physical drive
 18862                                  
 18863                                  format_special_stuff:
 18864 0000180B 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 18865 00001810 7459                    		jz	short format_special_stuff_done ; brif not
 18866 00001812 53                      		push	bx
 18867 00001813 BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 18868 00001816 E85104                  		call	set_changed_dl	; indicate that media changed by format
 18869 00001819 5B                      		pop	bx
 18870 0000181A EB4F                    		jmp	short format_special_stuff_done
 18871                                  ; ---------------------------------------------------------------------------
 18872                                  
 18873                                  ; 16/10/2022
 18874                                  
 18875                                  ; we know we've got ec35's on the system. Now see if we're doing
 18876                                  ; a floppy. If so, create a mask and see if this particular
 18877                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 18878                                  
 18879                                  		; 19/10/2022
 18880                                  ec35_special_stuff:
 18881 0000181C 84D2                    		test	dl, dl		; floppy or hard disk?
 18882 0000181E 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 18883 00001820 50                      		push	ax		; see if this PARTICULAR drive is ec35
 18884 00001821 51                      		push	cx
 18885 00001822 88D1                    		mov	cl, dl		; turn drive number into bit map
 18886 00001824 B001                    		mov	al, 1		; assume drive 0
 18887 00001826 D2E0                    		shl	al, cl		; shift	over correct number of times
 18888 00001828 8406[A204]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 18889 0000182C 59                      		pop	cx
 18890 0000182D 58                      		pop	ax
 18891 0000182E 7442                    		jz	short ec35_special_stuff_done
 18892                                  					; done if this floppy is not an	ec35
 18893 00001830 53                      		push	bx		; free up a far	pointer	(es:bx)
 18894 00001831 06                      		push	es
 18895                                  		; 17/10/2022
 18896 00001832 2EC41E[0718]            		les	bx, [cs:DTYPEARRAY]
 18897                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 18898                                  					; 0070h:3A65h =	2C7h:14F5h
 18899 00001837 00D3                    		add	bl, dl
 18900 00001839 80D700                  		adc	bh, 0		; find entry for this drive
 18901 0000183C 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 18902                                  					; (360k	disk in	360k drive,
 18903                                  					; no double-stepping, 250 kbs transfer rate)
 18904 00001840 07                      		pop	es
 18905 00001841 5B                      		pop	bx
 18906 00001842 EB2E                    		jmp	short ec35_special_stuff_done
 18907                                  ; ---------------------------------------------------------------------------
 18908                                  
 18909                                  ; 16/10/2022
 18910                                  
 18911                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 18912                                  ; this function does not reset the common buses after the execution.
 18913                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 18914                                  ; will issue ah=1 (read status) call to reset the buses.
 18915                                  
 18916                                  ps2_special_stuff:
 18917 00001844 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 18918                                  					; read driver parm ?
 18919 00001849 7407                    		jz	short ps2_30_problem
 18920 0000184B 803E[1E00]15            		cmp	byte [prevoper], 15h
 18921                                  					; apparently function 15h fails, too
 18922 00001850 752D                    		jnz	short ps2_special_stuff_done
 18923                                  ps2_30_problem:
 18924 00001852 50                      		push	ax
 18925 00001853 B401                    		mov	ah, 1
 18926                                  		; 26/12/2023
 18927                                  		;call	70h:70Bh ; PCDOS 7.1 IBMBIO.COM BIOSCODE:18D7h
 18928                                  		;		 ; call BIOSDATA:call_orig13	
 18929                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 18930                                  		; 17/10/2022
 18931 00001855 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18932                                  		;call	call_orig13	; call far 70:797h
 18933                                  					; call far KERNEL_SEGMENT:call_orig13
 18934 0000185A 58                      		pop	ax
 18935 0000185B EB22                    		jmp	short ps2_special_stuff_done
 18936                                  ; ---------------------------------------------------------------------------
 18937                                  
 18938                                  ; 17/10/2022
 18939                                  ; 16/10/2022
 18940                                  
 18941                                  ; here is the actual int13 handler
 18942                                  
 18943                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 18944                                  
 18945                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 18946                                  ; vectoring up here from Bios_Data
 18947                                  
 18948                                  		; 19/10/2022
 18949 0000185D 1E                      		push	ds		; save caller's ds register first thing
 18950                                  		;;mov	ds, word [cs:0030h]
 18951                                  					; and set up our own ds -> Bios_Data
 18952 0000185E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 18953                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 18954                                  					; = [02C7h:0030h] = [0070h:25A0h]
 18955                                  
 18956                                  ; let the operation proceed. if there is a dma violation, then we do things
 18957                                  
 18958 00001863 A3[1E00]                		mov	[prevoper], ax	; save request
 18959 00001866 80FC05                  		cmp	ah, 5		; romformat
 18960 00001869 74A0                    		jz	short format_special_stuff
 18961                                  					; go do special stuff for format
 18962                                  format_special_stuff_done:
 18963 0000186B 803E[A204]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 18964 00001870 75AA                    		jnz	short ec35_special_stuff
 18965                                  					; go handle it out of line if so
 18966                                  ec35_special_stuff_done:
 18967                                  		; 26/12/2023
 18968                                  		;call	70h:70Bh ; PCDOS 7.1 IBMBIO.COM BIOSCODE:18EDh
 18969                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h
 18970 00001872 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 18971                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 18972                                  		
 18973 00001877 9C                      		pushf			; save result flags
 18974                                  		
 18975 00001878 803E[AF05]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 18976                                  					; mdl_ps2_30
 18977 0000187D 74C5                    		jz	short ps2_special_stuff
 18978                                  					; exit mainline to address special
 18979                                  ps2_special_stuff_done:			; ps2/30 problem if so
 18980 0000187F 9D                      		popf
 18981 00001880 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 18982                                  ret_from_i13:
 18983 00001882 1F                      		pop	ds
 18984 00001883 CA0200                  		retf	2		; restore ds &	iret w/flags
 18985                                  ; ---------------------------------------------------------------------------
 18986                                  
 18987                                  ; most of our code exits through here. If carry isn't set, then
 18988                                  ; just do a simple exit. Else doublecheck that we aren't getting
 18989                                  ; a changeline error.
 18990                                  
 18991                                  i13ret_ck_chglinerr:			
 18992 00001886 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 18993                                  i13_ret_error:				
 18994 00001888 80FC06                  		cmp	ah, 6		; did i	see a change event?
 18995 0000188B 7513                    		jnz	short int13b	; skip if wrong	error
 18996 0000188D 08D2                    		or	dl, dl		; is this for the hard disk?
 18997 0000188F 780F                    		js	short int13b	; yes, ignore
 18998 00001891 803E[7700]00            		cmp	byte [fhave96], 0
 18999 00001896 7408                    		jz	short int13b	; just in case ROM returned this
 19000                                  					; error	even though it told us it
 19001                                  					; never	would
 19002 00001898 53                      		push	bx
 19003 00001899 BB4000                  		mov	bx, 40h		; fchanged
 19004 0000189C E8CB03                  		call	set_changed_dl
 19005 0000189F 5B                      		pop	bx
 19006                                  int13b:
 19007 000018A0 F9                      		stc			; now return the error
 19008 000018A1 EBDF                    		jmp	short ret_from_i13
 19009                                  ; ---------------------------------------------------------------------------
 19010                                  
 19011                                  ; some kind of error occurred. see if it is dma violation
 19012                                  
 19013                                  goterr13:
 19014 000018A3 80FC09                  		cmp	ah, 9		; dma error?
 19015 000018A6 747C                    		jz	short gotdmaerr
 19016                                  goterr13_xxxx:
 19017 000018A8 80FC11                  		cmp	ah, 11h		; ecc error?
 19018 000018AB 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 19019 000018AD 803E[A905]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 19020 000018B2 74D4                    		jz	short i13_ret_error
 19021                                  
 19022 000018B4 803E[1F00]02            		cmp	byte [prevoper+1], 2
 19023                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 19024                                  					; (2 = romread)
 19025                                  					; ECC correction only applies to reads
 19026 000018B9 75CD                    		jnz	short i13_ret_error
 19027                                  
 19028 000018BB 30E4                    		xor	ah, ah
 19029                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 19030                                  		; 17/10/2022
 19031 000018BD 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 19032                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 19033                                  					; call far 70:797h
 19034 000018C2 A1[1E00]                		mov	ax, [prevoper]
 19035 000018C5 30E4                    		xor	ah, ah		; return code =	no error
 19036 000018C7 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 19037 000018C9 74B7                    		jz	short ret_from_i13 ; return with carry clear
 19038 000018CB 53                      		push	bx
 19039 000018CC 51                      		push	cx
 19040 000018CD 52                      		push	dx
 19041 000018CE A2[2000]                		mov	[number_of_sec], al
 19042                                  loop_ecc:
 19043 000018D1 B80102                  		mov	ax, 201h	; read one sector
 19044                                  
 19045                                  ; we do reads one sector at a time. this ensures that we will eventually
 19046                                  ; finish the request since ecc errors on one sector do read in that sector.
 19047                                  ;
 19048                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 19049                                  ; that attempt to read more sectors than are available on a particular
 19050                                  ; track.
 19051                                  ;
 19052                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 19053                                  ; this request.
 19054                                  ;
 19055                                  ; at this point, all registers are set up for the call to orig13, except
 19056                                  ; that there may be a starting sector number that is bigger than the number
 19057                                  ; of sectors on a track.
 19058                                  ;
 19059 000018D4 E88FFE                  		call	check_wrap	; get correct parameters for int 13
 19060                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 19061                                  		; 17/10/2022
 19062 000018D7 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 19063                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 19064 000018DC 730C                    		jnb	short ok11_op
 19065 000018DE 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 19066 000018E1 741B                    		jz	short handle_dma_during_ecc
 19067 000018E3 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 19068 000018E6 7510                    		jnz	short ok11_exit_err
 19069                                  		; 10/12/2022
 19070                                  		; xor ax ax -> ah = 0
 19071                                  		;mov	ah, 0		; ecc error. reset the system again.
 19072 000018E8 31C0                    		xor	ax, ax		; clear	the error code so that if this
 19073                                  					; was the last sector, no error	code
 19074                                  					; will be returned for the corrected
 19075                                  					; read.	(clear carry too.)
 19076                                  ok11_op:
 19077 000018EA FE0E[2000]              		dec	byte [number_of_sec]
 19078 000018EE 7409                    		jz	short ok11_exit	; all done?
 19079 000018F0 FEC1                    		inc	cl		; advance sector number
 19080                                  					; add 200h to address
 19081 000018F2 FEC7                    		inc	bh
 19082 000018F4 FEC7                    		inc	bh
 19083 000018F6 EBD9                    		jmp	short loop_ecc
 19084                                  ; ---------------------------------------------------------------------------
 19085                                  
 19086                                  ; locate error returns centrally
 19087                                  
 19088                                  ok11_exit_err:
 19089 000018F8 F9                      		stc			; set carry bit again.
 19090                                  ok11_exit:
 19091 000018F9 5A                      		pop	dx
 19092 000018FA 59                      		pop	cx
 19093 000018FB 5B                      		pop	bx
 19094 000018FC EB88                    		jmp	short i13ret_ck_chglinerr
 19095                                  ; ---------------------------------------------------------------------------
 19096                                  
 19097                                  ; do the single sector read again, this time into our temporary
 19098                                  ; buffer, which is guaranteed not to have a DMA error, then
 19099                                  ; move the data to its proper location and proceed
 19100                                  
 19101                                  handle_dma_during_ecc:
 19102 000018FE 06                      		push	es
 19103 000018FF 53                      		push	bx
 19104 00001900 BB[5201]                		mov	bx, disksector
 19105 00001903 1E                      		push	ds
 19106 00001904 07                      		pop	es		; point es:bx to buffer
 19107 00001905 B80102                  		mov	ax, 201h	; read one sector
 19108                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 19109                                  		; 17/10/2022
 19110 00001908 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 19111                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 19112 0000190D 5B                      		pop	bx
 19113 0000190E 07                      		pop	es
 19114 0000190F 7305                    		jnb	short handle_dma_during_ecc_noerr
 19115 00001911 80FC11                  		cmp	ah, 11h
 19116 00001914 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 19117                                  
 19118                                  ; now we're kosher. Copy the data to where it belongs and resume
 19119                                  ; the ECC looping code.
 19120                                  
 19121                                  handle_dma_during_ecc_noerr:
 19122 00001916 56                      		push	si
 19123 00001917 57                      		push	di
 19124 00001918 89DF                    		mov	di, bx
 19125 0000191A BE[5201]                		mov	si, disksector
 19126 0000191D E82BFE                  		call	move_sector
 19127 00001920 5F                      		pop	di
 19128 00001921 5E                      		pop	si
 19129 00001922 EBC6                    		jmp	short ok11_op
 19130                                  ; ---------------------------------------------------------------------------
 19131                                  
 19132                                  ; we truly have a dma violation. restore register ax and retry the
 19133                                  ; operation as best we can.
 19134                                  
 19135                                  gotdmaerr:
 19136 00001924 A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 19137 00001927 FB                      		sti
 19138 00001928 80FC02                  		cmp	ah, 2		; romread
 19139 0000192B 723B                    		jb	short i13_done_dmaerr
 19140                                  					; just pass dma error thru for
 19141                                  					; functions we don't handle
 19142 0000192D 80FC04                  		cmp	ah, 4		; romverify
 19143 00001930 743C                    		jz	short intverify
 19144 00001932 80FC05                  		cmp	ah, 5		; romformat
 19145 00001935 7448                    		jz	short intformat
 19146 00001937 772F                    		ja	short i13_done_dmaerr
 19147                                  
 19148                                  ; we are doing a read/write call. check for dma problems
 19149                                  
 19150                                  ;	******** set up stack frame here!!! ********
 19151                                  
 19152 00001939 52                      		push	dx
 19153 0000193A 51                      		push	cx
 19154 0000193B 53                      		push	bx
 19155 0000193C 50                      		push	ax
 19156 0000193D 55                      		push	bp
 19157 0000193E 89E5                    		mov	bp, sp
 19158 00001940 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 19159                                  		; 26/12/2023
 19160                                  		;add	dx, dx
 19161                                  		;add	dx, dx
 19162                                  		;add	dx, dx
 19163                                  		;add	dx, dx		; dx = dx*16
 19164 00001942 D1E2                    		shl	dx, 1
 19165 00001944 D1E2                    		shl	dx, 1
 19166 00001946 D1E2                    		shl	dx, 1
 19167 00001948 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 19168 0000194A 01DA                    		add	dx, bx		; combine with offset
 19169 0000194C 81C2FF01                		add	dx, 511		; simulate a transfer
 19170                                  
 19171                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 19172                                  ; we skip the first transfer and perform the remaining buffering and transfer
 19173                                  
 19174 00001950 7303                    		jnb	short no_skip_first
 19175 00001952 E98300                  		jmp	bufferx		; restore dh=head & do buffer
 19176                                  ; ---------------------------------------------------------------------------
 19177                                  
 19178                                  no_skip_first:
 19179 00001955 D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 19180 00001957 B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 19181 00001959 28F4                    		sub	ah, dh
 19182                                  
 19183                                  ; ah is now the number of sectors that we can successfully write in this
 19184                                  ; segment. if this number is above or equal to the requested number, then we
 19185                                  ; continue the operation as normal. otherwise, we break it into pieces.
 19186                                  ;
 19187                                  ; wait a sec. this is goofy. the whole reason we got here in the
 19188                                  ; first place is because we got a dma error. so it's impossible
 19189                                  ; for the whole block to fit, unless the dma error was returned
 19190                                  ; in error.
 19191                                  
 19192 0000195B 38C4                    		cmp	ah, al		; can we fit it	in?
 19193 0000195D 7236                    		jb	short doblock	; no, perform blocking.
 19194                                  
 19195                                  ; yes, the request fits. let it happen.
 19196                                  
 19197 0000195F 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 19198                                  					; set up head number
 19199 00001962 E888FE                  		call	doint
 19200 00001965 E9D900                  		jmp	bad13		; and return from this place
 19201                                  ; ---------------------------------------------------------------------------
 19202                                  
 19203                                  i13_done_dmaerr:
 19204 00001968 B409                    		mov	ah, 9		; pass dma error thru to caller
 19205 0000196A F9                      		stc
 19206 0000196B E914FF                  		jmp	ret_from_i13	; return with error,
 19207                                  					; we know it's not a changeline error
 19208                                  ; ---------------------------------------------------------------------------
 19209                                  
 19210                                  ; verify the given sectors. place the buffer pointer into our space.
 19211                                  
 19212                                  intverify:
 19213 0000196E 06                      		push	es		; save caller's dma address
 19214 0000196F 53                      		push	bx
 19215 00001970 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 19216 00001971 07                      		pop	es
 19217                                  dosimple:
 19218 00001972 BB[5201]                		mov	bx, disksector
 19219                                  					; do the i/o from Bios_Data:disksector
 19220                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 19221                                  		; 17/10/2022
 19222 00001975 9A[0B07]7000            		call	DOSBIOSSEG:call_orig13
 19223                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 19224 0000197A 5B                      		pop	bx
 19225 0000197B 07                      		pop	es
 19226 0000197C E907FF                  		jmp	i13ret_ck_chglinerr
 19227                                  ; ---------------------------------------------------------------------------
 19228                                  
 19229                                  ; format operation. copy the parameter table into Bios_Data:disksector
 19230                                  
 19231                                  intformat:
 19232 0000197F 06                      		push	es
 19233 00001980 53                      		push	bx
 19234 00001981 56                      		push	si
 19235 00001982 57                      		push	di
 19236 00001983 1E                      		push	ds
 19237                                  
 19238                                  ; point ds to the caller's dma buffer, es to Bios_Data
 19239                                  ; in other words, swap (ds, es)
 19240                                  
 19241 00001984 06                      		push	es
 19242 00001985 1E                      		push	ds
 19243 00001986 07                      		pop	es
 19244 00001987 1F                      		pop	ds
 19245 00001988 89DE                    		mov	si, bx
 19246 0000198A BF[5201]                		mov	di, disksector
 19247 0000198D E8BBFD                  		call	move_sector	; user's data into Bios_Data:disksector
 19248 00001990 1F                      		pop	ds
 19249 00001991 5F                      		pop	di
 19250 00001992 5E                      		pop	si		; do the i/o from
 19251 00001993 EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 19252                                  ; ---------------------------------------------------------------------------
 19253                                  
 19254                                  ; we can't fit the request into the entire block. perform the operation on
 19255                                  ; the first block.
 19256                                  ;
 19257                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 19258                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 19259                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 19260                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 19261                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 19262                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 19263                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 19264                                  ; doblock will handle the first block of requested sectors within the
 19265                                  ; boundary of this safe value.
 19266                                  
 19267                                  		; 26/12/2023 - Retro DOS v5.0
 19268                                  doblock:
 19269                                  
 19270                                  ; try to get the # of sectors/track from bds via rom drive number.
 19271                                  ; for any mini disks installed, here we have to pray that they have the
 19272                                  ; same # of sector/track as the main dos partition disk drive.
 19273                                  				
 19274 00001995 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 19275                                  					; get head #, drive #
 19276 00001998 51                      		push	cx
 19277 00001999 06                      		push	es
 19278 0000199A 57                      		push	di		; ah - # of sectors before dma boundary
 19279                                  					; al - requested # of sectors for i/o.
 19280 0000199B E83BFE                  		call	find_bds
 19281 0000199E 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 19282                                  		; 26/12/2023
 19283 000019A2 26F6453F01              		test	byte [es:di+3Fh], 1
 19284                                  		; 12/12/2022
 19285                                  		;test	byte [es:di+23h], 1
 19286                                  		;;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 19287 000019A7 5F                      		pop	di
 19288 000019A8 07                      		pop	es
 19289 000019A9 88E0                    		mov	al, ah		; set al=ah for	floppies
 19290 000019AB 7404                    		jz	short doblockflop ; they are track by track operation
 19291 000019AD B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 19292 000019AF 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 19293                                  doblockflop:
 19294 000019B1 59                      		pop	cx
 19295                                  doblockcontinue:
 19296 000019B2 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 19297 000019B4 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 19298 000019B6 50                      		push	ax
 19299 000019B7 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 19300 000019B9 EB03                    		jmp	short doblockdoint
 19301                                  ; ---------------------------------------------------------------------------
 19302                                  
 19303                                  doblocklast:
 19304 000019BB 88C4                    		mov	ah, al
 19305 000019BD 50                      		push	ax
 19306                                  doblockdoint:				; let ah = al =	# of sectors for this shot
 19307 000019BE E82CFE                  		call	doint
 19308 000019C1 727E                    		jb	short bad13	; something happened, bye!
 19309 000019C3 58                      		pop	ax
 19310 000019C4 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 19311                                  					; decrement by the successful operation
 19312 000019C7 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 19313 000019C9 00E7                    		add	bh, ah		; advance dma addres
 19314 000019CB 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 19315 000019CD 38C4                    		cmp	ah, al		; check	the previous value
 19316 000019CF 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 19317                                  					; then we are done already.
 19318 000019D1 28E0                    		sub	al, ah		; otherwise,
 19319                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 19320 000019D3 E890FD                  		call	check_wrap	; get new cx, dh for the next operation.
 19321 000019D6 EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 19322                                  ; ---------------------------------------------------------------------------
 19323                                  
 19324                                  bufferx:
 19325 000019D8 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 19326                                  					; set up head number
 19327                                  buffer:
 19328 000019DB 53                      		push	bx
 19329 000019DC 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 19330 000019DF 80FC03                  		cmp	ah, 3		; romwrite
 19331 000019E2 7525                    		jnz	short doread	;
 19332                                  					
 19333                                  ; copy the offending sector into local buffer
 19334                                  
 19335 000019E4 06                      		push	es
 19336 000019E5 1E                      		push	ds
 19337 000019E6 56                      		push	si
 19338 000019E7 57                      		push	di
 19339 000019E8 1E                      		push	ds		; exchange segment registers
 19340 000019E9 06                      		push	es
 19341 000019EA 1F                      		pop	ds
 19342 000019EB 07                      		pop	es
 19343 000019EC BF[5201]                		mov	di, disksector	; where to move
 19344 000019EF 57                      		push	di		; save it
 19345 000019F0 89DE                    		mov	si, bx		; source
 19346 000019F2 E856FD                  		call	move_sector	; move sector into local buffer
 19347 000019F5 5B                      		pop	bx		; new transfer address
 19348                                  					; (es:bx = Bios_Data:diskbuffer)
 19349 000019F6 5F                      		pop	di		; restore caller's di & si
 19350 000019F7 5E                      		pop	si
 19351 000019F8 1F                      		pop	ds		; restore Bios_Data
 19352                                  
 19353                                  ; see if we are wrapping around a track or head
 19354                                  
 19355 000019F9 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 19356                                  					; get drive number
 19357 000019FB 8A5608                  		mov	dl, [bp+8]
 19358 000019FE E865FD                  		call	check_wrap	; sets up registers if wrap-around
 19359                                  					;
 19360                                  					; ah is	function
 19361                                  					; al is	1 for single sector transfer
 19362                                  					; es:bx	is local transfer addres
 19363                                  					; cx is	track/sector number
 19364                                  					; dx is	head/drive number
 19365                                  					; si,di	unchanged
 19366 00001A01 E8E9FD                  		call	doint
 19367 00001A04 07                      		pop	es		; restore caller's dma segment
 19368 00001A05 723A                    		jb	short bad13	; go clean up
 19369 00001A07 EB22                    		jmp	short dotail
 19370                                  ; ---------------------------------------------------------------------------
 19371                                  
 19372                                  ; reading a sector. do int first, then move things around
 19373                                  
 19374                                  doread:
 19375 00001A09 06                      		push	es
 19376 00001A0A 53                      		push	bx
 19377 00001A0B 1E                      		push	ds		; es = Bios_Code
 19378 00001A0C 07                      		pop	es
 19379 00001A0D BB[5201]                		mov	bx, disksector
 19380 00001A10 B001                    		mov	al, 1
 19381 00001A12 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 19382                                  					; get drive number
 19383 00001A15 E84EFD                  		call	check_wrap	;
 19384                                  					; ah = function
 19385                                  					; al = 1 for single sector
 19386                                  					; es:bx	points to local	buffer
 19387                                  					; cx, dx are track/sector, head/drive
 19388 00001A18 E8D2FD                  		call	doint
 19389 00001A1B 5B                      		pop	bx
 19390 00001A1C 07                      		pop	es
 19391 00001A1D 7222                    		jb	short bad13
 19392 00001A1F 56                      		push	si
 19393 00001A20 57                      		push	di
 19394 00001A21 89DF                    		mov	di, bx
 19395 00001A23 BE[5201]                		mov	si, disksector
 19396 00001A26 E822FD                  		call	move_sector
 19397 00001A29 5F                      		pop	di
 19398 00001A2A 5E                      		pop	si
 19399                                  
 19400                                  ; note the fact that we've done 1 more sector
 19401                                  
 19402                                  dotail:
 19403 00001A2B 5B                      		pop	bx		; retrieve new dma area
 19404 00001A2C 80C702                  		add	bh, 2		; advance over sector
 19405 00001A2F 41                      		inc	cx
 19406 00001A30 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 19407 00001A33 F8                      		clc
 19408 00001A34 FEC8                    		dec	al
 19409 00001A36 7409                    		jz	short bad13	; no more i/o
 19410                                  
 19411                                  ; see if we wrap around a track or head boundary with starting sector
 19412                                  ; we already have the correct head number to pass to check_wrap
 19413                                  
 19414 00001A38 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 19415 00001A3B E828FD                  		call	check_wrap
 19416 00001A3E E8ACFD                  		call	doint
 19417                                  
 19418                                  ; we are done. ax has the final code; we throw away what we got before
 19419                                  
 19420                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 19421                                  ;	   or we've finished. If carry is set now, our only
 19422                                  ;	   hope for salvation is that it was a read operation
 19423                                  ;	   and the error code is ECC error. In that case, we'll
 19424                                  ;	   just pop the registers and go do the old ECC thing.
 19425                                  ;	   When the DMA error that got us here in the first
 19426                                  ;	   place occurs, it'll handle it.
 19427                                  
 19428                                  bad13:
 19429 00001A41 89EC                    		mov	sp, bp
 19430 00001A43 5D                      		pop	bp
 19431 00001A44 5B                      		pop	bx
 19432 00001A45 5B                      		pop	bx
 19433 00001A46 59                      		pop	cx
 19434 00001A47 5A                      		pop	dx
 19435 00001A48 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 19436 00001A4A E935FE                  		jmp	ret_from_i13	; non-error exit
 19437                                  ; ---------------------------------------------------------------------------
 19438                                  
 19439                                  xgoterr13_xxxx:	
 19440 00001A4D E958FE                  		jmp	goterr13_xxxx
 19441                                  
 19442                                  ; ---------------------------------------------------------------------------
 19443                                  		; 10/12/2022
 19444                                  		;db 	0
 19445                                  ; ---------------------------------------------------------------------------
 19446                                  
 19447                                  ;Bios_Code ends
 19448                                  
 19449                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19450                                  
 19451                                  ;-----------------------------------------------------------------------------
 19452                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 19453                                  ;-----------------------------------------------------------------------------
 19454                                  ; 17/03/2019 - Retro DOS v4.0
 19455                                  
 19456                                  		; 19/10/2022
 19457                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 19458 00001A50 8A26[7500]              		mov	ah, [drvmax]
 19459 00001A54 BF[3C05]                		mov	di, dskdrvs
 19460 00001A57 1E                      		push	ds		; pass result in es:di
 19461 00001A58 07                      		pop	es
 19462 00001A59 E92EEC                  		jmp	SetPtrSav
 19463                                  
 19464                                  ; =============== S U B	R O U T	I N E =======================================
 19465                                  
 19466                                  ;---------------------------------------------------------------------------
 19467                                  ; install_bds installs a bds at location es:di into the current linked list of
 19468                                  ; bds maintained by this device driver. it places the bds at the end of the
 19469                                  ; list. Trashes (at least) ax, bx, di, si
 19470                                  ;---------------------------------------------------------------------------
 19471                                  
 19472                                  		; 26/12/2023 - Retro DOS v5.0
 19473                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1AE0h
 19474                                  install_bds:
 19475 00001A5C 1E                      		push	ds		; save Bios_Data segment
 19476 00001A5D BE[1901]                		mov	si, start_bds	; beginning of chain
 19477                                  
 19478                                  		; ds:si now points to link to first bds
 19479                                  		; assume bds list is non-empty
 19480                                  loop_next_bds:
 19481 00001A60 C534                    		lds	si, [si]	; [si+BDS.link]
 19482                                  					; fetch	next bds
 19483 00001A62 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 19484 00001A66 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 19485                                  					; drive	with new one?
 19486 00001A69 7518                    		jnz	short next_bds
 19487 00001A6B B310                    		mov	bl, 10h		; fi_am_mult
 19488                                  		; 26/12/2023
 19489 00001A6D 26085D3F                		or	[es:di+3Fh], bl
 19490                                  		;or	[es:di+23h], bl	; [es:di+BDS.flags]
 19491                                  					; set both of them to i_am_mult	if so
 19492 00001A71 085C3F                  		or	[si+3Fh], bl
 19493                                  		;or	[si+23h], bl	; [si+BDS.flags]
 19494 00001A74 2680653FDF              		and	byte [es:di+3Fh], 0DFh
 19495                                  		;and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 19496                                  					; we don't own it
 19497 00001A79 8A5C3F                  		mov	bl, [si+3Fh]
 19498                                  		;mov	bl, [si+23h]	; [si+BDS.flags]
 19499                                  					; determine if changeline available
 19500 00001A7C 80E302                  		and	bl, 2		; fchangeline
 19501 00001A7F 26085D3F                		or	[es:di+3Fh], bl
 19502                                  		;or	[es:di+23h], bl	; [es:di+BDS.flags]
 19503                                  next_bds:
 19504                                  		; 02/09/2023 (PCDOS 7.1)
 19505 00001A83 B8FFFF                  		mov	ax, 0FFFFh	; -1
 19506 00001A86 3904                    		cmp	[si], ax	; [si+BDS.link],-1
 19507                                  		;cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 19508                                  					; are we at end	of list?
 19509 00001A88 75D6                    		jnz	short loop_next_bds
 19510 00001A8A 8C4402                  		mov	[si+2], es	; [si+BDS.link+2],es
 19511                                  					; install bds
 19512 00001A8D 893C                    		mov	[si], di
 19513 00001A8F 268905                  		mov	[es:di], ax	; [es:di+BDS.link],-1
 19514                                  		;mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 19515                                  					; set next pointer to null
 19516 00001A92 1F                      		pop	ds
 19517                                  
 19518                                  ; 01/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS - BIOSCODE:1785h)
 19519                                  ; 16/10/2022 (MSDOS 6.0 Code)
 19520                                  
 19521                                  ; **** If the new drive has a higher EOT value, we must alter the
 19522                                  ;      'eot' variable appropriately.
 19523                                  
 19524                                  		; 26/12/2023
 19525 00001A93 268A4550                		mov	al, [es:di+50h]	; [es:di+BDS.rsecpertrack]
 19526                                  		; 01/06/2019
 19527                                  		;mov	al,[es:di+52]
 19528                                  		; 22/07/2023
 19529                                  		;mov	al,[es:di+BDS.rsecpertrack]
 19530 00001A97 3A06[2C01]              		cmp	al,[eot]
 19531 00001A9B 7603                    		jbe	short _eot_ok
 19532 00001A9D A2[2C01]                		mov	[eot],al
 19533                                  _eot_ok:
 19534 00001AA0 C3                      		retn
 19535                                  
 19536                                  ; ---------------------------------------------------------------------------
 19537                                  
 19538                                  ; 17/10/2022
 19539                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 19540                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h
 19541                                  ; 09/12/2022
 19542                                  DRVLET equ drvlet
 19543                                  SNGMSG equ sngmsg
 19544                                  
 19545                                  ; 16/10/2022
 19546                                  
 19547                                  ;---------------------------------------------------------------------------
 19548                                  ;  ask to swap the disk in drive a:
 19549                                  ;	es:di -> bds
 19550                                  ;	ds -> Bios_Data
 19551                                  ;---------------------------------------------------------------------------
 19552                                  
 19553                                  		; 26/12/2023 - Retro DOS v5.0
 19554                                  
 19555                                  		; 19/10/2022
 19556 00001AA1 F606[1208]01            swpdsk:		test	byte [IsWin386], 1
 19557                                  		;test	ds:IsWin386, 1	; Is win386 present?
 19558 00001AA6 7405                    		jz	short no_win386	; no, skip SetFocus
 19559                                  		
 19560                                  		; set focus to the correct VM
 19561                                  		;call	far ptr 70h:813h ; PCDOS 7.1 IBMBIO.COM BIOSCODE:1B2Ch
 19562                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 19563                                  		; 17/10/2022
 19564 00001AA8 9A[1308]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus ; BIOSDATA:V86_Crit_SetFocus
 19565                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 19566                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 19567                                  no_win386:
 19568 00001AAD 51                      		push	cx
 19569 00001AAE 52                      		push	dx
 19570 00001AAF 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 19571                                  					; get the drive	letter
 19572                                  
 19573                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 19574                                  ;           then existing dsk is drive A & vice versa
 19575                                  
 19576 00001AB3 88D6                    		mov	dh, dl
 19577 00001AB5 80F601                  		xor	dh, 1
 19578 00001AB8 29C9                    		sub	cx, cx		; nobody has handled swap disk
 19579 00001ABA B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 19580                                  					; broad	cast code for swap disk
 19581                                  					; Broadcast it
 19582 00001ABD CD2F                    		int	2Fh
 19583 00001ABF 41                      		inc	cx		; cx == -1 ?
 19584 00001AC0 741E                    		jz	short swpdsk9	; somebody has handled it
 19585                                  
 19586                                  ; using a different drive in a one drive system so request the user change disks
 19587                                  
 19588 00001AC2 80C241                  		add	dl, 'A'
 19589                                  		; 17/10/2022
 19590 00001AC5 2E8816[FF1A]            		mov	[cs:DRVLET], dl	; "A: and press any key when ready\r\n\n"
 19591                                  		; 16/10/2022
 19592                                  		;;mov	byte [cs:drvlet], dl
 19593                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 19594                                  					; 0070h:3D54h =	2C7h:17E4h
 19595 00001ACA BE[E31A]                		mov	si, SNGMSG	; "\r\nInsert diskette for drive "
 19596                                  		;mov	si, 17C8h	; sngmsg
 19597                                  					; 0070h:3D38h =	2C7h:17C8h
 19598 00001ACD 53                      		push	bx
 19599 00001ACE 2E                      		cs
 19600 00001ACF AC                      		lodsb			; get the next character of the message
 19601                                  		;lods	byte ptr cs:[si]
 19602                                  wrmsg_loop:
 19603 00001AD0 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 19604                                  					; AL = character to display
 19605 00001AD2 2E                      		cs
 19606 00001AD3 AC                      		lodsb
 19607                                  		;lods	byte ptr cs:[si] ; cs lodsb
 19608                                  					; get the next character of the	message
 19609 00001AD4 08C0                    		or	al, al
 19610 00001AD6 75F8                    		jnz	short wrmsg_loop
 19611 00001AD8 E82DE7                  		call	con_flush	; flush out keyboard queue
 19612                                  					; call rom-bios
 19613 00001ADB 30E4                    		xor	ah, ah
 19614 00001ADD CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 19615                                  					; Return: AH = scan code, AL = character
 19616 00001ADF 5B                      		pop	bx
 19617                                  swpdsk9:
 19618 00001AE0 5A                      		pop	dx
 19619 00001AE1 59                      		pop	cx
 19620 00001AE2 C3                      		retn
 19621                                  
 19622                                  ; ---------------------------------------------------------------------------
 19623                                  
 19624                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19625                                  
 19626                                  ;--------------------------------------------------------
 19627                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 19628                                  ;--------------------------------------------------------
 19629                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 19630                                  ;--------------------------------------------------------
 19631                                  ; 17/03/2019 - Retro DOS v4.0
 19632                                  ; 26/12/2023 - Retro DOS v5.0
 19633                                  
 19634                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 19635                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1B67h
 19636 00001AE3 0D0A                    sngmsg:		db 0Dh,0Ah
 19637 00001AE5 496E73657274206469-     		db 'Insert diskette for drive '
 19637 00001AEE 736B6574746520666F-
 19637 00001AF7 7220647269766520   
 19638                                  
 19639                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 19640                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1B83h
 19641 00001AFF 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 19641 00001B08 65737320616E79206B-
 19641 00001B11 6579207768656E2072-
 19641 00001B1A 656164790D0A       
 19642 00001B20 0A00                    		db 0Ah,0
 19643                                  
 19644                                  ; =============== S U B	R O U T	I N E =======================================
 19645                                  
 19646                                  ;---------------------------------------------------------------------------
 19647                                  ; input : es:di points to current bds for drive.
 19648                                  ; return : zero set if no open files
 19649                                  ;	   zero reset if open files
 19650                                  ;---------------------------------------------------------------------------
 19651                                  
 19652                                  		; 26/12/2023 - Retro DOS v5.0
 19653                                  chkopcnt:	
 19654 00001B22 26837D3C00              		cmp     word [es:di+3Ch], 0
 19655                                  		;cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 19656 00001B27 C3                      		retn
 19657                                  
 19658                                  ; =============== S U B	R O U T	I N E =======================================
 19659                                  
 19660                                  ;---------------------------------------------------------------------------
 19661                                  ; at media check time, we need to really get down and check what the change is.
 19662                                  ; this is guaranteed to be expensive.
 19663                                  ;
 19664                                  ;	es:di -> bds, ds -> Bios_Data
 19665                                  ;---------------------------------------------------------------------------
 19666                                  
 19667                                  		; 26/12/2023 - Retro DOS v5.0
 19668                                  		; PCDOS 7.1 IBMBIO.COM - BIOSCODE:1BA6h
 19669                                  mediacheck:
 19670 00001B28 E84EEE                  		call	checksingle	; make sure correct disk is in place
 19671 00001B2B 31F6                    		xor	si, si
 19672 00001B2D E86101                  		call	haschange
 19673 00001B30 742F                    		jz	short mediaret
 19674                                  		; 26/12/2023
 19675                                  		;test	byte [es:di+3Fh], 40h ; [es:di+BDS.flags], fchanged ; 40h
 19676 00001B32 E85001                  		call	checkromchange
 19677 00001B35 752B                    		jnz	short mediadovolid
 19678 00001B37 50                      		push	ax
 19679 00001B38 52                      		push	dx
 19680 00001B39 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 19681                                  					; set logical drive number
 19682 00001B3D B416                    		mov	ah, 16h
 19683 00001B3F CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 19684                                  					; DL = drive to	check
 19685                                  					; Return: AH = disk change status
 19686 00001B41 5A                      		pop	dx
 19687 00001B42 58                      		pop	ax
 19688 00001B43 721D                    		jb	short mediadovolid
 19689 00001B45 BE0100                  		mov	si, 1		; signal no change
 19690                                  
 19691                                  ; there are some drives with changeline that "lose" the changeline indication
 19692                                  ; if a different drive is accessed after the current one. in order to avoid
 19693                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 19694                                  ; is not active and we are accessing a different drive from the last one.
 19695                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 19696                                  ; status.
 19697                                  		; 19/10/2022
 19698 00001B48 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 19699 00001B4C 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 19700                                  					; (If the last drive accessed is not current drive
 19701                                  					; media	change status may be incorrect.	So,
 19702                                  					; "I don't now" will be returned even if it is indicated
 19703                                  					; as media is not changed.)
 19704 00001B50 740F                    		jz	short mediaret	; (same	drive,
 19705                                  					; media	changeline indication is reliable)
 19706                                  
 19707                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 19708                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 19709                                  ; "not changed" here since the 2 second test said no change.)
 19710                                  
 19711 00001B52 50                      		push	ax
 19712 00001B53 51                      		push	cx
 19713 00001B54 52                      		push	dx
 19714 00001B55 E8D2EA                  		call	Check_Time_Of_Access
 19715 00001B58 5A                      		pop	dx
 19716 00001B59 59                      		pop	cx
 19717 00001B5A 58                      		pop	ax
 19718 00001B5B 09F6                    		or	si, si
 19719 00001B5D 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 19720                                  					; (volume id will be checked)
 19721 00001B5F 31F6                    		xor	si, si		; return "i don't know"
 19722                                  mediaret:
 19723 00001B61 C3                      		retn
 19724                                  ; ---------------------------------------------------------------------------
 19725                                  
 19726                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 19727                                  ; because this may be different since we only set medbyt when doing a read
 19728                                  ; or write.
 19729                                  
 19730                                  mediadovolid:
 19731 00001B62 E871EB                  		call	GetBp		; build	a new bpb in current bds
 19732 00001B65 72FA                    		jb	short mediaret
 19733 00001B67 E82D00                  		call	check_vid
 19734 00001B6A 73F5                    		jnb	short mediaret
 19735 00001B6C E93BF2                  		jmp	maperror	; fix up al for	return to dos
 19736                                  ; ---------------------------------------------------------------------------
 19737                                  
 19738                                  ; simple, quick check of latched change. if no indication, then return
 19739                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 19740                                  ; return and set al = 15 (for invalid media change) which will be returned to
 19741                                  ; dos.
 19742                                  ;
 19743                                  ; for dos 3.3, this will work only for the drive that has changeline.
 19744                                  
 19745                                  ;	call with es:di -> bds, ds -> Bios_Data
 19746                                  ;	***** warning:  this routine will return one level up on the stack
 19747                                  ;			if an error occurs!
 19748                                  
 19749                                  checklatchio:
 19750                                  
 19751                                  ; if returning fake bpb then assume the disk has not changed
 19752                                  
 19753                                  		; 26/12/2023
 19754                                  		;cmp	word [es:di+3Ch], 0 ; [es:di+BDS.opcnt]	
 19755 00001B6F E8B0FF                  		call	chkopcnt
 19756 00001B72 741B                    		jz	short checkret	; done if zero
 19757                                  
 19758                                  ; check for past rom indications. if no rom change indicated, then return ok.
 19759                                  
 19760                                  		; 26/12/2023
 19761                                  		;test	word [es:di+3Fh], 40h
 19762                                  		;			; test [es:di+BDS.flags], fchanged ; 40h
 19763 00001B74 E80E01                  		call	checkromchange
 19764 00001B77 7416                    		jz	short checkret
 19765                                  
 19766                                  ; we now see that a change line has been seen in the past. let's do the
 19767                                  ; expensive verification.
 19768                                  
 19769 00001B79 E85AEB                  		call	GetBp		; build	bpb in current bds
 19770 00001B7C 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 19771 00001B7E E81600                  		call	check_vid
 19772 00001B81 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 19773 00001B83 09F6                    		or	si, si		; is changed for sure?
 19774 00001B85 7908                    		jns	short checkret
 19775 00001B87 E88F00                  		call	returnvid
 19776                                  checklatchret:
 19777 00001B8A E81DF2                  		call	maperror	; fix up al for	return to dos
 19778                                  ret_no_error_map:
 19779 00001B8D F9                      		stc
 19780 00001B8E 5E                      		pop	si		; pop off return address
 19781                                  checkret:
 19782 00001B8F C3                      		retn
 19783                                  ; ---------------------------------------------------------------------------
 19784                                  
 19785                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 19786                                  ; only if there was a disk error. return that error code in ax.
 19787                                  ;
 19788                                  ;	called with es:di -> bds, ds -> Bios_Data
 19789                                  
 19790                                  checkfatvid:
 19791 00001B90 E8D101                  		call	fat_check	; check	the fat	and the	vid
 19792 00001B93 09F6                    		or	si, si
 19793 00001B95 7835                    		js	short changed_drv
 19794                                  
 19795                                  ; the fat was the same. fall into check_vid and check volume id.
 19796                                  
 19797                                  		; fall into check_vid
 19798                                  
 19799                                  ; =============== S U B	R O U T	I N E =======================================
 19800                                  
 19801                                  ; now with the extended boot record, the logic should be enhanced.
 19802                                  ;
 19803                                  ; if it is the extended boot record, then we check the volume serial
 19804                                  ; number instead of volume id. if it is different, then set si to -1.
 19805                                  ;
 19806                                  ; if it is same, then si= 1 (no change).
 19807                                  ;
 19808                                  ; if it is not the extended boot record, then just follows the old
 19809                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 19810                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 19811                                  ; should have already covered by extended boot structure checking.
 19812                                  ; so, we will return "i don't know" by setting si to 0.
 19813                                  ;
 19814                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 19815                                  ; (this will be gauranteed by a successful getbp call right before this
 19816                                  ; routine.)
 19817                                  ;
 19818                                  ;	called with es:di -> bds, ds -> bds
 19819                                  
 19820                                  		; 26/12/2023 - Retro DOS v5.0
 19821                                  		; 19/10/2022
 19822                                  check_vid:
 19823                                  
 19824                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 19825                                  ; boot signature. if it is set then go to do the extended
 19826                                  ; id check otherwise continue with code below
 19827                                  
 19828                                  		; 26/12/2023
 19829                                  		;;;
 19830 00001B97 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB_FATSz16
 19831 00001B9C 7507                    		jnz     short chk_vid_1
 19832 00001B9E 803E[9401]29            		cmp     byte [disksector+42h], 29h ; BS_FAT32_BootSig
 19833                                  					; [disksector+EXT_BOOT.SIG],EXT_BOOT_SIGNATURE
 19834 00001BA3 EB05                    		jmp     short chk_vid_2
 19835                                  chk_vid_1:
 19836                                  		;;;
 19837 00001BA5 803E[7801]29            		cmp	byte [disksector+26h], 29h
 19838                                  					; [disksector+EXT_BOOT.SIG],
 19839                                  					; EXT_BOOT_SIGNATURE
 19840                                  chk_vid_2:		; 26/12/2023
 19841 00001BAA 7427                    		jz	short do_ext_check_id
 19842 00001BAC E8E200                  		call	haschange
 19843 00001BAF 74DE                    		jz	short checkret
 19844 00001BB1 31F6                    		xor	si, si
 19845 00001BB3 803E[6201]00            		cmp	byte [disksector+10h], 0 ; BPB_NumFATs
 19846                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 19847 00001BB8 7411                    		jz	short checkfatret ; don't read vol id
 19848                                  					; if not fat system
 19849 00001BBA E8F400                  		call	read_volume_id
 19850 00001BBD 720C                    		jb	short checkfatret
 19851 00001BBF E89901                  		call	check_volume_id
 19852 00001BC2 BEFFFF                  		mov	si, 0FFFFh	; -1
 19853                                  					; definitely changed
 19854 00001BC5 7505                    		jnz	short changed_drv
 19855                                  
 19856 00001BC7 46                      		inc	si		; not changed
 19857                                  vid_no_changed:
 19858 00001BC8 E8C000                  		call	resetchanged
 19859                                  		; 12/12/2022
 19860                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 19861                                  		;clc
 19862                                  checkfatret:
 19863 00001BCB C3                      		retn
 19864                                  ; ---------------------------------------------------------------------------
 19865                                  
 19866                                  		; 12/12/2022
 19867                                  changed_drv:
 19868 00001BCC F8                      		clc			; cas -- return	no error
 19869 00001BCD C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 19870                                  					; ensure that we ask rom for media
 19871 00001BD2 C3                      		retn			; check	next time round
 19872                                  ; ---------------------------------------------------------------------------
 19873                                  
 19874                                  ; extended id check
 19875                                  
 19876                                  ; 16/10/2022
 19877                                  
 19878                                  ; the code to check extended id is basically a check to see if the
 19879                                  ; volume serial number is still the same. the volume serial number
 19880                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 19881                                  ; ds:di points to the bds of the drive under consideration.
 19882                                  ; the bds has fields containing the high and low words 
 19883                                  ; of the volume serial number of the media in the drive.
 19884                                  ; compare these fields to the fields mentioned above. if these fields
 19885                                  ; do not match the media has changed and so we should jump to the code
 19886                                  ; starting at ext_changed else return "i don't know" status
 19887                                  ; in the register used for the changeline status and continue executing
 19888                                  ; the code given below. for temporary storage use the register which
 19889                                  ; has been saved and restored around this block.
 19890                                  ;
 19891                                  ; bds fields in inc\msbds.inc
 19892                                  
 19893                                  		; 26/12/2023 - Retro DOS v5.0
 19894                                  		; 19/10/2022
 19895                                  do_ext_check_id:
 19896                                  		; 26/12/2023
 19897                                  		;push	ax
 19898                                  		;;mov	ax, word ptr ds:disksector+27h
 19899                                  		;			; [DiskSector+EXT_BOOT.SERIAL]
 19900                                  		;mov	ax, [disksector+27h]
 19901                                  ; 26/12/2023
 19902                                  %if 1
 19903                                  		;;;
 19904 00001BD3 57                      		push	di
 19905 00001BD4 BE[9501]                		mov	si, disksector+43h ; BS_FAT32_VolID
 19906                                  					; [DiskSector+FAT32_EXT_BOOT.SERIAL]
 19907 00001BD7 833E[6801]00            		cmp	word [disksector+16h], 0 ; BPB_FATSz16
 19908 00001BDC 7403                    		jz	short chk_vid_3
 19909 00001BDE 83EE1C                  		sub	si, 28		; BS_VolID
 19910                                  		; si = disksector+27h	; [DiskSector+EXT_BOOT.SERIAL]
 19911                                  chk_vid_3:
 19912                                  		; [es:di+89h] = [es:di+BDS.vol_serial]
 19913 00001BE1 81C78900                		add	di, 137		; BDS.vol_serial
 19914 00001BE5 A7                      		cmpsw	; [DiskSector+EXT_BOOT.SERIAL] ; (or FAT32_EXT_BOOT)
 19915                                  			;		= [di+BDS.vol_serial] ?
 19916 00001BE6 7501                    		jnz	short chk_vid_4
 19917 00001BE8 A7                      		cmpsw	; [DiskSector+EXT_BOOT.SERIAL+2] ; (or FAT32_EXT_BOOT)
 19918                                  			;		= [di+BDS.vol_serial+2] ?
 19919                                  chk_vid_4:
 19920 00001BE9 5F                      		pop	di
 19921                                  		;pop	ax
 19922 00001BEA 7504                    		jnz	short ext_changed ; not equal/same
 19923 00001BEC 31F6                    		xor	si, si 		 ; 0 ; don't know
 19924 00001BEE EBD8                    		jmp	short vid_no_changed ; reset the flag
 19925                                  		;;;
 19926                                  %else
 19927                                  		; 02/09/2023
 19928                                  		xor	si, si ; 0
 19929                                  		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 19930                                  		jnz	short ext_changed
 19931                                  		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 19932                                  		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 19933                                  		jnz	short ext_changed
 19934                                  		;xor	si, si		; 0
 19935                                  					; don't know
 19936                                  		pop	ax
 19937                                  		jmp	short vid_no_changed
 19938                                  					; reset the flag
 19939                                  %endif
 19940                                  
 19941                                  ; ---------------------------------------------------------------------------
 19942                                  
 19943                                  ext_changed:
 19944                                  		; 26/12/2023
 19945                                  		;pop	ax
 19946                                  		; 02/09/2023
 19947                                  		;dec	si ; mov si, 0FFFFh ; -1
 19948 00001BF0 BEFFFF                  		mov	si, 0FFFFh	; -1
 19949                                  					; disk changed!
 19950                                  		; 12/12/2022
 19951                                  		; ('changed_drv' clears cf)
 19952                                  		;clc
 19953 00001BF3 EBD7                    		jmp	short changed_drv
 19954                                  
 19955                                  ; ---------------------------------------------------------------------------
 19956                                  
 19957                                  ; at i/o time, we detected the error. now we need to determine whether the
 19958                                  ; media was truly changed or not. we return normally if media change unknown.
 19959                                  ; and we pop off the call and jmp to harderr if we see an error.
 19960                                  ;
 19961                                  ; es:di -> bds
 19962                                  
 19963                                  checkio:				
 19964 00001BF5 80FC06                  		cmp	ah, 6
 19965 00001BF8 75D1                    		jnz	short checkfatret
 19966 00001BFA E825FF                  		call	chkopcnt
 19967 00001BFD 74CC                    		jz	short checkfatret
 19968 00001BFF E8D4EA                  		call	GetBp
 19969 00001C02 7212                    		jb	short no_error_map
 19970 00001C04 E889FF                  		call	checkfatvid
 19971 00001C07 7209                    		jb	short checkioret ; disk	error trying to	read in.
 19972 00001C09 09F6                    		or	si, si		; is changed for sure?
 19973 00001C0B 7802                    		js	short checkioerr ; yes changed
 19974 00001C0D 45                      		inc	bp		; allow	a retry
 19975 00001C0E C3                      		retn
 19976                                  ; ---------------------------------------------------------------------------
 19977                                  
 19978                                  checkioerr:				
 19979 00001C0F E80700                  		call	returnvid
 19980                                  
 19981                                  checkioret:				
 19982 00001C12 F9                      		stc			; make sure carry gets passed through
 19983 00001C13 E950F1                  		jmp	harderr
 19984                                  ; ---------------------------------------------------------------------------
 19985                                  
 19986                                  no_error_map:				
 19987 00001C16 E950F1                  		jmp	harderr2
 19988                                  
 19989                                  ; =============== S U B	R O U T	I N E =======================================
 19990                                  
 19991                                  ; return vid sets up the vid for a return to dos.
 19992                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 19993                                  ;  **** trashes si! ****
 19994                                  
 19995                                  returnvid:		
 19996 00001C19 BE1600                  		mov	si, 22		; extra
 19997                                  					; offset into pointer to return	value
 19998 00001C1C E80700                  		call	vid_into_packet
 19999 00001C1F B406                    		mov	ah, 6
 20000 00001C21 F9                      		stc
 20001 00001C22 C3                      		retn
 20002                                  
 20003                                  ; ---------------------------------------------------------------------------
 20004                                  
 20005                                  ; moves the pointer to the volid for the drive into the original request packet
 20006                                  ; no attempt is made to preserve registers.
 20007                                  ;
 20008                                  ; assumes es:di -> bds
 20009                                  ; **trashes si**
 20010                                  
 20011                                  media_set_vid:				
 20012 00001C23 BE0F00                  		mov	si, 15		; trans+1
 20013                                  					; return the value here	in packet
 20014                                  
 20015                                  		; fall into vid_into_packet
 20016                                  
 20017                                  ; =============== S U B	R O U T	I N E =======================================
 20018                                  
 20019                                  ; return pointer to vid in bds at es:di in packet[si]
 20020                                  
 20021                                  		; 19/10/2022
 20022                                  vid_into_packet:
 20023 00001C26 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 20024 00001C27 C51E[1200]              		lds	bx, [ptrsav]
 20025 00001C2B 83C74B                  		add	di, 75		; BDS.volid
 20026 00001C2E 8938                    		mov	[bx+si], di
 20027 00001C30 83EF4B                  		sub	di, 75		; BDS.volid
 20028 00001C33 8C4002                  		mov	[bx+si+2], es
 20029 00001C36 1F                      		pop	ds
 20030                                  dofloppy:	; 18/12/2022
 20031 00001C37 C3                      		retn
 20032                                  
 20033                                  ; ---------------------------------------------------------------------------
 20034                                  
 20035                                  ;----------------------------------------------------------------------------
 20036                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 20037                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 20038                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 20039                                  ;   of getbp. for 3.5" media, we just return.
 20040                                  ;
 20041                                  ;   inputs:	es:di point to correct bds for this drive
 20042                                  ;		ah has media byte
 20043                                  ;
 20044                                  ;   outputs:	carry clear
 20045                                  ;		    no registers modified
 20046                                  ;		carry set
 20047                                  ;		    al = sectors/fat
 20048                                  ;		    bh = number of root directory entries
 20049                                  ;		    bl = sectors per track
 20050                                  ;		    cx = number of sectors
 20051                                  ;		    dh = sectors per allocation unit
 20052                                  ;		    dl = number of heads
 20053                                  ;
 20054                                  ;----------------------------------------------------------------------------
 20055                                  
 20056                                  		; 26/12/2023 - Retro DOS v5.0
 20057                                  hidensity:
 20058                                  
 20059                                  ; check for correct drive
 20060                                  		
 20061                                  		; 26/12/2023
 20062 00001C38 26F6453F02              		test	byte [es:di+3Fh], 2 ; is it special?
 20063                                  		; 12/12/2022
 20064                                  		;test	byte [es:di+23h], 2
 20065                                  		;;test	word [es:di+23h], 2 ; is it special?
 20066                                  					; [es:di+BDS.flags], fchangeline
 20067 00001C3D 74F8                    		jz	short dofloppy	; no, do normal floppy test
 20068                                  
 20069                                  ; we have a media byte that is pretty complex. examine drive information
 20070                                  ; table to see what kind it is.
 20071                                  
 20072                                  		; 26/12/2023
 20073 00001C3F 26807D3E02              		cmp	byte [es:di+3Eh], 2 ; is it single-media?
 20074                                  		;cmp	byte [es:di+22h], 2 ; is it single-media?
 20075 00001C44 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 20076                                  					; yes, use fatid...
 20077                                  ; 96 tpi drive?
 20078 00001C46 80FCF9                  		cmp	ah, 0F9h
 20079 00001C49 75EC                    		jnz	short dofloppy
 20080                                  
 20081                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 20082                                  ;------ a 720K diskette
 20083                                  
 20084                                  		; 02/09/2023 (PCDOS 7.1)
 20085                                  		; 26/12/2023
 20086 00001C4B 268A453E                		mov	al, [es:di+3Eh] ; [es:di+BDS.formfactor]
 20087                                  		;mov	al, [es:di+22h]	; [es:di+BDS.formfactor]
 20088 00001C4F 3C07                    		cmp	al, 7
 20089                                  		;cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 20090                                  					; ffOther
 20091 00001C51 7413                    		jz	short Is720K
 20092 00001C53 3C09                    		cmp	al, 9
 20093                                  		;cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 20094                                  					; ff288
 20095 00001C55 740F                    		jz	short Is720K
 20096 00001C57 B007                    		mov	al, 7		; seven	sectors	/ fat
 20097 00001C59 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 20098                                  					; 224 root dir entries
 20099                                  					; & 0Fh sector max
 20100 00001C5C B96009                  		mov	cx, 2400	; 80*15*2
 20101                                  					; 80 tracks, 15 sectors/track,
 20102                                  					; 2 sides
 20103                                  		; 02/09/2023
 20104 00001C5F 5A                      		pop	dx		; pop off return address
 20105 00001C60 BA0201                  		mov	dx, 258		; 1*256+2
 20106                                  					; sectors/allocation unit
 20107                                  					; & head max
 20108                                  		;add	sp, 2		; pop off return address
 20109 00001C63 E9E7EA                  		jmp	Has1		; return to tail of getbp
 20110                                  ; ---------------------------------------------------------------------------
 20111                                  
 20112                                  Is720K:
 20113                                  		; 02/09/2023
 20114 00001C66 5B                      		pop	bx		; pop off return address
 20115                                  		;add	sp, 2		; pop off return address
 20116 00001C67 E9A3EA                  		jmp	Has720K		; return to 720K code
 20117                                  ; ---------------------------------------------------------------------------
 20118                                  
 20119                                  		; 18/12/2022
 20120                                  ;dofloppy:
 20121                                  		;retn
 20122                                  
 20123                                  ; =============== S U B	R O U T	I N E =======================================
 20124                                  
 20125                                  ; 16/10/2022
 20126                                  
 20127                                  ;---------------------------------------------------------------------------
 20128                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 20129                                  ;		   essentially used to indicate changeline, or format.
 20130                                  ;
 20131                                  ;   inputs:	dl contains physical drive number
 20132                                  ;		bx contains bits to set in the flag field in the bdss
 20133                                  ;   outputs:	none
 20134                                  ;   registers modified: flags
 20135                                  ;
 20136                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 20137                                  ;
 20138                                  ; in the virtual drive system we *must* flag the other drives as being changed
 20139                                  ;---------------------------------------------------------------------------
 20140                                  
 20141                                  		; 26/12/2023 - Retro DOS v5.0
 20142                                  set_changed_dl:	
 20143 00001C6A 06                      		push	es
 20144 00001C6B 57                      		push	di
 20145                                  		;les	di, ds:start_bds
 20146                                  		; 19/10/2022
 20147 00001C6C C43E[1901]              		les	di, [start_bds]
 20148                                  
 20149                                  ; note: we assume that the list is non-empty
 20150                                  
 20151                                  scan_bds:
 20152 00001C70 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 20153 00001C74 7504                    		jnz	short get_next_bds
 20154                                  
 20155                                  ; someone may complain, but this *always* must be done when a disk change is
 20156                                  ; noted. there are *no* other compromising circumstances.
 20157                                  
 20158                                  		; 26/12/2023
 20159 00001C76 26095D3F                		or	[es:di+3Fh], bx	; [es:di+BDS.flags]
 20160                                  		;or	[es:di+23h], bx	; [es:di+BDS.flags]
 20161                                  					; signal change	on other drive
 20162                                  get_next_bds:
 20163 00001C7A 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 20164                                  					; go to	next bds
 20165 00001C7D 83FFFF                  		cmp	di, 0FFFFh
 20166 00001C80 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 20167 00001C82 5F                      		pop	di
 20168 00001C83 07                      		pop	es
 20169 00001C84 C3                      		retn
 20170                                  
 20171                                  ; =============== S U B	R O U T	I N E =======================================
 20172                                  
 20173                                  ;---------------------------------------------------------------------------
 20174                                  ; checkromchange - see if external program has diddled rom change line.
 20175                                  ;
 20176                                  ;   inputs:	es:di points to current bds.
 20177                                  ;   outputs:	zero set - no change
 20178                                  ;		zero reset - change
 20179                                  ;   registers modified: none
 20180                                  ;---------------------------------------------------------------------------
 20181                                  
 20182                                  		; 26/12/2023 - Retro DOS v5.0
 20183                                  checkromchange:	
 20184                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 20185                                  		; 26/12/2023
 20186 00001C85 26F6453F40              		test	byte [es:di+3Fh], 40h
 20187                                  		; 10/12/2022
 20188                                  		;test	byte [es:di+23h], 40h
 20189                                  		;;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 20190                                  					; fchanged
 20191 00001C8A C3                      		retn
 20192                                  
 20193                                  ; =============== S U B	R O U T	I N E =======================================
 20194                                  
 20195                                  ;---------------------------------------------------------------------------
 20196                                  ; resetchanged - restore value of change line
 20197                                  ;
 20198                                  ;   inputs:	es:di points to current bds
 20199                                  ;   outputs:	none
 20200                                  ;   registers modified: none
 20201                                  ;---------------------------------------------------------------------------
 20202                                  
 20203                                  		; 26/12/2023 - Retro DOS v5.0
 20204                                  resetchanged:
 20205                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh
 20206                                  		; 26/12/2023
 20207 00001C8B 2680653FBF              		and	byte [es:di+3Fh], 0BFh
 20208                                  		; 10/12/2022
 20209                                  		;and	byte [es:di+23h], 0BFh
 20210                                  		;;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 20211                                  					; ~fchanged
 20212 00001C90 C3                      		retn
 20213                                  
 20214                                  ; =============== S U B	R O U T	I N E =======================================
 20215                                  
 20216                                  ;---------------------------------------------------------------------------
 20217                                  ; haschange - see if drive can supply change line
 20218                                  ;
 20219                                  ;   inputs:	es:di points to current bds
 20220                                  ;   outputs:	zero set - no change line available
 20221                                  ;		zero reset - change line available
 20222                                  ;   registers modified: none
 20223                                  ;---------------------------------------------------------------------------
 20224                                  
 20225                                  		; 26/12/2023 - Retro DOS v5.0
 20226                                  haschange:
 20227                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 20228                                  		; 26/12/2023
 20229 00001C91 26F6453F02              		test	byte [es:di+3Fh], 2
 20230                                  		; 10/12/2022
 20231                                  		;test	byte [es:di+23h], 2
 20232                                  		;;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 20233                                  					; fchangeline
 20234 00001C96 C3                      		retn
 20235                                  
 20236                                  ; ---------------------------------------------------------------------------
 20237                                  
 20238                                  ; 16/10/2022
 20239                                  
 20240                                  ;-------------------------------------------------------------------------
 20241                                  ; set_volume_id      -	main routine, calls other routines.
 20242                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 20243                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 20244                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 20245                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 20246                                  ;-------------------------------------------------------------------------
 20247                                  
 20248                                  ; set_volume_id
 20249                                  ;   if drive has changeline support, read in and set the volume_id
 20250                                  ; and the last fat_id byte. if no change line support then do nothing.
 20251                                  ;
 20252                                  ;   on entry:
 20253                                  ;	es:di points to the bds for this disk.
 20254                                  ;	ah contains media byte
 20255                                  ;
 20256                                  ;   on exit:
 20257                                  ;	carry clear:
 20258                                  ;	   successful call
 20259                                  ;	carry set
 20260                                  ;	   error and ax has error code
 20261                                  
 20262                                  set_volume_id:
 20263 00001C97 52                      		push	dx		; save registers
 20264 00001C98 50                      		push	ax
 20265 00001C99 E8F5FF                  		call	haschange	; does drive have changeline support?
 20266 00001C9C 740B                    		jz	short setvret	; no, get out
 20267 00001C9E E81000                  		call	read_volume_id
 20268 00001CA1 7209                    		jb	short seterr
 20269 00001CA3 E8A900                  		call	transfer_volume_id ; copy the volume id	to special drive
 20270 00001CA6 E8E2FF                  		call	resetchanged	; restore value	of change line
 20271                                  setvret:				
 20272                                  		; 10/12/2022
 20273                                  		; cf = 0
 20274                                  		;clc			; no error, clear carry flag
 20275 00001CA9 58                      		pop	ax		; restore registers
 20276 00001CAA 5A                      		pop	dx
 20277 00001CAB C3                      		retn
 20278                                  ; ---------------------------------------------------------------------------
 20279                                  
 20280                                  seterr:
 20281 00001CAC 5A                      		pop	dx		; pop stack but don't overwrite ax
 20282 00001CAD 5A                      		pop	dx		; restore dx
 20283 00001CAE C3                      		retn
 20284                                  ; ---------------------------------------------------------------------------
 20285 00001CAF 0000                    root_sec:	dw 0			; root sector #
 20286                                  
 20287                                  ; 16/10/2022
 20288                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 20289                                  ; 09/12/2022
 20290                                  ROOTSEC equ root_sec
 20291                                  
 20292                                  ; =============== S U B	R O U T	I N E =======================================
 20293                                  
 20294                                  ; 16/10/2022
 20295                                  
 20296                                  ; read_volume_id read the volume id and tells if it has been changed.
 20297                                  ;
 20298                                  ;   on entry:
 20299                                  ;	es:di points to current bds for drive.
 20300                                  ;
 20301                                  ;   on exit:
 20302                                  ;	carry clear
 20303                                  ;	    si = 1  no change
 20304                                  ;	    si = 0  ?
 20305                                  ;	    si = -1 change
 20306                                  ;
 20307                                  ;	carry set:
 20308                                  ;	    error and ax has error code.
 20309                                  
 20310                                  read_volume_id:
 20311 00001CB1 52                      		push	dx		; preserve registers
 20312 00001CB2 51                      		push	cx
 20313 00001CB3 53                      		push	bx
 20314 00001CB4 50                      		push	ax
 20315 00001CB5 06                      		push	es		; stack the bds last
 20316 00001CB6 57                      		push	di
 20317 00001CB7 1E                      		push	ds		; point es to Bios_Data
 20318 00001CB8 07                      		pop	es
 20319 00001CB9 BF[4008]                		mov	di, tmp_vid	; "NO NAME	 "
 20320 00001CBC BE[6305]                		mov	si, nul_vid	; "NO NAME	 "
 20321                                  		; 26/12/2023
 20322 00001CBF B90B00                  		mov	cx, 11		; PCDOS 7.1 - 02/09/2023
 20323                                  		;mov	cx, 12		; initialize tmp_vid to	null vi_id
 20324                                  		
 20325                                  		;rep	movsb
 20326                                  		; 26/12/2023
 20327                                  		;rep movs byte ptr es:[di], byte ptr cs:[si]
 20328                                  		;db 0FBh,2Eh,0A4h 
 20329                                  		;cs	; nul_vid is in BIOSCODE segment 
 20330                                  		;rep movsb
 20331 00001CC2 F3                      		rep
 20332 00001CC3 2E                      		cs
 20333 00001CC4 A4                      		movsb	
 20334                                  		
 20335 00001CC5 5F                      		pop	di
 20336 00001CC6 07                      		pop	es
 20337 00001CC7 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 20338                                  					; # of fats
 20339 00001CCB 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 20340                                  					; sectors / fat
 20341 00001CCF F6E1                    		mul	cl		; size taken by	fats
 20342 00001CD1 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 20343                                  					; add on reserved sectors
 20344                                  					;
 20345                                  					; ax is	now sector # (0	based)
 20346                                  		; 17/10/2022
 20347 00001CD5 2EA3[AF1C]              		mov	[cs:ROOTSEC], ax
 20348                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 20349                                  					; 0070h:3EFFh =	2C7h:198Fh
 20350 00001CD9 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 20351                                  					; # root dir entries
 20352 00001CDD B104                    		mov	cl, 4		; 16 entries/sector
 20353 00001CDF D3E8                    		shr	ax, cl		; divide by 16
 20354                                  		;mov	cx, ax		; cx is	# of sectors to	scan
 20355                                  		; 02/09/2023 (PCDOS 7.1, one byte opcode)
 20356 00001CE1 91                      		xchg	ax, cx		; cx is	# of sectors to	scan
 20357                                  next_sec:
 20358 00001CE2 51                      		push	cx		; save outer loop counter
 20359 00001CE3 2EA1[AF1C]              		mov	ax, [cs:ROOTSEC]
 20360                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 20361                                  					; get sector #
 20362 00001CE7 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 20363                                  					; sectors / track
 20364 00001CEB 31D2                    		xor	dx, dx
 20365 00001CED F7F1                    		div	cx
 20366                                  
 20367                                  ; set up registers for call to read_sector
 20368                                  
 20369 00001CEF 42                      		inc	dx		; dx= sectors into track
 20370                                  					; ax= track count from 0
 20371 00001CF0 88D1                    		mov	cl, dl		; sector to read
 20372 00001CF2 31D2                    		xor	dx, dx
 20373 00001CF4 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 20374                                  					; # heads on this disc
 20375 00001CF8 88D6                    		mov	dh, dl		; head number
 20376 00001CFA 88C5                    		mov	ch, al		; track	#
 20377 00001CFC E8B9EB                  		call	read_sector	; get first sector of the root directory,
 20378                                  					; ds:bx	-> directory sector
 20379 00001CFF 723F                    		jb	short readviderr
 20380 00001D01 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 20381 00001D04 B008                    		mov	al, 8		; volume label bit
 20382                                  fvid_loop:
 20383                                  		; 02/09/2023 (PCDOS 7.1)
 20384 00001D06 382F                    		cmp	[bx], ch ; 0				
 20385                                  		;cmp	byte [bx], 0 ; end of dir?
 20386 00001D08 7433                    		jz	short no_vid	; yes, no vol id
 20387 00001D0A 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 20388 00001D0D 7405                    		jz	short ent_loop	; yes, skip
 20389 00001D0F 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 20390 00001D12 750F                    		jnz	short found_vid	; jmp yes
 20391                                  ent_loop:
 20392 00001D14 83C320                  		add	bx, 32		; add length of	directory entry
 20393 00001D17 E2ED                    		loop	fvid_loop
 20394 00001D19 59                      		pop	cx		; outer loop
 20395 00001D1A 2EFF06[AF1C]            		inc	word [cs:ROOTSEC]
 20396                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 20397                                  					; next sector
 20398 00001D1F E2C1                    		loop	next_sec	; continue
 20399                                  notfound:
 20400                                  		; 02/09/2023
 20401                                  		;xor	si, si
 20402 00001D21 EB13                    		jmp	short fvid_ret
 20403                                  ; ---------------------------------------------------------------------------
 20404                                  
 20405                                  found_vid:
 20406                                  		; 02/09/2023
 20407                                  		; cf = 0  ('test' instruction clears cf)
 20408 00001D23 59                      		pop	cx		; clean stack of outer loop counter
 20409 00001D24 89DE                    		mov	si, bx		; point	to volume_id
 20410 00001D26 06                      		push	es		; preserve current bds
 20411 00001D27 57                      		push	di
 20412 00001D28 1E                      		push	ds
 20413 00001D29 07                      		pop	es		; point es to Bios_Data
 20414 00001D2A BF[4008]                		mov	di, tmp_vid	; "NO NAME	 "
 20415 00001D2D B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 20416                                  					; length of string minus nul
 20417 00001D30 F3A4                    		rep movsb		; mov volume label to tmp_vid
 20418                                  		;xor	al, al
 20419                                  		; 02/09/2023
 20420 00001D32 91                      		xchg	ax, cx		; ax = 0
 20421 00001D33 AA                      		stosb			; null terminate
 20422                                  		;;xor	si, si
 20423                                  		; 02/09/2023
 20424                                  		;xchg	ax, si		; si = 0
 20425 00001D34 5F                      		pop	di		; restore current bds
 20426 00001D35 07                      		pop	es
 20427                                  fvid_ret:
 20428                                  		; 02/09/2023
 20429 00001D36 31F6                    		xor	si, si ; 0
 20430                                  				
 20431 00001D38 58                      		pop	ax
 20432                                  		; 10/12/2022
 20433                                  		; cf = 0
 20434                                  		;clc
 20435                                  rvidret:
 20436 00001D39 5B                      		pop	bx		; restore registers
 20437 00001D3A 59                      		pop	cx
 20438 00001D3B 5A                      		pop	dx
 20439 00001D3C C3                      		retn
 20440                                  ; ---------------------------------------------------------------------------
 20441                                  
 20442                                  no_vid:
 20443 00001D3D 59                      		pop	cx		; clean stack of outer loop counter
 20444                                  		;jmp	short notfound	; not found
 20445                                  		; 02/09/2023
 20446 00001D3E EBF6                    		jmp	short fvid_ret
 20447                                  ; ---------------------------------------------------------------------------
 20448                                  
 20449                                  readviderr:
 20450 00001D40 5E                      		pop	si		; trash the outer loop counter
 20451 00001D41 5E                      		pop	si		; caller's ax, return error code instead
 20452 00001D42 EBF5                    		jmp	short rvidret
 20453                                  
 20454                                  ; ---------------------------------------------------------------------------
 20455                                  		; 26/12/2023 - Retro DOS v5.0
 20456                                  		; 02/09/2023 - Retro DOS v4.2 (IO.SYS optimization)
 20457                                  		; PCDOS 7.1 - IBMBIO.COM - BIOSCODE:1DCFh 
 20458                                  preset_volid_addr:
 20459 00001D44 BE[4008]                		mov	si, tmp_vid	; "NO NAME    "
 20460                                  		; 26/12/2023
 20461                                  		; PCDOS 7.1
 20462 00001D47 83C77D                  		add	di, 125		; BDS.volid
 20463 00001D4A B90B00                  		mov	cx, 11		; VOLID_SIZ (12 for MSDOS 5.0-6.22 versions)
 20464                                  		; MSDOS 6.21 (MSDOS 5.0 & 6.?)
 20465                                  		;add	di, 75		; BDS.volid
 20466                                  		;mov	cx, 12		; VOLID_SIZ
 20467                                  		;
 20468 00001D4D FC                      		cld
 20469 00001D4E C3                      		retn
 20470                                  
 20471                                  ; =============== S U B	R O U T	I N E =======================================
 20472                                  
 20473                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 20474                                  ;
 20475                                  ; inputs:	es:di has current bds
 20476                                  ; outputs:	bds for drive has volume id from tmp
 20477                                  
 20478                                  		; 27/12/2023 - Retro DOS v5.0
 20479                                  transfer_volume_id:
 20480 00001D4F 57                      		push	di		; copy the volume id from tmp to special drive
 20481                                  		;push	si
 20482 00001D50 51                      		push	cx
 20483                                  		; 27/12/2023
 20484 00001D51 56                      		push	si
 20485                                  
 20486                                  		;mov	si, tmp_vid	; "NO NAME	 "
 20487                                  		;;add	di, BDS.volid
 20488                                  		;add	di, 75		; BDS.volid
 20489                                  		;;mov	cx, VOLID_SIZ
 20490                                  		;mov	cx, 12		; VOLID_SIZ
 20491                                  		;cld
 20492                                  		; 02/09/2023 (PCDOS 7.1)
 20493 00001D52 E8EFFF                  		call	preset_volid_addr
 20494                                  
 20495 00001D55 F3A4                    		rep movsb
 20496                                  		
 20497                                  		; 27/12/2023
 20498 00001D57 5E                      		pop	si
 20499                                  chk_volid_ok:
 20500 00001D58 59                      		pop	cx
 20501                                  		;pop	si
 20502 00001D59 5F                      		pop	di
 20503 00001D5A C3                      		retn
 20504                                  
 20505                                  ; =============== S U B	R O U T	I N E =======================================
 20506                                  
 20507                                  ;  check_volume_id - compare volume id in tmp area with
 20508                                  ;		     one expected for drive
 20509                                  ;
 20510                                  ;   inputs:	es:di has current bds for drive
 20511                                  ;   outputs:	zero true means it matched
 20512                                  
 20513                                  		; 27/12/2023 - Retro DOS v5.0
 20514                                  check_volume_id:
 20515 00001D5B 57                      		push	di
 20516 00001D5C 51                      		push	cx
 20517                                  		
 20518                                  		;mov	si, tmp_vid	; "NO NAME	 "
 20519                                  		;;add	di, BDS.volid
 20520                                  		;add	di, 75		; BDS.volid
 20521                                  		;;mov	cx, VOLID_SIZ
 20522                                  		;mov	cx, 12		; VOLID_SIZ
 20523                                  		;cld
 20524                                  		; 02/09/2023 (PCDOS 7.1)
 20525 00001D5D E8E4FF                  		call	preset_volid_addr
 20526                                  
 20527 00001D60 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 20528                                  		
 20529                                  		; 27/12/2023
 20530                                  		;pop	cx
 20531                                  		;pop	di
 20532                                  		;retn
 20533 00001D62 EBF4                    		jmp	short chk_volid_ok
 20534                                  
 20535                                  ; =============== S U B	R O U T	I N E =======================================
 20536                                  
 20537                                  ;   fat_check - see of the fatid has changed in the specified drive.
 20538                                  ;	      - uses the fat id obtained from the boot sector.
 20539                                  ;
 20540                                  ;   inputs:	medbyt is expected fat id
 20541                                  ;		es:di points to current bds
 20542                                  ;
 20543                                  ;   output:	si = -1 if fat id different,
 20544                                  ;		si = 0 otherwise
 20545                                  ;
 20546                                  ;   no other registers changed.
 20547                                  
 20548                                  fat_check:
 20549 00001D64 50                      		push	ax
 20550 00001D65 31F6                    		xor	si, si		; say fat id's are same.
 20551 00001D67 A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 20552 00001D6A 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 20553                                  					; compare it with the bds medbyte
 20554 00001D6E 7401                    		jz	short okret1	; carry	clear
 20555 00001D70 4E                      		dec	si
 20556                                  okret1:
 20557 00001D71 58                      		pop	ax
 20558 00001D72 C3                      		retn
 20559                                  
 20560                                  ; ---------------------------------------------------------------------------
 20561                                  
 20562                                  ; BIOSCODE:1DFEh (PCDOS 7.1 IBMBIO.COM) ; 27/12/2023
 20563                                  		;times 2 db 0
 20564                                  
 20565                                  ; BIOSCODE:1A69h (MSDOS 6.21 IO.SYS) ((& MSDOS 6.22 IO.SYS))
 20566                                  		;times 7 db 0
 20567                                  
 20568                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 20569                                  
 20570                                  		; 09/12/2022
 20571                                  		;times 4 db 0	; 17/10/2022
 20572                                  		;db 4 dup(0)	; times 4 db 0
 20573                                  
 20574                                  ; ---------------------------------------------------------------------------
 20575                                  
 20576                                  		; 09/12/2022
 20577                                  		;db 0
 20578                                  
 20579                                  number2div	equ ($-BCode_start)
 20580                                  number2mod	equ (number2div % 16)
 20581                                  
 20582                                  %if number2mod>0 & number2mod<16
 20583 00001D73 00<rep Dh>              		times (16-number2mod) db 0
 20584                                  %endif
 20585                                  
 20586                                  ;align 16
 20587                                  
 20588                                  ; 09/12/2022
 20589                                  BCODE_END	equ $ - BCode_start
 20590                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 20591                                  ; 13/12/2022
 20592                                  SYSINITOFFSET	equ BCODE_END
 20593                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 20594                                  
 20595                                  ; 30/12/2022 - Retro DOS v4.2
 20596                                  ; (SYSINITSEG is 473h for MSDOS 6.21 IO.SYS)
 20597                                  
 20598                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 20599                                  
 20600                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20601                                  ; 01/05/2019 - Retro DOS v4.0 
 20602                                  ; ============================================================================
 20603                                  ; end of BIOSCODE
 20604                                  
 20605                                  ; ----------------------------------------------------------------------------
 20606                                  ; %include sysinit5.s	; 09/12/2022
 20607                                  ; ----------------------------------------------------------------------------
 20608                                  
 20609                                  ;=============================================================================
 20610                                  ; (IO.SYS) SYSINIT SEGMENT 
 20611                                  ;=============================================================================
 20612                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20613                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 20614                                  ;
 20615                                  ; 27/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 20616                                  
 20617                                  section .SYSINIT vstart=0
 20618                                  
 20619                                  ; ****************************************************************************
 20620                                  ; SYSINIT.BIN (MSDOS 6.21 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 20621                                  ; ----------------------------------------------------------------------------
 20622                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 30/12/2022))
 20623                                  ; ----------------------------------------------------------------------------
 20624                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 20625                                  ; ----------------------------------------------------------------------------
 20626                                  ; Assembler: NASM version 2.15
 20627                                  ; ----------------------------------------------------------------------------
 20628                                  ;	   ((nasm sysinit6.s -l sysinit6.lst -o SYSINIT6.BIN -Z error.txt)) 	
 20629                                  ; ----------------------------------------------------------------------------
 20630                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 20631                                  ; ----------------------------------------------------------------------------
 20632                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 20633                                  ; source code by Microsoft, 1991 
 20634                                  ; ----------------------------------------------------------------------------
 20635                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 20636                                  ; by Microsoft, 12/10/1983
 20637                                  ; ****************************************************************************
 20638                                  ; main file: 'retrodos4.s'
 20639                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 20640                                  
 20641                                  ; 30/12/2022 - Retro DOS v4.2 
 20642                                  ; Retro DOS v4.0 - 2019
 20643                                  ; SYSINIT (MSDOS 6.21 IO.SYS) draft: 'sysinit3.s' (01/07/2019)
 20644                                   
 20645                                  ; 21/10/2022
 20646                                  ; ----------------------------------------------------------------------------
 20647                                  ; This source code (version) is based on SYSINIT source code of disassembled
 20648                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 20649                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 20650                                  ; ----------------------------------------------------------------------------
 20651                                  ; Binary file splitter & joiner: FFSJ v3.3
 20652                                  
 20653                                  ;--------------------------------------------------------------
 20654                                  ; SYSINIT.TXT (27/01/1983)
 20655                                  ;--------------------------------------------------------------
 20656                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 20657                                  ;over  the  system  initialization  after  the  OEM  bios   has
 20658                                  ;performed any  initialization  it  needs  to  do.   Control is
 20659                                  ;transfered with a long jump to the external  variable  SYSINIT
 20660                                  ;
 20661                                  ;
 20662                                  ;   The OEM  has  the  following  variables declared external:
 20663                                  ;
 20664                                  ;   CURRENT_DOS_LOCATION    WORD
 20665                                  ;
 20666                                  ;This word  contains  the  segment  number of the DOS before it
 20667                                  ;is relocated.  The OEM bios must set this value.
 20668                                  ;
 20669                                  ;   FINAL_DOS_LOCATION      WORD
 20670                                  ;
 20671                                  ;This word contains the segment number of the DOS after SYSINIT
 20672                                  ;moves it.  The OEM bios must set this value.
 20673                                  ;
 20674                                  ;   DEVICE_LIST             DWORD
 20675                                  ;
 20676                                  ;This  double  word  pointer  points  to  the  linked  list  of
 20677                                  ;character and block device drivers.  The  OEM  must  set  this
 20678                                  ;value.
 20679                                  ;
 20680                                  ;   MEMORY_SIZE             WORD
 20681                                  ;
 20682                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 20683                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 20684                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 20685                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 20686                                  ;and read it back until it gets a mismatch.
 20687                                  ;
 20688                                  ;   DEFAULT_DRIVE           BYTE
 20689                                  ;
 20690                                  ;This is  the initial default drive when the system first comes
 20691                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 20692                                  ;it then drive a is assumed.
 20693                                  ;
 20694                                  ;   BUFFERS                 BYTE
 20695                                  ;
 20696                                  ;This is  the  default  number of buffers for the system.  This
 20697                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 20698                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 20699                                  ;
 20700                                  ;   FILES                   BYTE
 20701                                  ;
 20702                                  ;This is  the  default  number  of  files for the system.  This
 20703                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 20704                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 20705                                  ;
 20706                                  ;   SYSINIT                 FAR
 20707                                  ;
 20708                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 20709                                  ;this label at the end of its INIT code.
 20710                                  ;
 20711                                  ;   The OEM  has  the  following  variables declared public:
 20712                                  ;
 20713                                  ;   RE_INIT                 FAR
 20714                                  ;
 20715                                  ;This is an entry point which allows the BIOS to do some INIT
 20716                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 20717                                  ;PRESERVED.  On entry DS points to the first available memory
 20718                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 20719                                  ;prefix which represents  the  "program"  currently  running.
 20720                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 20721                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 20722                                  ;that  no  memory  is  allocated to it, it is running in free
 20723                                  ;memory.
 20724                                  ;NOTES:
 20725                                  ;     At the time this routine is called SYSINIT occupies the
 20726                                  ;highest 10K of memory ("highest" is determined by the  value
 20727                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 20728                                  ;     Since this is called AFTER DOS is initialized, you can
 20729                                  ;make system calls.  This also implies that the code for this
 20730                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 20731                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 20732                                  ;     If you don't want  anything done just set this to point
 20733                                  ;at a FAR RET instruction.
 20734                                  
 20735                                  ; ----------------------------------------------------------------------
 20736                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 20737                                  ; ----------------------------------------------------------------------
 20738                                  
 20739                                  ;include version.inc
 20740                                  ; ----------------------------------------------------------------------
 20741                                  
 20742                                  ;FALSE   EQU     0
 20743                                  ;TRUE    EQU     0FFFFh
 20744                                  
 20745                                  ;IBMVER	    EQU     TRUE
 20746                                  ;IBMCOPYRIGHT EQU   FALSE
 20747                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 20748                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 20749                                  ;MSVER      EQU     FALSE
 20750                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 20751                                  ;KANJI      EQU     FALSE
 20752                                  
 20753                                  ;(MSDOS 6.0, versiona.inc, 1991)
 20754                                  ; ----------------------------------------------------------------------
 20755                                  ;MAJOR_VERSION  EQU	6
 20756                                  ;;MINOR_VERSION	EQU	0	;6.00
 20757                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 20758                                  
 20759                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 20760                                  ; ----------------------------------------------------------------------
 20761                                  ;MAJOR_VERSION   EQU	5
 20762                                  ;MINOR_VERSION   EQU	0
 20763                                  
 20764                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21)
 20765                                  MAJOR_VERSION   EQU	6
 20766                                  MINOR_VERSION   EQU	22
 20767                                  
 20768                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 20769                                  
 20770                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 20771                                  				; currently 0.
 20772                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 20773                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 20774                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 20775                                  
 20776                                  ;      if1
 20777                                  ;      %OUT  ... for DOS Version 5.00 ...
 20778                                  ;      endif
 20779                                  
 20780                                         ;******************************
 20781                                         ;Each assembler program should:
 20782                                         ;  mov ah,030h                   ;DOS Get Version function
 20783                                         ;  int 021h                      ;Version ret. in AX,minor version first
 20784                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 20785                                         ;  jne error_handler             ; EXACT version match.
 20786                                         ;******************************
 20787                                  
 20788                                  ; ----------------------------------------------------------------------
 20789                                  ; device definitions
 20790                                  
 20791                                  ;Attribute bit masks
 20792                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 20793                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 20794                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 20795                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 20796                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 20797                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 20798                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 20799                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 20800                                  
 20801                                  ; The device table list has the form:
 20802                                  struc	SYSDEV
 20803 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 20804 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 20805 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 20806 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 20807 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 20808                                  .size:
 20809                                  endstruc
 20810                                  
 20811                                  ;Static Reguest Header
 20812                                  struc	SRHEAD
 20813 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 20814 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 20815 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 20816 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 20817 00000005 ????????????????                	resb 8		;Reserved for queue links
 20818                                  .size:
 20819                                  endstruc
 20820                                  
 20821                                  ;Status word masks
 20822                                  STERR   EQU     8000H           ;Bit 15 - Error
 20823                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 20824                                  STDON   EQU     0100H           ;Bit 8 - Done
 20825                                  STECODE EQU     00FFH           ;Error code
 20826                                  WRECODE EQU     0
 20827                                  
 20828                                  ;Function codes
 20829                                  DEVINIT EQU     0               ;Initialization
 20830                                  DINITHL EQU     26              ;Size of init header
 20831                                  DEVMDCH EQU     1               ;Media check
 20832                                  DMEDHL  EQU     15              ;Size of media check header
 20833                                  DEVBPB  EQU     2               ;Get BPB
 20834                                  DEVRDIOCTL EQU  3               ;IOCTL read
 20835                                  DBPBHL  EQU     22              ;Size of Get BPB header
 20836                                  DEVRD   EQU     4               ;Read
 20837                                  DRDWRHL EQU     22              ;Size of RD/WR header
 20838                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 20839                                  DRDNDHL EQU     14              ;Size of non destructive read header
 20840                                  DEVIST  EQU     6               ;Input status
 20841                                  DSTATHL EQU     13              ;Size of status header
 20842                                  DEVIFL  EQU     7               ;Input flush
 20843                                  DFLSHL  EQU     15              ;Size of flush header
 20844                                  DEVWRT  EQU     8               ;Write
 20845                                  DEVWRTV EQU     9               ;Write with verify
 20846                                  DEVOST  EQU     10              ;Output status
 20847                                  DEVOFL  EQU     11              ;Output flush
 20848                                  DEVWRIOCTL EQU  12              ;IOCTL write
 20849                                  
 20850                                  ; ----------------------------------------------------------------------
 20851                                  struc	SYS_FCB
 20852 00000000 ??                      .fcb_drive:	resb 1
 20853 00000001 ????????????????        .fcb_name:	resb 8
 20854 00000009 ??????                  .fcb_ext:	resb 3
 20855 0000000C ????                    .fcb_EXTENT:	resw 1
 20856 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 20857 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 20858                                                          ; word
 20859 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 20860 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 20861 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 20862 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 20863                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 20864                                                          ; If file, bit 6=0 if dirty
 20865                                                          ; If I/O device, bit 6=0 if EOF (input)
 20866                                                          ;               Bit 5=1 if Raw mode
 20867                                                          ;               Bit 0=1 if console input device
 20868                                                          ;               Bit 1=1 if console output device
 20869                                                          ;               Bit 2=1 if null device
 20870                                                          ;               Bit 3=1 if clock device
 20871 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 20872 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 20873 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 20874 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 20875 00000020 ??                      .fcb_NR:	resb 1	; Next record
 20876 00000021 ????????                .fcb_RR:	resb 4	; Random record
 20877                                  .size:
 20878                                  endstruc
 20879                                  
 20880                                  ; ----------------------------------------------------------------------
 20881                                  ; Field definition for I/O buffer information
 20882                                  
 20883                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 20884                                  
 20885                                  struc buffinfo
 20886 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 20887 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 20888 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 20889                                  			; SFT table index (bit 7 = 1)
 20890                                  			; = FFh if buffer free
 20891 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 20892                                  			;	= 0 if Local device buffer
 20893                                  			; Bit 6 = 1 if buffer dirty
 20894                                  			; Bit 5 = Reserved
 20895                                  			; Bit 4 = Search bit (bit 7 = 1)
 20896                                  			; Bit 3 = 1 if buffer is DATA
 20897                                  			; Bit 2 = 1 if buffer is DIR
 20898                                  			; Bit 1 = 1 if buffer is FAT
 20899                                  			; Bit 0 = Reserved
 20900 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 20901                                  ; The next two items are often refed as a word (bit 7 = 0)
 20902 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 20903 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 20904 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 20905 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 20906 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 20907                                  .size:
 20908                                  endstruc
 20909                                  
 20910                                  %define buf_offset	dword [buf_sector]
 20911                                  			;For bit 7 = 1, this is the byte
 20912                                  			;offset of the start of the buffer in
 20913                                  			;the file pointed to by buf_ID.  Thus
 20914                                  			;the buffer starts at location
 20915                                  			;buf_offset in the file and contains
 20916                                  			;buf_fill bytes.
 20917                                  
 20918                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 20919                                  
 20920                                  
 20921                                  buf_Free	equ	0FFh		; buf_id of free buffer
 20922                                  
 20923                                  ;Flag byte masks
 20924                                  buf_isnet	EQU	10000000B
 20925                                  buf_dirty	EQU	01000000B
 20926                                  ;***
 20927                                  buf_visit	EQU	00100000B
 20928                                  ;***
 20929                                  buf_snbuf	EQU	00010000B
 20930                                  
 20931                                  buf_isDATA	EQU	00001000B
 20932                                  buf_isDIR	EQU	00000100B
 20933                                  buf_isFAT	EQU	00000010B
 20934                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 20935                                  
 20936                                  buf_NetID	EQU	bufinsiz
 20937                                  
 20938                                  ; ----------------------------------------------------------------------
 20939                                  
 20940                                  ; ----------------------------------------------------------------------
 20941                                  ;**	DPB - Drive Parameter Block
 20942                                  
 20943                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 20944                                  
 20945                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 20946                                  ;	possibly inaccurate deductions from code study... - jgl
 20947                                  ;
 20948                                  ;	The DPB is DOS's main structure for describing block devices.
 20949                                  ;	It contains info about the "Drive" intermingled with info about
 20950                                  ;	the FAT file system which is presumably on the drive.  I don't know
 20951                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 20952                                  ;
 20953                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 20954                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 20955                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 20956                                  
 20957                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 20958                                  
 20959                                  ; 12/05/2019 - Retro DOS v4.0
 20960                                  
 20961                                  struc	DPB
 20962 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 20963 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 20964 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 20965 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 20966 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 20967 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 20968 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 20969 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 20970 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 20971 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 20972                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 20973 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 20974 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 20975 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 20976 00000017 ??                      .MEDIA:		resb 1		; Media byte
 20977 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 20978                                  				; check the first time this DPB is used
 20979 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 20980 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 20981 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 20982                                  .size:
 20983                                  endstruc
 20984                                  
 20985                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 20986                                  
 20987                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 20988                                  
 20989                                  ; ----------------------------------------------------------------------
 20990                                  ; 26/03/2018
 20991                                  
 20992                                  ; IOCTL SUB-FUNCTIONS
 20993                                  IOCTL_GET_DEVICE_INFO	EQU	0
 20994                                  IOCTL_SET_DEVICE_INFO	EQU	1
 20995                                  IOCTL_READ_HANDLE	EQU	2
 20996                                  IOCTL_WRITE_HANDLE	EQU	3
 20997                                  IOCTL_READ_DRIVE	EQU	4
 20998                                  IOCTL_WRITE_DRIVE	EQU	5
 20999                                  IOCTL_GET_INPUT_STATUS	EQU	6
 21000                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 21001                                  IOCTL_CHANGEABLE?	EQU	8
 21002                                  IOCTL_SHARING_RETRY	EQU	11
 21003                                  GENERIC_IOCTL_HANDLE	EQU	12
 21004                                  GENERIC_IOCTL		EQU	13
 21005                                  
 21006                                  ; GENERIC IOCTL SUB-FUNCTIONS
 21007                                  RAWIO			EQU	8
 21008                                  
 21009                                  ; RAWIO SUB-FUNCTIONS
 21010                                  GET_DEVICE_PARAMETERS	EQU	60H
 21011                                  SET_DEVICE_PARAMETERS	EQU	40H
 21012                                  READ_TRACK		EQU	61H
 21013                                  WRITE_TRACK		EQU	41H
 21014                                  VERIFY_TRACK		EQU	62H
 21015                                  FORMAT_TRACK		EQU	42H
 21016                                  
 21017                                  ; DEVICETYPE VALUES
 21018                                  MAX_SECTORS_IN_TRACK	EQU	63
 21019                                  DEV_5INCH		EQU	0
 21020                                  DEV_5INCH96TPI		EQU	1
 21021                                  DEV_3INCH720KB		EQU	2
 21022                                  DEV_8INCHSS		EQU	3
 21023                                  DEV_8INCHDS		EQU	4
 21024                                  DEV_HARDDISK		EQU	5
 21025                                  DEV_OTHER		EQU	7
 21026                                  ;DEV_3INCH1440KB	EQU	7
 21027                                  DEV_3INCH2880KB		EQU	9
 21028                                  ; Retro DOS v2.0 - 26/03/2018
 21029                                  ;;DEV_TAPE		EQU	6
 21030                                  ;;DEV_ERIMO		EQU	8
 21031                                  ;DEV_3INCH2880KB	EQU	9
 21032                                  DEV_3INCH1440KB		EQU	10
 21033                                  
 21034                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 21035                                  					; CURRENTLY SUPPORT.
 21036                                  MAX_DEV_TYPE		EQU	10
 21037                                  
 21038                                  struc A_SECTORTABLE
 21039 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 21040 00000002 ????                    .ST_SECTORSIZE:		resw	1
 21041                                  .size:
 21042                                  endstruc
 21043                                  
 21044                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 21045                                  
 21046                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 21047                                  ;
 21048                                  ;	The BPB contains information about the disk structure.  It dates
 21049                                  ;	back to the earliest FAT systems and so FAT information is
 21050                                  ;	intermingled with physical driver information.
 21051                                  ;
 21052                                  ;	A boot sector contains a BPB for its device; for other disks
 21053                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 21054                                  ;	information in the DPB.
 21055                                  ;
 21056                                  ;	The BDS structure contains a BPB within it.
 21057                                  
 21058                                  struc A_BPB
 21059 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 21060 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 21061 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 21062 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 21063 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 21064 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 21065 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 21066 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 21067 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 21068 0000000F ????                    .BPB_HEADS:		resw	1
 21069 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 21070 00000013 ????                    			resw	1
 21071 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 21072 00000017 ????                    			resw	1
 21073 00000019 ????????????            			resb	6	; NOTE:  many times these
 21074                                  ;					; 	 6 bytes are omitted
 21075                                  ;					;	 when BPB manipulations
 21076                                  ;					;	 are performed!
 21077                                  .size:
 21078                                  endstruc
 21079                                  
 21080                                  struc A_DEVICEPARAMETERS
 21081 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 21082 00000001 ??                      .DP_DEVICETYPE:		resb	1
 21083 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 21084 00000004 ????                    .DP_CYLINDERS:		resw	1
 21085 00000006 ??                      .DP_MEDIATYPE:		resb	1
 21086 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 21087 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 21088 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 21089                                  endstruc
 21090                                  
 21091                                  ; ----------------------------------------------------------------------
 21092                                  ; structure, equates for devmark for mem command.
 21093                                  
 21094                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 21095                                  
 21096                                  struc devmark
 21097 00000000 ??                       .id:	    resb 1
 21098 00000001 ????                     .seg:	    resw 1
 21099 00000003 ????                     .size:	    resw 1
 21100 00000005 ??????                   .dum:	    resb 3
 21101 00000008 ????????????????         .filename: resb 8
 21102                                  endstruc
 21103                                  
 21104                                  devmark_stk	equ	'S'
 21105                                  devmark_device	equ	'D'
 21106                                  devmark_ifs	equ	'I'
 21107                                  devmark_buf	equ	'B'
 21108                                  devmark_cds	equ	'L' ; lastdrive
 21109                                  devmark_files	equ	'F'
 21110                                  devmark_fcbs	equ	'X'
 21111                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 21112                                  devmark_ems_stub equ	'E'
 21113                                  
 21114                                  setbrkdone	equ	00000001b
 21115                                  for_devmark	equ	00000010b
 21116                                  not_for_devmark equ	11111101b
 21117                                  
 21118                                  ; ----------------------------------------------------------------------
 21119                                  ; Memory arena structure
 21120                                  
 21121                                  ; 24/03/2019 - Retro DOS v4.0 
 21122                                  ; (MSDOS 6.0, ARENA.INC)
 21123                                  
 21124                                  ;** Arena Header
 21125                                  
 21126                                  struc ARENA
 21127 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 21128 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 21129 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 21130 00000005 ??????                  .RESERVED	resb 3		; reserved
 21131 00000008 ????????????????        .NAME:		resb 8		; owner file name
 21132                                  endstruc
 21133                                  
 21134                                  ; 12/04/2019
 21135                                  
 21136                                  arena_owner_system	EQU 0	; free block indication
 21137                                  
 21138                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 21139                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 21140                                  
 21141                                  ; ----------------------------------------------------------------------
 21142                                  ; Process data block (otherwise known as program header)
 21143                                  
 21144                                  ; 23/03/2019 - Retro DOS v4.0
 21145                                  
 21146                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 21147                                  
 21148                                  FILPERPROC	EQU     20
 21149                                  
 21150                                  struc PDB	; Process_data_block
 21151 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 21152 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 21153 00000004 ??                                      resb 1
 21154 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 21155 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 21156 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 21157 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 21158 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 21159 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 21160 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 21161 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 21162 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 21163 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 21164 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 21165 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 21166 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 21167 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 21168 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 21169 00000042 <res Eh>                .PAD1:		resb 14		; 	
 21170 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 21171 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 21172 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 21173 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 21174 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 21175 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 21176                                  ;.size:
 21177                                  endstruc
 21178                                  
 21179                                  ; ----------------------------------------------------------------------
 21180                                  ; <system call definitions>
 21181                                  
 21182                                  ; 23/03/2019 - Retro DOS v4.0
 21183                                  
 21184                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 21185                                  
 21186                                  ABORT                           EQU 0   ;  0      0
 21187                                  STD_CON_INPUT                   EQU 1   ;  1      1
 21188                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 21189                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 21190                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 21191                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 21192                                  RAW_CON_IO                      EQU 6   ;  6      6
 21193                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 21194                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 21195                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 21196                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 21197                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 21198                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 21199                                  DISK_RESET                      EQU 13  ; 13      D
 21200                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 21201                                  FCB_OPEN                        EQU 15  ; 15      F
 21202                                  FCB_CLOSE                       EQU 16  ; 16     10
 21203                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 21204                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 21205                                  FCB_DELETE                      EQU 19  ; 19     13
 21206                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 21207                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 21208                                  FCB_CREATE                      EQU 22  ; 22     16
 21209                                  FCB_RENAME                      EQU 23  ; 23     17
 21210                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 21211                                  SET_DMA                         EQU 26  ; 26     1A
 21212                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 21213                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 21214                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 21215                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 21216                                  GET_FCB_POSITION                EQU 36  ; 36     24
 21217                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 21218                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 21219                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 21220                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 21221                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 21222                                  GET_DATE                        EQU 42  ; 42     2A
 21223                                  SET_DATE                        EQU 43  ; 43     2B
 21224                                  GET_TIME                        EQU 44  ; 44     2C
 21225                                  SET_TIME                        EQU 45  ; 45     2D
 21226                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 21227                                  ; Extended functionality group
 21228                                  GET_DMA                         EQU 47  ; 47     2F
 21229                                  GET_VERSION                     EQU 48  ; 48     30
 21230                                  KEEP_PROCESS                    EQU 49  ; 49     31
 21231                                  GET_DPB                         EQU 50  ; 50     32
 21232                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 21233                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 21234                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 21235                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 21236                                  CHAR_OPER                       EQU 55  ; 55     37
 21237                                  INTERNATIONAL                   EQU 56  ; 56     38
 21238                                  ;   Directory Group
 21239                                  MKDIR                           EQU 57  ; 57     39
 21240                                  RMDIR                           EQU 58  ; 58     3A
 21241                                  CHDIR                           EQU 59  ; 59     3B
 21242                                  ;   File Group
 21243                                  CREAT                           EQU 60  ; 60     3C
 21244                                  OPEN                            EQU 61  ; 61     3D
 21245                                  CLOSE                           EQU 62  ; 62     3E
 21246                                  READ                            EQU 63  ; 63     3F
 21247                                  WRITE                           EQU 64  ; 64     40
 21248                                  UNLINK                          EQU 65  ; 65     41
 21249                                  LSEEK                           EQU 66  ; 66     42
 21250                                  CHMOD                           EQU 67  ; 67     43
 21251                                  IOCTL                           EQU 68  ; 68     44
 21252                                  XDUP                            EQU 69  ; 69     45
 21253                                  XDUP2                           EQU 70  ; 70     46
 21254                                  CURRENT_DIR                     EQU 71  ; 71     47
 21255                                  ;    Memory Group
 21256                                  ALLOC                           EQU 72  ; 72     48
 21257                                  DEALLOC                         EQU 73  ; 73     49
 21258                                  SETBLOCK                        EQU 74  ; 74     4A
 21259                                  ;    Process Group
 21260                                  EXEC                            EQU 75  ; 75     4B
 21261                                  EXIT                            EQU 76  ; 76     4C
 21262                                  WAITPROCESS			EQU 77  ; 77     4D
 21263                                  FIND_FIRST                      EQU 78  ; 78     4E
 21264                                  ;   Special Group
 21265                                  FIND_NEXT                       EQU 79  ; 79     4F
 21266                                  ; SPECIAL SYSTEM GROUP
 21267                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 21268                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 21269                                  GET_IN_VARS                     EQU 82  ; 82     52
 21270                                  SETDPB                          EQU 83  ; 83     53
 21271                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 21272                                  DUP_PDB                         EQU 85  ; 85     55
 21273                                  RENAME                          EQU 86  ; 86     56
 21274                                  FILE_TIMES                      EQU 87  ; 87     57
 21275                                  ;
 21276                                  ALLOCOPER			EQU 88	; 88     58	
 21277                                  ; Network extention system calls
 21278                                  GetExtendedError		EQU 89	; 89	 59
 21279                                  CreateTempFile			EQU 90	; 90	 5A
 21280                                  CreateNewFile			EQU 91	; 91	 5B
 21281                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 21282                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 21283                                  					;	    CloseByName, CloseUser,
 21284                                  					;	    CloseUserProcess,
 21285                                  					;	    GetOpenFileList
 21286                                  UserOper			EQU 94	; 94	 5E Get and Set
 21287                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 21288                                  xNameTrans			EQU 96	; 96	 60
 21289                                  PathParse			EQU 97	; 97	 61
 21290                                  GetCurrentPSP			EQU 98	; 98	 62
 21291                                  Hongeul 			EQU 99	; 99	 63
 21292                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 21293                                  Set_Printer_Flag		EQU 100 ; 100	 64
 21294                                  GetExtCntry			EQU 101 ; 101	 65
 21295                                  GetSetCdPg			EQU 102 ; 102	 66
 21296                                  ExtHandle			EQU 103 ; 103	 67
 21297                                  Commit				EQU 104 ; 104	 68
 21298                                  GetSetMediaID			EQU 105 ; 105	 69
 21299                                  IFS_IOCTL			EQU 107 ; 107	 6B
 21300                                  ExtOpen 			EQU 108 ; 108	 6C
 21301                                  ;
 21302                                  ;ifdef ROMEXEC
 21303                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 21304                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 21305                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 21306                                  ;endif
 21307                                  ;
 21308                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 21309                                  OEM_C1				EQU 249 ; 249	 F9
 21310                                  OEM_C2				EQU 250 ; 250	 FA
 21311                                  OEM_C3				EQU 251 ; 251	 FB
 21312                                  OEM_C4				EQU 252 ; 252	 FC
 21313                                  OEM_C5				EQU 253 ; 253	 FD
 21314                                  OEM_C6				EQU 254 ; 254	 FE
 21315                                  OEM_C7				EQU 255 ; 255	 FF
 21316                                  
 21317                                  ; ----------------------------------------------------------------------
 21318                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 21319                                  ; ----------------------------------------------------------------------
 21320                                  
 21321                                  ;;	IF	STACKSW
 21322                                  
 21323                                  ;;
 21324                                  ;; Internal Stack Parameters
 21325                                  ;EntrySize		equ	8
 21326                                  ;
 21327                                  ;MinCount		equ	8
 21328                                  ;DefaultCount		equ	9
 21329                                  ;MaxCount		equ	64
 21330                                  ;
 21331                                  ;MinSize 		equ	32
 21332                                  ;DefaultSize		equ	128
 21333                                  ;MaxSize 		equ	512
 21334                                  
 21335                                  ;;	ENDIF
 21336                                  
 21337                                  ; ----------------------------------------------------------------------
 21338                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 21339                                  ; ----------------------------------------------------------------------
 21340                                  					  ;;Rev 3.30 Modification
 21341                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 21342                                  									  
 21343                                  ;*******************************					  
 21344                                  ;System Service call ( Int 15h )					  
 21345                                  ;*******************************					  
 21346                                  ;Function AH = 0C0h, Return system configuration			  
 21347                                  ;For PC and PCJR on return:						  
 21348                                  ;	(AH)	= 80h							  
 21349                                  ;	(CY)	= 1							  
 21350                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 21351                                  ;	(AH)	= 86h							  
 21352                                  ;	(CY)	= 1							  
 21353                                  ;For all others:							  
 21354                                  ;	(AH)	= 0							  
 21355                                  ;	(CY)	= 0							  
 21356                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 21357                                  ; System descriptor :							  
 21358                                  ;	DW	xxxx		length of descriptor in bytes,		  
 21359                                  ;				minimum length = 8			  
 21360                                  ;	DB	xx		model byte				  
 21361                                  ;				0FFh	= PC				  
 21362                                  ;				0FEh	= PC/XT, Portable		  
 21363                                  ;				0FDh	= PC/JR 			  
 21364                                  ;				0FCh	= PC/AT				  
 21365                                  ;				0F9h	= Convertable			  
 21366                                  ;				0F8h	= Model 80			  
 21367                                  ;				0E0 thru 0EFh = reserved		  
 21368                                  ;									  
 21369                                  ;	DB	xx		secondary model byte			  
 21370                                  ;				000h	= PC1				  
 21371                                  ;				000h	= PC/XT, Portable		  
 21372                                  ;				000h	= PC/JR 			  
 21373                                  ;				000h	= PC/AT 			  
 21374                                  ;				001h	= PC/AT Model 339		  
 21375                                  ;				003h	= PC/RT				  
 21376                                  ;				000h	= Convertable			  
 21377                                  ;									  
 21378                                  ;	DB	xx		bios revision level			  
 21379                                  ;				00 for first release, subsequent release  
 21380                                  ;				of code with same model byte and	  
 21381                                  ;				secondary model byte require revison level
 21382                                  ;				to increase by one.			  
 21383                                  ;									  
 21384                                  ;	DB	xx		feature information byte 1		  
 21385                                  ;				X0000000 = 1, bios use DMA channel 3	  
 21386                                  ;					 = 0, DMA channel 3 not used	  
 21387                                  ;									  
 21388                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 21389                                  ;					 = 0, 2nd Interrupt chip not present
 21390                                  ;									  
 21391                                  ;				00X00000 = 1, Real Time Clock present	  
 21392                                  ;					 = 0, Real Time Clock not present 
 21393                                  ;									  
 21394                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 21395                                  ;						called in keyboard interrupt
 21396                                  ;						(Int 09h).		  
 21397                                  ;					 = 0, Keyboard escape sequence not
 21398                                  ;						called. 		  
 21399                                  ;				0000XXXX reserved			  
 21400                                  ;									  
 21401                                  ;	DB	xx		feature information byte 2 - reserved	  
 21402                                  ;									  
 21403                                  ;	DB	xx		feature information byte 2 - reserved	  
 21404                                  ;									  
 21405                                  ;	DB	xx		feature information byte 2 - reserved	  
 21406                                  ;									  
 21407                                  ;	DB	xx		feature information byte 2 - reserved	  
 21408                                  ;									  
 21409                                  
 21410                                  ; 22/03/2019									  
 21411                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 21412 00000000 ????                    .bios_sd_leng:		resw 1				  
 21413 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 21414                                  .bios_sd_scnd_modelbyte: 
 21415 00000003 ??                      			resb 1					  
 21416 00000004 ??                      			resb 1					  
 21417 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 21418 00000006 ????????                			resb 4					  
 21419                                  endstruc					  
 21420                                  									  
 21421                                  ;FeatureByte1	bit map equates 					  
 21422                                  DMAchannel3		equ 10000000b					  
 21423                                  ScndIntController	equ 01000000b					  
 21424                                  RealTimeClock		equ 00100000b					  
 21425                                  KeyEscapeSeq		equ 00010000b					  
 21426                                  					;;End of Modification
 21427                                  
 21428                                  ; ----------------------------------------------------------------------
 21429                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 21430                                  ; ----------------------------------------------------------------------
 21431                                  ; 22/03/2019 - Retro DOS v4.0
 21432                                  
 21433                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 21434                                  
 21435                                  struc SysInitVars
 21436                                  ; MSDOS 3.3
 21437 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 21438 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 21439 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 21440 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 21441 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 21442 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 21443 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 21444 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 21445 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 21446 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 21447 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 21448 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 21449                                  ; MSDOS 6.0
 21450 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 21451 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 21452 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 21453 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 21454                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 21455 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 21456 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 21457 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 21458 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 21459 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 21460 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 21461 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 21462                                  .size:
 21463                                  endstruc
 21464                                  
 21465                                  ;This is added for more information exchage between DOS, BIOS.
 21466                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 21467                                  
 21468                                  ; 22/03/2019
 21469                                  struc SysInitVars_Ext
 21470 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 21471 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 21472                                  endstruc
 21473                                  
 21474                                  ; 09/06/2018
 21475                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 21476                                  SYSI_DPB    equ	0
 21477                                  SYSI_SFT    equ 4
 21478                                  SYSI_CLOCK  equ 8
 21479                                  SYSI_CON    equ 12
 21480                                  SYSI_MAXSEC equ 16
 21481                                  SYSI_BUF    equ 18 		
 21482                                  SYSI_CDS    equ 22
 21483                                  SYSI_FCB    equ 26
 21484                                  SYSI_KEEP   equ 30
 21485                                  SYSI_NUMIO  equ	32
 21486                                  SYSI_NCDS   equ	33
 21487                                  SYSI_DEV    equ 34
 21488                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 21489                                  SYSI_ATTR	  equ 38
 21490                                  SYSI_STRAT	  equ 40
 21491                                  SYSI_INTER	  equ 42
 21492                                  SYSI_NAME	  equ 44
 21493                                  SYSI_SPLICE	  equ 52
 21494                                  SYSI_IBMDOS_SIZE  equ 53
 21495                                  SYSI_IFS_DOSCALL@ equ 55
 21496                                  SYSI_IFS	  equ 59
 21497                                  SYSI_BUFFERS	  equ 63
 21498                                  SYSI_BOOT_DRIVE   equ 67
 21499                                  SYSI_DWMOVE	  equ 68
 21500                                  SYSI_EXT_MEM	  equ 69
 21501                                  
 21502                                  ;The SYSI_BUF of SysInitVars points to the following structure
 21503                                  
 21504                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 21505                                  
 21506                                  struc BUFFINF 	; BUFFINFO
 21507 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 21508 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 21509 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 21510 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 21511                                  
 21512 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 21513                                  				; are in HMA
 21514 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 21515                                  				;  used to read/write on disks
 21516 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 21517 00000015 ????                    .UU_EMS_NPA640:		resw 1
 21518 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 21519 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 21520 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 21521 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 21522 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 21523 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 21524 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 21525                                  .size:
 21526                                  endstruc
 21527                                  
 21528                                  ; ----------------------------------------------------------------------
 21529                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 21530                                  ; ----------------------------------------------------------------------
 21531                                  ; 22/03/2019 - Retro DOS v4.0
 21532                                  
 21533                                  ;**	CDS - Current Directory Structure
 21534                                  ;
 21535                                  ; CDS items are used bu the internal routines to store cluster numbers and
 21536                                  ; network identifiers for each logical name.  The ID field is used dually,
 21537                                  ; both as net ID and for a cluster number for local devices. In the case
 21538                                  ; of local devices, the cluster number will be -1 if there is a potential
 21539                                  ; of the disk being changed or if the path must be recracked.
 21540                                  ;
 21541                                  ;	Some pathnames have special preambles, such as
 21542                                  ;
 21543                                  ;		\\machine\sharename\...
 21544                                  ;	For these pathnames we can't allow ".." processing to back us
 21545                                  ;	up into the special front part of the name.  The CURDIR_END field
 21546                                  ;	holds the address of the seperator character which marks
 21547                                  ;	the split between the special preamble and the regular
 21548                                  ;	path list; ".." processing isn't allowed to back us up past
 21549                                  ;	(i.e., before) CURDIR_END
 21550                                  ;	For the root, it points at the leading /. For net
 21551                                  ;	assignments it points at the end (nul) of the initial assignment:
 21552                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 21553                                  ;	  ^		 ^		     ^
 21554                                  
 21555                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 21556                                  TEMPLEN 	EQU	DIRSTRLEN*2
 21557                                  
 21558                                  struc 		curdir_list
 21559                                  ; MSDOS 3.3
 21560 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 21561 00000043 ????                    .cdir_flags	resw	1		; various flags
 21562 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 21563 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 21564 0000004D ????                    .cdir_usr_word	resw	1
 21565 0000004F ????                    .cdir_end	resw	1		; end of assignment
 21566                                  ; MSDOS 6.0
 21567 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 21568 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 21569 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 21570                                  .size:
 21571                                  endstruc
 21572                                  
 21573                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 21574                                  						; ASM87 which doesn't allow
 21575                                  						; Size directive as a macro
 21576                                  						; argument
 21577                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 21578                                  
 21579                                  ;**	Flag values for CURDIR_FLAGS
 21580                                  
 21581                                  ;Flag word masks
 21582                                  curdir_isnet	EQU	1000000000000000B
 21583                                  curdir_isifs	EQU	1000000000000000B
 21584                                  curdir_inuse	EQU	0100000000000000B
 21585                                  curdir_splice	EQU	0010000000000000B
 21586                                  curdir_local	EQU	0001000000000000B
 21587                                  
 21588                                  ; ----------------------------------------------------------------------
 21589                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 21590                                  ; ----------------------------------------------------------------------
 21591                                  ; 25/03/2019 - Retro DOS v4.0
 21592                                  
 21593                                  ; system file table
 21594                                  
 21595                                  ;**	System File Table SuperStructure
 21596                                  ;
 21597                                  ;	The system file table entries are allocated in contiguous groups.
 21598                                  ;	There may be more than one such groups; the SF "superstructure"
 21599                                  ;	tracks the groups.
 21600                                  
 21601                                  struc	SF
 21602 00000000 ????????                .SFLink:	resd	1
 21603 00000004 ????                    .SFCount:	resw	1		; number of entries
 21604 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 21605                                  .size:
 21606                                  endstruc
 21607                                  
 21608                                  ;**	System file table entry
 21609                                  ;
 21610                                  ;	These are the structures which are at SFTABLE in the SF structure.
 21611                                  
 21612                                  struc	SF_ENTRY
 21613 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 21614                                  					;   if FCB then ref count
 21615 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 21616 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 21617 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 21618                                  					; Bit 15 = 1 if remote file
 21619                                  					;	 = 0 if local file or device
 21620                                  					; Bit 14 = 1 if date/time is not to be
 21621                                  					;   set from clock at CLOSE.  Set by
 21622                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 21623                                  					;   other reseters of the dirty bit
 21624                                  					;   (WRITE)
 21625                                  					; Bit 13 = Pipe bit (reserved)
 21626                                  					;
 21627                                  					; Bits 0-7 (old FCB_devid bits)
 21628                                  					; If remote file or local file, bit
 21629                                  					; 6=0 if dirty Device ID number, bits
 21630                                  					; 0-5 if local file.
 21631                                  					; bit 7=0 for local file, bit 7
 21632                                  					;      =1 for local I/O device
 21633                                  					; If local I/O device, bit 6=0 if EOF (input)
 21634                                  					;		Bit 5=1 if Raw mode
 21635                                  					;		Bit 0=1 if console input device
 21636                                  					;		Bit 1=1 if console output device
 21637                                  					;		Bit 2=1 if null device
 21638                                  					;		Bit 3=1 if clock device
 21639 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 21640                                  					; to device header if local device,
 21641                                  					; points to net device header if
 21642                                  					; remote
 21643 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 21644                                  ;.sf_lstclus:	resw	1 ; *	
 21645 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 21646 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 21647 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 21648 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 21649                                  ;
 21650                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 21651                                  ; ID
 21652                                  ;
 21653 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 21654 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 21655 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 21656                                  ;
 21657                                  ; End of 7 bytes of file-system specific info.
 21658                                  ;
 21659 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 21660                                  					; directory entry.  This is used by
 21661                                  					; close to detect file deleted and
 21662                                  					; disk changed errors.
 21663                                  ; SHARING INFO
 21664 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 21665 0000002D ????                    .sf_UID:	resw	1
 21666 0000002F ????                    .sf_PID:	resw	1
 21667 00000031 ????                    .sf_MFT:	resw	1
 21668 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 21669 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 21670                                  .size:
 21671                                  endstruc
 21672                                  
 21673                                  ; ----------------------------------------------------------------------
 21674                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 21675                                  ; ----------------------------------------------------------------------
 21676                                  ; 11/06/2018 - Retro DOS v3.0
 21677                                  
 21678                                  ;Equates for COUNTRY INFORMATION.
 21679                                  SetCountryInfo		EQU	1	;country info
 21680                                  SetUcase		EQU	2	;uppercase table
 21681                                  SetLcase		EQU	3	;lowercase table (Reserved)
 21682                                  SetUcaseFile		EQU	4	;uppercase file spec table
 21683                                  SetFileList		EQU	5	;valid file character list
 21684                                  SetCollate		EQU	6	;collating sequence
 21685                                  SetDBCS 		EQU	7	;double byte character set
 21686                                  SetALL			EQU	-1	;all the entries
 21687                                  
 21688                                  ;DOS country and code page information table structure.
 21689                                  ;Internally, IBMDOS gives a pointer to this table.
 21690                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 21691                                  ;this structure.
 21692                                  
 21693                                  struc country_cdpg_info ; DOS_country_cdpg_info
 21694 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 21695 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 21696 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 21697 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 21698 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 21699 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 21700                                  
 21701 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 21702 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 21703                                  
 21704 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 21705 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 21706                                  
 21707 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 21708 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 21709                                  
 21710 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 21711 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 21712 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 21713 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 21714 00000067 ????                    .ccDFormat:		resw	1	;date format
 21715 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 21716                                  					;5 byte of (currency symbol+0)
 21717 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 21718 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 21719 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 21720 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 21721 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 21722 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 21723 00000078 ??                      .ccTFormat:		resb	1	;time format
 21724 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 21725 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 21726 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 21727                                  .size:
 21728                                  endstruc
 21729                                  
 21730                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 21731                                  
 21732                                  ; ======================================================================
 21733                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 21734                                  ; ======================================================================
 21735                                  ; 21/03/2019 - Retro DOS v4.0
 21736                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 21737                                  
 21738                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 21739                                  ; 21/10/2022
 21740                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 21741                                  ; 22/10/2022
 21742                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 21743                                  ; 09/12/2022
 21744                                  DOSBIOCODESEG equ IOSYSCODESEG
 21745                                  
 21746                                  ; Note: These offset addresses must be chanqed when the code 
 21747                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 21748                                  
 21749                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 21750                                  
 21751                                  ; 09/12/2022
 21752                                  %if 0
 21753                                  
 21754                                  ; 13/05/2019
 21755                                  
 21756                                  ;IsWin386         equ 08CFh
 21757                                  ;V86_Crit_SetFocus equ 08D0h
 21758                                  ; 21/10/2022
 21759                                  IsWin386          equ 08D0h
 21760                                  V86_Crit_SetFocus equ 08D1h 
 21761                                  
 21762                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 21763                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 21764                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 21765                                  
 21766                                  ;SysinitPresent	  equ 08FCh
 21767                                  ; 21/10/2022
 21768                                  SysinitPresent	  equ 08FDh
 21769                                  
 21770                                  inHMA		  equ 000Dh
 21771                                  xms		  equ 000Eh
 21772                                  ;FreeHMAPtr	  equ 08F6h
 21773                                  ;multrk_flag	  equ 0533h
 21774                                  ;ec35_flag	  equ 0535h
 21775                                  ;EOT		  equ 012Eh
 21776                                  ; 21/10/2022
 21777                                  FreeHMAPtr	  equ 08F7h
 21778                                  multrk_flag	  equ 052Fh
 21779                                  ec35_flag	  equ 0531h
 21780                                  EOT		  equ 012Ch
 21781                                  
 21782                                  ;NextStack	  equ 08BFh
 21783                                  ;IT_StackLoc	  equ 08C5h
 21784                                  ;IT_StackSize	  equ 08C9h
 21785                                  ; 21/10/2022
 21786                                  NextStack	  equ 08C0h
 21787                                  IT_StackLoc	  equ 08C6h
 21788                                  IT_StackSize	  equ 08CAh
 21789                                  
 21790                                  ;MoveDOSIntoHMA	  equ 08F8h
 21791                                  ; 21/10/2022
 21792                                  MoveDOSIntoHMA	  equ 08F9h
 21793                                  
 21794                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 21795                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 21796                                  ; 21/10/2022
 21797                                  INT19SEM equ 0640h ; (iosys5.txt)
 21798                                  I19_LST  equ 0641h ; (iosys5.txt)
 21799                                  
 21800                                  %endif
 21801                                  
 21802                                  ; 09/12/2022
 21803                                  seg_reinit equ _seg_reinit
 21804                                  ec35_flag  equ ec35flag		
 21805                                  INT19SEM   equ int19sem
 21806                                  I19_LST    equ i19_lst
 21807                                  
 21808                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 21809                                  INT19OLD08 equ I19_LST+6
 21810                                  INT19OLD09 equ I19_LST+11
 21811                                  INT19OLD0A equ I19_LST+16
 21812                                  INT19OLD0B equ I19_LST+21
 21813                                  INT19OLD0C equ I19_LST+26
 21814                                  INT19OLD0D equ I19_LST+31
 21815                                  INT19OLD0E equ I19_LST+36
 21816                                  INT19OLD70 equ I19_LST+41
 21817                                  INT19OLD72 equ I19_LST+46
 21818                                  INT19OLD73 equ I19_LST+51
 21819                                  INT19OLD74 equ I19_LST+56
 21820                                  INT19OLD76 equ I19_LST+61
 21821                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 21822                                  
 21823                                  ; 09/12/2022
 21824                                  %if 0
 21825                                  
 21826                                  ;keyrd_func	equ 04E9h
 21827                                  ;keysts_func	equ 04EAh
 21828                                  ;t_switch	equ 04F6h
 21829                                  ; 21/10/2022
 21830                                  keyrd_func	equ 04E5h
 21831                                  keysts_func	equ 04E6h
 21832                                  t_switch	equ 04F2h
 21833                                  
 21834                                  ; 22/10/2022
 21835                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 21836                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 21837                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 21838                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 21839                                  
 21840                                  %endif
 21841                                  
 21842                                  ; 09/12/2022
 21843                                  BCODESTART	equ BIOSDATAWORD
 21844                                  RE_INIT		equ re_init
 21845                                  
 21846                                  ; ----------------------------------------------------------------------
 21847                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 21848                                  ; ----------------------------------------------------------------------
 21849                                  ; 15/04/2019 - Retro DOS v4.0
 21850                                  
 21851                                  CONFIG_BEGIN        equ  '['
 21852                                  CONFIG_BREAK        equ  'C'
 21853                                  CONFIG_BUFFERS      equ  'B'
 21854                                  CONFIG_COMMENT      equ  'Y'
 21855                                  CONFIG_COUNTRY      equ  'Q'
 21856                                  CONFIG_DEVICE       equ  'D'
 21857                                  CONFIG_DEVICEHIGH   equ  'U'
 21858                                  CONFIG_DOS          equ  'H'
 21859                                  CONFIG_DRIVPARM     equ  'P'
 21860                                  CONFIG_FCBS         equ  'X'
 21861                                  CONFIG_FILES        equ  'F'
 21862                                  CONFIG_INCLUDE      equ  'J'
 21863                                  CONFIG_INSTALL      equ  'I'
 21864                                  CONFIG_INSTALLHIGH  equ  'W'
 21865                                  CONFIG_LASTDRIVE    equ  'L'
 21866                                  CONFIG_MENUCOLOR    equ  'R'
 21867                                  CONFIG_MENUDEFAULT  equ  'A'
 21868                                  CONFIG_MENUITEM     equ  'E'
 21869                                  CONFIG_MULTITRACK   equ  'M'
 21870                                  CONFIG_NUMLOCK      equ  'N'
 21871                                  CONFIG_REM          equ  '0'
 21872                                  CONFIG_SEMICOLON    equ  ';'
 21873                                  CONFIG_SET          equ  'V'
 21874                                  CONFIG_SHELL        equ  'S'
 21875                                  CONFIG_STACKS       equ  'K'
 21876                                  CONFIG_SUBMENU      equ  'O'
 21877                                  CONFIG_SWITCHES     equ  '1'
 21878                                  
 21879                                  CONFIG_UNKNOWN      equ  'Z'
 21880                                  
 21881                                  CONFIG_OPTION_QUERY equ 80h
 21882                                  
 21883                                  ; ----------------------------------------------------------------------
 21884                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 21885                                  ; ----------------------------------------------------------------------
 21886                                  ; 21/03/2019 - Retro DOS v4.0
 21887                                  
 21888                                  true	equ	0FFFFh
 21889                                  false	equ	0
 21890                                  cr	equ	13
 21891                                  lf	equ	10
 21892                                  tab	equ	9
 21893                                  
 21894                                  multMULT	   equ	4Ah
 21895                                  multMULTGETHMAPTR  equ	1
 21896                                  multMULTALLOCHMA   equ	2
 21897                                  
 21898                                  ;NOEXEC    equ	FALSE
 21899                                  
 21900                                  stacksw    equ	true	;include switchable hardware stacks
 21901                                  mycds_size equ	88	;size of curdir_list. if it is not
 21902                                  			;the same, then will generate compile error.
 21903                                  
 21904                                  entrysize   equ     8
 21905                                  
 21906                                  mincount    equ     8
 21907                                  defaultcount equ    9
 21908                                  maxcount    equ     64
 21909                                  
 21910                                  minsize     equ     32
 21911                                  defaultsize equ     128
 21912                                  maxsize     equ     512
 21913                                  
 21914                                  ;%define allocbyte  byte [es:bp+0]
 21915                                  ;%define intlevel   byte [es:bp+1]
 21916                                  ;%define savedsp    word [es:bp+2]
 21917                                  ;%define savedss    word [es:bp+4]
 21918                                  ;%define newsp	    word [es:bp+6]
 21919                                  
 21920                                  allocbyte   equ     0
 21921                                  intlevel    equ     1
 21922                                  savedsp     equ     2
 21923                                  savedss     equ     4
 21924                                  newsp       equ     6
 21925                                  
 21926                                  free	    equ     0
 21927                                  allocated   equ     1
 21928                                  overflowed  equ     2
 21929                                  clobbered   equ     3
 21930                                  
 21931                                  ;---------------------------------------
 21932                                  ; external variable defined in ibmbio module for multi-track
 21933                                  
 21934                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 21935                                  			  ; it on after handling config.sys file as a
 21936                                  			  ; default value,if multrk_flag = multrk_off1.
 21937                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 21938                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 21939                                  
 21940                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 21941                                  
 21942                                  SYSINIT$:
 21943                                  	;IF	STACKSW 
 21944                                  	; include MSSTACK.INC	;Main stack program and data definitions
 21945                                  	; include STKMES.INC	;Fatal stack error message
 21946                                  	;   public Endstackcode
 21947                                  ;Endstackcode	label byte
 21948                                  	;ENDIF
 21949                                  
 21950                                  ; 05/07/2018
 21951                                  ; ----------------------------------------------------------------------
 21952                                  ; 04/06/2018 - Retro DOS v3.0
 21953                                  
 21954                                  ; ----------------------------------------------------------------------
 21955                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 21956                                  ; ----------------------------------------------------------------------
 21957                                  
 21958                                  ;	MSStack.inc
 21959                                  ;
 21960                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 21961                                  ;	should follow the standard Interrupt Sharing Scheme which has
 21962                                  ;	a standard header structure.
 21963                                  ;	Fyi, the following shows the relations between
 21964                                  ;	the interrupt vector and interrupt level.
 21965                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 21966                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 21967                                  ;	MSSTACK module modifies the following interrupt vectors
 21968                                  ;	to meet the standard Interrupt Sharing standard;
 21969                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 21970                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 21971                                  ;	should be initialized to indicat whether this interrupt handler is
 21972                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 21973                                  ;	program header is initialized in STKINIT.INC module.
 21974                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 21975                                  ;
 21976                                  
 21977                                  ;  User specifies the number of stack elements - default = 9
 21978                                  ;						 minimum = 8
 21979                                  ;						 maximum = 64
 21980                                  ;
 21981                                  ;  Intercepts Asynchronous Hardware Interrupts only
 21982                                  ;
 21983                                  ;  Picks a stack from pool of stacks and switches to it
 21984                                  ;
 21985                                  ;  Calls the previously saved interrupt vector after pushing flags
 21986                                  ;
 21987                                  ;  On return, returns the stack to the stack pool
 21988                                  ;
 21989                                  
 21990                                  ; This is a modification of STACKS:
 21991                                  ; 1. To fix a bug which was causing the program to take up too much space.
 21992                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 21993                                  ;    . Clobbers the stack that got too big instead of innocent stack
 21994                                  ;    . Allows system to work if the only stack that got too big was the most
 21995                                  ;      deeply nested one
 21996                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 21997                                  ; 4. Does not intercept any interrupts on a PCjr.
 21998                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 21999                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 22000                                  
 22001                                  		;EVEN
 22002                                  ;align 2
 22003                                  		; 21/10/2022
 22004                                  
 22005 00000000 0000                    		dw	0	; spare field but leave these in order
 22006 00000002 0000                    stackcount:	dw	0
 22007 00000004 0000                    stackat: 	dw	0
 22008 00000006 0000                    stacksize:	dw	0
 22009 00000008 0000                    stacks:		dw	0
 22010 0000000A 0000                    		dw	0
 22011                                  
 22012 0000000C [0800]                  firstentry:	dw	stacks
 22013 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 22014 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 22015                                  
 22016                                  ;***********************************************************************
 22017                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 22018                                  
 22019                                  ; ----------------------------------------------------------------------
 22020                                  
 22021 00000012 00000000                old02:	dd	0
 22022                                  
 22023                                  int02:
 22024                                  
 22025                                  ; *********************************************************************
 22026                                  ;
 22027                                  ; this is special support for the pc convertible / nmi handler
 22028                                  ;
 22029                                  ;	on the pc convertible, there is a situation where an nmi can be 
 22030                                  ;	caused by using the "out" instructions to certain ports. when this
 22031                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 22032                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 22033                                  ;	includes other type of interrupts (hardware and software), and
 22034                                  ;	also includes other type of nmi's. when any nmi has occured,
 22035                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 22036                                  ;	the software takes specific steps to allow further interrupting.
 22037                                  ;
 22038                                  ;	for pc convertible, the situation where the nmi is generated by the
 22039                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 22040                                  ;	otherwords, it is actually a "restartable exception". in this
 22041                                  ;	case, the software handler must be able to get to the stack in
 22042                                  ;	order to figure out what instruction caused the problem, where
 22043                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 22044                                  ;	we will not switch stacks in this situation. this situation is
 22045                                  ;	detected by interrogating port 62h, and checking for a bit value
 22046                                  ;	of 80h. if set, *****do not switch stacks*****.
 22047                                  ;
 22048                                  ; *********************************************************************
 22049                                  
 22050 00000016 50                      	push	ax
 22051 00000017 06                      	push	es
 22052 00000018 B800F0                  	mov	ax,0F000h
 22053 0000001B 8EC0                    	mov	es,ax
 22054                                  	; 02/11/2022
 22055 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 22056 00000023 07                      	pop	es
 22057 00000024 750C                    	jne	short normal02
 22058                                  
 22059 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 22060                                  				; 0-3: values of DIP switches
 22061                                  				; 5: 1=Timer 2 channel out
 22062                                  				; 6: 1=I/O channel check
 22063                                  				; 7: 1=RAM parity check error occurred.
 22064 00000028 A880                    	test	al,80h
 22065 0000002A 7406                    	jz	short normal02
 22066                                  special02:
 22067 0000002C 58                      	pop	ax
 22068 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 22069                                  normal02:
 22070 00000032 58                      	pop	ax
 22071 00000033 E81101                  	call	do_int_stacks
 22072 00000036 [1200]                  	dw	old02
 22073                                  
 22074                                  ; ----------------------------------------------------------------------
 22075                                  
 22076 00000038 00000000                old08:	dd	0
 22077                                  
 22078                                  int08:
 22079 0000003C E80801                  	call	do_int_stacks
 22080 0000003F [3800]                  	dw	old08
 22081                                  
 22082                                  ; ----------------------------------------------------------------------
 22083                                  
 22084 00000041 00000000                old09:	dd	0
 22085                                  
 22086                                  int09:
 22087                                  
 22088                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 22089                                  ; as its first instruction for compatibility reasons
 22090                                  
 22091 00000045 EB02                    	jmp	short keyboard_lbl
 22092 00000047 90                      	nop
 22093 00000048 00                      	db	0
 22094                                  
 22095                                  keyboard_lbl:
 22096 00000049 E8FB00                  	call	do_int_stacks
 22097 0000004C [4100]                  	dw	old09
 22098                                  
 22099                                  ; ----------------------------------------------------------------------
 22100                                  
 22101 0000004E 00000000                old70:	dd	0
 22102                                  
 22103                                  int70:
 22104 00000052 E8F200                  	call	do_int_stacks
 22105 00000055 [4E00]                  	dw	old70
 22106                                  
 22107                                  ; ----------------------------------------------------------------------
 22108                                  
 22109                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 22110                                  ;public	int&a
 22111                                  ;public	old&a
 22112                                  ;public	firstflag&a
 22113                                  ;int&a	proc	far
 22114                                  ;	jmp	short entry_int&a&_stk
 22115                                  ;old&a	dd	  0		;forward pointer
 22116                                  ;	dw	  424bh 	;compatible signature for int. sharing
 22117                                  ;firstflag&a db   0		;the firstly hooked.
 22118                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 22119                                  ;	db	7 dup (0)	;reserved for future.
 22120                                  ;entry_int&a&_stk:
 22121                                  ;	call	do_int_stacks
 22122                                  ;	dw	old&a
 22123                                  ;intret_&a:
 22124                                  ;	iret
 22125                                  ;int&a	endp
 22126                                  ;	endm
 22127                                  
 22128                                  ; ----------------------------------------------------------------------
 22129                                  
 22130                                  int0A:
 22131 00000057 EB10                    	jmp	short entry_int0A_stk
 22132 00000059 00000000                old0A:	dd	0	
 22133 0000005D 4B42                    	dw	424Bh
 22134                                  firstflag0A:
 22135 0000005F 00                      	db	0
 22136 00000060 EB0C                    	jmp	short intret_0A
 22137 00000062 00<rep 7h>              	times	7 db 0
 22138                                  
 22139                                  entry_int0A_stk:
 22140 00000069 E8DB00                  	call	do_int_stacks
 22141 0000006C [5900]                  	dw	old0A
 22142                                  intret_0A:
 22143 0000006E CF                      	iret
 22144                                  
 22145                                  ; ----------------------------------------------------------------------
 22146                                  
 22147                                  int0B:
 22148 0000006F EB10                    	jmp	short entry_int0B_stk
 22149 00000071 00000000                old0B:	dd	0	
 22150 00000075 4B42                    	dw	424Bh
 22151                                  firstflag0B:
 22152 00000077 00                      	db	0
 22153 00000078 EB0C                    	jmp	short intret_0B
 22154 0000007A 00<rep 7h>              	times	7 db 0
 22155                                  
 22156                                  entry_int0B_stk:
 22157 00000081 E8C300                  	call	do_int_stacks
 22158 00000084 [7100]                  	dw	old0B
 22159                                  intret_0B:
 22160 00000086 CF                      	iret
 22161                                  
 22162                                  ; ----------------------------------------------------------------------
 22163                                  
 22164                                  int0C:
 22165 00000087 EB10                    	jmp	short entry_int0C_stk
 22166 00000089 00000000                old0C:	dd	0	
 22167 0000008D 4B42                    	dw	424Bh
 22168                                  firstflag0C:
 22169 0000008F 00                      	db	0
 22170 00000090 EB0C                    	jmp	short intret_0C
 22171 00000092 00<rep 7h>              	times	7 db 0
 22172                                  
 22173                                  entry_int0C_stk:
 22174 00000099 E8AB00                  	call	do_int_stacks
 22175 0000009C [8900]                  	dw	old0C
 22176                                  intret_0C:
 22177 0000009E CF                      	iret
 22178                                  
 22179                                  ; ----------------------------------------------------------------------
 22180                                  
 22181                                  int0D:
 22182 0000009F EB10                    	jmp	short entry_int0D_stk
 22183 000000A1 00000000                old0D:	dd	0	
 22184 000000A5 4B42                    	dw	424Bh
 22185                                  firstflag0D:
 22186 000000A7 00                      	db	0
 22187 000000A8 EB0C                    	jmp	short intret_0D
 22188 000000AA 00<rep 7h>              	times	7 db 0
 22189                                  
 22190                                  entry_int0D_stk:
 22191 000000B1 E89300                  	call	do_int_stacks
 22192 000000B4 [A100]                  	dw	old0D
 22193                                  intret_0D:
 22194 000000B6 CF                      	iret
 22195                                  
 22196                                  ; ----------------------------------------------------------------------
 22197                                  
 22198                                  int0E:
 22199 000000B7 EB10                    	jmp	short entry_int0E_stk
 22200 000000B9 00000000                old0E:	dd	0	
 22201 000000BD 4B42                    	dw	424Bh
 22202                                  firstflag0E:
 22203 000000BF 00                      	db	0
 22204 000000C0 EB0C                    	jmp	short intret_0E
 22205 000000C2 00<rep 7h>              	times	7 db 0
 22206                                  
 22207                                  entry_int0E_stk:
 22208 000000C9 E87B00                  	call	do_int_stacks
 22209 000000CC [B900]                  	dw	old0E
 22210                                  intret_0E:
 22211 000000CE CF                      	iret
 22212                                  
 22213                                  ; ----------------------------------------------------------------------
 22214                                  
 22215                                  int72:
 22216 000000CF EB10                    	jmp	short entry_int72_stk
 22217 000000D1 00000000                old72:	dd	0	
 22218 000000D5 4B42                    	dw	424Bh
 22219                                  firstflag72:
 22220 000000D7 00                      	db	0
 22221 000000D8 EB0C                    	jmp	short intret_72
 22222 000000DA 00<rep 7h>              	times	7 db 0
 22223                                  
 22224                                  entry_int72_stk:
 22225 000000E1 E86300                  	call	do_int_stacks
 22226 000000E4 [D100]                  	dw	old72
 22227                                  intret_72:
 22228 000000E6 CF                      	iret
 22229                                  
 22230                                  ; ----------------------------------------------------------------------
 22231                                  
 22232                                  int73:
 22233 000000E7 EB10                    	jmp	short entry_int73_stk
 22234 000000E9 00000000                old73:	dd	0	
 22235 000000ED 4B42                    	dw	424Bh
 22236                                  firstflag73:
 22237 000000EF 00                      	db	0
 22238 000000F0 EB0C                    	jmp	short intret_73
 22239 000000F2 00<rep 7h>              	times	7 db 0
 22240                                  
 22241                                  entry_int73_stk:
 22242 000000F9 E84B00                  	call	do_int_stacks
 22243 000000FC [E900]                  	dw	old73
 22244                                  intret_73:
 22245 000000FE CF                      	iret
 22246                                  
 22247                                  ; ----------------------------------------------------------------------
 22248                                  
 22249                                  int74:
 22250 000000FF EB10                    	jmp	short entry_int74_stk
 22251 00000101 00000000                old74:	dd	0	
 22252 00000105 4B42                    	dw	424Bh
 22253                                  firstflag74:
 22254 00000107 00                      	db	0
 22255 00000108 EB0C                    	jmp	short intret_74
 22256 0000010A 00<rep 7h>              	times	7 db 0
 22257                                  
 22258                                  entry_int74_stk:
 22259 00000111 E83300                  	call	do_int_stacks
 22260 00000114 [0101]                  	dw	old74
 22261                                  intret_74:
 22262 00000116 CF                      	iret
 22263                                  
 22264                                  ; ----------------------------------------------------------------------
 22265                                  
 22266                                  int76:
 22267 00000117 EB10                    	jmp	short entry_int76_stk
 22268 00000119 00000000                old76:	dd	0	
 22269 0000011D 4B42                    	dw	424Bh
 22270                                  firstflag76:
 22271 0000011F 00                      	db	0
 22272 00000120 EB0C                    	jmp	short intret_76
 22273 00000122 00<rep 7h>              	times	7 db 0
 22274                                  
 22275                                  entry_int76_stk:
 22276 00000129 E81B00                  	call	do_int_stacks
 22277 0000012C [1901]                  	dw	old76
 22278                                  intret_76:
 22279 0000012E CF                      	iret
 22280                                  
 22281                                  ; ----------------------------------------------------------------------
 22282                                  
 22283                                  int77:
 22284 0000012F EB10                    	jmp	short entry_int77_stk
 22285 00000131 00000000                old77:	dd	0	
 22286 00000135 4B42                    	dw	424Bh
 22287                                  firstflag77:
 22288 00000137 00                      	db	0
 22289 00000138 EB0C                    	jmp	short intret_77
 22290 0000013A 00<rep 7h>              	times	7 db 0
 22291                                  
 22292                                  entry_int77_stk:
 22293 00000141 E80300                  	call	do_int_stacks
 22294 00000144 [3101]                  	dw	old77
 22295                                  intret_77:
 22296 00000146 CF                      	iret
 22297                                  
 22298                                  ; ----------------------------------------------------------------------
 22299                                  
 22300                                  ;********************************************************************
 22301                                  ;common routines
 22302                                  ;********************************************************************
 22303                                  
 22304                                  ; do interrupt stack switching. the fake return address holds
 22305                                  ; a pointer to the far-pointer of the actual interrupt
 22306                                  ; service routine
 22307                                  
 22308                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 22309                                  ; 21/03/2019 - Retro DOS v4.0
 22310                                  
 22311                                  ;allocbyte   equ 0
 22312                                  ;intlevel    equ 1
 22313                                  ;savedsp     equ 2
 22314                                  ;savedss     equ 4
 22315                                  ;newsp       equ 6
 22316                                  
 22317                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 SYSINIT)
 22318                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:0147h)
 22319                                  
 22320                                  do_int_stacks:
 22321 00000147 50                      	push	ax
 22322 00000148 55                      	push	bp
 22323 00000149 06                      	push	es
 22324 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 22325 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 22326 00000154 B001                    	mov	al,allocated ; 1
 22327                                  	; 21/10/2022
 22328                                  	;xchg	[es:bp+allocbyte],al 
 22329                                  	; 11/12/2022
 22330 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 22331 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 22332 0000015C 7551                    	jne	short notfree02
 22333                                  
 22334 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 22335                                  
 22336                                  found02:
 22337 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 22338 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 22339                                  
 22340 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 22341                                  
 22342 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 22343                                  	; 21/10/2022
 22344                                  	;mov	bp,[es:bp+6]
 22345                                  	; 11/12/2022
 22346                                  	;cmp	[es:bp+0],ax	
 22347 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 22348 00000176 7544                    	jne	short foundbad02
 22349                                  
 22350                                  	; 02/07/2023 (MSDOS 6.21 SYSINIT code)
 22351 00000178 8CC0                    	mov	ax,es			; point ss,sp to the new stack
 22352 0000017A 8EC5                    	mov	es,bp
 22353 0000017C 89E5                    	mov	bp,sp
 22354 0000017E 8B6E06                  	mov	bp,[bp+6]
 22355 00000181 8ED0                    	mov	ss,ax
 22356 00000183 8CC4                    	mov	sp,es
 22357 00000185 8EC0                    	mov	es,ax
 22358 00000187 2E8B6E00                	mov	bp,[cs:bp]
 22359                                  
 22360                                  	; 21/10/2022 (MSDOS 5.0 SYSINIT code)
 22361                                  	;push    bp
 22362                                  	;mov     bp,sp
 22363                                  	;mov     ax,[bp+8]
 22364                                  	;pop     bp
 22365                                  	;push    es
 22366                                  	;pop     ss
 22367                                  	;mov     sp,bp
 22368                                  	;mov     bp,ax
 22369                                  	; 11/12/2022
 22370                                  	;;mov	bp,[cs:bp+0]	
 22371                                  	;mov	bp,[cs:bp]	
 22372                                  
 22373 0000018B 9C                      	pushf				; go execute the real interrupt handler
 22374                                  	; 11/12/2022
 22375 0000018C 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 22376                                  	; 21/10/2022
 22377                                  	;call	far [cs:bp+0]
 22378                                  
 22379 00000190 89E5                    	mov	bp,sp			; retrieve the table offset for us
 22380                                  	; 11/12/2022
 22381 00000192 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 22382                                  	; 21/10/2022
 22383                                  	;mov	bp,[es:bp+0]
 22384 00000196 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 22385 0000019A 268B6602                	mov	sp,[es:bp+savedsp]
 22386                                  
 22387                                  	; 11/12/2022
 22388                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 22389                                  	; 21/10/2022
 22390 0000019E 26C6460000              	mov	byte [es:bp],free ; 0
 22391 000001A3 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 22392                                  
 22393 000001A8 07                      	pop	es
 22394 000001A9 5D                      	pop	bp			; saved on entry
 22395 000001AA 58                      	pop	ax			; saved on entry
 22396 000001AB 83C402                  	add	sp,2
 22397 000001AE CF                      	iret				; done with this interrupt
 22398                                  
 22399                                  notfree02:
 22400 000001AF 3C01                    	cmp	al,allocated		; error flag
 22401 000001B1 7404                    	je	short findnext02	;  no, continue
 22402                                  	; 11/12/2022
 22403                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 22404                                  	; 21/10/2022
 22405 000001B3 26864600                	xchg	[es:bp],al
 22406                                  
 22407                                  findnext02:
 22408 000001B7 E81200                  	call	longpath
 22409 000001BA EBA8                    	jmp	short found02
 22410                                  
 22411                                  foundbad02:
 22412 000001BC 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 22413 000001C1 72F4                    	jc	short findnext02
 22414 000001C3 89C5                    	mov	bp,ax			; flag this entry
 22415                                  	; 11/12/2022
 22416                                  	;mov	byte [es:bp+allocbyte],clobbered
 22417                                  	; 21/10/2022
 22418 000001C5 26C6460003              	mov	byte [es:bp],clobbered ; 3
 22419 000001CA EBEB                    	jmp	short findnext02	; keep looking
 22420                                  
 22421                                  ; ----------------------------------------------------------------------
 22422                                  
 22423                                  ; Common routines
 22424                                  
 22425                                  longpath:
 22426                                  	; 21/03/2019
 22427 000001CC 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 22428                                  lploopp:
 22429                                  	; 11/12/2022
 22430                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 22431                                  	; 21/10/2022
 22432 000001D1 26807E0000              	cmp	byte [es:bp],free
 22433 000001D6 7512                    	jne	short inuse		;  no, try next one
 22434                                  
 22435 000001D8 B001                    	mov	al,allocated
 22436                                  	; 11/12/2022
 22437                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 22438                                  	; 21/10/2022
 22439 000001DA 26864600                	xchg	[es:bp],al
 22440 000001DE 3C00                    	cmp	al,free 		; is it still free?
 22441 000001E0 7414                    	je	short found		;  yes, go use it
 22442                                  
 22443 000001E2 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 22444 000001E4 7404                    	je	short inuse		;  no, check the next one
 22445                                  
 22446                                  	; 11/12/2022
 22447                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 22448                                  	; 21/10/2022
 22449 000001E6 26884600                	mov	[es:bp],al
 22450                                  inuse:
 22451 000001EA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 22452 000001EF 7406                    	je	short fatal
 22453 000001F1 83ED08                  	sub	bp,entrysize
 22454 000001F4 EBDB                    	jmp	short lploopp
 22455                                  found:
 22456 000001F6 C3                      	retn
 22457                                  fatal:
 22458 000001F7 1E                      	push	ds
 22459 000001F8 B800F0                  	mov	ax,0F000h		;look at the model byte
 22460 000001FB 8ED8                    	mov	ds,ax
 22461 000001FD 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 22462 00000202 1F                      	pop	ds
 22463 00000203 7504                    	jne	short skip_nmis
 22464                                  
 22465 00000205 B007                    	mov	al,07h			; disable pc convertible nmis
 22466 00000207 E672                    	out	72h,al
 22467                                  
 22468                                  skip_nmis:
 22469 00000209 FA                      	cli				; disable and mask
 22470 0000020A B0FF                    	mov	al,0FFh			;   all other ints
 22471 0000020C E621                    	out	021h,al
 22472 0000020E E6A1                    	out	0A1h,al
 22473                                  
 22474 00000210 8CCE                    	mov	si,cs
 22475 00000212 8EDE                    	mov	ds,si
 22476 00000214 BE[3B02]                	mov	si,fatal_msg
 22477                                  ;SR;
 22478                                  ;   We set all foci to this VM to issue the stack failure message
 22479                                  ;
 22480 00000217 50                      	push	ax
 22481 00000218 1E                      	push	ds
 22482                                  	;;mov	ax,Bios_Data ; 0070h
 22483                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 22484                                  	; 21/10/2022
 22485 00000219 B87000                  	mov	ax,DOSBIODATASEG
 22486 0000021C 8ED8                    	mov	ds,ax
 22487                                  
 22488                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 22489 0000021E F606[1208]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 22490 00000223 1F                      	pop	ds
 22491 00000224 58                      	pop	ax
 22492 00000225 7405                    	jz	short fatal_loop	; win386 not present, continue
 22493                                  
 22494                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 22495                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 22496                                  	; 21/10/2022
 22497 00000227 9A[1308]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 22498                                  ;
 22499                                  ;SR; We do not bother about the returned status of this call. 
 22500                                  ;
 22501                                  fatal_loop:
 22502 0000022C AC                      	lodsb
 22503 0000022D 3C24                    	cmp	al,'$'
 22504 0000022F 7408                    	je	short fatal_done
 22505                                  
 22506 00000231 B307                    	mov	bl,7
 22507 00000233 B40E                    	mov	ah,14
 22508 00000235 CD10                    	int	10h			; whoops, this enables ints
 22509 00000237 EBF3                    	jmp	short fatal_loop
 22510                                  
 22511                                  fatal_done:
 22512 00000239 EBFE                    	jmp	short fatal_done
 22513                                  
 22514                                  
 22515                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 22516                                  ; ----------------------------------------------------------------------
 22517                                  ;	include msbio.cl5		; fatal stack error message
 22518                                  
 22519                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 22520                                  
 22521                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 22522                                  ; ----------------------------------------------------------------------
 22523                                  ; 04/06/2018 - Retro DOS v3.0
 22524                                  
 22525                                  fatal_msg:
 22526 0000023B 0D0A                    	db	0Dh,0Ah
 22527 0000023D 070D0A                  	db	7,0Dh,0Ah
 22528 00000240 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 22528 00000249 737461636B206F7665-
 22528 00000252 72666C6F770D0A     
 22529 00000259 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 22529 00000262 6C7465640D0A24     
 22530                                  
 22531                                  endstackcode:
 22532                                  
 22533                                  ; ----------------------------------------------------------------------
 22534                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 22535                                  ; ----------------------------------------------------------------------
 22536                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 22537                                  
 22538                                  ; 22/03/2019 - Retro DOS v4.0
 22539                                  
 22540                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 22541                                  
 22542                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 22543                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 22544                                  
 22545                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 22546                                  ; ----------------------------------------------------------------------
 22547                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 22548                                  
 22549                                  SYSINIT:	
 22550 00000269 E9A001                          JMP	GOINIT
 22551                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 22552                                  
 22553                                  ; ----------------------------------------------------------------------
 22554                                  
 22555                                  struc DDHighInfo
 22556 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 22557 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 22558 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 22559                                  endstruc
 22560                                  
 22561                                  ; 22/03/2019 - Retro DOS v4.0
 22562                                  
 22563 0000026C 00                      runhigh: db	0
 22564                                  
 22565                                  ; 02/11/2022
 22566                                  ;align 4
 22567                                  
 22568                                  DOSINFO: 
 22569 0000026D 00000000                	dd	0	; address of the DOS Sysini Variables
 22570                                  ;MSDOS:
 22571                                  dos_temp_location: ; dword ; MSDOS 6.0
 22572                                  dosinit:		; MSDOS 6.0
 22573 00000271 0000                    	dw	0
 22574                                  
 22575                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22576                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 22577                                  ;	dw	0
 22578                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 22579                                  
 22580                                  CURRENT_DOS_LOCATION:
 22581 00000273 0000                    	dw	0
 22582                                  
 22583                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 22584                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 22585                                  
 22586                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 22587                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 22588                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 22589                                  ; 03/09/2023 (PCDOS 7.1 IBMDOS.COM size is 42566 bytes, 04/12/2003)
 22590                                  ;DOSSIZE equ	0B000h	; (PCDOS 7.1 - SYSINIT) jhj
 22591                                  
 22592                                  DEVICE_LIST:
 22593 00000275 00000000                	dd	0
 22594                                  
 22595                                  ; 04/06/2018 - Retro DOS v3.0
 22596                                  ; 28/03/2018
 22597                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 22598                                  ;
 22599                                  sysi_country:	
 22600 00000279 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 22601                                  
 22602                                  ; MSDOS 6.0
 22603 0000027D 00000000                dos_segreinit:	dw	0,0	; room for dword
 22604                                  
 22605 00000281 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 22606 00000283 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 22607                                  
 22608 00000285 0000                    def_php:	dw	0
 22609                                  
 22610                                  ; M022--
 22611                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 22612                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 22613                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 22614                                  ;  the new home.
 22615                                  
 22616                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 22617                                  ; 21/10/2022
 22618                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 22619                                  
 22620                                  ; 22/10/2022
 22621                                  seg_reinit_ptr:	; label dword
 22622 00000287 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 22623                                  temp_bcode_seg:
 22624                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 22625                                  		; 22/10/2022
 22626 00000289 2D03                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 22627                                  
 22628                                  fake_floppy_drv:
 22629 0000028B 00                      		db	0	; set to 1 if this machine
 22630                                  				; does not have any floppies!!!
 22631                                  
 22632                                  ; Internal Stack Parameters
 22633                                  
 22634 0000028C 0900                    stack_count:	dW	defaultcount ; 9
 22635 0000028E 8000                    stack_size:	dw	defaultsize  ; 128
 22636 00000290 00000000                stack_addr:	dd	0	
 22637                                  
 22638                                  ; 05/06/2018 - Retro DOS v3.0
 22639                                  
 22640                                  ; various default values
 22641                                  
 22642 00000294 0100                    MEMORY_SIZE:	dw	1
 22643                                  
 22644                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 22645                                  
 22646 00000296 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 22647 00000298 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 22648 00000299 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 22649 0000029B 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 22650 0000029D 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 22651                                  
 22652 0000029F 08                      FILES:	db	8	; enough files for pipe
 22653 000002A0 04                      FCBS:	db	4	; performance for recycling
 22654 000002A1 00                      KEEP:	db	0	; keep original set
 22655 000002A2 05                      NUM_CDS: db	5	; 5 net drives
 22656                                  
 22657                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 22658                                  ;;CONFBOT: dw	0
 22659                                  ;;ALLOCLIM: dw	0
 22660                                  ;CONFBOT: ; 02/11/2022
 22661                                  ;top_of_cdss: dw 0
 22662                                  
 22663                                  ; 30/12/2022 - Retrodos v4.2 (MSDOS 6.21 SYSINIT)
 22664                                  ; (SYSINITSEG:02A3h)
 22665 000002A3 0000                    CONFBOT: dw	0
 22666 000002A5 0000                    ALLOCLIM: dw	0
 22667 000002A7 0000                    top_of_cdss: dw 0
 22668                                  
 22669                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 22670                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 22671                                  ;ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 22672                                  
 22673 000002A9 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 22674                                  
 22675                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 SYSINIT)
 22676                                  %if 0
 22677                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22678                                  ; (SYSINIT:02A9h)
 22679                                  
 22680                                  command_line:
 22681                                  	db	2,0
 22682                                  	db	'P'
 22683                                  	db	0
 22684                                  	times	124 db 0 ; db 124 dup(0)
 22685                                  
 22686                                  %endif
 22687                                  
 22688                                  	
 22689                                  ; (SYSINIT:0329h)
 22690 000002AD 00                      ZERO:	db	0
 22691 000002AE 00                      sepchr:	db	0
 22692 000002AF 0000                    linecount: dw	0			; line count in config.sys
 22693 000002B1 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 22694 000002B9 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 22695                                  
 22696 000002BB FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 22697 000002BC 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 22698                                  
 22699 000002BD 0000                    buf_prev_off:	dw	0
 22700                                  
 22701                                          ;IF      NOT NOEXEC
 22702                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 22703                                          ;ENDIF
 22704                                  
 22705                                  ; 01/05/2018
 22706                                  COMEXE:
 22707 000002BF 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 22708 000002C1 [5146]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 22709 000002C3 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 22710 000002C5 [9802]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 22711 000002C7 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 22712 000002C9 [AD02]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 22713 000002CB 0000                    		dw	0
 22714                                  
 22715                                  ; variables for install= command.
 22716                                  
 22717 000002CD 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 22718                                  					;  indicating the pass number
 22719                                  					; 0 - do scan for DOS=HIGH/LOW
 22720                                  					; 1 - load device drivers
 22721                                  					; 2 - was to load IFS
 22722                                  					;      now it is unused
 22723                                  					; 3 - do install=
 22724                                  					; >3 - nop
 22725 000002CE 0000                    install_flag:	dw	0
 22726                                  
 22727                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 22728                                  has_installed	equ	00000010b	; sysinit_base installed.
 22729                                  
 22730 000002D0 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 22731 000002D2 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 22732 000002D6 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 22733 000002DA 0000                    checksum:	dw	0		; used by sum_up
 22734                                  
 22735 000002DC 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 22736 000002F0 00                      ldexec_line:	db	0		;# of parm characters
 22737 000002F1 20                      ldexec_start:	db	' '
 22738 000002F2 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 22739                                  
 22740                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 22741                                  
 22742                                  instexe:
 22743 00000342 0000                    iexec.environ:	dw	0		; seg addr of environment
 22744 00000344 [F002]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 22745 00000346 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 22746 00000348 [DC02]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 22747 0000034A 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 22748 0000034C [DC02]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 22749 0000034E 0000                    		dw	0
 22750                                  
 22751                                  ; variables for comment=
 22752                                  
 22753 00000350 00                      com_level:	db	0		; level of " " in command line
 22754 00000351 00                      cmmt:		db	0		; length of comment string token
 22755 00000352 00                      cmmt1:		db	0		; token
 22756 00000353 00                      cmmt2:		db	0		; token
 22757 00000354 00                      cmd_indicator:	db	0
 22758 00000355 00                      donotshownum:	db	0
 22759                                  
 22760 00000356 0000                    count:		dw	0
 22761 00000358 0000                    org_count:	dw	0
 22762 0000035A 0000                    chrptr:		dw	0
 22763 0000035C 0000                    cntryfilehandle: dw	0
 22764 0000035E 0000                    old_area:	dw	0
 22765 00000360 0000                    impossible_owner_size: dw 0		; paragraph
 22766                                  
 22767                                  bucketptr: ; label dword
 22768                                  bufptr:	   ; label dword		; leave this stuff in order!
 22769 00000362 0000                    memlo:	dw	0
 22770                                  prmblk:	   ; label word
 22771 00000364 0000                    memhi:	dw	0
 22772 00000366 0000                    ldoff:	dw	0
 22773 00000368 0000                    area:	dw	0
 22774                                  
 22775                                  ; Following is the request packet used to call INIT routines for 
 22776                                  ; all device drivers. Some fields may be accessed individually in
 22777                                  ; the code, and hence have individual labels, but they should not
 22778                                  ; be separated.
 22779                                  
 22780 0000036A 18                      packet:	db	24			; was 22
 22781 0000036B 00                      	db	0
 22782 0000036C 00                      	db	0			; initialize code
 22783 0000036D 0000                    	dw	0
 22784 0000036F 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 22785                                  
 22786 00000377 00                      unitcount:	db	0
 22787 00000378 00000000                break_addr:	dd	0
 22788 0000037C 00000000                bpb_addr:	dd	0
 22789                                  drivenumber:	; 22/10/2022
 22790 00000380 00                      devdrivenum:	db	0 
 22791 00000381 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 22792                                  
 22793                                  ; end of request packet
 22794                                  
 22795                                  ;drivenumber:	db	0  ; 22/03/2019
 22796                                  
 22797                                  toomanydrivesflag:
 22798 00000383 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 22799                                  align 2
 22800                                  
 22801                                  BCodeSeg:	; 21/10/2022
 22802 00000384 2D03                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 22803                                  	;dw	Bios_Code  ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 22804                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 22805                                  
 22806                                  ; 30/12/2022
 22807                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0387h
 22808                                  ;
 22809                                  ; Magicbackdoor: dd 0
 22810                                  ; NullBackdoor: 
 22811                                  ;		retf
 22812                                  
 22813                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 22814                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 22815                                  ; 19/04/2019
 22816                                  _timer_lw_:
 22817 00000386 0000                    	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 22818                                  
 22819                                  ;SR;
 22820                                  ; This is the communication block between the DOS and the BIOS. It starts at
 22821                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 22822                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 22823                                  ;is passed to DOS as part of the DOSINIT call.
 22824                                  ;
 22825                                  
 22826                                  BiosComBlock:
 22827                                  	;dd	Bios_Data:SysinitPresent 
 22828                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 22829 00000388 [DD07]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 22830                                  	;dw	KERNEL_SEGMENT ; 0070h
 22831                                  	; 21/10/2022
 22832 0000038A 7000                    	dw	DOSBIODATASEG ; 0070h
 22833                                  
 22834                                  ;align 2
 22835                                  
 22836                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 22837                                  	; 30/12/2022 - (MSDOS 6.21 IO.SYS, SYSINIT:0392h)
 22838                                  tempstack:	
 22839 0000038C 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 22840                                  
 22841                                  ; ----------------------------------------------------------------------------
 22842                                  
 22843                                  	; 22/10/2022 - Retro DOS v4.0
 22844                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 22845                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 22846                                  	; 12/12/2023
 22847 0000040C 0E                      	push	cs
 22848 0000040D 1F                      	pop	ds
 22849                                  
 22850                                  ; 27/12/2023 temporary
 22851 0000040E 1E                      push ds
 22852 0000040F 53                      push bx
 22853 00000410 BB00B8                  mov bx, 0B800h
 22854 00000413 8EDB                    mov ds, bx
 22855 00000415 31DB                    xor bx, bx
 22856 00000417 B44E                    mov ah, 4Eh
 22857 00000419 B021                    mov al, '!'
 22858 0000041B 8907                    mov [bx], ax
 22859 0000041D 5B                      pop bx
 22860 0000041E 1F                      pop ds 
 22861                                  
 22862                                  	; 12/12/2022
 22863                                  	; 22/03/2019 - Retro DOS v4.0
 22864                                  	; 06/07/2018
 22865                                  	; 04/06/2018 - Retro DOS v3.0
 22866                                  ; before doing anything else, let's set the model byte
 22867 0000041F B4C0                    	mov	ah,0C0h 		; get system configuration
 22868 00000421 CD15                    	int	15h			; 
 22869 00000423 7214                    	jc	short no_rom_config
 22870                                  
 22871                                  	;cmp	ah,0			; double check
 22872                                  	;jne	short no_rom_config
 22873                                  	; 03/09/2023
 22874 00000425 08E4                    	or	ah,ah
 22875 00000427 7510                    	jnz	short no_rom_config
 22876                                  
 22877                                  	; 12/12/2023 ; *
 22878                                  	; ds = cs
 22879                                  
 22880 00000429 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 22881                                  	;mov	[cs:sys_model_byte],al 
 22882 0000042D A2[BB02]                	mov	[sys_model_byte],al ; *
 22883 00000430 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 22884                                  	;mov	[cs:sys_scnd_model_byte],al
 22885 00000434 A2[BC02]                	mov	[sys_scnd_model_byte],al ; *
 22886                                  	;jmp	short SYSIN
 22887                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22888 00000437 EB29                    	jmp	short move_myself
 22889                                  
 22890                                  no_rom_config:				; Old ROM
 22891                                  	; 12/12/2023
 22892                                  	;mov	ax,0F000h
 22893                                  	;mov	ds,ax
 22894                                  	;mov	al,[0FFFEh]
 22895                                  	;mov	[cs:sys_model_byte],al	; set the model byte.
 22896                                  	; 12/12/2023
 22897                                  	; ds = cs
 22898 00000439 B800F0                  	mov	ax,0F000h
 22899 0000043C 8EC0                    	mov	es,ax
 22900 0000043E 26A0FEFF                	mov	al,[es:0FFFEh]
 22901 00000442 A2[BB02]                	mov	[sys_model_byte],al	; set the model byte.
 22902                                  	
 22903                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 22904                                  ; execute the equipment determination interrupt and then
 22905                                  ; check the returned value to see if we have any floppy drives
 22906                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 22907                                  ; see the at tech ref bios listings for help on the equipment
 22908                                  ; flag interrupt (11h)	
 22909                                  
 22910                                  	; 22/10/2022
 22911                                  check_for_fake_floppy:			; entry point for rom_config above
 22912 00000445 CD11                    	int	11h			; check equipment flag
 22913                                  
 22914                                  	; 12/12/2022
 22915 00000447 A801                    	test	al,1		
 22916                                  	;test	ax,1			; have any floppies?
 22917 00000449 7517                    	jnz	short move_myself	; yes,normal system
 22918                                  
 22919                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 22920                                  ; whether it is an old ROM BIOS or a new one
 22921                                  ;
 22922                                  ; WARNING !!!
 22923                                  ;
 22924                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 22925                                  ; here will require an equivalent modification in MSINIT.ASM also
 22926                                  
 22927                                  	; 12/12/2023
 22928                                  	;push	es  ; not necessary
 22929                                  
 22930 0000044B 30C9                    	xor	cl,cl	
 22931 0000044D B408                    	mov	ah,8			; get disk parameters
 22932 0000044F B200                    	mov	dl,0			; of drive 0
 22933 00000451 CD13                    	int	13h
 22934                                  
 22935                                  	;pop	es  ; 12/12/2023	
 22936                                  
 22937 00000453 720D                    	jc	short move_myself	; if error lets assume that the
 22938                                  					;  ROM BIOS lied
 22939                                  	;cmp	cl,0			; double check (max sec no cannot be 0)
 22940                                  	;je	short move_myself
 22941                                  	; 03/09/2023
 22942 00000455 08C9                    	or	cl,cl
 22943 00000457 7409                    	jz	short move_myself
 22944                                  
 22945 00000459 08D2                    	or	dl,dl			; number of flp drvs == 0?
 22946 0000045B 7505                    	jnz	short move_myself	; no
 22947                                  
 22948                                  	;mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 22949                                  	; 12/12/2023
 22950                                  	; ds = cs
 22951 0000045D C606[8B02]01            	mov	byte [fake_floppy_drv],1 ; set fake flag.
 22952                                  
 22953                                  move_myself:
 22954                                  	; 12/12/2023
 22955                                  	;cld	; not necessary		; set up move
 22956                                  	;xor	si,si
 22957                                  	;mov	di,si
 22958                                  
 22959                                  	; 12/12/2023
 22960                                  	; ds = cs
 22961                                  	; 12/12/2022
 22962                                  	;push	cs
 22963                                  	;pop	ds
 22964                                  
 22965                                  	;mov	cx,[cs:MEMORY_SIZE]
 22966 00000462 8B0E[9402]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 22967                                  
 22968                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 22969                                  ;;;	if	msver
 22970                                  ;	cmp	cx,1		; 1 means do scan
 22971                                  ;	jnz	short noscan
 22972                                  ;	mov	cx,2048		; start scanning at 32k boundary
 22973                                  ;	xor	bx,bx
 22974                                  ;
 22975                                  ;memscan:inc	cx
 22976                                  ;	jz	short setend
 22977                                  ;	mov	ds,cx
 22978                                  ;	mov	al,[bx]
 22979                                  ;	not	al
 22980                                  ;	mov	[bx],al
 22981                                  ;	cmp	al,[bx]
 22982                                  ;	not	al
 22983                                  ;	mov	[bx],al
 22984                                  ;	jz	short memscan
 22985                                  ;setend:
 22986                                  ;	mov	cs:[memory_size],cx
 22987                                  ;;;	endif
 22988                                  
 22989                                  ;noscan: 				; cx is mem size in para
 22990                                  ;;
 22991                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 22992                                  ;;		  before we try to run.
 22993                                  ;;	       b) in any case, we should check for sufficient memory and give
 22994                                  ;;		  an appropriate error diagnostic if there isn't enough
 22995                                  ;
 22996                                  ;	push	cs
 22997                                  ;	pop	ds
 22998                                  ;
 22999                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 23000                                  ;;	  that way it would be easier to slide them down home in a minimal
 23001                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 23002                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 23003                                  ;;	  temporary home and the final one.  the problem with doing that
 23004                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 23005                                  ;
 23006                                  ;	dec	cx			; one para for an arena at end of mem
 23007                                  ;					; in case of UMBs
 23008                                  
 23009                                  	; 22/10/2022
 23010                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 23011                                  
 23012                                  	; 12/12/2022
 23013                                  	;push	cs
 23014                                  	;pop	ds
 23015                                  
 23016 00000466 49                      	dec	cx
 23017                                  
 23018                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 23019                                  
 23020 00000467 31DB                    	xor	bx,bx
 23021 00000469 8EC3                    	mov	es,bx
 23022                                  	;mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 23023                                  	;mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 23024                                  	; 29/09/2023
 23025 0000046B 26C41EBC00              	les	bx,[es:(2Fh*4)]
 23026 00000470 26817F035250            	cmp	word [es:bx+3],'RP'
 23027 00000476 751B                    	jne	short NoRPL
 23028 00000478 26807F054C              	cmp	byte [es:bx+5],'L'
 23029 0000047D 7514                    	jne	short NoRPL
 23030                                  
 23031 0000047F 89CA                    	mov	dx,cx			; get TOM into DX
 23032 00000481 52                      	push	dx
 23033 00000482 B8064A                  	mov	ax,4A06h
 23034                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 23035 00000485 CD2F                    	int	2Fh			; Get new TOM from any RPL
 23036 00000487 58                      	pop	ax
 23037 00000488 89D1                    	mov	cx,dx
 23038 0000048A 39C2                    	cmp	dx,ax
 23039 0000048C 7405                    	je	short NoRPL
 23040                                  	
 23041                                  	; 11/12/2022
 23042                                  	; ds = cs
 23043 0000048E 8916[9602]              	mov	[RPLMemTop],dx
 23044                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23045                                  	;mov	[cs:RPLMemTop],dx
 23046                                  	
 23047 00000492 49                      	dec	cx
 23048                                  NoRPL:
 23049 00000493 B8[304E]                	mov	ax,SI_end		; need this much room for sysinit
 23050                                  					; (SI_end == sysinit code size)
 23051                                  					; 03/09/2023
 23052                                  					; (58A0h for MSDOS 6.21 IO.SYS)
 23053                                  					; (5B40h for PCDOS 7.1 IBMBIO.COM)
 23054 00000496 E8C907                  	call	off_to_para
 23055 00000499 29C1                    	sub	cx,ax
 23056                                  
 23057                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 23058                                  ; code above sysinit in memory
 23059                                  ;
 23060 0000049B 81E9000A                	sub	cx,DOSSIZE/16 ; (0A00h)	; leave this much room for DOS
 23061                                  			      ; (0B00h) ; (PCDOS 7.1 IBMBIO.COM) -03/09/2023-	
 23062                                  
 23063 0000049F B8801D                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 23064                                  					; (1A70h for MSDOS 6.21 IO.SYS)
 23065                                  					; 03/09/2023
 23066                                  					; (1E00h for PCDOS 7.1 IBMBIO.COM)
 23067 000004A2 E8BD07                  	call	off_to_para		; leave this much room for BIOS code
 23068 000004A5 29C1                    	sub	cx,ax
 23069 000004A7 8EC1                    	mov	es,cx			; segment where sysinit will be located
 23070                                  
 23071                                  	; 12/12/2023
 23072 000004A9 FC                      	cld	; not necessary		; set up move
 23073 000004AA 31F6                    	xor	si,si
 23074 000004AC 89F7                    	mov	di,si
 23075                                  
 23076 000004AE B9[304E]                	mov	cx,SI_end		; (sysinit code size)
 23077 000004B1 D1E9                    	shr	cx,1			; divide by 2 to get words
 23078 000004B3 F3A5                    	rep	movsw			; relocate sysinit
 23079                                  
 23080 000004B5 06                      	push	es			; push relocated segment
 23081 000004B6 B8[BB04]                	mov	ax,SYSIN
 23082 000004B9 50                      	push	ax			; push relocated entry point
 23083                                  
 23084 000004BA CB                      	retf				; far jump to relocated sysinit
 23085                                  
 23086                                  ; ----------------------------------------------------------------------------
 23087                                  
 23088                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 23089                                  
 23090                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 23091                                  	; (SYSINIT:0533h)
 23092                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 23093                                  	; (SYSINIT:04BFh)
 23094                                  	; 03/09/2023 - Retro DOS 4.2 (5.0 - Modified PCDOS 7.1 IBMBIO.COM)
 23095                                  	; (SYSINIT:04F3h)
 23096                                  SYSIN:
 23097                                  	; Retro DOS 4.0 - 22/03/2019
 23098                                  	; Retro DOS 2.0 - 25/02/2018
 23099                                  
 23100                                  	; 23/04/2019
 23101                                  	;;mov	ax,Bios_Data
 23102                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 23103                                  	; 21/10/2022
 23104 000004BB B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 23105 000004BE 8ED8                    	mov	ds,ax
 23106 000004C0 8C0E[DB07]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 23107 000004C4 C606[DD07]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 23108                                  
 23109                                  ; first move the MSDOS.SYS image up to a harmless place 
 23110                                  ; on top of our new sysinitseg
 23111                                  
 23112                                  	; 22/10/2022
 23113 000004C9 B8[304E]                	mov	ax,SI_end		; how big is sysinitseg?
 23114 000004CC E89307                  	call	off_to_para
 23115 000004CF 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 23116 000004D1 01C8                    	add	ax,cx
 23117 000004D3 8EC0                    	mov	es,ax
 23118                                  	
 23119 000004D5 31F6                    	xor	si,si
 23120 000004D7 89F7                    	mov	di,si
 23121                                  
 23122 000004D9 2E8E1E[7302]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 23123                                  
 23124                                  	;mov	ax,cs	
 23125                                  	;mov	ds,ax
 23126                                  
 23127                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 23128                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 23129                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 23130                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 23131                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 23132                                  
 23133                                  	; 22/10/2022
 23134 000004DE B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 23135                                  			     ; 03/09/2023
 23136                                  			     ; 5800h (PCDOS 7.1)
 23137 000004E1 F3A5                    	rep     movsw
 23138 000004E3 2E8C06[7302]            	mov	[cs:CURRENT_DOS_LOCATION],es
 23139                                  
 23140                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 23141                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 23142                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 23143                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 23144                                  
 23145                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 23146                                  	;mov	ax,cs
 23147                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 23148                                  	;mov	ds,ax
 23149                                  
 23150                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 23151                                  
 23152                                  ;	; 24/04/2019 
 23153                                  ;;ifndef ROMDOS
 23154                                  ;	mov	ax,[es:3] 		; get offset of dos
 23155                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 23156                                  ;	mov	[dosinit],ax		; that's the entry point offset
 23157                                  ;	call	off_to_para		; subtract this much from segment
 23158                                  ;	; 23/04/2019
 23159                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 23160                                  ;	sub	[FINAL_DOS_LOCATION],ax
 23161                                  ;;else
 23162                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 23163                                  ;;
 23164                                  ;;endif ; ROMDOS
 23165                                  
 23166                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 23167                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 23168                                  
 23169                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 23170                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 23171                                  
 23172                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 23173                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 23174                                  	; 03/09/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 23175                                  	; (SYSINIT:04ECh for MSDOS 6.21 IO.SYS SYSINIT)
 23176                                  	; (SYSINIT:0540h for PCDOS 7.1 IBMBIO.COM SYSINIT)
 23177 000004E8 A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 23178                                  
 23179 000004EB 2EA3[7102]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 23180                                  	; 02/11/2022
 23181 000004EF E87007                  	call	off_to_para		; subtract this much from segment
 23182 000004F2 2E2906[7302]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 23183                                  
 23184                                  	; Current DOSCODE start address = dword [dosinit]
 23185                                  
 23186                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 23187                                  ;; until it is determined whether it will be running in HIMEM or not.
 23188                                  
 23189                                  ;ifndef ROMDOS
 23190                                  
 23191                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 23192                                  
 23193                                  	; 22/10/2022
 23194 000004F7 8CC0                    	mov	ax,es
 23195 000004F9 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 23196 000004FC 8EC0                    	mov	es,ax
 23197 000004FE 2E8706[8902]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 23198 00000503 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 23199                                  
 23200                                  	;mov	si,BCODE_START ; mov si,30h
 23201                                  	; 09/12/2022
 23202 00000505 BE[3000]                	mov	si,BCODESTART
 23203                                  	; 02/11/2022
 23204 00000508 89F7                    	mov	di,si
 23205 0000050A B9801D                  	mov	cx,BCODE_END   ; mov cx,1A60h ; mov cx,1A70h ; 30/12/2022
 23206 0000050D 29F1                    	sub	cx,si
 23207 0000050F D1E9                    	shr	cx,1
 23208 00000511 F3A5                    	rep	movsw			; move Bios_Code into place
 23209                                  
 23210 00000513 8CC0                    	mov	ax,es			; tell it what segment it's in
 23211 00000515 2EFF1E[8702]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 23212                                  
 23213                                  ;endif	; not ROMDOS
 23214                                  
 23215                                  ; now call dosinit while it's in its temporary home
 23216                                  
 23217                                  	;mov	ax,cs
 23218                                  	;mov	ds,ax	 
 23219                                  
 23220                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 23221                                  
 23222                                  	; 22/10/2022
 23223                                  
 23224 0000051A 2EC43E[8803]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 23225                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 23226 0000051F 2EC536[7502]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 23227                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 23228                                  
 23229 00000524 2E8B16[9402]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 23230                                  
 23231 00000529 FA                      	cli
 23232 0000052A 8CC8                    	mov	ax,cs
 23233 0000052C 8ED0                    	mov	ss,ax
 23234                                  
 23235                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 23236                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 23237                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 23238                                  ;SYSINIT:0532h: 
 23239                                  
 23240                                  ; 22/10/2022
 23241                                  ; ----------------------------------------------------------------------------
 23242                                  ;SYSINIT:05A6h:
 23243                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 23244                                  
 23245                                  ; 03/09/2023
 23246                                  ; (locstack at SYSINIT:0586h in PCDOS 7.1 IBMBIO.COM SYSINIT)
 23247                                  
 23248                                  	;mov	sp,05A6h
 23249 0000052E BC2E05                  	mov     sp,locstack		; set stack
 23250                                  
 23251 00000531 FB                      	sti
 23252                                  
 23253                                  ;align 2
 23254                                  	; 30/03/2018
 23255                                  ;LOCSTACK:
 23256                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 23257                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 23258                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 23259                                  
 23260                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 23261                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 23262                                  
 23263                                  ; This call to DOSINIT will relocate the DOS data from its present location
 23264                                  ; at the top of memory, to its final location in low memory just above the
 23265                                  ; BIOS data. It will then build important DOS data structures in low 
 23266                                  ; memory following the DOS data. It returns (among many other things) the
 23267                                  ; new starting address of free memory.
 23268                                  
 23269 00000532 2EFF1E[7102]            	call	far [cs:dosinit]	; call dosinit	
 23270                                  			 ; es:di -> sysinitvars_ext
 23271                                  
 23272 00000537 2E8C1E[8502]            	mov	[cs:def_php],ds		; save pointer to PSP
 23273                                  	
 23274                                  	; 11/12/2022
 23275                                  	; 22/03/2019
 23276 0000053C 0E                      	push	cs
 23277 0000053D 1F                      	pop	ds
 23278                                  	; 22/10/2022
 23279 0000053E A3[8302]                	mov	[hi_doscod_size],ax
 23280 00000541 890E[8102]              	mov	[lo_doscod_size],cx
 23281 00000545 8916[7D02]              	mov	[dos_segreinit],dx
 23282                                  	
 23283                                  	; 11/12/2022
 23284                                  	; ds = cs
 23285                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 23286                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 23287                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 23288                                  
 23289                                  	; 05/06/2018 - Retro DOS v3.0
 23290                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 23291                                  
 23292                                  	; 11/12/2022
 23293                                  	; ds = cs
 23294                                  	; 22/10/2022
 23295                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 23296 00000549 268B05                  	mov	ax,[es:di] ; 22/03/2019
 23297                                  	;mov	[cs:DOSINFO],ax
 23298 0000054C A3[6D02]                	mov	[DOSINFO],ax
 23299                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 23300 0000054F 268B4502                	mov	ax,[es:di+2]
 23301                                  	;mov	[cs:DOSINFO+2],ax
 23302 00000553 A3[6F02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 23303                                  
 23304                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 23305 00000556 268B4504                	mov	ax,[es:di+4]
 23306                                  	;mov	[cs:sysi_country],ax
 23307 0000055A A3[7902]                	mov	[sysi_country],ax
 23308                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 23309 0000055D 268B4506                	mov	ax,[es:di+6]
 23310                                  	;mov	[cs:sysi_country+2],ax
 23311 00000561 A3[7B02]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 23312                                  
 23313                                  	; 20/04/2019
 23314                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 23315                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 23316                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 23317                                  	; 22/10/2022
 23318                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 23319                                  	;;;mov	[dos_segreinit+2],es
 23320                                  	;;mov	[dos_segreinit+2],ax
 23321                                  	;mov	[cs:dos_segreinit+2],ax
 23322                                  	; 11/12/2022
 23323                                  	; ds = cs
 23324 00000564 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 23325 00000568 8C06[7F02]              	mov	[dos_segreinit+2],es
 23326                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23327                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 23328                                  	;mov	[cs:dos_segreinit+2],es
 23329                                  
 23330                                  ; ----------------------------------------------------------------------------
 23331                                  
 23332                                  ;SYSINIT:0577h:
 23333                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 23334                                  ;SYSINIT:05D1h:	; NoRPLArena 
 23335                                  
 23336                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 23337                                  ;------ Cover up RPL code with an arena
 23338                                  ;SYSINIT:05EBh:
 23339                                  	; 11/12/2022
 23340                                  	; ds = cs
 23341 0000056C 31DB                    	xor	bx,bx
 23342 0000056E 391E[9602]              	cmp	[RPLMemTop],bx ; 0
 23343                                  	;cmp	word [RPLMemTop],0
 23344                                  	;;cmp	word [cs:RPLMemTop],0
 23345 00000572 7450                    	je	short NoRPLArena
 23346                                  
 23347                                  ;------ alloc all memory
 23348                                  
 23349                                  	; 11/12/2022
 23350                                  	;mov	bx,0FFFFh
 23351 00000574 4B                      	dec	bx
 23352                                  	; bx = 0FFFFh
 23353 00000575 B448                    	mov	ah,48h
 23354 00000577 CD21                    	int	21h
 23355                                  			; DOS - 2+ - ALLOCATE MEMORY
 23356                                  			; BX = number of 16-byte paragraphs desired
 23357 00000579 B448                    	mov	ah,48h
 23358 0000057B CD21                    	int	21h
 23359                                  
 23360 0000057D 8EC0                    	mov	es,ax			; get it into ES and save it
 23361 0000057F 06                      	push	es
 23362                                  
 23363                                  ;------ resize upto RPL mem
 23364                                  
 23365                                  	; 11/12/2022
 23366                                  	; ds = cs
 23367                                  	;sub	ax,[cs:RPLMemTop]
 23368 00000580 2B06[9602]              	sub	ax,[RPLMemTop]
 23369 00000584 F7D8                    	neg	ax
 23370 00000586 48                      	dec	ax
 23371 00000587 89C3                    	mov	bx,ax
 23372 00000589 B44A                    	mov	ah,4Ah
 23373 0000058B CD21                    	int	21h
 23374                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 23375                                  			; ES = segment address of block to change
 23376                                  			; BX = new size in paragraphs
 23377                                  
 23378                                  ;------ allocate the free (RPL MEM)
 23379                                  
 23380 0000058D BBFFFF                  	mov	bx,0FFFFh
 23381 00000590 B448                    	mov	ah,48h
 23382 00000592 CD21                    	int	21h
 23383 00000594 B448                    	mov	ah,48h
 23384 00000596 CD21                    	int	21h
 23385                                  
 23386                                  ;----- mark that it belongs to RPL
 23387                                  
 23388 00000598 48                      	dec	ax
 23389 00000599 8EC0                    	mov	es,ax
 23390                                  	;mov	word [es:arena_owner],8
 23391 0000059B 26C70601000800          	mov	word [es:1],8
 23392                                  	;mov	word [es:arena_name],'RP'
 23393 000005A2 26C70608005250          	mov	word [es:8],'RP'
 23394                                  	;mov	word [es:arena_name+2],'L'
 23395 000005A9 26C7060A004C00          	mov	word [es:10],'L'
 23396                                  	;mov	word [es:arena_name+4],0
 23397 000005B0 26C7060C000000          	mov	word [es:12],0
 23398                                  	;mov	word [es:arena_name+6],0
 23399 000005B7 26C7060E000000          	mov	word [es:14],0	
 23400                                  
 23401 000005BE 07                              pop     es                      ; get back ptr to first block
 23402 000005BF B449                            mov     ah,49h	; Dealloc	; and free it
 23403 000005C1 CD21                    	int	21h		
 23404                                  					; DOS - 2+ - FREE MEMORY
 23405                                  					; ES = segment address of area to be freed
 23406                                  	; 11/12/2022
 23407 000005C3 F8                      	clc
 23408                                  
 23409                                  ; ----------------------------------------------------------------------------
 23410                                  
 23411                                  NoRPLArena:
 23412                                  	; 11/12/2022
 23413                                  	; ds = cs
 23414                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 23415 000005C4 C43E[6D02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 23416                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 23417                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 23418                                  
 23419                                  	; 11/12/2022
 23420                                  	;clc				; get the extended memory size
 23421                                  
 23422                                  ;	execute the get extended memory size subfunction in the bios int 15h
 23423                                  ;	if the function reports an error do nothing else store the extended
 23424                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 23425                                  ;	currently pointed to by es:di. use the offsets specified in the
 23426                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 23427                                  
 23428 000005C8 B488                    	mov	ah,88h
 23429 000005CA CD15                    	int	15h			; check extended memory size
 23430 000005CC 720B                    	jc	short no_ext_memory
 23431                                  			; Get Extended Memory Size
 23432                                  			; Return: CF clear on success
 23433                                  			; AX = size of memory above 1M in K	
 23434                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 23435                                  	; 22/10/2022
 23436 000005CE 26894545                	mov	[es:di+45h],ax ; save extended memory size
 23437 000005D2 09C0                    	or	ax,ax
 23438 000005D4 7403                    	jz	short no_ext_memory
 23439 000005D6 E80206                  	call	ClrVDISKHeader
 23440                                  no_ext_memory:
 23441                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 23442 000005D9 268B4510                	mov	ax,[es:di+10h]
 23443                                  	;add	ax,bufinsiz
 23444 000005DD 83C014                  	add	ax,20			; size of buffer header
 23445                                  	; 11/12/2022
 23446                                  	; ds = cs
 23447 000005E0 A3[9D02]                	mov	[singlebuffersize],ax	; total size for a buffer
 23448                                  	;mov	[cs:singlebuffersize],ax	
 23449                                  	; 11/12/2022
 23450 000005E3 A0[9802]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 23451                                  	;mov	al,[cs:DEFAULT_DRIVE]
 23452                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 23453 000005E6 26884543                	mov	[es:di+43h],al
 23454                                  
 23455                                  ; determine if 386 system...
 23456                                  
 23457                                  	;get_cpu_type			; macro to determine cpu type
 23458                                  
 23459                                  get_cpu_type:
 23460                                  	; 11/12/2022
 23461 000005EA 9C                      	pushf
 23462                                  	;push	bx
 23463                                  	;xor	bx,bx
 23464                                  	; 11/12/2022
 23465                                  	;xor	cx,cx
 23466                                  	;
 23467 000005EB 31C0                    	xor	ax,ax
 23468                                  	; ax = 0
 23469 000005ED 50                      	push    ax
 23470 000005EE 9D                      	popf
 23471 000005EF 9C                      	pushf
 23472 000005F0 58                      	pop	ax
 23473 000005F1 2500F0                  	and	ax,0F000h
 23474                                  	;cmp	ax,0F000h
 23475 000005F4 80FCF0                  	cmp	ah,0F0h 
 23476 000005F7 7410                    	je	short cpu_8086
 23477                                  	;mov	ax,0F000h
 23478 000005F9 B4F0                    	mov	ah,0F0h
 23479                                  	; ax = 0F000h
 23480 000005FB 50                      	push	ax
 23481 000005FC 9D                      	popf
 23482 000005FD 9C                      	pushf
 23483 000005FE 58                      	pop	ax
 23484                                  	;and	ax,0F000h
 23485 000005FF 80E4F0                  	and	ah,0F0h
 23486 00000602 7405                    	jz	short cpu_286
 23487                                  cpu_386:
 23488                                  	; 11/12/2022
 23489                                  	;;inc	bx
 23490                                  	;inc	cx
 23491                                  	; 11/12/2022
 23492                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 23493 00000604 26C6454401              	mov	byte [es:di+44h],1
 23494                                  
 23495                                  	; 03/09/2023 - Retro DOS v5.0 (PCDOS 7.1 Modified SYSINIT)
 23496                                  	; change A20 line on/off check code to the faster (for 32 bit cpu)
 23497                                  	;push	es
 23498                                  	;push	di
 23499                                  	;mov	ax,DOSBIODATASEG ; 0070h
 23500                                  	;mov	es,ax
 23501                                  	;cld
 23502                                  	;mov	di,cpu386_cmpsd ; (IsA20Off)
 23503                                  	;mov	ax,4B9h        ; mov cx,4 ; B90400
 23504                                  	;stosw
 23505                                  	;mov	ax,0F300h      ; repz  ; F3
 23506                                  	;stosw
 23507                                  	;mov	ax,0A766h      ; cmpsd ; 66A7
 23508                                  	;stosw
 23509                                  	;pop	di
 23510                                  	;pop	es
 23511                                  
 23512                                  cpu_286:
 23513                                  	;;;inc	bx
 23514                                  	;;inc	cx
 23515                                  cpu_8086:
 23516                                  	; 11/12/2022
 23517                                  	;;mov	ax,bx	
 23518                                  	;pop	bx
 23519 00000609 9D                      	popf
 23520                                  
 23521                                  	;...
 23522                                  
 23523                                  	; 11/12/2022
 23524                                  	;or	cl,cl
 23525                                  	;jz	short not_386_system
 23526                                  	; 11/12/202
 23527                                  	;cmp	cl,2
 23528                                  	;;cmp	ax,2			; is it a 386?
 23529                                  	;jne	short not_386_system	; no: don't mess with flag
 23530                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 23531                                  	; 11/12/2022
 23532                                  	; 22/10/2022
 23533                                  	;mov	byte [es:di+44h],1
 23534                                  not_386_system:
 23535                                  	;mov	al,[es:di+SYSI_NUMIO]
 23536 0000060A 268A4520                	mov	al,[es:di+20h]
 23537                                  	; 11/12/2022
 23538                                  	; ds = cs
 23539 0000060E A2[8003]                	mov	[drivenumber],al	; save start of installable block drvs
 23540                                  	;mov	[cs:drivenumber],al
 23541                                  
 23542 00000611 8CC8                    	mov	ax,cs
 23543 00000613 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 23544                                  	; 11/12/2022
 23545                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 23546                                  	;;mov	cx,[cs:singlebuffersize]
 23547                                  	;shr	cx,1			
 23548                                  	;shr	cx,1			; divide size by 16...
 23549                                  	;shr	cx,1
 23550                                  	;shr	cx,1			; ...to get paragraphs...
 23551                                  	;inc	cx			; ... and round up
 23552                                  	; 11/12/2022
 23553 00000616 8B1E[9D02]              	mov	bx,[singlebuffersize]
 23554 0000061A B104                    	mov	cl,4
 23555 0000061C D3EB                    	shr	bx,cl
 23556 0000061E 43                      	inc	bx
 23557                                  
 23558                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 23559                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 23560                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 23561                                  ;	  it is probably safe to assume that the sector size always will be.
 23562                                  ;
 23563                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 23564                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 23565                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 23566                                  ;	  other code from ever causing a problem???
 23567                                  
 23568                                  	; 11/12/2022
 23569 0000061F 29D8                    	sub	ax,bx
 23570                                  	;sub	ax,cx
 23571 00000621 A3[A702]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 23572                                  	; 22/10/2022
 23573                                  	;mov	[cs:top_of_cdss],ax
 23574                                  
 23575                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 23576                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 23577                                  ;	for allocating memory for MagicDrv.
 23578                                  
 23579 00000624 06                      	push	es			; preserve pointer to dosinfo
 23580 00000625 57                      	push	di
 23581                                  
 23582                                  	; 22/10/2022
 23583                                  ;	mov	cx,ax			; save pointer for buffer
 23584                                  ;
 23585                                  ;;	now allocate space for 26 CDSs
 23586                                  ;
 23587                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 23588                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 23589                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 23590                                  
 23591                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 23592                                  	; (SYSINIT:064Ch)
 23593 00000626 89C1                    	mov	cx,ax ; (*)
 23594 00000628 2D8F00                  	sub	ax,((26 *(curdirlen))+15)/16 ; sub ax,143
 23595 0000062B A3[A502]                	mov	[ALLOCLIM],ax		; init top of free memory pointer
 23596 0000062E A3[A302]                	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 23597                                  	 	
 23598                                  ; setup and initialize the temporary buffer at cx
 23599                                  
 23600                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 23601 00000631 26C47D12                	les	di,[es:di+12h]
 23602                                  	; 11/12/2022
 23603 00000635 31DB                    	xor	bx,bx
 23604                                  	;xor	ax,ax
 23605                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 23606                                  	;mov	word [es:di+4],0
 23607 00000637 26895D04                	mov	[es:di+4],bx ; 0
 23608                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 23609                                  	;mov	word [es:di],0
 23610 0000063B 26891D                  	mov	[es:di],bx ; 0
 23611                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss] ; 6.21
 23612                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss] ; 5.0
 23613                                  	;mov	[es:di+2],ax
 23614                                  	;mov	es,ax	; [top_of_cdss] = [CONFBOT]
 23615                                  	; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 23616 0000063E 26894D02                	mov	[es:di+2],cx ; [top_of_cdss] ; (*)	
 23617 00000642 8EC1                    	mov	es,cx
 23618                                  
 23619                                  	; 11/12/2022
 23620                                  	;xor	ax,ax
 23621                                  	;mov	di,ax			; es:di -> single buffer
 23622 00000644 89DF                    	mov	di,bx
 23623                                  	; di = 0
 23624                                  
 23625                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 23626                                  	; 11/12/2022
 23627                                  	;mov	[es:di],ax ; 0
 23628 00000646 26891D                  	mov	[es:di],bx ; 0
 23629                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 23630                                  	; 11/12/2022
 23631                                  	;mov	[es:di+2],ax ; 0
 23632 00000649 26895D02                	mov	[es:di+2],bx ; 0 
 23633                                  
 23634                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 23635                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 23636                                  
 23637                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 23638 0000064D 26C74504FF00            	mov	word [es:di+4],00FFh
 23639                                  ;SYSINIT:06E6h
 23640                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 23641                                  	;mov	word [es:di+6],0
 23642                                  	; 11/12/2022
 23643                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 23644 00000653 26895D06                	mov	[es:di+6],bx ; 0
 23645                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 23646                                  	;mov	word [es:di+8],0
 23647                                  	; 11/12/2022
 23648                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 23649 00000657 26895D08                	mov	[es:di+8],bx ; 0
 23650                                  
 23651 0000065B 5F                      	pop	di			; restore pointer to DOSINFO data
 23652 0000065C 07                      	pop	es
 23653                                  
 23654                                  	; 11/12/2022
 23655                                  	; ds = cs
 23656                                  	; 22/10/2022
 23657                                  	;push	cs
 23658                                  	;pop	ds
 23659                                  
 23660 0000065D E80B06                  	call	TempCDS			; set up cdss so re_init and sysinit
 23661                                  					;  can make disk system calls
 23662                                  					; tempcds trashes ds
 23663                                  	; 10/05/2019
 23664 00000660 2E8E1E[8502]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 23665                                  
 23666                                  	;if not ibmjapver
 23667                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 23668                                  	;endif
 23669                                  
 23670                                  	; 22/10/2022
 23671                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 23672                                  	; 30/12/2022
 23673                                  ;SYSINIT:0697h:	; (MSDOS 6.21 IO.SYS, SYSINIT)
 23674                                  	;call	far ptr 70h:89Bh
 23675 00000665 9A[2807]7000            	call	DOSBIODATASEG:RE_INIT
 23676                                  
 23677 0000066A FB                      	sti				; ints ok
 23678 0000066B FC                      	cld				; make sure
 23679                                  
 23680                                  ; 23/03/2019
 23681                                  
 23682                                  ;SYSINIT:069Eh	; 30/12/2022
 23683                                  
 23684                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 23685                                  ; of the way by putting it just below sysinit at end of memory.
 23686                                  
 23687 0000066C 8CCB                    	mov	bx,cs
 23688 0000066E 83EB10                  	sub	bx,10h
 23689 00000671 8EC3                    	mov	es,bx
 23690 00000673 31F6                    	xor	si,si
 23691 00000675 89F7                    	mov	di,si
 23692 00000677 B98000                  	mov	cx,128
 23693 0000067A F3A5                    	rep	movsw
 23694                                  
 23695                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 23696                                  	; 22/10/2022
 23697 0000067C 268C063600              	mov	[es:36h],es
 23698                                  
 23699                                   	; Set Process Data Block - Program Segment Prefix address
 23700                                  	; BX = PDB/PSP segment
 23701 00000681 B450                            mov	ah,50h	; SET_CURRENT_PDB
 23702 00000683 CD21                    	int	21h			; tell DOS we moved it
 23703                                  			; DOS - 2+ internal - SET PSP SEGMENT
 23704                                  			; BX = segment address of new PSP
 23705                                  	; 22/10/2022
 23706                                  	; 27/03/2019
 23707 00000685 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 23708                                  
 23709 00000686 0E                      	push	cs	
 23710 00000687 1F                      	pop	ds
 23711                                  
 23712                                  	; set up temp. critical error handler
 23713 00000688 BA[0E45]                	mov	dx,int24		; set up int 24 handler
 23714                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 23715                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 23716 0000068B B82425                  	mov	ax,2524h
 23717 0000068E CD21                    	int	21h
 23718                                  
 23719 00000690 803E[8303]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 23720 00000695 7405                            je      short no_err		   ;  N: continue            M029
 23721 00000697 BA[E74D]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 23722                                          ; 22/10/2022
 23723                                  	;call	print 			   ;		             M029
 23724                                  	; 12/12/2022
 23725 0000069A EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 23726                                  no_err:
 23727                                  	; 12/05/2019
 23728                                  	;----------------------------------------------
 23729                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 23730                                  	; 22/10/2022 - Retro DOS v4.0
 23731                                  	; 12/12/2022
 23732 0000069C BA[1245]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 23733                                  p_dosinit_msg:
 23734 0000069F E8473E                  	call	print			; Print message
 23735                                  	;----------------------------------------------
 23736                                  	
 23737                                  	; 11/12/2022
 23738                                  	; 22/10/2022
 23739                                  	; 23/03/2019 - Retro DOS v4.0
 23740                                  	;pop	ds			; start of free memory
 23741                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 23742                                  	
 23743                                  	; 11/12/2022
 23744                                  	; 27/03/2019
 23745 000006A2 8A16[9802]              	mov	dl,[DEFAULT_DRIVE]	
 23746 000006A6 1F                      	pop	ds ; */
 23747                                  
 23748 000006A7 08D2                    	or	dl,dl
 23749                                  	;jz	short nodrvset		; bios didn't say
 23750 000006A9 7410                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 23751                                  	;dec	dl			; A = 0
 23752                                  	; 18/12/2022
 23753 000006AB 4A                      	dec	dx
 23754 000006AC B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 23755 000006AE CD21                    	int	21h			; select the disk
 23756                                  			; DOS - SELECT DISK
 23757                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 23758                                  			; Return: AL = number of logical drives
 23759                                  nodrvset:
 23760                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS SYINIT)
 23761                                  	; (SYSINIT:06DFh)
 23762                                  	;push	ds
 23763 000006B0 29C0                    	sub	ax,ax
 23764 000006B2 8ED8                    	mov	ds,ax ; 0 ; ROM BIOS Data Area
 23765 000006B4 A16C04                  	mov	ax,[46Ch] ; timer tick count (18.2 ticks per second)
 23766 000006B7 2EA3[8603]              	mov	[cs:_timer_lw_],ax
 23767                                  	;pop	ds
 23768                                  	; ds <> cs
 23769                                  
 23770                                  	; ---------------------
 23771                                  
 23772                                  	;ifdef	dblspace_hooks
 23773                                  	;	....
 23774                                  	;	....
 23775                                  	;endif	
 23776                                  
 23777                                  	; ---------------------
 23778                                  
 23779                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 23780                                  
 23781                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 23782                                  ; ----------------------------------------------------------------------------
 23783                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 23784                                  ; ----------------------------------------------------------------------------
 23785                                  ; 30/12/2022 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS SYSINIT)
 23786                                  
 23787                                  ProcessConfig:
 23788                                  	;; ds = cs ; 27/03/2019
 23789                                  	; 11/12/2022
 23790                                  	; ds <> cs	
 23791                                  
 23792                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 23793                                  
 23794 000006BB E8E618                  	call	doconf			; do pre-scan for dos=high/low
 23795                                  
 23796                                  	; 11/12/2022
 23797                                  	; 27/03/2019
 23798                                  	; ds = cs (at return from doconf)
 23799                                  
 23800                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 23801                                  ; It will either be relocated to low memory, above the DOS data structures,
 23802                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 23803                                  ; code entry points will be located in low memory. Dos_segreinit is used
 23804                                  ; to tell the DOS data where the code has been placed, and to install the
 23805                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 23806                                  ; must first initialize it in its present location and load the installable
 23807                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 23808                                  ; relocate the DOS code into HiMem.
 23809                                  ;
 23810                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 23811                                  ; to install the low memory stub (this must be done before allowing any
 23812                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 23813                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 23814                                  ; been patched.
 23815                                  
 23816                                  	; 22/10/2022 - Retro DOS v4.0
 23817                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 23818                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 23819                                  	; 11/12/2022
 23820 000006BE 803E[6C02]00            	cmp	byte [runhigh],0
 23821 000006C3 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 23822                                  
 23823                                  ;------ user chose to load high
 23824                                  
 23825                                  	; 22/10/2022
 23826                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 23827                                  	; 11/12/2022
 23828                                  	; ds = cs
 23829 000006C5 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 23830                                  
 23831                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 23832                                  	; 27/03/2019
 23833                                  	;;mov	es,[FINAL_DOS_LOCATION]
 23834                                  
 23835 000006C9 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 23836                                  	; 11/12/2022
 23837                                  	; ds = cs
 23838                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 23839 000006CB FF1E[7D02]              	call	far [dos_segreinit]
 23840                                  
 23841 000006CF EB10                    	jmp	short do_multi_pass
 23842                                  
 23843                                  ;------ User chose to load dos low
 23844                                  
 23845                                  dont_install_stub:
 23846                                  	; 22/10/2022
 23847 000006D1 31DB                    	xor	bx,bx			; M012
 23848                                  					; don't use int 21 call to alloc mem
 23849 000006D3 E8D002                  	call	MovDOSLo		; move it !
 23850                                  
 23851 000006D6 B80100                  	mov	ax,1			; dont install stub
 23852                                  	; 11/12/2022
 23853                                  	; ds = cs
 23854 000006D9 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 23855                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 23856                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 23857                                  	; 27/03/2019
 23858                                  ;do_multi_pass:
 23859                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 23860                                  
 23861                                  	; 11/12/2022
 23862                                  	; ds =cs
 23863                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 23864 000006DD FF1E[7D02]              	call	far [dos_segreinit]
 23865                                  do_multi_pass:
 23866 000006E1 E80C02                  	call	AllocFreeMem		; allocate all the free mem
 23867                                  					; & update [memhi] & [area]
 23868                                  					; start of free memory.
 23869                                  	;ifdef	dblspace_hooks
 23870                                  	;mov	bx,0			; magic backdoor to place int hooks
 23871                                  	;call	cs:MagicBackdoor
 23872                                  	;endif
 23873                                  
 23874                                  ; Now, process config.sys some more.  
 23875                                  ; Load the device drivers and install programs
 23876                                  
 23877                                  	; 22/10/2022
 23878                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 23879                                  	; 11/12/2022
 23880                                  	; ds = cs
 23881 000006E4 FE06[CD02]              	inc	byte [multi_pass_id]
 23882 000006E8 E85519                  	call	multi_pass		; load device drivers
 23883 000006EB E8762D                  	call	ShrinkUMB
 23884 000006EE E89A2D                  	call	UnlinkUMB		; unlink all UMBs	;M002
 23885                                  	; 02/11/2022
 23886                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 23887                                  	; 11/12/2022
 23888                                  	; ds = cs
 23889 000006F1 FE06[CD02]              	inc	byte [multi_pass_id]
 23890 000006F5 E84819                  	call	multi_pass		; was load ifs (now does nothing)
 23891                                  
 23892                                  	;ifdef	dblspace_hooks
 23893                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 23894                                  	;endif
 23895                                  
 23896                                  	; ds = cs
 23897                                  	
 23898 000006F8 E81806                  	call	endfile			; setup fcbs, files, buffers etc
 23899                                  
 23900                                  	;ifdef	dblspace_hooks
 23901                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 23902                                  	;endif
 23903                                  
 23904                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 23905                                  ;to device drivers. This has been moved up to this point to avoid problems 
 23906                                  ;with overlays called from installed programs
 23907                                  
 23908                                  	; 11/12/2022
 23909                                  	; ds = cs
 23910                                  
 23911                                  	;;mov	ax,Bios_Data ; 0070h
 23912                                  	;mov	ax,KERNEL_SEGMENT
 23913                                  	; 21/10/2022
 23914 000006FB B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 23915 000006FE 8EC0                    	mov	es,ax			; point ES to bios data
 23916                                  
 23917 00000700 26C606[DD07]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 23918                                  
 23919                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23920                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 23921                                  	;test	byte [cs:install_flag],1
 23922                                  	; 11/12/2022
 23923                                  	; ds = cs
 23924 00000706 F606[CE02]01            	test	byte [install_flag],1
 23925                                  	;test	byte [cs:install_flag],have_install_cmd
 23926                                  					; are there install commands?
 23927 0000070B 7407                    	jz	short dolast		; no, no need for further processing
 23928                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 23929                                  	; 11/12/2022
 23930                                  	; ds =cs
 23931 0000070D FE06[CD02]              	inc	byte [multi_pass_id]
 23932 00000711 E82C19                  	call	multi_pass		; execute install= commands
 23933                                  
 23934                                  dolast:
 23935                                  	
 23936                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 23937                                  ;  free the confbot area used for config.sys and sysinit itself.
 23938                                  
 23939                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 23940                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 23941                                  ; anything, but just set up the ROM area for suballocation (or print
 23942                                  ; a message if HiMem is not available).
 23943                                  ;
 23944                                  ; There is also this little hack for CPM style DOS calls that needs to
 23945                                  ; be done when A20 is set...
 23946                                  
 23947                                  	; 11/12/2022
 23948                                  	; ds = cs
 23949                                  
 23950                                  	; 22/10/2022
 23951                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 23952                                  	; 11/12/2022
 23953 00000714 803E[6C02]FF            	cmp	byte [runhigh],0FFh
 23954 00000719 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 23955 0000071B E83702                  	call	LoadDOSHiOrLo
 23956                                  _@@_:
 23957                                  	;cmp	byte [cs:runhigh],0	; are we running low
 23958                                  	; 11/12/2022
 23959                                  	; ds = cs
 23960 0000071E 803E[6C02]00            	cmp	byte [runhigh],0
 23961                                  	;je	short _@@@
 23962 00000723 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 23963 00000725 E82405                  	call	CPMHack			; make ffff:d0 same as 0:c0
 23964                                  _@@@:
 23965                                  
 23966                                  ; We are now done with CONFIG.SYS processing
 23967                                  
 23968                                  ConfigDone:
 23969                                  	; 12/12/2022
 23970                                  	; 22/10/2022
 23971                                  	;mov	byte [cs:donotshownum],1 
 23972                                  					; done with config.sys.
 23973                                  					; do not show line number message.
 23974                                  	;mov	es,[cs:area]
 23975                                  	; 12/12/2022
 23976                                  	; ds = cs
 23977                                  	; 27/03/2019
 23978 00000728 C606[5503]01            	mov	byte [donotshownum],1
 23979 0000072D 8E06[6803]              	mov	es,[area]
 23980                                  
 23981 00000731 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 23982 00000733 CD21                    	int	21h
 23983                                  			; DOS - 2+ - FREE MEMORY
 23984                                  			; ES = segment address of area to be freed
 23985                                  
 23986                                  	; 22/10/2022
 23987                                  	;test	word [cs:install_flag],2
 23988                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 23989                                  	;test	byte [cs:install_flag],has_installed
 23990                                  	; 11/12/2022
 23991                                  	; ds = cs
 23992 00000735 F606[CE02]02            	test	byte [install_flag],2 ; has_installed
 23993                                  	;test	byte [install_flag],has_installed
 23994 0000073A 741F                    	jz	short skip_free_sysinitbase ; no.
 23995                                  
 23996                                  ; set block from the old_area with impossible_owner_size.
 23997                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 23998                                  ; handle install= command.
 23999                                  
 24000                                  	; 12/12/2022
 24001                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 24002                                  	;push	bx
 24003                                  	
 24004                                  	; 22/10/2022
 24005                                  	;mov	es,[cs:old_area]
 24006                                  	;mov	bx,[cs:impossible_owner_size]
 24007                                  	; 12/12/2022
 24008                                  	; ds = cs
 24009 0000073C 8E06[5E03]              	mov	es,[old_area]
 24010 00000740 8B1E[6003]              	mov	bx,[impossible_owner_size]
 24011                                  	
 24012 00000744 B44A                    	mov	ah,4Ah ; SETBLOCK
 24013 00000746 CD21                    	int	21h
 24014                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 24015                                  			; ES = segment address of block to change
 24016                                  			; BX = new size in paragraphs
 24017 00000748 8CC0                    	mov	ax,es
 24018 0000074A 48                      	dec	ax
 24019 0000074B 8EC0                    	mov	es,ax			; point to arena
 24020                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 24021 0000074D 26C70601000800          	mov	word [es:1],8
 24022                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 24023 00000754 26C70608005344          	mov	word [es:8],'SD'
 24024                                  	
 24025                                  	; 12/12/2022
 24026                                  	;pop	bx
 24027                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 24028                                  
 24029                                  skip_free_sysinitbase:
 24030                                  	; 22/10/2022
 24031                                  	;cmp	byte [cs:runhigh],0
 24032                                  	; 12/12/2022
 24033                                  	; ds = cs
 24034 0000075B 803E[6C02]00            	cmp	byte [runhigh],0	
 24035 00000760 7403                    	je	short _@@@_ ; 04/07/2023
 24036                                  
 24037 00000762 E8CE03                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 24038                                  
 24039                                  ; ----------------------------------------------------------------------------
 24040                                  
 24041                                  _@@@_:
 24042                                  	; 12/12/2022
 24043                                  	; ds = cs
 24044                                  	; 22/10/2022
 24045                                  	; 27/03/2019
 24046                                  	;push	cs
 24047                                  	;pop	ds			; point DS to sysinitseg
 24048                                  
 24049                                  ; set up the parameters for command
 24050                                  
 24051                                  ;	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 24052                                  ;;ifdef	MULTI_CONFIG
 24053                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 24054                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 24055                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 24056                                  ;	; !!!
 24057                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 24058                                  ;       ; !!!
 24059                                  ;	call    disable_autoexec        ; no, we should disable it
 24060                                  ;process_autoexec:
 24061                                  ;;endif	; !!!
 24062                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 24063                                  ;	; !!!
 24064                                  
 24065                                  	; 22/10/2022 
 24066                                  	;mov     cl,[command_line]
 24067                                          ;mov     ch,0
 24068                                          ;inc     cx
 24069                                          ;mov     si,command_line	
 24070                                  	;add     si,cx
 24071                                          ;mov     byte [si],cr	; cr-terminate command line
 24072                                  
 24073                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 24074                                  	; (SYSINIT:0809h)
 24075                                  
 24076                                  	;;;;
 24077                                  
 24078                                  	; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 24079                                  	; (SYSINIT:0813h)
 24080                                  	; ds = cs
 24081                                  	; push	cs
 24082                                  	; pop	ds
 24083                                  
 24084 00000765 C606[C714]00            	mov	byte [config_cmd],0	; set special code for query_user
 24085 0000076A E84439                  	call    query_user		; to issue the AUTOEXEC prompt
 24086 0000076D 7308                    	jnc	short process_autoexec	; we should process autoexec normally
 24087                                  	; !!!
 24088 0000076F 800E[1B47]04            	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 24089                                  	; !!!
 24090 00000774 E8353A                  	call    disable_autoexec        ; no, we should disable it
 24091                                  process_autoexec:
 24092                                  	; !!!
 24093 00000777 E87D3A                  	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 24094                                  
 24095                                  	;mov     cl,[command_line]
 24096                                  	; 30/12/2022
 24097 0000077A BE[5146]                	mov	si,command_line
 24098 0000077D 8A0C                    	mov	cl,[si]
 24099 0000077F B500                    	mov     ch,0
 24100 00000781 41                      	inc     cx
 24101                                  	;mov	si,command_line
 24102 00000782 01CE                    	add     si,cx
 24103 00000784 C6040D                  	mov     byte [si],cr	; cr-terminate command line
 24104                                  	
 24105                                  	;;;;		
 24106                                  
 24107                                  ; 30/12/2022 - Retro DOS v4.2
 24108                                  %if 0
 24109                                  	;mov	si,(offset command_line+1)
 24110                                  	mov	si,command_line+1
 24111                                  	push    ds
 24112                                  	pop     es
 24113                                  	mov     di,si
 24114                                  	mov     cl,0FFh ; -1
 24115                                  _@_loop:
 24116                                  	inc     cl ; +1
 24117                                  	lodsb
 24118                                  	stosb
 24119                                  	or      al,al
 24120                                  	jnz     short _@_loop
 24121                                  	dec     di
 24122                                  	mov     al,0Dh
 24123                                  	stosb			; cr-terminate command line
 24124                                  	mov     [command_line],cl ; command line length (except CR)
 24125                                  
 24126                                  %endif
 24127                                  
 24128                                  ; ----------------------------------------------------------------------------
 24129                                  
 24130                                  ;   Once we get to this point, the above code, which is below "retry"
 24131                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 24132                                  ;   which follow....)
 24133                                  
 24134                                  retry:
 24135 00000787 BA[C345]                	mov	dx,commnd	; now pointing to file description
 24136                                  
 24137                                  ; we are going to open the command interpreter and size it as is done in
 24138                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 24139                                  ; there is not enough room for the command interpreter,exec will probably
 24140                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 24141                                  ; here to catch it. this code is not perfect (for instance .exe command
 24142                                  ; interpreters are possible) because it does its sizing based on the
 24143                                  ; assumption that the file being loaded is a .com file. it is close enough to
 24144                                  ; correctness to be usable.
 24145                                  
 24146                                  ; first, find out where the command interpreter is going to go.
 24147                                  
 24148 0000078A 52                      	push	dx		; save pointer to name
 24149 0000078B BBFFFF                  	mov	bx,0FFFFh
 24150 0000078E B448                    	mov	ah,48h	; ALLOC
 24151 00000790 CD21                            int     21h             ; get biggest piece
 24152 00000792 B448                    	mov	ah,48h	; ALLOC
 24153 00000794 CD21                    	int	21h		; second time gets it
 24154 00000796 726B                    	jc	short memerrjx	; oooops
 24155                                  
 24156 00000798 8EC0                    	mov	es,ax
 24157 0000079A B449                    	mov	ah,49h	; DEALLOC
 24158 0000079C CD21                    	int	21h		; give it right back
 24159 0000079E 89DD                    	mov	bp,bx
 24160                                  
 24161                                  ; es:0 points to block,and bp is the size of the block in para.
 24162                                  
 24163                                  ; we will now adjust the size in bp down by the size of sysinit.
 24164                                  ; we need to do this because exec might get upset if some of the exec
 24165                                  ; data in sysinit is overlayed during the exec.
 24166                                  
 24167                                  	; 22/10/2022
 24168                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 24169 000007A0 8B1E[9402]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 24170 000007A4 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 24171                                  
 24172                                  ; Note that the "config_wrkseg" environment data is a segment in
 24173                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 24174                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 24175                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 24176                                  ; we need to make sure that there's no way Exec will stomp on that data
 24177                                  ; before it can copy it, and one way to do that is to make the available
 24178                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 24179                                  ; from the "memory_size" segment value (which is typically A000h) instead
 24180                                  ; of the current sysinit CS....
 24181                                  ;
 24182                                  ; The reason I use the term "paranoid" is because this code should have
 24183                                  ; slid the data required by Exec up to the very top of memory, because as
 24184                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 24185                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 24186                                  ; consumes). Now it's just a little worse (65K or more, depending on
 24187                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 24188                                  ; is determined by the size of CONFIG.SYS.... -JTP
 24189                                  
 24190                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21, IO.SYS)
 24191                                  	; (SYSINIT:0858h)
 24192 000007A6 8B0E[C314]              	mov	cx,[config_envlen]
 24193 000007AA E303                            jcxz	no_env		; use config_wrkseg only if there's env data
 24194 000007AC A1[C514]                        mov	ax,[config_wrkseg]	
 24195                                  
 24196                                  	; 22/10/2022
 24197                                  	;mov	cx,[config_envlen]
 24198                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 24199                                          ;mov	ax,[config_wrkseg]
 24200                                  ;no_env:
 24201                                  	; 22/10/2022
 24202                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 24203                                  no_env:
 24204                                  	; 30/12/2022
 24205                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0861h)
 24206 000007AF 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 24207 000007B1 83C311                  	add	bx,11h		; add the sysinit php
 24208 000007B4 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 24209 000007B6 724B                    	jc	short memerrjx	; if there isn't even this much memory, give up
 24210                                  
 24211                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 24212 000007B8 B8003D                          mov	ax,3D00h
 24213 000007BB F9                      	stc                     ; in case of int 24
 24214 000007BC CD21                    	int	21h
 24215 000007BE 7270                    	jc	short comerr	; ooops
 24216                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 24217                                  			; DS:DX -> ASCIZ filename
 24218                                  			; AL = access mode
 24219                                  			; 0 - read
 24220                                  	; 22/10/2022
 24221                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 24222 000007C0 89C3                            mov     bx,ax           ; handle in bx
 24223                                  
 24224                                  ;   If the standard command interpreter is being used, verify it is correct
 24225                                  
 24226                                  	; 30/12/2022 - Retro DOS v4.2
 24227                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:0874h)
 24228 000007C2 803E[C045]00            	cmp	byte [newcmd],0	; was a new shell selected?
 24229 000007C7 7518                    	jne	short skip_validation ; yes
 24230 000007C9 BA[8307]                	mov	dx,retry-4
 24231 000007CC B90400                  	mov	cx,4		;
 24232 000007CF B43F                    	mov	ah,READ		;
 24233 000007D1 CD21                    	int	21h		;
 24234 000007D3 803E[8307]E9            	cmp	byte [retry-4],0E9h
 24235 000007D8 7556                    	jne	short comerr
 24236                                  	; 20/04/2019 - Retro DOS v4.0
 24237                                  	; 30/12/2022 
 24238                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 24239                                  				; .. COMMAND.COM Version 6.20 (14h&0Fh)	
 24240 000007DA 803E[8607]66            	cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 24241 000007DF 754F                    	jne	short comerr	;
 24242                                  
 24243                                  	; 22/10/2022
 24244                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 24245                                  	;jne	short skip_validation ; yes
 24246                                  	;mov	dx,retry-4
 24247                                  	;mov	cx,4		;
 24248                                  	;mov	ah,READ		;
 24249                                  	;int	21h		;
 24250                                  	;cmp	byte [retry-4],0E9h
 24251                                  	;jne	short comerr
 24252                                  	;; 20/04/2019 - Retro DOS v4.0
 24253                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 24254                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 24255                                  	;jne	short comerr	;
 24256                                  
 24257                                  ;skip_validation:
 24258                                  	; 22/10/2022
 24259                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 24260                                  skip_validation:
 24261                                  	; 30/12/2022
 24262                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0893h)
 24263 000007E1 31C9                    	xor	cx,cx
 24264 000007E3 31D2                    	xor	dx,dx
 24265                                  	;mov	ax,(LSEEK<<8)|2
 24266 000007E5 B80242                  	mov	ax,4202h
 24267 000007E8 F9                      	stc			;in case of int 24
 24268 000007E9 CD21                    	int	21h		; get file size in dx:ax
 24269 000007EB 7243                    	jc	short comerr
 24270                                  				; convert size in dx:ax to para in ax
 24271 000007ED 83C00F                  	add	ax,15		; round up size for conversion to para
 24272 000007F0 83D200                  	adc	dx,0
 24273 000007F3 E86C04                  	call	off_to_para
 24274 000007F6 B10C                    	mov	cl,12
 24275 000007F8 D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 24276 000007FA 09D0                    	or	ax,dx		; ax is now # of para for file
 24277 000007FC 83C010                  	add	ax,10h		; 100h byte php
 24278 000007FF 39E8                    	cmp	ax,bp		; will command fit in available mem?
 24279 00000801 7208                    	jb	short okld	; jump if yes.
 24280                                  
 24281                                  ; 30/12/2022
 24282                                  %if 0
 24283                                  	; 22/10/2022
 24284                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 24285                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 24286                                  	; 02/11/2022
 24287                                  	;jmp	mem_err
 24288                                  	; 11/12/2022
 24289                                  	; ds = cs
 24290                                  	jmp	mem_err2
 24291                                  %endif
 24292                                  	; 30/12/2022
 24293                                  	; (MSDOS 6.21, IO.SYS, SYSINIT:08B5h)
 24294                                  memerrjx:
 24295 00000803 BA[9F4B]                	mov	dx,badmem 	; "Configuration too large for memory"
 24296 00000806 E8E03C                  	call	print
 24297 00000809 EB3D                    	jmp     short continue
 24298                                  
 24299                                  okld:
 24300 0000080B B43E                    	mov	ah,3Eh ; CLOSE
 24301 0000080D CD21                    	int	21h		; close file
 24302                                  
 24303                                  	; 22/10/2022
 24304 0000080F 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 24305                                  
 24306                                  	; 24/03/2019
 24307                                  
 24308 00000810 0E                      	push	cs		; point es to sysinitseg
 24309 00000811 07                      	pop	es
 24310 00000812 BB[BF02]                        mov     bx,COMEXE	; point to exec block
 24311                                  	; 22/10/2022
 24312                                  	;pop	dx              ; recover pointer to name
 24313                                  
 24314                                  ;;ifdef	MULTI_CONFIG
 24315                                  
 24316                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 24317                                  ;   there will be data if there were any valid SET commands and/or if a menu
 24318                                  ;   selection was made (in which case the CONFIG environment variable will be
 24319                                  ;   set to that selection).
 24320                                  
 24321                                  	; 23/10/2022
 24322                                  	;mov	cx,[config_envlen]
 24323                                  	;jcxz	no_envdata
 24324                                          ;mov	cx,[config_wrkseg]
 24325                                  ;no_envdata:
 24326                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 24327                                  	;mov	[bx],cx
 24328                                  
 24329                                  ;;endif	;MULTI_CONFIG
 24330                                  
 24331                                  	; 30/12/2022 - Retro DOS v4.2
 24332                                  	; (MSDOS 6.21 IO.SYS SYSINIT:08C7h)
 24333 00000815 8B0E[C314]              	mov	cx,[config_envlen]
 24334 00000819 E304                    	jcxz	no_envdata
 24335 0000081B 8B0E[C514]                      mov	cx,[config_wrkseg]
 24336                                  no_envdata:
 24337                                  	;mov	[bx+EXEC0.ENVIRON],cx
 24338 0000081F 890F                    	mov	[bx],cx	
 24339                                  	
 24340                                  	; 23/10/2022
 24341                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 24342                                  
 24343                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 24344 00000821 8C4F04                  	mov	[bx+4],cs
 24345                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 24346 00000824 8C4F08                  	mov	[bx+8],cs
 24347                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 24348 00000827 8C4F0C                  	mov	[bx+12],cs
 24349                                  
 24350                                  	;mov	ax,(EXEC<<8) + 0
 24351                                  	; 23/10/2022
 24352                                  	;xor	ax,ax
 24353                                  	;mov	ah,4Bh
 24354                                  	; 04/07/2023
 24355                                  	;mov	ax,4B00h
 24356 0000082A B8004B                  	mov	ax,(EXEC<<8)
 24357                                  
 24358 0000082D F9                      	stc                     ; in case of int 24
 24359 0000082E CD21                            int     21h             ; go start up command
 24360                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 24361                                  			; DS:DX -> ASCIZ filename
 24362                                  			; ES:BX -> parameter block
 24363                                  			; AL = subfunc: load & execute program
 24364                                  	;push	cs
 24365                                  	;pop	ds
 24366                                  
 24367                                  	; 23/10/2022
 24368                                  	;push	dx		; push to balance fall-through pop
 24369                                  
 24370                                  ; note fall through if exec returns (an error)
 24371                                  comerr:
 24372                                  	; 23/10/2022
 24373                                  ;;ifdef	MULTI_CONFIG
 24374                                  	;cmp	byte [commnd4],0
 24375                                  	;je	short comerr2	; all defaults exhausted, print err msg
 24376                                  	;cmp	byte [newcmd],0
 24377                                  	;je	short continue	; don't print err msg for defaults just yet
 24378                                  ;comerr2:
 24379                                  ;;endif
 24380                                  
 24381                                  	; 30/12/2022 - Retro DOS v4.2
 24382 00000830 0E                      	push	cs
 24383 00000831 1F                      	pop	ds
 24384 00000832 803E[3446]00            	cmp	byte [commnd4],0
 24385 00000837 7407                    	je	short comerr2	; all defaults exhausted, print err msg
 24386 00000839 803E[C045]00            	cmp	byte [newcmd],0
 24387 0000083E 7408                    	je	short continue	; don't print err msg for defaults just yet
 24388                                  comerr2:
 24389 00000840 52                      	push	dx ; 30/12/2022
 24390                                  
 24391                                  	; 23/10/2022
 24392 00000841 BA[1B4B]                        mov     dx,badcom	; want to print command error
 24393 00000844 E8763C                  	call	badfil
 24394                                  	
 24395 00000847 5A                      	pop	dx  ; 30/12/2022
 24396                                  continue:
 24397                                  	; 23/10/2022
 24398                                  	;pop	dx
 24399                                  
 24400                                  ; 30/12/2022
 24401                                  %if 0
 24402                                  
 24403                                  ;;ifndef MULTI_CONFIG
 24404                                  	;jmp	stall
 24405                                  	; 24/10/2022
 24406                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 24407                                  	jmp	short stall
 24408                                  ;;else
 24409                                  
 24410                                  %endif
 24411                                  	
 24412                                  ; 30/12/2022 (MSDOS 6.21 SYSINIT, Retro DOS v4.2)
 24413                                  ;%if 1
 24414                                  ; 23/10/2022 (MSDOS 5.0 SYSINIT, Retrodos v4.0)
 24415                                  ;%if 0	
 24416 00000848 B419                    	mov	ah,GET_DEFAULT_DRIVE ; 19h
 24417 0000084A CD21                    	int	21h             ;
 24418 0000084C 0441                    	add	al,'A'          ;
 24419 0000084E 88C2                    	mov	dl,al           ; DL == default drive letter
 24420 00000850 BE[0346]                	mov	si,commnd2
 24421 00000853 803E[C045]00            	cmp	byte [newcmd],0 ; if a SHELL= was given
 24422 00000858 7505                    	jne	short do_def2	; then try the 2nd alternate;
 24423 0000085A C60400                  	mov	byte [si],0	; otherwise, the default SHELL= was tried,
 24424 0000085D EB05                    	jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 24425                                  do_def2:			
 24426 0000085F 803C00                  	cmp	byte [si],0	; has 2nd alternate been tried?
 24427 00000862 7554                            jne	short do_alt    ; no
 24428                                  do_def3:
 24429 00000864 BE[1446]                	mov	si,commnd3
 24430 00000867 803C00                  	cmp	byte [si],0	; has 3rd alternate been tried?
 24431 0000086A 754C                    	jne	short do_alt	; no
 24432 0000086C BE[3446]                	mov	si,commnd4
 24433 0000086F 803C00                  	cmp	byte [si],0	; has 4th alternate been tried?
 24434 00000872 7544                    	jne	short do_alt	; no
 24435 00000874 52                      	push	dx              ;
 24436 00000875 BA[8A4D]                	mov	dx,badcomprmpt
 24437 00000878 E86E3C                  	call	print		;
 24438 0000087B 5A                      	pop	dx              ; recover default drive letter in DL
 24439                                  request_input:			;
 24440 0000087C B402                    	mov	ah,STD_CON_OUTPUT
 24441 0000087E CD21                    	int	21h             ;
 24442 00000880 52                      	push	dx              ;
 24443 00000881 B23E                    	mov	dl,'>'          ;
 24444 00000883 CD21                    	int	21h             ;
 24445 00000885 8A1E[C245]              	mov	bl,[tmplate+1]	;
 24446 00000889 B700                    	mov	bh,0            ;
 24447 0000088B C687[C345]0D            	mov	byte [commnd+bx],0Dh
 24448 00000890 BA[C145]                	mov	dx,tmplate
 24449 00000893 B40A                    	mov	ah,STD_CON_STRING_INPUT
 24450 00000895 CD21                    	int	21h             ; read a line of input
 24451 00000897 BA[C64A]                	mov	dx,crlfm	;
 24452 0000089A E84C3C                  	call	print           ;
 24453 0000089D 5A                      	pop	dx              ;
 24454 0000089E 8A1E[C245]              	mov	bl,[tmplate+1]	;
 24455 000008A2 08DB                    	or	bl,bl           ; was anything typed?
 24456 000008A4 74D6                    	jz	short request_input ;
 24457 000008A6 C606[C045]01            	mov	byte [newcmd],1 ; disable validation for user-specified binaries
 24458 000008AB C687[C345]00            	mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 24459 000008B0 C706[5146]000D          	mov	word [command_line],0D00h
 24460 000008B6 EB35                    	jmp	short do_exec   ;
 24461                                  do_alt:
 24462 000008B8 1E                      	push	ds
 24463 000008B9 07                      	pop	es
 24464 000008BA C606[C045]00            	mov	byte [newcmd],0 ; force validation for alternate binaries
 24465 000008BF BF[C345]                	mov	di,commnd	;
 24466                                  do_alt1:
 24467 000008C2 AC                      	lodsb			; copy the alternate, zapping it as we go,
 24468 000008C3 C644FF00                	mov	byte [si-1],0	; so that we know it's been tried
 24469 000008C7 AA                      	stosb 			;
 24470 000008C8 08C0                    	or	al,al		;
 24471 000008CA 75F6                    	jnz	short do_alt1	;
 24472 000008CC BF[5146]                	mov	di,command_line
 24473 000008CF 807C023A                	cmp	byte [si+2],':'
 24474 000008D3 7503                    	jne	short do_alt2	;
 24475 000008D5 885401                  	mov	[si+1],dl	; stuff default drive into alt. command line
 24476                                  do_alt2:			;
 24477 000008D8 AC                      	lodsb			;
 24478 000008D9 AA                      	stosb			;
 24479 000008DA 08C0                    	or	al,al           ;
 24480 000008DC 75FA                    	jnz	short do_alt2   ;
 24481 000008DE C645FF0D                	mov	byte [di-1],cr
 24482                                  
 24483                                  ;;   Last but not least, see if we need to call disable_autoexec
 24484                                  
 24485                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 24486                                  	;cmp	[command_line-1],0
 24487                                          ;jne	short do_exec   ;
 24488                                          ;mov	[command_line-1],'/'
 24489                                  	;call	disable_autoexec ;
 24490                                  
 24491                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 24492 000008E2 C606[1147]00            	mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 24493 000008E7 E8C238                  	call	disable_autoexec
 24494 000008EA E80A39                  	call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 24495                                  do_exec:
 24496 000008ED E997FE                  	jmp	retry		;
 24497                                  
 24498                                  ;;endif	;MULTI_CONFIG
 24499                                  
 24500                                  ;%endif ; 23/10/2022 (MSDOS 5.0 SYSINIT)
 24501                                  ;%endif ; 30/12/2022 (MSDOS 6.21 SYSINIT)
 24502                                  
 24503                                  ; 24/03/2019 - Retro DOS v4.0
 24504                                  
 24505                                  ; ----------------------------------------------------------------------
 24506                                  ; procedure : AllocFreeMem
 24507                                  ;
 24508                                  ; Allocate Max memory from DOS to find out where to load DOS.
 24509                                  ; DOS is at temporary location when this call is being made
 24510                                  ;
 24511                                  ; Inputs : None
 24512                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 24513                                  ;	   [area] & [memhi] set to the para value of the start of the
 24514                                  ;	   free memory.
 24515                                  ;
 24516                                  ; Uses   : AX, BX
 24517                                  ;
 24518                                  ; ----------------------------------------------------------------------
 24519                                  	
 24520                                  	; 30/12/2022 - Retro DOS v4.2
 24521                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:09A2h)
 24522                                  
 24523                                  	; 23/10/2022
 24524                                  AllocFreeMem:
 24525 000008F0 BBFFFF                  	mov	bx,0FFFFh
 24526 000008F3 B448                    	mov	ah,48h ; ALLOC
 24527 000008F5 CD21                    	int	21h			; first time fails
 24528 000008F7 B448                    	mov	ah,48h ; ALLOC
 24529 000008F9 CD21                    	int	21h			; second time gets it
 24530                                  	; 11/12/2022
 24531                                  	; ds = cs
 24532                                  	;mov	[cs:area],ax
 24533                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 24534 000008FB A3[6803]                	mov	[area],ax
 24535 000008FE A3[6403]                	mov	[memhi],ax		; memhi:memlo now points to			
 24536 00000901 C3                      	retn				; start of free memory
 24537                                  				
 24538                                  	; include msbio.cl6
 24539                                  ; ----------------------------------------------------------------------
 24540                                  DOSLOMSG:
 24541 00000902 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 24541 0000090B 7661696C61626C653A-
 24541 00000914 204C6F6164696E6720-
 24541 0000091D 444F53206C6F770D0A-
 24541 00000926 24                 
 24542                                  FEmsg:
 24543 00000927 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 24543 00000930 6F723A2043616E6E6F-
 24543 00000939 7420616C6C6F636174-
 24543 00000942 65204D656D6F727920-
 24543 0000094B 666F7220444F530D0A-
 24543 00000954 24                 
 24544                                  
 24545                                  ; ----------------------------------------------------------------------
 24546                                  ;
 24547                                  ; procedure : LoadDOSHiOrLo
 24548                                  ;
 24549                                  ;		Tries to move DOS into HMA. If it fails then loads
 24550                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 24551                                  ;		moved; this just tries to allocate the HMA, and prints
 24552                                  ;		a message if this is not possible.
 24553                                  ;
 24554                                  ; ----------------------------------------------------------------------
 24555                                  
 24556                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24557                                  LoadDOSHiOrLo:
 24558                                  	; 27/03/2019 - Retro DOS v4.0
 24559                                  	; ds = cs
 24560 00000955 E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 24561                                  	;jc	short LdngLo		; If that don't work...
 24562                                  	;retn
 24563                                  	; 18/12/2022
 24564 00000958 731C                    	jnc	short LoadDosHi_ok
 24565                                  LdngLo:
 24566                                  	; 23/10/2022
 24567                                  	;push	cs
 24568                                  	;pop	ds
 24569                                  	; 11/12/2022
 24570                                  	; ds = cs
 24571 0000095A B409                    	mov	ah,9
 24572 0000095C BA[0209]                	mov	dx,DOSLOMSG		; inform user that we are
 24573 0000095F CD21                    	int	21h			; loading low
 24574                                  
 24575                                  ;ifndef ROMDOS
 24576                                  	; actually move the dos, and reinitialize it.
 24577                                  
 24578 00000961 BB0100                  	mov	bx,1				; M012
 24579                                  						;  use int 21 alloc for mem
 24580 00000964 E83F00                  	call	MovDOSLo
 24581                                  	; 11/12/2022
 24582                                  	; ds = cs
 24583                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 24584                                  	; 23/10/2022
 24585 00000967 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 24586                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 24587                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 24588 0000096B 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 24589                                  	; 11/12/2022
 24590                                  	; ds = cs
 24591                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 24592 0000096D FF1E[7D02]              	call	far [dos_segreinit] ; 27/03/2019
 24593                                  	
 24594                                  ;endif ; ROMDOS
 24595                                  	; 23/10/2022
 24596                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 24597                                  	; 11/12/2022
 24598                                  	; ds = cs
 24599 00000971 C606[6C02]00            	mov	byte [runhigh],0 ; 27/03/2019
 24600                                  LoadDosHi_ok:	; 18/12/2022
 24601 00000976 C3                      	retn
 24602                                  
 24603                                  ; ----------------------------------------------------------------------
 24604                                  ;
 24605                                  ; procedure : TryToMovDOSHi
 24606                                  ;
 24607                                  ;		This tries to move DOS into HMA.
 24608                                  ;		Returns CY if it failed.
 24609                                  ;		If it succeeds returns with carry cleared.
 24610                                  ;
 24611                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 24612                                  ;		the A20 switching code in the low mem stub to be installed.
 24613                                  ; 
 24614                                  ; ----------------------------------------------------------------------
 24615                                  
 24616                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24617                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 24618                                  TryToMovDOSHi:
 24619                                  	; 11/12/2022
 24620                                  	; 27/03/2019 - Retro DOS v4.0
 24621                                  	; ds = cs
 24622 00000977 E81300                  	call	MovDOSHi
 24623 0000097A 7210                    	jc	short ttldhx
 24624                                  
 24625                                  ;ifndef ROMDOS
 24626                                  	; 23/10/2022
 24627                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 24628                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 24629                                  	; 11/12/2022
 24630                                  	; ds = cs
 24631 0000097C 8E06[7302]              	mov	es,[CURRENT_DOS_LOCATION]
 24632                                  ;else
 24633                                  ;	..
 24634                                  ;endif ; ROMDOS
 24635                                  
 24636                                  	; 11/12/2022
 24637                                  	; ds = cs
 24638 00000980 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 24639                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 24640 00000982 FF1E[7D02]              	call	far [dos_segreinit]
 24641                                  	;mov	byte [cs:runhigh],1
 24642 00000986 C606[6C02]01            	mov	byte [runhigh],1
 24643 0000098B F8                      	clc
 24644                                  ttldhx:
 24645 0000098C C3                      	retn
 24646                                  
 24647                                  ; ----------------------------------------------------------------------
 24648                                  ;
 24649                                  ; procedure : MovDOSHi
 24650                                  ;
 24651                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 24652                                  ;		For ROMDOS, the code is not actually moved, but the
 24653                                  ;		HMA is allocated and prepared for sub-allocation.
 24654                                  ;
 24655                                  ;		Returns : CY if it failed
 24656                                  ;
 24657                                  ; ----------------------------------------------------------------------
 24658                                  
 24659                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24660                                  MovDOSHi:
 24661                                  	; 14/05/2019
 24662                                  	; 27/03/2019 - Retro DOS v4.0
 24663                                  	; ds = cs
 24664 0000098D E8D700                  	call	AllocHMA
 24665 00000990 7213                    	jc	short mdhx			; did we get HMA?
 24666 00000992 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 24667 00000995 8EC0                    	mov	es,ax
 24668                                  
 24669                                  ;ifndef ROMDOS
 24670                                  	; actually move the BIOS and DOS
 24671                                  
 24672                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 24673                                  	; 24/03/2019
 24674                                  	
 24675                                  	; 23/10/2022
 24676 00000997 E83200                  	call	MovBIOS				; First move BIOS into HMA
 24677                                  
 24678                                  	; ES:DI points to free HMA after BIOS
 24679                                  	
 24680                                  	; 14/05/2019
 24681                                  	; 24/03/2019 - Retro DOS v4.0
 24682                                  	;xor	di,di
 24683                                  	
 24684                                  	; 23/10/2022
 24685                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 24686                                  	; 11/12/2022
 24687                                  	; ds = cs
 24688 0000099A 8B0E[8302]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 24689 0000099E E81100                  	call	MovDOS				; and move it
 24690                                  
 24691                                  	; ES:DI points to free HMA after DOS
 24692                                  ;else
 24693                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 24694                                  ;
 24695                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 24696                                  ;
 24697                                  ;endif ; ROMDOS
 24698                                  
 24699 000009A1 E85F02                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 24700 000009A4 F8                      	clc
 24701                                  mdhx:
 24702 000009A5 C3                      	retn
 24703                                  
 24704                                  ; ----------------------------------------------------------------------
 24705                                  ;
 24706                                  ; procedure : MovDOSLo
 24707                                  ;
 24708                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 24709                                  ;
 24710                                  ; ----------------------------------------------------------------------
 24711                                  
 24712                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24713                                  
 24714                                  ;ifndef ROMDOS
 24715                                  
 24716                                  MovDOSLo:
 24717                                  	; 14/05/2019
 24718                                  	; 27/03/2019 - Retro DOS v4.0
 24719                                  	; ds = cs
 24720 000009A6 E84600                  	call	AllocMemForDOS			; incestuosly!!!
 24721                                  	
 24722                                  	; 23/10/2022
 24723                                  	; 14/05/2019
 24724                                  	;inc	ax  ; skip MCB
 24725                                  	
 24726 000009A9 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 24727                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 24728                                  	; 24/03/2019
 24729                                  	
 24730                                  	; 23/10/2022
 24731 000009AB E81E00                  	call	MovBIOS
 24732                                  
 24733                                  ;------ ES:DI points memory immediately after BIOS
 24734                                  
 24735                                  	; 14/05/2019
 24736                                  	; NOTE: 
 24737                                  	;     Order of (RETRO) DOS kernel sections at memory:
 24738                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 24739                                  
 24740                                  	; 24/03/2019 - Retro DOS v4.0
 24741                                  	;xor	di,di	
 24742                                  
 24743                                  	; 23/10/2022
 24744                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 24745                                  	; 11/12/2022
 24746                                  	; ds = cs
 24747 000009AE 8B0E[8102]              	mov	cx,[lo_doscod_size]		; low
 24748                                  	;call	MovDOS
 24749                                  	;retn
 24750                                  	; 11/12/2022
 24751                                  	;jmp	short MovDOS
 24752                                  
 24753                                  ;endif ; ROMDOS
 24754                                  
 24755                                  ; 11/12/2022
 24756                                  
 24757                                  ; ----------------------------------------------------------------------
 24758                                  ;
 24759                                  ; procedure : MovDOS
 24760                                  ;
 24761                                  ;		Moves DOS code into requested area
 24762                                  ;
 24763                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 24764                                  ;	     CX    - size of DOS code to be moved
 24765                                  ;
 24766                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 24767                                  ;
 24768                                  ; ----------------------------------------------------------------------
 24769                                  
 24770                                  	; 11/12/2022
 24771                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24772                                  
 24773                                  ;ifndef ROMDOS
 24774                                  
 24775                                  MovDOS:
 24776                                  	; 14/05/2019
 24777                                  	; 27/03/2019 - Retro DOS v4.0
 24778                                  
 24779                                  	; 11/12/2022
 24780                                  	; ds = cs
 24781                                  
 24782                                  	; 23/10/2022
 24783                                  	;push	ds ; *//
 24784                                  	
 24785 000009B2 06                      	push	es
 24786 000009B3 57                      	push	di
 24787                                  
 24788                                  	; 11/12/2022
 24789 000009B4 1E                      	push	ds ; *// ; 11/12/202
 24790                                  
 24791                                  	; 29/04/2019
 24792 000009B5 C536[7102]              	lds	si,[dosinit] ; 11/12/2022
 24793                                  	; 23/10/2022
 24794                                  	;lds	si,[cs:dosinit]
 24795                                  	; 03/09/2023
 24796 000009B9 89F0                    	mov	ax,si
 24797                                  
 24798 000009BB F3A4                    	rep	movsb
 24799                                  
 24800 000009BD 1F                      	pop	ds ; *// ; 11/12/2022
 24801                                  
 24802 000009BE 5B                      	pop	bx				; get back offset into which
 24803                                  						;  DOS was moved
 24804                                  	; 03/09/2023
 24805                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 24806                                  						;  wants to run
 24807                                  	; 03/09/2023
 24808                                  	;mov	ax,[dosinit]
 24809                                  	; ax = [dosinit]
 24810                                  
 24811 000009BF 29D8                    	sub	ax,bx
 24812 000009C1 E89E02                  	call	off_to_para
 24813 000009C4 5B                      	pop	bx				; get the segment at which
 24814                                  						;  we moved DOS into
 24815 000009C5 29C3                    	sub	bx,ax				; Adjust segment
 24816                                  	
 24817                                  	; 11/12/2022
 24818                                  	; 23/10/2022
 24819                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 24820                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 24821                                  	; 11/12/2022
 24822 000009C7 891E[7302]              	mov	[CURRENT_DOS_LOCATION],bx
 24823                                  		
 24824                                  	; 27/03/2019
 24825                                  	;pop	ds ; *//
 24826                                  	; ds = cs
 24827                                  	;mov	[FINAL_DOS_LOCATION],bx
 24828                                  
 24829 000009CB C3                      	retn
 24830                                  
 24831                                  ;endif ;ROMDOS
 24832                                  
 24833                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 24834                                  ; 24/03/2019
 24835                                  ; ----------------------------------------------------------------------
 24836                                  ;
 24837                                  ; procedure : MovBIOS
 24838                                  ;
 24839                                  ;		Moves BIOS code into requested segment
 24840                                  ;
 24841                                  ;	In : ES - segment to which BIOS is to be moved
 24842                                  ;		  ( it moves always into offset BCode_Start)
 24843                                  ;
 24844                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 24845                                  ;
 24846                                  ; ----------------------------------------------------------------------
 24847                                  
 24848                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24849                                  
 24850                                  ;ifndef ROMDOS
 24851                                  
 24852                                  MovBIOS: ; proc	near
 24853                                  	; 11/12/2022
 24854 000009CC 1E                      	push	ds ; ds = cs	
 24855                                  	;
 24856                                  	; 23/10/2022
 24857 000009CD 2E8E1E[8902]            	mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 24858                                  	;mov	si,BCODE_START ; mov si,30h
 24859                                  	; 09/12/2022
 24860 000009D2 BE[3000]                	mov	si,BCODESTART
 24861 000009D5 89F7                    	mov	di,si
 24862 000009D7 B9801D                  	mov	cx,BCODE_END ; mov cx,1A60h
 24863 000009DA 29F1                    	sub	cx,si				; size of BIOS
 24864 000009DC D1E9                    	shr	cx,1				; Both the labels are para
 24865                                  						;  aligned
 24866 000009DE F3A5                    	rep	movsw
 24867                                  	
 24868                                  	; 11/12/2022
 24869 000009E0 1F                      	pop	ds ; ds = cs
 24870                                  	;
 24871 000009E1 06                      	push	es
 24872 000009E2 57                      	push	di				; save end of BIOS
 24873 000009E3 8CC0                    	mov	ax,es
 24874                                  	;
 24875                                  	; 11/12/2022
 24876                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 24877                                  	;;call	dword ptr cs:_seg_reinit_ptr
 24878                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 24879                                  	; ds = cs
 24880 000009E5 A3[8403]                	mov	[BCodeSeg],ax
 24881 000009E8 FF1E[8702]              	call	far [seg_reinit_ptr]
 24882                                  	;
 24883 000009EC 5F                      	pop	di
 24884 000009ED 07                      	pop	es				; get back end of BIOS
 24885 000009EE C3                      	retn
 24886                                  
 24887                                  ;MovBIOS endp
 24888                                  
 24889                                  ;endif ; ROMDOS
 24890                                  
 24891                                  ; 11/12/2022
 24892                                  %if 0
 24893                                  
 24894                                  ; 24/03/2019
 24895                                  
 24896                                  ; ----------------------------------------------------------------------
 24897                                  ;
 24898                                  ; procedure : MovDOS
 24899                                  ;
 24900                                  ;		Moves DOS code into requested area
 24901                                  ;
 24902                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 24903                                  ;	     CX    - size of DOS code to be moved
 24904                                  ;
 24905                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 24906                                  ;
 24907                                  ; ----------------------------------------------------------------------
 24908                                  
 24909                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24910                                  
 24911                                  ;ifndef ROMDOS
 24912                                  
 24913                                  MovDOS:
 24914                                  	; 14/05/2019
 24915                                  	; 27/03/2019 - Retro DOS v4.0
 24916                                  
 24917                                  	; 11/12/2022
 24918                                  	; ds = cs
 24919                                  
 24920                                  	; 23/10/2022
 24921                                  	;push	ds ; *//
 24922                                  	
 24923                                  	push	es
 24924                                  	push	di
 24925                                  
 24926                                  	; 11/12/2022
 24927                                  	push	ds ; *// ; 11/12/202
 24928                                  
 24929                                  	; 29/04/2019
 24930                                  	lds	si,[dosinit] ; 11/12/2022
 24931                                  	; 23/10/2022
 24932                                  	;lds	si,[cs:dosinit]
 24933                                  	; 03/09/2023
 24934                                  	mov	ax,si
 24935                                  
 24936                                  	rep	movsb
 24937                                  
 24938                                  	pop	ds ; *// ; 11/12/2022
 24939                                  
 24940                                  	pop	bx				; get back offset into which
 24941                                  						;  DOS was moved
 24942                                  	;mov	ax,[dosinit] ; 03/09/2023
 24943                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 24944                                  						;  wants to run
 24945                                  	sub	ax,bx
 24946                                  	call	off_to_para
 24947                                  	pop	bx				; get the segment at which
 24948                                  						;  we moved DOS into
 24949                                  	sub	bx,ax				; Adjust segment
 24950                                  	
 24951                                  	; 11/12/2022
 24952                                  	; 23/10/2022
 24953                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 24954                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 24955                                  	; 11/12/2022
 24956                                  	mov	[CURRENT_DOS_LOCATION],bx
 24957                                  		
 24958                                  	; 27/03/2019
 24959                                  	;pop	ds ; *//
 24960                                  	; ds = cs
 24961                                  	;mov	[FINAL_DOS_LOCATION],bx
 24962                                  
 24963                                  	retn
 24964                                  
 24965                                  ;endif ;ROMDOS
 24966                                  
 24967                                  %endif
 24968                                  
 24969                                  ; ----------------------------------------------------------------------
 24970                                  ;
 24971                                  ; procedure : AllocMemForDOS
 24972                                  ;
 24973                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 24974                                  ;
 24975                                  ;	Out : AX - seg of allocated memoryblock
 24976                                  ;
 24977                                  ; ----------------------------------------------------------------------
 24978                                  
 24979                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24980                                  
 24981                                  ;ifndef ROMDOS
 24982                                  
 24983                                  AllocMemForDOS:
 24984                                  	; 11/12/2022
 24985                                  	; 14/05/2019
 24986                                  	; 27/03/2019 - Retro DOS v4.0
 24987                                  	; ds = cs
 24988                                  	;mov	ax,BCode_end
 24989                                  	;sub	ax,BCode_start		; BIOS code size
 24990                                  	; 23/10/2022
 24991 000009EF B8801D                  	mov	ax,BCODE_END ; 1A60h	; 1A70h for MSDOS 6.21
 24992                                  					; 30/12/2022
 24993                                  	;sub	ax,BCODE_START ; 30h
 24994                                  	; 09/12/2022
 24995 000009F2 2D[3000]                	sub	ax,BCODESTART 
 24996                                  	; 24/03/2019 - Retro DOS v4.0 
 24997                                  	; 02/11/2022
 24998                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 24999                                  	; 11/12/2022
 25000                                  	; ds = cs
 25001 000009F5 0306[8102]              	add	ax,[lo_doscod_size]
 25002 000009F9 83C00F                  	add	ax,15
 25003 000009FC E86302                  	call	off_to_para			; convert to para
 25004                                  	; 23/10/2022
 25005                                  	; 14/05/2019
 25006                                  	;inc	ax ; + 1 paragraph for MCB
 25007 000009FF 09DB                    	or	bx,bx				; M012
 25008 00000A01 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 25009 00000A03 741A                    	jz	short update_arena		; M012
 25010 00000A05 B448                    	mov	ah,48h				; request DOS
 25011 00000A07 CD21                    	int	21h
 25012 00000A09 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 25013                                   	; 23/10/2022
 25014                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 25015 00000A0B 83E803                  	sub	ax,3				; Take care ORG 30h of
 25016                                  						;  BIOS code
 25017 00000A0E 8EC0                    	mov	es,ax
 25018                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 25019                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 25020                                  	; 14/05/2019
 25021                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 25022                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 25023                                  	; 23/10/2022
 25024 00000A10 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 25025 00000A17 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 25026                                  
 25027 00000A1E C3                      	retn
 25028                                  
 25029                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 25030                                  ;	  using DOS itself causes an arena to be generated.
 25031                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 25032                                  ;	  assume that the device drivers are loaded into
 25033                                  ;	  the first arena. For this reason, MagicDrv's
 25034                                  ;	  main device driver header arena is manually
 25035                                  ;	  truncated from the arena chain, and the space
 25036                                  ;	  for DOS is allocated using the following
 25037                                  ;	  simple code, which also assumes that the
 25038                                  ;	  first arena is the free one where DOS's low
 25039                                  ;	  stub will go.
 25040                                  ;
 25041                                  ; M012 : BEGIN
 25042                                  
 25043                                  	; 23/10/2022
 25044                                  update_arena:
 25045 00000A1F 1E                      	push	ds ; ds = cs
 25046 00000A20 57                      	push	di
 25047 00000A21 51                      	push	cx
 25048 00000A22 52                      	push	dx
 25049                                  	; 23/10/2022
 25050                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 25051                                  	; 11/12/2022
 25052                                  	; ds = cs 
 25053 00000A23 C53E[6D02]              	lds	di,[DOSINFO] ; 27/03/2019	
 25054 00000A27 4F                      	dec	di
 25055 00000A28 4F                      	dec	di				; Arena head is immediately
 25056                                  						;  before sysvar
 25057 00000A29 8E05                    	mov	es,[di]				; es = arena head
 25058                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 25059 00000A2B 268B0E0300              	mov	cx,[es:3]
 25060 00000A30 39D9                    	cmp	cx,bx				; is it sufficient ?
 25061 00000A32 7227                    	jb	short FatalErr			; no, fatal error
 25062                                  
 25063                                  	;mov	dl,[es:ARENA.SIGNATURE]
 25064 00000A34 268A160000              	mov	dl,[es:0]
 25065 00000A39 8CC0                    	mov	ax,es
 25066 00000A3B 01D8                    	add	ax,bx				; ax = new arena head
 25067 00000A3D 8905                    	mov	[di],ax				; store it in DOS data area
 25068 00000A3F 8ED8                    	mov	ds,ax
 25069                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 25070 00000A41 88160000                	mov	[0],dl
 25071                                  	;mov	word [ARENA.OWNER],0		; free
 25072 00000A45 C70601000000            	mov	word [1],0
 25073 00000A4B 29D9                    	sub	cx,bx				; size of the new block
 25074                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 25075 00000A4D 890E0300                	mov	[3],cx
 25076 00000A51 8CC0                    	mov	ax,es				; return seg to the caller
 25077                                  	; 23/10/2022
 25078                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 25079 00000A53 83E803                  	sub	ax,3				;  BIOS code
 25080 00000A56 5A                      	pop	dx
 25081 00000A57 59                      	pop	cx
 25082 00000A58 5F                      	pop	di
 25083 00000A59 1F                      	pop	ds ; ds = cs
 25084 00000A5A C3                      	retn
 25085                                  ;
 25086                                  ; M012 : END
 25087                                  ;
 25088                                  FatalErr:
 25089 00000A5B 0E                      	push	cs
 25090 00000A5C 1F                      	pop	ds
 25091 00000A5D BA[2709]                	mov	dx,FEmsg
 25092 00000A60 B409                    	mov	ah,9
 25093 00000A62 CD21                    	int	21h 		; DOS - PRINT STRING
 25094                                  				; DS:DX -> string terminated by "$"
 25095                                  	; 30/12/2022 (MSDOS 6.21 SYSINIT)
 25096 00000A64 E92C07                  	jmp	stall
 25097                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 25098                                  	;cli
 25099                                  	;hlt
 25100                                  
 25101                                  ;endif ;ROMDOS
 25102                                  
 25103                                  ; 25/03/2019 - Retro DOS v4.0
 25104                                  
 25105                                  ; ----------------------------------------------------------------------
 25106                                  ;
 25107                                  ; procedure : AllocHMA
 25108                                  ;
 25109                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 25110                                  ;	  up there. If it gets any sort of error, it will return with
 25111                                  ;	  carry set so that we can resort to running low.
 25112                                  ;
 25113                                  ;	It also returns ES: -> 0ffffh if it returns success
 25114                                  ;
 25115                                  ; ----------------------------------------------------------------------
 25116                                  
 25117                                  AllocHMA:
 25118                                  ;	cas note:  The pre-286 check is no longer needed here since the
 25119                                  ;		   presence of XMS is sufficient. However, this code hasn't
 25120                                  ;		   been deleted because it can be recycled for skipping the
 25121                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 25122                                  ;		   in the case of a pre-286.
 25123                                  
 25124                                  ;;	see if we're running on a pre-286. If not, force low.
 25125                                  ;
 25126                                  ;	xor	ax,ax
 25127                                  ;	pushf			; save flags (like int)
 25128                                  ;	push	ax
 25129                                  ;	popf
 25130                                  ;	pushf
 25131                                  ;	pop	ax
 25132                                  ;	popf			; restore original flags (like int)
 25133                                  ;	and	ax,0F000h
 25134                                  ;	cmp	ax,0F000h	; 8088/8086?
 25135                                  ;	jz	short grab_hma_error
 25136                                  
 25137                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25138                                  	; (SYSINIT:0A26h)
 25139                                  
 25140 00000A67 1E                      	push	ds
 25141                                  	;;mov	ax,Bios_Data
 25142                                  	;mov	ax,KERNEL_SEGMENT
 25143                                  	; 21/10/2022
 25144 00000A68 B87000                  	mov	ax,DOSBIODATASEG
 25145 00000A6B 8ED8                    	mov	ds,ax
 25146                                  
 25147 00000A6D E84A00                  	call	IsXMSLoaded
 25148 00000A70 7545                    	jnz	short grabhma_error
 25149                                  
 25150 00000A72 B81043                  	mov	ax,4310h
 25151 00000A75 CD2F                    	int	2Fh		; get the vector into es:bx
 25152                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 25153                                  		; Return: ES:BX -> driver entry point
 25154                                  
 25155 00000A77 891E[0E00]              	mov	[xms],bx
 25156                                  	;mov	[0Eh], bx
 25157 00000A7B 8C06[1000]              	mov	[xms+2],es
 25158                                  	;mov	[10h],es
 25159                                  
 25160 00000A7F B401                    	mov	ah,1		; request HMA
 25161 00000A81 BAFFFF                  	mov	dx,0FFFFh
 25162                                  	;call	dword ptr ds:0Eh
 25163 00000A84 FF1E[0E00]              	call	far [xms]
 25164 00000A88 48                      	dec	ax
 25165 00000A89 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 25166                                  
 25167                                  ;------ Himem may be lying because it has allocated mem for int 15
 25168                                  
 25169 00000A8B B488                    	mov	ah,88h
 25170 00000A8D CD15                    	int	15h
 25171                                  		; Get Extended Memory Size
 25172                                  		; Return: CF clear on success
 25173                                  		; AX = size of memory above 1M in K
 25174 00000A8F 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 25175                                  	;jb	short grabhma_error
 25176                                  	; 11/12/2022
 25177 00000A92 7224                    	jb	short grabhma_err ; cf=1
 25178                                  allocHMA_1:
 25179 00000A94 B405                    	mov	ah,5		; localenableA20
 25180                                  	;call	dword ptr ds:0Eh
 25181 00000A96 FF1E[0E00]              	call	far [xms]
 25182 00000A9A 48                      	dec	ax
 25183 00000A9B 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 25184                                  
 25185 00000A9D E88501                  	call	IsVDiskInstalled
 25186 00000AA0 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 25187                                  
 25188 00000AA2 B8FFFF                  	mov	ax,0FFFFh
 25189 00000AA5 8EC0                    	mov	es,ax
 25190 00000AA7 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 25191 00000AAE 26813E10003412          	cmp	word [es:10h],1234h
 25192                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 25193                                  	; 11/12/2022
 25194 00000AB5 7401                    	je	short allocHMA_ok	
 25195                                  
 25196                                  ; 11/12/2022
 25197                                  ;	; 11/12/2022
 25198                                  ;	; cf=0
 25199                                  ;	;clc
 25200                                  ;	pop	ds
 25201                                  ;	retn
 25202                                  
 25203                                  grabhma_error:
 25204 00000AB7 F9                      	stc
 25205                                  	; 11/12/022
 25206                                  grabhma_err:	; cf=1
 25207                                  allocHMA_ok:	; cf=0
 25208 00000AB8 1F                      	pop	ds
 25209 00000AB9 C3                      	retn
 25210                                  
 25211                                  ; ----------------------------------------------------------------------
 25212                                  ;
 25213                                  ; procedure : IsXMSLoaded
 25214                                  ;
 25215                                  ;             Checks whether a XMS driver is loaded
 25216                                  ;
 25217                                  ; Returns : Z flag set if XMS driver loaded
 25218                                  ;           Z flag reset if no XMS drivers are present
 25219                                  ;
 25220                                  ; ----------------------------------------------------------------------
 25221                                  
 25222                                  IsXMSLoaded:
 25223 00000ABA B80043                  	mov	ax,4300h
 25224 00000ABD CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 25225                                  				; Return: AL = 80h XMS driver installed
 25226                                  				; AL <> 80h no driver
 25227 00000ABF 3C80                    	cmp	al,80h		; XMS installed?
 25228 00000AC1 C3                      	retn
 25229                                  
 25230                                  ; ----------------------------------------------------------------------
 25231                                  ; procedure : FTryToMovDOSHi
 25232                                  ;
 25233                                  ;		Called from HMA suballoc calls
 25234                                  ;	
 25235                                  ; ----------------------------------------------------------------------
 25236                                  
 25237                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25238                                  	; (SYSINIT:0A84h)
 25239                                  
 25240                                  FTryToMovDOSHi:	; proc	far
 25241                                  
 25242 00000AC2 50                      	push	ax
 25243 00000AC3 53                      	push	bx
 25244 00000AC4 51                      	push	cx
 25245 00000AC5 52                      	push	dx
 25246 00000AC6 56                      	push	si
 25247 00000AC7 57                      	push	di
 25248 00000AC8 1E                      	push	ds
 25249 00000AC9 06                      	push	es
 25250                                  
 25251                                  	; 23/10/2022
 25252                                  	; 27/03/2019 - Retro DOS v4.0
 25253                                  	; 11/12/2022
 25254 00000ACA 0E                      	push	cs
 25255 00000ACB 1F                      	pop	ds
 25256                                  
 25257                                  	;cmp	byte [cs:runhigh],0FFh
 25258                                  	; 11/12/2022
 25259 00000ACC 803E[6C02]FF            	cmp	byte [runhigh],0FFh
 25260 00000AD1 7503                    	jne	short _ftymdh_1
 25261                                  
 25262                                  	; ds = cs
 25263 00000AD3 E8A1FE                  	call	TryToMovDOSHi
 25264                                  _ftymdh_1:
 25265 00000AD6 07                      	pop	es
 25266 00000AD7 1F                      	pop	ds
 25267 00000AD8 5F                      	pop	di
 25268 00000AD9 5E                      	pop	si
 25269 00000ADA 5A                      	pop	dx
 25270 00000ADB 59                      	pop	cx
 25271 00000ADC 5B                      	pop	bx
 25272 00000ADD 58                      	pop	ax
 25273                                  
 25274 00000ADE CB                      	retf
 25275                                  
 25276                                  ; ----------------------------------------------------------------------
 25277                                  ;
 25278                                  ; following piece of code will be moved into a para boundary. And the para
 25279                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 25280                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 25281                                  ; to determine free extended memory.
 25282                                  ;
 25283                                  ; For more details read "power programming" column by Ray Duncan in the
 25284                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 25285                                  ;
 25286                                  ; ----------------------------------------------------------------------
 25287                                  
 25288                                  StartVDHead:
 25289                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 25290                                  
 25291 00000ADF 00000000                	dd	0		; link to next device driver
 25292 00000AE3 0080                    	dw	8000h		; device attribute
 25293 00000AE5 0000                    	dw	0		; strategy routine offset
 25294 00000AE7 0000                    	dw	0		; interrupt routine offset
 25295 00000AE9 01                      	db	1		; number of units
 25296                                  	;db	7 dup(0) 
 25297 00000AEA 00<rep 7h>              	times	7 db 0 		; reserved area
 25298                                  VDiskSig1:
 25299 00000AF1 564449534B              	db	'VDISK'
 25300                                  
 25301                                  VLEN1	equ	($-VDiskSig1)
 25302                                  
 25303 00000AF6 202056332E33            	db	'  V3.3'	; vdisk label
 25304                                  	;db	15 dup (0)	; pad
 25305 00000AFC 00<rep Fh>              	times	15 db 0
 25306 00000B0B 0000                    	dw	0		; bits 0-15 of free HMA
 25307 00000B0D 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 25308                                  VDInt19:
 25309 00000B0E EA                      	db	0EAh		; jmp to old vector
 25310                                  OldVDInt19:
 25311 00000B0F 00000000                	dd	0		; Saved int 19 vector
 25312                                  
 25313                                  EndVDHead: ; label byte
 25314                                  
 25315                                  VDiskHMAHead:	
 25316 00000B13 000000                  	db	0,0,0		; non-bootable disk
 25317                                  VDiskSig2:
 25318 00000B16 564449534B              	db	'VDISK'
 25319                                  
 25320                                  VLEN2	equ	($-VDiskSig2)
 25321                                  
 25322 00000B1B 332E33                  	db	'3.3'		; OEM - signature
 25323 00000B1E 8000                    	dw	128		; number of bytes/sector
 25324 00000B20 01                      	db	1		; sectors/cluster
 25325 00000B21 0100                    	dw	1		; reserved sectors
 25326 00000B23 01                      	db	1		; number of FAT copies
 25327 00000B24 4000                    	dw	64		; number of root dir entries
 25328 00000B26 0002                    	dw	512		; number of sectors
 25329 00000B28 FE                      	db	0FEh		; media descriptor
 25330 00000B29 0600                    	dw	6		; number of sectors/FAT
 25331 00000B2B 0800                    	dw	8		; sectors per track
 25332 00000B2D 0100                    	dw	1		; number of heads
 25333 00000B2F 0000                    	dw	0		; number of hidden sectors
 25334 00000B31 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 25335                                  
 25336                                  EndVDiskHMAHead: ; label byte
 25337                                  
 25338                                  ; ----------------------------------------------------------------------
 25339                                  ;
 25340                                  ; procedure : InstVDiskHeader
 25341                                  ;
 25342                                  ;             Installs the VDISK header to reserve the 64k of HMA
 25343                                  ;	      It puts a 32 byte header at 10000:0 and
 25344                                  ;	      another header at (seg of int19):0
 25345                                  ;
 25346                                  ; Inputs : None
 25347                                  ;
 25348                                  ; Outputs : None
 25349                                  ;
 25350                                  ; USES : DS,SI,AX,CX,DX
 25351                                  ;
 25352                                  ; ----------------------------------------------------------------------
 25353                                  
 25354                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25355                                  
 25356                                  InstVDiskHeader:
 25357 00000B33 31C0                    	xor	ax,ax
 25358 00000B35 8ED8                    	mov	ds,ax			; seg of int vect table
 25359                                  
 25360                                  ;-------------- save old int 19 vector
 25361                                  
 25362                                  	; 23/10/2022
 25363 00000B37 A16400                  	mov	ax,[19h*4]
 25364                                  	;mov	[OldVDInt19],ax
 25365 00000B3A 2EA3[0F0B]              	mov	[cs:OldVDInt19],ax
 25366 00000B3E A16600                  	mov	ax,[19h*4+2]
 25367                                  	;mov	[OldVDInt19+2],ax
 25368 00000B41 2EA3[110B]              	mov	[cs:OldVDInt19+2],ax
 25369                                  
 25370                                  ;-------------- calculate seg of new int 19 handler
 25371                                  
 25372 00000B45 B448                    	mov	ah,48h			; allocate memory
 25373                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 25374                                  	; 23/10/2022
 25375 00000B47 BB0400                  	mov	bx,4
 25376 00000B4A CD21                    	int	21h
 25377                                  
 25378                                  ;	if carry, fatal hanging error!!!!!
 25379                                  
 25380 00000B4C 48                      	dec	ax			; point to arena
 25381 00000B4D 8EC0                    	mov	es,ax
 25382                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 25383 00000B4F 26C70601000800          	mov	word [es:1],8
 25384                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 25385 00000B56 26C70608005343          	mov	word [es:8],'SC'
 25386 00000B5D 40                      	inc	ax
 25387 00000B5E 8EC0                    	mov	es,ax			; get back to allocated memory
 25388                                  
 25389                                  ;-------------- install new int 19 vector
 25390                                  
 25391 00000B60 FA                      	cli				; no reboots at this time
 25392                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 25393 00000B61 C70664002F00            	mov	word [19h*4],47
 25394 00000B67 A36600                  	mov	[19h*4+2],ax
 25395                                  
 25396                                  ;-------------- move the code into proper place
 25397                                  
 25398                                  	;mov	cx,(EndVDHead-StartVDHead)
 25399 00000B6A B93400                  	mov	cx,52
 25400 00000B6D BE[DF0A]                	mov	si,StartVDHead
 25401 00000B70 31FF                    	xor	di,di
 25402 00000B72 0E                      	push	cs
 25403 00000B73 1F                      	pop	ds
 25404 00000B74 FC                      	cld
 25405 00000B75 F3A4                    	rep	movsb
 25406 00000B77 FB                      	sti				; BUGBUG is sti OK now?
 25407                                  
 25408                                  ;-------------- mov the HMA VDisk head into HMA
 25409                                  
 25410                                  	; 23/10/2022
 25411 00000B78 57                      	push	di
 25412 00000B79 06                      	push	es
 25413                                  
 25414                                  	;mov	ax,0FFFFh
 25415                                  	;mov	es,ax
 25416                                  	; 03/09/2023
 25417 00000B7A 49                      	dec	cx
 25418                                  	; cx = 0FFFFh
 25419 00000B7B 8EC1                    	mov	es,cx
 25420                                  
 25421 00000B7D BF1000                  	mov	di,10h
 25422                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 25423 00000B80 B92000                  	mov	cx,32
 25424 00000B83 BE[130B]                	mov	si,VDiskHMAHead
 25425 00000B86 F3A4                    	rep	movsb			; ds already set to cs
 25426                                  
 25427 00000B88 5F                      	pop	di
 25428 00000B89 07                      	pop	es
 25429                                  
 25430 00000B8A C3                      	retn
 25431                                  
 25432                                  ; ----------------------------------------------------------------------
 25433                                  ; procedure : ClrVDISKHeader
 25434                                  ;
 25435                                  ;		Clears the first 32 bytes at 1MB boundary
 25436                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 25437                                  ;		left by previous DOS=HIGH session
 25438                                  ;
 25439                                  ; ----------------------------------------------------------------------
 25440                                  
 25441                                  struc desc
 25442 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 25443 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 25444 00000004 ??                       .hi_byte:	resb 	1		; address
 25445 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 25446 00000006 ????                     .reserved:	resw	1		;
 25447                                   .size:
 25448                                  endstruc
 25449                                  
 25450                                  		; 23/10/2022
 25451                                  bmove:		;label byte
 25452                                  
 25453                                  dummy:		;times desc.size db 0	; desc	<>
 25454 00000B8B 00<rep 8h>              		times 8 db 0		 
 25455                                  gdt:		;times desc.size db 0	; desc	<>
 25456 00000B93 00<rep 8h>              		times 8 db 0
 25457 00000B9B FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 25458 00000B9D 0000                    		dw	0
 25459 00000B9F 00                      		db	0
 25460 00000BA0 93                      		db	93h
 25461 00000BA1 0000                    		dw	0
 25462 00000BA3 FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 25463 00000BA5 0000                    		dw	0
 25464 00000BA7 10                      		db	10h
 25465 00000BA8 93                      		db	93h
 25466 00000BA9 0000                    		dw	0
 25467                                  
 25468                                  rombios_code:	;times desc.size db 0	; desc	<>
 25469 00000BAB 00<rep 8h>              		times 8 db 0
 25470                                  temp_stack:	;times desc.size db 0	; desc	<>
 25471 00000BB3 00<rep 8h>              		times 8 db 0
 25472                                  
 25473 00000BBB 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 25474                                  
 25475                                  
 25476                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIT1.ASM)
 25477                                  
 25478                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25479                                  ; (SYSINIT:0CA6h)
 25480                                  
 25481                                  ClrVDISKHeader:	; proc	near
 25482                                  
 25483                                  ;; 04/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 25484                                  ;;-----------------------------------------------------------	      ;I070
 25485                                  ;; The following workaround get around a problem with the	      ;I070
 25486                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 25487                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 25488                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 25489                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 25490                                  ;; move crashes the system. We can do this because these	      ;I070
 25491                                  ;; systems clear all of memory on a cold boot.			      ;I070
 25492                                  ;								      ;I070
 25493                                  ;               in      al,64h         ; Test for password servr mode ;I070
 25494                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 25495                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 25496                                  ;                                      ; Check for Tortugas...	      ;I070
 25497                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 25498                                  ;               je      short ClrVDISKno                              ;I070
 25499                                  ;                                      ; Check for mod 30-286	      ;I070
 25500                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 25501                                  ;               jne     short ClrVDISKok			      ;I070
 25502                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 25503                                  ;								      ;I070
 25504                                  ;ClrVDISKok:							      ;I070
 25505                                  ;-----------------------------------------------------------	      ;I070
 25506                                  
 25507                                  	; 12/12/2022
 25508                                  	; ds = cs
 25509                                  
 25510                                  	; 30/12/2022 - Retro DOS v4.2
 25511                                  	; (MSDOS 6.21 IO.SYS SYSINIT:0CBFh)
 25512                                  
 25513 00000BDB 06                      	push	es
 25514 00000BDC 8CC8                    	mov	ax,cs
 25515 00000BDE 89C2                    	mov	dx,ax
 25516 00000BE0 B10C                    	mov	cl,12
 25517 00000BE2 D3EA                    	shr	dx,cl
 25518 00000BE4 B104                    	mov	cl,4
 25519 00000BE6 D3E0                    	shl	ax,cl
 25520 00000BE8 05[BB0B]                	add	ax,ClrdVDISKHead
 25521 00000BEB 80D200                  	adc	dl,0
 25522                                  
 25523                                  	;; 23/10/2022
 25524                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 25525                                  	;mov	[cs:src_desc+2],ax
 25526                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 25527                                  	;mov	[cs:src_desc+4],dl
 25528                                  	; 12/12/2022
 25529                                  	;mov	[src_desc+desc.lo_word],ax
 25530 00000BEE A3[9D0B]                	mov	[src_desc+2],ax
 25531                                  	;mov	[src_desc+desc.hi_byte],dl
 25532 00000BF1 8816[9F0B]              	mov	[src_desc+4],dl
 25533                                  
 25534 00000BF5 B91000                  	mov	cx,16	; 16 words
 25535 00000BF8 0E                      	push	cs
 25536 00000BF9 07                      	pop	es
 25537 00000BFA BE[8B0B]                	mov	si,bmove
 25538 00000BFD B487                    	mov	ah,87h
 25539 00000BFF CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 25540                                  			; CX = number of words to move 
 25541                                  			; ES:SI -> global descriptor table
 25542                                  			; Return: CF set on error, AH = status
 25543 00000C01 07                      	pop	es
 25544 00000C02 C3                      	retn
 25545                                  
 25546                                  ; ----------------------------------------------------------------------
 25547                                  ;
 25548                                  ; procedure : SaveFreeHMAPtr
 25549                                  ;
 25550                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 25551                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 25552                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 25553                                  ;		the offset.
 25554                                  ;
 25555                                  ; Inputs : ES:DI - pointer to free HMA
 25556                                  ; Output : FreeHMAPtr in BIOS data segment updated
 25557                                  ;
 25558                                  ; ----------------------------------------------------------------------
 25559                                  
 25560                                  SaveFreeHMAPtr:
 25561                                  	; 03/09/2023
 25562 00000C03 1E                      	push	ds
 25563 00000C04 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 25564 00000C07 8ED8                    	mov	ds,ax
 25565                                  	;
 25566 00000C09 8CC3                    	mov	bx,es
 25567 00000C0B B8FFFF                  	mov	ax,0FFFFh	   ; HMA segment
 25568                                  	; 03/09/2023
 25569 00000C0E A2[0D00]                	mov	[inHMA],al ; 0FFh
 25570                                  	;
 25571 00000C11 29D8                    	sub	ax,bx
 25572 00000C13 83C70F                  	add	di,15		   ; para round
 25573 00000C16 83E7F0                  	and	di,0FFF0h
 25574 00000C19 B104                    	mov	cl,4
 25575 00000C1B D3E0                    	shl	ax,cl
 25576 00000C1D 29C7                    	sub	di,ax
 25577                                  	;
 25578                                  	; 03/09/2023
 25579                                  	;push	ds
 25580                                  	;;mov	ax,Bios_Data ; 0070h
 25581                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 25582                                  	; 21/10/2022
 25583                                  	; 03/09/2023
 25584                                  	;mov	ax,DOSBIODATASEG ; 0070h
 25585                                  	;mov	ds,ax
 25586 00000C1F 893E[D707]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 25587                                  	;mov	byte [inHMA],0FFh  ; (ds:0Dh)
 25588 00000C23 1F                      	pop	ds
 25589 00000C24 C3                      	retn
 25590                                  
 25591                                  ; ----------------------------------------------------------------------
 25592                                  ;
 25593                                  ; procedure : IsVDiskInstalled
 25594                                  ;
 25595                                  ;		Checks for the presence of VDISK header at 1MB boundary
 25596                                  ;		& INT 19 vector
 25597                                  ;
 25598                                  ; Inputs  : A20 flag should be ON
 25599                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 25600                                  ;
 25601                                  ; ----------------------------------------------------------------------
 25602                                  
 25603                                  IsVDiskInstalled:
 25604 00000C25 31C0                    	xor	ax,ax
 25605 00000C27 8ED8                    	mov	ds,ax
 25606 00000C29 8E1E4E00                	mov	ds,[19*4+2]
 25607                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 25608                                  	; 23/10/2022
 25609 00000C2D BE1200                  	mov	si,12h ; 18
 25610                                  	;mov	cx,VLEN1 ; 5
 25611 00000C30 B90500                  	mov	cx,5
 25612 00000C33 0E                      	push	cs
 25613 00000C34 07                      	pop	es
 25614 00000C35 BF[F10A]                	mov	di,VDiskSig1
 25615 00000C38 F3A6                    	rep	cmpsb
 25616 00000C3A 740F                    	je	short ivdins_retn
 25617 00000C3C B8FFFF                  	mov	ax,0FFFFh
 25618 00000C3F 8ED8                    	mov	ds,ax
 25619                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 25620 00000C41 BE1300                  	mov	si,13h
 25621 00000C44 BF[160B]                	mov	di,VDiskSig2
 25622                                  	;;mov	cx,VLEN2  ; 5
 25623                                  	;mov	cx,5
 25624                                  	; 03/09/2023
 25625 00000C47 B105                    	mov	cl,5
 25626 00000C49 F3A6                    	rep	cmpsb
 25627                                  ivdins_retn: 
 25628 00000C4B C3                      	retn			; returns the Zero flag
 25629                                  
 25630                                  ; ----------------------------------------------------------------------
 25631                                  ;
 25632                                  ; procedure : CPMHack
 25633                                  ;
 25634                                  ;		Copies the code from 0:c0 into ffff:0d0h
 25635                                  ;		for CPM compatibility
 25636                                  ;
 25637                                  ; ----------------------------------------------------------------------
 25638                                  
 25639                                  	; 11/12/2022
 25640                                  CPMHack:
 25641 00000C4C 1E                      	push	ds
 25642 00000C4D B9FFFF                  	mov	cx,0FFFFh
 25643 00000C50 8EC1                    	mov	es,cx		; ES = FFFF
 25644                                  	;xor	cx,cx
 25645                                  	; 11/12/2022
 25646 00000C52 41                      	inc	cx  ; cx = 0
 25647 00000C53 8ED9                    	mov	ds,cx		; DS = 0
 25648 00000C55 BEC000                  	mov	si,0C0h
 25649 00000C58 BFD000                  	mov	di,0D0h
 25650                                  	;mov	cx,5
 25651 00000C5B B105                    	mov	cl,5
 25652 00000C5D FC                      	cld
 25653 00000C5E F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 25654 00000C60 1F                      	pop	ds
 25655 00000C61 C3                      	retn
 25656                                  
 25657                                  ; ----------------------------------------------------------------------
 25658                                  ;
 25659                                  ; procedure : off_to_para
 25660                                  ;
 25661                                  ; ----------------------------------------------------------------------
 25662                                  off_to_para:
 25663 00000C62 D1E8                    	shr	ax,1
 25664 00000C64 D1E8                    	shr	ax,1
 25665 00000C66 D1E8                    	shr	ax,1
 25666 00000C68 D1E8                    	shr	ax,1
 25667 00000C6A C3                      	retn
 25668                                  
 25669                                  ; ----------------------------------------------------------------------
 25670                                  ;**	TempCDS - Create (Temporary?) CDS
 25671                                  ;
 25672                                  ;	ENTRY	?? BUGBUG
 25673                                  ;		(DS) = SysInitSeg
 25674                                  ;	EXIT	?? BUGBUG
 25675                                  ;	USES	?? BUGBUG
 25676                                  ; ----------------------------------------------------------------------
 25677                                  
 25678                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25679                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25680                                  TempCDS:
 25681 00000C6B C43E[6D02]              	les	di,[DOSINFO]
 25682 00000C6F 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 25683                                  	;mov	cl,[es:di+20h]
 25684 00000C73 30ED                    	xor	ch,ch			; (cx) = # of block devices
 25685                                  
 25686 00000C75 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 25687                                  	;mov	[es:di+21h],cl	
 25688                                  
 25689 00000C79 88C8                    	mov	al,cl
 25690 00000C7B B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 25691                                  	;mov	ah,88
 25692 00000C7D F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 25693 00000C7F E8D804                  	call	ParaRound		; (ax) = paragraph size for CDSs
 25694 00000C82 8B36[A702]              	mov	si,[top_of_cdss] ; 31/12/2022
 25695                                  
 25696                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 25697                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 25698                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 25699                                  ;		   variable which has the top of free memory for
 25700                                  ;		   device driver loads, etc.
 25701                                  
 25702 00000C86 29C6                    	sub	si,ax
 25703                                  
 25704                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 25705                                  ;		that automatically updates alloclim every time we
 25706                                  ;		set up some new CDSs. Instead, I've added code
 25707                                  ;		which pre-allocates space for 26 CDSs. This
 25708                                  ;	        way we've got room for worst case CDSs before
 25709                                  ;		we place MagicDrv.sys
 25710                                  ;
 25711                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 25712                                  
 25713                                  	; 30/12/2022
 25714                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25715                                  	; (SYSINIT:0C52h)
 25716                                  	;mov	[ALLOCLIM],si ; (MSDOS 5.0 SYSINIT)
 25717                                  
 25718 00000C88 26897518                	mov	[es:di+SYSI_CDS+2],si
 25719                                  	;mov	[es:di+18h],si
 25720 00000C8C 89F0                    	mov	ax,si
 25721 00000C8E 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 25722                                  	;mov	[word es:di+16h],0
 25723                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 25724 00000C94 26C535                  	lds	si,[es:di]
 25725 00000C97 8EC0                    	mov	es,ax
 25726 00000C99 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 25727                                  
 25728                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 25729                                  ;	info from the corresponding DPB.
 25730                                  ;
 25731                                  ;	(cx) = count of CDSs left to process
 25732                                  ;	(es:di) = address of next CDS
 25733                                  
 25734                                  fooset:
 25735                                  	; 23/10/2022
 25736 00000C9B 2EA1[A902]              	mov	ax,[cs:DirStrng] ; "A:"
 25737 00000C9F AB                      	stosw				; setup the root as the curdir
 25738                                  	
 25739                                  	; 23/10/2022 (MSDOS 5.0 SYSINIT)
 25740                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 25741                                  
 25742                                  	; 30/12/2022
 25743                                  	; (MSDOS 6.21 SYSINIT:0D8Bh)
 25744 00000CA0 E85A00                  	call	get_dpb_for_drive_al	; get dpb for drive in dpb
 25745                                  
 25746                                  ;	(ds:si) = address of DPB
 25747                                  ;		 (si) = -1 if no drive
 25748                                  
 25749 00000CA3 2EA1[AB02]              	mov	ax,[cs:DirStrng+2] ; "\",0
 25750 00000CA7 AB                      	stosw
 25751 00000CA8 2EFE06[A902]            	inc	byte [cs:DirStrng]
 25752 00000CAD 31C0                    	xor	ax,ax ; 0
 25753 00000CAF 51                      	push	cx
 25754                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 25755 00000CB0 B93F00                  	mov	cx,63	; 23/10/2022
 25756 00000CB3 F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 25757                                  
 25758                                  ;	should handle the system that does not have any floppies.
 25759                                  ;	in this case,we are going to pretended there are two dummy floppies
 25760                                  ;	in the system. still they have dpb and cds,but we are going to
 25761                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 25762                                  ;	"invalid drive specification" message when the user try to
 25763                                  ;	access them.
 25764                                  ;
 25765                                  ;	(ax) = 0
 25766                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 25767                                  ;	(ds:si) = Next DPB (-1 if none)
 25768                                  
 25769 00000CB5 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 25770 00000CB8 7413                    	je	short fooset_zero	; don't have any physical drive.
 25771                                  
 25772                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 25773                                  ;	if we are faking floppy drives then see if this cds being initialised
 25774                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 25775                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 25776                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 25777                                  ;	for dpb offsets look at inc\dpb.inc.
 25778                                  
 25779                                  	; 03/09/2023
 25780 00000CBA 41                      	inc	cx  ; cx = 1
 25781                                  
 25782 00000CBB 2E380E[8B02]            	cmp	[cs:fake_floppy_drv],cl ; 1 ; 03/09/2023
 25783                                  	;cmp	byte [cs:fake_floppy_drv],1
 25784 00000CC0 7512                    	jne	short normcds 		; machine has floppy drives
 25785                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 25786                                  	;cmp	byte [si],1
 25787 00000CC2 380C                    	cmp	[si],cl ; 1 ; 03/09/2023
 25788 00000CC4 770E                    	ja	short normcds
 25789 00000CC6 B103                    	mov	cl,3			; the next dbp pointer
 25790                                  					; AX should be zero here
 25791 00000CC8 F3AB                    	rep	stosw
 25792 00000CCA 59                      	pop	cx
 25793 00000CCB EB17                    	jmp	short get_next_dpb
 25794                                  
 25795                                  ;	(ax) = 0
 25796                                  
 25797                                  fooset_zero:
 25798 00000CCD B103                    	mov	cl,3
 25799 00000CCF F3AB                    	rep	stosw
 25800 00000CD1 59                      	pop	cx
 25801 00000CD2 EB10                    	jmp	short fincds
 25802                                  
 25803                                  ;*	We have a "normal" DPB and thus a normal CDS.
 25804                                  ;
 25805                                  ;	(ax) = 0
 25806                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 25807                                  ;	(ds:si) = Next DPB (-1 if none)
 25808                                  
 25809                                  normcds:
 25810 00000CD4 59                      	pop	cx
 25811                                  
 25812                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 25813                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 25814                                  ;	this media is a non-fat based one.
 25815                                  
 25816                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 25817                                  	; 23/10/2022
 25818                                  	;cmp	byte [si+8],0
 25819                                  	; 03/09/2023 (ax=0)
 25820 00000CD5 384408                  	cmp	[si+8],al ; 0
 25821 00000CD8 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 25822 00000CDA B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 25823                                  	;mov	ax,4000h
 25824                                  setnormcds:
 25825 00000CDD AB                      	stosw				; curdir_flags
 25826 00000CDE 89F0                    	mov	ax,si
 25827 00000CE0 AB                      	stosw				; curdir_devptr
 25828 00000CE1 8CD8                    	mov	ax,ds
 25829 00000CE3 AB                      	stosw
 25830                                  
 25831                                  get_next_dpb:				; entry point for fake_fooset_zero
 25832                                  	; 30/12/2022
 25833                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 25834                                  	; 23/10/2022
 25835                                  	;lds	si,[si+19h] ; (MSDOS 5.0 SYSINIT)
 25836                                  	;;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 25837                                  fincds:	; get_next_dpb
 25838                                  	; 30/12/2022
 25839                                  	; (MSDOS 6.21 SYSINIT:0DD1h)
 25840 00000CE4 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 25841 00000CE7 AB                      	stosw				; curdir_id
 25842 00000CE8 AB                      	stosw				; curdir_id
 25843 00000CE9 AB                      	stosw				; curdir_user_word
 25844 00000CEA B80200                  	mov	ax,2
 25845 00000CED AB                      	stosw				; curdir_end
 25846 00000CEE B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 25847 00000CF0 AA                      	stosb
 25848 00000CF1 AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 25849 00000CF2 AB                      	stosw
 25850 00000CF3 AB                      	stosw
 25851                                  
 25852 00000CF4 E2A5                    	loop	fooset
 25853                                  	
 25854 00000CF6 2EC606[A902]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 25855                                  	
 25856 00000CFC C3                      	retn
 25857                                  
 25858                                  ; ----------------------------------------------------------------------
 25859                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 25860                                  ;
 25861                                  ;	entry:
 25862                                  ;	   al == ASCII CAPS drive letter
 25863                                  ;
 25864                                  ;	exit:
 25865                                  ;	   ds:si -> DPB, or si = -1 if not found
 25866                                  ; ----------------------------------------------------------------------
 25867                                  
 25868                                  ; 30/12/2022
 25869                                  ; (MSDOS 6.21 SYSINIT:0DEAh)
 25870                                  ; 23/10/2022
 25871                                  ;%if 0
 25872                                  get_dpb_for_drive_al:
 25873 00000CFD 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; point to first DPB
 25874                                  	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 25875 00000D02 C534                    	lds	si,[si]
 25876 00000D04 2C41                    	sub	al,'A'
 25877                                  
 25878                                  get_dpb_for_drive_1:
 25879                                  	;cmp	al,[si+DPB.DRIVE]	; match?
 25880 00000D06 3A04                    	cmp	al,[si]
 25881 00000D08 7408                    	je	short got_dpb_for_drive	;  done if so
 25882                                  
 25883 00000D0A C57419                  	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 25884 00000D0D 83FEFF                  	cmp	si,-1
 25885 00000D10 75F4                    	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 25886                                  
 25887                                  got_dpb_for_drive:
 25888 00000D12 C3                      	retn
 25889                                  ;%endif  ; 23/10/2022
 25890                                  
 25891                                  ;=======================================================================
 25892                                  
 25893                                  ;**	EndFile - Build DOS structures
 25894                                  ;
 25895                                  ; This procedure is called after the config.sys has been processed and
 25896                                  ; installable device drivers have been loaded (but before "install="
 25897                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 25898                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 25899                                  ; to allow for the safe EXECing of "install=" programs. All memory
 25900                                  ; above these structures is deallocated back to DOS.
 25901                                  ;
 25902                                  ;	ENTRY	?? BUGBUG
 25903                                  ;	EXIT	?? BUGBUG
 25904                                  ;	USES	?? BUGBUG
 25905                                  
 25906                                  ;=======================================================================
 25907                                  ; allocate files
 25908                                  ; ----------------------------------------------------------------------
 25909                                  
 25910                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25911                                  	; (SYSINIT:0CCDh)
 25912                                  
 25913                                  	; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25914                                  	; (SYSINIT:0E00h)
 25915                                  endfile:
 25916                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 25917                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 25918                                  ; to confbot.
 25919                                  
 25920                                  ;	if this procedure has been called to take care of install= command,
 25921                                  ;	   then we have to save es,si registers.
 25922                                  
 25923                                  	; 11/12/2022
 25924                                  	; ds = cs
 25925                                  
 25926                                  	; 23/10/2022
 25927                                  	; 31/03/2019
 25928 00000D13 1E                      	push	ds
 25929                                  
 25930                                  	;;mov	ax,Bios_Data ; 0070h
 25931                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 25932                                  	; 21/10/2022
 25933 00000D14 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 25934 00000D17 8ED8                    	mov	ds,ax
 25935                                  
 25936                                  	;cmp	word [052Fh],0
 25937 00000D19 833E[A004]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 25938 00000D1E 7505                    	jne	short multrk_flag_done
 25939                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25940                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 25941                                  	; 12/12/2022
 25942 00000D20 800E[A004]80            	or	byte [multrk_flag],multrk_on ; 80h
 25943                                  multrk_flag_done:
 25944                                  	; 23/10/2022
 25945                                  	; 31/03/2019
 25946 00000D25 1F                      	pop	ds
 25947                                  
 25948                                  	; 11/12/2022
 25949                                  	; ds = cs
 25950                                  	;mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 25951                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 25952                                  	; (SYSINIT:0E14h)
 25953 00000D26 A1[A302]                	mov	ax,[CONFBOT]
 25954 00000D29 A3[A502]                	mov	[ALLOCLIM],ax
 25955                                  	; 23/10/2022
 25956                                  	;mov	ax, [cs:top_of_cdss]
 25957                                  	;mov	[cs:ALLOCLIM], ax 
 25958                                  
 25959                                  	; 11/12/2022
 25960                                  	; ds = cs
 25961                                  	;push	cs
 25962                                  	;pop	ds
 25963                                  	
 25964                                  	;mov	ax,[CONFBOT]
 25965                                  	;mov	[ALLOCLIM],ax
 25966                                  
 25967 00000D2C E85835                  	call	round
 25968                                  	; 11/12/2022
 25969                                  	; ds = cs
 25970 00000D2F A0[9F02]                	mov	al,[FILES]
 25971                                  	; 23/10/2022
 25972                                  	;mov	al,[cs:FILES]
 25973 00000D32 2C05                    	sub	al,5
 25974 00000D34 764B                    	jbe	short dofcbs
 25975                                  
 25976 00000D36 50                      	push	ax
 25977                                  	;mov	al,devmark_files ; 'F'
 25978 00000D37 B046                    	mov	al,'F'
 25979 00000D39 E86B07                  	call	setdevmark		; set devmark for sfts (files)
 25980 00000D3C 58                      	pop	ax
 25981 00000D3D 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 25982                                  					;  it does sign extend.
 25983                                  	; 11/12/2022
 25984                                  	; ds = cs
 25985 00000D3F 8B1E[6203]              	mov	bx,[memlo]
 25986 00000D43 8B16[6403]              	mov	dx,[memhi]
 25987 00000D47 C53E[6D02]              	lds	di,[DOSINFO]		;get pointer to dos data
 25988                                  	; 23/10/2022
 25989                                  	;mov	bx,[cs:memlo]
 25990                                  	;mov	dx,[cs:memhi]
 25991                                  	;lds	di,[cs:DOSINFO]		
 25992                                  
 25993                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 25994 00000D4B C57D04                  	lds	di,[di+4]
 25995                                  
 25996                                  	;mov	[di+SF.SFLink],bx
 25997 00000D4E 891D                    	mov	[di],bx
 25998 00000D50 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 25999                                  
 26000 00000D53 0E                      	push	cs
 26001 00000D54 1F                      	pop	ds
 26002                                  
 26003                                  	; 11/12/2022
 26004                                  	; ds = cs
 26005 00000D55 C43E[6203]              	les	di,[memlo]		;point to new sft
 26006                                  	; 23/10/2022
 26007                                  	;les	di,[cs:memlo]
 26008                                  
 26009                                  	;mov	word [es:di+SF.SFLink],-1
 26010 00000D59 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 26011                                  	;mov	[es:di+SF.SFCount],ax
 26012 00000D5E 26894504                	mov	[es:di+4],ax
 26013                                  	;mov	bl,SF_ENTRY.size ; 59
 26014 00000D62 B33B                    	mov	bl,59
 26015 00000D64 F6E3                    	mul	bl			;ax = number of bytes to clear
 26016 00000D66 89C1                    	mov	cx,ax
 26017                                  	; 11/12/2022
 26018                                  	; ds = cs
 26019 00000D68 0106[6203]              	add	[memlo],ax		;allocate memory
 26020                                  	; 23/10/2022
 26021                                  	;add	[cs:memlo],ax
 26022 00000D6C B80600                  	mov	ax,6
 26023                                  	; 11/12/2022
 26024 00000D6F 0106[6203]              	add	[memlo],ax		;remember the header too
 26025                                  	;add	[cs:memlo],ax
 26026                                  	; 11/12/2022
 26027 00000D73 800E[CC14]02            	or	byte [setdevmarkflag],for_devmark ; 2
 26028                                  	; 23/10/2022
 26029                                  	;or	byte [cs:setdevmarkflag],2
 26030 00000D78 E80C35                  	call	round			; check for mem error before the stosb
 26031 00000D7B 01C7                    	add	di,ax
 26032 00000D7D 31C0                    	xor	ax,ax
 26033 00000D7F F3AA                    	rep	stosb			;clean out the stuff
 26034                                  
 26035                                  ; allocate fcbs
 26036                                  ; ----------------------------------------------------------------------
 26037                                  
 26038                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26039                                  	; (SYSINIT:0D48h)
 26040                                  dofcbs:
 26041                                  	; 11/12/2022
 26042                                  	; ds = cs
 26043                                  	;push	cs
 26044                                  	;pop	ds
 26045 00000D81 E80335                  	call	round
 26046                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 26047 00000D84 B058                    	mov	al,'X'
 26048 00000D86 E81E07                  	call	setdevmark
 26049                                  	; 11/12/2022
 26050                                  	; ds = cs
 26051 00000D89 A0[A002]                	mov	al,[FCBS]
 26052                                  	;mov	al,[cs:FCBS]
 26053 00000D8C 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 26054                                  					;  it does sign extend.
 26055                                  	; 11/12/2022
 26056 00000D8E 8B1E[6203]              	mov	bx,[memlo]
 26057 00000D92 8B16[6403]              	mov	dx,[memhi]
 26058 00000D96 C53E[6D02]              	lds	di,[DOSINFO]		;get pointer to dos data
 26059                                  	; 23/10/2022
 26060                                  	;mov	bx,[cs:memlo]
 26061                                  	;mov	dx,[cs:memhi]
 26062                                  	;lds	di,[cs:DOSINFO]
 26063                                  
 26064                                  	;mov	[di+SYSI_FCB],bx
 26065                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 26066                                  	; 23/10/2022
 26067 00000D9A 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 26068 00000D9D 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 26069                                  
 26070 00000DA0 2E8A1E[A102]            	mov	bl,[cs:KEEP]
 26071 00000DA5 30FF                    	xor	bh,bh
 26072                                  	;mov	[di+SYSI_KEEP],bx
 26073 00000DA7 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 26074                                  
 26075 00000DAA 0E                      	push	cs
 26076 00000DAB 1F                      	pop	ds
 26077                                  	
 26078 00000DAC C43E[6203]              	les	di,[memlo]		;point to new table
 26079                                  	;mov	word [es:di+SF.SFLink],-1
 26080 00000DB0 26C705FFFF              	mov	word [es:di],-1
 26081                                  	;mov	[es:di+SF.SFCount],ax
 26082                                  	; 02/11/2022
 26083 00000DB5 26894504                	mov	[es:di+4],ax
 26084 00000DB9 B339                    	mov	bl,SF_ENTRY.size ; 59
 26085 00000DBB 89C1                    	mov	cx,ax
 26086 00000DBD F6E3                    	mul	bl			;ax = number of bytes to clear
 26087 00000DBF 0106[6203]              	add	[memlo],ax		;allocate memory
 26088                                  	;mov	ax,6
 26089 00000DC3 B80600                  	mov	ax,SF.size-2 ; 6
 26090 00000DC6 0106[6203]              	add	[memlo],ax		;remember the header too
 26091                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 26092 00000DCA 800E[CC14]02            	or	byte [setdevmarkflag],2
 26093 00000DCF E8B534                  	call	round			; check for mem error before the stosb
 26094 00000DD2 01C7                    	add	di,ax			;skip over header
 26095 00000DD4 B041                    	mov	al,'A'
 26096                                  fillloop:
 26097 00000DD6 51                      	push	cx			; save count
 26098 00000DD7 B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 26099 00000DDA FC                      	cld
 26100 00000DDB F3AA                    	rep	stosb			; filled
 26101                                  
 26102                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 26103                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 26104                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 26105                                  
 26106                                  	; 18/12/2022
 26107                                  	;cx = 0
 26108 00000DDD 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 26109 00000DE1 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 26110 00000DE5 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 26111                                  	
 26112                                  	; 23/10/2022	
 26113                                  	;mov     word [es:di-3Bh],0
 26114                                  	;mov     word [es:di-26h],0
 26115                                  	;mov     word [es:di-24h],0
 26116                                  
 26117 00000DE9 59                      	pop	cx
 26118 00000DEA E2EA                    	loop	fillloop
 26119                                  
 26120                                  ; allocate buffers
 26121                                  ; ----------------------------------------------------------------------
 26122                                  
 26123                                  ; search through the list of media supported and allocate 3 buffers if the
 26124                                  ; capacity of the drive is > 360kb
 26125                                  
 26126                                  	; 18/12/2022
 26127                                  	; cx = 0
 26128 00000DEC 833E[9902]FF            	cmp	word [buffers],-1	; has buffers been already set?
 26129 00000DF1 7403                    	je	short dodefaultbuff
 26130 00000DF3 E98000                  	jmp	dobuff			; the user entered the buffers=.
 26131                                  
 26132                                  dodefaultbuff:
 26133                                  	; 18/12/2022
 26134 00000DF6 890E[9B02]              	mov	[h_buffers],cx ; 0
 26135 00000DFA 41                      	inc	cx
 26136 00000DFB 41                      	inc	cx
 26137 00000DFC 890E[9902]              	mov	[buffers],cx ; 2	
 26138                                  	
 26139                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 26140                                  	;mov	word [buffers],2	; default to 2 buffers
 26141                                  
 26142                                  	; 23/10/2022
 26143                                  	; 04/09/2023
 26144                                  	;push	ax
 26145                                  	;push	ds ; 26/03/2019
 26146                                  
 26147                                  	; 04/09/2023
 26148                                  	; ds = cs
 26149 00000E00 C42E[6D02]              	les	bp,[DOSINFO]		; search through the dpb's
 26150                                  	;les	bp,[cs:DOSINFO]
 26151                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 26152                                  	; 11/12/2022
 26153 00000E04 26C46E00                	les	bp,[es:bp]
 26154                                  	; 23/10/2022
 26155                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 26156                                  
 26157                                  	; 04/09/2023
 26158                                  	; ds = cs
 26159                                  	;push	cs
 26160                                  	;pop	ds
 26161                                  ;SYSINIT:0DE2h:
 26162                                  nextdpb:				; test if the drive supports removeable media
 26163                                  	;mov	bl,[es:bp+DPB.drive]
 26164                                  	; 11/12/2022
 26165 00000E08 268A5E00                	mov	bl,[es:bp]
 26166                                  	; 23/10/2022
 26167                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 26168                                  
 26169                                  	;inc	bl
 26170                                  	; 18/12/2022
 26171 00000E0C 43                      	inc	bx
 26172                                  
 26173                                  	;mov	ax,(IOCTL<<8)|8
 26174 00000E0D B80844                  	mov	ax,4408h
 26175 00000E10 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 26176                                  
 26177                                  ; ignore fixed disks
 26178                                  
 26179 00000E12 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 26180 00000E14 7534                    	jnz	short nosetbuf
 26181                                  
 26182                                  ; get parameters of drive
 26183                                  
 26184 00000E16 31DB                    	xor	bx,bx
 26185                                  	;;mov	bl,[es:bp+DPB.drive]
 26186                                  	; 11/12/2022
 26187 00000E18 268A5E00                	mov	bl,[es:bp]
 26188                                  	; 23/10/2022
 26189                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 26190                                  	
 26191                                  	;inc	bl
 26192                                  	; 18/12/2022
 26193 00000E1C 43                      	inc	bx
 26194                                  
 26195 00000E1D BA[4B48]                	mov	dx,deviceparameters
 26196                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 26197 00000E20 B80D44                  	mov	ax,440Dh
 26198                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 26199 00000E23 B96008                  	mov	cx,860h
 26200 00000E26 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 26201 00000E28 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 26202                                  					; generic ioctl
 26203                                  ; determine capacity of drive
 26204                                  ; media capacity = #sectors * bytes/sector
 26205                                  
 26206                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 26207                                  	; 23/10/2022
 26208 00000E2A 8B1E[5A48]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 26209                                  	
 26210                                  ; to keep the magnitude of the media capacity within a word,
 26211                                  ; scale the sector size
 26212                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 26213                                  
 26214                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 26215                                  	; 23/10/2022
 26216 00000E2E A1[5248]                	mov	ax, [deviceparameters+7] ; bytes per sector
 26217 00000E31 31D2                    	xor	dx,dx
 26218 00000E33 B90002                  	mov	cx,512
 26219 00000E36 F7F1                    	div	cx			; scale sector size in factor of
 26220                                  					; 512 bytes
 26221 00000E38 F7E3                    	mul	bx			; ax = #sectors * size factor
 26222 00000E3A 09D2                    	or	dx,dx			; just in case of large floppies
 26223 00000E3C 7505                    	jnz	short setbuf
 26224 00000E3E 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 26225 00000E41 7607                    	jbe	short nosetbuf
 26226                                  setbuf:
 26227                                  	; 18/12/2022
 26228                                  	; word [buffers] = 2
 26229 00000E43 C606[9902]03            	mov	byte [buffers],3
 26230                                  	;mov	word [buffers],3
 26231 00000E48 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 26232                                  					; for default buffer count
 26233                                  nosetbuf:
 26234                                  	; 23/10/2022
 26235                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 26236 00000E4A 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 26237 00000E4F 7406                    	je	short chk_memsize_for_buffers
 26238                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 26239 00000E51 26C46E19                	les	bp,[es:bp+19h]
 26240 00000E55 EBB1                    	jmp	short nextdpb
 26241                                  
 26242                                  ;from dos 3.3,the default number of buffers will be changed according to the
 26243                                  ;memory size too.
 26244                                  ; default buffers = 2
 26245                                  ; if diskette media > 360 kb,then default buffers = 3
 26246                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 26247                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 26248                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 26249                                  
 26250                                  chk_memsize_for_buffers:
 26251                                  	; 18/12/2022
 26252                                  	;cmp	word [MEMORY_SIZE],2000h
 26253                                  	;jbe	short bufset
 26254                                  	;mov	word [buffers],5
 26255                                  	;cmp	word [MEMORY_SIZE],4000h
 26256                                  	;jbe	short bufset
 26257                                  	;mov	word [buffers],10
 26258                                  	;cmp	word [MEMORY_SIZE],8000h
 26259                                  	;jbe	short bufset
 26260                                  	;mov	word [buffers],15
 26261                                  
 26262                                  	; 18/12/2022
 26263                                  	; word [buffers] = 3 or 2
 26264 00000E57 BB[9902]                	mov	bx,buffers
 26265 00000E5A A1[9402]                	mov	ax,[MEMORY_SIZE]
 26266 00000E5D 48                      	dec	ax	; [MEMORY_SIZE] - 1
 26267                                  
 26268 00000E5E 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 26269 00000E61 7213                    	jb	short bufset
 26270 00000E63 C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 26271 00000E66 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 26272 00000E69 730B                    	jnb	short bufset
 26273 00000E6B C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 26274 00000E6E 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 26275 00000E71 7303                    	jnb	short bufset
 26276 00000E73 C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 26277                                  bufset:
 26278                                  	; 23/10/2022
 26279                                  	; 26/03/2019
 26280                                  	; 04/09/2023
 26281                                  	;pop	ds
 26282                                  	;pop	ax
 26283                                  
 26284                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 26285                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 26286                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 26287                                  
 26288                                  ; 26/03/2019
 26289                                  
 26290                                  ;*******************************************************************************
 26291                                  ;									       *
 26292                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 26293                                  ; input :								       *
 26294                                  ;    memhi:memlo - start of the next available memory			       *
 26295                                  ;    buffers = number of buffers					       *
 26296                                  ;    h_buffers = number of secondary buffers				       *
 26297                                  ;									       *
 26298                                  ; output:								       *
 26299                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 26300                                  ;	buffinfo set.							       *
 26301                                  ;	bufferqueue set.						       *
 26302                                  ;									       *
 26303                                  ; subroutines to be called:						       *
 26304                                  ;									       *
 26305                                  ;*******************************************************************************
 26306                                  
 26307                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26308                                  	; (SYSINIT:0E60h)
 26309                                  dobuff:
 26310                                  	; ds = cs ; 31/03/2019
 26311                                  	; 23/10/2022
 26312                                  	;lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 26313                                  	; 04/09/2023
 26314 00000E76 A1[9902]                	mov	ax,[buffers] ; 31/03/2019
 26315 00000E79 8B0E[9B02]              	mov	cx,[h_buffers] ; *
 26316 00000E7D C51E[6D02]              	lds	bx,[DOSINFO]
 26317                                  	;mov	ax,[cs:buffers]	; set sysi_buffers
 26318                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 26319 00000E81 89473F                  	mov	[bx+3Fh],ax
 26320                                  	; 04/09/2023
 26321                                  	;mov	ax,[cs:h_buffers]
 26322                                  	;;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 26323                                  	;mov	[bx+41h],ax
 26324                                  	; 04/09/2023
 26325 00000E84 894F41                  	mov	[bx+41h],cx ; *
 26326 00000E87 C55F12                  	lds	bx,[bx+12h]
 26327                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 26328 00000E8A E8FA33                  	call	round		; get [memhi]:[memlo]
 26329                                  	;mov	al,devmark_buf	; ='B'
 26330 00000E8D B042                    	mov	al,'B'	
 26331 00000E8F E81506                  	call	setdevmark
 26332                                  
 26333                                  ;allocate buffers
 26334                                  
 26335 00000E92 1E                      	push	ds			; save buffer info. ptr.
 26336 00000E93 53                      	push	bx
 26337                                  
 26338 00000E94 E85003                  	call	set_buffer
 26339                                  
 26340 00000E97 5B                      	pop	bx
 26341 00000E98 1F                      	pop	ds
 26342                                  
 26343                                  ;now set the secondary buffer if specified.
 26344                                  
 26345 00000E99 2E833E[9B02]00          	cmp	word [cs:h_buffers],0
 26346 00000E9F 742D                    	je	short xif16
 26347 00000EA1 E8E333                  	call	round
 26348                                  	; 23/10/2022
 26349 00000EA4 2E8B0E[6203]            	mov	cx,[cs:memlo]
 26350                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 26351 00000EA9 894F06                  	mov	[bx+6],cx
 26352 00000EAC 2E8B0E[6403]            	mov	cx,[cs:memhi]
 26353                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 26354 00000EB1 894F08                  	mov	[bx+8],cx
 26355 00000EB4 2E8B0E[9B02]            	mov	cx,[cs:h_buffers]
 26356                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 26357 00000EB9 894F0A                  	mov	[bx+10],cx
 26358 00000EBC B80002                  	mov	ax,512			; 512 byte
 26359 00000EBF F7E1                    	mul	cx
 26360 00000EC1 2EA3[6203]              	mov	[cs:memlo],ax
 26361                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 26362 00000EC5 2E800E[CC14]02          	or	byte [cs:setdevmarkflag],2
 26363 00000ECB E8B933                  	call	round
 26364                                  xif16:
 26365                                  
 26366                                  ; ----------------------------------------------------------------------
 26367                                  ; allocate cdss
 26368                                  ; ----------------------------------------------------------------------
 26369                                  
 26370                                  buf1:
 26371 00000ECE E8B633                  	call	round
 26372                                  
 26373 00000ED1 50                      	push	ax
 26374                                  	; 23/10/2022
 26375                                  	;mov	ax,devmark_cds		;='L'
 26376 00000ED2 B84C00                  	mov	ax, 'L'
 26377 00000ED5 E8CF05                  	call	setdevmark
 26378 00000ED8 58                      	pop	ax
 26379                                  
 26380 00000ED9 2EC43E[6D02]            	les	di,[cs:DOSINFO]
 26381                                  	;mov	cl,[es:di+SYSI_NUMIO]
 26382 00000EDE 268A4D20                	mov	cl,[es:di+20h]
 26383 00000EE2 2E3A0E[A202]            	cmp	cl,[cs:NUM_CDS]
 26384 00000EE7 7305                    	jae	short gotncds 		; user setting must be at least numio
 26385 00000EE9 2E8A0E[A202]            	mov	cl,[cs:NUM_CDS]
 26386                                  gotncds:
 26387 00000EEE 30ED                    	xor	ch,ch
 26388                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 26389 00000EF0 26884D21                	mov	[es:di+21h],cl
 26390 00000EF4 2EA1[6403]              	mov	ax,[cs:memhi]
 26391                                  	;mov	[es:di+SYSI_CDS+2],ax
 26392 00000EF8 26894518                	mov	[es:di+18h],ax
 26393 00000EFC 2EA1[6203]              	mov	ax,[cs:memlo]
 26394                                  	;mov	[es:di+SYSI_CDS],ax
 26395 00000F00 26894516                	mov	[es:di+16h],ax
 26396 00000F04 88C8                    	mov	al,cl
 26397                                  	;mov	ah,curdirlen ; curdir_list.size
 26398 00000F06 B458                    	mov	ah,88
 26399 00000F08 F6E4                    	mul	ah
 26400 00000F0A E84D02                  	call	ParaRound
 26401 00000F0D 2E0106[6403]            	add	[cs:memhi],ax
 26402                                  
 26403                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 26404 00000F12 2E800E[CC14]02          	or	byte [cs:setdevmarkflag],2
 26405 00000F18 E86C33                  	call	round			; check for mem error before initializing
 26406                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 26407 00000F1B 26C535                  	lds	si,[es:di]
 26408                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 26409 00000F1E 26C47D16                	les	di,[es:di+16h]
 26410 00000F22 E876FD                  	call	fooset
 26411                                  
 26412                                  ; ----------------------------------------------------------------------
 26413                                  ; allocate space for internal stack
 26414                                  ; ----------------------------------------------------------------------
 26415                                  
 26416 00000F25 0E                      	push	cs
 26417 00000F26 1F                      	pop	ds
 26418                                  
 26419                                  ;	if the user did not entered stacks= command, as a default, do not install
 26420                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 26421                                  ;	otherwise,install it to the user specified value or to the default
 26422                                  ;	value of 9,128 for other systems.
 26423                                  
 26424 00000F27 833E[9002]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 26425 00000F2C 740E                    	je	short doinstallstack	; then install as specified by the user
 26426 00000F2E 803E[BC02]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 26427 00000F33 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 26428 00000F35 803E[BB02]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 26429 00000F3A 736D                    	jae	short skipstack
 26430                                  doinstallstack:
 26431 00000F3C A1[8C02]                	mov	ax,[stack_count]	; stack_count = 0?
 26432 00000F3F 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 26433 00000F41 7466                    	jz	short skipstack		; don't install stack.
 26434                                  
 26435                                  ;	dynamic relocation of stack code.
 26436                                  
 26437 00000F43 E84133                  	call	round			;[memhi] = seg. for stack code
 26438                                  					;[memlo] = 0
 26439                                  
 26440                                  ; set devmark block into memory for mem command
 26441                                  ; devmark_id = 's' for stack
 26442                                  
 26443                                  	;mov	al,devmark_stk	;='S'
 26444                                  	; 23/10/2022
 26445 00000F46 B053                    	mov	al,'S'
 26446 00000F48 E85C05                  	call	setdevmark
 26447                                  
 26448 00000F4B A1[6403]                	mov	ax,[memhi]
 26449 00000F4E 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 26450                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26451                                  	; 11/12/2022
 26452                                  	; ds = cs
 26453                                  	;push	cs
 26454                                  	;pop	ds
 26455 00000F50 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 26456 00000F52 31FF                    	xor	di,di
 26457 00000F54 B9[6902]                	mov	cx,endstackcode
 26458 00000F57 890E[6203]              	mov	[memlo],cx
 26459 00000F5B E82933                  	call	round		;have enough space for relocation?
 26460 00000F5E F3A4                    	rep	movsb
 26461                                  
 26462 00000F60 1E                      	push	ds		; stick the location of the NextStack entry
 26463                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 26464                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 26465                                  	; 21/10/2022
 26466 00000F61 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 26467 00000F64 8ED8                    	mov	ds,ax
 26468 00000F66 C706[0208][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 26469 00000F6C 8C06[0408]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 26470                                  
 26471 00000F70 2EA1[6203]              	mov	ax,[cs:memlo]
 26472 00000F74 2EA3[9002]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 26473 00000F78 A3[0808]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 26474 00000F7B 2EA1[6403]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 26475 00000F7F 2EA3[9202]              	mov	[cs:stack_addr+2],ax
 26476 00000F83 A3[0A08]                	mov	[IT_StackLoc+2],ax
 26477                                  
 26478                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 26479                                  
 26480                                  	;mov	ax,entrysize ; mov ax,8
 26481                                  	; 23/10/2022
 26482 00000F86 B80800                  	mov	ax,8
 26483 00000F89 2E0306[8E02]            	add	ax,[cs:stack_size]
 26484 00000F8E 2EF726[8C02]            	mul	word [cs:stack_count]
 26485                                  
 26486 00000F93 A3[0C08]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 26487                                  
 26488 00000F96 1F                      	pop	ds		; no more need to access Instance Table
 26489                                  
 26490 00000F97 E8C001                  	call	ParaRound	; convert size to paragraphs
 26491                                  	
 26492                                  	; 11/12/2022
 26493                                  	; ds = cs
 26494                                  	;add	[cs:memhi],ax
 26495 00000F9A 0106[6403]              	add	[memhi],ax
 26496                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 26497                                  	;or	byte [cs:setdevmarkflag],2
 26498 00000F9E 800E[CC14]02            	or	byte [setdevmarkflag],2
 26499                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 26500                                  				;to set the devmark_size for stack by round routine.
 26501 00000FA3 E8E132                  	call	round		; check for memory error before
 26502                                  				; continuing
 26503 00000FA6 E8E502                  	call	stackinit	; initialize hardware stack. 
 26504                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 26505                                  skipstack:
 26506                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26507                                  	; (SYSINIT:0F99h)
 26508                                  
 26509                                  	; 11/12/2022
 26510                                  	; ds = cs
 26511                                  	;push	cs
 26512                                  	;pop	ds
 26513                                  
 26514 00000FA9 A0[9F02]                	mov	al,[FILES]
 26515 00000FAC 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 26516                                  				;  it does sign extend.
 26517 00000FAE 89C1                    	mov	cx,ax
 26518 00000FB0 31DB                    	xor	bx,bx		;close standard input
 26519 00000FB2 B43E                    	mov	ah,3Eh ; CLOSE
 26520 00000FB4 CD21                    	int	21h
 26521 00000FB6 BB0200                  	mov	bx,2
 26522                                  rcclloop:			;close everybody but standard output
 26523 00000FB9 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 26524 00000FBB CD21                    	int	21h		; in case we can't get new one open.
 26525 00000FBD 43                      	inc	bx
 26526 00000FBE E2F9                    	loop	rcclloop
 26527                                  
 26528 00000FC0 BA[5B45]                	mov	dx,condev
 26529 00000FC3 B002                    	mov	al,2
 26530 00000FC5 B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 26531 00000FC7 F9                      	stc			; set for possible int 24
 26532 00000FC8 CD21                    	int	21h
 26533 00000FCA 7305                    	jnc	short goaux
 26534 00000FCC E8EE34                  	call	badfil
 26535 00000FCF EB13                    	jmp	short goaux2
 26536                                  goaux:	
 26537 00000FD1 50                      	push	ax
 26538 00000FD2 BB0100                  	mov	bx,1		;close standard output
 26539 00000FD5 B43E                    	mov	ah,3Eh ; CLOSE
 26540 00000FD7 CD21                    	int	21h
 26541 00000FD9 58                      	pop	ax
 26542                                  
 26543 00000FDA 89C3                    	mov	bx,ax		;new device handle
 26544 00000FDC B445                    	mov	ah,45h ; XDUP
 26545 00000FDE CD21                    	int	21h		;dup to 1,stdout
 26546 00000FE0 B445                    	mov	ah,45h ; XDUP
 26547 00000FE2 CD21                    	int	21h		;dup to 2,stderr
 26548                                  goaux2: 
 26549 00000FE4 BA[5F45]                	mov	dx,auxdev
 26550 00000FE7 B002                    	mov	al,2		;read/write access
 26551 00000FE9 E80235                  	call	open_dev
 26552                                  
 26553 00000FEC BA[6345]                	mov	dx,prndev
 26554 00000FEF B001                    	mov	al,1		;write only
 26555 00000FF1 E8FA34                  	call	open_dev
 26556                                  
 26557                                  ;global rearm command for shared interrupt devices attached in the system;
 26558                                  ;shared interrupt attachment has some problem when it issues interrupt
 26559                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 26560                                  ;no further interrupts on that level will be presented until a global rearm
 26561                                  ;is issued. by the request of the system architecture group, msbio will
 26562                                  ;issue a global rearm after every device driver is loaded.
 26563                                  ;to issue a global rearm:	;for pc1,xt,palace
 26564                                  ;
 26565                                  ;			  out 02f2h,xx  ; interrupt level 2
 26566                                  ;			  out 02f3h,xx  ; interrupt level 3
 26567                                  ;			  out 02f4h,xx  ; interrupt level 4
 26568                                  ;			  out 02f5h,xx  ; interrupt level 5
 26569                                  ;			  out 02f6h,xx  ; interrupt level 6
 26570                                  ;			  out 02f7h,xx  ; interrupt level 7
 26571                                  ;
 26572                                  ;	for pc at,in addition to the above commands,
 26573                                  ;	need to handle the secondary interrupt handler
 26574                                  ;
 26575                                  ;			  out 06f2h,xx  ; interrupt level 10
 26576                                  ;			  out 06f3h,xx  ; interrupt level 11
 26577                                  ;			  out 06f4h,xx  ; interrupt level 12
 26578                                  ;			  out 06f6h,xx  ; interrupt level 14
 26579                                  ;			  out 06f7h,xx  ; interrupt level 15
 26580                                  ;
 26581                                  ;	for round-up machine
 26582                                  ;
 26583                                  ;			  none.
 26584                                  
 26585                                  ; where xx stands for any value.
 26586                                  ;
 26587                                  ; for your information,after naples level machine,the system service bios
 26588                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 26589                                  
 26590                                  	; 24/10/2022
 26591                                  
 26592 00000FF4 50                      	push	ax
 26593 00000FF5 53                      	push	bx
 26594 00000FF6 52                      	push	dx
 26595 00000FF7 06                      	push	es
 26596                                  
 26597 00000FF8 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 26598 00000FFA BAF202                  	mov	dx,2F2h 		;get starting address
 26599 00000FFD EE                      	out	dx,al			; out 02f2h,0ffh
 26600 00000FFE 42                      	inc	dx
 26601 00000FFF EE                      	out	dx,al			; out 02f3h,0ffh
 26602 00001000 42                      	inc	dx
 26603 00001001 EE                      	out	dx,al			; out 02f4h,0ffh
 26604 00001002 42                      	inc	dx
 26605 00001003 EE                      	out	dx,al			; out 02f5h,0ffh
 26606 00001004 42                      	inc	dx
 26607 00001005 EE                      	out	dx,al			; out 02f6h,0ffh
 26608 00001006 42                      	inc	dx
 26609 00001007 EE                      	out	dx,al			; out 02f7h,0ffh
 26610                                  
 26611                                  ;sb secondary global rearm
 26612                                  
 26613 00001008 B800F0                  	mov	ax,0F000h		;get machine type
 26614 0000100B 8EC0                    	mov	es,ax
 26615 0000100D 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 26616 00001013 740D                    	je	short startrearm	; *if at no need to check
 26617                                  
 26618 00001015 B4C0                    	mov	ah,0C0h 		;get system configuration
 26619 00001017 CD15                    	int	15h			; *
 26620 00001019 7216                    	jc	short finishrearm	; *jmp if old rom
 26621                                  
 26622                                  ; test feature byte for secondary interrupt controller
 26623                                  
 26624 0000101B 26F6470540              	test	byte [es:bx+5],40h
 26625                                  	; 24/10/2022
 26626                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 26627 00001020 740F                    	je	short finishrearm	;jmp if it is there
 26628                                  
 26629                                  startrearm:
 26630 00001022 B0FF                    	mov	al,0FFh 		;write any pattern to port
 26631 00001024 BAF206                  	mov	dx,6F2h 		;get starting address
 26632 00001027 EE                      	out	dx,al			;out 06f2h,0ffh
 26633 00001028 42                      	inc	dx			;bump address
 26634 00001029 EE                      	out	dx,al			;out 06f3h,0ffh
 26635 0000102A 42                      	inc	dx			;bump address
 26636 0000102B EE                      	out	dx,al			;out 06f4h,0ffh
 26637 0000102C 42                      	inc	dx			;bump address
 26638 0000102D 42                      	inc	dx			;bump address
 26639 0000102E EE                      	out	dx,al			;out 06f6h,0ffh
 26640 0000102F 42                      	inc	dx			;bump address
 26641 00001030 EE                      	out	dx,al			;out 06f7h,0ffh
 26642                                  
 26643                                  finishrearm:
 26644 00001031 07                      	pop	es
 26645 00001032 5A                      	pop	dx
 26646 00001033 5B                      	pop	bx
 26647 00001034 58                      	pop	ax
 26648                                  
 26649                                  ;    global rearm end *******************
 26650                                  
 26651                                  ; ----------------------------------------------------------------------
 26652                                  ; allocate sysinit_base for install= command
 26653                                  ; ----------------------------------------------------------------------
 26654                                  ; sysinit_base allocation.
 26655                                  ;   check if endfile has been called to handle install= command.
 26656                                  
 26657                                  set_sysinit_base:
 26658                                  
 26659                                  ; ----------------------------------------------------------------------
 26660                                  ;sysinit_base will be established in the secure area of
 26661                                  ;lower memory when it handles the first install= command.
 26662                                  ;sysinit_base is the place where the actual exec function will be called and
 26663                                  ;will check sysinit module in high memory if it is damaged by the application
 26664                                  ;program.  if sysinit module has been broken,then "memory error..." message
 26665                                  ;is displayed by sysinit_base.
 26666                                  ; ----------------------------------------------------------------------
 26667                                  
 26668                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 26669                                  	; (SYSINIT:1028h)
 26670                                  
 26671                                  	; 11/12/2022
 26672                                  	; ds = cs
 26673 00001035 50                      	push	ax			; set devmark for mem command
 26674 00001036 A1[6403]                	mov	ax,[memhi]
 26675 00001039 2B06[6803]              	sub	ax,[area]
 26676 0000103D A3[6003]                	mov	[impossible_owner_size],ax ;remember the size in case.
 26677                                  	;mov	al,devmark_inst ; 'T'
 26678 00001040 B054                    	mov	al,'T'
 26679 00001042 E86204                  	call	setdevmark
 26680 00001045 58                      	pop	ax
 26681                                  
 26682 00001046 8B3E[6403]              	mov	di,[memhi]
 26683 0000104A 8EC7                    	mov	es,di
 26684 0000104C 893E[D402]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 26685 00001050 31FF                    	xor	di,di
 26686 00001052 893E[D202]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 26687 00001056 BE[6611]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 26688 00001059 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 26689                                  	; 24/10/2022 
 26690                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 26691 0000105C 010E[6203]              	add	[memlo],cx
 26692                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 26693                                  	; 11/12/2022
 26694                                  	; ds = cs
 26695                                  	;or	byte [cs:setdevmarkflag],2
 26696 00001060 800E[CC14]02            	or	byte [setdevmarkflag],2
 26697                                  	;or	byte [setdevmarkflag],for_devmark
 26698 00001065 E81F32                  	call	round			; check mem error. also,readjust memhi for the next use.
 26699 00001068 F3A4                    	rep	movsb			; reallocate it.
 26700                                  
 26701 0000106A C706[D602][4D11]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 26702 00001070 8C0E[D802]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 26703                                  	;or	word [install_flag],has_installed ; set the flag.
 26704                                  	;or	byte [install_flag],has_installed ; 2
 26705                                  	; 11/12/2022
 26706 00001074 800E[CE02]02            	or	byte [install_flag],2
 26707                                  	; 24/10/2022
 26708                                  	;or	word [install_flag],2	
 26709                                  
 26710                                  ; ----------------------------------------------------------------------
 26711                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 26712                                  ; the top of the memory will be allocated for sysinit and config.sys if
 26713                                  ; have_install_cmd.
 26714                                  ; ----------------------------------------------------------------------
 26715                                  
 26716 00001079 E80B32                  	call	round
 26717 0000107C 8B1E[6403]              	mov	bx,[memhi]
 26718 00001080 A1[6803]                	mov	ax,[area]
 26719 00001083 A3[5E03]                	mov	[old_area],ax		; save [area]
 26720 00001086 8EC0                    	mov	es,ax			;calc what we needed
 26721 00001088 29C3                    	sub	bx,ax
 26722                                  	; 24/10/2022
 26723 0000108A B44A                    	mov	ah,4Ah ; SETBLOCK
 26724 0000108C CD21                    	int	21h			;give the rest back
 26725                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 26726                                  		; ES = segment address of block to change
 26727                                  		; BX = new size in paragraphs
 26728 0000108E 06                      	push	es
 26729 0000108F 8CC0                    	mov	ax,es
 26730 00001091 48                      	dec	ax
 26731 00001092 8EC0                    	mov	es,ax			;point to arena
 26732                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 26733                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 26734                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 26735                                  	; 24/10/2022
 26736 00001094 26C70601000800          	mov	word [es:1],8		;set impossible owner
 26737 0000109B 26C70608005344          	mov	word [es:8],'SD'	; System Data
 26738 000010A2 07                      	pop	es
 26739                                  
 26740 000010A3 BBFFFF                  	mov	bx,0FFFFh
 26741 000010A6 B448                    	mov	ah,48h ; ALLOC
 26742 000010A8 CD21                    	int	21h
 26743 000010AA B448                    	mov	ah,48h ; ALLOC
 26744 000010AC CD21                    	int	21h			; allocate the rest of the memory
 26745                                  		; DOS - 2+ - ALLOCATE MEMORY
 26746                                  		; BX = number of 16-byte paragraphs desired
 26747 000010AE A3[6403]                	mov	[memhi],ax		; start of the allocated memory
 26748 000010B1 C706[6203]0000          	mov	word [memlo],0		;  to be used next.
 26749                                  
 26750                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 26751                                  ;;;; allocated.
 26752                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 26753                                  ;;;; this time) to the top-of-the memory),here we are going to
 26754                                  ;;;; 1). "setblock" from memhi to confbot.
 26755                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 26756                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 26757                                  
 26758                                  ;memory allocation for sysinit,confbot module.
 26759                                  
 26760 000010B7 8EC0                    	mov	es,ax
 26761                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 26762                                  	; (SYSINIT:11DFh)
 26763 000010B9 8B1E[A302]              	mov	bx,[CONFBOT]
 26764                                  	; 24/10/2022
 26765                                  	;mov	bx,[top_of_cdss] ; mov bx,[confbot]
 26766 000010BD 29C3                    	sub	bx,ax			; confbot - memhi
 26767 000010BF 4B                      	dec	bx			; make a room for the memory block id.
 26768 000010C0 4B                      	dec	bx			; make sure!!!.
 26769 000010C1 B44A                    	mov	ah,4Ah ; SETBLOCK
 26770 000010C3 CD21                    	int	21h			; this will free (confbot to top of memory)
 26771                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 26772                                  		; ES = segment address of block to change
 26773                                  		; BX = new size in paragraphs
 26774 000010C5 BBFFFF                  	mov	bx,0FFFFh
 26775 000010C8 B448                    	mov	ah,48h ; ALLOC
 26776 000010CA CD21                    	int	21h
 26777 000010CC B448                    	mov	ah,48h ; ALLOC
 26778 000010CE CD21                    	int	21h			; allocate (confbot to top of memory)
 26779                                  		; DOS - 2+ - ALLOCATE MEMORY
 26780                                  		; BX = number of 16-byte paragraphs desired
 26781 000010D0 A3[6803]                	mov	[area],ax		; save allocated memory segment.
 26782                                  					; need this to free this area for command.com.
 26783 000010D3 8E06[6403]              	mov	es,[memhi]
 26784 000010D7 B449                    	mov	ah,49h			; free allocated memory.
 26785 000010D9 CD21                    	int	21h			; free (memhi to confbot(=area))
 26786                                  		; DOS - 2+ - FREE MEMORY
 26787                                  		; ES = segment address of area to be freed
 26788                                  endfile_ret:
 26789 000010DB C3                      	retn
 26790                                  
 26791                                  ; End of "EndFile" DOS structure configuration.
 26792                                  
 26793                                  ; ----------------------------------------------------------------------
 26794                                  ; 26/03/2019 - Retro DOS v4.0
 26795                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 26796                                  ; ----------------------------------------------------------------------
 26797                                  ; Do_Install_Exec
 26798                                  ;
 26799                                  ; This procedure is used to EXEC a program being loaded via the 
 26800                                  ; "install=" mechanism in config.sys. It does this by setting up
 26801                                  ; the parameters, and then jumping to sysinit_base, which has been
 26802                                  ; setup in low memory. When complete, sysinit_base will jump back
 26803                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 26804                                  ; program).
 26805                                  
 26806                                  ;SYSINIT:10CFh:
 26807                                  
 26808                                  do_install_exec:			; now,handles install= command.
 26809                                  
 26810 000010DC 56                      	push	si			; save si for config.sys again.
 26811                                  
 26812                                  ; we are going to call load/exec function.
 26813                                  ; set es:bx to the parameter block here;;;;;;;
 26814                                  ; set ds:dx to the asciiz string. remember that we already has 0
 26815                                  ; after the filename. so parameter starts after that. if next
 26816                                  ; character is a line feed (i.e. 10),then assume that the 0
 26817                                  ; we already encountered used to be a carrage return. in this
 26818                                  ; case,let's set the length to 0 which will be followed by
 26819                                  ; carridge return.
 26820                                  
 26821                                  ; es:si -> command line in config.sys. points to the first non blank
 26822                                  ;character after =.
 26823                                  
 26824 000010DD 06                      	push	es
 26825 000010DE 1E                      	push	ds
 26826 000010DF 07                      	pop	es
 26827 000010E0 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 26828 000010E1 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 26829                                  
 26830 000010E3 31C9                    	xor	cx,cx
 26831 000010E5 FC                      	cld
 26832 000010E6 2EC606[F102]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 26833 000010EC BF[F202]                	mov	di,ldexec_parm
 26834                                  installfilename:			; skip the file name
 26835 000010EF AC                      	lodsb				; al = ds:si; si++
 26836                                  	; 05/09/2023
 26837 000010F0 08C0                    	or	al,al
 26838                                  	;cmp	al,0
 26839 000010F2 7402                    	je	short got_installparm
 26840 000010F4 EBF9                    	jmp	short installfilename
 26841                                  got_installparm:			; copy the parameters to ldexec_parm
 26842 000010F6 AC                      	lodsb
 26843 000010F7 268805                  	mov	[es:di],al
 26844 000010FA 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 26845 000010FC 7405                    	je	short done_installparm
 26846 000010FE FEC1                    	inc	cl			; # of char. in the parm.
 26847 00001100 47                      	inc	di
 26848 00001101 EBF3                    	jmp	short got_installparm
 26849                                  done_installparm:
 26850 00001103 2E880E[F002]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 26851                                  	; 05/09/2023
 26852 00001108 08C9                    	or	cl,cl
 26853                                  	;cmp	cl,0			; if no parm,then
 26854 0000110A 7506                    	jne	short install_seg_set 	; let the parm area
 26855 0000110C 2EC606[F102]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 26856                                  					; starts with cr.
 26857                                  install_seg_set:
 26858                                  	; 05/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 26859 00001112 31DB                    	xor	bx, bx
 26860                                  	;mov	word [cs:0],0		; make a null environment segment
 26861 00001114 2E891F                  	mov	[cs:bx], bx ; 05/09/2023
 26862 00001117 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 26863                                  
 26864                                  ;---------------------------------------------------M067----------------
 26865                                  ;
 26866                                  ; 	the environment pointer is made 0. so the current environment ptr.
 26867                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 26868                                  ;
 26869                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 26870                                  ;
 26871                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 26872                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 26873                                  ; 	was fixed. 
 26874                                  ;
 26875                                  ; ----------------------------------------------------------------------
 26876                                  
 26877                                  ;;ifdef MULTI_CONFIG
 26878                                  
 26879                                  ; If there's any environment data in "config_wrkseg", pass to app
 26880                                  
 26881                                  ; 30/12/2022 - Retro DOS v4.0 (Modified MSDOS 6.21 IO.SYS SYSINIT)
 26882                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 26883                                  ;%if 0
 26884 00001119 89C1                    	mov	cx,ax ; *
 26885                                  	; 05/09/2023
 26886 0000111B 2E391E[C314]            	cmp	[cs:config_envlen],bx ; 0
 26887                                  	;cmp	word [cs:config_envlen],0
 26888 00001120 7405                    	je	short no_envdata2
 26889 00001122 2E8B0E[C514]            	mov	cx,[cs:config_wrkseg] ; *
 26890                                  no_envdata2:
 26891                                  ;;endif  ;MULTI_CONFIG
 26892                                  
 26893                                  ;%endif	; 24/10/2022
 26894                                  
 26895                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 26896                                  	; 05/09/2023 (BugFix)
 26897                                  	; 24/10/2022
 26898 00001127 2E890E[4203]            	mov	[cs:iexec.environ],cx ; *
 26899                                  	; 02/11/2022
 26900                                  	;mov	[cs:iexec.environ],ax	; 05/09/2023
 26901                                  
 26902                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 26903 0000112C 2EA3[4603]              	mov	[cs:iexec.ldexec_line+2],ax
 26904                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 26905 00001130 2EA3[4A03]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 26906                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 26907 00001134 2EA3[4E03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 26908 00001138 E86000                  	call	sum_up
 26909 0000113B 26A3[DA02]              	mov	[es:checksum],ax	; save the value of the sum
 26910 0000113F 31C0                    	xor	ax,ax
 26911 00001141 B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 26912 00001143 BB[4203]                	mov	bx,instexe		; es:bx -> parm block.
 26913 00001146 06                      	push	es			; save es,ds for load/exec
 26914 00001147 1E                      	push	ds			; these registers will be restored in sysinit_base.
 26915 00001148 2EFF2E[D202]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 26916                                  					; load/exec function and check sum.
 26917                                  
 26918                                  ;----------------------------------------
 26919                                  
 26920                                  ;j.k. this is the returning address from sysinit_base.
 26921                                  
 26922                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 26923                                  
 26924                                  sysinitptr:				; returning far address from sysinit_base
 26925 0000114D 5E                      	pop	si			; restore si for config.sys file.
 26926 0000114E 06                      	push	es
 26927 0000114F 1E                      	push	ds
 26928 00001150 07                      	pop	es
 26929 00001151 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 26930 00001152 7305                            jnc     short install_exit_ret
 26931                                  
 26932 00001154 56                      	push	si			; error in loading the file for install=.
 26933 00001155 E86933                  	call	badload 		; es:si-> path,filename,0.
 26934 00001158 5E                      	pop	si
 26935                                  
 26936                                  	; 24/10/2022
 26937                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 26938                                  	; 11/12/2022
 26939                                  	; ds = cs
 26940                                  
 26941                                  	; 30/12/2022 - Retro DOS v4.2
 26942                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:1283h)
 26943                                  
 26944                                  install_exit_ret:
 26945 00001159 C3                      	retn
 26946                                  
 26947                                  ; 30/12/2022 - Retro DOS v4.2
 26948                                  %if 0
 26949                                  install_exit_ret:
 26950                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 26951                                  
 26952                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 26953                                  ;SYSINIT:1142h:
 26954                                  	mov     ah,4Dh
 26955                                  	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 26956                                  	cmp     ah,3
 26957                                  	jz      short sysinitptr_retn
 26958                                  	call    error_line
 26959                                  	stc
 26960                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 26961                                  	retn		
 26962                                  
 26963                                  %endif ; 24/10/2022
 26964                                  
 26965                                  ; ----------------------------------------------------------------------
 26966                                  
 26967                                  ;**	ParaRound - Round Up length to paragraph multiple
 26968                                  ;
 26969                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 26970                                  ;	by 16 yielding a "length in paragraphs" value.
 26971                                  ;
 26972                                  ;	ENTRY	(ax) = byte length
 26973                                  ;	EXIT	(ax) = rounded up length in paragraphs
 26974                                  ;	USES	ax, flags
 26975                                  
 26976                                  ParaRound:
 26977 0000115A 83C00F                  	add	ax,15
 26978 0000115D D1D8                    	rcr	ax,1
 26979 0000115F D1E8                    	shr	ax,1
 26980 00001161 D1E8                    	shr	ax,1
 26981 00001163 D1E8                    	shr	ax,1
 26982 00001165 C3                      	retn
 26983                                  
 26984                                  ; ----------------------------------------------------------------------
 26985                                  ; sysinit_base module.
 26986                                  ;
 26987                                  ; This module is relocated by the routine EndFile to a location in low
 26988                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 26989                                  ; that are being loaded by the "install=" command. After the EXEC call
 26990                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 26991                                  ; top of memory) to be sure that the EXECed program did not damage it.
 26992                                  ; If it did, then this module will print an error message and stop the
 26993                                  ; system. Otherwise, it returns control to SYSINIT.
 26994                                  ;
 26995                                  ;in: after relocation,
 26996                                  ;    ax = 4b00h - load and execute the program dos function.
 26997                                  ;    ds = confbot. segment of config.sys file image
 26998                                  ;    es = sysinitseg. segment of sysinit module itself.
 26999                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 27000                                  ;    es:bx = pointer to a parameter block for load.
 27001                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 27002                                  ;    bigsize (word) - # of word from confbot to SI_end.
 27003                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 27004                                  ;			word boundary moduler form.
 27005                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 27006                                  ;
 27007                                  ;note: sysinit should save necessary registers and when the control is back
 27008                                  
 27009                                  	; 24/10/2022
 27010                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 27011                                  sysinit_base:				
 27012 00001166 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 27013 0000116B 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 27014 00001170 CD21                    	int	21h			; load/exec dos call.
 27015 00001172 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 27016 00001177 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 27017 0000117C 1F                      	pop	ds			; restore confbot seg
 27018 0000117D 07                      	pop	es			; restore sysinitseg
 27019 0000117E 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 27020                                  					; at this time,i don't have to worry about
 27021                                  					; that sysinit module has been broken or not.
 27022 00001180 E81800                  	call	sum_up			; otherwise,check if it is good.
 27023 00001183 263906[DA02]            	cmp	[es:checksum],ax
 27024 00001188 740C                    	je	short sysinit_base_end
 27025                                  
 27026                                  ;	memory broken. show "memory allocation error" message and stall.
 27027                                  
 27028 0000118A B409                    	mov	ah,9
 27029 0000118C 0E                      	push	cs
 27030 0000118D 1F                      	pop	ds
 27031                                  	; 30/12/2022
 27032                                  	; (MSDOS 6.21 IO.SYS, SYSINIT:12B8h)
 27033                                  	;mov	dx, 102
 27034 0000118E BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 27035                                  					; 66h (for MSDOS 6.21 SYSINIT)
 27036 00001191 CD21                    	int	21h
 27037                                  		; DOS - PRINT STRING
 27038                                  		; DS:DX -> string terminated by "$"
 27039                                  
 27040                                  	; 30/12/2022 - Retro DOS v4.2
 27041                                  stall:
 27042                                  	; 24/10/2022
 27043                                  _stall: 
 27044                                  	; 11/12/2022
 27045 00001193 F4                      	hlt 
 27046                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27047                                  	;hlt				;use HLT to minimize energy consumption
 27048 00001194 EBFD                            jmp	short _stall
 27049                                  
 27050                                  sysinit_base_end: 
 27051 00001196 26FF2E[D602]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 27052                                  
 27053                                  ;-------------------------------------
 27054                                  
 27055                                  sum_up:
 27056                                  
 27057                                  ;in:   es - sysinitseg.
 27058                                  ;out:  ax - result
 27059                                  ;
 27060                                  ;remark: since this routine will only check starting from "locstack" to the end of
 27061                                  ;	 sysinit segment,the data area, and the current stack area are not
 27062                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 27063                                  ;	 gaurantee to be safe.
 27064                                  ;
 27065                                  ;first sum up confbot seg.
 27066                                  
 27067 0000119B 1E                      	push	ds
 27068                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 27069                                  	; (SYSINIT:12C6h)
 27070 0000119C 26A1[A302]              	mov	ax,[es:CONFBOT]
 27071                                  	; 24/10/2022
 27072                                  	;mov	ax,[es:top_of_cdss]
 27073 000011A0 8ED8                    	mov	ds,ax
 27074 000011A2 31F6                    	xor	si,si
 27075 000011A4 31C0                    	xor	ax,ax
 27076 000011A6 268B0E[D002]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 27077                                  					; whole test better fail.
 27078 000011AB D1E9                    	shr	cx,1			; make it a word count
 27079 000011AD 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 27080                                  sum1:
 27081 000011AF 0304                    	add	ax,[si]
 27082 000011B1 46                      	inc	si
 27083 000011B2 46                      	inc	si
 27084 000011B3 E2FA                    	loop	sum1
 27085                                  ;now,sum up sysinit module.
 27086                                  sum_sys_code:
 27087                                  	; 24/10/2022
 27088 000011B5 BEB411                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 27089                                  			    ; 532h (MSDOS 6.21 IO.SYS, SYSINIT)
 27090                                  				        ; starting after the stack.  M069
 27091                                  					;  this does not cover the possible stack code!!!
 27092                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 27093                                  	; 02/11/2022
 27094                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 27095                                  	; 30/12/2022  
 27096 000011B8 B9[304E]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 27097 000011BB 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 27098 000011BD D1E9                    	shr	cx,1
 27099                                  sum2:
 27100 000011BF 260304                  	add	ax,[es:si]
 27101 000011C2 46                      	inc	si
 27102 000011C3 46                      	inc	si
 27103 000011C4 E2F9                    	loop	sum2
 27104 000011C6 1F                      	pop	ds
 27105 000011C7 C3                      	retn
 27106                                  
 27107                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 27108                                  ; 30/12/2022 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 27109                                  ; (SYSINIT:12F2h)
 27110                                  
 27111                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 27112                                  ;SYSINIT:11BDh:			    ; = 62 (MSDOS 6.21 IO.SYS, SYSINIT:1290h) 	
 27113 000011C8 0000                    	dw	0
 27114                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 27115                                  ;SYSINIT:11BFh:			    ; = 64 (MSDOS 6.21 IO.SYS, SYSINIT:1292h)
 27116 000011CA 0000                    	dw	0	
 27117                                  
 27118                                  mem_alloc_err_msgx:
 27119                                  
 27120                                         ;include msbio.cl4		; memory allocation error message
 27121                                  
 27122                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 27123 000011CC 0D0A                    	db	0Dh,0Ah
 27124 000011CE 4D656D6F727920616C-     	db 	'Memory allocation error $'
 27124 000011D7 6C6F636174696F6E20-
 27124 000011E0 6572726F722024     
 27125                                  
 27126                                  end_sysinit_base: ; label byte
 27127                                  	; 24/10/2022
 27128                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 27129                                  
 27130                                  ; ----------------------------------------------------------------------
 27131                                  ; Set_Buffer
 27132                                  ;
 27133                                  ;function: set buffers in the real memory.				  
 27134                                  ;	   lastly set the memhi,memlo for the next available free address.
 27135                                  ;
 27136                                  ;input:    ds:bx -> buffinfo.
 27137                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 27138                                  ;	   singlebuffersize = buffer header size + sector size		  
 27139                                  ;
 27140                                  ;output:   buffers Queue established.	       				   
 27141                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 27142                                  ; ----------------------------------------------------------------------
 27143                                  
 27144                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 27145                                  	; (SYSINIT:11DCh)
 27146                                  
 27147                                  set_buffer:
 27148 000011E7 30D2                    	xor	dl,dl				; assume buffers not in HMA
 27149 000011E9 E85500                  	call	GetBufferAddr
 27150 000011EC 7402                    	jz	short set_buff_1
 27151 000011EE B201                    	mov	dl,1				; buffers in HMA
 27152                                  set_buff_1:
 27153                                  	; 25/10/2022
 27154                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 27155 000011F0 893F                    	mov	[bx],di
 27156                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 27157 000011F2 8C4702                  	mov	[bx+2],es
 27158                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 27159 000011F5 C747040000              	mov	word [bx+4],0
 27160                                  
 27161 000011FA 89F8                    	mov	ax,di
 27162 000011FC 2E8B0E[9902]            	mov	cx,[cs:buffers]
 27163 00001201 57                      	push	di				; remember first buffer
 27164                                  
 27165                                  ;	for each buffer
 27166                                  
 27167                                  nxt_buff:
 27168 00001202 E86100                  	call	set_buffer_info 		; set buf_link,buf_id...
 27169 00001205 89C7                    	mov	di,ax
 27170 00001207 E2F9                    	loop	nxt_buff
 27171                                  
 27172 00001209 2E2B3E[9D02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 27173                                  
 27174 0000120E 59                      	pop	cx				; get first buffer
 27175                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 27176 0000120F 26890D                  	mov	[es:di],cx
 27177 00001212 87CF                    	xchg	cx,di
 27178                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 27179                                  	; 25/10/2022
 27180 00001214 26894D02                	mov	[es:di+2],cx
 27181                                  
 27182 00001218 08D2                    	or	dl,dl				; In HMa ?
 27183 0000121A 7417                    	jz	short set_buff_2		; no
 27184                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 27185 0000121C C6470C01                	mov	byte [bx+12],1
 27186 00001220 2EA1[6403]              	mov	ax,[cs:memhi]			; seg of scratch buff
 27187                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 27188 00001224 C7470D0000              	mov	word [bx+13],0
 27189                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 27190 00001229 89470F                  	mov	word [bx+15],ax
 27191 0000122C 2EA1[9D02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 27192                                  	;; 05/09/2023
 27193                                  	;;sub	ax,24 ; bufinsiz		; (bufinsiz is 24 in PCDOS 7.1)
 27194 00001230 83E814                  	sub	ax,20
 27195                                  set_buff_2:
 27196 00001233 2E0106[6203]            	add	[cs:memlo],ax
 27197                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 27198 00001238 2E800E[CC14]02          	or	byte [cs:setdevmarkflag],2
 27199                                  	;call	round
 27200                                  	;retn
 27201                                  	; 12/12/2022
 27202 0000123E E94630                  	jmp	round
 27203                                  
 27204                                  ; ----------------------------------------------------------------------
 27205                                  ; procedure : GetBufferAddr
 27206                                  ;
 27207                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 27208                                  ;
 27209                                  ; returns in es:di the buffer adress
 27210                                  ; returns NZ if allocated in HMA
 27211                                  ; ----------------------------------------------------------------------
 27212                                  
 27213                                  	; 25/10/2022 
 27214                                  GetBufferAddr:
 27215 00001241 53                      	push	bx
 27216 00001242 52                      	push	dx
 27217 00001243 2EA1[9D02]              	mov	ax, [cs:singlebuffersize]
 27218 00001247 2EF726[9902]            	mul	word [cs:buffers]
 27219                                  	;add	ax,0Fh
 27220 0000124C 83C00F                  	add	ax,15 
 27221                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27222                                  	;and	ax,~15	; 0FFF0h	; para round
 27223                                  	; 12/12/2022
 27224 0000124F 24F0                    	and	al,~15	; 0F0h
 27225 00001251 89C3                    	mov	bx,ax
 27226 00001253 B8024A                  	mov	ax,4A02h
 27227                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 27228 00001256 CD2F                    	int	2Fh
 27229 00001258 83FFFF                  	cmp	di,0FFFFh
 27230 0000125B 7506                    	jne	short got_hma
 27231                                  	
 27232                                  	;mov	di,0			; dont xor di,di Z flag needed
 27233                                  	; 05/09/2023
 27234                                  	; zf=1
 27235 0000125D 47                      	inc	di ; 0FFFFh -> 0
 27236                                  	; zf=1
 27237                                  	
 27238                                  	;zf=1
 27239                                  	;xor	di,di	; 25/10/2022
 27240                                  	;zf=1
 27241 0000125E 2E8E06[6403]            	mov	es,[cs:memhi]
 27242                                  got_hma:
 27243 00001263 5A                      	pop	dx
 27244 00001264 5B                      	pop	bx
 27245 00001265 C3                      	retn
 27246                                  
 27247                                  ; ----------------------------------------------------------------------
 27248                                  
 27249                                  set_buffer_info:
 27250                                  
 27251                                  ;function: set buf_link,buf_id,buf_sector
 27252                                  ;
 27253                                  ;in: es:di -> buffer header to be set.
 27254                                  ;    ax = di
 27255                                  ;
 27256                                  ;out:
 27257                                  ;    above entries set.
 27258                                  
 27259                                  	; 25/10/2022 
 27260 00001266 2EFF36[BD02]            	push	word [cs:buf_prev_off]
 27261                                  	;pop	word [es:di+buffinfo.buf_prev]
 27262 0000126B 268F4502                	pop	word [es:di+2]
 27263 0000126F 2EA3[BD02]              	mov	[cs:buf_prev_off],ax
 27264 00001273 2E0306[9D02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 27265                                  	;mov	[es:di+buffinfo.buf_next],ax
 27266 00001278 268905                  	mov	[es:di],ax
 27267                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 27268 0000127B 26C74504FF00            	mov	word [es:di+4],00FFh
 27269                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 27270 00001281 26C745060000            	mov	word [es:di+6],0
 27271                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 27272 00001287 26C745080000            	mov	word [es:di+8],0
 27273 0000128D C3                      	retn
 27274                                  
 27275                                  ; ======================================================================
 27276                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 27277                                  ; ----------------------------------------------------------------------
 27278                                  ; 27/03/2019 - Retro DOS v4.0
 27279                                  
 27280                                  ; ----------------------------------------------------------------------
 27281                                  ; ibmstack initialization routine.
 27282                                  ;
 27283                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 27284                                  ;	has been modified. this initialization routine also has to
 27285                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 27286                                  ;	should be set to signal that this interrupt handler is the
 27287                                  ;	first handler hooked to this interrupt vector.
 27288                                  ;	we determine this by looking at the instruction pointed by
 27289                                  ;	this vector. if it is iret, then this handler should be the
 27290                                  ;	first one. in our case, only the interrupt vector 77h is the
 27291                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 27292                                  ;
 27293                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 27294                                  ;	some design changes are needed to the above interrupt sharing
 27295                                  ;	method. the above sharing scheme assumes that 1). interrupt
 27296                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 27297                                  ;	interrupts would only be generated on levels 7 and 15.
 27298                                  ;	these assumptions are not true any more. we have to use the firstflag
 27299                                  ;	for every level of interrupt. we will set the firstflag on the following
 27300                                  ;	conditions:
 27301                                  ;
 27302                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 27303                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 27304                                  ;	 c. else if cs:ip points to an iret, then "first"
 27305                                  ;	 d. else if cs:ip points to dummy, then "first"
 27306                                  ;
 27307                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 27308                                  ;	be equal to the value at f000:ff01. this location is the initial value
 27309                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 27310                                  ;	the bioses for all of the machines.
 27311                                  ;
 27312                                  ;	system design group requests bios to handle the phantom interrupts.
 27313                                  ;
 27314                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 27315                                  ;	produced by the bogus adapter card even without interrupt request is
 27316                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 27317                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 27318                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 27319                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 27320                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 27321                                  ;	interrupt line.
 27322                                  ;
 27323                                  ;	to handle those "phantom" interrupts, the main stack code will check
 27324                                  ;	the own firstflag, and if it is not "first" (which means the forward
 27325                                  ;	pointer points to the legal shared interrupt handler), then pass the
 27326                                  ;	control. if it is the first, then the following action should be
 27327                                  ;	taken. we don't have to implement skack logic in this case.
 27328                                  ;
 27329                                  ;	to implement this logic, we rather choose a simple method.
 27330                                  ;	if ont of the above "firstflag" conditions is met, we are not
 27331                                  ;	going to hook this interrupt vector. the reason is if the original
 27332                                  ;	vector points to "iret" and do nothing, we don't need
 27333                                  ;	to implement the stack logic for it. this will simplify implementation
 27334                                  ;	while maintaining compatibility with the old version of dos.
 27335                                  ;	this implies that in the main stack code, there might be a stack code
 27336                                  ;	that will never be used, a dead code.
 27337                                  ;
 27338                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 27339                                  
 27340                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 27341                                  	; (SYSINIT:1287h)
 27342                                  
 27343                                  	; 14/12/2022
 27344                                  stackinit:
 27345 0000128E 50                      	push	ax
 27346 0000128F 1E                      	push	ds
 27347 00001290 06                      	push	es
 27348 00001291 53                      	push	bx
 27349 00001292 51                      	push	cx
 27350 00001293 52                      	push	dx
 27351 00001294 57                      	push	di
 27352 00001295 56                      	push	si
 27353 00001296 55                      	push	bp
 27354                                  
 27355                                  ;currently es -> stack code area
 27356                                  
 27357                                  	; 12/12/2022
 27358                                  	; ds = cs
 27359 00001297 A1[8C02]                	mov	ax,[stack_count]
 27360 0000129A 89C1                    	mov	cx,ax  ; *!*!*  
 27361                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27362                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 27363                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 27364 0000129C 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 27365                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 27366 000012A0 A1[8E02]                	mov	ax,[stack_size]	 ; !!		;in cs
 27367 000012A3 26A3[0600]              	mov	[es:stacksize],ax
 27368                                  	; 12/12/2022
 27369 000012A7 A1[9002]                	mov	ax,[stack_addr]			; offset
 27370                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27371                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 27372                                  	;mov	ax,[cs:stack_addr]  ; !!
 27373 000012AA 26A3[0800]              	mov	[es:stacks],ax
 27374                                  	; 12/12/2022
 27375 000012AE 89C5                    	mov	bp,ax ; *!*
 27376 000012B0 A1[9202]                	mov	ax,[stack_addr+2]
 27377                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27378                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 27379                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 27380 000012B3 26A3[0A00]              	mov	[es:stacks+2],ax
 27381                                  
 27382                                  ; initialize the data fields with the parameters
 27383                                  
 27384                                  ; "firstentry" will always be at stacks
 27385                                  
 27386                                  	;mov	bp,[es:stacks]			; get offset of stack
 27387                                  	; 12/12/2022
 27388                                  	; bp = [es:stacks] ; *!*
 27389 000012B7 26892E[0C00]            	mov	[es:firstentry],bp
 27390                                  
 27391                                  ; the stacks will always immediately follow the table entries
 27392                                  
 27393 000012BC B80800                  	mov	ax,entrysize ; 8
 27394                                  	;mov	cx,[es:stackcount]
 27395                                  	; 12/12/2022
 27396                                  	; cx = [es:stackcount] ; *!*!*
 27397 000012BF F7E1                    	mul	cx
 27398 000012C1 01E8                    	add	ax,bp
 27399 000012C3 26A3[0400]              	mov	[es:stackat],ax
 27400 000012C7 89C3                    	mov	bx,ax
 27401 000012C9 83EB02                  	sub	bx,2
 27402                                  
 27403                                  ; zero the entire stack area to start with
 27404                                  
 27405 000012CC 268B3E[0400]            	mov	di,[es:stackat]
 27406 000012D1 26A1[0600]              	mov	ax,[es:stacksize]
 27407 000012D5 F7E1                    	mul	cx
 27408 000012D7 89C1                    	mov	cx,ax
 27409 000012D9 31C0                    	xor	ax,ax
 27410 000012DB 06                      	push	es
 27411 000012DC 1F                      	pop	ds				;ds = relocated stack code seg.
 27412                                  
 27413                                  ;now, ds -> stack code area
 27414                                  
 27415 000012DD 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 27416 000012E1 FC                      	cld
 27417 000012E2 F3AA                    	rep	stosb
 27418                                  
 27419 000012E4 8B0E[0200]              	mov	cx,[stackcount]
 27420                                  
 27421                                  ; loop for "count" times, building a table entry
 27422                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 27423                                  ;  cx = number of entries
 27424                                  ;  es:bp => base of stacks - 2
 27425                                  ;  es:bx => first table entry
 27426                                  
 27427                                  buildloop:
 27428                                  	; 11/12/2022
 27429                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 27430                                  	; 25/10/2022
 27431                                  	;mov	byte [es:bp],free
 27432                                  	; 06/07/2023
 27433 000012E8 26884600                	mov	[es:bp],al ; 0 ; free
 27434 000012EC 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 27435                                  	;mov	[es:bp+1],al
 27436 000012F0 26894602                	mov	[es:bp+savedsp],ax
 27437                                  	;mov	[es:bp2],ax
 27438 000012F4 26894604                	mov	[es:bp+savedss],ax
 27439                                  	;mov	[es:bp+4],ax
 27440 000012F8 031E[0600]              	add	bx,[stacksize]
 27441 000012FC 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 27442                                  	;mov	[es:bp+6],bx
 27443 00001300 26892F                  	mov	[es:bx],bp
 27444 00001303 83C508                  	add	bp,entrysize ; 8
 27445                                  
 27446 00001306 E2E0                    	loop	buildloop
 27447                                  
 27448 00001308 83ED08                  	sub	bp,entrysize ; 8
 27449 0000130B 892E[0E00]              	mov	[lastentry],bp
 27450 0000130F 892E[1000]              	mov	[nextentry],bp
 27451                                  
 27452 00001313 1E                      	push	ds
 27453                                  	;mov	ax,0F000h		;look at the model byte
 27454                                  	; 05/09/2023
 27455 00001314 B4F0                    	mov	ah,0F0h ; ax = 0F000h
 27456 00001316 8ED8                    	mov	ds,ax
 27457 00001318 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 27458 0000131D 1F                      	pop	ds
 27459 0000131E 7504                    	jne	short skip_disablenmis
 27460                                  
 27461 00001320 B007                    	mov	al,07h			; disable convertible nmis
 27462 00001322 E672                    	out	72h,al
 27463                                  
 27464                                  skip_disablenmis:
 27465 00001324 31C0                    	xor	ax,ax
 27466 00001326 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 27467                                  					;ds - relocated stack code segment
 27468 00001328 FA                      	cli
 27469                                  
 27470                                  	;irp	aa,<02,08,09,70>
 27471                                  	;
 27472                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 27473                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 27474                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 27475                                  	;mov	dx,offset int&aa	;pass where new handler is
 27476                                  	;call	new_init_loop		;adjust the vector to new handler,
 27477                                  	;				;saving pointer to original owner
 27478                                  	;endm
 27479                                  
 27480                                  stkinit_02:
 27481 00001329 BE0800                  	mov	si,02h*4 ; 8
 27482 0000132C BF[B305]                	mov	di,INT19OLD02
 27483 0000132F BB[1200]                	mov	bx,old02
 27484 00001332 BA[1600]                	mov	dx,int02
 27485 00001335 E84801                  	call	new_init_loop
 27486                                  stkinit_08:
 27487 00001338 BE2000                  	mov	si,08h*4 ; 32
 27488 0000133B BF[B805]                	mov	di,INT19OLD08
 27489 0000133E BB[3800]                	mov	bx,old08
 27490 00001341 BA[3C00]                	mov	dx,int08
 27491 00001344 E83901                  	call	new_init_loop
 27492                                  stkinit_09:
 27493 00001347 BE2400                  	mov	si,09h*4 ; 36
 27494 0000134A BF[BD05]                	mov	di,INT19OLD09
 27495 0000134D BB[4100]                	mov	bx,old09
 27496 00001350 BA[4500]                	mov	dx,int09
 27497 00001353 E82A01                  	call	new_init_loop
 27498                                  stkinit_70:
 27499 00001356 BEC001                  	mov	si,70h*4 ; 448
 27500 00001359 BF[DB05]                	mov	di,INT19OLD70
 27501 0000135C BB[4E00]                	mov	bx,old70
 27502 0000135F BA[5200]                	mov	dx,int70
 27503 00001362 E81B01                  	call	new_init_loop
 27504                                  
 27505                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 27506                                  	;
 27507                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 27508                                  	;push	ds			;save relocated stack code segment
 27509                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 27510                                  	;push	ds
 27511                                  	;pop	dx			;dx = segment value
 27512                                  	;	
 27513                                  	;cmp	dx,0
 27514                                  	;jz	int&aa&_first
 27515                                  	;
 27516                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 27517                                  	;jz	int&aa&_first
 27518                                  	;
 27519                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 27520                                  	;jz	int&aa&_not_first
 27521                                  	;
 27522                                  	;cmp	dx,0f000h		;rom bios segment
 27523                                  	;jnz	int&aa&_not_first
 27524                                  	;
 27525                                  	;push	es
 27526                                  	;push	dx
 27527                                  	;mov	dx,0f000h
 27528                                  	;mov	es,dx
 27529                                  	;cmp	bx,word ptr es:0ff01h
 27530                                         	;pop	dx
 27531                                  	;pop	es
 27532                                  	;jz	int&aa&_first
 27533                                  	;
 27534                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 27535                                  	;pop	ds
 27536                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 27537                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 27538                                  	;mov	dx, offset int&aa	;pass where new handler is
 27539                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 27540                                  	;				;pointer to original owner.
 27541                                  	;jmp	short int&aa&_end
 27542                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 27543                                  	;pop	ds
 27544                                  ;int&aa&_end:
 27545                                  	;
 27546                                  	;endm
 27547                                  
 27548                                  stkinit_0A:
 27549 00001365 BE2800                  	mov	si,0Ah*4 ; 40
 27550                                  	
 27551                                  ; 14/12/2022
 27552                                  %if 0	
 27553                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27554                                  	push	ds
 27555                                  	
 27556                                  	lds	bx,[es:si]
 27557                                  	push	ds
 27558                                  	pop	dx
 27559                                  		
 27560                                  	cmp	dx,0
 27561                                  	je	short int_0A_first
 27562                                  	
 27563                                  	cmp	byte [bx],0CFh
 27564                                  	je	short int_0A_first
 27565                                  	
 27566                                  	cmp	word [bx+6],424Bh
 27567                                  	je	short int_0A_not_first
 27568                                  	
 27569                                  	cmp	dx,0F000h
 27570                                  	jne	short int_0A_not_first
 27571                                  	
 27572                                  	push	es
 27573                                  	push	dx
 27574                                  	mov	dx,0F000h
 27575                                  	mov	es,dx
 27576                                  	cmp	bx,[es:0FF01h]
 27577                                         	pop	dx
 27578                                  	pop	es
 27579                                  	je	short int_0A_first
 27580                                  %Endif
 27581                                  
 27582                                  	; 14/12/2022
 27583                                  	; 25/10/2022
 27584 00001368 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 27585 0000136B 730C                    	jnc	short int_0A_first
 27586                                  	
 27587                                  int_0A_not_first:
 27588                                  	; 14/12/2022
 27589                                  	; 25/10/2022
 27590                                  	;pop	ds
 27591 0000136D BF[C205]                	mov	di,INT19OLD0A
 27592 00001370 BB[5900]                	mov	bx,old0A
 27593 00001373 BA[5700]                	mov	dx,int0A
 27594 00001376 E80701                  	call	new_init_loop
 27595                                  	
 27596                                  	; 14/12/2022	
 27597                                  	;jmp	short int_0A_end
 27598                                  ;int_0A_first:
 27599                                  	; 25/10/2022
 27600                                  	;pop	ds
 27601                                  
 27602                                  	; 14/12/2022
 27603                                  int_0A_first:
 27604                                  int_0A_end:
 27605                                  
 27606                                  stkinit_0B:
 27607 00001379 BE2C00                  	mov	si,0Bh*4 ; 44
 27608                                  	
 27609                                  	; 14/12/2022
 27610                                  	; 25/10/2022
 27611 0000137C E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 27612 0000137F 730C                    	jnc	short int_0B_end ; int_0B_first
 27613                                  
 27614                                  ; 14/12/2022
 27615                                  %if 0	
 27616                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27617                                  	push	ds
 27618                                  	lds	bx,[es:si]
 27619                                  	push	ds
 27620                                  	pop	dx
 27621                                  		
 27622                                  	cmp	dx,0
 27623                                  	je	short int_0B_first
 27624                                  
 27625                                  	cmp	byte [bx],0CFh
 27626                                  	je	short int_0B_first
 27627                                  	
 27628                                  	cmp	word [bx+6],424Bh
 27629                                  	je	short int_0B_not_first
 27630                                  	
 27631                                  	cmp	dx,0F000h
 27632                                  	jne	short int_0B_not_first
 27633                                  
 27634                                  	push	es
 27635                                  	push	dx
 27636                                  	mov	dx,0F000h
 27637                                  	mov	es,dx
 27638                                  	cmp	bx,[es:0FF01h]
 27639                                  	pop	dx
 27640                                  	pop	es
 27641                                  	je	short int_0B_first
 27642                                  %endif
 27643                                  
 27644                                  int_0B_not_first:
 27645                                  	; 14/12/2022
 27646                                  	; 25/10/2022
 27647                                  	;pop	ds
 27648 00001381 BF[C705]                	mov	di,INT19OLD0B
 27649 00001384 BB[7100]                	mov	bx,old0B
 27650 00001387 BA[6F00]                	mov	dx,int0B
 27651 0000138A E8F300                  	call	new_init_loop
 27652                                  
 27653                                  	; 14/12/2022
 27654                                  	;jmp	short int_0B_end
 27655                                  ;int_0B_first:
 27656                                  	; 25/10/2022
 27657                                  	;pop	ds
 27658                                  
 27659                                  int_0B_end:
 27660                                  	
 27661                                  stkinit_0C:
 27662 0000138D BE3000                  	mov	si,0Ch*4 ; 48
 27663                                  	
 27664                                  	; 14/12/2022
 27665                                  	; 25/10/2022
 27666 00001390 E8C300                  	call	int_xx_first_check
 27667 00001393 730C                    	jnc	short int_0C_end ; int_0C_first
 27668                                  
 27669                                  ; 14/12/2022
 27670                                  %if 0	
 27671                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27672                                  	push	ds
 27673                                  	lds	bx,[es:si]
 27674                                  	push	ds
 27675                                  	pop	dx
 27676                                  		
 27677                                  	cmp	dx,0
 27678                                  	je	short int_0C_first
 27679                                  
 27680                                  	cmp	byte [bx],0CFh
 27681                                  	je	short int_0C_first
 27682                                  	
 27683                                  	cmp	word [bx+6],424Bh
 27684                                  	je	short int_0C_not_first
 27685                                  	
 27686                                  	cmp	dx,0F000h
 27687                                  	jne	short int_0C_not_first
 27688                                  
 27689                                  	push	es
 27690                                  	push	dx
 27691                                  	mov	dx,0F000h
 27692                                  	mov	es,dx
 27693                                  	cmp	bx,[es:0FF01h]
 27694                                  	pop	dx
 27695                                  	pop	es
 27696                                  	je	short int_0C_first
 27697                                  %endif
 27698                                  	
 27699                                  int_0C_not_first:
 27700                                  	; 14/12/2022
 27701                                  	; 25/10/2022
 27702                                  	;pop	ds
 27703 00001395 BF[CC05]                	mov	di,INT19OLD0C
 27704 00001398 BB[8900]                	mov	bx,old0C
 27705 0000139B BA[8700]                	mov	dx,int0C
 27706 0000139E E8DF00                  	call	new_init_loop
 27707                                  
 27708                                  	; 14/12/2022
 27709                                  	;jmp	short int_0C_end
 27710                                  ;int_0C_first:
 27711                                  	; 25/10/2022
 27712                                  	;pop	ds
 27713                                  
 27714                                  int_0C_end:
 27715                                  
 27716                                  stkinit_0D:
 27717 000013A1 BE3400                  	mov	si,0Dh*4 ; 52
 27718                                  
 27719                                  	; 14/12/2022	
 27720                                  	; 25/10/2022
 27721 000013A4 E8AF00                  	call	int_xx_first_check
 27722 000013A7 730C                    	jnc	short int_0D_end ; int_0D_first
 27723                                  
 27724                                  ; 14/12/2022
 27725                                  %if 0	
 27726                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27727                                  	push	ds
 27728                                  	lds	bx,[es:si]
 27729                                  	push	ds
 27730                                  	pop	dx
 27731                                  		
 27732                                  	cmp	dx,0
 27733                                  	je	short int_0D_first
 27734                                  
 27735                                  	cmp	byte [bx],0CFh
 27736                                  	je	short int_0D_first
 27737                                  	
 27738                                  	cmp	word [bx+6],424Bh
 27739                                  	je	short int_0D_not_first
 27740                                  	
 27741                                  	cmp	dx,0F000h
 27742                                  	jne	short int_0D_not_first
 27743                                  
 27744                                  	push	es
 27745                                  	push	dx
 27746                                  	mov	dx,0F000h
 27747                                  	mov	es,dx
 27748                                  	cmp	bx,[es:0FF01h]
 27749                                  	pop	dx
 27750                                  	pop	es
 27751                                  	je	short int_0D_first
 27752                                  %endif
 27753                                  	
 27754                                  int_0D_not_first:
 27755                                  	; 14/12/2022
 27756                                  	; 25/10/2022
 27757                                  	;pop	ds
 27758 000013A9 BF[D105]                	mov	di,INT19OLD0D
 27759 000013AC BB[A100]                	mov	bx,old0D
 27760 000013AF BA[9F00]                	mov	dx,int0D
 27761 000013B2 E8CB00                  	call	new_init_loop
 27762                                  
 27763                                  	; 14/12/2022
 27764                                  	;jmp	short int_0D_end
 27765                                  	; 02/11/2022
 27766                                  ;int_0D_first:
 27767                                  	;pop	ds
 27768                                  
 27769                                  int_0D_end:
 27770                                  
 27771                                  stkinit_0E:
 27772 000013B5 BE3800                  	mov	si,0Eh*4 ; 56
 27773                                  
 27774                                  	; 14/12/2022	
 27775                                  	; 25/10/2022
 27776 000013B8 E89B00                  	call	int_xx_first_check
 27777 000013BB 730C                    	jnc	short int_0E_end ; int_0E_first
 27778                                  
 27779                                  ; 14/12/2022
 27780                                  %if 0	
 27781                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27782                                  	push	ds
 27783                                  	lds	bx,[es:si]
 27784                                  	push	ds
 27785                                  	pop	dx
 27786                                  		
 27787                                  	cmp	dx,0
 27788                                  	je	short int_0E_first
 27789                                  
 27790                                  	cmp	byte [bx],0CFh
 27791                                  	je	short int_0E_first
 27792                                  	
 27793                                  	cmp	word [bx+6],424Bh
 27794                                  	je	short int_0E_not_first
 27795                                  	
 27796                                  	cmp	dx,0F000h
 27797                                  	jne	short int_0E_not_first
 27798                                  
 27799                                  	push	es
 27800                                  	push	dx
 27801                                  	mov	dx,0F000h
 27802                                  	mov	es,dx
 27803                                  	cmp	bx,[es:0FF01h]
 27804                                  	pop	dx
 27805                                  	pop	es
 27806                                  	je	short int_0E_first
 27807                                  %endif
 27808                                  	
 27809                                  int_0E_not_first:
 27810                                  	; 14/12/2022
 27811                                  	; 25/10/2022
 27812                                  	;pop	ds
 27813 000013BD BF[D605]                	mov	di,INT19OLD0E
 27814 000013C0 BB[B900]                	mov	bx,old0E
 27815 000013C3 BA[B700]                	mov	dx,int0E
 27816 000013C6 E8B700                  	call	new_init_loop
 27817                                  
 27818                                  	; 14/12/2022
 27819                                  	;jmp	short int_0E_end
 27820                                  ;int_0E_first:
 27821                                  	; 25/10/2022
 27822                                  	;pop	ds	
 27823                                  
 27824                                  int_0E_end:
 27825                                  
 27826                                  stkinit_72:
 27827 000013C9 BEC801                  	mov	si,72h*4 ; 456
 27828                                  	
 27829                                  	; 14/12/2022
 27830                                  	; 25/10/2022
 27831 000013CC E88700                  	call	int_xx_first_check
 27832 000013CF 730C                    	jnc	short int_72_end ; int_72_first
 27833                                  
 27834                                  ; 14/12/2022
 27835                                  %if 0	
 27836                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27837                                  	push	ds
 27838                                  	lds	bx,[es:si]
 27839                                  	push	ds
 27840                                  	pop	dx
 27841                                  		
 27842                                  	cmp	dx,0
 27843                                  	je	short int_72_first
 27844                                  
 27845                                  	cmp	byte [bx],0CFh
 27846                                  	je	short int_72_first
 27847                                  	
 27848                                  	cmp	word [bx+6],424Bh
 27849                                  	je	short int_72_not_first
 27850                                  	
 27851                                  	cmp	dx,0F000h
 27852                                  	jne	short int_72_not_first
 27853                                  
 27854                                  	push	es
 27855                                  	push	dx
 27856                                  	mov	dx,0F000h
 27857                                  	mov	es,dx
 27858                                  	cmp	bx,[es:0FF01h]
 27859                                  	pop	dx
 27860                                  	pop	es
 27861                                  	je	short int_72_first
 27862                                  %endif
 27863                                  	
 27864                                  int_72_not_first:
 27865                                  	; 14/12/2022
 27866                                  	; 25/10/2022
 27867                                  	;pop	ds
 27868 000013D1 BF[E005]                	mov	di,INT19OLD72
 27869 000013D4 BB[D100]                	mov	bx,old72
 27870 000013D7 BA[CF00]                	mov	dx,int72
 27871 000013DA E8A300                  	call	new_init_loop
 27872                                  
 27873                                  	; 14/12/2022
 27874                                  	;jmp	short int_72_end
 27875                                  ;int_72_first:
 27876                                  	; 25/10/2022
 27877                                  	;pop	ds
 27878                                  
 27879                                  int_72_end:
 27880                                  
 27881                                  stkinit_73:
 27882 000013DD BECC01                  	mov	si,73h*4 ; 460
 27883                                  	
 27884                                  	; 14/12/2022
 27885                                  	; 25/10/2022
 27886 000013E0 E87300                  	call	int_xx_first_check
 27887 000013E3 730C                    	jnc	short int_73_end ; int_73_first
 27888                                  
 27889                                  ; 14/12/2022
 27890                                  %if 0	
 27891                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27892                                  	push	ds
 27893                                  	lds	bx,[es:si]
 27894                                  	push	ds
 27895                                  	pop	dx
 27896                                  		
 27897                                  	cmp	dx,0
 27898                                  	je	short int_73_first
 27899                                  
 27900                                  	cmp	byte [bx],0CFh
 27901                                  	je	short int_73_first
 27902                                  	
 27903                                  	cmp	word [bx+6],424Bh
 27904                                  	je	short int_73_not_first
 27905                                  	
 27906                                  	cmp	dx,0F000h
 27907                                  	jne	short int_73_not_first
 27908                                  
 27909                                  	push	es
 27910                                  	push	dx
 27911                                  	mov	dx,0F000h
 27912                                  	mov	es,dx
 27913                                  	cmp	bx,[es:0FF01h]
 27914                                  	pop	dx
 27915                                  	pop	es
 27916                                  	je	short int_73_first
 27917                                  %endif	
 27918                                  	
 27919                                  int_73_not_first:
 27920                                  	; 14/12/2022
 27921                                  	; 25/10/2022
 27922                                  	;pop	ds
 27923 000013E5 BF[E505]                	mov	di,INT19OLD73
 27924 000013E8 BB[E900]                	mov	bx,old73
 27925 000013EB BA[E700]                	mov	dx,int73
 27926 000013EE E88F00                  	call	new_init_loop
 27927                                  
 27928                                  	; 14/12/2022
 27929                                  	;jmp	short int_73_end
 27930                                  ;int_73_first:
 27931                                  	; 25/10/2022
 27932                                  	;pop	ds
 27933                                  
 27934                                  int_73_end:
 27935                                  
 27936                                  stkinit_74:
 27937 000013F1 BED001                  	mov	si,74h*4 ; 464
 27938                                  	
 27939                                  	; 14/12/2022
 27940                                  	; 25/10/2022
 27941 000013F4 E85F00                  	call	int_xx_first_check
 27942 000013F7 730C                    	jnc	short int_74_end ; int_74_first
 27943                                  
 27944                                  ; 14/12/2022
 27945                                  %if 0		
 27946                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 27947                                  	push	ds
 27948                                  	lds	bx,[es:si]
 27949                                  	push	ds
 27950                                  	pop	dx
 27951                                  		
 27952                                  	cmp	dx,0
 27953                                  	je	short int_74_first
 27954                                  
 27955                                  	cmp	byte [bx],0CFh
 27956                                  	je	short int_74_first
 27957                                  	
 27958                                  	cmp	word [bx+6],424Bh
 27959                                  	je	short int_74_not_first
 27960                                  	
 27961                                  	cmp	dx,0F000h
 27962                                  	jne	short int_74_not_first
 27963                                  
 27964                                  	push	es
 27965                                  	push	dx
 27966                                  	mov	dx,0F000h
 27967                                  	mov	es,dx
 27968                                  	cmp	bx,[es:0FF01h]
 27969                                  	pop	dx
 27970                                  	pop	es
 27971                                  	je	short int_74_first
 27972                                  %endif
 27973                                  
 27974                                  int_74_not_first:
 27975                                  	; 14/12/2022
 27976                                  	; 25/10/2022
 27977                                  	;pop	ds
 27978 000013F9 BF[EA05]                	mov	di,INT19OLD74
 27979 000013FC BB[0101]                	mov	bx,old74
 27980 000013FF BA[FF00]                	mov	dx,int74
 27981 00001402 E87B00                  	call	new_init_loop
 27982                                  	
 27983                                  	; 14/12/2022
 27984                                  	;jmp	short int_74_end
 27985                                  ;int_74_first:
 27986                                  	; 25/10/2022
 27987                                  	;pop	ds
 27988                                  
 27989                                  int_74_end:
 27990                                  
 27991                                  stkinit_76:
 27992 00001405 BED801                  	mov	si,76h*4 ; 472
 27993                                  	
 27994                                  	; 14/12/2022
 27995                                  	; 25/10/2022
 27996 00001408 E84B00                  	call	int_xx_first_check
 27997 0000140B 730E                    	jnc	short int_76_end ; int_76_first
 27998                                  
 27999                                  ; 14/12/2022
 28000                                  %if 0	
 28001                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 28002                                  	push	ds
 28003                                  	lds	bx,[es:si]
 28004                                  	push	ds
 28005                                  	pop	dx
 28006                                  		
 28007                                  	cmp	dx,0
 28008                                  	je	short int_76_first
 28009                                  
 28010                                  	cmp	byte [bx],0CFh
 28011                                  	je	short int_76_first
 28012                                  	
 28013                                  	cmp	word [bx+6],424Bh
 28014                                  	je	short int_76_not_first
 28015                                  	
 28016                                  	cmp	dx,0F000h
 28017                                  	jne	short int_76_not_first
 28018                                  
 28019                                  	push	es
 28020                                  	push	dx
 28021                                  	mov	dx,0F000h
 28022                                  	mov	es,dx
 28023                                  	cmp	bx,[es:0FF01h]
 28024                                  	pop	dx
 28025                                  	pop	es
 28026                                  	je	short int_76_first
 28027                                  %endif
 28028                                  	
 28029                                  int_76_not_first:
 28030                                  	; 14/12/2022
 28031                                  	; 25/10/2022
 28032                                  	;pop	ds
 28033 0000140D BF[EF05]                	mov	di,INT19OLD76
 28034 00001410 BB[1901]                	mov	bx,old76
 28035 00001413 BA[1701]                	mov	dx,int76
 28036 00001416 E86700                  	call	new_init_loop
 28037                                  
 28038                                  	; 14/12/2022
 28039 00001419 EB00                    	jmp	short int_76_end
 28040                                  ;int_76_first:
 28041                                  	; 25/10/2022
 28042                                  	;pop	ds
 28043                                  
 28044                                  int_76_end:
 28045                                  
 28046                                  stkinit_77:
 28047 0000141B BEDC01                  	mov	si,77h*4 ; 476
 28048                                  	
 28049                                  	; 14/12/2022
 28050                                  	; 25/10/2022
 28051 0000141E E83500                  	call	int_xx_first_check
 28052 00001421 730C                    	jnc	short int_77_end ; int_77_first
 28053                                  
 28054                                  ; 14/12/2022
 28055                                  %if 0	
 28056                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 28057                                  	push	ds
 28058                                  	lds	bx,[es:si]
 28059                                  	push	ds
 28060                                  	pop	dx
 28061                                  		
 28062                                  	cmp	dx,0
 28063                                  	je	short int_77_first
 28064                                  
 28065                                  	cmp	byte [bx],0CFh
 28066                                  	je	short int_77_first
 28067                                  	
 28068                                  	cmp	word [bx+6],424Bh
 28069                                  	je	short int_77_not_first
 28070                                  	
 28071                                  	cmp	dx,0F000h
 28072                                  	jne	short int_77_not_first
 28073                                  
 28074                                  	push	es
 28075                                  	push	dx
 28076                                  	mov	dx,0F000h
 28077                                  	mov	es,dx
 28078                                  	cmp	bx,[es:0FF01h]
 28079                                  	pop	dx
 28080                                  	pop	es
 28081                                  	je	short int_77_first
 28082                                  %endif
 28083                                  	
 28084                                  int_77_not_first:
 28085                                  	; 14/12/2022
 28086                                  	; 25/10/2022
 28087                                  	;pop	ds
 28088 00001423 BF[F405]                	mov	di,INT19OLD77
 28089 00001426 BB[3101]                	mov	bx,old77
 28090 00001429 BA[2F01]                	mov	dx,int77
 28091 0000142C E85100                  	call	new_init_loop
 28092                                  
 28093                                  	; 14/12/2022
 28094                                  	;jmp	short int_77_end
 28095                                  ;int_77_first:
 28096                                  	; 25/10/2022
 28097                                  	;pop	ds
 28098                                  
 28099                                  int_77_end:
 28100 0000142F 1E                      	push	ds
 28101 00001430 B800F0                  	mov	ax,0F000h		; look at the model byte
 28102 00001433 8ED8                    	mov	ds,ax
 28103 00001435 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 28104 0000143A 1F                      	pop	ds
 28105 0000143B 7504                    	jne	short skip_enablenmis
 28106                                  
 28107 0000143D B027                    	mov	al,27h			; enable convertible nmis
 28108 0000143F E672                    	out	72h,al
 28109                                  
 28110                                  ; 25/10/2022
 28111                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 28112                                  
 28113                                  skip_enablenmis:
 28114 00001441 FB                      	sti
 28115                                  	;;mov	ax,Bios_Data ; 70h
 28116                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 28117                                  	; 21/10/2022
 28118 00001442 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 28119 00001445 8ED8                    	mov	ds,ax
 28120                                  
 28121                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 28122                                  
 28123 00001447 C606[B105]01            	mov	byte [INT19SEM],1	; indicate that int 19
 28124                                  					; initialization is complete
 28125                                  
 28126 0000144C 5D                      	pop	bp			; restore all
 28127 0000144D 5E                      	pop	si
 28128 0000144E 5F                      	pop	di
 28129 0000144F 5A                      	pop	dx
 28130 00001450 59                      	pop	cx
 28131 00001451 5B                      	pop	bx
 28132 00001452 07                      	pop	es
 28133 00001453 1F                      	pop	ds
 28134 00001454 58                      	pop	ax
 28135 00001455 C3                      	retn
 28136                                  
 28137                                  ; 14/12/2022
 28138                                  ; ----------------------------------------------------------------------
 28139                                  
 28140                                  	; 14/12/2022
 28141                                  	; 25/10/2022
 28142                                  ;%if 0
 28143                                  	; 27/03/2019 - Retro DOS v4.0
 28144                                  int_xx_first_check:
 28145 00001456 1E                      	push	ds
 28146 00001457 26C51C                  	lds	bx,[es:si]
 28147 0000145A 1E                      	push	ds
 28148 0000145B 5A                      	pop	dx
 28149                                  		
 28150                                  	;cmp	dx,0
 28151                                  	;je	short int_xx_first
 28152                                  	; 05/09/2023
 28153 0000145C 21D2                    	and	dx,dx
 28154 0000145E 741E                    	jz	short int_xx_first
 28155                                  	
 28156 00001460 803FCF                  	cmp	byte [bx],0CFh
 28157 00001463 7419                    	je	short int_xx_first
 28158                                  	
 28159 00001465 817F064B42              	cmp	word [bx+6],424Bh
 28160 0000146A 7411                    	je	short int_xx_not_first
 28161                                  	
 28162 0000146C 81FA00F0                	cmp	dx,0F000h
 28163 00001470 750B                    	jne	short int_xx_not_first
 28164                                  
 28165 00001472 06                      	push	es
 28166                                  	;push	dx
 28167                                  	;mov	dx,0F000h
 28168 00001473 8EC2                    	mov	es,dx
 28169 00001475 263B1E01FF              	cmp	bx,[es:0FF01h]
 28170                                        	;pop	dx
 28171 0000147A 07                      	pop	es
 28172 0000147B 7401                    	je	short int_xx_first
 28173                                  
 28174                                  int_xx_not_first:
 28175 0000147D F9                      	stc
 28176                                  int_xx_first:
 28177 0000147E 1F                      	pop	ds
 28178 0000147F C3                      	retn
 28179                                  
 28180                                  ;%endif
 28181                                  
 28182                                  ; ----------------------------------------------------------------------
 28183                                  ; 27/03/2019 - Retro DOS v4.0
 28184                                  
 28185                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 28186                                  ; (SYSINIT:1610h)
 28187                                  
 28188                                  new_init_loop:
 28189                                  
 28190                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 28191                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 28192                                  ;	dx=ds:offset of intxx, the new interrupt handler
 28193                                  ;	di=offset value of int19old&aa variable in bios.
 28194                                  ;	es=zero, segid of vector table
 28195                                  ;	ds=relocated stack code segment
 28196                                  
 28197 00001480 268B04                  	mov	ax,[es:si]		;remember offset in vector
 28198 00001483 8907                    	mov	[bx],ax			; to original owner in ds
 28199 00001485 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 28200 00001489 894702                  	mov	[bx+2],ax		; to original owner in ds
 28201                                  
 28202 0000148C 1E                      	push	ds
 28203                                  	;;mov	ax,Bios_Data ; 70h
 28204                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 28205                                  	; 21/10/2022
 28206 0000148D B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 28207 00001490 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 28208 00001492 268B04                  	mov	ax,[es:si]		;int 19 handler
 28209 00001495 8905                    	mov	[di],ax
 28210 00001497 268B4402                	mov	ax,[es:si+2]
 28211 0000149B 894502                  	mov	[di+2],ax
 28212 0000149E 1F                      	pop	ds
 28213                                  
 28214 0000149F 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 28215 000014A2 268C5C02                	mov	[es:si+2],ds
 28216 000014A6 C3                      	retn
 28217                                  
 28218                                  ; End of STACK initialization routine
 28219                                  ; ----------------------------------------------------------------------
 28220                                  
 28221                                  ; ----------------------------------------------------------------------
 28222                                  ;set the devmark for mem command.
 28223                                  ;in: [memhi] - the address to place devmark
 28224                                  ;    [memlo] = 0
 28225                                  ;    al = id for devmark_id
 28226                                  ;out: devmark established.
 28227                                  ;     the address saved in cs:[devmark_addr]
 28228                                  ;     [memhi] increase by 1.
 28229                                  ; ----------------------------------------------------------------------
 28230                                  
 28231                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 28232                                  ; (SYSINIT:1637h)
 28233                                  ; 04/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 28234                                  ; (SYSINIT:176Ch)
 28235                                  
 28236                                  ; 04/09/2023 - PCDOS 7.1 - IBMBIO.COM (SYSINIT:1944h)
 28237                                  
 28238                                  setdevmark:
 28239                                  
 28240                                  	; 04/09/2023
 28241                                  	;push	es
 28242                                  	;push	cx
 28243                                  
 28244 000014A7 2E8B0E[6403]            	mov	cx,[cs:memhi]
 28245 000014AC 2E890E[CA14]            	mov	[cs:devmark_addr],cx
 28246 000014B1 8EC1                    	mov	es,cx
 28247                                  	; 25/10/2022
 28248                                  	;mov	[es:devmark.id],al
 28249 000014B3 26A20000                	mov	[es:0],al
 28250 000014B7 41                      	inc	cx
 28251                                  	;mov	[es:devmark.seg],cx
 28252 000014B8 26890E0100              	mov	[es:1],cx
 28253                                  
 28254                                  	; 04/09/2023
 28255                                  	;pop	cx
 28256                                  	;pop	es
 28257                                  	
 28258 000014BD 2EFF06[6403]            	inc	word [cs:memhi]
 28259 000014C2 C3                      	retn
 28260                                  
 28261                                  ; ----------------------------------------------------------------------
 28262                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 28263                                  ; ----------------------------------------------------------------------
 28264                                  ; 27/03/2019 - Retro DOS v4.0
 28265                                  
 28266                                  ;MULTI_CONFIG	equ 1
 28267                                  
 28268                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 28269                                                                          ; allocation strategy call
 28270                                  
 28271                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 28272                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 28273                                  
 28274                                  default_filenum equ 8
 28275                                  
 28276                                  ;stacksw	equ true		; include switchable hardware stacks
 28277                                  
 28278                                  ; external variable defined in ibmbio module for multi-track
 28279                                  
 28280                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 28281                                  					; it on after handling config.sys file as a
 28282                                  					; default value,if multrk_flag = multrk_off1.
 28283                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 28284                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 28285                                  
 28286                                  ; if stacksw
 28287                                  
 28288                                  ; internal stack parameters
 28289                                  
 28290                                  ;entrysize	equ 8
 28291                                  
 28292                                  ;mincount	equ 8
 28293                                  ;defaultcount	equ 9
 28294                                  ;maxcount	equ 64
 28295                                  
 28296                                  ;minsize 	equ 32
 28297                                  ;defaultsize	equ 128
 28298                                  ;maxsize 	equ 512
 28299                                  
 28300                                  DOS_FLAG_OFFSET	equ 86h
 28301                                  
 28302                                  ;ifdef MULTI_CONFIG
 28303                                  ;
 28304                                  ;   config_envlen must immediately precede config_wrkseg, because they
 28305                                  ;   may be loaded as a dword ptr
 28306                                  
 28307                                  ; 30/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 28308                                  ; 25/10/2022
 28309 000014C3 0000                    config_envlen:	dw  0  			; when config_wrkseg is being used as
 28310                                                 				;  a scratch env, this is its length
 28311 000014C5 0000                    config_wrkseg:	dw  0			; config work area (above confbot)
 28312                                                     			;  segment of work area
 28313                                  
 28314 000014C7 00                      config_cmd:	db  0  			; current config cmd
 28315                                                   			;  (with CONFIG_OPTION_QUERY bit intact)
 28316 000014C8 00                      config_multi:	db  0                   ; non-zero if multi-config config.sys
 28317                                  
 28318                                  ;endif ; MULTI_CONFIG
 28319                                  
 28320 000014C9 00                      multdeviceflag:	db  0
 28321                                  
 28322 000014CA 0000                    devmark_addr:	dw  0			;segment address for devmark.
 28323                                  
 28324 000014CC 00                      setdevmarkflag: db  0			;flag used for devmark
 28325                                  
 28326                                  ; 30/12/2022
 28327                                  ; 12/12/2022
 28328 000014CD 00                      driver_units:	db  0			;total unitcount for driver
 28329                                  
 28330                                  ; 12/12/2022
 28331                                  ;ems_stub_installed:
 28332                                  ;		db  0
 28333                                  
 28334                                  ; 12/12/2022	
 28335                                  ;align 2
 28336                                  
 28337                                  badparm_ptr:	; label	dword
 28338 000014CE 0000                    badparm_off:	dw  0
 28339 000014D0 0000                    badparm_seg:	dw  0
 28340                                  
 28341                                  ;******************************************************************************
 28342                                  ;take care of config.sys file.
 28343                                  ;system parser data and code.
 28344                                  ;******************************************************************************
 28345                                  
 28346                                  ;*******************************************************************
 28347                                  ; parser options set for msbio sysconf module
 28348                                  ;*******************************************************************
 28349                                  ;
 28350                                  ;**** default assemble swiches definition **************************
 28351                                  
 28352                                  ;farsw	equ 0		; near call expected
 28353                                  ;datesw	equ 0		; check date format
 28354                                  ;timesw	equ 0		; check time format
 28355                                  ;filesw	equ 1		; check file specification
 28356                                  ;capsw	equ 0		; perform caps if specified
 28357                                  ;cmpxsw	equ 0		; check complex list
 28358                                  ;numsw	equ 1		; check numeric value
 28359                                  ;keysw	equ 0		; support keywords
 28360                                  ;swsw	equ 1		; support switches
 28361                                  ;val1sw	equ 1		; support value definition 1
 28362                                  ;val2sw	equ 0		; support value definition 2
 28363                                  ;val3sw	equ 1		; support value definition 3
 28364                                  ;drvsw	equ 1		; support drive only format
 28365                                  ;qussw	equ 0		; support quoted string format
 28366                                  
 28367                                  ; psdata_seg equ cs
 28368                                  
 28369                                  	;.xlist
 28370                                  	;include parse.asm		;together with psdata.inc
 28371                                  	;.list
 28372                                  
 28373                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 28374                                  ; ======================================================================
 28375                                  ; 27/03/2019 - Retro DOS v4.0
 28376                                  
 28377                                  ; 30/03/2019
 28378                                  ; VERSION.INC (MSDOS 6.0) 
 28379                                  ; Set DBCS Blank constant
 28380                                  
 28381                                  ; ifndef DBCS
 28382                                  DB_SPACE EQU 2020h
 28383                                  DB_SP_HI EQU 20h
 28384                                  DB_SP_LO EQU 20h
 28385                                  ; else
 28386                                  
 28387                                  ;*******************************************************************
 28388                                  ; Parser include file
 28389                                  ;*******************************************************************
 28390                                  
 28391                                  ;**** Equation field
 28392                                  ;-------- Character code definition
 28393                                  
 28394                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 28395                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 28396                                  _$P_Period	   equ	"."             ;AN020;
 28397                                  _$P_Slash	   equ	"/"             ;AN020;
 28398                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 28399                                  _$P_Comma	   equ	","             ;AN000;
 28400                                  _$P_Switch	   equ	"/"             ;AN000;
 28401                                  _$P_Keyword	   equ	"="             ;AN000;
 28402                                  _$P_Colon	   equ	":"             ;AN000;
 28403                                  _$P_Plus 	   equ	"+"             ;AN000;
 28404                                  _$P_Minus	   equ	"-"             ;AN000;
 28405                                  _$P_Rparen	   equ	")"             ;AN000;
 28406                                  _$P_Lparen	   equ	"("             ;AN000;
 28407                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 28408                                  _$P_DQuote	   equ	'"'             ;AN000;
 28409                                  _$P_NULL 	   equ	0		;AN000;
 28410                                  _$P_TAB		   equ	9		;AN000;
 28411                                  _$P_CR		   equ	0Dh		;AN000;
 28412                                  _$P_LF		   equ	0Ah		;AN000;
 28413                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 28414                                  
 28415                                  ;-------- Masks
 28416                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 28417                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 28418                                  
 28419                                  ;-------- DOS function call related equs
 28420                                  
 28421                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 28422                                  					; by this call, following information
 28423                                  struc _$P_CDI	
 28424 00000000 ????                     .DateF: resw 1
 28425 00000002 ??????????               .Money: resb 5
 28426 00000007 ????                     .1000:	 resb 2
 28427 00000009 ????                     .Dec:	 resb 2
 28428 0000000B ????                     .DateS: resb 2
 28429 0000000D ????                     .TimeS: resb 2
 28430 0000000F ??                          	 resb 1
 28431 00000010 ??                      	 resb 1
 28432 00000011 ??                       .TimeF: resb 1	 
 28433 00000012 ????????                	 resw 2
 28434 00000016 ????                    	 resb 2
 28435 00000018 <res Ah>                	 resw 5
 28436                                   .size:
 28437                                  endstruc
 28438                                  
 28439                                  _$P_Date_MDY	   equ	0		;AN000;
 28440                                  _$P_Date_DMY	   equ	1		;AN000;
 28441                                  _$P_Date_YMD	   equ	2		;AN000;
 28442                                  ;-------------
 28443                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 28444                                  					;AN000; DS:SI will points to DBCS EV
 28445                                  ;-------------
 28446                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 28447                                  					;AN000; following parameters are set
 28448                                  					;AN000; to get casemap table.
 28449                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 28450                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 28451                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 28452                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 28453                                  					; By this call following information
 28454                                  					; is returned.
 28455                                  struc _$P_DOS_TBL
 28456 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 28457 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 28458 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 28459                                  endstruc
 28460                                  
 28461                                  ; ----------------------------------------------------------------------------
 28462                                  ; PARMS 	LABEL	BYTE
 28463                                  ;		DW	PARMSX
 28464                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 28465                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 28466                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 28467                                  ;					; TYPICAL ARE ";", "="
 28468                                  ;					; "," & WHITESPACE ALWAYS
 28469                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 28470                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 28471                                  ; ----------------------------------------------------------------------------
 28472                                  
 28473                                  ;-------------------------------- PARMS block structure
 28474                                  struc _$P_PARMS_Blk
 28475 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 28476 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 28477 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 28478                                  endstruc
 28479                                  
 28480                                  _$P_Len_PARMS	   equ	4		;AN000;
 28481                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 28482                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 28483                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 28484                                  
 28485                                  ; ----------------------------------------------------------------------------
 28486                                  ; PARMSX	LABEL	BYTE
 28487                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 28488                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 28489                                  ;		:			; REPEATS maxp-1 TIMES
 28490                                  ;		DB	maxs		; # OF SWITCHES
 28491                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 28492                                  ;		:			; REPEATS maxs-1 TIMES
 28493                                  ;		DB	maxk		; # OF KEYWORD
 28494                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 28495                                  ;		:			; REPEATS maxk-1 TIMES
 28496                                  ; ----------------------------------------------------------------------------
 28497                                  
 28498                                  ;-------------------------------- PARMSX block structure
 28499                                  struc _$P_PARMSX_Blk		;AN000;
 28500 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 28501 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 28502 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 28503                                  endstruc
 28504                                  
 28505                                  ; ----------------------------------------------------------------------------
 28506                                  ; << Control field definition  >>
 28507                                  ;
 28508                                  ;
 28509                                  ;CONTROL   LABEL   BYTE
 28510                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 28511                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 28512                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 28513                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 28514                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 28515                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 28516                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 28517                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 28518                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 28519                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 28520                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 28521                                  ;				   ; 0002H=REPEATS ALLOWED
 28522                                  ;				   ; 0001H=OPTIONAL
 28523                                  ;	   DW	   FUNCTION_FLAGS
 28524                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 28525                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 28526                                  ;				   ; 0010H=REMOVE ":" AT END
 28527                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 28528                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 28529                                  ;	   DW	   VALUES	   ; VALUE LISTS
 28530                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 28531                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 28532                                  ;	   :
 28533                                  ;
 28534                                  ;Note:
 28535                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 28536                                  ;      DATE bit simalteniously.
 28537                                  ;
 28538                                  ;      The parser examins each bit along with the following priority.
 28539                                  ;
 28540                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 28541                                  ;      FILE SPEC -> SIMPLE STRING.
 28542                                  ;
 28543                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 28544                                  ;      in the result buffer is capitalized.
 28545                                  ;
 28546                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 28547                                  ;
 28548                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 28549                                  ;      switch, for example, '/A', then STRING points to;
 28550                                  ;
 28551                                  ;			DB    1 	; number of following synonyms
 28552                                  ;			DB   '/A',0
 28553                                  ;
 28554                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 28555                                  ;
 28556                                  ;			DB    1 	; number of following synonyms
 28557                                  ;			DB   'CODEPAGE=',0
 28558                                  ;
 28559                                  ;    - "..." must consist of upper case characters only because the parser
 28560                                  ;      performs pattern matching after converting input to upper case (by
 28561                                  ;      using the current country upper case table)
 28562                                  ;
 28563                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 28564                                  ;      example /A and /B, the format will be;
 28565                                  ;
 28566                                  ;			DB    2 	; number of following synonyms
 28567                                  ;			DB    '/A',0
 28568                                  ;			DB    '/B',0
 28569                                  ; ----------------------------------------------------------------------------
 28570                                  
 28571                                  ;**** Match_Flags
 28572                                  
 28573                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 28574                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 28575                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 28576                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 28577                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 28578                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 28579                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 28580                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 28581                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 28582                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 28583                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 28584                                  _$P_Optional	   equ	0001h		;AN000; Optional
 28585                                  
 28586                                  ;**** Function flags
 28587                                  
 28588                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 28589                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 28590                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 28591                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 28592                                  
 28593                                  ;-------------------------------- Control block structure
 28594                                  struc _$P_Control_Blk
 28595 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 28596 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 28597 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 28598 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 28599 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 28600 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 28601                                  endstruc
 28602                                  
 28603                                  ; ----------------------------------------------------------------------------
 28604                                  ; << Value List Definition >>
 28605                                  ;
 28606                                  ;VALUES 	LABEL	BYTE
 28607                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 28608                                  ;	     +-
 28609                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 28610                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 28611                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 28612                                  ;	     |	:
 28613                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 28614                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 28615                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 28616                                  ;	     |	:
 28617                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 28618                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 28619                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 28620                                  ;	     +-	:
 28621                                  ;
 28622                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 28623                                  ;
 28624                                  ;Note:
 28625                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 28626                                  ;      when no choice lists are provided.
 28627                                  ;
 28628                                  ;    - STRING must consist of upper case characters only because the parser
 28629                                  ;      performs pattern matching after converting input to upper case (by
 28630                                  ;      using the current country upper case table)
 28631                                  ; ----------------------------------------------------------------------------
 28632                                  
 28633                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 28634                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 28635                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 28636                                  _$P_nval_String	   equ	3		;AN000; string list ID
 28637                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 28638                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 28639                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 28640                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 28641                                  
 28642                                  struc _$P_Val_List
 28643 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 28644 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 28645 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 28646 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 28647 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 28648                                  endstruc
 28649                                  
 28650                                  ; ----------------------------------------------------------------------------
 28651                                  ; << Result Buffer Definition  >>
 28652                                  ;
 28653                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 28654                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 28655                                  ;						;	1=NUMBER, 2=LIST INDEX,
 28656                                  ;						;	3=STRING, 4=COMPLEX,
 28657                                  ;						;	5=FILESPEC, 6=DRIVE
 28658                                  ;						;	7=DATE, 8=TIME
 28659                                  ;						;	9=QUOTED STRING
 28660                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 28661                                  ;
 28662                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 28663                                  ;
 28664                                  ;            +-
 28665                                  ;	    | DD	n			; VALUE IF NUMBER
 28666                                  ;	    | or
 28667                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 28668                                  ;	    |					; (ES presents Segment address)
 28669                                  ;	    | or
 28670                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 28671                                  ;	    | or
 28672                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 28673                                  ;	    | or
 28674                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 28675                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 28676                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 28677                                  ;	    | or
 28678                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 28679                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 28680                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 28681                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 28682                                  ;	    +-
 28683                                  ;
 28684                                  ;
 28685                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 28686                                  ;      list.
 28687                                  ;
 28688                                  ;      YEAR: If the input value for the year is less than 100, parser
 28689                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 28690                                  ;	     the year value, he returns 1987.
 28691                                  ; ----------------------------------------------------------------------------
 28692                                  
 28693                                  ;-------------------------------- Result block structure
 28694                                  struc _$P_Result_Blk
 28695 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 28696 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 28697 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 28698 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 28699                                  endstruc
 28700                                  
 28701                                  ;--------------------------------
 28702                                  ;**** values for the type field in the result block
 28703                                  
 28704                                  _$P_EOL		   equ	0		;AN000; End of line
 28705                                  _$P_Number	   equ	1		;AN000; Number
 28706                                  _$P_List_Idx	   equ	2		;AN000; List Index
 28707                                  _$P_String	   equ	3		;AN000; String
 28708                                  _$P_Complex	   equ	4		;AN000; Complex
 28709                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 28710                                  _$P_Drive	   equ	6		;AN000; Drive
 28711                                  _$P_Date_F	   equ	7		;AN000; Date
 28712                                  _$P_Time_F	   equ	8		;AN000; Time
 28713                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 28714                                  
 28715                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 28716                                  
 28717                                  ;**** Return code
 28718                                  ;
 28719                                  ; following return code will be returned in the AX register.
 28720                                  
 28721                                  _$P_No_Error	   equ	0		;AN000; No error
 28722                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 28723                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 28724                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 28725                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 28726                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 28727                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 28728                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 28729                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 28730                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 28731                                  
 28732                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 28733                                  
 28734                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 28735                                  
 28736                                  ;********************** Local Data *************************************
 28737 000014D2 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 28738 000014D4 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 28739 000014D6 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 28740 000014D8 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 28741 000014DA 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 28742 000014DB 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 28743 000014DD 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 28744 000014DF 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 28745                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 28746                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 28747                                  
 28748                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 28749                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 28750                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 28751                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 28752                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 28753                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 28754                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 28755                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 28756                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 28757                                  
 28758                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 28759                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 28760                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 28761                                  
 28762 000014E1 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 28763 000014E3 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 28764 000014E5 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 28765 000014E7 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 28766                                  
 28767 000014E9 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 28768                                  _$P_STRING_BUF_END equ	$		;AN000;
 28769                                  
 28770                                  ; 25/10/2022
 28771                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 28772                                  
 28773 00001569 FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 28774 0000156A 0000                    		   dw	0		;AN000; offset	of char case map table
 28775 0000156C 0000                    		   dw	0		;AN000; segment of char case map table
 28776                                  ; 25/10/2022
 28777                                  ;IF CAPSW
 28778                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 28779                                  ;		   dw	0		;AN000; offset	of file case map table
 28780                                  ;		   dw	0		;AN000; segment of file case map table
 28781                                  ;ENDIF
 28782                                  
 28783                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 28784                                  ;
 28785                                  
 28786                                  ;M029
 28787                                  ;!!!WARNING!!!
 28788                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 28789                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 28790                                  ;changes need to be made in SYSPARSE
 28791                                  
 28792                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 28793                                  
 28794                                  ; 25/10/2022
 28795                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 28796                                  
 28797 0000156E 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 28798                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 28799                                  
 28800                                  ;ENDIF					;AN000;(of FileSW)
 28801                                  
 28802                                  ; delimiter parsing
 28803                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 28804                                  _$P_period_only	   equ	02h		;AN032; check only for period
 28805                                  
 28806                                  ;filespec error flag
 28807 00001577 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 28808                                  					;AN033;  was detected.
 28809                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 28810                                  
 28811                                  
 28812                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 28813                                  ; ======================================================================
 28814                                  ; 27/03/2019 - Retro DOS v4.0
 28815                                  
 28816                                  ;***********************************************************************
 28817                                  ; SysParse;
 28818                                  ;
 28819                                  ;  Function : Parser Entry
 28820                                  ;
 28821                                  ;  Input: DS:SI -> command line
 28822                                  ;	  ES:DI -> parameter block
 28823                                  ;	  cs -> psdata.inc
 28824                                  ;	  CX = operand ordinal
 28825                                  ;
 28826                                  ;	  Note:  ES is the segment containing all the control blocks defined
 28827                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 28828                                  ;		 is in DS.
 28829                                  ;
 28830                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 28831                                  ;		    invalid value list. But this parser does NOT implement
 28832                                  ;		    this feature. Therefore CY always zero.
 28833                                  ;
 28834                                  ;	   CY = 0   AX = return code
 28835                                  ;		    BL = terminated delimiter code
 28836                                  ;		    CX = new operand ordinal
 28837                                  ;		    SI = set past scaned operand
 28838                                  ;		    DX = selected result buffer
 28839                                  ;
 28840                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 28841                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 28842                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 28843                                  ;
 28844                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 28845                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 28846                                  ;
 28847                                  ;-------- Modification History -----------------------------------------
 28848                                  ;
 28849                                  ;  4/04/87 : Created by K. K,
 28850                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 28851                                  ;	   : JMP SHORT assemble error (tm02)
 28852                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 28853                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 28854                                  ;	     DateSW equ 1)	      (tm04)
 28855                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 28856                                  ;				      (tm05) in PSDATA.INC
 28857                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 28858                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 28859                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 28860                                  ;	     value-list block	      (tm07)
 28861                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 28862                                  ;	     switch (keyword) or not. If there is, backup si for next call
 28863                                  ;	     (tm08)
 28864                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 28865                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 28866                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 28867                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 28868                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 28869                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 28870                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 28871                                  ;					  (tm12)
 28872                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 28873                                  ;					  (tm13)
 28874                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 28875                                  ;					  (tm14)
 28876                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 28877                                  ;					  (tm15)
 28878                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 28879                                  
 28880                                  ;  7/24/87 : Quoted strings being returned with quotes.
 28881                                  
 28882                                  ;  7/28/87 : Kerry S (;AN018;)
 28883                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 28884                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 28885                                  ;	     affected: _$P_Chk_SW_Control.
 28886                                  
 28887                                  ;  7/29/87 : Kerry S (;AN019;)
 28888                                  ;	     Now allow the optional bit in match flags for switches.  This
 28889                                  ;	     allows the switch to be encountered with a value or without a
 28890                                  ;	     value and no error is returned.
 28891                                  ;
 28892                                  
 28893                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 28894                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 28895                                  ;	     within a date response, instead of checking just for the one
 28896                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 28897                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 28898                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 28899                                  
 28900                                  ;  9/1/87  : Kerry S (;AN021)
 28901                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 28902                                  ;	     the command line with the string in the control block the
 28903                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 28904                                  ;	     on the command line and assuming a match.	This allowed a shorter
 28905                                  ;	     string on the command line than in the synonym list in the control
 28906                                  ;	     block.  I put in a test for a null in the control block so the
 28907                                  ;	     string in the control block must be the same length as the string
 28908                                  ;	     preceeding the colon or equal on the command line.
 28909                                  
 28910                                  ;  8/28/87 : Kerry S (;AN022;)
 28911                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 28912                                  ;	     problems for people who included it themselves in a segment other
 28913                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 28914                                  ;	     segment.
 28915                                  
 28916                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 28917                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 28918                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 28919                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 28920                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 28921                                  ;	     BL be used if TIME is being parsed.
 28922                                  
 28923                                  ;  9/24/87 : Ed K
 28924                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 28925                                  ;	     invocations with their normally expanded code; made comments
 28926                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 28927                                  
 28928                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 28929                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 28930                                  ;	     pointed to by non-existant CONTROL.
 28931                                  
 28932                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 28933                                  ;	     A quoted text string can be framed only by double quote.  Remove
 28934                                  ;	     support to frame quoted text string with single quote.
 28935                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 28936                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 28937                                  ;	     single quote in PROC prologues are left as is for history reasons.
 28938                                  
 28939                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 28940                                  ;	     quote chars within a quoted string is supposed to be reported as
 28941                                  ;	     one quote character, but is reported as two quotes.  This changed
 28942                                  ;	     two instructions in PROC _$P_Quoted_Str.
 28943                                  
 28944                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 28945                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 28946                                  
 28947                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 28948                                  
 28949                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 28950                                  ;	     psdata buffer should have cs.
 28951                                  
 28952                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 28953                                  ;	     positional missing.
 28954                                  
 28955                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 28956                                  ;	     as a line delimiter, should use carriage return.
 28957                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 28958                                  
 28959                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 28960                                  
 28961                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 28962                                  ;	     endless loop since SI is returned still pointing to start
 28963                                  ;	     of that parm.
 28964                                  
 28965                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 28966                                  ;	     Vector to returned string has CS instead of cs, but
 28967                                  ;	     when tried to fix it on previous version, changed similar
 28968                                  ;	     but wrong place.
 28969                                  
 28970                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 28971                                  ;	     delimiters between hours, minutes, seconds for time. And period
 28972                                  ;	     and comma are valid delimiters between seconds and 100th second.
 28973                                  
 28974                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 28975                                  ;	     in a filespec, then flag an error.
 28976                                  
 28977                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 28978                                  ;	     indexed off of the cs equate instead of the DS register.
 28979                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 28980                                  ;  -->	     local parser data. Why were some references to local data changed
 28981                                  ;	     to do this before, but not all ?????
 28982                                  
 28983                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 28984                                  
 28985                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 28986                                  ;
 28987                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 28988                                  
 28989                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 28990                                  
 28991                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 28992                                  ;	     separator in TIME before hundredths field.
 28993                                  ;
 28994                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 28995                                  ;			strings as keywords.
 28996                                  ;
 28997                                  ;***********************************************************************
 28998                                  
 28999                                  ;IF FarSW				;AN000;(Check if need far return)
 29000                                  ;SysParse proc far			;AN000;
 29001                                  ;ELSE					;AN000;
 29002                                  ;SysParse proc near			;AN000;
 29003                                  ;ENDIF					;AN000;(of FarSW)
 29004                                  
 29005                                  ; 27/03/2019 - Retro DOS v4.0
 29006                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 29007                                  
 29008                                  ; 25/10/2022 - Retro DOS v4.0
 29009                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 29010                                  
 29011                                  ; 06/09/2023 - Retro DOS v4.2 IO.SYS Optimization (& Retro DOS v5.0 pre-work)
 29012                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1D08h)
 29013                                  
 29014                                  SysParse:
 29015                                  	; 06/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 29016                                  	; dx = 0
 29017 00001578 1E                      	push	ds ; *!*
 29018 00001579 0E                      	push	cs
 29019 0000157A 1F                      	pop	ds 
 29020                                  
 29021                                  	;mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 29022                                  	;cld				;AN000; confirm forward direction
 29023                                  	;mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 29024                                  	;mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 29025                                  	;mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 29026                                  	;
 29027                                  	;mov	word [cs:_$P_DX],0	;AC034; (tm15)
 29028                                  
 29029                                  	; 06/09/2023
 29030 0000157B 8916[DF14]              	mov	[_$P_Flags],dx ; 0	;AC034; Clear all internal flags
 29031 0000157F FC                      	cld				;AN000; confirm forward direction
 29032 00001580 890E[D214]              	mov	[_$P_ORDINAL],cx	;AC034; save operand ordinal
 29033 00001584 8916[D414]              	mov	[_$P_RC],dx ; $P_No_Error ;AC034; Assume no error
 29034 00001588 8916[E714]              	mov	[_$P_Found_SYNONYM],dx	; 0 ;AC034; initalize synonym pointer
 29035 0000158C 8916[D814]              	mov	[_$P_DX],dx ; 0		;AC034; (tm15)
 29036                                  
 29037                                  ;M029 -- Begin changes
 29038                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 29039                                  ;entry to SysParse. This is in the non-checksum region and any program that
 29040                                  ;corrupts this table but does not corrupt the checksum region will leave
 29041                                  ;command.com parsing in an inconsistent state.
 29042                                  ; NB: The special characters string has been hardcoded here. If any change
 29043                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 29044                                  
 29045                                  ;IF FileSW + DrvSW
 29046                                  	;mov	word [cs:_$P_FileSp_Char], ']['
 29047                                  	;mov	word [cs:_$P_FileSp_Char+2], '<|'
 29048                                  	;mov	word [cs:_$P_FileSp_Char+4], '+>'
 29049                                  	;mov 	word [cs:_$P_FileSp_Char+6], ';='
 29050                                  
 29051                                  	; 06/09/2023
 29052 00001590 C706[6E15]5D5B          	mov	word [_$P_FileSp_Char], ']['
 29053 00001596 C706[7015]3C7C          	mov	word [_$P_FileSp_Char+2], '<|'
 29054 0000159C C706[7215]2B3E          	mov	word [_$P_FileSp_Char+4], '+>'
 29055 000015A2 C706[7415]3B3D          	mov 	word [_$P_FileSp_Char+6], ';='
 29056                                  ;ENDIF
 29057                                  	; 06/09/2023
 29058 000015A8 1F                      	pop	ds ; *!*
 29059                                  
 29060                                  ;M029 -- End of changes
 29061                                  
 29062 000015A9 E88006                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 29063 000015AC 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 29064                                  ;--------------------------- End of Line
 29065 000015AE B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 29066 000015B1 53                      	push	bx			;AN000;
 29067                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 29068                                  					;AN000; Get the PARMSX address to
 29069 000015B2 268B1D                  	mov	bx,[es:di]
 29070                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 29071                                  					;AN000; check ORDINAL to see if the minimum
 29072 000015B5 263A0F                  	cmp	cl,[es:bx]	
 29073 000015B8 7303                    	jae	short _$P_Fin		;AN000; positional found.
 29074                                  
 29075 000015BA B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 29076                                  _$P_Fin: 				;AN000;
 29077 000015BD 5B                      	pop	bx			;AN000;
 29078 000015BE E90A01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 29079                                  ;---------------------------
 29080                                  _$P_Start:				;AN000;
 29081 000015C1 2E8936[E114]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 29082 000015C6 53                      	push	bx			;AN000; quoted string or file spec.
 29083 000015C7 57                      	push	di			;AN000;
 29084 000015C8 55                      	push	bp			;AN000;
 29085                                  	;;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 29086                                  	; 02/11/2022
 29087                                  	;lea	bx,[_$P_STRING_BUF]
 29088                                  	; 07/09/2023
 29089 000015C9 BB[E914]                	mov	bx,_$P_STRING_BUF
 29090 000015CC 2EF606[E014]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 29091 000015D2 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 29092                                  
 29093                                  _$P_Pack_Loop:				;AN000;
 29094 000015D4 AC                      	lodsb				;AN000; Pick a operand from buffer
 29095 000015D5 E8F906                  	call	_$P_Chk_Switch		;AN000; Check switch character
 29096 000015D8 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 29097                                  
 29098 000015DA E87106                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 29099 000015DD 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 29100                                  
 29101 000015DF E8A106                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 29102 000015E2 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 29103                                  
 29104 000015E4 2EF606[E014]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 29105                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 29106 000015EA 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 29107                                  
 29108 000015EC E83D06                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 29109 000015EF EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 29110                                  
 29111                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 29112 000015F1 2EF606[E014]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 29113 000015F7 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 29114                                  
 29115 000015F9 4E                      	dec	si			;AN000; (tm08)
 29116 000015FA EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 29117                                  
 29118                                  _$P_PL01:				;AN000;
 29119 000015FC 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 29120 000015FF 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 29121 00001601 7506                    	jne	short _$P_PL00 		;AN000; then
 29122                                  
 29123 00001603 2E800E[E014]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 29124                                  _$P_PL00:				;AN000;
 29125 00001609 43                      	inc	bx			;AN000; ready to see next byte
 29126 0000160A E8DD06                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 29127 0000160D 73C5                    	jnc	short _$P_Pack_Loop	;AN000; if no, process to next byte
 29128                                  
 29129 0000160F AC                      	lodsb				;AN000; if yes, store
 29130 00001610 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 29131 00001613 43                      	inc	bx			;AN000; update pointer
 29132 00001614 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 29133                                  
 29134                                  _$P_Pack_End_BY_EOL:			;AN000;
 29135 00001616 4E                      	dec	si			;AN000; backup si pointer
 29136                                  _$P_Pack_End:				;AN000;
 29137 00001617 2E8936[D614]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 29138                                  	; 07/09/2023
 29139                                  	;mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 29140 0000161C 30E4                    	xor	ah,ah ; 0 ; *
 29141 0000161E 2E8827                  	mov	[cs:bx],ah ; _$P_NULL	;AN000; put NULL at the end
 29142                                  	;
 29143 00001621 2E891E[E514]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 29144                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 29145 00001626 268B1D                  	mov	bx,[es:di]
 29146                                  	;;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 29147                                  	; 02/11/2022
 29148                                  	;lea	si,[_$P_STRING_BUF]
 29149                                  	; 07/09/2023
 29150 00001629 BE[E914]                	mov	si,_$P_STRING_BUF
 29151 0000162C 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 29152 00001630 7440                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 29153                                  
 29154 00001632 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 29155 00001636 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 29156                                  
 29157 00001638 2EF606[E014]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 29158 0000163E 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 29159                                  
 29160                                  _$P_Positional_Manager:			;AN000; else process as positional
 29161 00001640 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 29162                                  	; 07/09/2023
 29163                                  	;xor	ah,ah			;AN000; ax = maxp
 29164 00001644 2E3906[D214]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 29165 00001649 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 29166                                  
 29167 0000164B 2EA1[D214]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 29168 0000164F D1E0                    	shl	ax,1			;AN000; ax = ax*2
 29169 00001651 43                      	inc	bx			;AC035; add '2' to
 29170 00001652 43                      	inc	bx			;AC035;  BX reg
 29171                                  					;AN000; now bx points to 1st CONTROL
 29172 00001653 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 29173 00001655 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 29174 00001658 E87200                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 29175 0000165B EB53                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 29176                                  
 29177                                  _$P_Too_Many_Error:			;AN000;
 29178 0000165D 2EC706[D414]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 29179 00001664 EB4A                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 29180                                  
 29181                                  	; 07/09/2023 - Retro DOSD v4.2 IO.SYS (Optimization)
 29182                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1E06h)
 29183                                  get_maxp:
 29184                                  	;mov	al,[es:bx+1]
 29185 00001666 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 29186                                  	; 07/09/2023
 29187                                  	; ah=0 ; *
 29188                                  	;xor	ah,ah ; 0		;AN000; ax = maxp
 29189 0000166A 30ED                    	xor	ch,ch ; **
 29190 0000166C 40                      	inc	ax			;AN000;
 29191 0000166D D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 29192 0000166F 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 29193 00001671 C3                      	retn
 29194                                  
 29195                                  _$P_SW_Manager:				;AN000;
 29196                                  	; 07/09/2023
 29197                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 29198                                  	;xor	ah,ah			;AN000; ax = maxp
 29199                                  	;inc	ax			;AN000;
 29200                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 29201                                  	;add	bx,ax			;AN000; now bx points to maxs
 29202 00001672 E8F1FF                  	call	get_maxp ; 07/09/2023
 29203                                  
 29204 00001675 268A0F                  	mov	cl,[es:bx]		;AN000;
 29205                                  	; 07/09/2023
 29206                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxs
 29207                                  	;or	cx,cx			;AN000; at least one switch ?
 29208                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 29209                                  	; 07/07/2023
 29210 00001678 E30F                    	jcxz	_$P_SW_Not_Found	; no
 29211                                  
 29212 0000167A 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 29213                                  
 29214                                  _$P_SW_Mgr_Loop: 			;AN000;
 29215 0000167B 53                      	push	bx			;AN000;
 29216 0000167C 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 29217 0000167F E8A900                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 29218 00001682 5B                      	pop	bx			;AN000;
 29219 00001683 732B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 29220                                  
 29221 00001685 43                      	inc	bx			;AC035; add '2' to
 29222 00001686 43                      	inc	bx			;AC035;  BX reg
 29223                                  					;AN000; else bx points to the next CONTROL
 29224 00001687 E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 29225                                  
 29226                                  _$P_SW_Not_Found:			;AN000;
 29227 00001689 2EC706[D414]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 29228 00001690 EB1E                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 29229                                  
 29230                                  _$P_Key_Manager: 			;AN000;
 29231                                  	; 07/09/2023
 29232                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 29233                                  	;xor	ah,ah			;AN000; ax = maxp
 29234                                  	;inc	ax			;AN000;
 29235                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 29236                                  	;add	bx,ax			;AN000; now bx points to maxs
 29237 00001692 E8D1FF                  	call	get_maxp ; 07/09/2023
 29238                                  	
 29239 00001695 268A07                  	mov	al,[es:bx]		;AN000;
 29240 00001698 30E4                    	xor	ah,ah ; 0		;AN000; ax = maxs
 29241 0000169A D1E0                    	shl	ax,1			;AN000;
 29242 0000169C 40                      	inc	ax			;AN000; ax = ax*2+1
 29243 0000169D 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 29244 0000169F 268A0F                  	mov	cl,[es:bx]		;AN000;
 29245                                  	; 07/09/2023
 29246                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxk
 29247                                  	;or	cx,cx			;AN000; at least one keyword ?
 29248                                  	;jz	short _$P_Key_Not_Found	;AN000;
 29249                                  	; 07/07/2023
 29250 000016A2 E305                    	jcxz	_$P_Key_Not_Found	; no
 29251                                  
 29252 000016A4 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 29253                                  
 29254                                  _$P_Key_Mgr_Loop:			;AN000;
 29255                                  	; 07/09/2023
 29256                                  	; ('_$P_Chk_Key_Control' contains only 'stc' instruction)
 29257                                  	; (always returns with cf=1)
 29258                                  	;push	bx			;AN000;
 29259                                  	;mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 29260                                  	;call	_$P_Chk_Key_Control	;AN000; do process for keyword
 29261                                  	;pop	bx			;AN000;
 29262                                  	;jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 29263                                  	; 07/09/2023
 29264                                  	; cf=1 (after 'call _$P_Chk_Key_Control')
 29265                                  
 29266 000016A5 43                      	inc	bx			;AC035; add '2' to
 29267 000016A6 43                      	inc	bx			;AC035;  BX reg
 29268                                  					;AN000; else bx points to the next CONTROL
 29269 000016A7 E2FC                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 29270                                  
 29271                                  _$P_Key_Not_Found:			;AN000;
 29272 000016A9 2EC706[D414]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 29273                                  _$P_Return_to_Caller:			;AN000;
 29274 000016B0 5D                      	pop	bp			;AN000;
 29275 000016B1 5F                      	pop	di			;AN000;
 29276 000016B2 5B                      	pop	bx			;AN000;
 29277 000016B3 2E8B0E[D214]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 29278 000016B8 2EA1[D414]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 29279 000016BC 2E8B36[D614]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 29280 000016C1 2E8B16[D814]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 29281 000016C6 2E8A1E[DA14]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 29282                                  _$P_Single_Exit: 			;AN000;
 29283 000016CB F8                      	clc				;AN000;
 29284 000016CC C3                      	retn				;AN000;
 29285                                  
 29286                                  ;***********************************************************************
 29287                                  ; _$P_Chk_Pos_Control
 29288                                  ;
 29289                                  ; Function: Parse CONTROL block for a positional
 29290                                  ;
 29291                                  ; Input:     ES:BX -> CONTROL block
 29292                                  ;	     cs:SI -> _$P_STRING_BUF
 29293                                  ;
 29294                                  ; Output:    None
 29295                                  ;
 29296                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 29297                                  ;
 29298                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 29299                                  ;***********************************************************************
 29300                                  
 29301                                  _$P_Chk_Pos_Control:
 29302 000016CD 50                      	push	ax			;AN000;
 29303                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 29304 000016CE 268B07                  	mov	ax,[es:bx]
 29305                                  	; 12/12/2022
 29306 000016D1 A802                    	test	al,_$P_Repeat
 29307                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 29308 000016D3 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 29309                                  
 29310 000016D5 2EFF06[D214]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 29311                                  _$P_CPC00:				;AN000;
 29312 000016DA 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 29313 000016DE 7517                    	jne	short _$P_CPC01		;AN000;
 29314                                  
 29315                                  	; 12/12/2022
 29316 000016E0 A801                    	test	al,_$P_Optional
 29317                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 29318 000016E2 7509                    	jnz	short _$P_CPC02		;AN000;
 29319                                  
 29320 000016E4 2EC706[D414]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 29321 000016EB EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 29322                                  
 29323                                  _$P_CPC02:				;AN000;
 29324 000016ED 50                      	push	ax			;AN000;
 29325                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 29326                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 29327                                  	; 07/07/2023
 29328 000016EE B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 29329 000016F1 E89600                  	call	_$P_Fill_Result		;AN000;
 29330 000016F4 58                      	pop	ax			;AN000;
 29331 000016F5 EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 29332                                  
 29333                                  _$P_CPC01:				;AN000;
 29334 000016F7 E81101                  	call	_$P_Check_Match_Flags	;AN000;
 29335                                  _$P_CPC_Exit:				;AN000;
 29336 000016FA 58                      	pop	ax			;AN000;
 29337 000016FB C3                      	retn				;AN000;
 29338                                  
 29339                                  ;***********************************************************************
 29340                                  ; _$P_Chk_Key_Control
 29341                                  ;
 29342                                  ; Function: Parse CONTROL block for a keyword
 29343                                  ;
 29344                                  ; Input:     ES:BX -> CONTROL block
 29345                                  ;	     cs:SI -> _$P_STRING_BUF
 29346                                  ;
 29347                                  ; Output:    CY = 1 : not match
 29348                                  ;
 29349                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 29350                                  ;
 29351                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 29352                                  ;***********************************************************************
 29353                                  
 29354                                  ; 07/09/2023
 29355                                  ;_$P_Chk_Key_Control:
 29356                                  ;	stc				;AN000; this logic works when the KeySW
 29357                                  ;	retn				;AN000; is reset.
 29358                                  
 29359                                  ;***********************************************************************
 29360                                  ; _$P_Search_KEYorSW:
 29361                                  ;
 29362                                  ; Function: Seach specified keyword or switch from CONTROL
 29363                                  ;
 29364                                  ; Input:     ES:BX -> CONTROL block
 29365                                  ;	     cs:SI -> _$P_STRING_BUF
 29366                                  ;
 29367                                  ; Output:    CY = 1 : not match
 29368                                  ;
 29369                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 29370                                  ;***********************************************************************
 29371                                  
 29372                                  	; 25/10/2022 - Retro DOS v4.0
 29373                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 29374                                  
 29375                                  _$P_Search_KEYorSW:			;AN000;
 29376 000016FC 55                      	push	bp			;AN000;
 29377 000016FD 51                      	push	cx			;AN000;
 29378 000016FE 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 29379 00001702 30ED                    	xor	ch,ch			;AN000; and set it to cx
 29380                                  	;or	cx,cx			;AN000; No synonyms specified ?
 29381                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 29382                                  	; 07/07/2023
 29383 00001704 E30D                    	jcxz	_$P_KEYorSW_Not_Found
 29384                                  
 29385                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 29386                                  	; 25/10/2022
 29387 00001706 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 29388                                  	;lea	bp,[bx+9]
 29389                                  _$P_KEYorSW_Loop:			;AN000;
 29390 00001709 E8BD03                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 29391 0000170C 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 29392                                  
 29393 0000170E E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 29394 00001711 E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 29395                                  _$P_KEYorSW_Not_Found:			;AN000;
 29396 00001713 F9                      	stc				;AN000; indicate not found in synonym list
 29397 00001714 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 29398                                  
 29399                                  _$P_KEYorSW_Found:			;AN000;
 29400 00001716 2E892E[E714]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 29401 0000171B F8                      	clc				;AN000; indicate found
 29402                                  _$P_KEYorSW_Exit:			;AN000;
 29403 0000171C 59                      	pop	cx			;AN000;
 29404 0000171D 5D                      	pop	bp			;AN000;
 29405 0000171E C3                      	retn				;AN000;
 29406                                   
 29407                                  ;***********************************************************************
 29408                                  ; _$P_MoveBP_NUL
 29409                                  ;***********************************************************************
 29410                                  
 29411                                  _$P_MoveBP_NUL:
 29412                                  _$P_MBP_Loop:				;AN000;
 29413                                  	; 11/12/2022
 29414 0000171F 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 29415                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 29416                                  	; (SYSINIT:18DBh)
 29417                                   	;cmp     byte [es:bp+0],0
 29418 00001724 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 29419                                  
 29420 00001726 45                      	inc	bp			;AN000; until
 29421 00001727 EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 29422                                  
 29423                                  _$P_MBP_Exit:				;AN000;
 29424 00001729 45                      	inc	bp			;AN000; bp points to next to NULL
 29425 0000172A C3                      	retn				;AN000;
 29426                                  
 29427                                  ;***********************************************************************
 29428                                  ; _$P_Chk_SW_Control
 29429                                  ;
 29430                                  ; Function: Parse CONTROL block for a switch
 29431                                  ;
 29432                                  ; Input:     ES:BX -> CONTROL block
 29433                                  ;	     cs:SI -> _$P_STRING_BUF
 29434                                  ;
 29435                                  ; Output:    CY = 1 : not match
 29436                                  ;
 29437                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 29438                                  ;
 29439                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 29440                                  ;***********************************************************************
 29441                                  
 29442                                  _$P_Chk_SW_Control:
 29443                                  
 29444                                  ;IF SwSW				;AN000;(Check if switch is supported)
 29445                                  	;or	byte [cs:_$P_Flags+1],10h
 29446 0000172B 2E800E[E014]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 29447 00001731 E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 29448 00001734 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 29449                                  
 29450                                  	;and	[cs:_$P_Flags+],0EFh
 29451 00001736 2E8026[E014]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 29452                                  					;AC034; reset the indicator previously set
 29453 0000173C 50                      	push	ax			;AN000; 	      /switch:
 29454 0000173D 2EA1[E314]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 29455 00001741 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 29456 00001743 2E0106[E114]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 29457 00001748 58                      	pop	ax			;AN000;
 29458                                  
 29459 00001749 2E8B36[E314]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 29460 0000174E 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 29461 00001752 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 29462                                  
 29463 00001754 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 29464 00001759 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 29465                                  
 29466 0000175B 2EC706[D414]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 29467 00001762 EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 29468                                  
 29469                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 29470                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 29471 00001764 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 29472 00001768 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 29473                                  
 29474                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 29475                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 29476                                  	;test	word [es:bx],1
 29477                                  	; 12/12/2022
 29478                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 29479 0000176A 26F60701                	test	byte [es:bx],_$P_Optional
 29480 0000176E 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 29481                                  
 29482 00001770 2EC706[D414]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 29483 00001777 EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 29484                                  
 29485                                  _$P_CSW00:				;AN000;
 29486 00001779 E88F00                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 29487 0000177C F8                      	clc				;AN000; indicate match
 29488                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 29489                                  	; 12/12/2022
 29490 0000177D C3                      	retn
 29491                                  
 29492                                  _$P_Chk_SW_Err0: 			;AN000;
 29493 0000177E F9                      	stc				;AN000; not found in switch synonym list
 29494                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 29495                                  	; 12/12/2022
 29496 0000177F C3                      	retn	
 29497                                  
 29498                                  _$P_Chk_SW_Exit: 			;AN000;
 29499 00001780 50                      	push	ax			;AN000;
 29500                                  	;mov	al,_$P_String		;AN000;
 29501                                  	;mov	ah,_$P_No_Tag		;AN000;
 29502                                  	; 07/07/2023
 29503 00001781 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 29504 00001784 E80300                  	call	_$P_Fill_Result		;AN000; set result buffer
 29505 00001787 58                      	pop	ax			;AN000;
 29506 00001788 F8                      	clc				;AN000;
 29507                                  _$P_Chk_SW_Single_Exit:			;AN000;
 29508 00001789 C3                      	retn				;AN000;
 29509                                  ;ELSE					;AN000;(of IF SwSW)
 29510                                  ;	stc				;AN000; this logic works when the SwSW
 29511                                  ;	retn				;AN000; is reset.
 29512                                  
 29513                                  ;***********************************************************************
 29514                                  ; _$P_Fill_Result
 29515                                  ;
 29516                                  ; Function: Fill the result buffer
 29517                                  ;
 29518                                  ; Input:    AH = Item tag
 29519                                  ;	    AL = type
 29520                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 29521                                  ;		  AL = 2: DX has index(offset) into value list
 29522                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 29523                                  ;		  AL = 7: DX has year, CL has month and CH has date
 29524                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 29525                                  ;			  amd CH has hundredths
 29526                                  ;		  AL = else: cs:SI points to returned string buffer
 29527                                  ;	    ES:BX -> CONTROL block
 29528                                  ;
 29529                                  ; Output:   None
 29530                                  ;
 29531                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 29532                                  ;
 29533                                  ; Vars: _$P_DX(W)
 29534                                  ;***********************************************************************
 29535                                  
 29536                                  _$P_Fill_Result:
 29537 0000178A 57                      	push	di			;AN000;
 29538 0000178B 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 29539                                  					;AN000; di points to result buffer
 29540 0000178F 2E893E[D814]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 29541                                  	;mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 29542                                  	;mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 29543                                  	; 07/09/2023
 29544                                  	;mov	[es:di+_$P_Result_Blk.Type], ax
 29545 00001794 268905                  	mov	[es:di],ax		; store type (al) and item tag (ah)
 29546                                  
 29547 00001797 50                      	push	ax			;AN000;
 29548 00001798 2EA1[E714]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 29549 0000179C 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 29550                                  					;AN000;   then set it to the result
 29551 000017A0 58                      	pop	ax			;AN000;
 29552                                  _$P_RLT04:				;AN000;
 29553 000017A1 3C01                    	cmp	al,_$P_Number		;AN000; if number
 29554 000017A3 750A                    	jne	short _$P_RLT00		;AN000;
 29555                                  
 29556                                  _$P_RLT02:				;AN000;
 29557 000017A5 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 29558 000017A9 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 29559 000017AD EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 29560                                  
 29561                                  _$P_RLT00:				;AN000;
 29562 000017AF 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 29563 000017B1 7506                    	jne	short _$P_RLT01		;AN000;
 29564                                  
 29565 000017B3 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx 
 29566                                  					;AN000; then store list index
 29567 000017B7 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 29568                                  
 29569                                  _$P_RLT01:				;AN000;
 29570 000017B9 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 29571 000017BB 74E8                    	je	short _$P_RLT02		;AN000;
 29572                                  
 29573 000017BD 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 29574 000017BF 74E4                    	je	short _$P_RLT02		;AN000;
 29575                                  
 29576 000017C1 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 29577 000017C3 7506                    	jne	short _$P_RLT03		;AN000;
 29578                                  
 29579 000017C5 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 29580 000017C9 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 29581                                  
 29582                                  _$P_RLT03:				;AN000;
 29583 000017CB 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 29584 000017CD 750F                    	jne	short _$P_RLT05		;AN000;
 29585                                  
 29586 000017CF 2EA1[E114]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 29587 000017D3 40                      	inc	ax			;AN000; skip left Parentheses
 29588 000017D4 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 29589 000017D8 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 29590 000017DC EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 29591                                  
 29592                                  _$P_RLT05:				;AN000;
 29593                                  ;------------------------  AL = 3, 5, or 9
 29594 000017DE 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 29595                                  					;AN000; store offset of STRING_BUF
 29596 000017E2 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 29597                                  					;AN031; store segment of STRING_BUF
 29598 000017E6 50                      	push	ax			;AN000;
 29599 000017E7 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 29600                                  					;AN000; need CAPS by file table?
 29601 000017EC 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 29602                                  
 29603 000017EE B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 29604 000017F0 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 29605                                  
 29606                                  _$P_RLT_CAP00:				;AN000;
 29607 000017F2 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 29608                                  					;AN000; need CAPS by char table ?
 29609 000017F7 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 29610                                  
 29611 000017F9 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 29612                                  _$P_RLT_CAP02:				;AN000;
 29613 000017FB E8DF00                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 29614                                  _$P_RLT_CAP01:				;AN000;
 29615 000017FE 58                      	pop	ax			;AN000;
 29616 000017FF 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 29617                                  					;AN000; removing colon at end ?
 29618 00001804 7403                    	jz	short _$P_RLT_Exit	;AN000;
 29619                                  
 29620 00001806 E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 29621                                  _$P_RLT_Exit:				;AN000;
 29622 00001809 5F                      	pop	di			;AN000;
 29623 0000180A C3                      	retn				;AN000;
 29624                                  
 29625                                  ;***********************************************************************
 29626                                  ; _$P_Check_Match_Flags
 29627                                  ;
 29628                                  ; Function:  Check the mutch_flags and make the exit code and set the
 29629                                  ;	     result buffer
 29630                                  ;
 29631                                  ;	    Check for types in this order:
 29632                                  ;		Complex
 29633                                  ;		Date
 29634                                  ;		Time
 29635                                  ;		Drive
 29636                                  ;		Filespec
 29637                                  ;		Quoted String
 29638                                  ;		Simple String
 29639                                  ;
 29640                                  ; Input:     cs:SI -> _$P_STRING_BUF
 29641                                  ;	     ES:BX -> CONTROL block
 29642                                  ;
 29643                                  ; Output:    None
 29644                                  ;
 29645                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 29646                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 29647                                  ;	     _$P_Drive_Format
 29648                                  ;***********************************************************************
 29649                                  
 29650                                  	; 25/10/2022 - Retro DOS v4.0
 29651                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 29652                                  
 29653                                  	; 12/12/2022
 29654                                  _$P_Check_Match_Flags:
 29655 0000180B 2EC606[7715]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 29656                                  					;AN033;AC034;; clear filespec error flag.
 29657 00001811 50                      	push	ax			;AN000;
 29658                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 29659 00001812 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 29660 00001815 09C0                    	or	ax,ax			;AC035; test ax for zero
 29661 00001817 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 29662 00001819 50                      	push	ax			;AN000; (tm12)
 29663 0000181A 53                      	push	bx			;AN000; (tm12)
 29664 0000181B 52                      	push	dx			;AN000; (tm12)
 29665 0000181C 57                      	push	di			;AN000; (tm12)
 29666 0000181D 2EC706[D414]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 29667                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 29668                                  	;mov	al,_$P_String		;AN000; (tm12)
 29669                                  	; 07/07/2023
 29670 00001824 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 29671 00001827 E860FF                  	call	_$P_Fill_Result		;AN000; (tm12)
 29672 0000182A 5F                      	pop	di			;AN000; (tm12)
 29673 0000182B 5A                      	pop	dx			;AN000; (tm12)
 29674 0000182C 5B                      	pop	bx			;AN000; (tm12)
 29675 0000182D 58                      	pop	ax			;AN000; (tm12)
 29676                                  	; 12/12/2022
 29677                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 29678                                  	; 12/12/2022
 29679                                  ;_$P_Mat: 				;AN000; (tm12)
 29680                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 29681                                  _$P_Bridge:
 29682 0000182E EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 29683                                  	
 29684                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29685                                  	; (SYSINIT:19F9h)
 29686                                  	; 12/12/2022
 29687                                  	;nop	; db 90h
 29688                                  
 29689                                  ; 12/12/2022
 29690                                  _$P_Mat:
 29691                                  _$P_Match03:				;AN000;
 29692                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 29693                                  	; 07/07/2023
 29694 00001830 F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 29695 00001833 7412                    	jz	short _$P_Match04	;AN000;
 29696                                  
 29697 00001835 2EC706[D414]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29698 0000183C E82201                  	call	_$P_Value		;AN000; do process
 29699 0000183F 2E833E[D414]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29700 00001845 7557                    	jne	short _$P_Match_Exit	;AN000;
 29701                                  _$P_Match04:				;AN000;
 29702                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 29703                                  	; 07/07/2023
 29704 00001847 F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 29705 0000184A 7412                    	jz	short _$P_Match05	;AN000;
 29706                                  
 29707 0000184C 2EC706[D414]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29708 00001853 E8E700                  	call	_$P_SValue		;AN000; do process
 29709 00001856 2E833E[D414]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29710 0000185C 7540                    	jne	short _$P_Match_Exit	;AN000;
 29711                                  _$P_Match05:				;AN000;
 29712                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 29713                                  	; 07/07/2023
 29714 0000185E F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 29715 00001861 7415                    	jz	short _$P_Match06	;AN000;
 29716                                  
 29717 00001863 2EC706[D414]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29718 0000186A E8FA02                  	call	_$P_File_Format		;AN000; 1st, call file format
 29719 0000186D E87A03                  	call	_$P_Drive_Format	;AN000; check drive format, next
 29720 00001870 2E833E[D414]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29721 00001876 7526                    	jne	short _$P_Match_Exit	;AN000;
 29722                                  _$P_Match06:				;AN000;
 29723                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 29724                                  	; 07/07/2023
 29725 00001878 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 29726 0000187B 7412                    	jz	short _$P_Match07	;AN000;
 29727                                  
 29728 0000187D 2EC706[D414]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29729 00001884 E8E002                  	call	_$P_File_Format		;AN000; do process
 29730 00001887 2E833E[D414]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 29731 0000188D 750F                    	jne	short _$P_Match_Exit	;AN000;
 29732                                  _$P_Match07:				;AN000;
 29733                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 29734                                  	; 07/07/2023
 29735 0000188F F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 29736 00001892 740A                    	jz	short _$P_Match09	;AN000;
 29737                                  
 29738 00001894 2EC706[D414]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 29739 0000189B E8C201                  	call	_$P_Simple_String	;AN000; do process
 29740                                  _$P_Match09:				;AN000;
 29741                                  _$P_Match_Exit:				;AN000;
 29742 0000189E 2E833E[7715]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 29743 000018A4 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 29744 000018A6 2E833E[D414]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 29745 000018AC 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 29746 000018AE 2EC706[D414]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 29747                                  _$P_Match2_Exit: 			;AN033;
 29748 000018B5 58                      	pop	ax			;AN000;
 29749 000018B6 C3                      	retn				;AN000;
 29750                                  
 29751                                  ;***********************************************************************
 29752                                  ; _$P_Remove_Colon;
 29753                                  ;
 29754                                  ; Function: Remove colon at end
 29755                                  ;
 29756                                  ; Input:    cs:SI points to string buffer to be examineed
 29757                                  ;
 29758                                  ; Output:   None
 29759                                  ;
 29760                                  ; Use:	_$P_Chk_DBCS
 29761                                  ;***********************************************************************
 29762                                  
 29763                                  _$P_Remove_Colon:
 29764 000018B7 50                      	push	ax			;AN000;
 29765 000018B8 56                      	push	si			;AN000;
 29766                                  _$P_RCOL_Loop:				;AN000;
 29767 000018B9 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 29768 000018BC 08C0                    	or	al,al			;AN000; end of string ?
 29769 000018BE 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 29770                                  
 29771 000018C0 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 29772 000018C2 750D                    	jne	short _$P_RCOL00	;AN000;
 29773                                  
 29774 000018C4 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 29775 000018C9 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 29776                                  
 29777 000018CB 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 29778 000018CF EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 29779                                  
 29780                                  _$P_RCOL00:				;AN000;
 29781 000018D1 E81604                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 29782 000018D4 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 29783                                  
 29784 000018D6 46                      	inc	si			;AN000; if yes, skip trailing byte
 29785                                  _$P_RCOL01:				;AN000;
 29786 000018D7 46                      	inc	si			;AN000; si points to next byte
 29787 000018D8 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 29788                                  
 29789                                  _$P_RCOL_Exit:				;AN000;
 29790 000018DA 5E                      	pop	si			;AN000;
 29791 000018DB 58                      	pop	ax			;AN000;
 29792 000018DC C3                      	retn				;AN000;
 29793                                  
 29794                                  ;***********************************************************************
 29795                                  ; _$P_Do_CAPS_String;
 29796                                  ;
 29797                                  ; Function: Perform capitalization along with the file case map table
 29798                                  ;	    or character case map table.
 29799                                  ;
 29800                                  ; Input:    AL = 2 : Use character table
 29801                                  ;	    AL = 4 : Use file table
 29802                                  ;	    cs:SI points to string buffer to be capitalized
 29803                                  ;
 29804                                  ; Output:   None
 29805                                  ;
 29806                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 29807                                  ;***********************************************************************
 29808                                  
 29809                                  _$P_Do_CAPS_String:
 29810 000018DD 56                      	push	si			;AN000;
 29811 000018DE 52                      	push	dx			;AN000;
 29812 000018DF 88C2                    	mov	dl,al			;AN000; save info id
 29813                                  
 29814                                  _$P_DCS_Loop:				;AN000;
 29815 000018E1 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 29816 000018E4 E80304                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 29817 000018E7 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 29818                                  
 29819 000018E9 08C0                    	or	al,al			;AN000; end of string ?
 29820 000018EB 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 29821                                  
 29822 000018ED E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 29823 000018F0 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 29824 000018F3 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 29825                                  _$P_DCS00:				;AN000;
 29826 000018F5 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 29827                                  _$P_DCS01:				;AN000;
 29828 000018F6 46                      	inc	si			;AN000; si point to next byte
 29829 000018F7 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 29830                                  _$P_DCS_Exit:				;AN000;
 29831 000018F9 5A                      	pop	dx			;AN000;
 29832 000018FA 5E                      	pop	si			;AN000;
 29833 000018FB C3                      	retn
 29834                                  
 29835                                  ;***********************************************************************
 29836                                  ; _$P_Do_CAPS_Char;
 29837                                  ;
 29838                                  ; Function: Perform capitalization along with the file case map table
 29839                                  ;	    or character case map table.
 29840                                  ;
 29841                                  ; Input:    DL = 2 : Use character table
 29842                                  ;	    DL = 4 : Use file table
 29843                                  ;	    AL = character to be capitalized
 29844                                  ;
 29845                                  ; Output:   None
 29846                                  ;
 29847                                  ; Use:	INT 21h /w AH=65h
 29848                                  ;***********************************************************************
 29849                                  
 29850                                  _$P_Do_CAPS_Char:
 29851 000018FC 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 29852 000018FE 730B                    	jae	short _$P_DCC_Go	;AN000;
 29853                                  
 29854 00001900 3C61                    	cmp	al,"a"                  ;AN000; if no,
 29855 00001902 7238                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 29856                                  
 29857 00001904 3C7A                    	cmp	al,"z"                  ;AN000;
 29858 00001906 7734                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 29859                                  
 29860 00001908 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 29861                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 29862                                  	; 07/07/2023
 29863 0000190A C3                      	retn
 29864                                  
 29865                                  _$P_DCC_Go:				;AN000;
 29866 0000190B 53                      	push	bx			;AN000;
 29867 0000190C 06                      	push	es			;AN000;
 29868 0000190D 57                      	push	di			;AN000;
 29869                                  
 29870                                  	;;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 29871                                  	;lea	di,[_$P_Char_CAP_Ptr]
 29872                                  	; 07/09/2023
 29873 0000190E BF[6915]                	mov	di,_$P_Char_CAP_Ptr
 29874                                  _$P_DCC00:				;AN000;
 29875 00001911 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 29876 00001914 7415                    	je	short _$P_DCC01		;AN000; if no,
 29877                                  
 29878                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 29879                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 29880                                  ; call, regardless of what base register is currently be defined as cs.
 29881                                  
 29882 00001916 50                      	push	ax			;AN000; get CAPS table thru DOS call
 29883 00001917 51                      	push	cx			;AN000;
 29884 00001918 52                      	push	dx			;AN000;
 29885                                  
 29886 00001919 0E                      	push	cs			;AC036; pass current base seg into
 29887                                  					;(Note: this used to push CS.  BUG...
 29888 0000191A 07                      	pop	es			;AN000;   ES reg, required for
 29889                                  					;get extended country information
 29890                                  	;mov	al,dl ; function	;AN000; upper case table
 29891                                  	; 07/07/2023
 29892 0000191B 92                      	xchg	ax,dx
 29893 0000191C B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 29894 0000191E BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 29895 00001921 B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 29896                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 29897                                  	; 07/07/2023
 29898 00001924 89DA                    	mov	dx,bx ; 0FFFFh
 29899                                  					;DI already set to point to buffer
 29900 00001926 CD21                    	int	21h			;AN000; es:di point to buffer that
 29901                                  					;now has been filled in with info
 29902 00001928 5A                      	pop	dx			;AN000;
 29903 00001929 59                      	pop	cx			;AN000;
 29904 0000192A 58                      	pop	ax			;AN000;
 29905                                  
 29906                                  _$P_DCC01:				;AN000;
 29907                                  
 29908                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 29909                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 29910                                  ; regardless of which base reg is currently the cs reg.
 29911                                  
 29912 0000192B 2E8B5D01                	mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 29913                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 29914                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 29915                                  	; 07/07/2023
 29916 0000192F 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 29917 00001933 43                      	inc	bx			;AC035; add '2' to
 29918 00001934 43                      	inc	bx			;AC035;  BX reg
 29919                                  					;AN000; skip length field
 29920 00001935 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 29921                                  	;xlat	es:[bx] 		;AN000; perform case map
 29922 00001937 26                      	es
 29923 00001938 D7                      	xlat
 29924 00001939 5F                      	pop	di			;AN000;
 29925 0000193A 07                      	pop	es			;AN000;
 29926 0000193B 5B                      	pop	bx			;AN000;
 29927                                  _$P_CAPS_Ret:				;AN000;
 29928 0000193C C3                      	retn				;AN000;
 29929                                  
 29930                                  ;***********************************************************************
 29931                                  ; _$P_Value / _$P_SValue
 29932                                  ;
 29933                                  ; Function:  Make 32bit value from cs:SI and see value list
 29934                                  ;	     and make result buffer.
 29935                                  ;	     _$P_SValue is an entry point for the signed value
 29936                                  ;	     and this will simply call _$P_Value after the handling
 29937                                  ;	     of the sign character, "+" or "-"
 29938                                  ;
 29939                                  ; Input:     cs:SI -> _$P_STRING_BUF
 29940                                  ;	     ES:BX -> CONTROL block
 29941                                  ;
 29942                                  ; Output:    None
 29943                                  ;
 29944                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 29945                                  ;
 29946                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 29947                                  ;***********************************************************************
 29948                                  
 29949                                  	; 26/10/2022 - Retro DOS v4.0
 29950                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 29951                                  
 29952                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29953                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C46h)  	
 29954                                  _$P_SValue:				;AN000; when signed value here
 29955 0000193D 50                      	push	ax			;AN000;
 29956 0000193E 2E800E[E014]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 29957 00001944 2E8026[E014]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 29958                                  	;and	byte [cs:_$P_Flags2],~_$P_Neg ; 07/07/2023 
 29959 0000194A 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 29960 0000194D 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 29961 0000194F 740A                    	je	short _$P_SVal00	;AN000;
 29962                                  
 29963 00001951 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 29964 00001953 7507                    	jne	short _$P_Sval01	;AN000; else
 29965                                  
 29966 00001955 2E800E[E014]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 29967                                  _$P_SVal00:				;AN000;
 29968 0000195B 46                      	inc	si			;AN000; skip sign char
 29969                                  _$P_Sval01:				;AN000;
 29970 0000195C E80200                  	call	_$P_Value		;AN000; and process value
 29971 0000195F 58                      	pop	ax			;AN000;
 29972 00001960 C3                      	retn
 29973                                  
 29974                                  ;***********************************************************************
 29975                                  
 29976                                  	; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 29977                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1C6Ah)
 29978                                  
 29979                                  	; 26/10/2022
 29980                                  _$P_Value:				;AN000;
 29981 00001961 50                      	push	ax			;AN000;
 29982 00001962 51                      	push	cx			;AN000;
 29983 00001963 52                      	push	dx			;AN000;
 29984 00001964 56                      	push	si			;AN000;
 29985 00001965 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 29986 00001967 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 29987 00001969 53                      	push	bx			;AN000; save control pointer
 29988                                  _$P_Value_Loop:				;AN000;
 29989 0000196A 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 29990 0000196D 08C0                    	or	al,al			;AN000; end of line ?
 29991 0000196F 743C                    	jz	short _$P_Value00	;AN000;
 29992                                  
 29993 00001971 E8E000                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 29994 00001974 7233                    	jc	short _$P_Value_Err0	;AN000;
 29995                                  
 29996 00001976 30E4                    	xor	ah,ah			;AN000;
 29997 00001978 89C5                    	mov	bp,ax			;AN000; save binary number
 29998                                  
 29999                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30000                                  ; Ref: Disassembled PCDOS 7.1 IBMBIO.COM SYSINIT code
 30001                                  ;				Erdogan Tan - July 2023 
 30002                                  %if 0
 30003                                  	shl	dx,1			;AN000; to have 2*x
 30004                                  	rcl	cx,1			;AN000; shift left w/ carry
 30005                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 30006                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 30007                                  
 30008                                  	mov	bx,dx			;AN000; save low(2*x)
 30009                                  	mov	ax,cx			;AN000; save high(2*x)
 30010                                  	shl	dx,1			;AN000; to have 4*x
 30011                                  	rcl	cx,1			;AN000; shift left w/ carry
 30012                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 30013                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 30014                                  
 30015                                  	shl	dx,1			;AN000; to have 8*x
 30016                                  	rcl	cx,1			;AN000; shift left w/ carry
 30017                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 30018                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 30019                                  
 30020                                  	add	dx,bx			;AN000; now have 10*x
 30021                                  	adc	cx,ax			;AN000; 32bit ADD
 30022                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 30023                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 30024                                  
 30025                                  	add	dx,bp			;AN000; Add the current one degree decimal
 30026                                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 30027                                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 30028                                  	jc	short _$P_Value_Err0	;AN000; then error, exit
 30029                                  
 30030                                  	inc	si			;AN000; update pointer
 30031                                  	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 30032                                  ;_$P_Value_Err0:
 30033                                  %endif
 30034                                  ;****
 30035                                  %if 1
 30036                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30037                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2130h)
 30038                                  
 30039 0000197A 30E4                    	xor	ah,ah
 30040 0000197C 89C5                    	mov	bp,ax			; save binary number
 30041 0000197E E81C00                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 30042 00001981 89D3                    	mov	bx,dx			; ax:bx = 2*(cx:dx)
 30043 00001983 89C8                    	mov	ax,cx
 30044 00001985 E81500                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 30045 00001988 E81200                  	call	_$P_Value_2x_OVF 	; multiply cx:dx by 2 and then check overflow
 30046 0000198B 01DA                    	add	dx,bx			; 8*(cx:dx)+2*(cx:dx) = 10*(cx:dx)
 30047 0000198D 11C1                    	adc	cx,ax
 30048 0000198F E80F00                  	call	_$P_Value_Chk_Add_OVF
 30049 00001992 01EA                    	add	dx,bp			; Add the current one degree decimal
 30050                                  					; if carry, add 1 to high 16bit
 30051 00001994 83D100                  	adc	cx,0
 30052 00001997 E80700                  	call	_$P_Value_Chk_Add_OVF	; Overflow occurred ?
 30053                                  					; then error, exit (without return here)
 30054 0000199A 46                      	inc	si			; update pointer
 30055 0000199B EBCD                    	jmp	short _$P_Value_Loop
 30056                                  
 30057                                  _$P_Value_2x_OVF:
 30058 0000199D D1E2                    	shl	dx,1 			; to have 2*x
 30059 0000199F D1D1                    	rcl	cx,1			; shift left w/ carry
 30060                                  _$P_Value_Chk_Add_OVF:
 30061 000019A1 E89E00                  	call	_$P_Check_OVF		; check overflow (for the last shift or add)
 30062 000019A4 7201                    	jc	short _$P_Value_OVF
 30063 000019A6 C3                      	retn
 30064                                  _$P_Value_OVF:
 30065 000019A7 44                      	inc	sp 			; skip "call" return address to the caller
 30066 000019A8 44                      	inc	sp
 30067                                  
 30068                                  ;_$P_Value_Err0:	
 30069                                  %endif
 30070                                  ;****
 30071                                  
 30072                                  _$P_Value_Err0:				;AN000;
 30073 000019A9 5B                      	pop	bx			;AN000;
 30074 000019AA E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 30075                                  ;
 30076                                  _$P_Value00:				;AN000;
 30077 000019AD 5B                      	pop	bx			;AN000; restore control pointer
 30078 000019AE 2EF606[E014]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 30079 000019B4 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 30080                                  
 30081 000019B6 F7D1                    	not	cx			;AN000; +
 30082 000019B8 F7D2                    	not	dx			;AN000; |- Make 2's complement
 30083 000019BA 83C201                  	add	dx,1			;AN000; |
 30084 000019BD 83D100                  	adc	cx,0			;AN000; +
 30085                                  
 30086                                  _$P_Value01:				;AN000; / nval = 0
 30087 000019C0 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 30088 000019C4 268A04                  	mov	al,[es:si]		;AN000; get nval
 30089                                  	; 07/09/2023
 30090                                  	;cmp	al,_$P_nval_None ; 0	;AN000; no value list ?
 30091                                  	;;*jne	short _$P_Value02	;AN000;
 30092                                  	;;* 07/07/2023
 30093                                  	;je	short _$P_Value05
 30094                                  	; 07/09/2023
 30095 000019C7 08C0                    	or	al,al
 30096 000019C9 7459                    	jz	short _$P_Value05 ; _$P_nval_None
 30097                                  
 30098                                  	;mov	al,_$P_Number		;AN000; Set type
 30099                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30100                                  	; 07/07/2023
 30101                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 30102                                  	;*jmp	short _$P_Value_Exit	;AN000;
 30103                                  
 30104                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 30105                                  	; (SYSINIT:1BA5h)
 30106                                  	; 12/12/2022
 30107                                  	;nop	; db  90h
 30108                                  
 30109                                  _$P_Value02:				;AN000; / nval = 1
 30110                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 30111                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 30112                                  ;(tm07) jne	short _$P_Value03	;AN000;
 30113                                  
 30114 000019CB 46                      	inc	si			;AN000;
 30115 000019CC 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 30116                                  	
 30117                                  	; 07/09/2023
 30118                                  	;cmp	al,_$P_No_nrng		;AN000; (tm07)
 30119                                  	;je	short _$P_Value03	;AN000; (tm07)
 30120 000019CF 08C0                    	or	al,al
 30121 000019D1 745D                    	jz	short _$P_Value03 ; _$P_No_nrng
 30122                                  
 30123 000019D3 46                      	inc	si			;AN000; si points to 1st item_tag
 30124                                  _$P_Val02_Loop:				;AN000;
 30125 000019D4 2EF606[E014]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 30126 000019DA 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 30127                                  
 30128 000019DC 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 30129 000019E0 7234                    	jb	short _$P_Val02_Next	;AN000;
 30130 000019E2 7706                    	ja	short _$P_Val_In	;AN000;
 30131                                  
 30132 000019E4 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 30133 000019E8 722C                    	jb	short _$P_Val02_Next	;AN000;
 30134                                  
 30135                                  _$P_Val_In:				;AN000;
 30136 000019EA 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 30137 000019EE 7726                    	ja	short _$P_Val02_Next	;AN000;
 30138 000019F0 7237                    	jb	short _$P_Val_Found	;AN000;
 30139                                  
 30140 000019F2 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 30141 000019F6 771E                    	ja	short _$P_Val02_Next	;AN000;
 30142                                  
 30143 000019F8 EB2F                    	jmp	short _$P_Val_Found	;AN000;
 30144                                  
 30145                                  _$P_Val02_Sign:				;AN000;
 30146 000019FA 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 30147 000019FE 7C16                    	jl	short _$P_Val02_Next	;AN000;
 30148 00001A00 7F06                    	jg	short _$P_SVal_In	;AN000;
 30149                                  
 30150 00001A02 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 30151 00001A06 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 30152                                  
 30153                                  _$P_SVal_In:				;AN000;
 30154 00001A08 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 30155 00001A0C 7F08                    	jg	short _$P_Val02_Next	;AN000;
 30156                                  
 30157 00001A0E 7C19                    	jl	short _$P_Val_Found	;AN000;
 30158                                  
 30159 00001A10 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 30160                                  	;jg	short _$P_Val02_Next	;AN000;
 30161                                  	;jmp	short _$P_Val_Found	;AN000;
 30162                                  	; 07/07/2023
 30163 00001A14 7E13                    	jng	short _$P_Val_Found
 30164                                  
 30165                                  _$P_Val02_Next:				;AN000;
 30166 00001A16 83C609                  	add	si,_$P_Len_Range 	;AN000;
 30167 00001A19 FEC8                    	dec	al			;AN000; loop nrng times in AL
 30168 00001A1B 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 30169                                  					; / Not found
 30170 00001A1D 2EC706[D414]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 30171                                  	;mov	al,_$P_Number		;AN000;
 30172                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30173                                  _$P_Value05:		;* 07/07/2023
 30174                                  	; 07/07/2023
 30175 00001A24 B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 30176 00001A27 EB11                    	jmp	short _$P_Value_Exit	;AN000;
 30177                                  
 30178                                  _$P_Val_Found:				;AN000;
 30179 00001A29 B001                    	mov	al,_$P_Number		;AN000;
 30180 00001A2B 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 30181 00001A2E EB0A                    	jmp	short _$P_Value_Exit	;AN000;
 30182                                  
 30183                                  _$P_Value03:				;AN000; / nval = 2
 30184                                  
 30185                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 30186                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 30187                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 30188                                  ;(tm07) inc	si			;AN000;
 30189                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 30190                                  ;	mov	ah,$P_Len_Range 	;AN000;
 30191                                  ;	mul	ah			;AN000;  Skip nrng field
 30192                                  ;	inc	ax			;AN000;
 30193                                  ;	add	si,ax			;AN000; si points to nnval
 30194                                  ;	mov	al,es:[si]		;AN000; get nnval
 30195                                  ;	inc	si			;AN000; si points to 1st item_tag
 30196                                  ;$P_Val03_Loop:				;AN000;
 30197                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 30198                                  ;	jne	$P_Val03_Next		;AN000;
 30199                                  ;
 30200                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 30201                                  ;	je	$P_Val_Found		;AN000;
 30202                                  ;
 30203                                  ;$P_Val03_Next:				;AN000;
 30204                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 30205                                  ;	dec	al			;AN000; loop nval times in AL
 30206                                  ;	jne	$P_Val03_Loop		;AN000;
 30207                                  ;					;AN000; / Not found
 30208                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 30209                                  ;	mov	al,$P_Number		;AN000;
 30210                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 30211                                  ;	jmp	short $P_Value_Exit	;AN000;
 30212                                  ;
 30213                                  ;ENDIF					;AN000;(of Val2SW)
 30214                                  ;$P_Value04:
 30215                                  
 30216                                  _$P_Value_Err:				;AN000;
 30217 00001A30 2EC706[D414]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 30218                                  	;mov	al,_$P_String		;AN000; Set type
 30219                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30220                                  	; 07/09/2023
 30221                                  	; 07/07/2023
 30222 00001A37 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 30223                                  _$P_Value_Exit:				;AN000;
 30224 00001A3A E84DFD                  	call	_$P_Fill_Result		;AN000;
 30225 00001A3D 5E                      	pop	si			;AN000;
 30226 00001A3E 5A                      	pop	dx			;AN000;
 30227 00001A3F 59                      	pop	cx			;AN000;
 30228 00001A40 58                      	pop	ax			;AN000;
 30229 00001A41 C3                      	retn				;AN000;
 30230                                  
 30231                                  ; 28/03/2019 - Retro DOS v4.0
 30232                                  
 30233                                  ;***********************************************************************
 30234                                  ; _$P_Check_OVF
 30235                                  ;
 30236                                  ; Function:  Check if overflow is occurred with consideration of
 30237                                  ;	     signed or un-signed numeric value
 30238                                  ;
 30239                                  ; Input:     Flag register
 30240                                  ;
 30241                                  ; Output:    CY = 1  :	Overflow
 30242                                  ;
 30243                                  ; Vars:     _$P_Flags(R)
 30244                                  ;***********************************************************************
 30245                                  
 30246                                  	; 26/10/2022
 30247                                  _$P_Check_OVF:
 30248 00001A42 9C                      	pushf				;AN000;
 30249 00001A43 2EF606[E014]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 30250 00001A49 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 30251                                  
 30252 00001A4B 9D                      	popf				;AN000; by the CY bit
 30253 00001A4C C3                      	retn				;AN000;
 30254                                  
 30255                                  _$P_COVF:				;AN000;
 30256 00001A4D 9D                      	popf				;AN000; else,
 30257 00001A4E 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 30258                                  
 30259 00001A50 F8                      	clc				;AN000; indicate it with CY bit
 30260 00001A51 C3                      	retn				;AN000; CY=0 means no overflow
 30261                                  
 30262                                  _$P_COVF00:				;AN000;
 30263 00001A52 F9                      	stc				;AN000; and CY=1 means overflow
 30264 00001A53 C3                      	retn				;AN000;
 30265                                  
 30266                                  ;***********************************************************************
 30267                                  ; _$P_0099;
 30268                                  ;
 30269                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 30270                                  ;
 30271                                  ; Input:     AL = character code
 30272                                  ;
 30273                                  ; Output:    CY = 1 : AL is not number
 30274                                  ;	     CY = 0 : AL contains binary value
 30275                                  ;***********************************************************************
 30276                                  
 30277                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30278                                  %if 0
 30279                                  _$P_0099:
 30280                                  	cmp	al,"0"                  ;AN000;
 30281                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 30282                                  	; 12/12/2022
 30283                                  	jb	short _$P_0099Err2  ; cf=1
 30284                                  
 30285                                  	cmp	al,"9"                  ;AN000;
 30286                                  	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 30287                                  
 30288                                  	sub	al,"0"                  ;AN000; make char -> bin
 30289                                  	; 12/12/2022
 30290                                  	; cf=0	
 30291                                  	;clc				;AN000; indicate no error
 30292                                  	retn				;AN000;
 30293                                  
 30294                                  _$P_0099Err:				;AN000;
 30295                                  	stc				;AN000; indicate error
 30296                                  _$P_0099Err2: ; 12/12/2022	
 30297                                  	retn				;AN000;
 30298                                  %endif
 30299                                  
 30300                                  ; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30301                                  %if 1
 30302                                  _$P_0099:
 30303 00001A54 3C30                    	cmp	al,"0"                  ; cmp al,30h
 30304 00001A56 7207                    	jb	short _$P_0099Err	; must be 0 =< al =< 9
 30305 00001A58 3C3A                    	cmp	al,"9"+1                ; cmp al,3Ah  
 30306 00001A5A F5                      	cmc				; cf=0 -> cf=1
 30307 00001A5B 7202                    	jb	short _$P_0099Err
 30308 00001A5D 2C30                    	sub	al,"0"	; sub al,30h 	; make char -> bin
 30309                                  	; cf=0
 30310                                  _$P_0099Err:	; cf=1
 30311 00001A5F C3                      	retn
 30312                                  %endif	
 30313                                  
 30314                                  ;***********************************************************************
 30315                                  ; _$P_Simple_String
 30316                                  ;
 30317                                  ; Function:  See value list for the simple string
 30318                                  ;	     and make result buffer.
 30319                                  ;
 30320                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30321                                  ;	     ES:BX -> CONTROL block
 30322                                  ;
 30323                                  ; Output:    None
 30324                                  ;
 30325                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 30326                                  ;
 30327                                  ; Vars: _$P_RC(W)
 30328                                  ;***********************************************************************
 30329                                  
 30330                                  _$P_Simple_String:
 30331 00001A60 50                      	push	ax			;AN000;
 30332 00001A61 53                      	push	bx			;AN000;
 30333 00001A62 52                      	push	dx			;AN000;
 30334 00001A63 57                      	push	di			;AN000;
 30335 00001A64 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 30336 00001A68 268A05                  	mov	al,[es:di]		;AN000; get nval
 30337 00001A6B 08C0                    	or	al,al			;AN000; no value list ?
 30338 00001A6D 7504                    	jnz	short _$P_Sim00		;AN000; then
 30339                                  
 30340 00001A6F B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30341 00001A71 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 30342                                  
 30343                                  _$P_Sim00:				;AN000;
 30344                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 30345 00001A73 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 30346 00001A75 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 30347                                  
 30348 00001A77 47                      	inc	di			;AN000;
 30349 00001A78 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 30350 00001A7B B409                    	mov	ah,_$P_Len_Range 	;AN000;
 30351 00001A7D F6E4                    	mul	ah			;AN000; Skip nrng field
 30352 00001A7F 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 30353 00001A80 01C7                    	add	di,ax			;AN000; di points to nnval
 30354 00001A82 268A05                  	mov	al,[es:di]		;AN000; get nnval
 30355 00001A85 B405                    	mov	ah,_$P_Len_Value 	;AN000;
 30356 00001A87 F6E4                    	mul	ah			;AN000; Skip nnval field
 30357 00001A89 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 30358 00001A8A 01C7                    	add	di,ax			;AN000; di points to nstrval
 30359 00001A8C 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 30360 00001A8F 47                      	inc	di			;AC035; add '2' to
 30361 00001A90 47                      	inc	di			;AC035;  DI reg
 30362                                  					;AN000; di points to 1st string in list
 30363                                  _$P_Sim_Loop:				;AN000;
 30364 00001A91 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 30365 00001A94 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 30366 00001A97 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 30367                                  
 30368 00001A99 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 30369 00001A9C FEC8                    	dec	al			;AN000; loop nstval times in AL
 30370 00001A9E 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 30371                                  					;AN000; / Not found
 30372 00001AA0 2EC706[D414]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 30373 00001AA7 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30374 00001AA9 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 30375                                  
 30376                                  _$P_Sim_Found:				;AN000;
 30377 00001AAB 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 30378 00001AAF B002                    	mov	al,_$P_List_Idx		;AN000;
 30379 00001AB1 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 30380 00001AB4 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 30381                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 30382                                  _$P_Sim01:				;AN000;
 30383 00001AB6 2EC706[D414]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 30384 00001ABD B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 30385                                  _$P_Sim_Exit:				;AN000;
 30386 00001ABF B003                    	mov	al,_$P_String		;AN000; Set type
 30387                                  _$P_Sim_Exit0:				;AN000;
 30388 00001AC1 E8C6FC                  	call	_$P_Fill_Result		;AN000;
 30389 00001AC4 5F                      	pop	di			;AN000;
 30390 00001AC5 5A                      	pop	dx			;AN000;
 30391 00001AC6 5B                      	pop	bx			;AN000;
 30392 00001AC7 58                      	pop	ax			;AN000;
 30393 00001AC8 C3                      	retn				;AN000;
 30394                                  
 30395                                  ;***********************************************************************
 30396                                  ; _$P_String_Comp:
 30397                                  ;
 30398                                  ; Function:  Compare two string
 30399                                  ;
 30400                                  ; Input:     cs:SI -> 1st string
 30401                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 30402                                  ;	     ES:BX -> CONTROL block
 30403                                  ;
 30404                                  ; Output:    CY = 1 if not match
 30405                                  ;
 30406                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 30407                                  ;
 30408                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 30409                                  ;***********************************************************************
 30410                                  
 30411                                  _$P_String_Comp:
 30412 00001AC9 50                      	push	ax			;AN000;
 30413 00001ACA 55                      	push	bp			;AN000;
 30414 00001ACB 52                      	push	dx			;AN000;
 30415 00001ACC 56                      	push	si			;AN000;
 30416 00001ACD B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 30417                                  _$P_SCOM_Loop:				;AN000;
 30418 00001ACF 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 30419 00001AD2 E81502                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 30420 00001AD5 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 30421                                  
 30422 00001AD7 E822FE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 30423                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 30424 00001ADA 2EF606[E014]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 30425 00001AE0 740D                    	jz	short _$P_SCOM04	;AN000;
 30426                                  
 30427 00001AE2 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 30428 00001AE4 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 30429                                  
 30430 00001AE6 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 30431 00001AEB 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 30432                                  
 30433 00001AED EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 30434                                  
 30435                                  _$P_SCOM04:				;AN000;
 30436 00001AEF 2EF606[E014]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 30437 00001AF5 740E                    	jz	short _$P_SCOM03	;AN000;
 30438                                  
 30439 00001AF7 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 30440 00001AF9 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 30441                                  
 30442                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30443                                  	;cmp	byte [es:bp+0],_$P_NULL
 30444                                  	; 11/12/2022
 30445 00001AFB 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 30446 00001B00 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 30447                                  
 30448                                  _$P_SCOM05:				;AN000;   found a match
 30449 00001B02 46                      	inc	si			;AN000; si points to just after "=" or ":"
 30450 00001B03 EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 30451                                  
 30452                                  _$P_SCOM03:				;AN000;
 30453                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 30454                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30455                                  	;cmp	al,[es:bp+0]
 30456                                  	; 11/12/2022
 30457 00001B05 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 30458 00001B09 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 30459                                  
 30460 00001B0B 08C0                    	or	al,al			;AN000; end of line
 30461 00001B0D 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 30462                                  
 30463                                  	; 12/12/2022
 30464                                  	;inc	si			;AN000; update operand pointer
 30465                                  	;inc	bp			;AN000;    and synonym pointer
 30466                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30467 00001B0F EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 30468                                  
 30469                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 30470                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30471                                  	;cmp	al,[es:bp+0]
 30472                                  	; 11/12/2022
 30473 00001B11 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 30474 00001B15 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 30475                                  
 30476 00001B17 46                      	inc	si			;AN000; else, load next byte
 30477 00001B18 2E8A04                  	mov	al,[cs:si]		;AN000; and
 30478 00001B1B 45                      	inc	bp			;AN000;
 30479                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30480                                  	;cmp	al,[es:bp+0]
 30481                                  	; 11/12/2022
 30482 00001B1C 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 30483 00001B20 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 30484                                  
 30485                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30486                                  	; 12/12/2022
 30487                                  _$P_SCOM01:
 30488 00001B22 46                      	inc	si			;AN000; else update operand pointer
 30489 00001B23 45                      	inc	bp			;AN000; 		and synonym pointer
 30490                                  ;_$P_SCOM01:				;AN000;
 30491 00001B24 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 30492                                  
 30493                                  _$P_SCOM_Differ0:			;AN000;
 30494                                  ;IF SwSW				;AN000;(tm10)
 30495 00001B26 2EF606[E014]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 30496 00001B2C 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 30497                                  
 30498                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30499                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 30500                                  	; 12/12/2022
 30501 00001B2E 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 30502 00001B33 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 30503                                  
 30504                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30505                                  	;cmp	byte [es:bp+0],_$P_NULL
 30506                                  	; 11/12/2022
 30507 00001B35 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 30508                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 30509 00001B3A 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 30510                                  
 30511                                  _$P_not_applicable:			;AN000;(tm10)
 30512                                  ;ENDIF					;AN000;(tm10)
 30513                                  
 30514                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 30515                                  					;AN000; ignore colon option specified ?
 30516                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 30517                                  	; 12/12/2022
 30518 00001B3C 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 30519                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30520                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 30521 00001B40 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 30522                                  
 30523 00001B42 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 30524 00001B44 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 30525                                  
 30526                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30527                                  	;cmp	byte [es:bp+0],_$P_NULL
 30528                                  	; 11/12/2022
 30529 00001B46 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 30530 00001B4B 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 30531                                  
 30532 00001B4D EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 30533                                  
 30534                                  _$P_SCOM02:				;AN000;
 30535 00001B4F 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 30536 00001B51 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 30537                                  
 30538                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30539                                  	;cmp	byte [es:bp+0],_$P_Colon
 30540                                  	; 11/12/2022
 30541 00001B53 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 30542 00001B58 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 30543                                  
 30544                                  _$P_SCOM_Differ: 			;AN000;
 30545 00001B5A F9                      	stc				;AN000; indicate not found
 30546 00001B5B EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 30547                                  
 30548                                  _$P_SCOM_Same:				;AN000;
 30549                                  	; 12/12/2022
 30550                                  	; cf=0
 30551 00001B5D 2E8936[E314]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 30552                                  	; 12/12/2022
 30553                                  	;clc				;AN000; indicate found
 30554                                  _$P_SCOM_Exit:				;AN000;
 30555 00001B62 5E                      	pop	si			;AN000;
 30556 00001B63 5A                      	pop	dx			;AN000;
 30557 00001B64 5D                      	pop	bp			;AN000;
 30558 00001B65 58                      	pop	ax			;AN000;
 30559 00001B66 C3                      	retn
 30560                                  
 30561                                  ; 30/03/2019
 30562                                  
 30563                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 30564                                  
 30565                                  ;***********************************************************************
 30566                                  ; _$P_File_Format;
 30567                                  ;
 30568                                  ; Function:  Check if the input string is valid file spec format.
 30569                                  ;	     And set the result buffer.
 30570                                  ;
 30571                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30572                                  ;	     ES:BX -> CONTROL block
 30573                                  ;
 30574                                  ; Output:    None
 30575                                  ;
 30576                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 30577                                  ;
 30578                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 30579                                  ;	_$P_SaveSI_Cmpx(R)
 30580                                  ;***********************************************************************
 30581                                  
 30582                                  _$P_File_Format:
 30583 00001B67 50                      	push	ax			;AN000;
 30584 00001B68 57                      	push	di			;AN000;
 30585 00001B69 56                      	push	si			;AN000;
 30586 00001B6A 2E8B3E[E114]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 30587                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 30588 00001B6F 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 30589 00001B72 08C0                    	or	al,al			;AN000; end of line ?
 30590 00001B74 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 30591                                  
 30592 00001B76 E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 30593 00001B79 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 30594                                  
 30595 00001B7B 2EC606[7715]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 30596                                  					;AN033;AC034;; set error flag- bad char.
 30597 00001B81 5E                      	pop	si			;AN033;
 30598 00001B82 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 30599 00001B86 5F                      	pop	di			;AN033;
 30600 00001B87 EB3E                    	jmp	short _$P_FileF02	;AN033;
 30601                                  
 30602                                  _$P_FileF_Err:				;AN000;
 30603 00001B89 5E                      	pop	si			;AN000;
 30604 00001B8A 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 30605 00001B8E 5F                      	pop	di			;AN000;
 30606                                  
 30607                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 30608                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 30609                                  	; 12/12/2022
 30610 00001B8F 26F60701                	test	byte [es:bx],_$P_Optional
 30611                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30612                                  	;test	word [es:bx],_$P_Optional
 30613 00001B93 7532                    	jnz	short _$P_FileF02	;AN000;
 30614                                  
 30615 00001B95 2EC706[D414]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 30616 00001B9C EB29                    	jmp	short _$P_FileF02	;AN000;
 30617                                  
 30618                                  _$P_FileF03:				;AN000;
 30619 00001B9E 58                      	pop	ax			;AN000; discard save si
 30620 00001B9F 56                      	push	si			;AN000; save new si
 30621                                  _$P_FileF_Loop1: 			;AN000;
 30622 00001BA0 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 30623 00001BA3 08C0                    	or	al,al			;AN000; end of line ?
 30624 00001BA5 741E                    	jz	short _$P_FileF_RLT	;AN000;
 30625                                  
 30626 00001BA7 E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 30627 00001BAA 740B                    	je	short _$P_FileF00	;AN000;
 30628                                  
 30629 00001BAC E83B01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 30630 00001BAF 7302                    	jnc	short _$P_FileF01	;AN000;
 30631 00001BB1 47                      	inc	di			;AN000; if yes, skip next byte
 30632 00001BB2 46                      	inc	si			;AN000;
 30633                                  _$P_FileF01:				;AN000;
 30634 00001BB3 47                      	inc	di			;AN000;
 30635 00001BB4 46                      	inc	si			;AN000;
 30636 00001BB5 EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 30637                                  ;
 30638                                  _$P_FileF00:				;AN000;
 30639 00001BB7 2EA2[DA14]              	mov	[cs:_$P_Terminator],al	;AC034;
 30640 00001BBB 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 30641 00001BBF 47                      	inc	di			;AN000;
 30642 00001BC0 2E893E[D614]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 30643                                  _$P_FileF_RLT:				;AN000;
 30644 00001BC5 5E                      	pop	si			;AN000;
 30645 00001BC6 5F                      	pop	di			;AN000;
 30646                                  _$P_FileF02:				;AN000;
 30647 00001BC7 58                      	pop	ax			;AN000; (tm14)
 30648                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 30649                                  	; 08/07/2023
 30650 00001BC8 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 30651 00001BCB 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 30652                                  
 30653 00001BCD 50                      	push	ax			;AN000; (tm14)
 30654                                  	;mov	ah,_$P_No_Tag		;AN000; set
 30655                                  	;mov	al,_$P_File_Spec 	;AN000; result
 30656                                  	; 08/07/2023
 30657 00001BCE B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 30658                                  					      ; set result
 30659 00001BD1 E8B6FB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 30660 00001BD4 58                      	pop	ax			;AN000;
 30661                                  
 30662                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 30663 00001BD5 C3                      	retn				;AN000;
 30664                                  
 30665                                  ;***********************************************************************
 30666                                  ; _$P_FileSp_Chk
 30667                                  ;
 30668                                  ; Function:  Check if the input byte is one of file special characters
 30669                                  ;
 30670                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30671                                  ;	     AL = character code to be examineed
 30672                                  ;
 30673                                  ; Output:    ZF = 1 , AL is one of special characters
 30674                                  ;***********************************************************************
 30675                                  
 30676                                  _$P_FileSp_Chk:
 30677 00001BD6 53                      	push	bx			;AN000;
 30678 00001BD7 51                      	push	cx			;AN000;
 30679                                  	;;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 30680                                  	;lea	bx,[_$P_FileSp_Char] 	; "[]|<>+=;\"" at
 30681                                  					; MSDOS 6.21 IO.SYS - SYSINIT:1838h
 30682                                  	; 07/09/2023
 30683 00001BD8 BB[6E15]                	mov	bx,_$P_FileSp_Char
 30684 00001BDB B90900                  	mov	cx,_$P_FileSp_Len ; 9	;AN000; load length of it
 30685                                  _$P_FileSp_Loop: 			;AN000;
 30686 00001BDE 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 30687 00001BE1 7404                    	je	short _$P_FileSp_Exit	;AN000;
 30688                                  
 30689 00001BE3 43                      	inc	bx			;AN000;
 30690 00001BE4 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 30691                                  
 30692 00001BE6 41                      	inc	cx			;AN000; reset ZF
 30693                                  _$P_FileSp_Exit: 			;AN000;
 30694 00001BE7 59                      	pop	cx			;AN000;
 30695 00001BE8 5B                      	pop	bx			;AN000;
 30696 00001BE9 C3                      	retn
 30697                                  
 30698                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 30699                                  
 30700                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 30701                                  
 30702                                  ;***********************************************************************
 30703                                  ; _$P_Drive_Format;
 30704                                  ;
 30705                                  ; Function:  Check if the input string is valid drive only format.
 30706                                  ;	     And set the result buffer.
 30707                                  ;
 30708                                  ; Input:     cs:SI -> _$P_STRING_BUF
 30709                                  ;	     ES:BX -> CONTROL block
 30710                                  ;
 30711                                  ; Output:    None
 30712                                  ;
 30713                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 30714                                  ;
 30715                                  ; Vars: _$P_RC(W)
 30716                                  ;***********************************************************************
 30717                                  
 30718                                  _$P_Drive_Format:
 30719 00001BEA 50                      	push	ax			;AN000;
 30720 00001BEB 52                      	push	dx			;AN000;
 30721 00001BEC 2E8A04                  	mov	al,[cs:si]		;AN000;
 30722 00001BEF 08C0                    	or	al,al			;AN000; if null string
 30723 00001BF1 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 30724                                  
 30725 00001BF3 E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 30726 00001BF6 722A                    	jc	short _$P_Drv_Err	;AN000;
 30727                                  
 30728 00001BF8 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 30729 00001BFD 740D                    	je	short _$P_DrvF00	;AN000;
 30730                                  
 30731                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 30732                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 30733                                  	; 12/12/2022
 30734 00001BFF 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 30735                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 30736                                  	;test	word [es:bx],_$P_Ig_Colon
 30737 00001C03 741D                    	jz	short _$P_Drv_Err	;AN000;
 30738                                  
 30739 00001C05 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 30740 00001C0A 7516                    	jne	short _$P_Drv_Err	;AN000;
 30741                                  
 30742                                  _$P_DrvF00:				;AN000;
 30743 00001C0C 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 30744 00001C0E 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 30745 00001C10 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 30746                                  
 30747 00001C12 3C7A                    	cmp	al,"z"                  ;AN000; "a"-"z"
 30748 00001C14 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 30749                                  
 30750 00001C16 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 30751 00001C18 88C2                    	mov	dl,al			;AN000; set
 30752                                  	;mov	ah,_$P_No_Tag		;AN000; result
 30753                                  	;mov	al,_$P_Drive		;AN000; buffer
 30754                                  	; 08/07/2023
 30755 00001C1A B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 30756                                  					      ; set result buffer
 30757 00001C1D E86AFB                  	call	_$P_Fill_Result		;AN000; to drive
 30758 00001C20 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 30759                                  
 30760                                  _$P_Drv_Err:				;AN000;
 30761 00001C22 2EC706[D414]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 30762                                  _$P_Drv_Exit:				;AN000;
 30763 00001C29 5A                      	pop	dx			;AN000;
 30764 00001C2A 58                      	pop	ax			;AN000;
 30765 00001C2B C3                      	retn				;AN000;
 30766                                  
 30767                                  ;ENDIF					;AN000;(of DrvSW)
 30768                                  
 30769                                  ;***********************************************************************
 30770                                  ; _$P_Skip_Delim;
 30771                                  ;
 30772                                  ; Function: Skip delimiters specified in the PARMS list, white space
 30773                                  ;	    and comma.
 30774                                  ;
 30775                                  ; Input:    DS:SI -> Command String
 30776                                  ;	    ES:DI -> Parameter List
 30777                                  ;
 30778                                  ; Output:   CY = 1 if the end of line encounterd
 30779                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 30780                                  ;	    AL = Last examineed character
 30781                                  ;
 30782                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 30783                                  ;
 30784                                  ; Vars:     _$P_Flags(R)
 30785                                  ;***********************************************************************
 30786                                  
 30787                                  _$P_Skip_Delim:
 30788                                  _$P_Skip_Delim_Loop:			;AN000;
 30789 00001C2C AC                      	lodsb				;AN000;
 30790 00001C2D E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 30791 00001C30 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 30792                                  
 30793 00001C32 E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 30794 00001C35 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 30795                                  
 30796 00001C37 2EF606[E014]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 30797 00001C3D 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 30798                                  
 30799 00001C3F 2EF606[E014]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 30800                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 30801                                  	; 08/07/2023
 30802                                  	; cf=0
 30803 00001C45 7505                    	jnz	short _$P_Skip_Delim_Exit
 30804 00001C47 C3                      	retn
 30805                                  
 30806                                  	;dec	si			;AN000; backup si for next call (tm08)
 30807                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 30808                                  	; 12/12/2022
 30809                                  	; cf=0
 30810                                  	; 08/07/2023
 30811                                  	;jmp	short _$P_Skip_Delim_Exit
 30812                                  
 30813                                  _$P_Skip_Delim_CY:			;AN000;
 30814 00001C48 F9                      	stc				;AN000; indicate EOL
 30815 00001C49 EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 30816                                  
 30817                                  _$P_Skip_Delim_NCY:			;AN000;
 30818 00001C4B F8                      	clc				;AN000; indicate non delim
 30819                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 30820 00001C4C 4E                      	dec	si			;AN000;  backup index pointer
 30821                                  	; 08/07/2023
 30822                                  	; 12/12/2022
 30823                                  ;_$P_Exit_At_Extra:	 ; cf=0
 30824 00001C4D C3                      	retn				;AN000;
 30825                                  
 30826                                  	; 12/12/2022
 30827                                  ;_$P_Exit_At_Extra:			;AN000;
 30828                                  	;clc				;AN000; indicate extra delim
 30829                                  	;retn				;AN000;
 30830                                  
 30831                                  ;***********************************************************************
 30832                                  ; _$P_Chk_EOL;
 30833                                  ;
 30834                                  ; Function: Check if AL is one of End of Line characters.
 30835                                  ;
 30836                                  ; Input:    AL = character code
 30837                                  ;	    ES:DI -> Parameter List
 30838                                  ;
 30839                                  ; Output:   ZF = 1 if one of End of Line characters
 30840                                  ;**********************************************************************
 30841                                  
 30842                                  _$P_Chk_EOL:
 30843 00001C4E 53                      	push	bx			;AN000;
 30844 00001C4F 51                      	push	cx			;AN000;
 30845 00001C50 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 30846 00001C52 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30847 00001C54 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 30848 00001C56 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30849                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 30850 00001C58 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 30851 00001C5A 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30852                                  ;ENDIF					;AN028;
 30853 00001C5C 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 30854                                  					;AN000; EOL character specified ?
 30855 00001C61 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 30856 00001C63 31DB                    	xor	bx,bx			;AN000;
 30857 00001C65 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 30858                                  					;AN000; get length of delimiter list
 30859 00001C69 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 30860                                  	; 08/07/2023
 30861 00001C6C 31C9                    	xor	cx,cx ; *
 30862 00001C6E 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 30863 00001C72 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 30864                                  	; 08/07/2023
 30865                                  	;;xor	cx,cx			;AN000; Get number of extra character
 30866                                  	;xor	ch,ch ; *
 30867 00001C74 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 30868                                  _$P_Chk_EOL_Loop:			;AN000;
 30869 00001C77 43                      	inc	bx			;AN000;
 30870 00001C78 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 30871 00001C7B 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 30872 00001C7D E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 30873                                  	; 08/07/2023
 30874                                  	; cx=0
 30875                                  _$P_Chk_EOL_NZ:				;AN000;
 30876                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 30877                                  	; 08/07/2023
 30878 00001C7F 41                      	inc	cx  ; zf=0  (cx=1) ; *
 30879                                  _$P_Chk_EOL_Exit:			;AN000;
 30880 00001C80 59                      	pop	cx			;AN000;
 30881 00001C81 5B                      	pop	bx			;AN000;
 30882 00001C82 C3                      	retn
 30883                                  
 30884                                  ;***********************************************************************
 30885                                  ; _$P_Chk_Delim;
 30886                                  ;
 30887                                  ; Function: Check if AL is one of delimiter characters.
 30888                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 30889                                  ;	    blanks.
 30890                                  ;
 30891                                  ; Input:    AL = character code
 30892                                  ;	    DS:SI -> Next Character
 30893                                  ;	    ES:DI -> Parameter List
 30894                                  ;
 30895                                  ; Output:   ZF = 1 if one of delimiter characters
 30896                                  ;	    SI points to the next character
 30897                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 30898                                  ;***********************************************************************
 30899                                  
 30900                                  	; 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30901                                  	; MSDOS 6.21 IO.SYS - SYSINIT:1FAEh
 30902                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:2451h) ; (Retro DOS v5.0)
 30903                                  
 30904                                  _$P_Chk_Delim:
 30905 00001C83 53                      	push	bx			;AN000;
 30906 00001C84 51                      	push	cx			;AN000;
 30907 00001C85 2EC606[DA14]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 30908                                  					;AC034; Assume terminated by space
 30909                                  	;and	byte [cs:_$P_Flags20,0DFh
 30910 00001C8B 2E8026[E014]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 30911 00001C91 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 30912 00001C93 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 30913                                  
 30914 00001C95 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 30915 00001C97 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 30916                                  
 30917 00001C99 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 30918 00001C9B 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 30919                                  
 30920                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 30921                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 30922                                  ;        Erdogan Tan - 08/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 30923                                  ;_$P_Chk_Delim00:
 30924                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:246Bh)
 30925                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:1FC8h)
 30926                                  %if 0
 30927                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30928                                  _$P_Chk_Delim00: 			;AN000;
 30929                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 30930                                  	jne	short _$P_Chk_Delim01	;AN000;
 30931                                  
 30932                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 30933                                  	jne	short _$P_Chk_Delim01	;AN000;
 30934                                  
 30935                                  	mov	al,_$P_Space		;AN000;
 30936                                  	inc	si			;AN000; make si point to next character
 30937                                  	cmp	al,al			;AN000; Set ZF
 30938                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 30939                                  %endif
 30940                                  
 30941                                  _$P_Chk_Delim01: 			;AN000;
 30942 00001C9D 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 30943                                  					;AN000; delimiter character specified ?
 30944 00001CA2 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 30945                                  
 30946                                  	;xor	cx,cx			;AN000;
 30947 00001CA4 30ED                    	xor	ch,ch
 30948                                  	;mov	cl,[es:di+3]
 30949 00001CA6 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 30950                                  					;AN000; get length of delimiter list
 30951                                  	;or	cx,cx			;AN000; No extra Delim character ?
 30952                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 30953                                  	; 08/07/2023
 30954 00001CAA E30B                    	jcxz	_$P_Chk_Delim_NZ
 30955                                  
 30956 00001CAC BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 30957                                  _$P_Chk_Delim_Loop:			;AN000;
 30958 00001CAF 43                      	inc	bx			;AN000;
 30959 00001CB0 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 30960 00001CB3 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 30961                                  
 30962 00001CB5 E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 30963                                  
 30964                                  _$P_Chk_Delim_NZ:			;AN000;
 30965                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 30966                                  	; 08/07/2023
 30967                                  	; cx=0 here
 30968 00001CB7 41                      	inc	cx ; cx=1, zf=0
 30969                                  _$P_Chk_Delim_Exit:			;AN000;
 30970                                  _$P_ChkDfin:				;AN000;
 30971 00001CB8 59                      	pop	cx			;AN000;
 30972 00001CB9 5B                      	pop	bx			;AN000;
 30973 00001CBA C3                      	retn				;AN000;
 30974                                  
 30975                                  _$P_Chk_Delim_Exit0:			;AN000;
 30976 00001CBB 2EA2[DA14]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 30977 00001CBF 2EF606[E014]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 30978 00001CC5 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 30979                                  
 30980 00001CC7 2E800E[E014]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 30981                                  					;AC034; flag terminated extra delimiter or comma
 30982                                  _$P_No_Set_Extra:			;AN027;
 30983 00001CCD 38C0                    	cmp	al,al			;AN000; set ZF
 30984 00001CCF EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 30985                                  
 30986                                  ;***********************************************************************
 30987                                  ; _$P_Chk_Switch;
 30988                                  ;
 30989                                  ; Function: Check if AL is the switch character not in first position of
 30990                                  ;	    _$P_STRING_BUF
 30991                                  ;
 30992                                  ; Input:    AL = character code
 30993                                  ;	    BX = current pointer within _$P_String_Buf
 30994                                  ;	    SI =>next char on command line (following the one in AL)
 30995                                  ;
 30996                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 30997                                  ;		 position, and has no chance of being part of a date string,
 30998                                  ;		 i.e. should be treated as a delimiter.
 30999                                  
 31000                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 31001                                  ;		 position, or is a slash but may be part of a date string, i.e.
 31002                                  ;		 should not be treated as a delimiter.
 31003                                  ;
 31004                                  ; Vars:  _$P_Terminator(W)
 31005                                  
 31006                                  ; Use:	 _$P_0099
 31007                                  ;***********************************************************************
 31008                                  
 31009                                  _$P_Chk_Switch:
 31010                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 31011                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 31012                                  	; 08/07/2023
 31013 00001CD1 BD[E914]                	mov	bp,_$P_STRING_BUF
 31014                                  
 31015                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 31016 00001CD4 39EB                    	cmp	bx,bp			;AN000;
 31017 00001CD6 7406                    	je	short _$P_STRUC_L2	;AN000;
 31018                                  
 31019                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 31020 00001CD8 3C2F                    	cmp	al,_$P_Switch		;AN000;
 31021 00001CDA 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 31022                                  
 31023 00001CDC F9                      	stc				;AN020;not in first position and is slash
 31024                                  	;jmp     short _$P_STRUC_L1	;AN000;
 31025                                  	; 12/12/2022
 31026 00001CDD C3                      	retn
 31027                                  
 31028                                  ; 12/12/2022
 31029                                  ;_$P_STRUC_L5:				;AN000;
 31030                                  ;	CLC				;AN020;not a slash
 31031                                  ;;	    .ENDIF			;AN020;
 31032                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 31033                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 31034                                  
 31035                                  _$P_STRUC_L2:				;AN000;
 31036                                  ;	.IF <AL EQ _$P_Switch> THEN	;AN020;
 31037 00001CDE 3C2F                    	cmp     al,_$P_Switch		;AN000;
 31038 00001CE0 7506                    	jne	short _$P_STRUC_L12	;AN000;
 31039                                  
 31040 00001CE2 2E800E[E014]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020 ;AC034;;could be valid switch, first char and is slash
 31041                                  ;	.ENDIF				;AN020;
 31042                                  
 31043                                  	; 12/12/2022
 31044                                  	; cf=0
 31045                                  	;retn
 31046                                  
 31047                                  _$P_STRUC_L5:
 31048                                  	; 12/12/2022
 31049                                  _$P_STRUC_L12:				;AN000;
 31050 00001CE8 F8                      	clc				;AN020;CF=0 indicating first char
 31051                                  ;	.ENDIF				;AN020;
 31052                                  _$P_STRUC_L1:				;AN000;
 31053 00001CE9 C3                      	retn				;AN000;
 31054                                  
 31055                                  ;**************************************************************************
 31056                                  ; _$P_Chk_DBCS:
 31057                                  ;
 31058                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 31059                                  ;
 31060                                  ;  Input:
 31061                                  ;	  AL	= Code to be examineed
 31062                                  ;
 31063                                  ;  Output:
 31064                                  ;	  If CF is on then a lead byte of DBCS
 31065                                  ;
 31066                                  ; Use: INT 21h w/AH=63
 31067                                  ;
 31068                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 31069                                  ;***************************************************************************
 31070                                  
 31071                                  _$P_Chk_DBCS:
 31072 00001CEA 1E                      	push	ds			;AN000;
 31073 00001CEB 56                      	push	si			;AN000;
 31074 00001CEC 53                      	push	bx			;AN000; (tm11)
 31075                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 31076                                  	;jne	short _$P_DBCS00	;AN000;
 31077                                  	; 08/07/2023
 31078 00001CED 2E8B36[DD14]            	mov	si,[cs:_$P_DBCSEV_SEG]
 31079 00001CF2 21F6                    	and	si,si ; 0 ?
 31080 00001CF4 7525                    	jnz	short _$P_DBCS00 ; already set
 31081 00001CF6 50                      	push	ax			;AN000;
 31082 00001CF7 1E                      	push	ds			;AN000; (tm11)
 31083 00001CF8 51                      	push	cx			;AN000;
 31084 00001CF9 52                      	push	dx			;AN000;
 31085 00001CFA 57                      	push	di			;AN000;
 31086 00001CFB 55                      	push	bp			;AN000;
 31087 00001CFC 06                      	push	es			;AN000;
 31088                                  	; si = 0 ; 08/07/2023
 31089                                  	;xor	si,si			;AN000;
 31090 00001CFD 8EDE                    	mov	ds,si ; 0		;AN000;
 31091 00001CFF B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 31092 00001D02 CD21                    	int	21h			;AN000;
 31093                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 31094 00001D04 8CDB                    	mov	bx,ds			;AN000; (tm11)
 31095 00001D06 09DB                    	or	bx,bx			;AN000; (tm11)
 31096 00001D08 07                      	pop	es			;AN000;
 31097 00001D09 5D                      	pop	bp			;AN000;
 31098 00001D0A 5F                      	pop	di			;AN000;
 31099 00001D0B 5A                      	pop	dx			;AN000;
 31100 00001D0C 59                      	pop	cx			;AN000;
 31101 00001D0D 1F                      	pop	ds			;AN000; (tm11)
 31102 00001D0E 58                      	pop	ax			;AN000;
 31103 00001D0F 7424                    	jz	short _$P_NON_DBCS	;AN000;
 31104                                  _$P_DBCS02:				;AN000;
 31105 00001D11 2E8936[DB14]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 31106 00001D16 2E891E[DD14]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 31107                                  _$P_DBCS00:				;AN000;
 31108                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 31109                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 31110                                  	; 08/07/2023
 31111 00001D1B 2EC536[DB14]            	lds	si,[cs:_$P_DBCSEV_OFF]
 31112                                  _$P_DBCS_LOOP:				;AN000;
 31113 00001D20 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 31114 00001D23 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 31115 00001D25 3A04                    	cmp	al,[si] 		;AN000;
 31116 00001D27 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 31117 00001D29 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 31118 00001D2C 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 31119 00001D2E F9                      	stc				;AN000; if yes, indicate DBCS and exit
 31120 00001D2F EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 31121                                  _$P_DBCS01:				;AN000;
 31122 00001D31 46                      	inc	si			;AC035; add '2' to
 31123 00001D32 46                      	inc	si			;AC035;  SI reg
 31124                                  					;AN000; get next vector
 31125 00001D33 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 31126                                  _$P_NON_DBCS:				;AN000;
 31127                                  	; 12/12/2022
 31128                                  	; cf=0
 31129                                  	;clc				;AN000; indicate SBCS
 31130                                  _$P_DBCS_EXIT:				;AN000;
 31131 00001D35 5B                      	pop	bx			;AN000; (tm11)
 31132 00001D36 5E                      	pop	si			;AN000;
 31133 00001D37 1F                      	pop	ds			;AN000;
 31134 00001D38 C3                      	retn				;AN000;
 31135                                  
 31136                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 31137                                  ; ======================================================================
 31138                                  ; 27/03/2019 - Retro DOS v4.0
 31139                                  
 31140                                  ;control block definitions for parser.
 31141                                  ;-----------------------------------------------------------------------
 31142                                  ; buffer = [n | n,m] {/e}
 31143                                  
 31144                                  ; 30/03/2019
 31145                                  
 31146                                  struc p_parms
 31147 00000000 ????                    	resw	1	; dw ?
 31148 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 31149 00000003 ??                      	resb	1	; db 1	; length is 1
 31150 00000004 ??                      	resb 	1	; db ';' ; delimiter
 31151                                  .size:
 31152                                  endstruc
 31153                                  
 31154                                  struc p_pos
 31155 00000000 ????                    	resw	1	; dw ?	; numeric value??
 31156 00000002 ????                    	resw	1	; dw ?	; function
 31157 00000004 ????                    	resw	1	; dw ?	; result value buffer
 31158                                  
 31159                                  ; note: by defining result_val before this structure, we could remove
 31160                                  ;  the "result_val" from every structure invocation
 31161                                  
 31162 00000006 ????                    	resw	1	; dw ?	; value list
 31163 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 31164                                  .size:
 31165                                  endstruc
 31166                                  
 31167                                  struc	p_range
 31168 00000000 ??                      	resb	1	; db 1	; range definition
 31169 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 31170 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 31171 00000003 ????????                	resd	1	; dd ?	; numeric min
 31172 00000007 ????????                	resd	1	; dd ?	; numeric max
 31173                                  .size:
 31174                                  endstruc
 31175                                  
 31176                                  ;-----------------------------------------------------------------------
 31177                                  
 31178                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31179                                  	; (SYSINIT:1F48h)
 31180                                  
 31181                                  	; 08/07/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31182                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2083h
 31183                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:251Dh) ; (Retro DOS v5.0)
 31184                                  
 31185                                  ; buffer = [n | n,m] {/e}
 31186                                  
 31187                                  ;buf_parms p_parms <buf_parmsx>
 31188                                  buf_parms: 
 31189 00001D39 [3E1D]                  	dw	buf_parmsx
 31190 00001D3B 01                      	db	1	; an extra delimiter list
 31191 00001D3C 01                      	db	1	; length is 1
 31192 00001D3D 3B                      	db	';'	; delimiter
 31193                                  
 31194                                  buf_parmsx:
 31195 00001D3E 0102[481D][5C1D]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 31196 00001D44 01                      	db	1			; one switch
 31197 00001D45 [701D]                  	dw	sw_x_ctrl
 31198 00001D47 00                      	db	0			; no keywords
 31199                                  
 31200                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 31201                                  buf_pos1:
 31202 00001D48 0080                    	dw	8000h	; numeric value??
 31203 00001D4A 0000                    	dw	0	; function
 31204 00001D4C [821D]                  	dw	result_val ; result value buffer	
 31205 00001D4E [511D]                  	dw	buf_range_1 ; value list
 31206 00001D50 00                      	db	0  	; no switches/keywords
 31207                                  
 31208                                  ;buf_range_1 p_range <,,,1,99>		; M050
 31209                                  buf_range_1:
 31210 00001D51 01                      	db	1	; range definition
 31211 00001D52 01                      	db	1	; 1 definition of range
 31212 00001D53 01                      	db	1	; item tag for this range
 31213 00001D54 01000000                	dd	1	; numeric min
 31214 00001D58 63000000                	dd	99	; numeric max
 31215                                  
 31216                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 31217                                  buf_pos2:
 31218 00001D5C 0180                    	dw	8001h
 31219 00001D5E 0000                    	dw	0
 31220 00001D60 [821D]                  	dw	result_val	
 31221 00001D62 [651D]                  	dw	buf_range_2
 31222 00001D64 00                      	db	0
 31223                                  
 31224                                  ;buf_range_2 p_range <,,,0,8>
 31225                                  buf_range_2:
 31226 00001D65 01                      	db	1
 31227 00001D66 01                      	db	1
 31228 00001D67 01                      	db	1
 31229 00001D68 00000000                	dd	0
 31230 00001D6C 08000000                	dd	8
 31231                                  
 31232                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 31233                                  sw_x_ctrl:
 31234 00001D70 0000                    	dw	0
 31235 00001D72 0000                    	dw	0
 31236 00001D74 [821D]                  	dw	result_val	
 31237 00001D76 [811D]                  	dw	noval
 31238 00001D78 01                      	db	1	; 1 switch
 31239                                  	
 31240                                  switch_x:
 31241 00001D79 2F5800                  	db	'/X',0		; M016
 31242                                  
 31243                                  p_buffers:
 31244 00001D7C 0000                    	dw	0	; local variables
 31245                                  p_h_buffers:
 31246 00001D7E 0000                    	dw	0
 31247                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31248                                  p_buffer_slash_x:
 31249 00001D80 00                      	db	0 ; 31/03/2019
 31250                                  
 31251                                  ;-- common definitions -------------------------------------------------
 31252                                  
 31253 00001D81 00                      noval:	db	0
 31254                                  
 31255                                  result_val: 	;label	byte
 31256 00001D82 00                      	db	0		; type returned
 31257                                  result_val_itag:
 31258 00001D83 00                      	db	0		; item tag returned
 31259                                  result_val_swoff:
 31260 00001D84 0000                    	dw	0		; es:offset of the switch defined
 31261                                  rv_byte:	;label	byte
 31262 00001D86 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 31263                                  
 31264                                  ;-----------------------------------------------------------------------
 31265                                  
 31266                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31267                                  	; (SYSINIT:1F99h)
 31268                                  
 31269                                  ; break = [ on | off ]
 31270                                  
 31271                                  ;brk_parms p_parms  <brk_parmsx>
 31272                                  brk_parms:
 31273 00001D8A [8F1D]                  	dw	brk_parmsx
 31274 00001D8C 01                      	db	1	; an extra delimiter list
 31275 00001D8D 01                      	db	1	; length is 1
 31276 00001D8E 3B                      	db	';'	; delimiter
 31277                                  
 31278                                  brk_parmsx:
 31279 00001D8F 0101[951D]              	dw	101h,brk_pos	; min,max = 1 positional
 31280 00001D93 00                      	db	0		; no switches
 31281 00001D94 00                      	db	0		; no keywords
 31282                                  
 31283                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 31284                                  brk_pos:
 31285 00001D95 0020                    	dw	2000h
 31286 00001D97 0000                    	dw	0
 31287 00001D99 [821D]                  	dw	result_val	
 31288 00001D9B [9E1D]                  	dw	on_off_string
 31289 00001D9D 00                      	db	0
 31290                                  
 31291                                  on_off_string:	;label	byte
 31292 00001D9E 03                      	db	3		; signals that there is a string choice
 31293 00001D9F 00                      	db	0		; no range definition
 31294 00001DA0 00                      	db	0		; no numeric values choice
 31295 00001DA1 02                      	db	2		; 2 strings for choice
 31296 00001DA2 01                      	db	1		; the 1st string tag
 31297 00001DA3 [A81D]                  	dw	on_string
 31298 00001DA5 02                      	db	2		; the 2nd string tag
 31299 00001DA6 [AB1D]                  	dw	off_string
 31300                                  
 31301                                  on_string:
 31302 00001DA8 4F4E00                  	db	"ON",0
 31303                                  off_string:
 31304 00001DAB 4F464600                	db	"OFF",0
 31305                                  
 31306                                  p_ctrl_break:
 31307 00001DAF 00                      	db	0	; local variable
 31308                                  
 31309                                  ;-----------------------------------------------------------------------
 31310                                  
 31311                                  	; 27/10/2022
 31312                                  
 31313                                  ; country = n {m {path}}
 31314                                  ; or
 31315                                  ; country = n,,path
 31316                                  
 31317                                  ;cntry_parms p_parms <cntry_parmsx>
 31318                                  cntry_parms:
 31319 00001DB0 [B51D]                  	dw	cntry_parmsx
 31320 00001DB2 01                      	db	1
 31321 00001DB3 01                      	db	1
 31322 00001DB4 3B                      	db	';'
 31323                                  	
 31324                                  cntry_parmsx:
 31325 00001DB5 0103[BF1D][D31D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 31325 00001DBB [DC1D]             
 31326 00001DBD 00                      	db	0		; no switches
 31327 00001DBE 00                      	db	0		; no keywords
 31328                                  
 31329                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 31330                                  cntry_pos1:
 31331 00001DBF 0080                    	dw	8000h
 31332 00001DC1 0000                    	dw	0
 31333 00001DC3 [821D]                  	dw	result_val	
 31334 00001DC5 [C81D]                  	dw	cc_range
 31335 00001DC7 00                      	db	0
 31336                                  
 31337                                  ;cc_range p_range <,,,1,999>
 31338                                  cc_range:
 31339 00001DC8 01                      	db	1
 31340 00001DC9 01                      	db	1
 31341 00001DCA 01                      	db	1
 31342 00001DCB 01000000                	dd	1
 31343 00001DCF E7030000                	dd	999
 31344                                  
 31345                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 31346                                  cntry_pos2:
 31347 00001DD3 0180                    	dw	8001h
 31348 00001DD5 0000                    	dw	0
 31349 00001DD7 [821D]                  	dw	result_val	
 31350 00001DD9 [C81D]                  	dw	cc_range
 31351 00001DDB 00                      	db	0
 31352                                  
 31353                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 31354                                  cntry_pos3:
 31355 00001DDC 0102                    	dw	201h
 31356 00001DDE 0000                    	dw	0
 31357 00001DE0 [821D]                  	dw	result_val	
 31358 00001DE2 [811D]                  	dw	noval
 31359 00001DE4 00                      	db	0	
 31360                                  
 31361                                  p_cntry_code:
 31362 00001DE5 0000                    	dw	0	; local variable
 31363                                  p_code_page:
 31364 00001DE7 0000                    	dw	0	; local variable
 31365                                  
 31366                                  ;-----------------------------------------------------------------------
 31367                                  
 31368                                  	; 27/10/2022
 31369                                  
 31370                                  ; files = n
 31371                                  
 31372                                  ;files_parms p_parms <files_parmsx>
 31373                                  files_parms:
 31374 00001DE9 [EE1D]                  	dw	files_parmsx
 31375 00001DEB 01                      	db	1
 31376 00001DEC 01                      	db	1
 31377 00001DED 3B                      	db	';'
 31378                                  
 31379                                  files_parmsx:
 31380 00001DEE 0101[F41D]              	dw	101h,files_pos	; min,max 1 positional
 31381 00001DF2 00                      	db	0		; no switches
 31382 00001DF3 00                      	db	0		; no keywords
 31383                                  
 31384                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 31385                                  files_pos:
 31386 00001DF4 0080                    	dw	8000h
 31387 00001DF6 0000                    	dw	0
 31388 00001DF8 [821D]                  	dw	result_val	
 31389 00001DFA [FD1D]                  	dw	files_range
 31390 00001DFC 00                      	db	0
 31391                                  
 31392                                  ;files_range p_range <,,,8,255>
 31393                                  files_range:
 31394 00001DFD 01                      	db	1
 31395 00001DFE 01                      	db	1
 31396 00001DFF 01                      	db	1
 31397 00001E00 08000000                	dd	8
 31398 00001E04 FF000000                	dd	255
 31399                                  
 31400                                  p_files:
 31401 00001E08 00                      	db	0		; local variable
 31402                                  
 31403                                  ;-----------------------------------------------------------------------
 31404                                  
 31405                                  	; 27/10/2022
 31406                                  
 31407                                  ; fcbs = n,m
 31408                                  
 31409                                  ;fcbs_parms p_parms <fcbs_parmsx>
 31410                                  fcbs_parms:
 31411 00001E09 [0E1E]                  	dw	fcbs_parmsx
 31412 00001E0B 01                      	db	1
 31413 00001E0C 01                      	db	1
 31414 00001E0D 3B                      	db	';'
 31415                                  
 31416                                  fcbs_parmsx:
 31417 00001E0E 0102[161E][2A1E]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 31418 00001E14 00                      	db	0		; no switches
 31419 00001E15 00                      	db	0		; no keywords
 31420                                  
 31421                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 31422                                  fcbs_pos_1:
 31423 00001E16 0080                    	dw	8000h
 31424 00001E18 0000                    	dw	0
 31425 00001E1A [821D]                  	dw	result_val	
 31426 00001E1C [1F1E]                  	dw	fcbs_range
 31427 00001E1E 00                      	db	0
 31428                                  
 31429                                  ;fcbs_range p_range <,,,1,255>
 31430                                  fcbs_range:
 31431 00001E1F 01                      	db	1
 31432 00001E20 01                      	db	1
 31433 00001E21 01                      	db	1
 31434 00001E22 01000000                	dd	1
 31435 00001E26 FF000000                	dd	255
 31436                                  
 31437                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 31438                                  fcbs_pos_2:
 31439 00001E2A 0080                    	dw	8000h
 31440 00001E2C 0000                    	dw	0
 31441 00001E2E [821D]                  	dw	result_val	
 31442 00001E30 [331E]                  	dw	fcbs_keep_range
 31443 00001E32 00                      	db	0
 31444                                  
 31445                                  ;fcbs_keep_range p_range <,,,0,255>
 31446                                  fcbs_keep_range:
 31447 00001E33 01                      	db	1
 31448 00001E34 01                      	db	1
 31449 00001E35 01                      	db	1
 31450 00001E36 00000000                	dd	0
 31451 00001E3A FF000000                	dd	255
 31452                                  
 31453 00001E3E 00                      p_fcbs:	db	0		; local variable
 31454 00001E3F 00                      p_keep:	db	0		; local variable
 31455                                  
 31456                                  ;-----------------------------------------------------------------------
 31457                                  
 31458                                  	; 27/10/2022
 31459                                  
 31460                                  ; lastdrive = x
 31461                                  
 31462                                  ;ldrv_parms p_parms <ldrv_parmsx>
 31463                                  ldrv_parms:
 31464 00001E40 [451E]                  	dw	ldrv_parmsx
 31465 00001E42 01                      	db	1
 31466 00001E43 01                      	db	1
 31467 00001E44 3B                      	db	';'
 31468                                  
 31469                                  ldrv_parmsx:
 31470 00001E45 0101[4B1E]              	dw	101h,ldrv_pos	; min,max = 1 positional
 31471 00001E49 00                      	db	0		; no switches
 31472 00001E4A 00                      	db	0		; no keywords
 31473                                  
 31474                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 31475                                  ldrv_pos:				    ; remove colon at end
 31476 00001E4B 1001                    	dw	110h
 31477 00001E4D 1000                    	dw	10h
 31478 00001E4F [821D]                  	dw	result_val	
 31479 00001E51 [811D]                  	dw	noval
 31480 00001E53 00                      	db	0
 31481                                  	
 31482 00001E54 00                      p_ldrv:	db	0		; local variable
 31483                                  
 31484                                  ;-----------------------------------------------------------------------
 31485                                  
 31486                                  	; 27/10/2022
 31487                                  
 31488                                  ; stacks = n,m
 31489                                  
 31490                                  ;stks_parms p_parms <stks_parmsx>
 31491                                  stks_parms:
 31492 00001E55 [5A1E]                  	dw	stks_parmsx
 31493 00001E57 01                      	db	1
 31494 00001E58 01                      	db	1
 31495 00001E59 3B                      	db	';'
 31496                                  
 31497                                  stks_parmsx:
 31498 00001E5A 0202[621E][761E]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 31499 00001E60 00                      	db	0		; no switches
 31500 00001E61 00                      	db	0		; no keywords
 31501                                  
 31502                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 31503                                  stks_pos_1:
 31504 00001E62 0080                    	dw	8000h
 31505 00001E64 0000                    	dw	0
 31506 00001E66 [821D]                  	dw	result_val	
 31507 00001E68 [6B1E]                  	dw	stks_range
 31508 00001E6A 00                      	db	0
 31509                                  
 31510                                  ;stks_range p_range <,,,0,64>
 31511                                  stks_range:
 31512 00001E6B 01                      	db	1
 31513 00001E6C 01                      	db	1
 31514 00001E6D 01                      	db	1
 31515 00001E6E 00000000                	dd	0
 31516 00001E72 40000000                	dd	64
 31517                                  
 31518                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 31519                                  stks_pos_2:
 31520 00001E76 0080                    	dw	8000h
 31521 00001E78 0000                    	dw	0
 31522 00001E7A [821D]                  	dw	result_val	
 31523 00001E7C [7F1E]                  	dw	stk_size_range
 31524 00001E7E 00                      	db	0
 31525                                  
 31526                                  ;stk_size_range p_range <,,,0,512>
 31527                                  stk_size_range:
 31528 00001E7F 01                      	db	1
 31529 00001E80 01                      	db	1
 31530 00001E81 01                      	db	1
 31531 00001E82 00000000                	dd	0
 31532 00001E86 00020000                	dd	512	
 31533                                  
 31534                                  p_stack_count:
 31535 00001E8A 0000                    	dw	0	; local variable
 31536                                  p_stack_size:
 31537 00001E8C 0000                    	dw	0	; local variable
 31538                                  
 31539                                  ;-----------------------------------------------------------------------
 31540                                  
 31541                                  	; 27/10/2022
 31542                                  
 31543                                  ; multitrack = [ on | off ]
 31544                                  
 31545                                  ;mtrk_parms p_parms <mtrk_parmsx>
 31546                                  mtrk_parms:
 31547 00001E8E [931E]                  	dw	mtrk_parmsx
 31548 00001E90 01                      	db	1
 31549 00001E91 01                      	db	1
 31550 00001E92 3B                      	db	';'
 31551                                  
 31552                                  mtrk_parmsx:
 31553 00001E93 0101[991E]              	dw	101h,mtrk_pos	; min,max = 1 positional
 31554 00001E97 00                      	db	0		; no switches
 31555 00001E98 00                      	db	0		; no keywords
 31556                                  
 31557                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 31558                                  mtrk_pos:
 31559 00001E99 0020                    	dw	2000h
 31560 00001E9B 0000                    	dw	0
 31561 00001E9D [821D]                  	dw	result_val	
 31562 00001E9F [9E1D]                  	dw	on_off_string
 31563 00001EA1 00                      	db	0
 31564                                  
 31565 00001EA2 00                      p_mtrk:	db	0		; local variable
 31566                                  
 31567                                  ;-----------------------------------------------------------------------
 31568                                  
 31569                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31570                                  	; (SYSINIT:20B2h)
 31571                                  
 31572                                  ; switches=/k
 31573                                  
 31574                                  ;swit_parms p_parms <swit_parmsx>
 31575                                  swit_parms:
 31576 00001EA3 [A81E]                  	dw	swit_parmsx
 31577 00001EA5 01                      	db	1
 31578 00001EA6 01                      	db	1
 31579 00001EA7 3B                      	db	';'
 31580                                  
 31581                                  swit_parmsx:
 31582 00001EA8 0000                    	dw	0		; no positionals
 31583                                  	; 08/07/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS, SYSINIT)
 31584 00001EAA 05                      	db	5               ; # of switches
 31585                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 31586                                  	;db	3
 31587 00001EAB [B61E]                  	dw	swit_k_ctrl	; /k control
 31588                                  	; 01/01/2023 - Retro DOS v4.2 ; *
 31589 00001EAD [C21E]                  	dw	swit_n_ctrl ; * ; /n control (for MULTI_CONFIG only)
 31590 00001EAF [CE1E]                  	dw	swit_f_ctrl ; * ; /f control (for MULTI_CONFIG only)
 31591 00001EB1 [DA1E]                  	dw	swit_t_ctrl     ; /t control
 31592 00001EB3 [E61E]                  	dw	swit_w_ctrl     ; /w control
 31593 00001EB5 00                      	db	0		; no keywords
 31594                                  
 31595                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31596                                  swit_k_ctrl:
 31597 00001EB6 00000000[821D]-         	dw	0,0,result_val,noval
 31597 00001EBC [811D]             
 31598 00001EBE 01                      	db	1
 31599 00001EBF 2F4B00                  swit_k:	db	'/K',0
 31600                                  
 31601                                  ; 01/01/2023 - Retro DOS v4.2 (MSDOS 6.21 IO.SYS)
 31602                                  ; (SYSINIT:220Ch) ; *
 31603                                  
 31604                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 31605                                  ;
 31606                                  ;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31607                                  swit_n_ctrl: ; *
 31608 00001EC2 00000000[821D]-         	dw	0,0,result_val,noval
 31608 00001EC8 [811D]             
 31609 00001ECA 01                      	db	1
 31610 00001ECB 2F4E00                  swit_n: db	'/N',0
 31611                                  
 31612                                  ;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 31613                                  swit_f_ctrl: ; *
 31614 00001ECE 00000000[821D]-         	dw	0,0,result_val,noval
 31614 00001ED4 [811D]             
 31615 00001ED6 01                      	db	1
 31616 00001ED7 2F4600                  swit_f: db 	'/F',0
 31617                                  
 31618                                  	; 27/10/2022
 31619                                  
 31620                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 31621                                  swit_t_ctrl:
 31622 00001EDA 00000000[821D]-         	dw	0,0,result_val,noval
 31622 00001EE0 [811D]             
 31623 00001EE2 01                      	db	1
 31624 00001EE3 2F5400                  swit_t:	db	'/T',0			   ;				M059
 31625                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 31626                                  swit_w_ctrl:
 31627 00001EE6 00000000[821D]-         	dw	0,0,result_val,noval
 31627 00001EEC [811D]             
 31628 00001EEE 01                      	db	1
 31629 00001EEF 2F5700                  swit_w:	db	'/W',0			   ;				M063
 31630                                  
 31631                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 31632                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 31633                                  ;   in the above table to prevent the parsing code from complaining about them
 31634                                  
 31635 00001EF2 00                      p_swit_k:	db     0	; local variable
 31636 00001EF3 00                      p_swit_t:	db     0	; local variable			M059
 31637 00001EF4 00                      p_swit_w:	db     0	; local variable			M063
 31638                                  
 31639                                  ;-----------------------------------------------------------------------
 31640                                  
 31641                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31642                                  	; (SYSINIT:20E8h)
 31643                                  
 31644                                  ; DOS = [ high | low ]
 31645                                  
 31646                                  ;dos_parms p_parms  <dos_parmsx>
 31647                                  dos_parms:
 31648 00001EF5 [FA1E]                  	dw	dos_parmsx
 31649 00001EF7 01                      	db	1
 31650 00001EF8 01                      	db	1
 31651 00001EF9 3B                      	db	';'
 31652                                  dos_parmsx:
 31653 00001EFA 01                      	db	1		; min parameters
 31654 00001EFB 02                      	db	2		; max parameters
 31655 00001EFC [021F]                  	dw	dos_pos		; 
 31656 00001EFE [021F]                  	dw	dos_pos		; 
 31657 00001F00 00                      	db	0		; no switches
 31658 00001F01 00                      	db	0		; no keywords
 31659                                  
 31660                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 31661                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 31662                                  dos_pos:
 31663 00001F02 00200000[821D]-         	dw	2000h,0,result_val,dos_strings
 31663 00001F08 [141F]             
 31664 00001F0A 00                      	db	0
 31665 00001F0B 00200000[821D]-         	dw	2000h,0,result_val,dos_strings
 31665 00001F11 [141F]             
 31666 00001F13 00                      	db	0	
 31667                                  
 31668                                  dos_strings:	;label	byte
 31669 00001F14 03                      	db	3		; signals that there is a string choice
 31670 00001F15 00                      	db	0		; no range definition
 31671 00001F16 00                      	db	0		; no numeric values choice
 31672 00001F17 04                      	db	4		; 4 strings for choice
 31673 00001F18 01                      	db	1		; the 1st string tag
 31674 00001F19 [241F]                  	dw	hi_string
 31675 00001F1B 02                      	db	2		; the 2nd string tag
 31676 00001F1C [291F]                  	dw	lo_string
 31677 00001F1E 03                      	db	3
 31678 00001F1F [2D1F]                  	dw	umb_string
 31679 00001F21 04                      	db	4
 31680 00001F22 [311F]                  	dw	noumb_string
 31681                                  
 31682 00001F24 4849474800              hi_string:	db	"HIGH",0
 31683 00001F29 4C4F5700                lo_string:	db	"LOW",0
 31684 00001F2D 554D4200                umb_string:	db	"UMB",0
 31685 00001F31 4E4F554D4200            noumb_string:	db	"NOUMB",0
 31686                                  
 31687 00001F37 00                      p_dos_hi:	db	0	; local variable
 31688                                  				; BUGBUG : I dont know whether PARSER uses
 31689                                  				;          this variable or not
 31690                                  
 31691                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 31692                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31693                                  ;%if 0
 31694                                  
 31695                                  ;****************************************************************** RICHID ****
 31696                                  
 31697                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 31698                                  
 31699                                  ; 30/03/2019 - Retro DOS v4.0
 31700                                  ;------------------------------------------------------------------------------
 31701                                  
 31702                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 31703                                  ;
 31704                                  ;   Date:     May 14, 1992
 31705                                  ;
 31706                                  ;******************************************************************************
 31707                                  ;
 31708                                  ;   Modification log:
 31709                                  ;
 31710                                  ;     DATE    WHO      DESCRIPTION
 31711                                  ;   --------  -------  --------------------------------------------------------
 31712                                  ;   05/14/92  t-richj  Original
 31713                                  ;   06/21/92  t-richj  Final revisions before check-in
 31714                                  ;
 31715                                  ;******************************************************************************
 31716                                  ;
 31717                                  ; There are two primary definitions which need to be made, selectively, before
 31718                                  ; this include file should be used.  These are:
 31719                                  ;    HV_Extern - If this has been defined, variables for this module will be
 31720                                  ;                declared as external.  Otherwise, variables will be declared
 31721                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 31722                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 31723                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 31724                                  ;                (as only one module, sysconf.asm, includes this file).
 31725                                  ;    HV_LoadHigh - This should be defined when this module is going into
 31726                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 31727                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 31728                                  ;
 31729                                  ;******************************************************************************
 31730                                  
 31731                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 31732                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 31733                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 31734                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 31735                                  ; space problem (it's just such a nice round number, eh?).
 31736                                  
 31737                                  MAXUMB	equ	16
 31738                                  
 31739                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 31740                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 31741                                  
 31742                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 31743                                  SystemPSPOwner	equ	8
 31744                                  ;JapanPSPOwner	equ	9
 31745                                  
 31746                                  ; for LoadHigh and DeviceHigh:
 31747                                  ;
 31748                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 31749                                  ;	          UnHideUMBs().
 31750                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 31751                                  ;	           line.
 31752                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 31753                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 31754                                  ;	          given a command-line like "/L:3,500;4"
 31755                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 31756                                  ;	          matching its index number was specified on the command-line;
 31757                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 31758                                  ;	          will be set to 1.  All others will be set to 0.
 31759                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 31760                                  ;	          specified by the user for a UMB (in the above example, all
 31761                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 31762                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 31763                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 31764                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 31765                                  ;	           for details).
 31766                                  
 31767 00001F38 00                      fInHigh:  db	0
 31768 00001F39 00                      fUmbTiny: db	0
 31769 00001F3A 0000                    SegLoad:  dw	0
 31770 00001F3C 00                      UmbLoad:  db	0
 31771 00001F3D 00<rep 10h>             UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 31772 00001F4D 0000<rep 10h>           UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 31773 00001F6D 00                      fm_umb:   db	0
 31774 00001F6E 00                      fm_strat: db	0
 31775 00001F6F 00                      fm_argc:  db	0	
 31776                                  
 31777                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 31778                                  ; UmbLoad is set to the UMB number given.
 31779                                  
 31780                                  UNSPECIFIED	equ	-1
 31781                                  
 31782                                  ;%endif ; 27/10/2022
 31783                                  
 31784                                  ;****************************************************************** RICHID ****
 31785                                  
 31786                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 31787                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 31788                                  
 31789                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31790                                  ; (SYSINIT:212Bh)	
 31791                                  
 31792                                  		;public	DevEntry
 31793                                  
 31794 00001F70 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 31795 00001F72 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 31796 00001F74 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 31797 00001F76 00000000                DevEntry:	dd	0	; Entry point to the device driver
 31798 00001F7A 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 31799                                  ; 30/12/2022
 31800                                  ; 27/10/2022 
 31801 00001F7E 00                      ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 31802                                  ;
 31803 00001F7F 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 31804 00001F80 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 31805 00001F82 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 31806 00001F84 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 31807                                  ;
 31808 00001F86 00000000                DevXMSAddr:	dd	0
 31809                                  ;
 31810 00001F8A 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 31811 00001F8C 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 31812                                  ;
 31813 00001F8E 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 31814                                  				;  is being loaded into UMB
 31815 00001F8F 0000                    DevSizeOption:	dw	0	; SIZE= option
 31816                                  ;
 31817 00001F91 00                      Int12Lied:	db	0	; did we trap int 12 ?
 31818 00001F92 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 31819 00001F94 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 31820                                  ;
 31821 00001F9C 00                      FirstUMBLinked:	db	0
 31822 00001F9D 0000                    DevDOSData:	dw	0	; segment of DOS Data
 31823 00001F9F 00000000                DevCmdLine:	dd	0	; Current Command line
 31824 00001FA3 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 31825                                  				; to use the file name in the command line
 31826                                  ;
 31827                                  ;	ifdef	dblspace_hooks
 31828                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 31829                                  ;	endif
 31830                                  
 31831                                  ; ===========================================================================
 31832                                  
 31833                                  ; 31/03/2019 - Retro DOS v4.0
 31834                                  
 31835                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31836                                  ; (SYSINIT:215Eh)
 31837                                  
 31838                                  ;----------------------------------------------------------------------------
 31839                                  ;
 31840                                  ; procedure : doconf
 31841                                  ;
 31842                                  ;             Config file is parsed initially with this routine. For the
 31843                                  ;             Subsequent passes 'multi_pass' entry is used .
 31844                                  ;
 31845                                  ;----------------------------------------------------------------------------
 31846                                  
 31847                                  	; 27/10/2022
 31848                                  doconf:
 31849 00001FA4 0E                      	push	cs
 31850 00001FA5 1F                      	pop	ds
 31851                                  
 31852 00001FA6 B80037                  	mov	ax,3700h
 31853                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 31854 00001FA9 CD21                    	int	21h
 31855 00001FAB 8816[5246]              	mov	[command_line+1],dl	; set in default command line
 31856                                  
 31857                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21  IO.SYS)
 31858                                  ; 27/10/2022
 31859                                  ;;ifdef	MULTI_CONFIG
 31860                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 31861 00001FAF 8816[5046]              	mov	[def_swchr],dl ; 31/03/2019 
 31862                                  ;;endif	;MULTI_CONFIG
 31863                                  
 31864 00001FB3 BA[6745]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 31865 00001FB6 B8003D                  	mov	ax,3D00h
 31866                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 31867 00001FB9 F9                      	stc				;in case of int 24
 31868 00001FBA CD21                    	int	21h			;function request
 31869 00001FBC 7309                    	jnc	short noprob		; brif opened okay
 31870                                  
 31871                                  ; 31/12/2022
 31872                                  ; 27/10/2022
 31873                                  ;;ifdef	MULTI_CONFIG
 31874 00001FBE E8F918                  	call	kbd_read		; we still want to give the guy
 31875                                  ;					; a chance to select clean boot!
 31876                                  ;;endif					; (ie, no autoexec.bat processing)
 31877 00001FC1 C606[CD02]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 31878 00001FC6 C3                      	retn
 31879                                  noprob: 				;get file size (note < 64k!!)
 31880 00001FC7 89C3                    	mov	bx,ax  ; File handle
 31881 00001FC9 31C9                    	xor	cx,cx			; 0
 31882 00001FCB 31D2                    	xor	dx,dx			; 0
 31883                                  	;mov	ax,4202h
 31884 00001FCD B80242                  	mov	ax,(LSEEK<<8)|2
 31885 00001FD0 CD21                    	int	21h
 31886 00001FD2 A3[5603]                	mov	[count],ax		; dx:ax = file size ; 08/09/2023
 31887                                  					; 08/09/2023 - Erdogan Tan - Note:
 31888 00001FD5 31D2                    	xor	dx,dx			; dx already must be 0 here ; 08/09/2023
 31889                                  					; I am not removing 'xor dx,dx' here
 31890                                  					; for MSDOS compatibility.
 31891                                  					; ((Also PCDOS 7.1 has 'xor dx,dx' here))
 31892                                  					; (Error will be same if CONGIG.SYS file
 31893                                  					;  size > 64KB) 
 31894                                  	;mov	ax,4200h
 31895 00001FD7 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 31896 00001FDA CD21                    	int	21h
 31897                                  
 31898                                  	; 31/12/2022 - Retro DOS v4.2 
 31899 00001FDC 8B16[A502]              	mov	dx,[ALLOCLIM]		;use current alloclim value
 31900                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31901                                  	;mov	dx,[top_of_cdss] 
 31902                                  
 31903 00001FE0 A1[5603]                	mov	ax,[count]
 31904 00001FE3 A3[D002]                	mov	[config_size],ax	;save the size of config.sys file.
 31905 00001FE6 E871F1                  	call	ParaRound
 31906 00001FE9 29C2                    	sub	dx,ax
 31907                                  
 31908                                  ; 31/12/2022
 31909                                  ; 27/10/2022
 31910                                  ;ifdef	MULTI_CONFIG
 31911                                  ;
 31912                                  ;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 31913                                  ;  CONFIG.SYS image, and later for building the initial environment) need
 31914                                  ;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 31915                                  ;  we (may) add a variable to the environment that does not explicity appear
 31916                                  ;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 31917                                  ;  The default setting for CONFIG cannot result in more than 1 paragraph
 31918                                  ;  of extra space, so here we account for it (the worst case of course is
 31919                                  ;  when CONFIG.SYS is some very small size, like 0 -JTP)
 31920                                  ;
 31921 00001FEB 4A                      	dec	dx                      ;reserve 1 additional paragraph
 31922 00001FEC 8916[C514]              	mov	[config_wrkseg],dx      ;this is the segment to be used for
 31923 00001FF0 29C2                    	sub	dx,ax                   ;rebuilding the config.sys memory image
 31924                                  ;;endif	;MULTI_CONFIG
 31925                                  
 31926 00001FF2 83EA11                  	sub	dx,11h			;room for header
 31927                                  	
 31928                                  	; 31/12/2022
 31929 00001FF5 8916[A502]              	mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 31930 00001FF9 8916[A302]              	mov	[CONFBOT],dx
 31931                                  	
 31932                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31933                                  	;mov	[top_of_cdss],dx
 31934                                  	;call    TempCDS 
 31935                                  	; 31/12/2022
 31936                                  	; 11/12/2022
 31937                                  	; ds <> cs 
 31938                                  	;mov	dx,[cs:top_of_cdss]
 31939                                  
 31940                                  	; 08/09/2023
 31941                                  	; ds = cs
 31942 00001FFD 8B0E[5603]              	mov	cx,[count]
 31943                                  	
 31944 00002001 8EDA                    	mov	ds,dx
 31945 00002003 8EC2                    	mov	es,dx
 31946                                  
 31947 00002005 31D2                    	xor	dx,dx
 31948                                  	; 08/09/2023
 31949                                  	;mov	cx,[cs:count]
 31950 00002007 B43F                    	mov	ah,3Fh
 31951                                  	;mov	ah,READ  ; 3Fh
 31952 00002009 F9                      	stc				;in case of int 24
 31953 0000200A CD21                    	int	21h			;function request
 31954 0000200C 9C                      	pushf
 31955                                  
 31956                                  ; find the eof mark in the file. if present,then trim length.
 31957                                  
 31958 0000200D 50                      	push	ax
 31959 0000200E 57                      	push	di
 31960 0000200F 51                      	push	cx
 31961 00002010 B01A                    	mov	al,1Ah			; eof mark
 31962 00002012 89D7                    	mov	di,dx			; point to buffer
 31963 00002014 E305                    	jcxz	puteol			; no chars
 31964 00002016 F2AE                    	repnz	scasb			; find end
 31965 00002018 7501                    	jnz	short puteol		; none found and count exhausted
 31966                                  
 31967                                  ; we found a 1a. back up
 31968                                  
 31969 0000201A 4F                      	dec	di			; backup past 1Ah
 31970                                  
 31971                                  ;  just for the halibut, stick in an extra eol
 31972                                  
 31973                                  puteol:
 31974 0000201B B00D                    	mov	al,cr ; 0Dh
 31975 0000201D AA                      	stosb
 31976 0000201E B00A                    	mov	al,lf  ;0Ah
 31977 00002020 AA                      	stosb
 31978 00002021 29D7                    	sub	di,dx			; difference moved
 31979                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31980                                  	;mov	[cs:count],di		; new count
 31981                                  
 31982                                  	; 11/12/2022	
 31983                                  	; 31/03/2019 - Retro DOS v4.0
 31984 00002023 0E                      	push	cs
 31985 00002024 1F                      	pop	ds
 31986                                  
 31987 00002025 893E[5603]              	mov	[count],di		; new count
 31988                                  
 31989 00002029 59                      	pop	cx
 31990 0000202A 5F                      	pop	di
 31991 0000202B 58                      	pop	ax
 31992                                  
 31993                                  	; 11/12/2022
 31994                                  	; 27/10/2022
 31995                                  	;push	cs
 31996                                  	;pop	ds
 31997                                  
 31998 0000202C 50                      	push	ax
 31999                                  	;mov	ah,CLOSE
 32000 0000202D B43E                    	mov	ah,3Eh
 32001 0000202F CD21                    	int	21h
 32002 00002031 58                      	pop	ax
 32003 00002032 9D                      	popf
 32004 00002033 7204                    	jc	short conferr 		;if not we've got a problem
 32005 00002035 39C1                    	cmp	cx,ax
 32006 00002037 742D                    	jz	short getcom		;couldn't read the file
 32007                                  conferr:
 32008 00002039 BA[6745]                	mov	dx,config		;want to print config error
 32009 0000203C E87E24                  	call	badfil
 32010                                  ;endconv:	; 01/01/2023
 32011 0000203F C3                      	retn
 32012                                  
 32013                                  ;----------------------------------------------------------------------------
 32014                                  ;
 32015                                  ; entry : multi_pass
 32016                                  ;
 32017                                  ;             called to execute device=,install= commands
 32018                                  ;
 32019                                  ;----------------------------------------------------------------------------
 32020                                  
 32021                                  	; 27/10/2022
 32022                                  multi_pass:
 32023 00002040 0E                      	push	cs
 32024 00002041 1F                      	pop	ds
 32025                                  
 32026 00002042 803E[CD02]0A            	cmp	byte [multi_pass_id],10
 32027                                  ;jae_endconv:
 32028 00002047 731C                    	jae	short endconv 		; do nothing. just return.
 32029                                  
 32030                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32031 00002049 FF36[A302]              	push	word [CONFBOT]
 32032                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32033                                  	;push	word [top_of_cdss]
 32034 0000204D 07                      	pop	es			; es -> confbot
 32035                                  
 32036 0000204E 8B36[5803]              	mov	si,[org_count]
 32037 00002052 8936[5603]              	mov	[count],si		; set count
 32038 00002056 31F6                    	xor	si,si ; 0
 32039 00002058 8936[5A03]                      mov     [chrptr],si		; reset chrptr
 32040 0000205C 8936[AF02]                      mov     [linecount],si		; reset linecount
 32041                                  
 32042 00002060 E8E121                  	call	getchr
 32043 00002063 EB07                    	jmp	short conflp
 32044                                  
 32045                                  	; 01/01/2023
 32046                                  endconv:
 32047 00002065 C3                      	retn	
 32048                                  
 32049                                  getcom:
 32050                                  	; 03/01/2023
 32051                                  	; ds = cs
 32052 00002066 E81816                          call    organize                ; organize the file
 32053 00002069 E8D821                  	call	getchr
 32054                                  conflp: 
 32055 0000206C 72F7                    	jc	short endconv
 32056                                  
 32057 0000206E FF06[AF02]                      inc     word [linecount]	; increase linecount
 32058                                  
 32059                                  	; 08/09/2023
 32060 00002072 30E4                    	xor	ah,ah ; 0
 32061                                  	;mov	byte [multdeviceflag],0	; reset multdeviceflag.
 32062                                  	;mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 32063 00002074 8826[C914]              	mov	[multdeviceflag],ah ; 0
 32064 00002078 8826[CC14]              	mov	[setdevmarkflag],ah ; 0
 32065                                  
 32066 0000207C 3C0A                    	cmp	al,lf			; linefeed?
 32067 0000207E 7448                    	je	short blank_line	;  then ignore this line.
 32068                                  
 32069                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32070                                  ; (SYSINIT:23CCh)
 32071                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32072                                  ;%if 0
 32073                                  
 32074                                  ;ifdef	MULTI_CONFIG
 32075                                  
 32076                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 32077                                  ;   number immediately following it....
 32078                                  
 32079 00002080 A2[C714]                        mov     [config_cmd],al         ; save original command code
 32080                                  	;and	al,NOT CONFIG_OPTION_QUERY
 32081 00002083 247F                    	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 32082                                  
 32083                                  	; 08/09/2023
 32084 00002085 3826[C814]              	cmp	[config_multi],ah ; 0
 32085                                  	;cmp	byte [config_multi],0	; is this a multi-config config.sys?
 32086 00002089 7427                            je      short not_final		; no, line number is not embedded
 32087                                  
 32088 0000208B 50                              push    ax                      ;
 32089 0000208C E8B521                          call    getchr                  ; ignore end-of-image errors,
 32090 0000208F 88C4                            mov     ah,al                   ; because if there's an error
 32091 00002091 E8B021                          call    getchr                  ; fetching the line number that's
 32092 00002094 86C4                            xchg    al,ah                   ; supposed to be there, the next
 32093 00002096 A3[AF02]                        mov     [linecount],ax          ; getchr call will get the same error
 32094 00002099 58                              pop     ax
 32095                                  ;
 32096                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 32097                                  ;   which to obtain its original program name, it grovels through all of
 32098                                  ;   memory to find the filename that was used to exec it; it wants to find
 32099                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 32100                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 32101                                  ;   immediately before the filename, but since we are now storing line # info
 32102                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 32103                                  ;   spot.
 32104                                  ;
 32105                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 32106                                  ;   over the line number info, since we no longer need that info anyway. This
 32107                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 32108                                  ;   retrieved.
 32109                                  ;
 32110 0000209A 803E[CD02]02                    cmp	byte [multi_pass_id],2	; final pass?
 32111 0000209F 7211                            jb	short not_final		; no
 32112                                          ;test	word [install_flag],have_install_cmd
 32113 000020A1 F606[CE02]01            	test	byte [install_flag],have_install_cmd ; 1
 32114 000020A6 7407                            jz	short final		; no install cmds, so yes it is
 32115 000020A8 803E[CD02]03                    cmp	byte [multi_pass_id],3	; final pass?
 32116 000020AD 7203                            jb	short not_final		; no
 32117                                  final:                                  ;
 32118 000020AF 268804                  	mov	[es:si],al		; save backward-compatible command code
 32119                                  not_final:                              ;
 32120                                  ;endif
 32121                                  
 32122                                  ; 31/12/2022
 32123                                  ;%endif ; 27/10/2022
 32124                                  
 32125 000020B2 88C4                    	mov	ah,al
 32126 000020B4 E88D21                  	call	getchr
 32127 000020B7 7314                    	jnc	short tryi
 32128                                  
 32129 000020B9 803E[CD02]02            	cmp	byte [multi_pass_id],2
 32130                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 32131                                  	; 27/10/2022
 32132 000020BE 73A5                    	jnb	short endconv	
 32133 000020C0 E95608                  	jmp	badop
 32134                                  	
 32135                                  coff:	
 32136                                  	; 11/12/2022
 32137                                  	; ds = cs
 32138                                  	;push	cs
 32139                                  	;pop	ds
 32140 000020C3 E87521                  	call	newline
 32141 000020C6 EBA4                    	jmp	short conflp	; 13/05/2019
 32142                                  
 32143                                  blank_line:
 32144 000020C8 E87921                  	call	getchr
 32145 000020CB EB9F                    	jmp	short conflp
 32146                                  
 32147                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32148                                  ; 11/12/2022
 32149                                  ; (there is not a jump or call to here from anywhere!)
 32150                                  ;coff_p:
 32151                                  	;push	cs
 32152                                  	;pop	ds
 32153                                  
 32154                                  ;to handle install= commands,we are going to use multi-pass.
 32155                                  ;the first pass handles the other commands and only set install_flag when
 32156                                  ;it finds any install command. the second pass will only handle the
 32157                                  ;install= command.
 32158                                  
 32159                                  ;------------------------------------------------------------------------------
 32160                                  ;install command
 32161                                  ;------------------------------------------------------------------------------
 32162                                  
 32163                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32164                                  	; (SYSINIT:2250h)
 32165                                  tryi:
 32166 000020CD 803E[CD02]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 32167 000020D2 7503                    	jne	short not_init_pass
 32168 000020D4 E97F01                  	jmp	multi_try_doshi
 32169                                  not_init_pass:
 32170 000020D7 803E[CD02]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 32171                                          ; 11/12/2022
 32172                                  	;je	short multi_pass_coff2	; now it is NOPs
 32173 000020DC 74E5                    	je	short coff
 32174                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32175                                  	;je	short multi_pass_coff	
 32176                                  					; This pass can be made use of if
 32177                                  					; we want do some config.sys process
 32178                                  					; after device drivers are loaded
 32179                                  					; and before install= commands
 32180                                  					; are processed
 32181                                  
 32182 000020DE 803E[CD02]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 32183 000020E3 741D                    	je	short multi_try_i
 32184 000020E5 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 32185                                  	; 11/12/2022
 32186                                  	;je	short multi_pass_coff2
 32187 000020E8 74D9                    	je	short coff
 32188                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32189                                  	;je	short multi_pass_coff	
 32190                                  
 32191                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 32192                                  ;       but don't process them now.        
 32193                                          
 32194 000020EA 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 32195                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32196 000020ED 7507                    	jne	short precheck_installhigh ; the first pass is for normal operation.
 32197                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32198                                  	;jne	short tryb	
 32199                                  	
 32200                                  	;or	word [install_flag],have_install_cmd ; set the flag
 32201 000020EF 800E[CE02]01            	or	byte [install_flag],have_install_cmd ; 1
 32202                                  multi_pass_coff2:
 32203 000020F4 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 32204                                  
 32205                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32206                                  ; (SYSINIT:2448h)
 32207                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32208                                  ;%if 0
 32209                                  precheck_installhigh:
 32210 000020F6 80FC57                  	cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 32211 000020F9 756B                    	jne     short tryb		; carry on with normal processing
 32212                                  	;or	word [install_flag],have_install_cmd
 32213 000020FB 800E[CE02]01            	or	byte [install_flag],have_install_cmd ; 1
 32214 00002100 EBC1                    	jmp	short coff
 32215                                  ;%endif ; 27/10/2022
 32216                                  
 32217                                  multi_try_i:
 32218 00002102 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I' ; install= command?
 32219                                  	; 31/12/2022 - Retro DOS v4.2
 32220 00002105 750A                    	jne	short multi_try_n	; no, check for installhigh
 32221                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32222                                  	;jne	short multi_pass_filter
 32223                                  
 32224                                  ; 31/12/2022
 32225                                  ;%if 1 
 32226                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32227                                  ;%if 0
 32228                                  ;ifdef	MULTI_CONFIG
 32229 00002107 E8A71F                  	call	query_user              ; query the user if config_cmd
 32230 0000210A 7241                    	jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 32231                                  ;endif
 32232                                  ;%endif ; 27/10/2022
 32233                                  
 32234 0000210C E8CDEF                  	call	do_install_exec 	;install it.
 32235 0000210F EBB2                    	jmp	short coff		;to handle next install= command.
 32236                                  
 32237                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32238                                  ; (SYSINIT:2463h)
 32239                                  ;%if 1
 32240                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32241                                  ;%if 0
 32242                                  
 32243                                  multi_try_n:
 32244 00002111 80FC57                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 32245 00002114 7537                            jne	short multi_pass_filter	; no. ignore this.
 32246                                  ;ifdef	MULTI_CONFIG
 32247 00002116 E8981F                          call    query_user              ; query the user if config_cmd
 32248 00002119 7232                            jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 32249                                  ;endif
 32250                                  
 32251                                  ;       The memory environment is in its normal DOS state, so do
 32252                                  ;       the standard calls to set the alloc strategy for loading high
 32253                                  
 32254 0000211B B80058                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 32255 0000211E CD21                    	int	21h			;get alloc strategy
 32256 00002120 89C3                    	mov	bx,ax
 32257 00002122 53                              push    bx                      ; save for the return
 32258                                  
 32259 00002123 81CB8000                        or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 32260 00002127 B80158                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 32261 0000212A CD21                    	int	21h			;set alloc strategy
 32262                                  
 32263 0000212C B80258                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 32264 0000212F CD21                            int     21h                     ; get link state
 32265 00002131 30E4                            xor     ah,ah                   ; clear top byte
 32266 00002133 50                              push    ax                      ; save for return
 32267                                  
 32268 00002134 B80358                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 32269 00002137 BB0100                  	mov	bx,1
 32270 0000213A CD21                    	int	21h			;link in UMBs
 32271                                  
 32272 0000213C E89DEF                  	call	do_install_exec 	;install it.
 32273                                  
 32274 0000213F B80358                          mov     ax,(ALLOCOPER<<8)|3
 32275 00002142 5B                              pop     bx                      ; recover original link state
 32276 00002143 CD21                            int     21h
 32277 00002145 5B                              pop     bx                      ; recover original alloc strategy
 32278 00002146 B80158                          mov     ax,(ALLOCOPER<<8)|1
 32279 00002149 CD21                            int     21h
 32280                                  
 32281                                  	;jmp	short coff		;to handle next install= command.
 32282                                  	; 01/01/2023
 32283 0000214B EBA7                    	jmp	short multi_pass_coff2
 32284                                  
 32285                                  ;%endif ; 27/10/2022
 32286                                  
 32287                                  multi_pass_filter:
 32288 0000214D 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 32289 00002150 740A                    	je	short multi_pass_adjust
 32290 00002152 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 32291 00002155 7405                    	je	short multi_pass_adjust
 32292 00002157 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 32293 0000215A 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 32294                                  
 32295                                  multi_pass_adjust:			; these commands need to
 32296 0000215C FF0E[5A03]              	dec	word [chrptr]		;  adjust chrptr,count
 32297 00002160 FF06[5603]              	inc	word [count]		;  for newline proc.
 32298                                  
 32299                                  multi_pass_coff:
 32300                                  	; 11/12/2022
 32301                                  	;jmp	short coff		; to handle next install= commands.
 32302                                  	; 01/01/2023
 32303 00002164 EB8E                    	jmp	short multi_pass_coff2
 32304                                  
 32305                                  ;------------------------------------------------------------------------------
 32306                                  ; buffer command
 32307                                  ;------------------------------------------------------------------------------
 32308                                  
 32309                                  ;******************************************************************************
 32310                                  ;									      *
 32311                                  ; function: parse the parameters of buffers= command.			      *
 32312                                  ;									      *
 32313                                  ; input :								      *
 32314                                  ;	es:si -> parameters in command line.				      *
 32315                                  ; output:								      *
 32316                                  ;	buffers set							      *
 32317                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 32318                                  ;	h_buffers set if secondary buffer cache specified.		      *
 32319                                  ;									      *
 32320                                  ; subroutines to be called:						      *
 32321                                  ;	sysinit_parse							      *
 32322                                  ; logic:								      *
 32323                                  ; {									      *
 32324                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 32325                                  ;	set dx,cx to 0; 						      *
 32326                                  ;	reset buffer_slash_x;						      *
 32327                                  ;	while (end of command line)					      *
 32328                                  ;	{ sysinit_parse;						      *
 32329                                  ;	  if (no error) then						      *
 32330                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 32331                                  ;		    buffer_slash_x = 1					      *
 32332                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 32333                                  ;			  buffers = result_val._$P_picked_val;		      *
 32334                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 32335                                  ;	  else	{show error message;error exit} 			      *
 32336                                  ;	};								      *
 32337                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 32338                                  ; };									      *
 32339                                  ;									      *
 32340                                  ;******************************************************************************
 32341                                  
 32342                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32343                                  	; (SYSINIT:229Ch)
 32344                                  tryb:
 32345 00002166 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 32346 00002169 755C                    	jne	short tryc
 32347                                  
 32348                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32349                                  ; (SYSINIT:24BFh)
 32350                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32351                                  ;%if 0
 32352                                  ;ifdef	MULTI_CONFIG
 32353 0000216B E8431F                  	call	query_user		; query the user if config_cmd
 32354 0000216E 7257                    	jc	short tryc		; has the CONFIG_OPTION_QUERY bit set
 32355                                  ;endif
 32356                                  ;%endif ; 27/10/2022
 32357                                  
 32358                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32359                                  	; 18/12/2022
 32360 00002170 31C9                    	xor	cx,cx
 32361                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 32362 00002172 880E[801D]              	mov	[p_buffer_slash_x],cl ; 0
 32363                                  
 32364 00002176 BF[391D]                	mov	di,buf_parms
 32365                                  	;xor	cx,cx	; 18/12/2022
 32366                                  	; 03/01/2023
 32367                                  	;mov	dx,cx
 32368                                  do7:
 32369 00002179 E87E07                  	call	sysinit_parse
 32370 0000217C 7303                    	jnc	short if7		; parse error,
 32371                                  	;call	badparm_p		;  and show messages and end the search loop.
 32372                                  	;;jmp	short sr7
 32373                                  	; 31/12/2022
 32374                                  ;sr7:
 32375                                  	;jmp	coff
 32376                                  	; 03/01/2023
 32377 0000217E E9A806                  	jmp	badparm_p_coff
 32378                                  if7:
 32379 00002181 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 32380 00002184 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 32381                                  	;cmp	word [result_val_swoff],switch_x
 32382 00002186 813E[841D][791D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 32383                                  	;jne	short if11
 32384                                  	; 31/12/2022
 32385 0000218C 74EB                    	je	short do7 ;je short en11
 32386                                  
 32387                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 32388                                  	;jmp	short en11 ; 31/12/2022
 32389                                  if11:
 32390                                  	;mov	ax,[rv_dword]
 32391 0000218E A1[861D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 32392 00002191 83F901                  	cmp	cx,1
 32393 00002194 7505                    	jne	short if13
 32394                                  
 32395 00002196 A3[7C1D]                	mov	[p_buffers],ax
 32396                                  	;jmp	short en11
 32397                                  	; 31/12/2022
 32398 00002199 EBDE                    	jmp	short do7
 32399                                  if13:
 32400 0000219B A3[7E1D]                	mov	[p_h_buffers],ax
 32401                                  en11:
 32402 0000219E EBD9                    	jmp	short do7
 32403                                  en7:
 32404 000021A0 833E[7C1D]63            	cmp	word [p_buffers],99
 32405 000021A5 760B                    	jbe	short if18
 32406                                  
 32407                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 32408                                  ;	jne	short if18
 32409                                  
 32410 000021A7 E87B07                  	call	badparm_p
 32411 000021AA C706[7E1D]0000          	mov	word [p_h_buffers],0
 32412 000021B0 EB12                    	jmp	short sr7
 32413                                  if18:
 32414 000021B2 A1[7C1D]                	mov	ax,[p_buffers]	; we don't have any problem.
 32415 000021B5 A3[9902]                	mov	[buffers],ax	; now,let's set it really.
 32416                                  
 32417 000021B8 A1[7E1D]                	mov	ax,[p_h_buffers]
 32418 000021BB A3[9B02]                	mov	[h_buffers],ax
 32419                                  
 32420                                  ;	mov	al,[p_buffer_slash_x]	; M016
 32421                                  ;	mov	[buffer_slash_x],al
 32422                                  
 32423 000021BE A1[AF02]                	mov	ax,[linecount]
 32424 000021C1 A3[B902]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 32425                                  	; 31/12/2022
 32426                                  	;jmp	short sr7
 32427                                  	; 03/01/2023
 32428                                  sr7:
 32429 000021C4 E9FCFE                  	jmp	coff
 32430                                  
 32431                                  ;------------------------------------------------------------------------------
 32432                                  ; break command
 32433                                  ;------------------------------------------------------------------------------
 32434                                  
 32435                                  ;****************************************************************************
 32436                                  ;									    *
 32437                                  ; function: parse the parameters of break = command.			    *
 32438                                  ;									    *
 32439                                  ; input :								    *
 32440                                  ;	es:si -> parameters in command line.				    *
 32441                                  ; output:								    *
 32442                                  ;	turn the control-c check on or off.				    *
 32443                                  ;									    *
 32444                                  ; subroutines to be called:						    *
 32445                                  ;	sysinit_parse							    *
 32446                                  ; logic:								    *
 32447                                  ; {									    *
 32448                                  ;	set di to brk_parms;						    *
 32449                                  ;	set dx,cx to 0; 						    *
 32450                                  ;	while (end of command line)					    *
 32451                                  ;	{ sysinit_parse;						    *
 32452                                  ;	  if (no error) then						    *
 32453                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 32454                                  ;		   set p_ctrl_break,on;					    *
 32455                                  ;	       else					  /*off 	 */ *
 32456                                  ;		   set p_ctrl_break,off;				    *
 32457                                  ;	  else {show message;error_exit};				    *
 32458                                  ;	};								    *
 32459                                  ;	if (no error) then						    *
 32460                                  ;	   dos function call to set ctrl_break check according to	    *
 32461                                  ; };									    *
 32462                                  ;									    *
 32463                                  ;****************************************************************************
 32464                                  
 32465                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32466                                  	; (SYSINIT:22FFh)
 32467                                  tryc:
 32468 000021C7 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 32469 000021CA 7539                    	jne	short trym
 32470                                  
 32471                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32472                                  ; (SYSINIT:2527h)
 32473                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32474                                  ;%if 0
 32475                                  ;ifdef	MULTI_CONFIG
 32476 000021CC E8E21E                  	call	query_user              ; query the user if config_cmd
 32477 000021CF 7234                    	jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 32478                                  ;endif
 32479                                  ;%endif ; 27/10/2022
 32480                                  
 32481 000021D1 BF[8A1D]                	mov	di,brk_parms
 32482 000021D4 31C9                    	xor	cx,cx
 32483                                  	; 03/01/2023
 32484                                  	;mov	dx,cx
 32485                                  do22:
 32486 000021D6 E82107                  	call	sysinit_parse
 32487 000021D9 7303                    	jnc	short if22		; parse error
 32488                                  	;call	badparm_p		;  show message and end the search loop.
 32489                                  	;;jmp	short sr22
 32490                                  	; 31/12/2022
 32491                                  ;sr22:
 32492                                  	;jmp	coff
 32493                                  	; 03/01/2023
 32494 000021DB E94B06                  	jmp	badparm_p_coff
 32495                                  if22:
 32496 000021DE 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 32497 000021E1 7415                    	je	short en22		; then end the $endloop
 32498                                  
 32499                                  	;cmp	byte [result_val_itag],1
 32500 000021E3 803E[831D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 32501 000021E8 7507                    	jne	short if26
 32502                                  
 32503 000021EA C606[AF1D]01            	mov	byte [p_ctrl_break],1	; turn it on
 32504                                  	;jmp	short en26
 32505                                  	; 31/12/2022
 32506 000021EF EBE5                    	jmp	short do22
 32507                                  if26:
 32508 000021F1 C606[AF1D]00            	mov	byte [p_ctrl_break],0	; turn it off
 32509                                  en26:
 32510 000021F6 EBDE                    	jmp	short do22		; we actually set the ctrl break
 32511                                  en22:
 32512 000021F8 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 32513 000021FA B001                    	mov	al,1
 32514 000021FC 8A16[AF1D]              	mov	dl,[p_ctrl_break]
 32515 00002200 CD21                    	int	21h
 32516                                  	; 31/12/2022
 32517                                  	;jmp	short sr22
 32518                                  	; 03/01/2023
 32519                                  sr22:
 32520 00002202 E9BEFE                  	jmp	coff
 32521                                  
 32522                                  ;------------------------------------------------------------------------------
 32523                                  ; multitrack command
 32524                                  ;------------------------------------------------------------------------------
 32525                                  
 32526                                  ;******************************************************************************
 32527                                  ;									      *
 32528                                  ; function: parse the parameters of multitrack= command.		      *
 32529                                  ;									      *
 32530                                  ; input :								      *
 32531                                  ;	es:si -> parameters in command line.				      *
 32532                                  ; output:								      *
 32533                                  ;	turn multrk_flag on or off.					      *
 32534                                  ;									      *
 32535                                  ; subroutines to be called:						      *
 32536                                  ;	sysinit_parse							      *
 32537                                  ; logic:								      *
 32538                                  ; {									      *
 32539                                  ;	set di to brk_parms;						      *
 32540                                  ;	set dx,cx to 0; 						      *
 32541                                  ;	while (end of command line)					      *
 32542                                  ;	{ sysinit_parse;						      *
 32543                                  ;	  if (no error) then						      *
 32544                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 32545                                  ;		   set p_mtrk,on;					      *
 32546                                  ;	       else					  /*off 	 */   *
 32547                                  ;		   set p_mtrk,off;					      *
 32548                                  ;	  else {show message;error_exit};				      *
 32549                                  ;	};								      *
 32550                                  ;	if (no error) then						      *
 32551                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 32552                                  ;									      *
 32553                                  ; };									      *
 32554                                  ;									      *
 32555                                  ;******************************************************************************
 32556                                  
 32557                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32558                                  trym:
 32559 00002205 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 32560 00002208 7573                    	jne	short tryu
 32561                                  
 32562                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32563                                  ; (SYSINIT:2569h)
 32564                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32565                                  ;%if 0
 32566                                  ;ifdef	MULTI_CONFIG
 32567 0000220A E8A41E                  	call	query_user      ; query the user if config_cmd
 32568 0000220D 726E                    	jc	short tryu	; has the CONFIG_OPTION_QUERY bit set
 32569                                  ;endif
 32570                                  ;%endif	; 27/10/2022
 32571                                  
 32572 0000220F BF[8E1E]                	mov	di,mtrk_parms
 32573 00002212 31C9                    	xor	cx,cx
 32574                                  	; 03/01/2023
 32575                                  	;mov	dx,cx
 32576                                  do31:
 32577 00002214 E8E306                  	call	sysinit_parse
 32578 00002217 7303                    	jnc	short if31	; parse error
 32579                                  	;call	badparm_p	;  show message and end the search loop.
 32580                                  	;;jmp	short sr31
 32581                                  	; 31/12/2022
 32582                                  ;sr31:
 32583                                  	;jmp	coff
 32584                                  	; 03/01/2023
 32585 00002219 E90D06                  	jmp	badparm_p_coff
 32586                                  if31:
 32587 0000221C 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 32588 0000221F 7415                    	je	short en31	; then end the $endloop
 32589                                  
 32590                                  	;cmp	byte [result_val_itag],1
 32591 00002221 803E[831D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 32592 00002226 7507                    	jne	short if35
 32593                                  
 32594 00002228 C606[A21E]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 32595                                  	;jmp	short en35
 32596                                  	; 31/12/2022
 32597 0000222D EBE5                    	jmp	short do31
 32598                                  if35:
 32599 0000222F C606[A21E]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 32600                                  en35:
 32601 00002234 EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 32602                                  en31:
 32603 00002236 1E                      	push	ds
 32604                                  	;;mov	ax,Bios_Data ; 70h
 32605                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 32606                                  	; 21/10/2022
 32607 00002237 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 32608 0000223A 8ED8                    	mov	ds,ax
 32609                                  
 32610 0000223C 2E803E[A21E]00          	cmp	byte [cs:p_mtrk],0
 32611 00002242 7508                    	jne	short if39
 32612                                  
 32613 00002244 C706[A004]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 32614 0000224A EB06                    	jmp	short en39
 32615                                  if39:
 32616 0000224C C706[A004]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 32617                                  en39:
 32618 00002252 1F                      	pop	ds
 32619                                  	; 31/12/2022
 32620                                  	;jmp	short sr31
 32621                                  	; 03/01/2023
 32622                                  sr31:
 32623 00002253 E96DFE                  	jmp	coff
 32624                                  
 32625                                  ;----------------------------------------------------------------------------
 32626                                  ; DOS=HIGH/LOW command
 32627                                  ;----------------------------------------------------------------------------
 32628                                  
 32629                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32630                                  multi_try_doshi:
 32631 00002256 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 32632 00002259 7403                    	je	short it_is_h
 32633                                  skip_it:
 32634 0000225B E9EFFE                  	jmp	multi_pass_filter
 32635                                  it_is_h:				; M003 - removed initing DevUMB
 32636                                  					;	 & runhigh
 32637                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32638                                  ; (SYSINIT:25C1h)
 32639                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32640                                  ;%if 0
 32641                                  ;ifdef	MULTI_CONFIG
 32642 0000225E E8501E                  	call	query_user              ; query the user if config_cmd
 32643 00002261 72F8                    	jc	short skip_it		; has the CONFIG_OPTION_QUERY bit set
 32644                                  ;endif
 32645                                  ;%endif ; 27/10/2022
 32646                                  
 32647 00002263 BF[F51E]                	mov	di,dos_parms
 32648 00002266 31C9                    	xor	cx,cx
 32649                                  	; 03/01/2023
 32650                                  	;mov	dx,cx
 32651                                  h_do_parse:
 32652 00002268 E88F06                  	call	sysinit_parse
 32653 0000226B 7303                    	jnc	short h_parse_ok	; parse error
 32654                                  h_badparm:
 32655                                  	; 03/01/2023
 32656                                  	;call	badparm_p		; show message and end the search loop.
 32657                                  	;;jmp	short h_end
 32658                                  	; 11/12/2022
 32659                                  ;h_end:
 32660                                  	;jmp	coff
 32661                                  	; 03/01/2023
 32662 0000226D E9B905                  	jmp	badparm_p_coff	
 32663                                  h_parse_ok:
 32664 00002270 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 32665 00002273 7405                    	je	short h_end		; then end the $endloop
 32666 00002275 E80407                  	call	ProcDOS
 32667 00002278 EBEE                    	jmp	short h_do_parse
 32668                                  	; 11/12/2022
 32669                                  	; 03/01/2023
 32670                                  h_end:
 32671 0000227A E946FE                  	jmp	coff
 32672                                  
 32673                                  ;-----------------------------------------------------------------------------
 32674                                  ; devicehigh command
 32675                                  ;-----------------------------------------------------------------------------
 32676                                  
 32677                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32678                                  tryu:
 32679 0000227D 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 32680 00002280 7553                    	jne	short tryd
 32681                                  
 32682                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32683                                  ; (SYSINIT:25E9h)
 32684                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32685                                  ;%if 0
 32686                                  ;ifdef	MULTI_CONFIG
 32687 00002282 E82C1E                  	call	query_user              ; query the user if config_cmd
 32688 00002285 724E                    	jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 32689                                  ;endif
 32690                                  ;%endif ; 28/10/2022
 32691                                  
 32692                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32693                                  ;%if 0
 32694                                  	; 01/01/2023
 32695                                  	; ds = cs
 32696                                  
 32697 00002287 E88907                  	call	InitVar
 32698 0000228A E85D0F                  	call	ParseSize		; process the size= option
 32699                                  	;jnc	short tryu_0
 32700                                  	; 31/12/2022
 32701 0000228D 720C                    	jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 32702                                  
 32703                                  ;%endif ; 28/10/2022
 32704                                  
 32705                                  ; 31/12/2022
 32706                                  %if 0
 32707                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32708                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 32709                                  	;mov	[cs:badparm_seg], es
 32710                                  	; 11/12/2022
 32711                                  	; ds = cs
 32712                                  	mov	[badparm_off], si
 32713                                  	mov	[badparm_seg], es
 32714                                  
 32715                                  	; 31/12/2022
 32716                                  	;call	ParseSize
 32717                                  	;jnc	short tryu_2	; 28/10/2022
 32718                                  	
 32719                                  	;call	badparm_p
 32720                                  	;jmp	coff
 32721                                  	; 03/01/2023
 32722                                  	jmp	badparm_p_coff
 32723                                  %endif
 32724                                  
 32725                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32726                                  ; (SYSINIT:2606h)
 32727                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32728                                  ;%if 0
 32729                                  tryu_0:
 32730                                  	;mov	ax,[cs:DevSizeOption]
 32731                                  	; 31/12/2022
 32732 0000228F A1[8F1F]                	mov	ax,[DevSizeOption] ; ds = cs
 32733 00002292 09C0                    	or	ax,ax
 32734 00002294 7510                    	jnz	short tryu_2
 32735                                  
 32736 00002296 E80C08                  	call	ParseVar
 32737 00002299 730B                    	jnc	short tryu_2
 32738                                  tryu_1:
 32739                                  	; 31/12/2022
 32740                                  	; ds = cs
 32741 0000229B 8936[CE14]              	mov	[badparm_off], si
 32742 0000229F 8C06[D014]              	mov	[badparm_seg], es
 32743                                  	;mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 32744                                  	;mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 32745                                  	
 32746                                  	;call	badparm_p		; so all we have to do is choke and
 32747                                  	;jmp	coff			; die, rather verbosely.
 32748                                  	; 03/01/2023
 32749 000022A3 E98305                  	jmp	badparm_p_coff
 32750                                  
 32751                                  ;%endif ; 28/10/2022
 32752                                  
 32753                                  tryu_2:	
 32754 000022A6 56                      	push	si
 32755 000022A7 06                      	push	es
 32756                                  
 32757                                  	; 08/09/2023 - Retro DOS 4.2 IO.SYS (Optimization)
 32758                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2623h
 32759                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:2B17h
 32760                                  tryu_3:
 32761 000022A8 268A04                  	mov	al,[es:si]
 32762 000022AB 3C0D                    	cmp	al,cr
 32763 000022AD 740C                    	je	short tryu_4
 32764                                  	; 08/09/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
 32765                                  	;je	short tryu_5
 32766 000022AF 3C0A                    	cmp	al,lf
 32767 000022B1 7408                    	je	short tryu_4
 32768 000022B3 E8691F                  	call	delim
 32769 000022B6 7403                    	jz	short tryu_4
 32770 000022B8 46                      	inc	si
 32771 000022B9 EBED                    	jmp	short tryu_3
 32772                                  
 32773                                  	; 08/09/2023 - Retro DOS 5.0 (PCDOS 7.1 IBMBIO.COM)
 32774                                  ;tryu_5:
 32775                                  ;	mov     al, 20h ; ' '   ; blank instead of cr
 32776                                  
 32777                                  tryu_4:	
 32778                                  	; 11/12/2022
 32779                                  	; ds = cs
 32780 000022BB A2[A31F]                	mov	[DevSavedDelim],al
 32781                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 32782                                  					;  it with null
 32783                                  	; 18/12/2022
 32784 000022BE 29DB                    	sub	bx,bx
 32785 000022C0 26881C                  	mov	[es:si],bl ; 0
 32786                                   	;mov	byte [es:si],0
 32787                                  
 32788 000022C3 07                      	pop	es
 32789 000022C4 5E                      	pop	si
 32790 000022C5 5E                      	pop	si
 32791                                  
 32792                                  ;------------------------------------------------------------------------------
 32793                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 32794                                  ;------------------------------------------------------------------------------
 32795                                  
 32796                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32797                                  ; (SYSINIT:2642h)
 32798                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32799                                  ;%if 0
 32800                                  ; 10/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 32801                                  ; MSDOS 6.21 IO.SYS - SYSINIT:2642h
 32802                                  %if 1
 32803                                  	; 01/01/2023
 32804                                  	; ds = cs
 32805 000022C6 E8490C                  	call	UmbTest			; See if UMBs are around...
 32806                                  	; 01/01/2023
 32807                                  	;jnc	short NrmTst		; ...yep. So do that normal thang.
 32808                                  	
 32809                                  	;mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 32810                                  	; 31/12/2022
 32811                                  	; ds = cs, bx = 0
 32812                                  	;mov	byte [DeviceHi],bl ; 0
 32813                                  	;jmp	short LoadDevice
 32814                                  	; 01/01/2023
 32815 000022C9 7222                    	jc	short LoadDevice ; bl = 0
 32816                                  %endif
 32817                                  ;%endif
 32818                                  ;------------------------------------------------------------------------------
 32819                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 32820                                  ;------------------------------------------------------------------------------
 32821                                  
 32822                                  NrmTst:
 32823                                  	; 11/12/2022
 32824                                  	; ds = cs
 32825                                  	;;mov	byte [cs:DeviceHi],0
 32826                                  	;mov	byte [DeviceHi],0
 32827                                  	; 18/12/2022
 32828                                  	; bx = 0
 32829 000022CB 381E[7F1F]              	cmp	[DevUMB],bl ; 0
 32830                                  	;cmp	byte [DevUMB],0
 32831                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 32832 000022CF 741C                    	je	short LoadDevice	; no, we don't
 32833                                  	;mov	byte [cs:DeviceHi],1
 32834                                  	; 11/12/2022
 32835                                  	;mov	byte [DeviceHi],1
 32836                                  	; 18/12/2022
 32837 000022D1 FEC3                    	inc	bl ; mov bl,1 ; (*)
 32838                                  	; 11/12/2022
 32839                                  	;jmp	short LoadDevice2	; 11/12/2022
 32840 000022D3 EB18                    	jmp	short LoadDevice
 32841                                  
 32842                                  ;------------------------------------------------------------------------------
 32843                                  ; device command
 32844                                  ;------------------------------------------------------------------------------
 32845                                  
 32846                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32847                                  	; (SYSINIT:2665h)
 32848                                  
 32849                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32850                                  	; (SYSINIT:2401h)
 32851                                  tryd:
 32852                                  	; 11/12/2022
 32853                                  	;xor 	bx,bx ; 31/12/2022
 32854                                  	;
 32855 000022D5 80FC44                          cmp     ah,CONFIG_DEVICE ; 'D'
 32856 000022D8 7403                    	je	short gotd
 32857                                  skip_it2:
 32858 000022DA E99302                  	jmp	tryq
 32859                                  gotd:
 32860                                  
 32861                                  ; 31/12/2022 - Retro DOS v4.2
 32862                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32863                                  ;%if 0
 32864                                  ;ifdef	MULTI_CONFIG
 32865 000022DD E8D11D                  	call	query_user              ; query the user if config_cmd
 32866 000022E0 72F8                    	jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 32867                                  ;endif
 32868                                  ;%endif ; 28/10/2022
 32869                                  
 32870                                  	; 31/12/2022
 32871 000022E2 29DB                    	sub	bx,bx
 32872                                  	; bx = 0
 32873                                  	; 11/12/2022
 32874                                  	; ds = cs
 32875                                  	;mov	byte [DeviceHi],0
 32876                                  	;mov	word [DevSizeOption],0
 32877 000022E4 891E[8F1F]              	mov	[DevSizeOption],bx ; 0
 32878 000022E8 C606[A31F]20            	mov	byte [DevSavedDelim],' '
 32879                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 32880                                  	;mov	word [cs:DevSizeOption],0
 32881                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 32882                                  					;  be replaced with a ' '
 32883                                  LoadDevice:                             ; device= or devicehigh= command.
 32884                                  	; 11/12/2022
 32885                                  	;mov	byte [DeviceHi],0
 32886 000022ED 881E[8E1F]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 32887                                  LoadDevice2:
 32888                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 32889                                  	;
 32890                                  	;push    cs
 32891                                          ;pop     ds
 32892                                  	;
 32893                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 32894                                  	;mov	[bpb_addr+2],es
 32895                                  	;
 32896                                  	;mov	[DevCmdLine],si		; save it for ourself
 32897                                  	;mov	[DevCmdLine+2],es
 32898                                  	;
 32899                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 32900                                  
 32901                                  	; 11/12/2022
 32902                                  	; ds = cs
 32903                                  	;mov	bx,cs
 32904                                  	;mov	ds,bx
 32905                                  
 32906                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 32907 000022F1 8936[7C03]              	mov	[bpb_addr],si
 32908                                  	;mov	[cs:bpb_addr+2],es
 32909 000022F5 8C06[7E03]              	mov	[bpb_addr+2],es
 32910                                  
 32911                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 32912 000022F9 8936[9F1F]              	mov	[DevCmdLine],si
 32913                                  	;mov	[cs:DevCmdLine+2],es	
 32914 000022FD 8C06[A11F]              	mov	[DevCmdLine+2],es
 32915                                  
 32916                                  	; 31/12/2022 - Retro DOS v4.2
 32917 00002301 C606[CD14]00            	mov	byte [driver_units],0	; clear total block units for driver	
 32918                                  
 32919 00002306 E87E1F                  	call	round
 32920                                  	
 32921 00002309 E8EA0D                  	call	SizeDevice
 32922 0000230C 723F                    	jc	short BadFile
 32923                                  
 32924                                  	; 11/12/2022
 32925                                  	; ds = cs
 32926                                  
 32927                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 32928                                  
 32929                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 32930                                  ; (SYSINIT:26A4h)
 32931                                  
 32932                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32933                                  ;%if 0
 32934 0000230E C606[7E1F]01            	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 32935                                  
 32936                                  	; 22/07/2023
 32937                                  	;mov	al,[DeviceHi]		; If not using upper memory,
 32938 00002313 800E[8E1F]00            	or	byte [DeviceHi],0	; Skip all this and go on to
 32939                                  	; 10/07/2023
 32940                                  	;or	al,al
 32941 00002318 741E                    	jz	short DevConvLoad	; the actual load.
 32942                                  
 32943                                  	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 32944 0000231A A0[3C1F]                	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 32945                                  
 32946 0000231D 3CFF                    	cmp	al,-1			; If umb0 not specified, it's old style
 32947 0000231F 7417                    	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 32948                                  
 32949 00002321 FE0E[7E1F]              	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 32950                                  
 32951 00002325 E8B209                  	call	GetLoadSize		; Returns size of first UMB specified
 32952 00002328 09C0                    	or	ax,ax
 32953 0000232A 7406                    	jz	short tryd_1		; If size1 not specified, nada to do:
 32954                                  
 32955 0000232C 3B06[701F]              	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 32956 00002330 7D06                    	jge	short DevConvLoad
 32957                                  tryd_1:
 32958 00002332 A1[701F]                	mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 32959 00002335 E8AE09                  	call	StoLoadSize		; minsize for load UMB.
 32960                                  
 32961                                  ;%endif ; 28/10/2022
 32962                                  
 32963                                  ; - End DeviceHigh primary logic changes --------------------------------------
 32964                                  
 32965                                  DevConvLoad:
 32966                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32967 00002338 E8BF0C                  	call	InitDevLoad
 32968                                  
 32969                                  	; 11/12/2022
 32970                                  	; ds = cs
 32971 0000233B A1[721F]                	mov	ax,[DevLoadAddr]
 32972 0000233E 0306[701F]              	add	ax,[DevSize]
 32973 00002342 7206                    	jc	short NoMem
 32974 00002344 3906[741F]              	cmp	[DevLoadEnd],ax
 32975 00002348 7315                    	jae	short LoadDev
 32976                                  	
 32977                                  	; 11/12/2022
 32978                                  	;mov	ax,[cs:DevLoadAddr]
 32979                                  	;add	ax,[cs:DevSize]
 32980                                  	;jc	short NoMem
 32981                                  	;cmp	[cs:DevLoadEnd],ax
 32982                                  	;jae	short LoadDev
 32983                                  NoMem:
 32984                                  	; 11/12/2022
 32985                                  	; ds = cs
 32986                                  	;jmp	mem_err
 32987 0000234A E9791F                  	jmp	mem_err2
 32988                                  
 32989                                  BadFile:
 32990                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32991                                  	;;call	RetFromUM		; Does nothing if didn't call HideUMBs
 32992                                  	;;cmp	byte [es:si],' '
 32993                                          ;;jae	short tryd_2
 32994                                  	; 31/12/2022	
 32995                                  	;cmp	byte [es:si],0Dh	; cr
 32996                                          ;jne	short tryd_2
 32997                                  	;jmp	badop
 32998                                  	; 31/12/2022
 32999                                  	; ds = cs
 33000                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33001                                  	; (SYSINIT:26E6h)
 33002 0000234D E8070E                  	call	RetFromUM		; Does nothing if didn't call HideUMBs
 33003 00002350 26803C20                	cmp	byte [es:si],' ' 
 33004                                  	;cmp	byte [es:si],20h ; space
 33005 00002354 7303                    	jnb	short tryd_2
 33006 00002356 E9C005                  	jmp	badop
 33007                                  tryd_2:
 33008 00002359 E86521                  	call	badload
 33009 0000235C E964FD                  	jmp	coff
 33010                                  
 33011                                  LoadDev:
 33012 0000235F 06                      	push	es
 33013 00002360 1F                      	pop	ds
 33014                                  
 33015 00002361 89F2                    	mov	dx,si			;ds:dx points to file name
 33016 00002363 E8D50D                  	call	ExecDev			; load device driver using exec call
 33017                                  badldreset:
 33018 00002366 1E                      	push	ds
 33019 00002367 07                      	pop	es			;es:si back to config.sys
 33020 00002368 0E                      	push	cs
 33021 00002369 1F                      	pop	ds			;ds back to sysinit
 33022 0000236A 72E1                    	jc	short BadFile
 33023                                  goodld:
 33024                                  	; 11/12/2022
 33025                                  	; ds = cs
 33026                                  
 33027 0000236C 06                      	push	es ; +	; 31/12/2022
 33028 0000236D 56                      	push	si ; ++
 33029 0000236E E8F70D                  	call	RemoveNull
 33030 00002371 06                      	push	es
 33031 00002372 56                      	push	si
 33032                                  
 33033 00002373 0E                      	push	cs
 33034 00002374 07                      	pop	es
 33035                                  
 33036 00002375 1E                      	push	ds ; **  ; ds = cs
 33037 00002376 56                      	push	si
 33038                                  
 33039                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 33040                                  	; 31/12/2022
 33041                                  	; ds = cs
 33042 00002377 C536[761F]              	lds	si,[DevEntry]
 33043                                  
 33044                                  	;test	word [si+4],8000h
 33045                                  	; 11/12/2022
 33046 0000237B F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 33047                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 33048 0000237F 7514                    	jnz	short got_device_com_cont   ; no.
 33049                                  
 33050 00002381 2EC536[6D02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 33051                                  	;cmp	byte [si+32],26
 33052 00002386 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 33053 0000238A 7209                    	jb	short got_device_com_cont
 33054                                  
 33055 0000238C 5E                      	pop	si
 33056 0000238D 1F                      	pop	ds ; **
 33057                                  
 33058 0000238E 5E                      	pop	si			; clear the stack
 33059 0000238F 07                      	pop	es
 33060                                  
 33061                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33062                                  	;call	RetFromUM
 33063                                  	; 31/12/2022
 33064                                  	; ds = cs ; **
 33065 00002390 E8C40D                  	call	RetFromUM		; Do this before we leave
 33066                                  
 33067                                  	;jmp	short badnumblock
 33068                                  	; 31/12/2022
 33069 00002393 EB73                    	jmp	short badnumblock2  ; ds = cs
 33070                                  
 33071                                  got_device_com_cont:
 33072 00002395 5E                      	pop	si
 33073 00002396 1F                      	pop	ds
 33074                                  
 33075                                  	; 11/12/2022
 33076                                  	; ds = cs
 33077                                  
 33078 00002397 E80506                  	call	LieInt12Mem
 33079 0000239A E86406                  	call	UpdatePDB		; update the PSP:2 value M020
 33080                                  
 33081                                  	; 11/12/2022
 33082                                  	; ds = cs
 33083                                  	; 08/09/2023
 33084 0000239D 31C0                    	xor	ax, ax ; 0
 33085 0000239F 3806[C914]              	cmp	byte [multdeviceflag],al ; 0
 33086                                  	;cmp	byte [multdeviceflag],0
 33087                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 33088                                  					;  driver in the file ; M027
 33089 000023A3 750B                    	jne	short skip_pass_limit	;		      ; M027
 33090                                  
 33091                                  	; 11/12/2022
 33092                                  	; ds = cs
 33093                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 33094                                  	;mov	bx,[cs:DevLoadEnd]
 33095                                  	;mov	[cs:break_addr+2],bx
 33096                                  
 33097                                  	;mov	word [break_addr],0
 33098                                  	; 08/09/2023
 33099 000023A5 A3[7803]                	mov	[break_addr],ax ; 0
 33100 000023A8 8B1E[741F]              	mov	bx,[DevLoadEnd]
 33101 000023AC 891E[7A03]              	mov	[break_addr+2],bx
 33102                                  
 33103                                  skip_pass_limit:
 33104                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 33105                                  ;	number of installed devices (including DblSpace drives) where
 33106                                  ;	"drivenumber" is the number that the next block device will
 33107                                  ;	be assigned to. Because some naughty device drivers (like
 33108                                  ;	interlnk) look at the internal DOS variable instead of the
 33109                                  ;	value we pass it, we'll temporarily stick our value into
 33110                                  ;	DOS DATA while we're initializing the device drivers.
 33111                                  ;
 33112                                  ;	Note that this will make it impossible for this device
 33113                                  ;	driver to access the DblSpace drive letters, whether
 33114                                  ;	they are swapped-hosts or unswapped compressed drives,
 33115                                  ;	during its initialization phase.
 33116                                  
 33117                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33118                                  ; (SYSINIT:2752h)
 33119                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33120                                  ;%if 0
 33121                                  	; 31/12/2022
 33122                                  	;push	ds
 33123                                  	
 33124                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 33125                                  	; 31/12/2022
 33126                                  	; ds = cs
 33127                                  	; 08/09/2023
 33128                                  	;lds	bx,[DOSINFO]		; ds:bx -> sys_var
 33129                                  
 33130                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 33131                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 33132                                  	;mov	ah,al
 33133                                  
 33134                                  	; 08/09/2023
 33135                                  	; ds = cs
 33136 000023B0 A0[8003]                	mov	al,[drivenumber]	; temporarily use this next drv value		
 33137 000023B3 A2[8003]                	mov	[devdrivenum],al	; pass drive number in packet to driver
 33138 000023B6 88C4                    	mov	ah,al
 33139 000023B8 C51E[6D02]              	lds	bx,[DOSINFO]		; ds:bx -> sys_var
 33140                                  
 33141 000023BC 874720                  	xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 33142                                  	; 31/12/2022
 33143                                  	;pop	ds
 33144                                  	
 33145 000023BF 50                      	push	ax			; save real sysi_numio/ncds in ax
 33146                                  
 33147                                  ;%endif ; 29/10/2022
 33148                                  
 33149                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33150                                  	; (SYSINIT:24B9h)
 33151                                  
 33152 000023C0 BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 33153 000023C3 E8091F                  	call	calldev 		; calldev (sdevstrat);
 33154 000023C6 BB0800                  	mov	bx,SYSDEV.INT ; 8
 33155 000023C9 E8031F                  	call	calldev 		; calldev (sdevint);
 33156                                  
 33157                                  	; 11/12/2022
 33158                                  	; ds <> cs (from calldev) ; 31/12/2022
 33159                                  
 33160                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33161                                  ; (SYSINIT:2773h)
 33162                                  ; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33163                                  ;%if 0
 33164 000023CC 58                      	pop	ax			; get real sysi_numio value
 33165                                  	; 31/12/2022
 33166                                  	;push	ds
 33167 000023CD 2EC51E[6D02]            	lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 33168 000023D2 894720                  	mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 33169                                  	; 31/12/2022
 33170                                  	;pop	ds
 33171                                  
 33172                                  ;%endif ; 29/10/2022
 33173                                  
 33174                                  	; 11/12/2022
 33175 000023D5 0E                      	push	cs
 33176 000023D6 1F                      	pop	ds
 33177                                  
 33178 000023D7 E8F505                  	call	TrueInt12Mem
 33179                                  
 33180                                  	; 11/12/2022
 33181                                  	; ds = cs
 33182                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 33183                                  	;mov	[cs:DevBrkAddr],ax
 33184                                  	;mov	ax,[cs:break_addr+2]
 33185                                  	;mov	[cs:DevBrkAddr+2],ax
 33186 000023DA A1[7803]                	mov	ax,[break_addr]	
 33187 000023DD A3[7A1F]                	mov	[DevBrkAddr],ax
 33188 000023E0 A1[7A03]                	mov	ax,[break_addr+2]
 33189 000023E3 A3[7C1F]                	mov	[DevBrkAddr+2],ax
 33190                                  
 33191                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33192                                  	;call	RetFromUM		; There we go... all done.
 33193                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33194                                  	; (SYSINIT:2791h)
 33195 000023E6 E86E0D                  	call	RetFromUM		; There we go... all done.	
 33196                                  
 33197                                  	; 31/12/2022
 33198                                  	; ds = cs
 33199                                  
 33200                                  	; 11/12/2022
 33201 000023E9 803E[7F1F]00            	cmp	byte [DevUMB],0	
 33202                                  	;cmp	byte [cs:DevUMB],0
 33203 000023EE 7403                    	je	short tryd_3
 33204 000023F0 E8590F                  	call	AllocUMB
 33205                                  	; 31/12/2022
 33206                                  	; ds = cs
 33207                                  tryd_3:
 33208                                  
 33209                                  ;ifndef ROMDOS
 33210                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 33211                                  
 33212                                  	; 11/12/2022
 33213                                  	; ds = cs
 33214                                  	
 33215                                  	;cmp	byte [cs:runhigh],0FFh
 33216 000023F3 803E[6C02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 33217 000023F8 7503                    	jne	short tryd_4
 33218                                  	
 33219                                  	; 11/12/2022
 33220                                  	; ds = cs
 33221 000023FA E87AE5                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 33222                                  tryd_4:
 33223                                  ;endif ; ROMDOS
 33224                                  
 33225 000023FD 5E                      	pop	si
 33226 000023FE 1F                      	pop	ds
 33227 000023FF C60400                  	mov	byte [si],0		; *p = 0;
 33228                                  
 33229 00002402 0E                      	push	cs
 33230 00002403 1F                      	pop	ds
 33231                                  
 33232 00002404 EB1F                    	jmp	short was_device_com
 33233                                  
 33234                                  ;----------------------------------------------------------------------------
 33235                                  
 33236                                  ; 02/04/2019 - Retro DOS v4.0
 33237                                  
 33238                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33239                                  ; (SYSINIT:27B3h)
 33240                                  
 33241                                  badnumblock:
 33242 00002406 0E                      	push	cs
 33243 00002407 1F                      	pop	ds
 33244                                  badnumblock2:	; 31/12/2022 (ds=cs)
 33245 00002408 BA[C64B]                	mov	dx,badblock
 33246 0000240B E8DB20                  	call	print
 33247                                  
 33248                                  ;------ fall thru -----------------------------------------------------------
 33249                                  
 33250                                  	; 31/12/2022 - Retro DOS v4.2
 33251                                  
 33252                                  erase_dev_do:				; modified to show message "error in config.sys..."
 33253                                  	
 33254                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 33255                                  				; (Note: 'call CheckDoubleSpace'
 33256                                  				; has been removed at 'erase_dev_do:' pos
 33257                                  				; in PCDOS 7.1 IBMBIO.COM - SYSINIT:2CBAh)
 33258                                  				; Erdogan Tan - 10/07/2023
 33259 0000240E 5E                      	pop	si ; ++
 33260 0000240F 07                      	pop	es ; + ; 31/12/2022
 33261                                  
 33262 00002410 0E                      	push	cs
 33263 00002411 1F                      	pop	ds
 33264                                  
 33265                                  skip1_resetmemhi:
 33266                                  	; 11/12/2022
 33267                                  	; ds = cs
 33268 00002412 833E[8103]00            	cmp	word [configmsgflag],0
 33269                                  	;cmp	word [cs:configmsgflag],0
 33270 00002417 7409                    	je	short no_error_line_msg
 33271                                  
 33272 00002419 E83105                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 33273                                  	; 11/12/2022
 33274                                  	; ds = cs
 33275                                  	;mov	word [cs:configmsgflag],0
 33276 0000241C C706[8103]0000          	mov	word [configmsgflag],0	; set the default value again.
 33277                                  
 33278                                  no_error_line_msg:
 33279 00002422 E99EFC                  	jmp	coff
 33280                                  
 33281                                  ;----------------------------------------------------------------------------
 33282                                  
 33283                                  was_device_com:
 33284                                  	; 14/12/2022
 33285                                  	; ds = cs
 33286 00002425 A1[7C1F]                	mov	ax,[DevBrkAddr+2]
 33287                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 33288 00002428 3B06[741F]              	cmp	ax,[DevLoadEnd]
 33289                                  	;cmp	ax,[cs:DevLoadEnd]
 33290 0000242C 7605                    	jbe	short breakok
 33291                                  
 33292 0000242E 5E                      	pop	si
 33293 0000242F 07                      	pop	es
 33294 00002430 E91AFF                  	jmp	BadFile
 33295                                  
 33296                                  breakok:
 33297                                  	; 14/12/2022
 33298                                  	; ds = cs
 33299 00002433 C43E[6D02]              	les	di,[DOSINFO] 
 33300 00002437 C516[761F]              	lds	dx,[DevEntry]
 33301                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 33302 0000243B 89D6                    	mov	si,dx
 33303                                  
 33304                                  	; 14/11/2022
 33305                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 33306                                  
 33307                                  	; 14/12/2022
 33308                                  	; ds <> cs
 33309                                  	
 33310                                  	;mov	ax,[si+4]
 33311 0000243D 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 33312                                  	; 12/12/2022
 33313 00002440 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 33314                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 33315 00002443 7426                    	jz	short isblock
 33316                                  
 33317                                  ;------ lets deal with character devices
 33318                                  
 33319 00002445 2E800E[CC14]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 33320 0000244B E84D0D                  	call	DevSetBreak		;go ahead and alloc mem for device
 33321                                  jc_edd:
 33322 0000244E 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 33323                                  
 33324                                  	; 12/12/2022
 33325 00002450 A801                    	test	al,ISCIN
 33326                                  	;test	ax,ISCIN ; 1		;is it a console in?
 33327 00002452 7408                    	jz	short tryclk
 33328                                  
 33329 00002454 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 33330 00002458 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 33331                                  tryclk: 
 33332                                  	; 12/12/2022
 33333 0000245C A808                    	test	al,ISCLOCK
 33334                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 33335 0000245E 7408                    	jz	short golink
 33336                                  
 33337 00002460 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 33338 00002464 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 33339                                  golink: 
 33340 00002468 E9B500                  	jmp	linkit
 33341                                  
 33342                                  ;------ deal with block device drivers
 33343                                  
 33344                                  isblock:
 33345 0000246B 2EA0[7703]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 33346 0000246F 08C0                    	or	al,al
 33347 00002471 749B                    	jz	short erase_dev_do
 33348                                  	;mov	[si+10],al
 33349 00002473 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 33350                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33351                                  	;add	[cs:driver_units],al
 33352                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33353 00002476 2E0006[CD14]            	add	[cs:driver_units],al	; keep total for all drivers in file
 33354                                  perdrv:
 33355 0000247B 98                      	cbw				; warning no device > 127 units
 33356 0000247C 89C1                    	mov	cx,ax
 33357 0000247E 88E6                    	mov	dh,ah
 33358                                  	;mov	dl,[es:di+32]
 33359 00002480 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 33360 00002484 88D4                    	mov	ah,dl
 33361 00002486 00C4                    	add	ah,al			; check for too many devices
 33362 00002488 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 33363 0000248B 7603                    	jbe	short ok_block
 33364 0000248D E976FF                  	jmp	badnumblock
 33365                                  
 33366                                  ok_block:
 33367 00002490 2E800E[CC14]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 33368 00002496 E8020D                  	call	DevSetBreak		; alloc the device
 33369 00002499 72B3                    	jc	short jc_edd
 33370 0000249B 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 33371                                  
 33372 0000249F 2E0006[8003]            	add	[cs:drivenumber],al	; remember amount for next device
 33373 000024A4 2EC51E[7C03]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 33374                                  perunit:
 33375 000024A9 2EC42E[6D02]            	les	bp,[cs:DOSINFO]
 33376                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 33377                                  	; 11/12/2022
 33378 000024AE 26C46E00                	les	bp,[es:bp]
 33379                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33380                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 33381                                  scandpb:
 33382                                  	;cmp	word [es:bp+25],-1
 33383 000024B2 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 33384 000024B7 7406                    	je	short foundpb
 33385                                  	;les	bp,[es:bp+25]
 33386 000024B9 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 33387 000024BD EBF3                    	jmp	short scandpb
 33388                                  foundpb:
 33389 000024BF 2EA1[7A1F]              	mov	ax,[cs:DevBrkAddr]
 33390 000024C3 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 33391 000024C7 2EA1[7C1F]              	mov	ax,[cs:DevBrkAddr+2]
 33392 000024CB 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 33393                                  
 33394 000024CF 2EC42E[7A1F]            	les	bp,[cs:DevBrkAddr]
 33395 000024D4 2E8306[7A1F]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 33396                                  				; 08/09/2023
 33397                                  				; (61 in PCDOS 7.1 IBMBIO.COM)
 33398 000024DA E89D0C                  	call	RoundBreakAddr
 33399                                  
 33400 000024DD 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 33401 000024E3 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 33402                                  
 33403 000024E8 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 33404 000024EA 43                      	inc	bx
 33405 000024EB 43                      	inc	bx			;point to next guy
 33406                                  	;mov	[es:bp+DPB.DRIVE],dx
 33407                                  	; 11/12/2022
 33408 000024EC 26895600                	mov	[es:bp],dx ; 13/05/2019
 33409                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33410                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 33411                                  	
 33412 000024F0 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 33413 000024F2 CD21                    	int	21h
 33414                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 33415                                  			; DS:SI -> BPB (BIOS Parameter Block)
 33416                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 33417                                  
 33418                                  	;mov	ax,[es:bp+2]
 33419 000024F4 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 33420 000024F8 06                      	push	es
 33421 000024F9 2EC43E[6D02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 33422                                  	;cmp	ax,[es:di+10h]
 33423 000024FE 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 33424 00002502 07                      	pop	es
 33425                                  	;jna	short iblk_1
 33426                                  	;jmp	short bad_bpb_size_sector
 33427                                  	; 29/10/2022
 33428 00002503 775D                    	ja	short bad_bpb_size_sector
 33429                                  iblk_1:
 33430 00002505 1E                      	push	ds
 33431 00002506 52                      	push	dx
 33432                                  
 33433 00002507 2EC516[761F]            	lds	dx,[cs:DevEntry]
 33434                                  	;mov	[es:bp+13h],dx
 33435 0000250C 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 33436                                  	;mov	[es:bp+15h],ds
 33437 00002510 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 33438                                  
 33439 00002514 5A                      	pop	dx
 33440 00002515 1F                      	pop	ds
 33441                                  
 33442 00002516 42                      	inc	dx
 33443 00002517 FEC6                    	inc	dh
 33444 00002519 E28E                    	loop	perunit
 33445                                  
 33446 0000251B 0E                      	push	cs
 33447 0000251C 1F                      	pop	ds
 33448                                  
 33449 0000251D E84BE7                  	call	TempCDS 		; set cds for new drives
 33450                                  	; 31/12/2022
 33451                                  	; ds <> cs
 33452                                  linkit:
 33453 00002520 2EC43E[6D02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 33454 00002525 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 33455 00002529 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 33456                                  
 33457 0000252D 2EC536[761F]            	lds	si,[cs:DevEntry]	;ds:si = device location
 33458 00002532 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 33459 00002536 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 33460 0000253A 8B04                    	mov	ax,[si]			;get pointer to next device
 33461 0000253C 2EA3[761F]              	mov	[cs:DevEntry],ax	;and save it
 33462                                  
 33463 00002540 890C                    	mov	[si],cx			;link in the driver
 33464 00002542 895402                  	mov	[si+2],dx
 33465                                  enddev:
 33466 00002545 5E                      	pop	si
 33467 00002546 07                      	pop	es
 33468 00002547 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 33469 00002548 740B                    	jz	short coffj3
 33470                                  
 33471 0000254A 2EFE06[C914]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 33472 0000254F E86B0C                  	call	DevBreak		; M009
 33473                                  	; 11/12/2022
 33474                                  	; ds = cs (DevBreak)
 33475                                  
 33476                                  	; 03/04/2019 - Retro DOS v4.0
 33477                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 33478 00002552 E917FE                  	jmp	goodld			; otherwise pretend we loaded it in
 33479                                  coffj3: 
 33480                                  	; 18/12/2022
 33481                                  	; ax = 0
 33482 00002555 2EA2[C914]              	mov	[cs:multdeviceflag],al ; 0
 33483                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 33484 00002559 E8610C                  	call	DevBreak
 33485                                  	; 11/12/2022
 33486                                  	; ds = cs (DevBreak)
 33487                                  	
 33488                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33489                                  	; (SYSINIT:2919h)
 33490                                  	; 11/07/2023
 33491 0000255C E88303                  	call	CheckProtmanArena
 33492                                  	
 33493                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 33494                                  	;;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 33495                                  ;					;  created a bogus arena to try
 33496                                  ;					;  to protect some of its resident-
 33497                                  ;					;  init code.
 33498                                  	;call	CheckDoubleSpace
 33499 0000255F E961FB                  	jmp	coff
 33500                                  
 33501                                  ;----------------------------------------------------------------------------
 33502                                  
 33503                                  ;CheckDoubleSpace:
 33504                                  ;;;;	ifdef	dblspace_hooks
 33505                                  ;
 33506                                  ;;	Now check for two special MagicDrv cases:
 33507                                  ;;
 33508                                  ;;       a) the last driver load was MagicDrv final placement:
 33509                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 33510                                  ;;
 33511                                  ;;       b) MagicDrv is currently in temporary home:
 33512                                  ;;          -> call it to give it a chance to mount and shuffle drives
 33513                                  ;
 33514                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 33515                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 33516                                  ;
 33517                                  ;;	Now inquire of driver whether it is present, and final located
 33518                                  ;
 33519                                  ;	mov	ax,multMagicdrv ; 4A11h
 33520                                  ;	mov	bx,MD_VERSION ; 0
 33521                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 33522                                  ;	or	ax,ax			; is it there?
 33523                                  ;	jnz	short no_more_magic_calls ; done if not
 33524                                  ;
 33525                                  ;	test	dx,8000h		; is it final placed?
 33526                                  ;	jnz	short magic_not_yet_home ;  skip if not
 33527                                  ;
 33528                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 33529                                  ;;	don't keep checking it, and add its number of drive letters
 33530                                  ;;	to drivenumber.
 33531                                  ;
 33532                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 33533                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 33534                                  ;;					;  the drive number we'll pass to the
 33535                                  ;;					;  next loadable block device.
 33536                                  ;
 33537                                  ;	jmp	short no_more_magic_calls ; and finished.
 33538                                  ;
 33539                                  ;magic_not_yet_home:
 33540                                  ;	push	es
 33541                                  ;	push	si
 33542                                  ;
 33543                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 33544                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 33545                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 33546                                  ;
 33547                                  ;	mov	bx,2
 33548                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 33549                                  ;;					;   by this many units
 33550                                  ;
 33551                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 33552                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 33553                                  ;;					;  sees this, to prevent bad things
 33554                                  ;;					;  from happening if people run the
 33555                                  ;;					;  new driver with an old BIOS
 33556                                  ;	call	far [cs:MagicBackdoor]
 33557                                  ;
 33558                                  ;	pop	si
 33559                                  ;	pop	es
 33560                                  ;
 33561                                  ;no_more_magic_calls:
 33562                                  ;
 33563                                  ;;;;	endif
 33564                                  ;	retn
 33565                                  
 33566                                  ; 03/04/2019 - Retro DOS v4.0
 33567                                  
 33568                                  bad_bpb_size_sector:
 33569 00002562 5E                      	pop	si
 33570 00002563 07                      	pop	es
 33571 00002564 BA[E84A]                	mov	dx,badsiz_pre
 33572 00002567 BB[C64A]                	mov	bx,crlfm
 33573 0000256A E85A1F                  	call	prnerr
 33574                                  
 33575 0000256D E953FB                  	jmp	coff
 33576                                  
 33577                                  ;------------------------------------------------------------------------------
 33578                                  ; country command
 33579                                  ;      the syntax is:
 33580                                  ;	country=country id {,codepage {,path}}
 33581                                  ;	country=country id {,,path}	:default codepage id in dos
 33582                                  ;------------------------------------------------------------------------------
 33583                                  
 33584                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33585                                  	; (SYSINIT:2663h)
 33586                                  tryq:
 33587 00002570 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 33588 00002573 7403                    	je	short tryq_cont
 33589                                  skip_it3:
 33590 00002575 E90D01                  	jmp	tryf
 33591                                  tryq_cont:
 33592                                  
 33593                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33594                                  ; (SYSINIT:297Eh)
 33595                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33596                                  ;%if 0
 33597                                  ;ifdef	MULTI_CONFIG
 33598 00002578 E8361B                  	call	query_user		; query the user if config_cmd
 33599 0000257B 72F8                    	jc	short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 33600                                  ;endif
 33601                                  ;%endif ; 02/11/2022
 33602                                  
 33603                                  	; 31/12/2022
 33604                                  	;xor	bx,bx
 33605 0000257D 31C9                    	xor	cx,cx
 33606                                  	; 14/12/2022
 33607                                  	; ds = cs
 33608                                  	; bx = 0
 33609                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 33610                                  	;mov	word [cs:p_code_page],0
 33611                                  	; 31/12/2022
 33612                                  	; cx = 0
 33613                                  	;mov	[cntry_drv],bl ; 0
 33614                                  	;mov	[p_code_page],bx ; 0
 33615 0000257F 880E[7345]              	mov	[cntry_drv],cl ; 0
 33616 00002583 890E[E71D]              	mov	[p_code_page],cx ; 0	
 33617                                  
 33618 00002587 BF[B01D]                	mov	di,cntry_parms
 33619                                  	;xor	cx,cx	; 31/12/2022
 33620                                  	; 03/01/2023
 33621                                  	;mov	dx,cx
 33622                                  do52:
 33623 0000258A E86D03                  	call	sysinit_parse
 33624 0000258D 730B                    	jnc	short if52		; parse error,check error code and
 33625                                  
 33626 0000258F E8E000                  	call	cntry_error		; show message and end the search loop.
 33627                                  	; 14/12/2022
 33628                                  	; ds = cs
 33629 00002592 C706[E51D]FFFF          	mov	word [p_cntry_code],-1
 33630                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 33631 00002598 EB34                    	jmp	short sr52
 33632                                  if52:
 33633 0000259A 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 33634 0000259D 742F                    	jz	short sr52		; then end the search loop
 33635                                  
 33636                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 33637                                  	; 14/12/2022
 33638                                  	; ds = cs
 33639 0000259F 803E[821D]01            	cmp	byte [result_val],_$P_Number	
 33640                                  	;cmp	byte [cs:result_val],_$P_Number
 33641 000025A4 7512                    	jnz	short if56
 33642                                  
 33643                                  	;;mov	ax,[cs:rw_dword]
 33644                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 33645                                  	; 14/12/2022
 33646 000025A6 A1[861D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 33647 000025A9 83F901                  	cmp	cx,1
 33648 000025AC 7505                    	jne	short if57
 33649                                  
 33650                                  	;mov	[cs:p_cntry_code],ax
 33651                                  	; 14/12/2022
 33652 000025AE A3[E51D]                	mov	[p_cntry_code],ax
 33653                                  
 33654                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33655                                  	;jmp	short en57
 33656                                  	; 12/12/2022
 33657                                  	;jmp	short en56
 33658 000025B1 EBD7                    	jmp	short do52
 33659                                  if57:
 33660                                  	;mov	[cs:p_code_page],ax
 33661                                  	; 14/12/2022
 33662                                  	; ds = cs
 33663 000025B3 A3[E71D]                	mov	[p_code_page],ax
 33664                                  en57:
 33665                                  	;jmp	short en56		; path entered
 33666                                  	; 12/12/2022
 33667 000025B6 EBD2                    	jmp	short do52
 33668                                  if56:
 33669 000025B8 1E                      	push	ds
 33670 000025B9 06                      	push	es
 33671 000025BA 56                      	push	si
 33672 000025BB 57                      	push	di
 33673                                  
 33674 000025BC 0E                      	push	cs
 33675 000025BD 07                      	pop	es
 33676                                  
 33677                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 33678                                  	; 14/12/2022
 33679 000025BE C536[861D]              	lds	si,[rv_dword]
 33680 000025C2 BF[7345]                	mov	di,cntry_drv
 33681 000025C5 E8EE1E                  	call	move_asciiz
 33682                                  
 33683 000025C8 5F                      	pop	di
 33684 000025C9 5E                      	pop	si
 33685 000025CA 07                      	pop	es
 33686 000025CB 1F                      	pop	ds
 33687                                  en56:
 33688 000025CC EBBC                    	jmp	short do52
 33689                                  sr52:
 33690                                  	; 14/12/2022
 33691                                  	; ds = cs
 33692 000025CE 833E[E51D]FF            	cmp	word [p_cntry_code],-1
 33693                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 33694 000025D3 7509                    	jne	short tryq_open
 33695 000025D5 E9EBFA                  	jmp	coff
 33696                                  
 33697                                  tryqbad:				;"invalid country code or code page"
 33698 000025D8 F9                      	stc
 33699 000025D9 BA[2F4B]                	mov     dx,badcountry
 33700 000025DC EB79                    	jmp     tryqchkerr
 33701                                  
 33702                                  tryq_open:
 33703                                  	; 14/12/2022
 33704                                  	; ds = cs
 33705 000025DE 803E[7345]00            	cmp	byte [cntry_drv],0
 33706                                  	;cmp	byte [cs:cntry_drv],0
 33707 000025E3 7405                    	je	short tryq_def
 33708 000025E5 BA[7345]                	mov	dx,cntry_drv
 33709 000025E8 EB03                    	jmp	short tryq_openit
 33710                                  
 33711                                  tryq_def:
 33712 000025EA BA[7545]                	mov	dx,cntry_root
 33713                                  tryq_openit:
 33714 000025ED B8003D                  	mov	ax,3D00h		;open a file
 33715 000025F0 F9                      	stc
 33716 000025F1 CD21                    	int	21h
 33717 000025F3 7242                    	jc	short tryqfilebad	;open failure
 33718                                  
 33719                                  	; 14/12/2022
 33720                                  	; ds = cs
 33721 000025F5 A3[5C03]                	mov	[cntryfilehandle],ax
 33722                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 33723 000025F8 89C3                    	mov	bx,ax
 33724 000025FA A1[E51D]                	mov	ax,[p_cntry_code]
 33725 000025FD 8B16[E71D]              	mov	dx,[p_code_page]
 33726                                  	;mov	ax,[cs:p_cntry_code]
 33727                                  	;mov	dx,[cs:p_code_page]	;now,ax=country id,bx=filehandle
 33728                                  	;mov	cx,[cs:memhi]
 33729 00002601 8B0E[6403]              	mov	cx,[memhi]
 33730 00002605 81C18001                	add	cx,384			;need 6k buffer to handle country.sys
 33731                                  					;M023
 33732                                  	; 14/12/2022
 33733                                  	; ds = cs
 33734 00002609 3B0E[A502]              	cmp	cx,[ALLOCLIM]
 33735                                  	;cmp	cx,[cs:ALLOCLIM]
 33736 0000260D 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 33737                                  
 33738 0000260F BE[7345]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 33739 00002612 803C00                  	cmp	byte [si],0 		;default path?
 33740 00002615 7502                    	jne	short tryq_set_for_dos
 33741                                  
 33742 00002617 46                      	inc	si
 33743 00002618 46                      	inc	si			;ds:si -> cntry_root
 33744                                  
 33745                                  tryq_set_for_dos:
 33746                                  	; 14/12/2022
 33747                                  	; ds = cs
 33748 00002619 C43E[7902]              	les	di,[sysi_country]
 33749                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 33750 0000261D 57                      	push	di			;save di
 33751                                  	;add	di,8
 33752 0000261E 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 33753 00002621 E8921E                  	call	move_asciiz		;set the path to country.sys in dos.
 33754 00002624 5F                      	pop	di			;es:di -> country info tab again.
 33755                                  
 33756                                  	; 14/12/2022	
 33757 00002625 8B0E[6403]              	mov	cx,[memhi]
 33758                                  	;mov	cx,[cs:memhi]
 33759 00002629 8ED9                    	mov	ds,cx
 33760 0000262B 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 33761 0000262D E8221D                  	call	setdoscountryinfo	;now do the job!!!
 33762                                  	; ds <> cs ; 14/12/2022
 33763 00002630 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 33764                                  
 33765 00002632 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 33766 00002635 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 33767                                  
 33768                                  tryqfilebad:
 33769 00002637 0E                      	push	cs
 33770 00002638 07                      	pop	es
 33771 00002639 2E803E[7345]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 33772 0000263F 7405                    	je	short tryqdefbad
 33773                                  
 33774 00002641 BE[7345]                	mov	si,cntry_drv
 33775 00002644 EB03                    	jmp	short tryqbadload
 33776                                  
 33777                                  tryqdefbad:				;default file has been used.
 33778 00002646 BE[7545]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 33779                                  tryqbadload:
 33780 00002649 E8751E                  	call	badload 		;ds will be restored to sysinit_seg
 33781                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33782                                  	; (SYSINIT:2A69h)
 33783 0000264C 8B0E[A302]              	mov	cx,[CONFBOT] ; ds = cs (from badload)
 33784                                  	;mov	cx,[cs:CONFBOT]
 33785                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33786                                  	;mov	cx,[cs:top_of_cdss]
 33787                                  	; 11/12/2022
 33788                                  	; ds = cs
 33789                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 33790 00002650 8EC1                    	mov	es,cx			;restore es -> confbot.
 33791 00002652 EB13                    	jmp	short coffj4
 33792                                  
 33793                                  tryqmemory:
 33794 00002654 BA[724B]                	mov	dx,insufmemory
 33795                                  tryqchkerr:
 33796                                  	;mov	cx,[cs:CONFBOT]
 33797                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33798                                  	;mov	cx,[cs:top_of_cdss]
 33799                                  	; 12/12/2022
 33800 00002657 0E                      	push	cs
 33801 00002658 1F                      	pop	ds
 33802                                  	; 31/12/2022 - Retro DOS v4.2
 33803 00002659 8B0E[A302]              	mov	cx,[CONFBOT] ; (MSDOS 6.21 IO.SYS, SYSINIT)
 33804                                  	;mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 33805 0000265D 8EC1                    	mov	es,cx			;restore es -> confbot seg
 33806                                  	;push	cs
 33807                                  	;pop	ds			;restore ds to sysinit_seg
 33808 0000265F 7306                    	jnc	short coffj4		;if no error,then exit
 33809                                  
 33810 00002661 E8851E                  	call	print			;else show error message
 33811 00002664 E8E602                  	call	error_line
 33812                                  coffj4:
 33813                                  	;mov	bx,[cs:cntryfilehandle]
 33814                                  	; 11/12/2022
 33815                                  	; ds = cs
 33816 00002667 8B1E[5C03]              	mov	bx,[cntryfilehandle]
 33817 0000266B B43E                    	mov	ah,3Eh
 33818 0000266D CD21                    	int	21h			;close a file. don't care even if it fails.
 33819 0000266F E951FA                  	jmp	coff
 33820                                  
 33821                                  ;--------------------------------------------
 33822                                  
 33823                                  cntry_error:
 33824                                  
 33825                                  ;function: show "invalid country code or code page" messages,or
 33826                                  ;		"error in country command" depending on the error code
 33827                                  ;		in ax returned by sysparse;
 33828                                  ;in:	ax - error code
 33829                                  ;	ds - sysinitseg
 33830                                  ;	es - confbot
 33831                                  ;out:	show message.  dx destroyed.
 33832                                  
 33833 00002672 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 33834 00002675 7505                    	jne	short if64
 33835 00002677 BA[2F4B]                	mov	dx,badcountry		;"invalid country code or code page"
 33836 0000267A EB03                    	jmp	short en64
 33837                                  if64:
 33838 0000267C BA[554B]                	mov	dx,badcountrycom	;"error in contry command"
 33839                                  en64:
 33840 0000267F E8671E                  	call	print
 33841                                  	;call	error_line
 33842                                  	;retn
 33843                                  	; 11/12/2022
 33844 00002682 E9C802                  	jmp	error_line
 33845                                  
 33846                                  ;------------------------------------------------------------------------------
 33847                                  ; files command
 33848                                  ;------------------------------------------------------------------------------
 33849                                  
 33850                                  ;******************************************************************************
 33851                                  ; function: parse the parameters of files= command.			      *
 33852                                  ;									      *
 33853                                  ; input :								      *
 33854                                  ;	es:si -> parameters in command line.				      *
 33855                                  ; output:								      *
 33856                                  ;	variable files set.						      *
 33857                                  ;									      *
 33858                                  ; subroutines to be called:						      *
 33859                                  ;	sysinit_parse							      *
 33860                                  ; logic:								      *
 33861                                  ; {									      *
 33862                                  ;	set di points to files_parms;					      *
 33863                                  ;	set dx,cx to 0; 						      *
 33864                                  ;	while (end of command line)					      *
 33865                                  ;	{ sysinit_parse;						      *
 33866                                  ;	  if (no error) then						      *
 33867                                  ;	     files = result_val._$P_picked_val				      *
 33868                                  ;	  else								      *
 33869                                  ;	     error exit;						      *
 33870                                  ;	};								      *
 33871                                  ; };									      *
 33872                                  ;									      *
 33873                                  ;******************************************************************************
 33874                                  
 33875                                  tryf:
 33876 00002685 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 33877 00002688 7528                    	jne	short tryl
 33878                                  
 33879                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33880                                  ; (SYSINIT:2AABh)
 33881                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33882                                  ;%if 0
 33883                                  ;ifdef	MULTI_CONFIG
 33884 0000268A E8241A                  	call	query_user              ; query the user if config_cmd
 33885 0000268D 7223                    	jc	short tryl		; has the CONFIG_OPTION_QUERY bit set
 33886                                  ;endif
 33887                                  ;%endif ; 30/10/2022
 33888                                  
 33889                                  	; 14/12/2022
 33890                                  	; ds = cs
 33891                                  
 33892 0000268F BF[E91D]                	mov	di,files_parms
 33893 00002692 31C9                    	xor	cx,cx
 33894                                  	; 03/01/2023
 33895                                  	;mov	dx,cx
 33896                                  do67:
 33897 00002694 E86302                  	call	sysinit_parse
 33898 00002697 7303                    	jnc	short if67		; parse error
 33899                                  	;call	badparm_p		;  and show messages and end the search loop.
 33900                                  	;jmp	short sr67
 33901                                  	; 03/01/2023
 33902 00002699 E98D01                  	jmp	badparm_p_coff
 33903                                  if67:
 33904 0000269C 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 33905 0000269F 7408                    	je	short en67		; then end the $endloop
 33906                                  
 33907                                  	; 14/12/2022
 33908                                  	; ds = cs
 33909                                  	;;mov	al,[cs:rv_dword]
 33910                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 33911                                  	;mov	[cs:p_files],al		; save it temporarily
 33912                                  	;mov	al,[rv_dword]
 33913 000026A1 A0[861D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 33914 000026A4 A2[081E]                	mov	[p_files],al
 33915                                  
 33916 000026A7 EBEB                    	jmp	short do67
 33917                                  en67:
 33918                                  	; 14/12/2022
 33919                                  	; ds = cs
 33920 000026A9 A0[081E]                	mov	al,[p_files]
 33921 000026AC A2[9F02]                	mov	[FILES],al	
 33922                                  	;mov	al,[cs:p_files]
 33923                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 33924                                  sr67:
 33925 000026AF E911FA                  	jmp	coff
 33926                                  
 33927                                  ; 04/04/2019 - Retro DOS v4.0
 33928                                  
 33929                                  ;------------------------------------------------------------------------------
 33930                                  ; lastdrive command
 33931                                  ;------------------------------------------------------------------------------
 33932                                  
 33933                                  ;******************************************************************************
 33934                                  ; function: parse the parameters of lastdrive= command. 		      *
 33935                                  ;									      *
 33936                                  ; input :								      *
 33937                                  ;	es:si -> parameters in command line.				      *
 33938                                  ; output:								      *
 33939                                  ;	set the variable num_cds.					      *
 33940                                  ;									      *
 33941                                  ; subroutines to be called:						      *
 33942                                  ;	sysinit_parse							      *
 33943                                  ; logic:								      *
 33944                                  ; {									      *
 33945                                  ;	set di points to ldrv_parms;					      *
 33946                                  ;	set dx,cx to 0; 						      *
 33947                                  ;	while (end of command line)					      *
 33948                                  ;	{ sysinit_parse;						      *
 33949                                  ;	  if (no error) then						      *
 33950                                  ;	     set num_cds to the returned value; 			      *
 33951                                  ;	  else	/*error exit*/						      *
 33952                                  ;	     error exit;						      *
 33953                                  ;	};								      *
 33954                                  ; };									      *
 33955                                  ;									      *
 33956                                  ;******************************************************************************
 33957                                  
 33958                                  tryl:
 33959 000026B2 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 33960 000026B5 7528                    	jne	short tryp
 33961                                  
 33962                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 33963                                  ; (SYSINIT:2AE0h)
 33964                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33965                                  ;%if 0
 33966 000026B7 E8F719                  	call	query_user      ; query the user if config_cmd
 33967 000026BA 7223                    	jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 33968                                  ;endif
 33969                                  ;%endif ; 30/10/2022
 33970                                  
 33971                                  	; 14/12/2022
 33972                                  	; ds = cs
 33973                                  
 33974 000026BC BF[401E]                	mov	di,ldrv_parms
 33975 000026BF 31C9                    	xor	cx,cx
 33976                                  	; 03/01/2023
 33977                                  	;mov	dx,cx
 33978                                  do73:
 33979 000026C1 E83602                  	call	sysinit_parse
 33980 000026C4 7303                    	jnc	short if73	; parse error
 33981                                  	;call	badparm_p	;  and show messages and end the search loop.
 33982                                  	;jmp	short sr73
 33983                                  	; 03/01/2023
 33984 000026C6 E96001                  	jmp	badparm_p_coff
 33985                                  if73:
 33986 000026C9 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 33987 000026CC 7408                    	je	short en73	; then end the $endloop
 33988                                  
 33989                                  	; 14/12/2022
 33990                                  	; ds = cs
 33991                                  	;;mov	al,[cs:rv_dword]
 33992                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 33993                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 33994                                  
 33995                                  	;mov	al,[rv_dword]
 33996 000026CE A0[861D]                	mov	al,[rv_byte]
 33997 000026D1 A2[541E]                	mov	[p_ldrv],al
 33998                                  
 33999 000026D4 EBEB                    	jmp	short do73
 34000                                  en73:
 34001                                  	; 14/12/2022
 34002                                  	; ds = cs
 34003 000026D6 A0[541E]                	mov	al,[p_ldrv]
 34004 000026D9 A2[A202]                	mov	[NUM_CDS],al
 34005                                  	;mov	al,[cs:p_ldrv]
 34006                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 34007                                  sr73:
 34008 000026DC E9E4F9                  	jmp	coff
 34009                                  
 34010                                  ;--------------------------------------------------------------------------
 34011                                  ; setting drive parameters
 34012                                  ;--------------------------------------------------------------------------
 34013                                  
 34014                                  tryp:
 34015 000026DF 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 34016 000026E2 7516                    	jne	short tryk
 34017                                  
 34018                                  ; 31/12/2022 - Retro DOS v4.2
 34019                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34020                                  ;%if 0
 34021                                  ;ifdef	MULTI_CONFIG
 34022 000026E4 E8CA19                  	call	query_user      ; query the user if config_cmd
 34023 000026E7 7211                    	jc	short tryk	; has the CONFIG_OPTION_QUERY bit set
 34024                                  ;endif
 34025                                  ;%endif ; 30/10/2022
 34026                                  
 34027 000026E9 E8AE0E                  	call	parseline
 34028 000026EC 7209                    	jc	short trypbad
 34029 000026EE E8C70D                  	call	setparms
 34030 000026F1 E8090E                  	call	diddleback
 34031                                  
 34032                                  ; No error check here, because setparms and diddleback have no error 
 34033                                  ; returns, and setparms as coded now can return with carry set. 
 34034                                  ;       jc	short trypbad
 34035                                  
 34036                                  	; 12/12/2022
 34037                                  	; cf = 0
 34038                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34039                                  	;jc	short trypbad
 34040                                  	
 34041 000026F4 E9CCF9                  	jmp	coff
 34042                                  trypbad:
 34043 000026F7 E91F02                  	jmp	badop
 34044                                  
 34045                                  ;--------------------------------------------------------------------------
 34046                                  ; setting internal stack parameters
 34047                                  ; stacks=m,n where
 34048                                  ;	m is the number of stacks (range 8 to 64,default 9)
 34049                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 34050                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 34051                                  ;	any combinations that are not within the specified limits will
 34052                                  ;	result in "unrecognized command" error.
 34053                                  ;--------------------------------------------------------------------------
 34054                                  
 34055                                  ;**************************************************************************
 34056                                  ;									  *
 34057                                  ; function: parse the parameters of stacks= command.			  *
 34058                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 34059                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 34060                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 34061                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 34062                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 34063                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 34064                                  ;	    (or if "0,0" pair has been entered.)			  *
 34065                                  ; input :								  *
 34066                                  ;	es:si -> parameters in command line.				  *
 34067                                  ; output:								  *
 34068                                  ;	set the variables stack_count,stack_size.			  *
 34069                                  ;									  *
 34070                                  ; subroutines to be called:						  *
 34071                                  ;	sysinit_parse							  *
 34072                                  ; logic:								  *
 34073                                  ; {									  *
 34074                                  ;	set di points to stks_parms;					  *
 34075                                  ;	set dx,cx to 0; 						  *
 34076                                  ;	while (end of command line)					  *
 34077                                  ;	{ sysinit_parse;						  *
 34078                                  ;	  if (no error) then						  *
 34079                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 34080                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 34081                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 34082                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 34083                                  ;	     }								  *
 34084                                  ;	  else	/*error exit*/						  *
 34085                                  ;	     error exit;						  *
 34086                                  ;	};								  *
 34087                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 34088                                  ;	if o.k.,then set stack_count,stack_size;			  *
 34089                                  ;	 else error_exit;						  *
 34090                                  ; };									  *
 34091                                  ;**************************************************************************
 34092                                  
 34093                                  tryk:
 34094                                          ;if      stacksw
 34095                                  
 34096 000026FA 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 34097 000026FD 7402                    	je	short do_tryk
 34098                                  skip_it4:
 34099 000026FF EB79                    	jmp	short trys	; 15/12/2022
 34100                                  do_tryk:
 34101                                  
 34102                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34103                                  ; (SYSINIT:2B33h)
 34104                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34105                                  ;%if 0
 34106                                  ;ifdef	MULTI_CONFIG
 34107 00002701 E8AD19                         call	query_user              ; query the user if config_cmd
 34108 00002704 72F9                           jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 34109                                  ;endif
 34110                                  ;%endif	; 30/10/2022
 34111                                  
 34112                                  	; 14/12/2022
 34113                                  	; ds = cs
 34114                                  
 34115 00002706 BF[551E]                	mov	di,stks_parms
 34116 00002709 31C9                    	xor	cx,cx
 34117                                  	; 03/01/2023
 34118                                  	;mov	dx,cx
 34119                                  do79:
 34120 0000270B E8EC01                  	call	sysinit_parse
 34121 0000270E 730B                    	jnc	short if79		; parse error
 34122                                  
 34123 00002710 BA[E14B]                	mov	dx,badstack		; "invalid stack parameter"
 34124 00002713 E8D31D                  	call	print			;  and show messages and end the search loop.
 34125 00002716 E83402                  	call	error_line
 34126                                  	;jmp	sr79
 34127                                  	; 11/12/2022
 34128 00002719 EB39                    	jmp	short sr79
 34129                                  if79:
 34130 0000271B 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 34131 0000271E 7412                    	je	short en79		; then end the $endloop
 34132                                  
 34133                                  	; 14/12/2022
 34134                                  	; ds = cs
 34135                                  
 34136                                  	;;mov	ax,[cs:rv_dword]
 34137                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 34138                                  	;mov	ax,[rv_dword]
 34139 00002720 A1[861D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 34140                                  
 34141 00002723 83F901                  	cmp	cx,1
 34142 00002726 7505                    	jne	short if83
 34143                                  
 34144                                  	; 14/12/2022
 34145                                  	;mov	[cs:p_stack_count],ax
 34146                                  	;jmp	short en83
 34147 00002728 A3[8A1E]                	mov	[p_stack_count],ax
 34148 0000272B EBDE                    	jmp	short do79
 34149                                  if83:
 34150                                  	; 14/12/2022
 34151                                  	;mov	[cs:p_stack_size],ax
 34152 0000272D A3[8C1E]                	mov	[p_stack_size],ax
 34153                                  en83:
 34154 00002730 EBD9                    	jmp	short do79
 34155                                  en79:
 34156                                  	; 14/12/2022
 34157                                  	; ds = cs
 34158 00002732 A1[8A1E]                	mov	ax,[p_stack_count]
 34159 00002735 09C0                    	or	ax,ax
 34160 00002737 741E                    	jz	short if87		
 34161                                  
 34162                                  	; 14/12/2022
 34163                                  	;cmp	word [p_stack_count],0
 34164                                  	;;cmp	word [cs:p_stack_count],0
 34165                                  	;je	short if87
 34166                                  
 34167                                  	; 14/12/2022
 34168 00002739 83F808                  	cmp	ax, mincount ; 8
 34169                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 34170                                  	; 15/12/2022
 34171 0000273C 721F                    	jb	short en87
 34172 0000273E 833E[8C1E]20            	cmp	word [p_stack_size],minsize ; 32
 34173                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 34174                                  	; 15/12/2022
 34175 00002743 7218                    	jb	short en87
 34176                                  if94:
 34177                                  	; 14/12/2022
 34178                                  	; ds = cs
 34179                                  	; ax = [p_stack_count]
 34180                                  	;mov	ax,[p_stack_count]
 34181                                  	;;mov	ax,[cs:p_stack_count]
 34182 00002745 A3[8C02]                	mov	[stack_count],ax
 34183                                  	;mov	[cs:stack_count],ax
 34184                                  	;mov	ax,[cs:p_stack_size]
 34185 00002748 A1[8C1E]                	mov	ax,[p_stack_size]
 34186                                  	;mov	[cs:stack_size],ax
 34187 0000274B A3[8E02]                	mov	[stack_size],ax
 34188                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 34189 0000274E C706[9002]FFFF          	mov	word [stack_addr],-1
 34190                                  sr79:
 34191 00002754 E96CF9                  	jmp	coff
 34192                                  
 34193                                  if87:
 34194                                  	; 14/12/2022
 34195 00002757 3906[8C1E]              	cmp	[p_stack_size],ax ; 0
 34196 0000275B 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 34197                                  	;cmp	word [cs:p_stack_size],0
 34198                                  	;je	short if94
 34199                                  en87:
 34200                                  	; 15/12/2022
 34201                                  	; ([p_stack_count] is invalid, use default values)
 34202                                  	; 14/12/2022
 34203                                  	; ds = cs
 34204 0000275D C706[8C02]0900          	mov	word [stack_count],defaultcount ; 9
 34205 00002763 C706[8E02]8000          	mov	word [stack_size],defaultsize ; 128
 34206 00002769 C706[9002]0000          	mov	word [stack_addr],0
 34207                                  	;mov	word [cs:stack_count],defaultcount ; 9
 34208                                  	;				; reset to default value.
 34209                                  	;mov	word [cs:stack_size],defaultsize ; 128
 34210                                  	;mov	word [cs:stack_addr],0
 34211                                  
 34212 0000276F BA[E14B]                	mov	dx,badstack
 34213 00002772 E8741D                  	call	print
 34214 00002775 E8D501                  	call	error_line
 34215 00002778 EBDA                    	jmp	short sr79
 34216                                  
 34217                                  ; 15/12/2022
 34218                                  %if 0
 34219                                  	mov	di,stks_parms
 34220                                  	xor	cx,cx
 34221                                  	; 03/01/2023
 34222                                  	;mov	dx,cx
 34223                                  do79:
 34224                                  	call	sysinit_parse
 34225                                  	jnc	short if79		; parse error
 34226                                  
 34227                                  	mov	dx,badstack		; "invalid stack parameter"
 34228                                  	call	print			;  and show messages and end the search loop.
 34229                                  	call	error_line
 34230                                  	;jmp	sr79
 34231                                  	; 11/12/2022
 34232                                  	jmp	short sr79
 34233                                  if79:
 34234                                  	cmp	ax,_$P_RC_EOL		; end of line?
 34235                                  	je	short en79		; then end the $endloop
 34236                                  
 34237                                  	;mov	ax,[cs:rv_dword]
 34238                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 34239                                  	cmp	cx,1
 34240                                  	jne	short if83
 34241                                  
 34242                                  	mov	[cs:p_stack_count],ax
 34243                                  	jmp	short en83
 34244                                  if83:
 34245                                  	mov	[cs:p_stack_size],ax
 34246                                  en83:
 34247                                  	jmp	short do79
 34248                                  en79:
 34249                                  	cmp	word [cs:p_stack_count],0
 34250                                  	je	short if87
 34251                                  
 34252                                  	cmp	word [cs:p_stack_count],mincount ; 8
 34253                                  	jb	short ll88
 34254                                  	cmp	word [cs:p_stack_size],minsize ; 32
 34255                                  	jnb	short if88
 34256                                  ll88:
 34257                                  	mov	word [cs:p_stack_count],-1 ; invalid
 34258                                  if88:
 34259                                  	jmp	short en87
 34260                                  
 34261                                  	; 11/12/2022
 34262                                  if94:
 34263                                  	mov	ax,[cs:p_stack_count]
 34264                                  	mov	[cs:stack_count],ax
 34265                                  	mov	ax,[cs:p_stack_size]
 34266                                  	mov	[cs:stack_size],ax
 34267                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 34268                                  sr79:
 34269                                  	jmp	coff
 34270                                  
 34271                                  if87:
 34272                                  	cmp	word [cs:p_stack_size],0
 34273                                  	je	short en87
 34274                                  	mov	word [cs:p_stack_count],-1 ; invalid
 34275                                  en87:
 34276                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 34277                                  	jne	short if94
 34278                                  
 34279                                  	mov	word [cs:stack_count],defaultcount ; 9
 34280                                  					; reset to default value.
 34281                                  	mov	word [cs:stack_size],defaultsize ; 128
 34282                                  	mov	word [cs:stack_addr],0
 34283                                  
 34284                                  	mov	dx,badstack
 34285                                  	call	print
 34286                                  	call	error_line
 34287                                  	jmp	short sr79
 34288                                  
 34289                                  %endif
 34290                                  
 34291                                  ; 11/12/2022
 34292                                  %if 0 
 34293                                  if94:
 34294                                  	mov	ax,[cs:p_stack_count]
 34295                                  	mov	[cs:stack_count],ax
 34296                                  	mov	ax,[cs:p_stack_size]
 34297                                  	mov	[cs:stack_size],ax
 34298                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 34299                                  sr79:
 34300                                  	jmp	coff
 34301                                  %endif
 34302                                  	;endif
 34303                                  
 34304                                  ;------------------------------------------------------------------------
 34305                                  ; shell command
 34306                                  ;------------------------------------------------------------------------
 34307                                  
 34308                                  trys:
 34309 0000277A 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 34310 0000277D 755B                    	jne	short tryx
 34311                                  
 34312                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34313                                  ; (SYSINIT:2BE1h)
 34314                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34315                                  ;%if 0
 34316                                  ;ifdef	MULTI_CONFIG
 34317 0000277F E82F19                  	call	query_user              ; query the user if config_cmd
 34318 00002782 7256                    	jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 34319 00002784 2EC606[C045]01          	mov	byte [cs:newcmd],1
 34320                                  ;endif
 34321                                  ;%endif ; 30/10/2022
 34322                                  
 34323                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 34324                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34325                                  	;mov	byte [cs:command_line+1],0
 34326                                  	; 15/12/2022
 34327                                  	; ds = cs
 34328                                  	; 08/09/2023
 34329                                  	;mov	byte [command_line+1],0
 34330 0000278A C706[5146]0000          	mov	word [command_line],0	; zap length,first byte of command-line
 34331                                  
 34332 00002790 BF[C445]                        mov     di,commnd+1		; we already have the first char
 34333 00002793 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 34334                                  storeshell:
 34335 00002796 E8AB1A                  	call	getchr
 34336 00002799 08C0                            or      al,al                   ; this is the normal case: "organize"
 34337 0000279B 741C                            jz	short getshparms	; put a ZERO right after the filename
 34338                                  
 34339 0000279D 3C20                            cmp     al," "                  ; this may happen if there are no args
 34340 0000279F 7209                            jb	short endofshell	; I suppose...
 34341 000027A1 8805                    	mov	[di],al
 34342 000027A3 47                      	inc	di
 34343                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 34344                                          ;jb	short storeshell	; commnd (the filename)
 34345                                          ;jmp	short endofshell
 34346                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34347                                  	;jmp	short storeshell
 34348                                  	; 03/01/2023
 34349 000027A4 81FF[0246]              	cmp	di,commnd+63		; this makes sure we don't overflow
 34350 000027A8 72EC                            jb	short storeshell	; commnd (the filename)
 34351                                  	;jmp	short endofshell
 34352                                  
 34353                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34354                                  ;getshparms:
 34355                                  ;	mov     byte [di],0		; zero-terminate the filename
 34356                                  ;	mov     di,command_line+1	; prepare to process the command-line
 34357                                  ;
 34358                                  ;parmloop:
 34359                                  ;	call	getchr
 34360                                  ;	cmp	al," "
 34361                                  ;	jb	short endofparms
 34362                                  ;	mov	[di],al
 34363                                  ;	inc	di
 34364                                  ;	cmp     di,command_line+126
 34365                                  ;	jb	short parmloop
 34366                                  ;endofparms:
 34367                                  ;	mov     cx,di
 34368                                  ;	sub     cx,command_line+1
 34369                                  ;	mov     [cs:command_line],cl
 34370                                  ;
 34371                                  ;endofshell:
 34372                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 34373                                  ;					; the command-line as the case may be)
 34374                                  ;skipline:
 34375                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 34376                                  ;       je	short endofline		; the line: watch for ever-present LF
 34377                                  ;call	getchr
 34378                                  ;       jnc	short skipline		; keep it up as long as there are chars
 34379                                  ;
 34380                                  ;endofline:
 34381                                  ;       jmp     conflp
 34382                                  
 34383                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34384                                  endofshell:
 34385 000027AA C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 34386                                  					; the command-line as the case may be)
 34387                                  	; 11/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 34388                                  	; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 34389                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:314Eh
 34390                                  	;call	getchr
 34391                                  skipline:		; MSDOS 6.21 IO.SYS - SYSINIT:2C33h
 34392 000027AD 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 34393 000027AF 7405                    	je	short endofline		; the line: watch for ever-present LF
 34394 000027B1 E8901A                  	call	getchr
 34395                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.1 IO.SYS)
 34396                                  	; (SYSINIT:2C3Ah)
 34397 000027B4 73F7                    	jnb	short skipline
 34398                                  	
 34399                                  endofline:
 34400 000027B6 E9B3F8                  	jmp     conflp
 34401                                  
 34402                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34403                                  getshparms:
 34404                                  	; 18/12/2022
 34405                                  	; al = 0
 34406 000027B9 8805                    	mov	[di],al ; 0
 34407                                  	;mov	byte [di],0		; zero-terminate the filename
 34408 000027BB BF[5246]                	mov     di,command_line+1	; prepare to process the command-line
 34409                                  parmloop:
 34410 000027BE E8831A                  	call	getchr
 34411 000027C1 3C20                    	cmp	al," " ; 20h
 34412                                  	;jb	short endofshell
 34413                                  	; 03/01/2023
 34414 000027C3 7209                    	jb	short endofparms
 34415                                  
 34416 000027C5 8805                    	mov	[di],al
 34417 000027C7 47                      	inc	di
 34418                                  	;jmp	short parmloop
 34419                                  	; 03/01/2023 - Retro DOS v4.2
 34420 000027C8 81FF[CF46]              	cmp     di,command_line+126
 34421 000027CC 72F0                    	jb	short parmloop
 34422                                  
 34423                                  	; 03/01/2023 - Retro DOS v4.2
 34424                                  endofparms:
 34425 000027CE 89F9                    	mov	cx,di
 34426 000027D0 81E9[5246]              	sub	cx,command_line+1
 34427                                  	;mov	[cs:command_line],cl
 34428                                  	; 03/01/2023
 34429 000027D4 880E[5146]              	mov	[command_line],cl
 34430 000027D8 EBD0                    	jmp	short endofshell
 34431                                  
 34432                                  ;------------------------------------------------------------------------
 34433                                  ; fcbs command
 34434                                  ;------------------------------------------------------------------------
 34435                                  
 34436                                  ;************************************************************************
 34437                                  ; function: parse the parameters of fcbs= command.			*
 34438                                  ;									*
 34439                                  ; input :								*
 34440                                  ;	es:si -> parameters in command line.				*
 34441                                  ; output:								*
 34442                                  ;	set the variables fcbs,keep.					*
 34443                                  ;									*
 34444                                  ; subroutines to be called:						*
 34445                                  ;	sysinit_parse							*
 34446                                  ; logic:								*
 34447                                  ; {									*
 34448                                  ;	set di points to fcbs_parms;					*
 34449                                  ;	set dx,cx to 0; 						*
 34450                                  ;	while (end of command line)					*
 34451                                  ;	{ sysparse;							*
 34452                                  ;	  if (no error) then						*
 34453                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 34454                                  ;		   fcbs = result_val._$P_picked_val;			*
 34455                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 34456                                  ;		   keep = result_val._$P_picked_val;			*
 34457                                  ;	     }								*
 34458                                  ;	  else	/*error exit*/						*
 34459                                  ;	     error exit;						*
 34460                                  ;	};								*
 34461                                  ; };									*
 34462                                  ;************************************************************************
 34463                                  
 34464                                  tryx:
 34465 000027DA 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 34466                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34467 000027DD 7534                    	jne	short try1
 34468                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34469                                  	;jne	short tryy	; comment command
 34470                                  
 34471                                  ; 31/12/2022 - Retro DOS v4.2
 34472                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34473                                  ;%if 0
 34474                                  ;ifdef	MULTI_CONFIG
 34475 000027DF E8CF18                  	call	query_user      ; query the user if config_cmd
 34476 000027E2 722F                    	jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 34477                                  ;endif
 34478                                  ;%endif ; 30/10/2022
 34479                                  
 34480 000027E4 BF[091E]                	mov	di,fcbs_parms
 34481 000027E7 31C9                    	xor	cx,cx
 34482                                  	; 03/01/2023
 34483                                  	;mov	dx,cx
 34484                                  do98:
 34485 000027E9 E80E01                  	call	sysinit_parse
 34486                                          ; 03/01/2023
 34487                                  	;jnc	short if98	; parse error
 34488                                          ;call	badparm_p	;  and show messages and end the search loop.
 34489                                  	;jmp	short sr98
 34490                                  	;------------------------
 34491                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34492 000027EC 723B                    	jc	short badparm_p_coff
 34493                                  if98:
 34494 000027EE 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 34495 000027F1 7412                    	je	short en98	; then end the $endloop
 34496                                  
 34497                                  	;;mov	al,[cs:rv_dword]
 34498                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 34499                                  	; 15/12/2022
 34500                                  	; ds = cs
 34501 000027F3 A0[861D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 34502 000027F6 83F901                  	cmp	cx,1		; the first positional?
 34503 000027F9 7505                    	jne	short if102
 34504                                  	;mov	[cs:p_fcbs],al
 34505                                  	; 15/12/2022
 34506 000027FB A2[3E1E]                	mov	[p_fcbs],al
 34507                                  	;jmp	short en102
 34508 000027FE EBE9                    	jmp	short do98
 34509                                  if102:
 34510                                  	;mov	[cs:p_keep],al
 34511                                  	; 15/12/2022
 34512 00002800 A2[3F1E]                	mov	[p_keep],al
 34513                                  en102:
 34514 00002803 EBE4                    	jmp	short do98
 34515                                  en98:
 34516                                  	; 15/12/2022
 34517                                  	; ds = cs
 34518 00002805 A0[3E1E]                	mov	al,[p_fcbs]
 34519 00002808 A2[A002]                	mov	[FCBS],al
 34520 0000280B C606[A102]00            	mov	byte [KEEP],0
 34521                                  	;mov	al,[cs:p_fcbs]	 ; M017
 34522                                  	;mov	[cs:FCBS],al	 ; M017
 34523                                  	;mov	byte [cs:KEEP],0 ; M017
 34524                                  sr98:
 34525 00002810 E9B0F8                  	jmp	coff
 34526                                  
 34527                                  ; 31/12/2022 - Retro DOS v4.2
 34528                                  %if 0
 34529                                  
 34530                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34531                                  ;-------------------------------------------------------------------------
 34532                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 34533                                  ;		line number
 34534                                  ;-------------------------------------------------------------------------
 34535                                  
 34536                                  tryy:
 34537                                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 34538                                  	jne	short try0
 34539                                  
 34540                                  donothing:
 34541                                  	; 15/12/2022
 34542                                  	; ds = cs
 34543                                  	dec	word [chrptr]
 34544                                  	inc	word [count]
 34545                                  	; 02/11/2022
 34546                                  	;dec	word [cs:chrptr]
 34547                                  	;inc	word [cs:count]
 34548                                  
 34549                                  	jmp	coff
 34550                                  
 34551                                  ;------------------------------------------------------------------------
 34552                                  ; rem command
 34553                                  ;------------------------------------------------------------------------
 34554                                  
 34555                                  try0:				; do nothing with this line.
 34556                                  	cmp     ah,CONFIG_REM ; '0'
 34557                                  	je	short donothing
 34558                                  
 34559                                  %endif
 34560                                  
 34561                                  ; 07/04/2019 - Retro DOS v4.0
 34562                                  
 34563                                  ;-----------------------------------------------------------------------
 34564                                  ; switches command
 34565                                  ;-----------------------------------------------------------------------
 34566                                  
 34567                                  ;***********************************************************************
 34568                                  ;								       *
 34569                                  ; function: parse the option switches specified.		       *
 34570                                  ; note - this command is intended for the future use also.	       *
 34571                                  ; when we need to set system data flag,use this command.	       *
 34572                                  ;								       *
 34573                                  ; input :							       *
 34574                                  ;	es:si -> parameters in command line.			       *
 34575                                  ; output:							       *
 34576                                  ;	p_swit_k set if /k option chosen.			       *
 34577                                  ;								       *
 34578                                  ; subroutines to be called:					       *
 34579                                  ;	sysinit_parse						       *
 34580                                  ; logic:							       *
 34581                                  ; {								       *
 34582                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 34583                                  ;	set dx,cx to 0; 					       *
 34584                                  ;	while (end of command line)				       *
 34585                                  ;	{ sysinit_parse;					       *
 34586                                  ;	  if (no error) then					       *
 34587                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 34588                                  ;		    p_swit_k = 1				       *
 34589                                  ;	       endif						       *
 34590                                  ;	  else {show error message;error exit}			       *
 34591                                  ;	};							       *
 34592                                  ; };								       *
 34593                                  ;								       *
 34594                                  ;***********************************************************************
 34595                                  
 34596                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 34597                                  
 34598                                  try1:
 34599 00002813 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 34600 00002816 7402                    	je	short do_try1	; switches= command entered?
 34601                                  skip_it5:
 34602                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34603                                  	; (SYSINIT:2C8Ah)
 34604 00002818 EB7F                    	jmp	tryv
 34605                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34606                                  	;jmp	tryz
 34607                                  
 34608                                  do_try1:
 34609                                  
 34610                                  ; 31/12/2022 - Retro DOS v4.2
 34611                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34612                                  ;%if 0
 34613                                  ;ifdef	MULTI_CONFIG
 34614 0000281A E89418                  	call	query_user      ; query the user if config_cmd
 34615 0000281D 72F9                    	jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 34616                                  ;endif
 34617                                  ;%endif ; 30/10/2022
 34618                                  
 34619 0000281F BF[A31E]                	mov	di,swit_parms
 34620 00002822 31C9                    	xor	cx,cx
 34621                                  	; 03/01/2023
 34622                                  	;mov	dx,cx
 34623                                  do110:
 34624 00002824 E8D300                  	call	sysinit_parse
 34625 00002827 7306                    	jnc	short if110	; parse error
 34626                                  	;call	badparm_p	;  and show messages and end the search loop.
 34627                                  	;jmp	short sr110
 34628                                  	; -----------------------
 34629                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34630                                  badparm_p_coff:
 34631 00002829 E8F900                  	call	badparm_p
 34632 0000282C E994F8                  	jmp	coff
 34633                                  	;------------------------
 34634                                  if110:
 34635 0000282F 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 34636 00002832 742D                    	je	short en110	; then jmp to $endloop for semantic check
 34637                                  
 34638                                  	; 15/12/2022
 34639                                  	; ds = cs
 34640                                  	;;cmp	word [cs:result_val_swoff],swit_k
 34641                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 34642 00002834 813E[841D][BF1E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 34643 0000283A 7507                    	jne	short if115	;				;M059
 34644                                  	; 15/12/2022
 34645 0000283C C606[F21E]01            	mov	byte [p_swit_k],1
 34646                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 34647 00002841 EBE1                    	jmp	short do110
 34648                                  if115:	
 34649                                  	; 15/12/2022							;M059
 34650                                  	;;cmp	word [cs:result_val_swoff],swit_t
 34651                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 34652 00002843 813E[841D][E31E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 34653 00002849 7507                    	jne	short if116					;M059 M063
 34654                                  	; 15/12/2022
 34655 0000284B C606[F31E]01            	mov	byte [p_swit_t],1
 34656                                  	;mov	byte [cs:p_swit_t],1				;M059
 34657 00002850 EBD2                    	jmp	short do110					;M059
 34658                                  if116:
 34659                                  	; 15/12/2022
 34660                                  	;;cmp	word [cs:result_val_swoff],swit_w
 34661                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 34662 00002852 813E[841D][EF1E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 34663 00002858 75CA                    	jne	short do110					;M063
 34664                                  	; 15/12/2022
 34665 0000285A C606[F41E]01            	mov	byte [p_swit_w],1
 34666                                  	;mov	byte [cs:p_swit_w],1				;M063
 34667 0000285F EBC3                    	jmp	short do110					;M063
 34668                                  en110:
 34669                                  	; 15/12/2022
 34670                                  	; ds = cs
 34671 00002861 803E[F21E]01            	cmp	byte [p_swit_k],1
 34672                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 34673 00002866 1E                      	push	ds
 34674                                  	;;mov	ax,Bios_Data
 34675                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 34676                                  	; 21/10/2022
 34677 00002867 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 34678 0000286A 8ED8                    	mov	ds,ax
 34679 0000286C 750A                    	jne	short if117
 34680 0000286E C606[7E04]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 34681 00002873 C606[7F04]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 34682                                  if117:
 34683                                  	; 15/12/2022
 34684                                  	; ds <> cs
 34685 00002878 2EA0[F31E]              	mov	al,[cs:p_swit_t]				;M059
 34686 0000287C A2[8B04]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 34687                                  
 34688 0000287F 2E803E[F41E]00          	cmp	byte [cs:p_swit_w],0				;M063
 34689 00002885 740E                    	je	short skip_dos_flag				;M063
 34690 00002887 06                      	push	es
 34691 00002888 53                      	push	bx
 34692 00002889 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 34693 0000288B CD21                    	int	21h						;M063
 34694                                  			; DOS - 2+ internal - GET LIST OF LISTS
 34695                                  			; Return: ES:BX -> DOS list of lists
 34696                                  	;or	bytes [es:86h],2
 34697 0000288D 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 34698 00002893 5B                      	pop	bx
 34699 00002894 07                      	pop	es
 34700                                  skip_dos_flag:							;M063
 34701 00002895 1F                      	pop	ds
 34702                                  sr110:
 34703 00002896 E92AF8                  	jmp	coff
 34704                                  
 34705                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34706                                  ; (SYSINIT:2D14h)
 34707                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34708                                  ;%if 0
 34709                                  
 34710                                  tryv:
 34711                                  
 34712                                  ;ifdef	MULTI_CONFIG
 34713                                  ;------------------------------------------------------------------------
 34714                                  ; set command (as in "set var=value<cr/lf>")
 34715                                  ;------------------------------------------------------------------------
 34716                                  
 34717 00002899 80FC56                  	cmp	ah,CONFIG_SET  ; 'V'
 34718 0000289C 750F                    	jne	short tryn
 34719 0000289E E81018                  	call	query_user      ; query the user if config_cmd
 34720 000028A1 720A                    	jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 34721 000028A3 E80714                  	call	copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 34722 000028A6 73EE                    	jnc	short sr110	; no error
 34723                                  err:    
 34724 000028A8 E8A200                  	call	error_line      ; whoops, display error in line XXX
 34725 000028AB EBE9                    	jmp	short sr110     ; jump to coff (to skip to next line)
 34726                                  
 34727                                  ;------------------------------------------------------------------------
 34728                                  ; numlock command (as in "numlock=on|off")
 34729                                  ;------------------------------------------------------------------------
 34730                                  tryn:
 34731 000028AD 80FC4E                  	cmp	ah,CONFIG_NUMLOCK  ;'N'
 34732 000028B0 750C                    	jne	short tryy            ;
 34733 000028B2 E8FC17                  	call	query_user      ; query thye user if config_cmd
 34734 000028B5 7207                    	jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 34735 000028B7 E88810                  	call	set_numlock
 34736 000028BA 72EC                    	jc	short err
 34737 000028BC EBD8                    	jmp	short sr110	; all done
 34738                                  
 34739                                  ;endif	;MULTI_CONFIG
 34740                                  
 34741                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34742                                  ;-------------------------------------------------------------------------
 34743                                  ; comment= do nothing. just decrese chrptr,and increase count for correct
 34744                                  ;		line number
 34745                                  ;-------------------------------------------------------------------------
 34746                                  
 34747                                  	; 31/12/2022
 34748                                  tryy:
 34749 000028BE 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 34750 000028C1 750B                    	jne	short try0
 34751                                  
 34752                                  donothing:
 34753                                  	; 15/12/2022
 34754                                  	; ds = cs
 34755 000028C3 FF0E[5A03]              	dec	word [chrptr]
 34756 000028C7 FF06[5603]              	inc	word [count]
 34757                                  	; 02/11/2022
 34758                                  	;dec	word [cs:chrptr]
 34759                                  	;inc	word [cs:count]
 34760                                  
 34761 000028CB E9F5F7                  	jmp	coff
 34762                                  
 34763                                  ;------------------------------------------------------------------------
 34764                                  ; rem command
 34765                                  ;------------------------------------------------------------------------
 34766                                  
 34767                                  try0:				; do nothing with this line.
 34768 000028CE 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 34769 000028D1 74F0                    	je	short donothing
 34770                                  
 34771                                  ;%endif	; 30/10/2022
 34772                                  
 34773                                  ; 30/10/2022
 34774                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 34775                                  
 34776                                  ;------------------------------------------------------------------------
 34777                                  ; bogus command
 34778                                  ;------------------------------------------------------------------------
 34779                                  
 34780                                  tryz:
 34781 000028D3 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 34782                                  	; 31/12/2022
 34783 000028D6 74EB                    	je	short donothing
 34784                                  	; 02/11/2022
 34785                                  	;je	short tryz_donothing
 34786                                  
 34787 000028D8 FF0E[5A03]              	dec	word [chrptr]
 34788 000028DC FF06[5603]              	inc	word [count]
 34789 000028E0 EB37                    	jmp	short badop
 34790                                  
 34791                                  ; 31/12/2022
 34792                                  ;	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 34793                                  ;tryz_donothing:
 34794                                  ;	jmp	donothing
 34795                                  
 34796                                  ; 07/04/2019 - Retro DOS v4.0
 34797                                  
 34798                                  ;------------------------------------------------------------------------------
 34799                                  
 34800                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34801                                  ; (SYSINIT:2D5Dh)
 34802                                  
 34803                                  ; 11/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 34804                                  
 34805                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34806                                  ;
 34807                                  ;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 34808                                  ;
 34809                                  ;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 34810                                  ;
 34811                                  CheckProtmanArena:
 34812                                  	; 08/09/2023
 34813                                  	; ds = cs
 34814 000028E2 06                      	push	es
 34815                                  	;mov	ax,[cs:area]	; get our arena header
 34816 000028E3 A1[6803]                	mov	ax,[area] ; 08/09/2023
 34817 000028E6 48                      	dec	ax
 34818 000028E7 8EC0                    	mov	es,ax
 34819                                  	;add	ax,[es:ARENA.SIZE]
 34820 000028E9 2603060300              	add	ax,[es:3]	; find end of arena
 34821 000028EE 40                      	inc	ax
 34822                                  	; 08/09/2023
 34823 000028EF 3B06[A502]              	cmp	ax,[ALLOCLIM]
 34824                                  	;cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 34825 000028F3 7703                    	ja	short CheckProtmanDone
 34826                                  
 34827                                  	;mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 34828                                  	; 08/09/2023
 34829 000028F5 A3[A502]                	mov	[ALLOCLIM],ax
 34830                                  CheckProtmanDone:
 34831 000028F8 07                      	pop	es
 34832 000028F9 C3                      	retn
 34833                                  
 34834                                  ;------------------------------------------------------------------------------
 34835                                  
 34836                                  sysinit_parse:
 34837                                  
 34838                                  ;------------------------------------------------------------------------------
 34839                                  ;set up registers for sysparse
 34840                                  ;in)	es:si -> command line in confbot
 34841                                  ;	di -> offset of the parse control definition.
 34842                                  ;
 34843                                  ;out)	calls sysparse.
 34844                                  ;	carry will set if parse error.
 34845                                  ;	*** the caller should check the eol condition by looking at ax
 34846                                  ;	*** after each call.
 34847                                  ;	*** if no parameters are found,then ax will contain a error code.
 34848                                  ;	*** if the caller needs to look at the synomym@ of the result,
 34849                                  ;	***  the caller should use cs:@ instead of es:@.
 34850                                  ;	cx register should be set to 0 at the first time the caller calls this
 34851                                  ;	 procedure.
 34852                                  ;	ax - exit code
 34853                                  ;	bl - terminated delimeter code
 34854                                  ;	cx - new positional ordinal
 34855                                  ;	si - set to pase scanned operand
 34856                                  ;	dx - selected result buffer
 34857                                  ;------------------------------------------------------------------------------
 34858                                  
 34859                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 34860                                  	; (SYSINIT:2D78h)
 34861                                  
 34862                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 34863                                  	; ds = cs
 34864 000028FA 8C06[D014]              	mov	[badparm_seg],es	;save the pointer to the parm
 34865 000028FE 8936[CE14]              	mov	[badparm_off],si	;we are about to parse for badparm msg.
 34866                                  
 34867                                  	; 24/10/2022
 34868 00002902 06                      	push	es			;save es,ds
 34869 00002903 1E                      	push	ds
 34870                                  
 34871 00002904 06                      	push	es
 34872 00002905 1F                      	pop	ds			;now ds:si -> command line
 34873                                  
 34874 00002906 0E                      	push	cs
 34875 00002907 07                      	pop	es			;now es:di -> control definition
 34876                                  
 34877                                  	; 09/09/2023
 34878                                  	;mov	[cs:badparm_seg],ds	;save the pointer to the parm
 34879                                  	;mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 34880                                  	
 34881                                  	;mov	dx,0
 34882                                  	; 04/01/2023
 34883 00002908 29D2                    	sub	dx,dx ; 0
 34884 0000290A E86BEC                  	call	SysParse
 34885                                  	;cmp	ax,_$P_No_Error	; 0	;no error
 34886                                  	; 06/09/2023
 34887 0000290D 21C0                    	and	ax,ax
 34888                                  
 34889                                  ;**cas note: when zero true after cmp, carry clear
 34890                                  
 34891                                  	;je	short ll4
 34892                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 34893                                  	; 12/12/2022
 34894 0000290F 7405                    	je	short en4 ; cf=0
 34895 00002911 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 34896                                  	;jne	short if4
 34897                                  	; 12/12/2022
 34898 00002914 7400                    	je	short en4 ; cf=0
 34899                                  	; 06/09/2023
 34900                                  	; cf=1
 34901                                  
 34902                                  ; 12/12/2022
 34903                                  ;ll4:
 34904                                  ;	; 12/12/2022
 34905                                  ;	; cf=0
 34906                                  ;	;clc
 34907                                  ;	jmp	short en4
 34908                                  
 34909                                  if4:
 34910                                  	; 24/10/2022
 34911                                  	; 06/09/2023 (cf=1)
 34912                                  	;stc
 34913                                  en4:
 34914 00002916 1F                      	pop	ds
 34915 00002917 07                      	pop	es
 34916 00002918 C3                      	retn
 34917                                  
 34918                                  ; 11/12/2022
 34919                                  %if 0
 34920                                  
 34921                                  ;----------------------------------------------------------------------------
 34922                                  ;
 34923                                  ; procedure : badop_p
 34924                                  ;
 34925                                  ;             same thing as badop,but will make sure to set ds register back
 34926                                  ;             to sysinitseg and return back to the caller.
 34927                                  ;
 34928                                  ;----------------------------------------------------------------------------
 34929                                  
 34930                                  badop_p:
 34931                                  	push	cs
 34932                                  	pop	ds		;set ds to configsys seg.
 34933                                  	mov	dx,badopm
 34934                                  	call	print
 34935                                          ;call	error_line
 34936                                  	;retn
 34937                                  	; 11/12/2022
 34938                                  	jmp	error_line
 34939                                  
 34940                                  %endif
 34941                                  
 34942                                  ;----------------------------------------------------------------------------
 34943                                  ;
 34944                                  ; label : badop
 34945                                  ;
 34946                                  ;----------------------------------------------------------------------------
 34947                                  
 34948                                  badop:	
 34949 00002919 BA[A24A]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 34950 0000291C E8CA1B                  	call	print
 34951 0000291F E82B00                  	call	error_line	;show "error in config.sys ..." .
 34952 00002922 E99EF7                  	jmp	coff
 34953                                  
 34954                                  ;----------------------------------------------------------------------------
 34955                                  ;
 34956                                  ; procedure : badparm_p
 34957                                  ;
 34958                                  ;             show "bad command or parameters - xxxxxx"
 34959                                  ;             in badparm_seg,badparm_off -> xxxxx
 34960                                  ;
 34961                                  ;----------------------------------------------------------------------------
 34962                                  
 34963                                  	; 24/10/2022
 34964                                  badparm_p:
 34965                                  	; 11/12/2022
 34966                                  	; ds = cs
 34967                                  	; 11/12/2022
 34968                                  	;push	ds ; *
 34969 00002925 52                      	push	dx
 34970 00002926 56                      	push	si
 34971                                  
 34972                                  	; 11/12/2022
 34973                                  	; ds = cs
 34974                                  	;push	cs
 34975                                  	;pop	ds
 34976                                  
 34977 00002927 BA[C94A]                	mov	dx,badparm
 34978 0000292A E8BC1B                  	call	print			; "bad command or parameters - "
 34979 0000292D C536[CE14]              	lds	si,[badparm_ptr]
 34980                                  
 34981                                  ;	print "xxxx" until cr.
 34982                                  
 34983                                  do1:
 34984 00002931 8A14                    	mov	dl,[si]			; get next character
 34985 00002933 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 34986 00002936 7407                    	je	short en1		; exit loop if so
 34987                                  
 34988 00002938 B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 34989 0000293A CD21                    	int	21h			; display character
 34990 0000293C 46                      	inc	si			; next character
 34991 0000293D EBF2                    	jmp	short do1
 34992                                  en1:
 34993 0000293F 0E                      	push	cs
 34994 00002940 1F                      	pop	ds
 34995                                  
 34996 00002941 BA[C64A]                	mov	dx,crlfm
 34997 00002944 E8A21B                  	call	print
 34998 00002947 E80300                  	call	error_line
 34999                                  
 35000 0000294A 5E                      	pop	si
 35001 0000294B 5A                      	pop	dx
 35002                                  	; 11/12/2022
 35003                                  	;pop	ds ; *
 35004                                  badparmp_ret:
 35005 0000294C C3                      	retn
 35006                                  
 35007                                  ; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 35008                                  %if 0
 35009                                  
 35010                                  ;----------------------------------------------------------------------------
 35011                                  ;
 35012                                  ; procedure : getchr
 35013                                  ;
 35014                                  ;----------------------------------------------------------------------------
 35015                                  
 35016                                  	; 24/10/2022
 35017                                  getchr:
 35018                                  	; 12/12/2022
 35019                                  	;push	cx
 35020                                  	;mov	cx,[count]
 35021                                  	;jcxz	nochar
 35022                                  	; 12/12/2022
 35023                                  	cmp	word [count],1 
 35024                                  	jb	short nochar ; cf=1 ([count] = 0)
 35025                                  	
 35026                                  	mov	si,[chrptr]
 35027                                  	mov	al,[es:si]
 35028                                  	dec	word [count]
 35029                                  	inc	word [chrptr]
 35030                                  	; 12/12/202
 35031                                  	; cf=0
 35032                                  	;clc
 35033                                  ;get_ret:
 35034                                  	;pop	cx
 35035                                  	;retn
 35036                                  nochar: 
 35037                                  	; 12/12/2022
 35038                                  	; cf=1
 35039                                  	;stc
 35040                                  	;jmp	short get_ret
 35041                                  	
 35042                                  	retn
 35043                                  %endif
 35044                                  
 35045                                  ; 11/12/2022
 35046                                  %if 0
 35047                                  
 35048                                  ;----------------------------------------------------------------------------
 35049                                  ;
 35050                                  ; procedure : incorrect_order
 35051                                  ;
 35052                                  ;             show "incorrect order in config.sys ..." message.
 35053                                  ;
 35054                                  ;----------------------------------------------------------------------------
 35055                                  
 35056                                  incorrect_order:
 35057                                  	mov	dx,badorder
 35058                                  	call	print
 35059                                  	call	showlinenum
 35060                                  	retn
 35061                                  
 35062                                  %endif
 35063                                  
 35064                                  ;----------------------------------------------------------------------------
 35065                                  ;
 35066                                  ; procedure : error_line
 35067                                  ;
 35068                                  ;             show "error in config.sys ..." message.
 35069                                  ;
 35070                                  ;----------------------------------------------------------------------------
 35071                                  
 35072                                  	; 11/12/2022
 35073                                  	; 24/10/2022
 35074                                  error_line:
 35075                                  	; 11/12/2022
 35076                                  	; ds = cs
 35077                                  	;push	cs
 35078                                  	;pop	ds
 35079                                  
 35080 0000294D BA[FE4B]                	mov	dx,errorcmd
 35081 00002950 E8961B                  	call	print
 35082                                  	;call	showlinenum
 35083                                  	;retn
 35084                                  	; 11/12/2022
 35085                                  	;jmp	short shortlinemum
 35086                                  
 35087                                  ;----------------------------------------------------------------------------
 35088                                  ;
 35089                                  ; procedure : showlinenum
 35090                                  ;
 35091                                  ; convert the binary linecount to decimal ascii string in showcount
 35092                                  ; and display showcount at the current curser position.
 35093                                  ; in.) linecount
 35094                                  ;
 35095                                  ; out) the number is printed.
 35096                                  ;
 35097                                  ;----------------------------------------------------------------------------
 35098                                  
 35099                                  	; 11/12/2022
 35100                                  	; ds = cs
 35101                                  	; 24/10/2022
 35102                                  showlinenum:
 35103 00002953 06                      	push	es
 35104                                  	; 11/12/2022
 35105                                  	;push	ds
 35106 00002954 57                      	push	di
 35107                                  
 35108 00002955 0E                      	push	cs
 35109 00002956 07                      	pop	es		; es=cs
 35110                                  
 35111                                  	; 11/12/2022
 35112                                  	;push	cs
 35113                                  	;pop	ds
 35114                                  
 35115 00002957 BF[B502]                	mov	di,showcount+4	; di -> the least significant decimal field.
 35116 0000295A B90A00                  	mov	cx,10		; decimal divide factor
 35117                                  	;mov	ax,[cs:linecount]
 35118                                  	; 11/12/2022
 35119 0000295D A1[AF02]                	mov	ax,[linecount]
 35120                                  sln_loop:
 35121                                  	; 11/12/2022
 35122 00002960 39C8                    	cmp	ax,cx ; < 10 ?
 35123                                  	;cmp	ax,10		; < 10?
 35124 00002962 720C                    	jb	short sln_last
 35125                                  
 35126 00002964 31D2                    	xor	dx,dx
 35127 00002966 F7F1                    	div	cx	; cx = 10
 35128 00002968 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 35129 0000296B 8815                    	mov	[di],dl
 35130 0000296D 4F                      	dec	di
 35131 0000296E EBF0                    	jmp	short sln_loop
 35132                                  
 35133                                  sln_last:
 35134 00002970 0C30                    	or	al,30h	; "0"
 35135 00002972 8805                    	mov	[di],al
 35136 00002974 89FA                    	mov	dx,di
 35137 00002976 E8701B                  	call	print		; show it.
 35138 00002979 5F                      	pop	di
 35139                                  	; 11/12/2022
 35140                                  	;pop	ds
 35141 0000297A 07                      	pop	es
 35142 0000297B C3                      	retn
 35143                                  
 35144                                  ; 07/04/2019 - Retro DOS v4.0
 35145                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 35146                                  
 35147                                  ;----------------------------------------------------------------------------
 35148                                  ;
 35149                                  ; procedure : ProcDOS
 35150                                  ;
 35151                                  ;	Process the result of DOS= parsing
 35152                                  ;
 35153                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 35154                                  ;				= 2 for DOS=LOW
 35155                                  ;				= 3 for DOS=UMB
 35156                                  ;				= 4 for DOS=NOUMB
 35157                                  ;----------------------------------------------------------------------------
 35158                                  
 35159                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 35160                                  	; (SYTSINIT:2AB5h)
 35161                                  ProcDOS:
 35162                                  	; 01/01/2023
 35163                                  	; ds = cs
 35164 0000297C 30E4                    	xor	ah,ah
 35165                                  	;;mov	al,[cs:result_val_itag]
 35166                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 35167                                  	; 01/01/2023
 35168 0000297E A0[831D]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 35169 00002981 48                      	dec	ax
 35170 00002982 7415                    	jz	short pd_hi
 35171 00002984 48                      	dec	ax
 35172 00002985 740E                    	jz	short pd_lo
 35173 00002987 48                      	dec	ax
 35174 00002988 7405                    	jz	short pd_umb
 35175                                  	;;mov	byte [cs:DevUMB],0
 35176                                  	; 18/12/2022
 35177                                  	;mov	byte [cs:DevUMB],ah ; 0
 35178                                  	; 01/01/2023
 35179 0000298A 8826[7F1F]              	mov	byte [DevUMB],ah ; 0
 35180 0000298E C3                      	retn
 35181                                  pd_umb:
 35182                                  	; 01/01/2023
 35183 0000298F C606[7F1F]FF            	mov	byte [DevUMB],0FFh
 35184                                  	;mov	byte [cs:DevUMB],0FFh
 35185 00002994 C3                      	retn
 35186                                  pd_lo:
 35187                                  	; 01/01/2023
 35188 00002995 A2[6C02]                	mov	[runhigh],al ; 0
 35189                                  	; 18/12/2022
 35190                                  	;mov	[cs:runhigh],al ; 0
 35191                                  	;;mov	byte [cs:runhigh],0
 35192 00002998 C3                      	retn
 35193                                  pd_hi:
 35194                                  	; 01/01/2023
 35195 00002999 C606[6C02]FF            	mov	byte [runhigh],0FFh
 35196                                  	;mov	byte [cs:runhigh],0FFh
 35197                                  limx:	; 11/12/2022
 35198 0000299E C3                      	retn
 35199                                  
 35200                                  ;----------------------------------------------------------------------------
 35201                                  ;
 35202                                  ; procedure : LieInt12Mem
 35203                                  ;
 35204                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 35205                                  ;		alloclim set to the limit of low memory.
 35206                                  ;
 35207                                  ;	Output : none
 35208                                  ;
 35209                                  ;	Changes the ROM BIOS variable which stores the total low memory
 35210                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 35211                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 35212                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 35213                                  ;	converted into Ks and stored in 40:13h
 35214                                  ;
 35215                                  ;----------------------------------------------------------------------------
 35216                                  
 35217                                  LieInt12Mem:
 35218                                  	; 11/12/2022
 35219                                  	; ds = cs
 35220 0000299F A1[A502]                	mov	ax,[ALLOCLIM]
 35221                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 35222                                  					; assuming that it is 3Com
 35223 000029A2 E84400                  	call	IsIt3Com		; Is it 3Com driver?
 35224 000029A5 740A                    	jz	short lim_set		; yes, lie to him differently
 35225                                  	; 13/05/2019
 35226                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 35227                                  	;je	short limx		; no, don't lie
 35228                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 35229                                  	; 11/12/2022
 35230                                  	; ds = cs
 35231 000029A7 803E[8E1F]00            	cmp	byte [DeviceHi],0
 35232 000029AC 74F0                    	je	short limx
 35233 000029AE A1[741F]                	mov	ax,[DevLoadEnd]
 35234                                  lim_set:
 35235                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35236                                  	; 11/12/2022
 35237                                  	;call	SetInt12Mem
 35238                                  ;limx:
 35239                                  	;retn
 35240                                  	
 35241                                  	;jmp	short SetInt12Mem 
 35242                                  
 35243                                  ;----------------------------------------------------------------------------
 35244                                  ;
 35245                                  ; procedure : SetInt12Mem
 35246                                  ;
 35247                                  ;	Input : AX = Memory size to be set (in paras)
 35248                                  ;	Output : none
 35249                                  ;
 35250                                  ;	Sets the variable 40:13 to the memory size passed in AX
 35251                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 35252                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 35253                                  ;	restoring the value of 40:13
 35254                                  ;
 35255                                  ;----------------------------------------------------------------------------
 35256                                  
 35257                                  	; 01/11/2022
 35258                                  SetInt12Mem:
 35259 000029B1 1E                      	push	ds
 35260 000029B2 BB4000                  	mov	bx,40h
 35261 000029B5 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 35262 000029B7 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 35263 000029BB 2E891E[921F]            	mov	[cs:OldInt12Mem],bx	; save it
 35264 000029C0 B106                    	mov	cl,6
 35265 000029C2 D3E8                    	shr	ax,cl			; convert paras into Ks
 35266 000029C4 A31300                  	mov	[13h],ax		; Lie
 35267 000029C7 2EC606[911F]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 35268 000029CD 1F                      	pop	ds
 35269                                  ;limx:
 35270 000029CE C3                      	retn
 35271                                  
 35272                                  ;----------------------------------------------------------------------------
 35273                                  ;
 35274                                  ; procedure : TrueInt12Mem
 35275                                  ;
 35276                                  ;	Input : Int12Lied = 0 if we are not lying currently
 35277                                  ;			  = 0ffh if we are lying
 35278                                  ;		OldInt12Mem = Saved value of 40:13h
 35279                                  ;
 35280                                  ;	Output : none
 35281                                  ;
 35282                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 35283                                  ;	and resets the flag which indicates that we were lying
 35284                                  ;
 35285                                  ;----------------------------------------------------------------------------
 35286                                  
 35287                                  TrueInt12Mem:
 35288                                  	; 11/12/2022
 35289                                  	; ds = cs
 35290 000029CF 803E[911F]00            	cmp	byte [Int12Lied],0
 35291                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 35292                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 35293                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 35294 000029D4 7412                    	je	short timx		; no, we weren't
 35295                                  	; 18/12/2022
 35296 000029D6 B84000                  	mov	ax,40h
 35297 000029D9 8826[911F]              	mov	[Int12Lied],ah ; 0
 35298                                  	;mov	byte [Int12Lied],0
 35299                                  	;mov	byte [cs:Int12Lied],0
 35300 000029DD 1E                      	push	ds
 35301                                  	;mov	ax,40h
 35302 000029DE 8ED8                    	mov	ds,ax
 35303 000029E0 2EA1[921F]              	mov	ax,[cs:OldInt12Mem]
 35304 000029E4 A31300                  	mov	[13h],ax		; restore INT 12 memory
 35305 000029E7 1F                      	pop	ds
 35306                                  timx:
 35307 000029E8 C3                      	retn
 35308                                  
 35309                                  ;----------------------------------------------------------------------------
 35310                                  ;
 35311                                  ; procedure : IsIt3Com?
 35312                                  ;
 35313                                  ;	Input : DevEntry = Seg:0 of device driver
 35314                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 35315                                  ;		 else Zero flag is reset
 35316                                  ;
 35317                                  ;----------------------------------------------------------------------------
 35318                                  
 35319                                  IsIt3Com:
 35320                                  	; 11/12/2022
 35321                                  	; ds = cs
 35322 000029E9 1E                      	push	ds
 35323 000029EA 06                      	push	es
 35324 000029EB 56                      	push	si
 35325                                  	; 11/12/2022
 35326 000029EC C536[761F]              	lds	si,[DevEntry]
 35327                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 35328 000029F0 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 35329 000029F3 0E                      	push	cs
 35330 000029F4 07                      	pop	es
 35331 000029F5 BF[941F]                	mov	di,ThreeComName
 35332 000029F8 B90800                  	mov	cx,8			; name length
 35333 000029FB F3A6                    	rep	cmpsb
 35334 000029FD 5E                      	pop	si
 35335 000029FE 07                      	pop	es
 35336 000029FF 1F                      	pop	ds
 35337 00002A00 C3                      	retn
 35338                                  
 35339                                  ;M020 : BEGIN
 35340                                  ;----------------------------------------------------------------------------
 35341                                  
 35342                                  UpdatePDB:
 35343 00002A01 1E                      	push	ds
 35344 00002A02 B462                    	mov	ah,62h
 35345 00002A04 CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 35346 00002A06 8EDB                    	mov	ds,bx
 35347 00002A08 2E8B1E[A502]            	mov	bx,[cs:ALLOCLIM]
 35348                                  	;mov	[2],bx
 35349 00002A0D 891E0200                	mov	[PDB.BLOCK_LEN],bx
 35350 00002A11 1F                      	pop	ds
 35351 00002A12 C3                      	retn
 35352                                  
 35353                                  ; M020 : END
 35354                                  
 35355                                  ;----------------------------------------------------------------------------
 35356                                  
 35357                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35358                                  ;%if 0
 35359                                  
 35360                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35361                                  ; (SYSINIT:2EEEh)
 35362                                  
 35363                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 35364                                  ;include highexit.inc	; umb's, etc
 35365                                  
 35366                                  ; ----------------------------------------------------------------------
 35367                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 35368                                  ; ----------------------------------------------------------------------
 35369                                  ; 07/04/2019 - Retro DOS v4.0
 35370                                  
 35371                                  ;******************************************************************************
 35372                                  ;
 35373                                  ; This file contains routines needed to parse and implement user-given
 35374                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 35375                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 35376                                  ; the variables in highvar.inc, for use by the rest of the routines.
 35377                                  ;
 35378                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 35379                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 35380                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 35381                                  ;    DH/LH module opts
 35382                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 35383                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 35384                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 35385                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 35386                                  ; available during the load.
 35387                                  ;
 35388                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 35389                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 35390                                  ; upper-memory block which was not specified by the user... in addition, if
 35391                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 35392                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 35393                                  ; allocated. After the load, the function UnHideUMBs() (in highexit.inc) will
 35394                                  ; free any UMBs so allocated.
 35395                                  ;
 35396                                  ; When a device driver loads, there is the additional problem of allocating its
 35397                                  ; initial load site; this should be restricted to the first UMB specified on
 35398                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 35399                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 35400                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 35401                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 35402                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 35403                                  ;
 35404                                  ;******************************************************************************
 35405                                  
 35406                                  SWTCH	equ	'/'		; Switch character
 35407                                  
 35408                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 35409                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 35410                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 35411                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 35412                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 35413                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 35414                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 35415                                  
 35416                                  CR	equ	0Dh		; Carriage Return
 35417                                  LF	equ	0Ah		; Line Feed
 35418                                  TAB	equ	09h		; Tab character (^I)
 35419                                  
 35420                                  ; -----------------------------------------------------------------------------
 35421                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 35422                                  ; -----------------------------------------------------------------------------
 35423                                  ; ENTRY:       None
 35424                                  ; EXIT:        Variables listed in highvar.inc are initialized
 35425                                  ; ERROR EXIT:  None
 35426                                  ; USES:        Flags, variables in highvar.inc
 35427                                  ; -----------------------------------------------------------------------------
 35428                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1. Its contents
 35429                                  ; are largely ignored, but it is initialized nonetheless.
 35430                                  ; -----------------------------------------------------------------------------
 35431                                  
 35432                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35433                                  ; (SYSINIT:2EEEh)
 35434                                  
 35435                                  InitVar:
 35436                                  	; 01/01/2023
 35437                                  	; ds = cs
 35438                                  
 35439                                  	;pushreg <ax, cx, di, es>
 35440                                  	; 03/01/2023
 35441                                  	;push	ax
 35442                                  	;push	cx
 35443                                  	;push	di
 35444 00002A13 06                      	push	es
 35445                                  
 35446                                  	;dataseg es			;Point ES into appropriate data segment
 35447 00002A14 0E                      	push	cs
 35448 00002A15 07                      	pop	es
 35449                                  
 35450 00002A16 31C0                    	xor	ax,ax
 35451                                  	;mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 35452                                  	;mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 35453                                  	;mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 35454                                  	;mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 35455                                  	;				;Later is the # of the 1st spec'd UMB
 35456                                  	;mov	[es:fm_argc], al	;Start with zero args having been read
 35457                                  
 35458                                  	; 01/01/2023
 35459                                  	; ds = cs
 35460 00002A18 A2[391F]                	mov	[fUmbTiny],al		;Shrink UMBs? (made 1 if /S given)
 35461 00002A1B A2[381F]                	mov	[fInHigh],al		;Set to 1 when DH/LH has been called
 35462 00002A1E A3[3A1F]                	mov	[SegLoad],ax		;Load Address (seg), used for DH only
 35463 00002A21 C606[3C1F]FF            	mov	byte [UmbLoad],UNSPECIFIED ; 0FFh
 35464                                  					;Later is the # of the 1st spec'd UMB
 35465 00002A26 A2[6F1F]                	mov	[fm_argc], al		;Start with zero args having been read
 35466                                  
 35467 00002A29 FC                      	cld
 35468                                  
 35469 00002A2A B91000                  	mov	cx,MAXUMB ; 16		;For each entry
 35470 00002A2D BF[3D1F]                	mov	di,UmbUsed		;on the UmbUsed array,
 35471 00002A30 F3AA                    	rep	stosb			;	Store 0
 35472                                  
 35473                                  	;mov	cx,MAXUMB ; 16		;Okay... for each entry
 35474                                  	; 01/01/2033
 35475 00002A32 B110                    	mov	cl,MAXUMB ; 16
 35476 00002A34 BF[4D1F]                	mov	di,UmbSize		;on the UmbSize array,
 35477 00002A37 F3AB                    	rep	stosw			;	Store 0
 35478                                  
 35479                                  	;normseg es			; Return ES
 35480                                  
 35481                                  	;popreg	<es, di, cx, ax>
 35482 00002A39 07                      	pop	es
 35483                                  	; 03/01/2023
 35484                                  	;pop	di
 35485                                  	;pop	cx
 35486                                  	;pop	ax	 	
 35487                                  
 35488 00002A3A C3                      	retn
 35489                                  
 35490                                  ; -----------------------------------------------------------------------------
 35491                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 35492                                  ; -----------------------------------------------------------------------------
 35493                                  ; ENTRY   : None
 35494                                  ; EXIT    : None
 35495                                  ; ERROR   : None
 35496                                  ; USES    : Flags, fm_umb, fm_strat
 35497                                  ; -----------------------------------------------------------------------------
 35498                                  
 35499                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35500                                  	; (SYSINIT:2F22h)
 35501                                  FixMem:
 35502                                  	; 01/01/2023
 35503                                  	;push	ax
 35504                                  	;push	bx
 35505                                  	;push	cx
 35506                                  	;push	dx
 35507 00002A3B 06                      	push	es
 35508                                  
 35509 00002A3C E84900                  	call	fm_link		; Link in UMBs
 35510                                  
 35511 00002A3F E80002                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 35512 00002A42 723F                    	jc	short fmX	; (if couldn't get it, leave now).
 35513                                  
 35514 00002A44 8EC0                    	mov	es,ax		; It returns in AX, so move it to ES.
 35515                                  
 35516                                  ; - Walk MCB Chain ------------------------------------------------------------
 35517                                  
 35518 00002A46 31D2                    	xor	dx,dx		; We're keeping the address of the last MCB
 35519 00002A48 89D1                    	mov 	cx,dx		; in CX... and the last owner
 35520 00002A4A 42                      	inc	dx		; in dx as we go through the loop:
 35521                                  
 35522                                  ; ------------------------------------------
 35523                                  ; FM10--DX  = last MCB's owner's PSP address
 35524                                  ;       CX  = last MCB's address (segment)
 35525                                  ; ------------------------------------------
 35526                                  
 35527 00002A4B 26A00000                fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 35528 00002A4F 268B1E0100              	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 35529 00002A54 09D3                    	or	bx,dx			; dx was owner of previous MCB
 35530 00002A56 7516                    	jnz	short fm30		; If not both zero, don't cat.
 35531                                  
 35532                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 35533                                  
 35534 00002A58 268B1E0300              fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 35535 00002A5D 8EC1                    	mov	es,cx			; Go back to prev MCB's address
 35536 00002A5F 26A20000                	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 35537                                  
 35538 00002A63 26031E0300              	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 35539                                  	;add	bx,1			; And add one for the header
 35540                                  	; 11/07/2023
 35541 00002A68 43                      	inc	bx
 35542 00002A69 26891E0300              	mov	[es:ARENA.SIZE],bx	; Write the size
 35543                                  
 35544                                  	; ---------------------------------------------------------------------
 35545                                  
 35546 00002A6E 8CC1                    fm30:	mov	cx,es			; Put this address on the stack
 35547 00002A70 268B160100              	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 35548                                  
 35549 00002A75 8CC3                    	mov	bx,es			; Move to the next MCB
 35550 00002A77 26031E0300              	add	bx,[es:ARENA.SIZE]
 35551 00002A7C 43                      	inc	bx
 35552 00002A7D 8EC3                    	mov	es,bx
 35553                                  
 35554                                  	;cmp	al,'Z'
 35555 00002A7F 3C5A                    	cmp	al,arena_signature_end
 35556 00002A81 75C8                    	jne	short fm10		; If signature != 'Z', there are more.
 35557                                  fmX:	
 35558 00002A83 E81300                  	call	fm_unlink		; Unlink UMBs
 35559                                  
 35560 00002A86 07                      	pop	es
 35561                                  	; 01/01/2023
 35562                                  	;pop	dx
 35563                                  	;pop	cx
 35564                                  	;pop	bx
 35565                                  	;pop	ax
 35566                                  
 35567 00002A87 C3                      	retn
 35568                                  
 35569                                  ; -----------------------------------------------------------------------------
 35570                                  ;*** fm_link - links UMBs not already linked in
 35571                                  ; -----------------------------------------------------------------------------
 35572                                  ; ENTRY:    None
 35573                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 35574                                  ; ERROR:    None
 35575                                  ; USES:     AX, BX, fm_umb
 35576                                  ; -----------------------------------------------------------------------------
 35577                                  
 35578                                  	; 01/01/2023 - Retro DOS v4.2
 35579                                  fm_link:
 35580 00002A88 B80258                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 35581 00002A8B CD21                    	int	21h			; Current link-state is now in al
 35582                                  
 35583                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 35584                                  	;
 35585                                  	;push	es
 35586                                  	;push	cs
 35587                                  	;pop	es
 35588                                  	;mov	[es:fm_umb],al
 35589                                  	;pop	es
 35590                                  	
 35591                                  	; 01/01/2023
 35592                                  	; ds = cs
 35593                                  	;mov	[cs:fm_umb],al
 35594 00002A8D A2[6D1F]                	mov	[fm_umb],al
 35595                                  
 35596 00002A90 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 35597 00002A93 BB0100                  	mov	bx,1
 35598 00002A96 CD21                    	int	21h
 35599 00002A98 C3                      	retn
 35600                                  
 35601                                  ; -----------------------------------------------------------------------------
 35602                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 35603                                  ; -----------------------------------------------------------------------------
 35604                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 35605                                  ; EXIT:     None
 35606                                  ; ERROR:    None
 35607                                  ; USES:     AX, BX
 35608                                  ; -----------------------------------------------------------------------------
 35609                                  
 35610                                  	; 01/01/2023 - Retro DOS v4.2
 35611                                  fm_unlink:
 35612 00002A99 31DB                    	xor	bx,bx
 35613                                  	
 35614                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 35615                                  	;
 35616                                  	;push	ds
 35617                                  	;push	cs
 35618                                  	;pop	ds
 35619                                  	;mov	bl,[fm_umb]	
 35620                                  	;pop	ds
 35621                                  	
 35622                                  	; 01/01/2023
 35623                                  	; ds = cs
 35624                                  	;mov	bl,[cs:fm_umb]
 35625 00002A9B 8A1E[6D1F]              	mov	bl,[fm_umb]
 35626                                  
 35627 00002A9F B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 35628 00002AA2 CD21                    	int	21h			; so just use that, and call int 21h
 35629 00002AA4 C3                      	retn
 35630                                  
 35631                                  ; 08/04/2019 - Retro DOS v4.0
 35632                                  
 35633                                  ; -----------------------------------------------------------------------------
 35634                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 35635                                  ; laid out in highvar.inc
 35636                                  ; -----------------------------------------------------------------------------
 35637                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 35638                                  ; EXIT:     ES:SI points to first character in child program name
 35639                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 35640                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 35641                                  ; -----------------------------------------------------------------------------
 35642                                  ; Error codes (in AX if carry set on return):
 35643                                  ;
 35644                                  PV_InvArg	equ	1	; Invalid argument passed
 35645                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 35646                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 35647                                  ;
 35648                                  ; This routine exects ES:SI to point to a string much like the following:
 35649                                  ;    "/S/L:1,200;2 module options"
 35650                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 35651                                  ; required, though that's what this routine is supposed to parse.
 35652                                  ;
 35653                                  optS		equ	'S'	; /S
 35654                                  optL		equ	'L'	; /L:...
 35655                                  ;
 35656                                  ; -----------------------------------------------------------------------------
 35657                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 35658                                  ; a command-line for spawning a child process. For a typical LH command, say,
 35659                                  ;     lh /l:1,1000;2 print/d:lpt2
 35660                                  ; the arguments would look like (one per line):
 35661                                  ;     lh
 35662                                  ;     /l
 35663                                  ;     1
 35664                                  ;     1000
 35665                                  ;     2
 35666                                  ;     print
 35667                                  ;     /d
 35668                                  ;     :lpt2
 35669                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 35670                                  ; arg was the filename. So, inside this routine, we keep a running counter
 35671                                  ; of the number of arguments LH will need to skip in order to get to the
 35672                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 35673                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 35674                                  ; for:
 35675                                  ;    Each /L
 35676                                  ;    Each /S (there should be only one)
 35677                                  ;    Each UMB number (they follow ":" or ";")
 35678                                  ;    Each UMB size   (they follow ",")
 35679                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 35680                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 35681                                  ; -----------------------------------------------------------------------------
 35682                                  
 35683                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35684                                  	; (SYSINIT:2F9Fh)
 35685                                  
 35686                                  ParseVar:
 35687                                  	;pushreg <di, ds, es>
 35688                                  	; 01/01/2023
 35689                                  	;push	di ; * ; (not required) ; 01/01/2023
 35690 00002AA5 1E                      	push	ds
 35691 00002AA6 06                      	push	es
 35692                                  
 35693 00002AA7 06                      	push	es		; Make DS:SI point to it, as well as ES:SI
 35694 00002AA8 1F                      	pop	ds		; (regardless if we're in devhigh or loadhigh)
 35695 00002AA9 FC                      	cld
 35696                                  
 35697                                  ; ------------------------------------------------
 35698                                  ; PV10--ES:SI = any whitespace on the command-line
 35699                                  ; ------------------------------------------------
 35700                                  
 35701 00002AAA AC                      pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 35702 00002AAB E8A200                  	call	isWhite
 35703 00002AAE 74FA                    	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 35704                                  	;cmp	al,'/'
 35705 00002AB0 3C2F                    	cmp	al,SWTCH
 35706 00002AB2 7404                    	je	short pv20	;       ES:SI=="/L..."--go process a switch
 35707                                  
 35708 00002AB4 4E                      	dec	si		; Backup--it's now "odule options", and we need
 35709 00002AB5 F8                      	clc			; that "m" we just read (or whatever it is).
 35710 00002AB6 EB2B                    	jmp	short pvX	; Then return with carry clear == we're done.
 35711                                  
 35712 00002AB8 AC                      pv20:	lodsb			; Just read 'S' or 'L', hopefully
 35713                                  	;toUpper al		; So we make it upper-case, and...
 35714 00002AB9 24DF                    	and	al,0DFh
 35715                                  	;cmp	al,'S'
 35716 00002ABB 3C53                    	cmp	al,optS		; just read 'S'?
 35717 00002ABD 750D                    	jne	short pv30
 35718                                  
 35719                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 35720 00002ABF 2EFE06[6F1F]            	inc	byte [cs:fm_argc] ; 19/04/2019
 35721                                  
 35722                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 35723                                  	;
 35724                                  	;push	es
 35725                                  	;push	cs
 35726                                  	;pop	es
 35727                                  	;mov	[es:fUmbTiny],1	
 35728                                  	;pop	es
 35729                                  
 35730 00002AC4 2EC606[391F]01          	mov	byte [cs:fUmbTiny],1
 35731                                  
 35732 00002ACA EBDE                    	jmp	short pv10	; possibly even "/L...".
 35733                                  
 35734                                  pv30:	;cmp	al,'L'
 35735 00002ACC 3C4C                    	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 35736 00002ACE 750D                    	jne	short pvE1		; switch!
 35737                                  
 35738                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 35739 00002AD0 2EFE06[6F1F]            	inc	byte [cs:fm_argc] ; 19/04/2019
 35740                                  
 35741 00002AD5 E80E00                  	call	parseL
 35742 00002AD8 73D0                    	jnc	short pv10	; If no carry, go back and look for more
 35743                                  
 35744 00002ADA 4E                      	dec	si		; Else, back up and exit.
 35745 00002ADB EB03                    	jmp	short pvErr	; AX has already been set by parseL
 35746                                  
 35747                                  pvE1:	;mov	ax,3
 35748 00002ADD B80300                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 35749 00002AE0 4E                      pvErr:	dec	si
 35750 00002AE1 4E                      	dec	si
 35751 00002AE2 F9                      	stc
 35752                                  pvX:	;popreg	<es, ds, di>
 35753 00002AE3 07                      	pop	es
 35754 00002AE4 1F                      	pop	ds
 35755                                  	; 01/01/2023
 35756                                  	;pop	di ; * ; (not required) ; 01/01/2023
 35757 00002AE5 C3                      	retn
 35758                                  
 35759                                  ; -----------------------------------------------------------------------------
 35760                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 35761                                  ; -----------------------------------------------------------------------------
 35762                                  ; ENTRY:    ES:SI points to colon
 35763                                  ; EXIT:     ES:SI points to first character not parsed
 35764                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 35765                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 35766                                  ; -----------------------------------------------------------------------------
 35767                                  ; If the string here is terminated with anything other than whitespace or a
 35768                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 35769                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 35770                                  ; makes sure the app /L: is reported as being the culprit.
 35771                                  ; -----------------------------------------------------------------------------
 35772                                  
 35773                                  parseL:
 35774 00002AE6 AC                      	lodsb
 35775 00002AE7 3C3A                    	cmp	al,':'		; Make sure they did /L:
 35776 00002AE9 754E                    	jne	short plE1	; If they didn't, return with carry set.
 35777                                  
 35778                                  ; ------------------------------------------
 35779                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 35780                                  ; ------------------------------------------
 35781                                  
 35782 00002AEB E8DB00                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 35783 00002AEE 724F                    	jc	short plE2	; And error if it's a bad number.
 35784 00002AF0 E89D01                  	call	convUMB		; Convert any address to a UMB number
 35785                                  
 35786 00002AF3 88C1                    	mov	cl,al		; Remember the UMB number
 35787 00002AF5 E87600                  	call	stowUMB		; Mark this UMB # as used;
 35788 00002AF8 7245                    	jc	short plE2	; If it was already marked, it'll error
 35789                                  
 35790                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 35791 00002AFA 2EFE06[6F1F]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 35792                                  
 35793 00002AFF AC                      	lodsb
 35794 00002B00 3C3B                    	cmp	al,';'		; Did "umb;" ?
 35795 00002B02 74E7                    	je	short pl10	; Yep: go back and get another UMB.
 35796                                  
 35797 00002B04 E84900                  	call	isWhite		; Did "umb " ?
 35798 00002B07 743B                    	jz	short plX	; Yep: return (it'll go back to whitespace)
 35799                                  
 35800 00002B09 E83900                  	call	isEOL		; Did "umb" ?
 35801 00002B0C 7435                    	jz	short plSwX	; If so, backup and exit like everything's ok
 35802                                  
 35803                                  	;cmp	al,'/'
 35804 00002B0E 3C2F                    	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 35805 00002B10 7431                    	je	short plSwX	; If so, back up ES:SI one character and return
 35806                                  
 35807 00002B12 3C2C                    	cmp	al,','		; Did "umb," ?
 35808 00002B14 7523                    	jne	short plE1	; Just what the heck DID they do? Return error.
 35809                                  
 35810                                  ; --- Read a size -------------------------------------------------------------
 35811                                  
 35812 00002B16 E8B000                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 35813 00002B19 721E                    	jc	short plE1	; And error if it's a bad size.
 35814                                  
 35815 00002B1B E81601                  	call	toPara		; Convert from bytes to paragraphs
 35816                                  
 35817 00002B1E E8CE01                  	call	stowSiz		; CL still has the UMB number for this routine
 35818                                  
 35819                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 35820 00002B21 2EFE06[6F1F]            	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 35821                                  
 35822 00002B26 AC                      	lodsb
 35823 00002B27 3C3B                    	cmp	al,';'		; They did "umb,size;", so get another UMB.
 35824 00002B29 74C0                    	je	short pl10	;
 35825                                  
 35826 00002B2B E82200                  	call	isWhite		; Did it end with whitespace?
 35827 00002B2E 7414                    	jz	short plX	; If so, we're done here--go back.
 35828                                  
 35829 00002B30 E81200                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 35830 00002B33 740E                    	jz	short plSwX	; If so, backup and exit like everything's ok
 35831                                  
 35832                                  	;cmp	al,'/'
 35833 00002B35 3C2F                    	cmp	al,SWTCH	; Did they do "umb,size/" ?
 35834 00002B37 740A                    	je	short plSwX	; If so, again, we're done here.
 35835                                  plE1:	
 35836                                  	;mov	ax,1
 35837 00002B39 B80100                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 35838 00002B3C 4E                      	dec	si
 35839 00002B3D F9                      	stc
 35840 00002B3E C3                      	retn
 35841                                  
 35842                                  plE2:	;mov	ax,2
 35843 00002B3F B80200                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 35844                                  	; 12/12/2022
 35845                                  	; cf=1
 35846                                  	;stc
 35847 00002B42 C3                      	retn
 35848                                  plSwX:	
 35849 00002B43 4E                      	dec	si		; If we hit a '/' character, back up one char
 35850                                  				; so the whitespace checker will see it too.
 35851                                  plX:	; 12/12/2022
 35852                                  	; cf=0
 35853                                  	;clc			; Then just return with carry clear, so
 35854 00002B44 C3                      	retn			; ParseVar will go about its business.
 35855                                  
 35856                                  ; -----------------------------------------------------------------------------
 35857                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 35858                                  ; -----------------------------------------------------------------------------
 35859                                  ; ENTRY:    None
 35860                                  ; EXIT:     None
 35861                                  ; ERROR:    None
 35862                                  ; USES:     fm_argc, flags
 35863                                  ; -----------------------------------------------------------------------------
 35864                                  
 35865                                  ;incArgc:
 35866                                  	;push	ax
 35867                                  
 35868                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 35869                                  
 35870                                  	;mov	al,[cs:fm_argc]
 35871                                  
 35872                                  	;inc	al		; Increment it,
 35873                                  
 35874                                  	;;putdata fm_argc, al	; And store it right back.
 35875                                  
 35876                                  	;mov	[cs:fm_argc],al
 35877                                  
 35878                                  	;pop	ax
 35879                                  	;retn
 35880                                  
 35881                                  ; -----------------------------------------------------------------------------
 35882                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 35883                                  ; -----------------------------------------------------------------------------
 35884                                  ; ENTRY:    AL contains character to test
 35885                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 35886                                  ; ERROR:    None
 35887                                  ; USES:     ZF
 35888                                  ; -----------------------------------------------------------------------------
 35889                                  
 35890                                  isEOL:
 35891 00002B45 3C00                    	cmp	al,0		; Null-terminator
 35892 00002B47 7406                    	je	short ieX
 35893 00002B49 3C0D                    	cmp	al,CR ; 0Dh	; Carriage Return
 35894 00002B4B 7402                    	je	short ieX
 35895 00002B4D 3C0A                    	cmp	al,LF ; 0Ah	; LineFeed
 35896                                  ieX:	
 35897 00002B4F C3                      	retn
 35898                                  
 35899                                  ; -----------------------------------------------------------------------------
 35900                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 35901                                  ; -----------------------------------------------------------------------------
 35902                                  ; ENTRY:    AL contains character to test
 35903                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 35904                                  ; ERROR:    None
 35905                                  ; USES:     ZF
 35906                                  ; -----------------------------------------------------------------------------
 35907                                  
 35908                                  isWhite:
 35909 00002B50 3C20                    	cmp	al,' '		; Space
 35910 00002B52 7406                    	je	short iwX
 35911 00002B54 3C3D                    	cmp	al,'='		; Equals (treat as whitespace)
 35912 00002B56 7402                    	je	short iwX
 35913 00002B58 3C09                    	cmp	al,tab ; 9	; Tab
 35914                                  iwX:	
 35915 00002B5A C3                      	retn
 35916                                  
 35917                                  ; -----------------------------------------------------------------------------
 35918                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 35919                                  ; -----------------------------------------------------------------------------
 35920                                  ; ENTRY:    AL contains UMB number
 35921                                  ; EXIT:     None
 35922                                  ; ERROR:    None
 35923                                  ; USES:     Flags, variables in highvar.inc
 35924                                  ; -----------------------------------------------------------------------------
 35925                                  
 35926                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 35927                                  
 35928                                  unMarkUMB:
 35929                                  	; 02/01/2023
 35930                                  	;push	ax
 35931                                  	;push	bx
 35932                                  	;push	di
 35933                                  	;push	es
 35934                                  	;
 35935                                  	;push	cs
 35936                                  	;pop	es
 35937                                  
 35938 00002B5B 30E4                    	xor	ah,ah
 35939 00002B5D 89C3                    	mov	bx,ax
 35940                                  
 35941                                  	; 19/04/2019
 35942                                  	
 35943                                  	;;mov	byte [es:bx+UmbUsed],0
 35944                                  	;mov	[es:bx+UmbUsed],ah ; 0
 35945                                  	; 02/01/2023
 35946                                  	; ds= cs
 35947                                  	;mov	[cs:bx+UmbUsed],ah ; 0
 35948 00002B5F 88A7[3D1F]              	mov	[bx+UmbUsed],ah ; 0
 35949                                  
 35950 00002B63 3806[3C1F]              	cmp	[UmbLoad],al
 35951                                  	;cmp	[cs:UmbLoad],al
 35952                                  	;;cmp	[es:UmbLoad],al
 35953 00002B67 7504                    	jne	short umu10
 35954                                  
 35955                                  	;;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 35956                                  	;mov	[es:UmbLoad],ah ; 0
 35957                                  	; 02/01/2023
 35958                                  	; ds = cs
 35959                                  	;mov	[cs:UmbLoad],ah ; 0
 35960 00002B69 8826[3C1F]              	mov	[UmbLoad],ah ; 0
 35961                                  umu10:	
 35962                                  	;pop	es
 35963                                  	;pop	di
 35964                                  	;pop	bx
 35965                                  	;pop	ax
 35966 00002B6D C3                      	retn
 35967                                  
 35968                                  ; -----------------------------------------------------------------------------
 35969                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 35970                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 35971                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 35972                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 35973                                  ; -----------------------------------------------------------------------------
 35974                                  ; ENTRY:    AL contains UMB number, as specified by the user
 35975                                  ; EXIT:     None
 35976                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 35977                                  ; USES:     AX, Flags, variables in highvar.inc
 35978                                  ; -----------------------------------------------------------------------------
 35979                                  
 35980                                  	; 01/01/2023 - Retro DOS v4.2
 35981                                  stowUMB:
 35982 00002B6E 3C10                    	cmp	al,MAXUMB ; 16
 35983 00002B70 7202                    	jb	short su10
 35984 00002B72 F9                      	stc
 35985 00002B73 C3                      	retn			; Ooops-- UMB>=MAXUMB
 35986                                  su10:	
 35987                                  	; 01/01/2023
 35988                                  	;push	bx
 35989                                  	;push	di
 35990                                  	;push	si
 35991                                  	;push	ds
 35992                                  	;push	es
 35993                                  	;push	cs
 35994                                  	;pop	es
 35995                                  	;push	cs
 35996                                  	;pop	ds
 35997                                  
 35998                                  	; 01/01/2023
 35999                                  	; ds <> cs
 36000                                  	;cmp	byte [cs:UmbLoad],0FFh
 36001 00002B74 2E803E[3C1F]FF          	cmp	byte [cs:UmbLoad],UNSPECIFIED
 36002                                  				; If this, we haven't been here before
 36003 00002B7A 7504                    	jne	short su20
 36004 00002B7C 2EA2[3C1F]              	mov	[cs:UmbLoad],al	; So remember this UMB as the load UMB slot.
 36005                                  
 36006                                  	;;cmp	byte [UmbLoad],0FFh
 36007                                  	;cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 36008                                  	;jne	short su20
 36009                                  	;mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 36010                                  su20:	
 36011 00002B80 08C0                    	or	al,al		; If they gave UMB 0, there's really nothing
 36012 00002B82 740E                    	jz	short su30	; that we should do here.
 36013                                  
 36014                                  	;mov	bl,al
 36015                                  	;xor	bh,bh
 36016                                  	;mov	ax,1		; Now, AX = 1, and BX = UMB Number
 36017                                  	; 01/01/2023
 36018 00002B84 30E4                    	xor	ah,ah
 36019 00002B86 89C3                    	mov	bx,ax
 36020 00002B88 B001                    	mov	al,1
 36021                                  
 36022                                  	;xchg	[es:bx+UmbUsed],al
 36023                                  	; 01/01/2023
 36024 00002B8A 2E8687[3D1F]            	xchg	[cs:bx+UmbUsed],al
 36025                                  
 36026                                  	;or	al,al		; If it was already 1, then al==1... and that
 36027                                  	;jz	short su30	; means an error.
 36028                                  	;
 36029                                  	;stc			; OOOPS!  This one's been used before.  :(
 36030                                  	
 36031                                  	; 01/01/2023
 36032 00002B8F 3C01                    	cmp	al,1
 36033 00002B91 F5                      	cmc 	; if al > 0 -> cf = 1
 36034                                  su30:	
 36035                                  	; 01/01/2023
 36036                                  	;pop	es
 36037                                  	;pop	ds
 36038                                  	;pop	si
 36039                                  	;pop	di
 36040                                  	;pop	bx
 36041 00002B92 C3                      	retn
 36042                                  
 36043                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36044                                  %if 0
 36045                                  ; -----------------------------------------------------------------------------
 36046                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 36047                                  ; -----------------------------------------------------------------------------
 36048                                  ; ENTRY:    CL contains UMB number, AX contains size
 36049                                  ; EXIT:     None
 36050                                  ; ERROR:    None
 36051                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 36052                                  ; -----------------------------------------------------------------------------
 36053                                  
 36054                                  ; 13/05/2019
 36055                                  
 36056                                  	; 01/01/2023 - Retro DOS v4.2
 36057                                  stowSiz:
 36058                                  	; 01/01/2023
 36059                                  	;push	bx
 36060                                  	;;push	di ; ?
 36061                                  	;push	es
 36062                                  
 36063                                  	;push	cs
 36064                                  	;pop	es	
 36065                                  
 36066                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 36067                                  	mov	bh,0			;     bx==UMB number, AX==size
 36068                                  	shl	bl,1			;     bx==offset into array, AX=size
 36069                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 36070                                  	; 01/01/2023
 36071                                  	mov	[cs:bx+UmbSize],ax	; Store the size
 36072                                  
 36073                                  	; 01/01/2023
 36074                                  	;pop	es
 36075                                  	;;pop	di ; ?
 36076                                  	;pop	bx
 36077                                  
 36078                                  	retn
 36079                                  %endif
 36080                                  
 36081                                  ; -----------------------------------------------------------------------------
 36082                                  ;*** toDigit - converts a character-digit to its binary counterpart
 36083                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 36084                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 36085                                  ; A-F are considered valid iff gnradix is 16.
 36086                                  ; -----------------------------------------------------------------------------
 36087                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 36088                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 36089                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 36090                                  ; USES:     CL, Flags
 36091                                  ; -----------------------------------------------------------------------------
 36092                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 36093                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 36094                                  ; will be 10 or 16.
 36095                                  ; -----------------------------------------------------------------------------
 36096                                  
 36097                                  gnradix:
 36098 00002B93 0000                    	dw	0		; Must be a word--16x16 multiplication
 36099                                  
 36100                                  toDigit:
 36101 00002B95 2E833E[932B]10          	cmp	word [cs:gnradix],16
 36102 00002B9B 751C                    	jne	short td20	; Don't check hex digits if radix isn't 16
 36103                                  
 36104                                  toDigit_hex:
 36105 00002B9D 80F961                  	cmp	cl,'a'	; 61h
 36106 00002BA0 7209                    	jb	short td10
 36107 00002BA2 80F966                  	cmp	cl,'f'	; 66h
 36108 00002BA5 7720                    	ja	short tdE	; Nothing valid above 'z' at all...
 36109 00002BA7 80E957                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 36110                                  	;clc			; <- CLC is implicit from last SUB
 36111 00002BAA C3                      	retn
 36112                                  td10:	
 36113 00002BAB 80F941                  	cmp	cl,'A'  ; 41h
 36114 00002BAE 7209                    	jb	short td20	; Below 'A'?  Not a letter...
 36115 00002BB0 80F946                  	cmp	cl,'F'	; 46h
 36116 00002BB3 7712                    	ja	short tdE	; Above 'F'?  Not a digit.
 36117 00002BB5 80E937                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 36118                                  	;clc			; <- CLC is implicit from last SUB
 36119 00002BB8 C3                      	retn
 36120                                  toDigit_dec:
 36121                                  td20:	
 36122 00002BB9 80F930                  	cmp	cl,'0'		; If less than zero,
 36123                                  	;jb	short tdE	; Done.
 36124 00002BBC 720A                    	jb	short tdEr ; 08/04/2019
 36125 00002BBE 80F939                  	cmp	cl,'9'		; Or, if greater than nine,
 36126 00002BC1 7704                    	ja	short tdE	; Done.
 36127 00002BC3 80E930                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 36128                                  	;clc			; <- CLC is implicit from last SUB
 36129 00002BC6 C3                      	retn
 36130                                  tdE:	
 36131 00002BC7 F9                      	stc
 36132                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 36133 00002BC8 C3                      	retn
 36134                                  
 36135                                  ; -----------------------------------------------------------------------------
 36136                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 36137                                  ; -----------------------------------------------------------------------------
 36138                                  ; ENTRY:    ES:SI points to an ascii string to scan
 36139                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 36140                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 36141                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 36142                                  ; -----------------------------------------------------------------------------
 36143                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 36144                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 36145                                  ; will be 10 or 16.
 36146                                  ; -----------------------------------------------------------------------------
 36147                                  
 36148                                  ; 08/04/2019 - Retro DOS v4.0
 36149                                  
 36150                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36151                                  ; (SYSINIT:3109h)
 36152                                  
 36153                                  GetXNum:
 36154                                  	;pushreg <bx, cx, ds>
 36155                                  	; 01/01/2023
 36156                                  	;push	bx
 36157 00002BC9 51                      	push	cx ; *
 36158                                  	;push	ds
 36159                                  
 36160 00002BCA FC                      	cld
 36161 00002BCB 31C0                    	xor	ax,ax
 36162 00002BCD 31DB                    	xor	bx,bx
 36163 00002BCF 31C9                    	xor	cx,cx
 36164 00002BD1 31D2                    	xor	dx,dx			; Start with 0 (makes sense)
 36165                                  
 36166 00002BD3 2EC706[932B]0A00        	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 36167                                  
 36168 00002BDA 268A0C                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 36169                                  	;call	toDigit
 36170 00002BDD E8D9FF                  	call	toDigit_dec
 36171                                  	;jc	short gxnE		; If it's not a digit, leave now.
 36172                                  	; 01/01/2023
 36173 00002BE0 7233                    	jc	short gxnX
 36174                                  
 36175 00002BE2 08C9                    	or	cl,cl
 36176 00002BE4 7517                    	jnz	short gxn20		; Doesn't have '0x'
 36177 00002BE6 268A4C01                	mov	cl,[es:si+1]
 36178 00002BEA 80F978                  	cmp	cl,'x'			; Either 'x'...
 36179 00002BED 7405                    	je	short gxn10
 36180 00002BEF 80F958                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 36181 00002BF2 7509                    	jne	short gxn20
 36182                                  
 36183                                  gxn10:	
 36184 00002BF4 2EC706[932B]1000        	mov	word [cs:gnradix], 16
 36185 00002BFB 46                      	inc	si			; Since we read "0x", march over it.
 36186 00002BFC 46                      	inc	si
 36187                                  
 36188                                  ; ------------------------------------------------------
 36189                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 36190                                  ;        DX:AX = current total
 36191                                  ;        BX    = 0
 36192                                  ;        CH    = 0
 36193                                  ; ------------------------------------------------------
 36194                                  
 36195                                  gxn20:	
 36196 00002BFD 268A0C                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 36197 00002C00 46                      	inc	si
 36198                                  
 36199 00002C01 E891FF                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 36200 00002C04 720D                    	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 36201                                  
 36202 00002C06 E80E00                  	call	mul32		; Multiply DX:AX by gnradix
 36203 00002C09 720A                    	jc	short gxnX	; (if it's too big, error out)
 36204                                  
 36205 00002C0B 01C8                    	add	ax,cx		; Add the digit
 36206 00002C0D 11DA                    	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 36207                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 36208                                  	;jmp	short gxn20
 36209 00002C0F 73EC                    	jnc	short gxn20
 36210                                  gxnE:	
 36211                                  	;stc			; In this case, we need to set the carry
 36212 00002C11 EB02                    	jmp	short gxnX	; and leave--there were no digits given.
 36213                                  gxnQ:	
 36214 00002C13 4E                      	dec	si		; Don't read in the offensive character.
 36215 00002C14 F8                      	clc			; And clear carry, so they know it's okay.
 36216                                  gxnX:	
 36217                                  	; 01/01/2023
 36218                                  	;pop	ds
 36219 00002C15 59                      	pop	cx ; *
 36220                                  	;pop	bx
 36221 00002C16 C3                      	retn
 36222                                  
 36223                                  ; -----------------------------------------------------------------------------
 36224                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 36225                                  ; -----------------------------------------------------------------------------
 36226                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 36227                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 36228                                  ; ERROR:   Carry set if number was too large
 36229                                  ; USES:    Flags, AX, DX
 36230                                  ; -----------------------------------------------------------------------------
 36231                                  
 36232                                  mul32:
 36233 00002C17 50                      	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 36234 00002C18 89D0                    	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 36235 00002C1A 2EF726[932B]            	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 36236 00002C1F 7211                    	jc	short m32E	; Too big?
 36237                                  
 36238 00002C21 89C2                    	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 36239 00002C23 58                      	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 36240                                  
 36241 00002C24 87D3                    	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 36242 00002C26 2EF726[932B]            	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 36243 00002C2B 87D3                    	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 36244 00002C2D 01DA                    	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 36245 00002C2F 31DB                    	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 36246 00002C31 C3                      	retn
 36247                                  m32E:	
 36248 00002C32 58                      	pop	ax
 36249 00002C33 C3                      	retn
 36250                                  
 36251                                  ; -----------------------------------------------------------------------------
 36252                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 36253                                  ; -----------------------------------------------------------------------------
 36254                                  ; ENTRY:   DX:AX = the number to be divided
 36255                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 36256                                  ; ERROR:   None
 36257                                  ; USES:    Flags, AX, DX
 36258                                  ; -----------------------------------------------------------------------------
 36259                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 36260                                  ;       can't ensure a 386 host machine. Sorry.
 36261                                  ; -----------------------------------------------------------------------------
 36262                                  
 36263                                  	; 01/01/2023 - Retro DOS v4.2
 36264                                  toPara:
 36265 00002C34 51                      	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 36266                                  
 36267 00002C35 B104                    	mov	cl,4		;
 36268 00002C37 D3E8                    	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 36269 00002C39 92                      	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 36270 00002C3A B10C                    	mov	cl,12
 36271 00002C3C D3E0                    	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 36272 00002C3E 09D0                    	or	ax,dx		;    AX=hhhh LLLL llll llll
 36273                                  
 36274 00002C40 59                      	pop	cx
 36275 00002C41 C3                      	retn
 36276                                  
 36277                                  ; -----------------------------------------------------------------------------
 36278                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 36279                                  ; -----------------------------------------------------------------------------
 36280                                  ; ENTRY:  Nothing
 36281                                  ; EXIT:   AX contains 0x9FFF for most systems
 36282                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 36283                                  ; USES:   Flags, AX
 36284                                  ; -----------------------------------------------------------------------------
 36285                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 36286                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 36287                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 36288                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 36289                                  ; -----------------------------------------------------------------------------
 36290                                  
 36291                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36292                                  UmbHead:
 36293                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 36294                                  
 36295                                  	;push	si ; ?
 36296                                  	;push	ds ; ? 
 36297                                  	;push	es
 36298                                  	;push	bx ; *	
 36299                                  
 36300                                  	; 09/04/2019
 36301                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 36302                                  
 36303 00002C42 B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 36304 00002C44 CD21                    	int	21h
 36305                                  
 36306 00002C46 26A18C00                	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 36307                                  	
 36308                                  	; 01/01/2023
 36309 00002C4A 83F8FF                  	cmp	ax,0FFFFh
 36310 00002C4D F5                      	cmc
 36311                                  	; if AX=0FFFFh -> CF=1
 36312 00002C4E C3                      	retn
 36313                                  
 36314                                  ; 01/01/2023
 36315                                  ;%if 0
 36316                                  ;	cmp	ax,0FFFFh
 36317                                  ;	je	short uhE		; If it's 0xFFFF, it's an error...
 36318                                  ;
 36319                                  ;	clc				; Else, it isn't (CLC done by prev cmp)
 36320                                  ;	;jmp	short uhX
 36321                                  ;	; 12/12/2022
 36322                                  ;	retn
 36323                                  ;uhE:	
 36324                                  ;	stc
 36325                                  ;uhX:	
 36326                                  ;	;pop	bx ; *
 36327                                  ;	;pop	es
 36328                                  ;	;pop	ds ; ?
 36329                                  ;	;pop	si ; ?
 36330                                  ;	retn
 36331                                  ;%endif
 36332                                  
 36333                                  ; -----------------------------------------------------------------------------
 36334                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 36335                                  ; -----------------------------------------------------------------------------
 36336                                  ; ENTRY:  ES:0 should point to a valid MCB
 36337                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 36338                                  ; USES:   Flags
 36339                                  ; -----------------------------------------------------------------------------
 36340                                  
 36341                                  isSysMCB:
 36342                                  	;push	ax
 36343                                  
 36344                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 36345                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 36346                                  	;je	short ism10
 36347                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 36348                                  	;;je	short ism10
 36349                                  	;;jmp	short ismX		; Anything else isn't.
 36350                                  	;jne	short ismX
 36351 00002C4F 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 36352 00002C55 7507                    	jne	short ismX 
 36353                                  ism10:	
 36354                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 36355                                  	;cmp	ax,'SC' ; 4353h
 36356 00002C57 26813E08005343          	cmp	word [es:ARENA.NAME],'SC'
 36357                                  ismX:	
 36358                                  	;pop	ax
 36359 00002C5E C3                      	retn
 36360                                  
 36361                                  ; 09/04/2019 - Retro DOS v4.0
 36362                                  
 36363                                  ; -----------------------------------------------------------------------------
 36364                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 36365                                  ; -----------------------------------------------------------------------------
 36366                                  ; ENTRY:  AX contains a segment address
 36367                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 36368                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 36369                                  ; USES:   Flags, AX
 36370                                  ; -----------------------------------------------------------------------------
 36371                                  ; An address in the following areas is treated as:
 36372                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 36373                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 36374                                  ;      ...
 36375                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 36376                                  ; -----------------------------------------------------------------------------
 36377                                  
 36378                                  	; 01/01/2023 - Retro DOS v4.2
 36379                                  AddrToUmb:
 36380                                  	; 01/01/2023
 36381                                  	;push	cx
 36382                                  	;push	dx
 36383 00002C5F 06                      	push	es
 36384                                  
 36385 00002C60 89C2                    	mov	dx,ax		; DX = address to search for
 36386                                  
 36387 00002C62 E8DDFF                  	call	UmbHead		; AX = first segment
 36388 00002C65 7222                    	jc	short atuE	; If it couldn't get it, error out.
 36389                                  
 36390                                  	; 22/07/2023
 36391                                  	;mov	es,ax ; *	; ES = first UMB segment
 36392 00002C67 31C9                    	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 36393                                  
 36394                                  	; 22/07/2023
 36395                                  atu10:
 36396 00002C69 8EC0                    	mov	es,ax ; * ; ** ; 22/07/2023
 36397                                  ; ----------------------------------------
 36398                                  ; ATU10--ES - Current MCB address
 36399                                  ;        DX - Address given for conversion
 36400                                  ;        CX - Current UMB #
 36401                                  ; ----------------------------------------
 36402                                  
 36403                                  ;atu10:	
 36404                                  	;mov	ax,es ; * ; 18/07/2023
 36405 00002C6B 39D0                            cmp	ax,dx		; Present segment >= given segment?
 36406 00002C6D 731D                    	jae	short atuX	; Yep--done.
 36407                                  
 36408 00002C6F E8DDFF                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 36409 00002C72 7501                    	jnz	short atu20
 36410                                  
 36411 00002C74 41                      	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 36412                                  atu20:	
 36413                                  	;mov	al,[es:ARENA.SIGNATURE]
 36414                                  	;cmp	al,arena_signature_end  ; 'Z'
 36415                                  	; 22/07/2023
 36416                                  	; ax = es
 36417                                  	;mov	ax,es ; **
 36418 00002C75 2603060300              	add	ax,[es:ARENA.SIZE]
 36419 00002C7A 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 36420 00002C80 7403                    	je	short atu30		; 'Z' means this was the last MCB... that's it.
 36421                                  
 36422                                  	;NextMCB es,ax
 36423                                  
 36424                                  	;mov	ax,es ; **
 36425                                  	;;add	ax,[es:3]
 36426                                  	;add	ax,[es:ARENA.SIZE]
 36427 00002C82 40                      	inc	ax
 36428                                  	; 22/07/2023
 36429                                  	;mov	es,ax ; *
 36430 00002C83 EBE4                    	jmp	short atu10
 36431                                  
 36432                                  ; -----------------------------------------------------------------------------
 36433                                  ; if we get to atu30, they specified a number that was past the last MCB.
 36434                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 36435                                  ; -----------------------------------------------------------------------------
 36436                                  
 36437                                  atu30:	
 36438                                  	; 22/07/2023
 36439                                  	; ax = es + [es:ARENA.SIZE] 
 36440                                  	;mov	ax,es ; **
 36441                                  	;add	ax,[es:ARENA.SIZE] ; **
 36442 00002C85 39D0                    	cmp	ax,dx		; Present >= given?
 36443 00002C87 7303                    	jae	short atuX	; Yep! It _was_ inside.
 36444                                  atuE:	
 36445 00002C89 31C9                    	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 36446 00002C8B 49                      	dec	cx		; (that makes it return 0xFFFF and sets CF)
 36447                                  atuX:	
 36448 00002C8C 89C8                    	mov	ax,cx		; Return the UMB number in AX
 36449                                  	
 36450 00002C8E 07                      	pop	es	
 36451                                  	; 01/01/2023
 36452                                  	;pop	dx
 36453                                  	;pop	cx
 36454 00002C8F C3                      	retn
 36455                                  
 36456                                  ; -----------------------------------------------------------------------------
 36457                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 36458                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 36459                                  ; address rather than a UMB number... and use that address to look up a UMB.
 36460                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 36461                                  ; -----------------------------------------------------------------------------
 36462                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 36463                                  ; EXIT:   AX will contain a UMB number
 36464                                  ; ERROR:  None
 36465                                  ; USES:   Flags, AX
 36466                                  ; -----------------------------------------------------------------------------
 36467                                  
 36468                                  	; 01/01/2023 - Retro DOS v4.2
 36469                                  convUMB:
 36470 00002C90 2E833E[932B]10          	cmp	word [cs:gnradix],16
 36471 00002C96 7507                    	jne	short cu10	; If it didn't read in hex, it's not an address
 36472 00002C98 E8C4FF                  	call	AddrToUmb	; Else, convert the address to a UMB number
 36473                                  	;cmp	ax,0FFFFh
 36474                                  	;jne	short cu10
 36475                                  	;inc	ax		; If too high, ignore it (make it conventional)
 36476                                  	; 01/01/2023
 36477 00002C9B 40                      	inc	ax
 36478 00002C9C 7401                    	jz	short cu10	; If too high, ignore it (make it conventional)
 36479 00002C9E 48                      	dec	ax
 36480                                  cu10:	
 36481 00002C9F C3                      	retn
 36482                                  
 36483                                  ; 01/01/2023 - Retro DOS v4.2
 36484                                  ;%if 0
 36485                                  ;
 36486                                  ;; -----------------------------------------------------------------------------
 36487                                  ;;*** setUMBs - links umbs and sets allocation strategy for a load
 36488                                  ;;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 36489                                  ;; of the usual HIGH_FIRST. See the code.
 36490                                  ;; -----------------------------------------------------------------------------
 36491                                  ;; ENTRY:  None
 36492                                  ;; EXIT:   None
 36493                                  ;; ERROR:  None
 36494                                  ;; USES:   Flags, fm_umb, fm_strat
 36495                                  ;; -----------------------------------------------------------------------------
 36496                                  ;
 36497                                  ;setUMBs:
 36498                                  ;	push	ax
 36499                                  ;	push	bx
 36500                                  ;	call	fm_link
 36501                                  ;	pop	bx
 36502                                  ;	pop	ax
 36503                                  ;	retn
 36504                                  ;
 36505                                  ;%endif
 36506                                  
 36507                                  ; 18/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 36508                                  ; loadLow subroutine is not used anywhere of IO.SYS 6.22 (& 5.0)
 36509                                  %if 0
 36510                                  
 36511                                  ; -----------------------------------------------------------------------------
 36512                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 36513                                  ; -----------------------------------------------------------------------------
 36514                                  ; ENTRY:  None
 36515                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 36516                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 36517                                  ; ERROR:  None
 36518                                  ; USES:   Flags, fm_strat, fm_umb
 36519                                  ; -----------------------------------------------------------------------------
 36520                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 36521                                  ; load UMB, and it is 0. That 0 can be either from the user having _specified_
 36522                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 36523                                  ; such that the load UMB is too small, and shouldn't be used.
 36524                                  ; -----------------------------------------------------------------------------
 36525                                  
 36526                                  loadLow:
 36527                                  	;push	ds
 36528                                  	;push	cs		; Point DS into appropriate data segment
 36529                                  	;pop	ds	
 36530                                  
 36531                                  	;mov	al,[UmbLoad]
 36532                                  	mov	al,[cs:UmbLoad]
 36533                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 36534                                  	jne	short ll10
 36535                                  
 36536                                  	stc
 36537                                  ll15:
 36538                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 36539                                  	;stc
 36540                                  	;jmp	short llX
 36541                                  	retn
 36542                                  ll10:	
 36543                                  	or	al,al		; AL=the load UMB: Is it == 0?
 36544                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 36545                                  
 36546                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 36547                                  	retn
 36548                                  
 36549                                  	;mov	al,1
 36550                                  	;clc
 36551                                  ;llX:
 36552                                  	;pop	ds		; Return DS to where it was
 36553                                  	;retn
 36554                                  
 36555                                  %endif
 36556                                  
 36557                                  ; -----------------------------------------------------------------------------
 36558                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 36559                                  ; -----------------------------------------------------------------------------
 36560                                  ; ENTRY:  None
 36561                                  ; EXIT:   None
 36562                                  ; ERROR:  None
 36563                                  ; USES:   Flags, fm_strat, fm_umb
 36564                                  ; -----------------------------------------------------------------------------
 36565                                  
 36566                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36567                                  	; (SYSINIT:322Fh)
 36568                                  HideUMBs:
 36569                                  	; 01/01/2023
 36570                                  	;push	ax
 36571                                  	;push	cx
 36572                                  	;push	ds
 36573 00002CA0 06                      	push	es
 36574                                  
 36575                                  	; 01/01/2023
 36576                                  	; ds = cs
 36577                                  
 36578 00002CA1 E86E02                  	call	UmbTest		; See if we REALLY linked in anything...
 36579 00002CA4 7232                    	jc	short husX	; ...if not, there's nothing for us to do.
 36580                                  
 36581 00002CA6 E892FD                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 36582                                  	
 36583                                  	;call	setUMBs		; Link UMBs and set memory-allocation strategy
 36584                                  	; 01/01/2023
 36585 00002CA9 E8DCFD                  	call	fm_link
 36586                                  
 36587                                  	;putdata fInHigh,1	; Remember that we're now running high
 36588                                  	;mov	byte [cs:fInHigh],1
 36589                                  	; 01/01/2023
 36590 00002CAC C606[381F]01            	mov	byte [fInHigh],1
 36591                                  
 36592                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 36593                                  	;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 36594                                  	; 01/01/2023
 36595 00002CB1 A0[3C1F]                	mov	al,[UmbLoad]
 36596                                  
 36597 00002CB4 3CFF                    	cmp	al,UNSPECIFIED	; If they didn't,
 36598 00002CB6 7420                    	je	short husX	; then we shouldn't do this loop:
 36599                                  
 36600 00002CB8 31C9                    	xor	cx,cx
 36601                                  
 36602                                  ; -----------------------------------------------
 36603                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 36604                                  ; -----------------------------------------------
 36605                                  
 36606 00002CBA 41                      hus10:	inc	cx		; For each UMB:
 36607                                  	; 01/01/2023
 36608 00002CBB 80F910                  	cmp	cl,MAXUMB
 36609                                  	;cmp	cx,MAXUMB ; 16
 36610 00002CBE 730E                    	jae	short hus20
 36611                                  
 36612 00002CC0 88C8                    	mov	al,cl		; (stopping as soon as we're outside of the
 36613 00002CC2 06                      	push	es
 36614 00002CC3 E8A200                  	call	findUMB		; valid range of UMBs)
 36615 00002CC6 07                      	pop	es		; push/pop: trash what findumb finds. :-)
 36616 00002CC7 7205                    	jc	short hus20
 36617                                  	
 36618                                  	; 02/01/2023
 36619                                  	;push	cx ; *
 36620 00002CC9 E84F01                  	call	_hideUMB_	; hide what we need to hide.
 36621                                  	;pop	cx ; *
 36622                                  
 36623 00002CCC EBEC                    	jmp	short hus10
 36624                                  hus20:	
 36625                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 36626                                  	; 01/01/2023
 36627                                  	; ds = cs
 36628                                  	;mov	al,[UmbLoad]
 36629                                  	;;mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 36630 00002CCE 800E[3C1F]00            	or	byte [UmbLoad],0
 36631                                  	;or	al,al		; --Is the load UMB 0? (-1==unspecified)
 36632 00002CD3 7503                    	jnz	short husX	; If not, we're done.
 36633                                  
 36634 00002CD5 E86802                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 36635                                  husX:	
 36636 00002CD8 07                      	pop	es
 36637                                  	; 01/01/2023
 36638                                  	;pop	ds
 36639                                  	;pop	cx
 36640                                  	;pop	ax
 36641 00002CD9 C3                      	retn
 36642                                  
 36643                                  ; -----------------------------------------------------------------------------
 36644                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 36645                                  ; -----------------------------------------------------------------------------
 36646                                  ; ENTRY:  None
 36647                                  ; EXIT:   AL == load UMB
 36648                                  ; ERROR:  None
 36649                                  ; USES:   Flags, AX
 36650                                  ; -----------------------------------------------------------------------------
 36651                                  
 36652                                  ;GetLoadUMB:
 36653                                  ;	;getdata al, UmbLoad
 36654                                  ;	push	ds
 36655                                  ;	push	cs
 36656                                  ;	pop	ds
 36657                                  ;	mov	al,[UmLoad]
 36658                                  ;	pop	ds
 36659                                  ;	retn
 36660                                  
 36661                                  ; -----------------------------------------------------------------------------
 36662                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 36663                                  ; -----------------------------------------------------------------------------
 36664                                  ; ENTRY:  None
 36665                                  ; EXIT:   AX == load UMB minimum size
 36666                                  ; ERROR:  None
 36667                                  ; USES:   Flags, AX
 36668                                  ; -----------------------------------------------------------------------------
 36669                                  
 36670                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36671                                  %if 0
 36672                                  	; 01/01/2023 - Retro DOS v4.2
 36673                                  GetLoadSize:
 36674                                  	; 09/04/2019 - Retro DOS v4.0
 36675                                  	;mov	al,[cs:UmbLoad]
 36676                                  	; 01/01/2023
 36677                                  	; ds = cs
 36678                                  	mov	al,[UmbLoad] 
 36679                                  	;jmp	short GetSize
 36680                                  
 36681                                  	;push	bx
 36682                                  	;;push	si
 36683                                  	;push	ds
 36684                                  	;push	cs
 36685                                  	;pop	ds
 36686                                  
 36687                                  	;mov	al,[UmbLoad]
 36688                                  
 36689                                  	;xor	ah,ah			;    ax==UMB
 36690                                  	;mov	bx,UmbSize		;    bx==array
 36691                                  	;shl	al,1	                ;    ax==offset
 36692                                  	;;add	ax,bx			;    ax==element index
 36693                                  	;;mov	si,ax			; ds:si==element index
 36694                                  
 36695                                  	;;lodsw				;    hh
 36696                                  
 36697                                  	;add	bx,ax
 36698                                  	;mov	ax,[bx]
 36699                                  
 36700                                  	;pop	ds
 36701                                  	;;pop	si
 36702                                  	;pop	bx
 36703                                  	;retn
 36704                                  %endif
 36705                                  
 36706                                  ; -----------------------------------------------------------------------------
 36707                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 36708                                  ; -----------------------------------------------------------------------------
 36709                                  ; ENTRY:  AL == a UMB number
 36710                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 36711                                  ; ERROR:  None
 36712                                  ; USES:   Flags, AX
 36713                                  ; -----------------------------------------------------------------------------
 36714                                  
 36715                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36716                                  GetLoadSize:
 36717                                  	; ds = cs
 36718                                  	;mov	al,[UmbLoad]
 36719                                  	; al = [UmbLoad] 
 36720                                  	; ....
 36721                                  
 36722                                  	; 01/01/2023 - Retro DOS v4.2
 36723                                  GetSize:
 36724                                  	; 09/04/2019 - Retro DOS v4.0
 36725                                  
 36726                                  	;push	bx ; 01/01/2023
 36727                                  	;push	si
 36728                                  	;push	ds
 36729                                  	;push	cs
 36730                                  	;pop	ds
 36731                                  
 36732 00002CDA 30E4                    	xor	ah,ah			;    ax==UMB
 36733 00002CDC BB[4D1F]                	mov	bx,UmbSize		;    bx==array
 36734 00002CDF D0E0                    	shl	al,1	                ;    ax==offset
 36735                                  	;add	ax,bx			;    ax==element index
 36736                                  	;mov	si,ax			; ds:si==element index
 36737                                  
 36738                                  	;lodsw				;    ax==size
 36739                                  
 36740 00002CE1 01C3                    	add	bx,ax
 36741                                  	; 01/01/2023
 36742                                  	; ds = cs
 36743 00002CE3 8B07                    	mov	ax,[bx]
 36744                                  	;mov	ax,[cs:bx]
 36745                                  
 36746                                  	;pop	ds
 36747                                  	;pop	si
 36748                                  	;pop	bx ; 01/01/2023
 36749                                  sls10:	; 08/09/2023
 36750 00002CE5 C3                      	retn
 36751                                  
 36752                                  ; -----------------------------------------------------------------------------
 36753                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 36754                                  ; -----------------------------------------------------------------------------
 36755                                  ; ENTRY:   AL == new load UMB
 36756                                  ; EXIT:    None
 36757                                  ; ERROR:   None
 36758                                  ; USES:    Flags, AX
 36759                                  ; -----------------------------------------------------------------------------
 36760                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 36761                                  ;          time you would ever need this, so that's okay.
 36762                                  ; -----------------------------------------------------------------------------
 36763                                  
 36764                                  ; StoLoadUMB subroutine is not used anywhere
 36765                                  ; of PCDOS 7.1 IBMBIO.COM (& MSDOS 6.21 IO.SYS)
 36766                                  ; Erdogan Tan - 18/07/2023
 36767                                  
 36768                                  ;StoLoadUMB:
 36769                                  ;	;putdata UmbLoad, al
 36770                                  ;	push	es
 36771                                  ;	push	cs
 36772                                  ;	pop	es		; mov [cs:UmbLoad], al !!!! ; 08/09/2023
 36773                                  ;	mov	[es:UmbLoad],al
 36774                                  ;	pop	es
 36775                                  ;	retn
 36776                                  
 36777                                  ; -----------------------------------------------------------------------------
 36778                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 36779                                  ; -----------------------------------------------------------------------------
 36780                                  ; ENTRY:  AL == new load size
 36781                                  ; EXIT:   None
 36782                                  ; ERROR:  None
 36783                                  ; USES:   Flags, AX
 36784                                  ; -----------------------------------------------------------------------------
 36785                                  	; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization) 
 36786                                  	; 01/01/2023 - Retro DOS v4.2
 36787                                  StoLoadSize:
 36788                                  	; 01/01/2023
 36789                                  	;push	dx
 36790                                  
 36791                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 36792                                  	;
 36793                                  	;push	ds
 36794                                  	;push	cs
 36795                                  	;pop	ds
 36796                                  	;mov	dl,[UmbLoad]
 36797                                  	;pop	ds	
 36798                                  
 36799                                  	; 08/09/2023
 36800                                  	; MSDOS 6.21 IO.SYS - SYSINIT:32B6h
 36801                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:3831h
 36802                                  
 36803                                  	;;mov	dl,[UmbLoad]		; BUG ! CL would/must be used here
 36804                                  					; instead of DL (*) ; 18/07/2023
 36805                                  	;mov	dl,[cs:UmbLoad] ; Retro DOS v4.0, v4.1, v4.2
 36806                                  	;cmp	dl,UNSPECIFIED ; 0FFh
 36807                                  	;je	short sls10
 36808                                  			
 36809                                  		; BUG ! stowSiz uses CL instead of DL !
 36810                                  		; (CL is set in ParseL which calls stowSiz)
 36811                                  		; (This BUG existing in PCDOS 7.1 IBMBIO.COM also)
 36812                                  		; Erdogan Tan - 18/07/2023
 36813                                  
 36814                                  	; 08/09/2023 (BugFix)
 36815                                  	;mov	cl,[cs:UmbLoad]
 36816                                  	; 08/09/2023 
 36817                                  	; ds = cs
 36818 00002CE6 8A0E[3C1F]              	mov	cl,[UmbLoad]
 36819 00002CEA 80F9FF                  	cmp	cl,UNSPECIFIED ; 0FFh
 36820 00002CED 74F6                    	je	short sls10 
 36821                                  
 36822                                  	; 08/09/2023
 36823                                  ;	call	stowSiz			; We've got a function to do just this
 36824                                  ;sls10:	
 36825                                  ;	; 01/01/2023
 36826                                  ;	;pop	dx
 36827                                  ;	retn
 36828                                  	
 36829                                  	; 08/09/2023
 36830                                  	;;jmp	stowSiz
 36831                                  	;jmp	short stowSiz
 36832                                  
 36833                                  ; 08/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 36834                                  %if 1
 36835                                  ; -----------------------------------------------------------------------------
 36836                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 36837                                  ; -----------------------------------------------------------------------------
 36838                                  ; ENTRY:    CL contains UMB number, AX contains size
 36839                                  ; EXIT:     None
 36840                                  ; ERROR:    None
 36841                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 36842                                  ; -----------------------------------------------------------------------------
 36843                                  
 36844                                  ; 13/05/2019
 36845                                  
 36846                                  	; 01/01/2023 - Retro DOS v4.2
 36847                                  stowSiz:
 36848                                  	; 01/01/2023
 36849                                  	;push	bx
 36850                                  	;;push	di ; ?
 36851                                  	;push	es
 36852                                  
 36853                                  	;push	cs
 36854                                  	;pop	es	
 36855                                  
 36856 00002CEF 88CB                    	mov	bl,cl			; Now bl==UMB number, AX==size
 36857 00002CF1 B700                    	mov	bh,0			;     bx==UMB number, AX==size
 36858 00002CF3 D0E3                    	shl	bl,1			;     bx==offset into array, AX=size
 36859                                  	;mov	[es:bx+UmbSize],ax	; Store the size
 36860                                  	; 01/01/2023
 36861 00002CF5 2E8987[4D1F]            	mov	[cs:bx+UmbSize],ax	; Store the size
 36862                                  
 36863                                  	; 01/01/2023
 36864                                  	;pop	es
 36865                                  	;;pop	di ; ?
 36866                                  	;pop	bx
 36867                                  
 36868 00002CFA C3                      	retn
 36869                                  %endif
 36870                                  
 36871                                  ; -----------------------------------------------------------------------------
 36872                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 36873                                  ; -----------------------------------------------------------------------------
 36874                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 36875                                  ; EXIT:     None; free elements in UMB marked as hidden
 36876                                  ; ERROR:    None
 36877                                  ; USES:     Flags
 36878                                  ; -----------------------------------------------------------------------------
 36879                                  
 36880                                  	; 01/01/2023 - Retro DOS v4.2
 36881                                  hideUMB:
 36882                                  	; 02/01/2023
 36883 00002CFB 52                      	push	dx ; (*)
 36884                                  	; 01/01/2023
 36885                                  	;push	ax
 36886 00002CFC 06                      	push	es
 36887                                  
 36888 00002CFD E86800                  	call	findUMB	; (*)	; Returns with carry if err, else ES == MCB
 36889 00002D00 7224                    	jc	short huX
 36890                                  
 36891                                  ; ------------------------------------------------
 36892                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 36893                                  ;            we're not in the same UMB, so exit.
 36894                                  ; ------------------------------------------------
 36895                                  
 36896 00002D02 E84AFF                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 36897 00002D05 741F                    	jz	short huX	; If it is, we've finished the UMB.
 36898                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 36899 00002D07 26830E010000            	or	word [es:ARENA.OWNER],0
 36900 00002D0D 7503                    	jnz	short hu20
 36901                                  
 36902 00002D0F E81700                  	call	hideMCB
 36903                                  hu20:	
 36904                                  	;mov	al,[es:ARENA.SIGNATURE]
 36905                                  	;cmp	al,arena_signature_end  ;'Z'
 36906                                  	; 19/07/2023
 36907 00002D12 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],'Z'
 36908 00002D18 740C                    	jz	short huX	; 'Z' means this was the last MCB... that's it.
 36909                                  
 36910                                  	;NextMCB es,ax		; Go on forward.
 36911 00002D1A 8CC0                    	mov     ax,es
 36912                                  	;add	ax,[es:3]
 36913 00002D1C 2603060300              	add     ax,[es:ARENA.SIZE]
 36914 00002D21 40                      	inc     ax
 36915 00002D22 8EC0                    	mov     es,ax
 36916                                  
 36917 00002D24 EBDC                    	jmp	short hu10
 36918                                  huX:	
 36919 00002D26 07                      	pop	es
 36920                                  	; 01/01/2023
 36921                                  	;pop	ax
 36922                                  	; 02/01/2023
 36923 00002D27 5A                      	pop	dx ; (*)
 36924 00002D28 C3                      	retn
 36925                                  
 36926                                  ; 02/01/2023
 36927                                  %if 0
 36928                                  
 36929                                  ; -----------------------------------------------------------------------------
 36930                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 36931                                  ; -----------------------------------------------------------------------------
 36932                                  ; ENTRY:    None
 36933                                  ; EXIT:     ZF set if user DIDN'T specify /S
 36934                                  ; ERROR:    None
 36935                                  ; USES:     Flags
 36936                                  ; -----------------------------------------------------------------------------
 36937                                  
 36938                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 36939                                  isTiny:
 36940                                  	; 02/01/2023
 36941                                  	;push	ax
 36942                                  
 36943                                  	;getdata al,fUmbTiny
 36944                                  	;
 36945                                  	;push	ds
 36946                                  	;push	cs
 36947                                  	;pop	ds
 36948                                  	;mov	al,[fUmbTiny]
 36949                                  	;pop	ds
 36950                                  
 36951                                  	; 09/09/2023
 36952                                  	;mov	al,[cs:fUmbTiny]
 36953                                  	; 02/01/2023
 36954                                  	; ds = cs
 36955                                  	mov	al,[fUmbTiny]
 36956                                  
 36957                                  	or	al,al
 36958                                  	; 02/01/2023
 36959                                  	;pop	ax
 36960                                  	retn
 36961                                  
 36962                                  %endif
 36963                                  
 36964                                  ; -----------------------------------------------------------------------------
 36965                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 36966                                  ; -----------------------------------------------------------------------------
 36967                                  ; ENTRY:    ES:0 should point to an MCB
 36968                                  ; EXIT:     ZF set if MCB is free, else !ZF
 36969                                  ; ERROR:    None
 36970                                  ; USES:     Flags
 36971                                  ; -----------------------------------------------------------------------------
 36972                                  
 36973                                  ;isFreeMCB:
 36974                                  ;	or	word [es:ARENA.OWNER],0
 36975                                  ;	retn
 36976                                  
 36977                                  ; -----------------------------------------------------------------------------
 36978                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 36979                                  ; -----------------------------------------------------------------------------
 36980                                  ; ENTRY:    ES:0 should point to an MCB
 36981                                  ; EXIT:     None; MCB marked as HIDDEN
 36982                                  ; ERROR:    None
 36983                                  ; USES:     None
 36984                                  ; -----------------------------------------------------------------------------
 36985                                  
 36986                                  hideMCB:
 36987 00002D29 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 36988 00002D30 26C70608004849          	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 36989 00002D37 26C7060A004444          	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 36990 00002D3E 26C7060C00454E          	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 36991 00002D45 26C7060E002020          	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 36992 00002D4C C3                      	retn
 36993                                  
 36994                                  ; -----------------------------------------------------------------------------
 36995                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 36996                                  ; -----------------------------------------------------------------------------
 36997                                  ; ENTRY:    ES:0 should point to an MCB
 36998                                  ; EXIT:     None; MCB marked as FREE
 36999                                  ; ERROR:    None
 37000                                  ; USES:     None
 37001                                  ; -----------------------------------------------------------------------------
 37002                                  
 37003                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37004                                  
 37005                                  unHideMCB:
 37006                                  	; 03/01/2023
 37007                                  	;push	ax
 37008 00002D4D 26C70601000000          	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 37009 00002D54 B82020                  	mov	ax,'  ' ; 2020h
 37010 00002D57 26A30800                	mov	[es:ARENA.NAME+0],ax
 37011 00002D5B 26A30A00                	mov	[es:ARENA.NAME+2],ax
 37012 00002D5F 26A30C00                	mov	[es:ARENA.NAME+4],ax
 37013 00002D63 26A30E00                	mov	[es:ARENA.NAME+6],ax
 37014                                  	; 03/01/2023
 37015                                  	;pop	ax
 37016 00002D67 C3                      	retn
 37017                                  
 37018                                  ; -----------------------------------------------------------------------------
 37019                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 37020                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 37021                                  ; -----------------------------------------------------------------------------
 37022                                  ; ENTRY:    AL should be to a valid UMB number
 37023                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 37024                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 37025                                  ; USES:     Flags, ES
 37026                                  ; -----------------------------------------------------------------------------
 37027                                  
 37028                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37029                                  	; (SYSINIT:3344h)
 37030                                  findUMB:
 37031                                  	; 01/01/2023
 37032                                  	;push	ax
 37033                                  	; 02/01/2023
 37034 00002D68 51                      	push	cx ; *
 37035                                  	;push	dx
 37036                                  
 37037 00002D69 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 37038                                  
 37039 00002D6B 89C2                    	mov	dx,ax		; Store the to-be-found UMB number in DX
 37040                                  
 37041 00002D6D E8D2FE                  	call	UmbHead		; Returns first UMB segment in AX
 37042                                  	; 22/07/2023
 37043                                  	;mov	es,ax ; *
 37044 00002D70 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 37045                                  
 37046                                  	; 22/07/2023
 37047                                  fu10:
 37048 00002D72 8EC0                    	mov	es,ax ; * ; **
 37049                                  ; ---------------------------------------------
 37050                                  ; FU10--CX - This UMB number; 0 == conventional
 37051                                  ;       DX - The UMB number they're looking for
 37052                                  ;       ES - The current MCB address
 37053                                  ; ---------------------------------------------
 37054                                  
 37055                                  ;fu10:	
 37056 00002D74 39D1                    	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 37057 00002D76 7417                    	je	short fuX	; searching for--so exit.
 37058                                  
 37059 00002D78 E8D4FE                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 37060 00002D7B 7501                    	jnz	short fu20
 37061                                  
 37062 00002D7D 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 37063                                  fu20:	
 37064                                  	;mov	al,[es:ARENA.SIGNATURE]
 37065                                  	;cmp	al,arena_signature_end ; 'Z'
 37066                                  	; 19/07/2023
 37067 00002D7E 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end 
 37068 00002D84 7408                    	je	short fuE	; 'Z' means this was the last MCB... that's it.
 37069                                  
 37070                                  	;NextMCB es,ax		; Go on forward.
 37071                                  	; 22/07/2023
 37072                                  	; ax = es
 37073                                  	;mov	ax,es ; * ; 22/07/2023
 37074                                  	;add	ax,[es:3]
 37075 00002D86 2603060300              	add	ax,[es:ARENA.SIZE]
 37076 00002D8B 40                      	inc	ax
 37077                                  	; 22/07/2023
 37078                                  	;mov	es,ax ; **
 37079 00002D8C EBE4                    	jmp	short fu10
 37080                                  fuE:	
 37081 00002D8E F9                      	stc
 37082                                  fuX:
 37083                                  	; 01/01/2023
 37084                                  	;pop	dx
 37085                                  	; 02/01/2023
 37086 00002D8F 59                      	pop	cx ; *
 37087                                  	;pop	ax		; The address is already in ES.
 37088 00002D90 C3                      	retn
 37089                                  
 37090                                  ; -----------------------------------------------------------------------------
 37091                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 37092                                  ; -----------------------------------------------------------------------------
 37093                                  ; ENTRY:    AL should be to a valid UMB number
 37094                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 37095                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 37096                                  ; USES:     Flags, ES
 37097                                  ; -----------------------------------------------------------------------------
 37098                                  
 37099                                  	; 01/01/2023 - Retro DOS v4.2
 37100                                  BigFree:
 37101                                  	; 01/01/2023
 37102                                  	;push	bx
 37103 00002D91 51                      	push	cx
 37104                                  
 37105 00002D92 E8D3FF                  	call	findUMB			; Returns with CF if err, else ES==MCB
 37106 00002D95 723A                    	jc	short bfX		; (would be "jc bfE"; it just does stc)
 37107                                  
 37108 00002D97 31DB                    	xor	bx,bx			; Segment address of largest free MCB
 37109 00002D99 31C9                    	xor	cx,cx			; Size of largest free MCB
 37110                                  
 37111                                  ; ---------------------------------------------
 37112                                  ; BF10--ES - Current MCB address
 37113                                  ;       BX - Address of largest free MCB so far
 37114                                  ;       CX - Size of largest free MCB so far
 37115                                  ; ---------------------------------------------
 37116                                  
 37117                                  bf10:	
 37118 00002D9B E8B1FE                  	call	isSysMCB		; If we've left the MCB, we're done.
 37119 00002D9E 7428                    	jz	short bf30
 37120                                  
 37121                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 37122 00002DA0 26830E010000            	or	word [es:ARENA.OWNER],0
 37123 00002DA6 750C                    	jnz	short bf20
 37124                                  
 37125 00002DA8 26A10300                	mov	ax,[es:ARENA.SIZE]
 37126                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 37127 00002DAC 39C1                    	cmp	cx,ax
 37128                                  	;jg	short bf20		; Unless we're bigger,
 37129                                  	; 19/07/2023
 37130 00002DAE 7D04                    	jge	short bf20
 37131                                  
 37132 00002DB0 8CC3                    	mov	bx,es			; Store this new element's address,
 37133                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 37134 00002DB2 89C1                    	mov	cx,ax
 37135                                  
 37136                                  bf20:	
 37137                                  	;mov	al,[es:ARENA.SIGNATURE]
 37138                                  	;cmp	al,arena_signature_end	; 'Z'
 37139                                  	; 19/07/2023
 37140                                  	;cmp	byte [es:0],'Z'
 37141 00002DB4 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 37142 00002DBA 740C                    	jz	short bf30		; 'Z' means this was the last MCB.
 37143                                  
 37144                                  	;NextMCB es,ax			; Go on forward.
 37145 00002DBC 8CC0                    	mov     ax,es
 37146                                  	;add	ax,[es:3]
 37147 00002DBE 2603060300              	add     ax,[es:ARENA.SIZE]
 37148 00002DC3 40                      	inc     ax
 37149 00002DC4 8EC0                    	mov     es,ax
 37150                                  
 37151 00002DC6 EBD3                    	jmp	short bf10
 37152                                  
 37153 00002DC8 8EC3                    bf30:	mov	es,bx			; Return the address
 37154 00002DCA 89C8                    	mov	ax,cx			; Return the size
 37155 00002DCC 09DB                    	or	bx,bx
 37156 00002DCE 7501                    	jnz	short bfX		; (if size==0, there's nothing free)
 37157                                  bfE:	
 37158 00002DD0 F9                      	stc
 37159                                  bfX:
 37160 00002DD1 59                      	pop	cx
 37161                                  	; 01/01/2023
 37162                                  	;pop	bx
 37163 00002DD2 C3                      	retn
 37164                                  
 37165                                  ; -----------------------------------------------------------------------------
 37166                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 37167                                  ; -----------------------------------------------------------------------------
 37168                                  ; ENTRY:    AL should be to a valid UMB number
 37169                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 37170                                  ; ERROR:    None
 37171                                  ; USES:     Flags
 37172                                  ; -----------------------------------------------------------------------------
 37173                                  
 37174                                  	; 02/01/2023 - Retro DOS v4.2
 37175                                  
 37176                                  isSpecified:
 37177                                  	; 02/01/2023
 37178                                  	;push	ax
 37179                                  
 37180 00002DD3 30FF                    	xor	bh,bh
 37181 00002DD5 88C3                    	mov	bl,al
 37182                                  
 37183                                  	;getdata al,DS:UmbUsed[bx]
 37184                                  	;
 37185                                  	;push	ds
 37186                                  	;push	cs
 37187                                  	;pop	ds
 37188                                  	;mov	al,[bx+UmbUsed]
 37189                                  	;pop	ds
 37190                                  	
 37191                                  	;mov	al,[cs:bx+UmbUsed]
 37192                                  	; 02/01/2023
 37193                                  	; ds = cs
 37194 00002DD7 8A87[3D1F]              	mov	al,[bx+UmbUsed]
 37195                                  
 37196 00002DDB 08C0                    	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 37197                                  
 37198                                  	; 09/09/2023
 37199                                  	; 02/01/2023
 37200                                  	;pop	ax
 37201                                  
 37202 00002DDD C3                      	retn
 37203                                  
 37204                                  ; -----------------------------------------------------------------------------
 37205                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 37206                                  ; -----------------------------------------------------------------------------
 37207                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 37208                                  ; EXIT:     None; MCB broken if carry clear
 37209                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 37210                                  ; USES:     Flags
 37211                                  ; -----------------------------------------------------------------------------
 37212                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 37213                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 37214                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 37215                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 37216                                  ; minimum for performing a split.
 37217                                  ; -----------------------------------------------------------------------------
 37218                                  
 37219                                  MIN_SPLIT_SIZE	equ	20h
 37220                                  
 37221                                  	; 02/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37222                                  
 37223                                  shrinkMCB:
 37224                                  	;pushreg <bx,cx,es>
 37225                                  	; 02/01/2023
 37226                                  	;push	bx
 37227 00002DDE 51                      	push	cx
 37228 00002DDF 06                      	push	es
 37229                                  
 37230 00002DE0 89C3                    	mov	bx,ax			; Move things around... and
 37231                                  	; 02/01/2023
 37232                                  	;mov	ax,es			; save this one for later.
 37233                                  
 37234 00002DE2 268B0E0300              	mov	cx,[es:ARENA.SIZE]
 37235                                  	; 02/01/2023
 37236 00002DE7 89C8                    	mov	ax,cx 
 37237                                  
 37238 00002DE9 83E820                  	sub	ax,MIN_SPLIT_SIZE ; 32
 37239                                  	;sub	cx,MIN_SPLIT_SIZE ; 32
 37240                                  	;;cmp	bx,cx			; {New size} vs {Current Size-20h}
 37241                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 37242                                  	; 18/12/2022
 37243                                  	;cmp	cx,bx
 37244                                  	; 02/01/2023
 37245 00002DEC 39D8                    	cmp	ax,bx
 37246 00002DEE 7228                    	jb	short smE ; (*)
 37247                                  
 37248 00002DF0 268A160000              	mov	dl,[es:ARENA.SIGNATURE]
 37249                                  	
 37250                                  	;mov	cx,[es:ARENA.SIZE]
 37251                                  	; 02/01/2023
 37252 00002DF5 8CC0                    	mov	ax,es
 37253                                  
 37254 00002DF7 26891E0300              	mov	[es:ARENA.SIZE],bx
 37255 00002DFC 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],'M'
 37256                                  
 37257 00002E02 01D8                    	add	ax,bx
 37258 00002E04 40                      	inc	ax
 37259 00002E05 8EC0                    	mov	es,ax			; Move to new arena area
 37260                                  
 37261 00002E07 89C8                    	mov	ax,cx
 37262 00002E09 29D8                    	sub	ax,bx
 37263                                  	; 12/12/2022
 37264                                  	; ax > 0
 37265 00002E0B 48                      	dec	ax			; And prepare the new size
 37266                                  
 37267                                  	; 18/12/2022
 37268 00002E0C 2688160000              	mov	[es:ARENA.SIGNATURE],dl
 37269                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 37270 00002E11 26A30300                	mov	[es:ARENA.SIZE],ax
 37271                                  	;mov	ax,'  ' ; 2020h
 37272                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 37273                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 37274                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 37275                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 37276                                  
 37277                                  	; 18/12/2022
 37278 00002E15 E8A801                  	call	freeMCB	; (**)
 37279                                  
 37280                                  	; 12/12/2022
 37281                                  	; cf=0
 37282                                  	;clc
 37283                                  	; 18/12/2022
 37284                                  	;jmp	short smX
 37285                                  smE:	
 37286                                  	; 18/12/2022
 37287                                  	; cf=1 (*)
 37288                                  	;stc
 37289                                  smX:	
 37290                                  	;popreg	<es,cx,bx>
 37291 00002E18 07                      	pop	es
 37292 00002E19 59                      	pop	cx
 37293                                  	; 02/01/2023
 37294                                  	;pop	bx
 37295 00002E1A C3                      	retn
 37296                                  
 37297                                  ; -----------------------------------------------------------------------------
 37298                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 37299                                  ; -----------------------------------------------------------------------------
 37300                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 37301                                  ; EXIT:     None; UMB is hidden as necessary
 37302                                  ; ERROR:    None
 37303                                  ; USES:     Flags, AX, CX
 37304                                  ; -----------------------------------------------------------------------------
 37305                                  ; PRIMARY LOGIC:
 37306                                  ;
 37307                                  ; If the UMB is specified in the DH/LH statement, then:
 37308                                  ;    If the largest free segment is too small (check specified size), then:
 37309                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 37310                                  ;    Else, if largest free segment is LARGER than specified size, then:
 37311                                  ;       If /S was given on the command-line, then:
 37312                                  ;          Break that element into two pieces
 37313                                  ;          Set a flag that we're shrinking
 37314                                  ;       Endif
 37315                                  ;    Endif
 37316                                  ; Endif
 37317                                  ; If the UMB is NOT specified (or was removed by the above):
 37318                                  ;    Hide all free elements in the UMB
 37319                                  ;    If the flag that we're shrinking was set, then:
 37320                                  ;       UN-hide the lower portion of the shrunken UMB
 37321                                  ;    ENDIF
 37322                                  ; ENDIF
 37323                                  ; -----------------------------------------------------------------------------
 37324                                  
 37325                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37326                                  	; (SYSINIT:3426h)
 37327                                  _hideUMB_:
 37328                                  	; 02/01/2023
 37329                                  	; ds = cs
 37330                                  
 37331                                  	; 01/01/2023
 37332                                  	;push	bx
 37333                                  	;push	dx
 37334 00002E1B 06                      	push	es
 37335                                  
 37336 00002E1C 88C8                    	mov	al,cl
 37337 00002E1E E8B2FF                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 37338 00002E21 742D                    	jz	short hu_20
 37339                                  
 37340 00002E23 88C8                    	mov	al,cl		; Retrieve the size of the largest
 37341 00002E25 E869FF                  	call	BigFree		; free element in AX; put its address in ES
 37342 00002E28 7226                    	jc	short hu_20	; Oops. Errors mean skip this part.
 37343                                  
 37344 00002E2A 50                      	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 37345 00002E2B 88C8                    	mov	al,cl		; Retrieve the user's specified
 37346 00002E2D E8AAFE                  	call	GetSize		; minimum size for this umb (into AX)
 37347 00002E30 5B                      	pop	bx		; Now BX==BigFree, AX==Specified Size
 37348                                  
 37349 00002E31 09C0                    	or	ax,ax		; If they didn't specify one,
 37350 00002E33 741B                    	jz	short hu_20	; Skip over all this.
 37351                                  
 37352 00002E35 39D8                    	cmp	ax,bx		; Ah... if (specified > max free)
 37353 00002E37 7607                    	jbe	short hu_10
 37354                                  
 37355 00002E39 88C8                    	mov	al,cl		;  Then mark that UMB as unused. Nya nya.
 37356 00002E3B E81DFD                  	call	unMarkUMB
 37357 00002E3E EB10                    	jmp	short hu_20
 37358                                  hu_10:	
 37359                                  	;call	isTiny		; Returns ZF clear if user specified /S
 37360                                  	;jz	short hu_20
 37361                                  	; 02/01/2023
 37362                                  ;isTiny:
 37363                                  	;mov	al,[fUmbTiny] ; ds = cs
 37364                                  	;or	al,al
 37365 00002E40 800E[391F]00            	or	byte [fUmbTiny],0
 37366 00002E45 7409                    	jz	short hu_20
 37367                                  
 37368 00002E47 E894FF                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 37369 00002E4A 7204                    	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 37370                                  
 37371 00002E4C 8CC2                    	mov	dx,es
 37372 00002E4E EB09                    	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 37373                                  
 37374 00002E50 89C8                    hu_20:	mov	ax,cx
 37375 00002E52 E87EFF                  	call	isSpecified	; If they specified this UMB, we're done...
 37376 00002E55 7510                    	jnz	short hu_X	; so leave.
 37377                                  
 37378 00002E57 31D2                    	xor	dx,dx
 37379                                  hu_30:	
 37380 00002E59 88C8                    	mov	al,cl
 37381                                  
 37382 00002E5B E89DFE                  	call	hideUMB		; Hides everything in UMB #al
 37383                                  
 37384 00002E5E 09D2                    	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 37385 00002E60 7405                    	jz	short hu_X	; So we should leave.
 37386                                  
 37387 00002E62 8EC2                    	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 37388 00002E64 E8E6FE                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 37389                                  hu_X:	
 37390 00002E67 07                      	pop	es
 37391                                  	; 01/01/2023
 37392                                  	;pop	dx
 37393                                  	;pop	bx
 37394 00002E68 C3                      	retn
 37395                                  
 37396                                  ; -----------------------------------------------------------------------------
 37397                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 37398                                  ; -----------------------------------------------------------------------------
 37399                                  ; Entry:  None
 37400                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 37401                                  ; Error:  None
 37402                                  ; Uses:   Flags
 37403                                  ; -----------------------------------------------------------------------------
 37404                                  
 37405                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37406                                  UnFreeze:
 37407                                  	; 03/01/2023
 37408                                  	;push	ax
 37409 00002E69 06                      	push	es
 37410                                  
 37411 00002E6A E8D5FD                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 37412 00002E6D 721C                    	jc	short ufX
 37413                                  
 37414                                  	; 22/07/2023
 37415                                  uf10:
 37416 00002E6F 8EC0                    	mov	es,ax ; *
 37417                                  
 37418                                  ; ------------------------------
 37419                                  ; UF10--ES - Current MCB address
 37420                                  ; ------------------------------
 37421                                  
 37422                                  ;uf10:	
 37423 00002E71 E81900                  	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 37424 00002E74 7505                    	jnz	short uf20
 37425 00002E76 E8D4FE                  	call	unHideMCB
 37426                                  	; 09/09/2023
 37427                                  	; ax <> es
 37428 00002E79 8CC0                    	mov	ax,es ; *
 37429                                  uf20:	
 37430                                  	;mov	al,[es:ARENA.SIGNATURE]
 37431                                  	;cmp	al,arena_signature_end ; 'Z'
 37432                                  	; 22/07/2023
 37433 00002E7B 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37434 00002E81 7408                    	jz	short ufX	; 'Z' means this was the last MCB.. that's it.
 37435                                  
 37436                                  	;NextMCB es,ax		; Go on forward.
 37437                                  	; 22/07/2023
 37438                                  	; ax = es
 37439                                  	;mov	ax,es ; *
 37440                                  	;add	ax,[es:3]
 37441 00002E83 2603060300              	add	ax,[es:ARENA.SIZE]
 37442 00002E88 40                      	inc	ax
 37443                                  	; 22/07/2023
 37444                                  	;mov	es,ax
 37445 00002E89 EBE4                    	jmp	short uf10
 37446                                  ufX:	
 37447 00002E8B 07                      	pop	es
 37448                                  	; 03/01/2023
 37449                                  	;pop	ax
 37450 00002E8C C3                      	retn
 37451                                  
 37452                                  ; -----------------------------------------------------------------------------
 37453                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 37454                                  ; -----------------------------------------------------------------------------
 37455                                  ; ENTRY:    ES:0 should point to an MCB
 37456                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 37457                                  ; ERROR:    None
 37458                                  ; USES:     Flags
 37459                                  ; -----------------------------------------------------------------------------
 37460                                  
 37461                                  isFrozMCB:
 37462                                  	;push	ax
 37463                                  
 37464                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 37465                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 37466 00002E8D 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 37467 00002E93 7522                    	jne	short ifmX
 37468                                  
 37469                                  	;mov	ax,[es:ARENA.NAME+0]
 37470                                  	;cmp	ax,'FR' ; 5246h
 37471 00002E95 26813E08004652          	cmp	word [es:ARENA.NAME+0],'FR'
 37472 00002E9C 7519                    	jne	short ifmX
 37473                                  	;mov	ax,[es:ARENA.NAME+2]
 37474                                  	;cmp	ax,'OZ' ; 5A4Fh
 37475 00002E9E 26813E0A004F5A          	cmp	word [es:ARENA.NAME+2],'OZ'
 37476 00002EA5 7510                    	jne	short ifmX
 37477                                  	;mov	ax,[es:ARENA.NAME+4]
 37478                                  	;cmp	ax,'EN' ; 4E45h
 37479 00002EA7 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 37480 00002EAE 7507                    	jne	short ifmX
 37481                                  	;mov	ax,[es:ARENA.NAME+6]
 37482                                  	;cmp	ax,'  ' ; 2020h
 37483 00002EB0 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 37484                                  ifmX:	
 37485                                  	;pop	ax
 37486 00002EB7 C3                      	retn
 37487                                  
 37488                                  ; -----------------------------------------------------------------------------
 37489                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 37490                                  ; -----------------------------------------------------------------------------
 37491                                  ; ENTRY:    ES:0 should point to an MCB
 37492                                  ; EXIT:     None; MCB frozen
 37493                                  ; ERROR:    None
 37494                                  ; USES:     None
 37495                                  ; -----------------------------------------------------------------------------
 37496                                  
 37497                                  frezMCB:
 37498 00002EB8 26C70601000800          	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 37499 00002EBF 26C70608004652          	mov	word [es:ARENA.NAME+0],'FR'
 37500 00002EC6 26C7060A004F5A          	mov	word [es:ARENA.NAME+2],'OZ'
 37501 00002ECD 26C7060C00454E          	mov	word [es:ARENA.NAME+4],'EN'
 37502 00002ED4 26C7060E002020          	mov	word [es:ARENA.NAME+6],'  '
 37503 00002EDB C3                      	retn
 37504                                  
 37505                                  ; -----------------------------------------------------------------------------
 37506                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 37507                                  ; -----------------------------------------------------------------------------
 37508                                  ; Entry:  None
 37509                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 37510                                  ; Error:  None
 37511                                  ; Uses:   Flags
 37512                                  ; -----------------------------------------------------------------------------
 37513                                  
 37514                                  	; 01/01/2023 - Retro DOS v4.2  
 37515                                  FreezeUM:
 37516                                  	; 01/01/2023
 37517                                  	;push	ax
 37518                                  	;push	cx
 37519                                  	;push	dx
 37520 00002EDC 06                      	push	es
 37521                                  
 37522                                  	;;call	GetLoadUMB
 37523                                  	; 01/01/2023
 37524                                  	; ds = cs
 37525                                  	;mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 37526 00002EDD A0[3C1F]                	mov	al,[UmbLoad] 	
 37527                                  
 37528 00002EE0 30E4                    	xor	ah,ah		; Zap ah, so al==ax
 37529 00002EE2 89C2                    	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 37530                                  
 37531 00002EE4 E85BFD                  	call	UmbHead		; Returns first UMB segment in AX
 37532                                  	; 22/07/2023
 37533                                  	;mov	es,ax ; *
 37534 00002EE7 31C9                    	xor	cx,cx		; Pretend we're on UMB 0 for now...
 37535                                  
 37536                                  	; 22/07/2023
 37537                                  fum10:
 37538 00002EE9 8EC0                    	mov	es,ax ; *
 37539                                  
 37540                                  ; -----------------------------------------
 37541                                  ; FUM10--ES - Current MCB address
 37542                                  ;        CX - Current UMB number
 37543                                  ;        DX - UMB number to skip (load UMB)
 37544                                  ; -----------------------------------------
 37545                                  
 37546                                  ;fum10:	
 37547 00002EEB E861FD                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 37548 00002EEE 7501                    	jnz	short fum20
 37549                                  
 37550 00002EF0 41                      	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 37551                                  fum20:	
 37552 00002EF1 39D1                    	cmp	cx,dx		; If this is the load UMB, we don't want to
 37553 00002EF3 740B                    	je	short fum30	; freeze anything... so skip that section.
 37554                                  
 37555                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 37556 00002EF5 26830E010000            	or	word [es:ARENA.OWNER],0
 37557 00002EFB 7503                    	jnz	short fum30	; either.
 37558                                  
 37559 00002EFD E8B8FF                  	call	frezMCB
 37560                                  fum30:	
 37561                                  	;mov	al,[es:ARENA.SIGNATURE]
 37562                                  	;cmp	al,arena_signature_end ; 'Z'
 37563                                  	; 22/07/2023
 37564 00002F00 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37565 00002F06 7408                    	je	short fumX	; 'Z' means this was the last MCB.. that's it.
 37566                                  
 37567                                  	;NextMCB es, ax		; Go on forward.
 37568                                  	; 22/07/2023
 37569                                  	; ax = es
 37570                                  	;mov	ax,es
 37571                                  	;add	ax,[es:3]
 37572 00002F08 2603060300              	add	ax,[es:ARENA.SIZE]
 37573 00002F0D 40                      	inc	ax
 37574                                  	; 22/07/2023
 37575                                  	;mov	es,ax ; *
 37576 00002F0E EBD9                    	jmp	short fum10
 37577                                  
 37578 00002F10 07                      fumX:	pop	es
 37579                                  	; 01/01/2023
 37580                                  	;pop	dx
 37581                                  	;pop	cx
 37582                                  	;pop	ax
 37583 00002F11 C3                      	retn
 37584                                  
 37585                                  ; -----------------------------------------------------------------------------
 37586                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 37587                                  ; -----------------------------------------------------------------------------
 37588                                  ; ENTRY:    None
 37589                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 37590                                  ; ERROR:    None
 37591                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 37592                                  ; -----------------------------------------------------------------------------
 37593                                  
 37594                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37595                                  UmbTest:
 37596                                  	; 01/01/2023
 37597                                  	;push	ax
 37598 00002F12 53                      	push	bx ; *
 37599                                  	;push	ds
 37600 00002F13 06                      	push	es ; **
 37601                                  
 37602                                  	; 01/01/2023
 37603                                  	; ds = cs
 37604                                  
 37605 00002F14 E871FB                  	call	fm_link			; Link in UMBs (if not already linked)
 37606 00002F17 E80800                  	call	WalkMem			; Check to see if they're really linked
 37607 00002F1A 9C                      	pushf				; And remember what we found out
 37608 00002F1B E87BFB                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 37609 00002F1E 9D                      	popf				; And restore what we found out.
 37610                                  
 37611 00002F1F 07                      	pop	es ; **
 37612                                  	; 01/01/2023
 37613                                  	;pop	ds
 37614 00002F20 5B                      	pop	bx ; *
 37615                                  	;pop	ax
 37616 00002F21 C3                      	retn
 37617                                  
 37618                                  ; -----------------------------------------------------------------------------
 37619                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 37620                                  ; -----------------------------------------------------------------------------
 37621                                  ; ENTRY:    None
 37622                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 37623                                  ; ERROR:    None
 37624                                  ; USES:     Flags
 37625                                  ; -----------------------------------------------------------------------------
 37626                                  
 37627                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37628                                  	; (SYSINIT:3541h)
 37629                                  
 37630                                  WalkMem:
 37631                                  	;push	ax ; ?
 37632                                  	;push	bx ; ?
 37633                                  	;;push	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:352Fh)
 37634                                  	;push	es ; ? no need to save contents of these registers ?
 37635                                  		   	
 37636 00002F22 B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 37637 00002F24 CD21                    	int	21h
 37638                                  
 37639 00002F26 268B47FE                	mov	ax,[es:bx-2]
 37640                                  	; 22/07/2023
 37641                                  um10:
 37642 00002F2A 8EC0                    	mov	es,ax ; * ; **
 37643                                  
 37644                                  ; ------------------------------
 37645                                  ; UM10: ES = Current MCB pointer
 37646                                  ; ------------------------------
 37647                                  
 37648                                  ;um10:
 37649                                  	;mov	al,[es:ARENA.SIGNATURE]
 37650                                  	;cmp	al,arena_signature_end ; 'Z'
 37651                                  	; 22/07/2023
 37652 00002F2C 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37653 00002F32 7408                    	je	short um20		; If signature == 'Z', hay no more.
 37654                                  
 37655                                  	;NextMCB es,bx			; Move to the next MCB
 37656                                  
 37657                                  	;mov	bx,es
 37658                                  	;;add	bx,[es:3]
 37659                                  	;add	bx,[es:ARENA.SIZE]
 37660                                  	;inc	bx
 37661                                  	;mov	es,bx
 37662                                  	; 22/07/2023
 37663                                  	; ax = es
 37664                                  	;mov	ax,es ; *
 37665 00002F34 2603060300              	add	ax,[es:ARENA.SIZE]
 37666 00002F39 40                      	inc	ax
 37667                                  	;mov	es,ax ; **
 37668                                  	
 37669 00002F3A EBEE                    	jmp	short um10		; And restart the loop.
 37670                                  um20:	
 37671                                  	; 22/07/2023
 37672                                  	; ax = es
 37673                                  	;mov	ax,es
 37674                                  
 37675 00002F3C 3DFF9F                  	cmp	ax,9FFFh		; This sets CF if ax < 9FFF.
 37676                                  
 37677                                  	;pop	es ; ?
 37678                                  	;;pop	ds ; ? ; 01/01/2023 (MSDOS 6.21 IO.SYS, SYSINIT:353Dh)
 37679                                  	;pop	bx ; ?
 37680                                  	;pop	ax ; ?
 37681                                  	
 37682 00002F3F C3                      	retn
 37683                                  
 37684                                  ; -----------------------------------------------------------------------------
 37685                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 37686                                  ; -----------------------------------------------------------------------------
 37687                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 37688                                  ; EXIT:     None
 37689                                  ; ERROR:    None
 37690                                  ; USES:     AX, BX
 37691                                  ; -----------------------------------------------------------------------------
 37692                                  
 37693                                  	; 01/01/2023 - Retro DOS v4.2
 37694                                  hl_unlink:
 37695 00002F40 30FF                    	xor	bh,bh
 37696                                  
 37697                                  	;getdata bl,fm_umb		; Restore original link-state
 37698                                  	;
 37699                                  	;push	ds
 37700                                  	;push	cs
 37701                                  	;pop	ds
 37702                                  	;mov	bl,[fm_umb]
 37703                                  	;pop	ds
 37704                                  
 37705                                  	; 01/01/2023
 37706                                  	; ds = cs
 37707                                  	;mov	bl,[cs:fm_umb]
 37708 00002F42 8A1E[6D1F]              	mov	bl,[fm_umb]
 37709                                  
 37710 00002F46 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37711 00002F49 CD21                    	int	21h
 37712 00002F4B C3                      	retn
 37713                                  
 37714                                  ; ----------------------------------------------------------------------
 37715                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 37716                                  ; ----------------------------------------------------------------------
 37717                                  ; 09/04/2019 - Retro DOS v4.0
 37718                                  
 37719                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 37720                                  ;   Date:     May 14, 1992
 37721                                  
 37722                                  ;   Modification log:
 37723                                  ;
 37724                                  ;     DATE    WHO      DESCRIPTION
 37725                                  ;   --------  -------  --------------------------------------------------------
 37726                                  ;   05/14/92  t-richj  Original
 37727                                  ;   06/21/92  t-richj  Final revisions before check-in
 37728                                  
 37729                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 37730                                  
 37731                                  ; -----------------------------------------------------------------------------
 37732                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 37733                                  ; -----------------------------------------------------------------------------
 37734                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 37735                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 37736                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 37737                                  ; ERROR:  None
 37738                                  ; USES:   fInHigh (from highvar.inc), carry flag
 37739                                  ; -----------------------------------------------------------------------------
 37740                                  
 37741                                  	; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 37742                                  	; (SYSINIT:357Bh)
 37743                                  
 37744                                  UnHideUMBs:
 37745 00002F4C 50                      	push	ax		; Save ax for what we're about to do
 37746                                  
 37747                                  ; -----------------------------------------------------------------------------
 37748                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 37749                                  ;    length of time. Those six constitute a check of whether or not we should
 37750                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 37751                                  ;    will destroy the current link-state and memory-allocation strategy after
 37752                                  ;    every command execution.
 37753                                  ; -----------------------------------------------------------------------------
 37754                                  
 37755                                  	;getdata al,fInHigh	; Get InHigh from data segment
 37756                                  	;
 37757                                  	;push	ds
 37758                                  	;push	cs
 37759                                  	;pop	ds
 37760                                  	;mov	al,[fInHigh]
 37761                                  	;pop	ds	
 37762                                  
 37763                                  	;mov	al,[cs:fInHigh]
 37764                                  	; 31/12/2022
 37765                                  	; ds = cs
 37766 00002F4D A0[381F]                	mov	al,[fInHigh]	
 37767                                  
 37768 00002F50 08C0                    	or	al,al
 37769 00002F52 7503                    	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 37770                                  
 37771 00002F54 58                      	pop	ax		; then there's nothing to do here... so
 37772 00002F55 F9                      	stc			; restore everything and return. Just like
 37773 00002F56 C3                      	retn			; that.
 37774                                  uhu10:	
 37775 00002F57 E88E00                  	call	linkumb		; Make sure UMBs are linked in.
 37776 00002F5A E81200                  	call	FreeUMBs
 37777                                  
 37778                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 37779                                  	;
 37780                                  	;push	es
 37781                                  	;push	cs
 37782                                  	;pop	es
 37783                                  	;mov	byte [es:fInHigh],0
 37784                                  	;pop	ds
 37785                                  
 37786                                  	; 31/12/2022
 37787                                  	; ds = cs	
 37788                                  	;mov	byte [cs:fInHigh],0
 37789 00002F5D C606[381F]00            	mov	byte [fInHigh],0
 37790                                  
 37791                                  	;call	he_unlink	; Unlink UMBs
 37792                                  	; 31/12/2022
 37793                                  ;;he_unlink:
 37794 00002F62 30FF                    	xor	bh,bh
 37795                                  
 37796                                  	;getdata bl,fm_umb	; Restore original link-state
 37797                                  	;mov	bl,[cs:fm_umb]	
 37798 00002F64 8A1E[6D1F]              	mov	bl,[fm_umb]
 37799                                  
 37800 00002F68 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37801 00002F6B CD21                    	int	21h
 37802                                  	;;retn
 37803                                  
 37804 00002F6D 58                      	pop	ax
 37805                                  	; 12/12/2022
 37806                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 37807 00002F6E C3                      	retn
 37808                                  
 37809                                  ; 31/12/2022
 37810                                  ;%if 0
 37811                                  ;
 37812                                  ;; -----------------------------------------------------------------------------
 37813                                  ;;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 37814                                  ;; -----------------------------------------------------------------------------
 37815                                  ;; ENTRY:    fm_umb == 1 : leave linked, else unlink
 37816                                  ;; EXIT:     None
 37817                                  ;; ERROR:    None
 37818                                  ;; USES:     AX, BX
 37819                                  ;; -----------------------------------------------------------------------------
 37820                                  ;
 37821                                  ;he_unlink:
 37822                                  ;	xor	bh, bh
 37823                                  ;
 37824                                  ;	;getdata bl, fm_umb	; Restore original link-state
 37825                                  ;	mov	bl,[cs:fm_umb]	
 37826                                  ;
 37827                                  ;	mov	ax,DOS_SET_UMBLINK ; 5803h
 37828                                  ;	int	21h
 37829                                  ;	retn
 37830                                  ;
 37831                                  ;%endif
 37832                                  
 37833                                  ; -----------------------------------------------------------------------------
 37834                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 37835                                  ; -----------------------------------------------------------------------------
 37836                                  ; ENTRY:    None
 37837                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 37838                                  ; ERROR:    None (ignore CF)
 37839                                  ; USES:     Flags
 37840                                  ; -----------------------------------------------------------------------------
 37841                                  
 37842                                  FreeUMBs:
 37843 00002F6F 50                      	push	ax
 37844 00002F70 06                      	push	es
 37845                                  
 37846 00002F71 E86700                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 37847 00002F74 721C                    	jc	short fusX
 37848                                  fus10:
 37849 00002F76 8EC0                    	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 37850                                  ;fus10:	
 37851 00002F78 E81A00                  	call	isHideMCB	; Returns with ZF set if owner is 0
 37852 00002F7B 7505                    	jnz	short fus20
 37853 00002F7D E84000                  	call	freeMCB
 37854                                  	; 09/09/2023
 37855                                  	; ax <> es
 37856 00002F80 8CC0                    	mov	ax,es
 37857                                  fus20:	   
 37858                                  	;mov	al,[es:ARENA.SIGNATURE]
 37859                                  	;cmp	al,arena_signature_end ; 'Z'
 37860                                  	; 22/07/2023
 37861 00002F82 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 37862 00002F88 7408                    	jz	short fusX	; That means this was the last MCB--that's it.
 37863                                  	
 37864                                  	; 22/07/2023
 37865                                  	; ax = es
 37866                                  	;mov	ax,es
 37867 00002F8A 2603060300              	add	ax,[es:ARENA.SIZE]
 37868 00002F8F 40                      	inc	ax
 37869                                  	; 22/07/2023
 37870                                  	;mov	es,ax
 37871 00002F90 EBE4                    	jmp	short fus10	; Go on forward.
 37872                                  fusX:	
 37873 00002F92 07                      	pop	es
 37874 00002F93 58                      	pop	ax
 37875 00002F94 C3                      	retn
 37876                                  
 37877                                  ; -----------------------------------------------------------------------------
 37878                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 37879                                  ; -----------------------------------------------------------------------------
 37880                                  ; ENTRY:    ES:0 should point to an MCB
 37881                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 37882                                  ; ERROR:    None
 37883                                  ; USES:     Flags
 37884                                  ; -----------------------------------------------------------------------------
 37885                                  
 37886                                  isHideMCB:
 37887                                  	;push	ax
 37888                                  
 37889 00002F95 26833E010008            	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 37890 00002F9B 7522                    	jne	short ihm_x				; then check for HIDDEN
 37891                                  
 37892                                  	;mov	ax,[es:ARENA.NAME]
 37893                                  	;cmp	ax,'HI' ; 4948h
 37894 00002F9D 26813E08004849          	cmp	word [es:ARENA.NAME+0],'HI'
 37895 00002FA4 7519                    	jne	short ihm_x
 37896                                  	;mov	ax,[es:ARENA.NAME+2]
 37897                                  	;cmp	ax,'DD' ; 4444h
 37898 00002FA6 26813E0A004444          	cmp	word [es:ARENA.NAME+2],'DD'
 37899 00002FAD 7510                    	jne	short ihm_x
 37900                                  	;mov	ax,[es:ARENA.NAME+4]
 37901                                  	;cmp	ax,'EN' ; 4E45h
 37902 00002FAF 26813E0C00454E          	cmp	word [es:ARENA.NAME+4],'EN'
 37903 00002FB6 7507                    	jne	short ihm_x
 37904                                  	;mov	ax,[es:ARENA.NAME+6]
 37905                                  	;cmp	ax,'  ' ; 2020h
 37906 00002FB8 26813E0E002020          	cmp	word [es:ARENA.NAME+6],'  '
 37907                                  ihm_x:	
 37908                                  	;pop	ax
 37909 00002FBF C3                      	retn
 37910                                  
 37911                                  ; -----------------------------------------------------------------------------
 37912                                  ;*** freeMCB - marks as free the MCB at ES:0
 37913                                  ; -----------------------------------------------------------------------------
 37914                                  ; ENTRY:    ES:0 should point to an MCB
 37915                                  ; EXIT:     None; MCB free'd
 37916                                  ; ERROR:    None
 37917                                  ; USES:     AX
 37918                                  ; -----------------------------------------------------------------------------
 37919                                  
 37920                                  freeMCB:
 37921 00002FC0 26C70601000000          	mov	word [es:ARENA.OWNER],0
 37922 00002FC7 B82020                  	mov	ax,'  ' ; mov ax,2020h ; 31/12/2022
 37923 00002FCA 26A30800                	mov	[es:ARENA.NAME+0],ax
 37924 00002FCE 26A30A00                	mov	[es:ARENA.NAME+2],ax
 37925 00002FD2 26A30C00                	mov	[es:ARENA.NAME+4],ax
 37926 00002FD6 26A30E00                	mov	[es:ARENA.NAME+6],ax
 37927 00002FDA C3                      	retn
 37928                                  
 37929                                  ; -----------------------------------------------------------------------------
 37930                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 37931                                  ; -----------------------------------------------------------------------------
 37932                                  ; ENTRY:  Nothing
 37933                                  ; EXIT:   AX contains 0x9FFF for most systems
 37934                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 37935                                  ; USES:   Flags, AX
 37936                                  ; -----------------------------------------------------------------------------
 37937                                  
 37938                                  HeadUmb:
 37939                                  	; 13/05/2019
 37940                                  
 37941                                  	;push	si ; ?
 37942                                  	;push	ds ; ?
 37943                                  	;push	es
 37944                                  	;push	bx ; *
 37945                                  
 37946                                  	; 09/04/2019
 37947                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 37948                                  
 37949 00002FDB B452                    	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 37950 00002FDD CD21                    	int	21h
 37951                                  			; DOS - 2+ internal - GET LIST OF LISTS
 37952                                  			; Return: ES:BX -> DOS list of lists
 37953                                  	;mov	ax,[es:8Ch]
 37954 00002FDF 26A18C00                	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 37955 00002FE3 83F8FF                  	cmp	ax,0FFFFh
 37956                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 37957                                  
 37958                                  	;clc				; Else, it isn't.
 37959                                  	;jmp	short xhu_x
 37960                                  xhu_e:	
 37961                                  	;stc
 37962 00002FE6 F5                      	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 37963                                  xhu_x:	
 37964                                  	;pop	bx ; *
 37965                                  	;pop	es	
 37966                                  	;pop	ds ; ?
 37967                                  	;pop	si ; ?
 37968 00002FE7 C3                      	retn
 37969                                  
 37970                                  ; -----------------------------------------------------------------------------
 37971                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 37972                                  ; -----------------------------------------------------------------------------
 37973                                  ; ENTRY:    None
 37974                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 37975                                  ; ERROR:    None
 37976                                  ; USES:     AX, BX, fm_umb
 37977                                  ; -----------------------------------------------------------------------------
 37978                                  
 37979                                  linkumb:
 37980 00002FE8 B80258                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 37981 00002FEB CD21                    	int	21h			; Current link-state is now in al
 37982                                  
 37983 00002FED 08C0                    	or	al,al			; BUGBUG: proper check?
 37984 00002FEF 7508                    	jnz	short lumbX		; Jumps if UMBs already linked in
 37985                                  
 37986 00002FF1 B80358                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 37987 00002FF4 BB0100                  	mov	bx,1
 37988 00002FF7 CD21                    	int	21h
 37989                                  lumbX:
 37990 00002FF9 C3                      	retn
 37991                                  
 37992                                  ;%endif
 37993                                  
 37994                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37995                                  ; (SYSINIT:2B5Fh)
 37996                                  
 37997                                  ; ----------------------------------------------------------------------
 37998                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 37999                                  ; ----------------------------------------------------------------------
 38000                                  ; 09/04/2019 - Retro DOS v4.0
 38001                                  
 38002                                  ;----------------------------------------------------------------------------
 38003                                  ;
 38004                                  ; procedure : InitDevLoad
 38005                                  ;
 38006                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 38007                                  ;			 = 1 indicates load in UMB:
 38008                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 38009                                  ;		                    = 1 indicates a DOS 5-style load
 38010                                  ;		DevSize  = Size of the device driver file in paras
 38011                                  ;
 38012                                  ;	Output : none
 38013                                  ;
 38014                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 38015                                  ;	Also sets up a header for the Device driver entry for mem utility
 38016                                  ;
 38017                                  ;----------------------------------------------------------------------------
 38018                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 38019                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 38020                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 38021                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 38022                                  ;----------------------------------------------------------------------------
 38023                                  
 38024                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38025                                  	; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38026                                  	; (SYSINIT:364Ah)
 38027                                  InitDevLoad:
 38028                                  	; 01/01/2023
 38029                                  	;push	es ; *
 38030                                  
 38031                                  	; 11/12/2022
 38032                                  	; ds = cs
 38033 00002FFA 803E[8E1F]00            	cmp	byte [DeviceHi],0
 38034                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 38035                                  	;je	short InitForLo		; no, init for lo mem
 38036 00002FFF 7439                    	je	short initforlo_x ; 09/04/2019
 38037                                  
 38038                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38039                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38040                                  ; %if 0
 38041                                  	; 01/01/2023
 38042 00003001 803E[7E1F]01            	cmp	byte [ConvLoad],1	; Are we loading as per DOS 5?
 38043                                  	;cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 38044 00003006 7413                    	je	short InitForConv
 38045                                  
 38046                                  ; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 38047                                  ; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 38048                                  ; any areas left in upper-memory, except for elements in the load UMB...
 38049                                  ; we then malloc space as per Dos-5 style, and mark as free any spaces which
 38050                                  ; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 38051                                  ; and UnHideUMBs later on marks all 8+HIDDEN as free.
 38052                                  
 38053 00003008 E85904                  	call	ShrinkUMB		; Stop using the old device arena
 38054                                  
 38055 0000300B E892FC                  	call	HideUMBs		; Mark up the UM area as we see fit
 38056 0000300E E8CBFE                  	call	FreezeUM		; Hide everything BUT the load area
 38057 00003011 E85700                  	call	GetUMBForDev		; And grab that load area as needed
 38058 00003014 9C                      	pushf
 38059 00003015 E851FE                  	call	UnFreeze		; Then unhide everything frozen
 38060 00003018 9D                      	popf
 38061                                  	;jc	short InitForLo		; (if carry, it's loading low)
 38062                                  	;jmp	short InitForHi
 38063                                  	; 06/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 38064 00003019 EB0B                    	jmp	short idl0
 38065                                  
 38066                                  ;%endif ; 01/11/2022
 38067                                  
 38068                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38069                                  	; (SYSINIT:2B67h)
 38070                                  InitForConv:
 38071                                  	; 11/12/2022
 38072                                  	; ds = cs
 38073 0000301B E83700                  	call	SpaceInUMB		; Do we have space left in the
 38074                                  					;  current UMB ?
 38075 0000301E 7308                    	jnc	short InitForHi		; yes, we have
 38076 00003020 E84104                  	call	ShrinkUMB		; shrink the current UMB in use
 38077 00003023 E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 38078                                  idl0: ; 06/07/2023
 38079 00003026 720D                    	jc	short InitForLo		; we didn't succeed, so load
 38080                                  					;  in low memory
 38081                                  InitForHi:
 38082                                  	; 11/12/2022
 38083                                  	; ds = cs
 38084                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 38085                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 38086                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 38087 00003028 A1[841F]                	mov	ax,[DevUMBFree]
 38088 0000302B 8B16[801F]              	mov	dx,[DevUMBAddr]
 38089 0000302F 0316[821F]              	add	dx,[DevUMBSize]
 38090 00003033 EB0C                    	jmp	short idl1
 38091                                  
 38092                                  InitForLo:
 38093                                  	; 11/12/2022
 38094                                  	; ds = cs
 38095                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 38096 00003035 C606[8E1F]00            	mov	byte [DeviceHi],0
 38097                                  initforlo_x:
 38098                                  	; 11/12/2022
 38099                                  	; ds = cs
 38100                                  					;  into UMB indicate that
 38101                                  					;  we are loading low
 38102                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 38103                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 38104 0000303A A1[6403]                	mov	ax,[memhi]
 38105 0000303D 8B16[A502]              	mov	dx,[ALLOCLIM]
 38106                                  idl1:
 38107 00003041 E86600                  	call	DevSetMark		; setup a sub-arena for DD
 38108                                  	; 11/12/2022
 38109                                  	; ds = cs
 38110                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 38111                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 38112                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 38113                                  	;mov	[cs:DevEntry+2],ax
 38114 00003044 A3[721F]                	mov	[DevLoadAddr],ax
 38115 00003047 8916[741F]              	mov	[DevLoadEnd],dx
 38116 0000304B C706[761F]0000          	mov	word [DevEntry],0
 38117 00003051 A3[781F]                	mov	[DevEntry+2],ax
 38118                                  	; 01/01/2023
 38119                                  	;pop	es ; *
 38120 00003054 C3                      	retn
 38121                                  
 38122                                  ;----------------------------------------------------------------------------
 38123                                  ;
 38124                                  ; procedure : SpaceInUMB?
 38125                                  ;
 38126                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 38127                                  ;	Output : Carry set if no space in UMB
 38128                                  ;		 Carry clear if Space is available for the device in
 38129                                  ;		   current UMB
 38130                                  ;
 38131                                  ;----------------------------------------------------------------------------
 38132                                  
 38133                                  SpaceInUMB:
 38134                                  	; 11/12/2022
 38135                                  	; ds = cs
 38136                                  	;mov	ax,[cs:DevUMBSize]
 38137                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 38138                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 38139 00003055 A1[821F]                	mov	ax,[DevUMBSize]
 38140 00003058 0306[801F]              	add	ax,[DevUMBAddr]		; End of UMB
 38141 0000305C 2B06[841F]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 38142                                  	; 11/12/2022
 38143                                  	;or	ax,ax			; Nospace ?
 38144                                  	;jnz	short spcinumb1
 38145                                  	;stc
 38146                                  	;retn
 38147                                  	; 11/12/2022
 38148 00003060 83F801                  	cmp	ax,1
 38149 00003063 7205                    	jb	short spcinumb2	; cf=1
 38150                                  spcinumb1:
 38151 00003065 48                      	dec	ax			; space for sub-arena
 38152                                  	; 11/12/2022
 38153                                  	; ds = cs
 38154 00003066 3B06[701F]              	cmp	ax,[DevSize]
 38155                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 38156                                  spcinumb2:
 38157 0000306A C3                      	retn
 38158                                  
 38159                                  ;----------------------------------------------------------------------------
 38160                                  ;
 38161                                  ; procedure : PrepareMark
 38162                                  ;
 38163                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 38164                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 38165                                  ;
 38166                                  ;----------------------------------------------------------------------------
 38167                                  
 38168                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38169                                  ;
 38170                                  ;PrepareMark:
 38171                                  ;	push	ds
 38172                                  ;	mov	ds,ax
 38173                                  ;	mov	word [ARENA.OWNER],8
 38174                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 38175                                  ;	pop	ds
 38176                                  ;
 38177                                  ;	inc	ax
 38178                                  ;	mov	[cs:DevUMBAddr],ax
 38179                                  ;	mov	[cs:DevUMBFree],ax
 38180                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 38181                                  ;	retn
 38182                                  
 38183                                  ;----------------------------------------------------------------------------
 38184                                  ;
 38185                                  ; procedure : GetUMBForDev
 38186                                  ;
 38187                                  ;	Input : DevSize
 38188                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 38189                                  ;		 the device.
 38190                                  ;		 If success carry clear
 38191                                  ;
 38192                                  ;	Allocates the biggest UMB for loading devices and updates
 38193                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 38194                                  ;	UMB.
 38195                                  ;
 38196                                  ;	This routine relies on the fact that all of the low memory
 38197                                  ;	is allocated, and any DOS alloc calls should return memory
 38198                                  ;	from the UMB pool.
 38199                                  ;
 38200                                  ;----------------------------------------------------------------------------
 38201                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38202                                  	; (SYSINIT:2BC6h)
 38203                                  
 38204                                  GetUMBForDev:
 38205                                  	; 11/12/2022
 38206                                  	; ds = cs
 38207 0000306B BBFFFF                  	mov	bx,0FFFFh
 38208 0000306E B80048                  	mov	ax,4800h
 38209 00003071 CD21                    	int	21h
 38210                                  		; DOS - 2+ - ALLOCATE MEMORY
 38211                                  		; BX = number of 16-byte paragraphs desired
 38212                                  
 38213 00003073 09DB                    	or	bx,bx
 38214                                  	;jz	short gufd_err
 38215                                  	; 09/09/2023
 38216 00003075 742E                    	jz	short gufd_error ; bx = 0
 38217                                  
 38218 00003077 4B                      	dec	bx
 38219                                  	; 11/12/2022
 38220                                  	; ds = cs
 38221 00003078 391E[701F]              	cmp	[DevSize],bx
 38222                                  	;cmp	[cs:DevSize],bx
 38223 0000307C 7725                    	ja	short gufd_err
 38224                                  
 38225 0000307E 43                      	inc	bx
 38226                                  
 38227 0000307F B80048                  	mov	ax,4800h
 38228 00003082 CD21                    	int	21h
 38229 00003084 721D                    	jc	short gufd_err
 38230                                  
 38231                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38232                                  	;dec	ax
 38233                                  	;call	PrepareMark
 38234                                  	;
 38235                                  PrepareMark:
 38236 00003086 1E                      	push	ds
 38237 00003087 48                      	dec	ax
 38238 00003088 8ED8                    	mov	ds,ax
 38239 0000308A C70601000800            	mov	word [ARENA.OWNER],8
 38240 00003090 C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 38241 00003096 40                      	inc	ax
 38242 00003097 1F                      	pop	ds
 38243                                  	; 11/12/2022
 38244                                  	; ds = cs
 38245                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 38246                                  	;mov	[cs:DevUMBAddr],ax
 38247                                  	;mov	[cs:DevUMBFree],ax
 38248                                  gufd_x:		; 09/09/2023
 38249 00003098 891E[821F]              	mov	[DevUMBSize],bx		; update the UMB Variables
 38250 0000309C A3[801F]                	mov	[DevUMBAddr],ax
 38251 0000309F A3[841F]                	mov	[DevUMBFree],ax
 38252                                  	;
 38253                                  	; 11/12/2022
 38254                                  	; cf=0
 38255                                  	;clc				; mark no error
 38256 000030A2 C3                      	retn
 38257                                  
 38258                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38259                                  %if 1
 38260                                  gufd_err:
 38261 000030A3 31DB                    	xor	bx,bx ; 0
 38262                                  gufd_error:
 38263 000030A5 31C0                    	xor	ax,ax ; 0
 38264 000030A7 F9                      	stc	; cf=1
 38265 000030A8 EBEE                    	jmp	short gufd_x	
 38266                                  %endif
 38267                                  
 38268                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38269                                  %if 0
 38270                                  gufd_err:
 38271                                  	xor	ax,ax ; 0
 38272                                  	; 11/12/2022
 38273                                  	; ds = cs
 38274                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 38275                                  	;mov	[cs:DevUMBAddr],ax
 38276                                  	;mov	[cs:DevUMBFree],ax
 38277                                  	mov	[DevUMBSize],ax		; erase the previous values
 38278                                  	mov	[DevUMBAddr],ax
 38279                                  	mov	[DevUMBFree],ax
 38280                                  	stc
 38281                                  	retn
 38282                                  %endif
 38283                                  
 38284                                  ;----------------------------------------------------------------------------
 38285                                  ;
 38286                                  ; procedure : DevSetMark
 38287                                  ;
 38288                                  ;	Input : AX - Free segment were device is going to be loaded
 38289                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 38290                                  ;
 38291                                  ;	Creates a sub-arena for the device driver
 38292                                  ;	puts 'D' marker in the sub-arena
 38293                                  ;	Put the owner of the sub-arena as (AX+1)
 38294                                  ;	Copies the file name into sub-arena name field
 38295                                  ;
 38296                                  ;	Size field of the sub-arena will be set only at succesful
 38297                                  ;	completion of Device load.
 38298                                  ;
 38299                                  ;----------------------------------------------------------------------------
 38300                                  
 38301                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38302                                  	; (SYSINIT:2C13h)
 38303                                  
 38304                                  DevSetMark:
 38305 000030AA 06                      	push	es
 38306                                  	; 03/01/2023
 38307                                  	;push	di
 38308 000030AB 1E                      	push	ds
 38309 000030AC 56                      	push	si
 38310 000030AD 8EC0                    	mov	es,ax
 38311 000030AF 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 38312 000030B5 40                      	inc	ax
 38313 000030B6 26A30100                	mov	[es:devmark.seg],ax
 38314                                  
 38315                                  ;-------------- Copy file name
 38316                                  
 38317 000030BA 50                      	push	ax			; save load addr
 38318                                  
 38319                                  	; 09/09/2023
 38320                                  	; ds = cs
 38321                                  	;lds	si,[cs:bpb_addr]	; command line is still there
 38322 000030BB C536[7C03]              	lds	si,[bpb_addr]
 38323                                  
 38324 000030BF 89F7                    	mov	di,si
 38325 000030C1 FC                      	cld
 38326                                  dsm_again:
 38327 000030C2 AC                      	lodsb
 38328 000030C3 3C3A                    	cmp	al,':'
 38329 000030C5 7504                    	jne	short isit_slash
 38330 000030C7 89F7                    	mov	di,si
 38331 000030C9 EBF7                    	jmp	short dsm_again
 38332                                  isit_slash:
 38333 000030CB 3C5C                    	cmp	al, '\'
 38334 000030CD 7504                    	jne	short isit_null
 38335 000030CF 89F7                    	mov	di,si
 38336 000030D1 EBEF                    	jmp	short dsm_again
 38337                                  isit_null:
 38338 000030D3 08C0                    	or	al,al
 38339 000030D5 75EB                    	jnz	short dsm_again
 38340 000030D7 89FE                    	mov	si,di
 38341                                  
 38342 000030D9 BF0800                  	mov	di,devmark.filename ; 8
 38343 000030DC B90800                  	mov	cx,8			; maximum 8 characters
 38344                                  dsm_next_char:
 38345 000030DF AC                      	lodsb
 38346 000030E0 08C0                    	or	al, al
 38347 000030E2 7407                    	jz	short blankout
 38348 000030E4 3C2E                    	cmp	al, '.'
 38349 000030E6 7403                    	je	short blankout
 38350 000030E8 AA                      	stosb
 38351 000030E9 E2F4                    	loop	dsm_next_char
 38352                                  blankout:
 38353 000030EB E304                    	jcxz	dsm_exit
 38354 000030ED B020                    	mov	al, ' '
 38355 000030EF F3AA                    	rep	stosb			; blank out the rest
 38356                                  dsm_exit:
 38357 000030F1 58                      	pop	ax			; restore load addr
 38358 000030F2 5E                      	pop	si
 38359 000030F3 1F                      	pop	ds
 38360                                  	; 03/01/2023
 38361                                  	;pop	di
 38362 000030F4 07                      	pop	es
 38363 000030F5 C3                      	retn
 38364                                  
 38365                                  ;----------------------------------------------------------------------------
 38366                                  ;
 38367                                  ; procedure : SizeDevice
 38368                                  ;
 38369                                  ;	Input : ES:SI - points to device file to be sized
 38370                                  ;
 38371                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 38372                                  ;
 38373                                  ;	Calculates the size of the device file in paras and stores it
 38374                                  ;	in DevSize
 38375                                  ;
 38376                                  ;----------------------------------------------------------------------------
 38377                                  
 38378                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38379                                  SizeDevice:
 38380                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38381                                  	; 11/12/2022 ; *
 38382 000030F6 1E                      	push	ds ; *
 38383 000030F7 06                      	push	es
 38384 000030F8 1F                      	pop	ds
 38385 000030F9 89F2                    	mov	dx,si			; ds:dx -> file name
 38386 000030FB B8003D                  	mov	ax,3D00h		; open
 38387 000030FE CD21                    	int	21h
 38388 00003100 7237                    	jc	short sd_err		; open failed
 38389                                  
 38390 00003102 89C3                    	mov	bx,ax			; BX - file handle
 38391 00003104 B80242                  	mov	ax,4202h		; seek
 38392 00003107 31C9                    	xor	cx,cx
 38393 00003109 89CA                    	mov	dx,cx			; to end of file
 38394 0000310B CD21                    	int	21h
 38395 0000310D 7223                    	jc	short sd_close		; did seek fail (impossible)
 38396 0000310F 83C00F                  	add	ax,15			; para convert
 38397 00003112 83D200                  	adc	dx,0
 38398 00003115 F7C2F0FF                	test	dx,0FFF0h		; size > 0ffffh paras ?
 38399                                  	;jz	short szdev1		; no
 38400                                  	; 22/07/2023
 38401 00003119 7409                    	jz	short sd_ctp
 38402 0000311B 2EC706[701F]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 38403                                  					; assuming that we fail later
 38404 00003122 EB0E                    	jmp	short sd_close
 38405                                  sd_ctp:	
 38406                                  	; 22/07/2023
 38407                                  ;szdev1:
 38408 00003124 B104                    	mov	cl,4			; convert it to paras
 38409 00003126 D3E8                    	shr	ax,cl
 38410 00003128 B10C                    	mov	cl,12
 38411 0000312A D3E2                    	shl	dx,cl
 38412 0000312C 09D0                    	or	ax,dx ; * ; cf=0
 38413                                  	;
 38414                                  	; 22/07/2023 - Retro DOS v4.2 IO.SYS (optimized)
 38415                                  	; MSDOS 6.21 IO.SYS - SYSINIT:37A6h 
 38416                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38417                                  	;cmp	ax,[cs:DevSizeOption]
 38418                                  	;ja	short szdev2
 38419                                  	;mov	ax,[cs:DevSizeOption]
 38420                                  	; 12/12/2022
 38421                                  	;clc
 38422                                  ;szdev2:
 38423 0000312E 2EA3[701F]              	mov	[cs:DevSize],ax		; save file size (in paragraps)
 38424                                  	; 22/07/2023
 38425                                  	;clc ; cf=0 ; *	; CLC is not needed here
 38426                                  			; (OR instruction clears CF) - E.TAN 22/07/2023
 38427                                  
 38428                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38429                                  	; 12/12/2022
 38430                                  	; cf=0
 38431                                  	;clc
 38432                                  sd_close:
 38433 00003132 9C                      	pushf				; let close not spoil our
 38434                                  					;  carry flag
 38435 00003133 B8003E                  	mov	ax,3E00h		; close
 38436 00003136 CD21                    	int	21h			; we are not checking for err
 38437 00003138 9D                      	popf
 38438                                  sd_err:
 38439                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38440                                  	; 11/12/2022 ; *
 38441 00003139 1F                      	pop     ds ; *
 38442 0000313A C3                      	retn
 38443                                  
 38444                                  ;----------------------------------------------------------------------------
 38445                                  ;
 38446                                  ; procedure : ExecDev
 38447                                  ;
 38448                                  ;	Input : ds:dx -> device to be executed
 38449                                  ;		DevLoadAddr - contains where device has to be loaded
 38450                                  ;
 38451                                  ;	Output : Carry if error
 38452                                  ;		 Carry clear if no error
 38453                                  ;
 38454                                  ;	Loads a device driver using the 4b03h function call
 38455                                  ;
 38456                                  ;----------------------------------------------------------------------------
 38457                                  
 38458                                  	; 01/11/2022
 38459                                  ExecDev:
 38460 0000313B 2E8B1E[721F]            	mov	bx,[cs:DevLoadAddr]
 38461 00003140 2E891E[8A1F]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 38462                                  					;  block for exec with
 38463                                  					;  load address
 38464 00003145 2E891E[8C1F]            	mov	[cs:DevExecReloc],bx
 38465 0000314A 8CCB                    	mov	bx,cs
 38466 0000314C 8EC3                    	mov	es,bx
 38467 0000314E BB[8A1F]                	mov	bx,DevExecAddr		; es:bx points to parameters
 38468                                  	;mov	al,3	; (load program only)
 38469                                  	;mov	ah,EXEC ; 4Bh
 38470                                  	; 04/07/2023
 38471 00003151 B8034B                  	mov	ax,(EXEC<<8)|03h
 38472 00003154 CD21                    	int	21h			; load in the device driver
 38473                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 38474                                  		; DS:DX -> ASCIZ filename
 38475                                  		; ES:BX -> parameter block
 38476                                  		; AL = subfunction 
 38477 00003156 C3                      	retn
 38478                                  
 38479                                  ;----------------------------------------------------------------------------
 38480                                  ;
 38481                                  ; procedure : RetFromUM
 38482                                  ;
 38483                                  ;	Input : None
 38484                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 38485                                  ;		 ConvLoad clear if did.
 38486                                  ;
 38487                                  ;	Prepares memory for more devices after returning from loading one
 38488                                  ;	using the DOS 6 options (/L:... etc).
 38489                                  ;
 38490                                  ;----------------------------------------------------------------------------
 38491                                  
 38492                                  ; 31/12/2022 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38493                                  ;  (SYSINIT:37D1h)
 38494                                  
 38495                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38496                                  ;%if 0
 38497                                  RetFromUM:
 38498                                  	; 31/12/2022
 38499                                  	; ds = cs
 38500 00003157 9C                      	pushf
 38501                                  	;mov	byte [cs:ConvLoad],1
 38502 00003158 C606[7E1F]01            	mov	byte [ConvLoad],1
 38503 0000315D E8ECFD                  	call	UnHideUMBs
 38504 00003160 7204                    	jc	short rfUM1		; Skip this if didn't HideUMBs
 38505                                  	; 31/12/2022
 38506                                  	; ds = cs
 38507                                  	;;mov	byte [cs:ConvLoad],0
 38508                                  	;mov	byte [ConvLoad],0
 38509                                  	; 09/09/2023
 38510 00003162 FE0E[7E1F]              	dec	byte [ConvLoad] ; -> 0
 38511                                  rfUM1:	
 38512 00003166 9D                      	popf
 38513 00003167 C3                      	retn
 38514                                  
 38515                                  ;%endif ; 01/11/2022
 38516                                  
 38517                                  ;----------------------------------------------------------------------------
 38518                                  ;
 38519                                  ; procedure : RemoveNull
 38520                                  ;
 38521                                  ;	Input : ES:SI points to a null terminated string
 38522                                  ;
 38523                                  ;	Output : none
 38524                                  ;
 38525                                  ;	Replaces the null at the end of a string with blank
 38526                                  ;
 38527                                  ;----------------------------------------------------------------------------
 38528                                  
 38529                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38530                                  	; (SYSINIT:2CCEh)
 38531                                  RemoveNull:
 38532                                  	; 11/12/2022
 38533                                  	; ds = cs
 38534                                  rn_next:
 38535 00003168 268A1C                  	mov	bl,[es:si]
 38536 0000316B 08DB                    	or	bl,bl			; null ?
 38537 0000316D 7403                    	jz	short rn_gotnull
 38538 0000316F 46                      	inc	si			; advance the pointer
 38539 00003170 EBF6                    	jmp	short rn_next
 38540                                  rn_gotnull:
 38541                                  	; 11/12/2022
 38542 00003172 8A1E[A31F]              	mov	bl,[DevSavedDelim]
 38543                                  	;mov	bl,[cs:DevSavedDelim]
 38544 00003176 26881C                  	mov	[es:si],bl		; replace null with blank
 38545                                  	; 02/11/2022
 38546                                  ; 11/12/2022
 38547                                  rba_ok:		; 10/04/2019
 38548 00003179 C3                      	retn
 38549                                  
 38550                                  ;----------------------------------------------------------------------------
 38551                                  ;
 38552                                  ; procedure : RoundBreakAddr
 38553                                  ;
 38554                                  ;	Input : DevBrkAddr
 38555                                  ;	Output : DevBrkAddr
 38556                                  ;
 38557                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 38558                                  ;
 38559                                  ;----------------------------------------------------------------------------
 38560                                  
 38561                                  RoundBreakAddr:
 38562 0000317A 2EA1[7A1F]              	mov	ax,[cs:DevBrkAddr]
 38563 0000317E E8D9DF                  	call	ParaRound
 38564 00003181 2E0106[7C1F]            	add	[cs:DevBrkAddr+2],ax
 38565 00003186 2EC706[7A1F]0000        	mov	word [cs:DevBrkAddr],0
 38566 0000318D 2EA1[741F]              	mov	ax,[cs:DevLoadEnd]
 38567 00003191 2E3906[7C1F]            	cmp	[cs:DevBrkAddr+2],ax
 38568 00003196 76E1                    	jbe	short rba_ok
 38569 00003198 E92911                  	jmp	mem_err
 38570                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38571                                  	; 11/12/2022
 38572                                  ;rba_ok:
 38573                                  ;	retn
 38574                                  
 38575                                  ;----------------------------------------------------------------------------
 38576                                  ;
 38577                                  ; procedure : DevSetBreak
 38578                                  ;
 38579                                  ;	Input : DevBrkAddr
 38580                                  ;	Output : Carry set if Device returned Init failed
 38581                                  ;		 Else carry clear
 38582                                  ;
 38583                                  ;----------------------------------------------------------------------------
 38584                                  
 38585                                  DevSetBreak:
 38586 0000319B 50                      	push	ax
 38587                                  
 38588 0000319C 2EA1[7C1F]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 38589 000031A0 2E803E[C914]00          	cmp	byte [cs:multdeviceflag],0
 38590 000031A6 750F                    	jne	short set_break_continue ;do not check it.
 38591 000031A8 2E3B06[721F]            	cmp	ax,[cs:DevLoadAddr]
 38592 000031AD 7508                    	jne	short set_break_continue ;if not same, then o.k.
 38593                                  
 38594                                  	;cmp	word [cs:DevBrkAddr],0
 38595                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 38596                                  	; 12/12/2022
 38597 000031AF 2E833E[7A1F]01          	cmp	word [cs:DevBrkAddr],1
 38598 000031B5 7204                    	jb	short break_failed
 38599                                  
 38600                                  set_break_continue:
 38601 000031B7 E8C0FF                  	call	RoundBreakAddr
 38602                                  	; 12/12/2022
 38603 000031BA F8                      	clc
 38604                                  break_failed:
 38605 000031BB 58                      	pop	ax
 38606                                  	;clc
 38607 000031BC C3                      	retn
 38608                                  
 38609                                  	; 12/12/2022
 38610                                  ;break_failed:
 38611                                  	;pop	ax
 38612                                  	;stc
 38613                                  	;retn
 38614                                  
 38615                                  ;----------------------------------------------------------------------------
 38616                                  ;
 38617                                  ; procedure : DevBreak
 38618                                  ;
 38619                                  ;	Input : DevLoadAddr & DevBrkAddr
 38620                                  ;	Output : none
 38621                                  ;
 38622                                  ;	Marks a succesful install of a device driver
 38623                                  ;	Sets device size field in sub-arena &
 38624                                  ;	Updates Free ptr in UMB or adjusts memhi
 38625                                  ;
 38626                                  ;----------------------------------------------------------------------------
 38627                                  
 38628                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38629                                  DevBreak:
 38630                                  	;push	ds ; 11/12/2022
 38631                                  
 38632                                  	; 11/12/2022
 38633 000031BD 0E                      	push	cs
 38634 000031BE 1F                      	pop	ds
 38635                                  	;mov	ax,[cs:DevLoadAddr]
 38636                                  	;mov	bx,[cs:DevBrkAddr+2]
 38637 000031BF A1[721F]                	mov	ax,[DevLoadAddr]
 38638 000031C2 8B1E[7C1F]              	mov	bx,[DevBrkAddr+2]
 38639                                  	; 11/12/2022
 38640 000031C6 1E                      	push	ds
 38641                                  
 38642 000031C7 48                      	dec	ax			; seg of sub-arena
 38643 000031C8 8ED8                    	mov	ds,ax
 38644 000031CA 40                      	inc	ax			; Back to Device segment
 38645 000031CB 29D8                    	sub	ax,bx
 38646 000031CD F7D8                    	neg	ax			; size of device in paras
 38647 000031CF A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 38648                                  	
 38649                                  	; 11/12/2022
 38650 000031D2 1F                      	pop	ds
 38651                                  	; ds = cs
 38652                                   	
 38653 000031D3 803E[8E1F]00            	cmp	byte [DeviceHi],0
 38654                                  	;cmp	byte [cs:DeviceHi],0
 38655 000031D8 7405                    	je	short db_lo
 38656                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 38657                                  	;jmp	short db_exit
 38658                                  	; 11/12/2022
 38659 000031DA 891E[841F]              	mov	[DevUMBFree],bx
 38660 000031DE C3                      	retn	
 38661                                  db_lo:
 38662                                  	; 11/12/2022
 38663                                  	; ds = cs
 38664                                  	;mov	[cs:memhi],bx
 38665                                  	;mov	word [cs:memlo],0
 38666 000031DF 891E[6403]              	mov	[memhi],bx
 38667 000031E3 C706[6203]0000          	mov	word [memlo],0 ; 18/12/2022
 38668                                  db_exit:
 38669                                  	;pop	ds ; 11/12/2022
 38670                                  sd_ret:		; 09/09/2023
 38671 000031E9 C3                      	retn
 38672                                  
 38673                                  ; 10/04/2019 - Retro DOS v4.0
 38674                                  
 38675                                  ;----------------------------------------------------------------------------
 38676                                  ;
 38677                                  ; procedure : ParseSize
 38678                                  ;
 38679                                  ;	Parses the command line for SIZE= command
 38680                                  ;
 38681                                  ;	ES:SI = command line to parsed
 38682                                  ;
 38683                                  ;	returns ptr to command line after SIZE= option in ES:SI
 38684                                  ;	updates the DevSizeOption variable with value supplied
 38685                                  ;	in SIZE=option
 38686                                  ;	Returns carry if the SIZE option was invalid
 38687                                  ;
 38688                                  ;----------------------------------------------------------------------------
 38689                                  
 38690                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38691                                  	; (SYSINIT:2D5Ah)
 38692                                  
 38693                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization) ((&BugFix))
 38694                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:3871h) - Retro DOS v4.2 -
 38695                                  	; (PCDOS 7.1 IO.SYS - SYSINIT:3D6Eh)  - Retro DOS v5.0 -
 38696                                  ParseSize:
 38697                                  	;push	bx
 38698                                  	;mov	bx,si
 38699                                  
 38700                                  	; 09/09/2023
 38701 000031EA 56                      	push	si ; * ; mov bx,si
 38702                                  
 38703                                  	; 11/12/2022
 38704                                  	; ds = cs
 38705                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 38706                                  	;mov	[cs:DevCmdLine],si
 38707                                  	;mov	[cs:DevCmdLine+2],es
 38708 000031EB C706[8F1F]0000          	mov	word [DevSizeOption],0 ; init the value
 38709 000031F1 8936[9F1F]              	mov	[DevCmdLine],si
 38710 000031F5 8C06[A11F]              	mov	[DevCmdLine+2],es	
 38711 000031F9 E82400                  	call	SkipDelim
 38712 000031FC 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 38713 00003201 7528                    	jne	short ps_no_size
 38714 00003203 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 38715 00003209 7520                    	jne	short ps_no_size
 38716 0000320B 268A4404                	mov	al,[es:si+4]
 38717 0000320F E80D10                  	call	delim
 38718                                  	;jne	short ps_no_size
 38719                                  	; 22/07/2023
 38720 00003212 7518                    	jne	short ps_no_size_2 ; cf=0 here
 38721 00003214 83C605                  	add	si,5
 38722 00003217 E81400                  	call	GetHexNum
 38723 0000321A 7210                    	jc	short ps_err
 38724                                  	; 11/12/2022
 38725                                  	; ds = cs
 38726                                  	;mov	[cs:DevSizeOption],ax
 38727 0000321C A3[8F1F]                	mov	[DevSizeOption],ax
 38728                                  	
 38729                                  	; 09/09/2023
 38730 0000321F 58                      	pop	ax  ; * (discard previous si value on top of stack)
 38731                                  
 38732                                  ;	call	SkipDelim ; **
 38733                                  ;	
 38734                                  ;	; 22/07/2023
 38735                                  ;;ps_no_size_2:
 38736                                  ;	; cf = 0
 38737                                  ;	retn
 38738                                  
 38739                                  	; 09/09/2023
 38740                                  	;jmp	short SkipDelim
 38741                                  
 38742                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38743                                  %if 1
 38744                                  	; 01/11/2022
 38745                                  SkipDelim:
 38746                                  sd_next_char:
 38747 00003220 268A04                  	mov	al,[es:si]
 38748 00003223 E8F90F                  	call	delim
 38749 00003226 75C1                    	jnz	short sd_ret ; cf=0 ; 09/09/2023
 38750 00003228 46                      	inc	si
 38751 00003229 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 38752                                  	; 11/12/2022
 38753                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38754                                  ;sd_ret:
 38755                                  	;retn
 38756                                  %endif
 38757                                  
 38758                                  	;;;call	SkipDelim ; **
 38759                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38760                                  	;mov	bx,si
 38761                                  ps_no_size:
 38762                                  	;mov	si,bx
 38763                                  	;pop	bx
 38764 0000322B F8                      	clc	; cf=0
 38765                                  	;retn
 38766                                  	; 11/12/2022
 38767                                  ps_err:		; cf=1
 38768                                  ps_no_size_2:	; 09/09/2023 (cf=0)
 38769                                  	; 09/09/2023
 38770 0000322C 5E                      	pop	si ; * ; mov si,bx
 38771                                  ;sd_ret:	; cf=?
 38772 0000322D C3                      	retn
 38773                                  
 38774                                  ;ps_err:
 38775                                  	; 02/11/2022
 38776                                  	;pop	bx
 38777                                  	;stc
 38778                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38779                                  	; 11/12/2022
 38780                                  	; cf=1
 38781                                  	;stc
 38782                                  	; 11/12/2022
 38783                                  ;sd_ret: 
 38784                                  	; 22/07/2023
 38785                                  	; 12/04/2019
 38786                                  	;retn
 38787                                  
 38788                                  ; 12/04/2019 - Retro DOS v4.0
 38789                                  
 38790                                  ;----------------------------------------------------------------------------
 38791                                  ;
 38792                                  ; procedure : SkipDelim
 38793                                  ;
 38794                                  ;	Skips delimiters in the string pointed to by ES:SI
 38795                                  ;	Returns ptr to first non-delimiter character in ES:SI
 38796                                  ;
 38797                                  ;----------------------------------------------------------------------------
 38798                                  
 38799                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38800                                  %if 0
 38801                                  	; 01/11/2022
 38802                                  SkipDelim:
 38803                                  sd_next_char:
 38804                                  	mov	al,[es:si]
 38805                                  	call	delim
 38806                                  	jnz	short sd_ret
 38807                                  	inc	si
 38808                                  	jmp	short sd_next_char ; 01/11/2022
 38809                                  	; 11/12/2022
 38810                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38811                                  ;sd_ret:
 38812                                  	;retn
 38813                                  %endif
 38814                                  
 38815                                  ;----------------------------------------------------------------------------
 38816                                  ;
 38817                                  ; procedure : GetHexNum
 38818                                  ;
 38819                                  ;	Converts an ascii string terminated by a delimiter into binary.
 38820                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 38821                                  ;
 38822                                  ;	Returns in AX the number number of paras equivalent to the
 38823                                  ;	hex number of bytes specified by the hexadecimal string.
 38824                                  ;
 38825                                  ;	Returns carry in case it encountered a non-hex character or
 38826                                  ;	if it encountered crlf
 38827                                  ;
 38828                                  ;----------------------------------------------------------------------------
 38829                                  
 38830                                  ; 13/05/2019
 38831                                  
 38832                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 38833                                  	; (SYSINIT:38C5h)
 38834                                  
 38835                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 38836                                  	; (SYSINIT:2DA5h)
 38837                                  GetHexNum:
 38838 0000322E 31C0                    	xor	ax,ax
 38839 00003230 31D2                    	xor	dx,dx
 38840                                  ghn_next:
 38841 00003232 268A1C                  	mov	bl,[es:si]
 38842 00003235 80FB0D                  	cmp	bl,cr  ; 0Dh
 38843 00003238 7436                    	je	short ghn_err
 38844 0000323A 80FB0A                  	cmp	bl,lf  ; 0Ah
 38845 0000323D 7431                    	je	short ghn_err
 38846 0000323F 50                      	push	ax
 38847 00003240 88D8                    	mov	al,bl
 38848 00003242 E8DA0F                  	call	delim
 38849 00003245 58                      	pop	ax
 38850                                  	; 03/01/2023
 38851 00003246 B90400                  	mov	cx,4
 38852 00003249 7410                    	jz	short ghn_into_paras
 38853 0000324B E82400                  	call	GetNibble
 38854                                  	;jc	short ghn_err
 38855                                  	; 11/12/2022
 38856 0000324E 7221                    	jc	short ghn_ret ; cf=1
 38857                                  	; 03/01/2023
 38858                                  	;mov	cx,4
 38859                                  ghn_shift1:
 38860 00003250 D1E0                    	shl	ax,1
 38861 00003252 D1D2                    	rcl	dx,1
 38862 00003254 E2FA                    	loop	ghn_shift1
 38863 00003256 08D8                    	or	al,bl
 38864 00003258 46                      	inc	si
 38865 00003259 EBD7                    	jmp	short ghn_next
 38866                                  ghn_into_paras:
 38867 0000325B 83C00F                  	add	ax,15
 38868 0000325E 83D200                  	adc	dx,0
 38869 00003261 F7C2F0FF                	test	dx,0FFF0h
 38870 00003265 7509                    	jnz	short ghn_err
 38871                                  	; 03/01/2023
 38872                                  	;mov	cx,4
 38873                                  ghn_shift2:
 38874 00003267 F8                      	clc
 38875 00003268 D1DA                    	rcr	dx,1
 38876 0000326A D1D8                    	rcr	ax,1
 38877 0000326C E2F9                    	loop	ghn_shift2
 38878 0000326E F8                      	clc
 38879 0000326F C3                      	retn
 38880                                  	; 11/12/2022
 38881                                  ghn_err:
 38882                                  gnib_err:
 38883 00003270 F9                      	stc
 38884                                  ghn_ret:
 38885                                  gnib_ret:
 38886 00003271 C3                      	retn
 38887                                  
 38888                                  ;----------------------------------------------------------------------------
 38889                                  ;
 38890                                  ; procedure : GetNibble
 38891                                  ;
 38892                                  ;	Convert one nibble (hex digit) in BL into binary
 38893                                  ;
 38894                                  ;	Returns binary value in BL
 38895                                  ;
 38896                                  ;	Returns carry if BL contains non-hex digit
 38897                                  ;
 38898                                  ;----------------------------------------------------------------------------
 38899                                  
 38900                                  GetNibble:
 38901 00003272 80FB30                  	cmp	bl,'0'
 38902                                  	;jb	short gnib_err
 38903                                  	; 11/12/2022
 38904 00003275 72FA                    	jb	short gnib_ret ; cf=1
 38905 00003277 80FB39                  	cmp	bl,'9'
 38906 0000327A 7704                    	ja	short is_it_hex
 38907 0000327C 80EB30                  	sub	bl,'0'		; clc
 38908 0000327F C3                      	retn
 38909                                  is_it_hex:
 38910 00003280 80FB41                  	cmp	bl,'A'
 38911                                  	;jb	short gnib_err
 38912                                  	; 11/12/2022
 38913 00003283 72EC                    	jb	short gnib_ret ; cf=1
 38914 00003285 80FB46                  	cmp	bl,'F'
 38915 00003288 77E6                    	ja	short gnib_err ; 11/12/2022
 38916 0000328A 80EB37                  	sub	bl,'A'- 10	; clc
 38917 0000328D C3                      	retn
 38918                                  
 38919                                  	; 11/12/2022
 38920                                  ;gnib_err:
 38921                                  ;	stc
 38922                                  ;gnib_ret:
 38923                                  ;	retn
 38924                                  
 38925                                  ;============================================================================
 38926                                  
 38927                                  ; 12/04/2019 - Retro DOS v4.0
 38928                                  
 38929                                  ; umb.inc (MSDOS 6.0, 1991)
 38930                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 38931                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 38932                                  
 38933                                  XMM_REQUEST_UMB	equ 10h
 38934                                  XMM_RELEASE_UMB	equ 11h
 38935                                  
 38936                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 38937                                  
 38938                                  ;---------------------------------------------------------------------------
 38939                                  ;
 38940                                  ; Procedure Name	: umb_insert
 38941                                  ;
 38942                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 38943                                  ;			: BX = seg address of UMB to be linked in
 38944                                  ;			: DX = size of UMB to be linked in paras
 38945                                  ;			; DS = data
 38946                                  ;
 38947                                  ; Outputs		: links the UMB into the arena chain
 38948                                  ;
 38949                                  ; Uses			: AX, CX, ES, DX, BX
 38950                                  ;
 38951                                  ;---------------------------------------------------------------------------
 38952                                  
 38953                                  umb_insert:
 38954 0000328E 1E                      	push	ds
 38955                                  
 38956                                  	; 31/12/2022
 38957                                  	; ds = cs
 38958                                  
 38959                                  	;mov	ds,[cs:DevDOSData]
 38960 0000328F 8E1E[9D1F]              	mov	ds,[DevDOSData] ; 31/12/2022 
 38961                                  	;mov	ds,[8Ch]
 38962 00003293 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 38963 00003297 8CD8                    	mov	ax,ds
 38964 00003299 8EC0                    	mov	es,ax
 38965                                  ui_next:
 38966 0000329B 39D8                    	cmp	ax,bx			; Q: is current block above
 38967                                  					;    new block
 38968 0000329D 770F                    	ja	short ui_insert		; Y: insert it
 38969                                  					; Q: is current block the
 38970                                  					;    last
 38971 0000329F 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 38972 000032A5 745C                    	je	short ui_append		; Y: append new block to chain
 38973                                  					; N: get next block
 38974 000032A7 8ED8                    	mov	ds,ax			; M005
 38975                                  	;call	get_next		; ax = es = next block
 38976 000032A9 E83B01                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 38977 000032AC EBED                    	jmp	short ui_next
 38978                                  
 38979                                  ui_insert:
 38980 000032AE 8CD9                    	mov	cx,ds			; ds = previous arena
 38981 000032B0 41                      	inc	cx			; top of previous block
 38982                                  
 38983 000032B1 29D9                    	sub	cx,bx
 38984 000032B3 F7D9                    	neg	cx			; cx = size of used block
 38985                                  	;mov	byte [0],'M'
 38986 000032B5 C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 38987                                  	;mov	word [1],8
 38988 000032BA C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 38989                                  	;mov	[3],cx
 38990 000032C0 890E0300                	mov	[ARENA.SIZE],cx	
 38991                                  	;mov	word [8],4353h ; 'SC'
 38992 000032C4 C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 38993                                  
 38994                                  ; prepare the arena at start of new block
 38995                                  
 38996 000032CA 8EC3                    	mov	es,bx
 38997 000032CC 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 38998 000032D2 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 38999                                  					; mark as free
 39000 000032D9 83EA02                  	sub	dx,2			; make room for arena at
 39001                                  					; start & end of new block
 39002 000032DC 2689160300              	mov	[es:ARENA.SIZE],dx
 39003                                  
 39004                                  ; prepare arena at end of new block
 39005                                  	
 39006 000032E1 01D3                    	add	bx,dx
 39007 000032E3 43                      	inc	bx
 39008 000032E4 8EC3                    	mov	es,bx			; es=arena at top of new block
 39009 000032E6 43                      	inc	bx			; bx=top of new block
 39010                                  
 39011                                  					; ax contains arena just above
 39012                                  					; this block
 39013 000032E7 29D8                    	sub	ax,bx			; ax = size of used block
 39014                                  	
 39015 000032E9 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 39016 000032EF 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 39017 000032F6 26A30300                	mov	[es:ARENA.SIZE],ax	
 39018 000032FA 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 39019                                  
 39020 00003301 EB47                    	jmp	short ui_done
 39021                                  
 39022                                  ui_append:
 39023                                  					; es = arena of last block	
 39024 00003303 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 39025 00003308 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 39026                                  					; going to rsrv on top of this 
 39027                                  					; block for the next arena.
 39028                                  	; 13/05/2019
 39029 0000330E 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 39030                                  
 39031 00003314 89C1                    	mov	cx,ax			; cx=top of prev block-1
 39032 00003316 40                      	inc	ax
 39033 00003317 29D8                    	sub	ax,bx			; ax=top of prev block - 
 39034                                  					;    seg. address of new block
 39035 00003319 F7D8                    	neg	ax
 39036                                  
 39037 0000331B 8EC1                    	mov	es,cx			; ds = arena of unused block
 39038                                  
 39039 0000331D 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 39040 00003323 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 39041 0000332A 26A30300                	mov	[es:ARENA.SIZE],ax	
 39042 0000332E 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 39043                                  
 39044                                  ; prepare the arena at start of new block
 39045 00003335 8EC3                    	mov	es,bx
 39046 00003337 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 39047 0000333D 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 39048                                  					; mark as free
 39049 00003344 4A                      	dec	dx			; make room for arena
 39050 00003345 2689160300              	mov	[es:ARENA.SIZE],dx	
 39051                                  ui_done:
 39052                                  uc_done: ; 31/12/2022 ; *!
 39053 0000334A 1F                      	pop	ds
 39054                                  	; ds = cs ; 31/12/2022
 39055                                  ;uc_done:	; 18/12/2022
 39056                                  au_exit:	; 09/09/2023
 39057 0000334B C3                      	retn
 39058                                  
 39059                                  ;----------------------------------------------------------------------------
 39060                                  ;
 39061                                  ; procedure : AllocUMB
 39062                                  ;
 39063                                  ;	Allocate all UMBs and link it to DOS arena chain
 39064                                  ;
 39065                                  ;----------------------------------------------------------------------------
 39066                                  
 39067                                  AllocUMB:
 39068                                  	; 31/12/2022
 39069                                  	; ds = cs
 39070 0000334C E84700                  	call	InitAllocUMB		; link in the first UMB
 39071 0000334F 72FA                    	jc	short au_exit		; quit on error
 39072                                  au_next:
 39073 00003351 E87000                  	call	umb_allocate		; allocate
 39074 00003354 7205                    	jc	short au_coalesce
 39075 00003356 E835FF                  	call	umb_insert		; & insert till no UMBs
 39076 00003359 EBF6                    	jmp	short au_next
 39077                                  au_coalesce:
 39078                                  	; 09/09/2023
 39079                                  ;	call	umb_coalesce		; coalesce all UMBs
 39080                                  ;au_exit:
 39081                                  ;	; 31/12/2022
 39082                                  ;	; ds = cs
 39083                                  ;	retn
 39084                                  
 39085                                  	; 09/09/2023
 39086                                  	;jmp	short umb_coalesce
 39087                                  
 39088                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 39089                                  
 39090                                  ; 13/04/2019 - Retro DOS v4.0
 39091                                  
 39092                                  ;----------------------------------------------------------------------------
 39093                                  ;
 39094                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 39095                                  ;
 39096                                  ;	Coalesce adds the block following the argument to the argument block,
 39097                                  ;	if it's free. Coalesce is usually used to join free blocks, but
 39098                                  ;	some callers (such as $setblock) use it to join a free block to it's
 39099                                  ;	preceeding allocated block.
 39100                                  ;
 39101                                  ;	EXIT	'C' clear if OK
 39102                                  ;		  (ds) unchanged, this block updated
 39103                                  ;		  (ax) = address of next block, IF not at end
 39104                                  ;		'C' set if arena trashed
 39105                                  ;	USES	cx, di, ds, es
 39106                                  ;
 39107                                  ;----------------------------------------------------------------------------
 39108                                  
 39109                                  umb_coalesce:
 39110                                  	; 31/12/2022
 39111                                  	; ds = cs
 39112 0000335B 1E                      	push	ds ; *!
 39113                                  
 39114 0000335C 31FF                    	xor	di, di
 39115                                  
 39116                                  	;mov	es,[cs:DevDOSData]
 39117                                  	; 31/12/2022
 39118 0000335E 8E06[9D1F]              	mov	es,[DevDOSData]
 39119 00003362 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 39120                                  uc_nextfree:
 39121 00003367 8CC0                    	mov	ax,es
 39122 00003369 8ED8                    	mov	ds,ax
 39123                                  	;cmp	[es:1],di
 39124 0000336B 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 39125 00003370 7407                    	je	short uc_again		; Y: try to coalesce with next block
 39126                                  					; N: get next arena
 39127 00003372 E86B00                  	call	get_next		; es, ax = next arena
 39128 00003375 72D3                    	jc	short uc_done	; *!
 39129 00003377 EBEE                    	jmp	short uc_nextfree
 39130                                  uc_again:
 39131 00003379 E86400                  	call	get_next		; es, ax = next arena
 39132 0000337C 72CC                    	jc	short uc_done	; *!
 39133                                  uc_check:
 39134 0000337E 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 39135 00003383 75E2                    	jne	short uc_nextfree	; N: get next free arena
 39136                                  					; Y: coalesce
 39137 00003385 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 39138 0000338A 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 39139                                  	;add	[3],cx
 39140 0000338B 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 39141 0000338F 268A0D                  	mov     cl,[es:di]              ; move up signature
 39142 00003392 880D                    	mov     [di],cl
 39143 00003394 EBE3                    	jmp     short uc_again		; try again
 39144                                  
 39145                                  	; 18/12/2022
 39146                                  ;uc_done:
 39147                                  	;retn
 39148                                  
 39149                                  ;----------------------------------------------------------------------------
 39150                                  ;
 39151                                  ; procedure : InitAllocUMB
 39152                                  ;
 39153                                  ;----------------------------------------------------------------------------
 39154                                  
 39155                                  InitAllocUMB:
 39156                                  	; 31/12/2022
 39157                                  	; ds = cs
 39158 00003396 E821D7                  	call	IsXMSLoaded
 39159 00003399 7527                    	jnz	short iau_err		; quit on no XMS driver
 39160 0000339B B452                    	mov	ah,52h
 39161 0000339D CD21                    	int	21h			; get DOS DATA seg
 39162                                  	; 31/12/2022
 39163                                  	; ds = cs
 39164                                  	;mov	[cs:DevDOSData],es	; & save it for later
 39165 0000339F 8C06[9D1F]              	mov	[DevDOSData],es		; & save it for later
 39166 000033A3 B81043                  	mov	ax,4310h
 39167 000033A6 CD2F                    	int	2Fh
 39168                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 39169                                  	;mov	[cs:DevXMSAddr+2],es
 39170 000033A8 891E[861F]              	mov	[DevXMSAddr],bx		; get XMS driver address
 39171 000033AC 8C06[881F]              	mov	[DevXMSAddr+2],es	
 39172                                  	; 31/12/2022
 39173 000033B0 803E[9C1F]00            	cmp	byte [FirstUMBLinked],0 
 39174                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 39175                                  	;jne	short ia_1		; quit if we already did it
 39176                                  	; 12/12/2022
 39177 000033B5 770A                    	ja	short ia_1 ; cf=0
 39178 000033B7 E83900                  	call	LinkFirstUMB		; else link the first UMB
 39179                                  	;jc	short iau_err
 39180                                  	; 12/12/2022
 39181 000033BA 7207                    	jc	short iau_err2  ; cf=1
 39182                                  	; 31/12/2022
 39183                                  	; ds = cs
 39184 000033BC C606[9C1F]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 39185                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 39186                                  ia_1:
 39187                                  	; 12/12/2022
 39188                                  	; cf=0
 39189                                  	;clc
 39190 000033C1 C3                      	retn
 39191                                  iau_err:
 39192 000033C2 F9                      	stc
 39193                                  iau_err2:
 39194 000033C3 C3                      	retn
 39195                                  
 39196                                  ;-------------------------------------------------------------------------
 39197                                  ;
 39198                                  ; Procedure Name	: umb_allocate
 39199                                  ;
 39200                                  ; Inputs		: DS = data
 39201                                  ;
 39202                                  ; Outputs		: if UMB available
 39203                                  ;				Allocates the largest available UMB and 
 39204                                  ;			  	BX = segment of allocated block
 39205                                  ;				DX = size of allocated block
 39206                                  ;				NC
 39207                                  ;			  else 
 39208                                  ;				CY
 39209                                  ;
 39210                                  ; Uses			: BX, DX
 39211                                  ;
 39212                                  ;-------------------------------------------------------------------------
 39213                                  
 39214                                  umb_allocate:
 39215                                  	; 31/12/2022
 39216                                  	; ds = cs
 39217 000033C4 50                      	push	ax
 39218 000033C5 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 39219 000033C7 BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 39220                                  					;   possible
 39221                                  	; 31/12/2022
 39222 000033CA FF1E[861F]              	call	far [DevXMSAddr]
 39223                                  	;call	far [cs:DevXMSAddr]
 39224                                  					; dx now contains the size of
 39225                                  					; the largest UMB
 39226 000033CE 09D2                    	or	dx,dx
 39227 000033D0 740B                    	jz	short ua_err
 39228                                  	
 39229 000033D2 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 39230                                  
 39231                                  	; 31/12/2022
 39232 000033D4 FF1E[861F]              	call	far [DevXMSAddr]
 39233                                  	;call	far [cs:DevXMSAddr]
 39234                                  
 39235 000033D8 83F801                  	cmp	ax,1			; Q: was the reqst successful
 39236                                  	;jne	short ua_err		; N: error
 39237                                  	; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 39238 000033DB 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 39239                                  ua_err:
 39240 000033DD F9                      	stc	
 39241                                  
 39242                                  	;clc
 39243                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39244                                  	; 12/12/2022
 39245                                  	; cf=0
 39246                                  	;clc 
 39247                                  ua_done:
 39248 000033DE 58                      	pop	ax
 39249 000033DF C3                      	retn
 39250                                  	; 27/07/2023
 39251                                  ;ua_err:
 39252                                  	;stc
 39253                                  	;jmp	short ua_done
 39254                                  
 39255                                  ;----------------------------------------------------------------------------
 39256                                  ;
 39257                                  ;**	get_next - Find Next item in Arena
 39258                                  ;
 39259                                  ;	ENTRY	dS - pointer to block head
 39260                                  ;	EXIT	AX,ES - pointers to next head
 39261                                  ;		'C' set if arena damaged
 39262                                  ;
 39263                                  ;----------------------------------------------------------------------------
 39264                                  
 39265                                  	; 01/11/2022
 39266                                  get_next:
 39267 000033E0 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 39268 000033E5 740A                    	je	short gn_err
 39269                                  _get_next_:
 39270 000033E7 8CD8                    	mov     ax,ds                   ; ax=current block
 39271 000033E9 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 39272 000033ED 40                      	inc     ax                      ; remember that header!
 39273 000033EE 8EC0                    	mov	es,ax
 39274                                  	;clc
 39275                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39276                                  	; 11/12/2022
 39277                                  	; cf=0
 39278                                  	;clc
 39279 000033F0 C3                      	retn
 39280                                  gn_err:
 39281 000033F1 F9                      	stc
 39282                                  	; 11/12/2022	
 39283                                  lfu_err:	 ; cf=1
 39284 000033F2 C3                      	retn
 39285                                  
 39286                                  ;----------------------------------------------------------------------------
 39287                                  ;
 39288                                  ; procedure : LinkFirstUMB
 39289                                  ;
 39290                                  ;----------------------------------------------------------------------------
 39291                                  
 39292                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39293                                  	; (SYSINIT:2F81h)
 39294                                  LinkFirstUMB:
 39295                                  	; 31/12/2022
 39296                                  	; ds = cs
 39297 000033F3 E8CEFF                  	call	umb_allocate
 39298 000033F6 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 39299                                  
 39300                                  ; bx = segment of allocated UMB
 39301                                  ; dx = size of UMB
 39302                                  
 39303                                  	; 31/12/2022
 39304                                  	; ds = cs
 39305                                  
 39306 000033F8 CD12                    	int	12h			; ax = size of memory
 39307 000033FA B106                    	mov	cl,6
 39308 000033FC D3E0                    	shl	ax,cl			; ax = size in paragraphs
 39309                                  
 39310 000033FE 89C1                    	mov	cx,ax			; cx = size in paras
 39311 00003400 29D8                    	sub	ax,bx			; ax = - size of unused block
 39312                                  
 39313 00003402 F7D8                    	neg	ax
 39314                                  
 39315                                  	;sub	cx,1			; cx = first umb_arena
 39316                                  	; 09/09/2023
 39317 00003404 49                      	dec	cx
 39318 00003405 8EC1                    	mov	es,cx			; es = first umb_arena
 39319                                  	
 39320 00003407 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 39321 0000340D 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 39322                                  					
 39323 00003414 26A30300                	mov	[es:ARENA.SIZE],ax	
 39324 00003418 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 39325                                  
 39326                                  ; put in the arena for the first UMB
 39327                                  
 39328 0000341F 8EC3                    	mov	es,bx			; es has first free umb seg
 39329 00003421 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39330 00003427 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 39331                                  					; mark as free 
 39332 0000342E 4A                      	dec	dx			; make room for arena
 39333 0000342F 2689160300              	mov	[es:ARENA.SIZE],dx	
 39334                                  
 39335                                  	;mov	es,[cs:DevDOSData]
 39336                                  	; 31/12/2022
 39337 00003434 8E06[9D1F]              	mov	es,[DevDOSData] ; ds = cs
 39338 00003438 BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 39339 0000343B 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 39340                                  					;  data segment with the arena
 39341                                  					;  just below Top of Mem
 39342                                  
 39343                                  ; we must now scan the arena chain and update the size of the last arena
 39344                                  
 39345 0000343E BF2400                  	mov	di,DOS_ARENA ; 24h
 39346 00003441 268E05                  	mov	es,[es:di]		; es = start arena
 39347 00003444 31FF                    	xor	di,di
 39348                                  ;scan_next
 39349                                  ; 09/12/2022
 39350                                  scannext:
 39351 00003446 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 39352 0000344A 740C                    	je	short got_last
 39353                                  	
 39354 0000344C 8CC0                    	mov	ax,es
 39355 0000344E 2603060300              	add	ax,[es:ARENA.SIZE]
 39356 00003453 40                      	inc	ax
 39357 00003454 8EC0                    	mov	es,ax
 39358                                  	;jmp	short scan_next
 39359                                  	; 09/12/2022
 39360 00003456 EBEE                    	jmp	short scannext
 39361                                  got_last:
 39362                                  	;sub	word [es:ARENA.SIZE],1
 39363                                  	; 09/09/2023
 39364 00003458 26FF0E0300              	dec	word [es:ARENA.SIZE]
 39365                                  
 39366 0000345D 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 39367                                  	;clc
 39368                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39369                                  	; 11/12/2022
 39370                                  	; cf=0
 39371                                  	;clc
 39372 00003463 C3                      	retn
 39373                                  
 39374                                  ; 11/12/2022
 39375                                  ;;lfu_err:
 39376                                  ;	;stc
 39377                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39378                                  ;	; 11/12/2022
 39379                                  ;	; cf=1
 39380                                  ;	;stc
 39381                                  ;	retn
 39382                                  
 39383                                  ;----------------------------------------------------------------------------
 39384                                  ;
 39385                                  ; procedure : ShrinkUMB
 39386                                  ;
 39387                                  ;	Shrinks the current UMB in use, so that the unused portions
 39388                                  ;	of the UMB is given back to the DOS free mem pool
 39389                                  ;
 39390                                  ;----------------------------------------------------------------------------
 39391                                  
 39392                                  ShrinkUMB:
 39393                                  	; 12/12/2022
 39394                                  	; ds = cs
 39395 00003464 833E[801F]00            	cmp	word [DevUMBAddr],0
 39396                                  	;cmp	word [cs:DevUMBAddr],0
 39397 00003469 741F                    	je	short su_exit
 39398 0000346B 06                      	push	es
 39399                                  	; 01/01/2023
 39400                                  	;push	bx
 39401                                  	; 12/12/2022
 39402                                  	;mov	bx,[cs:DevUMBFree]
 39403                                  	;sub	bx,[cs:DevUMBAddr]
 39404                                  	;mov	es,[cs:DevUMBAddr]
 39405 0000346C 8B1E[841F]              	mov	bx,[DevUMBFree]
 39406 00003470 2B1E[801F]              	sub	bx,[DevUMBAddr]
 39407 00003474 8E06[801F]              	mov	es,[DevUMBAddr]
 39408                                  	
 39409 00003478 B8004A                  	mov	ax,4A00h
 39410 0000347B CD21                    	int	21h
 39411                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 39412                                  		; ES = segment address of block to change
 39413                                  		; BX = new size in paragraphs
 39414 0000347D 8CC0                    	mov	ax,es
 39415 0000347F 48                      	dec	ax
 39416 00003480 8EC0                    	mov	es,ax
 39417 00003482 26C70601000800          	mov	word [es:ARENA.OWNER],8
 39418                                  	; 01/01/2023
 39419                                  	;pop	bx
 39420 00003489 07                      	pop	es
 39421                                  su_exit:
 39422 0000348A C3                      	retn
 39423                                  
 39424                                  ;----------------------------------------------------------------------------
 39425                                  ;
 39426                                  ; procedure : UnlinkUMB
 39427                                  ;
 39428                                  ;	Unlinks the UMBs from the DOS arena chain
 39429                                  ;
 39430                                  ;----------------------------------------------------------------------------
 39431                                  
 39432                                  UnlinkUMB:
 39433                                  	; 12/12/2022
 39434                                  	; ds = cs
 39435 0000348B 1E                      	push	ds
 39436 0000348C 06                      	push	es
 39437                                  	; 12/12/2022
 39438 0000348D 803E[9C1F]00            	cmp	byte [FirstUMBLinked],0
 39439                                  	;cmp	byte [cs:FirstUMBLinked],0
 39440 00003492 7420                    	je	short ulu_x		; nothing to unlink
 39441                                  	; 12/12/2022
 39442 00003494 8E06[9D1F]              	mov	es,[DevDOSData]
 39443                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 39444 00003498 268E1E2400              	mov	ds,[es:DOS_ARENA]
 39445 0000349D 268B3E8C00              	mov	di,[es:UMB_ARENA]
 39446                                  ulu_next:
 39447 000034A2 E83BFF                  	call	get_next
 39448 000034A5 720D                    	jc	short ulu_x
 39449 000034A7 39C7                    	cmp	di,ax			; is the next one UMB ?
 39450 000034A9 7404                    	je	short ulu_found
 39451 000034AB 8ED8                    	mov	ds,ax
 39452 000034AD EBF3                    	jmp	short ulu_next
 39453                                  ulu_found:
 39454                                  	;mov	byte [0],'Z'
 39455 000034AF C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 39456                                  ulu_x:
 39457 000034B4 07                      	pop	es
 39458 000034B5 1F                      	pop	ds
 39459 000034B6 C3                      	retn
 39460                                  
 39461                                  ; ----------------------------------------------------------------------
 39462                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 39463                                  ; ----------------------------------------------------------------------
 39464                                  ; 14/04/2019 - Retro DOS v4.0
 39465                                  
 39466                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 39467                                  ;
 39468                                  ; Summary:
 39469                                  ;
 39470                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 39471                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 39472                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 39473                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 39474                                  ;   and/or config.inc for the full list.
 39475                                  ;
 39476                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 39477                                  ;   configuration support. blockname is either MENU, which contains one
 39478                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 39479                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 39480                                  ;   INCLUDE allows the current block to name another block for inclusion
 39481                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 39482                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 39483                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 39484                                  ;
 39485                                  ; Example:
 39486                                  ;
 39487                                  ;   [menu]
 39488                                  ;   menuitem=misc,Miscellaneous
 39489                                  ;   menuitem=network,Network Configuration
 39490                                  ;   menudefault=network,15
 39491                                  ;
 39492                                  ;   [network]
 39493                                  ;   include misc
 39494                                  ;   device=foo
 39495                                  ;
 39496                                  ;   [misc]
 39497                                  ;   device=bar
 39498                                  ;   include alternate
 39499                                  ;
 39500                                  ;   [alternate]
 39501                                  ;   device=tar
 39502                                  ;
 39503                                  ;
 39504                                  ;   When the menu is displayed
 39505                                  ;
 39506                                  ;    1. Miscellaneous
 39507                                  ;    2. Network Configuration
 39508                                  ;
 39509                                  ;   #2 is highlighted as the default option, and will be automatically
 39510                                  ;   selected after 15 seconds. It will invoke the following lines in the
 39511                                  ;   following order:
 39512                                  ;
 39513                                  ;       DEVICE=BAR
 39514                                  ;       DEVICE=TAR
 39515                                  ;       DEVICE=FOO
 39516                                  ;
 39517                                  
 39518                                  ;MULTI_CONFIG equ 1
 39519                                  
 39520                                  ; the following depend on the positions of the various letters in switchlist
 39521                                  
 39522                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 39523                                  
 39524                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 39525                                  flagdrive	equ 00001000b ; 8 
 39526                                  flagcyln	equ 00010000b ; 16
 39527                                  flagseclim	equ 00100000b ; 32
 39528                                  flagheads	equ 01000000b ; 64
 39529                                  flagff		equ 10000000b ; 128
 39530                                  
 39531                                  ;----------------------------------------------------------------------------
 39532                                  ; 19/04/2019 - Retro DOS v4.0
 39533                                  
 39534                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 39535                                  
 39536                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 39537                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 39538                                  
 39539 000034B7 00                      insert_blank:	db 	0
 39540                                  
 39541                                  ;----------------------------------------------------------------------------
 39542                                  ;
 39543                                  ; procedure : setparms
 39544                                  ;
 39545                                  ; the following set of routines is used to parse the drivparm = command in
 39546                                  ; the config.sys file to change the default drive parameters.
 39547                                  ;
 39548                                  ;----------------------------------------------------------------------------
 39549                                  
 39550                                  setparms:
 39551 000034B8 1E                      	push	ds
 39552 000034B9 50                      	push	ax
 39553 000034BA 53                      	push	bx
 39554 000034BB 51                      	push	cx
 39555 000034BC 52                      	push	dx
 39556                                  
 39557 000034BD 0E                      	push	cs
 39558 000034BE 1F                      	pop	ds
 39559                                  
 39560 000034BF 31DB                    	xor	bx,bx
 39561 000034C1 8A1E[7349]              	mov	bl,[drive]
 39562                                  	; 18/12/2022
 39563 000034C5 43                      	inc	bx
 39564                                  	;inc	bl			; get it correct for ioctl call
 39565                                  					; (1=a,2=b...)
 39566 000034C6 BA[4B48]                	mov	dx,deviceparameters
 39567                                  	;mov	ah,IOCTL ; 44h
 39568                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 39569                                  	; 04/07/2023
 39570 000034C9 B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 39571                                  	;mov	ch,RAWIO ; 8
 39572                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 39573                                  	; 04/07/2023
 39574 000034CC B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 39575 000034CF CD21                    	int	21h
 39576                                  
 39577                                  ; 27/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 39578 000034D1 8A26[7449]              	mov	ah,[switches]
 39579                                  	;mov	al,[deviceparameters+20]
 39580 000034D5 A0[5F48]                	mov	al,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 39581 000034D8 8A0E[7349]              	mov	cl,[drive]
 39582                                  ;
 39583                                  ;; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39584                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 39585                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 39586                                  ;	; 21/10/2022
 39587                                  ;	;mov	ax,DOSBIODATASEG ; 0070h	
 39588                                  ;	;mov	ds,ax			; set Bios_Data segment
 39589                                  ;
 39590                                  ;	; 27/07/2023
 39591                                  ;	;;test	word [cs:switches],flagec35 ; 4
 39592                                  ;	;test	byte [cs:switches],flagec35
 39593                                  ;	;jz	short not_ec35
 39594                                  ;
 39595                                  ;	; 27/07/2023
 39596                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39597                                  ;	;;test	word [switches],flagec35 ; 4
 39598                                  ;	; 12/12/2022
 39599                                  ;	;test	byte [switches],flagec35 ; 4
 39600                                  ;	;jz	short eot_ok
 39601                                  ;	
 39602                                  	;mov	cl,[cs:drive]		; which drive was this for?
 39603                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39604                                  	;mov	cl,[drive]
 39605                                  	; 27/07/2023
 39606                                  	;mov	ax,DOSBIODATASEG ; 0070h	
 39607                                  	;mov	ds,ax
 39608                                  
 39609 000034DC BA7000                  	mov	dx,DOSBIODATASEG
 39610 000034DF 8EDA                    	mov	ds,dx
 39611                                  
 39612 000034E1 F6C404                  	test	ah,flagec35	; test byte [cs:switches],flagec35
 39613 000034E4 7408                    	jz	short not_ec35
 39614                                  
 39615                                  	;mov	al,1			; assume drive 0
 39616                                  	;shl	al,cl			; set proper bit depending on drive
 39617                                  	;;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 39618                                  	;or	[ec35_flag],al		; set the bit in the permanent flags
 39619                                  	; 27/07/2023
 39620 000034E6 B401                    	mov	ah,1
 39621 000034E8 D2E4                    	shl	ah,cl
 39622 000034EA 0826[A204]              	or	[ec35_flag],ah
 39623                                  
 39624                                  ; 07/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 39625                                  ;	MSDOS 6.21 IO.SYS - SYINIT:3EB0h	
 39626                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39627                                  not_ec35:
 39628                                  ;	Now adjust the BIOS's EOT variable if our new drive has more
 39629                                  ;	sectors per track than any old ones.
 39630                                  
 39631                                  	; 27/07/2023
 39632                                  	;;mov	al,[cs:deviceparameters+20]
 39633                                  	;mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 39634                                  	
 39635                                  	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 39636 000034EE 3A06[2C01]              	cmp	al,[eot]
 39637 000034F2 7603                    	jbe	short eot_ok
 39638 000034F4 A2[2C01]                	mov	[eot],al
 39639                                  eot_ok:
 39640 000034F7 5A                      	pop	dx			; fix up all the registers
 39641 000034F8 59                      	pop	cx
 39642 000034F9 5B                      	pop	bx
 39643 000034FA 58                      	pop	ax
 39644 000034FB 1F                      	pop	ds ; 13/05/2019
 39645 000034FC C3                      	retn
 39646                                  
 39647                                  ;----------------------------------------------------------------------------
 39648                                  ;
 39649                                  ; procedure : diddleback
 39650                                  ;
 39651                                  ; replace default values for further drivparm commands
 39652                                  ;
 39653                                  ;----------------------------------------------------------------------------
 39654                                  
 39655                                  diddleback:
 39656 000034FD 1E                      	push	ds
 39657 000034FE 0E                      	push	cs
 39658 000034FF 1F                      	pop	ds
 39659                                  	;mov	word [deviceparameters+4],80
 39660 00003500 C706[4F48]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 39661                                  	;mov	byte [deviceparameters+1],2
 39662 00003506 C606[4C48]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 39663                                  	;mov	word [deviceparameters+2],0
 39664 0000350B C706[4D48]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 39665 00003511 C706[7449]0000          	mov	word [switches],0	    ; zero all switches
 39666 00003517 1F                      	pop	ds
 39667 00003518 C3                      	retn
 39668                                  
 39669                                  
 39670                                  ; 03/01/2023
 39671                                  %if 0
 39672                                  
 39673                                  ; 15/04/2019 - Retro DOS v4.0
 39674                                  
 39675                                  ;----------------------------------------------------------------------------
 39676                                  ;
 39677                                  ; procedure : parseline
 39678                                  ;
 39679                                  ; entry point is parseline. al contains the first character in command line.
 39680                                  ;
 39681                                  ;----------------------------------------------------------------------------
 39682                                  
 39683                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 39684                                  	; (SYSINIT:3EDFh)
 39685                                  
 39686                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 39687                                  	; (SYSINIT:30ACh)
 39688                                  parseline:
 39689                                  	; 03/01/2023
 39690                                  	; ds = cs ; *
 39691                                  
 39692                                  	;push	ds ; *
 39693                                  
 39694                                  	;push	cs ; *
 39695                                  	;pop	ds ; *
 39696                                  
 39697                                  nextswtch:
 39698                                  	cmp	al,cr			; carriage return?
 39699                                  	je	short done_line
 39700                                  	cmp	al,lf			; linefeed?
 39701                                  	je	short put_back		; put it back and done
 39702                                  
 39703                                  ; anything less or equal to a space is ignored.
 39704                                  
 39705                                  	cmp	al,' '                  ; space?
 39706                                  	jbe	short getnext		; skip over space
 39707                                  	cmp	al,'/'
 39708                                  	je	short getparm
 39709                                  	stc				; mark error invalid-character-in-input
 39710                                  	;jmp	short exitpl
 39711                                  	; 03/01/2023
 39712                                  swterr:
 39713                                  	retn
 39714                                  
 39715                                  getparm:
 39716                                  	call	check_switch
 39717                                  	mov	[switches],bx		; save switches read so far
 39718                                  	jc	short swterr
 39719                                  getnext:
 39720                                  	call	getchr
 39721                                  	;jc	short done_line
 39722                                  	;jmp	short nextswtch
 39723                                  	; 03/01/2023
 39724                                  	jnc	short nextswtch
 39725                                  ;swterr:
 39726                                  	;jmp	short exitpl		; exit if error
 39727                                  
 39728                                  done_line:
 39729                                  	; 12/12/2022
 39730                                  	test	byte [switches],flagdrive ; 8
 39731                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 39732                                  	jnz	short okay
 39733                                  	stc				; mark error no-drive-specified
 39734                                  	;jmp	short exitpl
 39735                                  	; 03/01/2023
 39736                                  	retn
 39737                                  
 39738                                  okay:
 39739                                  	mov	ax,[switches]
 39740                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 39741                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 39742                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 39743                                  	;clc			    ; everything is fine
 39744                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39745                                  	; 12/12/2022
 39746                                  	; cf=0
 39747                                  	;clc
 39748                                  	;call	setdeviceparameters
 39749                                  	; 03/01/2023
 39750                                  	jmp	setdeviceparameters
 39751                                  ;exitpl:
 39752                                  	; 03/01/2023
 39753                                  	; ds = cs
 39754                                  	;pop	ds ; *
 39755                                  	retn
 39756                                  put_back:
 39757                                  	inc	word [count]		; one more char to scan
 39758                                  	dec	word [chrptr]		; back up over linefeed
 39759                                  	jmp	short done_line
 39760                                  
 39761                                  %endif
 39762                                  
 39763                                  ;----------------------------------------------------------------------------
 39764                                  ;
 39765                                  ; procedure : check_switch
 39766                                  ;
 39767                                  ; processes a switch in the input. it ensures that the switch is valid, and
 39768                                  ; gets the number, if any required, following the switch. the switch and the
 39769                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 39770                                  ; error.
 39771                                  ;
 39772                                  ;----------------------------------------------------------------------------
 39773                                  
 39774                                  ; 09/09/2023
 39775                                  
 39776                                  err_swtch:
 39777 00003519 31CB                    	xor	bx,cx			; remove this switch from the records
 39778                                  err_check:
 39779 0000351B F9                      	stc
 39780                                  err_chk:
 39781                                  done_swtch:	; 09/09/2023 (cf=0)
 39782 0000351C C3                      	retn
 39783                                  
 39784                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 39785                                  
 39786                                  check_switch:
 39787 0000351D E8240D                  	call	getchr
 39788                                  	;jc	short err_check
 39789 00003520 72FA                    	jc	short err_chk
 39790 00003522 24DF                            and     al,0DFh                 ; convert it to upper case
 39791 00003524 3C41                    	cmp	al,'A'
 39792                                  	;jb	short err_check
 39793 00003526 72F4                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 39794 00003528 3C5A                    	cmp	al,'Z'
 39795 0000352A 77EF                    	ja	short err_check
 39796                                  
 39797 0000352C 06                      	push	es
 39798                                  
 39799 0000352D 0E                      	push	cs
 39800 0000352E 07                      	pop	es
 39801                                  
 39802                                  	;mov	cl,[switchlist]		; get number of valid switches
 39803                                  	;mov	ch,0
 39804                                  	;mov	di,1+switchlist		; point to string of valid switches
 39805                                  	; 09/09/2023
 39806 0000352F BF[984A]                	mov	di,switchlist
 39807 00003532 8A0D                    	mov	cl,[di]
 39808 00003534 B500                    	mov	ch,0
 39809 00003536 47                      	inc	di	; 1+switchlist
 39810                                  
 39811 00003537 F2AE                    	repne	scasb
 39812                                  
 39813 00003539 07                      	pop	es
 39814 0000353A 75DF                    	jnz	short err_check
 39815                                  
 39816 0000353C B80100                  	mov	ax,1
 39817 0000353F D3E0                    	shl	ax,cl			; set bit to indicate switch
 39818 00003541 8B1E[7449]              	mov	bx,[switches]		; get switches so far
 39819 00003545 09C3                    	or	bx,ax			; save this with other switches
 39820 00003547 89C1                    	mov	cx,ax
 39821                                  	; 12/12/2022
 39822 00003549 A8F8                    	test	al,switchnum ; 0F8h
 39823                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 39824 0000354B 74CF                    	jz	short done_swtch
 39825                                  
 39826 0000354D E8F40C                  	call	getchr
 39827 00003550 72C7                    	jc	short err_swtch
 39828                                  
 39829 00003552 3C3A                    	cmp	al,':'
 39830 00003554 75C3                    	jne	short err_swtch
 39831                                  
 39832 00003556 E8EB0C                  	call	getchr
 39833 00003559 53                      	push	bx			; preserve switches
 39834                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39835                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 39836                                  	; 12/12/2022
 39837                                  	; ds = cs
 39838 0000355A C606[AE02]20            	mov	byte [sepchr],' '
 39839 0000355F E8980D                  	call	getnum
 39840                                  	;mov	byte [cs:sepchr],0
 39841                                  	; 12/12/2022
 39842 00003562 C606[AE02]00            	mov	byte [sepchr],0
 39843 00003567 5B                      	pop	bx			; restore switches
 39844                                  
 39845                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 39846                                  ; not check for carry set here. if there is an error, it will be detected
 39847                                  ; further on (hopefully).
 39848                                  
 39849                                  	; 09/09/2023
 39850                                  	;call	process_num
 39851                                  	;jmp	short process_num
 39852                                  
 39853                                  ;done_swtch:
 39854                                  ;	;clc
 39855                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39856                                  ;	; 12/12/2022
 39857                                  ;	; cf=0
 39858                                  ;	;clc
 39859                                  ;	retn
 39860                                  
 39861                                  ;----------------------------------------------------------------------------
 39862                                  ;
 39863                                  ; procedure : process_num
 39864                                  ;
 39865                                  ; this routine takes the switch just input, and the number following (if any),
 39866                                  ; and sets the value in the appropriate variable. if the number input is zero
 39867                                  ; then it does nothing - it assumes the default value that is present in the
 39868                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 39869                                  ;
 39870                                  ;----------------------------------------------------------------------------
 39871                                  
 39872                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 39873                                  	; (SYSINIT:3156h)
 39874                                  process_num:
 39875 00003568 850E[7449]              	test	[switches],cx		; if this switch has been done before,
 39876 0000356C 752B                    	jnz	short done_ret		; ignore this one.
 39877                                  	; 12/12/2022
 39878 0000356E F6C108                  	test	cl,flagdrive ; 8
 39879                                  	;test	cx,flagdrive ; 8
 39880 00003571 7404                    	jz	short try_f
 39881 00003573 A2[7349]                	mov	byte [drive],al
 39882                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39883                                  	;jmp	short done_ret
 39884                                  	; 12/12/2022
 39885                                  	; cf=0
 39886 00003576 C3                      	retn	; 13/05/2019
 39887                                  try_f:
 39888                                  	; 12/12/2022
 39889 00003577 F6C180                  	test	cl,flagff ; 80h
 39890                                  	;test	cx,flagff ; 80h
 39891 0000357A 7404                    	jz	short try_t
 39892                                  
 39893                                  ; ensure that we do not get bogus form factors that are not supported
 39894                                  
 39895                                  	;mov	[deviceparameters+1],al
 39896 0000357C A2[4C48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 39897                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39898                                  	;jmp	short done_ret
 39899                                  	; 12/12/2022
 39900                                  	; cf=0
 39901 0000357F C3                      	retn	; 13/05/2019
 39902                                  try_t:
 39903 00003580 09C0                    	or	ax,ax
 39904 00003582 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 39905                                  	; 12/12/2022
 39906 00003584 F6C110                  	test	cl,flagcyln ; 10h
 39907                                  	;test	cx,flagcyln ; 10h
 39908 00003587 7404                    	jz	short try_s
 39909                                  
 39910                                  	;mov	[deviceparameters+4],ax
 39911 00003589 A3[4F48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 39912                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39913                                  	;jmp	short done_ret
 39914                                  	; 12/12/2022
 39915                                  	; cf=0
 39916 0000358C C3                      	retn	; 13/05/2019
 39917                                  try_s:
 39918                                  	; 12/12/2022
 39919 0000358D F6C120                  	test	cl,flagseclim ; 20h
 39920                                  	;test	cx,flagseclim ; 20h
 39921 00003590 7404                    	jz	short try_h
 39922 00003592 A3[7149]                	mov	[slim],ax
 39923                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39924                                  	;jmp	short done_ret
 39925                                  	; 12/12/2022
 39926                                  	; cf=0
 39927 00003595 C3                      	retn	; 13/05/2019
 39928                                  
 39929                                  ; must be for number of heads
 39930                                  
 39931                                  try_h:
 39932 00003596 A3[6F49]                	mov	[hlim],ax
 39933                                  done_ret:
 39934                                  	;clc
 39935                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 39936                                  	; 12/12/2022
 39937                                  	; cf=0 (test instruction resets cf)
 39938                                  	;clc
 39939 00003599 C3                      	retn
 39940                                  
 39941                                  
 39942                                  ; 03/01/2023 - Retro DOS v4.2
 39943                                  %if 1
 39944                                  
 39945                                  ; 15/04/2019 - Retro DOS v4.0
 39946                                  
 39947                                  ;----------------------------------------------------------------------------
 39948                                  ;
 39949                                  ; procedure : parseline
 39950                                  ;
 39951                                  ; entry point is parseline. al contains the first character in command line.
 39952                                  ;
 39953                                  ;----------------------------------------------------------------------------
 39954                                  
 39955                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 39956                                  	; (SYSINIT:3EDFh)
 39957                                  
 39958                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 39959                                  	; (SYSINIT:30ACh)
 39960                                  parseline:
 39961                                  	; 03/01/2023
 39962                                  	; ds = cs ; *
 39963                                  
 39964                                  	;push	ds ; *
 39965                                  
 39966                                  	;push	cs ; *
 39967                                  	;pop	ds ; *
 39968                                  
 39969                                  nextswtch:
 39970 0000359A 3C0D                    	cmp	al,cr			; carriage return?
 39971 0000359C 741C                    	je	short done_line
 39972 0000359E 3C0A                    	cmp	al,lf			; linefeed?
 39973 000035A0 7421                    	je	short put_back		; put it back and done
 39974                                  
 39975                                  ; anything less or equal to a space is ignored.
 39976                                  
 39977 000035A2 3C20                    	cmp	al,' '                  ; space?
 39978 000035A4 760F                    	jbe	short getnext		; skip over space
 39979 000035A6 3C2F                    	cmp	al,'/'
 39980 000035A8 7402                    	je	short getparm
 39981 000035AA F9                      	stc				; mark error invalid-character-in-input
 39982                                  	;jmp	short exitpl
 39983                                  	; 03/01/2023
 39984                                  swterr:
 39985 000035AB C3                      	retn
 39986                                  
 39987                                  getparm:
 39988 000035AC E86EFF                  	call	check_switch
 39989 000035AF 891E[7449]              	mov	[switches],bx		; save switches read so far
 39990 000035B3 72F6                    	jc	short swterr
 39991                                  getnext:
 39992 000035B5 E88C0C                  	call	getchr
 39993                                  	;jc	short done_line
 39994                                  	;jmp	short nextswtch
 39995                                  	; 03/01/2023
 39996 000035B8 73E0                    	jnc	short nextswtch
 39997                                  ;swterr:
 39998                                  	;jmp	short exitpl		; exit if error
 39999                                  
 40000                                  done_line:
 40001                                  	; 12/12/2022
 40002 000035BA F606[7449]08            	test	byte [switches],flagdrive ; 8
 40003                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 40004 000035BF 750C                    	jnz	short okay
 40005 000035C1 F9                      	stc				; mark error no-drive-specified
 40006                                  	;jmp	short exitpl
 40007                                  	; 03/01/2023
 40008 000035C2 C3                      	retn
 40009                                  
 40010                                  ;exitpl:
 40011                                  	; 03/01/2023
 40012                                  	; ds = cs
 40013                                  	;;pop	ds ; *
 40014                                  	;retn
 40015                                  
 40016                                  put_back:
 40017 000035C3 FF06[5603]              	inc	word [count]		; one more char to scan
 40018 000035C7 FF0E[5A03]              	dec	word [chrptr]		; back up over linefeed
 40019 000035CB EBED                    	jmp	short done_line
 40020                                  
 40021                                  okay:
 40022 000035CD A1[7449]                	mov	ax,[switches]
 40023 000035D0 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 40024 000035D3 A3[4D48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 40025 000035D6 C706[7148]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 40026                                  	;clc			    ; everything is fine
 40027                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40028                                  	; 12/12/2022
 40029                                  	; cf=0
 40030                                  	;clc
 40031                                  	;call	setdeviceparameters
 40032                                  	; 03/01/2023
 40033                                  	;jmp	short setdeviceparameters
 40034                                  
 40035                                  %endif
 40036                                  
 40037                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 40038                                  
 40039                                  ;----------------------------------------------------------------------------
 40040                                  ;
 40041                                  ; procedure : setdeviceparameters
 40042                                  ;
 40043                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 40044                                  ; system based on the form factor. it is assumed that the bpbs for the
 40045                                  ; various form factors are present in the bpbtable. for hard files,
 40046                                  ; the recommended bpb is the same as the bpb on the drive.
 40047                                  ; no attempt is made to preserve registers since we are going to jump to
 40048                                  ; sysinit straight after this routine.
 40049                                  ;
 40050                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 40051                                  ;	  we always return no carry
 40052                                  ;
 40053                                  ;	note:  there is a routine by the same name in msdioctl.asm
 40054                                  ;
 40055                                  ;----------------------------------------------------------------------------
 40056                                  
 40057                                  ; 15/04/2019 - Retro DOS v4.0
 40058                                  
 40059                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 40060                                  
 40061                                  	; 03/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 40062                                  	; (SYSINIT:3FC4h)
 40063                                  
 40064                                  	; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 40065                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4236h)
 40066                                  
 40067                                  setdeviceparameters:
 40068                                  	; 03/01/2023
 40069                                  	; ds = cs
 40070                                  
 40071 000035DC 06                      	push	es
 40072                                  
 40073 000035DD 0E                      	push	cs
 40074 000035DE 07                      	pop	es
 40075                                  
 40076 000035DF 31DB                    	xor	bx,bx
 40077 000035E1 8A1E[4C48]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 40078 000035E5 80FB00                  	cmp	bl,DEV_5INCH ; 0
 40079 000035E8 7506                    	jne	short got_80
 40080                                  
 40081 000035EA C706[4F48]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 40082                                  							; 48 tpi=40 cyl
 40083                                  got_80:
 40084 000035F0 D1E3                    	shl	bx,1			; get index into bpb table
 40085 000035F2 8BB7[844A]              	mov	si,[bpbtable+bx]	; get address of bpb
 40086                                  
 40087                                  	;mov	di,deviceparameters+7	
 40088                                  	; 02/11/2022
 40089 000035F6 BF[5248]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 40090 000035F9 B91F00                  	mov	cx,A_BPB.size ; 31
 40091                                  	; 09/09/2023
 40092                                  	;mov	cx,59 ; PCDOS 7.1 IBMBIO.COM A_BPB.size
 40093 000035FC FC                      	cld
 40094                                  	;repe	movsb
 40095                                  	; 02/11/2022
 40096 000035FD F3A4                    	rep	movsb
 40097                                  
 40098 000035FF 07                      	pop	es
 40099                                  
 40100                                  	; 12/12/2022
 40101 00003600 F606[7449]20            	test	byte [switches],flagseclim ; 20h
 40102                                  	;test	word [switches],flagseclim ; 20h
 40103 00003605 7406                    	jz	short see_heads
 40104                                  
 40105 00003607 A1[7149]                	mov	ax,[slim]
 40106                                  	;mov	[deviceparameters+20],ax
 40107 0000360A A3[5F48]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 40108                                  
 40109                                  see_heads:
 40110                                  	; 12/12/2022
 40111 0000360D F606[7449]40            	test	byte [switches],flagheads ; 40h
 40112                                  	;test	word [switches],flagheads ; 40h
 40113 00003612 7406                    	jz	short heads_not_altered
 40114                                  
 40115 00003614 A1[6F49]                	mov	ax,[hlim]
 40116                                  	;mov	[deviceparameters+22],ax	
 40117 00003617 A3[6148]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 40118                                  
 40119                                  heads_not_altered:
 40120                                  
 40121                                  ; set up correct media descriptor byte and sectors/cluster
 40122                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 40123                                  
 40124                                  	;mov	byte [deviceparameters+9],2
 40125                                  	; 02/11/2022
 40126                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 40127                                  	; 03/01/2023
 40128 0000361A B80200                  	mov	ax,2	
 40129 0000361D A2[5448]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 40130                                  
 40131 00003620 B3F0                    	mov	bl,0F0h			; get default mediabyte
 40132                                  
 40133                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 40134                                  
 40135                                  	;mov	bh,[deviceparameters+17]
 40136                                  	; 02/11/2022
 40137 00003622 8A3E[5C48]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 40138                                  	
 40139                                  	; 03/01/2023
 40140                                  	; ax = 2
 40141 00003626 3906[6148]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 40142                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 40143 0000362A 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 40144                                  
 40145 0000362C 7524                    	jne	short only_one_head	; one head, do one head stuff
 40146                                  
 40147                                  ;	two head drives will use the mediadescriptor from the bpb
 40148                                  
 40149 0000362E 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 40150                                  
 40151                                  ;	two sided drives have two special cases to look for. One is
 40152                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 40153                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 40154                                  ;	   one sector/cluster.
 40155                                  
 40156                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 40157                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 40158                                  ;	   type of 2 headed drive is all set.
 40159                                  
 40160 00003630 833E[5F48]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 40161 00003635 7509                    	jne	short not_144m
 40162 00003637 833E[4F48]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 40163 0000363C 7502                    	jne	short not_144m
 40164                                  
 40165                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 40166                                  
 40167 0000363E EB24                    	jmp	short got_one_secperclus_drive
 40168                                  
 40169                                  ;	check for 320K
 40170                                  
 40171                                  not_144m:
 40172 00003640 833E[4F48]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 40173 00003645 7521                    	jne	short got_correct_mediad
 40174 00003647 833E[5F48]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 40175 0000364C 751A                    	jne	short got_correct_mediad
 40176                                  
 40177 0000364E B3FC                    	mov	bl,0FCh
 40178 00003650 EB16                    	jmp	short got_correct_mediad
 40179                                  
 40180                                  only_one_head:
 40181                                  
 40182                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 40183                                  
 40184 00003652 803E[4C48]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 40185 00003657 740B                    	je	short got_one_secperclus_drive
 40186                                  
 40187                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 40188                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 40189                                  ;	  besides 8 will be considered 0fch
 40190                                  
 40191 00003659 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 40192 0000365B 833E[5F48]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 40193                                  	; 12/12/2022
 40194 00003660 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 40195                                  
 40196 00003662 B3FE                    	mov	bl,0FEh			; 160K mediaid
 40197                                  
 40198                                  ;	we've either got a one sided drive, or a 1.44M drive
 40199                                  ;	  either case we'll use 1 sector per cluster instead of 2
 40200                                  
 40201                                  got_one_secperclus_drive:
 40202                                  	; 03/01/2023
 40203                                  	; ax = 2
 40204 00003664 48                      	dec	ax  ; ax = 1
 40205 00003665 A2[5448]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 40206                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 40207                                  
 40208                                  got_correct_mediad:
 40209 00003668 881E[5C48]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 40210                                  
 40211                                  ;	 Calculate the correct number of Total Sectors on medium
 40212                                  
 40213 0000366C A1[4F48]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 40214 0000366F F726[6148]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 40215 00003673 F726[5F48]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 40216 00003677 A3[5A48]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 40217 0000367A F8                      	clc				; we currently return no errors
 40218                                  
 40219 0000367B C3                      	retn
 40220                                  
 40221                                  ;	M047 -- end rewritten routine
 40222                                  
 40223                                  ;----------------------------------------------------------------------------
 40224                                  ;
 40225                                  ; procedure : organize
 40226                                  ;
 40227                                  ;----------------------------------------------------------------------------
 40228                                  
 40229                                  ; 09/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 40230                                  %if 1
 40231                                  end_commd_line:
 40232 0000367C AA                      	stosb				; store line feed char in buffer for the linecount.
 40233                                  	;mov	byte [cs:com_level],0	; reset the command level.
 40234                                  	; 03/01/2023
 40235                                  	; ds = cs
 40236                                  	;mov	byte [com_level],0
 40237                                  	;jmp	short org1
 40238                                  	; 09/09/2023
 40239 0000367D EB0E                    	jmp	short org0
 40240                                  nochar1:
 40241 0000367F F9                      	stc
 40242 00003680 C3                      	retn
 40243                                  %endif
 40244                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 40245                                  	; (SYSINIT:3234h)
 40246                                  
 40247                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40248                                  	; (SYSINIT:4067h)
 40249                                  
 40250                                  	; 09/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 40251                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:42D9h)
 40252                                  
 40253                                  organize:
 40254                                  	; 03/01/2023
 40255                                  	; ds = cs
 40256 00003681 8B0E[5603]              	mov	cx,[count]
 40257                                  	;mov	cx,[cs:count]
 40258 00003685 E3F8                    	jcxz	nochar1
 40259                                  
 40260                                  ;ifndef	MULTI_CONFIG
 40261                                  ;
 40262                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 40263                                  ;;   because we the case of values in SET commands preserved
 40264                                  ;
 40265                                  ;	call	mapcase
 40266                                  ;endif
 40267                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40268                                  	; 03/01/2023 - Retro DOS v4.2
 40269                                  	;call	mapcase
 40270                                  
 40271 00003687 31F6                    	xor	si,si
 40272 00003689 89F7                    	mov	di,si
 40273 0000368B 31C0                    	xor	ax,ax
 40274                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 40275                                  	;;mov	byte [cs:com_level],0
 40276                                  	; 12/12/2022
 40277                                  	;mov	[cs:com_level],al ; 0
 40278                                  	; 03/01/2023
 40279                                  	; ds = cs
 40280                                  	; 09/09/2023
 40281                                  	;mov	[com_level],al ; 0
 40282                                  org0:
 40283 0000368D C606[5003]00            	mov	byte [com_level],0 ; 09/09/2023
 40284                                  org1:
 40285 00003692 E8EF01                  	call	skip_comment
 40286 00003695 74E5                    	jz	short end_commd_line	; found a comment string and skipped.
 40287 00003697 E8D001                  	call	get2			; not a comment string. then get a char.
 40288 0000369A 3C0A                    	cmp	al,lf ; 0Ah
 40289 0000369C 74DE                    	je	short end_commd_line	; starts with a blank line.
 40290 0000369E 3C20                    	cmp	al,' ' ; 20h
 40291 000036A0 76F0                    	jbe	short org1		; skip leading control characters
 40292                                  	; 09/09/2023
 40293                                  	;jmp	short findit
 40294                                  
 40295                                  ; 09/09/2023
 40296                                  %if 0
 40297                                  end_commd_line:
 40298                                  	stosb				; store line feed char in buffer for the linecount.
 40299                                  	;mov	byte [cs:com_level],0	; reset the command level.
 40300                                  	; 03/01/2023
 40301                                  	; ds = cs
 40302                                  	mov	byte [com_level],0
 40303                                  	jmp	short org1
 40304                                  
 40305                                  nochar1:
 40306                                  	stc
 40307                                  	retn
 40308                                  %endif
 40309                                  
 40310                                  findit:
 40311 000036A2 51                      	push	cx
 40312 000036A3 56                      	push	si
 40313 000036A4 57                      	push	di
 40314 000036A5 89F5                    	mov	bp,si
 40315 000036A7 4D                      	dec	bp
 40316 000036A8 BE[6847]                        mov     si,comtab		; prepare to search command table
 40317 000036AB B500                    	mov	ch,0
 40318                                  findcom:
 40319 000036AD 89EF                    	mov	di,bp
 40320 000036AF 8A0C                    	mov	cl,[si]
 40321 000036B1 46                      	inc	si
 40322 000036B2 E345                    	jcxz	nocom
 40323                                  
 40324                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40325                                  
 40326                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40327                                  
 40328                                  ;ifdef	MULTI_CONFIG
 40329                                  
 40330                                  ;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 40331                                  ;   time skip the upcoming delimiter test (since ";" need not be followed by
 40332                                  ;   anything in particular)
 40333                                  
 40334 000036B4 26803D3B                	cmp	byte [es:di],CONFIG_SEMICOLON  ; ';'
 40335 000036B8 7430                    	je	short semicolon
 40336                                  loopcom:
 40337                                  	;mov	al,[es:di]
 40338                                  	;inc	di
 40339                                  	;and	al,~20h ; 0DFh		; force upper case
 40340                                  	;inc	si                      ; compare to byte @es:di
 40341                                  	;cmp	al,[si-1]
 40342                                  	; 28/07/2023 - Retro DOS v4.2 IO.SYS (optimization)
 40343 000036BA 268A25                  	mov	ah,[es:di]
 40344 000036BD 47                      	inc	di
 40345 000036BE 80E4DF                  	and	ah,~20h ; 0DFh		
 40346 000036C1 AC                      	lodsb			; mov al,[si]
 40347                                  				; inc si
 40348                                  	;cmp	al,ah
 40349                                  	;loope	loopcom
 40350                                  	; 28/07/2023
 40351 000036C2 30C4                    	xor	ah,al		; result: ah = 0 (*) if ah = al
 40352 000036C4 E1F4                    	loopz	loopcom
 40353                                  ;else
 40354                                  ;	repe	cmpsb
 40355                                  ;endif
 40356                                  	; 02/11/2022
 40357                                  	; 03/01/2023 - Retro DOS v4.2
 40358                                  	;repe	cmpsb
 40359                                  
 40360                                  	; 28/07/2023
 40361                                  	;lahf
 40362 000036C6 01CE                            add     si,cx                   ; bump to next position without affecting flags
 40363                                  	;sahf
 40364 000036C8 AC                              lodsb                           ; get indicator letter
 40365                                  	;jnz	short findcom
 40366                                          ; 28/07/2023
 40367 000036C9 08E4                    	or	ah,ah			; (*)
 40368 000036CB 75E0                    	jnz	short findcom		
 40369                                  	
 40370 000036CD 26803D0D                	cmp     byte [es:di],cr		; the next char might be cr,lf
 40371 000036D1 7421                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 40372 000036D3 26803D0A                	cmp	byte [es:di],lf
 40373 000036D7 741B                    	je	short gotcom0
 40374                                  
 40375                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40376                                  
 40377                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40378                                  
 40379                                  ;ifdef	MULTI_CONFIG
 40380                                  
 40381                                  ; Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 40382                                  
 40383 000036D9 3C5B                    	cmp	al,CONFIG_BEGIN  ; '['
 40384 000036DB 7417                    	je	short gotcom0
 40385                                  ;endif
 40386 000036DD 50                      	push	ax
 40387 000036DE 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 40388                                  
 40389                                  ;ifdef	MULTI_CONFIG
 40390                                  
 40391                                  ;   If keyword is *immediately* followed by a question mark (?), then
 40392                                  ;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 40393                                  ;   stored in the CONFIG.SYS memory image.
 40394                                  
 40395 000036E1 3C3F                    	cmp	al,'?'                  ; explicit interactive command?
 40396 000036E3 7509                    	jne	short no_query		; no
 40397 000036E5 58                      	pop	ax                      ; yes, so retrieve the original code
 40398                                  	;or	al,80h ; 03/01/2023
 40399 000036E6 0C80                    	or	al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 40400 000036E8 EB0A                    	jmp	short gotcom0           ;
 40401                                  semicolon:
 40402 000036EA B030                    	mov	al,CONFIG_REM ; '0'
 40403 000036EC EB06                    	jmp	short gotcom0
 40404                                  no_query:
 40405                                  ;endif  ;MULTI_CONFIG
 40406                                  
 40407                                  	; 02/11/2022
 40408                                  	; 03/01/2023 - Retro DOS v4.2
 40409                                  	;push	ax
 40410                                  	;mov	al,[es:di]		; now the next char. should be a delim.
 40411                                  
 40412 000036EE E82E0B                  	call	delim
 40413                                  no_delim:
 40414 000036F1 58                      	pop	ax
 40415 000036F2 75B9                    	jnz	short findcom
 40416                                  gotcom0:
 40417 000036F4 5F                      	pop	di
 40418 000036F5 5E                      	pop	si
 40419 000036F6 59                      	pop	cx
 40420 000036F7 EB10                    	jmp	short gotcom
 40421                                  nocom:
 40422 000036F9 5F                      	pop	di
 40423 000036FA 5E                      	pop	si
 40424 000036FB 59                      	pop	cx
 40425 000036FC B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 40426 000036FE AA                      	stosb				; save indicator char.
 40427                                  _skipline:
 40428 000036FF E86801                  	call	get2
 40429 00003702 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 40430 00003704 75F9                            jne     short _skipline
 40431                                  	;jmp	short end_commd_line	; handle next command line
 40432                                  	; 09/09/2023
 40433 00003706 E973FF                  	jmp	end_commd_line
 40434                                  gotcom:
 40435 00003709 AA                              stosb                           ; save indicator char in buffer
 40436                                  
 40437                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40438                                  
 40439                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40440                                  
 40441                                  ;ifdef	MULTI_CONFIG
 40442                                  
 40443                                  ;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 40444                                  ;   it screws up the direct comparisons below.
 40445                                  
 40446 0000370A 247F                    	and	al,~CONFIG_OPTION_QUERY ; 7Fh
 40447                                  ;endif
 40448                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 40449                                  	; 03/01/2023
 40450                                  	; ds = cs
 40451 0000370C A2[5403]                	mov	[cmd_indicator],al	; save it for the future use.
 40452                                  
 40453                                  ;ifdef	MULTI_CONFIG
 40454                                  
 40455                                  ;   There is no whitespace/delimiter between the "begin block" character
 40456                                  ;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 40457                                  ;   skipping code
 40458                                  
 40459 0000370F 3C5B                    	cmp	al,CONFIG_BEGIN
 40460 00003711 7455                    	je	short org31
 40461 00003713 3C4F                    	cmp	al,CONFIG_SUBMENU ; 'O'
 40462 00003715 740F                    	je	short no_mapcase
 40463 00003717 3C45                    	cmp	al,CONFIG_MENUITEM ; 'E'
 40464 00003719 740B                    	je	short no_mapcase
 40465 0000371B 3C41                    	cmp	al,CONFIG_MENUDEFAULT ; 'A'
 40466 0000371D 7407                    	je	short no_mapcase
 40467 0000371F 3C4A                    	cmp	al,CONFIG_INCLUDE ; 'J'
 40468 00003721 7403                    	je	short no_mapcase
 40469 00003723 E8350B                  	call	mapcase			; map case of rest of line to UPPER
 40470                                  no_mapcase:
 40471                                  ;endif
 40472                                  	;; 02/11/2022
 40473                                  	;;mov	[cs:cmd_indicator],al	; save it for the future use.
 40474                                  	;; 03/01/2023
 40475                                  	;; ds = cs
 40476                                  	;mov	[cmd_indicator],al
 40477                                  org2:	
 40478 00003726 E84101                  	call    get2                    ; skip the command name until delimiter
 40479 00003729 3C0A                            cmp     al,lf 	    ; 0Ah
 40480 0000372B 740F                    	je	short org21
 40481 0000372D 3C0D                    	cmp	al,cr 	    ; 0Dh	
 40482 0000372F 740B                    	je	short org21
 40483                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40484                                  	; 03/01/2023 - Retro DOS v4.2
 40485 00003731 3C2F                    	cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 40486 00003733 7407                    	je	short org21		; T-RICHJ: to be parsed properly.
 40487                                  
 40488 00003735 E8E70A                  	call	delim
 40489 00003738 75EC                            jnz	short org2
 40490 0000373A EB02                    	jmp	short org3
 40491                                  org21:					;if cr or lf then
 40492 0000373C 4E                      	dec	si			; undo si, cx register
 40493 0000373D 41                      	inc	cx			;  and continue
 40494                                  org3:	
 40495                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 40496                                  	;je	short get_cmt_token
 40497                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40498                                  	; 03/01/2023 - Retro DOS v4.2	
 40499                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 40500                                  	;je	short org_file
 40501                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 40502                                  	;je	short org_file
 40503                                  	;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 40504                                  	;je	short org_file
 40505                                  	; 02/11/2022
 40506                                  	; 03/01/2023 - Retro DOS v4.2
 40507                                  	;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 40508                                  	;;je	short org_file
 40509                                  	;cmp	byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 40510                                  	;je	short org_file
 40511                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 40512                                  	;je	short org_switch
 40513                                  
 40514                                  	; 03/01/2023
 40515                                  	; ds = cs
 40516                                  
 40517 0000373E 803E[5403]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 40518 00003743 745D                    	je	short get_cmt_token
 40519                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40520                                  	; 03/01/2023 - Retro DOS v4.2	
 40521 00003745 803E[5403]44            	cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 40522 0000374A 7430                    	je	short org_file
 40523 0000374C 803E[5403]49            	cmp	byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 40524 00003751 7429                    	je	short org_file
 40525 00003753 803E[5403]57            	cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 40526 00003758 7422                    	je	short org_file
 40527                                  	; 02/11/2022
 40528                                  	; 03/01/2023 - Retro DOS v4.2
 40529                                  	;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 40530                                  	;je	short org_file
 40531 0000375A 803E[5403]53                    cmp	byte [cmd_indicator],CONFIG_SHELL ; 'S'
 40532 0000375F 741B                    	je	short org_file
 40533 00003761 803E[5403]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 40534 00003766 7403                    	je	short org_switch
 40535                                  	
 40536                                  org31:
 40537 00003768 E99500                  	jmp	org4
 40538                                  
 40539                                  org_switch:
 40540 0000376B E81601                  	call	skip_comment
 40541 0000376E 7472                    	jz	short end_commd_line_brdg
 40542                                  
 40543 00003770 E8F700                  	call	get2
 40544 00003773 E8B10A                  	call	org_delim
 40545 00003776 74F3                    	jz	short org_switch
 40546                                  
 40547 00003778 AA                      	stosb
 40548 00003779 E99300                  	jmp	org5
 40549                                  
 40550                                  org_file:			; get the filename and put 0 at end
 40551 0000377C E80501                  	call	skip_comment
 40552 0000377F 7464                    	jz	short org_put_zero
 40553                                  
 40554 00003781 E8E600                  	call	get2		; not a comment
 40555 00003784 E8980A                  	call	delim
 40556 00003787 74F3                    	jz	short org_file	; skip the possible delimiters
 40557                                  
 40558 00003789 AA                      	stosb			; copy the first non delim char found in buffer
 40559                                  
 40560                                  org_copy_file:
 40561 0000378A E8F700                  	call	skip_comment	; comment char in the filename?
 40562 0000378D 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 40563                                  
 40564 0000378F E8D800                  	call	get2
 40565 00003792 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 40566 00003794 7457                    	je	short end_file_slash ; this will be the special case.
 40567                                  
 40568 00003796 AA                      	stosb			; save the char. in buffer
 40569 00003797 E8850A                  	call	delim
 40570 0000379A 7459                    	jz	short end_copy_file
 40571                                  
 40572 0000379C 3C20                    	cmp	al, ' '
 40573 0000379E 77EA                    	ja	short org_copy_file ; keep copying
 40574 000037A0 EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 40575                                  
 40576                                  get_cmt_token:			; get the token. just max. 2 char.
 40577 000037A2 E8C500                  	call	get2
 40578 000037A5 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 40579 000037A7 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 40580 000037A9 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 40581 000037AB 74F5                    	je	short get_cmt_token ;  character.)
 40582 000037AD 3C3D                    	cmp	al,'='		; = is special in this case.
 40583 000037AF 74F1                    	je	short get_cmt_token
 40584 000037B1 3C0D                    	cmp	al,cr
 40585 000037B3 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 40586 000037B5 3C0A                    	cmp	al,lf
 40587 000037B7 7422                    	je	short get_cmt_end
 40588                                  
 40589                                  	; 03/01/2023
 40590                                  	; ds = cs
 40591                                  	;mov	[cs:cmmt1],al	; store it
 40592                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 40593 000037B9 A2[5203]                	mov	[cmmt1],al	; store it
 40594 000037BC C606[5103]01            	mov	byte [cmmt],1	; 1 char. so far.
 40595 000037C1 E8A600                  	call	get2
 40596 000037C4 3C20                    	cmp	al,' ' ; 20h
 40597 000037C6 7413                    	je	short get_cmt_end
 40598 000037C8 3C09                    	cmp	al,tab ; 9
 40599 000037CA 740F                    	je	short get_cmt_end
 40600 000037CC 3C0D                    	cmp	al,cr  ; 0Dh
 40601 000037CE 740B                    	je	short get_cmt_end
 40602 000037D0 3C0A                    	cmp	al,lf  ; 0Ah
 40603 000037D2 740E                    	je	short end_commd_line_brdg
 40604                                  
 40605                                  	;mov	[cs:cmmt2],al
 40606                                  	;inc	byte [cs:cmmt]
 40607                                  	; 03/01/2023
 40608 000037D4 A2[5303]                	mov	[cmmt2],al
 40609 000037D7 FE06[5103]              	inc	byte [cmmt]
 40610                                  
 40611                                  get_cmt_end:
 40612 000037DB E88C00                  	call	get2
 40613 000037DE 3C0A                    	cmp	al,lf
 40614 000037E0 75F9                    	jne	short get_cmt_end	; skip it.
 40615                                  end_commd_line_brdg: 
 40616 000037E2 E997FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 40617                                  
 40618                                  org_put_zero:				; make the filename in front of
 40619 000037E5 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 40620 000037E9 47                      	inc	di
 40621 000037EA E98FFE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 40622                                  
 40623                                  end_file_slash: 			; al = "/" option char.
 40624 000037ED 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 40625 000037F1 47                      	inc	di			; and
 40626 000037F2 AA                      	stosb				; store "/" after that.
 40627 000037F3 EB1A                    	jmp	short org5		; continue with the rest of the line
 40628                                  
 40629                                  end_copy_file:
 40630 000037F5 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 40631 000037FA 3C0A                    	cmp	al,lf
 40632 000037FC 74E4                    	je	short end_commd_line_brdg
 40633 000037FE EB0F                    	jmp	short org5
 40634                                  
 40635                                  org4:					; org4 skips all delimiters after the command name except for '/'
 40636 00003800 E88100                  	call	skip_comment
 40637 00003803 74DD                    	jz	short end_commd_line_brdg
 40638                                  
 40639 00003805 E86200                  	call	get2
 40640 00003808 E81C0A                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 40641 0000380B 74F3                    	jz	short org4
 40642 0000380D EB08                    	jmp	short org51
 40643                                  
 40644                                  org5:					; rest of the line
 40645 0000380F E87200                  	call	skip_comment		; comment?
 40646 00003812 74CE                    	jz	short end_commd_line_brdg
 40647 00003814 E85300                  	call	get2			; not a comment.
 40648                                  
 40649                                  org51:
 40650 00003817 AA                      	stosb				; copy the character
 40651 00003818 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 40652 0000381A 743A                    	je	short at_quote
 40653 0000381C 3C20                    	cmp	al,' '  ; 20h
 40654 0000381E 77EF                    	ja	short org5
 40655                                  
 40656                                  	; 09/09/2023
 40657                                  	; (Note: PCDOS 7.1 IBMBIO.COM does not contain M051 modification)
 40658                                  
 40659                                  					; M051 - Start
 40660                                  	; 03/01/2023
 40661                                  	; ds = cs
 40662 00003820 803E[5403]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 40663                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 40664 00003825 7514                    	jne	short not_dh		; N: 
 40665 00003827 3C0A                    	cmp	al,lf			; Q: is this line feed
 40666 00003829 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 40667 0000382B 3C0D                    	cmp	al,cr			; Q: is this a cr
 40668 0000382D 75E0                    	jne	short org5		; N: 
 40669 0000382F 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 40670 00003834 AA                      	stosb				; put cr after blank
 40671 00003835 FE06[B734]              	inc	byte [insert_blank]
 40672                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 40673                                  					; inserted
 40674 00003839 EBD4                    	jmp	short org5
 40675                                  not_dh:					; M051 - End
 40676                                  
 40677 0000383B 3C0A                    	cmp	al,lf			; line feed?
 40678 0000383D 740F                    	je	short org1_brdg		; handles the next command line.
 40679 0000383F EBCE                    	jmp	short org5		; handles next char in this line.
 40680                                  
 40681                                  org_dhlf:				; M051 - Start
 40682                                  	; 03/01/2023
 40683                                  	; ds = cs
 40684 00003841 803E[B734]01            	cmp	byte [insert_blank],1
 40685                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 40686 00003846 7406                    	je	short org1_brdg		; Y:
 40687 00003848 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 40688 0000384D AA                      	stosb				; put lf after blank
 40689                                  					; M051 - End
 40690                                  org1_brdg:
 40691 0000384E C606[B734]00            	mov	byte [insert_blank],0 
 40692                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 40693                                  					; M051: devicehigh
 40694 00003853 E93CFE                  	jmp	org1
 40695                                  
 40696                                  at_quote:
 40697 00003856 803E[5003]00            	cmp	byte [com_level],0
 40698                                  	;cmp	byte [cs:com_level],0
 40699 0000385B 7407                    	je	short up_level
 40700                                  	;mov	byte [cs:com_level],0	; reset it.
 40701 0000385D C606[5003]00            	mov	byte [com_level],0
 40702 00003862 EBAB                    	jmp	short org5
 40703                                  
 40704                                  up_level:
 40705                                  	;inc	byte [cs:com_level]	; set it.
 40706 00003864 FE06[5003]              	inc	byte [com_level]
 40707 00003868 EBA5                    	jmp	short org5
 40708                                  
 40709                                  ;----------------------------------------------------------------------------
 40710                                  ;
 40711                                  ; procedure : get2
 40712                                  ;
 40713                                  ;----------------------------------------------------------------------------
 40714                                  
 40715                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 40716                                  	; (SYSINIT:33FAh)
 40717                                  
 40718                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40719                                  	; (SYSINIT:4270h)
 40720                                  get2:
 40721 0000386A E304                    	jcxz	noget
 40722                                  	;
 40723                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40724                                  	;;lods	byte ptr es:[si]
 40725                                  	; 12/12/2022
 40726 0000386C 26                      	es	
 40727 0000386D AC                      	lodsb
 40728                                  	;mov	al, [es:si]
 40729                                  	;inc	si
 40730                                  	;
 40731 0000386E 49                      	dec	cx
 40732 0000386F C3                      	retn
 40733                                  noget:
 40734 00003870 59                      	pop	cx
 40735                                  	; 03/01/2023
 40736                                  	; ds = cs
 40737                                  	;mov	[cs:count],di ; 13/05/2019
 40738                                  	;mov	[cs:org_count],di
 40739 00003871 893E[5603]              	mov	[count],di
 40740 00003875 893E[5803]              	mov	[org_count],di
 40741 00003879 31F6                    	xor	si,si
 40742                                  	;mov	[cs:chrptr],si
 40743 0000387B 8936[5A03]              	mov	[chrptr],si
 40744                                  
 40745                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40746                                  
 40747                                  ; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40748                                  
 40749                                  ;ifndef MULTI_CONFIG
 40750                                  ;	retn
 40751                                  ;else
 40752                                  
 40753                                  ;   This was the rather kludgy way out of procedure "organize", but instead
 40754                                  ;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 40755                                  ;   and the new boot menu stuff...
 40756                                  
 40757 0000387F 89F9                    	mov     cx,di
 40758 00003881 E9E300                  	jmp     menu_check
 40759                                  
 40760                                  ;endif
 40761                                  	; 02/11/2022
 40762                                  	; 03/01/2023 - Retro DOS v4.2
 40763                                  	;retn
 40764                                  
 40765                                  ;----------------------------------------------------------------------------
 40766                                  ;
 40767                                  ; procedure : skip_comment
 40768                                  ;
 40769                                  ;skip the commented string until lf, if current es:si-> a comment string.
 40770                                  ;in) es:si-> string
 40771                                  ;	 cx -> length.
 40772                                  ;out) zero flag not set if not found a comment string.
 40773                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 40774                                  ;	  the line feed character at this moment when return.
 40775                                  ;	  ax register destroyed.
 40776                                  ;	  if found, si, cx register adjusted accordingly.
 40777                                  ;
 40778                                  ;----------------------------------------------------------------------------
 40779                                  
 40780                                  	; 03/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 40781                                  	; (SYSINIT:428Dh)
 40782                                  
 40783                                  skip_comment:
 40784 00003884 E3EA                    	jcxz	noget		; get out of the organize routine.
 40785                                  
 40786                                  	; 03/01/2023
 40787                                  	; ds = cs	
 40788                                  
 40789 00003886 803E[5003]00            	cmp	byte [com_level],0
 40790                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 40791 0000388B 752C                    	jne	short no_commt	 ; (not inside quotations)
 40792                                  
 40793 0000388D 803E[5103]01            	cmp	byte [cmmt],1
 40794                                  	;cmp	byte [cs:cmmt],1
 40795 00003892 7225                    	jb	short no_commt
 40796                                  
 40797 00003894 268A04                  	mov	al,[es:si]
 40798                                  	
 40799 00003897 3806[5203]              	cmp	[cmmt1],al
 40800                                  	;cmp	[cs:cmmt1],al
 40801 0000389B 751C                    	jne	short no_commt
 40802                                  
 40803 0000389D 803E[5103]02            	cmp	byte [cmmt],2
 40804                                  	;cmp	byte [cs:cmmt],2
 40805 000038A2 750A                    	jne	short skip_cmmt
 40806                                  
 40807 000038A4 268A4401                	mov	al,[es:si+1]
 40808                                  	
 40809 000038A8 3806[5303]              	cmp	[cmmt2],al
 40810                                  	;cmp	[cs:cmmt2],al
 40811 000038AC 750B                    	jne	short no_commt
 40812                                  skip_cmmt:
 40813 000038AE E3C0                    	jcxz	noget		; get out of organize routine.
 40814 000038B0 268A04                  	mov	al,[es:si]
 40815 000038B3 46                      	inc	si
 40816 000038B4 49                      	dec	cx
 40817 000038B5 3C0A                    	cmp	al,lf		; line feed?
 40818 000038B7 75F5                    	jne	short skip_cmmt
 40819                                  no_commt:
 40820 000038B9 C3                      	retn
 40821                                  
 40822                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 40823                                  ; (SYSINIT:42C8h)
 40824                                  
 40825                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 40826                                  ;%if 0
 40827                                  
 40828                                  ;ifdef	MULTI_CONFIG
 40829                                  
 40830                                  ;----------------------------------------------------------------------------
 40831                                  ;
 40832                                  ;   kbd_read: wait for keystroke
 40833                                  ;
 40834                                  ;   INPUT
 40835                                  ;       DS == CS == sysinitseg
 40836                                  ;
 40837                                  ;   OUTPUT
 40838                                  ;       Carry SET to clean boot, CLEAR otherwise
 40839                                  ;
 40840                                  ;   OTHER REGS USED
 40841                                  ;       All
 40842                                  ;
 40843                                  ;   HISTORY
 40844                                  ;       Created 16-Nov-1992 by JeffPar
 40845                                  ;
 40846                                  ;----------------------------------------------------------------------------
 40847                                  
 40848                                  kbd_read:
 40849 000038BA F606[1747]02                    test    byte [bDisableUI],2
 40850 000038BF 7520                            jnz     short kbd_nodelay
 40851                                  
 40852 000038C1 1E                              push    ds              ; the bios timer tick count is incremented
 40853 000038C2 29C0                            sub     ax,ax           ; 18.2 times per second;
 40854 000038C4 8ED8                            mov     ds,ax           ; watch the timer tick count for 37 transitions
 40855                                  	;mov	dx,[046Ch]	; get initial value
 40856                                  kbd_loop:
 40857 000038C6 B401                            mov     ah,1            ;
 40858 000038C8 CD16                            int     16h             ; peek the keyboard
 40859 000038CA 7514                            jnz	short kbd_loopdone ; something's there, get out
 40860 000038CC B402                            mov     ah,2            ; peek the shift states
 40861 000038CE CD16                            int     16h             ;
 40862 000038D0 A803                            test    al,03h          ; either right or left shift key bits set?
 40863 000038D2 750C                            jnz	short kbd_loopdone ; yes
 40864 000038D4 A16C04                          mov     ax,[046Ch]	;
 40865                                  	;sub	ax,dx           ; get difference
 40866                                  	; 15/04/2019 - Retro DOS v4.0
 40867 000038D7 2E2B06[8603]            	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 40868                                  
 40869 000038DC 3C25                    	cmp     al,37           ; reached limit?  ; (2 seconds)
 40870 000038DE 72E6                            jb	short kbd_loop	; not yet
 40871                                  kbd_loopdone:
 40872 000038E0 1F                              pop     ds              ; delay complete!
 40873                                  kbd_nodelay:
 40874 000038E1 29DB                            sub     bx,bx           ; assume clean boot
 40875 000038E3 B402                            mov     ah,2            ; peek the shift states
 40876 000038E5 CD16                            int     16h             ;
 40877 000038E7 A803                            test    al,03h          ; either right or left shift key bits set?
 40878 000038E9 7407                            jz      short kbd_notshift ; no
 40879 000038EB 43                              inc     bx              ; yes
 40880 000038EC 43                              inc     bx
 40881                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 40882 000038ED 800E[1B47]04            	or	byte [bQueryOpt],4
 40883                                  kbd_notshift:                   ;
 40884 000038F2 B401                            mov     ah,1            ; peek the keyboard
 40885 000038F4 CD16                            int     16h             ;
 40886 000038F6 743E                            jz	short kbd_test	; no key present
 40887 000038F8 08C0                            or      al,al           ; is it a function key?
 40888 000038FA 753A                            jnz	short kbd_test	; no
 40889                                  
 40890                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 40891 000038FC 80FC62                          cmp     ah,62h          ; CTRL F5
 40892 000038FF 7405                            je	short kbd_cfg_bypass
 40893                                  	
 40894 00003901 80FC3F                          cmp     ah,3Fh          ; F5 function key?
 40895 00003904 750D                            jne	short kbd_notf5	; no
 40896                                  kbd_cfg_bypass:
 40897 00003906 BA[524C]                        mov     dx,_$CleanMsg
 40898 00003909 E8DD0B                          call    print
 40899                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 40900 0000390C 800E[1B47]04            	or	byte [bQueryOpt],4 
 40901 00003911 EB16                            jmp     short kbd_eat   ; yes, clean boot selected
 40902                                  kbd_notf5:
 40903                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 40904 00003913 80FC65                          cmp     ah,65h          ; CTRL F8
 40905 00003916 7405                            je	short kbd_cfg_confirm
 40906                                  
 40907 00003918 80FC42                          cmp     ah,42h          ; F8 function key?
 40908 0000391B 7523                            jne	short kbd_exit	; no
 40909                                  kbd_cfg_confirm:
 40910 0000391D BA[904C]                        mov     dx,_$InterMsg
 40911 00003920 E8C60B                          call    print           ;
 40912 00003923 B301                            mov     bl,1            ; yes, interactive-boot option enabled
 40913 00003925 881E[1B47]                      mov     [bQueryOpt],bl  ; change default setting
 40914                                  kbd_eat:                        ;
 40915 00003929 B400                            mov     ah,0            ;
 40916 0000392B CD16                            int     16h             ; eat the key we assumed was a signal
 40917 0000392D C606[2147]FF                    mov	byte [secElapsed],-1
 40918 00003932 09DB                            or      bx,bx           ;
 40919 00003934 7405                            jz	short kbd_clean	;
 40920                                  kbd_test:                       ;
 40921 00003936 80FB02                          cmp     bl,2            ;
 40922 00003939 7205                            jb	short kbd_exit	;
 40923                                  kbd_clean:                      ;
 40924 0000393B E86E08                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 40925 0000393E F9                              stc                     ; set carry to indicate abort
 40926 0000393F C3                              retn			;
 40927                                  kbd_exit:                       ;
 40928 00003940 F8                              clc                     ; clear carry to indicate success
 40929 00003941 C3                              retn			;
 40930                                  
 40931                                  ;----------------------------------------------------------------------------
 40932                                  ;
 40933                                  ;   set_numlock: set numlock LED
 40934                                  ;
 40935                                  ;   INPUT
 40936                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 40937                                  ;
 40938                                  ;   OUTPUT
 40939                                  ;       None
 40940                                  ;
 40941                                  ;   OTHER REGS USED
 40942                                  ;       None
 40943                                  ;
 40944                                  ;   HISTORY
 40945                                  ;       Created 16-Nov-1992 by JeffPar
 40946                                  ;
 40947                                  ;----------------------------------------------------------------------------
 40948                                  
 40949                                  	; 04/01/2023 - Retro DOS v4.2
 40950                                  
 40951                                  set_numlock:
 40952                                          ; 04/01/2023
 40953                                  	;push	ax
 40954 00003942 1E                              push    ds
 40955 00003943 29C0                            sub     ax,ax
 40956 00003945 8ED8                            mov     ds,ax
 40957 00003947 268B04                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 40958 0000394A 2E3B06[1A4C]                    cmp     ax,[cs:OnOff+2]	; should we turn it off?
 40959 0000394F 7507                            jne	short not_off	; no
 40960 00003951 80261704DF                      and     byte [0417h],~20h ; 0DFh
 40961 00003956 EB0D                            jmp     short set_done
 40962                                  not_off:
 40963 00003958 2E3B06[184C]                    cmp     ax,[cs:OnOff]	; should we turn it on?
 40964 0000395D F9                              stc
 40965 0000395E 7505                            jne	short set_done	; no
 40966 00003960 800E170420                      or      byte [0417h],20h
 40967                                  set_done:
 40968 00003965 1F                              pop     ds
 40969                                  	; 04/01/2023
 40970                                  	;pop	ax
 40971 00003966 C3                              retn
 40972                                  
 40973                                  ; 16/04/2019 - Retro DOS v4.0
 40974                                  
 40975                                  ;----------------------------------------------------------------------------
 40976                                  ;
 40977                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 40978                                  ;
 40979                                  ;   INPUT
 40980                                  ;       CX == "organized" config.sys memory image length
 40981                                  ;    ES:SI -> "organized" config.sys memory image
 40982                                  ;       DS == CS == sysinitseg
 40983                                  ;
 40984                                  ;   OUTPUT
 40985                                  ;       Same as above; the idea is that menu_check simply transforms
 40986                                  ;       a block-structured config.sys image into a conventional image,
 40987                                  ;       based on the user's block selection and any other boot-time options
 40988                                  ;       the user may have employed...
 40989                                  ;
 40990                                  ;   OTHER REGS USED
 40991                                  ;       All
 40992                                  ;
 40993                                  ;   NOTES
 40994                                  ;       [count] and [org_count] are set to the new config.sys image length
 40995                                  ;
 40996                                  ;   HISTORY
 40997                                  ;       Created 16-Mar-1992 by JeffPar
 40998                                  ;
 40999                                  ;----------------------------------------------------------------------------
 41000                                  
 41001                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41002                                  	; (SYSINIT:4378h)
 41003                                  
 41004                                  menu_check:
 41005                                  
 41006                                  ;   Search for SWITCHES, determine if /N or /F are present; if so, then
 41007                                  ;   disable clean/interactive boot options
 41008                                  
 41009 00003967 51                              push    cx              ;
 41010 00003968 56                              push    si              ;
 41011 00003969 29DB                            sub     bx,bx           ; remains ZERO until first block
 41012                                  swchk_loop:                     ;
 41013 0000396B E83507                          call    get_char        ; get first char of current line
 41014 0000396E 724C                            jc	short swchk_end	; hit eof
 41015 00003970 3C5B                            cmp     al,CONFIG_BEGIN ; '['
 41016 00003972 7503                            jne	short swchk_next1 ;
 41017 00003974 43                              inc     bx              ; remember that we've seen a block
 41018 00003975 EB40                            jmp     short swchk_nextline
 41019                                  swchk_next1:                    ;
 41020 00003977 3C4E                            cmp     al,CONFIG_NUMLOCK
 41021 00003979 750E                            jne	short swchk_next2 ;
 41022 0000397B 09DB                            or      bx,bx           ; only do NUMLOCK commands that exist
 41023 0000397D 7538                            jnz	short swchk_nextline ; before the first block
 41024 0000397F E8C0FF                          call    set_numlock     ; REM it out so we don't act on it later, too
 41025 00003982 26C644FF30                      mov     byte [es:si-1],CONFIG_REM
 41026 00003987 EB2E                            jmp     short swchk_nextline
 41027                                  swchk_next2:                    ;
 41028 00003989 3C31                            cmp     al,CONFIG_SWITCHES
 41029 0000398B 752A                            jne	short swchk_nextline ; this line ain't it
 41030                                  swchk_scan:                     ;
 41031 0000398D E81307                          call    get_char        ; look for /N or /F
 41032                                  swchk_scan1:                    ;
 41033 00003990 3C0A                            cmp     al,LF           ; end of line?
 41034 00003992 7423                            je	short swchk_nextline ; yes
 41035 00003994 3C2F                            cmp     al,'/'          ; switch-char?
 41036 00003996 75F5                            jne	short swchk_scan ; no
 41037 00003998 E80807                          call    get_char        ;
 41038 0000399B 24DF                            and     al,~20h ; 0DFh	; convert to upper case
 41039 0000399D 3A06[CC1E]                      cmp     al,[swit_n+1]	; 'N'
 41040 000039A1 7507                            jne	short swchk_scan2 ; no
 41041 000039A3 800E[1747]01                    or      byte [bDisableUI],1
 41042 000039A8 EBE3                            jmp	short swchk_scan ; continue looking for switches of interest
 41043                                  swchk_scan2:                    ;
 41044 000039AA 3A06[D81E]                      cmp     al,[swit_f+1]	; 'F'
 41045 000039AE 75E0                            jne	short swchk_scan1 ; no
 41046 000039B0 800E[1747]02                    or      byte [bDisableUI],2
 41047 000039B5 EBD6                            jmp     short swchk_scan ; continue looking for switches of interest
 41048                                  swchk_nextline:                 ;
 41049 000039B7 E8C306                          call    skip_opt_line   ;
 41050 000039BA EBAF                            jmp     short swchk_loop ;
 41051                                  swchk_end:                      ;
 41052 000039BC 5E                              pop     si              ;
 41053 000039BD 59                              pop     cx              ;
 41054                                  
 41055                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 41056                                  ;   the DisableUI flag is still clear
 41057                                  
 41058 000039BE F606[1747]01                    test    byte [bDisableUI],1
 41059 000039C3 7508                            jnz	short menu_search
 41060                                  ;
 41061                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 41062                                  ;   there is anything at all in the keyboard buffer
 41063                                  ;
 41064 000039C5 E8F2FE                          call    kbd_read
 41065 000039C8 7303                            jnc	short menu_search
 41066 000039CA E9EE01                          jmp	menu_abort
 41067                                  
 41068                                  ;   Search for MENU block; it is allowed to be anywhere in config.sys
 41069                                  
 41070                                  menu_search:
 41071 000039CD 29DB                            sub     bx,bx           ; if no MENU, default to zero for no_selection
 41072 000039CF BF[5C47]                        mov     di,szMenu	;
 41073 000039D2 E80304                          call    find_block      ; find the MENU block
 41074 000039D5 7337                            jnc	short menu_found ;
 41075 000039D7 C606[5447]00                    mov     byte [szBoot],0
 41076 000039DC E90C02                          jmp	no_selection ; not found
 41077                                  
 41078                                  ;   Process the requested menu color(s)
 41079                                  
 41080                                  menu_color:
 41081 000039DF 51                      	push	cx              ;
 41082 000039E0 52                      	push	dx              ;
 41083                                  	;;mov	dx,0007h        ; default color setting
 41084                                  	; 10/09/2023
 41085                                  	;mov	dl,7 ; !*!
 41086 000039E1 E89E06                  	call	get_number	; get first number
 41087 000039E4 80E30F                  	and	bl,0Fh  ; !**!	; first # is foreground color (for low nibble)
 41088 000039E7 88DD                    	mov	ch,bl           ; save it in CH
 41089                                  	; 01/08/2023 - Retro DOS v4.2 IO.SYS (optimization) by Erdogan Tan 
 41090                                  	; (high nibble of dl is 0)
 41091                                  	;and	dl,0F0h	; !*!	; (low nibble of dl would be zero)
 41092                                  	;or	dl,bl		; (low nibble of dl is 7) ! 14/08/2023
 41093 000039E9 88DA                    	mov	dl,bl	; 14/08/2023
 41094 000039EB E83108                  	call	delim           ; did we hit a delimiter
 41095 000039EE 750E                    	jne	short check_color ; no, all done
 41096 000039F0 E88F06                  	call	get_number	; get next number
 41097 000039F3 80E30F                  	and	bl,0Fh		; second # is background color (for high nibble)
 41098 000039F6 88DE                    	mov	dh,bl           ; save it in DH
 41099                                  	; 10/09/2023
 41100                                  	;and	dl,0Fh	; !**!	;
 41101 000039F8 B104                    	mov	cl,4            ;
 41102 000039FA D2E3                    	shl	bl,cl           ;
 41103 000039FC 08DA                    	or	dl,bl           ;
 41104                                  check_color:
 41105 000039FE 38F5                    	cmp	ch,dh           ; are foreground/background the same?
 41106 00003A00 7503                    	jne	short set_color	; no
 41107 00003A02 80F208                  	xor	dl,08h          ; yes, so modify the fgnd intensity
 41108                                  set_color:
 41109 00003A05 8816[1247]              	mov	[bMenuColor],dl ;
 41110 00003A09 5A                      	pop	dx              ;
 41111 00003A0A 59                      	pop	cx              ;
 41112 00003A0B E9A900                  	jmp	menu_nextitem
 41113                                  
 41114                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 41115                                  ;   above is there simply to alleviate short jump problems)
 41116                                  
 41117                                  menu_found:
 41118 00003A0E C606[1C47]01                    mov     byte [bDefBlock],1
 41119                                          ;mov	word [offDefBlock],0
 41120 00003A13 C606[2047]FF                    mov     byte [secTimeOut],-1
 41121 00003A18 8026[1B47]FD                    and     byte [bQueryOpt],~2 ; 0FDh
 41122                                  	; 10/09/2023
 41123 00003A1D 29D2                    	sub	dx,dx
 41124 00003A1F 8916[1E47]              	mov	[offDefBlock],dx ; 0
 41125                                  
 41126 00003A23 E85706                          call    skip_opt_line   ; skip to next line
 41127                                  	; 10/09/2023
 41128                                  	;sub	dx,dx		; initialize total block count (0 => none yet)
 41129                                  
 41130                                  ;   Process the menu block now
 41131                                  
 41132                                  menu_process:
 41133 00003A26 E87A06                          call    get_char        ; get first char of current line
 41134 00003A29 722E                            jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 41135 00003A2B 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 41136 00003A2D 3C5B                            cmp     al,CONFIG_BEGIN ; BEGIN implies END
 41137 00003A2F 7428                            je	short to_menu_getdefault
 41138 00003A31 3C4F                            cmp     al,CONFIG_SUBMENU
 41139 00003A33 744D                            je	short menu_item	; go process sub-menu
 41140 00003A35 3C45                            cmp     al,CONFIG_MENUITEM
 41141 00003A37 7449                            je	short menu_item	; go process menu item
 41142 00003A39 3C41                            cmp     al,CONFIG_MENUDEFAULT
 41143 00003A3B 741E                            je	short menu_default ; go process menu default
 41144 00003A3D 3C52                            cmp     al,CONFIG_MENUCOLOR
 41145 00003A3F 749E                            je	short menu_color ; go process menu color
 41146 00003A41 3C4E                            cmp     al,CONFIG_NUMLOCK
 41147 00003A43 740F                            je	short menu_numlock ;
 41148 00003A45 3C30                            cmp     al,CONFIG_REM   ; allow remarks in menu block
 41149 00003A47 746E                            je	short menu_nextitem ;
 41150 00003A49 E8C307                          call    any_delim       ; allow blank lines and such
 41151 00003A4C 7469                            je	short menu_nextitem ;
 41152 00003A4E F9                              stc                     ;
 41153 00003A4F E82607                          call    print_error     ; non-MENU command!
 41154 00003A52 EB63                            jmp     short menu_nextitem
 41155                                  menu_numlock:
 41156 00003A54 E8EBFE                          call    set_numlock
 41157 00003A57 EB5E                            jmp     short menu_nextitem
 41158                                  to_menu_getdefault:
 41159 00003A59 EB62                            jmp     short menu_getdefault
 41160                                  
 41161                                  ;   Save the offset of the default block name, we'll need it later
 41162                                  
 41163                                  menu_default:
 41164 00003A5B 8936[1E47]                      mov     [offDefBlock],si; save address of default block name
 41165 00003A5F 803E[2147]00                    cmp     byte [secElapsed],0
 41166 00003A64 751A                            jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 41167 00003A66 E8EA05                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 41168 00003A69 724C                            jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 41169 00003A6B E8FB05                          call    skip_delim      ; something is typed
 41170 00003A6E 7247                            jc	short menu_nextitem ;
 41171 00003A70 89DE                            mov     si,bx           ;
 41172 00003A72 E80D06                          call    get_number      ; get number (of seconds for timeout)
 41173 00003A75 80FB5A                          cmp     bl,90           ; limit it to a reasonable number
 41174                                  	;jb	short timeout_ok ; (besides, 99 is the largest # my simple
 41175 00003A78 7602                            jna	short timeout_ok ; 01/08/2023
 41176 00003A7A B35A                    	mov     bl,90           ;  display function can handle)
 41177                                  timeout_ok:                    ;
 41178 00003A7C 881E[2047]                      mov     [secTimeOut],bl ;
 41179                                  timeout_skip:
 41180 00003A80 EB35                            jmp     short menu_nextitem
 41181                                  
 41182                                  ;   Verify that this is a valid menu item by searching for the named block
 41183                                  
 41184                                  menu_item:
 41185                                  	;cmp	dl,9	; 04/01/2023
 41186 00003A82 80FA09                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 41187 00003A85 7330                            jae	short menu_nextitem ;
 41188 00003A87 89F7                            mov     di,si           ; DS:DI -> block name to search for
 41189 00003A89 E83303                          call    srch_block      ;
 41190 00003A8C 7406                            je	short menu_itemfound ;
 41191 00003A8E F9                              stc                     ;
 41192 00003A8F E8E606                          call    print_error     ; print error and pause
 41193 00003A92 EB23                            jmp     short menu_nextitem ; if not found, ignore this menu item
 41194                                  
 41195                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 41196                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 41197                                  ;   and CX are unmodified
 41198                                  
 41199                                  menu_itemfound:
 41200 00003A94 42                              inc     dx              ; otherwise, increment total block count
 41201 00003A95 89D3                            mov     bx,dx           ; and use it to index the arrays of offsets
 41202 00003A97 8887[2247]                      mov	[abBlockType+bx],al
 41203 00003A9B 01DB                            add     bx,bx           ; of recorded block names and descriptions
 41204                                  
 41205                                  ;   There should be a description immediately following the block name on
 41206                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 41207                                  ;   description...
 41208                                  
 41209 00003A9D 89B7[2C47]                      mov     [aoffBlockName+bx],si
 41210 00003AA1 89B7[4047]                      mov     [aoffBlockDesc+bx],si
 41211 00003AA5 89DF                            mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 41212 00003AA7 E8A905                          call    skip_token      ;
 41213 00003AAA 720B                            jc	short menu_nextitem ; hit eol/eof
 41214 00003AAC E8BA05                          call    skip_delim      ;
 41215 00003AAF 7206                            jc	short menu_nextitem ; hit eol/eof
 41216 00003AB1 87DF                            xchg    bx,di           ;
 41217 00003AB3 89BF[4047]                      mov     [aoffBlockDesc+bx],di
 41218                                  
 41219                                  menu_nextitem:
 41220 00003AB7 E8C305                          call    skip_opt_line   ;
 41221 00003ABA E969FF                          jmp     menu_process    ; go back for more lines
 41222                                  
 41223                                  ;   Display menu items now, after determining which one is default
 41224                                  
 41225                                  menu_getdefault:
 41226 00003ABD 08D2                            or      dl,dl           ; where there any valid blocks at all?
 41227 00003ABF 7505                            jnz	short menu_valid ; yes
 41228 00003AC1 29DB                            sub     bx,bx           ; no, so force autoselect of 0
 41229 00003AC3 E9ED00                          jmp     menu_autoselect ; (meaning: process common blocks only)
 41230                                  menu_valid:
 41231 00003AC6 29DB                            sub     bx,bx           ;
 41232 00003AC8 8816[1D47]                      mov     [bMaxBlock],dl  ; first, record how many blocks we found
 41233 00003ACC 8B3E[1E47]                      mov     di,[offDefBlock];
 41234 00003AD0 09FF                            or      di,di           ; does a default block exist?
 41235 00003AD2 741C                            jz	short menu_nodefault ; no
 41236 00003AD4 43                              inc     bx              ; yes, walk name table, looking for default
 41237                                  menu_chkdefault:
 41238 00003AD5 53                              push    bx              ;
 41239 00003AD6 01DB                            add     bx,bx           ;
 41240 00003AD8 8BB7[2C47]                      mov     si,[aoffBlockName+bx]
 41241 00003ADC B98000                          mov     cx,128          ; arbitrary maximum length of a name
 41242 00003ADF 1E                              push    ds              ;
 41243 00003AE0 06                              push    es              ;
 41244 00003AE1 1F                              pop     ds              ;
 41245 00003AE2 E81A03                          call    comp_names      ; is this block the same as the default?
 41246 00003AE5 1F                              pop     ds              ;
 41247 00003AE6 5B                              pop     bx              ;
 41248 00003AE7 7409                            je	short menu_setdefault ; yes
 41249 00003AE9 43                              inc     bx              ;
 41250 00003AEA 3A1E[1D47]                      cmp     bl,[bMaxBlock]  ; all done searching?
 41251 00003AEE 76E5                            jbe	short menu_chkdefault ; not yet
 41252                                  menu_nodefault:
 41253 00003AF0 B301                            mov     bl,1            ; if no default, force default to #1
 41254                                  menu_setdefault:
 41255 00003AF2 881E[1C47]                      mov     [bDefBlock],bl  ; yes, this will be the initial current block
 41256                                  
 41257                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 41258                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 41259                                  ;   supposed to skip menu display and run with the specified default block;
 41260                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 41261                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 41262                                  ;   with no timeout)
 41263                                  
 41264 00003AF6 803E[2047]00                    cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 41265 00003AFB 750A                            jne	short menu_display ; no
 41266 00003AFD F606[1B47]01                    test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 41267 00003B02 7503                            jnz	short menu_display ; yes, so *don't* assume default after all
 41268 00003B04 E9C700                          jmp     not_topmenu	;
 41269                                  
 41270                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 41271                                  
 41272                                  menu_display:
 41273 00003B07 B40F                            mov     ah,0Fh          ; get current video mode
 41274 00003B09 CD10                            int     10h             ;
 41275 00003B0B B400                            mov     ah,00h          ; just re-select that mode
 41276 00003B0D CD10                            int     10h             ;
 41277 00003B0F 06                              push    es              ;
 41278 00003B10 B84000                          mov     ax,40h          ; reach down into the ROM BIOS data area
 41279 00003B13 8EC0                            mov     es,ax           ; and save the current (default) video page
 41280 00003B15 26A14E00                        mov     ax,[es:004Eh]   ; start address and page #, in case the
 41281 00003B19 A3[1947]                        mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 41282 00003B1C 26A06200                        mov     al,[es:0062h]   ;
 41283 00003B20 A2[1847]                        mov     [bCRTPage],al   ;
 41284 00003B23 A1[1347]                        mov     ax,[bMenuPage]	; select new page for menu
 41285 00003B26 CD10                            int     10h             ;
 41286 00003B28 B80006                          mov     ax,0600h        ; clear entire screen
 41287 00003B2B 8A3E[1247]                      mov     bh,[bMenuColor] ; using this color
 41288 00003B2F 29C9                            sub     cx,cx           ; upper left row/col
 41289                                          ;mov	dl,[es:CRT_Cols] 
 41290 00003B31 268A164A00                      mov	dl,[es:4Ah]
 41291 00003B36 FECA                    	dec     dl              ;
 41292                                          ;mov	dh,[es:CRT_Rows];
 41293 00003B38 268A368400                      mov	dh,[es:84h]
 41294 00003B3D 08F6                    	or      dh,dh           ; # of rows valid?
 41295 00003B3F 7504                            jnz	short menu_clear ; hopefully
 41296 00003B41 8A36[1647]                      mov     dh,[bLastRow]   ; no, use a default
 41297                                  menu_clear:
 41298 00003B45 CD10                            int     10h             ; clear the screen using the req. attribute
 41299 00003B47 07                              pop     es              ;
 41300 00003B48 8836[1647]                      mov     [bLastRow],dh   ; save DH
 41301 00003B4C BA[CD4C]                        mov     dx,_$MenuHeader
 41302 00003B4F E89709                          call    print           ; cursor now on row 3 (numbered from 0)
 41303                                  
 41304 00003B52 F606[1747]01                    test    byte [bDisableUI],1
 41305 00003B57 751F                            jnz     short menu_nostatus
 41306 00003B59 8A3E[1347]                      mov     bh,[bMenuPage]  ;
 41307 00003B5D 8A36[1647]                      mov     dh,[bLastRow]   ; restore DH
 41308 00003B61 B200                            mov     dl,0            ; print the status line on row DH, col 0,
 41309 00003B63 B402                            mov     ah,02h          ; now that we can trash the cursor position
 41310 00003B65 CD10                            int     10h             ;
 41311 00003B67 BA[194D]                        mov     dx,_$StatusLine
 41312 00003B6A E87C09                          call    print           ;
 41313 00003B6D B403                            mov     ah,3            ; get cursor position
 41314 00003B6F CD10                            int     10h             ;
 41315 00003B71 80EA02                          sub     dl,2            ;
 41316 00003B74 8816[1547]                      mov     [bLastCol],dl   ; save column where status char will go
 41317                                  
 41318                                  menu_nostatus:
 41319 00003B78 BB0100                          mov     bx,1            ; now prepare to display all the menu items
 41320                                  menu_disploop:
 41321 00003B7B E8B002                          call    print_item	; print item #BL
 41322 00003B7E 43                              inc     bx              ; why "inc bx"? because it's a 1-byte opcode
 41323 00003B7F 3A1E[1D47]                      cmp     bl,[bMaxBlock]  ; all done?
 41324 00003B83 76F6                            jbe	short menu_disploop ; not yet
 41325                                  
 41326                                  ;   Set cursor position to just below the menu items
 41327                                  
 41328 00003B85 B200                            mov     dl,0            ; select column
 41329 00003B87 88DE                            mov     dh,bl           ;
 41330 00003B89 80C604                          add     dh,4            ; select row below menu
 41331 00003B8C 8A3E[1347]                      mov     bh,[bMenuPage]  ;
 41332 00003B90 B402                            mov     ah,02h          ; set cursor position beneath the block list
 41333 00003B92 CD10                            int     10h             ;
 41334                                  
 41335 00003B94 BA[064D]                        mov     dx,_$MenuPrmpt
 41336 00003B97 E84F09                          call    print           ;
 41337 00003B9A E82903                          call    select_item     ; make a selection, return # in BX
 41338 00003B9D BA[C64A]                        mov     dx,crlfm	
 41339 00003BA0 E84609                          call    print           ;
 41340 00003BA3 FF36[1747]                      push    word [bDisableUI]
 41341 00003BA7 800E[1747]01                    or      byte [bDisableUI],1
 41342 00003BAC E86704                          call    show_status     ; clear the status line now
 41343 00003BAF 8F06[1747]                      pop     word [bDisableUI]
 41344                                  
 41345                                  ;   Now begins the "re-organization" process...
 41346                                  
 41347                                  menu_autoselect:
 41348 00003BB3 83FBFF                          cmp     bx,-1 ; 0FFFFh	; clean boot requested?
 41349 00003BB6 7508                            jne	short normal_boot ; no
 41350 00003BB8 E8F105                          call    disable_autoexec; basically, add a /D to the command.com line
 41351                                  menu_abort:
 41352 00003BBB 29C9                            sub     cx,cx           ; then immediately exit with 0 config.sys image
 41353 00003BBD E9E400                          jmp	menu_exit	;
 41354                                  
 41355                                  normal_boot:
 41356 00003BC0 83FBFE                          cmp     bx,-2 ; 0FFFEh	; back to top-level menu?
 41357 00003BC3 7509                            jne	short not_topmenu ; no
 41358 00003BC5 8B0E[5603]                      mov     cx,[count]      ; yes, start all over
 41359 00003BC9 29F6                            sub     si,si           ;
 41360 00003BCB E9FFFD                          jmp     menu_search
 41361                                  
 41362                                  not_topmenu:
 41363 00003BCE 80BF[2247]4F                    cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 41364 00003BD3 7510                            jne	short not_submenu
 41365 00003BD5 01DB                            add     bx,bx           ;
 41366 00003BD7 8BBF[2C47]                      mov     di,[aoffBlockName+bx]
 41367 00003BDB E8E101                          call    srch_block      ; THIS CANNOT FAIL!
 41368 00003BDE 89FE                            mov     si,di           ;
 41369 00003BE0 89D9                            mov     cx,bx           ; ES:SI and CX are ready for another round
 41370 00003BE2 E929FE                          jmp     menu_found
 41371                                  
 41372                                  not_submenu:
 41373 00003BE5 01DB                            add     bx,bx           ; get BX -> name of selected block
 41374 00003BE7 8B9F[2C47]                      mov     bx,[aoffBlockName+bx]
 41375                                  
 41376                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 41377                                  ;   the offset relative to ES of the block name to be processed (along with
 41378                                  ;   all the "common" lines of course)
 41379                                  
 41380                                  no_selection:
 41381 00003BEB 891E[1E47]                      mov     [offDefBlock],bx; save selection
 41382 00003BEF 8B0E[5603]                      mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 41383 00003BF3 29F6                            sub     si,si           ;
 41384 00003BF5 1E                              push    ds              ;
 41385 00003BF6 8E1E[C514]                      mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 41386 00003BFA 29FF                            sub     di,di           ;
 41387                                  
 41388                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 41389                                  ;
 41390                                  ;   Work our way through the config.sys image again, this time copying
 41391                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 41392                                  ;   within the requested block. Lines inside INCLUDEd blocks are transparently
 41393                                  ;   copied by copy_block in a recursive fashion; the amount of recursion is
 41394                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 41395                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 41396                                  ;
 41397                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 41398                                  ;   stack we're running on, then we should check it inside copy_block
 41399                                  
 41400                                  copyblock_loop:
 41401 00003BFC 53                              push    bx              ; save selected block name
 41402 00003BFD E82F01                          call    copy_block      ; process (named or common) block
 41403 00003C00 5B                              pop     bx              ;
 41404 00003C01 7232                            jc	short move_config ; hit eof
 41405                                  
 41406                                  ;   copy_block can only return for two reasons: it hit eof or a new block
 41407                                  
 41408                                  copyblock_begin:
 41409                                  
 41410                                  ; 10/09/2023
 41411                                  %if 0
 41412                                          push    ax              ;
 41413                                          push    cx              ;
 41414                                          push    si              ;
 41415                                          push    di              ; always do "common" blocks
 41416                                          mov     di,szCommon
 41417                                          push    ds              ;
 41418                                          push    cs              ;
 41419                                          pop     ds              ;
 41420                                          call    comp_names      ;
 41421                                          pop     ds              ;
 41422                                          pop     di              ;
 41423                                          pop     si              ;
 41424                                          pop     cx              ;
 41425                                          pop     ax              ;
 41426                                          je	short copyblock_check
 41427                                  %endif
 41428                                  	; 10/09/2023
 41429 00003C03 57                      	push	di
 41430 00003C04 BF[6147]                	mov	di,szCommon	; always do "common" blocks
 41431 00003C07 E81602                  	call	comp_names_x	; (comp_names_safe)
 41432 00003C0A 5F                      	pop	di
 41433 00003C0B 740F                    	je	short copyblock_check
 41434                                  
 41435 00003C0D 09DB                            or      bx,bx           ; is there a block name to check?
 41436 00003C0F 7414                            jz	short copyblock_skip ; no
 41437 00003C11 57                              push    di              ;
 41438 00003C12 89DF                            mov     di,bx           ; check block against given block name
 41439 00003C14 1E                              push    ds              ;
 41440 00003C15 06                              push    es              ;
 41441 00003C16 1F                              pop     ds              ;
 41442 00003C17 E8E501                          call    comp_names      ; is this the block we really want to do?
 41443 00003C1A 1F                              pop     ds              ;
 41444 00003C1B 5F                              pop     di              ;
 41445                                  copyblock_check:
 41446 00003C1C 7217                            jc	short move_config ; hit eof
 41447 00003C1E 7505                            jne	short copyblock_skip ;
 41448 00003C20 E85A04                          call    skip_opt_line   ;
 41449 00003C23 EBD7                            jmp	short copyblock_loop
 41450                                  
 41451                                  copyblock_skip:                 ;
 41452 00003C25 E85504                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 41453 00003C28 E87804                          call    get_char        ;
 41454 00003C2B 7208                            jc	short move_config ; hit eof
 41455 00003C2D 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 41456 00003C2F 3C5B                            cmp     al,CONFIG_BEGIN ;
 41457 00003C31 74D0                            je	short copyblock_begin
 41458 00003C33 EBF0                            jmp     short copyblock_skip ; anything else is just skipped
 41459                                  ;
 41460                                  ;   To create as little risk to the rest of SysInit as little as possible,
 41461                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 41462                                  ;   copy the new config.sys image to "confbot"
 41463                                  ;
 41464                                  move_config:
 41465 00003C35 89F9                            mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 41466 00003C37 51                              push    cx              ;
 41467                                  ;
 41468                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 41469                                  ;   since the configuration name only currently exists in the "confbot" area
 41470                                  ;
 41471                                   	;mov	cx,7
 41472 00003C38 B90700                  	mov     cx,szMenu-szBoot-1
 41473 00003C3B BE[5447]                        mov     si,szBoot	; first copy the CONFIG= part
 41474 00003C3E 47                              inc     di              ; skip a byte, in case absolutely nothing
 41475                                                                  ; was copied to the workspace, because we always
 41476                                                                  ; zero the first byte of the workspace (below)
 41477                                  copy_boot: 
 41478                                  	;lods    byte ptr cs:[si];
 41479 00003C3F 2E                              cs
 41480 00003C40 AC                      	lodsb
 41481 00003C41 8805                    	mov     [di],al         ;
 41482 00003C43 47                              inc     di              ;
 41483 00003C44 E2F9                            loop    copy_boot       ;
 41484                                  
 41485 00003C46 06                              push    es              ; then copy the configuration name
 41486                                          ;mov	cx,128-7	; put an upper limit on the name, to be safe
 41487                                  	; 04/01/2023
 41488 00003C47 B179                    	mov	cl,128-7
 41489 00003C49 2E8B36[1E47]            	mov     si,[cs:offDefBlock]; ES:SI -> default block name
 41490 00003C4E 09F6                            or      si,si           ; valid?
 41491 00003C50 7505                            jnz	short l1	; yes
 41492 00003C52 0E                              push    cs              ;
 41493 00003C53 07                              pop     es              ;
 41494 00003C54 BE[6147]                        mov     si,szCommon
 41495 00003C57 268A04                  l1:     mov     al,[es:si]      ;
 41496 00003C5A E8B205                          call    any_delim       ;
 41497 00003C5D 7406                            je	short l2	;
 41498 00003C5F 8805                            mov     [di],al         ;
 41499 00003C61 46                              inc     si              ;
 41500 00003C62 47                              inc     di              ;
 41501 00003C63 E2F2                            loop    l1              ;
 41502 00003C65 C6050A                  l2:     mov     byte [di],lf	; terminate the configuration string
 41503 00003C68 07                              pop     es              ;
 41504                                  
 41505                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 41506                                  
 41507 00003C69 29FF                            sub     di,di           ;
 41508 00003C6B 2E893E[C314]                    mov     [cs:config_envlen],di
 41509 00003C70 29F6                            sub     si,si           ;
 41510 00003C72 59                              pop     cx              ; recover the size of "config_wrkseg"
 41511                                  
 41512 00003C73 51                              push    cx              ;
 41513 00003C74 F3A4                            rep     movsb           ; moved!
 41514 00003C76 59                              pop     cx              ;
 41515 00003C77 8CD8                            mov     ax,ds           ;
 41516 00003C79 1F                              pop     ds              ;
 41517                                  
 41518                                  ;   Now that the config_wrkseg is available once again, we shall
 41519                                  ;   use it to create an environment. The first thing to go in will be
 41520                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 41521                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 41522                                  ;   is empty.
 41523                                  
 41524 00003C7A 06                              push    es              ;
 41525 00003C7B 8EC0                            mov     es,ax           ;
 41526 00003C7D 46                              inc     si              ; ES:SI -> "CONFIG=configuration"
 41527 00003C7E 26C606000000                    mov     byte [es:0],0	;empty the environment block
 41528 00003C84 E82600                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 41529 00003C87 07                              pop     es
 41530                                  
 41531                                  ;   Before returning, restore the default video page setting but do NOT
 41532                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 41533                                  ;   displayed on a different page, then it's because we don't want to see
 41534                                  ;   all the device driver/TSR goop (which goes to the default page)
 41535                                  
 41536                                  menu_done:
 41537 00003C88 803E[1347]00                    cmp     byte [bMenuPage],0
 41538 00003C8D 7415                            je	short menu_exit	;
 41539 00003C8F 06                              push    es              ;
 41540 00003C90 B84000                          mov     ax,40h          ;
 41541 00003C93 8EC0                            mov     es,ax           ;
 41542 00003C95 A1[1947]                        mov     ax,[wCRTStart]  ;
 41543 00003C98 26A34E00                        mov     [es:004Eh],ax   ;
 41544 00003C9C A0[1847]                        mov     al,[bCRTPage]   ;
 41545 00003C9F 26A26200                        mov     [es:0062h],al   ;
 41546 00003CA3 07                              pop     es              ;
 41547                                  menu_exit:
 41548 00003CA4 890E[5603]                      mov     [count],cx      ; set new counts
 41549 00003CA8 890E[5803]                      mov     [org_count],cx  ;
 41550                                          ; 10/09/2023 (*) - Erdogan Tan
 41551                                  	; MSDOS 6.21 IO.SYS - SYSINIT:46D3h
 41552                                  	; PCDOS 7.1 IBMBIO.COM - SYSINIT:491Ah
 41553                                  	;sub	si,si           ; always return ES:SI pointing to config.sys
 41554 00003CAC C3                      	retn
 41555                                  
 41556                                  ; (*) NOTE: MSDOS 6.0 source code (SYSINIT2.ASM) contains 'sub si,si' at this
 41557                                  ;	position (then 'retn' just after it)
 41558                                  ;	but MSDOS 6.21 and PCDOS 7.1 SYSINITs contain only 'retn' here.
 41559                                  
 41560                                  ;----------------------------------------------------------------------------
 41561                                  ;
 41562                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 41563                                  ;
 41564                                  ;   INPUT
 41565                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 41566                                  ;
 41567                                  ;   OUTPUT
 41568                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 41569                                  ;       carry set if error (eg, missing =); clear otherwise
 41570                                  ;
 41571                                  ;   OTHER REGS USED
 41572                                  ;       None
 41573                                  ;
 41574                                  ;   NOTES
 41575                                  ;       None
 41576                                  ;
 41577                                  ;   HISTORY
 41578                                  ;       Created 29-Mar-1992 by JeffPar
 41579                                  ;
 41580                                  ;----------------------------------------------------------------------------
 41581                                  
 41582                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41583                                  	; (SYSINIT:46D4h)
 41584                                  
 41585                                  copy_envvar:
 41586 00003CAD 51                              push    cx              ;
 41587 00003CAE 56                              push    si              ;
 41588 00003CAF 1E                              push    ds              ;
 41589 00003CB0 06                              push    es              ;
 41590 00003CB1 06                              push    es              ;
 41591 00003CB2 8E06[C514]                      mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 41592 00003CB6 1F                              pop     ds                 ; DS:SI to point to envvar
 41593                                  
 41594                                  ;   Have to calculate the length of the variable name (and if we hit
 41595                                  ;   the end of the line before we hit '=', then it's curtains for this
 41596                                  ;   config.sys line)
 41597                                  ;
 41598                                  ;   The check for NULL is important because copy_envvar is also used to copy
 41599                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 41600                                  ;   menu block existed (in order to prevent the creation of an environment)
 41601                                  
 41602 00003CB7 29C9                            sub     cx,cx           ;
 41603                                  copy_varlen:                    ;
 41604 00003CB9 AC                              lodsb                   ;
 41605 00003CBA 08C0                            or      al,al           ; NULL?
 41606                                          ;stc	; 10/09/2023 (x)
 41607 00003CBC 746B                            jz	short copy_envexit ; yes, abort
 41608 00003CBE 3C0D                            cmp     al,cr           ;
 41609                                          ;stc	; 10/09/2023 (x)
 41610 00003CC0 7467                            je	short copy_envexit
 41611 00003CC2 3C0A                            cmp     al,lf           ;
 41612                                          ;stc	; 10/09/2023 (x)
 41613 00003CC4 7463                            je	short copy_envexit
 41614 00003CC6 41                              inc     cx              ;
 41615 00003CC7 3C3D                            cmp     al,'='          ;
 41616 00003CC9 75EE                            jne	short copy_varlen
 41617 00003CCB B000                            mov     al,0            ;
 41618 00003CCD 8A24                            mov     ah,[si]         ; save char after '='
 41619 00003CCF 29CE                            sub     si,cx           ; back up to given varname
 41620 00003CD1 49                              dec     cx              ; CX == # of bytes in varname
 41621 00003CD2 29FF                            sub     di,di           ; start looking for DS:SI at ES:0
 41622                                  copy_varsrch:
 41623 00003CD4 263805                          cmp     byte [es:di],al
 41624 00003CD7 7425                            je	short copy_envprep ; search failed, just copy var
 41625 00003CD9 89FB                            mov     bx,di           ; ES:BX -> start of this varname
 41626 00003CDB 51                              push    cx              ;
 41627 00003CDC 56                              push    si              ;
 41628 00003CDD F3A6                            repe    cmpsb           ;
 41629 00003CDF 5E                              pop     si              ;
 41630 00003CE0 59                              pop     cx              ;
 41631 00003CE1 7531                            jne	short copy_varnext ; no match, skip to next varname
 41632 00003CE3 26803D3D                        cmp     byte [es:di],'='
 41633 00003CE7 752B                            jne     short copy_varnext ; no match, there's more characters
 41634                                  
 41635                                  ;   Previous occurrence of variable has been found; determine the
 41636                                  ;   entire length and then destroy it
 41637                                  
 41638 00003CE9 B9FFFF                          mov     cx,-1           ;
 41639 00003CEC F2AE                            repne   scasb           ; guaranteed to get null (since we put it there)
 41640 00003CEE 56                              push    si              ;
 41641 00003CEF 89FE                            mov     si,di           ;
 41642 00003CF1 89DF                            mov     di,bx           ;
 41643 00003CF3 2E8B0E[C314]                    mov     cx,[cs:config_envlen]
 41644 00003CF8 29F1                            sub     cx,si           ; destroy variable now
 41645                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 41646                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO.SYS - SYSINIT:4724h
 41647                                  
 41648 00003CFA F3                      	rep	; 0F3h
 41649 00003CFB 26                      	es	; 26h
 41650 00003CFC A4                      	movsb	; 0A4h
 41651                                  
 41652 00003CFD 5E                      	pop     si
 41653                                  copy_envprep:
 41654 00003CFE 80FC0D                          cmp     ah,cr          ; if there is nothing after the '='
 41655 00003D01 741D                            je	short copy_envdel ; then just exit with variable deleted
 41656 00003D03 80FC0A                          cmp     ah,lf           ;
 41657 00003D06 7418                            je	short copy_envdel
 41658                                          ;jmp	short copy_envloop
 41659                                  	; 04/01/2023
 41660                                  copy_envloop:                  ;
 41661 00003D08 AC                      	lodsb                   ;
 41662 00003D09 3C0D                    	cmp	al,cr           ;
 41663 00003D0B 7410                    	je	short copy_envdone
 41664 00003D0D 3C0A                    	cmp	al,lf           ;
 41665 00003D0F 740C                    	je	short copy_envdone
 41666 00003D11 AA                      	stosb                   ;
 41667 00003D12 EBF4                    	jmp	short copy_envloop
 41668                                  
 41669                                  copy_varnext:                   ;
 41670 00003D14 51                              push    cx              ;
 41671 00003D15 B9FFFF                          mov     cx,-1           ;
 41672 00003D18 F2AE                            repne   scasb           ;
 41673 00003D1A 59                              pop     cx              ;
 41674 00003D1B EBB7                            jmp	short copy_varsrch
 41675                                  
 41676                                  	; 04/01/2023
 41677                                  ;copy_envloop:                  ;
 41678                                  ;	lodsb                   ;
 41679                                  ;	cmp	al,cr           ;
 41680                                  ;	je	short copy_envdone
 41681                                  ;	cmp	al,lf           ;
 41682                                  ;	je	short copy_envdone
 41683                                  ;	stosb                   ;
 41684                                  ;	jmp	short copy_envloop
 41685                                  
 41686                                  copy_envdone:                   ;
 41687 00003D1D 28C0                            sub     al,al           ; do SUB to clear carry as well
 41688 00003D1F AA                              stosb                   ; always null-terminate these puppies
 41689                                  copy_envdel:                    ;
 41690 00003D20 268805                          mov     [es:di],al      ; and stick another null to terminate the env.
 41691 00003D23 2E893E[C314]                    mov     [cs:config_envlen],di
 41692                                  	; 10/09/2023 (x) - Erdogan Tan
 41693 00003D28 F9                      	stc ; in order to clear carry flag via cmc (compact code trick!)
 41694                                  copy_envexit:                   ;
 41695 00003D29 F5                      	cmc ; (x) ; reverse carry flag status (je -> cf=1)
 41696 00003D2A 07                              pop     es              ;
 41697 00003D2B 1F                              pop     ds              ;
 41698 00003D2C 5E                              pop     si              ;
 41699 00003D2D 59                              pop     cx              ;
 41700                                  
 41701                                  copy_done:	; 18/12/2022
 41702 00003D2E C3                              retn
 41703                                  
 41704                                  ;----------------------------------------------------------------------------
 41705                                  ;
 41706                                  ;   copy_block:  copy the current block to the new config.sys workspace
 41707                                  ;
 41708                                  ;   INPUT
 41709                                  ;       CX == remaining bytes in "organized" config.sys memory image
 41710                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 41711                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 41712                                  ;             config.sys image) where the current block is to be copied
 41713                                  ;
 41714                                  ;   OUTPUT
 41715                                  ;       Same as above
 41716                                  ;       AL also equals the last character read from the organized image
 41717                                  ;
 41718                                  ;   OTHER REGS USED
 41719                                  ;       All
 41720                                  ;
 41721                                  ;   NOTES
 41722                                  ;       None
 41723                                  ;
 41724                                  ;   HISTORY
 41725                                  ;       Created 16-Mar-1992 by JeffPar
 41726                                  ;
 41727                                  ;----------------------------------------------------------------------------
 41728                                  
 41729                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 41730                                  	; (SYSINIT:4759h)
 41731                                  
 41732                                  copy_block:
 41733 00003D2F E87103                          call    get_char        ; check for include
 41734 00003D32 72FA                            jc	short copy_done	;
 41735 00003D34 247F                    	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 41736 00003D36 3C5B                    	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 41737 00003D38 74F4                            je	short copy_done ;
 41738                                  
 41739 00003D3A 3C4A                            cmp     al,CONFIG_INCLUDE ; 'J'
 41740 00003D3C 88E0                            mov     al,ah           ; AL == the original line code
 41741 00003D3E 753A                            jne	short copy_line	; not an "include" line
 41742                                  
 41743                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 41744                                  ;   never try to include the block again (no infinite include loops please),
 41745                                  ;   then search for the named block and call copy_block again.
 41746                                  
 41747 00003D40 26C644FF30                      mov     byte [es:si-1],CONFIG_REM ; '0'
 41748 00003D45 57                              push    di              ;
 41749                                  
 41750 00003D46 BF[5C47]                        mov     di,szMenu
 41751 00003D49 E8D400                          call    comp_names_safe ; don't allow INCLUDE MENU
 41752 00003D4C 7426                            je	short copy_skip	;
 41753                                  
 41754 00003D4E BF[6147]                        mov     di,szCommon
 41755 00003D51 E8CC00                          call    comp_names_safe ; don't allow INCLUDE COMMON
 41756 00003D54 741E                            je	short copy_skip	;
 41757                                  
 41758 00003D56 89F7                            mov     di,si           ; try to find the block
 41759 00003D58 E86400                          call    srch_block      ;
 41760 00003D5B 89FA                            mov     dx,di           ;
 41761                                  	; 10/09/2023
 41762                                  	;pop    di              ;
 41763 00003D5D 7514                            jne	short copy_error ; no such block
 41764 00003D5F 5F                      	pop	di  ; 10/09/2023
 41765 00003D60 51                              push    cx              ;
 41766 00003D61 89D9                            mov     cx,bx           ;
 41767 00003D63 56                              push    si              ;
 41768 00003D64 4A                              dec     dx              ;
 41769 00003D65 89D6                            mov     si,dx           ;
 41770 00003D67 E80E03                          call    skip_line       ; skip the rest of the "block name" line
 41771 00003D6A E8C2FF                          call    copy_block      ; and copy in the rest of that block
 41772 00003D6D 5E                              pop     si              ;
 41773 00003D6E 59                              pop     cx              ;
 41774 00003D6F 28C0                            sub     al,al           ; force skip_opt_line to skip...
 41775 00003D71 EB2B                            jmp     short copy_nextline
 41776                                  
 41777                                  copy_error:
 41778                                  	; 10/09/2023
 41779 00003D73 F8                      	clc
 41780                                  copy_skip:
 41781 00003D74 5F                              pop     di
 41782                                  ;copy_error:
 41783                                  	; 10/09/2023 (cf=0)
 41784                                  	;clc                    ;
 41785 00003D75 E80004                          call    print_error     ; note that carry is clear, no pause
 41786 00003D78 EB24                            jmp     short copy_nextline
 41787                                  
 41788                                  ;   Copy the line at ES:SI to the current location at DS:DI
 41789                                  
 41790                                  copy_line:
 41791 00003D7A 8805                            mov     [di],al         ;
 41792 00003D7C 47                              inc     di              ;
 41793 00003D7D 3C20                            cmp     al,' '          ; is this is a "real" line with a "real" code?
 41794 00003D7F 721D                            jb	short copy_nextline ; no
 41795 00003D81 2E803E[C814]00                  cmp     byte [cs:config_multi],0
 41796 00003D87 7409                            je	short copy_loop	; not a multi-config config.sys, don't embed #s
 41797 00003D89 E81700                          call    get_linenum	; BX == line # of line @ES:SI
 41798 00003D8C 891D                            mov     [di],bx         ; stash it immediately following the line code
 41799 00003D8E 47                              inc     di              ;
 41800 00003D8F 47                              inc     di              ;
 41801 00003D90 EB08                            jmp     short copy_next ;
 41802                                  copy_loop:                      ;
 41803 00003D92 E80E03                          call    get_char        ;
 41804 00003D95 7297                            jc	short copy_done ; end of file
 41805 00003D97 8805                            mov     [di],al         ;
 41806 00003D99 47                              inc     di              ;
 41807                                  copy_next:
 41808 00003D9A 3C0A                            cmp     al,lf ; 0Ah	; done with line?
 41809 00003D9C 75F4                            jne	short copy_loop	; nope
 41810                                  
 41811                                  copy_nextline:
 41812 00003D9E E8DC02                          call    skip_opt_line   ;
 41813 00003DA1 EB8C                            jmp     short copy_block
 41814                                  
 41815                                  	; 18/12/2022
 41816                                  ;copy_done:
 41817                                          ;retn
 41818                                  
 41819                                  ;----------------------------------------------------------------------------
 41820                                  ;
 41821                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 41822                                  ;
 41823                                  ;   INPUT
 41824                                  ;    ES:SI -> some line in the config.sys memory image
 41825                                  ;
 41826                                  ;   OUTPUT
 41827                                  ;       BX == line # (relative to 1)
 41828                                  ;
 41829                                  ;   OTHER REGS USED
 41830                                  ;       DX
 41831                                  ;
 41832                                  ;   NOTES
 41833                                  ;       None
 41834                                  ;
 41835                                  ;   HISTORY
 41836                                  ;       Created 16-Mar-1992 by JeffPar
 41837                                  ;
 41838                                  ;----------------------------------------------------------------------------
 41839                                  
 41840                                  get_linenum:
 41841 00003DA3 50                              push    ax              ;
 41842 00003DA4 29DB                            sub     bx,bx           ; BX == line # (to be returned)
 41843 00003DA6 51                              push    cx              ;
 41844 00003DA7 89F2                            mov     dx,si           ; DX == the offset we're looking for
 41845 00003DA9 56                              push    si              ;
 41846 00003DAA 2E8B0E[5603]                    mov     cx,[cs:count]   ;
 41847 00003DAF 29F6                            sub     si,si           ; prepare to scan entire file
 41848                                  get_linenum_loop:               ;
 41849 00003DB1 E8C402                          call    skip_line       ;
 41850 00003DB4 7205                            jc	short get_linenum_done
 41851 00003DB6 43                              inc     bx              ;
 41852 00003DB7 39D6                            cmp     si,dx           ; have we exceeded the desired offset yet?
 41853 00003DB9 72F6                            jb	short get_linenum_loop ; no
 41854                                  get_linenum_done:               ;
 41855 00003DBB 5E                              pop     si              ;
 41856 00003DBC 59                              pop     cx              ;
 41857 00003DBD 58                              pop     ax              ;
 41858 00003DBE C3                              retn
 41859                                  
 41860                                  ;----------------------------------------------------------------------------
 41861                                  ;
 41862                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 41863                                  ;
 41864                                  ;   INPUT
 41865                                  ;       ES -> config.sys image
 41866                                  ;    ES:DI -> block name to find
 41867                                  ;
 41868                                  ;   OUTPUT
 41869                                  ;       ZF flag set, if found
 41870                                  ;    ES:DI -> just past the name in the block heading, if found
 41871                                  ;       BX == # bytes remaining from that point, if found
 41872                                  ;
 41873                                  ;   OTHER REGS USED
 41874                                  ;       None
 41875                                  ;
 41876                                  ;   NOTES
 41877                                  ;       This differs from "find_block" in that it searches the ENTIRE
 41878                                  ;       config.sys image, not merely the remaining portion, and that it
 41879                                  ;       takes a pointer to block name that is *elsewhere* in the image
 41880                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 41881                                  ;
 41882                                  ;   HISTORY
 41883                                  ;       Created 16-Mar-1992 by JeffPar
 41884                                  ;
 41885                                  ;----------------------------------------------------------------------------
 41886                                  
 41887                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 41888 00003DBF 50                              push    ax              ;
 41889 00003DC0 51                              push    cx              ;
 41890 00003DC1 2E8B0E[5603]                    mov     cx,[cs:count]   ;
 41891 00003DC6 56                              push    si              ;
 41892 00003DC7 29F6                            sub     si,si           ;
 41893 00003DC9 1E                              push    ds              ;
 41894 00003DCA 06                              push    es              ;
 41895 00003DCB 1F                              pop     ds              ;
 41896 00003DCC E80900                          call    find_block      ;
 41897 00003DCF 89F7                            mov     di,si           ;
 41898 00003DD1 89CB                            mov     bx,cx           ;
 41899 00003DD3 1F                              pop     ds              ;
 41900 00003DD4 5E                              pop     si              ;
 41901 00003DD5 59                              pop     cx              ;
 41902 00003DD6 58                              pop     ax              ;
 41903                                  find_exit: ; 16/04/2019
 41904 00003DD7 C3                              retn			;
 41905                                  
 41906                                  ;----------------------------------------------------------------------------
 41907                                  ;
 41908                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 41909                                  ;
 41910                                  ;   INPUT
 41911                                  ;    DS:DI -> block name to find
 41912                                  ;    ES:SI -> remainder of config.sys image
 41913                                  ;       CX == remaining size of config.sys image
 41914                                  ;
 41915                                  ;   OUTPUT
 41916                                  ;       ZF flag set, if found (also, CF set if EOF)
 41917                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 41918                                  ;       CX == # bytes remaining from that point
 41919                                  ;
 41920                                  ;   OTHER REGS USED
 41921                                  ;       AX
 41922                                  ;
 41923                                  ;   NOTES
 41924                                  ;       This differs from "srch_block" in that it searches only the
 41925                                  ;       remaining portion of the config.sys image and leaves SI and CX
 41926                                  ;       pointing to where the search left off, and that it takes a pointer
 41927                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 41928                                  ;
 41929                                  ;   HISTORY
 41930                                  ;       Created 16-Mar-1992 by JeffPar
 41931                                  ;
 41932                                  ;----------------------------------------------------------------------------
 41933                                  
 41934                                  find_block:
 41935 00003DD8 E8C802                          call    get_char        ; get line code
 41936 00003DDB 72FA                            jc	short find_exit	; end of file
 41937 00003DDD 247F                            and     al,~CONFIG_OPTION_QUERY
 41938 00003DDF 3C5B                            cmp     al,CONFIG_BEGIN ; beginning of a block?
 41939 00003DE1 740C                            je	short check_line ; no
 41940 00003DE3 3C4A                            cmp     al,CONFIG_INCLUDE
 41941 00003DE5 7513                            jne	short next_line	;
 41942 00003DE7 2E800E[C814]01                  or	byte [cs:config_multi],1
 41943 00003DED EB0B                            jmp     short next_line ;
 41944                                  check_line:
 41945 00003DEF 2E800E[C814]01                  or      byte [cs:config_multi],1
 41946 00003DF5 E80700                          call    comp_names      ; compare block names
 41947 00003DF8 76DD                            jbe	short find_exit	; end of file, or names matched
 41948                                  next_line:
 41949 00003DFA E88002                          call    skip_opt_line   ; no, so skip to next line
 41950 00003DFD EBD9                            jmp	short find_block  ;
 41951                                  ;find_exit:
 41952                                  ;	retn
 41953                                  
 41954                                  ;----------------------------------------------------------------------------
 41955                                  ;
 41956                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 41957                                  ;
 41958                                  ;   INPUT
 41959                                  ;    DS:DI -> keyword to compare
 41960                                  ;    ES:SI -> position in config.sys
 41961                                  ;       CX == remaining bytes in config.sys
 41962                                  ;
 41963                                  ;   OUTPUT
 41964                                  ;       ZF flag set, if match (also, CF set if EOF)
 41965                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 41966                                  ;       CX == # bytes remaining from that point
 41967                                  ;
 41968                                  ;   OTHER REGS USED
 41969                                  ;       AX
 41970                                  ;
 41971                                  ;   NOTES
 41972                                  ;       None
 41973                                  ;
 41974                                  ;   HISTORY
 41975                                  ;       Created 16-Mar-1992 by JeffPar
 41976                                  ;
 41977                                  ;----------------------------------------------------------------------------
 41978                                  
 41979                                  comp_names:
 41980 00003DFF 57                              push    di              ;
 41981                                  comp_loop:                      ;
 41982 00003E00 E8A002                          call    get_char        ;
 41983 00003E03 7210                            jc	short comp_exit	;
 41984 00003E05 E80704                          call    any_delim       ; is next character a delimiter?
 41985 00003E08 8A25                            mov     ah,[di]         ; (get next character we're supposed to match)
 41986 00003E0A 740B                            je	short comp_almost ; yes, it *could* be a match
 41987 00003E0C 47                              inc     di              ;
 41988 00003E0D 25DFDF                          and     ax,~2020h ; 0DFDFh 
 41989                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 41990 00003E10 38E0                            cmp     al,ah           ; match?
 41991 00003E12 74EC                            je	short comp_loop ; yes, keep looking at the characters
 41992 00003E14 F8                              clc                     ; prevent erroneous eof indication: clear carry
 41993                                  comp_exit:                      ;
 41994 00003E15 5F                              pop     di              ;
 41995 00003E16 C3                              retn			;
 41996                                  comp_almost:                    ;
 41997 00003E17 86C4                            xchg    al,ah           ; we don't know for sure if it's a match
 41998 00003E19 E8F303                          call    any_delim       ; until we verify that the second string has
 41999 00003E1C 86C4                            xchg    al,ah           ; been exhausted also...
 42000 00003E1E EBF5                            jmp     short comp_exit ; if we are, this call to any_delim will tell...
 42001                                  
 42002                                  ;----------------------------------------------------------------------------
 42003                                  
 42004                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 42005                                  comp_names_x:
 42006                                  	;
 42007                                  comp_names_safe:
 42008 00003E20 50                              push    ax
 42009 00003E21 51                              push    cx
 42010 00003E22 56                              push	si
 42011 00003E23 1E                              push    ds
 42012 00003E24 0E                              push    cs
 42013 00003E25 1F                              pop     ds
 42014 00003E26 E8D6FF                          call    comp_names
 42015 00003E29 1F                              pop     ds
 42016 00003E2A 5E                      	pop	si
 42017 00003E2B 59                              pop     cx
 42018 00003E2C 58                              pop     ax
 42019 00003E2D C3                              retn
 42020                                  
 42021                                  ;----------------------------------------------------------------------------
 42022                                  ;
 42023                                  ;   print_item:  display menu item #BL
 42024                                  ;
 42025                                  ;   INPUT
 42026                                  ;       BL == menu item # to display
 42027                                  ;
 42028                                  ;   OUTPUT
 42029                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 42030                                  ;
 42031                                  ;   OTHER REGS USED
 42032                                  ;       None
 42033                                  ;
 42034                                  ;   NOTES
 42035                                  ;       This function saves/restores the current cursor position, so you
 42036                                  ;       needn't worry about it.
 42037                                  ;
 42038                                  ;   HISTORY
 42039                                  ;       Created 16-Mar-1992 by JeffPar
 42040                                  ;
 42041                                  ;----------------------------------------------------------------------------
 42042                                  
 42043                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 42044                                  	; (SYSINIT:485Ah)
 42045                                  
 42046                                  print_item:		; prints menu item #BL (1 to N)
 42047 00003E2E 50                              push    ax              ;
 42048 00003E2F 53                              push    bx              ;
 42049 00003E30 51                              push    cx              ;
 42050 00003E31 52                              push    dx              ;
 42051 00003E32 56                              push    si              ;
 42052 00003E33 B403                            mov     ah,03h          ; get cursor position
 42053 00003E35 8A3E[1347]                      mov     bh,[bMenuPage]  ; always page zero
 42054 00003E39 CD10                            int     10h             ; DH/DL = row/column
 42055 00003E3B 52                              push    dx              ; save it
 42056 00003E3C B402                            mov     ah,02h          ; set cursor position
 42057 00003E3E 88DE                            mov     dh,bl           ;
 42058 00003E40 80C603                          add     dh,3            ;
 42059 00003E43 B205                            mov     dl,5            ;
 42060 00003E45 CD10                            int     10h             ; set cursor position for correct row/col
 42061 00003E47 88D8                            mov     al,bl           ;
 42062 00003E49 0430                            add     al,'0'          ; convert menu item # to ASCII digit
 42063 00003E4B 8A26[1247]                      mov     ah,[bMenuColor] ; normal attribute
 42064 00003E4F 3A1E[1C47]                      cmp     bl,[bDefBlock]  ; are we printing the current block?
 42065 00003E53 7510                            jne	short print_other ; no
 42066 00003E55 80CC70                          or      ah,70h          ; yes, set bgnd color to white
 42067 00003E58 88E5                            mov     ch,ah           ;
 42068 00003E5A B104                            mov     cl,4            ;
 42069 00003E5C D2C5                            rol     ch,cl           ;
 42070 00003E5E 38E5                            cmp     ch,ah           ; are fgnd/bgnd the same?
 42071 00003E60 7503                            jne	short print_other ; no
 42072 00003E62 80F408                          xor     ah,08h          ; yes, so modify the fgnd intensity
 42073                                  print_other:                    ;
 42074 00003E65 B700                            mov     bh,0            ;
 42075 00003E67 01DB                            add     bx,bx           ;
 42076 00003E69 8BBF[4047]                      mov     di,[aoffBlockDesc+bx]
 42077 00003E6D 88E3                            mov     bl,ah           ; put the attribute in the correct register now
 42078 00003E6F 8A3E[1347]                      mov     bh,[bMenuPage]  ; get correct video page #
 42079 00003E73 B409                            mov     ah,09h          ; write char/attr
 42080 00003E75 B90100                          mov     cx,1            ;
 42081 00003E78 CD10                            int     10h             ;
 42082 00003E7A FEC2                            inc     dl              ; increment column
 42083 00003E7C B402                            mov     ah,02h          ;
 42084 00003E7E CD10                            int     10h             ;
 42085                                          ;mov	ax,0900h+'.'    ;
 42086 00003E80 B82E09                          mov	ax,092Eh
 42087 00003E83 CD10                    	int     10h             ; display '.'
 42088 00003E85 FEC2                            inc     dl              ; increment column
 42089 00003E87 B402                            mov     ah,02h          ;
 42090 00003E89 CD10                            int     10h             ;
 42091                                          ;mov	ax,0900h+' '    ;
 42092 00003E8B B82009                          mov	ax,0920h
 42093 00003E8E CD10                    	int     10h             ; display ' '
 42094 00003E90 FEC2                            inc     dl              ; increment column
 42095 00003E92 B402                            mov     ah,02h          ;
 42096 00003E94 CD10                            int     10h             ;
 42097 00003E96 06                              push    es              ;
 42098                                  print_loop:                     ;
 42099 00003E97 268A05                          mov     al,[es:di]	; get a character of the description
 42100 00003E9A 47                              inc     di              ;
 42101 00003E9B 3C09                            cmp     al,TAB ; 9	; substitute spaces for tabs
 42102 00003E9D 7502                            jne	short print_nontab ;
 42103 00003E9F B020                            mov     al,' '          ;
 42104                                  print_nontab:                   ;
 42105 00003EA1 3C20                            cmp     al,' '          ;
 42106 00003EA3 7215                            jb	short print_done ; stop at the 1st character < space
 42107 00003EA5 3C24                            cmp     al,'$'          ;
 42108 00003EA7 7411                            je	short print_done ; also stop on $
 42109 00003EA9 B409                            mov     ah,09h          ; display function #
 42110 00003EAB CD10                            int     10h             ;
 42111 00003EAD FEC2                            inc     dl              ; increment column
 42112 00003EAF 80FA4E                          cmp     dl,78           ; far enough?
 42113 00003EB2 7306                            jae	short print_done ; yes
 42114 00003EB4 B402                            mov     ah,02h          ;
 42115 00003EB6 CD10                            int     10h             ;
 42116 00003EB8 EBDD                            jmp	short  print_loop
 42117                                  print_done:                     ;
 42118 00003EBA 07                              pop     es              ;
 42119 00003EBB 5A                              pop     dx              ;
 42120 00003EBC B402                            mov     ah,02h          ;
 42121 00003EBE CD10                            int     10h             ; restore previous row/col
 42122 00003EC0 5E                              pop     si              ;
 42123 00003EC1 5A                              pop     dx              ;
 42124 00003EC2 59                              pop     cx              ;
 42125 00003EC3 5B                              pop     bx              ;
 42126 00003EC4 58                              pop     ax              ;
 42127 00003EC5 C3                              retn			;
 42128                                  
 42129                                  ;----------------------------------------------------------------------------
 42130                                  ;
 42131                                  ;   select_item:  wait for user to select menu item, with time-out
 42132                                  ;
 42133                                  ;   INPUT
 42134                                  ;       None
 42135                                  ;
 42136                                  ;   OUTPUT
 42137                                  ;       BX == menu item # (1-N), or -1 for clean boot
 42138                                  ;       Selected menu item highlighted
 42139                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 42140                                  ;
 42141                                  ;   OTHER REGS USED
 42142                                  ;       None
 42143                                  ;
 42144                                  ;   NOTES
 42145                                  ;       None
 42146                                  ;
 42147                                  ;   HISTORY
 42148                                  ;       Created 16-Mar-1992 by JeffPar
 42149                                  ;
 42150                                  ;----------------------------------------------------------------------------
 42151                                  
 42152                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 42153 00003EC6 8A1E[1C47]                      mov     bl,[bDefBlock]  ; BL will be the default block #
 42154 00003ECA 88D8                            mov     al,bl           ;
 42155 00003ECC E83701                          call    disp_num        ;
 42156 00003ECF E84401                          call    show_status     ; display current interactive status
 42157 00003ED2 803E[2047]FF                    cmp     byte [secTimeOut],-1
 42158 00003ED7 7452                            je	short input_key	; no time-out, just go to input
 42159 00003ED9 B42C                            mov     ah,GET_TIME ; 2Ch
 42160 00003EDB CD21                            int     21h             ;
 42161 00003EDD 88F7                            mov     bh,dh           ; BH = initial # of seconds
 42162                                  check_time:
 42163 00003EDF A0[2047]                        mov     al,[secTimeOut] ;
 42164 00003EE2 2A06[2147]                      sub     al,[secElapsed] ;
 42165 00003EE6 730D                            jae	short show_time	;
 42166 00003EE8 800E[1B47]02                    or      byte [bQueryOpt],2  ; disable all further prompting
 42167 00003EED C606[2147]00                    mov     byte [secElapsed],0
 42168 00003EF2 E9F600                          jmp	select_done	; time's up!
 42169                                  show_time:
 42170 00003EF5 53                              push    bx              ;
 42171 00003EF6 88C3                            mov     bl,al           ; save # in BL
 42172 00003EF8 8A3E[1347]                      mov     bh,[bMenuPage]  ;
 42173 00003EFC B403                            mov     ah,03h          ; get cursor position
 42174 00003EFE CD10                            int     10h             ;
 42175 00003F00 52                              push    dx              ;
 42176 00003F01 80C208                  	add	dl,8		; move cursor to the right
 42177 00003F04 B402                            mov     ah,02h          ; set cursor position
 42178 00003F06 CD10                            int     10h             ;
 42179 00003F08 BA[794D]                        mov     dx,_$TimeOut
 42180 00003F0B E8DB05                          call    print           ; print the "Time remaining: " prompt
 42181 00003F0E 88D8                            mov     al,bl           ; recover # from BL
 42182 00003F10 98                              cbw                     ; this works because AL is always <= 90
 42183 00003F11 B10A                            mov     cl,10           ;
 42184 00003F13 F6F1                            div     cl              ; AL = tens digit, AH = ones digit
 42185 00003F15 88E1                            mov     cl,ah           ;
 42186 00003F17 0430                            add     al,'0'          ;
 42187 00003F19 B40E                            mov     ah,0Eh          ;
 42188 00003F1B CD10                            int     10h             ; write TTY tens digit
 42189 00003F1D 88C8                            mov     al,cl           ;
 42190 00003F1F 0430                            add     al,'0'          ;
 42191 00003F21 B40E                            mov     ah,0Eh          ;
 42192 00003F23 CD10                            int     10h             ; write TTY ones digit
 42193 00003F25 5A                              pop     dx
 42194 00003F26 B402                            mov     ah,02h          ; set cursor position back to where it was
 42195 00003F28 CD10                            int     10h             ;
 42196 00003F2A 5B                              pop     bx              ;
 42197                                  input_key:
 42198 00003F2B B406                            mov     ah,RAW_CON_IO ; 6
 42199 00003F2D B2FF                            mov     dl,0FFh         ; input request
 42200 00003F2F CD21                            int     21h             ;
 42201 00003F31 751F                            jnz	short got_key	;
 42202 00003F33 803E[2047]FF                    cmp     byte [secTimeOut],-1; is there a time-out?
 42203 00003F38 74F1                            je	short input_key	; no, just go back to input
 42204 00003F3A B42C                            mov     ah,GET_TIME     ;
 42205 00003F3C CD21                            int     21h             ; DH = seconds
 42206 00003F3E 88F4                            mov     ah,dh           ;
 42207 00003F40 28FE                            sub     dh,bh           ; should generally be zero or one
 42208 00003F42 88E7                            mov     bh,ah           ;
 42209 00003F44 7302                            jnc	short got_time	;
 42210 00003F46 B601                            mov     dh,1            ; it wrapped back to zero, so assume one
 42211                                  got_time:
 42212 00003F48 08F6                            or      dh,dh           ; any change?
 42213 00003F4A 74DF                            jz	short input_key	; no
 42214 00003F4C 0036[2147]                      add     [secElapsed],dh ;
 42215 00003F50 EB8D                            jmp	short check_time ;
 42216                                  got_key:
 42217 00003F52 50                              push    ax              ;
 42218 00003F53 B8FFFF                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 42219 00003F56 8706[2047]                      xchg    [secTimeOut],ax
 42220 00003F5A 3CFF                            cmp     al,-1           ; was time-out already disabled?
 42221 00003F5C 740E                            je	short timeout_disabled ; yes
 42222 00003F5E 53                              push    bx              ; let's disable # seconds display
 42223 00003F5F B8200A                          mov     ax,0A20h        ; write multiple spaces
 42224 00003F62 8B1E[1247]                      mov     bx,[bMenuColor]
 42225 00003F66 B95000                          mov     cx,80           ; 80 of them, to be safe
 42226 00003F69 CD10                            int     10h             ; to completely obliterate # seconds display
 42227 00003F6B 5B                              pop     bx   		;
 42228                                  
 42229                                  timeout_disabled:
 42230 00003F6C 58                              pop     ax              ;
 42231 00003F6D 08C0                            or      al,al           ; extended key pressed?
 42232 00003F6F 755A                            jnz	short normal_key ; no
 42233 00003F71 CD21                            int     21h             ; get the next part of the key then
 42234 00003F73 74B6                            jz	short input_key	; hmmm, what happened to the second part?
 42235                                  
 42236 00003F75 3C48                            cmp     al,48h          ; up arrow?
 42237 00003F77 7510                            jne	short not_up	; no
 42238 00003F79 80FB01                          cmp     bl,1            ; are we as up as up can get?
 42239 00003F7C 76AD                            jbe	short input_key	; yes, ignore it
 42240 00003F7E FE0E[1C47]                      dec     byte [bDefBlock] ;
 42241 00003F82 E8A9FE                          call    print_item      ; re-print the current item
 42242 00003F85 FECB                            dec     bl              ; and then print the new current item
 42243 00003F87 EB12                            jmp     short print1
 42244                                  not_up:
 42245 00003F89 3C50                            cmp     al,50h          ; down arrow?
 42246 00003F8B 7518                            jne	short not_down	; no
 42247 00003F8D 3A1E[1D47]                      cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 42248 00003F91 7310                            jae	short to_input_key ; yes, ignore it
 42249 00003F93 FE06[1C47]                      inc     byte [bDefBlock] ;
 42250 00003F97 E894FE                          call    print_item      ; re-print the current item
 42251 00003F9A 43                              inc     bx              ; and then print the new current item
 42252                                  print1: 
 42253 00003F9B 88D8                    	mov     al,bl           ;
 42254                                  print2: 
 42255 00003F9D E88EFE                  	call    print_item      ;
 42256 00003FA0 E86300                          call    disp_num        ;
 42257                                  to_input_key:
 42258 00003FA3 EB86                            jmp	short input_key ; 10/09/2023
 42259                                  not_down:
 42260 00003FA5 F606[1747]01                    test    byte [bDisableUI],1
 42261 00003FAA 75F7                            jnz	short to_input_key ; don't allow F8 or F5
 42262 00003FAC 3C42                            cmp     al,42h          ; F8 function key?
 42263 00003FAE 750B                            jne	short not_f8	; no
 42264 00003FB0 8036[1B47]01                    xor     byte [bQueryOpt],1
 42265 00003FB5 E85E00                          call    show_status     ;
 42266 00003FB8 E970FF                          jmp     input_key	;
 42267                                  not_f8:
 42268 00003FBB 3C3F                            cmp     al,3Fh          ; F5 function key?
 42269 00003FBD 75E4                            jne	short to_input_key ; no
 42270                                  	; 02/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42271                                  	; MSDOS 6.21 IO.SYS - SYSINIT:49EBh
 42272                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4C32h)
 42273 00003FBF 800E[1B47]04            	or	byte [bQueryOpt],4 ; no more queries
 42274 00003FC4 BBFFFF                          mov     bx,-1           ; special return code (-1) indicating clean boot
 42275 00003FC7 B020                            mov     al,' '          ; don't want to display anything really;
 42276 00003FC9 EB26                            jmp     short disp_input ; just want to display the cr/lf sequence...
 42277                                  
 42278                                  normal_key:
 42279 00003FCB 3C0D                            cmp     al,0Dh          ; Enter?
 42280 00003FCD 741C                            je	short select_done ; yes
 42281 00003FCF 3C08                            cmp     al,08h          ; backspace?
 42282 00003FD1 7504                            jne	short not_backspace ; no
 42283 00003FD3 BBFEFF                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 42284 00003FD6 C3                              retn			;
 42285                                  not_backspace:
 42286 00003FD7 2C30                            sub     al,'0'          ; is greater than '0'?
 42287 00003FD9 76C8                            jbe	short to_input_key ; no
 42288 00003FDB 3A06[1D47]                      cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 42289 00003FDF 77C2                            ja	short to_input_key ; no
 42290 00003FE1 A2[1C47]                        mov	[bDefBlock],al  ;
 42291 00003FE4 E847FE                          call    print_item      ; redisplay the current selection
 42292 00003FE7 88C3                            mov     bl,al           ; set new selection
 42293 00003FE9 EBB2                            jmp	short print2
 42294                                  
 42295                                  select_done:
 42296 00003FEB B700                            mov     bh,0            ; return a full 16-bit value (for indexing)
 42297 00003FED 88D8                            mov     al,bl           ;
 42298 00003FEF 0430                            add     al,'0'          ; convert it into a digit, then display it
 42299                                  
 42300                                  	; fall into disp_input
 42301                                  
 42302                                  ; 16/04/2019 - Retro DOS v4.0
 42303                                  
 42304                                  ;----------------------------------------------------------------------------
 42305                                  ;
 42306                                  ;   disp_input:  display a single character + cr/lf
 42307                                  ;
 42308                                  ;   INPUT
 42309                                  ;       AL == character to display
 42310                                  ;
 42311                                  ;   OUTPUT
 42312                                  ;       None
 42313                                  ;
 42314                                  ;   OTHER REGS USED
 42315                                  ;       None
 42316                                  ;
 42317                                  ;   NOTES
 42318                                  ;       This function is used not only for the menu input selection but
 42319                                  ;       also for the interactive line prompting (the y/n/a thing).
 42320                                  ;
 42321                                  ;   HISTORY
 42322                                  ;       Created 16-Mar-1992 by JeffPar
 42323                                  ;
 42324                                  ;----------------------------------------------------------------------------
 42325                                  
 42326                                  
 42327                                  disp_input:
 42328 00003FF1 50                      	push	ax
 42329                                  	;cmp	al,' '
 42330                                  	;jae	short disp_ok
 42331                                  	;mov	al,' '
 42332                                  	; 10/09/2023 - Retro DOS v4.2 IO:SYS (Optimization)
 42333 00003FF2 B220                    	mov	dl,' ' ; 20h
 42334 00003FF4 38D0                    	cmp	al,dl
 42335 00003FF6 7602                    	jna	short disp_input_ok
 42336                                  disp_ok:
 42337 00003FF8 88C2                    	mov	dl,al
 42338                                  disp_input_ok:
 42339 00003FFA B402                    	mov	ah,STD_CON_OUTPUT ; 2
 42340 00003FFC CD21                    	int	21h
 42341 00003FFE BA[C64A]                	mov	dx,crlfm
 42342 00004001 E8E504                  	call	print
 42343 00004004 58                      	pop	ax
 42344 00004005 C3                      	retn
 42345                                  
 42346                                  ;----------------------------------------------------------------------------
 42347                                  
 42348                                  disp_num:
 42349 00004006 53                              push    bx
 42350 00004007 0430                            add     al,'0'
 42351 00004009 B40A                            mov     ah,0Ah
 42352 0000400B 8B1E[1247]                      mov     bx,[bMenuColor]
 42353 0000400F B90100                          mov     cx,1
 42354 00004012 CD10                            int     10h
 42355 00004014 5B                              pop     bx
 42356 00004015 C3                              retn
 42357                                  
 42358                                  ;----------------------------------------------------------------------------
 42359                                  ;
 42360                                  ;   show_status:  display current interactive mode setting (on/off/none)
 42361                                  ;
 42362                                  ;   INPUT
 42363                                  ;       None
 42364                                  ;
 42365                                  ;   OUTPUT
 42366                                  ;       None
 42367                                  ;
 42368                                  ;   OTHER REGS USED
 42369                                  ;       None
 42370                                  ;
 42371                                  ;   NOTES
 42372                                  ;       None
 42373                                  ;
 42374                                  ;   HISTORY
 42375                                  ;       Created 16-Mar-1992 by JeffPar
 42376                                  ;
 42377                                  ;----------------------------------------------------------------------------
 42378                                  
 42379                                  show_status:
 42380 00004016 53                              push    bx              ; BL = video page #
 42381 00004017 8B1E[1247]                      mov     bx,[bMenuColor]
 42382 0000401B B403                            mov     ah,03h          ; get cursor position
 42383 0000401D CD10                            int     10h             ;
 42384 0000401F 52                              push    dx              ; save it
 42385 00004020 B402                            mov     ah,02h          ; set cursor position
 42386 00004022 8B16[1547]                      mov     dx,[bLastCol]   ; set correct row/col
 42387 00004026 F606[1747]01                    test    byte [bDisableUI],1
 42388 0000402B 740C                            jz	short show_onoff ; just show on/off
 42389 0000402D B200                            mov     dl,0            ;
 42390 0000402F CD10                            int     10h             ;
 42391 00004031 B8200A                          mov     ax,0A20h        ; write multiple spaces
 42392 00004034 B95000                          mov     cx,80           ; 80 of them, to be exact
 42393                                  	; 10/09/2023
 42394                                  	;int	10h             ; to obliterate the status line
 42395 00004037 EB11                            jmp     short show_done ;
 42396                                  show_onoff: 
 42397 00004039 CD10                            int     10h
 42398                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 42399                                  		; AL = character, BH = display page - alpha mode
 42400                                  		; BL = color of character (graphics mode, PCjr only)
 42401                                  		; CX = number of times to write character
 42402                                  
 42403 0000403B A0[754D]                        mov     al,[_$NO]	; assume OFF
 42404 0000403E 803E[1B47]01                    cmp     byte [bQueryOpt],1 ; is interactive mode on?
 42405 00004043 7503                            jne	short show_noton ; no
 42406 00004045 A0[714D]                        mov     al,[_$YES]	; yes
 42407                                  show_noton:                     ;
 42408 00004048 B40E                            mov     ah,0Eh          ; write TTY
 42409                                  show_done:	; 10/09/2023
 42410 0000404A CD10                            int     10h             ;
 42411                                  ;show_done:                     ;
 42412 0000404C 5A                              pop     dx              ;
 42413 0000404D B402                            mov     ah,02h          ;
 42414 0000404F CD10                            int     10h             ; restore original cursor position
 42415 00004051 5B                              pop     bx              ;
 42416 00004052 C3                              retn			;
 42417                                  
 42418                                  ; 16/04/2019 - Retro DOS v4.0
 42419                                  
 42420                                  ;----------------------------------------------------------------------------
 42421                                  ;
 42422                                  ;   skip_token: advances ES:SI/CX past the current token
 42423                                  ;
 42424                                  ;   INPUT
 42425                                  ;    ES:SI -> position in config.sys
 42426                                  ;       CX == remaining bytes in config.sys
 42427                                  ;
 42428                                  ;   OUTPUT
 42429                                  ;       CF set if EOL/EOF hit
 42430                                  ;       AL == 1st char of delimiter
 42431                                  ;    ES:SI -> just past the delimiter
 42432                                  ;       CX == # bytes remaining from that point
 42433                                  ;
 42434                                  ;   OTHER REGS USED
 42435                                  ;       AX
 42436                                  ;
 42437                                  ;   NOTES
 42438                                  ;       None
 42439                                  ;
 42440                                  ;   HISTORY
 42441                                  ;       Created 16-Mar-1992 by JeffPar
 42442                                  ;
 42443                                  ;----------------------------------------------------------------------------
 42444                                  
 42445                                  skip_token:
 42446 00004053 E84D00                          call    get_char
 42447 00004056 7210                            jc	short skip_token_done
 42448 00004058 E8B401                          call    any_delim
 42449 0000405B 75F6                            jne	short skip_token
 42450                                  skip_check_eol:
 42451 0000405D 3C0D                            cmp     al,cr ; 0Dh
 42452 0000405F 7406                            je	short skip_token_eol
 42453 00004061 3C0A                            cmp     al,lf ; 0Ah
 42454 00004063 7402                            je	short skip_token_eol
 42455 00004065 F8                              clc
 42456                                          ;jmp	short skip_token_done
 42457 00004066 C3                      	retn
 42458                                  skip_token_eol:
 42459 00004067 F9                              stc
 42460                                  skip_token_done:
 42461 00004068 C3                              retn
 42462                                  
 42463                                  ;----------------------------------------------------------------------------
 42464                                  ;
 42465                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 42466                                  ;
 42467                                  ;   INPUT
 42468                                  ;    ES:SI -> position in config.sys
 42469                                  ;       CX == remaining bytes in config.sys
 42470                                  ;
 42471                                  ;   OUTPUT
 42472                                  ;       CF set if EOF hit
 42473                                  ;       AL == 1st char of token
 42474                                  ;    ES:SI -> just past the token
 42475                                  ;       CX == # bytes remaining from that point
 42476                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 42477                                  ;
 42478                                  ;   OTHER REGS USED
 42479                                  ;       AX
 42480                                  ;
 42481                                  ;   NOTES
 42482                                  ;       None
 42483                                  ;
 42484                                  ;   HISTORY
 42485                                  ;       Created 16-Mar-1992 by JeffPar
 42486                                  ;
 42487                                  ;----------------------------------------------------------------------------
 42488                                  
 42489                                  skip_delim:	; returns carry set if eol/eof
 42490 00004069 E83700                          call    get_char        ;
 42491 0000406C 8D5CFF                          lea     bx,[si-1]       ; also returns BX -> next token
 42492 0000406F 72F7                            jc	short skip_token_done ;
 42493 00004071 E8AB01                          call    delim           ;
 42494 00004074 74F3                            je	short skip_delim ;
 42495 00004076 EBE5                            jmp	short skip_check_eol  ; 13/05/2019
 42496                                  
 42497                                  ;----------------------------------------------------------------------------
 42498                                  ;
 42499                                  ;   skip_opt_line: same as skip_line provided AL != LF
 42500                                  ;
 42501                                  ;   INPUT
 42502                                  ;       AL == last character read
 42503                                  ;    ES:SI -> position in config.sys
 42504                                  ;       CX == remaining bytes in config.sys
 42505                                  ;
 42506                                  ;   OUTPUT
 42507                                  ;       CF set if EOF hit
 42508                                  ;       AL == 1st char of new line
 42509                                  ;    ES:SI -> just past 1st char of new line
 42510                                  ;       CX == # bytes remaining from that point
 42511                                  ;
 42512                                  ;   OTHER REGS USED
 42513                                  ;       AX
 42514                                  ;
 42515                                  ;   NOTES
 42516                                  ;       In other words, the purpose here is to skip to the next line,
 42517                                  ;       unless ES:SI is already sitting at the front of the next line (which
 42518                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 42519                                  ;
 42520                                  ;   HISTORY
 42521                                  ;       Created 16-Mar-1992 by JeffPar
 42522                                  ;
 42523                                  ;----------------------------------------------------------------------------
 42524                                  
 42525                                  ; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42526                                  ;skip_opt_line:
 42527                                  ;	cmp     al,lf ; 0Ah
 42528                                  ;	je	short skip_line_done
 42529                                       
 42530                                  	; fall into skip_line
 42531                                  
 42532                                  ;----------------------------------------------------------------------------
 42533                                  ;
 42534                                  ;   skip_line: skip to the next line
 42535                                  ;
 42536                                  ;   INPUT
 42537                                  ;    ES:SI -> position in config.sys
 42538                                  ;       CX == remaining bytes in config.sys
 42539                                  ;
 42540                                  ;   OUTPUT
 42541                                  ;       CF set if EOF hit
 42542                                  ;    ES:SI -> just past 1st char of new line
 42543                                  ;       CX == # bytes remaining from that point
 42544                                  ;
 42545                                  ;   OTHER REGS USED
 42546                                  ;       AX
 42547                                  ;
 42548                                  ;   NOTES
 42549                                  ;       None
 42550                                  ;
 42551                                  ;   HISTORY
 42552                                  ;       Created 16-Mar-1992 by JeffPar
 42553                                  ;
 42554                                  ;----------------------------------------------------------------------------
 42555                                  
 42556                                  skip_line:
 42557 00004078 E82800                          call    get_char
 42558 0000407B 7204                            jc	short skip_line_done
 42559                                  skip_opt_line:	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42560 0000407D 3C0A                            cmp     al,lf ; 0Ah
 42561 0000407F 75F7                            jne	short skip_line
 42562                                  skip_line_done:
 42563                                  num_done:	; 18/12/2022
 42564 00004081 C3                              retn
 42565                                  
 42566                                  ;----------------------------------------------------------------------------
 42567                                  ;
 42568                                  ;   get_number: return binary equivalent of numeric string
 42569                                  ;
 42570                                  ;   INPUT
 42571                                  ;    ES:SI -> position in config.sys
 42572                                  ;       CX == remaining bytes in config.sys
 42573                                  ;
 42574                                  ;   OUTPUT
 42575                                  ;       AL == non-digit encountered
 42576                                  ;       BX == binary #
 42577                                  ;    ES:SI -> just past 1st non-digit
 42578                                  ;       CX == # bytes remaining from that point
 42579                                  ;
 42580                                  ;   OTHER REGS USED
 42581                                  ;       AX
 42582                                  ;
 42583                                  ;   NOTES
 42584                                  ;       None
 42585                                  ;
 42586                                  ;   HISTORY
 42587                                  ;       Created 16-Mar-1992 by JeffPar
 42588                                  ;
 42589                                  ;----------------------------------------------------------------------------
 42590                                  
 42591                                  ; 13/05/2019
 42592                                  
 42593                                  get_number:
 42594 00004082 29DB                            sub     bx,bx           ; BX = result
 42595                                  num_loop:
 42596 00004084 E81C00                          call    get_char        ;
 42597 00004087 72F8                            jc	short num_done	;
 42598 00004089 3C30                            cmp     al,'0'          ; convert to value
 42599 0000408B 72F4                            jb	short num_done	; no more number
 42600 0000408D 3C39                            cmp     al,'9'          ;
 42601 0000408F 77F0                            ja	short num_done	;
 42602 00004091 50                              push    ax              ;
 42603 00004092 B80A00                          mov     ax,10           ;
 42604 00004095 52                              push    dx              ;
 42605 00004096 F7E3                            mul     bx              ;
 42606 00004098 5A                              pop     dx              ;
 42607 00004099 89C3                            mov     bx,ax           ;
 42608 0000409B 58                              pop     ax              ;
 42609 0000409C 2C30                            sub     al,'0'          ;
 42610 0000409E 98                              cbw                     ;
 42611 0000409F 01C3                            add     bx,ax           ;
 42612 000040A1 EBE1                            jmp	short num_loop	;
 42613                                  
 42614                                  	; 18/12/2022
 42615                                  ;num_done:
 42616                                          ;retn
 42617                                  
 42618                                  ;----------------------------------------------------------------------------
 42619                                  ;
 42620                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 42621                                  ;
 42622                                  ;   INPUT
 42623                                  ;    ES:SI -> position in config.sys
 42624                                  ;       CX == remaining bytes in config.sys
 42625                                  ;
 42626                                  ;   OUTPUT
 42627                                  ;       AL == next character
 42628                                  ;    ES:SI -> just past next character
 42629                                  ;       CX == # bytes remaining from that point
 42630                                  ;
 42631                                  ;   OTHER REGS USED
 42632                                  ;       AX
 42633                                  ;
 42634                                  ;   NOTES
 42635                                  ;       None
 42636                                  ;
 42637                                  ;   HISTORY
 42638                                  ;       Created 16-Mar-1992 by JeffPar
 42639                                  ;
 42640                                  ;----------------------------------------------------------------------------
 42641                                  
 42642                                  get_char:
 42643 000040A3 83E901                          sub     cx,1            ; use SUB to set carry,zero
 42644 000040A6 7205                            jb	short get_fail	; out of data
 42645                                          ;lods	byte ptr es:[si] ;
 42646 000040A8 26                      	es	
 42647 000040A9 AC                      	lodsb
 42648 000040AA 88C4                            mov     ah,al           ;
 42649 000040AC C3                              retn			;
 42650                                  get_fail:                       ; restore CX to zero
 42651 000040AD B90000                          mov     cx,0            ; leave carry set, zero not set
 42652                                  nearby_ret:
 42653 000040B0 C3                              retn
 42654                                  
 42655                                  ;----------------------------------------------------------------------------
 42656                                  ;
 42657                                  ;   query_user: ask user whether to execute current config.sys command
 42658                                  ;
 42659                                  ;   INPUT
 42660                                  ;       AL == current command code
 42661                                  ;    ES:SI -> current command line in config.sys
 42662                                  ;    config_cmd == current command code, but with QUERY bit intact
 42663                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 42664                                  ;
 42665                                  ;   OUTPUT
 42666                                  ;       CF set if command should be ignored (it is also REM'ed out)
 42667                                  ;
 42668                                  ;   OTHER REGS USED
 42669                                  ;       BX, CX, DX, DI
 42670                                  ;
 42671                                  ;   NOTES
 42672                                  ;       None
 42673                                  ;
 42674                                  ;   HISTORY
 42675                                  ;       Created 16-Mar-1992 by JeffPar
 42676                                  ;
 42677                                  ;----------------------------------------------------------------------------
 42678                                  
 42679                                  	; 31/12/2022 - Retro UNIX 386 v4.2 (Modified MSDOS 6.21 IO.SYS)
 42680                                  	; (SYSINIT:4AE5h)
 42681                                  
 42682                                  	; 12/12/2022
 42683                                  query_user:
 42684 000040B1 F606[1B47]04                    test    byte [bQueryOpt],4	; answer no to everything?
 42685                                  	; 01/01/2023
 42686 000040B6 7403                    	jz	short qu_1		;
 42687 000040B8 E9B900                  	jmp	skip_all
 42688                                  	; 12/12/2022
 42689                                  	;;jmp	short skip_all		;
 42690                                  	;jnz	short skip_all
 42691                                  qu_1:
 42692 000040BB F606[1B47]02            	test    byte [bQueryOpt],2	; answer yes to everything?
 42693 000040C0 75EE                            jnz	short nearby_ret	; yes (and return carry clear!)
 42694 000040C2 50                              push    ax                      ;
 42695 000040C3 A0[C714]                        mov     al,[config_cmd]         ;
 42696 000040C6 F606[1B47]01                    test    byte [bQueryOpt],1	; query every command?
 42697 000040CB 7506                            jnz	short query_all		; yes
 42698 000040CD A880                            test    al,CONFIG_OPTION_QUERY  ;
 42699                                  	; 01/01/2023
 42700 000040CF 7502                    	jnz	short query_all		;
 42701                                  	; 12/12/2022
 42702                                  	;;jmp	short do_cmd		;
 42703                                  	;jz	short do_cmd ; cf=0
 42704                                  
 42705                                  	; 01/01/2023
 42706 000040D1 58                      	pop	ax
 42707 000040D2 C3                      	retn
 42708                                  
 42709                                  query_all:
 42710                                  
 42711                                  ;   Search for the command code (AL) in "comtab", and then print
 42712                                  ;   out the corresponding keyword, followed by the rest of the actual
 42713                                  ;   line pointed to by ES:SI
 42714                                  
 42715 000040D3 56                              push    si                      ; save pointer to rest of CONFIG.SYS line
 42716 000040D4 BA[CB4D]                        mov     dx,_$AutoPrmpt    	;
 42717 000040D7 247F                            and     al,~CONFIG_OPTION_QUERY ; 7Fh
 42718 000040D9 7450                            jz	short generic_prompt	; config_cmd must have been 0
 42719                                  
 42720 000040DB 88C6                            mov     dh,al                   ; save config_cmd in DH
 42721 000040DD 29DB                            sub     bx,bx                   ;
 42722 000040DF BF[6847]                        mov     di,comtab		;
 42723                                  find_match:                             ;
 42724 000040E2 8A1D                            mov     bl,[di]                 ; get size of current keyword
 42725 000040E4 08DB                            or      bl,bl                   ;
 42726 000040E6 7425                            jz	short line_print	; end of table
 42727 000040E8 47                              inc     di                      ;
 42728 000040E9 3A01                            cmp     al,[di+bx]              ; match?
 42729 000040EB 7405                            je	short cmd_match		; yes
 42730 000040ED 8D7901                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 42731                                  	; 13/05/2019	
 42732 000040F0 EBF0                            jmp	short find_match	; loop
 42733                                  cmd_match:                              ;
 42734 000040F2 8A4DFF                          mov     cl,[di-1]               ;
 42735 000040F5 B500                            mov	ch,0                    ;
 42736 000040F7 B402                            mov     ah,STD_CON_OUTPUT ; 2
 42737                                  cmd_print:                              ;
 42738 000040F9 8A05                            mov     al,[di]                 ;
 42739 000040FB 47                              inc     di                      ;
 42740 000040FC 88C2                            mov     dl,al                   ;
 42741 000040FE CD21                            int     21h                     ;
 42742 00004100 E2F7                            loop    cmd_print               ;
 42743 00004102 B23D                            mov     dl,'='                  ;
 42744 00004104 80FE56                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 42745 00004107 7502                            jne	short cmd_notset	;
 42746 00004109 B220                            mov     dl,' '                  ;
 42747                                  cmd_notset:
 42748 0000410B CD21                            int     21h                     ; '=' looks funny on SET commands
 42749                                  line_print:                             ;
 42750                                  	;lods	byte ptr es:[si]        ;
 42751 0000410D 26                              es
 42752 0000410E AC                      	lodsb
 42753 0000410F 08C0                    	or      al,al                   ;
 42754 00004111 7502                            jnz	short non_null		;
 42755 00004113 B020                            mov     al,' '                  ;
 42756                                  non_null:                               ;
 42757 00004115 3C20                            cmp     al,' '                  ; control code?
 42758 00004117 720F                            jb	short prompt_user	; yes, assume end of line
 42759 00004119 7505                            jne	short non_space		;
 42760                                          ; 10/09/2023
 42761 0000411B 263804                  	cmp	[es:si],al ; 20h
 42762                                  	;cmp	byte [es:si],' '	;
 42763 0000411E 7208                            jb	short prompt_user	;
 42764                                  non_space:                              ;
 42765 00004120 88C2                            mov     dl,al                   ;
 42766 00004122 B402                            mov     ah,STD_CON_OUTPUT ; 2	;
 42767 00004124 CD21                            int     21h                     ;
 42768 00004126 EBE5                            jmp	short line_print	;
 42769                                  
 42770                                  prompt_user:                            ;
 42771 00004128 BA[694D]                        mov     dx,_$InterPrmpt		;
 42772                                  
 42773                                  generic_prompt:
 42774 0000412B E8BB03                          call    print                   ;
 42775                                  input_loop:                             ;
 42776 0000412E B400                            mov     ah,0                    ; read a key
 42777 00004130 CD16                            int     16h                     ;
 42778 00004132 08C0                            or      al,al                   ; is it a function key?
 42779 00004134 750F                            jnz	short not_func		; no
 42780 00004136 80FC3F                          cmp     ah,3Fh                  ; F5 function key?
 42781 00004139 75F3                            jne	short input_loop	; no
 42782 0000413B A0[754D]                        mov     al,[_$NO]                  ;
 42783 0000413E 800E[1B47]04                    or      byte [bQueryOpt],4	; no more queries
 42784 00004143 EB21                            jmp     short legal_char        ;
 42785                                  not_func:
 42786 00004145 24DF                            and     al,~20h ; 0DFh		; converting to upper case
 42787 00004147 3A06[754D]                      cmp     al,[_$NO]		; verify character is legal
 42788 0000414B 7419                            je	short legal_char	;
 42789 0000414D 3A06[714D]                      cmp     al,[_$YES]		;
 42790 00004151 7413                            je	short legal_char	;
 42791 00004153 803E[C714]00                    cmp     byte [config_cmd],0	;
 42792 00004158 74D4                            je	short input_loop	; don't allow Esc on this query
 42793 0000415A 3C1B                            cmp     al,1Bh                  ; Esc?
 42794 0000415C 75D0                            jne	short input_loop	;
 42795 0000415E 800E[1B47]02                    or      byte [bQueryOpt],2	; no more interactive boot prompts
 42796 00004163 A0[714D]                        mov     al,[_$YES]
 42797                                  legal_char:                             ;
 42798 00004166 E888FE                          call    disp_input              ;
 42799 00004169 5E                              pop     si                      ; restore pointer to rest of CONFIG.SYS line
 42800                                  
 42801 0000416A 3A06[754D]                      cmp     al,[_$NO]		; process line?
 42802 0000416E 7403                            je	short skip_cmd		; no
 42803                                  	; 12/12/2022
 42804 00004170 F8                      	clc
 42805                                  do_cmd:
 42806 00004171 58                      	pop     ax			;
 42807                                  	; 12/12/2022
 42808                                  	; cf=0
 42809                                  	;clc				; just do the command
 42810 00004172 C3                      	retn
 42811                                  
 42812                                  skip_cmd:
 42813 00004173 58                      	pop     ax			;
 42814                                  skip_all:
 42815 00004174 B430                    	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 42816 00004176 F9                      	stc
 42817 00004177 C3                      	retn
 42818                                  
 42819                                  ;----------------------------------------------------------------------------
 42820                                  ;
 42821                                  ;   print_error: displays multi-config error conditions
 42822                                  ;
 42823                                  ;   INPUT
 42824                                  ;    Carry set to pause, clear to not
 42825                                  ;    ES:SI -> current command line in config.sys
 42826                                  ;
 42827                                  ;   OUTPUT
 42828                                  ;       None
 42829                                  ;
 42830                                  ;   OTHER REGS USED
 42831                                  ;       None
 42832                                  ;
 42833                                  ;   NOTES
 42834                                  ;       None
 42835                                  ;
 42836                                  ;   HISTORY
 42837                                  ;       Created 16-Mar-1992 by JeffPar
 42838                                  ;
 42839                                  ;----------------------------------------------------------------------------
 42840                                  
 42841                                  print_error:
 42842 00004178 50                              push    ax
 42843 00004179 53                              push    bx
 42844 0000417A 51                              push    cx
 42845 0000417B 52                              push    dx
 42846 0000417C 1E                              push    ds
 42847 0000417D 0E                              push    cs
 42848 0000417E 1F                              pop     ds
 42849 0000417F 9C                              pushf
 42850 00004180 E820FC                          call    get_linenum
 42851 00004183 891E[AF02]                      mov     [linecount],bx
 42852 00004187 E8C3E7                          call    error_line
 42853 0000418A 9D                              popf
 42854 0000418B 7319                            jnc	short pe_ret
 42855 0000418D BA[334C]                        mov     dx,_$PauseMsg
 42856 00004190 E85603                          call    print
 42857 00004193 B8070C                          mov     ax,0C07h		; flush input buffer, then wait for key
 42858 00004196 CD21                            int     21h			; wait for a key
 42859 00004198 08C0                            or      al,al			; extended key?
 42860 0000419A 7504                            jnz	short pe_1		; no
 42861 0000419C B407                            mov     ah,07h			; yes
 42862 0000419E CD21                            int     21h			; eat it too
 42863                                  pe_1:     
 42864 000041A0 BA[C64A]                	mov     dx,crlfm
 42865 000041A3 E84303                          call    print
 42866                                  pe_ret: 
 42867 000041A6 1F                      	pop     ds
 42868 000041A7 5A                              pop     dx
 42869 000041A8 59                              pop     cx
 42870 000041A9 5B                              pop     bx
 42871 000041AA 58                              pop     ax
 42872 000041AB C3                      	retn
 42873                                  
 42874                                  ;----------------------------------------------------------------------------
 42875                                  
 42876                                  ;   This function is very simple: it merely prepends a "/D" to the
 42877                                  ;   command-line for the shell; this (undocumented) switch disables
 42878                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 42879                                  ;   displayed when there's no AUTOEXEC.BAT.
 42880                                  
 42881                                  disable_autoexec:
 42882                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 42883                                  	; 17/04/2019 - Retro DOS v4.0
 42884                                  
 42885 000041AC F606[1B47]04            	test	byte [bQueryOpt],4
 42886 000041B1 7443                    	jz	short disable_exit
 42887 000041B3 F606[1147]01            	test	byte [dae_flag],1
 42888 000041B8 753C                    	jnz	short disable_exit
 42889 000041BA 800E[1147]01            	or	byte [dae_flag],1
 42890                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 42891 000041BF 810E[1B47]0201          	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 42892 000041C5 BA4420                  	mov     dx,'D ' ; 2044h
 42893                                  dae_1:
 42894                                  	; 03/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 42895 000041C8 A0[5046]                        mov	al,[def_swchr]
 42896                                  	;mov	al,[command_line-1]     ; get default switchchar
 42897 000041CB 08C0                            or      al,al                   ; anything there?
 42898 000041CD 7427                            jz	short disable_exit	; no, disable_autoexec already called
 42899 000041CF 8A1E[5146]                      mov     bl,[command_line]       ;
 42900 000041D3 B700                            mov     bh,0                    ; BX == command-line length
 42901 000041D5 89D9                            mov     cx,bx                   ;
 42902 000041D7 80C303                          add     bl,3                    ;
 42903 000041DA 80FB7E                          cmp     bl,126                  ;
 42904 000041DD 7717                            ja	short disable_exit	;
 42905 000041DF 881E[5146]                      mov     [command_line],bl       ; update length
 42906 000041E3 81C3[5246]                      add     bx,command_line+1	; make sure we move the NULL too
 42907 000041E7 41                              inc     cx                      ; (just for consistency sake)
 42908                                  disable_loop:                           ;
 42909 000041E8 8A67FD                          mov     ah,[bx-3]               ;
 42910 000041EB 8827                            mov     [bx],ah                 ;
 42911 000041ED 4B                              dec     bx                      ;
 42912 000041EE E2F8                            loop    disable_loop            ;
 42913 000041F0 8847FE                          mov     [bx-2],al               ;
 42914                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 42915 000041F3 8957FF                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 42916                                          ;mov	byte [command_line-1],0 ;
 42917                                  disable_exit:                           ;
 42918 000041F6 C3                              retn
 42919                                  
 42920                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 42921 000041F7 803E[1B47]01            	cmp     byte [bQueryOpt],1
 42922 000041FC 75F8                    	jnz     short disable_exit
 42923 000041FE F606[1147]02            	test	byte [dae_flag],2
 42924 00004203 75F1                    	jnz     short disable_exit
 42925 00004205 800E[1147]02            	or      byte [dae_flag],2
 42926                                  	;mov	dx,' Y' ; (MASM syntax) ; 2059h
 42927                                  	; 10/09/2023 (BugFix)
 42928 0000420A BA5920                  	mov	dx,'Y ' ; (NASM syntax) ; 2059h
 42929 0000420D EBB9                    	jmp     short dae_1
 42930                                  
 42931                                  ;endif  ;MULTI_CONFIG
 42932                                  
 42933                                  ;%endif	; 02/11/2022
 42934                                  
 42935                                  
 42936                                  ; 19/04/2019 - Retro DOS v4.0
 42937                                  
 42938                                  ;----------------------------------------------------------------------------
 42939                                  ;
 42940                                  ; procedure : delim
 42941                                  ;
 42942                                  ;----------------------------------------------------------------------------
 42943                                  
 42944                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 42945                                  ; (SYSINIT:4C45h)
 42946                                  
 42947                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42948                                  ;%if 0
 42949                                  ;;ifdef	MULTI_CONFIG
 42950                                  ;
 42951                                  any_delim:
 42952 0000420F 3C0D                    	cmp	al,cr
 42953 00004211 7427                    	je	short delim_ret
 42954 00004213 3C0A                    	cmp	al,lf
 42955 00004215 7423                    	je	short delim_ret
 42956 00004217 3C5B                    	cmp	al,'['
 42957 00004219 741F                    	je	short delim_ret
 42958 0000421B 3C5D                    	cmp	al,']'
 42959 0000421D 741B                    	je	short delim_ret
 42960                                  ;
 42961                                  ;;endif ;MULTI_CONFIG
 42962                                  ;%endif ; 02/11/2022
 42963                                  
 42964                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 42965                                  	; (SYSINIT:3450h)	
 42966                                  delim:
 42967 0000421F 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 42968 00004221 7417                    	je	short delim_ret
 42969                                  
 42970 00004223 3C00                    	cmp	al,0		; special case for sysinit!!!
 42971 00004225 7413                    	je	short delim_ret
 42972                                  
 42973                                  org_delim:			; used by organize routine except for getting
 42974 00004227 3C20                    	cmp	al,' '          ; the filename.
 42975 00004229 740F                    	je	short delim_ret
 42976 0000422B 3C09                            cmp     al,tab ; 9
 42977 0000422D 740B                    	je	short delim_ret
 42978 0000422F 3C3D                    	cmp	al,'='
 42979 00004231 7407                    	je	short delim_ret
 42980 00004233 3C2C                    	cmp	al,','
 42981 00004235 7403                    	je	short delim_ret
 42982 00004237 3C3B                    	cmp	al,';'
 42983                                  
 42984                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 42985                                  
 42986                                  ; 04/01/2023 - Retro DOS v4.2
 42987                                  ;ifdef	MULTI_CONFIG
 42988                                  ;   Make sure there's no chance of a false EOF indication
 42989 00004239 F8                      	clc
 42990                                  ;endif
 42991                                  	; 02/11/2022
 42992                                  delim_ret:
 42993                                  	; 04/01/2023
 42994                                  	; cf = 0
 42995                                  nl_ret:	; 10/09/2023
 42996 0000423A C3                      	retn
 42997                                  
 42998                                  ;----------------------------------------------------------------------------
 42999                                  ;
 43000                                  ; procedure : newline
 43001                                  ;
 43002                                  ;  newline returns with first character of next line
 43003                                  ;
 43004                                  ;----------------------------------------------------------------------------
 43005                                  
 43006                                  newline:
 43007 0000423B E80600                  	call	getchr			;skip non-control characters
 43008 0000423E 72FA                    	jc	short nl_ret
 43009 00004240 3C0A                    	cmp	al,lf			;look for line feed
 43010 00004242 75F7                    	jne	short newline
 43011                                  
 43012                                  	; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 43013                                  	;call	getchr
 43014                                  ;nl_ret:
 43015                                  	;retn
 43016                                  	; 10/09/2023
 43017                                  	;jmp	short getchr
 43018                                  
 43019                                  ; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 43020                                  %if 1
 43021                                  
 43022                                  ;----------------------------------------------------------------------------
 43023                                  ;
 43024                                  ; procedure : getchr
 43025                                  ;
 43026                                  ;----------------------------------------------------------------------------
 43027                                  
 43028                                  	; 24/10/2022
 43029                                  getchr:
 43030                                  	; 12/12/2022
 43031                                  	;push	cx
 43032                                  	;mov	cx,[count]
 43033                                  	;jcxz	nochar
 43034                                  	; 12/12/2022
 43035 00004244 833E[5603]01            	cmp	word [count],1 
 43036 00004249 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 43037                                  	
 43038 0000424B 8B36[5A03]              	mov	si,[chrptr]
 43039 0000424F 268A04                  	mov	al,[es:si]
 43040 00004252 FF0E[5603]              	dec	word [count]
 43041 00004256 FF06[5A03]              	inc	word [chrptr]
 43042                                  	; 12/12/202
 43043                                  	; cf=0
 43044                                  	;clc
 43045                                  ;get_ret:
 43046                                  	;pop	cx
 43047                                  	;retn
 43048                                  nochar: 
 43049                                  	; 12/12/2022
 43050                                  	; cf=1
 43051                                  	;stc
 43052                                  	;jmp	short get_ret
 43053                                  	
 43054 0000425A C3                      	retn
 43055                                  %endif
 43056                                  
 43057                                  ;----------------------------------------------------------------------------
 43058                                  ; 
 43059                                  ; procedure : mapcase
 43060                                  ;
 43061                                  ;----------------------------------------------------------------------------
 43062                                  
 43063                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 43064                                  
 43065                                  	; 04/01/2023 - Retro DOS 4.2 (Modified MSDOS 6.21 IO.SYS)
 43066                                  	; (SYSINIT:4C7Eh)
 43067                                  mapcase:
 43068 0000425B 51                      	push	cx
 43069 0000425C 56                      	push	si
 43070 0000425D 1E                      	push	ds
 43071                                  
 43072 0000425E 06                      	push	es
 43073 0000425F 1F                      	pop	ds
 43074                                  
 43075                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43076                                  
 43077                                  ; 04/01/2023 - Retro DOS 4.2
 43078                                  
 43079                                  ;ifdef	MULTI_CONFIG
 43080 00004260 88C3                    	mov	bl,al			; same cmd code this line
 43081                                  ;else
 43082                                  ;	xor	si,si
 43083                                  ;endif
 43084                                  	; 02/11/2022
 43085                                  	; 04/01/2023 - Retro DOS 4.2
 43086                                  	;xor	si, si
 43087                                  
 43088                                  convloop:
 43089 00004262 AC                      	lodsb
 43090 00004263 3C61                    	cmp	al,'a'
 43091 00004265 7209                    	jb	short noconv
 43092 00004267 3C7A                    	cmp	al,'z'
 43093 00004269 7705                    	ja	short noconv
 43094 0000426B 2C20                    	sub	al,20h
 43095 0000426D 8844FF                  	mov	[si-1],al
 43096                                  noconv:
 43097                                  
 43098                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43099                                  
 43100                                  ; 04/01/2023 - Retro DOS 4.2
 43101                                  ;ifdef	MULTI_CONFIG
 43102                                  
 43103                                  ;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 43104                                  ;   upper-case a line at a time, after we've been able to figure out whether
 43105                                  ;   the line is a SET command or not (since we don't want to upper-case
 43106                                  ;   anything after the "=" in a SET)
 43107                                  ;
 43108 00004270 80FB56                  	cmp	bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 43109 00004273 7504                    	jne	short check_eol		; no, just check for end-of-line
 43110 00004275 3C3D                    	cmp	al,'='                  ; separator between SET var and value?
 43111 00004277 740A                    	je	short convdone		; yes
 43112                                  check_eol:
 43113 00004279 3C0D                    	cmp	al,cr
 43114 0000427B 7406                    	je	short convdone
 43115 0000427D 3C0A                    	cmp	al,lf
 43116 0000427F 7402                    	je	short convdone
 43117                                  ;endif
 43118                                  	; 02/11/2022
 43119 00004281 E2DF                    	loop	convloop
 43120                                  convdone:
 43121 00004283 1F                      	pop	ds
 43122 00004284 5E                      	pop	si
 43123 00004285 59                      	pop	cx
 43124 00004286 C3                      	retn
 43125                                  
 43126                                  ;----------------------------------------------------------------------------
 43127                                  ;
 43128                                  ; procedure : round
 43129                                  ;
 43130                                  ; round the values in memlo and memhi to paragraph boundary.
 43131                                  ; perform bounds check.
 43132                                  ;
 43133                                  ;----------------------------------------------------------------------------
 43134                                  
 43135                                  round:
 43136                                  	; 10/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 43137 00004287 1E                      	push	ds
 43138 00004288 0E                      	push	cs
 43139 00004289 1F                      	pop	ds
 43140                                  
 43141 0000428A 50                      	push	ax
 43142                                  	;mov	ax,[cs:memlo]
 43143 0000428B A1[6203]                	mov	ax,[memlo]
 43144                                  
 43145 0000428E E8C9CE                  	call	ParaRound		; para round up
 43146                                  
 43147                                  	;add	[cs:memhi],ax
 43148 00004291 0106[6403]              	add	[memhi],ax
 43149                                  	;mov	word [cs:memlo],0
 43150 00004295 C706[6203]0000          	mov	word [memlo],0
 43151                                  	;mov	ax,[cs:memhi]		; ax = new memhi
 43152 0000429B A1[6403]                	mov	ax,[memhi]
 43153                                  	;cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 43154 0000429E 3B06[A502]              	cmp	ax,[ALLOCLIM]
 43155 000042A2 7320                    	jae	short mem_err
 43156                                  	;test	byte [cs:setdevmarkflag],for_devmark ; 2
 43157 000042A4 F606[CC14]02            	test	byte [setdevmarkflag],for_devmark ; 2
 43158 000042A9 7416                    	jz	short skip_set_devmarksize
 43159 000042AB 06                      	push	es
 43160 000042AC 56                      	push	si
 43161                                  	;mov	si,[cs:devmark_addr]
 43162 000042AD 8B36[CA14]              	mov	si,[devmark_addr]
 43163 000042B1 8EC6                    	mov	es,si
 43164 000042B3 29F0                    	sub	ax,si
 43165 000042B5 48                      	dec	ax
 43166                                  	;mov	[es:3],ax
 43167 000042B6 26A30300                	mov	[es:devmark.size],ax	; paragraph
 43168                                  	;and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 43169 000042BA 8026[CC14]FD            	and	byte [setdevmarkflag],not_for_devmark ; 0FDh
 43170 000042BF 5E                      	pop	si
 43171 000042C0 07                      	pop	es
 43172                                  skip_set_devmarksize:
 43173 000042C1 58                      	pop	ax
 43174                                  
 43175                                  	; 10/09/2023
 43176 000042C2 1F                      	pop	ds
 43177                                  
 43178                                  	; 11/12/2022
 43179                                  	; cf = 0
 43180                                  	; 02/11/2022
 43181                                  	;clc	; ? (not needed here)	; clear carry
 43182 000042C3 C3                      	retn
 43183                                  
 43184                                  ;----------------------------------------------------------------------------
 43185                                  
 43186                                  mem_err:
 43187                                  	; 11/12/2022
 43188 000042C4 0E                      	push	cs
 43189 000042C5 1F                      	pop	ds
 43190                                  mem_err2:
 43191 000042C6 BA[9F4B]                	mov	dx,badmem
 43192                                  	;push	cs
 43193                                  	;pop	ds
 43194 000042C9 E81D02                  	call	print
 43195 000042CC E9C4CE                  	jmp	stall
 43196                                  
 43197                                  ;----------------------------------------------------------------------------
 43198                                  ;
 43199                                  ; procedure : calldev
 43200                                  ;
 43201                                  ;----------------------------------------------------------------------------
 43202                                  
 43203                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 43204                                  	; (SYSINIT:34E0h)
 43205                                  calldev:
 43206 000042CF 2E8E1E[781F]            	mov	ds,[cs:DevEntry+2]
 43207 000042D4 2E031E[761F]            	add	bx,[cs:DevEntry]	; do a little relocation
 43208 000042D9 8B07                    	mov	ax,[bx]
 43209                                  
 43210 000042DB 2EFF36[761F]            	push	word [cs:DevEntry]
 43211 000042E0 2EA3[761F]              	mov	[cs:DevEntry],ax
 43212 000042E4 BB[6A03]                	mov	bx,packet
 43213 000042E7 2EFF1E[761F]            	call	far [cs:DevEntry]
 43214 000042EC 2E8F06[761F]            	pop	word [cs:DevEntry]
 43215 000042F1 C3                      	retn
 43216                                  
 43217                                  ;----------------------------------------------------------------------------
 43218                                  ;
 43219                                  ; procedure : todigit
 43220                                  ;
 43221                                  ;----------------------------------------------------------------------------
 43222                                  
 43223                                  todigit:
 43224 000042F2 2C30                    	sub	al,'0'
 43225                                  	;jb	short notdig  ; 02/11/2022
 43226                                  	; 12/12/2022
 43227 000042F4 7203                    	jb	short notdig2
 43228                                  	;cmp	al,9
 43229                                  	;ja	short notdig
 43230                                  	;clc
 43231                                  	;retn
 43232                                  	; 12/12/2022
 43233 000042F6 3C0A                    	cmp	al,10
 43234 000042F8 F5                      	cmc
 43235                                  notdig:
 43236                                  	;stc
 43237                                  notdig2:
 43238 000042F9 C3                      	retn
 43239                                  
 43240                                  ;----------------------------------------------------------------------------
 43241                                  ;
 43242                                  ; procedure : getnum
 43243                                  ;
 43244                                  ; getnum parses a decimal number.
 43245                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 43246                                  ; error), if number is bad carry is set, zero is set, ax=0.
 43247                                  ;
 43248                                  ;----------------------------------------------------------------------------
 43249                                  
 43250                                  getnum:
 43251 000042FA 53                      	push	bx
 43252 000042FB 31DB                    	xor	bx,bx			; running count is zero
 43253                                  b2:
 43254 000042FD E8F2FF                  	call	todigit 		; do we have a digit ?
 43255 00004300 7247                    	jc	short badnum		; no, bomb
 43256                                  
 43257 00004302 93                      	xchg	ax,bx			; put total in ax
 43258 00004303 53                      	push	bx			; save digit (0 to 9)
 43259                                  	;mov	bx,10			; base of arithmetic
 43260                                  	; 12/12/2022
 43261 00004304 B30A                    	mov	bl,10
 43262 00004306 F7E3                    	mul	bx			; shift by one decimal digit
 43263 00004308 5B                      	pop	bx			; get back digit (0 to 9)
 43264 00004309 00D8                    	add	al,bl			; get total
 43265 0000430B 80D400                  	adc	ah,0			; make that 16 bits
 43266 0000430E 7239                    	jc	short badnum		; too big a number
 43267                                  
 43268 00004310 93                      	xchg	ax,bx			; stash total
 43269                                  
 43270 00004311 E830FF                  	call	getchr			;get next digit
 43271 00004314 722D                    	jc	short b1		; no more characters
 43272 00004316 3C20                    	cmp	al,' ' 			; space?
 43273 00004318 741F                    	je	short b15		; then end of digits
 43274 0000431A 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 43275 0000431C 741B                    	je	short b15		; then end of digits.
 43276 0000431E 3C09                    	cmp	al, tab ; 9		; tab
 43277 00004320 7417                    	je	short b15
 43278 00004322 2E3A06[AE02]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 43279 00004327 7410                    	je	short b15
 43280 00004329 3C2F                    	cmp	al,'/'			; see if another switch follows
 43281                                  	; 12/12/2022
 43282                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43283                                  	;nop				; cas - remnant of old bad code
 43284                                  	;nop
 43285 0000432B 740C                    	je	short b15
 43286 0000432D 3C0A                    	cmp	al,lf			; line-feed?
 43287 0000432F 7408                    	je	short b15
 43288 00004331 3C0D                    	cmp	al,cr			; carriage return?
 43289 00004333 7404                    	je	short b15
 43290 00004335 08C0                    	or	al,al			; end of line separator?
 43291 00004337 75C4                    	jnz	short b2		; no, try as a valid char...
 43292                                  b15:
 43293 00004339 2EFF06[5603]            	inc	word [cs:count]		; one more character to s...
 43294 0000433E 2EFF0E[5A03]            	dec	word [cs:chrptr]	; back up over separator
 43295                                  b1:
 43296 00004343 89D8                    	mov	ax,bx			; get proper count
 43297 00004345 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 43298 00004347 5B                      	pop	bx
 43299 00004348 C3                      	retn
 43300                                  badnum:
 43301                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43302                                  	;mov	byte [cs:sepchr],0
 43303 00004349 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 43304                                  	; 12 /12/2022
 43305 0000434B 2EA2[AE02]              	mov	[cs:sepchr],al ; 0
 43306 0000434F 5B                      	pop	bx
 43307 00004350 F9                      	stc				; and carry set
 43308 00004351 C3                      	retn
 43309                                  
 43310                                  ;****************************************************************************
 43311                                  
 43312                                  setdoscountryinfo:
 43313                                  
 43314                                  ;----------------------------------------------------------------------------
 43315                                  ;input: es:di -> pointer to dos_country_cdpg_info
 43316                                  ;	ds:0  -> buffer.
 43317                                  ;	si = 0
 43318                                  ;	ax = country id
 43319                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 43320                                  ;	bx = file handle
 43321                                  ;	this routine can handle maximum 438 country_data entries.
 43322                                  ;
 43323                                  ;output: dos_country_cdpg_info set.
 43324                                  ;	 carry set if any file read failure or wrong information in the file.
 43325                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 43326                                  ;	 codepage_id in the file.
 43327                                  ;----------------------------------------------------------------------------
 43328                                  
 43329                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43330                                  	; (SYSINIT:4D83h)
 43331                                  
 43332                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43333                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:4FCAh)	
 43334                                  
 43335 00004352 57                      	push	di
 43336 00004353 50                      	push	ax
 43337 00004354 52                      	push	dx
 43338                                  
 43339 00004355 31C9                    	xor	cx,cx
 43340 00004357 31D2                    	xor	dx,dx
 43341 00004359 B80002                  	mov	ax,512			;read 512 bytes
 43342 0000435C E84301                  	call	readincontrolbuffer	;read the file header
 43343 0000435F 724A                    	jc	short setdosdata_fail
 43344                                  
 43345 00004361 06                      	push	es
 43346 00004362 56                      	push	si
 43347                                  
 43348 00004363 0E                      	push	cs
 43349 00004364 07                      	pop	es
 43350                                  
 43351 00004365 BF[B645]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 43352 00004368 B90800                  	mov	cx,8			;length of the signature
 43353 0000436B F3A6                    	repz	cmpsb
 43354                                  
 43355 0000436D 5E                      	pop	si
 43356 0000436E 07                      	pop	es
 43357 0000436F 753A                    	jnz	short setdosdata_fail 	;signature mismatch
 43358                                  
 43359 00004371 83C612                  	add	si,18			;si -> county info type
 43360 00004374 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 43361 00004377 7532                    	jne	short setdosdata_fail 	;cannot proceed. error return
 43362                                  
 43363 00004379 46                      	inc	si			;si -> file offset
 43364 0000437A 8B14                    	mov	dx,[si]			;get the info file offset.
 43365 0000437C 8B4C02                  	mov	cx,[si+2]
 43366 0000437F B80018                  	mov	ax,6144			;read 6144 bytes.
 43367 00004382 E81D01                  	call	readincontrolbuffer	;read info
 43368 00004385 7224                    	jc	short setdosdata_fail
 43369                                  
 43370 00004387 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 43371 00004389 81F9B601                	cmp	cx,438			;cannot handle more than 438 entries.
 43372 0000438D 771C                    	ja	short setdosdata_fail
 43373                                  
 43374 0000438F 46                      	inc	si
 43375 00004390 46                      	inc	si			;si -> entry information packet
 43376 00004391 5A                      	pop	dx			;restore code page id
 43377 00004392 58                      	pop	ax			;restore country id
 43378 00004393 5F                      	pop	di
 43379                                  
 43380                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 43381 00004394 3B4402                  	cmp	ax,[si+2]		;compare country_id
 43382 00004397 7509                    	jne	short setdoscntry_next
 43383                                  
 43384                                  	;cmp	dx,0			;no user specified code page ?
 43385                                  	;je	short setdoscntry_any_codepage ;then no need to match code page id.
 43386                                  	; 10/09/2023
 43387 00004399 09D2                    	or	dx,dx ; cmp dx,0
 43388 0000439B 7413                    	jz	short setdoscntry_any_codepage
 43389 0000439D 3B5404                  	cmp	dx,[si+4]		;compare code page id
 43390 000043A0 7411                    	je	short setdoscntry_got_it
 43391                                  
 43392                                  setdoscntry_next:
 43393 000043A2 0334                    	add	si,[si]			;next entry
 43394 000043A4 46                      	inc	si
 43395 000043A5 46                      	inc	si			;take a word for size of entry itself
 43396 000043A6 E2EC                    	loop	setdoscntry_find
 43397                                  
 43398                                  	;mov	cx,-1			;signals that bad country id entered.
 43399                                  	; 10/09/2023
 43400 000043A8 49                      	dec	cx ; 0 -> -1
 43401                                  setdoscntry_fail:
 43402 000043A9 F9                      	stc
 43403 000043AA C3                      	retn
 43404                                  
 43405                                  setdosdata_fail:
 43406 000043AB 5E                      	pop	si
 43407 000043AC 59                      	pop	cx
 43408 000043AD 5F                      	pop	di
 43409 000043AE EBF9                    	jmp	short setdoscntry_fail
 43410                                  
 43411                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 43412 000043B0 8B5404                  	mov	dx,[si+4]
 43413                                  
 43414                                  setdoscntry_got_it:			;found the matching entry
 43415 000043B3 2E8916[BE45]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 43416 000043B8 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 43417 000043BB 8B4C0C                  	mov	cx,[si+12]
 43418 000043BE B80002                  	mov	ax,512 			;read 512 bytes
 43419 000043C1 E8DE00                  	call	readincontrolbuffer
 43420 000043C4 72E3                    	jc	short setdoscntry_fail
 43421                                  
 43422 000043C6 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 43423 000043C8 46                      	inc	si
 43424 000043C9 46                      	inc	si			;si -> first entry
 43425                                  
 43426                                  setdoscntry_data:
 43427 000043CA 57                      	push	di			;es:di -> dos_country_cdpg_info
 43428 000043CB 51                      	push	cx			;save # of entry left
 43429 000043CC 56                      	push	si			;si -> current entry in control buffer
 43430                                  
 43431 000043CD 8A4402                  	mov	al,[si+2]		;get data entry id
 43432 000043D0 E8A400                  	call	getcountrydestination	;get the address of destination in es:di
 43433 000043D3 727C                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 43434                                  
 43435 000043D5 8B5404                  	mov	dx,[si+4]		;get offset of data
 43436 000043D8 8B4C06                  	mov	cx,[si+6]
 43437 000043DB B80042                  	mov	ax,4200h
 43438 000043DE F9                      	stc
 43439 000043DF CD21                    	int	21h			;move pointer
 43440 000043E1 72C8                    	jc	short setdosdata_fail
 43441                                  
 43442 000043E3 BA0002                  	mov	dx,512			;start of data buffer
 43443 000043E6 B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 43444 000043E9 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 43445 000043EB F9                      	stc
 43446 000043EC CD21                    	int	21h			;read the country.sys data
 43447 000043EE 72BB                    	jc	short setdosdata_fail 	;read failure
 43448                                  
 43449 000043F0 39C8                    	cmp	ax,cx
 43450 000043F2 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 43451                                  
 43452 000043F4 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 43453 000043F7 8B4C06                  	mov	cx,[si+6]
 43454 000043FA B80042                  	mov	ax,4200h
 43455 000043FD F9                      	stc
 43456 000043FE CD21                    	int	21h			;move pointer back again
 43457 00004400 72A9                    	jc	short setdosdata_fail
 43458                                  
 43459 00004402 56                      	push	si
 43460 00004403 BE0802                  	mov	si,(512+8)		;get length of the data from the file
 43461 00004406 8B0C                    	mov	cx,[si]
 43462 00004408 5E                      	pop	si
 43463 00004409 BA0002                  	mov	dx,512			;start of data buffer
 43464 0000440C 83C10A                  	add	cx,10			;signature + a word for the length itself
 43465 0000440F B43F                    	mov	ah,3Fh			;read the data from the file.
 43466 00004411 F9                      	stc
 43467 00004412 CD21                    	int	21h
 43468 00004414 7295                    	jc	short setdosdata_fail
 43469                                  
 43470 00004416 39C8                    	cmp	ax,cx
 43471 00004418 7591                    	jne	short setdosdata_fail
 43472                                  
 43473 0000441A 8A4402                  	mov	al,[si+2]		;save data id for future use.
 43474 0000441D BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 43475 00004420 8B0C                    	mov	cx,[si]			;get the length of the file
 43476 00004422 41                      	inc	cx			;take care of a word for lenght of tab
 43477 00004423 41                      	inc	cx			;itself.
 43478 00004424 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 43479 00004428 7781                    	ja	short setdosdata_fail
 43480                                  
 43481                                  	;if	bugfix
 43482 0000442A E83100                  	call	setdbcs_before_copy
 43483                                  	;endif
 43484                                  
 43485 0000442D 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 43486 0000442F 7511                    	jne	short setdoscntry_mov 	;no, don't worry
 43487                                  
 43488 00004431 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 43489                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 43490 00004435 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 43491                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 43492                                  	
 43493 00004439 57                      	push	di			;save di
 43494                                  
 43495                                  	;push	ax
 43496                                  	;mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 43497                                  	;mov	[si+4],ax		;use the saved one for this !!!!
 43498                                  	;pop	ax
 43499                                  	; 10/09/2023
 43500 0000443A 2EFF36[BE45]            	push	word [cs:cntrycodepage_id]
 43501 0000443F 8F4404                  	pop	word [si+4]
 43502                                  
 43503                                  setdoscntry_mov:
 43504 00004442 F3A4                    	rep	movsb			;copy the table into dos
 43505 00004444 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 43506 00004446 7509                    	jne	short setdoscntry_data_next
 43507                                  
 43508 00004448 5F                      	pop	di			;restore di
 43509 00004449 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 43510                                  	;pop	word [es:di+26]		;restore
 43511 0000444D 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 43512                                  	;pop	word [es:di+24]
 43513                                  
 43514                                  setdoscntry_data_next:
 43515 00004451 5E                      	pop	si			;restore control buffer pointer
 43516 00004452 59                      	pop	cx			;restore # of entries left
 43517 00004453 5F                      	pop	di			;restore pointer to dso_country_cdpg
 43518 00004454 0334                    	add	si,[si]			;try to get the next entry
 43519 00004456 46                      	inc	si
 43520 00004457 46                      	inc	si			;take a word of entry length itself
 43521 00004458 49                      	dec	cx
 43522                                  	; 10/09/2023
 43523 00004459 741B                    	jz	short setdoscntry_ok 
 43524                                  	;cmp	cx,0
 43525                                  	;je	short setdoscntry_ok
 43526 0000445B E96CFF                  	jmp	setdoscntry_data
 43527                                  
 43528                                  	; 18/12/2022
 43529                                  ;setdoscntry_ok:
 43530                                  	;retn
 43531                                  
 43532                                  ;----------------------------------------------------------------------------
 43533                                  	
 43534                                  	;if	bugfix
 43535                                  
 43536                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43537                                  
 43538                                  setdbcs_before_copy:
 43539 0000445E 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 43540 00004460 7514                    	jne	short sdbcsbc		; jump if not
 43541                                  	
 43542                                  	; 10/09/2023
 43543 00004462 50                      	push	ax
 43544 00004463 31C0                    	xor	ax,ax
 43545 00004465 263905                  	cmp	[es:di],ax ; 0
 43546 00004468 740B                    	je	short sdbcsbc_pop
 43547                                  	
 43548                                  	;cmp	word [es:di],0		; zero byte data block?
 43549                                  	;je	short sdbcsbc		; jump if so
 43550                                  
 43551 0000446A 57                      	push	di
 43552                                  	; 10/09/2023
 43553                                  	;push	ax
 43554 0000446B 51                      	push	cx
 43555 0000446C 268B0D                  	mov	cx,[es:di]		; load block length
 43556                                  	;add	di,2			; points actual data
 43557 0000446F 47                      	inc	di
 43558 00004470 47                      	inc	di
 43559                                  	;xor	al,al			; fill bytes
 43560 00004471 F3AA                    	rep	stosb			; clear data block
 43561 00004473 59                      	pop	cx
 43562                                  	;pop	ax
 43563 00004474 5F                      	pop	di
 43564                                  
 43565                                  sdbcsbc_pop:	; 10/09/2023
 43566 00004475 58                      	pop	ax
 43567                                  sdbcsbc:
 43568                                  setdoscntry_ok:	; 18/12/2022
 43569 00004476 C3                      	retn
 43570                                  
 43571                                  	;endif
 43572                                  
 43573                                  ;----------------------------------------------------------------------------
 43574                                  
 43575                                  getcountrydestination:
 43576                                  
 43577                                  ;----------------------------------------------------------------------------
 43578                                  ;get the destination address in the dos country info table.
 43579                                  ;
 43580                                  ;input: al - data id
 43581                                  ;	es:di -> dos_country_cdpg_info
 43582                                  ;on return:
 43583                                  ;	es:di -> destination address of the matching data id
 43584                                  ;	carry set if no matching data id found in dos.
 43585                                  ;----------------------------------------------------------------------------
 43586                                  
 43587                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43588                                  	; (SYSINIT:4EB2h)
 43589                                  
 43590                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43591                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:50F9h)
 43592                                  
 43593 00004477 51                      	push	cx
 43594                                  	;add	di,74
 43595 00004478 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 43596                                  					;skip the reserved area, syscodepage etc.
 43597 0000447B 268B0D                  	mov	cx,[es:di]		;get the number of entries
 43598 0000447E 47                      	inc	di
 43599 0000447F 47                      	inc	di			;si -> the first start entry id
 43600                                  
 43601                                  getcntrydest:
 43602 00004480 263805                  	cmp	byte [es:di],al
 43603 00004483 7413                    	je	short getcntrydest_ok
 43604                                  
 43605 00004485 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 43606 00004489 7405                    	je	short getcntrydest_1
 43607                                  
 43608 0000448B 83C705                  	add	di,5			;next data id
 43609 0000448E EB03                    	jmp	short getcntrydest_loop
 43610                                  
 43611                                  getcntrydest_1:
 43612                                  	;add	di,41
 43613 00004490 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 43614                                  getcntrydest_loop:
 43615 00004493 E2EB                    	loop	getcntrydest
 43616 00004495 F9                      	stc
 43617                                  	;jmp	short getcntrydest_exit
 43618                                  getcntrydest_exit:
 43619                                  	; 10/09/2023
 43620 00004496 59                      	pop	cx
 43621 00004497 C3                      	retn
 43622                                  
 43623                                  getcntrydest_ok:
 43624                                  	; 10/09/2023
 43625 00004498 47                      	inc	di
 43626                                  
 43627                                  ;	cmp	al,SetCountryInfo ; 1	;select country info?
 43628                                  ;	jne	short getcntrydest_ok1
 43629                                  ;
 43630                                  ;	;inc	di			;now di -> cccountryinfolen
 43631                                  ;	jmp	short getcntrydest_exit
 43632                                  
 43633                                  	; 10/09/2023
 43634 00004499 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 43635 0000449B 74F9                    	je	short getcntrydest_exit
 43636                                  
 43637                                  getcntrydest_ok1:
 43638                                  	;les	di,[es:di+1]		;get the destination in es:di
 43639                                  	; 10/09/2023
 43640 0000449D 26C43D                  	les	di,[es:di]
 43641                                  ;getcntrydest_exit:
 43642 000044A0 59                      	pop	cx
 43643 000044A1 C3                      	retn
 43644                                  
 43645                                  ;----------------------------------------------------------------------------
 43646                                  
 43647                                  readincontrolbuffer:
 43648                                  
 43649                                  ;----------------------------------------------------------------------------
 43650                                  ;move file pointer to cx:dx
 43651                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 43652                                  ;si will be set to 0 hence ds:si points to the control buffer.
 43653                                  ;
 43654                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 43655                                  ;	 be moved.
 43656                                  ;	 ax - # of bytes to read
 43657                                  ;	 bx - file handle
 43658                                  ;	 ds - buffer seg.
 43659                                  ;return: the control data information is read into ds:0 - ds:0200.
 43660                                  ;	 cx,dx value destroyed.
 43661                                  ;	 carry set if error in reading file.
 43662                                  ;----------------------------------------------------------------------------
 43663                                  
 43664 000044A2 50                      	push	ax			;# of bytes to read
 43665 000044A3 B80042                  	mov	ax,4200h
 43666 000044A6 F9                      	stc
 43667 000044A7 CD21                    	int	21h			;move pointer
 43668 000044A9 59                      	pop	cx			;# of bytes to read
 43669 000044AA 7209                    	jc	short ricb_exit
 43670                                  
 43671 000044AC 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 43672 000044AE 31F6                    	xor	si,si
 43673 000044B0 B43F                    	mov	ah,3Fh			;read into the buffer
 43674 000044B2 F9                      	stc
 43675 000044B3 CD21                    	int	21h			;should be less than 1024 bytes.
 43676                                  ricb_exit:
 43677 000044B5 C3                      	retn
 43678                                  
 43679                                  ;----------------------------------------------------------------------------
 43680                                  
 43681                                  ;! set_country_path procedure is not called from anywhere !
 43682                                  ; Erdogan Tan - 04/08/2023
 43683                                  %if 0
 43684                                  
 43685                                  set_country_path:
 43686                                  
 43687                                  ;----------------------------------------------------------------------------
 43688                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 43689                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 43690                                  ;     assumes current directory is the root directory.
 43691                                  ;out: ds:di -> full path (cntry_drv).
 43692                                  ;     set the cntry_drv string from the country=,,path command.
 43693                                  ;     ds, es, si value saved.
 43694                                  ;----------------------------------------------------------------------------
 43695                                  
 43696                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 43697                                  	; (SYSINIT:4EF4h)
 43698                                  
 43699                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43700                                  	; (Retrodos v5.0 Pre-Works)
 43701                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:513Bh)
 43702                                  
 43703                                  	push	si
 43704                                  
 43705                                  	push	ds			;switch ds, es
 43706                                  	push	es
 43707                                  	pop	ds
 43708                                  	pop	es			;now ds -> confbot, es -> sysinitseg
 43709                                  
 43710                                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 43711                                  	jc	short scp_default_drv 	;no, use current default drive.
 43712                                  
 43713                                  	mov	al,[si]
 43714                                  	inc	si
 43715                                  	inc	si			;si -> next char after ":"
 43716                                  	jmp	short scp_setdrv
 43717                                  
 43718                                  scp_default_drv:
 43719                                  	mov	ah,19h
 43720                                  	int	21h
 43721                                  	add	al,"A"			;convert it to a character.
 43722                                  
 43723                                  scp_setdrv:
 43724                                  	mov	[cs:cntry_drv],al	;set the drive letter.
 43725                                  	mov	di,cntry_path
 43726                                  	mov	al,[si]
 43727                                  	cmp	al, "\"
 43728                                  	je	short scp_root_dir
 43729                                  
 43730                                  	cmp	al,"/"			;let's accept "/" as an directory delim
 43731                                  	;je	short scp_root_dir
 43732                                  	;jmp	short scp_path
 43733                                  	; 04/01/2023
 43734                                  	jne	short scp_path
 43735                                  
 43736                                  scp_root_dir:
 43737                                  	dec	di			;di -> cntry_root
 43738                                  scp_path:
 43739                                  	call	move_asciiz		;copy it
 43740                                  
 43741                                  	mov	di,cntry_drv
 43742                                  scpath_exit:
 43743                                  
 43744                                  	push	ds			;switch ds, es
 43745                                  	push	es
 43746                                  	pop	ds
 43747                                  	pop	es			;ds, es value restored
 43748                                  
 43749                                  	pop	si
 43750                                  	retn
 43751                                  
 43752                                  ;----------------------------------------------------------------------------
 43753                                  
 43754                                  chk_drive_letter:
 43755                                  
 43756                                  ;check if ds:[si] is a drive letter followed by ":".
 43757                                  ;assume that every alpha character is already converted to upper case.
 43758                                  ;carry set if not.
 43759                                  
 43760                                  	; 04/01/2023 - Retrodos v4.2
 43761                                  
 43762                                  	push	ax
 43763                                  	cmp	byte [si],"A"
 43764                                  	;jb	short cdletter_no
 43765                                  	jb	short cdletter_exit
 43766                                  	cmp	byte [si],"Z"
 43767                                  	ja	short cdletter_no
 43768                                  	cmp	byte [si+1],":"
 43769                                  	;jne	short cdletter_no
 43770                                  	;jmp	short cdletter_exit
 43771                                  	; 04/01/2023
 43772                                  	je	short cdletter_exit
 43773                                  
 43774                                  cdletter_no:
 43775                                  	stc
 43776                                  cdletter_exit:
 43777                                  	pop	ax
 43778                                  	retn
 43779                                  
 43780                                  %endif
 43781                                  
 43782                                  ;----------------------------------------------------------------------------
 43783                                  
 43784                                  move_asciiz:
 43785                                  
 43786                                  ;in: ds:si -> source es:di -> target
 43787                                  ;out: copy the string until 0.
 43788                                  ;assumes there exists a 0.
 43789                                  
 43790                                  	; 10/09/2023 - Retrodos v4.2 IO.SYS (Optimization)
 43791                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:4F40h)
 43792                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:5187h)
 43793                                  
 43794                                  masciiz_loop:
 43795                                  	; 10/09/2023
 43796 000044B6 F604FF                  	test	byte [si],0FFh
 43797 000044B9 A4                      	movsb
 43798                                  	;cmp	byte [si-1],0	; was it 0?
 43799                                  	;jne	short masciiz_loop
 43800 000044BA 75FA                    	jnz	short masciiz_loop ; 10/09/2023
 43801 000044BC C3                      	retn
 43802                                  
 43803                                  ;----------------------------------------------------------------------------
 43804                                  
 43805                                  ;	ds:dx points to string to output (asciz)
 43806                                  ;
 43807                                  ;	prints <badld_pre> <string> <badld_post>
 43808                                  
 43809                                  badfil:
 43810 000044BD 0E                      	push	cs
 43811 000044BE 07                      	pop	es
 43812                                  
 43813 000044BF 89D6                    	mov	si,dx
 43814                                  badload:
 43815 000044C1 BA[094B]                	mov	dx,badld_pre	; want to print config error
 43816 000044C4 BB[C64A]                	mov	bx,crlfm
 43817                                  prnerr:
 43818 000044C7 0E                      	push	cs
 43819 000044C8 1F                      	pop	ds ; *
 43820 000044C9 E81D00                  	call	print
 43821                                  prn1:
 43822 000044CC 268A14                  	mov	dl,[es:si]
 43823 000044CF 08D2                    	or	dl,dl
 43824 000044D1 7407                    	jz	short prn2
 43825 000044D3 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 43826 000044D5 CD21                    	int	21h
 43827 000044D7 46                      	inc	si
 43828 000044D8 EBF2                    	jmp	short prn1
 43829                                  prn2:
 43830 000044DA 89DA                    	mov	dx,bx
 43831 000044DC E80A00                  	call	print
 43832                                  	; 11/12/2022
 43833                                  	; ds = cs ; *
 43834 000044DF 803E[5503]01            	cmp	byte [donotshownum],1
 43835                                  				; suppress line number when handling command.com
 43836                                  	;cmp	byte [cs:donotshownum],1 
 43837 000044E4 7407                    	je	short prnexit
 43838                                  	
 43839                                  	; 18/12/2022
 43840                                  	;call	error_line
 43841 000044E6 E964E4                  	jmp	error_line
 43842                                  ;prnexit:
 43843                                  	;retn
 43844                                  
 43845                                  ;----------------------------------------------------------------------------
 43846                                  
 43847                                  print:
 43848 000044E9 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 43849 000044EB CD21                    	int	21h
 43850                                  prnexit:	; 18/12/2022
 43851 000044ED C3                      	retn
 43852                                  
 43853                                  ;----------------------------------------------------------------------------
 43854                                  
 43855                                  ;  open device pointed to by dx, al has access code
 43856                                  ;   if unable to open do a device open null device instead
 43857                                  
 43858                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 43859                                  	; (SYSINIT:3764h)
 43860                                  open_dev:
 43861 000044EE E80500                  	call	open_file
 43862 000044F1 7309                    	jnc	short open_dev3
 43863                                  
 43864                                  open_dev1:
 43865 000044F3 BA[5745]                	mov	dx,nuldev
 43866                                  	; 18/12/2022
 43867                                  	;call	open_file
 43868                                  ;of_retn:
 43869                                  	;retn
 43870                                  	; 18/12/2022
 43871                                  	;jmp	short open_file
 43872                                  open_file:
 43873 000044F6 B43D                    	mov	ah,OPEN	; 3Dh
 43874 000044F8 F9                      	stc
 43875 000044F9 CD21                    	int	21h
 43876                                  of_retn:	; 18/12/2022
 43877 000044FB C3                      	retn
 43878                                  
 43879                                  open_dev3:
 43880 000044FC 89C3                    	mov	bx,ax			; handle from open to bx
 43881                                  	;;xor	ax,ax			; get device info
 43882                                  	;;mov	ah,IOCTL ; 44h
 43883                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 43884                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43885                                  	;xor	ax,ax
 43886                                  	;mov	ah,44h	; IOCTL
 43887                                  	; 11/12/2022
 43888 000044FE B80044                  	mov	ax,4400h ; IOCTL<<8 
 43889                                  
 43890 00004501 CD21                    	int	21h
 43891                                  
 43892 00004503 F6C280                  	test	dl,10000000b ; 80h
 43893 00004506 75F3                    	jnz	short of_retn
 43894                                  
 43895 00004508 B43E                    	mov	ah,CLOSE ; 3Eh
 43896 0000450A CD21                    	int	21h
 43897 0000450C EBE5                    	jmp	short open_dev1
 43898                                  
 43899                                  ;----------------------------------------------------------------------------
 43900                                  
 43901                                  ; 18/12/2022
 43902                                  %if 0
 43903                                  open_file:
 43904                                  	mov	ah,OPEN	; 3Dh
 43905                                  	stc
 43906                                  	int	21h
 43907                                  	retn
 43908                                  %endif
 43909                                  
 43910                                  ;----------------------------------------------------------------------------
 43911                                  
 43912                                  ; test int24. return back to dos with the fake user response of "fail"
 43913                                  
 43914                                  int24:
 43915 0000450E B003                    	mov	al,3			; fail the system call
 43916 00004510 CF                      	iret				; return back to dos.
 43917                                  
 43918                                  ; 19/04/2019 - Retro DOS v4.0
 43919                                  
 43920                                  ;----------------------------------------------------------------------------
 43921                                  ; DATA
 43922                                  ;----------------------------------------------------------------------------
 43923                                  
 43924                                  ;include copyrigh.inc			; copyright statement
 43925                                  
 43926                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 43927                                  
 43928                                  ;MsDosVersion6Copyr:
 43929                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 43930                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 43931                                  
 43932                                  ; 22/10/2022
 43933                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 43934                                  
 43935                                  ; 28/12/2022
 43936                                  %if 0
 43937                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43938                                  MsDosVersion5Copyr:
 43939                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 43940                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 43941                                  %endif
 43942                                  
 43943                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 43944                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 43945                                  ; 20/04/2019 - Retro DOS v4.0
 43946                                  ;BOOTMES:
 43947                                  ;	db      13
 43948                                  ;	db      10
 43949                                  ;	db      "MS-DOS version "
 43950                                  ;	db      MAJOR_VERSION + "0"
 43951                                  ;	db      "."
 43952                                  ;	db      (MINOR_VERSION / 10) + "0"
 43953                                  ;	db      (MINOR_VERSION % 10) + "0"
 43954                                  ;	db      13,10
 43955                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 43956                                  ;	; 22/10/2022
 43957                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 43958                                  ;	;
 43959                                  ;	db	0
 43960                                  
 43961                                  	; 01/01/2023 - Retro DOS v4.2
 43962                                  
 43963                                  	; 28/12/2022 - Retro DOS v4.1
 43964                                  ;MsDosVersion5Copyr:
 43965                                  ;  	db	13,10,"MS DOS Version 5.0"
 43966                                  ;	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
 43967                                  
 43968                                  	; 12/12/2022
 43969 00004511 00                      	db	0
 43970                                  ; 12/12/2022
 43971                                  BOOTMES:
 43972 00004512 0D0A                    	db	13,10
 43973                                  	;;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 43974                                  	; 28/12/2022
 43975                                  	;db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 43976                                  	; 01/01/2023
 43977 00004514 526574726F20444F53-     	db 	"Retro DOS v4.2 (Modified MSDOS 6.22) "
 43977 0000451D 2076342E3220284D6F-
 43977 00004526 646966696564204D53-
 43977 0000452F 444F5320362E323229-
 43977 00004538 20                 
 43978                                  	
 43979 00004539 0D0A                    	db	13,10
 43980 0000453B 6279204572646F6761-     	db	"by Erdogan Tan [2023] "
 43980 00004544 6E2054616E205B3230-
 43980 0000454D 32335D20           
 43981 00004551 0D0A                    	db	13,10
 43982 00004553 0D0A2400                	db	13,10,"$",0
 43983                                  
 43984 00004557 4E554C00                nuldev:	db	"NUL",0
 43985 0000455B 434F4E00                condev:	db	"CON",0
 43986 0000455F 41555800                auxdev:	db	"AUX",0
 43987 00004563 50524E00                prndev:	db	"PRN",0
 43988                                  
 43989                                  ;IFDEF	CONFIGPROC
 43990 00004567 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 43990 00004570 595300             
 43991                                  
 43992 00004573 413A                    cntry_drv:  db	"A:"
 43993 00004575 5C                      cntry_root: db	"\"
 43994 00004576 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 43994 0000457F 595300             
 43995                                  	    ;db	52 dup (0)
 43996 00004582 00<rep 34h>             	    times 52 db 0	
 43997                                  
 43998                                  country_file_signature:
 43999 000045B6 FF434F554E545259        	db	0FFh,'COUNTRY'
 44000                                  
 44001                                  cntrycodepage_id: 
 44002 000045BE 0000                    	dw	0 	
 44003                                  
 44004                                  ;ENDIF ; CONFIGPROC
 44005                                  
 44006                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44007                                  ; (SYSINIT:5081h)
 44008                                  
 44009                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44010                                  ;ifdef	MULTI_CONFIG
 44011 000045C0 00                      newcmd:  db	0			; non-zero if non-std shell specified
 44012 000045C1 40                      tmplate: db	64                      ; must precede commnd
 44013                                  ;endif
 44014                                  
 44015                                  ;ifdef ROMEXEC
 44016                                  ;	db      7                       ; size of commnd line (excl. null)
 44017                                  ;commnd: db	"COMMAND",0
 44018                                  ;	db	56 dup (0)
 44019                                  ;else
 44020                                  	; 02/11/2022
 44021 000045C2 0C                      	db	12                      ; size of commnd line (excl. null)
 44022 000045C3 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 44022 000045CC 434F4D00           
 44023                                  	;db	51 dup (0)
 44024 000045D0 00<rep 33h>             	times	51 db 0
 44025                                  ;endif
 44026                                  
 44027                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44028                                  ;ifdef	MULTI_CONFIG
 44029 00004603 5C434F4D4D414E442E-     commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 44029 0000460C 434F4D00           
 44030 00004610 022F5000                	 db	2,"/P",0 		; followed by their respective alternate
 44031 00004614 5C4D53444F535C434F-     commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 44031 0000461D 4D4D414E442E434F4D-
 44031 00004626 00                 
 44032 00004627 0B413A5C4D53444F53-     	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 44032 00004630 202F5000           
 44033 00004634 5C444F535C434F4D4D-     commnd4: db	"\DOS\COMMAND.COM",0 	;
 44033 0000463D 414E442E434F4D00   
 44034 00004645 09413A5C444F53202F-     	 db	9,"A:\DOS /P",0		;
 44034 0000464E 5000               
 44035                                  def_swchr:	
 44036 00004650 00                      	 db	0			; default switchchar (referenced as command_line-1)
 44037                                  ;endif
 44038                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44039                                  command_line:
 44040 00004651 022F50                  	db	2,"/P"			; default command.com args
 44041                                  	;db	125 dup (0)
 44042 00004654 00<rep 7Dh>             	times	125 db 0
 44043                                  
 44044                                  pathstring:
 44045                                  	;db	64 dup (0)
 44046 000046D1 00<rep 40h>             	times	64 db 0
 44047                                  
 44048                                  
 44049                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44050                                  ; (SYSINIT:51D3h)
 44051                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44052                                  ;%if 0
 44053                                  
 44054                                  dae_flag:
 44055 00004711 00                      	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 44056                                  
 44057                                  ;ifdef	MULTI_CONFIG
 44058                                  
 44059                                  ; 04/03/2022- Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 44060                                  MAX_MULTI_CONFIG equ 9	; max # of multi-config menu items supported
 44061                                  
 44062                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 44063                                  
 44064 00004712 07                      bMenuColor:	db      07h ; 1Fh       ; default fgnd/bgnd color
 44065 00004713 00                      bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 44066 00004714 05                      		db      5               ; video page function # (KEEP AFTER bMenuPage)
 44067 00004715 00                      bLastCol:	db      0               ; ending column on status line
 44068 00004716 18                      bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 44069 00004717 00                      bDisableUI:	db      0               ; 1=disable clean/interactive
 44070                                                                          ; 2=disable default 2-second delay
 44071 00004718 00                      bCRTPage:	db      0               ; value saved from BIOS data area
 44072 00004719 0000                    wCRTStart:	dw      0               ; value saved from BIOS data area
 44073 0000471B 00                      bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 44074 0000471C 01                      bDefBlock:	db      1               ; default block #
 44075 0000471D 00                      bMaxBlock:	db      0               ; maxmimum block #
 44076 0000471E 0000                    offDefBlock:	dw      0               ; offset of name of default block (if any)
 44077 00004720 FF                      secTimeOut:	db      -1 ; 0FFh       ; # of seconds for timeout (-1 == indefinite)
 44078 00004721 00                      secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 44079 00004722 00<rep Ah>              abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 44080 0000472C 0000<rep Ah>            aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 44081 00004740 0000<rep Ah>            aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 44082                                  
 44083 00004754 434F4E4649473D00        szBoot:		db      "CONFIG=",0
 44084 0000475C 4D454E5500              szMenu:		db      "MENU",0
 44085 00004761 434F4D4D4F4E00          szCommon:	db      "COMMON",0
 44086                                  
 44087                                  ;endif	;MULTI_CONFIG
 44088                                  
 44089                                  	; 10/09/2023
 44090                                  	; MSDOS 6.21 IO.SYS - SYSINIT:5229h 	
 44091                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:546Eh)
 44092                                  
 44093                                  comtab:	 ; label byte
 44094                                  
 44095                                  ;            cmd len    command         cmd code
 44096                                  ;            -------    -------         --------
 44097                                  
 44098                                  ;ifdef MULTI_CONFIG
 44099 00004768 015B5B                          db      1,      "[",            CONFIG_BEGIN
 44100                                  ;endif
 44101 0000476B 05425245414B43                  db      5,      "BREAK",        CONFIG_BREAK
 44102 00004772 074255464645525342              db      7,      "BUFFERS",      CONFIG_BUFFERS
 44103 0000477B 07434F4D4D454E5459              db      7,      "COMMENT",      CONFIG_COMMENT
 44104 00004784 07434F554E54525951              db      7,      "COUNTRY",      CONFIG_COUNTRY
 44105 0000478D 0644455649434544                db      6,      "DEVICE",       CONFIG_DEVICE
 44106 00004795 0A4445564943454849-             db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 44106 0000479E 474855             
 44107 000047A1 03444F5348                      db      3,      "DOS",          CONFIG_DOS
 44108 000047A6 08445249565041524D-             db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 44108 000047AF 50                 
 44109 000047B0 044643425358                    db      4,      "FCBS",         CONFIG_FCBS
 44110 000047B6 0546494C455346                  db      5,      "FILES",        CONFIG_FILES
 44111                                  ;ifdef MULTI_CONFIG
 44112 000047BD 07494E434C5544454A              db      7,      "INCLUDE",      CONFIG_INCLUDE
 44113                                  ;endif
 44114 000047C6 07494E5354414C4C49              db      7,      "INSTALL",      CONFIG_INSTALL
 44115 000047CF 0B494E5354414C4C48-             db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 44115 000047D8 49474857           
 44116 000047DC 094C41535444524956-             db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 44116 000047E5 454C               
 44117                                  ;ifdef MULTI_CONFIG
 44118 000047E7 075355424D454E554F              db      7,      "SUBMENU",      CONFIG_SUBMENU
 44119 000047F0 094D454E55434F4C4F-             db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 44119 000047F9 5252               
 44120 000047FB 0B4D454E5544454641-             db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 44120 00004804 554C5441           
 44121 00004808 084D454E554954454D-             db      8,      "MENUITEM",     CONFIG_MENUITEM
 44121 00004811 45                 
 44122                                  ;endif
 44123 00004812 0A4D554C5449545241-             db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 44123 0000481B 434B4D             
 44124                                  ;ifdef MULTI_CONFIG
 44125 0000481E 074E554D4C4F434B4E              db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 44126                                  ;endif
 44127 00004827 0352454D30                      db      3,      "REM",          CONFIG_REM
 44128                                  ;ifdef MULTI_CONFIG
 44129 0000482C 0353455456                      db      3,      "SET",          CONFIG_SET
 44130                                  ;endif
 44131 00004831 055348454C4C53                  db      5,      "SHELL",        CONFIG_SHELL
 44132                                  ;if    STACKSW
 44133 00004838 06535441434B534B                db      6,      "STACKS",       CONFIG_STACKS
 44134                                  ;endif
 44135 00004840 085357495443484553-             db      8,      "SWITCHES",     CONFIG_SWITCHES
 44135 00004849 31                 
 44136 0000484A 00                      	db	0
 44137                                  
 44138                                  	; 10/09/2023
 44139                                  ;aDosdata:  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:5550h 	
 44140                                  	;db	7,	"DOSDATA"	CONFIG_DOSDATRA ;  'T'
 44141                                  	;db	0
 44142                                  
 44143                                  ;%endif ; 02/11/2022
 44144                                  
 44145                                  ; 01/01/2023 - Retro DOS v4.2
 44146                                  %if 0
 44147                                  
 44148                                  comtab:
 44149                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44150                                  	; (SYSINIT:38EDh)
 44151                                  	db      7,      "BUFFERS",      CONFIG_BUFFERS
 44152                                  	db      5,      "BREAK",        CONFIG_BREAK
 44153                                  	db      6,      "DEVICE",       CONFIG_DEVICE
 44154                                  	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 44155                                  	db      5,      "FILES",        CONFIG_FILES
 44156                                  	db      4,      "FCBS",         CONFIG_FCBS
 44157                                  	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 44158                                  	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 44159                                  	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 44160                                  	db      6,      "STACKS",       CONFIG_STACKS
 44161                                  	db      7,      "COUNTRY",      CONFIG_COUNTRY
 44162                                  	db      5,      "SHELL",        CONFIG_SHELL
 44163                                  	db      7,      "INSTALL",      CONFIG_INSTALL
 44164                                  	db      7,      "COMMENT",      CONFIG_COMMENT
 44165                                  	db      3,      "REM",          CONFIG_REM
 44166                                  	db      8,      "SWITCHES",     CONFIG_SWITCHES
 44167                                  	db      3,      "DOS",          CONFIG_DOS
 44168                                  	db	0
 44169                                  
 44170                                  %endif
 44171                                  
 44172                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44173                                  ; (SYSINIT:530Ch)
 44174                                  
 44175                                  deviceparameters:	
 44176                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 44177                                  devp.specialfunc:	; deviceparameters +
 44178 0000484B 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 44179                                  devp.devtype:
 44180 0000484C 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 44181                                  devp.devattr:
 44182 0000484D 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 44183                                  devp.cylinders:
 44184 0000484F 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 44185                                  
 44186                                  ; 04/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
 44187                                  
 44188                                  	;times	286	db 0
 44189                                  devp.mediatype:		; A_DEVICEPARAMETERS.DP_MEDIATYPE
 44190 00004851 00                      	db	0
 44191                                  devp.bpb:		; A_DEVICEPARAMETERS.DP_BPB
 44192                                  devp.bps:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR
 44193 00004852 0000                    	dw	0
 44194                                  devp.secperclus:	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER	
 44195 00004854 00                      	db	0	
 44196 00004855 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_RESERVEDSECTORS
 44197 00004857 00                      	db	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_NUMBEROFFATS
 44198 00004858 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_ROOTENTRIES
 44199                                  devp.totalsecs:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS
 44200 0000485A 0000                    	dw	0
 44201                                  devp.mediaid:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR
 44202 0000485C 00                      	db	0
 44203 0000485D 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERFAT
 44204                                  devp.spt:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK
 44205 0000485F 0000                    	dw	0
 44206                                  devp.heads:		; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS
 44207 00004861 0000                    	dw	0	
 44208                                  
 44209                                  	;times	68 db 0	; PCDOS 7.1  (FAT32 BPB)
 44210                                  	;times	14 db 0	; MSDOS 6.21
 44211 00004863 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HIDDENSECTORS
 44212 00004865 0000                    	dw	0
 44213 00004867 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BIGTOTALSECTORS
 44214 00004869 0000                    	dw	0
 44215 0000486B 00<rep 6h>              	times	6 db 0	
 44216                                  
 44217                                  devp.trktblents:
 44218 00004871 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES
 44219                                  devp.sectbl:		; A_DEVICEPARAMETERS.DP_SECTORTABLE
 44220 00004873 00<rep FCh>             	times	252 db 0 ; MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 44221                                  			; 63*4 bytes
 44222                                  
 44223                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44224                                  ; (SYSINIT:5430h)
 44225                                  	
 44226 0000496F 0200                    hlim:	dw	2
 44227 00004971 0900                    slim:	dw	9
 44228                                  
 44229 00004973 00                      drive:	db	0
 44230                                  
 44231                                  switches:
 44232 00004974 0000                    	dw	0
 44233                                  
 44234                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44235                                  ; (SYSINIT:5437h)
 44236                                  
 44237                                  ; the following are the recommended bpbs for the media that
 44238                                  ; we know of so far.
 44239                                  
 44240                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44241                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 44242                                  
 44243                                  ; 27/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44244                                  ; PCDOS 7.1 IBMBIO.COM - SYSINIT:56BBh	
 44245                                  
 44246                                  ; 48 tpi diskettes
 44247                                  
 44248 00004976 0002                    bpb48t	dw	512
 44249 00004978 02                      	db	2
 44250 00004979 0100                    	dw	1
 44251 0000497B 02                      	db	2
 44252 0000497C 7000                    	dw	112
 44253 0000497E D002                    	dw	2*9*40 ; 720
 44254 00004980 FD                      	db	0FDh
 44255 00004981 0200                    	dw	2
 44256 00004983 0900                    	dw	9
 44257 00004985 0200                    	dw	2
 44258 00004987 00000000                	dd	0
 44259 0000498B 00000000                        dd      0
 44260                                  	; 27/12/2023
 44261 0000498F 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44262 000049AB 90                      	db	90h	
 44263                                  
 44264                                  ; 96tpi diskettes
 44265                                  
 44266 000049AC 0002                    bpb96t:	dw	512
 44267 000049AE 01                      	db	1
 44268 000049AF 0100                    	dw	1
 44269 000049B1 02                      	db	2
 44270 000049B2 E000                    	dw	224
 44271 000049B4 6009                    	dw	2*15*80 ; 2400
 44272 000049B6 F9                      	db	0F9h
 44273 000049B7 0700                    	dw	7
 44274 000049B9 0F00                    	dw	15
 44275 000049BB 0200                    	dw	2
 44276 000049BD 00000000                	dd	0
 44277 000049C1 00000000                        dd      0
 44278                                  	; 27/12/2023
 44279 000049C5 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44280 000049E1 90                      	db	90h	
 44281                                  
 44282                                  ; 3 1/2 inch diskette bpb
 44283                                  
 44284 000049E2 0002                    bpb35:	dw	512
 44285 000049E4 02                      	db	2
 44286 000049E5 0100                    	dw	1
 44287 000049E7 02                      	db	2
 44288 000049E8 7000                    	dw	112
 44289 000049EA A005                    	dw	2*9*80 ; 1440
 44290 000049EC F9                      	db	0F9h
 44291 000049ED 0300                    	dw	3
 44292 000049EF 0900                    	dw	9
 44293 000049F1 0200                    	dw	2
 44294 000049F3 00000000                	dd	0
 44295 000049F7 00000000                        dd      0
 44296                                  	; 27/12/2023
 44297 000049FB 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44298 00004A17 90                      	db	90h
 44299                                        
 44300 00004A18 0002                    bpb35h:	dw	512
 44301 00004A1A 01                      	db	1
 44302 00004A1B 0100                    	dw	1
 44303 00004A1D 02                      	db	2
 44304 00004A1E E000                    	dw	224
 44305 00004A20 400B                    	dw	2*18*80 ; 2880
 44306 00004A22 F0                      	db	0F0h
 44307 00004A23 0900                    	dw	9
 44308 00004A25 1200                    	dw	18
 44309 00004A27 0200                    	dw	2
 44310 00004A29 00000000                	dd	0
 44311 00004A2D 00000000                        dd      0
 44312                                  	; 27/12/2023
 44313 00004A31 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44314 00004A4D 90                      	db	90h
 44315                                  
 44316                                  ; m037 - BEGIN
 44317                                  
 44318 00004A4E 0002                    bpb288:	dw	512
 44319 00004A50 02                      	db	2
 44320 00004A51 0100                    	dw	1
 44321 00004A53 02                      	db	2
 44322 00004A54 F000                    	dw	240
 44323 00004A56 8016                    	dw	2*36*80 ; 5760
 44324 00004A58 F0                      	db	0F0h
 44325 00004A59 0900                    	dw	9
 44326 00004A5B 2400                    	dw	36
 44327 00004A5D 0200                    	dw	2
 44328 00004A5F 00000000                	dd	0
 44329 00004A63 00000000                        dd      0
 44330                                  	; 27/12/2023
 44331 00004A67 00<rep 1Ch>             	times	28 db 0            ; FAT32 extensions (to BDS)
 44332 00004A83 90                      	db	90h
 44333                                  
 44334                                  ; m037 - END
 44335                                  
 44336                                  ; 12/05/2019
 44337                                  
 44338                                  align 2
 44339                                  
 44340                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44341                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 44342                                  
 44343 00004A84 [7649]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 44344 00004A86 [AC49]                  	    dw	    bpb96t		; 96tpi drives
 44345 00004A88 [E249]                  	    dw	    bpb35		; 3.5" drives
 44346                                  ; the following are not supported, so default to 3.5" media layout
 44347 00004A8A [E249]                  	    dw	    bpb35		; not used - 8" drives
 44348 00004A8C [E249]                  	    dw	    bpb35		; not used - 8" drives
 44349 00004A8E [E249]                  	    dw	    bpb35		; not used - hard files
 44350 00004A90 [E249]                  	    dw	    bpb35		; not used - tape drives
 44351 00004A92 [184A]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 44352 00004A94 [E249]                  	    dw	    bpb35		; ERIMO				m037
 44353 00004A96 [4E4A]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 44354                                  
 44355                                  switchlist: 
 44356 00004A98 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 44357                                  
 44358                                  ;----------------------------------------------------------------------------
 44359                                  ; Messages
 44360                                  ;----------------------------------------------------------------------------
 44361                                  
 44362                                  ; 19/04/2019 - Retro DOS v4.0
 44363                                  
 44364                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 44365                                  
 44366 00004AA1 00                      	db 	0
 44367                                  
 44368                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44369                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 44370                                  
 44371                                  badopm:
 44372 00004AA2 0D0A                    	db	0Dh,0Ah 
 44373 00004AA4 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 44373 00004AAD 7A656420636F6D6D61-
 44373 00004AB6 6E6420696E20434F4E-
 44373 00004ABF 4649472E535953     
 44374                                  crlfm:
 44375 00004AC6 0D0A24                  	db	0Dh,0Ah,'$'
 44376                                  badparm:
 44377 00004AC9 0D0A                    	db	0Dh,0Ah
 44378 00004ACB 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 44378 00004AD4 6E64206F7220706172-
 44378 00004ADD 616D6574657273202D-
 44378 00004AE6 2024               
 44379                                  badsiz_pre:
 44380 00004AE8 0D0A                    	db	0Dh,0Ah
 44381 00004AEA 536563746F72207369-     	db	'Sector size too large in file $'
 44381 00004AF3 7A6520746F6F206C61-
 44381 00004AFC 72676520696E206669-
 44381 00004B05 6C652024           
 44382                                  badld_pre:
 44383 00004B09 0D0A                    	db	0Dh,0Ah
 44384 00004B0B 426164206F72206D69-     	db	'Bad or missing $'
 44384 00004B14 7373696E672024     
 44385                                  badcom:
 44386 00004B1B 436F6D6D616E642049-     	db	'Command Interpreter',0
 44386 00004B24 6E7465727072657465-
 44386 00004B2D 7200               
 44387                                  badcountry:
 44388 00004B2F 0D0A                    	db	0Dh,0Ah
 44389 00004B31 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 44389 00004B3A 6F756E74727920636F-
 44389 00004B43 6465206F7220636F64-
 44389 00004B4C 6520706167650D0A24 
 44390                                  badcountrycom:
 44391 00004B55 0D0A                    	db	0Dh,0Ah
 44392 00004B57 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 44392 00004B60 434F554E5452592063-
 44392 00004B69 6F6D6D616E640D0A24 
 44393                                  insufmemory:
 44394 00004B72 0D0A                    	db	0Dh,0Ah
 44395 00004B74 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 44395 00004B7D 656E74206D656D6F72-
 44395 00004B86 7920666F7220434F55-
 44395 00004B8F 4E5452592E53595320-
 44395 00004B98 66696C650D0A24     
 44396                                  badmem:
 44397 00004B9F 0D0A                    	db	0Dh,0Ah
 44398 00004BA1 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 44398 00004BAA 74696F6E20746F6F20-
 44398 00004BB3 6C6172676520666F72-
 44398 00004BBC 206D656D6F72790D0A-
 44398 00004BC5 24                 
 44399                                  badblock:
 44400 00004BC6 0D0A                    	db	0Dh,0Ah
 44401 00004BC8 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 44401 00004BD1 626C6F636B20646576-
 44401 00004BDA 696365730D0A24     
 44402                                  badstack:
 44403 00004BE1 0D0A                    	db	0Dh,0Ah
 44404 00004BE3 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 44404 00004BEC 5441434B2070617261-
 44404 00004BF5 6D65746572730D0A24 
 44405                                  	; 18/12/2022
 44406                                  ;badorder:
 44407                                  	;db	0Dh,0Ah
 44408                                  	;db	'Incorrect order in CONFIG.SYS line $'
 44409                                  errorcmd:
 44410 00004BFE 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 44410 00004C07 434F4E4649472E5359-
 44410 00004C10 53206C696E652024   
 44411                                  
 44412                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44413                                  ; (SYSINIT:566Eh)
 44414                                  
 44415                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44416                                  ;%if 0
 44417                                  
 44418 00004C18 4F4E                    OnOff:	db	'ON'
 44419 00004C1A 4F4646                  OnOff2:	db	'OFF'
 44420                                  
 44421                                  	; 04/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44422                                  	; (SYSINIT:5673h)
 44423                                  ;StartMsg:
 44424                                  ;	db	'Starting MS-DOS...',0Dh,0Ah
 44425                                  ;	db	0Ah,0
 44426                                  
 44427                                  	; 17/12/2023 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMBIO.COM)
 44428                                  	; (SYSINIT:58F7h)
 44429                                  StartMsg:
 44430 00004C1D 5374617274696E6720-     	db	'Starting PC DOS...',0Dh,0Ah
 44430 00004C26 504320444F532E2E2E-
 44430 00004C2F 0D0A               
 44431 00004C31 0A00                    	db	0Ah,0
 44432                                  
 44433                                  _$PauseMsg:
 44434                                  	; 17/12/2023
 44435                                  	;db	'Press any key to continue . . .',0Dh,0Ah,'$'
 44436                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:590Dh)
 44437 00004C33 507265737320616E79-     	db	'Press any key to continue...',0Dh,0Ah,'$'
 44437 00004C3C 206B657920746F2063-
 44437 00004C45 6F6E74696E75652E2E-
 44437 00004C4E 2E0D0A24           
 44438                                  _$CleanMsg:
 44439                                  	;db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 44440                                  	; 17/12/2023
 44441 00004C52 504320444F53206973-     	db	'PC DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 44441 00004C5B 20627970617373696E-
 44441 00004C64 6720796F757220434F-
 44441 00004C6D 4E4649472E53595320-
 44441 00004C76 616E64204155544F45-
 44441 00004C7F 5845432E4241542066-
 44441 00004C88 696C65732E0D0A24   
 44442                                  _$InterMsg:
 44443                                  	;db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 44444                                  	; 17/12/2023
 44445 00004C90 504320444F53207769-     	db	'PC DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 44445 00004C99 6C6C2070726F6D7074-
 44445 00004CA2 20796F7520746F2063-
 44445 00004CAB 6F6E6669726D206561-
 44445 00004CB4 636820434F4E464947-
 44445 00004CBD 2E53595320636F6D6D-
 44445 00004CC6 616E642E0D0A24     
 44446                                  _$MenuHeader:
 44447 00004CCD 0D0A                    	db	0Dh,0Ah
 44448                                  	; 17/12/2023
 44449                                  	;db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 44450                                  	;db	'  '
 44451                                  	;times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 44452                                  	;db 	0Dh,0Ah,'$'
 44453                                  	; 04/08/2023 (PCDOS 7.10 - IBMBIO.COM SYSINIT:59A7h)
 44454 00004CCF 2020504320444F5320-     	db	'  PC DOS 7.1 Startup Menu',0Dh,0Ah
 44454 00004CD8 372E31205374617274-
 44454 00004CE1 7570204D656E750D0A 
 44455 00004CEA 2020                    	db	'  '
 44456 00004CEC CD<rep 17h>             	times	23 db (0CDh)  ; ALT 205 ; '=======================' ; 06/08/2023
 44457 00004D03 0D0A24                  	db 	0Dh,0Ah,'$'
 44458                                  _$MenuPrmpt:
 44459 00004D06 2020456E7465722061-     	db	'  Enter a choice: $'
 44459 00004D0F 2063686F6963653A20-
 44459 00004D18 24                 
 44460                                  _$StatusLine:
 44461 00004D19 46353D427970617373-     	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS '
 44461 00004D22 207374617274757020-
 44461 00004D2B 66696C65732046383D-
 44461 00004D34 436F6E6669726D2065-
 44461 00004D3D 616368206C696E6520-
 44461 00004D46 6F6620434F4E464947-
 44461 00004D4F 2E53595320         
 44462 00004D54 616E64204155544F45-     	db	'and AUTOEXEC.BAT [ ]$'
 44462 00004D5D 5845432E424154205B-
 44462 00004D66 205D24             
 44463                                  _$InterPrmpt:
 44464 00004D69 205B592C4E5D3F24        	db	' [Y,N]?$'
 44465                                  	; 04/08/2023
 44466                                  	;db	' [Y,N,ESC]?$' ; PCDOS 7.1 - IBMBIO.COM 
 44467 00004D71 59455324                _$YES:	db	'YES$'
 44468 00004D75 4E4F2024                _$NO:	db	'NO $'
 44469                                  _$TimeOut:
 44470 00004D79 54696D652072656D61-     	db	'Time remaining: $'
 44470 00004D82 696E696E673A2024   
 44471                                  badcomprmpt:
 44472 00004D8A 456E74657220636F72-     	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 44472 00004D93 72656374206E616D65-
 44472 00004D9C 206F6620436F6D6D61-
 44472 00004DA5 6E6420496E74657270-
 44472 00004DAE 726574657220286567-
 44472 00004DB7 2C20433A5C434F4D4D-
 44472 00004DC0 414E442E434F4D29   
 44473 00004DC8 0D0A24                  	db	0Dh,0Ah,'$'
 44474                                  _$AutoPrmpt:
 44475 00004DCB 50726F636573732041-     	db	'Process AUTOEXEC.BAT [Y,N]?$'
 44475 00004DD4 55544F455845432E42-
 44475 00004DDD 4154205B592C4E5D3F-
 44475 00004DE6 24                 
 44476                                  
 44477                                  ;%endif ; 02/11/2022
 44478                                  
 44479                                  ; 01/01/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS)
 44480                                  ; (SYSINIT:5840h)
 44481                                  
 44482                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 44483                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 44484                                  
 44485                                  TooManyDrivesMsg:
 44486 00004DE7 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 44486 00004DF0 4C6F676963616C2064-
 44486 00004DF9 726976657320706173-
 44486 00004E02 74205A3A2065786973-
 44486 00004E0B 7420616E642077696C-
 44486 00004E14 6C2062652069676E6F-
 44486 00004E1D 7265640D0A24       
 44487                                  
 44488                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 44489                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 44490                                  	;db	7 dup(0)
 44491                                  
 44492                                  	;times	7 db 0
 44493                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 44494                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 44495                                  	; 09/12/2022
 44496                                  	;times 4 db 0
 44497                                  
 44498                                  ;----------------------------------------------------------------------------
 44499                                  		; 09/12/2022
 44500                                  		;db 0
 44501                                  
 44502                                  number3div	equ ($-SYSINIT$)
 44503                                  number3mod	equ (number3div % 16)
 44504                                  
 44505                                  %if number3mod>0 & number3mod<16
 44506 00004E23 00<rep Dh>              		times (16-number3mod) db 0
 44507                                  %endif
 44508                                  
 44509                                  ;---------------------------------------------------------------------------- 
 44510                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS 
 44511                                  ;---------------------------------------------------------------------------- 
 44512                                  
 44513                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 44514                                  
 44515                                  ;----------------------------------------------------------------------------
 44516                                  ; 20/04/2019 - Retro DOS v4.0
 44517                                  
 44518                                  ; 09/12/2022
 44519                                  ;
 44520                                  ;bss_start:
 44521                                  ;
 44522                                  ;ABSOLUTE bss_start
 44523                                  ;
 44524                                  ;alignb 16
 44525                                  
 44526                                  SI_end:  ; SI_end equ $
 44527                                  
 44528                                  ;----------------------------------------------------------------------------
 44529                                  
 44530                                  ;sysinitseg	ends
 44531                                  
 44532                                  ; ***************************************************************************
 44533                                  
 44534                                  ; 04/01/2023 - MSDOS 6.21 SYSINIT:SI_end = SYSINIT:58A0h (IOSYS:9F46h)
 44535                                  ; 09/12/2022 - MSDOS 5.0 SYSINIT:SI_end = SYSINIT:3D20h
 44536                                  
 44537                                  SYSINITSIZE	equ SI_end - SYSINIT$
 44538                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 44539                                  
 44540                                  ;----------------------------------------------------------------------------
 44541                                  ; End of Retro DOS v4.2 IO.SYS source by Erdogan Tan - 04/01/2023 -
 44542                                  ;----------------------------------------------------------------------------
